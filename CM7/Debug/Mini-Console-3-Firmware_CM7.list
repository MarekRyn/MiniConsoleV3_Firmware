
Mini-Console-3-Firmware_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104b8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08010750  08010750  00020750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c2c  08010c2c  0004028c  2**0
                  CONTENTS
  4 .ARM          00000000  08010c2c  08010c2c  0004028c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010c2c  08010c2c  0004028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c2c  08010c2c  00020c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c30  08010c30  00020c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08010c34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027c8  24000010  08010c44  00030010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240027d8  08010c44  000327d8  2**0
                  ALLOC
 11 .sh0_ram      00000000  30040000  30040000  0004028c  2**0
                  CONTENTS
 12 .sh1_ram      00000000  38008000  38008000  0004028c  2**0
                  CONTENTS
 13 .buf_ram      0000028c  38000000  38000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bk_ram       00000000  38800000  38800000  0004028c  2**0
                  CONTENTS
 15 .qspi         00000000  90000000  90000000  0004028c  2**0
                  CONTENTS
 16 .ARM.attributes 0000002e  00000000  00000000  0004028c  2**0
                  CONTENTS, READONLY
 17 .comment      00000043  00000000  00000000  000402ba  2**0
                  CONTENTS, READONLY
 18 .debug_info   000206ab  00000000  00000000  000402fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00005e99  00000000  00000000  000609a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001688  00000000  00000000  00066848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00001161  00000000  00000000  00067ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003f8af  00000000  00000000  00069031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00024a5c  00000000  00000000  000a88e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0013e3a4  00000000  00000000  000cd33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00005748  00000000  00000000  0020b6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000057  00000000  00000000  00210e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010738 	.word	0x08010738

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08010738 	.word	0x08010738

080002d8 <_DRV_QSPI_CheckStatus>:

#include "IS25LP128F.h"


static uint8_t	_DRV_QSPI_CheckStatus(QUADSPI_TypeDef * hqspi, uint8_t mode, uint8_t mask, uint8_t match) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	4608      	mov	r0, r1
 80002e2:	4611      	mov	r1, r2
 80002e4:	461a      	mov	r2, r3
 80002e6:	4603      	mov	r3, r0
 80002e8:	70fb      	strb	r3, [r7, #3]
 80002ea:	460b      	mov	r3, r1
 80002ec:	70bb      	strb	r3, [r7, #2]
 80002ee:	4613      	mov	r3, r2
 80002f0:	707b      	strb	r3, [r7, #1]

	// 1. Configure command
	BSP_STM32_QSPI_CfgNewCommand();
 80002f2:	f008 fadd 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	2000      	movs	r0, #0
 80002fc:	f008 fb2a 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_CfgAutoPooling(mask, match, 0x10, QSPI_MATCH_MODE_AND);
 8000300:	78b8      	ldrb	r0, [r7, #2]
 8000302:	7879      	ldrb	r1, [r7, #1]
 8000304:	2300      	movs	r3, #0
 8000306:	2210      	movs	r2, #16
 8000308:	f008 fb3c 	bl	8008984 <BSP_STM32_QSPI_CfgAutoPooling>

	switch (mode) {
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b01      	cmp	r3, #1
 8000310:	dc02      	bgt.n	8000318 <_DRV_QSPI_CheckStatus+0x40>
 8000312:	2b00      	cmp	r3, #0
 8000314:	da03      	bge.n	800031e <_DRV_QSPI_CheckStatus+0x46>
 8000316:	e01a      	b.n	800034e <_DRV_QSPI_CheckStatus+0x76>
 8000318:	2b02      	cmp	r3, #2
 800031a:	d00c      	beq.n	8000336 <_DRV_QSPI_CheckStatus+0x5e>
 800031c:	e017      	b.n	800034e <_DRV_QSPI_CheckStatus+0x76>
	case QSPI_MODE_SPI:
	case QSPI_MODE_QSPI:
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 800031e:	2105      	movs	r1, #5
 8000320:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000324:	f008 fad0 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, 0x00000000, 1);
 8000328:	2201      	movs	r2, #1
 800032a:	2100      	movs	r1, #0
 800032c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000330:	f008 faf8 	bl	8008924 <BSP_STM32_QSPI_CfgData>
		break;
 8000334:	e00d      	b.n	8000352 <_DRV_QSPI_CheckStatus+0x7a>
	case QSPI_MODE_QPI:
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_4_LINES, QSPI_CMD_RDSR);
 8000336:	2105      	movs	r1, #5
 8000338:	f44f 7040 	mov.w	r0, #768	; 0x300
 800033c:	f008 fac4 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_4_LINES, 0x00000000, 1);
 8000340:	2201      	movs	r2, #1
 8000342:	2100      	movs	r1, #0
 8000344:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 8000348:	f008 faec 	bl	8008924 <BSP_STM32_QSPI_CfgData>
		break;
 800034c:	e001      	b.n	8000352 <_DRV_QSPI_CheckStatus+0x7a>
	default:
		return BSP_ERROR;
 800034e:	2301      	movs	r3, #1
 8000350:	e008      	b.n	8000364 <_DRV_QSPI_CheckStatus+0x8c>
	}

	// 2. Execute command in Auto Pooling Mode
	if (BSP_STM32_QSPI_StartAutoPooling(hqspi)) return BSP_TIMEOUT;
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f008 fbf4 	bl	8008b40 <BSP_STM32_QSPI_StartAutoPooling>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <_DRV_QSPI_CheckStatus+0x8a>
 800035e:	2303      	movs	r3, #3
 8000360:	e000      	b.n	8000364 <_DRV_QSPI_CheckStatus+0x8c>

	return BSP_OK;
 8000362:	2300      	movs	r3, #0

}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <_DRV_QSPI_WriteEnable>:



static uint8_t	_DRV_QSPI_WriteEnable(QUADSPI_TypeDef * hqspi, uint8_t mode) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	70fb      	strb	r3, [r7, #3]

	// 1. COnfigure command
	BSP_STM32_QSPI_CfgNewCommand();
 8000378:	f008 fa9a 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800037c:	2200      	movs	r2, #0
 800037e:	2100      	movs	r1, #0
 8000380:	2000      	movs	r0, #0
 8000382:	f008 fae7 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>

	switch (mode) {
 8000386:	78fb      	ldrb	r3, [r7, #3]
 8000388:	2b01      	cmp	r3, #1
 800038a:	dc02      	bgt.n	8000392 <_DRV_QSPI_WriteEnable+0x26>
 800038c:	2b00      	cmp	r3, #0
 800038e:	da03      	bge.n	8000398 <_DRV_QSPI_WriteEnable+0x2c>
 8000390:	e00e      	b.n	80003b0 <_DRV_QSPI_WriteEnable+0x44>
 8000392:	2b02      	cmp	r3, #2
 8000394:	d006      	beq.n	80003a4 <_DRV_QSPI_WriteEnable+0x38>
 8000396:	e00b      	b.n	80003b0 <_DRV_QSPI_WriteEnable+0x44>
	case QSPI_MODE_SPI:
	case QSPI_MODE_QSPI:
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WREN);
 8000398:	2106      	movs	r1, #6
 800039a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800039e:	f008 fa93 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
		break;
 80003a2:	e005      	b.n	80003b0 <_DRV_QSPI_WriteEnable+0x44>
	case QSPI_MODE_QPI:
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_4_LINES, QSPI_CMD_WREN);
 80003a4:	2106      	movs	r1, #6
 80003a6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80003aa:	f008 fa8d 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
		break;
 80003ae:	bf00      	nop
	}

	// 2. Execute command
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f008 fb65 	bl	8008a80 <BSP_STM32_QSPI_StartTransmit>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <_DRV_QSPI_WriteEnable+0x54>
 80003bc:	2301      	movs	r3, #1
 80003be:	e000      	b.n	80003c2 <_DRV_QSPI_WriteEnable+0x56>

    return BSP_OK;
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <BSP_DRV_QSPI_Reset>:



uint8_t	BSP_DRV_QSPI_Reset(QUADSPI_TypeDef * hqspi) {
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b082      	sub	sp, #8
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]

	// 1. Exit QPI mode and fallback to SPI 1-bit mode
	BSP_STM32_QSPI_CfgNewCommand();
 80003d2:	f008 fa6d 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_4_LINES, QSPI_CMD_QPIDI);
 80003d6:	21f5      	movs	r1, #245	; 0xf5
 80003d8:	f44f 7040 	mov.w	r0, #768	; 0x300
 80003dc:	f008 fa74 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2100      	movs	r1, #0
 80003e4:	2000      	movs	r0, #0
 80003e6:	f008 fab5 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_StartTransmit(hqspi);  // This function can exit with error if chip was not in QPI mode - just ignore it
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f008 fb48 	bl	8008a80 <BSP_STM32_QSPI_StartTransmit>

	// 2. Sending Reset Enable command

    BSP_STM32_QSPI_CfgNewCommand();
 80003f0:	f008 fa5e 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RSTEN);
 80003f4:	2166      	movs	r1, #102	; 0x66
 80003f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003fa:	f008 fa65 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	2000      	movs	r0, #0
 8000404:	f008 faa6 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f008 fb39 	bl	8008a80 <BSP_STM32_QSPI_StartTransmit>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <BSP_DRV_QSPI_Reset+0x4e>
 8000414:	2301      	movs	r3, #1
 8000416:	e022      	b.n	800045e <BSP_DRV_QSPI_Reset+0x94>

	// 3. Sending Reset command

    BSP_STM32_QSPI_CfgNewCommand();
 8000418:	f008 fa4a 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RST);
 800041c:	2199      	movs	r1, #153	; 0x99
 800041e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000422:	f008 fa51 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	2000      	movs	r0, #0
 800042c:	f008 fa92 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f008 fb25 	bl	8008a80 <BSP_STM32_QSPI_StartTransmit>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <BSP_DRV_QSPI_Reset+0x76>
 800043c:	2301      	movs	r3, #1
 800043e:	e00e      	b.n	800045e <BSP_DRV_QSPI_Reset+0x94>

	// 4. Waiting for chip ready status
    BSP_Delay(10); // Delay so CE line can go HIGH
 8000440:	200a      	movs	r0, #10
 8000442:	f005 fadd 	bl	8005a00 <BSP_Delay>
    if (_DRV_QSPI_CheckStatus(hqspi, QSPI_MODE_SPI, 0x01, 0x00)) return BSP_ERROR;
 8000446:	2300      	movs	r3, #0
 8000448:	2201      	movs	r2, #1
 800044a:	2100      	movs	r1, #0
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ff43 	bl	80002d8 <_DRV_QSPI_CheckStatus>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <BSP_DRV_QSPI_Reset+0x92>
 8000458:	2301      	movs	r3, #1
 800045a:	e000      	b.n	800045e <BSP_DRV_QSPI_Reset+0x94>

    return BSP_OK;
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <BSP_DRV_QSPI_Init>:



uint8_t BSP_DRV_QSPI_Init(QUADSPI_TypeDef * hqspi) {
 8000466:	b580      	push	{r7, lr}
 8000468:	b084      	sub	sp, #16
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
    uint8_t chip_id[2];
    uint8_t	read_reg;
    uint8_t	status_reg;
    uint8_t try = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	73fb      	strb	r3, [r7, #15]
    // For some reason memory chip is not working properly after every reset
    // Therefore operation is repeated as required (but not more than 4 times)
    do {

		// 1. Reset chip
		if (BSP_DRV_QSPI_Reset(hqspi)) continue;
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f7ff ffa9 	bl	80003ca <BSP_DRV_QSPI_Reset>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d12e      	bne.n	80004dc <BSP_DRV_QSPI_Init+0x76>

		// 2. Checking communication and identify chip
		BSP_STM32_QSPI_CfgNewCommand();
 800047e:	f008 fa17 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDMDID);
 8000482:	2190      	movs	r1, #144	; 0x90
 8000484:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000488:	f008 fa1e 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgAddress(QSPI_ADDRESS_1_LINE, QSPI_ADDRESS_24_BITS, 0x00);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000496:	f008 fa2d 	bl	80088f4 <BSP_STM32_QSPI_CfgAddress>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, chip_id, 2);
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2202      	movs	r2, #2
 80004a0:	4619      	mov	r1, r3
 80004a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80004a6:	f008 fa3d 	bl	8008924 <BSP_STM32_QSPI_CfgData>
		BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	2000      	movs	r0, #0
 80004b0:	f008 fa50 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
		if (BSP_STM32_QSPI_StartReceive(hqspi)) continue;
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f008 fa81 	bl	80089bc <BSP_STM32_QSPI_StartReceive>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d10f      	bne.n	80004e0 <BSP_DRV_QSPI_Init+0x7a>

		if (chip_id[0] != QSPI_CHIP_MID) continue;
 80004c0:	7b3b      	ldrb	r3, [r7, #12]
 80004c2:	2b9d      	cmp	r3, #157	; 0x9d
 80004c4:	d10e      	bne.n	80004e4 <BSP_DRV_QSPI_Init+0x7e>

		if (chip_id[1] != QSPI_CHIP_CID) continue;
 80004c6:	7b7b      	ldrb	r3, [r7, #13]
 80004c8:	2b17      	cmp	r3, #23
 80004ca:	d10d      	bne.n	80004e8 <BSP_DRV_QSPI_Init+0x82>

    	try++;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	3301      	adds	r3, #1
 80004d0:	73fb      	strb	r3, [r7, #15]
		if (try >= 4) return BSP_ERROR;
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d909      	bls.n	80004ec <BSP_DRV_QSPI_Init+0x86>
 80004d8:	2301      	movs	r3, #1
 80004da:	e0e0      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>
		if (BSP_DRV_QSPI_Reset(hqspi)) continue;
 80004dc:	bf00      	nop
 80004de:	e7c8      	b.n	8000472 <BSP_DRV_QSPI_Init+0xc>
		if (BSP_STM32_QSPI_StartReceive(hqspi)) continue;
 80004e0:	bf00      	nop
 80004e2:	e7c6      	b.n	8000472 <BSP_DRV_QSPI_Init+0xc>
		if (chip_id[0] != QSPI_CHIP_MID) continue;
 80004e4:	bf00      	nop
 80004e6:	e7c4      	b.n	8000472 <BSP_DRV_QSPI_Init+0xc>
		if (chip_id[1] != QSPI_CHIP_CID) continue;
 80004e8:	bf00      	nop
		if (BSP_DRV_QSPI_Reset(hqspi)) continue;
 80004ea:	e7c2      	b.n	8000472 <BSP_DRV_QSPI_Init+0xc>

		break;
 80004ec:	bf00      	nop

    } while (1);

	// 3. Setup dummy cycles
    BSP_STM32_QSPI_CfgNewCommand();
 80004ee:	f008 f9df 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDRP);
 80004f2:	2161      	movs	r1, #97	; 0x61
 80004f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004f8:	f008 f9e6 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &read_reg, 1);
 80004fc:	f107 030b 	add.w	r3, r7, #11
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000508:	f008 fa0c 	bl	8008924 <BSP_STM32_QSPI_CfgData>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	2000      	movs	r0, #0
 8000512:	f008 fa1f 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartReceive(hqspi)) return BSP_ERROR;
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f008 fa50 	bl	80089bc <BSP_STM32_QSPI_StartReceive>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <BSP_DRV_QSPI_Init+0xc0>
 8000522:	2301      	movs	r3, #1
 8000524:	e0bb      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

    MODIFY_REG(read_reg, 0b01111000, (QSPI_CFG_DUMMY_CLKS << 3));
 8000526:	7afb      	ldrb	r3, [r7, #11]
 8000528:	b25b      	sxtb	r3, r3
 800052a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 800052e:	b25b      	sxtb	r3, r3
 8000530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000534:	b25b      	sxtb	r3, r3
 8000536:	b2db      	uxtb	r3, r3
 8000538:	72fb      	strb	r3, [r7, #11]

    if (_DRV_QSPI_WriteEnable(hqspi, QSPI_MODE_SPI)) return BSP_ERROR;
 800053a:	2100      	movs	r1, #0
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ff15 	bl	800036c <_DRV_QSPI_WriteEnable>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <BSP_DRV_QSPI_Init+0xe6>
 8000548:	2301      	movs	r3, #1
 800054a:	e0a8      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

    BSP_STM32_QSPI_CfgNewCommand();
 800054c:	f008 f9b0 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_SRPV);
 8000550:	2163      	movs	r1, #99	; 0x63
 8000552:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000556:	f008 f9b7 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &read_reg, 1);
 800055a:	f107 030b 	add.w	r3, r7, #11
 800055e:	2201      	movs	r2, #1
 8000560:	4619      	mov	r1, r3
 8000562:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000566:	f008 f9dd 	bl	8008924 <BSP_STM32_QSPI_CfgData>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2000      	movs	r0, #0
 8000570:	f008 f9f0 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f008 fa83 	bl	8008a80 <BSP_STM32_QSPI_StartTransmit>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <BSP_DRV_QSPI_Init+0x11e>
 8000580:	2301      	movs	r3, #1
 8000582:	e08c      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

	// Waiting for chip ready status
    if (_DRV_QSPI_CheckStatus(hqspi, QSPI_MODE_SPI, 0x01, 0x00)) return BSP_ERROR;
 8000584:	2300      	movs	r3, #0
 8000586:	2201      	movs	r2, #1
 8000588:	2100      	movs	r1, #0
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff fea4 	bl	80002d8 <_DRV_QSPI_CheckStatus>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <BSP_DRV_QSPI_Init+0x134>
 8000596:	2301      	movs	r3, #1
 8000598:	e081      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

	// 4. Enable 4bytes addresses (required for mem-mapped mode)
    BSP_STM32_QSPI_CfgNewCommand();
 800059a:	f008 f989 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_EN4B);
 800059e:	21b7      	movs	r1, #183	; 0xb7
 80005a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005a4:	f008 f990 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	2000      	movs	r0, #0
 80005ae:	f008 f9d1 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f008 fa64 	bl	8008a80 <BSP_STM32_QSPI_StartTransmit>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <BSP_DRV_QSPI_Init+0x15c>
 80005be:	2301      	movs	r3, #1
 80005c0:	e06d      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

	// 5. Enable quad mode
    BSP_STM32_QSPI_CfgNewCommand();
 80005c2:	f008 f975 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 80005c6:	2105      	movs	r1, #5
 80005c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005cc:	f008 f97c 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &status_reg, 1);
 80005d0:	f107 030a 	add.w	r3, r7, #10
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80005dc:	f008 f9a2 	bl	8008924 <BSP_STM32_QSPI_CfgData>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2100      	movs	r1, #0
 80005e4:	2000      	movs	r0, #0
 80005e6:	f008 f9b5 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartReceive(hqspi)) return BSP_ERROR;
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f008 f9e6 	bl	80089bc <BSP_STM32_QSPI_StartReceive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <BSP_DRV_QSPI_Init+0x194>
 80005f6:	2301      	movs	r3, #1
 80005f8:	e051      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

    // The quad mode option bit is non-volatile. If it is already set, there is no need to write it again.
    if ((status_reg & (0b01000000)) == 0) {
 80005fa:	7abb      	ldrb	r3, [r7, #10]
 80005fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000600:	2b00      	cmp	r3, #0
 8000602:	d137      	bne.n	8000674 <BSP_DRV_QSPI_Init+0x20e>

    	MODIFY_REG(status_reg, 0b01000000, (1 << 6));
 8000604:	7abb      	ldrb	r3, [r7, #10]
 8000606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]

		if (_DRV_QSPI_WriteEnable(hqspi, QSPI_MODE_SPI)) return BSP_ERROR;
 800060e:	2100      	movs	r1, #0
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff feab 	bl	800036c <_DRV_QSPI_WriteEnable>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <BSP_DRV_QSPI_Init+0x1ba>
 800061c:	2301      	movs	r3, #1
 800061e:	e03e      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

		BSP_STM32_QSPI_CfgNewCommand();
 8000620:	f008 f946 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WRSR);
 8000624:	2101      	movs	r1, #1
 8000626:	f44f 7080 	mov.w	r0, #256	; 0x100
 800062a:	f008 f94d 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &status_reg, 1);
 800062e:	f107 030a 	add.w	r3, r7, #10
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800063a:	f008 f973 	bl	8008924 <BSP_STM32_QSPI_CfgData>
		BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	2000      	movs	r0, #0
 8000644:	f008 f986 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
		if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f008 fa19 	bl	8008a80 <BSP_STM32_QSPI_StartTransmit>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <BSP_DRV_QSPI_Init+0x1f2>
 8000654:	2301      	movs	r3, #1
 8000656:	e022      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

		BSP_Delay(10); // Delay so CE line can go HIGH
 8000658:	200a      	movs	r0, #10
 800065a:	f005 f9d1 	bl	8005a00 <BSP_Delay>

		// Waiting for chip ready status
		if (_DRV_QSPI_CheckStatus(hqspi, QSPI_MODE_SPI, 0x01, 0x00)) return BSP_ERROR;
 800065e:	2300      	movs	r3, #0
 8000660:	2201      	movs	r2, #1
 8000662:	2100      	movs	r1, #0
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff fe37 	bl	80002d8 <_DRV_QSPI_CheckStatus>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <BSP_DRV_QSPI_Init+0x20e>
 8000670:	2301      	movs	r3, #1
 8000672:	e014      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

    }

	// 6. Enable QPI mode
    BSP_STM32_QSPI_CfgNewCommand();
 8000674:	f008 f91c 	bl	80088b0 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_QPIEN);
 8000678:	2135      	movs	r1, #53	; 0x35
 800067a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800067e:	f008 f923 	bl	80088c8 <BSP_STM32_QSPI_CfgInstruction>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f008 f964 	bl	8008954 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f008 f9f7 	bl	8008a80 <BSP_STM32_QSPI_StartTransmit>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <BSP_DRV_QSPI_Init+0x236>
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <BSP_DRV_QSPI_Init+0x238>

	return BSP_OK;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <limitvalue>:
#include "IS42S32160F.h"

#include "math.h"

// Private functions
uint32_t limitvalue(uint32_t value, uint32_t min, uint32_t max) {
 80006a6:	b480      	push	{r7}
 80006a8:	b087      	sub	sp, #28
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
	uint32_t val = value;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	617b      	str	r3, [r7, #20]
	if (value < min) val = min;
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d201      	bcs.n	80006c2 <limitvalue+0x1c>
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	617b      	str	r3, [r7, #20]
	if (value > max) val = max;
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d901      	bls.n	80006ce <limitvalue+0x28>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	617b      	str	r3, [r7, #20]
	return val;
 80006ce:	697b      	ldr	r3, [r7, #20]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	371c      	adds	r7, #28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	0000      	movs	r0, r0
	...

080006e0 <BSP_DRV_SDRAM_Init>:


// SDRAM Configuration generator
uint8_t	BSP_DRV_SDRAM_Init(FMC_SDRAM_TypeDef *sdram, uint32_t SDBank, uint32_t SDClockPeriod, uint32_t Ck_Freq) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b098      	sub	sp, #96	; 0x60
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	603b      	str	r3, [r7, #0]

	// Ck_Freq in MHz

	#define SDRAM_TIMEOUT	(uint32_t)0xFFFFF
	volatile uint32_t timeout = SDRAM_TIMEOUT;
 80006ee:	4b9a      	ldr	r3, [pc, #616]	; (8000958 <BSP_DRV_SDRAM_Init+0x278>)
 80006f0:	617b      	str	r3, [r7, #20]

	uint32_t param_CASLatency = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t param_ColumnBitsNumber = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t param_InternalBankNumber = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t param_MemoryDataWidth = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t param_ReadBurst = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t param_ReadPipeDelay = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t param_RowBitsNumber = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t param_WriteProtection = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c


	// Calculating memory parameters (Bank Number and Clock Period are depend on uC and should be configured outside of this driver)
	switch (BSP_SDRAM_CAS_LATENCY) {
		case 1:		param_CASLatency = FMC_SDRAM_CAS_LATENCY_1;		break;
		case 2:		param_CASLatency = FMC_SDRAM_CAS_LATENCY_2;		break;
 8000712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000716:	65bb      	str	r3, [r7, #88]	; 0x58
 8000718:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_COL_ADDR_BITS) {
		case 8:		param_ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;	break;
		case 9:		param_ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;	break;
 800071a:	2301      	movs	r3, #1
 800071c:	657b      	str	r3, [r7, #84]	; 0x54
 800071e:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_BANK_NO) {
		case 2:		param_InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2; break;
		case 4:		param_InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4; break;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	653b      	str	r3, [r7, #80]	; 0x50
 8000724:	bf00      	nop
	}

	switch (BSP_SDRAM_DATA_WIDTH) {
		case 8:		param_MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8; 	break;
		case 16:	param_MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16; break;
		case 32:	param_MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;	break;
 8000726:	2320      	movs	r3, #32
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800072a:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_BURST_READ) {
		case 0:		param_ReadBurst = FMC_SDRAM_RBURST_DISABLE;	break;
		case 1:		param_ReadBurst = FMC_SDRAM_RBURST_ENABLE;	break;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
 8000732:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_READ_PIPE_DELAY) {
		case 0:		param_ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;	break;
 8000734:	2300      	movs	r3, #0
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
 8000738:	bf00      	nop
	}

	switch (BSP_SDRAM_ROW_ADDR_BITS) {
		case 11:	param_RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;	break;
		case 12:	param_RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;	break;
		case 13:	param_RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;	break;
 800073a:	2308      	movs	r3, #8
 800073c:	643b      	str	r3, [r7, #64]	; 0x40
 800073e:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_WRITE_PROTECTION) {
		case 0:		param_WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;	break;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000744:	bf00      	nop
		default:	return BSP_ERROR;
	}

	// Calculating memory timings

	float CPeriod = 1000.0 / (float)Ck_Freq; // Returns period in ns
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000750:	eddf 6a82 	vldr	s13, [pc, #520]	; 800095c <BSP_DRV_SDRAM_Init+0x27c>
 8000754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000758:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	uint32_t param_LoadToActiveDelay = limitvalue(round(1.0 * BSP_SDRAM_TMRD / CPeriod), 1, 16);
 800075c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000760:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000764:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 8000768:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800076c:	eeb0 0b46 	vmov.f64	d0, d6
 8000770:	f00f fe24 	bl	80103bc <round>
 8000774:	eeb0 7b40 	vmov.f64	d7, d0
 8000778:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800077c:	2210      	movs	r2, #16
 800077e:	2101      	movs	r1, #1
 8000780:	ee17 0a90 	vmov	r0, s15
 8000784:	f7ff ff8f 	bl	80006a6 <limitvalue>
 8000788:	6378      	str	r0, [r7, #52]	; 0x34
	uint32_t param_ExitSelfRefreshDelay = limitvalue(round(1.0 * BSP_SDRAM_TXSR / CPeriod), 1, 16);
 800078a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800078e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000792:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000940 <BSP_DRV_SDRAM_Init+0x260>
 8000796:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800079a:	eeb0 0b46 	vmov.f64	d0, d6
 800079e:	f00f fe0d 	bl	80103bc <round>
 80007a2:	eeb0 7b40 	vmov.f64	d7, d0
 80007a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007aa:	2210      	movs	r2, #16
 80007ac:	2101      	movs	r1, #1
 80007ae:	ee17 0a90 	vmov	r0, s15
 80007b2:	f7ff ff78 	bl	80006a6 <limitvalue>
 80007b6:	6338      	str	r0, [r7, #48]	; 0x30
	uint32_t param_SelfRefreshTime = limitvalue(round(1.0 * BSP_SDRAM_TRAS / CPeriod), 1, 16);
 80007b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80007bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007c0:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8000948 <BSP_DRV_SDRAM_Init+0x268>
 80007c4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007c8:	eeb0 0b46 	vmov.f64	d0, d6
 80007cc:	f00f fdf6 	bl	80103bc <round>
 80007d0:	eeb0 7b40 	vmov.f64	d7, d0
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	2210      	movs	r2, #16
 80007da:	2101      	movs	r1, #1
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	f7ff ff61 	bl	80006a6 <limitvalue>
 80007e4:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t param_RowCycleDelay = limitvalue(round(1.0 * BSP_SDRAM_TRC / CPeriod), 1, 16);
 80007e6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80007ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ee:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000950 <BSP_DRV_SDRAM_Init+0x270>
 80007f2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007f6:	eeb0 0b46 	vmov.f64	d0, d6
 80007fa:	f00f fddf 	bl	80103bc <round>
 80007fe:	eeb0 7b40 	vmov.f64	d7, d0
 8000802:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000806:	2210      	movs	r2, #16
 8000808:	2101      	movs	r1, #1
 800080a:	ee17 0a90 	vmov	r0, s15
 800080e:	f7ff ff4a 	bl	80006a6 <limitvalue>
 8000812:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t param_WriteRecoveryTime = limitvalue(BSP_SDRAM_TWR, 2, 16);
 8000814:	2210      	movs	r2, #16
 8000816:	2102      	movs	r1, #2
 8000818:	2002      	movs	r0, #2
 800081a:	f7ff ff44 	bl	80006a6 <limitvalue>
 800081e:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t param_RPDelay = limitvalue(BSP_SDRAM_TRP, 1, 16);
 8000820:	2210      	movs	r2, #16
 8000822:	2101      	movs	r1, #1
 8000824:	2003      	movs	r0, #3
 8000826:	f7ff ff3e 	bl	80006a6 <limitvalue>
 800082a:	6238      	str	r0, [r7, #32]
	uint32_t param_RCDDelay = limitvalue(BSP_SDRAM_TRCD, 1, 16);
 800082c:	2210      	movs	r2, #16
 800082e:	2101      	movs	r1, #1
 8000830:	2003      	movs	r0, #3
 8000832:	f7ff ff38 	bl	80006a6 <limitvalue>
 8000836:	61f8      	str	r0, [r7, #28]

	// Configuring SDRAM

	if (SDBank == FMC_SDRAM_BANK1) {
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d115      	bne.n	800086a <BSP_DRV_SDRAM_Init+0x18a>
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], 0xFFFFFFFF,(param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber | param_CASLatency |
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000846:	431a      	orrs	r2, r3
 8000848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800084a:	431a      	orrs	r2, r3
 800084c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800084e:	431a      	orrs	r2, r3
 8000850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000852:	431a      	orrs	r2, r3
 8000854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	431a      	orrs	r2, r3
 800085c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800085e:	431a      	orrs	r2, r3
 8000860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000862:	431a      	orrs	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	e01a      	b.n	80008a0 <BSP_DRV_SDRAM_Init+0x1c0>
	    														param_WriteProtection | SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
	} else {
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000876:	4319      	orrs	r1, r3
 8000878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800087a:	430b      	orrs	r3, r1
 800087c:	431a      	orrs	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	601a      	str	r2, [r3, #0]
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK2], 0xFFFFFFFF, (param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber |
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800088a:	431a      	orrs	r2, r3
 800088c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800088e:	431a      	orrs	r2, r3
 8000890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000892:	431a      	orrs	r2, r3
 8000894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000896:	431a      	orrs	r2, r3
 8000898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800089a:	431a      	orrs	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	605a      	str	r2, [r3, #4]
	}


	// Configuring SDRAM timings

	if (SDBank == FMC_SDRAM_BANK1) {
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11e      	bne.n	80008e4 <BSP_DRV_SDRAM_Init+0x204>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b0:	3b01      	subs	r3, #1
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	431a      	orrs	r2, r3
 80008b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b8:	3b01      	subs	r3, #1
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	431a      	orrs	r2, r3
 80008be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c0:	3b01      	subs	r3, #1
 80008c2:	031b      	lsls	r3, r3, #12
 80008c4:	431a      	orrs	r2, r3
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	3b01      	subs	r3, #1
 80008ca:	041b      	lsls	r3, r3, #16
 80008cc:	431a      	orrs	r2, r3
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	051b      	lsls	r3, r3, #20
 80008d4:	431a      	orrs	r2, r3
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3b01      	subs	r3, #1
 80008da:	061b      	lsls	r3, r3, #24
 80008dc:	431a      	orrs	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	e023      	b.n	800092c <BSP_DRV_SDRAM_Init+0x24c>
	    															(((param_SelfRefreshTime) - 1U) << FMC_SDTRx_TRAS_Pos) | (((param_RowCycleDelay) - 1U) << FMC_SDTRx_TRC_Pos) |
																	(((param_WriteRecoveryTime) - 1U) << FMC_SDTRx_TWR_Pos) | (((param_RPDelay) - 1U) << FMC_SDTRx_TRP_Pos) |
																	(((param_RCDDelay) - 1U) << FMC_SDTRx_TRCD_Pos)));
	} else {
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], FMC_SDTRx_TRC | FMC_SDTRx_TRP, (((param_RowCycleDelay) - 1U) << FMC_SDTRx_TRC_Pos) | (((param_RPDelay) - 1U) << FMC_SDTRx_TRP_Pos));
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <BSP_DRV_SDRAM_Init+0x280>)
 80008ea:	4013      	ands	r3, r2
 80008ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008ee:	3a01      	subs	r2, #1
 80008f0:	0311      	lsls	r1, r2, #12
 80008f2:	6a3a      	ldr	r2, [r7, #32]
 80008f4:	3a01      	subs	r2, #1
 80008f6:	0512      	lsls	r2, r2, #20
 80008f8:	430a      	orrs	r2, r1
 80008fa:	431a      	orrs	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	609a      	str	r2, [r3, #8]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800090a:	3b01      	subs	r3, #1
 800090c:	011b      	lsls	r3, r3, #4
 800090e:	431a      	orrs	r2, r3
 8000910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000912:	3b01      	subs	r3, #1
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	431a      	orrs	r2, r3
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	3b01      	subs	r3, #1
 800091c:	041b      	lsls	r3, r3, #16
 800091e:	431a      	orrs	r2, r3
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	3b01      	subs	r3, #1
 8000924:	061b      	lsls	r3, r3, #24
 8000926:	431a      	orrs	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	60da      	str	r2, [r3, #12]
																	(((param_RCDDelay) - 1U) << FMC_SDTRx_TRCD_Pos)));
	}

	// Initialize memory IC

	uint32_t CommandTarget = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (SDBank == FMC_SDRAM_BANK1) CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK1; else CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK2;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d116      	bne.n	8000964 <BSP_DRV_SDRAM_Init+0x284>
 8000936:	2310      	movs	r3, #16
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
 800093a:	e015      	b.n	8000968 <BSP_DRV_SDRAM_Init+0x288>
 800093c:	f3af 8000 	nop.w
 8000940:	00000000 	.word	0x00000000
 8000944:	40518000 	.word	0x40518000
 8000948:	00000000 	.word	0x00000000
 800094c:	40450000 	.word	0x40450000
 8000950:	00000000 	.word	0x00000000
 8000954:	404e0000 	.word	0x404e0000
 8000958:	000fffff 	.word	0x000fffff
 800095c:	447a0000 	.word	0x447a0000
 8000960:	ff0f0fff 	.word	0xff0f0fff
 8000964:	2308      	movs	r3, #8
 8000966:	65fb      	str	r3, [r7, #92]	; 0x5c

	// Little delay
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 8000968:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <BSP_DRV_SDRAM_Init+0x390>)
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	bf00      	nop
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	617a      	str	r2, [r7, #20]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1fa      	bne.n	800096e <BSP_DRV_SDRAM_Init+0x28e>

	// Configure a clock configuration enable command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	691a      	ldr	r2, [r3, #16]
 800097c:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <BSP_DRV_SDRAM_Init+0x394>)
 800097e:	4013      	ands	r3, r2
 8000980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000982:	4313      	orrs	r3, r2
 8000984:	f043 0201 	orr.w	r2, r3, #1
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	611a      	str	r2, [r3, #16]
				((FMC_SDRAM_CMD_CLK_ENABLE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Little delay
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 800098c:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <BSP_DRV_SDRAM_Init+0x390>)
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	bf00      	nop
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	1e5a      	subs	r2, r3, #1
 8000996:	617a      	str	r2, [r7, #20]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1fa      	bne.n	8000992 <BSP_DRV_SDRAM_Init+0x2b2>

	// Configure a PALL (precharge all) command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <BSP_DRV_SDRAM_Init+0x394>)
 80009a2:	4013      	ands	r3, r2
 80009a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80009a6:	4313      	orrs	r3, r2
 80009a8:	f043 0202 	orr.w	r2, r3, #2
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	611a      	str	r2, [r3, #16]
				((FMC_SDRAM_CMD_PALL) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Configure a Auto-Refresh command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	691a      	ldr	r2, [r3, #16]
 80009b4:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <BSP_DRV_SDRAM_Init+0x394>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80009ba:	4313      	orrs	r3, r2
 80009bc:	f043 02e3 	orr.w	r2, r3, #227	; 0xe3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	611a      	str	r2, [r3, #16]
				((FMC_SDRAM_CMD_AUTOREFRESH_MODE) | (CommandTarget) | (((8) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Configure a Auto-Refresh command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	691a      	ldr	r2, [r3, #16]
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <BSP_DRV_SDRAM_Init+0x394>)
 80009ca:	4013      	ands	r3, r2
 80009cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80009ce:	4313      	orrs	r3, r2
 80009d0:	f043 02e3 	orr.w	r2, r3, #227	; 0xe3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	611a      	str	r2, [r3, #16]
				((FMC_SDRAM_CMD_AUTOREFRESH_MODE) | (CommandTarget) | (((8) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Configure a load Mode register command
	if (BSP_SDRAM_CAS_LATENCY == 3) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
				((FMC_SDRAM_CMD_LOAD_MODE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0x0230) << FMC_SDCMR_MRD_Pos)));
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	691a      	ldr	r2, [r3, #16]
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <BSP_DRV_SDRAM_Init+0x394>)
 80009de:	4013      	ands	r3, r2
 80009e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80009e2:	431a      	orrs	r2, r3
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <BSP_DRV_SDRAM_Init+0x398>)
 80009e6:	4313      	orrs	r3, r2
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	6113      	str	r3, [r2, #16]
			((FMC_SDRAM_CMD_LOAD_MODE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0x0220) << FMC_SDCMR_MRD_Pos)));

	// Program Refresh Period
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009f6:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000a58 <BSP_DRV_SDRAM_Init+0x378>
 80009fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009fe:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000a60 <BSP_DRV_SDRAM_Init+0x380>
 8000a02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a06:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8000a68 <BSP_DRV_SDRAM_Init+0x388>
 8000a0a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a0e:	eeb0 0b46 	vmov.f64	d0, d6
 8000a12:	f00f fcd3 	bl	80103bc <round>
 8000a16:	eeb0 7b40 	vmov.f64	d7, d0
 8000a1a:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8000a1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a26:	ee17 3a90 	vmov	r3, s15
 8000a2a:	61bb      	str	r3, [r7, #24]
	MODIFY_REG(sdram->SDRTR, FMC_SDRTR_COUNT, (param_RefreshPeriod << FMC_SDRTR_COUNT_Pos));
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <BSP_DRV_SDRAM_Init+0x39c>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	0052      	lsls	r2, r2, #1
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	615a      	str	r2, [r3, #20]

	// Enable FMC Peripheral
	__FMC_ENABLE();
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <BSP_DRV_SDRAM_Init+0x3a0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <BSP_DRV_SDRAM_Init+0x3a0>)
 8000a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a48:	6013      	str	r3, [r2, #0]

	return BSP_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3760      	adds	r7, #96	; 0x60
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	f3af 8000 	nop.w
 8000a58:	00000000 	.word	0x00000000
 8000a5c:	408f4000 	.word	0x408f4000
 8000a60:	00000000 	.word	0x00000000
 8000a64:	40500000 	.word	0x40500000
 8000a68:	00000000 	.word	0x00000000
 8000a6c:	40c00000 	.word	0x40c00000
 8000a70:	00effff1 	.word	0x00effff1
 8000a74:	ffc00000 	.word	0xffc00000
 8000a78:	00044004 	.word	0x00044004
 8000a7c:	ffffc001 	.word	0xffffc001
 8000a80:	52004000 	.word	0x52004000

08000a84 <BSP_DRV_IMU_Init>:
KALMAN_HandleTypeDef KALMAN_pitch = {0};
KALMAN_HandleTypeDef KALMAN_roll = {0};
KALMAN_HandleTypeDef KALMAN_yaw = {0};


uint8_t	BSP_DRV_IMU_Init(IMU_HandleTypeDef *himu, I2C_TypeDef *hi2c) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	// Resetting IMU global variable
	himu->cal.c_ox = 0;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
	himu->cal.c_oy = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
	himu->cal.c_oz = 0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
	himu->cal.c_x = 0;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
	himu->cal.c_y = 0;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
	himu->cal.c_z = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
	himu->cal.progress = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28

	// Reseting MPU
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x80, 100)) return BSP_ERROR;
 8000ab8:	2364      	movs	r3, #100	; 0x64
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	226b      	movs	r2, #107	; 0x6b
 8000ac0:	21d0      	movs	r1, #208	; 0xd0
 8000ac2:	6838      	ldr	r0, [r7, #0]
 8000ac4:	f007 f86e 	bl	8007ba4 <BSP_STM32_I2C_RegWrite>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <BSP_DRV_IMU_Init+0x4e>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e067      	b.n	8000ba2 <BSP_DRV_IMU_Init+0x11e>
	BSP_Delay(100);
 8000ad2:	2064      	movs	r0, #100	; 0x64
 8000ad4:	f004 ff94 	bl	8005a00 <BSP_Delay>

	// Setting MPU Power mode to "Wake Up Device"
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x03, 100)) return BSP_ERROR;
 8000ad8:	2364      	movs	r3, #100	; 0x64
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2303      	movs	r3, #3
 8000ade:	226b      	movs	r2, #107	; 0x6b
 8000ae0:	21d0      	movs	r1, #208	; 0xd0
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f007 f85e 	bl	8007ba4 <BSP_STM32_I2C_RegWrite>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <BSP_DRV_IMU_Init+0x6e>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e057      	b.n	8000ba2 <BSP_DRV_IMU_Init+0x11e>

	// Setting MPU Gyro range to +/- 500 deg/sec
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_GYRO_CFG, 0x08, 100)) return BSP_ERROR;
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2308      	movs	r3, #8
 8000af8:	221b      	movs	r2, #27
 8000afa:	21d0      	movs	r1, #208	; 0xd0
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f007 f851 	bl	8007ba4 <BSP_STM32_I2C_RegWrite>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <BSP_DRV_IMU_Init+0x88>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e04a      	b.n	8000ba2 <BSP_DRV_IMU_Init+0x11e>

	// Setting MPU Accel range to +/- 2 G
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_ACCEL_CFG, 0x00, 100)) return BSP_ERROR;
 8000b0c:	2364      	movs	r3, #100	; 0x64
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	221c      	movs	r2, #28
 8000b14:	21d0      	movs	r1, #208	; 0xd0
 8000b16:	6838      	ldr	r0, [r7, #0]
 8000b18:	f007 f844 	bl	8007ba4 <BSP_STM32_I2C_RegWrite>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <BSP_DRV_IMU_Init+0xa2>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e03d      	b.n	8000ba2 <BSP_DRV_IMU_Init+0x11e>

	// Setting digital signal filtering (low pass filter = 94Hz / delay 3ms)
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_CONFIG, 0x02, 100)) return BSP_ERROR;
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	221a      	movs	r2, #26
 8000b2e:	21d0      	movs	r1, #208	; 0xd0
 8000b30:	6838      	ldr	r0, [r7, #0]
 8000b32:	f007 f837 	bl	8007ba4 <BSP_STM32_I2C_RegWrite>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <BSP_DRV_IMU_Init+0xbc>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e030      	b.n	8000ba2 <BSP_DRV_IMU_Init+0x11e>

	// Setting update frequency divider to 25Hz (sampling rate = 1kHz / (1 + divider))
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_SMPLRT_DIV, 39, 100)) return BSP_ERROR;
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2327      	movs	r3, #39	; 0x27
 8000b46:	2219      	movs	r2, #25
 8000b48:	21d0      	movs	r1, #208	; 0xd0
 8000b4a:	6838      	ldr	r0, [r7, #0]
 8000b4c:	f007 f82a 	bl	8007ba4 <BSP_STM32_I2C_RegWrite>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <BSP_DRV_IMU_Init+0xd6>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e023      	b.n	8000ba2 <BSP_DRV_IMU_Init+0x11e>

	// Configuring INT pin to ACTIVE HIGH LOGIC, PUSH-PULL, 50us PULSE, CLEAR BY ANY READ OPERATION
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_INT_CFG, 0x10, 100)) return BSP_ERROR;
 8000b5a:	2364      	movs	r3, #100	; 0x64
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2310      	movs	r3, #16
 8000b60:	2237      	movs	r2, #55	; 0x37
 8000b62:	21d0      	movs	r1, #208	; 0xd0
 8000b64:	6838      	ldr	r0, [r7, #0]
 8000b66:	f007 f81d 	bl	8007ba4 <BSP_STM32_I2C_RegWrite>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <BSP_DRV_IMU_Init+0xf0>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e016      	b.n	8000ba2 <BSP_DRV_IMU_Init+0x11e>

	// Enabling INT generation on IMU data ready event
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_INT_EN, 0x01, 100)) return BSP_ERROR;
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	2238      	movs	r2, #56	; 0x38
 8000b7c:	21d0      	movs	r1, #208	; 0xd0
 8000b7e:	6838      	ldr	r0, [r7, #0]
 8000b80:	f007 f810 	bl	8007ba4 <BSP_STM32_I2C_RegWrite>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <BSP_DRV_IMU_Init+0x10a>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e009      	b.n	8000ba2 <BSP_DRV_IMU_Init+0x11e>

	// Initializing Kalman filters
	KALMAN_Init(&KALMAN_pitch);
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <BSP_DRV_IMU_Init+0x128>)
 8000b90:	f005 f8e2 	bl	8005d58 <KALMAN_Init>
	KALMAN_Init(&KALMAN_roll);
 8000b94:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <BSP_DRV_IMU_Init+0x12c>)
 8000b96:	f005 f8df 	bl	8005d58 <KALMAN_Init>
	KALMAN_Init(&KALMAN_yaw);
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <BSP_DRV_IMU_Init+0x130>)
 8000b9c:	f005 f8dc 	bl	8005d58 <KALMAN_Init>

	return BSP_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2400002c 	.word	0x2400002c
 8000bb0:	24000068 	.word	0x24000068
 8000bb4:	240000a4 	.word	0x240000a4

08000bb8 <BSP_DRV_IMU_Parse>:
	himu->cal.progress = 128;
	return BSP_OK;
}


void BSP_DRV_IMU_Parse(IMU_HandleTypeDef *himu) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	// Parsing data received from IMU - integer calculations

	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	785b      	ldrb	r3, [r3, #1]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	789b      	ldrb	r3, [r3, #2]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	78db      	ldrb	r3, [r3, #3]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	795b      	ldrb	r3, [r3, #5]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
	z = -z;
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7a1b      	ldrb	r3, [r3, #8]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7a5b      	ldrb	r3, [r3, #9]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	623b      	str	r3, [r7, #32]
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7a9b      	ldrb	r3, [r3, #10]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7adb      	ldrb	r3, [r3, #11]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	61fb      	str	r3, [r7, #28]
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7b1b      	ldrb	r3, [r3, #12]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7b5b      	ldrb	r3, [r3, #13]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	61bb      	str	r3, [r7, #24]

	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	799b      	ldrb	r3, [r3, #6]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	79db      	ldrb	r3, [r3, #7]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	617b      	str	r3, [r7, #20]

	if (himu->cal.progress > 0) {
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d065      	beq.n	8000d42 <BSP_DRV_IMU_Parse+0x18a>
		// If calibration enabled, collecting data for calibration
		himu->cal.c_y += y;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1a      	ldr	r2, [r3, #32]
 8000c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7c:	441a      	add	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	621a      	str	r2, [r3, #32]
		himu->cal.c_x += x;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69da      	ldr	r2, [r3, #28]
 8000c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c88:	441a      	add	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	61da      	str	r2, [r3, #28]
		himu->cal.c_z += (z - 16384);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000c98:	441a      	add	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
		himu->cal.c_oy += oy;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	615a      	str	r2, [r3, #20]
		himu->cal.c_ox += ox;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	441a      	add	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	611a      	str	r2, [r3, #16]
		himu->cal.c_oz += oz;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	441a      	add	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	619a      	str	r2, [r3, #24]
		himu->cal.progress -= 1;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
		if (himu->cal.progress == 0) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d154      	bne.n	8000d7e <BSP_DRV_IMU_Parse+0x1c6>
			himu->cal.c_y = himu->cal.c_y / 128;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	da00      	bge.n	8000cde <BSP_DRV_IMU_Parse+0x126>
 8000cdc:	337f      	adds	r3, #127	; 0x7f
 8000cde:	11db      	asrs	r3, r3, #7
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	621a      	str	r2, [r3, #32]
			himu->cal.c_x = himu->cal.c_x / 128;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da00      	bge.n	8000cf0 <BSP_DRV_IMU_Parse+0x138>
 8000cee:	337f      	adds	r3, #127	; 0x7f
 8000cf0:	11db      	asrs	r3, r3, #7
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	61da      	str	r2, [r3, #28]
			himu->cal.c_z = himu->cal.c_z / 128;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da00      	bge.n	8000d02 <BSP_DRV_IMU_Parse+0x14a>
 8000d00:	337f      	adds	r3, #127	; 0x7f
 8000d02:	11db      	asrs	r3, r3, #7
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da00      	bge.n	8000d14 <BSP_DRV_IMU_Parse+0x15c>
 8000d12:	337f      	adds	r3, #127	; 0x7f
 8000d14:	11db      	asrs	r3, r3, #7
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	615a      	str	r2, [r3, #20]
			himu->cal.c_ox = himu->cal.c_ox / 128;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da00      	bge.n	8000d26 <BSP_DRV_IMU_Parse+0x16e>
 8000d24:	337f      	adds	r3, #127	; 0x7f
 8000d26:	11db      	asrs	r3, r3, #7
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	611a      	str	r2, [r3, #16]
			himu->cal.c_oz = himu->cal.c_oz / 128;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da00      	bge.n	8000d38 <BSP_DRV_IMU_Parse+0x180>
 8000d36:	337f      	adds	r3, #127	; 0x7f
 8000d38:	11db      	asrs	r3, r3, #7
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	619a      	str	r2, [r3, #24]
 8000d40:	e01d      	b.n	8000d7e <BSP_DRV_IMU_Parse+0x1c6>
		}
	} else {
		// If no calibration in progress than correcting data by calibration factors
		y -= himu->cal.c_y;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		x -= himu->cal.c_x;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
		z -= himu->cal.c_z;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
		oy -= himu->cal.c_oy;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	6a3a      	ldr	r2, [r7, #32]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	623b      	str	r3, [r7, #32]
		ox -= himu->cal.c_ox;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	61fb      	str	r3, [r7, #28]
		oz -= himu->cal.c_oz;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	61bb      	str	r3, [r7, #24]
	}


	// Calculating floats
	himu->data.y = (float)y / 16384.0;
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d88:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8000f48 <BSP_DRV_IMU_Parse+0x390>
 8000d8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	himu->data.x = (float)x / 16384.0;
 8000d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8000f48 <BSP_DRV_IMU_Parse+0x390>
 8000da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	himu->data.z = (float)z / 16384.0;
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db8:	eddf 6a63 	vldr	s13, [pc, #396]	; 8000f48 <BSP_DRV_IMU_Parse+0x390>
 8000dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	himu->data.oy = (float)oy / 65.5;
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8000f4c <BSP_DRV_IMU_Parse+0x394>
 8000dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	himu->data.ox = (float)ox / 65.5;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de8:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000f4c <BSP_DRV_IMU_Parse+0x394>
 8000dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	himu->data.oz = (float)oz / 65.5;
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e00:	eddf 6a52 	vldr	s13, [pc, #328]	; 8000f4c <BSP_DRV_IMU_Parse+0x394>
 8000e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	himu->data.t = (float)t / 340.0 + 36.53;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e1c:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8000f30 <BSP_DRV_IMU_Parse+0x378>
 8000e20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e24:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8000f38 <BSP_DRV_IMU_Parse+0x380>
 8000e28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	// Calculating pitch, roll, yaw
	float acc_pitch = 57.29577951 * atan2f(himu->data.y, himu->data.z);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000e42:	eef0 0a47 	vmov.f32	s1, s14
 8000e46:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4a:	f00f fab5 	bl	80103b8 <atan2f>
 8000e4e:	eef0 7a40 	vmov.f32	s15, s0
 8000e52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e56:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8000f40 <BSP_DRV_IMU_Parse+0x388>
 8000e5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e62:	edc7 7a04 	vstr	s15, [r7, #16]
	himu->pos.pitch = KALMAN_Update(&KALMAN_pitch, acc_pitch, himu->data.ox);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000e6c:	eef0 0a67 	vmov.f32	s1, s15
 8000e70:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e74:	4836      	ldr	r0, [pc, #216]	; (8000f50 <BSP_DRV_IMU_Parse+0x398>)
 8000e76:	f004 ffa3 	bl	8005dc0 <KALMAN_Update>
 8000e7a:	eef0 7a40 	vmov.f32	s15, s0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	float acc_roll = 57.29577951 * atan2f(-himu->data.x, himu->data.z);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000e8a:	eef1 7a67 	vneg.f32	s15, s15
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000e94:	eef0 0a47 	vmov.f32	s1, s14
 8000e98:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9c:	f00f fa8c 	bl	80103b8 <atan2f>
 8000ea0:	eef0 7a40 	vmov.f32	s15, s0
 8000ea4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea8:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000f40 <BSP_DRV_IMU_Parse+0x388>
 8000eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb4:	edc7 7a03 	vstr	s15, [r7, #12]
	himu->pos.roll = KALMAN_Update(&KALMAN_roll, acc_roll, himu->data.oy);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ebe:	eef0 0a67 	vmov.f32	s1, s15
 8000ec2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ec6:	4823      	ldr	r0, [pc, #140]	; (8000f54 <BSP_DRV_IMU_Parse+0x39c>)
 8000ec8:	f004 ff7a 	bl	8005dc0 <KALMAN_Update>
 8000ecc:	eef0 7a40 	vmov.f32	s15, s0
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	float acc_yaw = 57.29577951 * atan2f(-himu->data.x, himu->data.y);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000edc:	eef1 7a67 	vneg.f32	s15, s15
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000ee6:	eef0 0a47 	vmov.f32	s1, s14
 8000eea:	eeb0 0a67 	vmov.f32	s0, s15
 8000eee:	f00f fa63 	bl	80103b8 <atan2f>
 8000ef2:	eef0 7a40 	vmov.f32	s15, s0
 8000ef6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000efa:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000f40 <BSP_DRV_IMU_Parse+0x388>
 8000efe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f06:	edc7 7a02 	vstr	s15, [r7, #8]
	himu->pos.yaw = KALMAN_Update(&KALMAN_yaw, acc_yaw, himu->data.oz);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000f10:	eef0 0a67 	vmov.f32	s1, s15
 8000f14:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f18:	480f      	ldr	r0, [pc, #60]	; (8000f58 <BSP_DRV_IMU_Parse+0x3a0>)
 8000f1a:	f004 ff51 	bl	8005dc0 <KALMAN_Update>
 8000f1e:	eef0 7a40 	vmov.f32	s15, s0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

}
 8000f28:	bf00      	nop
 8000f2a:	3730      	adds	r7, #48	; 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40754000 	.word	0x40754000
 8000f38:	0a3d70a4 	.word	0x0a3d70a4
 8000f3c:	404243d7 	.word	0x404243d7
 8000f40:	1a5d2372 	.word	0x1a5d2372
 8000f44:	404ca5dc 	.word	0x404ca5dc
 8000f48:	46800000 	.word	0x46800000
 8000f4c:	42830000 	.word	0x42830000
 8000f50:	2400002c 	.word	0x2400002c
 8000f54:	24000068 	.word	0x24000068
 8000f58:	240000a4 	.word	0x240000a4

08000f5c <BSP_DRV_LCD_TP_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "RVT50AQTNWC00.h"

uint8_t BSP_DRV_LCD_TP_Init(I2C_TypeDef *hi2c) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	return BSP_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	0000      	movs	r0, r0
 8000f74:	0000      	movs	r0, r0
	...

08000f78 <BSP_DRV_LCD_TP_Parse>:

void BSP_DRV_LCD_TP_Parse(LCD_TP_HandleTypeDef *hlcdtp) {
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	// Parsing General Data
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	77da      	strb	r2, [r3, #31]

	// Parsing Individual Touch Points
	for (uint8_t i=0; i<5; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e054      	b.n	800103e <BSP_DRV_LCD_TP_Parse+0xc6>
		uint8_t ii = 3 + i * 6;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	461a      	mov	r2, r3
 8000f98:	0052      	lsls	r2, r2, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3303      	adds	r3, #3
 8000fa2:	733b      	strb	r3, [r7, #12]
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	5cd2      	ldrb	r2, [r2, r3]
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	0992      	lsrs	r2, r2, #6
 8000fae:	b2d1      	uxtb	r1, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	460a      	mov	r2, r1
 8000fba:	711a      	strb	r2, [r3, #4]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000fbc:	7b3b      	ldrb	r3, [r7, #12]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	5cd3      	ldrb	r3, [r2, r3]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7b3b      	ldrb	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	5ccb      	ldrb	r3, [r1, r3]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3204      	adds	r2, #4
 8000fe6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000fea:	7b3b      	ldrb	r3, [r7, #12]
 8000fec:	3302      	adds	r3, #2
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	5cd2      	ldrb	r2, [r2, r3]
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	0912      	lsrs	r2, r2, #4
 8000ff6:	b2d1      	uxtb	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	460a      	mov	r2, r1
 8001002:	719a      	strb	r2, [r3, #6]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8001004:	7b3b      	ldrb	r3, [r7, #12]
 8001006:	3302      	adds	r3, #2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	b29b      	uxth	r3, r3
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b29b      	uxth	r3, r3
 8001012:	b21b      	sxth	r3, r3
 8001014:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001018:	b21a      	sxth	r2, r3
 800101a:	7b3b      	ldrb	r3, [r7, #12]
 800101c:	3303      	adds	r3, #3
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	5ccb      	ldrb	r3, [r1, r3]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21a      	sxth	r2, r3
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	b291      	uxth	r1, r2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	3304      	adds	r3, #4
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4413      	add	r3, r2
 8001034:	460a      	mov	r2, r1
 8001036:	805a      	strh	r2, [r3, #2]
	for (uint8_t i=0; i<5; i++) {
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	3301      	adds	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2b04      	cmp	r3, #4
 8001042:	d9a7      	bls.n	8000f94 <BSP_DRV_LCD_TP_Parse+0x1c>
	}

	// Detecting gestures
	switch (hlcdtp->touch_count) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7fdb      	ldrb	r3, [r3, #31]
 8001048:	2b02      	cmp	r3, #2
 800104a:	f000 81e8 	beq.w	800141e <BSP_DRV_LCD_TP_Parse+0x4a6>
 800104e:	2b02      	cmp	r3, #2
 8001050:	f300 8312 	bgt.w	8001678 <BSP_DRV_LCD_TP_Parse+0x700>
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <BSP_DRV_LCD_TP_Parse+0xe8>
 8001058:	2b01      	cmp	r3, #1
 800105a:	f000 80f8 	beq.w	800124e <BSP_DRV_LCD_TP_Parse+0x2d6>
 800105e:	e30b      	b.n	8001678 <BSP_DRV_LCD_TP_Parse+0x700>
		case 0: // no fingers touching screen / finger just release screen
			hlcdtp->gest_data.gest = LCD_TP_GEST_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001076:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80012a8 <BSP_DRV_LCD_TP_Parse+0x330>
 800107a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800108c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001090:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010a8:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80012a8 <BSP_DRV_LCD_TP_Parse+0x330>
 80010ac:	ee27 5b06 	vmul.f64	d5, d7, d6
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c

			// Gest: Click
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 80010d2:	f113 0f04 	cmn.w	r3, #4
 80010d6:	db14      	blt.n	8001102 <BSP_DRV_LCD_TP_Parse+0x18a>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 80010de:	2b04      	cmp	r3, #4
 80010e0:	dc0f      	bgt.n	8001102 <BSP_DRV_LCD_TP_Parse+0x18a>
					&& (hlcdtp->gest_data.delta_y > -5) && (hlcdtp->gest_data.delta_y < 5)) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80010e8:	f113 0f04 	cmn.w	r3, #4
 80010ec:	db09      	blt.n	8001102 <BSP_DRV_LCD_TP_Parse+0x18a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	dc04      	bgt.n	8001102 <BSP_DRV_LCD_TP_Parse+0x18a>
				hlcdtp->gest_data.gest = LCD_TP_GEST_CLICK_UP;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 8001100:	e2c4      	b.n	800168c <BSP_DRV_LCD_TP_Parse+0x714>
			}

			// Gest: Swipe Left
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 8001108:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800110c:	da22      	bge.n	8001154 <BSP_DRV_LCD_TP_Parse+0x1dc>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001114:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80012b0 <BSP_DRV_LCD_TP_Parse+0x338>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	d518      	bpl.n	8001154 <BSP_DRV_LCD_TP_Parse+0x1dc>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001128:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80012b4 <BSP_DRV_LCD_TP_Parse+0x33c>
 800112c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	dd0e      	ble.n	8001154 <BSP_DRV_LCD_TP_Parse+0x1dc>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 800113c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80012b8 <BSP_DRV_LCD_TP_Parse+0x340>
 8001140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d504      	bpl.n	8001154 <BSP_DRV_LCD_TP_Parse+0x1dc>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_LEFT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2210      	movs	r2, #16
 800114e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 8001152:	e29b      	b.n	800168c <BSP_DRV_LCD_TP_Parse+0x714>
			}

			// Gest: Swipe Right
			if ((hlcdtp->gest_data.delta_x > 100) && (hlcdtp->gest_data.speed_x > 800)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	dd22      	ble.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x22c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001164:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80012bc <BSP_DRV_LCD_TP_Parse+0x344>
 8001168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	dd18      	ble.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x22c>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001178:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80012b4 <BSP_DRV_LCD_TP_Parse+0x33c>
 800117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	dd0e      	ble.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x22c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 800118c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80012b8 <BSP_DRV_LCD_TP_Parse+0x340>
 8001190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001198:	d504      	bpl.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x22c>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_RIGHT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2220      	movs	r2, #32
 800119e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 80011a2:	e273      	b.n	800168c <BSP_DRV_LCD_TP_Parse+0x714>
			}

			// Gest: Swipe Up
			if ((hlcdtp->gest_data.delta_y < -100) && (hlcdtp->gest_data.speed_y < -800)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80011aa:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80011ae:	da22      	bge.n	80011f6 <BSP_DRV_LCD_TP_Parse+0x27e>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80011b6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80012b0 <BSP_DRV_LCD_TP_Parse+0x338>
 80011ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d518      	bpl.n	80011f6 <BSP_DRV_LCD_TP_Parse+0x27e>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80011ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80012b4 <BSP_DRV_LCD_TP_Parse+0x33c>
 80011ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	dd0e      	ble.n	80011f6 <BSP_DRV_LCD_TP_Parse+0x27e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80011de:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80012b8 <BSP_DRV_LCD_TP_Parse+0x340>
 80011e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	d504      	bpl.n	80011f6 <BSP_DRV_LCD_TP_Parse+0x27e>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_UP;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2204      	movs	r2, #4
 80011f0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 80011f4:	e24a      	b.n	800168c <BSP_DRV_LCD_TP_Parse+0x714>
			}

			// Gest: Swipe Up
			if ((hlcdtp->gest_data.delta_y > 100) && (hlcdtp->gest_data.speed_y > 800)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	f340 8240 	ble.w	8001682 <BSP_DRV_LCD_TP_Parse+0x70a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001208:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80012bc <BSP_DRV_LCD_TP_Parse+0x344>
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	dc00      	bgt.n	8001218 <BSP_DRV_LCD_TP_Parse+0x2a0>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_DOWN;
				break;
			}

			break;
 8001216:	e234      	b.n	8001682 <BSP_DRV_LCD_TP_Parse+0x70a>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 800121e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80012b4 <BSP_DRV_LCD_TP_Parse+0x33c>
 8001222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	dc00      	bgt.n	800122e <BSP_DRV_LCD_TP_Parse+0x2b6>
			break;
 800122c:	e229      	b.n	8001682 <BSP_DRV_LCD_TP_Parse+0x70a>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001234:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012b8 <BSP_DRV_LCD_TP_Parse+0x340>
 8001238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	d400      	bmi.n	8001244 <BSP_DRV_LCD_TP_Parse+0x2cc>
			break;
 8001242:	e21e      	b.n	8001682 <BSP_DRV_LCD_TP_Parse+0x70a>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_DOWN;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2208      	movs	r2, #8
 8001248:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 800124c:	e21e      	b.n	800168c <BSP_DRV_LCD_TP_Parse+0x714>

		case 1:	// 1 finger

			if (hlcdtp->touch_data[0].status == 2) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001254:	2b02      	cmp	r3, #2
 8001256:	f040 8216 	bne.w	8001686 <BSP_DRV_LCD_TP_Parse+0x70e>
				if ((hlcdtp->gest_data.gest != LCD_TP_GEST_CLICK_DOWN) && (hlcdtp->gest_data.gest != LCD_TP_GEST_DRAG)) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001260:	2b01      	cmp	r3, #1
 8001262:	f000 80a4 	beq.w	80013ae <BSP_DRV_LCD_TP_Parse+0x436>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800126c:	2b40      	cmp	r3, #64	; 0x40
 800126e:	f000 809e 	beq.w	80013ae <BSP_DRV_LCD_TP_Parse+0x436>
					hlcdtp->gest_data.start_x = hlcdtp->touch_data[0].x;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	8c1a      	ldrh	r2, [r3, #32]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
					hlcdtp->gest_data.start_y = hlcdtp->touch_data[0].y;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
					hlcdtp->gest_data.start_t = BSP_GetTick();
 8001286:	f004 fbaf 	bl	80059e8 <BSP_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
					hlcdtp->gest_data.gest = LCD_TP_GEST_CLICK_DOWN;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

					// Checking active area;
					hlcdtp->gest_data.area = 255;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	22ff      	movs	r2, #255	; 0xff
 800129e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
					for (uint8_t i=0;i<16;i++) {
 80012a2:	2300      	movs	r3, #0
 80012a4:	73bb      	strb	r3, [r7, #14]
 80012a6:	e07e      	b.n	80013a6 <BSP_DRV_LCD_TP_Parse+0x42e>
 80012a8:	00000000 	.word	0x00000000
 80012ac:	408f4000 	.word	0x408f4000
 80012b0:	c4480000 	.word	0xc4480000
 80012b4:	c3c80000 	.word	0xc3c80000
 80012b8:	43c80000 	.word	0x43c80000
 80012bc:	44480000 	.word	0x44480000
						if (hlcdtp->touch_areas[i].active == 0) continue;
 80012c0:	7bba      	ldrb	r2, [r7, #14]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	440b      	add	r3, r1
 80012ce:	3350      	adds	r3, #80	; 0x50
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d05b      	beq.n	800138e <BSP_DRV_LCD_TP_Parse+0x416>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80012dc:	4618      	mov	r0, r3
 80012de:	7bba      	ldrb	r2, [r7, #14]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	440b      	add	r3, r1
 80012ec:	3348      	adds	r3, #72	; 0x48
 80012ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f2:	4298      	cmp	r0, r3
 80012f4:	db4d      	blt.n	8001392 <BSP_DRV_LCD_TP_Parse+0x41a>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80012fc:	4618      	mov	r0, r3
 80012fe:	7bba      	ldrb	r2, [r7, #14]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	440b      	add	r3, r1
 800130c:	3348      	adds	r3, #72	; 0x48
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	461c      	mov	r4, r3
 8001314:	7bba      	ldrb	r2, [r7, #14]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	440b      	add	r3, r1
 8001322:	334c      	adds	r3, #76	; 0x4c
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	4423      	add	r3, r4
 8001328:	4298      	cmp	r0, r3
 800132a:	dc34      	bgt.n	8001396 <BSP_DRV_LCD_TP_Parse+0x41e>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8001332:	4618      	mov	r0, r3
 8001334:	7bba      	ldrb	r2, [r7, #14]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	440b      	add	r3, r1
 8001342:	334a      	adds	r3, #74	; 0x4a
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	4298      	cmp	r0, r3
 800134a:	db26      	blt.n	800139a <BSP_DRV_LCD_TP_Parse+0x422>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8001352:	4618      	mov	r0, r3
 8001354:	7bba      	ldrb	r2, [r7, #14]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	440b      	add	r3, r1
 8001362:	334a      	adds	r3, #74	; 0x4a
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	461c      	mov	r4, r3
 800136a:	7bba      	ldrb	r2, [r7, #14]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	440b      	add	r3, r1
 8001378:	334e      	adds	r3, #78	; 0x4e
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	4423      	add	r3, r4
 800137e:	4298      	cmp	r0, r3
 8001380:	dc0d      	bgt.n	800139e <BSP_DRV_LCD_TP_Parse+0x426>
						hlcdtp->gest_data.area = i;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7bba      	ldrb	r2, [r7, #14]
 8001386:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
						break;
 800138a:	bf00      	nop
					for (uint8_t i=0;i<16;i++) {
 800138c:	e046      	b.n	800141c <BSP_DRV_LCD_TP_Parse+0x4a4>
						if (hlcdtp->touch_areas[i].active == 0) continue;
 800138e:	bf00      	nop
 8001390:	e006      	b.n	80013a0 <BSP_DRV_LCD_TP_Parse+0x428>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 8001392:	bf00      	nop
 8001394:	e004      	b.n	80013a0 <BSP_DRV_LCD_TP_Parse+0x428>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001396:	bf00      	nop
 8001398:	e002      	b.n	80013a0 <BSP_DRV_LCD_TP_Parse+0x428>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 800139a:	bf00      	nop
 800139c:	e000      	b.n	80013a0 <BSP_DRV_LCD_TP_Parse+0x428>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 800139e:	bf00      	nop
					for (uint8_t i=0;i<16;i++) {
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73bb      	strb	r3, [r7, #14]
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d989      	bls.n	80012c0 <BSP_DRV_LCD_TP_Parse+0x348>
 80013ac:	e036      	b.n	800141c <BSP_DRV_LCD_TP_Parse+0x4a4>
					}

				} else {
					hlcdtp->gest_data.stop_x = hlcdtp->touch_data[0].x;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	8c1a      	ldrh	r2, [r3, #32]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
					hlcdtp->gest_data.stop_y = hlcdtp->touch_data[0].y;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
					hlcdtp->gest_data.stop_t = BSP_GetTick();
 80013c2:	f004 fb11 	bl	80059e8 <BSP_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
					hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b21a      	sxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
					hlcdtp->gest_data.delta_t = hlcdtp->gest_data.stop_t - hlcdtp->gest_data.start_t;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800140a:	1ad2      	subs	r2, r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
					hlcdtp->gest_data.gest = LCD_TP_GEST_DRAG;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				}
			}

			break;
 800141a:	e134      	b.n	8001686 <BSP_DRV_LCD_TP_Parse+0x70e>
 800141c:	e133      	b.n	8001686 <BSP_DRV_LCD_TP_Parse+0x70e>

		case 2:	// 2 fingers

			if ((hlcdtp->touch_data[0].status == 2) && (hlcdtp->touch_data[1].status == 2)) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001424:	2b02      	cmp	r3, #2
 8001426:	f040 8130 	bne.w	800168a <BSP_DRV_LCD_TP_Parse+0x712>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001430:	2b02      	cmp	r3, #2
 8001432:	f040 812a 	bne.w	800168a <BSP_DRV_LCD_TP_Parse+0x712>

				hlcdtp->gest_data.start_x = hlcdtp->touch_data[0].x;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	8c1a      	ldrh	r2, [r3, #32]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
				hlcdtp->gest_data.start_y = hlcdtp->touch_data[0].y;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
				hlcdtp->gest_data.stop_x = hlcdtp->touch_data[1].x;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
				hlcdtp->gest_data.stop_y = hlcdtp->touch_data[1].y;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
				hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	b21a      	sxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
				hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	b21a      	sxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
				hlcdtp->gest_data.stop_t = BSP_GetTick();
 800148e:	f004 faab 	bl	80059e8 <BSP_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

				if (hlcdtp->gest_data.gest != LCD_TP_GEST_ZOOM) {
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80014a0:	2b80      	cmp	r3, #128	; 0x80
 80014a2:	f000 80f2 	beq.w	800168a <BSP_DRV_LCD_TP_Parse+0x712>
					hlcdtp->gest_data.start_t = BSP_GetTick();
 80014a6:	f004 fa9f 	bl	80059e8 <BSP_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

					// Checking active area;
					hlcdtp->gest_data.area = 255;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	22ff      	movs	r2, #255	; 0xff
 80014b6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
					for (uint8_t i=0;i<16;i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	737b      	strb	r3, [r7, #13]
 80014be:	e0d2      	b.n	8001666 <BSP_DRV_LCD_TP_Parse+0x6ee>
						if (hlcdtp->touch_areas[i].active == 0) continue;
 80014c0:	7b7a      	ldrb	r2, [r7, #13]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	440b      	add	r3, r1
 80014ce:	3350      	adds	r3, #80	; 0x50
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80b3 	beq.w	800163e <BSP_DRV_LCD_TP_Parse+0x6c6>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80014de:	4618      	mov	r0, r3
 80014e0:	7b7a      	ldrb	r2, [r7, #13]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	440b      	add	r3, r1
 80014ee:	3348      	adds	r3, #72	; 0x48
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	4298      	cmp	r0, r3
 80014f6:	f2c0 80a4 	blt.w	8001642 <BSP_DRV_LCD_TP_Parse+0x6ca>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8001500:	4618      	mov	r0, r3
 8001502:	7b7a      	ldrb	r2, [r7, #13]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	440b      	add	r3, r1
 8001510:	3348      	adds	r3, #72	; 0x48
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	461c      	mov	r4, r3
 8001518:	7b7a      	ldrb	r2, [r7, #13]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	440b      	add	r3, r1
 8001526:	334c      	adds	r3, #76	; 0x4c
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	4423      	add	r3, r4
 800152c:	4298      	cmp	r0, r3
 800152e:	f300 808a 	bgt.w	8001646 <BSP_DRV_LCD_TP_Parse+0x6ce>
						if (hlcdtp->gest_data.stop_x < hlcdtp->touch_areas[i].x) continue;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001538:	4618      	mov	r0, r3
 800153a:	7b7a      	ldrb	r2, [r7, #13]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	440b      	add	r3, r1
 8001548:	3348      	adds	r3, #72	; 0x48
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	4298      	cmp	r0, r3
 8001550:	db7b      	blt.n	800164a <BSP_DRV_LCD_TP_Parse+0x6d2>
						if (hlcdtp->gest_data.stop_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001558:	4618      	mov	r0, r3
 800155a:	7b7a      	ldrb	r2, [r7, #13]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	440b      	add	r3, r1
 8001568:	3348      	adds	r3, #72	; 0x48
 800156a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156e:	461c      	mov	r4, r3
 8001570:	7b7a      	ldrb	r2, [r7, #13]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	440b      	add	r3, r1
 800157e:	334c      	adds	r3, #76	; 0x4c
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	4423      	add	r3, r4
 8001584:	4298      	cmp	r0, r3
 8001586:	dc62      	bgt.n	800164e <BSP_DRV_LCD_TP_Parse+0x6d6>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800158e:	4618      	mov	r0, r3
 8001590:	7b7a      	ldrb	r2, [r7, #13]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	440b      	add	r3, r1
 800159e:	334a      	adds	r3, #74	; 0x4a
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	4298      	cmp	r0, r3
 80015a6:	db54      	blt.n	8001652 <BSP_DRV_LCD_TP_Parse+0x6da>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80015ae:	4618      	mov	r0, r3
 80015b0:	7b7a      	ldrb	r2, [r7, #13]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	440b      	add	r3, r1
 80015be:	334a      	adds	r3, #74	; 0x4a
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	461c      	mov	r4, r3
 80015c6:	7b7a      	ldrb	r2, [r7, #13]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	440b      	add	r3, r1
 80015d4:	334e      	adds	r3, #78	; 0x4e
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	4423      	add	r3, r4
 80015da:	4298      	cmp	r0, r3
 80015dc:	dc3b      	bgt.n	8001656 <BSP_DRV_LCD_TP_Parse+0x6de>
						if (hlcdtp->gest_data.stop_y < hlcdtp->touch_areas[i].y) continue;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80015e4:	4618      	mov	r0, r3
 80015e6:	7b7a      	ldrb	r2, [r7, #13]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	440b      	add	r3, r1
 80015f4:	334a      	adds	r3, #74	; 0x4a
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	4298      	cmp	r0, r3
 80015fc:	db2d      	blt.n	800165a <BSP_DRV_LCD_TP_Parse+0x6e2>
						if (hlcdtp->gest_data.stop_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8001604:	4618      	mov	r0, r3
 8001606:	7b7a      	ldrb	r2, [r7, #13]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	440b      	add	r3, r1
 8001614:	334a      	adds	r3, #74	; 0x4a
 8001616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161a:	461c      	mov	r4, r3
 800161c:	7b7a      	ldrb	r2, [r7, #13]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	334e      	adds	r3, #78	; 0x4e
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	4423      	add	r3, r4
 8001630:	4298      	cmp	r0, r3
 8001632:	dc14      	bgt.n	800165e <BSP_DRV_LCD_TP_Parse+0x6e6>

						hlcdtp->gest_data.area = i;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7b7a      	ldrb	r2, [r7, #13]
 8001638:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 800163c:	e010      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->touch_areas[i].active == 0) continue;
 800163e:	bf00      	nop
 8001640:	e00e      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 8001642:	bf00      	nop
 8001644:	e00c      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001646:	bf00      	nop
 8001648:	e00a      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.stop_x < hlcdtp->touch_areas[i].x) continue;
 800164a:	bf00      	nop
 800164c:	e008      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.stop_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 800164e:	bf00      	nop
 8001650:	e006      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 8001652:	bf00      	nop
 8001654:	e004      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 8001656:	bf00      	nop
 8001658:	e002      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.stop_y < hlcdtp->touch_areas[i].y) continue;
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.stop_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 800165e:	bf00      	nop
					for (uint8_t i=0;i<16;i++) {
 8001660:	7b7b      	ldrb	r3, [r7, #13]
 8001662:	3301      	adds	r3, #1
 8001664:	737b      	strb	r3, [r7, #13]
 8001666:	7b7b      	ldrb	r3, [r7, #13]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	f67f af29 	bls.w	80014c0 <BSP_DRV_LCD_TP_Parse+0x548>
					}

					hlcdtp->gest_data.gest = LCD_TP_GEST_ZOOM;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				}
			}
			break;
 8001676:	e008      	b.n	800168a <BSP_DRV_LCD_TP_Parse+0x712>

		default:
			hlcdtp->gest_data.gest = LCD_TP_GEST_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		}
}
 8001680:	e004      	b.n	800168c <BSP_DRV_LCD_TP_Parse+0x714>
			break;
 8001682:	bf00      	nop
 8001684:	e002      	b.n	800168c <BSP_DRV_LCD_TP_Parse+0x714>
			break;
 8001686:	bf00      	nop
 8001688:	e000      	b.n	800168c <BSP_DRV_LCD_TP_Parse+0x714>
			break;
 800168a:	bf00      	nop
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}

08001694 <BSP_BOARD_Init_CM7>:

#include "BSP.h"

#define HSEM_ID_0 (0U) // HW semaphore 0

uint8_t BSP_BOARD_Init_CM7() {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
	uint32_t timeout;

	// Config MPU
	BSP_STM32_MPU_Init();
 800169a:	f003 fa03 	bl	8004aa4 <BSP_STM32_MPU_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800169e:	4b76      	ldr	r3, [pc, #472]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11b      	bne.n	80016e2 <BSP_BOARD_Init_CM7+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016aa:	f3bf 8f4f 	dsb	sy
}
 80016ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b0:	f3bf 8f6f 	isb	sy
}
 80016b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80016b6:	4b70      	ldr	r3, [pc, #448]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80016be:	f3bf 8f4f 	dsb	sy
}
 80016c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016c4:	f3bf 8f6f 	isb	sy
}
 80016c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80016ca:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016d6:	f3bf 8f4f 	dsb	sy
}
 80016da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016dc:	f3bf 8f6f 	isb	sy
}
 80016e0:	e000      	b.n	80016e4 <BSP_BOARD_Init_CM7+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016e4:	4b64      	ldr	r3, [pc, #400]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d138      	bne.n	8001762 <BSP_BOARD_Init_CM7+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80016f0:	4b61      	ldr	r3, [pc, #388]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80016f8:	f3bf 8f4f 	dsb	sy
}
 80016fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80016fe:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 8001700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001704:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	0b5b      	lsrs	r3, r3, #13
 800170a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800170e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	08db      	lsrs	r3, r3, #3
 8001714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001718:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001722:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001728:	4953      	ldr	r1, [pc, #332]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 800172a:	4313      	orrs	r3, r2
 800172c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1e5a      	subs	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ef      	bne.n	800171a <BSP_BOARD_Init_CM7+0x86>
    } while(sets-- != 0U);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	60fa      	str	r2, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e5      	bne.n	8001710 <BSP_BOARD_Init_CM7+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001744:	f3bf 8f4f 	dsb	sy
}
 8001748:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <BSP_BOARD_Init_CM7+0x1e4>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001754:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001756:	f3bf 8f4f 	dsb	sy
}
 800175a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800175c:	f3bf 8f6f 	isb	sy
}
 8001760:	e000      	b.n	8001764 <BSP_BOARD_Init_CM7+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001762:	bf00      	nop

	// Enable D-Cache
	SCB_EnableDCache();

	// Wait until CPU2 boots and enters in stop mode or timeout
	timeout = 0xFFFF;
 8001764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001768:	617b      	str	r3, [r7, #20]
	while (((RCC->CR & RCC_CR_D2CKRDY) != RESET) && (timeout-- > 0));
 800176a:	bf00      	nop
 800176c:	4b43      	ldr	r3, [pc, #268]	; (800187c <BSP_BOARD_Init_CM7+0x1e8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <BSP_BOARD_Init_CM7+0xee>
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	617a      	str	r2, [r7, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f4      	bne.n	800176c <BSP_BOARD_Init_CM7+0xd8>
	if ( timeout < 0 ) return BSP_ERROR;

	// Setting NVIC grouping
	BSP_STM32_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001782:	2003      	movs	r0, #3
 8001784:	f005 f831 	bl	80067ea <BSP_STM32_NVIC_SetPriorityGrouping>

	// STM32 Initialization - System Clocks
	if (BSP_STM32_Init_SysClocks()) return BSP_ERROR;
 8001788:	f003 fb1a 	bl	8004dc0 <BSP_STM32_Init_SysClocks>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <BSP_BOARD_Init_CM7+0x102>
 8001792:	2301      	movs	r3, #1
 8001794:	e06b      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification
	__BSP_RCC_HSEM_CLK_ENABLE();			// HW semaphore Clock enable
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <BSP_BOARD_Init_CM7+0x1e8>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	4a37      	ldr	r2, [pc, #220]	; (800187c <BSP_BOARD_Init_CM7+0x1e8>)
 800179e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a6:	4b35      	ldr	r3, [pc, #212]	; (800187c <BSP_BOARD_Init_CM7+0x1e8>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
	BSP_STM32_HSEM_FastTake(HSEM_ID_0); 	// Take HSEM
 80017b4:	2000      	movs	r0, #0
 80017b6:	f005 ff39 	bl	800762c <BSP_STM32_HSEM_FastTake>
	BSP_STM32_HSEM_FastRelease(HSEM_ID_0);	// Release HSEM in order to notify the CPU2(CM4)
 80017ba:	2000      	movs	r0, #0
 80017bc:	f005 ff54 	bl	8007668 <BSP_STM32_HSEM_FastRelease>
	timeout = 0xFFFF;						// Wait until CPU2 wakes up from stop mode
 80017c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c4:	617b      	str	r3, [r7, #20]
	while(((RCC->CR & RCC_CR_D2CKRDY) == RESET) && (timeout-- > 0));
 80017c6:	bf00      	nop
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <BSP_BOARD_Init_CM7+0x1e8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <BSP_BOARD_Init_CM7+0x14a>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	617a      	str	r2, [r7, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f4      	bne.n	80017c8 <BSP_BOARD_Init_CM7+0x134>
	if ( timeout < 0 ) return BSP_ERROR;

	// STM32 Initialization - Peripheral Clocks
	if (BSP_STM32_Init_PeriphClocks()) return BSP_ERROR;
 80017de:	f003 fb99 	bl	8004f14 <BSP_STM32_Init_PeriphClocks>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <BSP_BOARD_Init_CM7+0x158>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e040      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// STM32 Initialization - GPIO Pins
	if (BSP_STM32_Init_GPIO()) return BSP_ERROR;
 80017ec:	f003 fe06 	bl	80053fc <BSP_STM32_Init_GPIO>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <BSP_BOARD_Init_CM7+0x166>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e039      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// STM32 Initialization - NVIC - Interrupts
	if (BSP_STM32_Init_NVIC()) return BSP_ERROR;
 80017fa:	f003 fd83 	bl	8005304 <BSP_STM32_Init_NVIC>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <BSP_BOARD_Init_CM7+0x174>
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// SDRAM Initialization
	if (BSP_SDRAM_Init(120)) return BSP_ERROR;
 8001808:	2078      	movs	r0, #120	; 0x78
 800180a:	f003 f8e7 	bl	80049dc <BSP_SDRAM_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <BSP_BOARD_Init_CM7+0x184>
 8001814:	2301      	movs	r3, #1
 8001816:	e02a      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// QSPI Initialization
	if (BSP_QSPI_Init()) return BSP_ERROR;
 8001818:	f003 f848 	bl	80048ac <BSP_QSPI_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <BSP_BOARD_Init_CM7+0x192>
 8001822:	2301      	movs	r3, #1
 8001824:	e023      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// Touch Panel Initialization
	if (BSP_LCD_TP_Init()) return BSP_ERROR;
 8001826:	f002 ffc1 	bl	80047ac <BSP_LCD_TP_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <BSP_BOARD_Init_CM7+0x1a0>
 8001830:	2301      	movs	r3, #1
 8001832:	e01c      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// IMU Initialization
	if (BSP_IMU_Init()) return BSP_ERROR;
 8001834:	f000 f860 	bl	80018f8 <BSP_IMU_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <BSP_BOARD_Init_CM7+0x1ae>
 800183e:	2301      	movs	r3, #1
 8001840:	e015      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// Joystick and Keyboard Initialization
	if (BSP_Inputs_Init()) return BSP_ERROR;
 8001842:	f000 f8c3 	bl	80019cc <BSP_Inputs_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <BSP_BOARD_Init_CM7+0x1bc>
 800184c:	2301      	movs	r3, #1
 800184e:	e00e      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// SDCARD Initialization
	if (BSP_SDCARD_Init()) return BSP_ERROR;
 8001850:	f003 f84a 	bl	80048e8 <BSP_SDCARD_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <BSP_BOARD_Init_CM7+0x1ca>
 800185a:	2301      	movs	r3, #1
 800185c:	e007      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// USART2 Initialization - communication through debug connection
	if (BSP_Serial_Init()) return BSP_ERROR;
 800185e:	f004 f92f 	bl	8005ac0 <BSP_Serial_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <BSP_BOARD_Init_CM7+0x1d8>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <BSP_BOARD_Init_CM7+0x1da>

	// Audio Initialization
//	if (BSP_Audio_Init()) return BSP_ERROR;

	return BSP_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	58024400 	.word	0x58024400

08001880 <NMI_Handler>:


// Configuring Basic Interrupts
void NMI_Handler(void) {
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

	while (1) {}
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

}

void HardFault_Handler(void) {
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

	while (1) {}
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

}

void MemManage_Handler(void) {
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

	while (1) {}
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

}

void BusFault_Handler(void) {
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

	while (1) {}
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

}

void UsageFault_Handler(void) {
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

	while (1) {}
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

}

void SVC_Handler(void) {
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

void DebugMon_Handler(void) {
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

void PendSV_Handler(void) {
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

void SysTick_Handler(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0

  BSP_IncTick();
 80018cc:	f004 f87a 	bl	80059c4 <BSP_IncTick>

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <BSP_Error_Handler>:

void BSP_Error_Handler(void) {
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop

  __disable_irq();
  while (1) {}
 80018dc:	e7fe      	b.n	80018dc <BSP_Error_Handler+0x8>
	...

080018e0 <SPI3_IRQHandler>:

uint8_t BSP_Audio_Resume() {
	return BSP_STM32_I2S_Resume(SPI3, &BSP_haudio_ctx);
}

void SPI3_IRQHandler(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	BSP_STM32_I2S_IRQHandler(SPI3, &BSP_haudio_ctx);
 80018e4:	4902      	ldr	r1, [pc, #8]	; (80018f0 <SPI3_IRQHandler+0x10>)
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <SPI3_IRQHandler+0x14>)
 80018e8:	f006 fa37 	bl	8007d5a <BSP_STM32_I2S_IRQHandler>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	240000e0 	.word	0x240000e0
 80018f4:	40003c00 	.word	0x40003c00

080018f8 <BSP_IMU_Init>:
#include "BSP_IMU.h"

BUF_RAM	IMU_HandleTypeDef		BSP_himu = {0};
		TxRxContext_TypeDef		BSP_himu_ctx = {0};

uint8_t BSP_IMU_Init() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af04      	add	r7, sp, #16
	// Configuring I2C interface
	if (BSP_STM32_I2C_Init(I2C4)) return BSP_ERROR;
 80018fe:	481a      	ldr	r0, [pc, #104]	; (8001968 <BSP_IMU_Init+0x70>)
 8001900:	f006 f87a 	bl	80079f8 <BSP_STM32_I2C_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <BSP_IMU_Init+0x16>
 800190a:	2301      	movs	r3, #1
 800190c:	e028      	b.n	8001960 <BSP_IMU_Init+0x68>

	// Linking BDMA stream to I2C context
	BSP_BDMA_Init(BDMA_Channel0, BDMA_PERIPH_TO_MEMORY, BDMA_PINC_DISABLE, BDMA_MINC_ENABLE, BDMA_PDATAALIGN_BYTE, BDMA_MDATAALIGN_BYTE, BDMA_NORMAL, BDMA_PRIORITY_LOW);
 800190e:	2300      	movs	r3, #0
 8001910:	9303      	str	r3, [sp, #12]
 8001912:	2300      	movs	r3, #0
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	4811      	ldr	r0, [pc, #68]	; (800196c <BSP_IMU_Init+0x74>)
 8001926:	f004 fcad 	bl	8006284 <BSP_BDMA_Init>
	BSP_BDMA_CtxLink(BDMA_Channel0, &BSP_himu_ctx, BDMA_REQUEST_I2C4_RX);
 800192a:	220d      	movs	r2, #13
 800192c:	4910      	ldr	r1, [pc, #64]	; (8001970 <BSP_IMU_Init+0x78>)
 800192e:	480f      	ldr	r0, [pc, #60]	; (800196c <BSP_IMU_Init+0x74>)
 8001930:	f004 fcea 	bl	8006308 <BSP_BDMA_CtxLink>

	// Testing connection
	if (BSP_STM32_I2C_IsDeviceReady(I2C4, (IMU_I2C_ADDR) << 1, 4, 1000)) return BSP_ERROR;
 8001934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001938:	2204      	movs	r2, #4
 800193a:	21d0      	movs	r1, #208	; 0xd0
 800193c:	480a      	ldr	r0, [pc, #40]	; (8001968 <BSP_IMU_Init+0x70>)
 800193e:	f006 f899 	bl	8007a74 <BSP_STM32_I2C_IsDeviceReady>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <BSP_IMU_Init+0x54>
 8001948:	2301      	movs	r3, #1
 800194a:	e009      	b.n	8001960 <BSP_IMU_Init+0x68>

	// Initialization of IMU IC
	if (BSP_DRV_IMU_Init(&BSP_himu, I2C4)) return BSP_ERROR;
 800194c:	4906      	ldr	r1, [pc, #24]	; (8001968 <BSP_IMU_Init+0x70>)
 800194e:	4809      	ldr	r0, [pc, #36]	; (8001974 <BSP_IMU_Init+0x7c>)
 8001950:	f7ff f898 	bl	8000a84 <BSP_DRV_IMU_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <BSP_IMU_Init+0x66>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <BSP_IMU_Init+0x68>

	return BSP_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	58001c00 	.word	0x58001c00
 800196c:	58025408 	.word	0x58025408
 8001970:	24000148 	.word	0x24000148
 8001974:	38000000 	.word	0x38000000

08001978 <BSP_IMU_INTHandler>:
uint8_t BSP_IMU_Reset() {

	return BSP_OK;
}

void BSP_IMU_INTHandler() {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af02      	add	r7, sp, #8
	// New data available from IMU, start receiving
	BSP_STM32_I2C_MemRead(I2C4, &BSP_himu_ctx, IMU_I2C_ADDR << 1, IMU_DATA_ADDR, BSP_himu.raw_data, IMU_DATA_LEN);
 800197e:	230e      	movs	r3, #14
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <BSP_IMU_INTHandler+0x20>)
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	233b      	movs	r3, #59	; 0x3b
 8001988:	22d0      	movs	r2, #208	; 0xd0
 800198a:	4904      	ldr	r1, [pc, #16]	; (800199c <BSP_IMU_INTHandler+0x24>)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <BSP_IMU_INTHandler+0x28>)
 800198e:	f006 f985 	bl	8007c9c <BSP_STM32_I2C_MemRead>
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	38000000 	.word	0x38000000
 800199c:	24000148 	.word	0x24000148
 80019a0:	58001c00 	.word	0x58001c00

080019a4 <I2C4_EV_IRQHandler>:

void I2C4_EV_IRQHandler(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	// Receiving and parsing data from IMU
	if (BSP_STM32_I2C_IRQHandler(I2C4, &BSP_himu_ctx) == BSP_OK) BSP_DRV_IMU_Parse(&BSP_himu);
 80019a8:	4905      	ldr	r1, [pc, #20]	; (80019c0 <I2C4_EV_IRQHandler+0x1c>)
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <I2C4_EV_IRQHandler+0x20>)
 80019ac:	f006 f9b3 	bl	8007d16 <BSP_STM32_I2C_IRQHandler>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <I2C4_EV_IRQHandler+0x18>
 80019b6:	4804      	ldr	r0, [pc, #16]	; (80019c8 <I2C4_EV_IRQHandler+0x24>)
 80019b8:	f7ff f8fe 	bl	8000bb8 <BSP_DRV_IMU_Parse>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	24000148 	.word	0x24000148
 80019c4:	58001c00 	.word	0x58001c00
 80019c8:	38000000 	.word	0x38000000

080019cc <BSP_Inputs_Init>:
#include "BSP_Inputs.h"

BUF_RAM  INPUTS_HandleTypeDef	BSP_hinputs = {0};
		TxRxContext_TypeDef		BSP_hinputs_ctx = {0};

uint8_t BSP_Inputs_Init() {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af04      	add	r7, sp, #16
	// Initializing ADC1 for Joystick
	BSP_ADC_Init(ADC1, ADC_RESOLUTION_16B, 2);
 80019d2:	2202      	movs	r2, #2
 80019d4:	2100      	movs	r1, #0
 80019d6:	482d      	ldr	r0, [pc, #180]	; (8001a8c <BSP_Inputs_Init+0xc0>)
 80019d8:	f004 fb0c 	bl	8005ff4 <BSP_ADC_Init>
	BSP_ADC_ConfigChannel(ADC1, 4, 1);
 80019dc:	2201      	movs	r2, #1
 80019de:	2104      	movs	r1, #4
 80019e0:	482a      	ldr	r0, [pc, #168]	; (8001a8c <BSP_Inputs_Init+0xc0>)
 80019e2:	f004 fbbd 	bl	8006160 <BSP_ADC_ConfigChannel>
	BSP_ADC_ConfigChannel(ADC1, 8, 2);
 80019e6:	2202      	movs	r2, #2
 80019e8:	2108      	movs	r1, #8
 80019ea:	4828      	ldr	r0, [pc, #160]	; (8001a8c <BSP_Inputs_Init+0xc0>)
 80019ec:	f004 fbb8 	bl	8006160 <BSP_ADC_ConfigChannel>
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 80019f0:	2300      	movs	r3, #0
 80019f2:	9303      	str	r3, [sp, #12]
 80019f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4820      	ldr	r0, [pc, #128]	; (8001a90 <BSP_Inputs_Init+0xc4>)
 8001a10:	f004 ff76 	bl	8006900 <BSP_STM32_DMA_Init>
	BSP_STM32_DMA_CtxLink(DMA1_Stream1, &BSP_hinputs_ctx, DMA_REQUEST_ADC1);
 8001a14:	2209      	movs	r2, #9
 8001a16:	491f      	ldr	r1, [pc, #124]	; (8001a94 <BSP_Inputs_Init+0xc8>)
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <BSP_Inputs_Init+0xc4>)
 8001a1a:	f004 ffbd 	bl	8006998 <BSP_STM32_DMA_CtxLink>
	BSP_ADC_StartDMA(ADC1, &BSP_hinputs_ctx, (uint32_t *)BSP_hinputs.raw_data_joy, 2);
 8001a1e:	2302      	movs	r3, #2
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a22:	491c      	ldr	r1, [pc, #112]	; (8001a94 <BSP_Inputs_Init+0xc8>)
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <BSP_Inputs_Init+0xc0>)
 8001a26:	f004 fc0f 	bl	8006248 <BSP_ADC_StartDMA>

	// Init calibration values
	BSP_hinputs.joy_cal.x_max = 49600;
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a2c:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
 8001a30:	81da      	strh	r2, [r3, #14]
	BSP_hinputs.joy_cal.x_min = 7600;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a34:	f641 52b0 	movw	r2, #7600	; 0x1db0
 8001a38:	819a      	strh	r2, [r3, #12]
	BSP_hinputs.joy_cal.y_max = 58000;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a3c:	f24e 2290 	movw	r2, #58000	; 0xe290
 8001a40:	825a      	strh	r2, [r3, #18]
	BSP_hinputs.joy_cal.y_min = 12300;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a44:	f243 020c 	movw	r2, #12300	; 0x300c
 8001a48:	821a      	strh	r2, [r3, #16]

	BSP_hinputs.joy_cal.x_centre_max = 33000;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a4c:	f248 02e8 	movw	r2, #33000	; 0x80e8
 8001a50:	80da      	strh	r2, [r3, #6]
	BSP_hinputs.joy_cal.x_centre_min = 30000;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a54:	f247 5230 	movw	r2, #30000	; 0x7530
 8001a58:	809a      	strh	r2, [r3, #4]
	BSP_hinputs.joy_cal.y_centre_max = 35500;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a5c:	f648 22ac 	movw	r2, #35500	; 0x8aac
 8001a60:	815a      	strh	r2, [r3, #10]
	BSP_hinputs.joy_cal.y_centre_min = 31500;
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <BSP_Inputs_Init+0xcc>)
 8001a64:	f647 320c 	movw	r2, #31500	; 0x7b0c
 8001a68:	811a      	strh	r2, [r3, #8]

	// Configuring TIM2 for parsing joystick and keyboard data
	// Option 1: PWM Frequency = 200MHz Input clock / Prescaler (199+1) / Reload value (9999+1) = 100Hz
	// Option 2: PWM Frequency = 240MHz Input clock / Prescaler (239+1) / Reload value (9999+1) = 100Hz

	BSP_STM32_TIM_Init(TIM2, TIM_CLOCKDIVISION_DIV1, 239, 9999);
 8001a6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8001a6e:	22ef      	movs	r2, #239	; 0xef
 8001a70:	2100      	movs	r1, #0
 8001a72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a76:	f009 fe2f 	bl	800b6d8 <BSP_STM32_TIM_Init>
	BSP_STM32_TIM_Start(TIM2);
 8001a7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a7e:	f009 fef4 	bl	800b86a <BSP_STM32_TIM_Start>
	return BSP_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40020028 	.word	0x40020028
 8001a94:	240001b0 	.word	0x240001b0
 8001a98:	38000058 	.word	0x38000058

08001a9c <BSP_Inputs_ParseData>:


uint8_t BSP_Inputs_ParseData() {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	// Button A - PD4
	BSP_hinputs.buttons.btn_A = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0);
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	487f      	ldr	r0, [pc, #508]	; (8001ca4 <BSP_Inputs_ParseData+0x208>)
 8001aa6:	f005 fd97 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b7b      	ldr	r3, [pc, #492]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001aba:	761a      	strb	r2, [r3, #24]

	// Button B - PD2
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 8001abc:	2104      	movs	r1, #4
 8001abe:	4879      	ldr	r0, [pc, #484]	; (8001ca4 <BSP_Inputs_ParseData+0x208>)
 8001ac0:	f005 fd8a 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001ad4:	765a      	strb	r2, [r3, #25]

	// Button C - PI8
	BSP_hinputs.buttons.btn_C = (BSP_STM32_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == 0);
 8001ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ada:	4874      	ldr	r0, [pc, #464]	; (8001cac <BSP_Inputs_ParseData+0x210>)
 8001adc:	f005 fd7c 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b6e      	ldr	r3, [pc, #440]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001af0:	769a      	strb	r2, [r3, #26]

	// Button D - PC13
	BSP_hinputs.buttons.btn_D = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 8001af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af6:	486e      	ldr	r0, [pc, #440]	; (8001cb0 <BSP_Inputs_ParseData+0x214>)
 8001af8:	f005 fd6e 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001b0c:	76da      	strb	r2, [r3, #27]

	// Button XU - PC11
	BSP_hinputs.buttons.btn_X_U = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0);
 8001b0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b12:	4867      	ldr	r0, [pc, #412]	; (8001cb0 <BSP_Inputs_ParseData+0x214>)
 8001b14:	f005 fd60 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf0c      	ite	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2300      	movne	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001b28:	771a      	strb	r2, [r3, #28]

	// Button XD - PG3
	BSP_hinputs.buttons.btn_X_D = (BSP_STM32_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 0);
 8001b2a:	2108      	movs	r1, #8
 8001b2c:	4861      	ldr	r0, [pc, #388]	; (8001cb4 <BSP_Inputs_ParseData+0x218>)
 8001b2e:	f005 fd53 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001b42:	775a      	strb	r2, [r3, #29]

	// Button XL - PA9
	BSP_hinputs.buttons.btn_X_L = (BSP_STM32_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);
 8001b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b48:	485b      	ldr	r0, [pc, #364]	; (8001cb8 <BSP_Inputs_ParseData+0x21c>)
 8001b4a:	f005 fd45 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001b5e:	779a      	strb	r2, [r3, #30]

	// Button XR - PC7
	BSP_hinputs.buttons.btn_X_R = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0);
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	4853      	ldr	r0, [pc, #332]	; (8001cb0 <BSP_Inputs_ParseData+0x214>)
 8001b64:	f005 fd38 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001b78:	77da      	strb	r2, [r3, #31]

	// Button MENU - PE3
	BSP_hinputs.buttons.btn_MENU = (BSP_STM32_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0);
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	484f      	ldr	r0, [pc, #316]	; (8001cbc <BSP_Inputs_ParseData+0x220>)
 8001b7e:	f005 fd2b 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	// Button PWR - PB5
	BSP_hinputs.buttons.btn_PWR = (BSP_STM32_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0);
 8001b96:	2120      	movs	r1, #32
 8001b98:	4849      	ldr	r0, [pc, #292]	; (8001cc0 <BSP_Inputs_ParseData+0x224>)
 8001b9a:	f005 fd1d 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001bae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	// Button JOY - PH5
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	4843      	ldr	r0, [pc, #268]	; (8001cc4 <BSP_Inputs_ParseData+0x228>)
 8001bb6:	f005 fd0f 	bl	80075d8 <BSP_STM32_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001bca:	f883 2020 	strb.w	r2, [r3, #32]

	// Parsing joystick XY axis
	int16_t joy_X = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	80fb      	strh	r3, [r7, #6]
	int16_t joy_Y = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	80bb      	strh	r3, [r7, #4]


	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001bd8:	885a      	ldrh	r2, [r3, #2]
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001bdc:	88db      	ldrh	r3, [r3, #6]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90f      	bls.n	8001c02 <BSP_Inputs_ParseData+0x166>
		joy_X = ((BSP_hinputs.raw_data_joy[1] - BSP_hinputs.joy_cal.x_centre_max) * 128)/ (BSP_hinputs.joy_cal.x_max - BSP_hinputs.joy_cal.x_centre_max);
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001be4:	885b      	ldrh	r3, [r3, #2]
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001bea:	88db      	ldrh	r3, [r3, #6]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	01da      	lsls	r2, r3, #7
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001bf2:	89db      	ldrh	r3, [r3, #14]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001bf8:	88db      	ldrh	r3, [r3, #6]
 8001bfa:	1acb      	subs	r3, r1, r3
 8001bfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c00:	80fb      	strh	r3, [r7, #6]
	}

	if (BSP_hinputs.raw_data_joy[1] < BSP_hinputs.joy_cal.x_centre_min) {
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c04:	885a      	ldrh	r2, [r3, #2]
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c08:	889b      	ldrh	r3, [r3, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d20f      	bcs.n	8001c2e <BSP_Inputs_ParseData+0x192>
		joy_X = ((BSP_hinputs.raw_data_joy[1] - BSP_hinputs.joy_cal.x_centre_min) * 128)/ (BSP_hinputs.joy_cal.x_centre_min - BSP_hinputs.joy_cal.x_min);
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c10:	885b      	ldrh	r3, [r3, #2]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c16:	889b      	ldrh	r3, [r3, #4]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	01da      	lsls	r2, r3, #7
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c1e:	889b      	ldrh	r3, [r3, #4]
 8001c20:	4619      	mov	r1, r3
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c24:	899b      	ldrh	r3, [r3, #12]
 8001c26:	1acb      	subs	r3, r1, r3
 8001c28:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c2c:	80fb      	strh	r3, [r7, #6]
	}

	if (BSP_hinputs.raw_data_joy[0] > BSP_hinputs.joy_cal.y_centre_max) {
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c34:	895b      	ldrh	r3, [r3, #10]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d90f      	bls.n	8001c5a <BSP_Inputs_ParseData+0x1be>
		joy_Y = ((BSP_hinputs.raw_data_joy[0] - BSP_hinputs.joy_cal.y_centre_max) * 128)/ (BSP_hinputs.joy_cal.y_max - BSP_hinputs.joy_cal.y_centre_max);
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c42:	895b      	ldrh	r3, [r3, #10]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	01da      	lsls	r2, r3, #7
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c4a:	8a5b      	ldrh	r3, [r3, #18]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c50:	895b      	ldrh	r3, [r3, #10]
 8001c52:	1acb      	subs	r3, r1, r3
 8001c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c58:	80bb      	strh	r3, [r7, #4]
	}

	if (BSP_hinputs.raw_data_joy[0] < BSP_hinputs.joy_cal.y_centre_min) {
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c60:	891b      	ldrh	r3, [r3, #8]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d20f      	bcs.n	8001c86 <BSP_Inputs_ParseData+0x1ea>
		joy_Y = ((BSP_hinputs.raw_data_joy[0] - BSP_hinputs.joy_cal.y_centre_min) * 128)/ (BSP_hinputs.joy_cal.y_centre_min - BSP_hinputs.joy_cal.y_min);
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c6e:	891b      	ldrh	r3, [r3, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	01da      	lsls	r2, r3, #7
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c76:	891b      	ldrh	r3, [r3, #8]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c7c:	8a1b      	ldrh	r3, [r3, #16]
 8001c7e:	1acb      	subs	r3, r1, r3
 8001c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c84:	80bb      	strh	r3, [r7, #4]
	}

	BSP_hinputs.joy.joy_X = -joy_X;
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	425b      	negs	r3, r3
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c90:	829a      	strh	r2, [r3, #20]
	BSP_hinputs.joy.joy_Y = joy_Y;
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <BSP_Inputs_ParseData+0x20c>)
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	82d3      	strh	r3, [r2, #22]

	return BSP_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	58020c00 	.word	0x58020c00
 8001ca8:	38000058 	.word	0x38000058
 8001cac:	58022000 	.word	0x58022000
 8001cb0:	58020800 	.word	0x58020800
 8001cb4:	58021800 	.word	0x58021800
 8001cb8:	58020000 	.word	0x58020000
 8001cbc:	58021000 	.word	0x58021000
 8001cc0:	58020400 	.word	0x58020400
 8001cc4:	58021c00 	.word	0x58021c00

08001cc8 <TIM2_IRQHandler>:


void TIM2_IRQHandler() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	// Update event interrupt
	if (TIM2->SR & TIM_SR_UIF) {
 8001ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <TIM2_IRQHandler+0x26>
		// Reseting interrupt
		TIM2->SR &= ~(TIM_SR_UIF);
 8001cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6113      	str	r3, [r2, #16]

		BSP_Inputs_ParseData();
 8001cea:	f7ff fed7 	bl	8001a9c <BSP_Inputs_ParseData>
	}
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_color_dist>:

/******************************************************************************
 * Private functions
 ******************************************************************************/

inline static uint32_t _color_dist(uint32_t c1, uint32_t c2) {
 8001cf2:	b480      	push	{r7}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
	// Color distance is calculated as per formula presented in:
	// https://www.compuphase.com/cmetric.htm, and
	// https://en.wikipedia.org/wiki/Color_difference


	uint8_t c1_b = (c1 & 0x000000ff) >> 0;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	75fb      	strb	r3, [r7, #23]
	uint8_t c1_g = (c1 & 0x0000ff00) >> 8;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	75bb      	strb	r3, [r7, #22]
	uint8_t c1_r = (c1 & 0x00ff0000) >> 16;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	757b      	strb	r3, [r7, #21]

	uint8_t c2_b = (c2 & 0x000000ff) >> 0;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	753b      	strb	r3, [r7, #20]
	uint8_t c2_g = (c2 & 0x0000ff00) >> 8;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	74fb      	strb	r3, [r7, #19]
	uint8_t c2_r = (c2 & 0x00ff0000) >> 16;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	74bb      	strb	r3, [r7, #18]

	int16_t av_r = (c1_r + c2_r) >> 1;
 8001d1c:	7d7a      	ldrb	r2, [r7, #21]
 8001d1e:	7cbb      	ldrb	r3, [r7, #18]
 8001d20:	4413      	add	r3, r2
 8001d22:	105b      	asrs	r3, r3, #1
 8001d24:	823b      	strh	r3, [r7, #16]
	int16_t	dr = (int16_t)c1_r - (int16_t)c2_r;
 8001d26:	7d7b      	ldrb	r3, [r7, #21]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	7cbb      	ldrb	r3, [r7, #18]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	81fb      	strh	r3, [r7, #14]
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 8001d34:	7dbb      	ldrb	r3, [r7, #22]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	81bb      	strh	r3, [r7, #12]
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	7d3b      	ldrb	r3, [r7, #20]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	817b      	strh	r3, [r7, #10]

	//return sqrt((((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8));
	// SQRT can be omitted, as it has no effect on finding minimum value of the function
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 8001d50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d64:	fb02 f303 	mul.w	r3, r2, r3
 8001d68:	121a      	asrs	r2, r3, #8
 8001d6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d6e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	441a      	add	r2, r3
 8001d7a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001d7e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8001d82:	1a5b      	subs	r3, r3, r1
 8001d84:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	121b      	asrs	r3, r3, #8
 8001d96:	4413      	add	r3, r2
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_ARGB8888_color>:
 * Functions for various color modes
 ******************************************************************************/

/* ARGB8888 ------------------------------------------------------------------*/

static uint32_t _ARGB8888_color(uint32_t color, uint8_t alpha) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	return (color & 0x00FFFFFF) | ((uint32_t)alpha << 24);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	4313      	orrs	r3, r2
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_ARGB8888_alpha>:


static uint32_t _ARGB8888_alpha(uint32_t color, uint8_t alpha) {
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	return (color & 0x00FFFFFF) | ((uint32_t)alpha << 24);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	4313      	orrs	r3, r2
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_ARGB8888_dma2dwait>:


static void _ARGB8888_dma2dwait() {
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 8001df0:	bf00      	nop
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <_ARGB8888_dma2dwait+0x1c>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d0fb      	beq.n	8001df2 <_ARGB8888_dma2dwait+0x6>
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	24000218 	.word	0x24000218

08001e0c <_ARGB8888_updatepixel>:


static void _ARGB8888_updatepixel(LCD_HandleTypeDef *lcd, uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	80fb      	strh	r3, [r7, #6]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8001e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e26:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e2a:	da1d      	bge.n	8001e68 <_ARGB8888_updatepixel+0x5c>
	if (x < 0) return;
 8001e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db1b      	blt.n	8001e6c <_ARGB8888_updatepixel+0x60>
	if (y >= LCD_HEIGHT) return;
 8001e34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e38:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001e3c:	da18      	bge.n	8001e70 <_ARGB8888_updatepixel+0x64>
	if (y < 0) return;
 8001e3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db16      	blt.n	8001e74 <_ARGB8888_updatepixel+0x68>

	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 8001e46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	009a      	lsls	r2, r3, #2
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
	*addr = value;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	6a3a      	ldr	r2, [r7, #32]
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e006      	b.n	8001e76 <_ARGB8888_updatepixel+0x6a>
	if (x >= LCD_WIDTH) return;
 8001e68:	bf00      	nop
 8001e6a:	e004      	b.n	8001e76 <_ARGB8888_updatepixel+0x6a>
	if (x < 0) return;
 8001e6c:	bf00      	nop
 8001e6e:	e002      	b.n	8001e76 <_ARGB8888_updatepixel+0x6a>
	if (y >= LCD_HEIGHT) return;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <_ARGB8888_updatepixel+0x6a>
	if (y < 0) return;
 8001e74:	bf00      	nop
}
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_ARGB8888_getpixel>:


static uint32_t _ARGB8888_getpixel(LCD_HandleTypeDef *lcd, uint32_t offset,  int16_t x, int16_t y) {
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	460b      	mov	r3, r1
 8001e90:	80fb      	strh	r3, [r7, #6]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 8001e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e9e:	db01      	blt.n	8001ea4 <_ARGB8888_getpixel+0x24>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e021      	b.n	8001ee8 <_ARGB8888_getpixel+0x68>
	if (x < 0) return 0x00000000;
 8001ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da01      	bge.n	8001eb0 <_ARGB8888_getpixel+0x30>
 8001eac:	2300      	movs	r3, #0
 8001eae:	e01b      	b.n	8001ee8 <_ARGB8888_getpixel+0x68>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8001eb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eb4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001eb8:	db01      	blt.n	8001ebe <_ARGB8888_getpixel+0x3e>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e014      	b.n	8001ee8 <_ARGB8888_getpixel+0x68>
	if (y < 0) return 0x00000000;
 8001ebe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da01      	bge.n	8001eca <_ARGB8888_getpixel+0x4a>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e00e      	b.n	8001ee8 <_ARGB8888_getpixel+0x68>

	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 8001eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ece:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ed2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	009a      	lsls	r2, r3, #2
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
	return *addr;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_ARGB8888_fillbuf>:


static void _ARGB8888_fillbuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af04      	add	r7, sp, #16
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	4608      	mov	r0, r1
 8001efe:	4611      	mov	r1, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	72fb      	strb	r3, [r7, #11]
 8001f06:	460b      	mov	r3, r1
 8001f08:	813b      	strh	r3, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8001f0e:	7afa      	ldrb	r2, [r7, #11]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3339      	adds	r3, #57	; 0x39
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8001f22:	7afa      	ldrb	r2, [r7, #11]
 8001f24:	7df8      	ldrb	r0, [r7, #23]
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4403      	add	r3, r0
 8001f30:	330a      	adds	r3, #10
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	8939      	ldrh	r1, [r7, #8]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001f40:	fb00 f202 	mul.w	r2, r0, r2
 8001f44:	440a      	add	r2, r1
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

	_ARGB8888_dma2dwait();
 8001f4c:	f7ff ff4e 	bl	8001dec <_ARGB8888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <_ARGB8888_fillbuf+0x84>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color);
 8001f56:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001f58:	8c3a      	ldrh	r2, [r7, #32]
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	460b      	mov	r3, r1
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4804      	ldr	r0, [pc, #16]	; (8001f7c <_ARGB8888_fillbuf+0x88>)
 8001f6c:	f004 ffd4 	bl	8006f18 <BSP_STM32_DMA2D_FillBuff>
}
 8001f70:	bf00      	nop
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	24000218 	.word	0x24000218
 8001f7c:	52001000 	.word	0x52001000

08001f80 <_ARGB8888_copybuf>:


static void _ARGB8888_copybuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af04      	add	r7, sp, #16
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	72fb      	strb	r3, [r7, #11]
 8001f90:	4613      	mov	r3, r2
 8001f92:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8001f94:	7afa      	ldrb	r2, [r7, #11]
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3339      	adds	r3, #57	; 0x39
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001fa8:	7afa      	ldrb	r2, [r7, #11]
 8001faa:	7df8      	ldrb	r0, [r7, #23]
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	330a      	adds	r3, #10
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	8c39      	ldrh	r1, [r7, #32]
 8001fc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fc2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001fc6:	fb00 f202 	mul.w	r2, r0, r2
 8001fca:	440a      	add	r2, r1
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]

	_ARGB8888_dma2dwait();
 8001fd2:	f7ff ff0b 	bl	8001dec <_ARGB8888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <_ARGB8888_copybuf+0x84>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001fdc:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8001fde:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	9303      	str	r3, [sp, #12]
 8001fe4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	893b      	ldrh	r3, [r7, #8]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <_ARGB8888_copybuf+0x88>)
 8001ff6:	f004 ffd9 	bl	8006fac <BSP_STM32_DMA2D_CopyBuf>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	24000218 	.word	0x24000218
 8002008:	52001000 	.word	0x52001000

0800200c <_ARGB8888_copybufblend>:


static void _ARGB8888_copybufblend(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af06      	add	r7, sp, #24
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	461a      	mov	r2, r3
 8002018:	460b      	mov	r3, r1
 800201a:	72fb      	strb	r3, [r7, #11]
 800201c:	4613      	mov	r3, r2
 800201e:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8002020:	7afa      	ldrb	r2, [r7, #11]
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3339      	adds	r3, #57	; 0x39
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8002034:	7afa      	ldrb	r2, [r7, #11]
 8002036:	7df8      	ldrb	r0, [r7, #23]
 8002038:	68f9      	ldr	r1, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	4403      	add	r3, r0
 8002042:	330a      	adds	r3, #10
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	8c39      	ldrh	r1, [r7, #32]
 800204c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800204e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002052:	fb00 f202 	mul.w	r2, r0, r2
 8002056:	440a      	add	r2, r1
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4413      	add	r3, r2
 800205c:	613b      	str	r3, [r7, #16]

	_ARGB8888_dma2dwait();
 800205e:	f7ff fec5 	bl	8001dec <_ARGB8888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <_ARGB8888_copybufblend+0x88>)
 8002064:	2201      	movs	r2, #1
 8002066:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8002068:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800206a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800206c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002070:	9304      	str	r3, [sp, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	9303      	str	r3, [sp, #12]
 8002076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	893b      	ldrh	r3, [r7, #8]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	460b      	mov	r3, r1
 8002084:	2100      	movs	r1, #0
 8002086:	4804      	ldr	r0, [pc, #16]	; (8002098 <_ARGB8888_copybufblend+0x8c>)
 8002088:	f005 f84c 	bl	8007124 <BSP_STM32_DMA2D_CopyBufBlend>
}
 800208c:	bf00      	nop
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	24000218 	.word	0x24000218
 8002098:	52001000 	.word	0x52001000

0800209c <_ARGB8888_copybufJPEG>:


static void _ARGB8888_copybufJPEG(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x_dest, uint16_t y_dest) {
 800209c:	b5b0      	push	{r4, r5, r7, lr}
 800209e:	b090      	sub	sp, #64	; 0x40
 80020a0:	af06      	add	r7, sp, #24
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	72fb      	strb	r3, [r7, #11]
 80020ae:	460b      	mov	r3, r1
 80020b0:	813b      	strh	r3, [r7, #8]
 80020b2:	4613      	mov	r3, r2
 80020b4:	80fb      	strh	r3, [r7, #6]
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 80020b6:	7afa      	ldrb	r2, [r7, #11]
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	3339      	adds	r3, #57	; 0x39
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	77fb      	strb	r3, [r7, #31]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 80020ca:	7afa      	ldrb	r2, [r7, #11]
 80020cc:	7ff8      	ldrb	r0, [r7, #31]
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	4403      	add	r3, r0
 80020d8:	330a      	adds	r3, #10
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	8939      	ldrh	r1, [r7, #8]
 80020e2:	88fa      	ldrh	r2, [r7, #6]
 80020e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80020e8:	fb00 f202 	mul.w	r2, r0, r2
 80020ec:	440a      	add	r2, r1
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
	uint32_t chroma = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24

	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 80020f8:	483b      	ldr	r0, [pc, #236]	; (80021e8 <_ARGB8888_copybufJPEG+0x14c>)
 80020fa:	f005 ff0b 	bl	8007f14 <BSP_STM32_JPEG_GetColorSpace>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b10      	cmp	r3, #16
 8002102:	d16a      	bne.n	80021da <_ARGB8888_copybufJPEG+0x13e>

	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002104:	4838      	ldr	r0, [pc, #224]	; (80021e8 <_ARGB8888_copybufJPEG+0x14c>)
 8002106:	f005 fedb 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 800210a:	6178      	str	r0, [r7, #20]
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 800210c:	4836      	ldr	r0, [pc, #216]	; (80021e8 <_ARGB8888_copybufJPEG+0x14c>)
 800210e:	f005 fed7 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8002112:	4603      	mov	r3, r0
 8002114:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8002118:	613b      	str	r3, [r7, #16]
	uint32_t offsline_src = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]

	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 800211e:	4832      	ldr	r0, [pc, #200]	; (80021e8 <_ARGB8888_copybufJPEG+0x14c>)
 8002120:	f005 feea 	bl	8007ef8 <BSP_STM32_JPEG_GetCSS>
 8002124:	4603      	mov	r3, r0
 8002126:	2b02      	cmp	r3, #2
 8002128:	d013      	beq.n	8002152 <_ARGB8888_copybufJPEG+0xb6>
 800212a:	2b02      	cmp	r3, #2
 800212c:	d857      	bhi.n	80021de <_ARGB8888_copybufJPEG+0x142>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01d      	beq.n	800216e <_ARGB8888_copybufJPEG+0xd2>
 8002132:	2b01      	cmp	r3, #1
 8002134:	d153      	bne.n	80021de <_ARGB8888_copybufJPEG+0x142>
	case JPEG_420_SUBSAMPLING:
		chroma = DMA2D_CSS_420;
 8002136:	2302      	movs	r3, #2
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 16) offsline_src = 16 - (width % 16);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	2b00      	cmp	r3, #0
 8002142:	d022      	beq.n	800218a <_ARGB8888_copybufJPEG+0xee>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	f1c3 0310 	rsb	r3, r3, #16
 800214e:	623b      	str	r3, [r7, #32]
		break;
 8002150:	e01b      	b.n	800218a <_ARGB8888_copybufJPEG+0xee>
	case JPEG_422_SUBSAMPLING:
		chroma = DMA2D_CSS_422;
 8002152:	2301      	movs	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 16) offsline_src = 16 - (width % 16);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	2b00      	cmp	r3, #0
 800215e:	d016      	beq.n	800218e <_ARGB8888_copybufJPEG+0xf2>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	f1c3 0310 	rsb	r3, r3, #16
 800216a:	623b      	str	r3, [r7, #32]
		break;
 800216c:	e00f      	b.n	800218e <_ARGB8888_copybufJPEG+0xf2>
	case JPEG_444_SUBSAMPLING:
		chroma = DMA2D_CSS_444;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 8) offsline_src = 8 - (width % 8);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <_ARGB8888_copybufJPEG+0xf6>
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	f1c3 0308 	rsb	r3, r3, #8
 8002186:	623b      	str	r3, [r7, #32]
		break;
 8002188:	e003      	b.n	8002192 <_ARGB8888_copybufJPEG+0xf6>
		break;
 800218a:	bf00      	nop
 800218c:	e002      	b.n	8002194 <_ARGB8888_copybufJPEG+0xf8>
		break;
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <_ARGB8888_copybufJPEG+0xf8>
		break;
 8002192:	bf00      	nop
	default:
		return;
	}

	// Wait for any previous DMA2D operation to complete
	_ARGB8888_dma2dwait();
 8002194:	f7ff fe2a 	bl	8001dec <_ARGB8888_dma2dwait>

	// Starting DMA2D color space conversion and copy to frame buffer.
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <_ARGB8888_copybufJPEG+0x150>)
 800219a:	2201      	movs	r2, #1
 800219c:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, lcd->JPEGBuf, offsline_dest, dest_addr, chroma);
 800219e:	4812      	ldr	r0, [pc, #72]	; (80021e8 <_ARGB8888_copybufJPEG+0x14c>)
 80021a0:	f005 fe8e 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29c      	uxth	r4, r3
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <_ARGB8888_copybufJPEG+0x14c>)
 80021aa:	f005 fe97 	bl	8007edc <BSP_STM32_JPEG_GetHeight>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29d      	uxth	r5, r3
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021ba:	6939      	ldr	r1, [r7, #16]
 80021bc:	b289      	uxth	r1, r1
 80021be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021c0:	9004      	str	r0, [sp, #16]
 80021c2:	69b8      	ldr	r0, [r7, #24]
 80021c4:	9003      	str	r0, [sp, #12]
 80021c6:	9102      	str	r1, [sp, #8]
 80021c8:	9201      	str	r2, [sp, #4]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	462b      	mov	r3, r5
 80021ce:	4622      	mov	r2, r4
 80021d0:	2100      	movs	r1, #0
 80021d2:	4807      	ldr	r0, [pc, #28]	; (80021f0 <_ARGB8888_copybufJPEG+0x154>)
 80021d4:	f004 ff46 	bl	8007064 <BSP_STM32_DMA2D_CopyBufJPEG>
 80021d8:	e002      	b.n	80021e0 <_ARGB8888_copybufJPEG+0x144>
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <_ARGB8888_copybufJPEG+0x144>
		return;
 80021de:	bf00      	nop
}
 80021e0:	3728      	adds	r7, #40	; 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bdb0      	pop	{r4, r5, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	52003000 	.word	0x52003000
 80021ec:	24000218 	.word	0x24000218
 80021f0:	52001000 	.word	0x52001000

080021f4 <_ARGB1555_color>:

/* ARGB1555 ------------------------------------------------------------------*/

static uint32_t _ARGB1555_color(uint32_t color, uint8_t alpha) {
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t r = ((color & 0x000000FF) >> 3 ) << 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	617b      	str	r3, [r7, #20]
	uint32_t g = ((color & 0x0000FF00) >> 11) << 5;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0adb      	lsrs	r3, r3, #11
 800220e:	015b      	lsls	r3, r3, #5
 8002210:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8002214:	613b      	str	r3, [r7, #16]
	uint32_t b = ((color & 0x00FF0000) >> 19) << 10;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0cdb      	lsrs	r3, r3, #19
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002220:	60fb      	str	r3, [r7, #12]
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <_ARGB1555_color+0x3a>
 8002228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800222c:	e000      	b.n	8002230 <_ARGB1555_color+0x3c>
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
	return r | g | b | a;
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	431a      	orrs	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	431a      	orrs	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
}
 8002240:	4618      	mov	r0, r3
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_ARGB1555_alpha>:


static uint32_t _ARGB1555_alpha(uint32_t color, uint8_t alpha) {
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t c = color & 0x0007FFF;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800225e:	60fb      	str	r3, [r7, #12]
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <_ARGB1555_alpha+0x20>
 8002266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226a:	e000      	b.n	800226e <_ARGB1555_alpha+0x22>
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
	return c | a;
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4313      	orrs	r3, r2
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <_ARGB1555_dma2dwait>:


static void _ARGB1555_dma2dwait() {
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 8002288:	bf00      	nop
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <_ARGB1555_dma2dwait+0x1c>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d0fb      	beq.n	800228a <_ARGB1555_dma2dwait+0x6>
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	24000218 	.word	0x24000218

080022a4 <_ARGB1555_updatepixel>:


static void _ARGB1555_updatepixel(LCD_HandleTypeDef *lcd, uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	460b      	mov	r3, r1
 80022b4:	80fb      	strh	r3, [r7, #6]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 80022ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80022c2:	da1e      	bge.n	8002302 <_ARGB1555_updatepixel+0x5e>
	if (x < 0) return;
 80022c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db1c      	blt.n	8002306 <_ARGB1555_updatepixel+0x62>
	if (y >= LCD_HEIGHT) return;
 80022cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022d0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80022d4:	da19      	bge.n	800230a <_ARGB1555_updatepixel+0x66>
	if (y < 0) return;
 80022d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db17      	blt.n	800230e <_ARGB1555_updatepixel+0x6a>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80022de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022e6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	005a      	lsls	r2, r3, #1
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
	*addr = (uint16_t)value;
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	801a      	strh	r2, [r3, #0]
 8002300:	e006      	b.n	8002310 <_ARGB1555_updatepixel+0x6c>
	if (x >= LCD_WIDTH) return;
 8002302:	bf00      	nop
 8002304:	e004      	b.n	8002310 <_ARGB1555_updatepixel+0x6c>
	if (x < 0) return;
 8002306:	bf00      	nop
 8002308:	e002      	b.n	8002310 <_ARGB1555_updatepixel+0x6c>
	if (y >= LCD_HEIGHT) return;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <_ARGB1555_updatepixel+0x6c>
	if (y < 0) return;
 800230e:	bf00      	nop
}
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_ARGB1555_getpixel>:


static uint32_t _ARGB1555_getpixel(LCD_HandleTypeDef *lcd, uint32_t offset,  int16_t x, int16_t y) {
 800231a:	b480      	push	{r7}
 800231c:	b087      	sub	sp, #28
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	4611      	mov	r1, r2
 8002326:	461a      	mov	r2, r3
 8002328:	460b      	mov	r3, r1
 800232a:	80fb      	strh	r3, [r7, #6]
 800232c:	4613      	mov	r3, r2
 800232e:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 8002330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002334:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002338:	db01      	blt.n	800233e <_ARGB1555_getpixel+0x24>
 800233a:	2300      	movs	r3, #0
 800233c:	e021      	b.n	8002382 <_ARGB1555_getpixel+0x68>
	if (x < 0) return 0x00000000;
 800233e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002342:	2b00      	cmp	r3, #0
 8002344:	da01      	bge.n	800234a <_ARGB1555_getpixel+0x30>
 8002346:	2300      	movs	r3, #0
 8002348:	e01b      	b.n	8002382 <_ARGB1555_getpixel+0x68>
	if (y >= LCD_HEIGHT) return 0x00000000;
 800234a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800234e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002352:	db01      	blt.n	8002358 <_ARGB1555_getpixel+0x3e>
 8002354:	2300      	movs	r3, #0
 8002356:	e014      	b.n	8002382 <_ARGB1555_getpixel+0x68>
	if (y < 0) return 0x00000000;
 8002358:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	da01      	bge.n	8002364 <_ARGB1555_getpixel+0x4a>
 8002360:	2300      	movs	r3, #0
 8002362:	e00e      	b.n	8002382 <_ARGB1555_getpixel+0x68>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8002364:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002368:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800236c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	005a      	lsls	r2, r3, #1
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
	return *addr;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	881b      	ldrh	r3, [r3, #0]
}
 8002382:	4618      	mov	r0, r3
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <_ARGB1555_fillbuf>:


static void _ARGB1555_fillbuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af04      	add	r7, sp, #16
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	461a      	mov	r2, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	72fb      	strb	r3, [r7, #11]
 80023a2:	460b      	mov	r3, r1
 80023a4:	813b      	strh	r3, [r7, #8]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 80023aa:	7afa      	ldrb	r2, [r7, #11]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	3339      	adds	r3, #57	; 0x39
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80023be:	7afa      	ldrb	r2, [r7, #11]
 80023c0:	7df8      	ldrb	r0, [r7, #23]
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	4403      	add	r3, r0
 80023cc:	330a      	adds	r3, #10
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	8939      	ldrh	r1, [r7, #8]
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80023dc:	fb00 f202 	mul.w	r2, r0, r2
 80023e0:	440a      	add	r2, r1
 80023e2:	0052      	lsls	r2, r2, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

	_ARGB1555_dma2dwait();
 80023e8:	f7ff ff4c 	bl	8002284 <_ARGB1555_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <_ARGB1555_fillbuf+0x84>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color);
 80023f2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80023f4:	8c3a      	ldrh	r2, [r7, #32]
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	460b      	mov	r3, r1
 8002404:	2103      	movs	r1, #3
 8002406:	4804      	ldr	r0, [pc, #16]	; (8002418 <_ARGB1555_fillbuf+0x88>)
 8002408:	f004 fd86 	bl	8006f18 <BSP_STM32_DMA2D_FillBuff>
}
 800240c:	bf00      	nop
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	24000218 	.word	0x24000218
 8002418:	52001000 	.word	0x52001000

0800241c <_ARGB1555_copybuf>:


static void _ARGB1555_copybuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af04      	add	r7, sp, #16
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	72fb      	strb	r3, [r7, #11]
 800242c:	4613      	mov	r3, r2
 800242e:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8002430:	7afa      	ldrb	r2, [r7, #11]
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	3339      	adds	r3, #57	; 0x39
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8002444:	7afa      	ldrb	r2, [r7, #11]
 8002446:	7df8      	ldrb	r0, [r7, #23]
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	4403      	add	r3, r0
 8002452:	330a      	adds	r3, #10
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	8c39      	ldrh	r1, [r7, #32]
 800245c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800245e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002462:	fb00 f202 	mul.w	r2, r0, r2
 8002466:	440a      	add	r2, r1
 8002468:	0052      	lsls	r2, r2, #1
 800246a:	4413      	add	r3, r2
 800246c:	613b      	str	r3, [r7, #16]

	_ARGB1555_dma2dwait();
 800246e:	f7ff ff09 	bl	8002284 <_ARGB1555_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <_ARGB1555_copybuf+0x84>)
 8002474:	2201      	movs	r2, #1
 8002476:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8002478:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800247a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	9303      	str	r3, [sp, #12]
 8002480:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002482:	9302      	str	r3, [sp, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	893b      	ldrh	r3, [r7, #8]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	460b      	mov	r3, r1
 800248e:	2103      	movs	r1, #3
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <_ARGB1555_copybuf+0x88>)
 8002492:	f004 fd8b 	bl	8006fac <BSP_STM32_DMA2D_CopyBuf>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	24000218 	.word	0x24000218
 80024a4:	52001000 	.word	0x52001000

080024a8 <_ARGB1555_copybufblend>:


static void _ARGB1555_copybufblend(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af06      	add	r7, sp, #24
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	461a      	mov	r2, r3
 80024b4:	460b      	mov	r3, r1
 80024b6:	72fb      	strb	r3, [r7, #11]
 80024b8:	4613      	mov	r3, r2
 80024ba:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 80024bc:	7afa      	ldrb	r2, [r7, #11]
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3339      	adds	r3, #57	; 0x39
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 80024d0:	7afa      	ldrb	r2, [r7, #11]
 80024d2:	7df8      	ldrb	r0, [r7, #23]
 80024d4:	68f9      	ldr	r1, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	4403      	add	r3, r0
 80024de:	330a      	adds	r3, #10
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	8c39      	ldrh	r1, [r7, #32]
 80024e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024ea:	f44f 7048 	mov.w	r0, #800	; 0x320
 80024ee:	fb00 f202 	mul.w	r2, r0, r2
 80024f2:	440a      	add	r2, r1
 80024f4:	0052      	lsls	r2, r2, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]

	_ARGB1555_dma2dwait();
 80024fa:	f7ff fec3 	bl	8002284 <_ARGB1555_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <_ARGB1555_copybufblend+0x88>)
 8002500:	2201      	movs	r2, #1
 8002502:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8002504:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8002506:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002508:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800250c:	9304      	str	r3, [sp, #16]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	9303      	str	r3, [sp, #12]
 8002512:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002514:	9302      	str	r3, [sp, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	893b      	ldrh	r3, [r7, #8]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	460b      	mov	r3, r1
 8002520:	2103      	movs	r1, #3
 8002522:	4804      	ldr	r0, [pc, #16]	; (8002534 <_ARGB1555_copybufblend+0x8c>)
 8002524:	f004 fdfe 	bl	8007124 <BSP_STM32_DMA2D_CopyBufBlend>
}
 8002528:	bf00      	nop
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	24000218 	.word	0x24000218
 8002534:	52001000 	.word	0x52001000

08002538 <_ARGB1555_copybufJPEG>:


static void _ARGB1555_copybufJPEG(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x_dest, uint16_t y_dest) {
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b090      	sub	sp, #64	; 0x40
 800253c:	af06      	add	r7, sp, #24
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	72fb      	strb	r3, [r7, #11]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8002552:	7afa      	ldrb	r2, [r7, #11]
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3339      	adds	r3, #57	; 0x39
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	77fb      	strb	r3, [r7, #31]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8002566:	7afa      	ldrb	r2, [r7, #11]
 8002568:	7ff8      	ldrb	r0, [r7, #31]
 800256a:	68f9      	ldr	r1, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	4403      	add	r3, r0
 8002574:	330a      	adds	r3, #10
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	8939      	ldrh	r1, [r7, #8]
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002584:	fb00 f202 	mul.w	r2, r0, r2
 8002588:	440a      	add	r2, r1
 800258a:	0052      	lsls	r2, r2, #1
 800258c:	4413      	add	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
	uint32_t chroma = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24

	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002594:	483b      	ldr	r0, [pc, #236]	; (8002684 <_ARGB1555_copybufJPEG+0x14c>)
 8002596:	f005 fcbd 	bl	8007f14 <BSP_STM32_JPEG_GetColorSpace>
 800259a:	4603      	mov	r3, r0
 800259c:	2b10      	cmp	r3, #16
 800259e:	d16a      	bne.n	8002676 <_ARGB1555_copybufJPEG+0x13e>

	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 80025a0:	4838      	ldr	r0, [pc, #224]	; (8002684 <_ARGB1555_copybufJPEG+0x14c>)
 80025a2:	f005 fc8d 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 80025a6:	6178      	str	r0, [r7, #20]
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 80025a8:	4836      	ldr	r0, [pc, #216]	; (8002684 <_ARGB1555_copybufJPEG+0x14c>)
 80025aa:	f005 fc89 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 80025b4:	613b      	str	r3, [r7, #16]
	uint32_t offsline_src = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]

	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 80025ba:	4832      	ldr	r0, [pc, #200]	; (8002684 <_ARGB1555_copybufJPEG+0x14c>)
 80025bc:	f005 fc9c 	bl	8007ef8 <BSP_STM32_JPEG_GetCSS>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d013      	beq.n	80025ee <_ARGB1555_copybufJPEG+0xb6>
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d857      	bhi.n	800267a <_ARGB1555_copybufJPEG+0x142>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01d      	beq.n	800260a <_ARGB1555_copybufJPEG+0xd2>
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d153      	bne.n	800267a <_ARGB1555_copybufJPEG+0x142>
	case JPEG_420_SUBSAMPLING:
		chroma = DMA2D_CSS_420;
 80025d2:	2302      	movs	r3, #2
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 16) offsline_src = 16 - (width % 16);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d022      	beq.n	8002626 <_ARGB1555_copybufJPEG+0xee>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	f1c3 0310 	rsb	r3, r3, #16
 80025ea:	623b      	str	r3, [r7, #32]
		break;
 80025ec:	e01b      	b.n	8002626 <_ARGB1555_copybufJPEG+0xee>
	case JPEG_422_SUBSAMPLING:
		chroma = DMA2D_CSS_422;
 80025ee:	2301      	movs	r3, #1
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 16) offsline_src = 16 - (width % 16);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <_ARGB1555_copybufJPEG+0xf2>
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	f1c3 0310 	rsb	r3, r3, #16
 8002606:	623b      	str	r3, [r7, #32]
		break;
 8002608:	e00f      	b.n	800262a <_ARGB1555_copybufJPEG+0xf2>
	case JPEG_444_SUBSAMPLING:
		chroma = DMA2D_CSS_444;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 8) offsline_src = 8 - (width % 8);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <_ARGB1555_copybufJPEG+0xf6>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	f1c3 0308 	rsb	r3, r3, #8
 8002622:	623b      	str	r3, [r7, #32]
		break;
 8002624:	e003      	b.n	800262e <_ARGB1555_copybufJPEG+0xf6>
		break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <_ARGB1555_copybufJPEG+0xf8>
		break;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <_ARGB1555_copybufJPEG+0xf8>
		break;
 800262e:	bf00      	nop
	default:
		return;
	}

	// Wait for any previous DMA2D operation to complete
	_ARGB1555_dma2dwait();
 8002630:	f7ff fe28 	bl	8002284 <_ARGB1555_dma2dwait>

	// Starting DMA2D color space conversion and copy to frame buffer.
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <_ARGB1555_copybufJPEG+0x150>)
 8002636:	2201      	movs	r2, #1
 8002638:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, lcd->JPEGBuf, offsline_dest, dest_addr, chroma);
 800263a:	4812      	ldr	r0, [pc, #72]	; (8002684 <_ARGB1555_copybufJPEG+0x14c>)
 800263c:	f005 fc40 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8002640:	4603      	mov	r3, r0
 8002642:	b29c      	uxth	r4, r3
 8002644:	480f      	ldr	r0, [pc, #60]	; (8002684 <_ARGB1555_copybufJPEG+0x14c>)
 8002646:	f005 fc49 	bl	8007edc <BSP_STM32_JPEG_GetHeight>
 800264a:	4603      	mov	r3, r0
 800264c:	b29d      	uxth	r5, r3
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	b29b      	uxth	r3, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002656:	6939      	ldr	r1, [r7, #16]
 8002658:	b289      	uxth	r1, r1
 800265a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800265c:	9004      	str	r0, [sp, #16]
 800265e:	69b8      	ldr	r0, [r7, #24]
 8002660:	9003      	str	r0, [sp, #12]
 8002662:	9102      	str	r1, [sp, #8]
 8002664:	9201      	str	r2, [sp, #4]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	462b      	mov	r3, r5
 800266a:	4622      	mov	r2, r4
 800266c:	2103      	movs	r1, #3
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <_ARGB1555_copybufJPEG+0x154>)
 8002670:	f004 fcf8 	bl	8007064 <BSP_STM32_DMA2D_CopyBufJPEG>
 8002674:	e002      	b.n	800267c <_ARGB1555_copybufJPEG+0x144>
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <_ARGB1555_copybufJPEG+0x144>
		return;
 800267a:	bf00      	nop
}
 800267c:	3728      	adds	r7, #40	; 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bdb0      	pop	{r4, r5, r7, pc}
 8002682:	bf00      	nop
 8002684:	52003000 	.word	0x52003000
 8002688:	24000218 	.word	0x24000218
 800268c:	52001000 	.word	0x52001000

08002690 <_ARGB4444_color>:


/* ARGB4444 ------------------------------------------------------------------*/

static uint32_t _ARGB4444_color(uint32_t color, uint8_t alpha) {
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t r = ((color & 0x000000FF) >> 4 ) << 0;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	617b      	str	r3, [r7, #20]
	uint32_t g = ((color & 0x0000FF00) >> 12) << 4;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0b1b      	lsrs	r3, r3, #12
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	613b      	str	r3, [r7, #16]
	uint32_t b = ((color & 0x00FF0000) >> 20) << 8;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	0d1b      	lsrs	r3, r3, #20
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026ba:	60fb      	str	r3, [r7, #12]
	uint32_t a = ((uint32_t)alpha >> 4) << 12;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	031b      	lsls	r3, r3, #12
 80026c4:	60bb      	str	r3, [r7, #8]
	return r | g | b | a;
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_ARGB4444_alpha>:


static uint32_t _ARGB4444_alpha(uint32_t color, uint8_t alpha) {
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t c = color & 0x0000FFF;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	60fb      	str	r3, [r7, #12]
	uint32_t a = ((uint32_t)alpha >> 4) << 12;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	031b      	lsls	r3, r3, #12
 80026fc:	60bb      	str	r3, [r7, #8]
	return c | a;
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_ARGB4444_dma2dwait>:


static void _ARGB4444_dma2dwait() {
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 8002714:	bf00      	nop
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <_ARGB4444_dma2dwait+0x1c>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d0fb      	beq.n	8002716 <_ARGB4444_dma2dwait+0x6>
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	24000218 	.word	0x24000218

08002730 <_ARGB4444_updatepixel>:


static void _ARGB4444_updatepixel(LCD_HandleTypeDef *lcd, uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	460b      	mov	r3, r1
 8002740:	80fb      	strh	r3, [r7, #6]
 8002742:	4613      	mov	r3, r2
 8002744:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8002746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800274e:	da1e      	bge.n	800278e <_ARGB4444_updatepixel+0x5e>
	if (x < 0) return;
 8002750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db1c      	blt.n	8002792 <_ARGB4444_updatepixel+0x62>
	if (y >= LCD_HEIGHT) return;
 8002758:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800275c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002760:	da19      	bge.n	8002796 <_ARGB4444_updatepixel+0x66>
	if (y < 0) return;
 8002762:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db17      	blt.n	800279a <_ARGB4444_updatepixel+0x6a>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 800276a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800276e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002772:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	005a      	lsls	r2, r3, #1
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4413      	add	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
	*addr = (uint16_t)value;
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	b29a      	uxth	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	e006      	b.n	800279c <_ARGB4444_updatepixel+0x6c>
	if (x >= LCD_WIDTH) return;
 800278e:	bf00      	nop
 8002790:	e004      	b.n	800279c <_ARGB4444_updatepixel+0x6c>
	if (x < 0) return;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <_ARGB4444_updatepixel+0x6c>
	if (y >= LCD_HEIGHT) return;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <_ARGB4444_updatepixel+0x6c>
	if (y < 0) return;
 800279a:	bf00      	nop
}
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_ARGB4444_getpixel>:


static uint32_t _ARGB4444_getpixel(LCD_HandleTypeDef *lcd, uint32_t offset,  int16_t x, int16_t y) {
 80027a6:	b480      	push	{r7}
 80027a8:	b087      	sub	sp, #28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	4611      	mov	r1, r2
 80027b2:	461a      	mov	r2, r3
 80027b4:	460b      	mov	r3, r1
 80027b6:	80fb      	strh	r3, [r7, #6]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 80027bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80027c4:	db01      	blt.n	80027ca <_ARGB4444_getpixel+0x24>
 80027c6:	2300      	movs	r3, #0
 80027c8:	e021      	b.n	800280e <_ARGB4444_getpixel+0x68>
	if (x < 0) return 0x00000000;
 80027ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da01      	bge.n	80027d6 <_ARGB4444_getpixel+0x30>
 80027d2:	2300      	movs	r3, #0
 80027d4:	e01b      	b.n	800280e <_ARGB4444_getpixel+0x68>
	if (y >= LCD_HEIGHT) return 0x00000000;
 80027d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027da:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80027de:	db01      	blt.n	80027e4 <_ARGB4444_getpixel+0x3e>
 80027e0:	2300      	movs	r3, #0
 80027e2:	e014      	b.n	800280e <_ARGB4444_getpixel+0x68>
	if (y < 0) return 0x00000000;
 80027e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da01      	bge.n	80027f0 <_ARGB4444_getpixel+0x4a>
 80027ec:	2300      	movs	r3, #0
 80027ee:	e00e      	b.n	800280e <_ARGB4444_getpixel+0x68>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80027f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027f8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	005a      	lsls	r2, r3, #1
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4413      	add	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
	return *addr;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	881b      	ldrh	r3, [r3, #0]
}
 800280e:	4618      	mov	r0, r3
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <_ARGB4444_fillbuf>:


static void _ARGB4444_fillbuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af04      	add	r7, sp, #16
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	72fb      	strb	r3, [r7, #11]
 800282e:	460b      	mov	r3, r1
 8002830:	813b      	strh	r3, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8002836:	7afa      	ldrb	r2, [r7, #11]
 8002838:	68f9      	ldr	r1, [r7, #12]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3339      	adds	r3, #57	; 0x39
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800284a:	7afa      	ldrb	r2, [r7, #11]
 800284c:	7df8      	ldrb	r0, [r7, #23]
 800284e:	68f9      	ldr	r1, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	4403      	add	r3, r0
 8002858:	330a      	adds	r3, #10
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	8939      	ldrh	r1, [r7, #8]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002868:	fb00 f202 	mul.w	r2, r0, r2
 800286c:	440a      	add	r2, r1
 800286e:	0052      	lsls	r2, r2, #1
 8002870:	4413      	add	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

	_ARGB4444_dma2dwait();
 8002874:	f7ff ff4c 	bl	8002710 <_ARGB4444_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <_ARGB4444_fillbuf+0x84>)
 800287a:	2201      	movs	r2, #1
 800287c:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color);
 800287e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002880:	8c3a      	ldrh	r2, [r7, #32]
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	9302      	str	r3, [sp, #8]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	460b      	mov	r3, r1
 8002890:	2104      	movs	r1, #4
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <_ARGB4444_fillbuf+0x88>)
 8002894:	f004 fb40 	bl	8006f18 <BSP_STM32_DMA2D_FillBuff>
}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	24000218 	.word	0x24000218
 80028a4:	52001000 	.word	0x52001000

080028a8 <_ARGB4444_copybuf>:


static void _ARGB4444_copybuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	461a      	mov	r2, r3
 80028b4:	460b      	mov	r3, r1
 80028b6:	72fb      	strb	r3, [r7, #11]
 80028b8:	4613      	mov	r3, r2
 80028ba:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 80028bc:	7afa      	ldrb	r2, [r7, #11]
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3339      	adds	r3, #57	; 0x39
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 80028d0:	7afa      	ldrb	r2, [r7, #11]
 80028d2:	7df8      	ldrb	r0, [r7, #23]
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	4403      	add	r3, r0
 80028de:	330a      	adds	r3, #10
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	8c39      	ldrh	r1, [r7, #32]
 80028e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028ea:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028ee:	fb00 f202 	mul.w	r2, r0, r2
 80028f2:	440a      	add	r2, r1
 80028f4:	0052      	lsls	r2, r2, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

	_ARGB4444_dma2dwait();
 80028fa:	f7ff ff09 	bl	8002710 <_ARGB4444_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <_ARGB4444_copybuf+0x84>)
 8002900:	2201      	movs	r2, #1
 8002902:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8002904:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8002906:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	9303      	str	r3, [sp, #12]
 800290c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	893b      	ldrh	r3, [r7, #8]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	460b      	mov	r3, r1
 800291a:	2104      	movs	r1, #4
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <_ARGB4444_copybuf+0x88>)
 800291e:	f004 fb45 	bl	8006fac <BSP_STM32_DMA2D_CopyBuf>
}
 8002922:	bf00      	nop
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	24000218 	.word	0x24000218
 8002930:	52001000 	.word	0x52001000

08002934 <_ARGB4444_copybufblend>:


static void _ARGB4444_copybufblend(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	; 0x30
 8002938:	af06      	add	r7, sp, #24
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	461a      	mov	r2, r3
 8002940:	460b      	mov	r3, r1
 8002942:	72fb      	strb	r3, [r7, #11]
 8002944:	4613      	mov	r3, r2
 8002946:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8002948:	7afa      	ldrb	r2, [r7, #11]
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3339      	adds	r3, #57	; 0x39
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 800295c:	7afa      	ldrb	r2, [r7, #11]
 800295e:	7df8      	ldrb	r0, [r7, #23]
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	4403      	add	r3, r0
 800296a:	330a      	adds	r3, #10
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	8c39      	ldrh	r1, [r7, #32]
 8002974:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002976:	f44f 7048 	mov.w	r0, #800	; 0x320
 800297a:	fb00 f202 	mul.w	r2, r0, r2
 800297e:	440a      	add	r2, r1
 8002980:	0052      	lsls	r2, r2, #1
 8002982:	4413      	add	r3, r2
 8002984:	613b      	str	r3, [r7, #16]

	_ARGB4444_dma2dwait();
 8002986:	f7ff fec3 	bl	8002710 <_ARGB4444_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <_ARGB4444_copybufblend+0x88>)
 800298c:	2201      	movs	r2, #1
 800298e:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8002990:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8002992:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002994:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002998:	9304      	str	r3, [sp, #16]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	9303      	str	r3, [sp, #12]
 800299e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029a0:	9302      	str	r3, [sp, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	893b      	ldrh	r3, [r7, #8]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	460b      	mov	r3, r1
 80029ac:	2104      	movs	r1, #4
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <_ARGB4444_copybufblend+0x8c>)
 80029b0:	f004 fbb8 	bl	8007124 <BSP_STM32_DMA2D_CopyBufBlend>
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	24000218 	.word	0x24000218
 80029c0:	52001000 	.word	0x52001000

080029c4 <_ARGB4444_copybufJPEG>:


static void _ARGB4444_copybufJPEG(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x_dest, uint16_t y_dest) {
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b090      	sub	sp, #64	; 0x40
 80029c8:	af06      	add	r7, sp, #24
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	72fb      	strb	r3, [r7, #11]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 80029de:	7afa      	ldrb	r2, [r7, #11]
 80029e0:	68f9      	ldr	r1, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3339      	adds	r3, #57	; 0x39
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	77fb      	strb	r3, [r7, #31]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 80029f2:	7afa      	ldrb	r2, [r7, #11]
 80029f4:	7ff8      	ldrb	r0, [r7, #31]
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	4403      	add	r3, r0
 8002a00:	330a      	adds	r3, #10
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	8939      	ldrh	r1, [r7, #8]
 8002a0a:	88fa      	ldrh	r2, [r7, #6]
 8002a0c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002a10:	fb00 f202 	mul.w	r2, r0, r2
 8002a14:	440a      	add	r2, r1
 8002a16:	0052      	lsls	r2, r2, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
	uint32_t chroma = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24

	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002a20:	483b      	ldr	r0, [pc, #236]	; (8002b10 <_ARGB4444_copybufJPEG+0x14c>)
 8002a22:	f005 fa77 	bl	8007f14 <BSP_STM32_JPEG_GetColorSpace>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d16a      	bne.n	8002b02 <_ARGB4444_copybufJPEG+0x13e>

	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002a2c:	4838      	ldr	r0, [pc, #224]	; (8002b10 <_ARGB4444_copybufJPEG+0x14c>)
 8002a2e:	f005 fa47 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8002a32:	6178      	str	r0, [r7, #20]
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8002a34:	4836      	ldr	r0, [pc, #216]	; (8002b10 <_ARGB4444_copybufJPEG+0x14c>)
 8002a36:	f005 fa43 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8002a40:	613b      	str	r3, [r7, #16]
	uint32_t offsline_src = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]

	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8002a46:	4832      	ldr	r0, [pc, #200]	; (8002b10 <_ARGB4444_copybufJPEG+0x14c>)
 8002a48:	f005 fa56 	bl	8007ef8 <BSP_STM32_JPEG_GetCSS>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d013      	beq.n	8002a7a <_ARGB4444_copybufJPEG+0xb6>
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d857      	bhi.n	8002b06 <_ARGB4444_copybufJPEG+0x142>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01d      	beq.n	8002a96 <_ARGB4444_copybufJPEG+0xd2>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d153      	bne.n	8002b06 <_ARGB4444_copybufJPEG+0x142>
	case JPEG_420_SUBSAMPLING:
		chroma = DMA2D_CSS_420;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 16) offsline_src = 16 - (width % 16);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d022      	beq.n	8002ab2 <_ARGB4444_copybufJPEG+0xee>
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	f1c3 0310 	rsb	r3, r3, #16
 8002a76:	623b      	str	r3, [r7, #32]
		break;
 8002a78:	e01b      	b.n	8002ab2 <_ARGB4444_copybufJPEG+0xee>
	case JPEG_422_SUBSAMPLING:
		chroma = DMA2D_CSS_422;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 16) offsline_src = 16 - (width % 16);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d016      	beq.n	8002ab6 <_ARGB4444_copybufJPEG+0xf2>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	f1c3 0310 	rsb	r3, r3, #16
 8002a92:	623b      	str	r3, [r7, #32]
		break;
 8002a94:	e00f      	b.n	8002ab6 <_ARGB4444_copybufJPEG+0xf2>
	case JPEG_444_SUBSAMPLING:
		chroma = DMA2D_CSS_444;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 8) offsline_src = 8 - (width % 8);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <_ARGB4444_copybufJPEG+0xf6>
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	f1c3 0308 	rsb	r3, r3, #8
 8002aae:	623b      	str	r3, [r7, #32]
		break;
 8002ab0:	e003      	b.n	8002aba <_ARGB4444_copybufJPEG+0xf6>
		break;
 8002ab2:	bf00      	nop
 8002ab4:	e002      	b.n	8002abc <_ARGB4444_copybufJPEG+0xf8>
		break;
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <_ARGB4444_copybufJPEG+0xf8>
		break;
 8002aba:	bf00      	nop
	default:
		return;
	}

	// Wait for any previous DMA2D operation to complete
	_ARGB4444_dma2dwait();
 8002abc:	f7ff fe28 	bl	8002710 <_ARGB4444_dma2dwait>

	// Starting DMA2D color space conversion and copy to frame buffer.
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <_ARGB4444_copybufJPEG+0x150>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, lcd->JPEGBuf, offsline_dest, dest_addr, chroma);
 8002ac6:	4812      	ldr	r0, [pc, #72]	; (8002b10 <_ARGB4444_copybufJPEG+0x14c>)
 8002ac8:	f005 f9fa 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8002acc:	4603      	mov	r3, r0
 8002ace:	b29c      	uxth	r4, r3
 8002ad0:	480f      	ldr	r0, [pc, #60]	; (8002b10 <_ARGB4444_copybufJPEG+0x14c>)
 8002ad2:	f005 fa03 	bl	8007edc <BSP_STM32_JPEG_GetHeight>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b29d      	uxth	r5, r3
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ae2:	6939      	ldr	r1, [r7, #16]
 8002ae4:	b289      	uxth	r1, r1
 8002ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ae8:	9004      	str	r0, [sp, #16]
 8002aea:	69b8      	ldr	r0, [r7, #24]
 8002aec:	9003      	str	r0, [sp, #12]
 8002aee:	9102      	str	r1, [sp, #8]
 8002af0:	9201      	str	r2, [sp, #4]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	462b      	mov	r3, r5
 8002af6:	4622      	mov	r2, r4
 8002af8:	2104      	movs	r1, #4
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <_ARGB4444_copybufJPEG+0x154>)
 8002afc:	f004 fab2 	bl	8007064 <BSP_STM32_DMA2D_CopyBufJPEG>
 8002b00:	e002      	b.n	8002b08 <_ARGB4444_copybufJPEG+0x144>
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <_ARGB4444_copybufJPEG+0x144>
		return;
 8002b06:	bf00      	nop
}
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	52003000 	.word	0x52003000
 8002b14:	24000218 	.word	0x24000218
 8002b18:	52001000 	.word	0x52001000

08002b1c <_RGB888_color>:



/* RGB888 --------------------------------------------------------------------*/

static uint32_t _RGB888_color(uint32_t color, uint8_t alpha) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	// alpha is ignored
	return color;
 8002b28:	687b      	ldr	r3, [r7, #4]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_RGB888_alpha>:


static uint32_t _RGB888_alpha(uint32_t color, uint8_t alpha) {
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	// alpha is ignored
	return color;
 8002b42:	687b      	ldr	r3, [r7, #4]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <_RGB888_dma2dwait>:


static void _RGB888_dma2dwait() {
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 8002b54:	bf00      	nop
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <_RGB888_dma2dwait+0x1c>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d0fb      	beq.n	8002b56 <_RGB888_dma2dwait+0x6>
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	24000218 	.word	0x24000218

08002b70 <_RGB888_updatepixel>:


static void _RGB888_updatepixel(LCD_HandleTypeDef *lcd, uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	460b      	mov	r3, r1
 8002b80:	80fb      	strh	r3, [r7, #6]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8002b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b8a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002b8e:	da36      	bge.n	8002bfe <_RGB888_updatepixel+0x8e>
	if (x < 0) return;
 8002b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db34      	blt.n	8002c02 <_RGB888_updatepixel+0x92>
	if (y >= LCD_HEIGHT) return;
 8002b98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b9c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002ba0:	da31      	bge.n	8002c06 <_RGB888_updatepixel+0x96>
	if (y < 0) return;
 8002ba2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db2f      	blt.n	8002c0a <_RGB888_updatepixel+0x9a>

	uint32_t pvalue = (uint32_t)&value;
 8002baa:	f107 0320 	add.w	r3, r7, #32
 8002bae:	617b      	str	r3, [r7, #20]
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8002bb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bb8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	441a      	add	r2, r3
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4413      	add	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	617a      	str	r2, [r7, #20]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	613a      	str	r2, [r7, #16]
 8002bde:	780a      	ldrb	r2, [r1, #0]
 8002be0:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	617a      	str	r2, [r7, #20]
 8002be8:	4619      	mov	r1, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	613a      	str	r2, [r7, #16]
 8002bf0:	780a      	ldrb	r2, [r1, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)(addr  ) = *(uint8_t *)(pvalue  );
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e006      	b.n	8002c0c <_RGB888_updatepixel+0x9c>
	if (x >= LCD_WIDTH) return;
 8002bfe:	bf00      	nop
 8002c00:	e004      	b.n	8002c0c <_RGB888_updatepixel+0x9c>
	if (x < 0) return;
 8002c02:	bf00      	nop
 8002c04:	e002      	b.n	8002c0c <_RGB888_updatepixel+0x9c>
	if (y >= LCD_HEIGHT) return;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <_RGB888_updatepixel+0x9c>
	if (y < 0) return;
 8002c0a:	bf00      	nop
}
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_RGB888_getpixel>:


static uint32_t _RGB888_getpixel(LCD_HandleTypeDef *lcd, uint32_t offset,  int16_t x, int16_t y) {
 8002c16:	b480      	push	{r7}
 8002c18:	b087      	sub	sp, #28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	4611      	mov	r1, r2
 8002c22:	461a      	mov	r2, r3
 8002c24:	460b      	mov	r3, r1
 8002c26:	80fb      	strh	r3, [r7, #6]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 8002c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c30:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002c34:	db01      	blt.n	8002c3a <_RGB888_getpixel+0x24>
 8002c36:	2300      	movs	r3, #0
 8002c38:	e038      	b.n	8002cac <_RGB888_getpixel+0x96>
	if (x < 0) return 0x00000000;
 8002c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da01      	bge.n	8002c46 <_RGB888_getpixel+0x30>
 8002c42:	2300      	movs	r3, #0
 8002c44:	e032      	b.n	8002cac <_RGB888_getpixel+0x96>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8002c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c4a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002c4e:	db01      	blt.n	8002c54 <_RGB888_getpixel+0x3e>
 8002c50:	2300      	movs	r3, #0
 8002c52:	e02b      	b.n	8002cac <_RGB888_getpixel+0x96>
	if (y < 0) return 0x00000000;
 8002c54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	da01      	bge.n	8002c60 <_RGB888_getpixel+0x4a>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e025      	b.n	8002cac <_RGB888_getpixel+0x96>

	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8002c60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c68:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	441a      	add	r2, r3
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

	if (addr & 1) return (*(uint8_t *)(addr + 1)) | (*(uint16_t *)(addr) << 8);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <_RGB888_getpixel+0x86>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	e007      	b.n	8002cac <_RGB888_getpixel+0x96>
	return (*(uint16_t *)(addr + 1)) | (*(uint8_t *)(addr) << 16);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	4313      	orrs	r3, r2
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_RGB888_fillbuf>:


static void _RGB888_fillbuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	72fb      	strb	r3, [r7, #11]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	813b      	strh	r3, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8002cd2:	7afa      	ldrb	r2, [r7, #11]
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3339      	adds	r3, #57	; 0x39
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 8002ce6:	7afa      	ldrb	r2, [r7, #11]
 8002ce8:	7df8      	ldrb	r0, [r7, #23]
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4403      	add	r3, r0
 8002cf4:	330a      	adds	r3, #10
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	893a      	ldrh	r2, [r7, #8]
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002d04:	fb00 f303 	mul.w	r3, r0, r3
 8002d08:	441a      	add	r2, r3
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	613b      	str	r3, [r7, #16]

	_RGB888_dma2dwait();
 8002d14:	f7ff ff1c 	bl	8002b50 <_RGB888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <_RGB888_fillbuf+0x88>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color);
 8002d1e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002d20:	8c3a      	ldrh	r2, [r7, #32]
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	2101      	movs	r1, #1
 8002d32:	4804      	ldr	r0, [pc, #16]	; (8002d44 <_RGB888_fillbuf+0x8c>)
 8002d34:	f004 f8f0 	bl	8006f18 <BSP_STM32_DMA2D_FillBuff>
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	24000218 	.word	0x24000218
 8002d44:	52001000 	.word	0x52001000

08002d48 <_RGB888_copybuf>:


static void _RGB888_copybuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af04      	add	r7, sp, #16
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	460b      	mov	r3, r1
 8002d56:	72fb      	strb	r3, [r7, #11]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8002d5c:	7afa      	ldrb	r2, [r7, #11]
 8002d5e:	68f9      	ldr	r1, [r7, #12]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3339      	adds	r3, #57	; 0x39
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8002d70:	7afa      	ldrb	r2, [r7, #11]
 8002d72:	7df8      	ldrb	r0, [r7, #23]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4403      	add	r3, r0
 8002d7e:	330a      	adds	r3, #10
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	8c3a      	ldrh	r2, [r7, #32]
 8002d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d8a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	441a      	add	r2, r3
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	613b      	str	r3, [r7, #16]

	_RGB888_dma2dwait();
 8002d9e:	f7ff fed7 	bl	8002b50 <_RGB888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <_RGB888_copybuf+0x88>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8002da8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8002daa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	9303      	str	r3, [sp, #12]
 8002db0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002db2:	9302      	str	r3, [sp, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	893b      	ldrh	r3, [r7, #8]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <_RGB888_copybuf+0x8c>)
 8002dc2:	f004 f8f3 	bl	8006fac <BSP_STM32_DMA2D_CopyBuf>
}
 8002dc6:	bf00      	nop
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	24000218 	.word	0x24000218
 8002dd4:	52001000 	.word	0x52001000

08002dd8 <_RGB888_copybufblend>:


static void _RGB888_copybufblend(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af06      	add	r7, sp, #24
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	460b      	mov	r3, r1
 8002de6:	72fb      	strb	r3, [r7, #11]
 8002de8:	4613      	mov	r3, r2
 8002dea:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed

	// Blending not available in modes without ALPHA channel
	_RGB888_copybuf(lcd, layer, src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 8002dec:	893a      	ldrh	r2, [r7, #8]
 8002dee:	7af9      	ldrb	r1, [r7, #11]
 8002df0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002df2:	9304      	str	r3, [sp, #16]
 8002df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002df6:	9303      	str	r3, [sp, #12]
 8002df8:	8c3b      	ldrh	r3, [r7, #32]
 8002dfa:	9302      	str	r3, [sp, #8]
 8002dfc:	8bbb      	ldrh	r3, [r7, #28]
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	8b3b      	ldrh	r3, [r7, #24]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7ff ff9d 	bl	8002d48 <_RGB888_copybuf>
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <_RGB888_copybufJPEG>:


static void _RGB888_copybufJPEG(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x_dest, uint16_t y_dest) {
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b090      	sub	sp, #64	; 0x40
 8002e1c:	af06      	add	r7, sp, #24
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	72fb      	strb	r3, [r7, #11]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	813b      	strh	r3, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8002e32:	7afa      	ldrb	r2, [r7, #11]
 8002e34:	68f9      	ldr	r1, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3339      	adds	r3, #57	; 0x39
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	77fb      	strb	r3, [r7, #31]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8002e46:	7afa      	ldrb	r2, [r7, #11]
 8002e48:	7ff8      	ldrb	r0, [r7, #31]
 8002e4a:	68f9      	ldr	r1, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	4403      	add	r3, r0
 8002e54:	330a      	adds	r3, #10
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	893a      	ldrh	r2, [r7, #8]
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002e64:	fb00 f303 	mul.w	r3, r0, r3
 8002e68:	441a      	add	r2, r3
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	61bb      	str	r3, [r7, #24]
	uint32_t chroma = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24

	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002e78:	483b      	ldr	r0, [pc, #236]	; (8002f68 <_RGB888_copybufJPEG+0x150>)
 8002e7a:	f005 f84b 	bl	8007f14 <BSP_STM32_JPEG_GetColorSpace>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d16a      	bne.n	8002f5a <_RGB888_copybufJPEG+0x142>

	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002e84:	4838      	ldr	r0, [pc, #224]	; (8002f68 <_RGB888_copybufJPEG+0x150>)
 8002e86:	f005 f81b 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8002e8a:	6178      	str	r0, [r7, #20]
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8002e8c:	4836      	ldr	r0, [pc, #216]	; (8002f68 <_RGB888_copybufJPEG+0x150>)
 8002e8e:	f005 f817 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8002e98:	613b      	str	r3, [r7, #16]
	uint32_t offsline_src = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]

	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8002e9e:	4832      	ldr	r0, [pc, #200]	; (8002f68 <_RGB888_copybufJPEG+0x150>)
 8002ea0:	f005 f82a 	bl	8007ef8 <BSP_STM32_JPEG_GetCSS>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d013      	beq.n	8002ed2 <_RGB888_copybufJPEG+0xba>
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d857      	bhi.n	8002f5e <_RGB888_copybufJPEG+0x146>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <_RGB888_copybufJPEG+0xd6>
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d153      	bne.n	8002f5e <_RGB888_copybufJPEG+0x146>
	case JPEG_420_SUBSAMPLING:
		chroma = DMA2D_CSS_420;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 16) offsline_src = 16 - (width % 16);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d022      	beq.n	8002f0a <_RGB888_copybufJPEG+0xf2>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	f1c3 0310 	rsb	r3, r3, #16
 8002ece:	623b      	str	r3, [r7, #32]
		break;
 8002ed0:	e01b      	b.n	8002f0a <_RGB888_copybufJPEG+0xf2>
	case JPEG_422_SUBSAMPLING:
		chroma = DMA2D_CSS_422;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 16) offsline_src = 16 - (width % 16);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <_RGB888_copybufJPEG+0xf6>
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	f1c3 0310 	rsb	r3, r3, #16
 8002eea:	623b      	str	r3, [r7, #32]
		break;
 8002eec:	e00f      	b.n	8002f0e <_RGB888_copybufJPEG+0xf6>
	case JPEG_444_SUBSAMPLING:
		chroma = DMA2D_CSS_444;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
		if (width % 8) offsline_src = 8 - (width % 8);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <_RGB888_copybufJPEG+0xfa>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	f1c3 0308 	rsb	r3, r3, #8
 8002f06:	623b      	str	r3, [r7, #32]
		break;
 8002f08:	e003      	b.n	8002f12 <_RGB888_copybufJPEG+0xfa>
		break;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <_RGB888_copybufJPEG+0xfc>
		break;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <_RGB888_copybufJPEG+0xfc>
		break;
 8002f12:	bf00      	nop
	default:
		return;
	}

	// Wait for any previous DMA2D operation to complete
	_ARGB8888_dma2dwait();
 8002f14:	f7fe ff6a 	bl	8001dec <_ARGB8888_dma2dwait>

	// Starting DMA2D color space conversion and copy to frame buffer.
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <_RGB888_copybufJPEG+0x154>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, lcd->JPEGBuf, offsline_dest, dest_addr, chroma);
 8002f1e:	4812      	ldr	r0, [pc, #72]	; (8002f68 <_RGB888_copybufJPEG+0x150>)
 8002f20:	f004 ffce 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8002f24:	4603      	mov	r3, r0
 8002f26:	b29c      	uxth	r4, r3
 8002f28:	480f      	ldr	r0, [pc, #60]	; (8002f68 <_RGB888_copybufJPEG+0x150>)
 8002f2a:	f004 ffd7 	bl	8007edc <BSP_STM32_JPEG_GetHeight>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	b29d      	uxth	r5, r3
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f3a:	6939      	ldr	r1, [r7, #16]
 8002f3c:	b289      	uxth	r1, r1
 8002f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f40:	9004      	str	r0, [sp, #16]
 8002f42:	69b8      	ldr	r0, [r7, #24]
 8002f44:	9003      	str	r0, [sp, #12]
 8002f46:	9102      	str	r1, [sp, #8]
 8002f48:	9201      	str	r2, [sp, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	4622      	mov	r2, r4
 8002f50:	2101      	movs	r1, #1
 8002f52:	4807      	ldr	r0, [pc, #28]	; (8002f70 <_RGB888_copybufJPEG+0x158>)
 8002f54:	f004 f886 	bl	8007064 <BSP_STM32_DMA2D_CopyBufJPEG>
 8002f58:	e002      	b.n	8002f60 <_RGB888_copybufJPEG+0x148>
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <_RGB888_copybufJPEG+0x148>
		return;
 8002f5e:	bf00      	nop
}
 8002f60:	3728      	adds	r7, #40	; 0x28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bdb0      	pop	{r4, r5, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	52003000 	.word	0x52003000
 8002f6c:	24000218 	.word	0x24000218
 8002f70:	52001000 	.word	0x52001000

08002f74 <_AL88_color>:


/* AL88 ----------------------------------------------------------------------*/

static uint32_t _AL88_color(uint32_t color, uint8_t alpha) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t match_c = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
	uint32_t min_dist = 0xffffffff;
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
 8002f88:	613b      	str	r3, [r7, #16]
	uint32_t dist;

	for (uint16_t m=0; m<256; m++) {
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	81fb      	strh	r3, [r7, #14]
 8002f8e:	e013      	b.n	8002fb8 <_AL88_color+0x44>
		dist = _color_dist(color, C_LUT_COLOR[m]);
 8002f90:	89fb      	ldrh	r3, [r7, #14]
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <_AL88_color+0x68>)
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fe fea9 	bl	8001cf2 <_color_dist>
 8002fa0:	60b8      	str	r0, [r7, #8]
		if (dist < min_dist) {
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d203      	bcs.n	8002fb2 <_AL88_color+0x3e>
			min_dist = dist;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	613b      	str	r3, [r7, #16]
			match_c = m;
 8002fae:	89fb      	ldrh	r3, [r7, #14]
 8002fb0:	617b      	str	r3, [r7, #20]
	for (uint16_t m=0; m<256; m++) {
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	81fb      	strh	r3, [r7, #14]
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	2bff      	cmp	r3, #255	; 0xff
 8002fbc:	d9e8      	bls.n	8002f90 <_AL88_color+0x1c>
		}
	}

	return (match_c) | ((uint32_t)alpha << 8) | (match_c << 16) | ((uint32_t)alpha << 24);
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	4313      	orrs	r3, r2
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	0801078c 	.word	0x0801078c

08002fe0 <_AL88_alpha>:


static uint32_t _AL88_alpha(uint32_t color, uint8_t alpha) {
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	return (color & 0x00FF00FF) | ((uint32_t)alpha << 8) | ((uint32_t)alpha << 24);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	4313      	orrs	r3, r2
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <_AL88_dma2dwait>:


static void _AL88_dma2dwait() {
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 8003010:	bf00      	nop
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <_AL88_dma2dwait+0x1c>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d0fb      	beq.n	8003012 <_AL88_dma2dwait+0x6>
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	24000218 	.word	0x24000218

0800302c <_AL88_updatepixel>:


static void _AL88_updatepixel(LCD_HandleTypeDef *lcd, uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	4611      	mov	r1, r2
 8003038:	461a      	mov	r2, r3
 800303a:	460b      	mov	r3, r1
 800303c:	80fb      	strh	r3, [r7, #6]
 800303e:	4613      	mov	r3, r2
 8003040:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8003042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003046:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800304a:	da21      	bge.n	8003090 <_AL88_updatepixel+0x64>
	if (x < 0) return;
 800304c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003050:	2b00      	cmp	r3, #0
 8003052:	db1f      	blt.n	8003094 <_AL88_updatepixel+0x68>
	if (y >= LCD_HEIGHT) return;
 8003054:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003058:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800305c:	da1c      	bge.n	8003098 <_AL88_updatepixel+0x6c>
	if (y < 0) return;
 800305e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db1a      	blt.n	800309c <_AL88_updatepixel+0x70>

	uint16_t *pvalue16 = (uint16_t *)&value;
 8003066:	f107 0320 	add.w	r3, r7, #32
 800306a:	617b      	str	r3, [r7, #20]
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 800306c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003070:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003074:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	005a      	lsls	r2, r3, #1
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4413      	add	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
	*addr = *pvalue16;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	881a      	ldrh	r2, [r3, #0]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	801a      	strh	r2, [r3, #0]
 800308e:	e006      	b.n	800309e <_AL88_updatepixel+0x72>
	if (x >= LCD_WIDTH) return;
 8003090:	bf00      	nop
 8003092:	e004      	b.n	800309e <_AL88_updatepixel+0x72>
	if (x < 0) return;
 8003094:	bf00      	nop
 8003096:	e002      	b.n	800309e <_AL88_updatepixel+0x72>
	if (y >= LCD_HEIGHT) return;
 8003098:	bf00      	nop
 800309a:	e000      	b.n	800309e <_AL88_updatepixel+0x72>
	if (y < 0) return;
 800309c:	bf00      	nop
}
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <_AL88_getpixel>:

static uint32_t _AL88_getpixel(LCD_HandleTypeDef *lcd, uint32_t offset,  int16_t x, int16_t y) {
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	460b      	mov	r3, r1
 80030b8:	80fb      	strh	r3, [r7, #6]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 80030be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80030c6:	db01      	blt.n	80030cc <_AL88_getpixel+0x24>
 80030c8:	2300      	movs	r3, #0
 80030ca:	e021      	b.n	8003110 <_AL88_getpixel+0x68>
	if (x < 0) return 0x00000000;
 80030cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da01      	bge.n	80030d8 <_AL88_getpixel+0x30>
 80030d4:	2300      	movs	r3, #0
 80030d6:	e01b      	b.n	8003110 <_AL88_getpixel+0x68>
	if (y >= LCD_HEIGHT) return 0x00000000;
 80030d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030dc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80030e0:	db01      	blt.n	80030e6 <_AL88_getpixel+0x3e>
 80030e2:	2300      	movs	r3, #0
 80030e4:	e014      	b.n	8003110 <_AL88_getpixel+0x68>
	if (y < 0) return 0x00000000;
 80030e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da01      	bge.n	80030f2 <_AL88_getpixel+0x4a>
 80030ee:	2300      	movs	r3, #0
 80030f0:	e00e      	b.n	8003110 <_AL88_getpixel+0x68>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80030f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030fa:	f44f 7148 	mov.w	r1, #800	; 0x320
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	005a      	lsls	r2, r3, #1
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4413      	add	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
	return *addr;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	881b      	ldrh	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <_AL88_fillbuf>:


static void _AL88_fillbuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af04      	add	r7, sp, #16
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	72fb      	strb	r3, [r7, #11]
 800312e:	460b      	mov	r3, r1
 8003130:	813b      	strh	r3, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed

	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8003136:	7afa      	ldrb	r2, [r7, #11]
 8003138:	68f9      	ldr	r1, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3339      	adds	r3, #57	; 0x39
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800314a:	7afa      	ldrb	r2, [r7, #11]
 800314c:	7df8      	ldrb	r0, [r7, #23]
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	4403      	add	r3, r0
 8003158:	330a      	adds	r3, #10
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	8939      	ldrh	r1, [r7, #8]
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003168:	fb00 f202 	mul.w	r2, r0, r2
 800316c:	440a      	add	r2, r1
 800316e:	0052      	lsls	r2, r2, #1
 8003170:	4413      	add	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

	_AL88_dma2dwait();
 8003174:	f7ff ff4a 	bl	800300c <_AL88_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <_AL88_fillbuf+0x84>)
 800317a:	2201      	movs	r2, #1
 800317c:	609a      	str	r2, [r3, #8]

	// RGB5656 mode used for 16 bits transfer (officially AL mode is not supported).
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 800317e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003180:	8c3a      	ldrh	r2, [r7, #32]
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	460b      	mov	r3, r1
 8003190:	2102      	movs	r1, #2
 8003192:	4804      	ldr	r0, [pc, #16]	; (80031a4 <_AL88_fillbuf+0x88>)
 8003194:	f003 fec0 	bl	8006f18 <BSP_STM32_DMA2D_FillBuff>

}
 8003198:	bf00      	nop
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	24000218 	.word	0x24000218
 80031a4:	52001000 	.word	0x52001000

080031a8 <_AL88_copybuf>:


static void _AL88_copybuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b08b      	sub	sp, #44	; 0x2c
 80031ac:	af04      	add	r7, sp, #16
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	461a      	mov	r2, r3
 80031b4:	460b      	mov	r3, r1
 80031b6:	72fb      	strb	r3, [r7, #11]
 80031b8:	4613      	mov	r3, r2
 80031ba:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed

	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 80031bc:	7afa      	ldrb	r2, [r7, #11]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3339      	adds	r3, #57	; 0x39
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	75fb      	strb	r3, [r7, #23]
	uint16_t *dest_addr = (uint16_t *)lcd->Layers[layer].Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 80031d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031d4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	0059      	lsls	r1, r3, #1
 80031e0:	7afa      	ldrb	r2, [r7, #11]
 80031e2:	7dfc      	ldrb	r4, [r7, #23]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	4423      	add	r3, r4
 80031ee:	330a      	adds	r3, #10
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4403      	add	r3, r0
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	440b      	add	r3, r1
 80031f8:	613b      	str	r3, [r7, #16]

	_AL88_dma2dwait();
 80031fa:	f7ff ff07 	bl	800300c <_AL88_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <_AL88_copybuf+0x84>)
 8003200:	2201      	movs	r2, #1
 8003202:	609a      	str	r2, [r3, #8]

	// RGB5656 mode used for 16 bits transfer (officially AL mode is not supported).
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003208:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800320a:	9303      	str	r3, [sp, #12]
 800320c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800320e:	9302      	str	r3, [sp, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	893b      	ldrh	r3, [r7, #8]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	460b      	mov	r3, r1
 800321a:	2102      	movs	r1, #2
 800321c:	4804      	ldr	r0, [pc, #16]	; (8003230 <_AL88_copybuf+0x88>)
 800321e:	f003 fec5 	bl	8006fac <BSP_STM32_DMA2D_CopyBuf>
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	bd90      	pop	{r4, r7, pc}
 800322a:	bf00      	nop
 800322c:	24000218 	.word	0x24000218
 8003230:	52001000 	.word	0x52001000

08003234 <_AL88_copybufblend>:


static void _AL88_copybufblend(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af06      	add	r7, sp, #24
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	460b      	mov	r3, r1
 8003242:	72fb      	strb	r3, [r7, #11]
 8003244:	4613      	mov	r3, r2
 8003246:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	// Effective and fast blending is not possible with CLUT mode
	_AL88_copybuf(lcd, layer, src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 8003248:	893a      	ldrh	r2, [r7, #8]
 800324a:	7af9      	ldrb	r1, [r7, #11]
 800324c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800324e:	9304      	str	r3, [sp, #16]
 8003250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003252:	9303      	str	r3, [sp, #12]
 8003254:	8c3b      	ldrh	r3, [r7, #32]
 8003256:	9302      	str	r3, [sp, #8]
 8003258:	8bbb      	ldrh	r3, [r7, #28]
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	8b3b      	ldrh	r3, [r7, #24]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff ff9f 	bl	80031a8 <_AL88_copybuf>
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <_AL88_copybufJPEG>:


static void _AL88_copybufJPEG(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x_dest, uint16_t y_dest) {
 8003274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003276:	b08b      	sub	sp, #44	; 0x2c
 8003278:	af04      	add	r7, sp, #16
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4603      	mov	r3, r0
 8003284:	72fb      	strb	r3, [r7, #11]
 8003286:	460b      	mov	r3, r1
 8003288:	813b      	strh	r3, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
	// Function not available in AL color mode. Instead area is filled with black color.
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 800328e:	4812      	ldr	r0, [pc, #72]	; (80032d8 <_AL88_copybufJPEG+0x64>)
 8003290:	f004 fe16 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8003294:	6178      	str	r0, [r7, #20]
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 8003296:	4810      	ldr	r0, [pc, #64]	; (80032d8 <_AL88_copybufJPEG+0x64>)
 8003298:	f004 fe20 	bl	8007edc <BSP_STM32_JPEG_GetHeight>
 800329c:	6138      	str	r0, [r7, #16]

	_AL88_fillbuf(lcd, layer, x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	b29c      	uxth	r4, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	b29d      	uxth	r5, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 80032ae:	b29e      	uxth	r6, r3
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <_AL88_copybufJPEG+0x68>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	21ff      	movs	r1, #255	; 0xff
 80032b6:	2000      	movs	r0, #0
 80032b8:	4798      	blx	r3
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	893a      	ldrh	r2, [r7, #8]
 80032be:	7af9      	ldrb	r1, [r7, #11]
 80032c0:	9003      	str	r0, [sp, #12]
 80032c2:	9602      	str	r6, [sp, #8]
 80032c4:	9501      	str	r5, [sp, #4]
 80032c6:	9400      	str	r4, [sp, #0]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7ff ff27 	bl	800311c <_AL88_fillbuf>
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	52003000 	.word	0x52003000
 80032dc:	24000278 	.word	0x24000278

080032e0 <_L8_color>:

/* L8 ------------------------------------------------------------------------*/

static uint32_t _L8_color(uint32_t color, uint8_t alpha) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	// Alpha is ignored in this color mode

	uint32_t match_c = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
	uint32_t min_dist = 0xffffffff;
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295
 80032f4:	613b      	str	r3, [r7, #16]
	uint32_t dist;

	for (uint16_t m=0; m<256; m++) {
 80032f6:	2300      	movs	r3, #0
 80032f8:	81fb      	strh	r3, [r7, #14]
 80032fa:	e013      	b.n	8003324 <_L8_color+0x44>
		dist = _color_dist(color, C_LUT_COLOR[m]);
 80032fc:	89fb      	ldrh	r3, [r7, #14]
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <_L8_color+0x68>)
 8003300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe fcf3 	bl	8001cf2 <_color_dist>
 800330c:	60b8      	str	r0, [r7, #8]
		if (dist < min_dist) {
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	429a      	cmp	r2, r3
 8003314:	d203      	bcs.n	800331e <_L8_color+0x3e>
			min_dist = dist;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	613b      	str	r3, [r7, #16]
			match_c = m;
 800331a:	89fb      	ldrh	r3, [r7, #14]
 800331c:	617b      	str	r3, [r7, #20]
	for (uint16_t m=0; m<256; m++) {
 800331e:	89fb      	ldrh	r3, [r7, #14]
 8003320:	3301      	adds	r3, #1
 8003322:	81fb      	strh	r3, [r7, #14]
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	2bff      	cmp	r3, #255	; 0xff
 8003328:	d9e8      	bls.n	80032fc <_L8_color+0x1c>
		}
	}

	return (match_c) | (match_c << 8) | (match_c << 16) | (match_c << 24);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	431a      	orrs	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	4313      	orrs	r3, r2
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	0801078c 	.word	0x0801078c

0800334c <_L8_alpha>:


static uint32_t _L8_alpha(uint32_t color, uint8_t alpha) {
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	// Alpha is ignored in this color mode

	return color;
 8003358:	687b      	ldr	r3, [r7, #4]
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <_L8_dma2dwait>:


static void _L8_dma2dwait() {
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 800336c:	bf00      	nop
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <_L8_dma2dwait+0x1c>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d0fb      	beq.n	800336e <_L8_dma2dwait+0x6>
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	24000218 	.word	0x24000218

08003388 <_L8_updatepixel>:


static void _L8_updatepixel(LCD_HandleTypeDef *lcd, uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	460b      	mov	r3, r1
 8003398:	80fb      	strh	r3, [r7, #6]
 800339a:	4613      	mov	r3, r2
 800339c:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 800339e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80033a6:	da21      	bge.n	80033ec <_L8_updatepixel+0x64>
	if (x < 0) return;
 80033a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db1f      	blt.n	80033f0 <_L8_updatepixel+0x68>
	if (y >= LCD_HEIGHT) return;
 80033b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033b4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80033b8:	da1c      	bge.n	80033f4 <_L8_updatepixel+0x6c>
	if (y < 0) return;
 80033ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	db1a      	blt.n	80033f8 <_L8_updatepixel+0x70>

	uint8_t *pvalue8 = (uint8_t *)&value;
 80033c2:	f107 0320 	add.w	r3, r7, #32
 80033c6:	617b      	str	r3, [r7, #20]
	uint8_t *addr = (uint8_t *)offset + ((x + y * LCD_WIDTH));
 80033c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033d0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4413      	add	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
	*addr = *pvalue8;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e006      	b.n	80033fa <_L8_updatepixel+0x72>
	if (x >= LCD_WIDTH) return;
 80033ec:	bf00      	nop
 80033ee:	e004      	b.n	80033fa <_L8_updatepixel+0x72>
	if (x < 0) return;
 80033f0:	bf00      	nop
 80033f2:	e002      	b.n	80033fa <_L8_updatepixel+0x72>
	if (y >= LCD_HEIGHT) return;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <_L8_updatepixel+0x72>
	if (y < 0) return;
 80033f8:	bf00      	nop
}
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <_L8_getpixel>:


static uint32_t _L8_getpixel(LCD_HandleTypeDef *lcd, uint32_t offset,  int16_t x, int16_t y) {
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4611      	mov	r1, r2
 8003410:	461a      	mov	r2, r3
 8003412:	460b      	mov	r3, r1
 8003414:	80fb      	strh	r3, [r7, #6]
 8003416:	4613      	mov	r3, r2
 8003418:	80bb      	strh	r3, [r7, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 800341a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800341e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003422:	db01      	blt.n	8003428 <_L8_getpixel+0x24>
 8003424:	2300      	movs	r3, #0
 8003426:	e021      	b.n	800346c <_L8_getpixel+0x68>
	if (x < 0) return 0x00000000;
 8003428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da01      	bge.n	8003434 <_L8_getpixel+0x30>
 8003430:	2300      	movs	r3, #0
 8003432:	e01b      	b.n	800346c <_L8_getpixel+0x68>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8003434:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003438:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800343c:	db01      	blt.n	8003442 <_L8_getpixel+0x3e>
 800343e:	2300      	movs	r3, #0
 8003440:	e014      	b.n	800346c <_L8_getpixel+0x68>
	if (y < 0) return 0x00000000;
 8003442:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	da01      	bge.n	800344e <_L8_getpixel+0x4a>
 800344a:	2300      	movs	r3, #0
 800344c:	e00e      	b.n	800346c <_L8_getpixel+0x68>

	uint8_t *addr = (uint8_t *)offset + ((x + y * LCD_WIDTH));
 800344e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003452:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003456:	f44f 7148 	mov.w	r1, #800	; 0x320
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	461a      	mov	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4413      	add	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
	return *addr;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	781b      	ldrb	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <_L8_fillbuf>:


static void _L8_fillbuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b093      	sub	sp, #76	; 0x4c
 800347c:	af04      	add	r7, sp, #16
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4603      	mov	r3, r0
 8003488:	72fb      	strb	r3, [r7, #11]
 800348a:	460b      	mov	r3, r1
 800348c:	813b      	strh	r3, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed

	// Because DMA2D cannot handle 8bit formats, below workaround was required

	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8003492:	7afa      	ldrb	r2, [r7, #11]
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3339      	adds	r3, #57	; 0x39
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Finding x0 and x1 so it will be within filled area and are divided by 4 (required by DMA2D in 32bit mode)
	uint16_t x0 = x & 0xFFFC;
 80034a8:	893b      	ldrh	r3, [r7, #8]
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (x0 < x) x0 += 4;
 80034b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80034b2:	893b      	ldrh	r3, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d202      	bcs.n	80034be <_L8_fillbuf+0x46>
 80034b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034ba:	3304      	adds	r3, #4
 80034bc:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t x1 = (x + width) & 0xFFFC;
 80034be:	893a      	ldrh	r2, [r7, #8]
 80034c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034c4:	4413      	add	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f023 0303 	bic.w	r3, r3, #3
 80034cc:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t *color8 = (uint8_t *)&color;
 80034ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034d2:	623b      	str	r3, [r7, #32]
	uint8_t *addr;

	// Waiting for completion of previous DMA2D (accessing memory concurrently with DMA2D slows everything down)
	_L8_dma2dwait();
 80034d4:	f7ff ff48 	bl	8003368 <_L8_dma2dwait>

	//Manual filling areas outside DMA2D range (not aligned to 4 bytes)

	for (uint32_t yy=y; yy<(y+height); yy++) {
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
 80034dc:	e05e      	b.n	800359c <_L8_fillbuf+0x124>
		for (uint32_t xx=x; xx<MIN(x0, x+width); xx++) {
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e2:	e01b      	b.n	800351c <_L8_fillbuf+0xa4>
			addr = (uint8_t *)(lcd->Layers[layer].Frames[eframe]) + (xx + yy*LCD_WIDTH);
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80034ea:	fb03 f202 	mul.w	r2, r3, r2
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	18d1      	adds	r1, r2, r3
 80034f2:	7afa      	ldrb	r2, [r7, #11]
 80034f4:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	4423      	add	r3, r4
 8003502:	330a      	adds	r3, #10
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4403      	add	r3, r0
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	440b      	add	r3, r1
 800350c:	617b      	str	r3, [r7, #20]
			*addr = *color8;
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	701a      	strb	r2, [r3, #0]
		for (uint32_t xx=x; xx<MIN(x0, x+width); xx++) {
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	3301      	adds	r3, #1
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800351c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800351e:	8939      	ldrh	r1, [r7, #8]
 8003520:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003524:	440b      	add	r3, r1
 8003526:	429a      	cmp	r2, r3
 8003528:	dd04      	ble.n	8003534 <_L8_fillbuf+0xbc>
 800352a:	893a      	ldrh	r2, [r7, #8]
 800352c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003530:	4413      	add	r3, r2
 8003532:	e000      	b.n	8003536 <_L8_fillbuf+0xbe>
 8003534:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003538:	4293      	cmp	r3, r2
 800353a:	d8d3      	bhi.n	80034e4 <_L8_fillbuf+0x6c>
		}
		if (x1<x0) continue;
 800353c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800353e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003540:	429a      	cmp	r2, r3
 8003542:	d327      	bcc.n	8003594 <_L8_fillbuf+0x11c>
		for (uint32_t xx=x1; xx<(x+width); xx++) {
 8003544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
 8003548:	e01b      	b.n	8003582 <_L8_fillbuf+0x10a>
			addr = (uint8_t *)(lcd->Layers[layer].Frames[eframe]) + (xx + yy*LCD_WIDTH);
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003550:	fb03 f202 	mul.w	r2, r3, r2
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	18d1      	adds	r1, r2, r3
 8003558:	7afa      	ldrb	r2, [r7, #11]
 800355a:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	4423      	add	r3, r4
 8003568:	330a      	adds	r3, #10
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4403      	add	r3, r0
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	440b      	add	r3, r1
 8003572:	617b      	str	r3, [r7, #20]
			*addr = *color8;
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	701a      	strb	r2, [r3, #0]
		for (uint32_t xx=x1; xx<(x+width); xx++) {
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	3301      	adds	r3, #1
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
 8003582:	893a      	ldrh	r2, [r7, #8]
 8003584:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003588:	4413      	add	r3, r2
 800358a:	461a      	mov	r2, r3
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	4293      	cmp	r3, r2
 8003590:	d3db      	bcc.n	800354a <_L8_fillbuf+0xd2>
 8003592:	e000      	b.n	8003596 <_L8_fillbuf+0x11e>
		if (x1<x0) continue;
 8003594:	bf00      	nop
	for (uint32_t yy=y; yy<(y+height); yy++) {
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	3301      	adds	r3, #1
 800359a:	633b      	str	r3, [r7, #48]	; 0x30
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80035a2:	4413      	add	r3, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d398      	bcc.n	80034de <_L8_fillbuf+0x66>
		}
	}

	// Testing condition to start DMA2D
	if (x1<=x0) return;
 80035ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d938      	bls.n	8003626 <_L8_fillbuf+0x1ae>

	// Calculating width for DMA2D
	uint16_t w = x1-x0;
 80035b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	83fb      	strh	r3, [r7, #30]

	// Calculating offset line for DMA2D
	uint16_t ol = offsetline + width - w;
 80035bc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80035c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035c4:	4413      	add	r3, r2
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	8bfb      	ldrh	r3, [r7, #30]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	83bb      	strh	r3, [r7, #28]

	// Setting destination address for DMA2D
	uint32_t dest_addr = lcd->Layers[layer].Frames[eframe] + (x0 + y * LCD_WIDTH);
 80035ce:	7afa      	ldrb	r2, [r7, #11]
 80035d0:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80035d4:	68f9      	ldr	r1, [r7, #12]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	4403      	add	r3, r0
 80035de:	330a      	adds	r3, #10
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80035e8:	88fa      	ldrh	r2, [r7, #6]
 80035ea:	f44f 7048 	mov.w	r0, #800	; 0x320
 80035ee:	fb00 f202 	mul.w	r2, r0, r2
 80035f2:	440a      	add	r2, r1
 80035f4:	4413      	add	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80035f8:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <_L8_fillbuf+0x1b8>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	609a      	str	r2, [r3, #8]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 80035fe:	8bfb      	ldrh	r3, [r7, #30]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	b299      	uxth	r1, r3
 8003604:	8bbb      	ldrh	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	b29b      	uxth	r3, r3
 800360a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800360c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003610:	9202      	str	r2, [sp, #8]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	9201      	str	r2, [sp, #4]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4603      	mov	r3, r0
 800361a:	460a      	mov	r2, r1
 800361c:	2100      	movs	r1, #0
 800361e:	4805      	ldr	r0, [pc, #20]	; (8003634 <_L8_fillbuf+0x1bc>)
 8003620:	f003 fc7a 	bl	8006f18 <BSP_STM32_DMA2D_FillBuff>
 8003624:	e000      	b.n	8003628 <_L8_fillbuf+0x1b0>
	if (x1<=x0) return;
 8003626:	bf00      	nop
}
 8003628:	373c      	adds	r7, #60	; 0x3c
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	bf00      	nop
 8003630:	24000218 	.word	0x24000218
 8003634:	52001000 	.word	0x52001000

08003638 <_L8_copybuf>:


static void _L8_copybuf(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8003638:	b5b0      	push	{r4, r5, r7, lr}
 800363a:	b090      	sub	sp, #64	; 0x40
 800363c:	af04      	add	r7, sp, #16
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	461a      	mov	r2, r3
 8003644:	460b      	mov	r3, r1
 8003646:	72fb      	strb	r3, [r7, #11]
 8003648:	4613      	mov	r3, r2
 800364a:	813b      	strh	r3, [r7, #8]

	// Because DMA2D cannot handle 8bit formats, below workaround was required

	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 800364c:	7afa      	ldrb	r2, [r7, #11]
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3339      	adds	r3, #57	; 0x39
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	767b      	strb	r3, [r7, #25]

	uint8_t *d_addr = (uint8_t *)lcd->Layers[layer].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8003660:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003664:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003668:	f44f 7148 	mov.w	r1, #800	; 0x320
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	461c      	mov	r4, r3
 8003674:	7afa      	ldrb	r2, [r7, #11]
 8003676:	7e78      	ldrb	r0, [r7, #25]
 8003678:	68f9      	ldr	r1, [r7, #12]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	4403      	add	r3, r0
 8003682:	330a      	adds	r3, #10
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4423      	add	r3, r4
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t *s_addr = (uint8_t *)src_addr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t size = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	; 0x24

	_L8_dma2dwait();
 8003696:	f7ff fe67 	bl	8003368 <_L8_dma2dwait>

	if (((uint32_t)s_addr % 2) || ((uint32_t)d_addr % 2)>0) {
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d125      	bne.n	80036f0 <_L8_copybuf+0xb8>
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d02b      	beq.n	8003706 <_L8_copybuf+0xce>
		// Cannot use DMA2D
		while (size<(width * height)) {
 80036ae:	e01f      	b.n	80036f0 <_L8_copybuf+0xb8>
			*d_addr = *s_addr;
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	701a      	strb	r2, [r3, #0]
			size++;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	3301      	adds	r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
			if (!(size % width)) {
 80036be:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80036c8:	fb01 f202 	mul.w	r2, r1, r2
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d108      	bne.n	80036e4 <_L8_copybuf+0xac>
				d_addr+=offsline_dest;
 80036d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d8:	4413      	add	r3, r2
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
				s_addr+=offsline_src;
 80036dc:	893b      	ldrh	r3, [r7, #8]
 80036de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e0:	4413      	add	r3, r2
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			d_addr++;
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	3301      	adds	r3, #1
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			s_addr++;
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	3301      	adds	r3, #1
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
		while (size<(width * height)) {
 80036f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036f4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	4293      	cmp	r3, r2
 8003702:	d3d5      	bcc.n	80036b0 <_L8_copybuf+0x78>
		}
		return;
 8003704:	e058      	b.n	80037b8 <_L8_copybuf+0x180>

	} else {
		// Can use DMA2D
		uint16_t w = width & 0xFFFE;
 8003706:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	82fb      	strh	r3, [r7, #22]
		uint16_t os = offsline_src + width - w;
 8003710:	893a      	ldrh	r2, [r7, #8]
 8003712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003716:	4413      	add	r3, r2
 8003718:	b29a      	uxth	r2, r3
 800371a:	8afb      	ldrh	r3, [r7, #22]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	82bb      	strh	r3, [r7, #20]
		uint16_t od = offsline_dest + width - w;
 8003720:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003728:	4413      	add	r3, r2
 800372a:	b29a      	uxth	r2, r3
 800372c:	8afb      	ldrh	r3, [r7, #22]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	827b      	strh	r3, [r7, #18]

		// Fill area not covered by DMA2D (if required)
		if (w < width) {
 8003732:	8afa      	ldrh	r2, [r7, #22]
 8003734:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003738:	429a      	cmp	r2, r3
 800373a:	d223      	bcs.n	8003784 <_L8_copybuf+0x14c>
			uint8_t *dd_addr = d_addr + width - 1;
 800373c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003740:	3b01      	subs	r3, #1
 8003742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003744:	4413      	add	r3, r2
 8003746:	623b      	str	r3, [r7, #32]
			uint8_t *ss_addr = s_addr + width - 1;
 8003748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800374c:	3b01      	subs	r3, #1
 800374e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003750:	4413      	add	r3, r2
 8003752:	61fb      	str	r3, [r7, #28]
			for (uint16_t yy = 0; yy< height; yy++) {
 8003754:	2300      	movs	r3, #0
 8003756:	837b      	strh	r3, [r7, #26]
 8003758:	e00f      	b.n	800377a <_L8_copybuf+0x142>
				*dd_addr = *ss_addr;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	701a      	strb	r2, [r3, #0]
				dd_addr+=offsline_dest;
 8003762:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003766:	6a3a      	ldr	r2, [r7, #32]
 8003768:	4413      	add	r3, r2
 800376a:	623b      	str	r3, [r7, #32]
				ss_addr+=offsline_src;
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	61fb      	str	r3, [r7, #28]
			for (uint16_t yy = 0; yy< height; yy++) {
 8003774:	8b7b      	ldrh	r3, [r7, #26]
 8003776:	3301      	adds	r3, #1
 8003778:	837b      	strh	r3, [r7, #26]
 800377a:	8b7a      	ldrh	r2, [r7, #26]
 800377c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003780:	429a      	cmp	r2, r3
 8003782:	d3ea      	bcc.n	800375a <_L8_copybuf+0x122>
			}
		}

		// DMA2D Start
		BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <_L8_copybuf+0x188>)
 8003786:	2201      	movs	r2, #1
 8003788:	609a      	str	r2, [r3, #8]

		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);
 800378a:	8afb      	ldrh	r3, [r7, #22]
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	b29c      	uxth	r4, r3
 8003790:	8abb      	ldrh	r3, [r7, #20]
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	b29b      	uxth	r3, r3
 8003796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003798:	8a79      	ldrh	r1, [r7, #18]
 800379a:	0849      	lsrs	r1, r1, #1
 800379c:	b289      	uxth	r1, r1
 800379e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037a0:	f8b7 5050 	ldrh.w	r5, [r7, #80]	; 0x50
 80037a4:	9003      	str	r0, [sp, #12]
 80037a6:	9102      	str	r1, [sp, #8]
 80037a8:	9201      	str	r2, [sp, #4]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	462b      	mov	r3, r5
 80037ae:	4622      	mov	r2, r4
 80037b0:	2102      	movs	r1, #2
 80037b2:	4804      	ldr	r0, [pc, #16]	; (80037c4 <_L8_copybuf+0x18c>)
 80037b4:	f003 fbfa 	bl	8006fac <BSP_STM32_DMA2D_CopyBuf>

	}


}
 80037b8:	3730      	adds	r7, #48	; 0x30
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bdb0      	pop	{r4, r5, r7, pc}
 80037be:	bf00      	nop
 80037c0:	24000218 	.word	0x24000218
 80037c4:	52001000 	.word	0x52001000

080037c8 <_L8_copybufblend>:


static void _L8_copybufblend(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af06      	add	r7, sp, #24
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	461a      	mov	r2, r3
 80037d4:	460b      	mov	r3, r1
 80037d6:	72fb      	strb	r3, [r7, #11]
 80037d8:	4613      	mov	r3, r2
 80037da:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	// Effective and fast blending is not possible with CLUT mode
	_L8_copybuf(lcd, layer, src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 80037dc:	893a      	ldrh	r2, [r7, #8]
 80037de:	7af9      	ldrb	r1, [r7, #11]
 80037e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037e6:	9303      	str	r3, [sp, #12]
 80037e8:	8c3b      	ldrh	r3, [r7, #32]
 80037ea:	9302      	str	r3, [sp, #8]
 80037ec:	8bbb      	ldrh	r3, [r7, #28]
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	8b3b      	ldrh	r3, [r7, #24]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff ff1d 	bl	8003638 <_L8_copybuf>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <_L8_copybufJPEG>:


static void _L8_copybufJPEG(LCD_HandleTypeDef *lcd, uint8_t layer, uint16_t x_dest, uint16_t y_dest) {
 8003808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380a:	b08b      	sub	sp, #44	; 0x2c
 800380c:	af04      	add	r7, sp, #16
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	461a      	mov	r2, r3
 8003816:	4603      	mov	r3, r0
 8003818:	72fb      	strb	r3, [r7, #11]
 800381a:	460b      	mov	r3, r1
 800381c:	813b      	strh	r3, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
	// Function not available in AL color mode. Instead area is filled with black color.
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8003822:	4812      	ldr	r0, [pc, #72]	; (800386c <_L8_copybufJPEG+0x64>)
 8003824:	f004 fb4c 	bl	8007ec0 <BSP_STM32_JPEG_GetWidth>
 8003828:	6178      	str	r0, [r7, #20]
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 800382a:	4810      	ldr	r0, [pc, #64]	; (800386c <_L8_copybufJPEG+0x64>)
 800382c:	f004 fb56 	bl	8007edc <BSP_STM32_JPEG_GetHeight>
 8003830:	6138      	str	r0, [r7, #16]

	_L8_fillbuf(lcd, layer, x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	b29c      	uxth	r4, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	b29d      	uxth	r5, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8003842:	b29e      	uxth	r6, r3
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <_L8_copybufJPEG+0x68>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	21ff      	movs	r1, #255	; 0xff
 800384a:	2000      	movs	r0, #0
 800384c:	4798      	blx	r3
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	893a      	ldrh	r2, [r7, #8]
 8003852:	7af9      	ldrb	r1, [r7, #11]
 8003854:	9003      	str	r0, [sp, #12]
 8003856:	9602      	str	r6, [sp, #8]
 8003858:	9501      	str	r5, [sp, #4]
 800385a:	9400      	str	r4, [sp, #0]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff fe0b 	bl	8003478 <_L8_fillbuf>
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800386a:	bf00      	nop
 800386c:	52003000 	.word	0x52003000
 8003870:	24000278 	.word	0x24000278

08003874 <_config_triplebuf>:

/******************************************************************************
 * Config functions for various modes
 ******************************************************************************/

static void _config_triplebuf(LCD_HandleTypeDef *lcd) {
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	// Setting up layer 0 for 3 buffers
	lcd->Layers[0].Frame_IDLE = 2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd->Layers[0].Frame_EDIT = 1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->Layers[0].Frame_READY = 255;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	22ff      	movs	r2, #255	; 0xff
 8003890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->Layers[0].Frame_ACTIVE = 0;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->Layers[0].Frame_NOUSE = 255;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	lcd->Layers[0].Frame_PREV = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd->Layers[0].Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 1 * lcd->config_.framesize;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f1c3 4244 	rsb	r2, r3, #3288334336	; 0xc4000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
	lcd->Layers[0].Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 2 * lcd->config_.framesize;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f1c3 43c4 	rsb	r3, r3, #1644167168	; 0x62000000
 80038c0:	005a      	lsls	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
	lcd->Layers[0].Frames[2] = LCD_FRAMEBUFFER_END_ADDR - 3 * lcd->config_.framesize;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	f1c3 4244 	rsb	r2, r3, #3288334336	; 0xc4000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34
	lcd->JPEGBuf = LCD_FRAMEBUFFER_END_ADDR - (3 * lcd->config_.framesize) - LCD_JPEGBUF_SIZE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	441a      	add	r2, r3
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <_config_triplebuf+0x14c>)
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	65d3      	str	r3, [r2, #92]	; 0x5c

	if (lcd->config_.layerno == LCD_LAYER_NO_ONE) {
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d121      	bne.n	8003938 <_config_triplebuf+0xc4>
		// Setting up layer 1 as idle
		lcd->Layers[1].Frame_IDLE = 0;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		lcd->Layers[1].Frame_EDIT = 0;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		lcd->Layers[1].Frame_READY = 0;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		lcd->Layers[1].Frame_ACTIVE = 0;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		lcd->Layers[1].Frame_NOUSE = 0;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		lcd->Layers[1].Frame_PREV = 0;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		lcd->Layers[1].Frames[0] = 0;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
		lcd->Layers[1].Frames[1] = 0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	645a      	str	r2, [r3, #68]	; 0x44
		lcd->Layers[1].Frames[2] = 0;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	649a      	str	r2, [r3, #72]	; 0x48
		lcd->Layers[1].Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 4 * lcd->config_.framesize;
		lcd->Layers[1].Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 5 * lcd->config_.framesize;
		lcd->Layers[1].Frames[2] = LCD_FRAMEBUFFER_END_ADDR - 6 * lcd->config_.framesize;
		lcd->JPEGBuf = LCD_FRAMEBUFFER_END_ADDR - (6 * lcd->config_.framesize) - LCD_JPEGBUF_SIZE;
	}
}
 8003936:	e03c      	b.n	80039b2 <_config_triplebuf+0x13e>
		lcd->Layers[1].Frame_IDLE = 2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		lcd->Layers[1].Frame_EDIT = 1;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		lcd->Layers[1].Frame_READY = 255;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	22ff      	movs	r2, #255	; 0xff
 800394c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		lcd->Layers[1].Frame_ACTIVE = 0;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		lcd->Layers[1].Frame_NOUSE = 255;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		lcd->Layers[1].Frame_PREV = 0;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		lcd->Layers[1].Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 4 * lcd->config_.framesize;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f1c3 5344 	rsb	r3, r3, #822083584	; 0x31000000
 8003970:	009a      	lsls	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
		lcd->Layers[1].Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 5 * lcd->config_.framesize;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	f1c3 4244 	rsb	r2, r3, #3288334336	; 0xc4000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
		lcd->Layers[1].Frames[2] = LCD_FRAMEBUFFER_END_ADDR - 6 * lcd->config_.framesize;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	f1c3 4244 	rsb	r2, r3, #3288334336	; 0xc4000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	649a      	str	r2, [r3, #72]	; 0x48
		lcd->JPEGBuf = LCD_FRAMEBUFFER_END_ADDR - (6 * lcd->config_.framesize) - LCD_JPEGBUF_SIZE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <_config_triplebuf+0x14c>)
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	c3e00000 	.word	0xc3e00000

080039c4 <_config_doublebuf>:


static void _config_doublebuf(LCD_HandleTypeDef *lcd) {
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	// Setting up layer 0 for 2 buffers
	lcd->Layers[0].Frame_IDLE = 255;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	22ff      	movs	r2, #255	; 0xff
 80039d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd->Layers[0].Frame_EDIT = 1;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->Layers[0].Frame_READY = 255;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	22ff      	movs	r2, #255	; 0xff
 80039e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->Layers[0].Frame_ACTIVE = 0;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->Layers[0].Frame_NOUSE = 2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	lcd->Layers[0].Frame_PREV = 0;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd->Layers[0].Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 1 * lcd->config_.framesize;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f1c3 4244 	rsb	r2, r3, #3288334336	; 0xc4000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
	lcd->Layers[0].Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 2 * lcd->config_.framesize;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f1c3 43c4 	rsb	r3, r3, #1644167168	; 0x62000000
 8003a10:	005a      	lsls	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
	lcd->Layers[0].Frames[2] = 0;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34
	lcd->JPEGBuf = LCD_FRAMEBUFFER_END_ADDR - (2 * lcd->config_.framesize) - LCD_JPEGBUF_SIZE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <_config_doublebuf+0x124>)
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	005a      	lsls	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65da      	str	r2, [r3, #92]	; 0x5c

	if (lcd->config_.layerno == LCD_LAYER_NO_ONE) {
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d121      	bne.n	8003a78 <_config_doublebuf+0xb4>
		// Setting up layer 1 as idle
		lcd->Layers[1].Frame_IDLE = 0;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		lcd->Layers[1].Frame_EDIT = 0;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		lcd->Layers[1].Frame_READY = 0;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		lcd->Layers[1].Frame_ACTIVE = 0;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		lcd->Layers[1].Frame_NOUSE = 0;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		lcd->Layers[1].Frame_PREV = 0;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		lcd->Layers[1].Frames[0] = 0;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
		lcd->Layers[1].Frames[1] = 0;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
		lcd->Layers[1].Frames[2] = 0;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	649a      	str	r2, [r3, #72]	; 0x48
		lcd->Layers[1].Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 3 * lcd->config_.framesize;
		lcd->Layers[1].Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 4 * lcd->config_.framesize;
		lcd->Layers[1].Frames[2] = 0;
		lcd->JPEGBuf = LCD_FRAMEBUFFER_END_ADDR - (4 * lcd->config_.framesize) - LCD_JPEGBUF_SIZE;
	}
}
 8003a76:	e031      	b.n	8003adc <_config_doublebuf+0x118>
		lcd->Layers[1].Frame_IDLE = 255;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	22ff      	movs	r2, #255	; 0xff
 8003a7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		lcd->Layers[1].Frame_EDIT = 1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		lcd->Layers[1].Frame_READY = 255;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	22ff      	movs	r2, #255	; 0xff
 8003a8c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		lcd->Layers[1].Frame_ACTIVE = 0;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		lcd->Layers[1].Frame_NOUSE = 2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		lcd->Layers[1].Frame_PREV = 0;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		lcd->Layers[1].Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 3 * lcd->config_.framesize;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f1c3 4244 	rsb	r2, r3, #3288334336	; 0xc4000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
		lcd->Layers[1].Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 4 * lcd->config_.framesize;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f1c3 5344 	rsb	r3, r3, #822083584	; 0x31000000
 8003ac2:	009a      	lsls	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
		lcd->Layers[1].Frames[2] = 0;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	649a      	str	r2, [r3, #72]	; 0x48
		lcd->JPEGBuf = LCD_FRAMEBUFFER_END_ADDR - (4 * lcd->config_.framesize) - LCD_JPEGBUF_SIZE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <_config_doublebuf+0x128>)
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e1f00000 	.word	0xe1f00000
 8003aec:	70f80000 	.word	0x70f80000

08003af0 <_ARGB8888_config>:


static void _ARGB8888_config(LCD_HandleTypeDef *lcd) {
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	lcd->config_.bytesperpixel = 4;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2204      	movs	r2, #4
 8003afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	lcd->config_.framesize *=4;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	009a      	lsls	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	619a      	str	r2, [r3, #24]
	lcd->config_.framebuffersize = lcd->config_.framesize * lcd->config_.buffermode * lcd->config_.layerno;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003b1e:	fb03 f202 	mul.w	r2, r3, r2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	61da      	str	r2, [r3, #28]

	// Updating function pointers
	BSP_LCD_Color = _ARGB8888_color;
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <_ARGB8888_config+0x78>)
 8003b28:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <_ARGB8888_config+0x7c>)
 8003b2a:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _ARGB8888_alpha;
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <_ARGB8888_config+0x80>)
 8003b2e:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <_ARGB8888_config+0x84>)
 8003b30:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB8888_dma2dwait;
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <_ARGB8888_config+0x88>)
 8003b34:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <_ARGB8888_config+0x8c>)
 8003b36:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB8888_updatepixel;
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <_ARGB8888_config+0x90>)
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <_ARGB8888_config+0x94>)
 8003b3c:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _ARGB8888_getpixel;
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <_ARGB8888_config+0x98>)
 8003b40:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <_ARGB8888_config+0x9c>)
 8003b42:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _ARGB8888_fillbuf;
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <_ARGB8888_config+0xa0>)
 8003b46:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <_ARGB8888_config+0xa4>)
 8003b48:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB8888_copybuf;
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <_ARGB8888_config+0xa8>)
 8003b4c:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <_ARGB8888_config+0xac>)
 8003b4e:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB8888_copybufblend;
 8003b50:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <_ARGB8888_config+0xb0>)
 8003b52:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <_ARGB8888_config+0xb4>)
 8003b54:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB8888_copybufJPEG;
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <_ARGB8888_config+0xb8>)
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <_ARGB8888_config+0xbc>)
 8003b5a:	601a      	str	r2, [r3, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	24000278 	.word	0x24000278
 8003b6c:	08001da5 	.word	0x08001da5
 8003b70:	2400027c 	.word	0x2400027c
 8003b74:	08001dc9 	.word	0x08001dc9
 8003b78:	24000280 	.word	0x24000280
 8003b7c:	08001ded 	.word	0x08001ded
 8003b80:	24000284 	.word	0x24000284
 8003b84:	08001e0d 	.word	0x08001e0d
 8003b88:	24000288 	.word	0x24000288
 8003b8c:	08001e81 	.word	0x08001e81
 8003b90:	2400028c 	.word	0x2400028c
 8003b94:	08001ef5 	.word	0x08001ef5
 8003b98:	24000290 	.word	0x24000290
 8003b9c:	08001f81 	.word	0x08001f81
 8003ba0:	24000294 	.word	0x24000294
 8003ba4:	0800200d 	.word	0x0800200d
 8003ba8:	24000298 	.word	0x24000298
 8003bac:	0800209d 	.word	0x0800209d

08003bb0 <_ARGB8888_config_layer>:

static void _ARGB8888_config_layer(LCD_HandleTypeDef *lcd, uint8_t layer) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08e      	sub	sp, #56	; 0x38
 8003bb4:	af0c      	add	r7, sp, #48	; 0x30
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]

	// Configure Layer
	BSP_STM32_LTDC_ConfigLayer(
 8003bbc:	78f8      	ldrb	r0, [r7, #3]
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_PAxCA,
			LTDC_BLENDING_FACTOR2_PAxCA,
			lcd->Layers[layer].Frames[0],
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	332c      	adds	r3, #44	; 0x2c
 8003bce:	681b      	ldr	r3, [r3, #0]
	BSP_STM32_LTDC_ConfigLayer(
 8003bd0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003bd4:	920a      	str	r2, [sp, #40]	; 0x28
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8003bda:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003bde:	9208      	str	r2, [sp, #32]
 8003be0:	2200      	movs	r2, #0
 8003be2:	9207      	str	r2, [sp, #28]
 8003be4:	2200      	movs	r2, #0
 8003be6:	9206      	str	r2, [sp, #24]
 8003be8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003bec:	9205      	str	r2, [sp, #20]
 8003bee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003bf2:	9204      	str	r2, [sp, #16]
 8003bf4:	9303      	str	r3, [sp, #12]
 8003bf6:	2307      	movs	r3, #7
 8003bf8:	9302      	str	r3, [sp, #8]
 8003bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	2300      	movs	r3, #0
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	22ff      	movs	r2, #255	; 0xff
 8003c08:	4601      	mov	r1, r0
 8003c0a:	4803      	ldr	r0, [pc, #12]	; (8003c18 <_ARGB8888_config_layer+0x68>)
 8003c0c:	f004 fa6e 	bl	80080ec <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	50001000 	.word	0x50001000

08003c1c <_ARGB1555_config>:

static void _ARGB1555_config(LCD_HandleTypeDef *lcd) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	lcd->config_.bytesperpixel = 2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	lcd->config_.framesize *=2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	005a      	lsls	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	619a      	str	r2, [r3, #24]
	lcd->config_.framebuffersize = lcd->config_.framesize * lcd->config_.buffermode * lcd->config_.layerno;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003c4a:	fb03 f202 	mul.w	r2, r3, r2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	61da      	str	r2, [r3, #28]

	// Updating function pointers
	BSP_LCD_Color = _ARGB1555_color;
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <_ARGB1555_config+0x78>)
 8003c54:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <_ARGB1555_config+0x7c>)
 8003c56:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _ARGB1555_alpha;
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <_ARGB1555_config+0x80>)
 8003c5a:	4a11      	ldr	r2, [pc, #68]	; (8003ca0 <_ARGB1555_config+0x84>)
 8003c5c:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB1555_dma2dwait;
 8003c5e:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <_ARGB1555_config+0x88>)
 8003c60:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <_ARGB1555_config+0x8c>)
 8003c62:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB1555_updatepixel;
 8003c64:	4b11      	ldr	r3, [pc, #68]	; (8003cac <_ARGB1555_config+0x90>)
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <_ARGB1555_config+0x94>)
 8003c68:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _ARGB1555_getpixel;
 8003c6a:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <_ARGB1555_config+0x98>)
 8003c6c:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <_ARGB1555_config+0x9c>)
 8003c6e:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _ARGB1555_fillbuf;
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <_ARGB1555_config+0xa0>)
 8003c72:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <_ARGB1555_config+0xa4>)
 8003c74:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB1555_copybuf;
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <_ARGB1555_config+0xa8>)
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <_ARGB1555_config+0xac>)
 8003c7a:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB1555_copybufblend;
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <_ARGB1555_config+0xb0>)
 8003c7e:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <_ARGB1555_config+0xb4>)
 8003c80:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB1555_copybufJPEG;
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <_ARGB1555_config+0xb8>)
 8003c84:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <_ARGB1555_config+0xbc>)
 8003c86:	601a      	str	r2, [r3, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	24000278 	.word	0x24000278
 8003c98:	080021f5 	.word	0x080021f5
 8003c9c:	2400027c 	.word	0x2400027c
 8003ca0:	0800224d 	.word	0x0800224d
 8003ca4:	24000280 	.word	0x24000280
 8003ca8:	08002285 	.word	0x08002285
 8003cac:	24000284 	.word	0x24000284
 8003cb0:	080022a5 	.word	0x080022a5
 8003cb4:	24000288 	.word	0x24000288
 8003cb8:	0800231b 	.word	0x0800231b
 8003cbc:	2400028c 	.word	0x2400028c
 8003cc0:	08002391 	.word	0x08002391
 8003cc4:	24000290 	.word	0x24000290
 8003cc8:	0800241d 	.word	0x0800241d
 8003ccc:	24000294 	.word	0x24000294
 8003cd0:	080024a9 	.word	0x080024a9
 8003cd4:	24000298 	.word	0x24000298
 8003cd8:	08002539 	.word	0x08002539

08003cdc <_ARGB1555_config_layer>:

static void _ARGB1555_config_layer(LCD_HandleTypeDef *lcd, uint8_t layer) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08e      	sub	sp, #56	; 0x38
 8003ce0:	af0c      	add	r7, sp, #48	; 0x30
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]

	// Configure Layer
	BSP_STM32_LTDC_ConfigLayer(
 8003ce8:	78f8      	ldrb	r0, [r7, #3]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_PAxCA,
			LTDC_BLENDING_FACTOR2_PAxCA,
			lcd->Layers[layer].Frames[0],
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	332c      	adds	r3, #44	; 0x2c
 8003cfa:	681b      	ldr	r3, [r3, #0]
	BSP_STM32_LTDC_ConfigLayer(
 8003cfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003d00:	920a      	str	r2, [sp, #40]	; 0x28
 8003d02:	2200      	movs	r2, #0
 8003d04:	9209      	str	r2, [sp, #36]	; 0x24
 8003d06:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d0a:	9208      	str	r2, [sp, #32]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	9207      	str	r2, [sp, #28]
 8003d10:	2203      	movs	r2, #3
 8003d12:	9206      	str	r2, [sp, #24]
 8003d14:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d18:	9205      	str	r2, [sp, #20]
 8003d1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003d1e:	9204      	str	r2, [sp, #16]
 8003d20:	9303      	str	r3, [sp, #12]
 8003d22:	2307      	movs	r3, #7
 8003d24:	9302      	str	r3, [sp, #8]
 8003d26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	4601      	mov	r1, r0
 8003d36:	4803      	ldr	r0, [pc, #12]	; (8003d44 <_ARGB1555_config_layer+0x68>)
 8003d38:	f004 f9d8 	bl	80080ec <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	50001000 	.word	0x50001000

08003d48 <_ARGB4444_config>:


static void _ARGB4444_config(LCD_HandleTypeDef *lcd) {
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	lcd->config_.bytesperpixel = 2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	lcd->config_.framesize *=2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	005a      	lsls	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	619a      	str	r2, [r3, #24]
	lcd->config_.framebuffersize = lcd->config_.framesize * lcd->config_.buffermode * lcd->config_.layerno;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003d76:	fb03 f202 	mul.w	r2, r3, r2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	61da      	str	r2, [r3, #28]

	// Updating function pointers
	BSP_LCD_Color = _ARGB4444_color;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <_ARGB4444_config+0x78>)
 8003d80:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <_ARGB4444_config+0x7c>)
 8003d82:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _ARGB4444_alpha;
 8003d84:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <_ARGB4444_config+0x80>)
 8003d86:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <_ARGB4444_config+0x84>)
 8003d88:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB4444_dma2dwait;
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <_ARGB4444_config+0x88>)
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <_ARGB4444_config+0x8c>)
 8003d8e:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB4444_updatepixel;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <_ARGB4444_config+0x90>)
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <_ARGB4444_config+0x94>)
 8003d94:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _ARGB4444_getpixel;
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <_ARGB4444_config+0x98>)
 8003d98:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <_ARGB4444_config+0x9c>)
 8003d9a:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _ARGB4444_fillbuf;
 8003d9c:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <_ARGB4444_config+0xa0>)
 8003d9e:	4a13      	ldr	r2, [pc, #76]	; (8003dec <_ARGB4444_config+0xa4>)
 8003da0:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB4444_copybuf;
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <_ARGB4444_config+0xa8>)
 8003da4:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <_ARGB4444_config+0xac>)
 8003da6:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB4444_copybufblend;
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <_ARGB4444_config+0xb0>)
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <_ARGB4444_config+0xb4>)
 8003dac:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB4444_copybufJPEG;
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <_ARGB4444_config+0xb8>)
 8003db0:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <_ARGB4444_config+0xbc>)
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	24000278 	.word	0x24000278
 8003dc4:	08002691 	.word	0x08002691
 8003dc8:	2400027c 	.word	0x2400027c
 8003dcc:	080026e1 	.word	0x080026e1
 8003dd0:	24000280 	.word	0x24000280
 8003dd4:	08002711 	.word	0x08002711
 8003dd8:	24000284 	.word	0x24000284
 8003ddc:	08002731 	.word	0x08002731
 8003de0:	24000288 	.word	0x24000288
 8003de4:	080027a7 	.word	0x080027a7
 8003de8:	2400028c 	.word	0x2400028c
 8003dec:	0800281d 	.word	0x0800281d
 8003df0:	24000290 	.word	0x24000290
 8003df4:	080028a9 	.word	0x080028a9
 8003df8:	24000294 	.word	0x24000294
 8003dfc:	08002935 	.word	0x08002935
 8003e00:	24000298 	.word	0x24000298
 8003e04:	080029c5 	.word	0x080029c5

08003e08 <_ARGB4444_config_layer>:

static void _ARGB4444_config_layer(LCD_HandleTypeDef *lcd, uint8_t layer) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08e      	sub	sp, #56	; 0x38
 8003e0c:	af0c      	add	r7, sp, #48	; 0x30
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	70fb      	strb	r3, [r7, #3]

	// Configure Layer
	BSP_STM32_LTDC_ConfigLayer(
 8003e14:	78f8      	ldrb	r0, [r7, #3]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_PAxCA,
			LTDC_BLENDING_FACTOR2_PAxCA,
			lcd->Layers[layer].Frames[0],
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	332c      	adds	r3, #44	; 0x2c
 8003e26:	681b      	ldr	r3, [r3, #0]
	BSP_STM32_LTDC_ConfigLayer(
 8003e28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e2c:	920a      	str	r2, [sp, #40]	; 0x28
 8003e2e:	2200      	movs	r2, #0
 8003e30:	9209      	str	r2, [sp, #36]	; 0x24
 8003e32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e36:	9208      	str	r2, [sp, #32]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	9207      	str	r2, [sp, #28]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	9206      	str	r2, [sp, #24]
 8003e40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e44:	9205      	str	r2, [sp, #20]
 8003e46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e4a:	9204      	str	r2, [sp, #16]
 8003e4c:	9303      	str	r3, [sp, #12]
 8003e4e:	2307      	movs	r3, #7
 8003e50:	9302      	str	r3, [sp, #8]
 8003e52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	22ff      	movs	r2, #255	; 0xff
 8003e60:	4601      	mov	r1, r0
 8003e62:	4803      	ldr	r0, [pc, #12]	; (8003e70 <_ARGB4444_config_layer+0x68>)
 8003e64:	f004 f942 	bl	80080ec <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	50001000 	.word	0x50001000

08003e74 <_RGB888_config>:

static void _RGB888_config(LCD_HandleTypeDef *lcd) {
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	lcd->config_.bytesperpixel = 3;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	lcd->config_.framesize *=3;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	619a      	str	r2, [r3, #24]
	lcd->config_.framebuffersize = lcd->config_.framesize * lcd->config_.buffermode * lcd->config_.layerno;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003ea6:	fb03 f202 	mul.w	r2, r3, r2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	61da      	str	r2, [r3, #28]

	// Updating function pointers
	BSP_LCD_Color = _RGB888_color;
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <_RGB888_config+0x7c>)
 8003eb0:	4a10      	ldr	r2, [pc, #64]	; (8003ef4 <_RGB888_config+0x80>)
 8003eb2:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _RGB888_alpha;
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <_RGB888_config+0x84>)
 8003eb6:	4a11      	ldr	r2, [pc, #68]	; (8003efc <_RGB888_config+0x88>)
 8003eb8:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _RGB888_dma2dwait;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <_RGB888_config+0x8c>)
 8003ebc:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <_RGB888_config+0x90>)
 8003ebe:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _RGB888_updatepixel;
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <_RGB888_config+0x94>)
 8003ec2:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <_RGB888_config+0x98>)
 8003ec4:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _RGB888_getpixel;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <_RGB888_config+0x9c>)
 8003ec8:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <_RGB888_config+0xa0>)
 8003eca:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _RGB888_fillbuf;
 8003ecc:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <_RGB888_config+0xa4>)
 8003ece:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <_RGB888_config+0xa8>)
 8003ed0:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _RGB888_copybuf;
 8003ed2:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <_RGB888_config+0xac>)
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <_RGB888_config+0xb0>)
 8003ed6:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _RGB888_copybufblend;
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <_RGB888_config+0xb4>)
 8003eda:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <_RGB888_config+0xb8>)
 8003edc:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _RGB888_copybufJPEG;
 8003ede:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <_RGB888_config+0xbc>)
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <_RGB888_config+0xc0>)
 8003ee2:	601a      	str	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	24000278 	.word	0x24000278
 8003ef4:	08002b1d 	.word	0x08002b1d
 8003ef8:	2400027c 	.word	0x2400027c
 8003efc:	08002b37 	.word	0x08002b37
 8003f00:	24000280 	.word	0x24000280
 8003f04:	08002b51 	.word	0x08002b51
 8003f08:	24000284 	.word	0x24000284
 8003f0c:	08002b71 	.word	0x08002b71
 8003f10:	24000288 	.word	0x24000288
 8003f14:	08002c17 	.word	0x08002c17
 8003f18:	2400028c 	.word	0x2400028c
 8003f1c:	08002cb9 	.word	0x08002cb9
 8003f20:	24000290 	.word	0x24000290
 8003f24:	08002d49 	.word	0x08002d49
 8003f28:	24000294 	.word	0x24000294
 8003f2c:	08002dd9 	.word	0x08002dd9
 8003f30:	24000298 	.word	0x24000298
 8003f34:	08002e19 	.word	0x08002e19

08003f38 <_RGB888_config_layer>:

static void _RGB888_config_layer(LCD_HandleTypeDef *lcd, uint8_t layer) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	; 0x38
 8003f3c:	af0c      	add	r7, sp, #48	; 0x30
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	70fb      	strb	r3, [r7, #3]

	// Configure Layer
	BSP_STM32_LTDC_ConfigLayer(
 8003f44:	78f8      	ldrb	r0, [r7, #3]
 8003f46:	78fa      	ldrb	r2, [r7, #3]
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_CA,
			LTDC_BLENDING_FACTOR2_CA,
			lcd->Layers[layer].Frames[0],
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	332c      	adds	r3, #44	; 0x2c
 8003f56:	681b      	ldr	r3, [r3, #0]
	BSP_STM32_LTDC_ConfigLayer(
 8003f58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f5c:	920a      	str	r2, [sp, #40]	; 0x28
 8003f5e:	2200      	movs	r2, #0
 8003f60:	9209      	str	r2, [sp, #36]	; 0x24
 8003f62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f66:	9208      	str	r2, [sp, #32]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	9207      	str	r2, [sp, #28]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	9206      	str	r2, [sp, #24]
 8003f70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f74:	9205      	str	r2, [sp, #20]
 8003f76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f7a:	9204      	str	r2, [sp, #16]
 8003f7c:	9303      	str	r3, [sp, #12]
 8003f7e:	2305      	movs	r3, #5
 8003f80:	9302      	str	r3, [sp, #8]
 8003f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	4601      	mov	r1, r0
 8003f92:	4806      	ldr	r0, [pc, #24]	; (8003fac <_RGB888_config_layer+0x74>)
 8003f94:	f004 f8aa 	bl	80080ec <BSP_STM32_LTDC_ConfigLayer>
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

	// Configure color keying so 0x00000000 is transparent
	BSP_STM32_LTDC_SetTransparentColor(LTDC, layer, 0x00000000);
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4803      	ldr	r0, [pc, #12]	; (8003fac <_RGB888_config_layer+0x74>)
 8003fa0:	f004 f9c6 	bl	8008330 <BSP_STM32_LTDC_SetTransparentColor>
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	50001000 	.word	0x50001000

08003fb0 <_AL88_config>:

static void _AL88_config(LCD_HandleTypeDef *lcd) {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	lcd->config_.bytesperpixel = 2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	lcd->config_.framesize *=2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	005a      	lsls	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	619a      	str	r2, [r3, #24]
	lcd->config_.framebuffersize = lcd->config_.framesize * lcd->config_.buffermode * lcd->config_.layerno;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003fde:	fb03 f202 	mul.w	r2, r3, r2
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	61da      	str	r2, [r3, #28]

	// Updating function pointers
	BSP_LCD_Color = _AL88_color;
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <_AL88_config+0x78>)
 8003fe8:	4a10      	ldr	r2, [pc, #64]	; (800402c <_AL88_config+0x7c>)
 8003fea:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _AL88_alpha;
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <_AL88_config+0x80>)
 8003fee:	4a11      	ldr	r2, [pc, #68]	; (8004034 <_AL88_config+0x84>)
 8003ff0:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _AL88_dma2dwait;
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <_AL88_config+0x88>)
 8003ff4:	4a11      	ldr	r2, [pc, #68]	; (800403c <_AL88_config+0x8c>)
 8003ff6:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _AL88_updatepixel;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <_AL88_config+0x90>)
 8003ffa:	4a12      	ldr	r2, [pc, #72]	; (8004044 <_AL88_config+0x94>)
 8003ffc:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _AL88_getpixel;
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <_AL88_config+0x98>)
 8004000:	4a12      	ldr	r2, [pc, #72]	; (800404c <_AL88_config+0x9c>)
 8004002:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _AL88_fillbuf;
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <_AL88_config+0xa0>)
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <_AL88_config+0xa4>)
 8004008:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _AL88_copybuf;
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <_AL88_config+0xa8>)
 800400c:	4a13      	ldr	r2, [pc, #76]	; (800405c <_AL88_config+0xac>)
 800400e:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _AL88_copybufblend;
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <_AL88_config+0xb0>)
 8004012:	4a14      	ldr	r2, [pc, #80]	; (8004064 <_AL88_config+0xb4>)
 8004014:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _AL88_copybufJPEG;
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <_AL88_config+0xb8>)
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <_AL88_config+0xbc>)
 800401a:	601a      	str	r2, [r3, #0]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	24000278 	.word	0x24000278
 800402c:	08002f75 	.word	0x08002f75
 8004030:	2400027c 	.word	0x2400027c
 8004034:	08002fe1 	.word	0x08002fe1
 8004038:	24000280 	.word	0x24000280
 800403c:	0800300d 	.word	0x0800300d
 8004040:	24000284 	.word	0x24000284
 8004044:	0800302d 	.word	0x0800302d
 8004048:	24000288 	.word	0x24000288
 800404c:	080030a9 	.word	0x080030a9
 8004050:	2400028c 	.word	0x2400028c
 8004054:	0800311d 	.word	0x0800311d
 8004058:	24000290 	.word	0x24000290
 800405c:	080031a9 	.word	0x080031a9
 8004060:	24000294 	.word	0x24000294
 8004064:	08003235 	.word	0x08003235
 8004068:	24000298 	.word	0x24000298
 800406c:	08003275 	.word	0x08003275

08004070 <_AL88_config_layer>:

static void _AL88_config_layer(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t *clut) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b090      	sub	sp, #64	; 0x40
 8004074:	af0c      	add	r7, sp, #48	; 0x30
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	460b      	mov	r3, r1
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	72fb      	strb	r3, [r7, #11]

	// Configure Layer
	BSP_STM32_LTDC_ConfigLayer(
 800407e:	7af8      	ldrb	r0, [r7, #11]
 8004080:	7afa      	ldrb	r2, [r7, #11]
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_PAxCA,
			LTDC_BLENDING_FACTOR2_PAxCA,
			lcd->Layers[layer].Frames[0],
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	332c      	adds	r3, #44	; 0x2c
 8004090:	681b      	ldr	r3, [r3, #0]
	BSP_STM32_LTDC_ConfigLayer(
 8004092:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004096:	920a      	str	r2, [sp, #40]	; 0x28
 8004098:	2200      	movs	r2, #0
 800409a:	9209      	str	r2, [sp, #36]	; 0x24
 800409c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80040a0:	9208      	str	r2, [sp, #32]
 80040a2:	2200      	movs	r2, #0
 80040a4:	9207      	str	r2, [sp, #28]
 80040a6:	2207      	movs	r2, #7
 80040a8:	9206      	str	r2, [sp, #24]
 80040aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80040ae:	9205      	str	r2, [sp, #20]
 80040b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80040b4:	9204      	str	r2, [sp, #16]
 80040b6:	9303      	str	r3, [sp, #12]
 80040b8:	2307      	movs	r3, #7
 80040ba:	9302      	str	r3, [sp, #8]
 80040bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	2300      	movs	r3, #0
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2300      	movs	r3, #0
 80040c8:	22ff      	movs	r2, #255	; 0xff
 80040ca:	4601      	mov	r1, r0
 80040cc:	4806      	ldr	r0, [pc, #24]	; (80040e8 <_AL88_config_layer+0x78>)
 80040ce:	f004 f80d 	bl	80080ec <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

	BSP_STM32_LTDC_ConfigCLUT(LTDC, layer, clut);
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4619      	mov	r1, r3
 80040d8:	4803      	ldr	r0, [pc, #12]	; (80040e8 <_AL88_config_layer+0x78>)
 80040da:	f004 f8dd 	bl	8008298 <BSP_STM32_LTDC_ConfigCLUT>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	50001000 	.word	0x50001000

080040ec <_L8_config>:

static void _L8_config(LCD_HandleTypeDef *lcd) {
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	lcd->config_.bytesperpixel = 1;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	lcd->config_.framesize *=1;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	619a      	str	r2, [r3, #24]
	lcd->config_.framebuffersize = lcd->config_.framesize * lcd->config_.buffermode * lcd->config_.layerno;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004118:	fb03 f202 	mul.w	r2, r3, r2
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	61da      	str	r2, [r3, #28]

	// Updating function pointers
	BSP_LCD_Color = _L8_color;
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <_L8_config+0x78>)
 8004122:	4a11      	ldr	r2, [pc, #68]	; (8004168 <_L8_config+0x7c>)
 8004124:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _L8_alpha;
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <_L8_config+0x80>)
 8004128:	4a11      	ldr	r2, [pc, #68]	; (8004170 <_L8_config+0x84>)
 800412a:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _L8_dma2dwait;
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <_L8_config+0x88>)
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <_L8_config+0x8c>)
 8004130:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _L8_updatepixel;
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <_L8_config+0x90>)
 8004134:	4a12      	ldr	r2, [pc, #72]	; (8004180 <_L8_config+0x94>)
 8004136:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _L8_getpixel;
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <_L8_config+0x98>)
 800413a:	4a13      	ldr	r2, [pc, #76]	; (8004188 <_L8_config+0x9c>)
 800413c:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _L8_fillbuf;
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <_L8_config+0xa0>)
 8004140:	4a13      	ldr	r2, [pc, #76]	; (8004190 <_L8_config+0xa4>)
 8004142:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _L8_copybuf;
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <_L8_config+0xa8>)
 8004146:	4a14      	ldr	r2, [pc, #80]	; (8004198 <_L8_config+0xac>)
 8004148:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _L8_copybufblend;
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <_L8_config+0xb0>)
 800414c:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <_L8_config+0xb4>)
 800414e:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _L8_copybufJPEG;
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <_L8_config+0xb8>)
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <_L8_config+0xbc>)
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	24000278 	.word	0x24000278
 8004168:	080032e1 	.word	0x080032e1
 800416c:	2400027c 	.word	0x2400027c
 8004170:	0800334d 	.word	0x0800334d
 8004174:	24000280 	.word	0x24000280
 8004178:	08003369 	.word	0x08003369
 800417c:	24000284 	.word	0x24000284
 8004180:	08003389 	.word	0x08003389
 8004184:	24000288 	.word	0x24000288
 8004188:	08003405 	.word	0x08003405
 800418c:	2400028c 	.word	0x2400028c
 8004190:	08003479 	.word	0x08003479
 8004194:	24000290 	.word	0x24000290
 8004198:	08003639 	.word	0x08003639
 800419c:	24000294 	.word	0x24000294
 80041a0:	080037c9 	.word	0x080037c9
 80041a4:	24000298 	.word	0x24000298
 80041a8:	08003809 	.word	0x08003809

080041ac <_L8_config_layer>:

static void _L8_config_layer(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t *clut) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b090      	sub	sp, #64	; 0x40
 80041b0:	af0c      	add	r7, sp, #48	; 0x30
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	460b      	mov	r3, r1
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	72fb      	strb	r3, [r7, #11]

	// Configure Layer
	BSP_STM32_LTDC_ConfigLayer(
 80041ba:	7af8      	ldrb	r0, [r7, #11]
 80041bc:	7afa      	ldrb	r2, [r7, #11]
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_CA,
			LTDC_BLENDING_FACTOR2_CA,
			lcd->Layers[layer].Frames[0],
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	332c      	adds	r3, #44	; 0x2c
 80041cc:	681b      	ldr	r3, [r3, #0]
	BSP_STM32_LTDC_ConfigLayer(
 80041ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80041d2:	920a      	str	r2, [sp, #40]	; 0x28
 80041d4:	2200      	movs	r2, #0
 80041d6:	9209      	str	r2, [sp, #36]	; 0x24
 80041d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80041dc:	9208      	str	r2, [sp, #32]
 80041de:	2200      	movs	r2, #0
 80041e0:	9207      	str	r2, [sp, #28]
 80041e2:	2205      	movs	r2, #5
 80041e4:	9206      	str	r2, [sp, #24]
 80041e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80041ea:	9205      	str	r2, [sp, #20]
 80041ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80041f0:	9204      	str	r2, [sp, #16]
 80041f2:	9303      	str	r3, [sp, #12]
 80041f4:	2305      	movs	r3, #5
 80041f6:	9302      	str	r3, [sp, #8]
 80041f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	2300      	movs	r3, #0
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2300      	movs	r3, #0
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	4601      	mov	r1, r0
 8004208:	4806      	ldr	r0, [pc, #24]	; (8004224 <_L8_config_layer+0x78>)
 800420a:	f003 ff6f 	bl	80080ec <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

	BSP_STM32_LTDC_ConfigCLUT(LTDC, layer, clut);
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4619      	mov	r1, r3
 8004214:	4803      	ldr	r0, [pc, #12]	; (8004224 <_L8_config_layer+0x78>)
 8004216:	f004 f83f 	bl	8008298 <BSP_STM32_LTDC_ConfigCLUT>

}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	50001000 	.word	0x50001000

08004228 <BSP_LCD_Init>:
/******************************************************************************
 * Public functions
 ******************************************************************************/


void BSP_LCD_Init(LCD_HandleTypeDef *lcd, uint8_t color_mode, uint8_t buffer_mode, uint8_t layer_no, uint32_t bgcolor, uint32_t *clut) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af06      	add	r7, sp, #24
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	70fb      	strb	r3, [r7, #3]
 800423a:	460b      	mov	r3, r1
 800423c:	70bb      	strb	r3, [r7, #2]
 800423e:	4613      	mov	r3, r2
 8004240:	707b      	strb	r3, [r7, #1]
	// CLUT parameter is ignored in ARGB and RGB modes

	// Setting up config variables
	lcd->frametime[0] = 0;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
	lcd->frametime[1] = 0;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	659a      	str	r2, [r3, #88]	; 0x58
	lcd->priv_.dma2d_state = LCD_DMA2D_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
	lcd->priv_.l_timestamp[0] = 0;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
	lcd->priv_.l_timestamp[1] = 0;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
	lcd->config_.colormode = color_mode;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	f883 2020 	strb.w	r2, [r3, #32]
	lcd->config_.buffermode = buffer_mode;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	78ba      	ldrb	r2, [r7, #2]
 800426c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	lcd->config_.layerno = layer_no;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	787a      	ldrb	r2, [r7, #1]
 8004274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	lcd->config_.bgcolor = bgcolor;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
	lcd->config_.framesize = LCD_WIDTH * LCD_HEIGHT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a7d      	ldr	r2, [pc, #500]	; (8004478 <BSP_LCD_Init+0x250>)
 8004282:	619a      	str	r2, [r3, #24]

	// Configuring color mode
	switch (lcd->config_.colormode) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800428a:	3b01      	subs	r3, #1
 800428c:	2b05      	cmp	r3, #5
 800428e:	d827      	bhi.n	80042e0 <BSP_LCD_Init+0xb8>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <BSP_LCD_Init+0x70>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042d9 	.word	0x080042d9
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042b9 	.word	0x080042b9
 80042a8:	080042c1 	.word	0x080042c1
 80042ac:	080042b1 	.word	0x080042b1
	case LCD_COLOR_MODE_ARGB8888:
		_ARGB8888_config(lcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fc1d 	bl	8003af0 <_ARGB8888_config>
		break;
 80042b6:	e013      	b.n	80042e0 <BSP_LCD_Init+0xb8>
	case LCD_COLOR_MODE_ARGB1555:
		_ARGB1555_config(lcd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fcaf 	bl	8003c1c <_ARGB1555_config>
		break;
 80042be:	e00f      	b.n	80042e0 <BSP_LCD_Init+0xb8>
	case LCD_COLOR_MODE_ARGB4444:
		_ARGB4444_config(lcd);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fd41 	bl	8003d48 <_ARGB4444_config>
		break;
 80042c6:	e00b      	b.n	80042e0 <BSP_LCD_Init+0xb8>
	case LCD_COLOR_MODE_RGB888:
		_RGB888_config(lcd);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fdd3 	bl	8003e74 <_RGB888_config>
		break;
 80042ce:	e007      	b.n	80042e0 <BSP_LCD_Init+0xb8>
	case LCD_COLOR_MODE_AL88:
		_AL88_config(lcd);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff fe6d 	bl	8003fb0 <_AL88_config>
		break;
 80042d6:	e003      	b.n	80042e0 <BSP_LCD_Init+0xb8>
	case LCD_COLOR_MODE_L8:
		_L8_config(lcd);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff07 	bl	80040ec <_L8_config>
		break;
 80042de:	bf00      	nop
	}

	// Clearing memory for frame buffer
	memset((void *)(LCD_FRAMEBUFFER_END_ADDR - lcd->config_.framebuffersize - LCD_JPEGBUF_SIZE),0x00, (lcd->config_.framebuffersize + LCD_JPEGBUF_SIZE));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	4b65      	ldr	r3, [pc, #404]	; (800447c <BSP_LCD_Init+0x254>)
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80042f2:	461a      	mov	r2, r3
 80042f4:	2100      	movs	r1, #0
 80042f6:	f00c f824 	bl	8010342 <memset>

	// Configuring frame buffer parameters
	switch (lcd->config_.buffermode) {
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004300:	2b02      	cmp	r3, #2
 8004302:	d005      	beq.n	8004310 <BSP_LCD_Init+0xe8>
 8004304:	2b03      	cmp	r3, #3
 8004306:	d107      	bne.n	8004318 <BSP_LCD_Init+0xf0>
	case LCD_BUFFER_MODE_TRIPLE:
		_config_triplebuf(lcd);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fab3 	bl	8003874 <_config_triplebuf>
		break;
 800430e:	e003      	b.n	8004318 <BSP_LCD_Init+0xf0>
	case LCD_BUFFER_MODE_DOUBLE:
		_config_doublebuf(lcd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff fb57 	bl	80039c4 <_config_doublebuf>
		break;
 8004316:	bf00      	nop
	}

	// Configuring LTDC controller
	BSP_STM32_LTDC_Init(LTDC, LCD_H_SYNC, LCD_V_SYNC, LCD_ACC_H_BACK_PORCH_WIDTH, LCD_ACC_V_BACK_PORCH_HEIGHT,
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	9305      	str	r3, [sp, #20]
 800431c:	f240 2343 	movw	r3, #579	; 0x243
 8004320:	9304      	str	r3, [sp, #16]
 8004322:	f240 335d 	movw	r3, #861	; 0x35d
 8004326:	9303      	str	r3, [sp, #12]
 8004328:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 800432c:	9302      	str	r3, [sp, #8]
 800432e:	f240 334d 	movw	r3, #845	; 0x34d
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	2316      	movs	r3, #22
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	232d      	movs	r3, #45	; 0x2d
 800433a:	2202      	movs	r2, #2
 800433c:	2119      	movs	r1, #25
 800433e:	4850      	ldr	r0, [pc, #320]	; (8004480 <BSP_LCD_Init+0x258>)
 8004340:	f003 fdf6 	bl	8007f30 <BSP_STM32_LTDC_Init>
			LCD_ACC_ACTIVE_WIDTH, LCD_ACC_ACTIVE_HEIGHT, LCD_TOTAL_WIDTH, LCD_TOTAL_HEIGHT, bgcolor);

	// Configuring JPEG hardware codec
	BSP_STM32_JPEG_Init(JPEG);
 8004344:	484f      	ldr	r0, [pc, #316]	; (8004484 <BSP_LCD_Init+0x25c>)
 8004346:	f003 fd86 	bl	8007e56 <BSP_STM32_JPEG_Init>

	// Disabling both layers
	BSP_STM32_LTDC_DisableLayer(LTDC, 0);
 800434a:	2100      	movs	r1, #0
 800434c:	484c      	ldr	r0, [pc, #304]	; (8004480 <BSP_LCD_Init+0x258>)
 800434e:	f003 fe7f 	bl	8008050 <BSP_STM32_LTDC_DisableLayer>
	BSP_STM32_LTDC_DisableLayer(LTDC, 1);
 8004352:	2101      	movs	r1, #1
 8004354:	484a      	ldr	r0, [pc, #296]	; (8004480 <BSP_LCD_Init+0x258>)
 8004356:	f003 fe7b 	bl	8008050 <BSP_STM32_LTDC_DisableLayer>

	// Configuring LTDC Layers
	switch (lcd->config_.colormode) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004360:	3b01      	subs	r3, #1
 8004362:	2b05      	cmp	r3, #5
 8004364:	d871      	bhi.n	800444a <BSP_LCD_Init+0x222>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <BSP_LCD_Init+0x144>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	08004415 	.word	0x08004415
 8004370:	080043f5 	.word	0x080043f5
 8004374:	080043d9 	.word	0x080043d9
 8004378:	080043a1 	.word	0x080043a1
 800437c:	080043bd 	.word	0x080043bd
 8004380:	08004385 	.word	0x08004385
	case LCD_COLOR_MODE_ARGB8888:
		_ARGB8888_config_layer(lcd, 0);
 8004384:	2100      	movs	r1, #0
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fc12 	bl	8003bb0 <_ARGB8888_config_layer>
		if (lcd->config_.layerno == LCD_LAYER_NO_TWO) _ARGB8888_config_layer(lcd, 1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004392:	2b02      	cmp	r3, #2
 8004394:	d14e      	bne.n	8004434 <BSP_LCD_Init+0x20c>
 8004396:	2101      	movs	r1, #1
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fc09 	bl	8003bb0 <_ARGB8888_config_layer>
		break;
 800439e:	e049      	b.n	8004434 <BSP_LCD_Init+0x20c>
	case LCD_COLOR_MODE_ARGB1555:
		_ARGB1555_config_layer(lcd, 0);
 80043a0:	2100      	movs	r1, #0
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fc9a 	bl	8003cdc <_ARGB1555_config_layer>
		if (lcd->config_.layerno == LCD_LAYER_NO_TWO) _ARGB1555_config_layer(lcd, 1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d142      	bne.n	8004438 <BSP_LCD_Init+0x210>
 80043b2:	2101      	movs	r1, #1
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff fc91 	bl	8003cdc <_ARGB1555_config_layer>
		break;
 80043ba:	e03d      	b.n	8004438 <BSP_LCD_Init+0x210>
	case LCD_COLOR_MODE_ARGB4444:
		_ARGB4444_config_layer(lcd, 0);
 80043bc:	2100      	movs	r1, #0
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff fd22 	bl	8003e08 <_ARGB4444_config_layer>
		if (lcd->config_.layerno == LCD_LAYER_NO_TWO) _ARGB4444_config_layer(lcd, 1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d136      	bne.n	800443c <BSP_LCD_Init+0x214>
 80043ce:	2101      	movs	r1, #1
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fd19 	bl	8003e08 <_ARGB4444_config_layer>
		break;
 80043d6:	e031      	b.n	800443c <BSP_LCD_Init+0x214>
	case LCD_COLOR_MODE_RGB888:
		_RGB888_config_layer(lcd, 0);
 80043d8:	2100      	movs	r1, #0
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff fdac 	bl	8003f38 <_RGB888_config_layer>
		if (lcd->config_.layerno == LCD_LAYER_NO_TWO) _RGB888_config_layer(lcd, 1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d12a      	bne.n	8004440 <BSP_LCD_Init+0x218>
 80043ea:	2101      	movs	r1, #1
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fda3 	bl	8003f38 <_RGB888_config_layer>
		break;
 80043f2:	e025      	b.n	8004440 <BSP_LCD_Init+0x218>
	case LCD_COLOR_MODE_AL88:
		_AL88_config_layer(lcd, 0, clut);
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	2100      	movs	r1, #0
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff fe39 	bl	8004070 <_AL88_config_layer>
		if (lcd->config_.layerno == LCD_LAYER_NO_TWO) _AL88_config_layer(lcd, 1, clut);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004404:	2b02      	cmp	r3, #2
 8004406:	d11d      	bne.n	8004444 <BSP_LCD_Init+0x21c>
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	2101      	movs	r1, #1
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fe2f 	bl	8004070 <_AL88_config_layer>
		break;
 8004412:	e017      	b.n	8004444 <BSP_LCD_Init+0x21c>
	case LCD_COLOR_MODE_L8:
		_L8_config_layer(lcd, 0, clut);
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	2100      	movs	r1, #0
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fec7 	bl	80041ac <_L8_config_layer>
		if (lcd->config_.layerno == LCD_LAYER_NO_TWO) _L8_config_layer(lcd, 1, clut);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004424:	2b02      	cmp	r3, #2
 8004426:	d10f      	bne.n	8004448 <BSP_LCD_Init+0x220>
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	2101      	movs	r1, #1
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff febd 	bl	80041ac <_L8_config_layer>
		break;
 8004432:	e009      	b.n	8004448 <BSP_LCD_Init+0x220>
		break;
 8004434:	bf00      	nop
 8004436:	e008      	b.n	800444a <BSP_LCD_Init+0x222>
		break;
 8004438:	bf00      	nop
 800443a:	e006      	b.n	800444a <BSP_LCD_Init+0x222>
		break;
 800443c:	bf00      	nop
 800443e:	e004      	b.n	800444a <BSP_LCD_Init+0x222>
		break;
 8004440:	bf00      	nop
 8004442:	e002      	b.n	800444a <BSP_LCD_Init+0x222>
		break;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <BSP_LCD_Init+0x222>
		break;
 8004448:	bf00      	nop
	}

	// Enabling required layers
	BSP_STM32_LTDC_EnableLayer(LTDC, 0);
 800444a:	2100      	movs	r1, #0
 800444c:	480c      	ldr	r0, [pc, #48]	; (8004480 <BSP_LCD_Init+0x258>)
 800444e:	f003 fe27 	bl	80080a0 <BSP_STM32_LTDC_EnableLayer>
	if (lcd->config_.layerno == LCD_LAYER_NO_TWO) BSP_STM32_LTDC_EnableLayer(LTDC, 1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004458:	2b02      	cmp	r3, #2
 800445a:	d103      	bne.n	8004464 <BSP_LCD_Init+0x23c>
 800445c:	2101      	movs	r1, #1
 800445e:	4808      	ldr	r0, [pc, #32]	; (8004480 <BSP_LCD_Init+0x258>)
 8004460:	f003 fe1e 	bl	80080a0 <BSP_STM32_LTDC_EnableLayer>

	// Programming LTDC line interrupt
	BSP_STM32_LTDC_SetLineInt(LTDC, (uint32_t)LCD_HEIGHT);
 8004464:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004468:	4805      	ldr	r0, [pc, #20]	; (8004480 <BSP_LCD_Init+0x258>)
 800446a:	f003 ff85 	bl	8008378 <BSP_STM32_LTDC_SetLineInt>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	0005dc00 	.word	0x0005dc00
 800447c:	c3e00000 	.word	0xc3e00000
 8004480:	50001000 	.word	0x50001000
 8004484:	52003000 	.word	0x52003000

08004488 <BSP_LCD_InitBackLight>:
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
	return (uint8_t)(l->CACR & LTDC_LxCACR_CONSTA);
}


void BSP_LCD_InitBackLight(LCD_HandleTypeDef *lcd, uint8_t value) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
	// PWM Timer - base configration
	// Option 1: PWM Frequency = 200MHz Input clock / Prescaler (7+1) / Reload value (999+1) = 25kHz
	// Option 2: PWM Frequency = 240MHz Input clock / Prescaler (7+1) / Reload value (999+1) = 30kHz

	lcd->priv_.bklt_setting = (int32_t)value << 6;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	019a      	lsls	r2, r3, #6
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	611a      	str	r2, [r3, #16]
	lcd->priv_.bklt_value = lcd->priv_.bklt_setting;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]
	lcd->priv_.bklt_dimspeed = 0;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	615a      	str	r2, [r3, #20]

	uint32_t val = (((uint32_t)(lcd->priv_.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	119b      	asrs	r3, r3, #6
 80044b0:	461a      	mov	r2, r3
 80044b2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <BSP_LCD_InitBackLight+0x68>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	33c8      	adds	r3, #200	; 0xc8
 80044c4:	60fb      	str	r3, [r7, #12]

	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 80044c6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80044ca:	2207      	movs	r2, #7
 80044cc:	2100      	movs	r1, #0
 80044ce:	4809      	ldr	r0, [pc, #36]	; (80044f4 <BSP_LCD_InitBackLight+0x6c>)
 80044d0:	f007 f902 	bl	800b6d8 <BSP_STM32_TIM_Init>
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2206      	movs	r2, #6
 80044da:	2103      	movs	r1, #3
 80044dc:	4805      	ldr	r0, [pc, #20]	; (80044f4 <BSP_LCD_InitBackLight+0x6c>)
 80044de:	f007 f93b 	bl	800b758 <BSP_STM32_TIM_ConfigChannel>
	BSP_STM32_TIM_Start(LCD_BKL_TIM);
 80044e2:	4804      	ldr	r0, [pc, #16]	; (80044f4 <BSP_LCD_InitBackLight+0x6c>)
 80044e4:	f007 f9c1 	bl	800b86a <BSP_STM32_TIM_Start>
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	51eb851f 	.word	0x51eb851f
 80044f4:	40000400 	.word	0x40000400

080044f8 <BSP_LCD_SetBackLight>:


void BSP_LCD_SetBackLight(LCD_HandleTypeDef *lcd, uint8_t value, uint8_t dimspeed) {
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
 8004504:	4613      	mov	r3, r2
 8004506:	70bb      	strb	r3, [r7, #2]
	// Sets backlight value 0 - 100%

	lcd->priv_.bklt_setting = (int32_t)value << 6;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	019a      	lsls	r2, r3, #6
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	611a      	str	r2, [r3, #16]
	lcd->priv_.bklt_dimspeed = (int32_t)dimspeed;
 8004510:	78ba      	ldrb	r2, [r7, #2]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	615a      	str	r2, [r3, #20]

}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <LTDC_IRQHandler>:
 * Callback for blanking interval. Updating display buffer.
 ******************************************************************************/

// INT Handler for LTDC controller
void LTDC_IRQHandler(void)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
	if (BSP_STM32_LTDC_IRQHandler(LTDC)==BSP_OK) {
 800452a:	4893      	ldr	r0, [pc, #588]	; (8004778 <LTDC_IRQHandler+0x254>)
 800452c:	f003 ff42 	bl	80083b4 <BSP_STM32_LTDC_IRQHandler>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 811d 	bne.w	8004772 <LTDC_IRQHandler+0x24e>

		// Updating backlight brightness
		if (BSP_hlcd.priv_.bklt_value != BSP_hlcd.priv_.bklt_setting) {
 8004538:	4b90      	ldr	r3, [pc, #576]	; (800477c <LTDC_IRQHandler+0x258>)
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	4b8f      	ldr	r3, [pc, #572]	; (800477c <LTDC_IRQHandler+0x258>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	429a      	cmp	r2, r3
 8004542:	d042      	beq.n	80045ca <LTDC_IRQHandler+0xa6>
			if (BSP_hlcd.priv_.bklt_value < BSP_hlcd.priv_.bklt_setting) {
 8004544:	4b8d      	ldr	r3, [pc, #564]	; (800477c <LTDC_IRQHandler+0x258>)
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	4b8c      	ldr	r3, [pc, #560]	; (800477c <LTDC_IRQHandler+0x258>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	429a      	cmp	r2, r3
 800454e:	da10      	bge.n	8004572 <LTDC_IRQHandler+0x4e>
				BSP_hlcd.priv_.bklt_value += BSP_hlcd.priv_.bklt_dimspeed;
 8004550:	4b8a      	ldr	r3, [pc, #552]	; (800477c <LTDC_IRQHandler+0x258>)
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	4b89      	ldr	r3, [pc, #548]	; (800477c <LTDC_IRQHandler+0x258>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4413      	add	r3, r2
 800455a:	4a88      	ldr	r2, [pc, #544]	; (800477c <LTDC_IRQHandler+0x258>)
 800455c:	60d3      	str	r3, [r2, #12]
				if (BSP_hlcd.priv_.bklt_value > BSP_hlcd.priv_.bklt_setting) BSP_hlcd.priv_.bklt_value = BSP_hlcd.priv_.bklt_setting;
 800455e:	4b87      	ldr	r3, [pc, #540]	; (800477c <LTDC_IRQHandler+0x258>)
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	4b86      	ldr	r3, [pc, #536]	; (800477c <LTDC_IRQHandler+0x258>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	429a      	cmp	r2, r3
 8004568:	dd03      	ble.n	8004572 <LTDC_IRQHandler+0x4e>
 800456a:	4b84      	ldr	r3, [pc, #528]	; (800477c <LTDC_IRQHandler+0x258>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	4a83      	ldr	r2, [pc, #524]	; (800477c <LTDC_IRQHandler+0x258>)
 8004570:	60d3      	str	r3, [r2, #12]
			}

			if (BSP_hlcd.priv_.bklt_value > BSP_hlcd.priv_.bklt_setting) {
 8004572:	4b82      	ldr	r3, [pc, #520]	; (800477c <LTDC_IRQHandler+0x258>)
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	4b81      	ldr	r3, [pc, #516]	; (800477c <LTDC_IRQHandler+0x258>)
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	dd10      	ble.n	80045a0 <LTDC_IRQHandler+0x7c>
				BSP_hlcd.priv_.bklt_value -= BSP_hlcd.priv_.bklt_dimspeed;
 800457e:	4b7f      	ldr	r3, [pc, #508]	; (800477c <LTDC_IRQHandler+0x258>)
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	4a7e      	ldr	r2, [pc, #504]	; (800477c <LTDC_IRQHandler+0x258>)
 8004584:	68d2      	ldr	r2, [r2, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	4a7c      	ldr	r2, [pc, #496]	; (800477c <LTDC_IRQHandler+0x258>)
 800458a:	60d3      	str	r3, [r2, #12]
				if (BSP_hlcd.priv_.bklt_value < BSP_hlcd.priv_.bklt_setting) BSP_hlcd.priv_.bklt_value = BSP_hlcd.priv_.bklt_setting;
 800458c:	4b7b      	ldr	r3, [pc, #492]	; (800477c <LTDC_IRQHandler+0x258>)
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	4b7a      	ldr	r3, [pc, #488]	; (800477c <LTDC_IRQHandler+0x258>)
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	da03      	bge.n	80045a0 <LTDC_IRQHandler+0x7c>
 8004598:	4b78      	ldr	r3, [pc, #480]	; (800477c <LTDC_IRQHandler+0x258>)
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	4a77      	ldr	r2, [pc, #476]	; (800477c <LTDC_IRQHandler+0x258>)
 800459e:	60d3      	str	r3, [r2, #12]
			}

			uint32_t val = (((uint32_t)(BSP_hlcd.priv_.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 80045a0:	4b76      	ldr	r3, [pc, #472]	; (800477c <LTDC_IRQHandler+0x258>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	119b      	asrs	r3, r3, #6
 80045a6:	461a      	mov	r2, r3
 80045a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	4a73      	ldr	r2, [pc, #460]	; (8004780 <LTDC_IRQHandler+0x25c>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	33c8      	adds	r3, #200	; 0xc8
 80045ba:	60bb      	str	r3, [r7, #8]
			BSP_STM32_TIM_SetChannelValue(LCD_BKL_TIM, 3, val);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	2103      	movs	r1, #3
 80045c4:	486f      	ldr	r0, [pc, #444]	; (8004784 <LTDC_IRQHandler+0x260>)
 80045c6:	f007 f961 	bl	800b88c <BSP_STM32_TIM_SetChannelValue>
		}

		// Switching frames
		switch (BSP_hlcd.config_.buffermode) {
 80045ca:	4b6c      	ldr	r3, [pc, #432]	; (800477c <LTDC_IRQHandler+0x258>)
 80045cc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d068      	beq.n	80046a6 <LTDC_IRQHandler+0x182>
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	f040 80cc 	bne.w	8004772 <LTDC_IRQHandler+0x24e>
		case LCD_BUFFER_MODE_TRIPLE:

			for (uint8_t l=0;l<BSP_hlcd.config_.layerno; l++) if (BSP_hlcd.Layers[l].Frame_READY < 255) {
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	e05b      	b.n	8004698 <LTDC_IRQHandler+0x174>
 80045e0:	7bfa      	ldrb	r2, [r7, #15]
 80045e2:	4966      	ldr	r1, [pc, #408]	; (800477c <LTDC_IRQHandler+0x258>)
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	333a      	adds	r3, #58	; 0x3a
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2bff      	cmp	r3, #255	; 0xff
 80045f6:	d04c      	beq.n	8004692 <LTDC_IRQHandler+0x16e>
				uint8_t t = BSP_hlcd.Layers[l].Frame_ACTIVE;
 80045f8:	7bfa      	ldrb	r2, [r7, #15]
 80045fa:	4960      	ldr	r1, [pc, #384]	; (800477c <LTDC_IRQHandler+0x258>)
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	333b      	adds	r3, #59	; 0x3b
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	71fb      	strb	r3, [r7, #7]
				BSP_hlcd.Layers[l].Frame_ACTIVE = BSP_hlcd.Layers[l].Frame_READY;
 800460c:	7bf9      	ldrb	r1, [r7, #15]
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	485a      	ldr	r0, [pc, #360]	; (800477c <LTDC_IRQHandler+0x258>)
 8004612:	460b      	mov	r3, r1
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4403      	add	r3, r0
 800461c:	333a      	adds	r3, #58	; 0x3a
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b2d8      	uxtb	r0, r3
 8004622:	4956      	ldr	r1, [pc, #344]	; (800477c <LTDC_IRQHandler+0x258>)
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	333b      	adds	r3, #59	; 0x3b
 8004630:	4602      	mov	r2, r0
 8004632:	701a      	strb	r2, [r3, #0]
				BSP_hlcd.Layers[l].Frame_IDLE = t;
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	4951      	ldr	r1, [pc, #324]	; (800477c <LTDC_IRQHandler+0x258>)
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	3338      	adds	r3, #56	; 0x38
 8004644:	79fa      	ldrb	r2, [r7, #7]
 8004646:	701a      	strb	r2, [r3, #0]
				BSP_hlcd.Layers[l].Frame_READY = 255;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	494c      	ldr	r1, [pc, #304]	; (800477c <LTDC_IRQHandler+0x258>)
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	333a      	adds	r3, #58	; 0x3a
 8004658:	22ff      	movs	r2, #255	; 0xff
 800465a:	701a      	strb	r2, [r3, #0]

				// Updating Framebuffer address
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, l, BSP_hlcd.Layers[l].Frames[BSP_hlcd.Layers[l].Frame_ACTIVE]);
 800465c:	7bf8      	ldrb	r0, [r7, #15]
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	7bf9      	ldrb	r1, [r7, #15]
 8004662:	4c46      	ldr	r4, [pc, #280]	; (800477c <LTDC_IRQHandler+0x258>)
 8004664:	460b      	mov	r3, r1
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4423      	add	r3, r4
 800466e:	333b      	adds	r3, #59	; 0x3b
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461c      	mov	r4, r3
 8004676:	4941      	ldr	r1, [pc, #260]	; (800477c <LTDC_IRQHandler+0x258>)
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	4423      	add	r3, r4
 8004680:	330a      	adds	r3, #10
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	461a      	mov	r2, r3
 800468a:	4601      	mov	r1, r0
 800468c:	483a      	ldr	r0, [pc, #232]	; (8004778 <LTDC_IRQHandler+0x254>)
 800468e:	f003 fde1 	bl	8008254 <BSP_STM32_LTDC_UpdateFrameBufAddr>
			for (uint8_t l=0;l<BSP_hlcd.config_.layerno; l++) if (BSP_hlcd.Layers[l].Frame_READY < 255) {
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	3301      	adds	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
 8004698:	4b38      	ldr	r3, [pc, #224]	; (800477c <LTDC_IRQHandler+0x258>)
 800469a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800469e:	7bfa      	ldrb	r2, [r7, #15]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d39d      	bcc.n	80045e0 <LTDC_IRQHandler+0xbc>

			}
			return;
 80046a4:	e065      	b.n	8004772 <LTDC_IRQHandler+0x24e>

		case LCD_BUFFER_MODE_DOUBLE:

			for (uint8_t l=0;l<BSP_hlcd.config_.layerno; l++) if (BSP_hlcd.Layers[l].Frame_READY < 255) {
 80046a6:	2300      	movs	r3, #0
 80046a8:	73bb      	strb	r3, [r7, #14]
 80046aa:	e05b      	b.n	8004764 <LTDC_IRQHandler+0x240>
 80046ac:	7bba      	ldrb	r2, [r7, #14]
 80046ae:	4933      	ldr	r1, [pc, #204]	; (800477c <LTDC_IRQHandler+0x258>)
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	333a      	adds	r3, #58	; 0x3a
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2bff      	cmp	r3, #255	; 0xff
 80046c2:	d04c      	beq.n	800475e <LTDC_IRQHandler+0x23a>
				uint8_t t = BSP_hlcd.Layers[l].Frame_ACTIVE;
 80046c4:	7bba      	ldrb	r2, [r7, #14]
 80046c6:	492d      	ldr	r1, [pc, #180]	; (800477c <LTDC_IRQHandler+0x258>)
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	333b      	adds	r3, #59	; 0x3b
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	71bb      	strb	r3, [r7, #6]
				BSP_hlcd.Layers[l].Frame_ACTIVE = BSP_hlcd.Layers[l].Frame_READY;
 80046d8:	7bb9      	ldrb	r1, [r7, #14]
 80046da:	7bba      	ldrb	r2, [r7, #14]
 80046dc:	4827      	ldr	r0, [pc, #156]	; (800477c <LTDC_IRQHandler+0x258>)
 80046de:	460b      	mov	r3, r1
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4403      	add	r3, r0
 80046e8:	333a      	adds	r3, #58	; 0x3a
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2d8      	uxtb	r0, r3
 80046ee:	4923      	ldr	r1, [pc, #140]	; (800477c <LTDC_IRQHandler+0x258>)
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	333b      	adds	r3, #59	; 0x3b
 80046fc:	4602      	mov	r2, r0
 80046fe:	701a      	strb	r2, [r3, #0]
				BSP_hlcd.Layers[l].Frame_EDIT = t;
 8004700:	7bba      	ldrb	r2, [r7, #14]
 8004702:	491e      	ldr	r1, [pc, #120]	; (800477c <LTDC_IRQHandler+0x258>)
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3339      	adds	r3, #57	; 0x39
 8004710:	79ba      	ldrb	r2, [r7, #6]
 8004712:	701a      	strb	r2, [r3, #0]
				BSP_hlcd.Layers[l].Frame_READY = 255;
 8004714:	7bba      	ldrb	r2, [r7, #14]
 8004716:	4919      	ldr	r1, [pc, #100]	; (800477c <LTDC_IRQHandler+0x258>)
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	333a      	adds	r3, #58	; 0x3a
 8004724:	22ff      	movs	r2, #255	; 0xff
 8004726:	701a      	strb	r2, [r3, #0]

				// Updating Framebuffer address
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, l, BSP_hlcd.Layers[l].Frames[BSP_hlcd.Layers[l].Frame_ACTIVE]);
 8004728:	7bb8      	ldrb	r0, [r7, #14]
 800472a:	7bba      	ldrb	r2, [r7, #14]
 800472c:	7bb9      	ldrb	r1, [r7, #14]
 800472e:	4c13      	ldr	r4, [pc, #76]	; (800477c <LTDC_IRQHandler+0x258>)
 8004730:	460b      	mov	r3, r1
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4423      	add	r3, r4
 800473a:	333b      	adds	r3, #59	; 0x3b
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461c      	mov	r4, r3
 8004742:	490e      	ldr	r1, [pc, #56]	; (800477c <LTDC_IRQHandler+0x258>)
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	4423      	add	r3, r4
 800474c:	330a      	adds	r3, #10
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	461a      	mov	r2, r3
 8004756:	4601      	mov	r1, r0
 8004758:	4807      	ldr	r0, [pc, #28]	; (8004778 <LTDC_IRQHandler+0x254>)
 800475a:	f003 fd7b 	bl	8008254 <BSP_STM32_LTDC_UpdateFrameBufAddr>
			for (uint8_t l=0;l<BSP_hlcd.config_.layerno; l++) if (BSP_hlcd.Layers[l].Frame_READY < 255) {
 800475e:	7bbb      	ldrb	r3, [r7, #14]
 8004760:	3301      	adds	r3, #1
 8004762:	73bb      	strb	r3, [r7, #14]
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <LTDC_IRQHandler+0x258>)
 8004766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800476a:	7bba      	ldrb	r2, [r7, #14]
 800476c:	429a      	cmp	r2, r3
 800476e:	d39d      	bcc.n	80046ac <LTDC_IRQHandler+0x188>

			}
			return;
 8004770:	bf00      	nop

		}

	}

}
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bd90      	pop	{r4, r7, pc}
 8004778:	50001000 	.word	0x50001000
 800477c:	24000218 	.word	0x24000218
 8004780:	51eb851f 	.word	0x51eb851f
 8004784:	40000400 	.word	0x40000400

08004788 <DMA2D_IRQHandler>:

// INT Handler for DMA2D
void DMA2D_IRQHandler(void) {
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0

	// Update state flag
	if (BSP_STM32_DMA2D_IRQHandler(DMA2D) == BSP_OK) BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_READY;
 800478c:	4805      	ldr	r0, [pc, #20]	; (80047a4 <DMA2D_IRQHandler+0x1c>)
 800478e:	f002 fd41 	bl	8007214 <BSP_STM32_DMA2D_IRQHandler>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <DMA2D_IRQHandler+0x16>
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <DMA2D_IRQHandler+0x20>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	52001000 	.word	0x52001000
 80047a8:	24000218 	.word	0x24000218

080047ac <BSP_LCD_TP_Init>:

BUF_RAM	LCD_TP_HandleTypeDef	BSP_hlcdtp = {0};
		TxRxContext_TypeDef		BSP_hlcdtp_ctx = {0};


uint8_t BSP_LCD_TP_Init() {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af04      	add	r7, sp, #16
	// Configuring I2C interface
	if (BSP_STM32_I2C_Init(I2C1)) return BSP_ERROR;
 80047b2:	4825      	ldr	r0, [pc, #148]	; (8004848 <BSP_LCD_TP_Init+0x9c>)
 80047b4:	f003 f920 	bl	80079f8 <BSP_STM32_I2C_Init>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <BSP_LCD_TP_Init+0x16>
 80047be:	2301      	movs	r3, #1
 80047c0:	e03f      	b.n	8004842 <BSP_LCD_TP_Init+0x96>

	// Linking DMA stream to I2C context
	BSP_STM32_DMA_Init(DMA1_Stream2, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_BYTE, DMA_MDATAALIGN_BYTE, DMA_NORMAL, DMA_PRIORITY_LOW);
 80047c2:	2300      	movs	r3, #0
 80047c4:	9303      	str	r3, [sp, #12]
 80047c6:	2300      	movs	r3, #0
 80047c8:	9302      	str	r3, [sp, #8]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	2300      	movs	r3, #0
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d6:	2200      	movs	r2, #0
 80047d8:	2100      	movs	r1, #0
 80047da:	481c      	ldr	r0, [pc, #112]	; (800484c <BSP_LCD_TP_Init+0xa0>)
 80047dc:	f002 f890 	bl	8006900 <BSP_STM32_DMA_Init>
	if (BSP_STM32_DMA_CtxLink(DMA1_Stream2, &BSP_hlcdtp_ctx, DMA_REQUEST_I2C1_RX)) return BSP_ERROR;
 80047e0:	2221      	movs	r2, #33	; 0x21
 80047e2:	491b      	ldr	r1, [pc, #108]	; (8004850 <BSP_LCD_TP_Init+0xa4>)
 80047e4:	4819      	ldr	r0, [pc, #100]	; (800484c <BSP_LCD_TP_Init+0xa0>)
 80047e6:	f002 f8d7 	bl	8006998 <BSP_STM32_DMA_CtxLink>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <BSP_LCD_TP_Init+0x48>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e026      	b.n	8004842 <BSP_LCD_TP_Init+0x96>

	// Reset Panel Controller
	BSP_STM32_GPIO_WritePin(BSP_LCD_TP_RST_PORT, BSP_LCD_TP_RST_PIN, GPIO_PIN_RESET);
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047fa:	4816      	ldr	r0, [pc, #88]	; (8004854 <BSP_LCD_TP_Init+0xa8>)
 80047fc:	f002 ff00 	bl	8007600 <BSP_STM32_GPIO_WritePin>
	BSP_Delay(5);
 8004800:	2005      	movs	r0, #5
 8004802:	f001 f8fd 	bl	8005a00 <BSP_Delay>
	BSP_STM32_GPIO_WritePin(BSP_LCD_TP_RST_PORT, BSP_LCD_TP_RST_PIN, GPIO_PIN_SET);
 8004806:	2201      	movs	r2, #1
 8004808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800480c:	4811      	ldr	r0, [pc, #68]	; (8004854 <BSP_LCD_TP_Init+0xa8>)
 800480e:	f002 fef7 	bl	8007600 <BSP_STM32_GPIO_WritePin>
	BSP_Delay(5);
 8004812:	2005      	movs	r0, #5
 8004814:	f001 f8f4 	bl	8005a00 <BSP_Delay>

	// Testing connection
	if (BSP_STM32_I2C_IsDeviceReady(I2C1, (LCD_TP_I2C_ADDR) << 1, 4, 1000)) return BSP_ERROR;
 8004818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800481c:	2204      	movs	r2, #4
 800481e:	2170      	movs	r1, #112	; 0x70
 8004820:	4809      	ldr	r0, [pc, #36]	; (8004848 <BSP_LCD_TP_Init+0x9c>)
 8004822:	f003 f927 	bl	8007a74 <BSP_STM32_I2C_IsDeviceReady>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <BSP_LCD_TP_Init+0x84>
 800482c:	2301      	movs	r3, #1
 800482e:	e008      	b.n	8004842 <BSP_LCD_TP_Init+0x96>

	// Initialization of Touch Panel
	if (BSP_DRV_LCD_TP_Init(I2C1)) return BSP_ERROR;
 8004830:	4805      	ldr	r0, [pc, #20]	; (8004848 <BSP_LCD_TP_Init+0x9c>)
 8004832:	f7fc fb93 	bl	8000f5c <BSP_DRV_LCD_TP_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <BSP_LCD_TP_Init+0x94>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <BSP_LCD_TP_Init+0x96>

	return BSP_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40005400 	.word	0x40005400
 800484c:	40020040 	.word	0x40020040
 8004850:	2400029c 	.word	0x2400029c
 8004854:	58021800 	.word	0x58021800

08004858 <BSP_LCD_TP_INTHandler>:

	return BSP_OK;
}


void BSP_LCD_TP_INTHandler() {
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af02      	add	r7, sp, #8
	// New data available from touch panel, start receiving
	//BSP_STM32_I2C_MemReadIT(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
	BSP_STM32_I2C_MemRead(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
 800485e:	231f      	movs	r3, #31
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <BSP_LCD_TP_INTHandler+0x20>)
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	2270      	movs	r2, #112	; 0x70
 800486a:	4904      	ldr	r1, [pc, #16]	; (800487c <BSP_LCD_TP_INTHandler+0x24>)
 800486c:	4804      	ldr	r0, [pc, #16]	; (8004880 <BSP_LCD_TP_INTHandler+0x28>)
 800486e:	f003 fa15 	bl	8007c9c <BSP_STM32_I2C_MemRead>
}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	3800007c 	.word	0x3800007c
 800487c:	2400029c 	.word	0x2400029c
 8004880:	40005400 	.word	0x40005400

08004884 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void) {
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	// Receiving and parsing data from touch panel
	if (BSP_STM32_I2C_IRQHandler(I2C1, &BSP_hlcdtp_ctx) == BSP_OK) BSP_DRV_LCD_TP_Parse(&BSP_hlcdtp);
 8004888:	4905      	ldr	r1, [pc, #20]	; (80048a0 <I2C1_EV_IRQHandler+0x1c>)
 800488a:	4806      	ldr	r0, [pc, #24]	; (80048a4 <I2C1_EV_IRQHandler+0x20>)
 800488c:	f003 fa43 	bl	8007d16 <BSP_STM32_I2C_IRQHandler>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <I2C1_EV_IRQHandler+0x18>
 8004896:	4804      	ldr	r0, [pc, #16]	; (80048a8 <I2C1_EV_IRQHandler+0x24>)
 8004898:	f7fc fb6e 	bl	8000f78 <BSP_DRV_LCD_TP_Parse>
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	2400029c 	.word	0x2400029c
 80048a4:	40005400 	.word	0x40005400
 80048a8:	3800007c 	.word	0x3800007c

080048ac <BSP_QSPI_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_QSPI.h"

uint8_t BSP_QSPI_Init() {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af02      	add	r7, sp, #8
	if (BSP_STM32_QSPI_Init(BSP_QSPI, BSP_QSPI_PRESCALER, BSP_QSPI_CLOCKMODE, 1, BSP_QSPI_MEMSIZE)) return BSP_ERROR;
 80048b2:	2317      	movs	r3, #23
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	2301      	movs	r3, #1
 80048b8:	2201      	movs	r2, #1
 80048ba:	2102      	movs	r1, #2
 80048bc:	4809      	ldr	r0, [pc, #36]	; (80048e4 <BSP_QSPI_Init+0x38>)
 80048be:	f003 ffb7 	bl	8008830 <BSP_STM32_QSPI_Init>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <BSP_QSPI_Init+0x20>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e008      	b.n	80048de <BSP_QSPI_Init+0x32>
	if (BSP_DRV_QSPI_Init(QUADSPI)) return BSP_ERROR;
 80048cc:	4805      	ldr	r0, [pc, #20]	; (80048e4 <BSP_QSPI_Init+0x38>)
 80048ce:	f7fb fdca 	bl	8000466 <BSP_DRV_QSPI_Init>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <BSP_QSPI_Init+0x30>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <BSP_QSPI_Init+0x32>

	return BSP_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	52005000 	.word	0x52005000

080048e8 <BSP_SDCARD_Init>:

TxRxContext_TypeDef	hsdcardctx = {0};



uint8_t BSP_SDCARD_Init() {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
	if (BSP_STM32_SDMMC_Init(SDMMC2, &hsdcardctx)) return BSP_ERROR;
 80048ec:	4905      	ldr	r1, [pc, #20]	; (8004904 <BSP_SDCARD_Init+0x1c>)
 80048ee:	4806      	ldr	r0, [pc, #24]	; (8004908 <BSP_SDCARD_Init+0x20>)
 80048f0:	f005 fea8 	bl	800a644 <BSP_STM32_SDMMC_Init>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <BSP_SDCARD_Init+0x16>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <BSP_SDCARD_Init+0x18>
	return BSP_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	24000304 	.word	0x24000304
 8004908:	48022400 	.word	0x48022400

0800490c <BSP_SDCARD_ReadBlocks>:

uint8_t BSP_SDCARD_ReadBlocks(uint8_t * pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	if (BSP_STM32_SDMMC_ReadBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	490a      	ldr	r1, [pc, #40]	; (800494c <BSP_SDCARD_ReadBlocks+0x40>)
 8004922:	480b      	ldr	r0, [pc, #44]	; (8004950 <BSP_SDCARD_ReadBlocks+0x44>)
 8004924:	f005 ff62 	bl	800a7ec <BSP_STM32_SDMMC_ReadBlocks>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <BSP_SDCARD_ReadBlocks+0x26>
 800492e:	2301      	movs	r3, #1
 8004930:	e008      	b.n	8004944 <BSP_SDCARD_ReadBlocks+0x38>
	//Wait until operation finish
	while(!(BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER)) {}
 8004932:	bf00      	nop
 8004934:	4905      	ldr	r1, [pc, #20]	; (800494c <BSP_SDCARD_ReadBlocks+0x40>)
 8004936:	4806      	ldr	r0, [pc, #24]	; (8004950 <BSP_SDCARD_ReadBlocks+0x44>)
 8004938:	f005 fe65 	bl	800a606 <BSP_STM32_SDMMC_GetCardState>
 800493c:	4603      	mov	r3, r0
 800493e:	2b04      	cmp	r3, #4
 8004940:	d1f8      	bne.n	8004934 <BSP_SDCARD_ReadBlocks+0x28>
	return BSP_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	24000304 	.word	0x24000304
 8004950:	48022400 	.word	0x48022400

08004954 <BSP_SDCARD_WriteBlocks>:

uint8_t BSP_SDCARD_WriteBlocks(uint8_t * pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
	if (BSP_STM32_SDMMC_WriteBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	490a      	ldr	r1, [pc, #40]	; (8004994 <BSP_SDCARD_WriteBlocks+0x40>)
 800496a:	480b      	ldr	r0, [pc, #44]	; (8004998 <BSP_SDCARD_WriteBlocks+0x44>)
 800496c:	f006 f812 	bl	800a994 <BSP_STM32_SDMMC_WriteBlocks>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <BSP_SDCARD_WriteBlocks+0x26>
 8004976:	2301      	movs	r3, #1
 8004978:	e008      	b.n	800498c <BSP_SDCARD_WriteBlocks+0x38>
	//Wait until operation finish
	while(!(BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER)) {}
 800497a:	bf00      	nop
 800497c:	4905      	ldr	r1, [pc, #20]	; (8004994 <BSP_SDCARD_WriteBlocks+0x40>)
 800497e:	4806      	ldr	r0, [pc, #24]	; (8004998 <BSP_SDCARD_WriteBlocks+0x44>)
 8004980:	f005 fe41 	bl	800a606 <BSP_STM32_SDMMC_GetCardState>
 8004984:	4603      	mov	r3, r0
 8004986:	2b04      	cmp	r3, #4
 8004988:	d1f8      	bne.n	800497c <BSP_SDCARD_WriteBlocks+0x28>
	return BSP_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	24000304 	.word	0x24000304
 8004998:	48022400 	.word	0x48022400

0800499c <BSP_SDCARD_GetBlockNo>:

uint32_t BSP_SDCARD_GetBlockNo() {
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
	SDMMCContext_TypeDef * sdcardctx = (SDMMCContext_TypeDef *)hsdcardctx.ctxmem;
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <BSP_SDCARD_GetBlockNo+0x1c>)
 80049a4:	607b      	str	r3, [r7, #4]
	return sdcardctx->SDCardLogBlockNbr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	2400032c 	.word	0x2400032c

080049bc <BSP_SDCARD_GetBlockSize>:

uint16_t BSP_SDCARD_GetBlockSize() {
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
	SDMMCContext_TypeDef * sdcardctx = (SDMMCContext_TypeDef *)hsdcardctx.ctxmem;
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <BSP_SDCARD_GetBlockSize+0x1c>)
 80049c4:	607b      	str	r3, [r7, #4]
	return (uint16_t)sdcardctx->SDCardLogBlockSize;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	b29b      	uxth	r3, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	2400032c 	.word	0x2400032c

080049dc <BSP_SDRAM_Init>:
 *******************************************************************/

#include "BSP_SDRAM.h"

// Configuring SDRAM on the board
uint8_t	BSP_SDRAM_Init(uint32_t Freq) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	// Freq in MHz

	// Init SDRAM
	if (BSP_DRV_SDRAM_Init(FMC_SDRAM_DEVICE, FMC_SDRAM_BANK1, FMC_SDRAM_CLOCK_PERIOD_2, Freq)) return BSP_ERROR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ea:	2100      	movs	r1, #0
 80049ec:	4806      	ldr	r0, [pc, #24]	; (8004a08 <BSP_SDRAM_Init+0x2c>)
 80049ee:	f7fb fe77 	bl	80006e0 <BSP_DRV_SDRAM_Init>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <BSP_SDRAM_Init+0x20>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <BSP_SDRAM_Init+0x22>

	return BSP_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	52004140 	.word	0x52004140

08004a0c <__NVIC_SetPriority>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	db0a      	blt.n	8004a36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	490c      	ldr	r1, [pc, #48]	; (8004a58 <__NVIC_SetPriority+0x4c>)
 8004a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	440b      	add	r3, r1
 8004a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a34:	e00a      	b.n	8004a4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4908      	ldr	r1, [pc, #32]	; (8004a5c <__NVIC_SetPriority+0x50>)
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	3b04      	subs	r3, #4
 8004a44:	0112      	lsls	r2, r2, #4
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	440b      	add	r3, r1
 8004a4a:	761a      	strb	r2, [r3, #24]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	e000e100 	.word	0xe000e100
 8004a5c:	e000ed00 	.word	0xe000ed00

08004a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a70:	d301      	bcc.n	8004a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a72:	2301      	movs	r3, #1
 8004a74:	e00f      	b.n	8004a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <SysTick_Config+0x40>)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a7e:	210f      	movs	r1, #15
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	f7ff ffc2 	bl	8004a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <SysTick_Config+0x40>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a8e:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <SysTick_Config+0x40>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	e000e010 	.word	0xe000e010

08004aa4 <BSP_STM32_MPU_Init>:

__IO static uint32_t tickvalue = 0;
__IO static uint32_t tickfrequency = 1;


uint8_t BSP_STM32_MPU_Init(void) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
	MPU_Region_TypeDef MPU_InitStruct = {0};
 8004aaa:	463b      	mov	r3, r7
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	60da      	str	r2, [r3, #12]

	// Disables the MPU
	BSP_STM32_MPU_Disable();
 8004ab6:	f001 fec5 	bl	8006844 <BSP_STM32_MPU_Disable>

	// 0x00: CONFIGURING MPU FOR ALL ADDRESS SPACE (4GB) TO AVOID INCORRECT SPECULATIVE READ
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x00000000;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004ac6:	231f      	movs	r3, #31
 8004ac8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x87; // <- Excluded areas of memory
 8004ade:	2387      	movs	r3, #135	; 0x87
 8004ae0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004ae6:	463b      	mov	r3, r7
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 fec3 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x01: CONFIGURING MPU FOR ITCMRAM (0x00000000, 64kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004aee:	2301      	movs	r3, #1
 8004af0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004af2:	2301      	movs	r3, #1
 8004af4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x00000000;
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8004afa:	230f      	movs	r3, #15
 8004afc:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004b12:	2300      	movs	r3, #0
 8004b14:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004b16:	2301      	movs	r3, #1
 8004b18:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fea9 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x02: CONFIGURING MPU FOR FLASH (0x08000000, 512kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004b22:	2301      	movs	r3, #1
 8004b24:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8004b26:	2302      	movs	r3, #2
 8004b28:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x08000000;
 8004b2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b2e:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8004b30:	2312      	movs	r3, #18
 8004b32:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004b50:	463b      	mov	r3, r7
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fe8e 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x03: CONFIGURING MPU FOR DTCMRAM (0x20000000, 128kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x20000000;
 8004b60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004b64:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8004b66:	2310      	movs	r3, #16
 8004b68:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004b82:	2301      	movs	r3, #1
 8004b84:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004b86:	463b      	mov	r3, r7
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 fe73 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x04: CONFIGURING MPU FOR OS_RAM + APP_RAM (0x24000000, 512kB)
	// 0x05: CONFIGURING MPU FOR OS_RAM (0x24000000, 128kB) - Restricting access to first 128kB
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8004b92:	2304      	movs	r3, #4
 8004b94:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x24000000;
 8004b96:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8004b9a:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8004b9c:	2312      	movs	r3, #18
 8004b9e:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 fe58 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8004bc8:	2305      	movs	r3, #5
 8004bca:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x24000000;
 8004bcc:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8004bd0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004bde:	2301      	movs	r3, #1
 8004be0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004bea:	2300      	movs	r3, #0
 8004bec:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 fe3d 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x06: CONFIGURING MPU FOR SND_RAM (0x30040000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8004bfe:	2306      	movs	r3, #6
 8004c00:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x30040000;
 8004c02:	4b6d      	ldr	r3, [pc, #436]	; (8004db8 <BSP_STM32_MPU_Init+0x314>)
 8004c04:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8004c06:	230e      	movs	r3, #14
 8004c08:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004c22:	2301      	movs	r3, #1
 8004c24:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004c26:	463b      	mov	r3, r7
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 fe23 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x07: CONFIGURING MPU FOR BUF_RAM (0x38000000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 8004c32:	2307      	movs	r3, #7
 8004c34:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x38000000;
 8004c36:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8004c3a:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8004c3c:	230e      	movs	r3, #14
 8004c3e:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004c40:	2301      	movs	r3, #1
 8004c42:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004c44:	2301      	movs	r3, #1
 8004c46:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004c54:	2300      	movs	r3, #0
 8004c56:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 fe08 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x08: CONFIGURING MPU FOR SH_RAM (0x38008000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004c64:	2301      	movs	r3, #1
 8004c66:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER8;
 8004c68:	2308      	movs	r3, #8
 8004c6a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x38008000;
 8004c6c:	4b53      	ldr	r3, [pc, #332]	; (8004dbc <BSP_STM32_MPU_Init+0x318>)
 8004c6e:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8004c70:	230e      	movs	r3, #14
 8004c72:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004c74:	2301      	movs	r3, #1
 8004c76:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004c90:	463b      	mov	r3, r7
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 fdee 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x09: CONFIGURING MPU FOR BK_RAM (0x38800000, 4kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER9;
 8004c9c:	2309      	movs	r3, #9
 8004c9e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x38800000;
 8004ca0:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8004ca4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 8004ca6:	230b      	movs	r3, #11
 8004ca8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fdd3 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x0A: CONFIGURING MPU FOR PERIPHERAL REGISTERS (0x40000000, 512kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER10;
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x40000000;
 8004cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cda:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8004cdc:	2312      	movs	r3, #18
 8004cde:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 fdb8 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x0B: CONFIGURING MPU FOR APP_FLASH (0x90000000, 16MB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004d04:	2301      	movs	r3, #1
 8004d06:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER11;
 8004d08:	230b      	movs	r3, #11
 8004d0a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x90000000;
 8004d0c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8004d10:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8004d12:	2317      	movs	r3, #23
 8004d14:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004d32:	463b      	mov	r3, r7
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fd9d 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// 0x0C: CONFIGURING MPU FOR APP_SDRAM + VIDEO_SDRAM (0xC0000000, 64MB) - General use memory
	// 0x0D: CONFIGURING MPU FOR VIDEO_SDRAM (0xC3000000, 16MB) - restricting access to last 16MB for Video Memory
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER12;
 8004d3e:	230c      	movs	r3, #12
 8004d40:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8004d42:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004d46:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8004d48:	2319      	movs	r3, #25
 8004d4a:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004d60:	2300      	movs	r3, #0
 8004d62:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004d64:	2303      	movs	r3, #3
 8004d66:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004d68:	463b      	mov	r3, r7
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fd82 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER13;
 8004d74:	230d      	movs	r3, #13
 8004d76:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xC3000000;
 8004d78:	f04f 4343 	mov.w	r3, #3271557120	; 0xc3000000
 8004d7c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8004d7e:	2317      	movs	r3, #23
 8004d80:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004d86:	2301      	movs	r3, #1
 8004d88:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004d92:	2301      	movs	r3, #1
 8004d94:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8004d96:	2300      	movs	r3, #0
 8004d98:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8004d9e:	463b      	mov	r3, r7
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 fd67 	bl	8006874 <BSP_STM32_MPU_ConfigRegion>

	// Enables the MPU
	BSP_STM32_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004da6:	2004      	movs	r0, #4
 8004da8:	f001 fd2c 	bl	8006804 <BSP_STM32_MPU_Enable>

	return BSP_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	30040000 	.word	0x30040000
 8004dbc:	38008000 	.word	0x38008000

08004dc0 <BSP_STM32_Init_SysClocks>:


uint8_t BSP_STM32_Init_SysClocks(void) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af06      	add	r7, sp, #24

	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004dc6:	f004 fce5 	bl	8009794 <BSP_STM32_RCC_GetSysClockFreq>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4b4d      	ldr	r3, [pc, #308]	; (8004f04 <BSP_STM32_Init_SysClocks+0x144>)
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	494c      	ldr	r1, [pc, #304]	; (8004f08 <BSP_STM32_Init_SysClocks+0x148>)
 8004dd8:	5ccb      	ldrb	r3, [r1, r3]
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	fa22 f303 	lsr.w	r3, r2, r3
 8004de2:	60fb      	str	r3, [r7, #12]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004de4:	4b47      	ldr	r3, [pc, #284]	; (8004f04 <BSP_STM32_Init_SysClocks+0x144>)
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	4a46      	ldr	r2, [pc, #280]	; (8004f08 <BSP_STM32_Init_SysClocks+0x148>)
 8004dee:	5cd3      	ldrb	r3, [r2, r3]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfa:	4a44      	ldr	r2, [pc, #272]	; (8004f0c <BSP_STM32_Init_SysClocks+0x14c>)
 8004dfc:	6013      	str	r3, [r2, #0]
	SystemCoreClock = common_system_clock;
 8004dfe:	4a44      	ldr	r2, [pc, #272]	; (8004f10 <BSP_STM32_Init_SysClocks+0x150>)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6013      	str	r3, [r2, #0]
	BSP_TickInit(SystemCoreClock, 1, (1UL << __NVIC_PRIO_BITS));
 8004e04:	4b42      	ldr	r3, [pc, #264]	; (8004f10 <BSP_STM32_Init_SysClocks+0x150>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2210      	movs	r2, #16
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fda9 	bl	8005964 <BSP_TickInit>

	// Starting SYSCFG clock
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 8004e12:	4b3c      	ldr	r3, [pc, #240]	; (8004f04 <BSP_STM32_Init_SysClocks+0x144>)
 8004e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e18:	4a3a      	ldr	r2, [pc, #232]	; (8004f04 <BSP_STM32_Init_SysClocks+0x144>)
 8004e1a:	f043 0302 	orr.w	r3, r3, #2
 8004e1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e22:	4b38      	ldr	r3, [pc, #224]	; (8004f04 <BSP_STM32_Init_SysClocks+0x144>)
 8004e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]

	//Supply configuration update enable
	BSP_STM32_PWR_ConfigSupply(PWR_SMPS_1V8_SUPPLIES_LDO);
 8004e30:	2016      	movs	r0, #22
 8004e32:	f003 fb39 	bl	80084a8 <BSP_STM32_PWR_ConfigSupply>

	// Configure the main internal regulator output voltage
	BSP_STM32_PWR_VoltageScalingConfig(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004e36:	2000      	movs	r0, #0
 8004e38:	f003 fbb2 	bl	80085a0 <BSP_STM32_PWR_VoltageScalingConfig>

	// Waiting until required voltage is set
	BSP_STM32_PWR_WaitForVOSRDY();
 8004e3c:	f003 fc0e 	bl	800865c <BSP_STM32_PWR_WaitForVOSRDY>

	// Configure LSE Drive Capability
	BSP_STM32_PWR_EnableBkUpAccess();
 8004e40:	f003 fc2c 	bl	800869c <BSP_STM32_PWR_EnableBkUpAccess>
	BSP_STM32_RCC_LSEConfigDrive(RCC_LSEDRIVE_MEDIUMHIGH);
 8004e44:	2010      	movs	r0, #16
 8004e46:	f003 ffdd 	bl	8008e04 <BSP_STM32_RCC_LSEConfigDrive>

	// Setting the PLL clock source
	BSP_STM32_RCC_PLLClockSource(RCC_PLLSOURCE_HSE);
 8004e4a:	2002      	movs	r0, #2
 8004e4c:	f003 ffc4 	bl	8008dd8 <BSP_STM32_RCC_PLLClockSource>

	// Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.
	BSP_STM32_RCC_ConfigHSE(RCC_HSE_BYPASS);
 8004e50:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 8004e54:	f003 ffec 	bl	8008e30 <BSP_STM32_RCC_ConfigHSE>
	BSP_STM32_RCC_ConfigHSI(RCC_HSI_DIV1, RCC_HSICALIBRATION_DEFAULT);
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	f004 f876 	bl	8008f4c <BSP_STM32_RCC_ConfigHSI>
	BSP_STM32_RCC_ConfigLSE(RCC_LSE_ON);
 8004e60:	2001      	movs	r0, #1
 8004e62:	f004 f903 	bl	800906c <BSP_STM32_RCC_ConfigLSE>
	BSP_STM32_RCC_ConfigHSI48(RCC_HSI48_ON);
 8004e66:	2001      	movs	r0, #1
 8004e68:	f004 f98a 	bl	8009180 <BSP_STM32_RCC_ConfigHSI48>

	// For 480/240MHz M: 5 / N: 192 / P: 2 / Q: 16 / R: 2
	// For 400/200MHz M: 2 / N: 160 / P: 2 / Q: 16 / R: 2
	BSP_STM32_RCC_ConfigPLL1(RCC_PLL_ON, RCC_PLLSOURCE_HSE, RCC_PLL1VCIRANGE_2, RCC_PLL1VCOWIDE, 5, 192, 2, 16, 2);
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	9304      	str	r3, [sp, #16]
 8004e70:	2310      	movs	r3, #16
 8004e72:	9303      	str	r3, [sp, #12]
 8004e74:	2302      	movs	r3, #2
 8004e76:	9302      	str	r3, [sp, #8]
 8004e78:	23c0      	movs	r3, #192	; 0xc0
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	2305      	movs	r3, #5
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	2300      	movs	r3, #0
 8004e82:	2208      	movs	r2, #8
 8004e84:	2102      	movs	r1, #2
 8004e86:	2002      	movs	r0, #2
 8004e88:	f004 f9b8 	bl	80091fc <BSP_STM32_RCC_ConfigPLL1>

	// Initializes the CPU, AHB and APB buses clocks
	uint32_t clocktype = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8004e8c:	233f      	movs	r3, #63	; 0x3f
 8004e8e:	60bb      	str	r3, [r7, #8]

	BSP_STM32_RCC_ClockConfig(clocktype, RCC_SYSCLKSOURCE_PLLCLK, RCC_SYSCLK_DIV1, RCC_HCLK_DIV2, RCC_APB1_DIV2, RCC_APB2_DIV2, RCC_APB3_DIV2, RCC_APB4_DIV2, FLASH_LATENCY_2);
 8004e90:	2302      	movs	r3, #2
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	2340      	movs	r3, #64	; 0x40
 8004e96:	9303      	str	r3, [sp, #12]
 8004e98:	2340      	movs	r3, #64	; 0x40
 8004e9a:	9302      	str	r3, [sp, #8]
 8004e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2340      	movs	r3, #64	; 0x40
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2103      	movs	r1, #3
 8004eac:	68b8      	ldr	r0, [r7, #8]
 8004eae:	f004 fb09 	bl	80094c4 <BSP_STM32_RCC_ClockConfig>

	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004eb2:	f004 fc6f 	bl	8009794 <BSP_STM32_RCC_GetSysClockFreq>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <BSP_STM32_Init_SysClocks+0x144>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	0a1b      	lsrs	r3, r3, #8
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	4911      	ldr	r1, [pc, #68]	; (8004f08 <BSP_STM32_Init_SysClocks+0x148>)
 8004ec4:	5ccb      	ldrb	r3, [r1, r3]
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ece:	60fb      	str	r3, [r7, #12]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <BSP_STM32_Init_SysClocks+0x144>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	4a0b      	ldr	r2, [pc, #44]	; (8004f08 <BSP_STM32_Init_SysClocks+0x148>)
 8004eda:	5cd3      	ldrb	r3, [r2, r3]
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee6:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <BSP_STM32_Init_SysClocks+0x14c>)
 8004ee8:	6013      	str	r3, [r2, #0]
	SystemCoreClock = common_system_clock;
 8004eea:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <BSP_STM32_Init_SysClocks+0x150>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6013      	str	r3, [r2, #0]

	BSP_TickInit(common_system_clock, 1, (1UL << __NVIC_PRIO_BITS));
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fd35 	bl	8005964 <BSP_TickInit>
	return BSP_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	58024400 	.word	0x58024400
 8004f08:	08010b94 	.word	0x08010b94
 8004f0c:	24000008 	.word	0x24000008
 8004f10:	24000004 	.word	0x24000004

08004f14 <BSP_STM32_Init_PeriphClocks>:

uint8_t BSP_STM32_Init_PeriphClocks(void) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b09e      	sub	sp, #120	; 0x78
 8004f18:	af04      	add	r7, sp, #16

	// Configuring PLL3
	BSP_STM32_RCC_ConfigPLL3(RCC_PLL3VCIRANGE_2, RCC_PLL3VCOMEDIUM, 5, 30, 2, 2, 10, 0);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9303      	str	r3, [sp, #12]
 8004f1e:	230a      	movs	r3, #10
 8004f20:	9302      	str	r3, [sp, #8]
 8004f22:	2302      	movs	r3, #2
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	2302      	movs	r3, #2
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	231e      	movs	r3, #30
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f36:	f004 fa23 	bl	8009380 <BSP_STM32_RCC_ConfigPLL3>

	// Starting peripherals clock - ADC
	BSP_STM32_RCC_CLKConfig_ADC();
 8004f3a:	f003 ff33 	bl	8008da4 <BSP_STM32_RCC_CLKConfig_ADC>

	// Starting peripherals clock - LTDC
	BSP_STM32_RCC_CLKConfig_LTDC();
 8004f3e:	f003 ff43 	bl	8008dc8 <BSP_STM32_RCC_CLKConfig_LTDC>

	// Starting peripherals clocks - RTC
    if (BSP_STM32_RCC_CLKConfig_RTC()) return BSP_ERROR;
 8004f42:	f003 fe4f 	bl	8008be4 <BSP_STM32_RCC_CLKConfig_RTC>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <BSP_STM32_Init_PeriphClocks+0x3c>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e1d3      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_RTC_ENABLE();
 8004f50:	4baf      	ldr	r3, [pc, #700]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	4aae      	ldr	r2, [pc, #696]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5a:	6713      	str	r3, [r2, #112]	; 0x70

    if (BSP_STM32_RTC_Init(RTC, 127, 255)) return BSP_ERROR;
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	217f      	movs	r1, #127	; 0x7f
 8004f60:	48ac      	ldr	r0, [pc, #688]	; (8005214 <BSP_STM32_Init_PeriphClocks+0x300>)
 8004f62:	f004 fe23 	bl	8009bac <BSP_STM32_RTC_Init>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <BSP_STM32_Init_PeriphClocks+0x5c>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e1c3      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>

	// Enable SYSCFG Clock
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 8004f70:	4ba7      	ldr	r3, [pc, #668]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f76:	4aa6      	ldr	r2, [pc, #664]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004f78:	f043 0302 	orr.w	r3, r3, #2
 8004f7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f80:	4ba3      	ldr	r3, [pc, #652]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64

	// Starting GPIOs clocks
	__BSP_RCC_GPIOA_CLK_ENABLE();
 8004f8e:	4ba0      	ldr	r3, [pc, #640]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f94:	4a9e      	ldr	r2, [pc, #632]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f9e:	4b9c      	ldr	r3, [pc, #624]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8004faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	__BSP_RCC_GPIOB_CLK_ENABLE();
 8004fac:	4b98      	ldr	r3, [pc, #608]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fb2:	4a97      	ldr	r2, [pc, #604]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fbc:	4b94      	ldr	r3, [pc, #592]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	__BSP_RCC_GPIOC_CLK_ENABLE();
 8004fca:	4b91      	ldr	r3, [pc, #580]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fd0:	4a8f      	ldr	r2, [pc, #572]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004fd2:	f043 0304 	orr.w	r3, r3, #4
 8004fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fda:	4b8d      	ldr	r3, [pc, #564]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	__BSP_RCC_GPIOD_CLK_ENABLE();
 8004fe8:	4b89      	ldr	r3, [pc, #548]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fee:	4a88      	ldr	r2, [pc, #544]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004ff0:	f043 0308 	orr.w	r3, r3, #8
 8004ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ff8:	4b85      	ldr	r3, [pc, #532]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8004ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	657b      	str	r3, [r7, #84]	; 0x54
 8005004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	__BSP_RCC_GPIOE_CLK_ENABLE();
 8005006:	4b82      	ldr	r3, [pc, #520]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800500c:	4a80      	ldr	r2, [pc, #512]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800500e:	f043 0310 	orr.w	r3, r3, #16
 8005012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005016:	4b7e      	ldr	r3, [pc, #504]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	653b      	str	r3, [r7, #80]	; 0x50
 8005022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	__BSP_RCC_GPIOF_CLK_ENABLE();
 8005024:	4b7a      	ldr	r3, [pc, #488]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800502a:	4a79      	ldr	r2, [pc, #484]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005034:	4b76      	ldr	r3, [pc, #472]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	__BSP_RCC_GPIOG_CLK_ENABLE();
 8005042:	4b73      	ldr	r3, [pc, #460]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005048:	4a71      	ldr	r2, [pc, #452]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800504a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800504e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005052:	4b6f      	ldr	r3, [pc, #444]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	64bb      	str	r3, [r7, #72]	; 0x48
 800505e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	__BSP_RCC_GPIOH_CLK_ENABLE();
 8005060:	4b6b      	ldr	r3, [pc, #428]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005066:	4a6a      	ldr	r2, [pc, #424]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005070:	4b67      	ldr	r3, [pc, #412]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	647b      	str	r3, [r7, #68]	; 0x44
 800507c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	__BSP_RCC_GPIOI_CLK_ENABLE();
 800507e:	4b64      	ldr	r3, [pc, #400]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005084:	4a62      	ldr	r2, [pc, #392]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800508e:	4b60      	ldr	r3, [pc, #384]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	643b      	str	r3, [r7, #64]	; 0x40
 800509a:	6c3b      	ldr	r3, [r7, #64]	; 0x40

	// Starting peripherals clocks - FMC (SDRAM Controller)
	if (BSP_STM32_RCC_CLKConfig_FMC()) return BSP_ERROR;
 800509c:	f003 fe04 	bl	8008ca8 <BSP_STM32_RCC_CLKConfig_FMC>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <BSP_STM32_Init_PeriphClocks+0x196>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e126      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
	__BSP_RCC_FMC_CLK_ENABLE();
 80050aa:	4b59      	ldr	r3, [pc, #356]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80050b0:	4a57      	ldr	r2, [pc, #348]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050b6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80050ba:	4b55      	ldr	r3, [pc, #340]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80050c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

	// Starting peripherals clocks - LTDC (LCD Controller)
	__BSP_RCC_LTDC_CLK_ENABLE();
 80050c8:	4b51      	ldr	r3, [pc, #324]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050ce:	4a50      	ldr	r2, [pc, #320]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050d0:	f043 0308 	orr.w	r3, r3, #8
 80050d4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80050d8:	4b4d      	ldr	r3, [pc, #308]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	// Starting peripherals clocks - DMA2D
    __BSP_RCC_DMA2D_CLK_ENABLE();
 80050e6:	4b4a      	ldr	r3, [pc, #296]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80050ec:	4a48      	ldr	r2, [pc, #288]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050ee:	f043 0310 	orr.w	r3, r3, #16
 80050f2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80050f6:	4b46      	ldr	r3, [pc, #280]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80050f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    // Starting peripherals clocks - JPEG
    __BSP_RCC_JPGDECEN_CLK_ENABLE();
 8005104:	4b42      	ldr	r3, [pc, #264]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005106:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800510a:	4a41      	ldr	r2, [pc, #260]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800510c:	f043 0320 	orr.w	r3, r3, #32
 8005110:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005114:	4b3e      	ldr	r3, [pc, #248]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005116:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	633b      	str	r3, [r7, #48]	; 0x30
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    // Starting peripherals clocks - DMA1
    __BSP_RCC_DMA1_CLK_ENABLE();
 8005122:	4b3b      	ldr	r3, [pc, #236]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005128:	4a39      	ldr	r2, [pc, #228]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005132:	4b37      	ldr	r3, [pc, #220]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    // Starting peripherals clocks - BDMA
    __BSP_RCC_BDMA_CLK_ENABLE();
 8005140:	4b33      	ldr	r3, [pc, #204]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005146:	4a32      	ldr	r2, [pc, #200]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800514c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005150:	4b2f      	ldr	r3, [pc, #188]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    // Starting peripherals clocks - ADC1
    __BSP_RCC_ADC12_CLK_ENABLE();
 800515e:	4b2c      	ldr	r3, [pc, #176]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005164:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005166:	f043 0320 	orr.w	r3, r3, #32
 800516a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800516e:	4b28      	ldr	r3, [pc, #160]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    // Starting peripherals clocks - I2C1
    if (BSP_STM32_RCC_CLKConfig_I2C1()) return BSP_ERROR;
 800517c:	f003 fd9c 	bl	8008cb8 <BSP_STM32_RCC_CLKConfig_I2C1>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <BSP_STM32_Init_PeriphClocks+0x276>
 8005186:	2301      	movs	r3, #1
 8005188:	e0b6      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_I2C1_CLK_ENABLE();
 800518a:	4b21      	ldr	r3, [pc, #132]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800518c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005190:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005196:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800519a:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800519c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	6a3b      	ldr	r3, [r7, #32]

    // Starting peripherals clocks - I2C4
    if (BSP_STM32_RCC_CLKConfig_I2C4()) return BSP_ERROR;
 80051a8:	f003 fd96 	bl	8008cd8 <BSP_STM32_RCC_CLKConfig_I2C4>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <BSP_STM32_Init_PeriphClocks+0x2a2>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0a0      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_I2C4_CLK_ENABLE();
 80051b6:	4b16      	ldr	r3, [pc, #88]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80051b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051bc:	4a14      	ldr	r2, [pc, #80]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80051be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80051c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	69fb      	ldr	r3, [r7, #28]
    // Starting peripherials clocks - I2S3
//    if (BSP_STM32_RCC_CLKConfig_I2S3()) return BSP_ERROR;
//    __BSP_RCC_I2S3_CLK_ENABLE();

    // Starting peripherals clocks - QSPI
    if (BSP_STM32_RCC_CLKConfig_QSPI()) return BSP_ERROR;
 80051d4:	f003 fd90 	bl	8008cf8 <BSP_STM32_RCC_CLKConfig_QSPI>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <BSP_STM32_Init_PeriphClocks+0x2ce>
 80051de:	2301      	movs	r3, #1
 80051e0:	e08a      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_QSPI_CLK_ENABLE();
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80051e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80051ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051ee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80051f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80051f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	69bb      	ldr	r3, [r7, #24]

    // Starting peripherals clocks - SDMMC2
    if (BSP_STM32_RCC_CLKConfig_SDMMC2()) return BSP_ERROR;
 8005200:	f003 fd8a 	bl	8008d18 <BSP_STM32_RCC_CLKConfig_SDMMC2>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <BSP_STM32_Init_PeriphClocks+0x304>
 800520a:	2301      	movs	r3, #1
 800520c:	e074      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
 800520e:	bf00      	nop
 8005210:	58024400 	.word	0x58024400
 8005214:	58004000 	.word	0x58004000
    __BSP_RCC_SDMMC2_CLK_ENABLE();
 8005218:	4b39      	ldr	r3, [pc, #228]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 800521a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800521e:	4a38      	ldr	r2, [pc, #224]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005224:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005228:	4b35      	ldr	r3, [pc, #212]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 800522a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800522e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	697b      	ldr	r3, [r7, #20]

    // Starting peripherals clocks - TIM2
    __BSP_RCC_TIM2_CLK_ENABLE();
 8005236:	4b32      	ldr	r3, [pc, #200]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800523c:	4a30      	ldr	r2, [pc, #192]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005246:	4b2e      	ldr	r3, [pc, #184]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	693b      	ldr	r3, [r7, #16]

    // Starting peripherals clocks - TIM3
    __BSP_RCC_TIM3_CLK_ENABLE();
 8005254:	4b2a      	ldr	r3, [pc, #168]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800525a:	4a29      	ldr	r2, [pc, #164]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005264:	4b26      	ldr	r3, [pc, #152]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]

    // Starting peripherals clocks - UART5
    if (BSP_STM32_RCC_CLKConfig_UART5()) return BSP_ERROR;
 8005272:	f003 fd67 	bl	8008d44 <BSP_STM32_RCC_CLKConfig_UART5>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <BSP_STM32_Init_PeriphClocks+0x36c>
 800527c:	2301      	movs	r3, #1
 800527e:	e03b      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_UART5_CLK_ENABLE();
 8005280:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]

    // Starting peripherals clocks - USART2
    if (BSP_STM32_RCC_CLKConfig_USART2()) return BSP_ERROR;
 800529e:	f003 fd61 	bl	8008d64 <BSP_STM32_RCC_CLKConfig_USART2>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <BSP_STM32_Init_PeriphClocks+0x398>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e025      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_USART2_CLK_ENABLE();
 80052ac:	4b14      	ldr	r3, [pc, #80]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 80052ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052b2:	4a13      	ldr	r2, [pc, #76]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 80052b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 80052be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]

    // Starting peripherals clock - USB_OTG_FS
    if (BSP_STM32_RCC_CLKConfig_USBFS()) return BSP_ERROR;
 80052ca:	f003 fd5b 	bl	8008d84 <BSP_STM32_RCC_CLKConfig_USBFS>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <BSP_STM32_Init_PeriphClocks+0x3c4>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e00f      	b.n	80052f8 <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_USB2_FS_CLK_ENABLE();
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 80052da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052de:	4a08      	ldr	r2, [pc, #32]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 80052e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 80052ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]

	return BSP_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3768      	adds	r7, #104	; 0x68
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	58024400 	.word	0x58024400

08005304 <BSP_STM32_Init_NVIC>:


uint8_t BSP_STM32_Init_NVIC(void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0

	uint32_t pp;
	uint32_t sp;

	/************** PRIORITY 0 *************/
	pp = 0;		sp = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	607b      	str	r3, [r7, #4]
 800530e:	2300      	movs	r3, #0
 8005310:	603b      	str	r3, [r7, #0]

	// Configuring NVIC for LTDC
	BSP_STM32_NVIC_SetPriority(LTDC_IRQn, pp, sp);
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	2058      	movs	r0, #88	; 0x58
 8005318:	f001 fa4c 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(LTDC_IRQn);
 800531c:	2058      	movs	r0, #88	; 0x58
 800531e:	f001 fa3a 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>

    // Configuring NVIC for DMA2D
    BSP_STM32_NVIC_SetPriority(DMA2D_IRQn, pp, sp);
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	205a      	movs	r0, #90	; 0x5a
 8005328:	f001 fa44 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA2D_IRQn);
 800532c:	205a      	movs	r0, #90	; 0x5a
 800532e:	f001 fa32 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>
    // Configuring NVIC for DMA1 - Stream 0 - for I2S3 TX
//    BSP_NVIC_SetPriority(DMA1_Stream0_IRQn, pp, sp);
//    BSP_NVIC_EnableIRQ(DMA1_Stream0_IRQn);

    // Configuring NVIC for DMA1 - Stream 1 - for ADC1
    BSP_STM32_NVIC_SetPriority(DMA1_Stream1_IRQn, pp, sp);
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	200c      	movs	r0, #12
 8005338:	f001 fa3c 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800533c:	200c      	movs	r0, #12
 800533e:	f001 fa2a 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>

    // Configuring NVIC for DMA1 - Stream 2 - for I2C1 RX
    BSP_STM32_NVIC_SetPriority(DMA1_Stream2_IRQn, pp, sp);
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	200d      	movs	r0, #13
 8005348:	f001 fa34 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800534c:	200d      	movs	r0, #13
 800534e:	f001 fa22 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>

    // Configuring NVIC for BDMA - Channel 0 - for I2C4 RX
    BSP_STM32_NVIC_SetPriority(BDMA_Channel0_IRQn, pp, sp);
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	2081      	movs	r0, #129	; 0x81
 8005358:	f001 fa2c 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800535c:	2081      	movs	r0, #129	; 0x81
 800535e:	f001 fa1a 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>

    // Configure NVIC for USBFS
    BSP_STM32_NVIC_SetPriority(OTG_FS_IRQn, pp, sp);
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	2065      	movs	r0, #101	; 0x65
 8005368:	f001 fa24 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(OTG_FS_IRQn);
 800536c:	2065      	movs	r0, #101	; 0x65
 800536e:	f001 fa12 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>


    /************** PRIORITY 1 *************/
	pp = 1;		sp = 0;
 8005372:	2301      	movs	r3, #1
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	2300      	movs	r3, #0
 8005378:	603b      	str	r3, [r7, #0]
    // BSP_NVIC_SetPriority(SDMMC2_IRQn, pp, sp);
    // BSP_NVIC_EnableIRQ(SDMMC2_IRQn);


    /************** PRIORITY 2 *************/
    pp = 2;		sp = 0;
 800537a:	2302      	movs	r3, #2
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	2300      	movs	r3, #0
 8005380:	603b      	str	r3, [r7, #0]


    /************** PRIORITY 3 *************/
    pp = 3;		sp = 0;
 8005382:	2303      	movs	r3, #3
 8005384:	607b      	str	r3, [r7, #4]
 8005386:	2300      	movs	r3, #0
 8005388:	603b      	str	r3, [r7, #0]

    // Configure NVIC for I2C1
    BSP_STM32_NVIC_SetPriority(I2C1_EV_IRQn, pp, sp);
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	201f      	movs	r0, #31
 8005390:	f001 fa10 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005394:	201f      	movs	r0, #31
 8005396:	f001 f9fe 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>

    // Configure NVIC for I2C4
    BSP_STM32_NVIC_SetPriority(I2C4_EV_IRQn, pp, sp);
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	205f      	movs	r0, #95	; 0x5f
 80053a0:	f001 fa08 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80053a4:	205f      	movs	r0, #95	; 0x5f
 80053a6:	f001 f9f6 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>

    // Configure NVIC for USART2
    BSP_STM32_NVIC_SetPriority(USART2_IRQn, pp, sp);
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	2026      	movs	r0, #38	; 0x26
 80053b0:	f001 fa00 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(USART2_IRQn);
 80053b4:	2026      	movs	r0, #38	; 0x26
 80053b6:	f001 f9ee 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>
//    BSP_NVIC_SetPriority(SPI3_IRQn, pp, sp);
//    BSP_NVIC_EnableIRQ(SPI3_IRQn);


    /************** PRIORITY 4 *************/
    pp = 4;		sp = 0;
 80053ba:	2304      	movs	r3, #4
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	2300      	movs	r3, #0
 80053c0:	603b      	str	r3, [r7, #0]

    // Configure NVIC for GPIOs
    BSP_STM32_NVIC_SetPriority(EXTI15_10_IRQn, pp, sp); // Touch panel and MPU6050
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	2028      	movs	r0, #40	; 0x28
 80053c8:	f001 f9f4 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053cc:	2028      	movs	r0, #40	; 0x28
 80053ce:	f001 f9e2 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(EXTI9_5_IRQn, pp, sp); // BT Module
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	2017      	movs	r0, #23
 80053d8:	f001 f9ec 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053dc:	2017      	movs	r0, #23
 80053de:	f001 f9da 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>

    //Configure NVIC for TIM2
    BSP_STM32_NVIC_SetPriority(TIM2_IRQn, pp, sp); // Timer for sampling joystick and keyboard
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	201c      	movs	r0, #28
 80053e8:	f001 f9e4 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(TIM2_IRQn);
 80053ec:	201c      	movs	r0, #28
 80053ee:	f001 f9d2 	bl	8006796 <BSP_STM32_NVIC_EnableIRQ>

    return BSP_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <BSP_STM32_Init_GPIO>:


uint8_t BSP_STM32_Init_GPIO(void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af02      	add	r7, sp, #8
	// PG8   ------> FMC_SDCLK		PH13   ------> FMC_D21		PH14   ------> FMC_D22		PH15   ------> FMC_D23		PI0   ------> FMC_D24
	// PI1   ------> FMC_D25		PI2   ------> FMC_D26		PI3   ------> FMC_D27		PD0   ------> FMC_D2		PD1   ------> FMC_D3
	// PG15   ------> FMC_SDNCAS	PE0   ------> FMC_NBL0		PE1   ------> FMC_NBL1		PI4   ------> FMC_NBL2		PI5   ------> FMC_NBL3
	// PI6   ------> FMC_D28		PI7   ------> FMC_D29

	Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8005402:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8005406:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005408:	230c      	movs	r3, #12
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	2303      	movs	r3, #3
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	2300      	movs	r3, #0
 8005412:	2202      	movs	r2, #2
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	48b6      	ldr	r0, [pc, #728]	; (80056f0 <BSP_STM32_Init_GPIO+0x2f4>)
 8005418:	f001 ff4c 	bl	80072b4 <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800541c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005420:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005422:	230c      	movs	r3, #12
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	2303      	movs	r3, #3
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	2300      	movs	r3, #0
 800542c:	2202      	movs	r2, #2
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	48b0      	ldr	r0, [pc, #704]	; (80056f4 <BSP_STM32_Init_GPIO+0x2f8>)
 8005432:	f001 ff3f 	bl	80072b4 <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8005436:	230c      	movs	r3, #12
 8005438:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 800543a:	230c      	movs	r3, #12
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	2303      	movs	r3, #3
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	2202      	movs	r2, #2
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	48ab      	ldr	r0, [pc, #684]	; (80056f8 <BSP_STM32_Init_GPIO+0x2fc>)
 800544a:	f001 ff33 	bl	80072b4 <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_7;
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005452:	230c      	movs	r3, #12
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	2303      	movs	r3, #3
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2300      	movs	r3, #0
 800545c:	2202      	movs	r2, #2
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	48a6      	ldr	r0, [pc, #664]	; (80056fc <BSP_STM32_Init_GPIO+0x300>)
 8005462:	f001 ff27 	bl	80072b4 <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8005466:	f248 1337 	movw	r3, #33079	; 0x8137
 800546a:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 800546c:	230c      	movs	r3, #12
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2303      	movs	r3, #3
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	2202      	movs	r2, #2
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	48a1      	ldr	r0, [pc, #644]	; (8005700 <BSP_STM32_Init_GPIO+0x304>)
 800547c:	f001 ff1a 	bl	80072b4 <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
 8005480:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005484:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005486:	230c      	movs	r3, #12
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	2303      	movs	r3, #3
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	2300      	movs	r3, #0
 8005490:	2202      	movs	r2, #2
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	489b      	ldr	r0, [pc, #620]	; (8005704 <BSP_STM32_Init_GPIO+0x308>)
 8005496:	f001 ff0d 	bl	80072b4 <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800549a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800549e:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 80054a0:	230c      	movs	r3, #12
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	2303      	movs	r3, #3
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	2300      	movs	r3, #0
 80054aa:	2202      	movs	r2, #2
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4896      	ldr	r0, [pc, #600]	; (8005708 <BSP_STM32_Init_GPIO+0x30c>)
 80054b0:	f001 ff00 	bl	80072b4 <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
 80054b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80054b8:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 80054ba:	230c      	movs	r3, #12
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	2303      	movs	r3, #3
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	2202      	movs	r2, #2
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	4890      	ldr	r0, [pc, #576]	; (800570c <BSP_STM32_Init_GPIO+0x310>)
 80054ca:	f001 fef3 	bl	80072b4 <BSP_STM32_GPIO_Init>
	// PA4     ------> LTDC_VSYNC   PA5     ------> LTDC_R4    PA6     ------> LTDC_G2		PB0     ------> LTDC_R3    PB1     ------> LTDC_R6
    // PI15     ------> LTDC_R0		PB11     ------> LTDC_G5   PG6     ------> LTDC_R7		PG7     ------> LTDC_CLK   PC6     ------> LTDC_HSYNC
    // PC9     ------> LTDC_G3		PA8     ------> LTDC_B3    PA10     ------> LTDC_B4		PD3     ------> LTDC_G7    PG10     ------> LTDC_B2
    // PG12     ------> LTDC_B1     PB8     ------> LTDC_B6    PB9     ------> LTDC_B7

    Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80054ce:	2370      	movs	r3, #112	; 0x70
 80054d0:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 80054d2:	230e      	movs	r3, #14
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	2300      	movs	r3, #0
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	2300      	movs	r3, #0
 80054dc:	2202      	movs	r2, #2
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4888      	ldr	r0, [pc, #544]	; (8005704 <BSP_STM32_Init_GPIO+0x308>)
 80054e2:	f001 fee7 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_11;
 80054e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054ea:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 80054ec:	2309      	movs	r3, #9
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	2202      	movs	r2, #2
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	487d      	ldr	r0, [pc, #500]	; (80056f0 <BSP_STM32_Init_GPIO+0x2f4>)
 80054fc:	f001 feda 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_10;
 8005500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005504:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005506:	230e      	movs	r3, #14
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	2202      	movs	r2, #2
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4877      	ldr	r0, [pc, #476]	; (80056f4 <BSP_STM32_Init_GPIO+0x2f8>)
 8005516:	f001 fecd 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_0|GPIO_PIN_6;
 800551a:	2341      	movs	r3, #65	; 0x41
 800551c:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 800551e:	230e      	movs	r3, #14
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2300      	movs	r3, #0
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	2202      	movs	r2, #2
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4872      	ldr	r0, [pc, #456]	; (80056f8 <BSP_STM32_Init_GPIO+0x2fc>)
 800552e:	f001 fec1 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005532:	237e      	movs	r3, #126	; 0x7e
 8005534:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005536:	230e      	movs	r3, #14
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	2300      	movs	r3, #0
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	2300      	movs	r3, #0
 8005540:	2202      	movs	r2, #2
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	486d      	ldr	r0, [pc, #436]	; (80056fc <BSP_STM32_Init_GPIO+0x300>)
 8005546:	f001 feb5 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_4;
 800554a:	2310      	movs	r3, #16
 800554c:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 800554e:	230e      	movs	r3, #14
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	2300      	movs	r3, #0
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	2300      	movs	r3, #0
 8005558:	2202      	movs	r2, #2
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4866      	ldr	r0, [pc, #408]	; (80056f8 <BSP_STM32_Init_GPIO+0x2fc>)
 800555e:	f001 fea9 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005562:	2303      	movs	r3, #3
 8005564:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8005566:	2309      	movs	r3, #9
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	2300      	movs	r3, #0
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	2300      	movs	r3, #0
 8005570:	2202      	movs	r2, #2
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4866      	ldr	r0, [pc, #408]	; (8005710 <BSP_STM32_Init_GPIO+0x314>)
 8005576:	f001 fe9d 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_15;
 800557a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005580:	230e      	movs	r3, #14
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	2300      	movs	r3, #0
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	2202      	movs	r2, #2
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4858      	ldr	r0, [pc, #352]	; (80056f0 <BSP_STM32_Init_GPIO+0x2f4>)
 8005590:	f001 fe90 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005594:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8005598:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 800559a:	230e      	movs	r3, #14
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	2300      	movs	r3, #0
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	2300      	movs	r3, #0
 80055a4:	2202      	movs	r2, #2
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4859      	ldr	r0, [pc, #356]	; (8005710 <BSP_STM32_Init_GPIO+0x314>)
 80055aa:	f001 fe83 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80055ae:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 80055b2:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 80055b4:	230e      	movs	r3, #14
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	2300      	movs	r3, #0
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	2300      	movs	r3, #0
 80055be:	2202      	movs	r2, #2
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	484f      	ldr	r0, [pc, #316]	; (8005700 <BSP_STM32_Init_GPIO+0x304>)
 80055c4:	f001 fe76 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_9;
 80055c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055cc:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF10_LTDC);
 80055ce:	230a      	movs	r3, #10
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	2300      	movs	r3, #0
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	2300      	movs	r3, #0
 80055d8:	2202      	movs	r2, #2
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4846      	ldr	r0, [pc, #280]	; (80056f8 <BSP_STM32_Init_GPIO+0x2fc>)
 80055de:	f001 fe69 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_8;
 80055e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055e6:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF13_LTDC);
 80055e8:	230d      	movs	r3, #13
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	2300      	movs	r3, #0
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	2300      	movs	r3, #0
 80055f2:	2202      	movs	r2, #2
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4841      	ldr	r0, [pc, #260]	; (80056fc <BSP_STM32_Init_GPIO+0x300>)
 80055f8:	f001 fe5c 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_10;
 80055fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005600:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF12_LTDC);
 8005602:	230c      	movs	r3, #12
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	2300      	movs	r3, #0
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	2300      	movs	r3, #0
 800560c:	2202      	movs	r2, #2
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	483a      	ldr	r0, [pc, #232]	; (80056fc <BSP_STM32_Init_GPIO+0x300>)
 8005612:	f001 fe4f 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_3;
 8005616:	2308      	movs	r3, #8
 8005618:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 800561a:	230e      	movs	r3, #14
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	2300      	movs	r3, #0
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	2300      	movs	r3, #0
 8005624:	2202      	movs	r2, #2
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4838      	ldr	r0, [pc, #224]	; (800570c <BSP_STM32_Init_GPIO+0x310>)
 800562a:	f001 fe43 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - ADC1
    // PC4     ------> ADC1_INP4	PC5     ------> ADC1_INP8

    Pin = GPIO_PIN_4|GPIO_PIN_5;
 800562e:	2330      	movs	r3, #48	; 0x30
 8005630:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_ANALOG, GPIO_NOPULL, 0, 0);
 8005632:	2300      	movs	r3, #0
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	2300      	movs	r3, #0
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	2300      	movs	r3, #0
 800563c:	2203      	movs	r2, #3
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	482d      	ldr	r0, [pc, #180]	; (80056f8 <BSP_STM32_Init_GPIO+0x2fc>)
 8005642:	f001 fe37 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - I2C1
    // PB6     ------> I2C1_SCL    	PB7     ------> I2C1_SDA

    Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005646:	23c0      	movs	r3, #192	; 0xc0
 8005648:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_I2C1);
 800564a:	2304      	movs	r3, #4
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	2300      	movs	r3, #0
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	2300      	movs	r3, #0
 8005654:	2212      	movs	r2, #18
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	482d      	ldr	r0, [pc, #180]	; (8005710 <BSP_STM32_Init_GPIO+0x314>)
 800565a:	f001 fe2b 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - I2C4
    // PD12     ------> I2C4_SCL    PD13     ------> I2C4_SDA

    Pin = GPIO_PIN_12|GPIO_PIN_13;
 800565e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005662:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_I2C4);
 8005664:	2304      	movs	r3, #4
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	2300      	movs	r3, #0
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2300      	movs	r3, #0
 800566e:	2212      	movs	r2, #18
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4826      	ldr	r0, [pc, #152]	; (800570c <BSP_STM32_Init_GPIO+0x310>)
 8005674:	f001 fe1e 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - QSPI
    // PF6     ------> QUADSPI_BK1_IO3		PF7     ------> QUADSPI_BK1_IO2		PF8     ------> QUADSPI_BK1_IO0
    // PF9     ------> QUADSPI_BK1_IO1		PB2     ------> QUADSPI_CLK			PB10     ------> QUADSPI_BK1_NCS

    Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005678:	23c0      	movs	r3, #192	; 0xc0
 800567a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 800567c:	2309      	movs	r3, #9
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	2302      	movs	r3, #2
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	2202      	movs	r2, #2
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	481a      	ldr	r0, [pc, #104]	; (80056f4 <BSP_STM32_Init_GPIO+0x2f8>)
 800568c:	f001 fe12 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005690:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005694:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF10_QUADSPI);
 8005696:	230a      	movs	r3, #10
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	2302      	movs	r3, #2
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	2300      	movs	r3, #0
 80056a0:	2202      	movs	r2, #2
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4813      	ldr	r0, [pc, #76]	; (80056f4 <BSP_STM32_Init_GPIO+0x2f8>)
 80056a6:	f001 fe05 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_2|GPIO_PIN_10;
 80056aa:	f240 4304 	movw	r3, #1028	; 0x404
 80056ae:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 80056b0:	2309      	movs	r3, #9
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	2302      	movs	r3, #2
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2300      	movs	r3, #0
 80056ba:	2202      	movs	r2, #2
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4814      	ldr	r0, [pc, #80]	; (8005710 <BSP_STM32_Init_GPIO+0x314>)
 80056c0:	f001 fdf8 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - SDMMC2
    // PC1     ------> SDMMC2_CK		PA0     ------> SDMMC2_CMD		PB14     ------> SDMMC2_D0
    // PB15     ------> SDMMC2_D1		PG11     ------> SDMMC2_D2		PB4 (NJTRST)     ------> SDMMC2_D3

    Pin = GPIO_PIN_1;
 80056c4:	2302      	movs	r3, #2
 80056c6:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 80056c8:	2309      	movs	r3, #9
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	2303      	movs	r3, #3
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	2202      	movs	r2, #2
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4808      	ldr	r0, [pc, #32]	; (80056f8 <BSP_STM32_Init_GPIO+0x2fc>)
 80056d8:	f001 fdec 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_0;
 80056dc:	2301      	movs	r3, #1
 80056de:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 80056e0:	2309      	movs	r3, #9
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	2303      	movs	r3, #3
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2300      	movs	r3, #0
 80056ea:	2202      	movs	r2, #2
 80056ec:	e012      	b.n	8005714 <BSP_STM32_Init_GPIO+0x318>
 80056ee:	bf00      	nop
 80056f0:	58022000 	.word	0x58022000
 80056f4:	58021400 	.word	0x58021400
 80056f8:	58020800 	.word	0x58020800
 80056fc:	58020000 	.word	0x58020000
 8005700:	58021800 	.word	0x58021800
 8005704:	58021000 	.word	0x58021000
 8005708:	58021c00 	.word	0x58021c00
 800570c:	58020c00 	.word	0x58020c00
 8005710:	58020400 	.word	0x58020400
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	488b      	ldr	r0, [pc, #556]	; (8005944 <BSP_STM32_Init_GPIO+0x548>)
 8005718:	f001 fdcc 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 800571c:	f24c 0310 	movw	r3, #49168	; 0xc010
 8005720:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 8005722:	2309      	movs	r3, #9
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	2303      	movs	r3, #3
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	2202      	movs	r2, #2
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4885      	ldr	r0, [pc, #532]	; (8005948 <BSP_STM32_Init_GPIO+0x54c>)
 8005732:	f001 fdbf 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_11;
 8005736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800573a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF10_SDIO2);
 800573c:	230a      	movs	r3, #10
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	2303      	movs	r3, #3
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	2202      	movs	r2, #2
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4880      	ldr	r0, [pc, #512]	; (800594c <BSP_STM32_Init_GPIO+0x550>)
 800574c:	f001 fdb2 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - TIM3
    // PC8 ------> TIM3 PWM Output

    Pin = GPIO_PIN_8;
 8005750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005754:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF2_TIM3);
 8005756:	2302      	movs	r3, #2
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	2300      	movs	r3, #0
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	2202      	movs	r2, #2
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	487a      	ldr	r0, [pc, #488]	; (8005950 <BSP_STM32_Init_GPIO+0x554>)
 8005766:	f001 fda5 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - UART5
    // PB12     ------> UART5_RX		PB13     ------> UART5_TX

    Pin = GPIO_PIN_12|GPIO_PIN_13;
 800576a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800576e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_UART5);
 8005770:	230e      	movs	r3, #14
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	2300      	movs	r3, #0
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	2300      	movs	r3, #0
 800577a:	2202      	movs	r2, #2
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4872      	ldr	r0, [pc, #456]	; (8005948 <BSP_STM32_Init_GPIO+0x54c>)
 8005780:	f001 fd98 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - USART2
    // PD5     ------> USART2_TX		PD6     ------> USART2_RX

    Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005784:	2360      	movs	r3, #96	; 0x60
 8005786:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF7_USART2);
 8005788:	2307      	movs	r3, #7
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	2300      	movs	r3, #0
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	2300      	movs	r3, #0
 8005792:	2202      	movs	r2, #2
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	486f      	ldr	r0, [pc, #444]	; (8005954 <BSP_STM32_Init_GPIO+0x558>)
 8005798:	f001 fd8c 	bl	80072b4 <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - USB_OTG_FS
    // PA11     ------> USB_OTG_FS_DM	PA12     ------> USB_OTG_FS_DP

    Pin = GPIO_PIN_11|GPIO_PIN_12;
 800579c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80057a0:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF10_OTG1_FS);
 80057a2:	230a      	movs	r3, #10
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	2302      	movs	r3, #2
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	2202      	movs	r2, #2
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	4864      	ldr	r0, [pc, #400]	; (8005944 <BSP_STM32_Init_GPIO+0x548>)
 80057b2:	f001 fd7f 	bl	80072b4 <BSP_STM32_GPIO_Init>
    // PH6	------> EXTI   - BLE INT
    // PH7	------> OUTPUT - BLE GPIO			- DEFAULT: LOW
    // PI8	------> INPUT  - BUTTON 2

//    BSP_STM32_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
    BSP_STM32_GPIO_WritePin(GPIOH, GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 80057b6:	2200      	movs	r2, #0
 80057b8:	2188      	movs	r1, #136	; 0x88
 80057ba:	4867      	ldr	r0, [pc, #412]	; (8005958 <BSP_STM32_Init_GPIO+0x55c>)
 80057bc:	f001 ff20 	bl	8007600 <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 80057c0:	2201      	movs	r2, #1
 80057c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057c6:	4861      	ldr	r0, [pc, #388]	; (800594c <BSP_STM32_Init_GPIO+0x550>)
 80057c8:	f001 ff1a 	bl	8007600 <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80057cc:	2200      	movs	r2, #0
 80057ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057d2:	485e      	ldr	r0, [pc, #376]	; (800594c <BSP_STM32_Init_GPIO+0x550>)
 80057d4:	f001 ff14 	bl	8007600 <BSP_STM32_GPIO_WritePin>

//    Pin = GPIO_PIN_2;
//    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);

    Pin = GPIO_PIN_3;
 80057d8:	2308      	movs	r3, #8
 80057da:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80057dc:	2300      	movs	r3, #0
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	2300      	movs	r3, #0
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	2300      	movs	r3, #0
 80057e6:	2200      	movs	r2, #0
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	485c      	ldr	r0, [pc, #368]	; (800595c <BSP_STM32_Init_GPIO+0x560>)
 80057ec:	f001 fd62 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_8;
 80057f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057f4:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80057f6:	2300      	movs	r3, #0
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	2300      	movs	r3, #0
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2300      	movs	r3, #0
 8005800:	2200      	movs	r2, #0
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4856      	ldr	r0, [pc, #344]	; (8005960 <BSP_STM32_Init_GPIO+0x564>)
 8005806:	f001 fd55 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_11;
 800580a:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 800580e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8005810:	2300      	movs	r3, #0
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	2300      	movs	r3, #0
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2300      	movs	r3, #0
 800581a:	2200      	movs	r2, #0
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	484c      	ldr	r0, [pc, #304]	; (8005950 <BSP_STM32_Init_GPIO+0x554>)
 8005820:	f001 fd48 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_2;
 8005824:	2304      	movs	r3, #4
 8005826:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8005828:	2300      	movs	r3, #0
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2300      	movs	r3, #0
 8005832:	2200      	movs	r2, #0
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4848      	ldr	r0, [pc, #288]	; (8005958 <BSP_STM32_Init_GPIO+0x55c>)
 8005838:	f001 fd3c 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_3|GPIO_PIN_7;
 800583c:	2388      	movs	r3, #136	; 0x88
 800583e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);
 8005840:	2300      	movs	r3, #0
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	2300      	movs	r3, #0
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	2300      	movs	r3, #0
 800584a:	2201      	movs	r2, #1
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4842      	ldr	r0, [pc, #264]	; (8005958 <BSP_STM32_Init_GPIO+0x55c>)
 8005850:	f001 fd30 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_5;
 8005854:	2320      	movs	r3, #32
 8005856:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8005858:	2300      	movs	r3, #0
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	2300      	movs	r3, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	2300      	movs	r3, #0
 8005862:	2200      	movs	r2, #0
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	483c      	ldr	r0, [pc, #240]	; (8005958 <BSP_STM32_Init_GPIO+0x55c>)
 8005868:	f001 fd24 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_6;
 800586c:	2340      	movs	r3, #64	; 0x40
 800586e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 8005870:	2300      	movs	r3, #0
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	2300      	movs	r3, #0
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2300      	movs	r3, #0
 800587a:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	4835      	ldr	r0, [pc, #212]	; (8005958 <BSP_STM32_Init_GPIO+0x55c>)
 8005882:	f001 fd17 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_11;
 8005886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800588a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 800588c:	2300      	movs	r3, #0
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	2300      	movs	r3, #0
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2300      	movs	r3, #0
 8005896:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	482d      	ldr	r0, [pc, #180]	; (8005954 <BSP_STM32_Init_GPIO+0x558>)
 800589e:	f001 fd09 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_3;
 80058a2:	2308      	movs	r3, #8
 80058a4:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80058a6:	2300      	movs	r3, #0
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	2300      	movs	r3, #0
 80058b0:	2200      	movs	r2, #0
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4825      	ldr	r0, [pc, #148]	; (800594c <BSP_STM32_Init_GPIO+0x550>)
 80058b6:	f001 fcfd 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_9;
 80058ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058be:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80058c0:	2300      	movs	r3, #0
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	2300      	movs	r3, #0
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2300      	movs	r3, #0
 80058ca:	2200      	movs	r2, #0
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	481d      	ldr	r0, [pc, #116]	; (8005944 <BSP_STM32_Init_GPIO+0x548>)
 80058d0:	f001 fcf0 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_7;
 80058d4:	2394      	movs	r3, #148	; 0x94
 80058d6:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80058d8:	2300      	movs	r3, #0
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	2300      	movs	r3, #0
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	2200      	movs	r2, #0
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	481b      	ldr	r0, [pc, #108]	; (8005954 <BSP_STM32_Init_GPIO+0x558>)
 80058e8:	f001 fce4 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_9|GPIO_PIN_14;
 80058ec:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80058f0:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);
 80058f2:	2300      	movs	r3, #0
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	2300      	movs	r3, #0
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	2300      	movs	r3, #0
 80058fc:	2201      	movs	r2, #1
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4812      	ldr	r0, [pc, #72]	; (800594c <BSP_STM32_Init_GPIO+0x550>)
 8005902:	f001 fcd7 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_13;
 8005906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800590a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 800590c:	2300      	movs	r3, #0
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	2300      	movs	r3, #0
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2300      	movs	r3, #0
 8005916:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	480b      	ldr	r0, [pc, #44]	; (800594c <BSP_STM32_Init_GPIO+0x550>)
 800591e:	f001 fcc9 	bl	80072b4 <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_5;
 8005922:	2320      	movs	r3, #32
 8005924:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8005926:	2300      	movs	r3, #0
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	2300      	movs	r3, #0
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2300      	movs	r3, #0
 8005930:	2200      	movs	r2, #0
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4804      	ldr	r0, [pc, #16]	; (8005948 <BSP_STM32_Init_GPIO+0x54c>)
 8005936:	f001 fcbd 	bl	80072b4 <BSP_STM32_GPIO_Init>

	return BSP_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	58020000 	.word	0x58020000
 8005948:	58020400 	.word	0x58020400
 800594c:	58021800 	.word	0x58021800
 8005950:	58020800 	.word	0x58020800
 8005954:	58020c00 	.word	0x58020c00
 8005958:	58021c00 	.word	0x58021c00
 800595c:	58021000 	.word	0x58021000
 8005960:	58022000 	.word	0x58022000

08005964 <BSP_TickInit>:


uint8_t BSP_TickInit(uint32_t CoreClock, uint32_t TickFreq, uint32_t TickPriority) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]

	if (TickFreq == 0) return BSP_ERROR;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <BSP_TickInit+0x16>
 8005976:	2301      	movs	r3, #1
 8005978:	e01e      	b.n	80059b8 <BSP_TickInit+0x54>

	// Set SysTick frequency
	if (SysTick_Config(CoreClock / (1000UL / TickFreq))) return BSP_ERROR;
 800597a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	fbb2 f3f3 	udiv	r3, r2, r3
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff f868 	bl	8004a60 <SysTick_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <BSP_TickInit+0x36>
 8005996:	2301      	movs	r3, #1
 8005998:	e00e      	b.n	80059b8 <BSP_TickInit+0x54>
	tickfrequency = TickFreq;
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <BSP_TickInit+0x5c>)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	6013      	str	r3, [r2, #0]

	// Set SysTick priority
	if (TickPriority > (1UL << __NVIC_PRIO_BITS)) return BSP_ERROR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d901      	bls.n	80059aa <BSP_TickInit+0x46>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e006      	b.n	80059b8 <BSP_TickInit+0x54>
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059aa:	2200      	movs	r2, #0
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	f04f 30ff 	mov.w	r0, #4294967295
 80059b2:	f000 feff 	bl	80067b4 <BSP_STM32_NVIC_SetPriority>

	return BSP_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	24000000 	.word	0x24000000

080059c4 <BSP_IncTick>:


void BSP_IncTick(void) {
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0

	tickvalue += tickfrequency;
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <BSP_IncTick+0x1c>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <BSP_IncTick+0x20>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4413      	add	r3, r2
 80059d2:	4a04      	ldr	r2, [pc, #16]	; (80059e4 <BSP_IncTick+0x20>)
 80059d4:	6013      	str	r3, [r2, #0]

}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	24000000 	.word	0x24000000
 80059e4:	2400036c 	.word	0x2400036c

080059e8 <BSP_GetTick>:

uint32_t BSP_GetTick(void) {
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0

	return tickvalue;
 80059ec:	4b03      	ldr	r3, [pc, #12]	; (80059fc <BSP_GetTick+0x14>)
 80059ee:	681b      	ldr	r3, [r3, #0]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	2400036c 	.word	0x2400036c

08005a00 <BSP_Delay>:

void BSP_Delay(uint32_t delay) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]

	uint32_t wait = delay + tickfrequency;
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <BSP_Delay+0x34>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
	uint32_t tickstart = BSP_GetTick();
 8005a12:	f7ff ffe9 	bl	80059e8 <BSP_GetTick>
 8005a16:	60b8      	str	r0, [r7, #8]

	while ((BSP_GetTick() - tickstart) < wait) {}
 8005a18:	bf00      	nop
 8005a1a:	f7ff ffe5 	bl	80059e8 <BSP_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d8f7      	bhi.n	8005a1a <BSP_Delay+0x1a>

}
 8005a2a:	bf00      	nop
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	24000000 	.word	0x24000000

08005a38 <EXTI15_10_IRQHandler>:
* INT HANDLERS FOR GPIO GROUP EXTIS shared between subsystems
 *******************************************************************/

// INT Handlers for Touch Panel, MPU6050

void EXTI15_10_IRQHandler(void) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & GPIO_PIN_13) {
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <EXTI15_10_IRQHandler+0x2c>
		EXTI->PR1 |= ~(GPIO_PIN_13);
 8005a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a58:	f463 5300 	orn	r3, r3, #8192	; 0x2000
 8005a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		// Call to Touch Panel INT handler
		BSP_LCD_TP_INTHandler();
 8005a60:	f7fe fefa 	bl	8004858 <BSP_LCD_TP_INTHandler>
	}

	if (EXTI->PR1 & GPIO_PIN_11) {
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <EXTI15_10_IRQHandler+0x54>
		EXTI->PR1 |= ~(GPIO_PIN_11);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a80:	f463 6300 	orn	r3, r3, #2048	; 0x800
 8005a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		// Call to IMU INT handler
		BSP_IMU_INTHandler();
 8005a88:	f7fb ff76 	bl	8001978 <BSP_IMU_INTHandler>
	}
}
 8005a8c:	bf00      	nop
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <EXTI9_5_IRQHandler>:

// INT Handler for BLE Module

void EXTI9_5_IRQHandler(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & GPIO_PIN_6) {
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <EXTI9_5_IRQHandler+0x2c>
		EXTI->PR1 |= ~(GPIO_PIN_6);
 8005aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ab0:	f063 0340 	orn	r3, r3, #64	; 0x40
 8005ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		// Call to BLE module INT handler
		BSP_BLE_INTHandler();
 8005ab8:	f3af 8000 	nop.w
	}
}
 8005abc:	bf00      	nop
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <BSP_Serial_Init>:
	BSP_STM32_UART_Transmit(USART2, pData, 1);
	return ch;
}


uint8_t BSP_Serial_Init(void) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af04      	add	r7, sp, #16
	// Configure USART2 interface
	if (BSP_STM32_UART_Init(USART2, 115200, UART_WORDLENGTH_8B, UART_STOPBITS_1, UART_PARITY_NONE)) return BSP_ERROR;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2300      	movs	r3, #0
 8005acc:	2200      	movs	r2, #0
 8005ace:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8005ad2:	4819      	ldr	r0, [pc, #100]	; (8005b38 <BSP_Serial_Init+0x78>)
 8005ad4:	f005 ff10 	bl	800b8f8 <BSP_STM32_UART_Init>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <BSP_Serial_Init+0x22>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e026      	b.n	8005b30 <BSP_Serial_Init+0x70>

	// Linking DMA Stream to USART2 RX context
	if (BSP_STM32_DMA_Init(DMA1_Stream3, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_BYTE, DMA_MDATAALIGN_BYTE, DMA_CIRCULAR, DMA_PRIORITY_LOW)) return BSP_ERROR;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aea:	9302      	str	r3, [sp, #8]
 8005aec:	2300      	movs	r3, #0
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	2300      	movs	r3, #0
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005af8:	2200      	movs	r2, #0
 8005afa:	2100      	movs	r1, #0
 8005afc:	480f      	ldr	r0, [pc, #60]	; (8005b3c <BSP_Serial_Init+0x7c>)
 8005afe:	f000 feff 	bl	8006900 <BSP_STM32_DMA_Init>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <BSP_Serial_Init+0x4c>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e011      	b.n	8005b30 <BSP_Serial_Init+0x70>
	if (BSP_STM32_DMA_CtxLink(DMA1_Stream3, &BSP_hserial_ctx, DMA_REQUEST_USART2_RX)) return BSP_ERROR;
 8005b0c:	222b      	movs	r2, #43	; 0x2b
 8005b0e:	490c      	ldr	r1, [pc, #48]	; (8005b40 <BSP_Serial_Init+0x80>)
 8005b10:	480a      	ldr	r0, [pc, #40]	; (8005b3c <BSP_Serial_Init+0x7c>)
 8005b12:	f000 ff41 	bl	8006998 <BSP_STM32_DMA_CtxLink>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <BSP_Serial_Init+0x60>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e007      	b.n	8005b30 <BSP_Serial_Init+0x70>

	// Start listening on USART2 port
	BSP_STM32_UART_StartListen(USART2, &BSP_hserial_ctx, BSP_hserial.data_rx, SERIAL_BUF_SIZE);
 8005b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b24:	4a07      	ldr	r2, [pc, #28]	; (8005b44 <BSP_Serial_Init+0x84>)
 8005b26:	4906      	ldr	r1, [pc, #24]	; (8005b40 <BSP_Serial_Init+0x80>)
 8005b28:	4803      	ldr	r0, [pc, #12]	; (8005b38 <BSP_Serial_Init+0x78>)
 8005b2a:	f005 ff5b 	bl	800b9e4 <BSP_STM32_UART_StartListen>

	return BSP_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40004400 	.word	0x40004400
 8005b3c:	40020058 	.word	0x40020058
 8005b40:	24000370 	.word	0x24000370
 8005b44:	3800018c 	.word	0x3800018c

08005b48 <USART2_IRQHandler>:
	if (BSP_STM32_UART_Transmit_IT(USART2, &BSP_hserial_ctx, pData, Size)) return BSP_ERROR;
	return BSP_OK;
}


void USART2_IRQHandler(void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
	BSP_STM32_UART_IRQHandler(USART2, &BSP_hserial_ctx);
 8005b4c:	4902      	ldr	r1, [pc, #8]	; (8005b58 <USART2_IRQHandler+0x10>)
 8005b4e:	4803      	ldr	r0, [pc, #12]	; (8005b5c <USART2_IRQHandler+0x14>)
 8005b50:	f005 ff80 	bl	800ba54 <BSP_STM32_UART_IRQHandler>
}
 8005b54:	bf00      	nop
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	24000370 	.word	0x24000370
 8005b5c:	40004400 	.word	0x40004400

08005b60 <OTG_FS_IRQHandler>:

//--------------------------------------------------------------------+
// USB global IRQ handler
//--------------------------------------------------------------------+

void OTG_FS_IRQHandler(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8005b64:	2000      	movs	r0, #0
 8005b66:	f00a f945 	bl	800fdf4 <dcd_int_handler>
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <tud_msc_read10_cb>:
// USB MSC
//--------------------------------------------------------------------+


// Invoked when received SCSI READ10 command
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize) {
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b086      	sub	sp, #24
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	73fb      	strb	r3, [r7, #15]

	(void) lun;
	(void) offset; // Offset always 0 when MSC buff is larger than block size

	uint32_t bn = bufsize >> 9; // Divide by 512
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	0a5b      	lsrs	r3, r3, #9
 8005b82:	617b      	str	r3, [r7, #20]

	//if (HAL_SD_ReadBlocks(&hsd2, buffer, lba, bn, HAL_MAX_DELAY)) return -1;
	if (BSP_SDCARD_ReadBlocks(buffer, lba, bn)) return -1;
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	6838      	ldr	r0, [r7, #0]
 8005b8a:	f7fe febf 	bl	800490c <BSP_SDCARD_ReadBlocks>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <tud_msc_read10_cb+0x2c>
 8005b94:	f04f 33ff 	mov.w	r3, #4294967295
 8005b98:	e000      	b.n	8005b9c <tud_msc_read10_cb+0x2e>

	return (int32_t) bufsize;
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <tud_msc_write10_cb>:

// Invoked when received SCSI WRITE10 command
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	73fb      	strb	r3, [r7, #15]

	(void) lun;
	(void) offset; // Offset always 0 when MSC buff is larger than block size

	uint32_t bn = bufsize >> 9; // Divide by 512
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	0a5b      	lsrs	r3, r3, #9
 8005bb8:	617b      	str	r3, [r7, #20]

	//if (HAL_SD_WriteBlocks(&hsd2, buffer, lba, bn, HAL_MAX_DELAY)) return -1;
	if (BSP_SDCARD_WriteBlocks(buffer, lba, bn)) return -1;
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	6838      	ldr	r0, [r7, #0]
 8005bc0:	f7fe fec8 	bl	8004954 <BSP_SDCARD_WriteBlocks>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <tud_msc_write10_cb+0x2c>
 8005bca:	f04f 33ff 	mov.w	r3, #4294967295
 8005bce:	e000      	b.n	8005bd2 <tud_msc_write10_cb+0x2e>

	return (int32_t) bufsize;
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <tud_msc_inquiry_cb>:

// Invoked when received SCSI_CMD_INQUIRY
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4]) {
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b08d      	sub	sp, #52	; 0x34
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]

	(void) lun;

	const char vid[] = USB_MANUFACTURER;
 8005bec:	4a14      	ldr	r2, [pc, #80]	; (8005c40 <tud_msc_inquiry_cb+0x64>)
 8005bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bf4:	c303      	stmia	r3!, {r0, r1}
 8005bf6:	701a      	strb	r2, [r3, #0]
	const char pid[] = USB_PRODUCT;
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <tud_msc_inquiry_cb+0x68>)
 8005bfa:	f107 0414 	add.w	r4, r7, #20
 8005bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c00:	c407      	stmia	r4!, {r0, r1, r2}
 8005c02:	8023      	strh	r3, [r4, #0]
	const char rev[] = USB_REVISION;
 8005c04:	4a10      	ldr	r2, [pc, #64]	; (8005c48 <tud_msc_inquiry_cb+0x6c>)
 8005c06:	f107 0310 	add.w	r3, r7, #16
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	8019      	strh	r1, [r3, #0]
 8005c10:	3302      	adds	r3, #2
 8005c12:	0c12      	lsrs	r2, r2, #16
 8005c14:	701a      	strb	r2, [r3, #0]

	memcpy(vendor_id  , vid, strlen(vid));
 8005c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	68b8      	ldr	r0, [r7, #8]
 8005c20:	f00a fbbc 	bl	801039c <memcpy>
	memcpy(product_id , pid, strlen(pid));
 8005c24:	f107 0314 	add.w	r3, r7, #20
 8005c28:	220d      	movs	r2, #13
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f00a fbb5 	bl	801039c <memcpy>
 8005c32:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(product_rev, rev, strlen(rev));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	801a      	strh	r2, [r3, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	3734      	adds	r7, #52	; 0x34
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd90      	pop	{r4, r7, pc}
 8005c40:	08010750 	.word	0x08010750
 8005c44:	0801075c 	.word	0x0801075c
 8005c48:	08010788 	.word	0x08010788

08005c4c <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun) {
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	71fb      	strb	r3, [r7, #7]
	(void) lun;
	return true;
 8005c56:	2301      	movs	r3, #1
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	73fb      	strb	r3, [r7, #15]

	(void) lun;

	*block_count  = BSP_SDCARD_GetBlockNo();
 8005c72:	f7fe fe93 	bl	800499c <BSP_SDCARD_GetBlockNo>
 8005c76:	4602      	mov	r2, r0
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	601a      	str	r2, [r3, #0]
	*block_size = BSP_SDCARD_GetBlockSize();
 8005c7c:	f7fe fe9e 	bl	80049bc <BSP_SDCARD_GetBlockSize>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	801a      	strh	r2, [r3, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <tud_msc_scsi_cb>:

// Invoked when received an SCSI command not in built-in list below.
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, TEST_UNIT_READY, START_STOP_UNIT, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb(uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	81bb      	strh	r3, [r7, #12]

	void const* response = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
	int32_t resplen = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61fb      	str	r3, [r7, #28]

	// most scsi handled is input
	bool in_xfer = true;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]

	switch (scsi_cmd[0]) {

    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8005cb0:	7bf8      	ldrb	r0, [r7, #15]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	2105      	movs	r1, #5
 8005cb8:	f006 fd0c 	bl	800c6d4 <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc0:	61fb      	str	r3, [r7, #28]
      break;
 8005cc2:	bf00      	nop

	}

	// return resplen must not larger than bufsize
	if (resplen > bufsize) resplen = bufsize;
 8005cc4:	89bb      	ldrh	r3, [r7, #12]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	dd01      	ble.n	8005cd0 <tud_msc_scsi_cb+0x40>
 8005ccc:	89bb      	ldrh	r3, [r7, #12]
 8005cce:	61fb      	str	r3, [r7, #28]

	if (response && (resplen > 0)) {
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00b      	beq.n	8005cee <tud_msc_scsi_cb+0x5e>
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	dd08      	ble.n	8005cee <tud_msc_scsi_cb+0x5e>
		if(in_xfer) {
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <tud_msc_scsi_cb+0x5e>
			memcpy(buffer, response, (size_t) resplen);
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	69b9      	ldr	r1, [r7, #24]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f00a fb57 	bl	801039c <memcpy>
		} else {
			// SCSI output
		}
	}

	return (int32_t) resplen;
 8005cee:	69fb      	ldr	r3, [r7, #28]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <tud_msc_start_stop_cb>:

// Invoked when received Start Stop Unit command
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject) {
 8005cf8:	b490      	push	{r4, r7}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	4611      	mov	r1, r2
 8005d04:	461a      	mov	r2, r3
 8005d06:	4623      	mov	r3, r4
 8005d08:	71fb      	strb	r3, [r7, #7]
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	71bb      	strb	r3, [r7, #6]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	717b      	strb	r3, [r7, #5]
 8005d12:	4613      	mov	r3, r2
 8005d14:	713b      	strb	r3, [r7, #4]
		} else {
			// unload disk storage
		}
	}

	return true;
 8005d16:	2301      	movs	r3, #1
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc90      	pop	{r4, r7}
 8005d20:	4770      	bx	lr

08005d22 <tud_msc_request_sense_cb>:

// Invoked when received REQUEST_SENSE
int32_t tud_msc_request_sense_cb(uint8_t lun, void* buffer, uint16_t bufsize) {
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	4603      	mov	r3, r0
 8005d2a:	6039      	str	r1, [r7, #0]
 8005d2c:	71fb      	strb	r3, [r7, #7]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	80bb      	strh	r3, [r7, #4]
	(void) lun;
	(void) buffer;
	(void) bufsize;
	return 0;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <tud_msc_is_writable_cb>:

// Invoked to check if device is writable as part of SCSI WRITE10
bool tud_msc_is_writable_cb(uint8_t lun) {
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	71fb      	strb	r3, [r7, #7]
	(void) lun;
	return true;
 8005d4a:	2301      	movs	r3, #1
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <KALMAN_Init>:
 *  Created on: 7 lut 2023
 *      Author: marek
 */
#include "kalman.h"

void KALMAN_Init(KALMAN_HandleTypeDef *kalman) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
    // We will set the variables like so, these can also be tuned by the user
    kalman->Q_angle   = 0.001;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <KALMAN_Init+0x5c>)
 8005d64:	601a      	str	r2, [r3, #0]
    kalman->Q_bias    = 0.003;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <KALMAN_Init+0x60>)
 8005d6a:	605a      	str	r2, [r3, #4]
    kalman->R_measure = 0.03;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <KALMAN_Init+0x64>)
 8005d70:	609a      	str	r2, [r3, #8]

    kalman->angle = 0.0; // Reset the angle
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	60da      	str	r2, [r3, #12]
    kalman->bias  = 0.0; // Reset bias
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	611a      	str	r2, [r3, #16]

    // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so
    // see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
    kalman->P[0][0] = 0.0;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	619a      	str	r2, [r3, #24]
    kalman->P[0][1] = 0.0;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	61da      	str	r2, [r3, #28]
    kalman->P[1][0] = 0.0;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	621a      	str	r2, [r3, #32]
    kalman->P[1][1] = 0.0;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24

    kalman->tick = BSP_GetTick();
 8005da2:	f7ff fe21 	bl	80059e8 <BSP_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005dac:	bf00      	nop
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	3a83126f 	.word	0x3a83126f
 8005db8:	3b449ba6 	.word	0x3b449ba6
 8005dbc:	3cf5c28f 	.word	0x3cf5c28f

08005dc0 <KALMAN_Update>:

float KALMAN_Update(KALMAN_HandleTypeDef *kalman, float newAngle, float newRate) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dcc:	edc7 0a01 	vstr	s1, [r7, #4]
	// newAngle - last calculated angle from accelerometer [deg]
	// newRate - last rate of turn from gyro [deg/sec]


    // Step 1
	uint32_t tick = BSP_GetTick();
 8005dd0:	f7ff fe0a 	bl	80059e8 <BSP_GetTick>
 8005dd4:	6178      	str	r0, [r7, #20]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005de6:	eddf 6a82 	vldr	s13, [pc, #520]	; 8005ff0 <KALMAN_Update+0x230>
 8005dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dee:	edc7 7a04 	vstr	s15, [r7, #16]
	kalman->tick = tick;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38

    kalman->rate = newRate - kalman->bias;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8005e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->angle += dt * kalman->rate;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	edd3 6a05 	vldr	s13, [r3, #20]
 8005e18:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	edc3 7a03 	vstr	s15, [r3, #12]

    // Step 2
    // Update estimation error covariance - Project the error covariance ahead
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	ed93 7a06 	vldr	s14, [r3, #24]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005e36:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8005e4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	edd3 7a00 	vldr	s15, [r3]
 8005e58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	edc3 7a06 	vstr	s15, [r3, #24]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	ed93 7a07 	vldr	s14, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	edc3 7a07 	vstr	s15, [r3, #28]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	ed93 7a08 	vldr	s14, [r3, #32]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005e98:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	edc3 7a08 	vstr	s15, [r3, #32]
    kalman->P[1][1] += kalman->Q_bias * dt;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	edd3 6a01 	vldr	s13, [r3, #4]
 8005eb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Step 4
    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    kalman->S = kalman->P[0][0] + kalman->R_measure;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	ed93 7a06 	vldr	s14, [r3, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Step 5
    kalman->K[0] = kalman->P[0][0] / kalman->S;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	edd3 6a06 	vldr	s13, [r3, #24]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    kalman->K[1] = kalman->P[1][0] / kalman->S;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	edd3 6a08 	vldr	s13, [r3, #32]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Step 3
    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    kalman->y = newAngle - kalman->angle;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f10:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Step 6
    kalman->angle += kalman->K[0] * kalman->y;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	ed93 7a03 	vldr	s14, [r3, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->bias += kalman->K[1] * kalman->y;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	ed93 7a04 	vldr	s14, [r3, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	edc3 7a04 	vstr	s15, [r3, #16]

    // Step 7
    // Calculate estimation error covariance - Update the error covariance
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	ed93 7a06 	vldr	s14, [r3, #24]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	edc3 7a06 	vstr	s15, [r3, #24]
    kalman->P[0][1] -= kalman->K[0] * kalman->P[0][1];
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	ed93 7a07 	vldr	s14, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	edc3 7a07 	vstr	s15, [r3, #28]
    kalman->P[1][0] -= kalman->K[1] * kalman->P[0][0];
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	ed93 7a08 	vldr	s14, [r3, #32]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	edd3 7a06 	vldr	s15, [r3, #24]
 8005fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	edc3 7a08 	vstr	s15, [r3, #32]
    kalman->P[1][1] -= kalman->K[1] * kalman->P[0][1];
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return kalman->angle;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	ee07 3a90 	vmov	s15, r3
}
 8005fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	447a0000 	.word	0x447a0000

08005ff4 <BSP_ADC_Init>:

/*******************************************************************
* I2C Functions
 *******************************************************************/

uint8_t BSP_ADC_Init(ADC_TypeDef * hadc, uint32_t resolution, uint32_t nb_conversions) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]

	uint32_t t_start = BSP_GetTick();
 8006000:	f7ff fcf2 	bl	80059e8 <BSP_GetTick>
 8006004:	61b8      	str	r0, [r7, #24]
	uint32_t tmpCFGR;

	// Exiting from deep power-down
	if (hadc->CR & ADC_CR_DEEPPWD) hadc->CR &= ~(ADC_CR_DEEPPWD);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <BSP_ADC_Init+0x2a>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	609a      	str	r2, [r3, #8]

	// Starting internal voltage regulator
	hadc->CR |= ADC_CR_ADVREGEN;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	609a      	str	r2, [r3, #8]

	// Waiting for voltage regulator to start
	while ((hadc->ISR & ADC_ISR_LDORDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 800602a:	e008      	b.n	800603e <BSP_ADC_Init+0x4a>
 800602c:	f7ff fcdc 	bl	80059e8 <BSP_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <BSP_ADC_Init+0x4a>
 800603a:	2301      	movs	r3, #1
 800603c:	e084      	b.n	8006148 <BSP_ADC_Init+0x154>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <BSP_ADC_Init+0x38>

	// Setting ADC clock prescaler
	ADC_Common_TypeDef * ADCxy_common;
	if ((hadc == ADC1) || (hadc == ADC2)) ADCxy_common = ADC12_COMMON; else ADCxy_common = ADC3_COMMON;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a40      	ldr	r2, [pc, #256]	; (8006150 <BSP_ADC_Init+0x15c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <BSP_ADC_Init+0x66>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a3f      	ldr	r2, [pc, #252]	; (8006154 <BSP_ADC_Init+0x160>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d102      	bne.n	8006060 <BSP_ADC_Init+0x6c>
 800605a:	4b3f      	ldr	r3, [pc, #252]	; (8006158 <BSP_ADC_Init+0x164>)
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e001      	b.n	8006064 <BSP_ADC_Init+0x70>
 8006060:	4b3e      	ldr	r3, [pc, #248]	; (800615c <BSP_ADC_Init+0x168>)
 8006062:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(ADCxy_common->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, ADC_CLOCK_ASYNC_DIV1);
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	609a      	str	r2, [r3, #8]

	// Enable continuous conversion mode
	tmpCFGR = ADC_CFGR_CONT;
 8006070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006074:	617b      	str	r3, [r7, #20]

	// Configure conversion overrun
	tmpCFGR |= ADC_OVR_DATA_OVERWRITTEN;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800607c:	617b      	str	r3, [r7, #20]

	// Configure ADC resolution
	tmpCFGR |= resolution;
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

	// Enabling DMA data management
	tmpCFGR |= ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f043 0303 	orr.w	r3, r3, #3
 800608c:	617b      	str	r3, [r7, #20]

	// Update Configuration Register CFGR
	hadc->CFGR = tmpCFGR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	60da      	str	r2, [r3, #12]

	// Disable ADC oversampling scope on ADC group regular
	CLEAR_BIT(hadc->CFGR2, ADC_CFGR2_ROVSE);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f023 0201 	bic.w	r2, r3, #1
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	611a      	str	r2, [r3, #16]

	// Set the LeftShift parameter: it is applied to the final result with or without oversampling
	MODIFY_REG(hadc->CFGR2, ADC_CFGR2_LSHIFT, ADC_LEFTBITSHIFT_NONE);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	611a      	str	r2, [r3, #16]
	// Setting boost:
	// 00: used when ADC clock ≤ 6.25 MHz
	// 01: used when 6.25 MHz < ADC clock frequency ≤ 12.5 MHz
	// 10: used when 12.5 MHz < ADC clock ≤ 25.0 MHz <<<<<<<<< SELECTED (Clock for ADC is 15MHz)
	// 11: used when 25.0 MHz < ADC clock ≤ 50.0 MHz
	MODIFY_REG(hadc->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	609a      	str	r2, [r3, #8]

	// Set number of ranks in regular group sequencer
	MODIFY_REG(hadc->SQR1, ADC_SQR1_L, (nb_conversions - (uint8_t)1));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	f023 020f 	bic.w	r2, r3, #15
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30

	// Auto-calibration - requesting single-ended calibration
	hadc->CR &= ~(ADC_CR_ADCALDIF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	609a      	str	r2, [r3, #8]

	// Auto-calibration - requesting calibration of offset and linearity
	hadc->CR |= ADC_CR_ADCALLIN;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	609a      	str	r2, [r3, #8]

	// Starting calibration
	hadc->CR |= ADC_CR_ADCAL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	609a      	str	r2, [r3, #8]

	// Waiting for completion of calibration
	while (hadc->CR & ADC_CR_ADCAL) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 80060f2:	e008      	b.n	8006106 <BSP_ADC_Init+0x112>
 80060f4:	f7ff fc78 	bl	80059e8 <BSP_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b64      	cmp	r3, #100	; 0x64
 8006100:	d901      	bls.n	8006106 <BSP_ADC_Init+0x112>
 8006102:	2301      	movs	r3, #1
 8006104:	e020      	b.n	8006148 <BSP_ADC_Init+0x154>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	dbf2      	blt.n	80060f4 <BSP_ADC_Init+0x100>

	// Enabling ADC
	hadc->CR |= ADC_CR_ADEN;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f043 0201 	orr.w	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	609a      	str	r2, [r3, #8]

	// Waiting until ADC started
	while ((hadc->ISR & ADC_ISR_ADRDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 800611a:	e008      	b.n	800612e <BSP_ADC_Init+0x13a>
 800611c:	f7ff fc64 	bl	80059e8 <BSP_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b64      	cmp	r3, #100	; 0x64
 8006128:	d901      	bls.n	800612e <BSP_ADC_Init+0x13a>
 800612a:	2301      	movs	r3, #1
 800612c:	e00c      	b.n	8006148 <BSP_ADC_Init+0x154>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0f0      	beq.n	800611c <BSP_ADC_Init+0x128>
	// Clearing ADRDY flag
	hadc->ISR &= ~(ADC_ISR_ADRDY);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40022000 	.word	0x40022000
 8006154:	40022100 	.word	0x40022100
 8006158:	40022300 	.word	0x40022300
 800615c:	58026300 	.word	0x58026300

08006160 <BSP_ADC_ConfigChannel>:


uint8_t BSP_ADC_ConfigChannel(ADC_TypeDef * hadc, uint32_t channel, uint32_t sequence) {
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	; 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]

	if (channel>19) return BSP_ERROR;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b13      	cmp	r3, #19
 8006170:	d901      	bls.n	8006176 <BSP_ADC_ConfigChannel+0x16>
 8006172:	2301      	movs	r3, #1
 8006174:	e060      	b.n	8006238 <BSP_ADC_ConfigChannel+0xd8>
	if (sequence == 0) return BSP_ERROR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <BSP_ADC_ConfigChannel+0x20>
 800617c:	2301      	movs	r3, #1
 800617e:	e05b      	b.n	8006238 <BSP_ADC_ConfigChannel+0xd8>
	if (sequence > ((hadc->SQR1) & 0x0F)+1) return BSP_ERROR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	3301      	adds	r3, #1
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	d901      	bls.n	8006194 <BSP_ADC_ConfigChannel+0x34>
 8006190:	2301      	movs	r3, #1
 8006192:	e051      	b.n	8006238 <BSP_ADC_ConfigChannel+0xd8>

	// ADC channels preselection
	hadc->PCSEL |= (1UL << channel);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	2101      	movs	r1, #1
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	431a      	orrs	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	61da      	str	r2, [r3, #28]

	// Set ADC group regular sequence: channel on the selected scan sequence rank
	uint8_t sqr_shift = (sequence % 5) * 6;
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4b26      	ldr	r3, [pc, #152]	; (8006244 <BSP_ADC_ConfigChannel+0xe4>)
 80061aa:	fba3 2301 	umull	r2, r3, r3, r1
 80061ae:	089a      	lsrs	r2, r3, #2
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	1aca      	subs	r2, r1, r3
 80061b8:	b2d3      	uxtb	r3, r2
 80061ba:	461a      	mov	r2, r3
 80061bc:	0052      	lsls	r2, r2, #1
 80061be:	4413      	add	r3, r2
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	77fb      	strb	r3, [r7, #31]
	uint32_t * sqr_reg = &hadc->SQR1;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3330      	adds	r3, #48	; 0x30
 80061c8:	61bb      	str	r3, [r7, #24]
	sqr_reg += (sequence / 5);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <BSP_ADC_ConfigChannel+0xe4>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4413      	add	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
	*sqr_reg |= (channel << sqr_shift);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	7ffb      	ldrb	r3, [r7, #31]
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	431a      	orrs	r2, r3
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	601a      	str	r2, [r3, #0]

	// Set sampling time of the selected ADC channel
	uint8_t smpr_shift = (channel % 10) * 3;
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	4b14      	ldr	r3, [pc, #80]	; (8006244 <BSP_ADC_ConfigChannel+0xe4>)
 80061f2:	fba3 2301 	umull	r2, r3, r3, r1
 80061f6:	08da      	lsrs	r2, r3, #3
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	1aca      	subs	r2, r1, r3
 8006202:	b2d3      	uxtb	r3, r2
 8006204:	461a      	mov	r2, r3
 8006206:	0052      	lsls	r2, r2, #1
 8006208:	4413      	add	r3, r2
 800620a:	75fb      	strb	r3, [r7, #23]
	uint32_t * smpr_reg = &hadc->SMPR1;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3314      	adds	r3, #20
 8006210:	613b      	str	r3, [r7, #16]
	smpr_reg += (channel / 10);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4a0b      	ldr	r2, [pc, #44]	; (8006244 <BSP_ADC_ConfigChannel+0xe4>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	08db      	lsrs	r3, r3, #3
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
	*smpr_reg |= (ADC_SAMPLINGTIME_64CYCLES_5 << smpr_shift);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	2105      	movs	r1, #5
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	431a      	orrs	r2, r3
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	601a      	str	r2, [r3, #0]

	// For this application all other parameters remains default

	return BSP_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3724      	adds	r7, #36	; 0x24
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	cccccccd 	.word	0xcccccccd

08006248 <BSP_ADC_StartDMA>:


uint8_t BSP_ADC_StartDMA(ADC_TypeDef * hadc, TxRxContext_TypeDef *ctx, uint32_t *pData, uint32_t Length) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]

	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&hadc->DR, (uint32_t)pData, Length);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3340      	adds	r3, #64	; 0x40
 800625a:	4619      	mov	r1, r3
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68b8      	ldr	r0, [r7, #8]
 8006262:	f000 fc17 	bl	8006a94 <BSP_STM32_DMA_StartIT>
	MODIFY_REG(hadc->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <BSP_ADC_StartDMA+0x38>)
 800626c:	4013      	ands	r3, r2
 800626e:	f043 0204 	orr.w	r2, r3, #4
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	609a      	str	r2, [r3, #8]
	return BSP_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	7fffffc0 	.word	0x7fffffc0

08006284 <BSP_BDMA_Init>:
  __IO uint32_t IFCR;  // BDMA interrupt flag clear register
} BDMA_Base_Registers;

uint32_t BDMACTXvectors[8] = {0};

uint8_t BSP_BDMA_Init(BDMA_Channel_TypeDef *hbdma, uint32_t dir, uint32_t pinc, uint32_t minc, uint32_t pdatalign, uint32_t mdatalign, uint32_t mode, uint32_t priority) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]

	uint32_t tickstart = BSP_GetTick();
 8006292:	f7ff fba9 	bl	80059e8 <BSP_GetTick>
 8006296:	6178      	str	r0, [r7, #20]

    // Disable the peripheral
    hbdma->CCR &= ~BDMA_CCR_EN;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f023 0201 	bic.w	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	601a      	str	r2, [r3, #0]

    // Check if the BDMA Channel is effectively disabled
    while ((hbdma->CCR & BDMA_CCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 80062a4:	e008      	b.n	80062b8 <BSP_BDMA_Init+0x34>
 80062a6:	f7ff fb9f 	bl	80059e8 <BSP_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <BSP_BDMA_Init+0x34>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e020      	b.n	80062fa <BSP_BDMA_Init+0x76>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <BSP_BDMA_Init+0x22>

	// Get the CR register value
	uint32_t registerValue = hbdma->CCR;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	613b      	str	r3, [r7, #16]

	// Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits
	registerValue &= ((uint32_t)~(BDMA_CCR_PL | BDMA_CCR_MSIZE | BDMA_CCR_PSIZE | BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC | BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM | BDMA_CCR_CT));
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <BSP_BDMA_Init+0x80>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]

	// Prepare the BDMA Channel configuration */
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	431a      	orrs	r2, r3
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	431a      	orrs	r2, r3
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	431a      	orrs	r2, r3
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	431a      	orrs	r2, r3
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	4313      	orrs	r3, r2
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]

	// Write to BDMA Channel CR register
	hbdma->CCR = registerValue;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	fffe000f 	.word	0xfffe000f

08006308 <BSP_BDMA_CtxLink>:


uint8_t BSP_BDMA_CtxLink(BDMA_Channel_TypeDef *hbdma, TxRxContext_TypeDef *ctx, uint32_t request) {
 8006308:	b480      	push	{r7}
 800630a:	b089      	sub	sp, #36	; 0x24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]

	ctx->dma_stream = (uint32_t)hbdma;
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	605a      	str	r2, [r3, #4]
	ctx->dma_mode = TXRX_CTX_MODE_BDMA;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2202      	movs	r2, #2
 800631e:	601a      	str	r2, [r3, #0]

	// Initialize BaseAddress and Index parameters
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <BSP_BDMA_CtxLink+0xa4>)
 8006324:	4413      	add	r3, r2
 8006326:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <BSP_BDMA_CtxLink+0xa8>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	61fb      	str	r3, [r7, #28]
	ctx->dma_index = channel_number << 2U;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	009a      	lsls	r2, r3, #2
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	609a      	str	r2, [r3, #8]
	BDMA_Base_Registers * dma_baseregs = (BDMA_Base_Registers *)((uint32_t)(hbdma) & (uint32_t)(~0xFFU));
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800633e:	61bb      	str	r3, [r7, #24]
	ctx->dma_baseregs = (uint32_t)dma_baseregs;
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	60da      	str	r2, [r3, #12]

	// Clear all interrupt flags
	dma_baseregs->IFCR = ((BDMA_IFCR_CGIF0) << (ctx->dma_index & 0x1FU));
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2201      	movs	r2, #1
 8006350:	409a      	lsls	r2, r3
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	605a      	str	r2, [r3, #4]

	// Initialize parameters for DMAMUX channel
    // BDMA Channels are connected to DMAMUX2 channels
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <BSP_BDMA_CtxLink+0xac>)
 800635a:	4413      	add	r3, r2
 800635c:	009a      	lsls	r2, r3, #2
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	611a      	str	r2, [r3, #16]
	ctx->dma_muxchannelstatus = DMAMUX2_ChannelStatus_BASE;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <BSP_BDMA_CtxLink+0xb0>)
 8006366:	615a      	str	r2, [r3, #20]
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2201      	movs	r2, #1
 8006370:	409a      	lsls	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	619a      	str	r2, [r3, #24]

	DMAMUX_Channel_TypeDef * dma_muxchannel = (DMAMUX_Channel_TypeDef *)ctx->dma_muxchannel;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	617b      	str	r3, [r7, #20]
	dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	601a      	str	r2, [r3, #0]

	// Clear the DMAMUX synchro overrun flag
	DMAMUX_ChannelStatus_TypeDef * dma_muxchannelstatus = (DMAMUX_ChannelStatus_TypeDef *)ctx->dma_muxchannelstatus;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	613b      	str	r3, [r7, #16]
	dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	605a      	str	r2, [r3, #4]

	// Assigning TxRx Context to BDMA channel
	BDMACTXvectors[channel_number] = (uint32_t)ctx;
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4909      	ldr	r1, [pc, #36]	; (80063bc <BSP_BDMA_CtxLink+0xb4>)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return BSP_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3724      	adds	r7, #36	; 0x24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	a7fdabf8 	.word	0xa7fdabf8
 80063b0:	cccccccd 	.word	0xcccccccd
 80063b4:	16009600 	.word	0x16009600
 80063b8:	58025880 	.word	0x58025880
 80063bc:	240003d8 	.word	0x240003d8

080063c0 <BSP_BDMA_StartIT>:


uint8_t BSP_BDMA_StartIT(TxRxContext_TypeDef *ctx, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]

	BDMA_Channel_TypeDef * hbdma = (BDMA_Channel_TypeDef *)ctx->dma_stream;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	617b      	str	r3, [r7, #20]
	BDMA_Base_Registers * regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	613b      	str	r3, [r7, #16]

	// Disable the peripheral
	hbdma->CCR &= ~BDMA_CCR_EN;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	601a      	str	r2, [r3, #0]

	// Clear all flags
	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2201      	movs	r2, #1
 80063f0:	409a      	lsls	r2, r3
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	605a      	str	r2, [r3, #4]

	// Configure DMA Stream data length
	hbdma->CNDTR = DataLength;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	605a      	str	r2, [r3, #4]

	if((hbdma->CCR & BDMA_CCR_DIR) == BDMA_MEMORY_TO_PERIPH) {
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b10      	cmp	r3, #16
 8006406:	d106      	bne.n	8006416 <BSP_BDMA_StartIT+0x56>
			// Memory to Peripheral
			// Configure DMA Stream source address
			hbdma->CPAR = DstAddress;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	609a      	str	r2, [r3, #8]

			// Configure DMA Stream destination address
			hbdma->CM0AR = SrcAddress;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	60da      	str	r2, [r3, #12]
 8006414:	e005      	b.n	8006422 <BSP_BDMA_StartIT+0x62>
		} else {
			// Peripheral to Memory
			// Configure DMA Stream destination address
		    hbdma->CPAR = SrcAddress;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	609a      	str	r2, [r3, #8]

		    // Configure DMA Stream source address
		    hbdma->CM0AR = DstAddress;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	60da      	str	r2, [r3, #12]
		}

	// Enable Common interrupts
	MODIFY_REG(hbdma->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE));
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f043 020e 	orr.w	r2, r3, #14
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	601a      	str	r2, [r3, #0]

	// Enable BDMA
	hbdma->CCR |=  BDMA_CCR_EN;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f043 0201 	orr.w	r2, r3, #1
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <BDMA_Stream_IRQHandler>:


void BDMA_Stream_IRQHandler(TxRxContext_TypeDef * ctx) {
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	617b      	str	r3, [r7, #20]
	BDMA_Channel_TypeDef *regs_bdma_channel = (BDMA_Channel_TypeDef *)ctx->dma_stream;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	613b      	str	r3, [r7, #16]
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60fb      	str	r3, [r7, #12]

	// Half Transfer Complete Interrupt management ******************************
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2104      	movs	r1, #4
 8006470:	fa01 f303 	lsl.w	r3, r1, r3
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d017      	beq.n	80064aa <BDMA_Stream_IRQHandler+0x62>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d012      	beq.n	80064aa <BDMA_Stream_IRQHandler+0x62>

      // Clear the half transfer complete flag
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2204      	movs	r2, #4
 800648e:	409a      	lsls	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	605a      	str	r2, [r3, #4]

      // Disable the half transfer interrupt if the BDMA mode is not CIRCULAR
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <BDMA_Stream_IRQHandler+0x62>
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f023 0204 	bic.w	r2, r3, #4
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	601a      	str	r2, [r3, #0]
      // TODO: HALF TRANSFER CALLBACK

    }

	// Transfer Complete Interrupt management ***********************************
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2102      	movs	r1, #2
 80064b8:	fa01 f303 	lsl.w	r3, r1, r3
 80064bc:	4013      	ands	r3, r2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <BDMA_Stream_IRQHandler+0xaa>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d012      	beq.n	80064f2 <BDMA_Stream_IRQHandler+0xaa>

      // Clear the transfer complete flag
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2202      	movs	r2, #2
 80064d6:	409a      	lsls	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	605a      	str	r2, [r3, #4]

      // Disable the transfer complete interrupt if the BDMA mode is not CIRCULAR
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d105      	bne.n	80064f2 <BDMA_Stream_IRQHandler+0xaa>
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 0202 	bic.w	r2, r3, #2
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	601a      	str	r2, [r3, #0]
      // TODO: HALF TRANSFER CALLBACK

    }

	// Transfer Error Interrupt management **************************************
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2108      	movs	r1, #8
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	4013      	ands	r3, r2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d012      	beq.n	8006530 <BDMA_Stream_IRQHandler+0xe8>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <BDMA_Stream_IRQHandler+0xe8>

    	// Disable all interrupts
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f023 020e 	bic.w	r2, r3, #14
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	601a      	str	r2, [r3, #0]

    	// Clear all flags
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2201      	movs	r2, #1
 800652a:	409a      	lsls	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	605a      	str	r2, [r3, #4]
    }


}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <BDMA_Channel0_IRQHandler>:


void BDMA_Channel0_IRQHandler() {
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
	if (BDMACTXvectors[0x00]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x00]));
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <BDMA_Channel0_IRQHandler+0x1c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <BDMA_Channel0_IRQHandler+0x16>
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <BDMA_Channel0_IRQHandler+0x1c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff ff7b 	bl	8006448 <BDMA_Stream_IRQHandler>
}
 8006552:	bf00      	nop
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	240003d8 	.word	0x240003d8

0800655c <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler() { if (BDMACTXvectors[0x01]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x01])); }
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <BDMA_Channel1_IRQHandler+0x1c>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <BDMA_Channel1_IRQHandler+0x16>
 8006568:	4b03      	ldr	r3, [pc, #12]	; (8006578 <BDMA_Channel1_IRQHandler+0x1c>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff ff6b 	bl	8006448 <BDMA_Stream_IRQHandler>
 8006572:	bf00      	nop
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	240003d8 	.word	0x240003d8

0800657c <BDMA_Channel2_IRQHandler>:
void BDMA_Channel2_IRQHandler() { if (BDMACTXvectors[0x02]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x02])); }
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <BDMA_Channel2_IRQHandler+0x1c>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <BDMA_Channel2_IRQHandler+0x16>
 8006588:	4b03      	ldr	r3, [pc, #12]	; (8006598 <BDMA_Channel2_IRQHandler+0x1c>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff ff5b 	bl	8006448 <BDMA_Stream_IRQHandler>
 8006592:	bf00      	nop
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	240003d8 	.word	0x240003d8

0800659c <BDMA_Channel3_IRQHandler>:
void BDMA_Channel3_IRQHandler() { if (BDMACTXvectors[0x03]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x03])); }
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <BDMA_Channel3_IRQHandler+0x1c>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <BDMA_Channel3_IRQHandler+0x16>
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <BDMA_Channel3_IRQHandler+0x1c>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff ff4b 	bl	8006448 <BDMA_Stream_IRQHandler>
 80065b2:	bf00      	nop
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	240003d8 	.word	0x240003d8

080065bc <BDMA_Channel4_IRQHandler>:
void BDMA_Channel4_IRQHandler() { if (BDMACTXvectors[0x04]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x04])); }
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <BDMA_Channel4_IRQHandler+0x1c>)
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <BDMA_Channel4_IRQHandler+0x16>
 80065c8:	4b03      	ldr	r3, [pc, #12]	; (80065d8 <BDMA_Channel4_IRQHandler+0x1c>)
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff3b 	bl	8006448 <BDMA_Stream_IRQHandler>
 80065d2:	bf00      	nop
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	240003d8 	.word	0x240003d8

080065dc <BDMA_Channel5_IRQHandler>:
void BDMA_Channel5_IRQHandler() { if (BDMACTXvectors[0x05]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x05])); }
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <BDMA_Channel5_IRQHandler+0x1c>)
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <BDMA_Channel5_IRQHandler+0x16>
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <BDMA_Channel5_IRQHandler+0x1c>)
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff ff2b 	bl	8006448 <BDMA_Stream_IRQHandler>
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	240003d8 	.word	0x240003d8

080065fc <BDMA_Channel6_IRQHandler>:
void BDMA_Channel6_IRQHandler() { if (BDMACTXvectors[0x06]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x06])); }
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <BDMA_Channel6_IRQHandler+0x1c>)
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <BDMA_Channel6_IRQHandler+0x16>
 8006608:	4b03      	ldr	r3, [pc, #12]	; (8006618 <BDMA_Channel6_IRQHandler+0x1c>)
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff ff1b 	bl	8006448 <BDMA_Stream_IRQHandler>
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	240003d8 	.word	0x240003d8

0800661c <BDMA_Channel7_IRQHandler>:
void BDMA_Channel7_IRQHandler() { if (BDMACTXvectors[0x07]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x07])); }
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <BDMA_Channel7_IRQHandler+0x1c>)
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <BDMA_Channel7_IRQHandler+0x16>
 8006628:	4b03      	ldr	r3, [pc, #12]	; (8006638 <BDMA_Channel7_IRQHandler+0x1c>)
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff ff0b 	bl	8006448 <BDMA_Stream_IRQHandler>
 8006632:	bf00      	nop
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	240003d8 	.word	0x240003d8

0800663c <__NVIC_SetPriorityGrouping>:
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <__NVIC_SetPriorityGrouping+0x40>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006658:	4013      	ands	r3, r2
 800665a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <__NVIC_SetPriorityGrouping+0x44>)
 8006666:	4313      	orrs	r3, r2
 8006668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800666a:	4a04      	ldr	r2, [pc, #16]	; (800667c <__NVIC_SetPriorityGrouping+0x40>)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	60d3      	str	r3, [r2, #12]
}
 8006670:	bf00      	nop
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	e000ed00 	.word	0xe000ed00
 8006680:	05fa0000 	.word	0x05fa0000

08006684 <__NVIC_GetPriorityGrouping>:
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006688:	4b04      	ldr	r3, [pc, #16]	; (800669c <__NVIC_GetPriorityGrouping+0x18>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	f003 0307 	and.w	r3, r3, #7
}
 8006692:	4618      	mov	r0, r3
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	e000ed00 	.word	0xe000ed00

080066a0 <__NVIC_EnableIRQ>:
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	db0b      	blt.n	80066ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	f003 021f 	and.w	r2, r3, #31
 80066b8:	4907      	ldr	r1, [pc, #28]	; (80066d8 <__NVIC_EnableIRQ+0x38>)
 80066ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2001      	movs	r0, #1
 80066c2:	fa00 f202 	lsl.w	r2, r0, r2
 80066c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	e000e100 	.word	0xe000e100

080066dc <__NVIC_SetPriority>:
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	6039      	str	r1, [r7, #0]
 80066e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	db0a      	blt.n	8006706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	490c      	ldr	r1, [pc, #48]	; (8006728 <__NVIC_SetPriority+0x4c>)
 80066f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066fa:	0112      	lsls	r2, r2, #4
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	440b      	add	r3, r1
 8006700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006704:	e00a      	b.n	800671c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	4908      	ldr	r1, [pc, #32]	; (800672c <__NVIC_SetPriority+0x50>)
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	3b04      	subs	r3, #4
 8006714:	0112      	lsls	r2, r2, #4
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	440b      	add	r3, r1
 800671a:	761a      	strb	r2, [r3, #24]
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	e000e100 	.word	0xe000e100
 800672c:	e000ed00 	.word	0xe000ed00

08006730 <NVIC_EncodePriority>:
{
 8006730:	b480      	push	{r7}
 8006732:	b089      	sub	sp, #36	; 0x24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f1c3 0307 	rsb	r3, r3, #7
 800674a:	2b04      	cmp	r3, #4
 800674c:	bf28      	it	cs
 800674e:	2304      	movcs	r3, #4
 8006750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	3304      	adds	r3, #4
 8006756:	2b06      	cmp	r3, #6
 8006758:	d902      	bls.n	8006760 <NVIC_EncodePriority+0x30>
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3b03      	subs	r3, #3
 800675e:	e000      	b.n	8006762 <NVIC_EncodePriority+0x32>
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006764:	f04f 32ff 	mov.w	r2, #4294967295
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	fa02 f303 	lsl.w	r3, r2, r3
 800676e:	43da      	mvns	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	401a      	ands	r2, r3
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006778:	f04f 31ff 	mov.w	r1, #4294967295
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	fa01 f303 	lsl.w	r3, r1, r3
 8006782:	43d9      	mvns	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006788:	4313      	orrs	r3, r2
}
 800678a:	4618      	mov	r0, r3
 800678c:	3724      	adds	r7, #36	; 0x24
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <BSP_STM32_NVIC_EnableIRQ>:
 *******************************************************************/

#include "BSP_STM32_CORE.h"


uint8_t BSP_STM32_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	4603      	mov	r3, r0
 800679e:	80fb      	strh	r3, [r7, #6]
	NVIC_EnableIRQ(IRQn);
 80067a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff ff7b 	bl	80066a0 <__NVIC_EnableIRQ>
	return BSP_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <BSP_STM32_NVIC_SetPriority>:


uint8_t BSP_STM32_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	81fb      	strh	r3, [r7, #14]
	uint32_t prioritygroup = NVIC_GetPriorityGrouping();
 80067c2:	f7ff ff5f 	bl	8006684 <__NVIC_GetPriorityGrouping>
 80067c6:	6178      	str	r0, [r7, #20]
	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	6978      	ldr	r0, [r7, #20]
 80067ce:	f7ff ffaf 	bl	8006730 <NVIC_EncodePriority>
 80067d2:	4602      	mov	r2, r0
 80067d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067d8:	4611      	mov	r1, r2
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff ff7e 	bl	80066dc <__NVIC_SetPriority>
	return BSP_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <BSP_STM32_NVIC_SetPriorityGrouping>:

uint8_t BSP_STM32_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
	// Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value
	NVIC_SetPriorityGrouping(PriorityGroup);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ff22 	bl	800663c <__NVIC_SetPriorityGrouping>
	return BSP_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <BSP_STM32_MPU_Enable>:

uint8_t BSP_STM32_MPU_Enable(uint32_t MPU_Control) {
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	// Enable the MPU
	MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800680c:	4a0b      	ldr	r2, [pc, #44]	; (800683c <BSP_STM32_MPU_Enable+0x38>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f043 0301 	orr.w	r3, r3, #1
 8006814:	6053      	str	r3, [r2, #4]
	// Enable fault exceptions
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <BSP_STM32_MPU_Enable+0x3c>)
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	4a09      	ldr	r2, [pc, #36]	; (8006840 <BSP_STM32_MPU_Enable+0x3c>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006820:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006822:	f3bf 8f4f 	dsb	sy
}
 8006826:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006828:	f3bf 8f6f 	isb	sy
}
 800682c:	bf00      	nop
	// Ensure MPU setting take effects
	  __DSB();
	  __ISB();
	return BSP_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000ed90 	.word	0xe000ed90
 8006840:	e000ed00 	.word	0xe000ed00

08006844 <BSP_STM32_MPU_Disable>:

uint8_t BSP_STM32_MPU_Disable() {
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006848:	f3bf 8f5f 	dmb	sy
}
 800684c:	bf00      	nop
	// Make sure outstanding transfers are done
	__DMB();
	// Disable fault exceptions
	SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800684e:	4b07      	ldr	r3, [pc, #28]	; (800686c <BSP_STM32_MPU_Disable+0x28>)
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	4a06      	ldr	r2, [pc, #24]	; (800686c <BSP_STM32_MPU_Disable+0x28>)
 8006854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006858:	6253      	str	r3, [r2, #36]	; 0x24
	// Disable the MPU and clear the control register
	MPU->CTRL = 0;
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <BSP_STM32_MPU_Disable+0x2c>)
 800685c:	2200      	movs	r2, #0
 800685e:	605a      	str	r2, [r3, #4]
	return BSP_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	e000ed00 	.word	0xe000ed00
 8006870:	e000ed90 	.word	0xe000ed90

08006874 <BSP_STM32_MPU_ConfigRegion>:

uint8_t BSP_STM32_MPU_ConfigRegion(MPU_Region_TypeDef *MPU_Init) {
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	// Set the Region number
	MPU->RNR = MPU_Init->Number;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	785a      	ldrb	r2, [r3, #1]
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <BSP_STM32_MPU_ConfigRegion+0x88>)
 8006882:	609a      	str	r2, [r3, #8]

	if (MPU_Init->Enable == MPU_REGION_DISABLE) { MPU->RBAR = 0; MPU->RASR = 0; return BSP_OK; }
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d107      	bne.n	800689c <BSP_STM32_MPU_ConfigRegion+0x28>
 800688c:	4b1b      	ldr	r3, [pc, #108]	; (80068fc <BSP_STM32_MPU_ConfigRegion+0x88>)
 800688e:	2200      	movs	r2, #0
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	4b1a      	ldr	r3, [pc, #104]	; (80068fc <BSP_STM32_MPU_ConfigRegion+0x88>)
 8006894:	2200      	movs	r2, #0
 8006896:	611a      	str	r2, [r3, #16]
 8006898:	2300      	movs	r3, #0
 800689a:	e029      	b.n	80068f0 <BSP_STM32_MPU_ConfigRegion+0x7c>

	MPU->RBAR = MPU_Init->BaseAddress;
 800689c:	4a17      	ldr	r2, [pc, #92]	; (80068fc <BSP_STM32_MPU_ConfigRegion+0x88>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	60d3      	str	r3, [r2, #12]
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	7b1b      	ldrb	r3, [r3, #12]
 80068a8:	071a      	lsls	r2, r3, #28
	            ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7adb      	ldrb	r3, [r3, #11]
 80068ae:	061b      	lsls	r3, r3, #24
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068b0:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7a9b      	ldrb	r3, [r3, #10]
 80068b6:	04db      	lsls	r3, r3, #19
	            ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80068b8:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	7b5b      	ldrb	r3, [r3, #13]
 80068be:	049b      	lsls	r3, r3, #18
	            ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80068c0:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7b9b      	ldrb	r3, [r3, #14]
 80068c6:	045b      	lsls	r3, r3, #17
	            ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80068c8:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7bdb      	ldrb	r3, [r3, #15]
 80068ce:	041b      	lsls	r3, r3, #16
	            ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80068d0:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7a5b      	ldrb	r3, [r3, #9]
 80068d6:	021b      	lsls	r3, r3, #8
	            ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80068d8:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	7a1b      	ldrb	r3, [r3, #8]
 80068de:	005b      	lsls	r3, r3, #1
	            ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80068e0:	4313      	orrs	r3, r2
	            ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	7812      	ldrb	r2, [r2, #0]
 80068e6:	4611      	mov	r1, r2
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068e8:	4a04      	ldr	r2, [pc, #16]	; (80068fc <BSP_STM32_MPU_ConfigRegion+0x88>)
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068ea:	430b      	orrs	r3, r1
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068ec:	6113      	str	r3, [r2, #16]

	return BSP_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	e000ed90 	.word	0xe000ed90

08006900 <BSP_STM32_DMA_Init>:


uint32_t DMACTXvectors[16] = {0};


uint8_t BSP_STM32_DMA_Init(DMA_Stream_TypeDef *hdma, uint32_t dir, uint32_t pinc, uint32_t minc, uint32_t pdatalign, uint32_t mdatalign, uint32_t mode, uint32_t priority) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]

	uint32_t tickstart = BSP_GetTick();
 800690e:	f7ff f86b 	bl	80059e8 <BSP_GetTick>
 8006912:	6178      	str	r0, [r7, #20]

    // Disable the peripheral
    hdma->CR &= ~DMA_SxCR_EN;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f023 0201 	bic.w	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	601a      	str	r2, [r3, #0]

    // Check if the DMA Stream is effectively disabled
    while ((hdma->CR & DMA_SxCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 8006920:	e008      	b.n	8006934 <BSP_STM32_DMA_Init+0x34>
 8006922:	f7ff f861 	bl	80059e8 <BSP_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <BSP_STM32_DMA_Init+0x34>
 8006930:	2301      	movs	r3, #1
 8006932:	e02a      	b.n	800698a <BSP_STM32_DMA_Init+0x8a>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f0      	bne.n	8006922 <BSP_STM32_DMA_Init+0x22>

    // Get the CR register value
    uint32_t registerValue = hdma->CR;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	613b      	str	r3, [r7, #16]

    // Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	4b12      	ldr	r3, [pc, #72]	; (8006994 <BSP_STM32_DMA_Init+0x94>)
 800694a:	4013      	ands	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

    // Prepare the DMA Stream configuration
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	431a      	orrs	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	431a      	orrs	r2, r3
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	431a      	orrs	r2, r3
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	431a      	orrs	r2, r3
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	431a      	orrs	r2, r3
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	4313      	orrs	r3, r2
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]

    // Write to DMA Stream CR register
    hdma->CR = registerValue;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	601a      	str	r2, [r3, #0]

    // Get the FCR register value
    registerValue = hdma->FCR;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	613b      	str	r3, [r7, #16]

    // Clear Direct mode and FIFO threshold bits
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f023 0307 	bic.w	r3, r3, #7
 8006980:	613b      	str	r3, [r7, #16]

    // Write to DMA Stream FCR
    hdma->FCR = registerValue;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	615a      	str	r2, [r3, #20]

	return BSP_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	fe10803f 	.word	0xfe10803f

08006998 <BSP_STM32_DMA_CtxLink>:


uint8_t BSP_STM32_DMA_CtxLink(DMA_Stream_TypeDef *hdma, TxRxContext_TypeDef *ctx, uint32_t request) {
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	; 0x24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]

	ctx->dma_stream = (uint32_t)hdma;
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	605a      	str	r2, [r3, #4]
	ctx->dma_mode = TXRX_CTX_MODE_DMA;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2201      	movs	r2, #1
 80069ae:	601a      	str	r2, [r3, #0]

    // Initialize StreamBaseAddress and StreamIndex parameters
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma) & 0xFFU) - 16U) / 24U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	3b10      	subs	r3, #16
 80069b6:	4a2f      	ldr	r2, [pc, #188]	; (8006a74 <BSP_STM32_DMA_CtxLink+0xdc>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	091b      	lsrs	r3, r3, #4
 80069be:	61fb      	str	r3, [r7, #28]
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	4a2c      	ldr	r2, [pc, #176]	; (8006a78 <BSP_STM32_DMA_CtxLink+0xe0>)
 80069c8:	5cd3      	ldrb	r3, [r2, r3]
 80069ca:	461a      	mov	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	609a      	str	r2, [r3, #8]
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d906      	bls.n	80069e4 <BSP_STM32_DMA_CtxLink+0x4c>
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4b28      	ldr	r3, [pc, #160]	; (8006a7c <BSP_STM32_DMA_CtxLink+0xe4>)
 80069da:	4013      	ands	r3, r2
 80069dc:	1d1a      	adds	r2, r3, #4
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	e004      	b.n	80069ee <BSP_STM32_DMA_CtxLink+0x56>
    	else ctx->dma_baseregs = ((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU));
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4b25      	ldr	r3, [pc, #148]	; (8006a7c <BSP_STM32_DMA_CtxLink+0xe4>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	60d3      	str	r3, [r2, #12]

    //Clear all interrupt flags
    DMA_Base_Registers * regs_dma = (DMA_Base_Registers * )ctx->dma_baseregs;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	61bb      	str	r3, [r7, #24]
    regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	223f      	movs	r2, #63	; 0x3f
 80069fe:	409a      	lsls	r2, r3
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	609a      	str	r2, [r3, #8]

    // Initialize parameters for DMAMUX channel
    if((ctx->dma_baseregs <= ((uint32_t)DMA2_Stream7)) && (ctx->dma_baseregs >= ((uint32_t)DMA2_Stream0))) stream_number += 8U;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <BSP_STM32_DMA_CtxLink+0xe8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d807      	bhi.n	8006a1e <BSP_STM32_DMA_CtxLink+0x86>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <BSP_STM32_DMA_CtxLink+0xec>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d902      	bls.n	8006a1e <BSP_STM32_DMA_CtxLink+0x86>
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	61fb      	str	r3, [r7, #28]

    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <BSP_STM32_DMA_CtxLink+0xf0>)
 8006a22:	4413      	add	r3, r2
 8006a24:	009a      	lsls	r2, r3, #2
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	611a      	str	r2, [r3, #16]
    ctx->dma_muxchannelstatus = DMAMUX1_ChannelStatus_BASE;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	4a17      	ldr	r2, [pc, #92]	; (8006a8c <BSP_STM32_DMA_CtxLink+0xf4>)
 8006a2e:	615a      	str	r2, [r3, #20]
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2201      	movs	r2, #1
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	619a      	str	r2, [r3, #24]

    // Set peripheral request  to DMAMUX channel
    DMAMUX_Channel_TypeDef * dma_muxchannel = (DMAMUX_Channel_TypeDef *)ctx->dma_muxchannel;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	617b      	str	r3, [r7, #20]
    dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	601a      	str	r2, [r3, #0]

    // Clear the DMAMUX synchro overrun flag
    DMAMUX_ChannelStatus_TypeDef * dma_muxchannelstatus = (DMAMUX_ChannelStatus_TypeDef *)ctx->dma_muxchannelstatus;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	613b      	str	r3, [r7, #16]
    dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	605a      	str	r2, [r3, #4]

    // Assigning TxRx Context to DMA stream
    DMACTXvectors[stream_number] = (uint32_t)ctx;
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	490c      	ldr	r1, [pc, #48]	; (8006a90 <BSP_STM32_DMA_CtxLink+0xf8>)
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return BSP_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3724      	adds	r7, #36	; 0x24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	aaaaaaab 	.word	0xaaaaaaab
 8006a78:	08010b8c 	.word	0x08010b8c
 8006a7c:	fffffc00 	.word	0xfffffc00
 8006a80:	400204b8 	.word	0x400204b8
 8006a84:	4002040f 	.word	0x4002040f
 8006a88:	10008200 	.word	0x10008200
 8006a8c:	40020880 	.word	0x40020880
 8006a90:	240003f8 	.word	0x240003f8

08006a94 <BSP_STM32_DMA_StartIT>:


uint8_t BSP_STM32_DMA_StartIT(TxRxContext_TypeDef *ctx, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]

	DMA_Stream_TypeDef * hdma = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	617b      	str	r3, [r7, #20]
	DMA_Base_Registers * regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	613b      	str	r3, [r7, #16]

	// Disable the peripheral
	hdma->CR &= ~DMA_SxCR_EN;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f023 0201 	bic.w	r2, r3, #1
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	601a      	str	r2, [r3, #0]

	// Clear all interrupt flags at correct offset within the register
	regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	223f      	movs	r2, #63	; 0x3f
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	609a      	str	r2, [r3, #8]

	// Clear DBM bit
	hdma->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	601a      	str	r2, [r3, #0]

	// Configure DMA Stream data length
	hdma->NDTR = DataLength;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	605a      	str	r2, [r3, #4]

	if((hdma->CR & DMA_SxCR_DIR) == DMA_MEMORY_TO_PERIPH) {
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ae4:	2b40      	cmp	r3, #64	; 0x40
 8006ae6:	d106      	bne.n	8006af6 <BSP_STM32_DMA_StartIT+0x62>
		// Memory to Peripheral
		// Configure DMA Stream source address
		hdma->PAR = DstAddress;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	609a      	str	r2, [r3, #8]

		// Configure DMA Stream destination address
		hdma->M0AR = SrcAddress;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	60da      	str	r2, [r3, #12]
 8006af4:	e005      	b.n	8006b02 <BSP_STM32_DMA_StartIT+0x6e>
	} else {
		// Peripheral to Memory
		// Configure DMA Stream destination address
	    hdma->PAR = SrcAddress;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	609a      	str	r2, [r3, #8]

	    // Configure DMA Stream source address
	    hdma->M0AR = DstAddress;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	60da      	str	r2, [r3, #12]
	}

	// Enable Common interrupts
	MODIFY_REG(hdma->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT));
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f043 021e 	orr.w	r2, r3, #30
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	601a      	str	r2, [r3, #0]

	// Enable DMA
	hdma->CR |=  DMA_SxCR_EN;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f043 0201 	orr.w	r2, r3, #1
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <BSP_STM32_DMA_GetCounter>:
    dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;

	return BSP_OK;
}

uint32_t BSP_STM32_DMA_GetCounter(DMA_Stream_TypeDef *hdma) {
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	return hdma->NDTR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <DMA_Stream_IRQHandler>:



// ************* DMA INT handlers *************

void DMA_Stream_IRQHandler(TxRxContext_TypeDef * ctx) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	// Callback management
	void (* pCallback_TE)(TxRxContext_TypeDef * ctx);
	void (* pCallback_HT)(TxRxContext_TypeDef * ctx);
	void (* pCallback_TC)(TxRxContext_TypeDef * ctx);

	pCallback_TE = (void *)ctx->callback_TE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	61fb      	str	r3, [r7, #28]
	pCallback_HT = (void *)ctx->callback_HT;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	61bb      	str	r3, [r7, #24]
	pCallback_TC = (void *)ctx->callback_TC;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	617b      	str	r3, [r7, #20]

	// Accessing DMA registers
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	613b      	str	r3, [r7, #16]
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	60fb      	str	r3, [r7, #12]

	// Transfer Error Interrupt management
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d026      	beq.n	8006bc0 <DMA_Stream_IRQHandler+0x80>
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	2108      	movs	r1, #8
 8006b80:	fa01 f303 	lsl.w	r3, r1, r3
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01a      	beq.n	8006bc0 <DMA_Stream_IRQHandler+0x80>
        // Disable the transfer error interrupt
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f023 0204 	bic.w	r2, r3, #4
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]
        // Clear the transfer error flag
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 031f 	and.w	r3, r3, #31
 8006b9e:	2208      	movs	r2, #8
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	609a      	str	r2, [r3, #8]
	    // Disable DMA
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	601a      	str	r2, [r3, #0]

	    // Execute error callback if set
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <DMA_Stream_IRQHandler+0x80>
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
	}

	// FIFO Error Interrupt management
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d026      	beq.n	8006c1a <DMA_Stream_IRQHandler+0xda>
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01a      	beq.n	8006c1a <DMA_Stream_IRQHandler+0xda>
        // Disable the FIFO error interrupt
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	615a      	str	r2, [r3, #20]
		// Clear the FIFO error flag
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	609a      	str	r2, [r3, #8]
	    // Disable DMA
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f023 0201 	bic.w	r2, r3, #1
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]

	    // Execute error callback if set
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <DMA_Stream_IRQHandler+0xda>
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
	}

	// Direct Mode Error Interrupt management
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01a      	beq.n	8006c5c <DMA_Stream_IRQHandler+0x11c>
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	2104      	movs	r1, #4
 8006c34:	fa01 f303 	lsl.w	r3, r1, r3
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00e      	beq.n	8006c5c <DMA_Stream_IRQHandler+0x11c>
        // Clear the direct mode error flag
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	2204      	movs	r2, #4
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	609a      	str	r2, [r3, #8]

        // Execute error callback if set
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <DMA_Stream_IRQHandler+0x11c>
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
	}

	// Half Transfer Complete Interrupt management
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d026      	beq.n	8006cb6 <DMA_Stream_IRQHandler+0x176>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2110      	movs	r1, #16
 8006c76:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01a      	beq.n	8006cb6 <DMA_Stream_IRQHandler+0x176>
        // Clear the half transfer complete flag
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	2210      	movs	r2, #16
 8006c8a:	409a      	lsls	r2, r3
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	609a      	str	r2, [r3, #8]
        // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <DMA_Stream_IRQHandler+0x168>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f023 0208 	bic.w	r2, r3, #8
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]

        // Execute half transfer callback if set
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <DMA_Stream_IRQHandler+0x176>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3

	}

	// Transfer Complete Interrupt management
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d026      	beq.n	8006d10 <DMA_Stream_IRQHandler+0x1d0>
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	2120      	movs	r1, #32
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01a      	beq.n	8006d10 <DMA_Stream_IRQHandler+0x1d0>
		// Clear the transfer complete flag
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	409a      	lsls	r2, r3
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	609a      	str	r2, [r3, #8]
		// Disable the transfer complete interrupt if the DMA mode is not CIRCULAR
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d105      	bne.n	8006d02 <DMA_Stream_IRQHandler+0x1c2>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 0210 	bic.w	r2, r3, #16
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]

        // Execute transfer completed callback if set
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <DMA_Stream_IRQHandler+0x1d0>
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
	}

}
 8006d10:	bf00      	nop
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler() { if (DMACTXvectors[0x00]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x00])); }
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <DMA1_Stream0_IRQHandler+0x1c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d004      	beq.n	8006d2e <DMA1_Stream0_IRQHandler+0x16>
 8006d24:	4b03      	ldr	r3, [pc, #12]	; (8006d34 <DMA1_Stream0_IRQHandler+0x1c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ff09 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006d2e:	bf00      	nop
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	240003f8 	.word	0x240003f8

08006d38 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler() { if (DMACTXvectors[0x01]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x01])); }
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <DMA1_Stream1_IRQHandler+0x1c>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d004      	beq.n	8006d4e <DMA1_Stream1_IRQHandler+0x16>
 8006d44:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <DMA1_Stream1_IRQHandler+0x1c>)
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff fef9 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006d4e:	bf00      	nop
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	240003f8 	.word	0x240003f8

08006d58 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler() { if (DMACTXvectors[0x02]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x02])); }
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <DMA1_Stream2_IRQHandler+0x1c>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <DMA1_Stream2_IRQHandler+0x16>
 8006d64:	4b03      	ldr	r3, [pc, #12]	; (8006d74 <DMA1_Stream2_IRQHandler+0x1c>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff fee9 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	240003f8 	.word	0x240003f8

08006d78 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler() { if (DMACTXvectors[0x03]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x03])); }
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <DMA1_Stream3_IRQHandler+0x1c>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <DMA1_Stream3_IRQHandler+0x16>
 8006d84:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <DMA1_Stream3_IRQHandler+0x1c>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fed9 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	240003f8 	.word	0x240003f8

08006d98 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler() { if (DMACTXvectors[0x04]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x04])); }
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <DMA1_Stream4_IRQHandler+0x1c>)
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <DMA1_Stream4_IRQHandler+0x16>
 8006da4:	4b03      	ldr	r3, [pc, #12]	; (8006db4 <DMA1_Stream4_IRQHandler+0x1c>)
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fec9 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006dae:	bf00      	nop
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	240003f8 	.word	0x240003f8

08006db8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler() { if (DMACTXvectors[0x05]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x05])); }
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <DMA1_Stream5_IRQHandler+0x1c>)
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <DMA1_Stream5_IRQHandler+0x16>
 8006dc4:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <DMA1_Stream5_IRQHandler+0x1c>)
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff feb9 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006dce:	bf00      	nop
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	240003f8 	.word	0x240003f8

08006dd8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler() { if (DMACTXvectors[0x06]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x06])); }
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <DMA1_Stream6_IRQHandler+0x1c>)
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <DMA1_Stream6_IRQHandler+0x16>
 8006de4:	4b03      	ldr	r3, [pc, #12]	; (8006df4 <DMA1_Stream6_IRQHandler+0x1c>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff fea9 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006dee:	bf00      	nop
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	240003f8 	.word	0x240003f8

08006df8 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler() { if (DMACTXvectors[0x07]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x07])); }
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <DMA1_Stream7_IRQHandler+0x1c>)
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <DMA1_Stream7_IRQHandler+0x16>
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <DMA1_Stream7_IRQHandler+0x1c>)
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fe99 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006e0e:	bf00      	nop
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	240003f8 	.word	0x240003f8

08006e18 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler() { if (DMACTXvectors[0x08]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x08])); }
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <DMA2_Stream0_IRQHandler+0x1c>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <DMA2_Stream0_IRQHandler+0x16>
 8006e24:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <DMA2_Stream0_IRQHandler+0x1c>)
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff fe89 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006e2e:	bf00      	nop
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	240003f8 	.word	0x240003f8

08006e38 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler() { if (DMACTXvectors[0x09]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x09])); }
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <DMA2_Stream1_IRQHandler+0x1c>)
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <DMA2_Stream1_IRQHandler+0x16>
 8006e44:	4b03      	ldr	r3, [pc, #12]	; (8006e54 <DMA2_Stream1_IRQHandler+0x1c>)
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff fe79 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006e4e:	bf00      	nop
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	240003f8 	.word	0x240003f8

08006e58 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler() { if (DMACTXvectors[0x0A]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0A])); }
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <DMA2_Stream2_IRQHandler+0x1c>)
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <DMA2_Stream2_IRQHandler+0x16>
 8006e64:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <DMA2_Stream2_IRQHandler+0x1c>)
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff fe69 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006e6e:	bf00      	nop
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	240003f8 	.word	0x240003f8

08006e78 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler() { if (DMACTXvectors[0x0B]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0B])); }
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <DMA2_Stream3_IRQHandler+0x1c>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <DMA2_Stream3_IRQHandler+0x16>
 8006e84:	4b03      	ldr	r3, [pc, #12]	; (8006e94 <DMA2_Stream3_IRQHandler+0x1c>)
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fe59 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	240003f8 	.word	0x240003f8

08006e98 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler() { if (DMACTXvectors[0x0C]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0C])); }
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <DMA2_Stream4_IRQHandler+0x1c>)
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <DMA2_Stream4_IRQHandler+0x16>
 8006ea4:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <DMA2_Stream4_IRQHandler+0x1c>)
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fe49 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006eae:	bf00      	nop
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	240003f8 	.word	0x240003f8

08006eb8 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler() { if (DMACTXvectors[0x0D]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0D])); }
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <DMA2_Stream5_IRQHandler+0x1c>)
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <DMA2_Stream5_IRQHandler+0x16>
 8006ec4:	4b03      	ldr	r3, [pc, #12]	; (8006ed4 <DMA2_Stream5_IRQHandler+0x1c>)
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fe39 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006ece:	bf00      	nop
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	240003f8 	.word	0x240003f8

08006ed8 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler() { if (DMACTXvectors[0x0E]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0E])); }
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <DMA2_Stream6_IRQHandler+0x1c>)
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <DMA2_Stream6_IRQHandler+0x16>
 8006ee4:	4b03      	ldr	r3, [pc, #12]	; (8006ef4 <DMA2_Stream6_IRQHandler+0x1c>)
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff fe29 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006eee:	bf00      	nop
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	240003f8 	.word	0x240003f8

08006ef8 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler() { if (DMACTXvectors[0x0F]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0F])); }
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <DMA2_Stream7_IRQHandler+0x1c>)
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <DMA2_Stream7_IRQHandler+0x16>
 8006f04:	4b03      	ldr	r3, [pc, #12]	; (8006f14 <DMA2_Stream7_IRQHandler+0x1c>)
 8006f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fe19 	bl	8006b40 <DMA_Stream_IRQHandler>
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	240003f8 	.word	0x240003f8

08006f18 <BSP_STM32_DMA2D_FillBuff>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_STM32_DMA2D.h"

uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4611      	mov	r1, r2
 8006f24:	461a      	mov	r2, r3
 8006f26:	460b      	mov	r3, r1
 8006f28:	80fb      	strh	r3, [r7, #6]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80bb      	strh	r3, [r7, #4]

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_R2M);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006f36:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	f023 0207 	bic.w	r2, r3, #7
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, (uint32_t)offsetline);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <BSP_STM32_DMA2D_FillBuff+0x90>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	8b3a      	ldrh	r2, [r7, #24]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), ((uint32_t)height | ((uint32_t)width << DMA2D_NLR_PL_Pos)));
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8006f66:	88b9      	ldrh	r1, [r7, #4]
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	63da      	str	r2, [r3, #60]	; 0x3c
	WRITE_REG(hdma2d->OCOLR, color);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	601a      	str	r2, [r3, #0]

	// Enable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f043 0201 	orr.w	r2, r3, #1
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	ffff0000 	.word	0xffff0000

08006fac <BSP_STM32_DMA2D_CopyBuf>:


uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	461a      	mov	r2, r3
 8006fba:	460b      	mov	r3, r1
 8006fbc:	80fb      	strh	r3, [r7, #6]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80bb      	strh	r3, [r7, #4]

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd2:	f023 0207 	bic.w	r2, r3, #7
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fe2:	4b1e      	ldr	r3, [pc, #120]	; (800705c <BSP_STM32_DMA2D_CopyBuf+0xb0>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40
	uint32_t regValue = colormode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFF << DMA2D_FGPFCCR_ALPHA_Pos);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff4:	617b      	str	r3, [r7, #20]
	uint32_t regMask  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA);
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	; (8007060 <BSP_STM32_DMA2D_CopyBuf+0xb4>)
 8006ff8:	613b      	str	r3, [r7, #16]
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	69da      	ldr	r2, [r3, #28]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	43db      	mvns	r3, r3
 8007002:	401a      	ands	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	431a      	orrs	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	61da      	str	r2, [r3, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 800700c:	8c3a      	ldrh	r2, [r7, #32]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	611a      	str	r2, [r3, #16]

	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800701a:	88b9      	ldrh	r1, [r7, #4]
 800701c:	88fa      	ldrh	r2, [r7, #6]
 800701e:	0412      	lsls	r2, r2, #16
 8007020:	430a      	orrs	r2, r1
 8007022:	431a      	orrs	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800702c:	63da      	str	r2, [r3, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	60da      	str	r2, [r3, #12]

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	601a      	str	r2, [r3, #0]
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f043 0201 	orr.w	r2, r3, #1
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	ffff0000 	.word	0xffff0000
 8007060:	ff03000f 	.word	0xff03000f

08007064 <BSP_STM32_DMA2D_CopyBufJPEG>:

uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4611      	mov	r1, r2
 8007070:	461a      	mov	r2, r3
 8007072:	460b      	mov	r3, r1
 8007074:	80fb      	strh	r3, [r7, #6]
 8007076:	4613      	mov	r3, r2
 8007078:	80bb      	strh	r3, [r7, #4]

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_PFC);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007082:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708e:	f023 0207 	bic.w	r2, r3, #7
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	431a      	orrs	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709e:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <BSP_STM32_DMA2D_CopyBufJPEG+0xb4>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80070a4:	431a      	orrs	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	641a      	str	r2, [r3, #64]	; 0x40

	uint32_t regValue = DMA2D_YCBCR | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFF << DMA2D_FGPFCCR_ALPHA_Pos) | (chroma << DMA2D_FGPFCCR_CSS_Pos);
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	049a      	lsls	r2, r3, #18
 80070ae:	4b1b      	ldr	r3, [pc, #108]	; (800711c <BSP_STM32_DMA2D_CopyBufJPEG+0xb8>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
	uint32_t regMask  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_CSS);
 80070b4:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <BSP_STM32_DMA2D_CopyBufJPEG+0xbc>)
 80070b6:	613b      	str	r3, [r7, #16]
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	69da      	ldr	r2, [r3, #28]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	43db      	mvns	r3, r3
 80070c0:	401a      	ands	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	61da      	str	r2, [r3, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 80070ca:	8c3a      	ldrh	r2, [r7, #32]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	611a      	str	r2, [r3, #16]

	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070d8:	88b9      	ldrh	r1, [r7, #4]
 80070da:	88fa      	ldrh	r2, [r7, #6]
 80070dc:	0412      	lsls	r2, r2, #16
 80070de:	430a      	orrs	r2, r1
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ea:	63da      	str	r2, [r3, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f0:	60da      	str	r2, [r3, #12]

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	601a      	str	r2, [r3, #0]
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	ffff0000 	.word	0xffff0000
 800711c:	ff01000b 	.word	0xff01000b
 8007120:	ff0f000f 	.word	0xff0f000f

08007124 <BSP_STM32_DMA2D_CopyBufBlend>:

uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	; 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4611      	mov	r1, r2
 8007130:	461a      	mov	r2, r3
 8007132:	460b      	mov	r3, r1
 8007134:	80fb      	strh	r3, [r7, #6]
 8007136:	4613      	mov	r3, r2
 8007138:	80bb      	strh	r3, [r7, #4]

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714e:	f023 0207 	bic.w	r2, r3, #7
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	431a      	orrs	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800715e:	4b2b      	ldr	r3, [pc, #172]	; (800720c <BSP_STM32_DMA2D_CopyBufBlend+0xe8>)
 8007160:	4013      	ands	r3, r2
 8007162:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007164:	431a      	orrs	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40

	uint32_t regValue1 = colormode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos);
 800716a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800716e:	061b      	lsls	r3, r3, #24
 8007170:	461a      	mov	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4313      	orrs	r3, r2
 8007176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800717a:	61fb      	str	r3, [r7, #28]
	uint32_t regMask1  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA);
 800717c:	4b24      	ldr	r3, [pc, #144]	; (8007210 <BSP_STM32_DMA2D_CopyBufBlend+0xec>)
 800717e:	61bb      	str	r3, [r7, #24]
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	43db      	mvns	r3, r3
 8007188:	401a      	ands	r2, r3
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	431a      	orrs	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	61da      	str	r2, [r3, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8007192:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	611a      	str	r2, [r3, #16]

	uint32_t regValue0 = colormode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFF << DMA2D_BGPFCCR_ALPHA_Pos);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800719e:	617b      	str	r3, [r7, #20]
	uint32_t regMask0  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA);
 80071a0:	4b1b      	ldr	r3, [pc, #108]	; (8007210 <BSP_STM32_DMA2D_CopyBufBlend+0xec>)
 80071a2:	613b      	str	r3, [r7, #16]
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	43db      	mvns	r3, r3
 80071ac:	401a      	ands	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24
	WRITE_REG(hdma2d->BGOR, dest_offsetline);
 80071b6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	619a      	str	r2, [r3, #24]

	WRITE_REG(hdma2d->BGMAR, dest_addr);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c0:	615a      	str	r2, [r3, #20]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80071ca:	88b9      	ldrh	r1, [r7, #4]
 80071cc:	88fa      	ldrh	r2, [r7, #6]
 80071ce:	0412      	lsls	r2, r2, #16
 80071d0:	430a      	orrs	r2, r1
 80071d2:	431a      	orrs	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071dc:	63da      	str	r2, [r3, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e2:	60da      	str	r2, [r3, #12]

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	601a      	str	r2, [r3, #0]
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f043 0201 	orr.w	r2, r3, #1
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3724      	adds	r7, #36	; 0x24
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	ffff0000 	.word	0xffff0000
 8007210:	ff03000f 	.word	0xff03000f

08007214 <BSP_STM32_DMA2D_IRQHandler>:


uint8_t BSP_STM32_DMA2D_IRQHandler(DMA2D_TypeDef * hdma2d) {
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	if (((hdma2d->ISR & DMA2D_ISR_TCIF) > 0) &&  ((hdma2d->CR & DMA2D_CR_TCIE) > 0)) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <BSP_STM32_DMA2D_IRQHandler+0x36>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <BSP_STM32_DMA2D_IRQHandler+0x36>

		// Disable the transfer complete interrupt
		hdma2d->CR &= ~(DMA2D_CR_TCIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]

		// Clear the transfer complete flag
		hdma2d->IFCR = DMA2D_IFCR_CTCIF;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	609a      	str	r2, [r3, #8]

		return BSP_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	e02e      	b.n	80072a8 <BSP_STM32_DMA2D_IRQHandler+0x94>
	}

	if (((hdma2d->ISR & DMA2D_ISR_TEIF) > 0) && ((hdma2d->CR & DMA2D_CR_TEIE) > 0)) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d010      	beq.n	8007278 <BSP_STM32_DMA2D_IRQHandler+0x64>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <BSP_STM32_DMA2D_IRQHandler+0x64>

		// Disable the transfer error interrupt
		hdma2d->CR &= ~(DMA2D_CR_TEIE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]

		// Clear the transfer error flag
		hdma2d->IFCR = DMA2D_IFCR_CTEIF;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	609a      	str	r2, [r3, #8]

		return BSP_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e017      	b.n	80072a8 <BSP_STM32_DMA2D_IRQHandler+0x94>
	}

	if (((hdma2d->ISR & DMA2D_ISR_CEIF) > 0) && ((hdma2d->CR & DMA2D_CR_CEIE) > 0)) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d010      	beq.n	80072a6 <BSP_STM32_DMA2D_IRQHandler+0x92>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <BSP_STM32_DMA2D_IRQHandler+0x92>

		// Disable the configuration error interrupt
		hdma2d->CR &= ~(DMA2D_CR_CEIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]

		// Clear the configuration error flag
		hdma2d->IFCR = DMA2D_IFCR_CCEIF;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2220      	movs	r2, #32
 80072a0:	609a      	str	r2, [r3, #8]

		return BSP_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <BSP_STM32_DMA2D_IRQHandler+0x94>
	}
	return BSP_ERROR;
 80072a6:	2301      	movs	r3, #1
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <BSP_STM32_GPIO_Init>:
#define EXTI_CPU1             (0x01000000U)
#define EXTI_CPU2             (0x02000000U)
#endif /*DUAL_CORE*/


uint8_t BSP_STM32_GPIO_Init(GPIO_TypeDef  *GPIOx, uint32_t Pins, uint32_t Mode, uint32_t Pull, uint32_t Speed, uint32_t Alternate) {
 80072b4:	b480      	push	{r7}
 80072b6:	b089      	sub	sp, #36	; 0x24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]

	uint32_t position = 0x00U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
	EXTI_Core_TypeDef *EXTI_CurrentCPU;

	#if defined(DUAL_CORE) && defined(CORE_CM4)
		EXTI_CurrentCPU = EXTI_D2; // EXTI for CM4 CPU
	#else
		EXTI_CurrentCPU = EXTI_D1; // EXTI for CM7 CPU
 80072c6:	4b7c      	ldr	r3, [pc, #496]	; (80074b8 <BSP_STM32_GPIO_Init+0x204>)
 80072c8:	617b      	str	r3, [r7, #20]
	#endif

	// Configure the port pins
	while (((Pins) >> position) != 0x00U) {
 80072ca:	e174      	b.n	80075b6 <BSP_STM32_GPIO_Init+0x302>

		// Get current io position
	    iocurrent = (Pins) & (1UL << position);
 80072cc:	2201      	movs	r2, #1
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]

	    if (iocurrent != 0x00U) {
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 8167 	beq.w	80075b0 <BSP_STM32_GPIO_Init+0x2fc>

	      // --------------------- GPIO Mode Configuration ------------------------
	      // In case of Output or Alternate function mode selection

	      if (((Mode & GPIO_MODE) == MODE_OUTPUT) || ((Mode & GPIO_MODE) == MODE_AF)) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d004      	beq.n	80072f6 <BSP_STM32_GPIO_Init+0x42>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d12e      	bne.n	8007354 <BSP_STM32_GPIO_Init+0xa0>

	    	  // Configure the IO Speed
	    	  temp = GPIOx->OSPEEDR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	61bb      	str	r3, [r7, #24]
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	2203      	movs	r2, #3
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43db      	mvns	r3, r3
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	4013      	ands	r3, r2
 800730c:	61bb      	str	r3, [r7, #24]
	    	  temp |= (Speed << (position * 2U));
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007314:	fa02 f303 	lsl.w	r3, r2, r3
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	4313      	orrs	r3, r2
 800731c:	61bb      	str	r3, [r7, #24]
	    	  GPIOx->OSPEEDR = temp;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	609a      	str	r2, [r3, #8]

	    	  // Configure the IO Output Type
	    	  temp = GPIOx->OTYPER;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	61bb      	str	r3, [r7, #24]
	    	  temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800732a:	2201      	movs	r2, #1
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43db      	mvns	r3, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4013      	ands	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
	    	  temp |= (((Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	091b      	lsrs	r3, r3, #4
 800733e:	f003 0201 	and.w	r2, r3, #1
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	fa02 f303 	lsl.w	r3, r2, r3
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	4313      	orrs	r3, r2
 800734c:	61bb      	str	r3, [r7, #24]
	    	  GPIOx->OTYPER = temp;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	605a      	str	r2, [r3, #4]
	      }

	      if ((Mode & GPIO_MODE) != MODE_ANALOG) {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b03      	cmp	r3, #3
 800735c:	d016      	beq.n	800738c <BSP_STM32_GPIO_Init+0xd8>

	    	  // Activate the Pull-up or Pull down resistor for the current IO
	    	  temp = GPIOx->PUPDR;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	61bb      	str	r3, [r7, #24]
	    	  temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	2203      	movs	r2, #3
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	43db      	mvns	r3, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4013      	ands	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
	    	  temp |= ((Pull) << (position * 2U));
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	4313      	orrs	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
	    	  GPIOx->PUPDR = temp;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	60da      	str	r2, [r3, #12]

	      }

	      // In case of Alternate function mode selection
	      if ((Mode & GPIO_MODE) == MODE_AF) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d122      	bne.n	80073dc <BSP_STM32_GPIO_Init+0x128>

	    	  // Configure Alternate function mapped with the current IO
	    	  temp = GPIOx->AFR[position >> 3U];
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	08da      	lsrs	r2, r3, #3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3208      	adds	r2, #8
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	61bb      	str	r3, [r7, #24]
	    	  temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	220f      	movs	r2, #15
 80073ae:	fa02 f303 	lsl.w	r3, r2, r3
 80073b2:	43db      	mvns	r3, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4013      	ands	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
	    	  temp |= ((Alternate) << ((position & 0x07U) * 4U));
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	61bb      	str	r3, [r7, #24]
	    	  GPIOx->AFR[position >> 3U] = temp;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	08da      	lsrs	r2, r3, #3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3208      	adds	r2, #8
 80073d6:	69b9      	ldr	r1, [r7, #24]
 80073d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	      }

	      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
	      temp = GPIOx->MODER;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	61bb      	str	r3, [r7, #24]
	      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	2203      	movs	r2, #3
 80073e8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ec:	43db      	mvns	r3, r3
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	4013      	ands	r3, r2
 80073f2:	61bb      	str	r3, [r7, #24]
	      temp |= ((Mode & GPIO_MODE) << (position * 2U));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f003 0203 	and.w	r2, r3, #3
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	4313      	orrs	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
	      GPIOx->MODER = temp;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	601a      	str	r2, [r3, #0]

	      //--------------------- EXTI Mode Configuration ------------------------
	      // Configure the External Interrupt or event for the current IO

	      if ((Mode & EXTI_MODE) != 0x00U) {
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80cb 	beq.w	80075b0 <BSP_STM32_GPIO_Init+0x2fc>

	        temp = SYSCFG->EXTICR[position >> 2U];
 800741a:	4a28      	ldr	r2, [pc, #160]	; (80074bc <BSP_STM32_GPIO_Init+0x208>)
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	089b      	lsrs	r3, r3, #2
 8007420:	3302      	adds	r3, #2
 8007422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007426:	61bb      	str	r3, [r7, #24]
	        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	220f      	movs	r2, #15
 8007432:	fa02 f303 	lsl.w	r3, r2, r3
 8007436:	43db      	mvns	r3, r3
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	4013      	ands	r3, r2
 800743c:	61bb      	str	r3, [r7, #24]
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4a1f      	ldr	r2, [pc, #124]	; (80074c0 <BSP_STM32_GPIO_Init+0x20c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d050      	beq.n	80074e8 <BSP_STM32_GPIO_Init+0x234>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <BSP_STM32_GPIO_Init+0x210>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d031      	beq.n	80074b2 <BSP_STM32_GPIO_Init+0x1fe>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <BSP_STM32_GPIO_Init+0x214>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d02b      	beq.n	80074ae <BSP_STM32_GPIO_Init+0x1fa>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <BSP_STM32_GPIO_Init+0x218>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d025      	beq.n	80074aa <BSP_STM32_GPIO_Init+0x1f6>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <BSP_STM32_GPIO_Init+0x21c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01f      	beq.n	80074a6 <BSP_STM32_GPIO_Init+0x1f2>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <BSP_STM32_GPIO_Init+0x220>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d019      	beq.n	80074a2 <BSP_STM32_GPIO_Init+0x1ee>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <BSP_STM32_GPIO_Init+0x224>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <BSP_STM32_GPIO_Init+0x1ea>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4a18      	ldr	r2, [pc, #96]	; (80074dc <BSP_STM32_GPIO_Init+0x228>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00d      	beq.n	800749a <BSP_STM32_GPIO_Init+0x1e6>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <BSP_STM32_GPIO_Init+0x22c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d007      	beq.n	8007496 <BSP_STM32_GPIO_Init+0x1e2>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <BSP_STM32_GPIO_Init+0x230>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d101      	bne.n	8007492 <BSP_STM32_GPIO_Init+0x1de>
 800748e:	2309      	movs	r3, #9
 8007490:	e02b      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 8007492:	230a      	movs	r3, #10
 8007494:	e029      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 8007496:	2308      	movs	r3, #8
 8007498:	e027      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 800749a:	2307      	movs	r3, #7
 800749c:	e025      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 800749e:	2306      	movs	r3, #6
 80074a0:	e023      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 80074a2:	2305      	movs	r3, #5
 80074a4:	e021      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 80074a6:	2304      	movs	r3, #4
 80074a8:	e01f      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 80074aa:	2303      	movs	r3, #3
 80074ac:	e01d      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e01b      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e019      	b.n	80074ea <BSP_STM32_GPIO_Init+0x236>
 80074b6:	bf00      	nop
 80074b8:	58000080 	.word	0x58000080
 80074bc:	58000400 	.word	0x58000400
 80074c0:	58020000 	.word	0x58020000
 80074c4:	58020400 	.word	0x58020400
 80074c8:	58020800 	.word	0x58020800
 80074cc:	58020c00 	.word	0x58020c00
 80074d0:	58021000 	.word	0x58021000
 80074d4:	58021400 	.word	0x58021400
 80074d8:	58021800 	.word	0x58021800
 80074dc:	58021c00 	.word	0x58021c00
 80074e0:	58022000 	.word	0x58022000
 80074e4:	58022400 	.word	0x58022400
 80074e8:	2300      	movs	r3, #0
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	f002 0203 	and.w	r2, r2, #3
 80074f0:	0092      	lsls	r2, r2, #2
 80074f2:	4093      	lsls	r3, r2
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
	        SYSCFG->EXTICR[position >> 2U] = temp;
 80074fa:	4936      	ldr	r1, [pc, #216]	; (80075d4 <BSP_STM32_GPIO_Init+0x320>)
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	089b      	lsrs	r3, r3, #2
 8007500:	3302      	adds	r3, #2
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	        // Clear Rising Falling edge configuration
	        temp = EXTI->RTSR1;
 8007508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	61bb      	str	r3, [r7, #24]
	        temp &= ~(iocurrent);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	43db      	mvns	r3, r3
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	4013      	ands	r3, r2
 8007518:	61bb      	str	r3, [r7, #24]
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <BSP_STM32_GPIO_Init+0x278>
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	61bb      	str	r3, [r7, #24]
	        EXTI->RTSR1 = temp;
 800752c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	6013      	str	r3, [r2, #0]

	        temp = EXTI->FTSR1;
 8007534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	61bb      	str	r3, [r7, #24]
	        temp &= ~(iocurrent);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	43db      	mvns	r3, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	4013      	ands	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <BSP_STM32_GPIO_Init+0x2a4>
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
	        EXTI->FTSR1 = temp;
 8007558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	6053      	str	r3, [r2, #4]

	        temp = EXTI_CurrentCPU->EMR1;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	61bb      	str	r3, [r7, #24]
	        temp &= ~(iocurrent);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	43db      	mvns	r3, r3
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	4013      	ands	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <BSP_STM32_GPIO_Init+0x2ce>
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
	        EXTI_CurrentCPU->EMR1 = temp;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	605a      	str	r2, [r3, #4]

	        // Clear EXTI line configuration
	        temp = EXTI_CurrentCPU->IMR1;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	61bb      	str	r3, [r7, #24]
	        temp &= ~(iocurrent);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	43db      	mvns	r3, r3
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	4013      	ands	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <BSP_STM32_GPIO_Init+0x2f6>
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
	        EXTI_CurrentCPU->IMR1 = temp;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	601a      	str	r2, [r3, #0]
	      }
	    }

	    position++;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	3301      	adds	r3, #1
 80075b4:	61fb      	str	r3, [r7, #28]
	while (((Pins) >> position) != 0x00U) {
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	fa22 f303 	lsr.w	r3, r2, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f47f ae84 	bne.w	80072cc <BSP_STM32_GPIO_Init+0x18>
	  }

	return BSP_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3724      	adds	r7, #36	; 0x24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	58000400 	.word	0x58000400

080075d8 <BSP_STM32_GPIO_ReadPin>:


uint32_t BSP_STM32_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin) {
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
	return ((GPIOx->IDR & GPIO_Pin) > 0)?GPIO_PIN_SET:GPIO_PIN_RESET;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <BSP_STM32_GPIO_ReadPin+0x1a>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <BSP_STM32_GPIO_ReadPin+0x1c>
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <BSP_STM32_GPIO_WritePin>:

uint8_t BSP_STM32_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin, uint32_t PinState) {
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
	GPIOx->BSRR=((PinState==GPIO_PIN_SET)?GPIO_Pin:GPIO_Pin << GPIO_NUMBER);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d002      	beq.n	8007618 <BSP_STM32_GPIO_WritePin+0x18>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	041b      	lsls	r3, r3, #16
 8007616:	e000      	b.n	800761a <BSP_STM32_GPIO_WritePin+0x1a>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	6193      	str	r3, [r2, #24]
	return BSP_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <BSP_STM32_HSEM_FastTake>:
	if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK)) return BSP_OK;
	return BSP_ERROR;
}


uint8_t BSP_STM32_HSEM_FastTake(uint32_t SemID) {
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	// Validate input parameters
	if (SemID > 31) return BSP_ERROR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b1f      	cmp	r3, #31
 8007638:	d901      	bls.n	800763e <BSP_STM32_HSEM_FastTake+0x12>
 800763a:	2301      	movs	r3, #1
 800763c:	e00a      	b.n	8007654 <BSP_STM32_HSEM_FastTake+0x28>

	// Read the RLR register to take the semaphore
	if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK)) return BSP_OK;
 800763e:	4a08      	ldr	r2, [pc, #32]	; (8007660 <BSP_STM32_HSEM_FastTake+0x34>)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3320      	adds	r3, #32
 8007644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007648:	4a06      	ldr	r2, [pc, #24]	; (8007664 <BSP_STM32_HSEM_FastTake+0x38>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d101      	bne.n	8007652 <BSP_STM32_HSEM_FastTake+0x26>
 800764e:	2300      	movs	r3, #0
 8007650:	e000      	b.n	8007654 <BSP_STM32_HSEM_FastTake+0x28>
	return BSP_ERROR;
 8007652:	2301      	movs	r3, #1
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	58026400 	.word	0x58026400
 8007664:	80000300 	.word	0x80000300

08007668 <BSP_STM32_HSEM_FastRelease>:
	// Clear the semaphore by writing to the R register: the MasterID, the ProcessID and take bit = 0
	HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
	return BSP_OK;
}

uint8_t BSP_STM32_HSEM_FastRelease(uint32_t SemID) {
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	// Validate input parameters
	if (SemID > 31) return BSP_ERROR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b1f      	cmp	r3, #31
 8007674:	d901      	bls.n	800767a <BSP_STM32_HSEM_FastRelease+0x12>
 8007676:	2301      	movs	r3, #1
 8007678:	e006      	b.n	8007688 <BSP_STM32_HSEM_FastRelease+0x20>

	// Clear the semaphore by writing to the R register: the MasterID, the ProcessID = 0 and take bit = 0
	HSEM->R[SemID] = (HSEM_CR_COREID_CURRENT);
 800767a:	4a06      	ldr	r2, [pc, #24]	; (8007694 <BSP_STM32_HSEM_FastRelease+0x2c>)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007682:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return BSP_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	58026400 	.word	0x58026400

08007698 <_I2C_MemReadIT>:

/*******************************************************************
* Private Functions
 *******************************************************************/

uint8_t _I2C_MemReadIT(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4611      	mov	r1, r2
 80076a4:	461a      	mov	r2, r3
 80076a6:	460b      	mov	r3, r1
 80076a8:	80fb      	strh	r3, [r7, #6]
 80076aa:	4613      	mov	r3, r2
 80076ac:	717b      	strb	r3, [r7, #5]

	#define I2C_NO_OPTION_FRAME     (0xFFFF0000U)

	I2CContext_TypeDef * i2c_ctx = (I2CContext_TypeDef *)ctx->ctxmem;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3328      	adds	r3, #40	; 0x28
 80076b2:	617b      	str	r3, [r7, #20]

	i2c_ctx->pData = pData;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	601a      	str	r2, [r3, #0]
	i2c_ctx->size = Size;
 80076ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	605a      	str	r2, [r3, #4]
	i2c_ctx->index = 0xFFFFFFFFU;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	609a      	str	r2, [r3, #8]
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	4a11      	ldr	r2, [pc, #68]	; (8007710 <_I2C_MemReadIT+0x78>)
 80076cc:	60da      	str	r2, [r3, #12]
	i2c_ctx->devaddr = DevAddress;
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	611a      	str	r2, [r3, #16]

	// Assuming that memory address size is 8Bit (only use case in this project)
	hi2c->TXDR = MemAddress;
 80076d4:	797a      	ldrb	r2, [r7, #5]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	629a      	str	r2, [r3, #40]	; 0x28

	// Declaration of tmp to prevent undefined behavior of volatile usage
	uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | ((1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE) & (~0x80000000U));
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076e0:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
 80076e4:	613b      	str	r3, [r7, #16]

	// Update CR2 register
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <_I2C_MemReadIT+0x7c>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	431a      	orrs	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	605a      	str	r2, [r3, #4]

	// Enable I2C Interrupts
	hi2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_TCIE | I2C_CR1_STOPIE | I2C_CR1_NACKIE | I2C_CR1_TXIE | I2C_CR1_RXIE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f043 02f6 	orr.w	r2, r3, #246	; 0xf6
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	ffff0000 	.word	0xffff0000
 8007714:	fc009800 	.word	0xfc009800

08007718 <_I2C_MemReadDMA>:


uint8_t _I2C_MemReadDMA(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4611      	mov	r1, r2
 8007724:	461a      	mov	r2, r3
 8007726:	460b      	mov	r3, r1
 8007728:	80fb      	strh	r3, [r7, #6]
 800772a:	4613      	mov	r3, r2
 800772c:	717b      	strb	r3, [r7, #5]

	#define I2C_NO_OPTION_FRAME     (0xFFFF0000U)

	I2CContext_TypeDef * i2c_ctx = (I2CContext_TypeDef *)ctx->ctxmem;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	3328      	adds	r3, #40	; 0x28
 8007732:	617b      	str	r3, [r7, #20]

	i2c_ctx->pData = pData;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	6a3a      	ldr	r2, [r7, #32]
 8007738:	601a      	str	r2, [r3, #0]
	i2c_ctx->size = Size;
 800773a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	605a      	str	r2, [r3, #4]
	i2c_ctx->index = 0xFFFFFFFFU;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f04f 32ff 	mov.w	r2, #4294967295
 8007746:	609a      	str	r2, [r3, #8]
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	4a1d      	ldr	r2, [pc, #116]	; (80077c0 <_I2C_MemReadDMA+0xa8>)
 800774c:	60da      	str	r2, [r3, #12]
	i2c_ctx->devaddr = DevAddress;
 800774e:	88fa      	ldrh	r2, [r7, #6]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	611a      	str	r2, [r3, #16]

	// Assuming that memory address size is 8Bit (only use case in this project)
	hi2c->TXDR = MemAddress;
 8007754:	797a      	ldrb	r2, [r7, #5]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	629a      	str	r2, [r3, #40]	; 0x28

	// Enable the DMA stream or channel depends on Instance
	switch (ctx->dma_mode) {
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d002      	beq.n	8007768 <_I2C_MemReadDMA+0x50>
 8007762:	2b02      	cmp	r3, #2
 8007764:	d009      	beq.n	800777a <_I2C_MemReadDMA+0x62>
 8007766:	e011      	b.n	800778c <_I2C_MemReadDMA+0x74>
	case TXRX_CTX_MODE_DMA:
		BSP_STM32_DMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3324      	adds	r3, #36	; 0x24
 800776c:	4619      	mov	r1, r3
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007772:	68b8      	ldr	r0, [r7, #8]
 8007774:	f7ff f98e 	bl	8006a94 <BSP_STM32_DMA_StartIT>
		break;
 8007778:	e008      	b.n	800778c <_I2C_MemReadDMA+0x74>
	case TXRX_CTX_MODE_BDMA:
		BSP_BDMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3324      	adds	r3, #36	; 0x24
 800777e:	4619      	mov	r1, r3
 8007780:	6a3a      	ldr	r2, [r7, #32]
 8007782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007784:	68b8      	ldr	r0, [r7, #8]
 8007786:	f7fe fe1b 	bl	80063c0 <BSP_BDMA_StartIT>
		break;
 800778a:	bf00      	nop
	}


	// Declaration of tmp to prevent undefined behavior of volatile usage
	uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | ((1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE) & (~0x80000000U));
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007792:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
 8007796:	613b      	str	r3, [r7, #16]

	// Update CR2 register
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <_I2C_MemReadDMA+0xac>)
 800779e:	4013      	ands	r3, r2
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	605a      	str	r2, [r3, #4]

	// Enable I2C Interrupts
	hi2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_TCIE | I2C_CR1_STOPIE | I2C_CR1_NACKIE | I2C_CR1_TXIE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f043 02f2 	orr.w	r2, r3, #242	; 0xf2
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	ffff0000 	.word	0xffff0000
 80077c4:	fc009800 	.word	0xfc009800

080077c8 <_I2C_IRQHandler_IT>:


uint8_t _I2C_IRQHandler_IT(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
 80077c8:	b480      	push	{r7}
 80077ca:	b089      	sub	sp, #36	; 0x24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]

	I2CContext_TypeDef * i2c_ctx = (I2CContext_TypeDef *)ctx->ctxmem;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	3328      	adds	r3, #40	; 0x28
 80077d6:	61fb      	str	r3, [r7, #28]

	// Get current IT Flags and IT sources value
	uint32_t itflags   = hi2c->ISR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	61bb      	str	r3, [r7, #24]
	uint32_t itsources = hi2c->CR1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	617b      	str	r3, [r7, #20]

	uint32_t direction = (uint32_t)(0x80000000U | I2C_CR2_START); //Generate start write
 80077e4:	4b40      	ldr	r3, [pc, #256]	; (80078e8 <_I2C_IRQHandler_IT+0x120>)
 80077e6:	613b      	str	r3, [r7, #16]

	// Handling errors
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01e      	beq.n	8007830 <_I2C_IRQHandler_IT+0x68>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d019      	beq.n	8007830 <_I2C_IRQHandler_IT+0x68>
	    // Clear NACK Flag
	    hi2c->ICR = I2C_ICR_NACKCF;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2210      	movs	r2, #16
 8007800:	61da      	str	r2, [r3, #28]

	    // Flush TX register
	    // If a pending TXIS flag is set
	    // Write a dummy data in TXDR to clear it
	    if ((hi2c->ISR & I2C_ISR_TXIS) > 0) hi2c->TXDR = 0x00U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <_I2C_IRQHandler_IT+0x4c>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	629a      	str	r2, [r3, #40]	; 0x28

	    // Flush TX register if not empty
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d105      	bne.n	800782c <_I2C_IRQHandler_IT+0x64>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	f043 0201 	orr.w	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	619a      	str	r2, [r3, #24]

	    return BSP_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e054      	b.n	80078da <_I2C_IRQHandler_IT+0x112>
	}

	// Initiate reading from memory
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d025      	beq.n	8007886 <_I2C_IRQHandler_IT+0xbe>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d020      	beq.n	8007886 <_I2C_IRQHandler_IT+0xbe>

		direction = (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN);
 8007844:	4b29      	ldr	r3, [pc, #164]	; (80078ec <_I2C_IRQHandler_IT+0x124>)
 8007846:	613b      	str	r3, [r7, #16]

		// Set NBYTES to write and generate RESTART
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	041b      	lsls	r3, r3, #16
 8007856:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800785a:	431a      	orrs	r2, r3
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8007864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007868:	60fb      	str	r3, [r7, #12]
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	0d5b      	lsrs	r3, r3, #21
 8007872:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007876:	4b1e      	ldr	r3, [pc, #120]	; (80078f0 <_I2C_IRQHandler_IT+0x128>)
 8007878:	430b      	orrs	r3, r1
 800787a:	43db      	mvns	r3, r3
 800787c:	401a      	ands	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	605a      	str	r2, [r3, #4]
	}

	// Read one byte from memory
	if (((itflags & I2C_ISR_RXNE) > 0) && ((itsources & I2C_CR1_RXIE) > 0)) {
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d014      	beq.n	80078ba <_I2C_IRQHandler_IT+0xf2>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00f      	beq.n	80078ba <_I2C_IRQHandler_IT+0xf2>

		// Clear the flag
	    // Read data from RXDR
	    *i2c_ctx->pData = (uint8_t)hi2c->RXDR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	701a      	strb	r2, [r3, #0]

	    // Increment Buffer pointer
	    i2c_ctx->pData++;
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	601a      	str	r2, [r3, #0]
	    i2c_ctx->size--;
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	605a      	str	r2, [r3, #4]
	}

	// Completion of reading
	if (((itflags & I2C_ISR_STOPF) > 0) && ((itsources & I2C_CR1_STOPIE) > 0)) {
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <_I2C_IRQHandler_IT+0x110>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <_I2C_IRQHandler_IT+0x110>

		// Clear the flag
		hi2c->ICR = I2C_ICR_STOPCF;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	61da      	str	r2, [r3, #28]

		return BSP_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e000      	b.n	80078da <_I2C_IRQHandler_IT+0x112>
	}

	return BSP_BUSY;
 80078d8:	2302      	movs	r3, #2
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3724      	adds	r7, #36	; 0x24
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	80002000 	.word	0x80002000
 80078ec:	80002400 	.word	0x80002400
 80078f0:	03ff63ff 	.word	0x03ff63ff

080078f4 <_I2C_IRQHandler_DMA>:


uint8_t _I2C_IRQHandler_DMA(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
 80078f4:	b480      	push	{r7}
 80078f6:	b089      	sub	sp, #36	; 0x24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]

	I2CContext_TypeDef * i2c_ctx = (I2CContext_TypeDef *)ctx->ctxmem;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	3328      	adds	r3, #40	; 0x28
 8007902:	61fb      	str	r3, [r7, #28]

	// Get current IT Flags and IT sources value
	uint32_t itflags   = hi2c->ISR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	61bb      	str	r3, [r7, #24]
	uint32_t itsources = hi2c->CR1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	617b      	str	r3, [r7, #20]

	uint32_t direction = (uint32_t)(0x80000000U | I2C_CR2_START); //Generate start write
 8007910:	4b36      	ldr	r3, [pc, #216]	; (80079ec <_I2C_IRQHandler_DMA+0xf8>)
 8007912:	613b      	str	r3, [r7, #16]

	// Handling errors
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01e      	beq.n	800795c <_I2C_IRQHandler_DMA+0x68>
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	d019      	beq.n	800795c <_I2C_IRQHandler_DMA+0x68>
	    // Clear NACK Flag
	    hi2c->ICR = I2C_ICR_NACKCF;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2210      	movs	r2, #16
 800792c:	61da      	str	r2, [r3, #28]

	    // Flush TX register
	    // If a pending TXIS flag is set
	    // Write a dummy data in TXDR to clear it
	    if ((hi2c->ISR & I2C_ISR_TXIS) > 0) hi2c->TXDR = 0x00U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <_I2C_IRQHandler_DMA+0x4c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	629a      	str	r2, [r3, #40]	; 0x28

	    // Flush TX register if not empty
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <_I2C_IRQHandler_DMA+0x64>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f043 0201 	orr.w	r2, r3, #1
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	619a      	str	r2, [r3, #24]

	    return BSP_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e040      	b.n	80079de <_I2C_IRQHandler_DMA+0xea>
	}

	// Initiate reading from memory
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d02b      	beq.n	80079be <_I2C_IRQHandler_DMA+0xca>
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d026      	beq.n	80079be <_I2C_IRQHandler_DMA+0xca>

		direction = I2C_GENERATE_START_READ;
 8007970:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <_I2C_IRQHandler_DMA+0xfc>)
 8007972:	613b      	str	r3, [r7, #16]

		uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	041b      	lsls	r3, r3, #16
 8007982:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007986:	431a      	orrs	r2, r3
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8007990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007994:	60fb      	str	r3, [r7, #12]
		MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	0d5b      	lsrs	r3, r3, #21
 800799e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80079a2:	4b14      	ldr	r3, [pc, #80]	; (80079f4 <_I2C_IRQHandler_DMA+0x100>)
 80079a4:	430b      	orrs	r3, r1
 80079a6:	43db      	mvns	r3, r3
 80079a8:	401a      	ands	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]

		/* Enable DMA Request */
		hi2c->CR1 |= I2C_CR1_RXDMAEN;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
	}


	// Completion of reading
	if (((itflags & I2C_ISR_STOPF) > 0) && ((itsources & I2C_CR1_STOPIE) > 0)) {
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d009      	beq.n	80079dc <_I2C_IRQHandler_DMA+0xe8>
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <_I2C_IRQHandler_DMA+0xe8>

		// Clear the flag
		hi2c->ICR = I2C_ICR_STOPCF;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	61da      	str	r2, [r3, #28]

		return BSP_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	e000      	b.n	80079de <_I2C_IRQHandler_DMA+0xea>
	}

	return BSP_BUSY;
 80079dc:	2302      	movs	r3, #2
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3724      	adds	r7, #36	; 0x24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	80002000 	.word	0x80002000
 80079f0:	80002400 	.word	0x80002400
 80079f4:	03ff63ff 	.word	0x03ff63ff

080079f8 <BSP_STM32_I2C_Init>:

/*******************************************************************
* I2C Functions
 *******************************************************************/

uint8_t BSP_STM32_I2C_Init(I2C_TypeDef *hi2c) {
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	#define TIMING_CLEAR_MASK   (0xF0FFFFFFU)

	// Disable I2C periph
	CLEAR_BIT(hi2c->CR1, I2C_CR1_PE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f023 0201 	bic.w	r2, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	601a      	str	r2, [r3, #0]

	// Configure I2Cx: Frequency range
	hi2c->TIMINGR = 0x009034B6 & TIMING_CLEAR_MASK; // 400kHz - High Speed I2C
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <BSP_STM32_I2C_Init+0x74>)
 8007a10:	611a      	str	r2, [r3, #16]

	// Disable Own Address1
	hi2c->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	609a      	str	r2, [r3, #8]

	// Disable Own Address2
	hi2c->OAR2 &= ~I2C_OAR2_OA2EN;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60da      	str	r2, [r3, #12]

	// Enable the AUTOEND and NACK
	hi2c->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <BSP_STM32_I2C_Init+0x78>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6053      	str	r3, [r2, #4]

	// Configure I2C Generalcall and NoStretch mode
	hi2c->CR1 = (I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]

	// Configure analog filter
	hi2c->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
	hi2c->CR1 |= I2C_ANALOGFILTER_ENABLE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	601a      	str	r2, [r3, #0]

	// Enable I2C periph
	SET_BIT(hi2c->CR1, I2C_CR1_PE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f043 0201 	orr.w	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	009034b6 	.word	0x009034b6
 8007a70:	02008000 	.word	0x02008000

08007a74 <BSP_STM32_I2C_IsDeviceReady>:


uint8_t BSP_STM32_I2C_IsDeviceReady(I2C_TypeDef *hi2c, uint32_t device_address, uint32_t maxtrials, uint32_t timeout) {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]

	uint32_t tickstart;

	__IO uint32_t trials = 0UL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	617b      	str	r3, [r7, #20]

	uint8_t tmp1;
	uint8_t tmp2;

	// No need to Check TC flag, with AUTOEND mode the stop is automatically generated. Wait until STOPF flag is set or a NACK flag is set.
	tickstart = BSP_GetTick();
 8007a86:	f7fd ffaf 	bl	80059e8 <BSP_GetTick>
 8007a8a:	61b8      	str	r0, [r7, #24]

    while (trials < maxtrials) {
 8007a8c:	e064      	b.n	8007b58 <BSP_STM32_I2C_IsDeviceReady+0xe4>
		// Generate Start
		hi2c->CR2 = ((((uint32_t)(device_address) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN));
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a94:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <BSP_STM32_I2C_IsDeviceReady+0x12c>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	6053      	str	r3, [r2, #4]

		tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	77fb      	strb	r3, [r7, #31]
		tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f003 0310 	and.w	r3, r3, #16
 8007ab2:	77bb      	strb	r3, [r7, #30]

		while ((tmp1 == 0) && (tmp2 == 0)) {
 8007ab4:	e015      	b.n	8007ae2 <BSP_STM32_I2C_IsDeviceReady+0x6e>

			if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007ab6:	f7fd ff97 	bl	80059e8 <BSP_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d201      	bcs.n	8007aca <BSP_STM32_I2C_IsDeviceReady+0x56>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e065      	b.n	8007b96 <BSP_STM32_I2C_IsDeviceReady+0x122>
			tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	77fb      	strb	r3, [r7, #31]
			tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	77bb      	strb	r3, [r7, #30]
		while ((tmp1 == 0) && (tmp2 == 0)) {
 8007ae2:	7ffb      	ldrb	r3, [r7, #31]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <BSP_STM32_I2C_IsDeviceReady+0x7a>
 8007ae8:	7fbb      	ldrb	r3, [r7, #30]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0e3      	beq.n	8007ab6 <BSP_STM32_I2C_IsDeviceReady+0x42>
		}

	    // Check if the NACKF flag has not been set
	    if ((hi2c->ISR & I2C_ISR_NACKF) == 0) {
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d11f      	bne.n	8007b3a <BSP_STM32_I2C_IsDeviceReady+0xc6>

	    	// Wait until STOPF flag is reset
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007afa:	e009      	b.n	8007b10 <BSP_STM32_I2C_IsDeviceReady+0x9c>
 8007afc:	f7fd ff74 	bl	80059e8 <BSP_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d201      	bcs.n	8007b10 <BSP_STM32_I2C_IsDeviceReady+0x9c>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e042      	b.n	8007b96 <BSP_STM32_I2C_IsDeviceReady+0x122>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0ef      	beq.n	8007afc <BSP_STM32_I2C_IsDeviceReady+0x88>

	        // Clear STOP Flag
	        hi2c->ICR = I2C_ICR_STOPCF;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	61da      	str	r2, [r3, #28]

	        return BSP_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	e037      	b.n	8007b96 <BSP_STM32_I2C_IsDeviceReady+0x122>

	    } else {

	    	// Wait until STOPF flag is reset
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007b26:	f7fd ff5f 	bl	80059e8 <BSP_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d201      	bcs.n	8007b3a <BSP_STM32_I2C_IsDeviceReady+0xc6>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e02d      	b.n	8007b96 <BSP_STM32_I2C_IsDeviceReady+0x122>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0ef      	beq.n	8007b26 <BSP_STM32_I2C_IsDeviceReady+0xb2>

	        // Clear NACK Flag
	    	hi2c->ICR = I2C_ICR_NACKCF;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2210      	movs	r2, #16
 8007b4a:	61da      	str	r2, [r3, #28]

	        // Clear STOP Flag, auto generated with autoend
	    	hi2c->ICR = I2C_ICR_STOPCF;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	61da      	str	r2, [r3, #28]
	    }

	    // Increment Trials
	    trials++;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	3301      	adds	r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
    while (trials < maxtrials) {
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d896      	bhi.n	8007a8e <BSP_STM32_I2C_IsDeviceReady+0x1a>
    }

    // Generate Stop
    hi2c->CR2 |= I2C_CR2_STOP;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	605a      	str	r2, [r3, #4]

    // Wait until STOPF flag is reset
    while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007b6c:	e009      	b.n	8007b82 <BSP_STM32_I2C_IsDeviceReady+0x10e>
 8007b6e:	f7fd ff3b 	bl	80059e8 <BSP_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d201      	bcs.n	8007b82 <BSP_STM32_I2C_IsDeviceReady+0x10e>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e009      	b.n	8007b96 <BSP_STM32_I2C_IsDeviceReady+0x122>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0ef      	beq.n	8007b6e <BSP_STM32_I2C_IsDeviceReady+0xfa>

    // Clear STOP Flag
    hi2c->ICR = I2C_ICR_STOPCF;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2220      	movs	r2, #32
 8007b92:	61da      	str	r2, [r3, #28]

    return BSP_ERROR;
 8007b94:	2301      	movs	r3, #1
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3720      	adds	r7, #32
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	02002000 	.word	0x02002000

08007ba4 <BSP_STM32_I2C_RegWrite>:


uint8_t BSP_STM32_I2C_RegWrite(I2C_TypeDef *hi2c, uint16_t DevAddress, uint8_t RegAddress, uint8_t RegValue, uint32_t Timeout) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	4608      	mov	r0, r1
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	807b      	strh	r3, [r7, #2]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	707b      	strb	r3, [r7, #1]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	703b      	strb	r3, [r7, #0]

	uint32_t tickstart = BSP_GetTick();
 8007bbe:	f7fd ff13 	bl	80059e8 <BSP_GetTick>
 8007bc2:	60f8      	str	r0, [r7, #12]
	uint32_t tmp;

	// Wait for BUSY flag to reset
	while ((hi2c->ISR & I2C_ISR_BUSY) > 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8007bc4:	e009      	b.n	8007bda <BSP_STM32_I2C_RegWrite+0x36>
 8007bc6:	f7fd ff0f 	bl	80059e8 <BSP_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d201      	bcs.n	8007bda <BSP_STM32_I2C_RegWrite+0x36>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e056      	b.n	8007c88 <BSP_STM32_I2C_RegWrite+0xe4>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1ef      	bne.n	8007bc6 <BSP_STM32_I2C_RegWrite+0x22>

	// Config transfer
	tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)2 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)I2C_GENERATE_START_WRITE) & (~0x80000000U));
 8007be6:	887b      	ldrh	r3, [r7, #2]
 8007be8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007bec:	4b28      	ldr	r3, [pc, #160]	; (8007c90 <BSP_STM32_I2C_RegWrite+0xec>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60bb      	str	r3, [r7, #8]
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <BSP_STM32_I2C_RegWrite+0xf0>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	605a      	str	r2, [r3, #4]

	while ((hi2c->ISR & I2C_ISR_TXIS) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8007c02:	e009      	b.n	8007c18 <BSP_STM32_I2C_RegWrite+0x74>
 8007c04:	f7fd fef0 	bl	80059e8 <BSP_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d201      	bcs.n	8007c18 <BSP_STM32_I2C_RegWrite+0x74>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e037      	b.n	8007c88 <BSP_STM32_I2C_RegWrite+0xe4>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0ef      	beq.n	8007c04 <BSP_STM32_I2C_RegWrite+0x60>

	hi2c->TXDR = RegAddress;
 8007c24:	787a      	ldrb	r2, [r7, #1]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	629a      	str	r2, [r3, #40]	; 0x28

	while ((hi2c->ISR & I2C_ISR_TXIS) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8007c2a:	e009      	b.n	8007c40 <BSP_STM32_I2C_RegWrite+0x9c>
 8007c2c:	f7fd fedc 	bl	80059e8 <BSP_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d201      	bcs.n	8007c40 <BSP_STM32_I2C_RegWrite+0x9c>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e023      	b.n	8007c88 <BSP_STM32_I2C_RegWrite+0xe4>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0ef      	beq.n	8007c2c <BSP_STM32_I2C_RegWrite+0x88>

	hi2c->TXDR = RegValue;
 8007c4c:	783a      	ldrb	r2, [r7, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	629a      	str	r2, [r3, #40]	; 0x28

	//while ((hi2c->ISR & I2C_FLAG_TCR) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;

	// Wait for Stop flag
	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8007c52:	e009      	b.n	8007c68 <BSP_STM32_I2C_RegWrite+0xc4>
 8007c54:	f7fd fec8 	bl	80059e8 <BSP_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d201      	bcs.n	8007c68 <BSP_STM32_I2C_RegWrite+0xc4>
 8007c64:	2301      	movs	r3, #1
 8007c66:	e00f      	b.n	8007c88 <BSP_STM32_I2C_RegWrite+0xe4>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0ef      	beq.n	8007c54 <BSP_STM32_I2C_RegWrite+0xb0>

	// Clear Stop Flag
	hi2c->ICR = I2C_ICR_STOPCF;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	61da      	str	r2, [r3, #28]

	hi2c->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD  | I2C_CR2_RD_WRN));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <BSP_STM32_I2C_RegWrite+0xf4>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6053      	str	r3, [r2, #4]


	return BSP_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	02022000 	.word	0x02022000
 8007c94:	fc009800 	.word	0xfc009800
 8007c98:	fe00e800 	.word	0xfe00e800

08007c9c <BSP_STM32_I2C_MemRead>:


uint8_t BSP_STM32_I2C_MemRead(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	460b      	mov	r3, r1
 8007cac:	80fb      	strh	r3, [r7, #6]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	717b      	strb	r3, [r7, #5]
	switch (ctx->dma_mode) {
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <BSP_STM32_I2C_MemRead+0x26>
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d81a      	bhi.n	8007cf6 <BSP_STM32_I2C_MemRead+0x5a>
 8007cc0:	e00c      	b.n	8007cdc <BSP_STM32_I2C_MemRead+0x40>
	case TXRX_CTX_MODE_IT:
		return _I2C_MemReadIT(hi2c, ctx, DevAddress, MemAddress, pData, Size);
 8007cc2:	7979      	ldrb	r1, [r7, #5]
 8007cc4:	88fa      	ldrh	r2, [r7, #6]
 8007cc6:	8bbb      	ldrh	r3, [r7, #28]
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	68b9      	ldr	r1, [r7, #8]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7ff fce0 	bl	8007698 <_I2C_MemReadIT>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	e018      	b.n	8007d0e <BSP_STM32_I2C_MemRead+0x72>
	case TXRX_CTX_MODE_DMA:
	case TXRX_CTX_MODE_BDMA:
		return _I2C_MemReadDMA(hi2c, ctx, DevAddress, MemAddress, pData, Size);
 8007cdc:	7979      	ldrb	r1, [r7, #5]
 8007cde:	88fa      	ldrh	r2, [r7, #6]
 8007ce0:	8bbb      	ldrh	r3, [r7, #28]
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff fd13 	bl	8007718 <_I2C_MemReadDMA>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	e00b      	b.n	8007d0e <BSP_STM32_I2C_MemRead+0x72>
	}
	return _I2C_MemReadIT(hi2c, ctx, DevAddress, MemAddress, pData, Size);
 8007cf6:	7979      	ldrb	r1, [r7, #5]
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	8bbb      	ldrh	r3, [r7, #28]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	460b      	mov	r3, r1
 8007d04:	68b9      	ldr	r1, [r7, #8]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff fcc6 	bl	8007698 <_I2C_MemReadIT>
 8007d0c:	4603      	mov	r3, r0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <BSP_STM32_I2C_IRQHandler>:


uint8_t BSP_STM32_I2C_IRQHandler(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
	switch (ctx->dma_mode) {
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <BSP_STM32_I2C_IRQHandler+0x1a>
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d80c      	bhi.n	8007d48 <BSP_STM32_I2C_IRQHandler+0x32>
 8007d2e:	e005      	b.n	8007d3c <BSP_STM32_I2C_IRQHandler+0x26>
	case TXRX_CTX_MODE_IT:
		return _I2C_IRQHandler_IT(hi2c, ctx);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff fd48 	bl	80077c8 <_I2C_IRQHandler_IT>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	e00a      	b.n	8007d52 <BSP_STM32_I2C_IRQHandler+0x3c>
	case TXRX_CTX_MODE_DMA:
	case TXRX_CTX_MODE_BDMA:
		return _I2C_IRQHandler_DMA(hi2c, ctx);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff fdd8 	bl	80078f4 <_I2C_IRQHandler_DMA>
 8007d44:	4603      	mov	r3, r0
 8007d46:	e004      	b.n	8007d52 <BSP_STM32_I2C_IRQHandler+0x3c>
	}
	return _I2C_IRQHandler_IT(hi2c, ctx);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fd3c 	bl	80077c8 <_I2C_IRQHandler_IT>
 8007d50:	4603      	mov	r3, r0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <BSP_STM32_I2S_IRQHandler>:
	return BSP_OK;
}



uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b08a      	sub	sp, #40	; 0x28
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]

	I2SContext_TypeDef * i2s_ctx = (I2SContext_TypeDef *)ctx->ctxmem;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	3328      	adds	r3, #40	; 0x28
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t	reg_ier = hi2s->IER;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	623b      	str	r3, [r7, #32]
	uint32_t	reg_sr = hi2s->SR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	61fb      	str	r3, [r7, #28]
	uint32_t	trigger = reg_ier & reg_sr;
 8007d76:	6a3a      	ldr	r2, [r7, #32]
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
	// Callback management
	void (* pCallback_TE)(TxRxContext_TypeDef * ctx);
	void (* pCallback_HT)(TxRxContext_TypeDef * ctx);
	void (* pCallback_TC)(TxRxContext_TypeDef * ctx);

	pCallback_TE = (void *)ctx->callback_TE;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	617b      	str	r3, [r7, #20]
	pCallback_HT = (void *)ctx->callback_HT;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	613b      	str	r3, [r7, #16]
	pCallback_TC = (void *)ctx->callback_TC;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	60fb      	str	r3, [r7, #12]

	__IO int16_t *ptxdr = (__IO int16_t *)(&(hi2s->TXDR));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3320      	adds	r3, #32
 8007d94:	60bb      	str	r3, [r7, #8]

	// TX Mode
	if (((trigger & I2S_FLAG_TXP) == I2S_FLAG_TXP) && ((trigger & I2S_FLAG_UDR)== 0)) {
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d038      	beq.n	8007e12 <BSP_STM32_I2S_IRQHandler+0xb8>
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d133      	bne.n	8007e12 <BSP_STM32_I2S_IRQHandler+0xb8>
		// Writing 16 bits to TX data register
		*ptxdr = *i2s_ctx->pData;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	801a      	strh	r2, [r3, #0]
		// Increasing index by 2 bytes (16 bits)
		i2s_ctx->index+=2;
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	1c9a      	adds	r2, r3, #2
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	609a      	str	r2, [r3, #8]
		i2s_ctx->pData++;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	1c9a      	adds	r2, r3, #2
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	601a      	str	r2, [r3, #0]

		// Half buffer transmited??
		if (i2s_ctx->index == (i2s_ctx->size >> 1)) {
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	085b      	lsrs	r3, r3, #1
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d106      	bne.n	8007de6 <BSP_STM32_I2S_IRQHandler+0x8c>
			 // Execute half transfer callback if set
			 if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <BSP_STM32_I2S_IRQHandler+0x8c>
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6838      	ldr	r0, [r7, #0]
 8007de4:	4798      	blx	r3
		}

		// Transmission completed??
		if (i2s_ctx->index >= i2s_ctx->size) {
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d30f      	bcc.n	8007e12 <BSP_STM32_I2S_IRQHandler+0xb8>
			// Disable TXP and ERR interrupt
			hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	611a      	str	r2, [r3, #16]
			// Update status
			i2s_ctx->status = I2S_STATUS_READY;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	2200      	movs	r2, #0
 8007e02:	731a      	strb	r2, [r3, #12]
			// Execute transfer completed callback if set
			if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <BSP_STM32_I2S_IRQHandler+0xb8>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6838      	ldr	r0, [r7, #0]
 8007e10:	4798      	blx	r3
		}
	}

	// Underrun error
	if ((trigger & I2S_FLAG_UDR) == I2S_FLAG_UDR) {
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	f003 0320 	and.w	r3, r3, #32
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d017      	beq.n	8007e4c <BSP_STM32_I2S_IRQHandler+0xf2>
		// Disable TXP and ERR interrupts
		hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	611a      	str	r2, [r3, #16]
		// Clear underrun flag
		hi2s->IFCR |= I2S_FLAG_UDR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	f043 0220 	orr.w	r2, r3, #32
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	619a      	str	r2, [r3, #24]
		// Update status
		i2s_ctx->status = I2S_STATUS_READY;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	2200      	movs	r2, #0
 8007e38:	731a      	strb	r2, [r3, #12]
		// Execute error callback if set
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <BSP_STM32_I2S_IRQHandler+0xee>
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	6838      	ldr	r0, [r7, #0]
 8007e46:	4798      	blx	r3
		return BSP_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e000      	b.n	8007e4e <BSP_STM32_I2S_IRQHandler+0xf4>
	}

	return BSP_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3728      	adds	r7, #40	; 0x28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <BSP_STM32_JPEG_Init>:

	return BSP_BUSY;
}


uint8_t BSP_STM32_JPEG_Init(JPEG_TypeDef * _hjpeg) {
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]

	// Enable JPEG core
	_hjpeg->CR |=  JPEG_CR_JCEN;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	f043 0201 	orr.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30

	// Stop any decoding process
	_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f023 0201 	bic.w	r2, r3, #1
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]

	// Disable all interrupts
	MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	f023 027e 	bic.w	r2, r3, #126	; 0x7e
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	631a      	str	r2, [r3, #48]	; 0x30

	// Flush input and output FIFOs
	_hjpeg->CR |= JPEG_CR_IFF;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_OFF;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	631a      	str	r2, [r3, #48]	; 0x30

	// Clear all flags
	_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38

	// Enable header processing
	_hjpeg->CONFR1 |= JPEG_CONFR1_HDR;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	605a      	str	r2, [r3, #4]

	return BSP_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <BSP_STM32_JPEG_GetWidth>:
	while (_JPEG_DecProcess(_hjpeg) == BSP_BUSY) {};

	return BSP_OK;
}

uint32_t BSP_STM32_JPEG_GetWidth(JPEG_TypeDef * _hjpeg) {
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
	UNUSED(_hjpeg);

	return JPEGctx.ImageWidth;
 8007ec8:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <BSP_STM32_JPEG_GetWidth+0x18>)
 8007eca:	69db      	ldr	r3, [r3, #28]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	24000438 	.word	0x24000438

08007edc <BSP_STM32_JPEG_GetHeight>:

uint32_t BSP_STM32_JPEG_GetHeight(JPEG_TypeDef * _hjpeg) {
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	UNUSED(_hjpeg);

	return JPEGctx.ImageHeight;
 8007ee4:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <BSP_STM32_JPEG_GetHeight+0x18>)
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	24000438 	.word	0x24000438

08007ef8 <BSP_STM32_JPEG_GetCSS>:

uint32_t BSP_STM32_JPEG_GetCSS(JPEG_TypeDef * _hjpeg) {
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	UNUSED(_hjpeg);

	return JPEGctx.CSSType;
 8007f00:	4b03      	ldr	r3, [pc, #12]	; (8007f10 <BSP_STM32_JPEG_GetCSS+0x18>)
 8007f02:	695b      	ldr	r3, [r3, #20]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	24000438 	.word	0x24000438

08007f14 <BSP_STM32_JPEG_GetColorSpace>:

uint32_t BSP_STM32_JPEG_GetColorSpace(JPEG_TypeDef * _hjpeg) {
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	UNUSED(_hjpeg);

	return JPEGctx.ColorSpace;
 8007f1c:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <BSP_STM32_JPEG_GetColorSpace+0x18>)
 8007f1e:	699b      	ldr	r3, [r3, #24]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	24000438 	.word	0x24000438

08007f30 <BSP_STM32_LTDC_Init>:


uint8_t BSP_STM32_LTDC_Init(LTDC_TypeDef *hltdc, uint32_t lcd_h_sync, uint32_t lcd_v_sync,
		uint32_t lcd_acc_h_back_porch_width, uint32_t lcd_acc_v_back_porch_height,
		uint32_t lcd_acc_active_width, uint32_t lcd_acc_active_height,
		uint32_t lcd_total_width, uint32_t lcd_total_height, uint32_t bgcolor) {
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]

	// Checking if LTDC already initialized
	if (hltdc->GCR & LTDC_GCR_LTDCEN) return BSP_OK;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <BSP_STM32_LTDC_Init+0x1e>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e078      	b.n	8008040 <BSP_STM32_LTDC_Init+0x110>
//	BSP_Delay(1);
//	RCC->APB3RSTR &= ~RCC_APB3RSTR_LTDCRST;
//	BSP_Delay(1);

	// Setting AXI QOS to higher priority for LTDC peripheral
	GPV->AXI_INI6_READ_QOS = 1UL;
 8007f4e:	f04f 43a2 	mov.w	r3, #1358954496	; 0x51000000
 8007f52:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
 8007f56:	461a      	mov	r2, r3
 8007f58:	2301      	movs	r3, #1
 8007f5a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	GPV->AXI_INI6_WRITE_QOS = 1UL;
 8007f5e:	f04f 43a2 	mov.w	r3, #1358954496	; 0x51000000
 8007f62:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
 8007f66:	461a      	mov	r2, r3
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	// LTDC Init

	// Configure the HS, VS, DE and PC polarity
	hltdc->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	619a      	str	r2, [r3, #24]
	hltdc->GCR |= (uint32_t)(LTDC_HSPOLARITY_AL | LTDC_VSPOLARITY_AL | LTDC_DEPOLARITY_AL | LTDC_PCPOLARITY_IPC);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	619a      	str	r2, [r3, #24]

	// Set Synchronization size
	hltdc->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	4b31      	ldr	r3, [pc, #196]	; (800804c <BSP_STM32_LTDC_Init+0x11c>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	6093      	str	r3, [r2, #8]
	tmp = ((lcd_h_sync) << 16U);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	041b      	lsls	r3, r3, #16
 8007f92:	617b      	str	r3, [r7, #20]
	hltdc->SSCR |= (tmp | (lcd_v_sync));
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	6979      	ldr	r1, [r7, #20]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	609a      	str	r2, [r3, #8]

	// Set Accumulated Back porch
	hltdc->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	4b28      	ldr	r3, [pc, #160]	; (800804c <BSP_STM32_LTDC_Init+0x11c>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	60d3      	str	r3, [r2, #12]
	tmp = ((lcd_acc_h_back_porch_width) << 16U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	041b      	lsls	r3, r3, #16
 8007fb4:	617b      	str	r3, [r7, #20]
	hltdc->BPCR |= (tmp | (lcd_acc_v_back_porch_height));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	6979      	ldr	r1, [r7, #20]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	430b      	orrs	r3, r1
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	60da      	str	r2, [r3, #12]

	// Set Accumulated Active Width
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <BSP_STM32_LTDC_Init+0x11c>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	6113      	str	r3, [r2, #16]
	tmp = ((lcd_acc_active_width) << 16U);
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	041b      	lsls	r3, r3, #16
 8007fd6:	617b      	str	r3, [r7, #20]
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	6979      	ldr	r1, [r7, #20]
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	611a      	str	r2, [r3, #16]

	// Set Total Width
	hltdc->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	695a      	ldr	r2, [r3, #20]
 8007fec:	4b17      	ldr	r3, [pc, #92]	; (800804c <BSP_STM32_LTDC_Init+0x11c>)
 8007fee:	4013      	ands	r3, r2
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	6153      	str	r3, [r2, #20]
	tmp = ((lcd_total_width) << 16U);
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	617b      	str	r3, [r7, #20]
	hltdc->TWCR |= (tmp | (lcd_total_height));
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	695a      	ldr	r2, [r3, #20]
 8007ffe:	6979      	ldr	r1, [r7, #20]
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	430b      	orrs	r3, r1
 8008004:	431a      	orrs	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	615a      	str	r2, [r3, #20]

	// Set the background color value
	hltdc->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc->BCCR |= (bgcolor & 0x00FFFFFF);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008020:	431a      	orrs	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable the Transfer Error and FIFO underrun interrupts */
	hltdc->IER |= LTDC_IER_TERRIE | LTDC_IER_FUIE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802a:	f043 0206 	orr.w	r2, r3, #6
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	635a      	str	r2, [r3, #52]	; 0x34

	// Enable LTDC by setting LTDCEN bit
	hltdc->GCR |= LTDC_GCR_LTDCEN;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f043 0201 	orr.w	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	619a      	str	r2, [r3, #24]

	return BSP_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	f000f800 	.word	0xf000f800

08008050 <BSP_STM32_LTDC_DisableLayer>:

uint8_t BSP_STM32_LTDC_DisableLayer(LTDC_TypeDef *hltdc, uint32_t layer) {
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	01da      	lsls	r2, r3, #7
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4413      	add	r3, r2
 8008062:	3384      	adds	r3, #132	; 0x84
 8008064:	60fb      	str	r3, [r7, #12]

	// Disable Layer
	l->CR &= ~(LTDC_LxCR_LEN | LTDC_LxCR_CLUTEN | LTDC_LxCR_COLKEN);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f023 0213 	bic.w	r2, r3, #19
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]
	l->CKCR = 0x00000000;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	60da      	str	r2, [r3, #12]

	// Set the Reload on Vertical Blank
	hltdc->SRCR |= LTDC_SRCR_VBR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	f043 0202 	orr.w	r2, r3, #2
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait for layer to disable
	while (l->CR & LTDC_LxCR_LEN) {};
 8008084:	bf00      	nop
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f9      	bne.n	8008086 <BSP_STM32_LTDC_DisableLayer+0x36>

	return BSP_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <BSP_STM32_LTDC_EnableLayer>:

uint8_t BSP_STM32_LTDC_EnableLayer(LTDC_TypeDef *hltdc, uint32_t layer) {
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	01da      	lsls	r2, r3, #7
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	3384      	adds	r3, #132	; 0x84
 80080b4:	60fb      	str	r3, [r7, #12]

	// Enable layer
	l->CR |= LTDC_LxCR_LEN;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f043 0201 	orr.w	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	601a      	str	r2, [r3, #0]

	// Set the Reload on Vertical Blank
	hltdc->SRCR |= LTDC_SRCR_VBR;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	f043 0202 	orr.w	r2, r3, #2
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait for layer to enable
	while (!(l->CR & LTDC_LxCR_LEN)) {};
 80080ce:	bf00      	nop
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0f9      	beq.n	80080d0 <BSP_STM32_LTDC_EnableLayer+0x30>

	return BSP_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
	...

080080ec <BSP_STM32_LTDC_ConfigLayer>:

uint8_t BSP_STM32_LTDC_ConfigLayer(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t alpha, uint32_t alpha0, uint32_t bgcolor,
		uint32_t blendingfactor1, uint32_t blendingfactor2, uint32_t fbstartaddress, uint32_t imgheight, uint32_t imgwidth,
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	01da      	lsls	r2, r3, #7
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	3384      	adds	r3, #132	; 0x84
 8008104:	613b      	str	r3, [r7, #16]

	// Disable Layer
	// BSP_STM32_LTDC_DisableLayer(hltdc, layer);

	// Configure the horizontal start and stop position
	tmp = ((x1 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	0c1b      	lsrs	r3, r3, #16
 800810c:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8008110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008112:	4413      	add	r3, r2
 8008114:	041b      	lsls	r3, r3, #16
 8008116:	617b      	str	r3, [r7, #20]
	l->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	605a      	str	r2, [r3, #4]
	l->WHPCR = ((x0 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	0c1b      	lsrs	r3, r3, #16
 800812a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800812e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008130:	4413      	add	r3, r2
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	431a      	orrs	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	605a      	str	r2, [r3, #4]

	// Configure the vertical start and stop position
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008146:	4413      	add	r3, r2
 8008148:	041b      	lsls	r3, r3, #16
 800814a:	617b      	str	r3, [r7, #20]
	l->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	609a      	str	r2, [r3, #8]
	l->WVPCR  = ((y0 + (hltdc->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008162:	4413      	add	r3, r2
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	431a      	orrs	r2, r3
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	609a      	str	r2, [r3, #8]

	// Specifies the pixel format
	l->PFCR &= ~(LTDC_LxPFCR_PF);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f023 0207 	bic.w	r2, r3, #7
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	611a      	str	r2, [r3, #16]
	l->PFCR = pixelformat;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800817e:	611a      	str	r2, [r3, #16]

	// Configure the default color values
	l->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2200      	movs	r2, #0
 8008188:	619a      	str	r2, [r3, #24]
	l->DCCR = bgcolor;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6a3a      	ldr	r2, [r7, #32]
 800818e:	619a      	str	r2, [r3, #24]

	// Specifies the constant alpha value
	l->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	615a      	str	r2, [r3, #20]
	l->CACR = alpha;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	615a      	str	r2, [r3, #20]

	// Specifies the blending factors
	l->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	69da      	ldr	r2, [r3, #28]
 80081a6:	4b29      	ldr	r3, [pc, #164]	; (800824c <BSP_STM32_LTDC_ConfigLayer+0x160>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	61d3      	str	r3, [r2, #28]
	l->BFCR = (blendingfactor1 | blendingfactor2);
 80081ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	431a      	orrs	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	61da      	str	r2, [r3, #28]

	// Configure the color frame buffer start address
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2200      	movs	r2, #0
 80081c0:	629a      	str	r2, [r3, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c6:	629a      	str	r2, [r3, #40]	; 0x28

	if (pixelformat == LTDC_PIXEL_FORMAT_ARGB8888) { tmp = 4U; }
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d102      	bne.n	80081d4 <BSP_STM32_LTDC_ConfigLayer+0xe8>
 80081ce:	2304      	movs	r3, #4
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e016      	b.n	8008202 <BSP_STM32_LTDC_ConfigLayer+0x116>
	else if (pixelformat == LTDC_PIXEL_FORMAT_RGB888) { tmp = 3U; }
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d102      	bne.n	80081e0 <BSP_STM32_LTDC_ConfigLayer+0xf4>
 80081da:	2303      	movs	r3, #3
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	e010      	b.n	8008202 <BSP_STM32_LTDC_ConfigLayer+0x116>
	else if ((pixelformat == LTDC_PIXEL_FORMAT_ARGB4444) || (pixelformat == LTDC_PIXEL_FORMAT_RGB565) || (pixelformat == LTDC_PIXEL_FORMAT_ARGB1555) || (pixelformat == LTDC_PIXEL_FORMAT_AL88)) { tmp = 2U; }
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d008      	beq.n	80081f8 <BSP_STM32_LTDC_ConfigLayer+0x10c>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d005      	beq.n	80081f8 <BSP_STM32_LTDC_ConfigLayer+0x10c>
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d002      	beq.n	80081f8 <BSP_STM32_LTDC_ConfigLayer+0x10c>
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	2b07      	cmp	r3, #7
 80081f6:	d102      	bne.n	80081fe <BSP_STM32_LTDC_ConfigLayer+0x112>
 80081f8:	2302      	movs	r3, #2
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e001      	b.n	8008202 <BSP_STM32_LTDC_ConfigLayer+0x116>
	else { tmp = 1U; }
 80081fe:	2301      	movs	r3, #1
 8008200:	617b      	str	r3, [r7, #20]

	// Configure the color frame buffer pitch in byte
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	62da      	str	r2, [r3, #44]	; 0x2c
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 800820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	fb02 f303 	mul.w	r3, r2, r3
 8008216:	041a      	lsls	r2, r3, #16
 8008218:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800821a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821c:	1acb      	subs	r3, r1, r3
 800821e:	6979      	ldr	r1, [r7, #20]
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	3307      	adds	r3, #7
 8008226:	431a      	orrs	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure the frame buffer line number
	l->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <BSP_STM32_LTDC_ConfigLayer+0x164>)
 8008232:	4013      	ands	r3, r2
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	6313      	str	r3, [r2, #48]	; 0x30
	l->CFBLNR  = (imgheight);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823c:	631a      	str	r2, [r3, #48]	; 0x30

	// Enable Layer
	// BSP_STM32_LTDC_EnableLayer(hltdc, layer);

	return BSP_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	fffff8f8 	.word	0xfffff8f8
 8008250:	fffff800 	.word	0xfffff800

08008254 <BSP_STM32_LTDC_UpdateFrameBufAddr>:


uint8_t BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t fbstartaddress) {
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]

	// Updating Framebuffer address
	LTDC_Layer_TypeDef *l = ((LTDC_Layer_TypeDef *)((uint32_t)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)))));
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	01da      	lsls	r2, r3, #7
 8008264:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <BSP_STM32_LTDC_UpdateFrameBufAddr+0x40>)
 8008266:	4413      	add	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2200      	movs	r2, #0
 8008272:	629a      	str	r2, [r3, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc->SRCR |= LTDC_SRCR_VBR;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	f043 0202 	orr.w	r2, r3, #2
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	625a      	str	r2, [r3, #36]	; 0x24

	return BSP_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	371c      	adds	r7, #28
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	50001084 	.word	0x50001084

08008298 <BSP_STM32_LTDC_ConfigCLUT>:


uint8_t BSP_STM32_LTDC_ConfigCLUT(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t *clut) {
 8008298:	b480      	push	{r7}
 800829a:	b089      	sub	sp, #36	; 0x24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	01da      	lsls	r2, r3, #7
 80082a8:	4b20      	ldr	r3, [pc, #128]	; (800832c <BSP_STM32_LTDC_ConfigCLUT+0x94>)
 80082aa:	4413      	add	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]
	uint32_t *pcolorlut = clut;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	61fb      	str	r3, [r7, #28]
	uint32_t counter;
	uint32_t tmp;

	// Configure CLUT
	for (counter = 0U; (counter < 256); counter++) {
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
 80082b6:	e010      	b.n	80082da <BSP_STM32_LTDC_ConfigCLUT+0x42>
		tmp  = (counter << 24U) | ((uint32_t)(*pcolorlut) & 0x00FFFFFF);
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	061a      	lsls	r2, r3, #24
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
	    pcolorlut++;
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	3304      	adds	r3, #4
 80082cc:	61fb      	str	r3, [r7, #28]
	    l->CLUTWR  = tmp;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	641a      	str	r2, [r3, #64]	; 0x40
	for (counter = 0U; (counter < 256); counter++) {
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	3301      	adds	r3, #1
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	2bff      	cmp	r3, #255	; 0xff
 80082de:	d9eb      	bls.n	80082b8 <BSP_STM32_LTDC_ConfigCLUT+0x20>
	}
	// Enable CLUT
	l->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f043 0210 	orr.w	r2, r3, #16
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	601a      	str	r2, [r3, #0]
	hltdc->SRCR = LTDC_SRCR_IMR;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	625a      	str	r2, [r3, #36]	; 0x24

	// Configure color keying
	l->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	60da      	str	r2, [r3, #12]
	l->CKCR  = 0x00000000;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2200      	movs	r2, #0
 8008302:	60da      	str	r2, [r3, #12]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2201      	movs	r2, #1
 8008308:	625a      	str	r2, [r3, #36]	; 0x24
	// Enable color keying
	l->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f043 0202 	orr.w	r2, r3, #2
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	601a      	str	r2, [r3, #0]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	625a      	str	r2, [r3, #36]	; 0x24

	return BSP_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3724      	adds	r7, #36	; 0x24
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	50001084 	.word	0x50001084

08008330 <BSP_STM32_LTDC_SetTransparentColor>:

uint8_t BSP_STM32_LTDC_SetTransparentColor(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t color) {
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	01da      	lsls	r2, r3, #7
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <BSP_STM32_LTDC_SetTransparentColor+0x44>)
 8008342:	4413      	add	r3, r2
 8008344:	617b      	str	r3, [r7, #20]

	// Setting transparent color
	l->CKCR  = color;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	60da      	str	r2, [r3, #12]
	hltdc->SRCR = LTDC_SRCR_IMR;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2201      	movs	r2, #1
 8008350:	625a      	str	r2, [r3, #36]	; 0x24
	// Enable color keying
	l->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f043 0202 	orr.w	r2, r3, #2
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	601a      	str	r2, [r3, #0]
	hltdc->SRCR = LTDC_SRCR_IMR;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	625a      	str	r2, [r3, #36]	; 0x24

	return BSP_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	50001084 	.word	0x50001084

08008378 <BSP_STM32_LTDC_SetLineInt>:

uint8_t BSP_STM32_LTDC_SetLineInt(LTDC_TypeDef *hltdc, uint32_t line) {
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	// Programming LTDC line interrupt
	hltdc->IER &= ~(LTDC_IER_LIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	f023 0201 	bic.w	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	635a      	str	r2, [r3, #52]	; 0x34
	hltdc->LIPCR = line;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	641a      	str	r2, [r3, #64]	; 0x40
	hltdc->IER |= LTDC_IER_LIE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008398:	f043 0201 	orr.w	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	635a      	str	r2, [r3, #52]	; 0x34
	hltdc->SRCR = LTDC_SRCR_IMR;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	625a      	str	r2, [r3, #36]	; 0x24

	return BSP_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <BSP_STM32_LTDC_IRQHandler>:

uint8_t BSP_STM32_LTDC_IRQHandler(LTDC_TypeDef *hltdc) {
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	if (((hltdc->ISR & LTDC_ISR_LIF) != 0U) && ((hltdc->IER & LTDC_IER_LIE) != 0U)) {
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d016      	beq.n	80083f6 <BSP_STM32_LTDC_IRQHandler+0x42>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d010      	beq.n	80083f6 <BSP_STM32_LTDC_IRQHandler+0x42>
	    // Disable the Line interrupt
		hltdc->IER &= ~(LTDC_IER_LIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	f023 0201 	bic.w	r2, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	635a      	str	r2, [r3, #52]	; 0x34
	    // Clear the Line interrupt flag
		hltdc->ICR = LTDC_ICR_CLIF;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	63da      	str	r2, [r3, #60]	; 0x3c
	    // Enable the Line interrupt
		hltdc->IER |= (LTDC_IER_LIE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ea:	f043 0201 	orr.w	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	635a      	str	r2, [r3, #52]	; 0x34
		return BSP_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	e051      	b.n	800849a <BSP_STM32_LTDC_IRQHandler+0xe6>
	}

	if (((hltdc->ISR & LTDC_ISR_FUIF) != 0U) && ((hltdc->IER & LTDC_IER_FUIE) != 0U)) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d014      	beq.n	800842c <BSP_STM32_LTDC_IRQHandler+0x78>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00e      	beq.n	800842c <BSP_STM32_LTDC_IRQHandler+0x78>
		// Disable the interrupt FIFO Underrun
		hltdc->IER &= ~(LTDC_IER_FUIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	f023 0202 	bic.w	r2, r3, #2
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	635a      	str	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CFUIF;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2202      	movs	r2, #2
 800841e:	63da      	str	r2, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_FUIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008424:	f043 0202 	orr.w	r2, r3, #2
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (((hltdc->ISR & LTDC_ISR_RRIF) != 0U) && ((hltdc->IER & LTDC_IER_RRIE) != 0U)) {
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d014      	beq.n	8008462 <BSP_STM32_LTDC_IRQHandler+0xae>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00e      	beq.n	8008462 <BSP_STM32_LTDC_IRQHandler+0xae>
		// Disable the interrupt Register Reload
		hltdc->IER &= ~(LTDC_IER_RRIE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008448:	f023 0208 	bic.w	r2, r3, #8
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	635a      	str	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CRRIF;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2208      	movs	r2, #8
 8008454:	63da      	str	r2, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_RRIE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845a:	f043 0208 	orr.w	r2, r3, #8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (((hltdc->ISR & LTDC_ISR_TERRIF) != 0U) && ((hltdc->IER & LTDC_IER_TERRIE) != 0U)) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008466:	f003 0304 	and.w	r3, r3, #4
 800846a:	2b00      	cmp	r3, #0
 800846c:	d014      	beq.n	8008498 <BSP_STM32_LTDC_IRQHandler+0xe4>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00e      	beq.n	8008498 <BSP_STM32_LTDC_IRQHandler+0xe4>
		// Disable the interrupt Transfer Error
		hltdc->IER &= ~(LTDC_IER_TERRIE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847e:	f023 0204 	bic.w	r2, r3, #4
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	635a      	str	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CTERRIF;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2204      	movs	r2, #4
 800848a:	63da      	str	r2, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_TERRIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008490:	f043 0204 	orr.w	r2, r3, #4
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return BSP_ERROR;
 8008498:	2301      	movs	r3, #1
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
	...

080084a8 <BSP_STM32_PWR_ConfigSupply>:
 *******************************************************************/

#include "BSP_STM32_PWR.h"


uint8_t BSP_STM32_PWR_ConfigSupply(uint32_t SupplySource) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	uint32_t tick;

	// Validate input parameters
	switch (SupplySource) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b2e      	cmp	r3, #46	; 0x2e
 80084b4:	d81b      	bhi.n	80084ee <BSP_STM32_PWR_ConfigSupply+0x46>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b16      	cmp	r3, #22
 80084ba:	d206      	bcs.n	80084ca <BSP_STM32_PWR_ConfigSupply+0x22>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d812      	bhi.n	80084e8 <BSP_STM32_PWR_ConfigSupply+0x40>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d114      	bne.n	80084f2 <BSP_STM32_PWR_ConfigSupply+0x4a>
 80084c8:	e011      	b.n	80084ee <BSP_STM32_PWR_ConfigSupply+0x46>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3b16      	subs	r3, #22
 80084ce:	4a32      	ldr	r2, [pc, #200]	; (8008598 <BSP_STM32_PWR_ConfigSupply+0xf0>)
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	bf14      	ite	ne
 80084dc:	2301      	movne	r3, #1
 80084de:	2300      	moveq	r3, #0
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d105      	bne.n	80084f2 <BSP_STM32_PWR_ConfigSupply+0x4a>
 80084e6:	e002      	b.n	80084ee <BSP_STM32_PWR_ConfigSupply+0x46>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d001      	beq.n	80084f2 <BSP_STM32_PWR_ConfigSupply+0x4a>
	case PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO:
	case PWR_SMPS_1V8_SUPPLIES_EXT:
	case PWR_SMPS_2V5_SUPPLIES_EXT:
		break;
	default:
		return BSP_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e04e      	b.n	8008590 <BSP_STM32_PWR_ConfigSupply+0xe8>
		break;
 80084f2:	bf00      	nop
	}

	// PWR Config Mask
	uint32_t pwr_config_mask = (PWR_CR3_SMPSLEVEL_Msk | PWR_CR3_SMPSEXTHP_Msk | PWR_CR3_SMPSEN_Msk | PWR_CR3_LDOEN_Msk | PWR_CR3_BYPASS_Msk);
 80084f4:	233f      	movs	r3, #63	; 0x3f
 80084f6:	60fb      	str	r3, [r7, #12]

	// SupplyConfig can be configured only once after Power-On Reset
	if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN)) {
 80084f8:	4b28      	ldr	r3, [pc, #160]	; (800859c <BSP_STM32_PWR_ConfigSupply+0xf4>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	2b06      	cmp	r3, #6
 8008502:	d00a      	beq.n	800851a <BSP_STM32_PWR_ConfigSupply+0x72>
		if ((PWR->CR3 & pwr_config_mask) == SupplySource) return BSP_OK;
 8008504:	4b25      	ldr	r3, [pc, #148]	; (800859c <BSP_STM32_PWR_ConfigSupply+0xf4>)
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4013      	ands	r3, r2
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	429a      	cmp	r2, r3
 8008510:	d101      	bne.n	8008516 <BSP_STM32_PWR_ConfigSupply+0x6e>
 8008512:	2300      	movs	r3, #0
 8008514:	e03c      	b.n	8008590 <BSP_STM32_PWR_ConfigSupply+0xe8>
		return BSP_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e03a      	b.n	8008590 <BSP_STM32_PWR_ConfigSupply+0xe8>
	}

	// Setting PWR Supply Source
	MODIFY_REG(PWR->CR3, pwr_config_mask, SupplySource);
 800851a:	4b20      	ldr	r3, [pc, #128]	; (800859c <BSP_STM32_PWR_ConfigSupply+0xf4>)
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	43db      	mvns	r3, r3
 8008522:	401a      	ands	r2, r3
 8008524:	491d      	ldr	r1, [pc, #116]	; (800859c <BSP_STM32_PWR_ConfigSupply+0xf4>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4313      	orrs	r3, r2
 800852a:	60cb      	str	r3, [r1, #12]

	// Wait for voltage to stabilize
	tick = BSP_GetTick();
 800852c:	f7fd fa5c 	bl	80059e8 <BSP_GetTick>
 8008530:	60b8      	str	r0, [r7, #8]
	while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) != PWR_CSR1_ACTVOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8008532:	e009      	b.n	8008548 <BSP_STM32_PWR_ConfigSupply+0xa0>
 8008534:	f7fd fa58 	bl	80059e8 <BSP_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008542:	d901      	bls.n	8008548 <BSP_STM32_PWR_ConfigSupply+0xa0>
 8008544:	2303      	movs	r3, #3
 8008546:	e023      	b.n	8008590 <BSP_STM32_PWR_ConfigSupply+0xe8>
 8008548:	4b14      	ldr	r3, [pc, #80]	; (800859c <BSP_STM32_PWR_ConfigSupply+0xf4>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008554:	d1ee      	bne.n	8008534 <BSP_STM32_PWR_ConfigSupply+0x8c>

	// If no SMPS in use, than return
	if ((SupplySource & PWR_CR3_SMPSEN) == 0) return BSP_OK;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <BSP_STM32_PWR_ConfigSupply+0xbc>
 8008560:	2300      	movs	r3, #0
 8008562:	e015      	b.n	8008590 <BSP_STM32_PWR_ConfigSupply+0xe8>

	// Wait for SMPS readiness
	tick = BSP_GetTick();
 8008564:	f7fd fa40 	bl	80059e8 <BSP_GetTick>
 8008568:	60b8      	str	r0, [r7, #8]
	while ((PWR->CR3 & PWR_CR3_SMPSEXTRDY) != PWR_CR3_SMPSEXTRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 800856a:	e009      	b.n	8008580 <BSP_STM32_PWR_ConfigSupply+0xd8>
 800856c:	f7fd fa3c 	bl	80059e8 <BSP_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800857a:	d901      	bls.n	8008580 <BSP_STM32_PWR_ConfigSupply+0xd8>
 800857c:	2303      	movs	r3, #3
 800857e:	e007      	b.n	8008590 <BSP_STM32_PWR_ConfigSupply+0xe8>
 8008580:	4b06      	ldr	r3, [pc, #24]	; (800859c <BSP_STM32_PWR_ConfigSupply+0xf4>)
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858c:	d1ee      	bne.n	800856c <BSP_STM32_PWR_ConfigSupply+0xc4>

	return BSP_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	01810181 	.word	0x01810181
 800859c:	58024800 	.word	0x58024800

080085a0 <BSP_STM32_PWR_VoltageScalingConfig>:


uint8_t BSP_STM32_PWR_VoltageScalingConfig(uint32_t Regulator) {
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
	// For STM32H74xxx and STM32H75xxx lines
	__IO uint32_t tmpreg = 0x00;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]

	// Validating input parameters
	switch (Regulator) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085b2:	d014      	beq.n	80085de <BSP_STM32_PWR_VoltageScalingConfig+0x3e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085ba:	d80e      	bhi.n	80085da <BSP_STM32_PWR_VoltageScalingConfig+0x3a>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085c2:	d00c      	beq.n	80085de <BSP_STM32_PWR_VoltageScalingConfig+0x3e>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ca:	d806      	bhi.n	80085da <BSP_STM32_PWR_VoltageScalingConfig+0x3a>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <BSP_STM32_PWR_VoltageScalingConfig+0x3e>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d8:	d001      	beq.n	80085de <BSP_STM32_PWR_VoltageScalingConfig+0x3e>
	case PWR_REGULATOR_VOLTAGE_SCALE1:
	case PWR_REGULATOR_VOLTAGE_SCALE2:
	case PWR_REGULATOR_VOLTAGE_SCALE3:
		break;
	default:
		return BSP_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e034      	b.n	8008648 <BSP_STM32_PWR_VoltageScalingConfig+0xa8>
		break;
 80085de:	bf00      	nop
	}

	// Check voltage scaling to be configured
	if (Regulator == PWR_REGULATOR_VOLTAGE_SCALE0) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d116      	bne.n	8008614 <BSP_STM32_PWR_VoltageScalingConfig+0x74>
		// Configure the Voltage Scaling 1
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085e6:	4b1b      	ldr	r3, [pc, #108]	; (8008654 <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 80085ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085f0:	6193      	str	r3, [r2, #24]
		// Delay after setting the voltage scaling
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
 80085f2:	4b18      	ldr	r3, [pc, #96]	; (8008654 <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80085fa:	60fb      	str	r3, [r7, #12]
		// Enable the PWR overdrive
		SET_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 80085fc:	4b16      	ldr	r3, [pc, #88]	; (8008658 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	4a15      	ldr	r2, [pc, #84]	; (8008658 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Delay after setting the syscfg boost setting
		tmpreg = READ_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8008608:	4b13      	ldr	r3, [pc, #76]	; (8008658 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	e017      	b.n	8008644 <BSP_STM32_PWR_VoltageScalingConfig+0xa4>
	} else {
		// Disable the PWR overdrive
		CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8008614:	4b10      	ldr	r3, [pc, #64]	; (8008658 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	4a0f      	ldr	r2, [pc, #60]	; (8008658 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Delay after setting the syscfg boost setting
		tmpreg = READ_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
		// Configure the Voltage Scaling x
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, Regulator);
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008632:	4908      	ldr	r1, [pc, #32]	; (8008654 <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4313      	orrs	r3, r2
 8008638:	618b      	str	r3, [r1, #24]
		// Delay after setting the voltage scaling
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008642:	60fb      	str	r3, [r7, #12]
	}
	UNUSED(tmpreg);
 8008644:	68fb      	ldr	r3, [r7, #12]
	return BSP_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	58024800 	.word	0x58024800
 8008658:	58000400 	.word	0x58000400

0800865c <BSP_STM32_PWR_WaitForVOSRDY>:

uint8_t BSP_STM32_PWR_WaitForVOSRDY(void) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
	uint32_t tick = BSP_GetTick();
 8008662:	f7fd f9c1 	bl	80059e8 <BSP_GetTick>
 8008666:	6078      	str	r0, [r7, #4]
	while ((PWR->D3CR & PWR_D3CR_VOSRDY) != PWR_D3CR_VOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_ERROR;
 8008668:	e009      	b.n	800867e <BSP_STM32_PWR_WaitForVOSRDY+0x22>
 800866a:	f7fd f9bd 	bl	80059e8 <BSP_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008678:	d901      	bls.n	800867e <BSP_STM32_PWR_WaitForVOSRDY+0x22>
 800867a:	2301      	movs	r3, #1
 800867c:	e007      	b.n	800868e <BSP_STM32_PWR_WaitForVOSRDY+0x32>
 800867e:	4b06      	ldr	r3, [pc, #24]	; (8008698 <BSP_STM32_PWR_WaitForVOSRDY+0x3c>)
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800868a:	d1ee      	bne.n	800866a <BSP_STM32_PWR_WaitForVOSRDY+0xe>
	return BSP_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	58024800 	.word	0x58024800

0800869c <BSP_STM32_PWR_EnableBkUpAccess>:

uint8_t BSP_STM32_PWR_EnableBkUpAccess(void) {
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  // Enable access to RTC and backup registers
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <BSP_STM32_PWR_EnableBkUpAccess+0x1c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a04      	ldr	r2, [pc, #16]	; (80086b8 <BSP_STM32_PWR_EnableBkUpAccess+0x1c>)
 80086a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086aa:	6013      	str	r3, [r2, #0]
  return BSP_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	58024800 	.word	0x58024800

080086bc <_QSPI_WaitForFlag>:
} QSPI_CTX_TypeDef;

static QSPI_CTX_TypeDef qspictx;


static uint8_t _QSPI_WaitForFlag(QUADSPI_TypeDef * hqspi, uint32_t flag, uint32_t state, uint32_t timeout) {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
	uint32_t tick = BSP_GetTick();
 80086ca:	f7fd f98d 	bl	80059e8 <BSP_GetTick>
 80086ce:	6178      	str	r0, [r7, #20]

	while (1) {
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4013      	ands	r3, r2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bf14      	ite	ne
 80086dc:	2301      	movne	r3, #1
 80086de:	2300      	moveq	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	613b      	str	r3, [r7, #16]
		if (reg == state) break;
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d009      	beq.n	8008700 <_QSPI_WaitForFlag+0x44>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80086ec:	f7fd f97c 	bl	80059e8 <BSP_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d2e9      	bcs.n	80086d0 <_QSPI_WaitForFlag+0x14>
 80086fc:	2303      	movs	r3, #3
 80086fe:	e001      	b.n	8008704 <_QSPI_WaitForFlag+0x48>
		if (reg == state) break;
 8008700:	bf00      	nop

//	while ((((hqspi->SR & flag) == 0)?RESET:SET) != state) {
//		if ((HAL_GetTick() - tick) > timeout) return BSP_TIMEOUT;
//	}

	return BSP_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <_QSPI_GetConfigCCR>:


static uint32_t _QSPI_GetConfigCCR(QUADSPI_TypeDef * hqspi, uint32_t FMode) {
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]

	uint32_t reg_ccr = 0x00;
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]

	// Program Instruction Block
	if (qspictx.InstructionMode != QSPI_INSTRUCTION_NONE) {
 800871a:	4b44      	ldr	r3, [pc, #272]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00c      	beq.n	800873c <_QSPI_GetConfigCCR+0x30>
		reg_ccr |= (qspictx.Instruction & QUADSPI_CCR_INSTRUCTION_Msk);
 8008722:	4b42      	ldr	r3, [pc, #264]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
		reg_ccr |= (qspictx.InstructionMode & QUADSPI_CCR_IMODE_Msk);
 800872e:	4b3f      	ldr	r3, [pc, #252]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
	}

	// Program Address Block
	if (qspictx.AddressMode !=QSPI_ADDRESS_NONE) {
 800873c:	4b3b      	ldr	r3, [pc, #236]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d019      	beq.n	8008778 <_QSPI_GetConfigCCR+0x6c>
		reg_ccr |= (qspictx.AddressMode & QUADSPI_CCR_ADMODE_Msk);
 8008744:	4b39      	ldr	r3, [pc, #228]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
		reg_ccr |= (qspictx.AddressSize & QUADSPI_CCR_ADSIZE_Msk);
 8008752:	4b36      	ldr	r3, [pc, #216]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->AR = qspictx.Address;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008766:	d004      	beq.n	8008772 <_QSPI_GetConfigCCR+0x66>
 8008768:	4b30      	ldr	r3, [pc, #192]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	619a      	str	r2, [r3, #24]
 8008770:	e002      	b.n	8008778 <_QSPI_GetConfigCCR+0x6c>
			else hqspi->AR = 0;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	619a      	str	r2, [r3, #24]
	}

	// Program Alternate Bytes
	if (qspictx.AlternateMode != QSPI_ALTERNATE_BYTES_NONE) {
 8008778:	4b2c      	ldr	r3, [pc, #176]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d011      	beq.n	80087a4 <_QSPI_GetConfigCCR+0x98>
		reg_ccr |= (qspictx.AlternateMode & QUADSPI_CCR_ABMODE_Msk);
 8008780:	4b2a      	ldr	r3, [pc, #168]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]
		reg_ccr |= (qspictx.AlternateSize & QUADSPI_CCR_ABSIZE_Msk);
 800878e:	4b27      	ldr	r3, [pc, #156]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
		hqspi->ABR = qspictx.AlternateBytes;
 800879c:	4b23      	ldr	r3, [pc, #140]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	61da      	str	r2, [r3, #28]
	}

	// Program Dummy Cycles
	if (qspictx.DummyCycles > 0) {
 80087a4:	4b21      	ldr	r3, [pc, #132]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <_QSPI_GetConfigCCR+0xac>
		reg_ccr |= (qspictx.DummyCycles << QUADSPI_CCR_DCYC_Pos);
 80087ac:	4b1f      	ldr	r3, [pc, #124]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	049b      	lsls	r3, r3, #18
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
	}

	// Program Data Block
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 80087b8:	4b1c      	ldr	r3, [pc, #112]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d013      	beq.n	80087e8 <_QSPI_GetConfigCCR+0xdc>
		reg_ccr |= (qspictx.DataMode & QUADSPI_CCR_DMODE_Msk);
 80087c0:	4b1a      	ldr	r3, [pc, #104]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->DLR = qspictx.DataLenth - 1U;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80087d4:	d005      	beq.n	80087e2 <_QSPI_GetConfigCCR+0xd6>
 80087d6:	4b15      	ldr	r3, [pc, #84]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	1e5a      	subs	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	611a      	str	r2, [r3, #16]
 80087e0:	e002      	b.n	80087e8 <_QSPI_GetConfigCCR+0xdc>
			else hqspi->DLR = 0;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	611a      	str	r2, [r3, #16]
	}

	// Program Additional Options
	reg_ccr |= (qspictx.DDRMode & QUADSPI_CCR_DDRM_Msk); 		// DDR Configuration
 80087e8:	4b10      	ldr	r3, [pc, #64]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
	reg_ccr |= (qspictx.SignalDelay & QUADSPI_CCR_DHHC_Msk); 	// Signal Shift
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 80087f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
	reg_ccr |= (qspictx.SIOOMode & QUADSPI_CCR_SIOO_Msk);		// SIOO Mode
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <_QSPI_GetConfigCCR+0x120>)
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
	reg_ccr |= (FMode & QUADSPI_CCR_FMODE_Msk);					// Functional Mode
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]

	return reg_ccr;
 800881e:	68fb      	ldr	r3, [r7, #12]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	2400045c 	.word	0x2400045c

08008830 <BSP_STM32_QSPI_Init>:


uint8_t BSP_STM32_QSPI_Init(QUADSPI_TypeDef * hqspi, uint32_t ClockPrescaler, uint32_t ClockMode, uint32_t FifoThreshold, uint32_t FlashSize) {
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]

	// Configure QSPI FIFO Threshold
	MODIFY_REG(hqspi->CR, QUADSPI_CR_FTHRES, ((FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	3b01      	subs	r3, #1
 800884a:	021b      	lsls	r3, r3, #8
 800884c:	431a      	orrs	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	601a      	str	r2, [r3, #0]

	// Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8008852:	f241 3388 	movw	r3, #5000	; 0x1388
 8008856:	2200      	movs	r2, #0
 8008858:	2120      	movs	r1, #32
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f7ff ff2e 	bl	80086bc <_QSPI_WaitForFlag>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <BSP_STM32_QSPI_Init+0x3a>
 8008866:	2303      	movs	r3, #3
 8008868:	e01a      	b.n	80088a0 <BSP_STM32_QSPI_Init+0x70>

	// Configure QSPI Clock Prescaler and Sample Shift
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <BSP_STM32_QSPI_Init+0x78>)
 8008870:	4013      	ands	r3, r2
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	0612      	lsls	r2, r2, #24
 8008876:	431a      	orrs	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	601a      	str	r2, [r3, #0]
			((ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) | QSPI_SAMPLE_SHIFTING_NONE  | QSPI_FLASH_ID_1 | QSPI_DUALFLASH_DISABLE));

	// Configure QSPI Flash Size, CS High Time and Clock Mode
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <BSP_STM32_QSPI_Init+0x7c>)
 8008882:	4013      	ands	r3, r2
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	0411      	lsls	r1, r2, #16
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	430a      	orrs	r2, r1
 800888c:	431a      	orrs	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	605a      	str	r2, [r3, #4]
			((FlashSize << QUADSPI_DCR_FSIZE_Pos) | QSPI_CS_HIGH_TIME_1_CYCLE | ClockMode));

	// Enable the QSPI peripheral
	hqspi->CR |= QUADSPI_CR_EN;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f043 0201 	orr.w	r2, r3, #1
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	601a      	str	r2, [r3, #0]

    return BSP_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	00ffff2f 	.word	0x00ffff2f
 80088ac:	ffe0f8fe 	.word	0xffe0f8fe

080088b0 <BSP_STM32_QSPI_CfgNewCommand>:


uint8_t BSP_STM32_QSPI_CfgNewCommand() {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0

	memset(&qspictx, 0x00, sizeof(qspictx));
 80088b4:	224c      	movs	r2, #76	; 0x4c
 80088b6:	2100      	movs	r1, #0
 80088b8:	4802      	ldr	r0, [pc, #8]	; (80088c4 <BSP_STM32_QSPI_CfgNewCommand+0x14>)
 80088ba:	f007 fd42 	bl	8010342 <memset>

	return BSP_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	2400045c 	.word	0x2400045c

080088c8 <BSP_STM32_QSPI_CfgInstruction>:

uint8_t BSP_STM32_QSPI_CfgInstruction(uint32_t Mode, uint8_t Instruction) {
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]

	qspictx.InstructionMode = Mode;
 80088d4:	4a06      	ldr	r2, [pc, #24]	; (80088f0 <BSP_STM32_QSPI_CfgInstruction+0x28>)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6013      	str	r3, [r2, #0]
	qspictx.Instruction = Instruction;
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	4a04      	ldr	r2, [pc, #16]	; (80088f0 <BSP_STM32_QSPI_CfgInstruction+0x28>)
 80088de:	6053      	str	r3, [r2, #4]

	return BSP_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	2400045c 	.word	0x2400045c

080088f4 <BSP_STM32_QSPI_CfgAddress>:

uint8_t BSP_STM32_QSPI_CfgAddress(uint32_t Mode, uint32_t Size, uint32_t Address) {
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]

	qspictx.AddressMode = Mode;
 8008900:	4a07      	ldr	r2, [pc, #28]	; (8008920 <BSP_STM32_QSPI_CfgAddress+0x2c>)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6093      	str	r3, [r2, #8]
	qspictx.AddressSize = Size;
 8008906:	4a06      	ldr	r2, [pc, #24]	; (8008920 <BSP_STM32_QSPI_CfgAddress+0x2c>)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	60d3      	str	r3, [r2, #12]
	qspictx.Address = Address;
 800890c:	4a04      	ldr	r2, [pc, #16]	; (8008920 <BSP_STM32_QSPI_CfgAddress+0x2c>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6113      	str	r3, [r2, #16]

	return BSP_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	2400045c 	.word	0x2400045c

08008924 <BSP_STM32_QSPI_CfgData>:
	qspictx.DummyCycles = DummyCycles;

	return BSP_OK;
}

uint8_t BSP_STM32_QSPI_CfgData(uint32_t Mode, uint8_t * pData, uint32_t Length) {
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]

	qspictx.DataMode = Mode;
 8008930:	4a07      	ldr	r2, [pc, #28]	; (8008950 <BSP_STM32_QSPI_CfgData+0x2c>)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6253      	str	r3, [r2, #36]	; 0x24
	qspictx.DataLenth = Length;
 8008936:	4a06      	ldr	r2, [pc, #24]	; (8008950 <BSP_STM32_QSPI_CfgData+0x2c>)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6293      	str	r3, [r2, #40]	; 0x28
	qspictx.pData = pData;
 800893c:	4a04      	ldr	r2, [pc, #16]	; (8008950 <BSP_STM32_QSPI_CfgData+0x2c>)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	62d3      	str	r3, [r2, #44]	; 0x2c

	return BSP_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	2400045c 	.word	0x2400045c

08008954 <BSP_STM32_QSPI_CfgOptions>:

uint8_t	BSP_STM32_QSPI_CfgOptions(uint32_t DDRMode, uint32_t SignalDelay, uint32_t SIOOMode) {
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
	qspictx.DDRMode = DDRMode;
 8008960:	4a07      	ldr	r2, [pc, #28]	; (8008980 <BSP_STM32_QSPI_CfgOptions+0x2c>)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6313      	str	r3, [r2, #48]	; 0x30
	qspictx.SignalDelay = SignalDelay;
 8008966:	4a06      	ldr	r2, [pc, #24]	; (8008980 <BSP_STM32_QSPI_CfgOptions+0x2c>)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6353      	str	r3, [r2, #52]	; 0x34
	qspictx.SIOOMode = SIOOMode;
 800896c:	4a04      	ldr	r2, [pc, #16]	; (8008980 <BSP_STM32_QSPI_CfgOptions+0x2c>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6393      	str	r3, [r2, #56]	; 0x38

	return BSP_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	2400045c 	.word	0x2400045c

08008984 <BSP_STM32_QSPI_CfgAutoPooling>:

uint8_t BSP_STM32_QSPI_CfgAutoPooling(uint32_t mask, uint32_t match, uint32_t interval, uint32_t matchmode) {
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
	qspictx.AutoPoolingMask = mask;
 8008992:	4a09      	ldr	r2, [pc, #36]	; (80089b8 <BSP_STM32_QSPI_CfgAutoPooling+0x34>)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6413      	str	r3, [r2, #64]	; 0x40
	qspictx.AutoPoolingMatch = match;
 8008998:	4a07      	ldr	r2, [pc, #28]	; (80089b8 <BSP_STM32_QSPI_CfgAutoPooling+0x34>)
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	63d3      	str	r3, [r2, #60]	; 0x3c
	qspictx.AutoPoolingInterval = interval;
 800899e:	4a06      	ldr	r2, [pc, #24]	; (80089b8 <BSP_STM32_QSPI_CfgAutoPooling+0x34>)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6493      	str	r3, [r2, #72]	; 0x48
	qspictx.AutoPoolingMode = matchmode;
 80089a4:	4a04      	ldr	r2, [pc, #16]	; (80089b8 <BSP_STM32_QSPI_CfgAutoPooling+0x34>)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	6453      	str	r3, [r2, #68]	; 0x44

	return BSP_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	2400045c 	.word	0x2400045c

080089bc <BSP_STM32_QSPI_StartReceive>:


uint8_t BSP_STM32_QSPI_StartReceive(QUADSPI_TypeDef * hqspi) {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]

	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 80089c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80089c8:	2200      	movs	r2, #0
 80089ca:	2120      	movs	r1, #32
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff fe75 	bl	80086bc <_QSPI_WaitForFlag>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <BSP_STM32_QSPI_StartReceive+0x20>
 80089d8:	2303      	movs	r3, #3
 80089da:	e04a      	b.n	8008a72 <BSP_STM32_QSPI_StartReceive+0xb6>

	// 2. Set CCR configuration register
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80089dc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff fe93 	bl	800870c <_QSPI_GetConfigCCR>
 80089e6:	4602      	mov	r2, r0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	615a      	str	r2, [r3, #20]

	// 3. Initiate transmit of data by rewriting Address Register
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 80089ec:	4b23      	ldr	r3, [pc, #140]	; (8008a7c <BSP_STM32_QSPI_StartReceive+0xc0>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <BSP_STM32_QSPI_StartReceive+0x40>
 80089f4:	4b21      	ldr	r3, [pc, #132]	; (8008a7c <BSP_STM32_QSPI_StartReceive+0xc0>)
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	619a      	str	r2, [r3, #24]

	// 4. If Data block defined than receive data
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 80089fc:	4b1f      	ldr	r3, [pc, #124]	; (8008a7c <BSP_STM32_QSPI_StartReceive+0xc0>)
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d023      	beq.n	8008a4c <BSP_STM32_QSPI_StartReceive+0x90>
		uint32_t xFerCount = qspictx.DataLenth;
 8008a04:	4b1d      	ldr	r3, [pc, #116]	; (8008a7c <BSP_STM32_QSPI_StartReceive+0xc0>)
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	617b      	str	r3, [r7, #20]
		__IO uint8_t * pData = qspictx.pData;
 8008a0a:	4b1c      	ldr	r3, [pc, #112]	; (8008a7c <BSP_STM32_QSPI_StartReceive+0xc0>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	613b      	str	r3, [r7, #16]
		__IO uint8_t * pRegDR = (uint8_t *)&hqspi->DR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3320      	adds	r3, #32
 8008a14:	60fb      	str	r3, [r7, #12]

		while (xFerCount > 0) {
 8008a16:	e016      	b.n	8008a46 <BSP_STM32_QSPI_StartReceive+0x8a>

			//Wait until FT or TC flag is set to read received data
			if (_QSPI_WaitForFlag(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, 5000)) return BSP_TIMEOUT;
 8008a18:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	2106      	movs	r1, #6
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff fe4b 	bl	80086bc <_QSPI_WaitForFlag>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <BSP_STM32_QSPI_StartReceive+0x74>
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e020      	b.n	8008a72 <BSP_STM32_QSPI_StartReceive+0xb6>

			// Copy data from DR register
			*pData = *pRegDR;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	701a      	strb	r2, [r3, #0]

			pData++;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	613b      	str	r3, [r7, #16]
			xFerCount--;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
		while (xFerCount > 0) {
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e5      	bne.n	8008a18 <BSP_STM32_QSPI_StartReceive+0x5c>
		}

	}

	// 5. Wait for TC flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_TC, SET, 5000)) return BSP_TIMEOUT;
 8008a4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a50:	2201      	movs	r2, #1
 8008a52:	2102      	movs	r1, #2
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff fe31 	bl	80086bc <_QSPI_WaitForFlag>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <BSP_STM32_QSPI_StartReceive+0xa8>
 8008a60:	2303      	movs	r3, #3
 8008a62:	e006      	b.n	8008a72 <BSP_STM32_QSPI_StartReceive+0xb6>

	// 6. Reset TC flag
	hqspi->FCR |= QSPI_FLAG_TC;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f043 0202 	orr.w	r2, r3, #2
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]


	return BSP_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	2400045c 	.word	0x2400045c

08008a80 <BSP_STM32_QSPI_StartTransmit>:


uint8_t BSP_STM32_QSPI_StartTransmit(QUADSPI_TypeDef * hqspi) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]

	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8008a88:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2120      	movs	r1, #32
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff fe13 	bl	80086bc <_QSPI_WaitForFlag>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <BSP_STM32_QSPI_StartTransmit+0x20>
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e049      	b.n	8008b34 <BSP_STM32_QSPI_StartTransmit+0xb4>

	// 2. Set CCR configuration register
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7ff fe32 	bl	800870c <_QSPI_GetConfigCCR>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	615a      	str	r2, [r3, #20]

	// 3. Initiate transmit of data by rewriting Address Register
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 8008aae:	4b23      	ldr	r3, [pc, #140]	; (8008b3c <BSP_STM32_QSPI_StartTransmit+0xbc>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <BSP_STM32_QSPI_StartTransmit+0x3e>
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <BSP_STM32_QSPI_StartTransmit+0xbc>)
 8008ab8:	691a      	ldr	r2, [r3, #16]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	619a      	str	r2, [r3, #24]

	// 4. If Data block defined than receive data
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 8008abe:	4b1f      	ldr	r3, [pc, #124]	; (8008b3c <BSP_STM32_QSPI_StartTransmit+0xbc>)
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d023      	beq.n	8008b0e <BSP_STM32_QSPI_StartTransmit+0x8e>
		uint32_t xFerCount = qspictx.DataLenth;
 8008ac6:	4b1d      	ldr	r3, [pc, #116]	; (8008b3c <BSP_STM32_QSPI_StartTransmit+0xbc>)
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	617b      	str	r3, [r7, #20]
		__IO uint8_t * pData = qspictx.pData;
 8008acc:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <BSP_STM32_QSPI_StartTransmit+0xbc>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	613b      	str	r3, [r7, #16]
		__IO uint8_t * pRegDR = (uint8_t *)&hqspi->DR;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3320      	adds	r3, #32
 8008ad6:	60fb      	str	r3, [r7, #12]

		while (xFerCount > 0) {
 8008ad8:	e016      	b.n	8008b08 <BSP_STM32_QSPI_StartTransmit+0x88>

			//Wait until FT is set to transmit data
			if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_FT, SET, 5000)) return BSP_TIMEOUT;
 8008ada:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ade:	2201      	movs	r2, #1
 8008ae0:	2104      	movs	r1, #4
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff fdea 	bl	80086bc <_QSPI_WaitForFlag>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <BSP_STM32_QSPI_StartTransmit+0x72>
 8008aee:	2303      	movs	r3, #3
 8008af0:	e020      	b.n	8008b34 <BSP_STM32_QSPI_StartTransmit+0xb4>

			// Copy data to DR register
			 *pRegDR = *pData;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	701a      	strb	r2, [r3, #0]

			pData++;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	3301      	adds	r3, #1
 8008b00:	613b      	str	r3, [r7, #16]
			xFerCount--;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	617b      	str	r3, [r7, #20]
		while (xFerCount > 0) {
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e5      	bne.n	8008ada <BSP_STM32_QSPI_StartTransmit+0x5a>
		}

	}

	// 5. Wait for TC flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_TC, SET, 5000)) return BSP_TIMEOUT;
 8008b0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b12:	2201      	movs	r2, #1
 8008b14:	2102      	movs	r1, #2
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff fdd0 	bl	80086bc <_QSPI_WaitForFlag>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <BSP_STM32_QSPI_StartTransmit+0xa6>
 8008b22:	2303      	movs	r3, #3
 8008b24:	e006      	b.n	8008b34 <BSP_STM32_QSPI_StartTransmit+0xb4>

	// 6. Reset TC flag
	hqspi->FCR |= QSPI_FLAG_TC;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f043 0202 	orr.w	r2, r3, #2
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60da      	str	r2, [r3, #12]


	return BSP_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	2400045c 	.word	0x2400045c

08008b40 <BSP_STM32_QSPI_StartAutoPooling>:

	 return BSP_OK;
}


uint8_t BSP_STM32_QSPI_StartAutoPooling(QUADSPI_TypeDef * hqspi) {
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8008b48:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2120      	movs	r1, #32
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff fdb3 	bl	80086bc <_QSPI_WaitForFlag>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <BSP_STM32_QSPI_StartAutoPooling+0x20>
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e03a      	b.n	8008bd6 <BSP_STM32_QSPI_StartAutoPooling+0x96>

	// 2. Configure Auto Pooling parameters
	hqspi->PSMAR = qspictx.AutoPoolingMatch;
 8008b60:	4b1f      	ldr	r3, [pc, #124]	; (8008be0 <BSP_STM32_QSPI_StartAutoPooling+0xa0>)
 8008b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	629a      	str	r2, [r3, #40]	; 0x28
	hqspi->PSMKR = qspictx.AutoPoolingMask;
 8008b68:	4b1d      	ldr	r3, [pc, #116]	; (8008be0 <BSP_STM32_QSPI_StartAutoPooling+0xa0>)
 8008b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	625a      	str	r2, [r3, #36]	; 0x24
	hqspi->PIR = qspictx.AutoPoolingInterval;
 8008b70:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <BSP_STM32_QSPI_StartAutoPooling+0xa0>)
 8008b72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	62da      	str	r2, [r3, #44]	; 0x2c

	// 3. Configure CR register for Auto Pooling mode
    MODIFY_REG(hqspi->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), (qspictx.AutoPoolingMode | QSPI_AUTOMATIC_STOP_ENABLE));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <BSP_STM32_QSPI_StartAutoPooling+0xa0>)
 8008b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b84:	4313      	orrs	r3, r2
 8008b86:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	601a      	str	r2, [r3, #0]

    // 4. Configure CCR register
    hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008b8e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fdba 	bl	800870c <_QSPI_GetConfigCCR>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	615a      	str	r2, [r3, #20]

	// 5. Wait for SM flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_SM, SET, 60000)) return BSP_TIMEOUT;
 8008b9e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	2108      	movs	r1, #8
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff fd88 	bl	80086bc <_QSPI_WaitForFlag>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <BSP_STM32_QSPI_StartAutoPooling+0x76>
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e00f      	b.n	8008bd6 <BSP_STM32_QSPI_StartAutoPooling+0x96>

	hqspi->FCR = QSPI_FLAG_SM;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	60da      	str	r2, [r3, #12]

	// 6. Exit autopooling mode
	SET_BIT(hqspi->CR, QUADSPI_CR_ABORT);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f043 0202 	orr.w	r2, r3, #2
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(hqspi->CCR, QUADSPI_CCR_FMODE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	615a      	str	r2, [r3, #20]

	return BSP_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	2400045c 	.word	0x2400045c

08008be4 <BSP_STM32_RCC_CLKConfig_RTC>:
 *******************************************************************/

#include "BSP_STM32_RCC.h"

// Setting RTC clock source to external LSE
uint8_t BSP_STM32_RCC_CLKConfig_RTC() {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0

	uint32_t tickstart;
	uint32_t tmpreg;

	// Enable write access to Backup domain
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bea:	4b2d      	ldr	r3, [pc, #180]	; (8008ca0 <BSP_STM32_RCC_CLKConfig_RTC+0xbc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a2c      	ldr	r2, [pc, #176]	; (8008ca0 <BSP_STM32_RCC_CLKConfig_RTC+0xbc>)
 8008bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bf4:	6013      	str	r3, [r2, #0]

	// Wait for Backup domain Write protection disable
	tickstart = BSP_GetTick();
 8008bf6:	f7fc fef7 	bl	80059e8 <BSP_GetTick>
 8008bfa:	6078      	str	r0, [r7, #4]

	while ((PWR->CR1 & PWR_CR1_DBP) == 0) if ((BSP_GetTick() - tickstart) > 100) return BSP_ERROR;
 8008bfc:	e008      	b.n	8008c10 <BSP_STM32_RCC_CLKConfig_RTC+0x2c>
 8008bfe:	f7fc fef3 	bl	80059e8 <BSP_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b64      	cmp	r3, #100	; 0x64
 8008c0a:	d901      	bls.n	8008c10 <BSP_STM32_RCC_CLKConfig_RTC+0x2c>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e042      	b.n	8008c96 <BSP_STM32_RCC_CLKConfig_RTC+0xb2>
 8008c10:	4b23      	ldr	r3, [pc, #140]	; (8008ca0 <BSP_STM32_RCC_CLKConfig_RTC+0xbc>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0f0      	beq.n	8008bfe <BSP_STM32_RCC_CLKConfig_RTC+0x1a>

	// Reset the Backup domain only if the RTC Clock source selection is modified
	if ((RCC->BDCR & RCC_BDCR_RTCSEL) != RCC_RTCCLKSOURCE_LSE) {
 8008c1c:	4b21      	ldr	r3, [pc, #132]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c28:	d013      	beq.n	8008c52 <BSP_STM32_RCC_CLKConfig_RTC+0x6e>

		// Store the content of BDCR register before the reset of Backup Domain
	    tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c32:	603b      	str	r3, [r7, #0]

	    // RTC Clock selection can be changed only if the Backup Domain is reset
	    __BSP_RCC_BACKUPRESET_FORCE();
 8008c34:	4b1b      	ldr	r3, [pc, #108]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c38:	4a1a      	ldr	r2, [pc, #104]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c3e:	6713      	str	r3, [r2, #112]	; 0x70
	    __BSP_RCC_BACKUPRESET_RELEASE();
 8008c40:	4b18      	ldr	r3, [pc, #96]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c44:	4a17      	ldr	r2, [pc, #92]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c4a:	6713      	str	r3, [r2, #112]	; 0x70

	    // Restore the Content of BDCR register
	    RCC->BDCR = tmpreg;
 8008c4c:	4a15      	ldr	r2, [pc, #84]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6713      	str	r3, [r2, #112]	; 0x70
	}

	// Wait for LSE reactivation
    tickstart = BSP_GetTick();
 8008c52:	f7fc fec9 	bl	80059e8 <BSP_GetTick>
 8008c56:	6078      	str	r0, [r7, #4]

	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_ERROR;
 8008c58:	e00a      	b.n	8008c70 <BSP_STM32_RCC_CLKConfig_RTC+0x8c>
 8008c5a:	f7fc fec5 	bl	80059e8 <BSP_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d901      	bls.n	8008c70 <BSP_STM32_RCC_CLKConfig_RTC+0x8c>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e012      	b.n	8008c96 <BSP_STM32_RCC_CLKConfig_RTC+0xb2>
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0ee      	beq.n	8008c5a <BSP_STM32_RCC_CLKConfig_RTC+0x76>

	__BSP_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8008c7c:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	4a08      	ldr	r2, [pc, #32]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c86:	6113      	str	r3, [r2, #16]
 8008c88:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8c:	4a05      	ldr	r2, [pc, #20]	; (8008ca4 <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 8008c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c92:	6713      	str	r3, [r2, #112]	; 0x70

	return BSP_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	58024800 	.word	0x58024800
 8008ca4:	58024400 	.word	0x58024400

08008ca8 <BSP_STM32_RCC_CLKConfig_FMC>:


// Setting FMC clock source to HCLK
uint8_t BSP_STM32_RCC_CLKConfig_FMC() {
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
	// This is default configuration. Nothing to change.
	return BSP_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <BSP_STM32_RCC_CLKConfig_I2C1>:

// Setting I2C1 clock source to PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_I2C1() {
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_I2C123SEL, RCC_I2C123CLKSOURCE_D2PCLK1);
 8008cbc:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <BSP_STM32_RCC_CLKConfig_I2C1+0x1c>)
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc0:	4a04      	ldr	r2, [pc, #16]	; (8008cd4 <BSP_STM32_RCC_CLKConfig_I2C1+0x1c>)
 8008cc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008cc6:	6553      	str	r3, [r2, #84]	; 0x54
	return BSP_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	58024400 	.word	0x58024400

08008cd8 <BSP_STM32_RCC_CLKConfig_I2C4>:

// Setting I2C4 clock source to PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_I2C4() {
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_I2C4SEL, RCC_I2C4CLKSOURCE_D3PCLK1);
 8008cdc:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <BSP_STM32_RCC_CLKConfig_I2C4+0x1c>)
 8008cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce0:	4a04      	ldr	r2, [pc, #16]	; (8008cf4 <BSP_STM32_RCC_CLKConfig_I2C4+0x1c>)
 8008ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce6:	6593      	str	r3, [r2, #88]	; 0x58
	return BSP_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	58024400 	.word	0x58024400

08008cf8 <BSP_STM32_RCC_CLKConfig_QSPI>:
	return BSP_OK;
}


// Setting QSPI clock source to D1HCLK
uint8_t BSP_STM32_RCC_CLKConfig_QSPI() {
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_QSPISEL, RCC_QSPICLKSOURCE_D1HCLK);
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <BSP_STM32_RCC_CLKConfig_QSPI+0x1c>)
 8008cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d00:	4a04      	ldr	r2, [pc, #16]	; (8008d14 <BSP_STM32_RCC_CLKConfig_QSPI+0x1c>)
 8008d02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008d06:	64d3      	str	r3, [r2, #76]	; 0x4c
	return BSP_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	58024400 	.word	0x58024400

08008d18 <BSP_STM32_RCC_CLKConfig_SDMMC2>:


// Setting SDMMC2 clock source to PLL
uint8_t BSP_STM32_RCC_CLKConfig_SDMMC2() {
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
	RCC->PLLCFGR |= RCC_PLLCFGR_DIVQ1EN;
 8008d1c:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <BSP_STM32_RCC_CLKConfig_SDMMC2+0x28>)
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a07      	ldr	r2, [pc, #28]	; (8008d40 <BSP_STM32_RCC_CLKConfig_SDMMC2+0x28>)
 8008d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d26:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_SDMMCSEL, RCC_SDMMCCLKSOURCE_PLL);
 8008d28:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <BSP_STM32_RCC_CLKConfig_SDMMC2+0x28>)
 8008d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2c:	4a04      	ldr	r2, [pc, #16]	; (8008d40 <BSP_STM32_RCC_CLKConfig_SDMMC2+0x28>)
 8008d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d32:	64d3      	str	r3, [r2, #76]	; 0x4c
	return BSP_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	58024400 	.word	0x58024400

08008d44 <BSP_STM32_RCC_CLKConfig_UART5>:


// Setting UART5 clock source to D2PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_UART5() {
 8008d44:	b480      	push	{r7}
 8008d46:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USART28SEL, RCC_USART234578CLKSOURCE_D2PCLK1);
 8008d48:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <BSP_STM32_RCC_CLKConfig_UART5+0x1c>)
 8008d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4c:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <BSP_STM32_RCC_CLKConfig_UART5+0x1c>)
 8008d4e:	f023 0307 	bic.w	r3, r3, #7
 8008d52:	6553      	str	r3, [r2, #84]	; 0x54
	return BSP_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	58024400 	.word	0x58024400

08008d64 <BSP_STM32_RCC_CLKConfig_USART2>:


// Setting UART5 clock source to D2PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_USART2() {
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USART28SEL, RCC_USART234578CLKSOURCE_D2PCLK1);
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <BSP_STM32_RCC_CLKConfig_USART2+0x1c>)
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6c:	4a04      	ldr	r2, [pc, #16]	; (8008d80 <BSP_STM32_RCC_CLKConfig_USART2+0x1c>)
 8008d6e:	f023 0307 	bic.w	r3, r3, #7
 8008d72:	6553      	str	r3, [r2, #84]	; 0x54
	return BSP_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	58024400 	.word	0x58024400

08008d84 <BSP_STM32_RCC_CLKConfig_USBFS>:

// Setting USBFS clock source to_HSI48
uint8_t BSP_STM32_RCC_CLKConfig_USBFS() {
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USBSEL, RCC_USBCLKSOURCE_HSI48);
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <BSP_STM32_RCC_CLKConfig_USBFS+0x1c>)
 8008d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8c:	4a04      	ldr	r2, [pc, #16]	; (8008da0 <BSP_STM32_RCC_CLKConfig_USBFS+0x1c>)
 8008d8e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d92:	6553      	str	r3, [r2, #84]	; 0x54
	return BSP_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	58024400 	.word	0x58024400

08008da4 <BSP_STM32_RCC_CLKConfig_ADC>:

// Setting ADC clock source to PLL3
uint8_t BSP_STM32_RCC_CLKConfig_ADC() {
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, RCC_ADCCLKSOURCE_PLL3);
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <BSP_STM32_RCC_CLKConfig_ADC+0x20>)
 8008daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008db0:	4a04      	ldr	r2, [pc, #16]	; (8008dc4 <BSP_STM32_RCC_CLKConfig_ADC+0x20>)
 8008db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db6:	6593      	str	r3, [r2, #88]	; 0x58
	return BSP_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	58024400 	.word	0x58024400

08008dc8 <BSP_STM32_RCC_CLKConfig_LTDC>:

// Setting LTDC clock source to PLL3
uint8_t	BSP_STM32_RCC_CLKConfig_LTDC() {
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
	// Nothing to do. PLL3 is default and only clock source for LTDC.
	return BSP_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <BSP_STM32_RCC_PLLClockSource>:

// Setting the PLL clock source
uint8_t BSP_STM32_RCC_PLLClockSource(uint32_t pllsource) {
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, pllsource);
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <BSP_STM32_RCC_PLLClockSource+0x28>)
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f023 0203 	bic.w	r2, r3, #3
 8008de8:	4905      	ldr	r1, [pc, #20]	; (8008e00 <BSP_STM32_RCC_PLLClockSource+0x28>)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	628b      	str	r3, [r1, #40]	; 0x28
	return BSP_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	58024400 	.word	0x58024400

08008e04 <BSP_STM32_RCC_LSEConfigDrive>:

// Setting LSE drive capability
uint8_t BSP_STM32_RCC_LSEConfigDrive(uint32_t lsedrive) {
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, lsedrive);
 8008e0c:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <BSP_STM32_RCC_LSEConfigDrive+0x28>)
 8008e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e10:	f023 0218 	bic.w	r2, r3, #24
 8008e14:	4905      	ldr	r1, [pc, #20]	; (8008e2c <BSP_STM32_RCC_LSEConfigDrive+0x28>)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	670b      	str	r3, [r1, #112]	; 0x70
	return BSP_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	58024400 	.word	0x58024400

08008e30 <BSP_STM32_RCC_ConfigHSE>:

// Configure HSE Oscillator
uint8_t BSP_STM32_RCC_ConfigHSE(uint32_t hsestate) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]

	uint32_t tickstart;

	// Getting system clock source
    uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 8008e38:	4b43      	ldr	r3, [pc, #268]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e40:	617b      	str	r3, [r7, #20]
    uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e42:	4b41      	ldr	r3, [pc, #260]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	613b      	str	r3, [r7, #16]

    // When the HSE is used as system clock or clock source for PLL in these cases HSE will not be disabled
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE))) {
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d007      	beq.n	8008e5e <BSP_STM32_RCC_ConfigHSE+0x2e>
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2b18      	cmp	r3, #24
 8008e52:	d10f      	bne.n	8008e74 <BSP_STM32_RCC_ConfigHSE+0x44>
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d10a      	bne.n	8008e74 <BSP_STM32_RCC_ConfigHSE+0x44>

    	if (((RCC->CR & RCC_CR_HSERDY) != 0U) && (hsestate == RCC_HSE_OFF)) return BSP_ERROR;
 8008e5e:	4b3a      	ldr	r3, [pc, #232]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d067      	beq.n	8008f3a <BSP_STM32_RCC_ConfigHSE+0x10a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d164      	bne.n	8008f3a <BSP_STM32_RCC_ConfigHSE+0x10a>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e064      	b.n	8008f3e <BSP_STM32_RCC_ConfigHSE+0x10e>

    } else {

    	// Set the new HSE configuration
    	switch (hsestate) {
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e7a:	d01e      	beq.n	8008eba <BSP_STM32_RCC_ConfigHSE+0x8a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e82:	d827      	bhi.n	8008ed4 <BSP_STM32_RCC_ConfigHSE+0xa4>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <BSP_STM32_RCC_ConfigHSE+0x70>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e90:	d120      	bne.n	8008ed4 <BSP_STM32_RCC_ConfigHSE+0xa4>
    	case RCC_HSE_ON:
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008e92:	4b2d      	ldr	r3, [pc, #180]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a2c      	ldr	r2, [pc, #176]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e9c:	6013      	str	r3, [r2, #0]
    		break;
 8008e9e:	e025      	b.n	8008eec <BSP_STM32_RCC_ConfigHSE+0xbc>
    	case RCC_HSE_OFF:
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008ea0:	4b29      	ldr	r3, [pc, #164]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a28      	ldr	r2, [pc, #160]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eaa:	6013      	str	r3, [r2, #0]
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8008eac:	4b26      	ldr	r3, [pc, #152]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a25      	ldr	r2, [pc, #148]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eb6:	6013      	str	r3, [r2, #0]
    		break;
 8008eb8:	e018      	b.n	8008eec <BSP_STM32_RCC_ConfigHSE+0xbc>
    	case RCC_HSE_BYPASS:
    		SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8008eba:	4b23      	ldr	r3, [pc, #140]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a22      	ldr	r2, [pc, #136]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ec4:	6013      	str	r3, [r2, #0]
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008ec6:	4b20      	ldr	r3, [pc, #128]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ed0:	6013      	str	r3, [r2, #0]
    		break;
 8008ed2:	e00b      	b.n	8008eec <BSP_STM32_RCC_ConfigHSE+0xbc>
    	default:
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008ed4:	4b1c      	ldr	r3, [pc, #112]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a1b      	ldr	r2, [pc, #108]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ede:	6013      	str	r3, [r2, #0]
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8008ee0:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a18      	ldr	r2, [pc, #96]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eea:	6013      	str	r3, [r2, #0]
    	}

    	// Check the HSE State

    	tickstart = BSP_GetTick();
 8008eec:	f7fc fd7c 	bl	80059e8 <BSP_GetTick>
 8008ef0:	60f8      	str	r0, [r7, #12]
    	if (hsestate != RCC_HSE_OFF) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d019      	beq.n	8008f2c <BSP_STM32_RCC_ConfigHSE+0xfc>

    		// Wait till HSE is ready
    		while ((RCC->CR & RCC_CR_HSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 8008ef8:	e008      	b.n	8008f0c <BSP_STM32_RCC_ConfigHSE+0xdc>
 8008efa:	f7fc fd75 	bl	80059e8 <BSP_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b64      	cmp	r3, #100	; 0x64
 8008f06:	d901      	bls.n	8008f0c <BSP_STM32_RCC_ConfigHSE+0xdc>
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e018      	b.n	8008f3e <BSP_STM32_RCC_ConfigHSE+0x10e>
 8008f0c:	4b0e      	ldr	r3, [pc, #56]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0f0      	beq.n	8008efa <BSP_STM32_RCC_ConfigHSE+0xca>
 8008f18:	e010      	b.n	8008f3c <BSP_STM32_RCC_ConfigHSE+0x10c>

    	} else {

    		// Wait till HSE is disabled
    		while ((RCC->CR & RCC_CR_HSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 8008f1a:	f7fc fd65 	bl	80059e8 <BSP_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	2b64      	cmp	r3, #100	; 0x64
 8008f26:	d901      	bls.n	8008f2c <BSP_STM32_RCC_ConfigHSE+0xfc>
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e008      	b.n	8008f3e <BSP_STM32_RCC_ConfigHSE+0x10e>
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <BSP_STM32_RCC_ConfigHSE+0x118>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1f0      	bne.n	8008f1a <BSP_STM32_RCC_ConfigHSE+0xea>
 8008f38:	e000      	b.n	8008f3c <BSP_STM32_RCC_ConfigHSE+0x10c>
    	if (((RCC->CR & RCC_CR_HSERDY) != 0U) && (hsestate == RCC_HSE_OFF)) return BSP_ERROR;
 8008f3a:	bf00      	nop

        }
    }
    return BSP_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	58024400 	.word	0x58024400

08008f4c <BSP_STM32_RCC_ConfigHSI>:


// Configure HSI Oscillator
uint8_t BSP_STM32_RCC_ConfigHSI(uint32_t hsistate, uint32_t hsicalvalue) {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]

	uint32_t tickstart;

    // When the HSI is used as system clock it will not be disabled
    const uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 8008f56:	4b44      	ldr	r3, [pc, #272]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f5e:	617b      	str	r3, [r7, #20]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f60:	4b41      	ldr	r3, [pc, #260]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f64:	613b      	str	r3, [r7, #16]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI))) {
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d007      	beq.n	8008f7c <BSP_STM32_RCC_ConfigHSI+0x30>
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2b18      	cmp	r3, #24
 8008f70:	d134      	bne.n	8008fdc <BSP_STM32_RCC_ConfigHSI+0x90>
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d12f      	bne.n	8008fdc <BSP_STM32_RCC_ConfigHSI+0x90>

    	// When HSI is used as system clock it will not be disabled */
    	if (((RCC->CR & RCC_CR_HSIRDY) != 0U) && (hsistate == RCC_HSI_OFF)) {
 8008f7c:	4b3a      	ldr	r3, [pc, #232]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <BSP_STM32_RCC_ConfigHSI+0x46>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <BSP_STM32_RCC_ConfigHSI+0x46>

    		return BSP_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e066      	b.n	8009060 <BSP_STM32_RCC_ConfigHSI+0x114>

    	} else {

    		// Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8)
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 8008f92:	4b35      	ldr	r3, [pc, #212]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f023 0219 	bic.w	r2, r3, #25
 8008f9a:	4933      	ldr	r1, [pc, #204]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	600b      	str	r3, [r1, #0]

    		// Wait till HSI is ready
    		tickstart = BSP_GetTick();
 8008fa2:	f7fc fd21 	bl	80059e8 <BSP_GetTick>
 8008fa6:	60f8      	str	r0, [r7, #12]
    		while ((RCC->CR & RCC_CR_HSIRDY) == 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008fa8:	e008      	b.n	8008fbc <BSP_STM32_RCC_ConfigHSI+0x70>
 8008faa:	f7fc fd1d 	bl	80059e8 <BSP_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d901      	bls.n	8008fbc <BSP_STM32_RCC_ConfigHSI+0x70>
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e051      	b.n	8009060 <BSP_STM32_RCC_ConfigHSI+0x114>
 8008fbc:	4b2a      	ldr	r3, [pc, #168]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0304 	and.w	r3, r3, #4
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0f0      	beq.n	8008faa <BSP_STM32_RCC_ConfigHSI+0x5e>

    	}

        // Adjusts the Internal High Speed oscillator (HSI) calibration value (REV_V only)
    	MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, hsicalvalue << RCC_HSICFGR_HSITRIM_Pos);
 8008fc8:	4b27      	ldr	r3, [pc, #156]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	061b      	lsls	r3, r3, #24
 8008fd4:	4924      	ldr	r1, [pc, #144]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	604b      	str	r3, [r1, #4]
 8008fda:	e040      	b.n	800905e <BSP_STM32_RCC_ConfigHSI+0x112>

    } else {


    	// Check the HSI State
    	if (hsistate != RCC_HSI_OFF) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d024      	beq.n	800902c <BSP_STM32_RCC_ConfigHSI+0xe0>

    		// Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8)
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 8008fe2:	4b21      	ldr	r3, [pc, #132]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f023 0219 	bic.w	r2, r3, #25
 8008fea:	491f      	ldr	r1, [pc, #124]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	600b      	str	r3, [r1, #0]

    		// Wait till HSI is ready
    		tickstart = BSP_GetTick();
 8008ff2:	f7fc fcf9 	bl	80059e8 <BSP_GetTick>
 8008ff6:	60f8      	str	r0, [r7, #12]
    		while ((RCC->CR & RCC_CR_HSIRDY) == 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008ff8:	e008      	b.n	800900c <BSP_STM32_RCC_ConfigHSI+0xc0>
 8008ffa:	f7fc fcf5 	bl	80059e8 <BSP_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d901      	bls.n	800900c <BSP_STM32_RCC_ConfigHSI+0xc0>
 8009008:	2303      	movs	r3, #3
 800900a:	e029      	b.n	8009060 <BSP_STM32_RCC_ConfigHSI+0x114>
 800900c:	4b16      	ldr	r3, [pc, #88]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0f0      	beq.n	8008ffa <BSP_STM32_RCC_ConfigHSI+0xae>

    		// Adjusts the Internal High Speed oscillator (HSI) calibration value (REV_V only)
    		MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, hsicalvalue << RCC_HSICFGR_HSITRIM_Pos);
 8009018:	4b13      	ldr	r3, [pc, #76]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	061b      	lsls	r3, r3, #24
 8009024:	4910      	ldr	r1, [pc, #64]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8009026:	4313      	orrs	r3, r2
 8009028:	604b      	str	r3, [r1, #4]
 800902a:	e018      	b.n	800905e <BSP_STM32_RCC_ConfigHSI+0x112>

    	} else {

    		// Disable the Internal High Speed oscillator (HSI)
    		CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800902c:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a0d      	ldr	r2, [pc, #52]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8009032:	f023 0301 	bic.w	r3, r3, #1
 8009036:	6013      	str	r3, [r2, #0]

    	  	// Wait till HSI is disabled
    	  	tickstart = BSP_GetTick();
 8009038:	f7fc fcd6 	bl	80059e8 <BSP_GetTick>
 800903c:	60f8      	str	r0, [r7, #12]
    	  	while ((RCC->CR & RCC_CR_HSIRDY) != 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800903e:	e008      	b.n	8009052 <BSP_STM32_RCC_ConfigHSI+0x106>
 8009040:	f7fc fcd2 	bl	80059e8 <BSP_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2b02      	cmp	r3, #2
 800904c:	d901      	bls.n	8009052 <BSP_STM32_RCC_ConfigHSI+0x106>
 800904e:	2303      	movs	r3, #3
 8009050:	e006      	b.n	8009060 <BSP_STM32_RCC_ConfigHSI+0x114>
 8009052:	4b05      	ldr	r3, [pc, #20]	; (8009068 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f0      	bne.n	8009040 <BSP_STM32_RCC_ConfigHSI+0xf4>
    	}

    }

    return BSP_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	58024400 	.word	0x58024400

0800906c <BSP_STM32_RCC_ConfigLSE>:


// Configure LSE Oscillator
uint8_t BSP_STM32_RCC_ConfigLSE(uint32_t lsestate) {
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	// Enable write access to Backup domain
    PWR->CR1 |= PWR_CR1_DBP;
 8009074:	4b40      	ldr	r3, [pc, #256]	; (8009178 <BSP_STM32_RCC_ConfigLSE+0x10c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a3f      	ldr	r2, [pc, #252]	; (8009178 <BSP_STM32_RCC_ConfigLSE+0x10c>)
 800907a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800907e:	6013      	str	r3, [r2, #0]

    // Wait for Backup domain Write protection disable
    tickstart = BSP_GetTick();
 8009080:	f7fc fcb2 	bl	80059e8 <BSP_GetTick>
 8009084:	60f8      	str	r0, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 8009086:	e008      	b.n	800909a <BSP_STM32_RCC_ConfigLSE+0x2e>
 8009088:	f7fc fcae 	bl	80059e8 <BSP_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b64      	cmp	r3, #100	; 0x64
 8009094:	d901      	bls.n	800909a <BSP_STM32_RCC_ConfigLSE+0x2e>
 8009096:	2303      	movs	r3, #3
 8009098:	e069      	b.n	800916e <BSP_STM32_RCC_ConfigLSE+0x102>
 800909a:	4b37      	ldr	r3, [pc, #220]	; (8009178 <BSP_STM32_RCC_ConfigLSE+0x10c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0f0      	beq.n	8009088 <BSP_STM32_RCC_ConfigLSE+0x1c>

    // Set the new LSE configuration
    switch (lsestate) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b05      	cmp	r3, #5
 80090aa:	d01c      	beq.n	80090e6 <BSP_STM32_RCC_ConfigLSE+0x7a>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d826      	bhi.n	8009100 <BSP_STM32_RCC_ConfigLSE+0x94>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <BSP_STM32_RCC_ConfigLSE+0x60>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d120      	bne.n	8009100 <BSP_STM32_RCC_ConfigLSE+0x94>
    case RCC_LSE_ON:
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80090be:	4b2f      	ldr	r3, [pc, #188]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c2:	4a2e      	ldr	r2, [pc, #184]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090c4:	f043 0301 	orr.w	r3, r3, #1
 80090c8:	6713      	str	r3, [r2, #112]	; 0x70
    	break;
 80090ca:	e025      	b.n	8009118 <BSP_STM32_RCC_ConfigLSE+0xac>
    case RCC_LSE_OFF:
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80090cc:	4b2b      	ldr	r3, [pc, #172]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d0:	4a2a      	ldr	r2, [pc, #168]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090d2:	f023 0301 	bic.w	r3, r3, #1
 80090d6:	6713      	str	r3, [r2, #112]	; 0x70
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80090d8:	4b28      	ldr	r3, [pc, #160]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090dc:	4a27      	ldr	r2, [pc, #156]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090de:	f023 0304 	bic.w	r3, r3, #4
 80090e2:	6713      	str	r3, [r2, #112]	; 0x70
    	break;
 80090e4:	e018      	b.n	8009118 <BSP_STM32_RCC_ConfigLSE+0xac>
    case RCC_LSE_BYPASS:
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80090e6:	4b25      	ldr	r3, [pc, #148]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ea:	4a24      	ldr	r2, [pc, #144]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090ec:	f043 0304 	orr.w	r3, r3, #4
 80090f0:	6713      	str	r3, [r2, #112]	; 0x70
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80090f2:	4b22      	ldr	r3, [pc, #136]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	4a21      	ldr	r2, [pc, #132]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 80090f8:	f043 0301 	orr.w	r3, r3, #1
 80090fc:	6713      	str	r3, [r2, #112]	; 0x70
    	break;
 80090fe:	e00b      	b.n	8009118 <BSP_STM32_RCC_ConfigLSE+0xac>
	default:
		CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009100:	4b1e      	ldr	r3, [pc, #120]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 8009102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009104:	4a1d      	ldr	r2, [pc, #116]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 8009106:	f023 0301 	bic.w	r3, r3, #1
 800910a:	6713      	str	r3, [r2, #112]	; 0x70
		CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800910c:	4b1b      	ldr	r3, [pc, #108]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 800910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009110:	4a1a      	ldr	r2, [pc, #104]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 8009112:	f023 0304 	bic.w	r3, r3, #4
 8009116:	6713      	str	r3, [r2, #112]	; 0x70
    }


    // Check the LSE State
    tickstart = BSP_GetTick();
 8009118:	f7fc fc66 	bl	80059e8 <BSP_GetTick>
 800911c:	60f8      	str	r0, [r7, #12]
    if (lsestate != RCC_LSE_OFF) {
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d01d      	beq.n	8009160 <BSP_STM32_RCC_ConfigLSE+0xf4>

    	// Wait till LSE is ready
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 8009124:	e00a      	b.n	800913c <BSP_STM32_RCC_ConfigLSE+0xd0>
 8009126:	f7fc fc5f 	bl	80059e8 <BSP_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	f241 3288 	movw	r2, #5000	; 0x1388
 8009134:	4293      	cmp	r3, r2
 8009136:	d901      	bls.n	800913c <BSP_STM32_RCC_ConfigLSE+0xd0>
 8009138:	2303      	movs	r3, #3
 800913a:	e018      	b.n	800916e <BSP_STM32_RCC_ConfigLSE+0x102>
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 800913e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0ee      	beq.n	8009126 <BSP_STM32_RCC_ConfigLSE+0xba>
 8009148:	e010      	b.n	800916c <BSP_STM32_RCC_ConfigLSE+0x100>

    } else {

    	// Wait till LSE is disabled
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 800914a:	f7fc fc4d 	bl	80059e8 <BSP_GetTick>
 800914e:	4602      	mov	r2, r0
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	f241 3288 	movw	r2, #5000	; 0x1388
 8009158:	4293      	cmp	r3, r2
 800915a:	d901      	bls.n	8009160 <BSP_STM32_RCC_ConfigLSE+0xf4>
 800915c:	2303      	movs	r3, #3
 800915e:	e006      	b.n	800916e <BSP_STM32_RCC_ConfigLSE+0x102>
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <BSP_STM32_RCC_ConfigLSE+0x110>)
 8009162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1ee      	bne.n	800914a <BSP_STM32_RCC_ConfigLSE+0xde>

    }
    return BSP_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	58024800 	.word	0x58024800
 800917c:	58024400 	.word	0x58024400

08009180 <BSP_STM32_RCC_ConfigHSI48>:

// Configure HSI48 Oscillator
uint8_t BSP_STM32_RCC_ConfigHSI48(uint32_t hsi48state) {
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]

	uint32_t tickstart = BSP_GetTick();
 8009188:	f7fc fc2e 	bl	80059e8 <BSP_GetTick>
 800918c:	60f8      	str	r0, [r7, #12]

    // Check the HSI48 State
    if (hsi48state != RCC_HSI48_OFF) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d016      	beq.n	80091c2 <BSP_STM32_RCC_ConfigHSI48+0x42>
    	// Enable the Internal Low Speed oscillator (HSI48)
    	SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 8009194:	4b18      	ldr	r3, [pc, #96]	; (80091f8 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a17      	ldr	r2, [pc, #92]	; (80091f8 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 800919a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800919e:	6013      	str	r3, [r2, #0]

    	// Wait till HSI48 is ready
    	while ((RCC->CR & RCC_CR_HSI48RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80091a0:	e008      	b.n	80091b4 <BSP_STM32_RCC_ConfigHSI48+0x34>
 80091a2:	f7fc fc21 	bl	80059e8 <BSP_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d901      	bls.n	80091b4 <BSP_STM32_RCC_ConfigHSI48+0x34>
 80091b0:	2303      	movs	r3, #3
 80091b2:	e01d      	b.n	80091f0 <BSP_STM32_RCC_ConfigHSI48+0x70>
 80091b4:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0f0      	beq.n	80091a2 <BSP_STM32_RCC_ConfigHSI48+0x22>
 80091c0:	e015      	b.n	80091ee <BSP_STM32_RCC_ConfigHSI48+0x6e>

    } else {

    	// Disable the Internal Low Speed oscillator (HSI48)
    	CLEAR_BIT(RCC->CR, RCC_CR_HSI48ON);
 80091c2:	4b0d      	ldr	r3, [pc, #52]	; (80091f8 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a0c      	ldr	r2, [pc, #48]	; (80091f8 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 80091c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091cc:	6013      	str	r3, [r2, #0]

    	/* Wait till HSI48 is ready */
    	while ((RCC->CR & RCC_CR_HSI48RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80091ce:	e008      	b.n	80091e2 <BSP_STM32_RCC_ConfigHSI48+0x62>
 80091d0:	f7fc fc0a 	bl	80059e8 <BSP_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d901      	bls.n	80091e2 <BSP_STM32_RCC_ConfigHSI48+0x62>
 80091de:	2303      	movs	r3, #3
 80091e0:	e006      	b.n	80091f0 <BSP_STM32_RCC_ConfigHSI48+0x70>
 80091e2:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1f0      	bne.n	80091d0 <BSP_STM32_RCC_ConfigHSI48+0x50>

    }

    return BSP_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	58024400 	.word	0x58024400

080091fc <BSP_STM32_RCC_ConfigPLL1>:


uint8_t BSP_STM32_RCC_ConfigPLL1(uint32_t pllstate, uint32_t pllsource, uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r) {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]

	uint32_t tickstart;

	// Check if the PLL is used as system clock or not
	if ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL1) {
 800920a:	4b5a      	ldr	r3, [pc, #360]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009212:	2b18      	cmp	r3, #24
 8009214:	f000 80a7 	beq.w	8009366 <BSP_STM32_RCC_ConfigPLL1+0x16a>

		if (pllstate == RCC_PLL_ON) {
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b02      	cmp	r3, #2
 800921c:	f040 8089 	bne.w	8009332 <BSP_STM32_RCC_ConfigPLL1+0x136>

			// Disable the main PLL
			CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8009220:	4b54      	ldr	r3, [pc, #336]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a53      	ldr	r2, [pc, #332]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800922a:	6013      	str	r3, [r2, #0]

			// Wait till PLL is disabled
			tickstart = BSP_GetTick();
 800922c:	f7fc fbdc 	bl	80059e8 <BSP_GetTick>
 8009230:	6178      	str	r0, [r7, #20]
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8009232:	e008      	b.n	8009246 <BSP_STM32_RCC_ConfigPLL1+0x4a>
 8009234:	f7fc fbd8 	bl	80059e8 <BSP_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <BSP_STM32_RCC_ConfigPLL1+0x4a>
 8009242:	2303      	movs	r3, #3
 8009244:	e092      	b.n	800936c <BSP_STM32_RCC_ConfigPLL1+0x170>
 8009246:	4b4b      	ldr	r3, [pc, #300]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1f0      	bne.n	8009234 <BSP_STM32_RCC_ConfigPLL1+0x38>

			// Configure the main PLL clock source, multiplication and division factors
			MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | RCC_PLLCKSELR_DIVM1) , (pllsource | ( m << 4)));
 8009252:	4b48      	ldr	r3, [pc, #288]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009256:	4b48      	ldr	r3, [pc, #288]	; (8009378 <BSP_STM32_RCC_ConfigPLL1+0x17c>)
 8009258:	4013      	ands	r3, r2
 800925a:	6a3a      	ldr	r2, [r7, #32]
 800925c:	0111      	lsls	r1, r2, #4
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	430a      	orrs	r2, r1
 8009262:	4944      	ldr	r1, [pc, #272]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009264:	4313      	orrs	r3, r2
 8009266:	628b      	str	r3, [r1, #40]	; 0x28
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	3b01      	subs	r3, #1
 800926c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	3b01      	subs	r3, #1
 8009274:	025b      	lsls	r3, r3, #9
 8009276:	b29b      	uxth	r3, r3
 8009278:	431a      	orrs	r2, r3
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	3b01      	subs	r3, #1
 800927e:	041b      	lsls	r3, r3, #16
 8009280:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009284:	431a      	orrs	r2, r3
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	3b01      	subs	r3, #1
 800928a:	061b      	lsls	r3, r3, #24
 800928c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009290:	4938      	ldr	r1, [pc, #224]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009292:	4313      	orrs	r3, r2
 8009294:	630b      	str	r3, [r1, #48]	; 0x30

			// Disable PLLFRACN
			CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 8009296:	4b37      	ldr	r3, [pc, #220]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	4a36      	ldr	r2, [pc, #216]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Configure PLL PLL1FRACN (always 0 for this project)
			MODIFY_REG(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1, 0 << RCC_PLL1FRACR_FRACN1_Pos);
 80092a2:	4b34      	ldr	r3, [pc, #208]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a6:	4933      	ldr	r1, [pc, #204]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092a8:	4b34      	ldr	r3, [pc, #208]	; (800937c <BSP_STM32_RCC_ConfigPLL1+0x180>)
 80092aa:	4013      	ands	r3, r2
 80092ac:	634b      	str	r3, [r1, #52]	; 0x34

			// Select PLL1 input reference frequency range: VCI
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, pllrge);
 80092ae:	4b31      	ldr	r3, [pc, #196]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	f023 020c 	bic.w	r2, r3, #12
 80092b6:	492f      	ldr	r1, [pc, #188]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	62cb      	str	r3, [r1, #44]	; 0x2c

			// Select PLL1 output frequency range : VCO
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, pllvcosel);
 80092be:	4b2d      	ldr	r3, [pc, #180]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	f023 0202 	bic.w	r2, r3, #2
 80092c6:	492b      	ldr	r1, [pc, #172]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	62cb      	str	r3, [r1, #44]	; 0x2c

			// Enable PLL System Clock output
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVP);
 80092ce:	4b29      	ldr	r3, [pc, #164]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d2:	4a28      	ldr	r2, [pc, #160]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092d8:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Enable PLL1Q Clock output
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVQ);
 80092da:	4b26      	ldr	r3, [pc, #152]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092de:	4a25      	ldr	r2, [pc, #148]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092e4:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Enable PLL1R  Clock output
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVR);
 80092e6:	4b23      	ldr	r3, [pc, #140]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ea:	4a22      	ldr	r2, [pc, #136]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092f0:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Enable PLL1FRACN
			SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 80092f2:	4b20      	ldr	r3, [pc, #128]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	4a1f      	ldr	r2, [pc, #124]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 80092f8:	f043 0301 	orr.w	r3, r3, #1
 80092fc:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Enable the main PLL
			SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 80092fe:	4b1d      	ldr	r3, [pc, #116]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1c      	ldr	r2, [pc, #112]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009308:	6013      	str	r3, [r2, #0]

			// Wait till PLL is ready
			tickstart = BSP_GetTick();
 800930a:	f7fc fb6d 	bl	80059e8 <BSP_GetTick>
 800930e:	6178      	str	r0, [r7, #20]
			while ((RCC->CR & RCC_CR_PLL1RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8009310:	e008      	b.n	8009324 <BSP_STM32_RCC_ConfigPLL1+0x128>
 8009312:	f7fc fb69 	bl	80059e8 <BSP_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d901      	bls.n	8009324 <BSP_STM32_RCC_ConfigPLL1+0x128>
 8009320:	2303      	movs	r3, #3
 8009322:	e023      	b.n	800936c <BSP_STM32_RCC_ConfigPLL1+0x170>
 8009324:	4b13      	ldr	r3, [pc, #76]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0f0      	beq.n	8009312 <BSP_STM32_RCC_ConfigPLL1+0x116>
 8009330:	e01b      	b.n	800936a <BSP_STM32_RCC_ConfigPLL1+0x16e>

		} else {

			// Disable the main PLL
			CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8009332:	4b10      	ldr	r3, [pc, #64]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a0f      	ldr	r2, [pc, #60]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 8009338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800933c:	6013      	str	r3, [r2, #0]

			// Wait till PLL is disabled
			tickstart = BSP_GetTick();
 800933e:	f7fc fb53 	bl	80059e8 <BSP_GetTick>
 8009342:	6178      	str	r0, [r7, #20]
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8009344:	e008      	b.n	8009358 <BSP_STM32_RCC_ConfigPLL1+0x15c>
 8009346:	f7fc fb4f 	bl	80059e8 <BSP_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d901      	bls.n	8009358 <BSP_STM32_RCC_ConfigPLL1+0x15c>
 8009354:	2303      	movs	r3, #3
 8009356:	e009      	b.n	800936c <BSP_STM32_RCC_ConfigPLL1+0x170>
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1f0      	bne.n	8009346 <BSP_STM32_RCC_ConfigPLL1+0x14a>
 8009364:	e001      	b.n	800936a <BSP_STM32_RCC_ConfigPLL1+0x16e>
		}

    } else {

    	// PLL1 already used as SYSCLK source, therefore full configuration cannot be completed
    	return BSP_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e000      	b.n	800936c <BSP_STM32_RCC_ConfigPLL1+0x170>

    }

	return BSP_OK;
 800936a:	2300      	movs	r3, #0

}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	58024400 	.word	0x58024400
 8009378:	fffffc0c 	.word	0xfffffc0c
 800937c:	ffff0007 	.word	0xffff0007

08009380 <BSP_STM32_RCC_ConfigPLL3>:


uint8_t BSP_STM32_RCC_ConfigPLL3(uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r, uint32_t frac) {
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]

	uint32_t tickstart;

	// Check that PLL3 OSC clock source is already set
	if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLSOURCE_NONE) return BSP_ERROR;
 800938e:	4b4b      	ldr	r3, [pc, #300]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	2b03      	cmp	r3, #3
 8009398:	d101      	bne.n	800939e <BSP_STM32_RCC_ConfigPLL3+0x1e>
 800939a:	2301      	movs	r3, #1
 800939c:	e089      	b.n	80094b2 <BSP_STM32_RCC_ConfigPLL3+0x132>

	// Disable PLL3
	CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 800939e:	4b47      	ldr	r3, [pc, #284]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a46      	ldr	r2, [pc, #280]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 80093a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093a8:	6013      	str	r3, [r2, #0]

    // Wait till PLL3 is disabled
	tickstart = BSP_GetTick();
 80093aa:	f7fc fb1d 	bl	80059e8 <BSP_GetTick>
 80093ae:	6178      	str	r0, [r7, #20]
	while ((RCC->CR & RCC_CR_PLL3RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80093b0:	e008      	b.n	80093c4 <BSP_STM32_RCC_ConfigPLL3+0x44>
 80093b2:	f7fc fb19 	bl	80059e8 <BSP_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d901      	bls.n	80093c4 <BSP_STM32_RCC_ConfigPLL3+0x44>
 80093c0:	2303      	movs	r3, #3
 80093c2:	e076      	b.n	80094b2 <BSP_STM32_RCC_ConfigPLL3+0x132>
 80093c4:	4b3d      	ldr	r3, [pc, #244]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1f0      	bne.n	80093b2 <BSP_STM32_RCC_ConfigPLL3+0x32>

    // Configure the PLL3  multiplication and division factors
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3, (m << 20));
 80093d0:	4b3a      	ldr	r3, [pc, #232]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	051b      	lsls	r3, r3, #20
 80093dc:	4937      	ldr	r1, [pc, #220]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	628b      	str	r3, [r1, #40]	; 0x28
    WRITE_REG (RCC->PLL3DIVR, (((n - 1) & RCC_PLL3DIVR_N3) | (((p - 1) << 9U) & RCC_PLL3DIVR_P3) | (((q -1) << 16U) & RCC_PLL3DIVR_Q3) | (((r - 1) << 24U) & RCC_PLL3DIVR_R3)));
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	3b01      	subs	r3, #1
 80093ee:	025b      	lsls	r3, r3, #9
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	431a      	orrs	r2, r3
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	3b01      	subs	r3, #1
 80093f8:	041b      	lsls	r3, r3, #16
 80093fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093fe:	431a      	orrs	r2, r3
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	3b01      	subs	r3, #1
 8009404:	061b      	lsls	r3, r3, #24
 8009406:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800940a:	492c      	ldr	r1, [pc, #176]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800940c:	4313      	orrs	r3, r2
 800940e:	640b      	str	r3, [r1, #64]	; 0x40

	// Select PLL3 input reference frequency range: VCI
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3RGE, pllrge);
 8009410:	4b2a      	ldr	r3, [pc, #168]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009418:	4928      	ldr	r1, [pc, #160]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	4313      	orrs	r3, r2
 800941e:	62cb      	str	r3, [r1, #44]	; 0x2c

	// Select PLL3 output frequency range : VCO
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3VCOSEL, pllvcosel);
 8009420:	4b26      	ldr	r3, [pc, #152]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009428:	4924      	ldr	r1, [pc, #144]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	4313      	orrs	r3, r2
 800942e:	62cb      	str	r3, [r1, #44]	; 0x2c

	// Disable PLL3FRACN
    CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN);
 8009430:	4b22      	ldr	r3, [pc, #136]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	4a21      	ldr	r2, [pc, #132]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800943a:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Configures PLL3 clock Fractional Part Of The Multiplication Factor
    MODIFY_REG(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3, frac << RCC_PLL3FRACR_FRACN3_Pos);
 800943c:	4b1f      	ldr	r3, [pc, #124]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800943e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009440:	4b1f      	ldr	r3, [pc, #124]	; (80094c0 <BSP_STM32_RCC_ConfigPLL3+0x140>)
 8009442:	4013      	ands	r3, r2
 8009444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009446:	00d2      	lsls	r2, r2, #3
 8009448:	491c      	ldr	r1, [pc, #112]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800944a:	4313      	orrs	r3, r2
 800944c:	644b      	str	r3, [r1, #68]	; 0x44

	// Enable PLL3FRACN
    SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN);
 800944e:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	4a1a      	ldr	r2, [pc, #104]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009458:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Enable the PLL3 clock outputs
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVP);
 800945a:	4b18      	ldr	r3, [pc, #96]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800945c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945e:	4a17      	ldr	r2, [pc, #92]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009464:	62d3      	str	r3, [r2, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVQ);
 8009466:	4b15      	ldr	r3, [pc, #84]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	4a14      	ldr	r2, [pc, #80]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800946c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009470:	62d3      	str	r3, [r2, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVR);
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	4a11      	ldr	r2, [pc, #68]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800947c:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Enable PLL3
    SET_BIT(RCC->CR, RCC_CR_PLL3ON);
 800947e:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a0e      	ldr	r2, [pc, #56]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 8009484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009488:	6013      	str	r3, [r2, #0]

    // Wait till PLL3 is enabled
	tickstart = BSP_GetTick();
 800948a:	f7fc faad 	bl	80059e8 <BSP_GetTick>
 800948e:	6178      	str	r0, [r7, #20]
	while ((RCC->CR & RCC_CR_PLL3RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8009490:	e008      	b.n	80094a4 <BSP_STM32_RCC_ConfigPLL3+0x124>
 8009492:	f7fc faa9 	bl	80059e8 <BSP_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	2b02      	cmp	r3, #2
 800949e:	d901      	bls.n	80094a4 <BSP_STM32_RCC_ConfigPLL3+0x124>
 80094a0:	2303      	movs	r3, #3
 80094a2:	e006      	b.n	80094b2 <BSP_STM32_RCC_ConfigPLL3+0x132>
 80094a4:	4b05      	ldr	r3, [pc, #20]	; (80094bc <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0f0      	beq.n	8009492 <BSP_STM32_RCC_ConfigPLL3+0x112>

	return BSP_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	58024400 	.word	0x58024400
 80094c0:	ffff0007 	.word	0xffff0007

080094c4 <BSP_STM32_RCC_ClockConfig>:

uint8_t BSP_STM32_RCC_ClockConfig(uint32_t clocktype, uint32_t SYSSource, uint32_t SYSDiv, uint32_t AHBDiv, uint32_t APB1Div, uint32_t APB2Div, uint32_t APB3Div, uint32_t APB4Div, uint32_t flatency) {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	603b      	str	r3, [r7, #0]

	// To correctly read data from FLASH memory, the number of wait states (LATENCY) must be correctly programmed
	// according to the frequency of the CPU clock (HCLK) and the supply voltage of the device.

	// Increasing the CPU frequency
	if (flatency > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))  {
 80094d2:	4b82      	ldr	r3, [pc, #520]	; (80096dc <BSP_STM32_RCC_ClockConfig+0x218>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 030f 	and.w	r3, r3, #15
 80094da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094dc:	429a      	cmp	r2, r3
 80094de:	d910      	bls.n	8009502 <BSP_STM32_RCC_ClockConfig+0x3e>

	    // Program the new number of wait states to the LATENCY bits in the FLASH_ACR register
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, flatency);
 80094e0:	4b7e      	ldr	r3, [pc, #504]	; (80096dc <BSP_STM32_RCC_ClockConfig+0x218>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f023 020f 	bic.w	r2, r3, #15
 80094e8:	497c      	ldr	r1, [pc, #496]	; (80096dc <BSP_STM32_RCC_ClockConfig+0x218>)
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	4313      	orrs	r3, r2
 80094ee:	600b      	str	r3, [r1, #0]

	    // Check that the new number of wait states is taken into account to access the Flash memory by reading the FLASH_ACR register
	    if ((READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)) != flatency) return BSP_ERROR;
 80094f0:	4b7a      	ldr	r3, [pc, #488]	; (80096dc <BSP_STM32_RCC_ClockConfig+0x218>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 030f 	and.w	r3, r3, #15
 80094f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d001      	beq.n	8009502 <BSP_STM32_RCC_ClockConfig+0x3e>
 80094fe:	2301      	movs	r3, #1
 8009500:	e141      	b.n	8009786 <BSP_STM32_RCC_ClockConfig+0x2c2>

	}

	// Clocks Configuration
	if ((clocktype & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1) {
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00e      	beq.n	800952a <BSP_STM32_RCC_ClockConfig+0x66>

		if (APB3Div > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, APB3Div);
 800950c:	4b74      	ldr	r3, [pc, #464]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009516:	429a      	cmp	r2, r3
 8009518:	d907      	bls.n	800952a <BSP_STM32_RCC_ClockConfig+0x66>
 800951a:	4b71      	ldr	r3, [pc, #452]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009522:	496f      	ldr	r1, [pc, #444]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	4313      	orrs	r3, r2
 8009528:	618b      	str	r3, [r1, #24]

	}

	if ((clocktype & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f003 0308 	and.w	r3, r3, #8
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00e      	beq.n	8009552 <BSP_STM32_RCC_ClockConfig+0x8e>

		if (APB1Div > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, APB1Div);
 8009534:	4b6a      	ldr	r3, [pc, #424]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800953c:	6a3a      	ldr	r2, [r7, #32]
 800953e:	429a      	cmp	r2, r3
 8009540:	d907      	bls.n	8009552 <BSP_STM32_RCC_ClockConfig+0x8e>
 8009542:	4b67      	ldr	r3, [pc, #412]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800954a:	4965      	ldr	r1, [pc, #404]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	4313      	orrs	r3, r2
 8009550:	61cb      	str	r3, [r1, #28]

	}

	if ((clocktype & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f003 0310 	and.w	r3, r3, #16
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00e      	beq.n	800957a <BSP_STM32_RCC_ClockConfig+0xb6>

		if (APB2Div > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, APB2Div);
 800955c:	4b60      	ldr	r3, [pc, #384]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009566:	429a      	cmp	r2, r3
 8009568:	d907      	bls.n	800957a <BSP_STM32_RCC_ClockConfig+0xb6>
 800956a:	4b5d      	ldr	r3, [pc, #372]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009572:	495b      	ldr	r1, [pc, #364]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	4313      	orrs	r3, r2
 8009578:	61cb      	str	r3, [r1, #28]

	}

	if ((clocktype & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1) {
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f003 0320 	and.w	r3, r3, #32
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00e      	beq.n	80095a2 <BSP_STM32_RCC_ClockConfig+0xde>

	    if (APB4Div > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 8009584:	4b56      	ldr	r3, [pc, #344]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800958c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800958e:	429a      	cmp	r2, r3
 8009590:	d907      	bls.n	80095a2 <BSP_STM32_RCC_ClockConfig+0xde>
 8009592:	4b53      	ldr	r3, [pc, #332]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800959a:	4951      	ldr	r1, [pc, #324]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	4313      	orrs	r3, r2
 80095a0:	620b      	str	r3, [r1, #32]

	}

	if ((clocktype & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00e      	beq.n	80095ca <BSP_STM32_RCC_ClockConfig+0x106>

		if (AHBDiv > (RCC->D1CFGR & RCC_D1CFGR_HPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, AHBDiv);
 80095ac:	4b4c      	ldr	r3, [pc, #304]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	f003 030f 	and.w	r3, r3, #15
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d907      	bls.n	80095ca <BSP_STM32_RCC_ClockConfig+0x106>
 80095ba:	4b49      	ldr	r3, [pc, #292]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	f023 020f 	bic.w	r2, r3, #15
 80095c2:	4947      	ldr	r1, [pc, #284]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	618b      	str	r3, [r1, #24]

	}

	if ((clocktype & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d057      	beq.n	8009684 <BSP_STM32_RCC_ClockConfig+0x1c0>

		MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, SYSDiv);
 80095d4:	4b42      	ldr	r3, [pc, #264]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80095dc:	4940      	ldr	r1, [pc, #256]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	618b      	str	r3, [r1, #24]

		switch (SYSSource) {
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d010      	beq.n	800960c <BSP_STM32_RCC_ClockConfig+0x148>
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d81d      	bhi.n	800962c <BSP_STM32_RCC_ClockConfig+0x168>
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d012      	beq.n	800961c <BSP_STM32_RCC_ClockConfig+0x158>
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d117      	bne.n	800962c <BSP_STM32_RCC_ClockConfig+0x168>
		case RCC_SYSCLKSOURCE_HSE:
			if ((RCC->CR & RCC_CR_HSERDY) == 0) return BSP_ERROR;
 80095fc:	4b38      	ldr	r3, [pc, #224]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d119      	bne.n	800963c <BSP_STM32_RCC_ClockConfig+0x178>
 8009608:	2301      	movs	r3, #1
 800960a:	e0bc      	b.n	8009786 <BSP_STM32_RCC_ClockConfig+0x2c2>
			break;
		case RCC_SYSCLKSOURCE_PLLCLK:
			if ((RCC->CR & RCC_CR_PLL1RDY) == 0) return BSP_ERROR;
 800960c:	4b34      	ldr	r3, [pc, #208]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d113      	bne.n	8009640 <BSP_STM32_RCC_ClockConfig+0x17c>
 8009618:	2301      	movs	r3, #1
 800961a:	e0b4      	b.n	8009786 <BSP_STM32_RCC_ClockConfig+0x2c2>
			break;
		case RCC_SYSCLKSOURCE_CSI:
			if ((RCC->CR & RCC_CR_CSIRDY) == 0) return BSP_ERROR;
 800961c:	4b30      	ldr	r3, [pc, #192]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10d      	bne.n	8009644 <BSP_STM32_RCC_ClockConfig+0x180>
 8009628:	2301      	movs	r3, #1
 800962a:	e0ac      	b.n	8009786 <BSP_STM32_RCC_ClockConfig+0x2c2>
			break;
		default:
			if ((RCC->CR & RCC_CR_HSIRDY) == 0) return BSP_ERROR;
 800962c:	4b2c      	ldr	r3, [pc, #176]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <BSP_STM32_RCC_ClockConfig+0x182>
 8009638:	2301      	movs	r3, #1
 800963a:	e0a4      	b.n	8009786 <BSP_STM32_RCC_ClockConfig+0x2c2>
			break;
 800963c:	bf00      	nop
 800963e:	e002      	b.n	8009646 <BSP_STM32_RCC_ClockConfig+0x182>
			break;
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <BSP_STM32_RCC_ClockConfig+0x182>
			break;
 8009644:	bf00      	nop
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, SYSSource);
 8009646:	4b26      	ldr	r3, [pc, #152]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	f023 0207 	bic.w	r2, r3, #7
 800964e:	4924      	ldr	r1, [pc, #144]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4313      	orrs	r3, r2
 8009654:	610b      	str	r3, [r1, #16]

		// Wait until selected Sys Clock is ready
		tickstart = BSP_GetTick();
 8009656:	f7fc f9c7 	bl	80059e8 <BSP_GetTick>
 800965a:	6178      	str	r0, [r7, #20]
		while ((RCC->CFGR & RCC_CFGR_SWS) != (SYSSource << RCC_CFGR_SWS_Pos)) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 800965c:	e00a      	b.n	8009674 <BSP_STM32_RCC_ClockConfig+0x1b0>
 800965e:	f7fc f9c3 	bl	80059e8 <BSP_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	f241 3288 	movw	r2, #5000	; 0x1388
 800966c:	4293      	cmp	r3, r2
 800966e:	d901      	bls.n	8009674 <BSP_STM32_RCC_ClockConfig+0x1b0>
 8009670:	2303      	movs	r3, #3
 8009672:	e088      	b.n	8009786 <BSP_STM32_RCC_ClockConfig+0x2c2>
 8009674:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	429a      	cmp	r2, r3
 8009682:	d1ec      	bne.n	800965e <BSP_STM32_RCC_ClockConfig+0x19a>

	}

	if ((clocktype & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00e      	beq.n	80096ac <BSP_STM32_RCC_ClockConfig+0x1e8>

		if (AHBDiv < (RCC->D1CFGR & RCC_D1CFGR_HPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, AHBDiv);
 800968e:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d207      	bcs.n	80096ac <BSP_STM32_RCC_ClockConfig+0x1e8>
 800969c:	4b10      	ldr	r3, [pc, #64]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	f023 020f 	bic.w	r2, r3, #15
 80096a4:	490e      	ldr	r1, [pc, #56]	; (80096e0 <BSP_STM32_RCC_ClockConfig+0x21c>)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	618b      	str	r3, [r1, #24]

	}

	// Decreasing the number of wait states because of lower CPU frequency
	if (flatency < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80096ac:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <BSP_STM32_RCC_ClockConfig+0x218>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d214      	bcs.n	80096e4 <BSP_STM32_RCC_ClockConfig+0x220>

		// Program the new number of wait states to the LATENCY bits in the FLASH_ACR register
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, flatency);
 80096ba:	4b08      	ldr	r3, [pc, #32]	; (80096dc <BSP_STM32_RCC_ClockConfig+0x218>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f023 020f 	bic.w	r2, r3, #15
 80096c2:	4906      	ldr	r1, [pc, #24]	; (80096dc <BSP_STM32_RCC_ClockConfig+0x218>)
 80096c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c6:	4313      	orrs	r3, r2
 80096c8:	600b      	str	r3, [r1, #0]

		// Check that the new number of wait states is taken into account to access the Flash memory by reading the FLASH_ACR register
		if ((READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)) != flatency) return BSP_ERROR;
 80096ca:	4b04      	ldr	r3, [pc, #16]	; (80096dc <BSP_STM32_RCC_ClockConfig+0x218>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 030f 	and.w	r3, r3, #15
 80096d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d005      	beq.n	80096e4 <BSP_STM32_RCC_ClockConfig+0x220>
 80096d8:	2301      	movs	r3, #1
 80096da:	e054      	b.n	8009786 <BSP_STM32_RCC_ClockConfig+0x2c2>
 80096dc:	52002000 	.word	0x52002000
 80096e0:	58024400 	.word	0x58024400

	}

	if ((clocktype & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1) {
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f003 0304 	and.w	r3, r3, #4
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00e      	beq.n	800970c <BSP_STM32_RCC_ClockConfig+0x248>

	    if (APB3Div < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, APB3Div);
 80096ee:	4b28      	ldr	r3, [pc, #160]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d207      	bcs.n	800970c <BSP_STM32_RCC_ClockConfig+0x248>
 80096fc:	4b24      	ldr	r3, [pc, #144]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009704:	4922      	ldr	r1, [pc, #136]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	4313      	orrs	r3, r2
 800970a:	618b      	str	r3, [r1, #24]

	}

	if ((clocktype & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00e      	beq.n	8009734 <BSP_STM32_RCC_ClockConfig+0x270>

		if (APB1Div < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, APB1Div);
 8009716:	4b1e      	ldr	r3, [pc, #120]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800971e:	6a3a      	ldr	r2, [r7, #32]
 8009720:	429a      	cmp	r2, r3
 8009722:	d207      	bcs.n	8009734 <BSP_STM32_RCC_ClockConfig+0x270>
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800972c:	4918      	ldr	r1, [pc, #96]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	4313      	orrs	r3, r2
 8009732:	61cb      	str	r3, [r1, #28]

	}

	if ((clocktype & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00e      	beq.n	800975c <BSP_STM32_RCC_ClockConfig+0x298>

		if (APB2Div < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, APB2Div);
 800973e:	4b14      	ldr	r3, [pc, #80]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009748:	429a      	cmp	r2, r3
 800974a:	d207      	bcs.n	800975c <BSP_STM32_RCC_ClockConfig+0x298>
 800974c:	4b10      	ldr	r3, [pc, #64]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009754:	490e      	ldr	r1, [pc, #56]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	4313      	orrs	r3, r2
 800975a:	61cb      	str	r3, [r1, #28]

	}

	if ((clocktype & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1) {
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00e      	beq.n	8009784 <BSP_STM32_RCC_ClockConfig+0x2c0>

		if (APB4Div < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 8009766:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800976e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009770:	429a      	cmp	r2, r3
 8009772:	d207      	bcs.n	8009784 <BSP_STM32_RCC_ClockConfig+0x2c0>
 8009774:	4b06      	ldr	r3, [pc, #24]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800977c:	4904      	ldr	r1, [pc, #16]	; (8009790 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	4313      	orrs	r3, r2
 8009782:	620b      	str	r3, [r1, #32]

	}

	return BSP_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	58024400 	.word	0x58024400

08009794 <BSP_STM32_RCC_GetSysClockFreq>:


uint32_t BSP_STM32_RCC_GetSysClockFreq(void) {
 8009794:	b480      	push	{r7}
 8009796:	b089      	sub	sp, #36	; 0x24
 8009798:	af00      	add	r7, sp, #0
    float_t fracn1, pllvco;
    uint32_t sysclockfreq;

    // Get SYSCLK source

    switch (RCC->CFGR & RCC_CFGR_SWS) {
 800979a:	4bb3      	ldr	r3, [pc, #716]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097a2:	2b18      	cmp	r3, #24
 80097a4:	f200 8155 	bhi.w	8009a52 <BSP_STM32_RCC_GetSysClockFreq+0x2be>
 80097a8:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <BSP_STM32_RCC_GetSysClockFreq+0x1c>)
 80097aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ae:	bf00      	nop
 80097b0:	08009815 	.word	0x08009815
 80097b4:	08009a53 	.word	0x08009a53
 80097b8:	08009a53 	.word	0x08009a53
 80097bc:	08009a53 	.word	0x08009a53
 80097c0:	08009a53 	.word	0x08009a53
 80097c4:	08009a53 	.word	0x08009a53
 80097c8:	08009a53 	.word	0x08009a53
 80097cc:	08009a53 	.word	0x08009a53
 80097d0:	0800983b 	.word	0x0800983b
 80097d4:	08009a53 	.word	0x08009a53
 80097d8:	08009a53 	.word	0x08009a53
 80097dc:	08009a53 	.word	0x08009a53
 80097e0:	08009a53 	.word	0x08009a53
 80097e4:	08009a53 	.word	0x08009a53
 80097e8:	08009a53 	.word	0x08009a53
 80097ec:	08009a53 	.word	0x08009a53
 80097f0:	08009841 	.word	0x08009841
 80097f4:	08009a53 	.word	0x08009a53
 80097f8:	08009a53 	.word	0x08009a53
 80097fc:	08009a53 	.word	0x08009a53
 8009800:	08009a53 	.word	0x08009a53
 8009804:	08009a53 	.word	0x08009a53
 8009808:	08009a53 	.word	0x08009a53
 800980c:	08009a53 	.word	0x08009a53
 8009810:	08009847 	.word	0x08009847

    case RCC_CFGR_SWS_HSI:  // HSI used as system clock source

    	if ((RCC->CR & RCC_CR_HSIDIV_Msk) != 0U) {
 8009814:	4b94      	ldr	r3, [pc, #592]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0318 	and.w	r3, r3, #24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d009      	beq.n	8009834 <BSP_STM32_RCC_GetSysClockFreq+0xa0>

    		sysclockfreq = (uint32_t)(HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8009820:	4b91      	ldr	r3, [pc, #580]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	08db      	lsrs	r3, r3, #3
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	4a90      	ldr	r2, [pc, #576]	; (8009a6c <BSP_STM32_RCC_GetSysClockFreq+0x2d8>)
 800982c:	fa42 f303 	asr.w	r3, r2, r3
 8009830:	61bb      	str	r3, [r7, #24]
    	} else {

    		sysclockfreq = (uint32_t) HSI_VALUE;
    	}

    	break;
 8009832:	e111      	b.n	8009a58 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>
    		sysclockfreq = (uint32_t) HSI_VALUE;
 8009834:	4b8d      	ldr	r3, [pc, #564]	; (8009a6c <BSP_STM32_RCC_GetSysClockFreq+0x2d8>)
 8009836:	61bb      	str	r3, [r7, #24]
    	break;
 8009838:	e10e      	b.n	8009a58 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  // CSI used as system clock  source

    	sysclockfreq = CSI_VALUE;
 800983a:	4b8d      	ldr	r3, [pc, #564]	; (8009a70 <BSP_STM32_RCC_GetSysClockFreq+0x2dc>)
 800983c:	61bb      	str	r3, [r7, #24]
    	break;
 800983e:	e10b      	b.n	8009a58 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  // HSE used as system clock  source

    	sysclockfreq = HSE_VALUE;
 8009840:	4b8c      	ldr	r3, [pc, #560]	; (8009a74 <BSP_STM32_RCC_GetSysClockFreq+0x2e0>)
 8009842:	61bb      	str	r3, [r7, #24]
    	break;
 8009844:	e108      	b.n	8009a58 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_PLL1:  // PLL1 used as system clock  source

    	// PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN      SYSCLK = PLL_VCO / PLLR

    	pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009846:	4b88      	ldr	r3, [pc, #544]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 8009848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	617b      	str	r3, [r7, #20]
    	pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009850:	4b85      	ldr	r3, [pc, #532]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 8009852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009854:	091b      	lsrs	r3, r3, #4
 8009856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800985a:	613b      	str	r3, [r7, #16]
    	pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800985c:	4b82      	ldr	r3, [pc, #520]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800985e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	60fb      	str	r3, [r7, #12]
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009866:	4b80      	ldr	r3, [pc, #512]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 8009868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986a:	08db      	lsrs	r3, r3, #3
 800986c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	fb02 f303 	mul.w	r3, r2, r3
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	edc7 7a02 	vstr	s15, [r7, #8]

    	if (pllm != 0U) {
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 80e1 	beq.w	8009a4c <BSP_STM32_RCC_GetSysClockFreq+0x2b8>
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b02      	cmp	r3, #2
 800988e:	f000 8083 	beq.w	8009998 <BSP_STM32_RCC_GetSysClockFreq+0x204>
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b02      	cmp	r3, #2
 8009896:	f200 80a1 	bhi.w	80099dc <BSP_STM32_RCC_GetSysClockFreq+0x248>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <BSP_STM32_RCC_GetSysClockFreq+0x114>
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d056      	beq.n	8009954 <BSP_STM32_RCC_GetSysClockFreq+0x1c0>
 80098a6:	e099      	b.n	80099dc <BSP_STM32_RCC_GetSysClockFreq+0x248>
    		switch (pllsource) {

    		case RCC_PLLSOURCE_HSI:  // HSI used as PLL clock source

    			if ((RCC->CR & RCC_CR_HSIDIV_Msk) != 0U) {
 80098a8:	4b6f      	ldr	r3, [pc, #444]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0318 	and.w	r3, r3, #24
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d02d      	beq.n	8009910 <BSP_STM32_RCC_GetSysClockFreq+0x17c>

    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 80098b4:	4b6c      	ldr	r3, [pc, #432]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	08db      	lsrs	r3, r3, #3
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	4a6b      	ldr	r2, [pc, #428]	; (8009a6c <BSP_STM32_RCC_GetSysClockFreq+0x2d8>)
 80098c0:	fa42 f303 	asr.w	r3, r2, r3
 80098c4:	607b      	str	r3, [r7, #4]
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	ee07 3a90 	vmov	s15, r3
 80098cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098de:	4b62      	ldr	r3, [pc, #392]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80098f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a78 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 80098f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990a:	edc7 7a07 	vstr	s15, [r7, #28]
    			} else {

    				pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);

    			}
    			break;
 800990e:	e087      	b.n	8009a20 <BSP_STM32_RCC_GetSysClockFreq+0x28c>
    				pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a7c <BSP_STM32_RCC_GetSysClockFreq+0x2e8>
 800991e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009922:	4b51      	ldr	r3, [pc, #324]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 8009924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009932:	ed97 6a02 	vldr	s12, [r7, #8]
 8009936:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a78 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 800993a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994e:	edc7 7a07 	vstr	s15, [r7, #28]
    			break;
 8009952:	e065      	b.n	8009a20 <BSP_STM32_RCC_GetSysClockFreq+0x28c>

    		case RCC_PLLSOURCE_CSI:  // CSI used as PLL clock source

    			pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a80 <BSP_STM32_RCC_GetSysClockFreq+0x2ec>
 8009962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009966:	4b40      	ldr	r3, [pc, #256]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 8009968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009976:	ed97 6a02 	vldr	s12, [r7, #8]
 800997a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a78 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 800997e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800998a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009992:	edc7 7a07 	vstr	s15, [r7, #28]
    			break;
 8009996:	e043      	b.n	8009a20 <BSP_STM32_RCC_GetSysClockFreq+0x28c>

    		case RCC_PLLSOURCE_HSE:  // HSE used as PLL clock source

    			pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a84 <BSP_STM32_RCC_GetSysClockFreq+0x2f0>
 80099a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099aa:	4b2f      	ldr	r3, [pc, #188]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 80099ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80099be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a78 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 80099c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d6:	edc7 7a07 	vstr	s15, [r7, #28]
    			break;
 80099da:	e021      	b.n	8009a20 <BSP_STM32_RCC_GetSysClockFreq+0x28c>

    		default:

    			pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a80 <BSP_STM32_RCC_GetSysClockFreq+0x2ec>
 80099ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ee:	4b1e      	ldr	r3, [pc, #120]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 80099f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a78 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 8009a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1a:	edc7 7a07 	vstr	s15, [r7, #28]
    			break;
 8009a1e:	bf00      	nop

    		}

        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009a20:	4b11      	ldr	r3, [pc, #68]	; (8009a68 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 8009a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a24:	0a5b      	lsrs	r3, r3, #9
 8009a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	ee07 3a90 	vmov	s15, r3
 8009a34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a44:	ee17 3a90 	vmov	r3, s15
 8009a48:	61bb      	str	r3, [r7, #24]

    	} else {

    		sysclockfreq = 0U;
    	}
    	break;
 8009a4a:	e005      	b.n	8009a58 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>
    		sysclockfreq = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	61bb      	str	r3, [r7, #24]
    	break;
 8009a50:	e002      	b.n	8009a58 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>

    default:

    	sysclockfreq = CSI_VALUE;
 8009a52:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <BSP_STM32_RCC_GetSysClockFreq+0x2dc>)
 8009a54:	61bb      	str	r3, [r7, #24]
    	break;
 8009a56:	bf00      	nop

    }

    return sysclockfreq;
 8009a58:	69bb      	ldr	r3, [r7, #24]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3724      	adds	r7, #36	; 0x24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	58024400 	.word	0x58024400
 8009a6c:	03d09000 	.word	0x03d09000
 8009a70:	003d0900 	.word	0x003d0900
 8009a74:	017d7840 	.word	0x017d7840
 8009a78:	46000000 	.word	0x46000000
 8009a7c:	4c742400 	.word	0x4c742400
 8009a80:	4a742400 	.word	0x4a742400
 8009a84:	4bbebc20 	.word	0x4bbebc20

08009a88 <_RTC_WaitForSynchro>:
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
  return (tmp + (Value & 0x0FU));
}


static uint8_t _RTC_WaitForSynchro(RTC_TypeDef *hrtc) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]

	uint32_t tickstart = BSP_GetTick();
 8009a90:	f7fb ffaa 	bl	80059e8 <BSP_GetTick>
 8009a94:	60f8      	str	r0, [r7, #12]

	// Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect)
	hrtc->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a0b      	ldr	r2, [pc, #44]	; (8009ac8 <_RTC_WaitForSynchro+0x40>)
 8009a9a:	60da      	str	r2, [r3, #12]

	// Wait the registers to be synchronized
    while ((hrtc->ISR & RTC_ISR_RSF) == 0U)
 8009a9c:	e009      	b.n	8009ab2 <_RTC_WaitForSynchro+0x2a>
    	if ((BSP_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) return BSP_TIMEOUT;
 8009a9e:	f7fb ffa3 	bl	80059e8 <BSP_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009aac:	d901      	bls.n	8009ab2 <_RTC_WaitForSynchro+0x2a>
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e006      	b.n	8009ac0 <_RTC_WaitForSynchro+0x38>
    while ((hrtc->ISR & RTC_ISR_RSF) == 0U)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0ef      	beq.n	8009a9e <_RTC_WaitForSynchro+0x16>

    return BSP_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	0003ff5f 	.word	0x0003ff5f

08009acc <_RTC_WriteEnable>:


static void _RTC_WriteEnable(RTC_TypeDef * hrtc) {
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
	// Enables write to registers
	hrtc->WPR = 0xCA;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	22ca      	movs	r2, #202	; 0xca
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24
	hrtc->WPR = 0x53;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2253      	movs	r2, #83	; 0x53
 8009ade:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <_RTC_WriteDisable>:


static void _RTC_WriteDisable(RTC_TypeDef * hrtc) {
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
	// Disable write to registers
	hrtc->WPR = 0xFF;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	22ff      	movs	r2, #255	; 0xff
 8009af8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009afa:	bf00      	nop
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <_RTC_EnterInitMode>:


static uint8_t _RTC_EnterInitMode(RTC_TypeDef * hrtc) {
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]

	uint32_t tickstart;

	// Check if the Initialization mode is set
	if ((hrtc->ISR & RTC_ISR_INITF) == 0U) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d117      	bne.n	8009b4a <_RTC_EnterInitMode+0x44>

		// Set the Initialization mode
		hrtc->ISR = (uint32_t)RTC_INIT_MASK;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b20:	60da      	str	r2, [r3, #12]

		tickstart = BSP_GetTick();
 8009b22:	f7fb ff61 	bl	80059e8 <BSP_GetTick>
 8009b26:	60f8      	str	r0, [r7, #12]

		// Wait till RTC is in INIT state and if timeout is reached exit
		while ((hrtc->ISR & RTC_ISR_INITF) == 0U)
 8009b28:	e009      	b.n	8009b3e <_RTC_EnterInitMode+0x38>
			if((BSP_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE) return BSP_TIMEOUT;
 8009b2a:	f7fb ff5d 	bl	80059e8 <BSP_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b38:	d901      	bls.n	8009b3e <_RTC_EnterInitMode+0x38>
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e006      	b.n	8009b4c <_RTC_EnterInitMode+0x46>
		while ((hrtc->ISR & RTC_ISR_INITF) == 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0ef      	beq.n	8009b2a <_RTC_EnterInitMode+0x24>
	}
	return BSP_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_RTC_ExitInitMode>:


static uint8_t _RTC_ExitInitMode(RTC_TypeDef *hrtc)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	// Exit Initialization mode
	CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009b5c:	4b12      	ldr	r3, [pc, #72]	; (8009ba8 <_RTC_ExitInitMode+0x54>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	4a11      	ldr	r2, [pc, #68]	; (8009ba8 <_RTC_ExitInitMode+0x54>)
 8009b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b66:	60d3      	str	r3, [r2, #12]

	// If CR_BYPSHAD bit = 0, wait for synchro
	if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD)) {
 8009b68:	4b0f      	ldr	r3, [pc, #60]	; (8009ba8 <_RTC_ExitInitMode+0x54>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f003 0320 	and.w	r3, r3, #32
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <_RTC_ExitInitMode+0x2c>
		// Clear BYPSHAD bit
		CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b74:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <_RTC_ExitInitMode+0x54>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	4a0b      	ldr	r2, [pc, #44]	; (8009ba8 <_RTC_ExitInitMode+0x54>)
 8009b7a:	f023 0320 	bic.w	r3, r3, #32
 8009b7e:	6093      	str	r3, [r2, #8]
    }

	if (_RTC_WaitForSynchro(hrtc)) return BSP_TIMEOUT;
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ff81 	bl	8009a88 <_RTC_WaitForSynchro>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <_RTC_ExitInitMode+0x3c>
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e006      	b.n	8009b9e <_RTC_ExitInitMode+0x4a>

	// Restore BYPSHAD bit
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b90:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <_RTC_ExitInitMode+0x54>)
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	4a04      	ldr	r2, [pc, #16]	; (8009ba8 <_RTC_ExitInitMode+0x54>)
 8009b96:	f043 0320 	orr.w	r3, r3, #32
 8009b9a:	6093      	str	r3, [r2, #8]

  return BSP_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	58004000 	.word	0x58004000

08009bac <BSP_STM32_RTC_Init>:


uint8_t BSP_STM32_RTC_Init(RTC_TypeDef * hrtc, uint32_t AsynchPrediv, uint32_t SynchPrediv) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
	// TODO: This code will be moved to separate part responsible for configuration of debugger interface
	// DBGMCU->APB4FZ1 |= DBGMCU_APB4FZ1_DBG_RTC;
	// DBGMCU->APB4FZ2 |= DBGMCU_APB4FZ2_DBG_RTC;

	// Check whether the calendar needs to be initialized
	if (((hrtc->ISR)  & (RTC_ISR_INITS)) == RTC_ISR_INITS) return BSP_OK;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f003 0310 	and.w	r3, r3, #16
 8009bc0:	2b10      	cmp	r3, #16
 8009bc2:	d101      	bne.n	8009bc8 <BSP_STM32_RTC_Init+0x1c>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e03a      	b.n	8009c3e <BSP_STM32_RTC_Init+0x92>

	// Disable the write protection for RTC registers
	_RTC_WriteEnable(hrtc);
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff ff7f 	bl	8009acc <_RTC_WriteEnable>

	// Enter Initialization mode
	if (_RTC_EnterInitMode(hrtc)) {
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7ff ff99 	bl	8009b06 <_RTC_EnterInitMode>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <BSP_STM32_RTC_Init+0x38>
		_RTC_WriteDisable(hrtc);	return BSP_ERROR;
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff ff86 	bl	8009aec <_RTC_WriteDisable>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e02c      	b.n	8009c3e <BSP_STM32_RTC_Init+0x92>
	}

	// Clear RTC_CR FMT, OSEL and POL Bits
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	4b17      	ldr	r3, [pc, #92]	; (8009c48 <BSP_STM32_RTC_Init+0x9c>)
 8009bea:	4013      	ands	r3, r2
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	6093      	str	r3, [r2, #8]

	// Set RTC_CR register
	hrtc->CR |= (RTC_HOURFORMAT_24 | RTC_OUTPUT_DISABLE | RTC_OUTPUT_POLARITY_HIGH);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	609a      	str	r2, [r3, #8]

	// Configure the RTC PRER
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	041b      	lsls	r3, r3, #16
 8009bfc:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009c06:	431a      	orrs	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	611a      	str	r2, [r3, #16]

	// Exit Initialization mode
	if (_RTC_ExitInitMode(hrtc)) {
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f7ff ffa1 	bl	8009b54 <_RTC_ExitInitMode>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <BSP_STM32_RTC_Init+0x76>
		_RTC_WriteDisable(hrtc);	return BSP_ERROR;
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f7ff ff67 	bl	8009aec <_RTC_WriteDisable>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e00d      	b.n	8009c3e <BSP_STM32_RTC_Init+0x92>
	}

	hrtc->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c26:	f023 0203 	bic.w	r2, r3, #3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	64da      	str	r2, [r3, #76]	; 0x4c
	hrtc->OR |= (RTC_OUTPUT_TYPE_OPENDRAIN | RTC_OUTPUT_REMAP_NONE);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	64da      	str	r2, [r3, #76]	; 0x4c

	// Enable the write protection for RTC registers
	_RTC_WriteDisable(hrtc);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f7ff ff58 	bl	8009aec <_RTC_WriteDisable>
	return BSP_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	ff8fffbf 	.word	0xff8fffbf

08009c4c <_SD_IdentifyCard>:
} SDMMC_CardStatus_TypeDef;




static uint8_t _SD_IdentifyCard(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]

	SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	3328      	adds	r3, #40	; 0x28
 8009c5a:	60fb      	str	r3, [r7, #12]

	__IO uint32_t count = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	60bb      	str	r3, [r7, #8]
	uint32_t response = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
	uint32_t validvoltage = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	613b      	str	r3, [r7, #16]

	// CMD0: GO_IDLE_STATE
	if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 f958 	bl	800af1e <SDMMC_CmdGoIdleState>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <_SD_IdentifyCard+0x2c>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e057      	b.n	8009d28 <_SD_IdentifyCard+0xdc>

	// CMD8: SEND_IF_COND: Command available only on V2.0 cards
	if (SDMMC_CmdOperCond(hsdmmc) == SDMMC_ERROR_TIMEOUT) {
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 f96e 	bl	800af5a <SDMMC_CmdOperCond>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c84:	d10a      	bne.n	8009c9c <_SD_IdentifyCard+0x50>

		// No response to CMD8
		sdmmc_ctx->SDCardVersion = CARD_V1_X;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	701a      	strb	r2, [r3, #0]
		// CMD0: GO_IDLE_STATE
		if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 f946 	bl	800af1e <SDMMC_CmdGoIdleState>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d02f      	beq.n	8009cf8 <_SD_IdentifyCard+0xac>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e045      	b.n	8009d28 <_SD_IdentifyCard+0xdc>

	} else {

		sdmmc_ctx->SDCardVersion = CARD_V2_X;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	701a      	strb	r2, [r3, #0]
		// SEND CMD55 APP_CMD with RCA as 0
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f978 	bl	800af9a <SDMMC_CmdAppCommand>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d023      	beq.n	8009cf8 <_SD_IdentifyCard+0xac>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e039      	b.n	8009d28 <_SD_IdentifyCard+0xdc>

	// Send ACMD41 SD_APP_OP_COND with Argument 0x80100000
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {

		// SEND CMD55 APP_CMD with RCA as 0
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 f96f 	bl	800af9a <SDMMC_CmdAppCommand>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <_SD_IdentifyCard+0x7a>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e030      	b.n	8009d28 <_SD_IdentifyCard+0xdc>

		// Send CMD41
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8009cc6:	491a      	ldr	r1, [pc, #104]	; (8009d30 <_SD_IdentifyCard+0xe4>)
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f001 f989 	bl	800afe0 <SDMMC_CmdAppOperCommand>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <_SD_IdentifyCard+0x8c>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e027      	b.n	8009d28 <_SD_IdentifyCard+0xdc>

		// Get command response
		response = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8009cd8:	2100      	movs	r1, #0
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 ffd1 	bl	800ac82 <SDMMC_GetResponse>
 8009ce0:	6178      	str	r0, [r7, #20]

		// Get operating voltage
		validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	0fdb      	lsrs	r3, r3, #31
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d101      	bne.n	8009cee <_SD_IdentifyCard+0xa2>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e000      	b.n	8009cf0 <_SD_IdentifyCard+0xa4>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	613b      	str	r3, [r7, #16]

		count++;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	60bb      	str	r3, [r7, #8]
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d802      	bhi.n	8009d08 <_SD_IdentifyCard+0xbc>
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0d5      	beq.n	8009cb4 <_SD_IdentifyCard+0x68>
	}

	if (count >= SDMMC_MAX_VOLT_TRIAL) return BSP_ERROR;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d901      	bls.n	8009d16 <_SD_IdentifyCard+0xca>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e008      	b.n	8009d28 <_SD_IdentifyCard+0xdc>

  	// Set default card type
	sdmmc_ctx->SDCardType = ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) ? CARD_SDHC_SDXC : CARD_SDSC;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	0f9b      	lsrs	r3, r3, #30
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	705a      	strb	r2, [r3, #1]

	return BSP_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	c1100000 	.word	0xc1100000

08009d34 <_SD_GetCardCSD>:


static uint8_t _SD_GetCardCSD(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, SDMMC_CSD_TypeDef * CSD) {
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]

	SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	3328      	adds	r3, #40	; 0x28
 8009d44:	617b      	str	r3, [r7, #20]

	CSD->CSDStruct = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0xC0000000U) >> 30U);
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	0f9b      	lsrs	r3, r3, #30
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	701a      	strb	r2, [r3, #0]
	CSD->SysSpecVersion = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x3C000000U) >> 26U);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	0e9b      	lsrs	r3, r3, #26
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	f003 030f 	and.w	r3, r3, #15
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	705a      	strb	r2, [r3, #1]
	CSD->Reserved1 = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x03000000U) >> 24U);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	0e1b      	lsrs	r3, r3, #24
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f003 0303 	and.w	r3, r3, #3
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	709a      	strb	r2, [r3, #2]
	CSD->TAAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x00FF0000U) >> 16U);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	0c1b      	lsrs	r3, r3, #16
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	70da      	strb	r2, [r3, #3]
	CSD->NSAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x0000FF00U) >> 8U);
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	0a1b      	lsrs	r3, r3, #8
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	711a      	strb	r2, [r3, #4]
	CSD->MaxBusClkFrec = (uint8_t)(sdmmc_ctx->SDCardSD[0] & 0x000000FFU);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	715a      	strb	r2, [r3, #5]
	CSD->CardComdClasses = (uint16_t)((sdmmc_ctx->SDCardSD[1] & 0xFFF00000U) >> 20U);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	0d1b      	lsrs	r3, r3, #20
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	80da      	strh	r2, [r3, #6]
	CSD->RdBlockLen = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x000F0000U) >> 16U);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	0c1b      	lsrs	r3, r3, #16
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	f003 030f 	and.w	r3, r3, #15
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	721a      	strb	r2, [r3, #8]
	CSD->PartBlockRead   = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00008000U) >> 15U);
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	0bdb      	lsrs	r3, r3, #15
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	725a      	strb	r2, [r3, #9]
	CSD->WrBlockMisalign = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00004000U) >> 14U);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	0b9b      	lsrs	r3, r3, #14
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	729a      	strb	r2, [r3, #10]
	CSD->RdBlockMisalign = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00002000U) >> 13U);
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	0b5b      	lsrs	r3, r3, #13
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	72da      	strb	r2, [r3, #11]
	CSD->DSRImpl = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00001000U) >> 12U);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	0b1b      	lsrs	r3, r3, #12
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	731a      	strb	r2, [r3, #12]
	CSD->Reserved2 = 0U; /*!< Reserved */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	735a      	strb	r2, [r3, #13]

	switch (sdmmc_ctx->SDCardType) {
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <_SD_GetCardCSD+0xde>
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d064      	beq.n	8009eda <_SD_GetCardCSD+0x1a6>
 8009e10:	e081      	b.n	8009f16 <_SD_GetCardCSD+0x1e2>
	case CARD_SDSC:
		CSD->DeviceSize = (((sdmmc_ctx->SDCardSD[1] & 0x000003FFU) << 2U) | ((sdmmc_ctx->SDCardSD[2] & 0xC0000000U) >> 30U));
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	009a      	lsls	r2, r3, #2
 8009e18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e22:	0f92      	lsrs	r2, r2, #30
 8009e24:	431a      	orrs	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	611a      	str	r2, [r3, #16]
		CSD->MaxRdCurrentVDDMin = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x38000000U) >> 27U);
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	0edb      	lsrs	r3, r3, #27
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	751a      	strb	r2, [r3, #20]
		CSD->MaxRdCurrentVDDMax = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x07000000U) >> 24U);
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	0e1b      	lsrs	r3, r3, #24
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	f003 0307 	and.w	r3, r3, #7
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	755a      	strb	r2, [r3, #21]
		CSD->MaxWrCurrentVDDMin = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00E00000U) >> 21U);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	0d5b      	lsrs	r3, r3, #21
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	759a      	strb	r2, [r3, #22]
		CSD->MaxWrCurrentVDDMax = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x001C0000U) >> 18U);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	0c9b      	lsrs	r3, r3, #18
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	f003 0307 	and.w	r3, r3, #7
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	75da      	strb	r2, [r3, #23]
		CSD->DeviceSizeMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00038000U) >> 15U);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	0bdb      	lsrs	r3, r3, #15
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	761a      	strb	r2, [r3, #24]
		sdmmc_ctx->SDCardBlockNbr  = (CSD->DeviceSize + 1U) ;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	631a      	str	r2, [r3, #48]	; 0x30
		sdmmc_ctx->SDCardBlockNbr *= (1UL << ((CSD->DeviceSizeMul & 0x07U) + 2U));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7e1b      	ldrb	r3, [r3, #24]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 0307 	and.w	r3, r3, #7
 8009e98:	3302      	adds	r3, #2
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ea4:	fb03 f202 	mul.w	r2, r3, r2
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	631a      	str	r2, [r3, #48]	; 0x30
		sdmmc_ctx->SDCardBlockSize = (1UL << (CSD->RdBlockLen & 0x0FU));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	7a1b      	ldrb	r3, [r3, #8]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	f003 030f 	and.w	r3, r3, #15
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	409a      	lsls	r2, r3
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	635a      	str	r2, [r3, #52]	; 0x34
		sdmmc_ctx->SDCardLogBlockNbr = (sdmmc_ctx->SDCardBlockNbr) * ((sdmmc_ctx->SDCardBlockSize) / 512U);
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ec6:	0a52      	lsrs	r2, r2, #9
 8009ec8:	fb03 f202 	mul.w	r2, r3, r2
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	639a      	str	r2, [r3, #56]	; 0x38
		sdmmc_ctx->SDCardLogBlockSize = 512U;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8009ed8:	e022      	b.n	8009f20 <_SD_GetCardCSD+0x1ec>
	case CARD_SDHC_SDXC:
		/* Byte 7 */
		CSD->DeviceSize = (((sdmmc_ctx->SDCardSD[1] & 0x0000003FU) << 16U) | ((sdmmc_ctx->SDCardSD[2] & 0xFFFF0000U) >> 16U));
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	041b      	lsls	r3, r3, #16
 8009ee0:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	0c1b      	lsrs	r3, r3, #16
 8009eea:	431a      	orrs	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	611a      	str	r2, [r3, #16]
		sdmmc_ctx->SDCardBlockNbr = ((CSD->DeviceSize + 1U) * 1024U);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	029a      	lsls	r2, r3, #10
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	631a      	str	r2, [r3, #48]	; 0x30
		sdmmc_ctx->SDCardLogBlockNbr = sdmmc_ctx->SDCardBlockNbr;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38
		sdmmc_ctx->SDCardBlockSize = 512U;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f0a:	635a      	str	r2, [r3, #52]	; 0x34
		sdmmc_ctx->SDCardLogBlockSize = sdmmc_ctx->SDCardBlockSize;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8009f14:	e004      	b.n	8009f20 <_SD_GetCardCSD+0x1ec>
	default:
		// Clear all the static flags
		__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	4a53      	ldr	r2, [pc, #332]	; (800a068 <_SD_GetCardCSD+0x334>)
 8009f1a:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e09d      	b.n	800a05c <_SD_GetCardCSD+0x328>
	}

	CSD->EraseGrSize = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00004000U) >> 14U);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	0b9b      	lsrs	r3, r3, #14
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	765a      	strb	r2, [r3, #25]
	CSD->EraseGrMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00003F80U) >> 7U);
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	09db      	lsrs	r3, r3, #7
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	769a      	strb	r2, [r3, #26]
	CSD->WrProtectGrSize = (uint8_t)(sdmmc_ctx->SDCardSD[2] & 0x0000007FU);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	76da      	strb	r2, [r3, #27]
	CSD->WrProtectGrEnable = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x80000000U) >> 31U);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f58:	0fdb      	lsrs	r3, r3, #31
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	771a      	strb	r2, [r3, #28]
	CSD->ManDeflECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x60000000U) >> 29U);
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	0f5b      	lsrs	r3, r3, #29
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	775a      	strb	r2, [r3, #29]
	CSD->WrSpeedFact = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x1C000000U) >> 26U);
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f76:	0e9b      	lsrs	r3, r3, #26
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f003 0307 	and.w	r3, r3, #7
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	779a      	strb	r2, [r3, #30]
	CSD->MaxWrBlockLen = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x03C00000U) >> 22U);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f88:	0d9b      	lsrs	r3, r3, #22
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 030f 	and.w	r3, r3, #15
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	77da      	strb	r2, [r3, #31]
	CSD->WriteBlockPaPartial = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00200000U) >> 21U);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9a:	0d5b      	lsrs	r3, r3, #21
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f883 2020 	strb.w	r2, [r3, #32]
	CSD->Reserved3 = 0;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	CSD->ContentProtectAppli = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00010000U) >> 16U);
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb6:	0c1b      	lsrs	r3, r3, #16
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	CSD->FileFormatGroup = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00008000U) >> 15U);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fca:	0bdb      	lsrs	r3, r3, #15
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	CSD->CopyFlag = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00004000U) >> 14U);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fde:	0b9b      	lsrs	r3, r3, #14
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	CSD->PermWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00002000U) >> 13U);
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff2:	0b5b      	lsrs	r3, r3, #13
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	CSD->TempWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00001000U) >> 12U);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a006:	0b1b      	lsrs	r3, r3, #12
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	CSD->FileFormat = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000C00U) >> 10U);
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01a:	0a9b      	lsrs	r3, r3, #10
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	b2da      	uxtb	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	CSD->ECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000300U) >> 8U);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	b2db      	uxtb	r3, r3
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	b2da      	uxtb	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	CSD->CSD_CRC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x000000FEU) >> 1U);
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	b2db      	uxtb	r3, r3
 800a046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	CSD->Reserved4 = 1;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	return BSP_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	371c      	adds	r7, #28
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	1fe00fff 	.word	0x1fe00fff

0800a06c <_SD_InitCard>:


static uint8_t _SD_InitCard(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b090      	sub	sp, #64	; 0x40
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]

	SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	3328      	adds	r3, #40	; 0x28
 800a07a:	63fb      	str	r3, [r7, #60]	; 0x3c

	SDMMC_CSD_TypeDef CSD;

	uint16_t sd_rca = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	817b      	strh	r3, [r7, #10]
	uint32_t tickstart = BSP_GetTick();
 800a080:	f7fb fcb2 	bl	80059e8 <BSP_GetTick>
 800a084:	63b8      	str	r0, [r7, #56]	; 0x38

	// Chheck the power State
	if (SDMMC_GetPowerState(hsdmmc) == 0U) return BSP_ERROR;
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fdb5 	bl	800abf6 <SDMMC_GetPowerState>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <_SD_InitCard+0x2a>
 800a092:	2301      	movs	r3, #1
 800a094:	e090      	b.n	800a1b8 <_SD_InitCard+0x14c>

	// Check if card is secured
	if (sdmmc_ctx->SDCardType == CARD_SECURED) return BSP_ERROR;
 800a096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a098:	785b      	ldrb	r3, [r3, #1]
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d101      	bne.n	800a0a2 <_SD_InitCard+0x36>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e08a      	b.n	800a1b8 <_SD_InitCard+0x14c>

    // Send CMD2 ALL_SEND_CID
    if (SDMMC_CmdSendCID(hsdmmc)) return BSP_ERROR;
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f001 f801 	bl	800b0aa <SDMMC_CmdSendCID>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <_SD_InitCard+0x46>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e082      	b.n	800a1b8 <_SD_InitCard+0x14c>

    //Get Card identification number data
    sdmmc_ctx->SDCardID[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fde4 	bl	800ac82 <SDMMC_GetResponse>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0be:	60da      	str	r2, [r3, #12]
    sdmmc_ctx->SDCardID[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 800a0c0:	2104      	movs	r1, #4
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fddd 	bl	800ac82 <SDMMC_GetResponse>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0cc:	611a      	str	r2, [r3, #16]
    sdmmc_ctx->SDCardID[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 800a0ce:	2108      	movs	r1, #8
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fdd6 	bl	800ac82 <SDMMC_GetResponse>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0da:	615a      	str	r2, [r3, #20]
    sdmmc_ctx->SDCardID[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 800a0dc:	210c      	movs	r1, #12
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fdcf 	bl	800ac82 <SDMMC_GetResponse>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e8:	619a      	str	r2, [r3, #24]

    // Send CMD3 SET_REL_ADDR with argument 0
    // SD Card publishes its RCA
    while (sd_rca == 0U) {
 800a0ea:	e015      	b.n	800a118 <_SD_InitCard+0xac>
    	if (SDMMC_CmdSetRelAdd(hsdmmc, &sd_rca)) return BSP_ERROR;
 800a0ec:	f107 030a 	add.w	r3, r7, #10
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 f818 	bl	800b128 <SDMMC_CmdSetRelAdd>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <_SD_InitCard+0x96>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e05a      	b.n	800a1b8 <_SD_InitCard+0x14c>
    	if ((BSP_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT) return BSP_ERROR;
 800a102:	f7fb fc71 	bl	80059e8 <BSP_GetTick>
 800a106:	4602      	mov	r2, r0
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	f241 3287 	movw	r2, #4999	; 0x1387
 800a110:	4293      	cmp	r3, r2
 800a112:	d901      	bls.n	800a118 <_SD_InitCard+0xac>
 800a114:	2301      	movs	r3, #1
 800a116:	e04f      	b.n	800a1b8 <_SD_InitCard+0x14c>
    while (sd_rca == 0U) {
 800a118:	897b      	ldrh	r3, [r7, #10]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0e6      	beq.n	800a0ec <_SD_InitCard+0x80>
    }

    // Get the SD card RCA
    sdmmc_ctx->SDCardRelAdd = sd_rca;
 800a11e:	897b      	ldrh	r3, [r7, #10]
 800a120:	461a      	mov	r2, r3
 800a122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a124:	62da      	str	r2, [r3, #44]	; 0x2c

    // Send CMD9 SEND_CSD with argument as card's RCA
    if (SDMMC_CmdSendCSD(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 800a126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	041b      	lsls	r3, r3, #16
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 ffda 	bl	800b0e8 <SDMMC_CmdSendCSD>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <_SD_InitCard+0xd2>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e03c      	b.n	800a1b8 <_SD_InitCard+0x14c>

    // Get Card Specific Data
    sdmmc_ctx->SDCardSD[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 800a13e:	2100      	movs	r1, #0
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fd9e 	bl	800ac82 <SDMMC_GetResponse>
 800a146:	4602      	mov	r2, r0
 800a148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14a:	61da      	str	r2, [r3, #28]
    sdmmc_ctx->SDCardSD[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 800a14c:	2104      	movs	r1, #4
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fd97 	bl	800ac82 <SDMMC_GetResponse>
 800a154:	4602      	mov	r2, r0
 800a156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a158:	621a      	str	r2, [r3, #32]
    sdmmc_ctx->SDCardSD[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 800a15a:	2108      	movs	r1, #8
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fd90 	bl	800ac82 <SDMMC_GetResponse>
 800a162:	4602      	mov	r2, r0
 800a164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a166:	625a      	str	r2, [r3, #36]	; 0x24
    sdmmc_ctx->SDCardSD[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 800a168:	210c      	movs	r1, #12
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fd89 	bl	800ac82 <SDMMC_GetResponse>
 800a170:	4602      	mov	r2, r0
 800a172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a174:	629a      	str	r2, [r3, #40]	; 0x28

    // Get the Card Class
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 800a176:	2104      	movs	r1, #4
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fd82 	bl	800ac82 <SDMMC_GetResponse>
 800a17e:	4603      	mov	r3, r0
 800a180:	0d1a      	lsrs	r2, r3, #20
 800a182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a184:	605a      	str	r2, [r3, #4]

    // Get CSD parameters
    if (_SD_GetCardCSD(hsdmmc, ctx, &CSD)) return BSP_ERROR;
 800a186:	f107 030c 	add.w	r3, r7, #12
 800a18a:	461a      	mov	r2, r3
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff fdd0 	bl	8009d34 <_SD_GetCardCSD>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <_SD_InitCard+0x132>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e00c      	b.n	800a1b8 <_SD_InitCard+0x14c>

    // Select the Card
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 800a19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a2:	041b      	lsls	r3, r3, #16
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fe96 	bl	800aed8 <SDMMC_CmdSelDesel>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <_SD_InitCard+0x14a>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <_SD_InitCard+0x14c>

    return BSP_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3740      	adds	r7, #64	; 0x40
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <_SD_SendSDStatus>:


static uint8_t _SD_SendSDStatus(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, uint32_t *pSDstatus) {
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08e      	sub	sp, #56	; 0x38
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]

	SDMMC_DataInitTypeDef config;
	uint32_t tickstart = BSP_GetTick();
 800a1cc:	f7fb fc0c 	bl	80059e8 <BSP_GetTick>
 800a1d0:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t count;
	uint32_t *pData = pSDstatus;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	633b      	str	r3, [r7, #48]	; 0x30
	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	3328      	adds	r3, #40	; 0x28
 800a1da:	62bb      	str	r3, [r7, #40]	; 0x28

	// Check SD response
	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 800a1dc:	2100      	movs	r1, #0
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 fd4f 	bl	800ac82 <SDMMC_GetResponse>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1ee:	d101      	bne.n	800a1f4 <_SD_SendSDStatus+0x34>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e07c      	b.n	800a2ee <_SD_SendSDStatus+0x12e>

	// Set block size for card if it is not equal to current block size for card
	if (SDMMC_CmdBlockLength(hsdmmc, 64U)) return BSP_ERROR;
 800a1f4:	2140      	movs	r1, #64	; 0x40
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 fd82 	bl	800ad00 <SDMMC_CmdBlockLength>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <_SD_SendSDStatus+0x46>
 800a202:	2301      	movs	r3, #1
 800a204:	e073      	b.n	800a2ee <_SD_SendSDStatus+0x12e>

	// Send CMD55
	if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	041b      	lsls	r3, r3, #16
 800a20c:	4619      	mov	r1, r3
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 fec3 	bl	800af9a <SDMMC_CmdAppCommand>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <_SD_SendSDStatus+0x5e>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e067      	b.n	800a2ee <_SD_SendSDStatus+0x12e>

	// Configure the SD DPSM (Data Path State Machine)
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a21e:	f04f 33ff 	mov.w	r3, #4294967295
 800a222:	613b      	str	r3, [r7, #16]
	config.DataLength    = 64U;
 800a224:	2340      	movs	r3, #64	; 0x40
 800a226:	617b      	str	r3, [r7, #20]
	config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a228:	2360      	movs	r3, #96	; 0x60
 800a22a:	61bb      	str	r3, [r7, #24]
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a22c:	2302      	movs	r3, #2
 800a22e:	61fb      	str	r3, [r7, #28]
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a230:	2300      	movs	r3, #0
 800a232:	623b      	str	r3, [r7, #32]
	config.DPSM          = SDMMC_DPSM_ENABLE;
 800a234:	2301      	movs	r3, #1
 800a236:	627b      	str	r3, [r7, #36]	; 0x24
	(void)SDMMC_ConfigData(hsdmmc, &config);
 800a238:	f107 0310 	add.w	r3, r7, #16
 800a23c:	4619      	mov	r1, r3
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 fd32 	bl	800aca8 <SDMMC_ConfigData>

	// Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA
	if (SDMMC_CmdStatusRegister(hsdmmc)) return BSP_ERROR;
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 ffb4 	bl	800b1b2 <SDMMC_CmdStatusRegister>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d023      	beq.n	800a298 <_SD_SendSDStatus+0xd8>
 800a250:	2301      	movs	r3, #1
 800a252:	e04c      	b.n	800a2ee <_SD_SendSDStatus+0x12e>

	// Get status data
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND)) {
		if (__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOHF)) {
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d011      	beq.n	800a284 <_SD_SendSDStatus+0xc4>
			for (count = 0U; count < 8U; count++) {
 800a260:	2300      	movs	r3, #0
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
 800a264:	e00b      	b.n	800a27e <_SD_SendSDStatus+0xbe>
				*pData = SDMMC_ReadFIFO(hsdmmc);
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 fc96 	bl	800ab98 <SDMMC_ReadFIFO>
 800a26c:	4602      	mov	r2, r0
 800a26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a270:	601a      	str	r2, [r3, #0]
				pData++;
 800a272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a274:	3304      	adds	r3, #4
 800a276:	633b      	str	r3, [r7, #48]	; 0x30
			for (count = 0U; count < 8U; count++) {
 800a278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27a:	3301      	adds	r3, #1
 800a27c:	637b      	str	r3, [r7, #52]	; 0x34
 800a27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a280:	2b07      	cmp	r3, #7
 800a282:	d9f0      	bls.n	800a266 <_SD_SendSDStatus+0xa6>
			}
		}
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 800a284:	f7fb fbb0 	bl	80059e8 <BSP_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a292:	d101      	bne.n	800a298 <_SD_SendSDStatus+0xd8>
 800a294:	2301      	movs	r3, #1
 800a296:	e02a      	b.n	800a2ee <_SD_SendSDStatus+0x12e>
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND)) {
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0d7      	beq.n	800a254 <_SD_SendSDStatus+0x94>
	}

	if (__SDMMC_GET_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR))) return BSP_ERROR;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a8:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d014      	beq.n	800a2da <_SD_SendSDStatus+0x11a>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e01c      	b.n	800a2ee <_SD_SendSDStatus+0x12e>

	while ((__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_DPSMACT))) {
		*pData = SDMMC_ReadFIFO(hsdmmc);
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 fc6f 	bl	800ab98 <SDMMC_ReadFIFO>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	601a      	str	r2, [r3, #0]
		pData++;
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	633b      	str	r3, [r7, #48]	; 0x30
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 800a2c6:	f7fb fb8f 	bl	80059e8 <BSP_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d4:	d101      	bne.n	800a2da <_SD_SendSDStatus+0x11a>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e009      	b.n	800a2ee <_SD_SendSDStatus+0x12e>
	while ((__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_DPSMACT))) {
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e6      	bne.n	800a2b4 <_SD_SendSDStatus+0xf4>
	}

	// Clear all the static status flags
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	4a03      	ldr	r2, [pc, #12]	; (800a2f8 <_SD_SendSDStatus+0x138>)
 800a2ea:	639a      	str	r2, [r3, #56]	; 0x38

	return BSP_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3738      	adds	r7, #56	; 0x38
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	1fe00fff 	.word	0x1fe00fff

0800a2fc <_SD_GetCardStatus>:


static uint8_t _SD_GetCardStatus(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, SDMMC_CardStatus_TypeDef * status) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b094      	sub	sp, #80	; 0x50
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]

	uint32_t sd_status[16];

	if (_SD_SendSDStatus(hsdmmc, ctx, sd_status)) {
 800a308:	f107 0310 	add.w	r3, r7, #16
 800a30c:	461a      	mov	r2, r3
 800a30e:	68b9      	ldr	r1, [r7, #8]
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f7ff ff55 	bl	800a1c0 <_SD_SendSDStatus>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d004      	beq.n	800a326 <_SD_GetCardStatus+0x2a>
		// Clear all the static flags
		__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4a43      	ldr	r2, [pc, #268]	; (800a42c <_SD_GetCardStatus+0x130>)
 800a320:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e07e      	b.n	800a424 <_SD_GetCardStatus+0x128>
	}

    status->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	099b      	lsrs	r3, r3, #6
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	f003 0303 	and.w	r3, r3, #3
 800a330:	b2da      	uxtb	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	701a      	strb	r2, [r3, #0]
    status->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	095b      	lsrs	r3, r3, #5
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	b2da      	uxtb	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	705a      	strb	r2, [r3, #1]
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	0a1b      	lsrs	r3, r3, #8
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a350:	b29a      	uxth	r2, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	0e1b      	lsrs	r3, r3, #24
 800a356:	b29b      	uxth	r3, r3
 800a358:	4313      	orrs	r3, r2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	805a      	strh	r2, [r3, #2]
    status->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	061a      	lsls	r2, r3, #24
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a36c:	431a      	orrs	r2, r3
                                ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	0a1b      	lsrs	r3, r3, #8
 800a372:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    status->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a376:	431a      	orrs	r2, r3
                                ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	0e1b      	lsrs	r3, r3, #24
 800a37c:	431a      	orrs	r2, r3
    status->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	605a      	str	r2, [r3, #4]
    status->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	b2da      	uxtb	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	721a      	strb	r2, [r3, #8]
    status->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	0a1b      	lsrs	r3, r3, #8
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	725a      	strb	r2, [r3, #9]
    status->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	0d1b      	lsrs	r3, r3, #20
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	f003 030f 	and.w	r3, r3, #15
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	729a      	strb	r2, [r3, #10]
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	0c1b      	lsrs	r3, r3, #16
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	819a      	strh	r2, [r3, #12]
    status->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	0a9b      	lsrs	r3, r3, #10
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	739a      	strb	r2, [r3, #14]
    status->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	0a1b      	lsrs	r3, r3, #8
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	f003 0303 	and.w	r3, r3, #3
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	73da      	strb	r2, [r3, #15]
    status->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	091b      	lsrs	r3, r3, #4
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	b2da      	uxtb	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	741a      	strb	r2, [r3, #16]
    status->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	f003 030f 	and.w	r3, r3, #15
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	745a      	strb	r2, [r3, #17]
    status->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	0e1b      	lsrs	r3, r3, #24
 800a402:	b2da      	uxtb	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	749a      	strb	r2, [r3, #18]

    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 800a408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f000 fc77 	bl	800ad00 <SDMMC_CmdBlockLength>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d004      	beq.n	800a422 <_SD_GetCardStatus+0x126>
    	// Clear all the static flags
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4a04      	ldr	r2, [pc, #16]	; (800a42c <_SD_GetCardStatus+0x130>)
 800a41c:	639a      	str	r2, [r3, #56]	; 0x38
    	return BSP_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e000      	b.n	800a424 <_SD_GetCardStatus+0x128>
    }

    return BSP_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3750      	adds	r7, #80	; 0x50
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	1fe00fff 	.word	0x1fe00fff

0800a430 <_SD_FindSCR>:


static uint8_t _SD_FindSCR(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, uint32_t *pSCR) {
 800a430:	b580      	push	{r7, lr}
 800a432:	b090      	sub	sp, #64	; 0x40
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
	SDMMC_DataInitTypeDef config;
	uint32_t tickstart = BSP_GetTick();
 800a43c:	f7fb fad4 	bl	80059e8 <BSP_GetTick>
 800a440:	63b8      	str	r0, [r7, #56]	; 0x38
	uint32_t index = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tempscr[2U] = {0UL, 0UL};
 800a446:	2300      	movs	r3, #0
 800a448:	613b      	str	r3, [r7, #16]
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]
	uint32_t *scr = pSCR;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	637b      	str	r3, [r7, #52]	; 0x34

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	3328      	adds	r3, #40	; 0x28
 800a456:	633b      	str	r3, [r7, #48]	; 0x30

	// Set Block Size To 8 Bytes
	if (SDMMC_CmdBlockLength(hsdmmc, 8U)) return BSP_ERROR;
 800a458:	2108      	movs	r1, #8
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 fc50 	bl	800ad00 <SDMMC_CmdBlockLength>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <_SD_FindSCR+0x3a>
 800a466:	2301      	movs	r3, #1
 800a468:	e081      	b.n	800a56e <_SD_FindSCR+0x13e>

	// Send CMD55 APP_CMD with argument as card's RCA
	if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)((sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46e:	041b      	lsls	r3, r3, #16
 800a470:	4619      	mov	r1, r3
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 fd91 	bl	800af9a <SDMMC_CmdAppCommand>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <_SD_FindSCR+0x52>
 800a47e:	2301      	movs	r3, #1
 800a480:	e075      	b.n	800a56e <_SD_FindSCR+0x13e>

	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a482:	f04f 33ff 	mov.w	r3, #4294967295
 800a486:	61bb      	str	r3, [r7, #24]
	config.DataLength    = 8U;
 800a488:	2308      	movs	r3, #8
 800a48a:	61fb      	str	r3, [r7, #28]
	config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a48c:	2330      	movs	r3, #48	; 0x30
 800a48e:	623b      	str	r3, [r7, #32]
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a490:	2302      	movs	r3, #2
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a494:	2300      	movs	r3, #0
 800a496:	62bb      	str	r3, [r7, #40]	; 0x28
	config.DPSM          = SDMMC_DPSM_ENABLE;
 800a498:	2301      	movs	r3, #1
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDMMC_ConfigData(hsdmmc, &config);
 800a49c:	f107 0318 	add.w	r3, r7, #24
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fc00 	bl	800aca8 <SDMMC_ConfigData>

	// Send ACMD51 SD_APP_SEND_SCR with argument as 0
	if (SDMMC_CmdSendSCR(hsdmmc)) return BSP_ERROR;
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fddc 	bl	800b066 <SDMMC_CmdSendSCR>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d021      	beq.n	800a4f8 <_SD_FindSCR+0xc8>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e05a      	b.n	800a56e <_SD_FindSCR+0x13e>

	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND)) {
		if ((!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOE)) && (index == 0U)) {
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d10f      	bne.n	800a4e4 <_SD_FindSCR+0xb4>
 800a4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10c      	bne.n	800a4e4 <_SD_FindSCR+0xb4>
			tempscr[0] = SDMMC_ReadFIFO(hsdmmc);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 fb64 	bl	800ab98 <SDMMC_ReadFIFO>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	613b      	str	r3, [r7, #16]
			tempscr[1] = SDMMC_ReadFIFO(hsdmmc);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 fb5f 	bl	800ab98 <SDMMC_ReadFIFO>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	617b      	str	r3, [r7, #20]
			index++;
 800a4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 800a4e4:	f7fb fa80 	bl	80059e8 <BSP_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d101      	bne.n	800a4f8 <_SD_FindSCR+0xc8>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e03a      	b.n	800a56e <_SD_FindSCR+0x13e>
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND)) {
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4fc:	f240 532a 	movw	r3, #1322	; 0x52a
 800a500:	4013      	ands	r3, r2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d0d8      	beq.n	800a4b8 <_SD_FindSCR+0x88>
	}

	// Checking for error flags
	if (__SDMMC_GET_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR))) {
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <_SD_FindSCR+0xec>
		__SDMMC_CLEAR_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR));
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	222a      	movs	r2, #42	; 0x2a
 800a516:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e028      	b.n	800a56e <_SD_FindSCR+0x13e>
	}

    // No error flag set
    // Clear all the static flags
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_DATA_FLAGS);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a16      	ldr	r2, [pc, #88]	; (800a578 <_SD_FindSCR+0x148>)
 800a520:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	061a      	lsls	r2, r3, #24
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a52e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a538:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	0e1b      	lsrs	r3, r3, #24
 800a53e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	601a      	str	r2, [r3, #0]
    scr++;
 800a544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a546:	3304      	adds	r3, #4
 800a548:	637b      	str	r3, [r7, #52]	; 0x34
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	061a      	lsls	r2, r3, #24
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a556:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a560:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	0e1b      	lsrs	r3, r3, #24
 800a566:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	601a      	str	r2, [r3, #0]

    return BSP_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3740      	adds	r7, #64	; 0x40
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	18000f3a 	.word	0x18000f3a

0800a57c <_SD_WideBus_Enable>:


static uint8_t _SD_WideBus_Enable(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
	uint32_t scr[2U] = {0UL, 0UL};
 800a586:	2300      	movs	r3, #0
 800a588:	60fb      	str	r3, [r7, #12]
 800a58a:	2300      	movs	r3, #0
 800a58c:	613b      	str	r3, [r7, #16]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	3328      	adds	r3, #40	; 0x28
 800a592:	617b      	str	r3, [r7, #20]

	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 800a594:	2100      	movs	r1, #0
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fb73 	bl	800ac82 <SDMMC_GetResponse>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5a6:	d101      	bne.n	800a5ac <_SD_WideBus_Enable+0x30>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e028      	b.n	800a5fe <_SD_WideBus_Enable+0x82>

	// Get SCR Register
	if (_SD_FindSCR(hsdmmc, ctx, scr)) return BSP_ERROR;
 800a5ac:	f107 030c 	add.w	r3, r7, #12
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff ff3b 	bl	800a430 <_SD_FindSCR>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <_SD_WideBus_Enable+0x48>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e01c      	b.n	800a5fe <_SD_WideBus_Enable+0x82>

	// If requested card supports wide bus operation
	if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) == SDMMC_ALLZERO) return BSP_ERROR;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <_SD_WideBus_Enable+0x56>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e015      	b.n	800a5fe <_SD_WideBus_Enable+0x82>

    // Send CMD55 APP_CMD with argument as card's RCA
    if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d6:	041b      	lsls	r3, r3, #16
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fcdd 	bl	800af9a <SDMMC_CmdAppCommand>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <_SD_WideBus_Enable+0x6e>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e009      	b.n	800a5fe <_SD_WideBus_Enable+0x82>

    // Send ACMD6 APP_CMD with argument as 2 for wide bus mode
    if (SDMMC_CmdBusWidth(hsdmmc, 2U)) return BSP_ERROR;
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fd17 	bl	800b020 <SDMMC_CmdBusWidth>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <_SD_WideBus_Enable+0x80>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <_SD_WideBus_Enable+0x82>

    return BSP_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <BSP_STM32_SDMMC_GetCardState>:

uint32_t BSP_STM32_SDMMC_GetCardState(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	3328      	adds	r3, #40	; 0x28
 800a614:	60fb      	str	r3, [r7, #12]

	uint32_t resp1 = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	60bb      	str	r3, [r7, #8]

	SDMMC_CmdSendStatus(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U));
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61e:	041b      	lsls	r3, r3, #16
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fda2 	bl	800b16c <SDMMC_CmdSendStatus>
	resp1 = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 800a628:	2100      	movs	r1, #0
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fb29 	bl	800ac82 <SDMMC_GetResponse>
 800a630:	60b8      	str	r0, [r7, #8]

	return ((resp1 >> 9U) & 0x0FU);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	0a5b      	lsrs	r3, r3, #9
 800a636:	f003 030f 	and.w	r3, r3, #15
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <BSP_STM32_SDMMC_Init>:



uint8_t BSP_STM32_SDMMC_Init(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800a644:	b580      	push	{r7, lr}
 800a646:	b092      	sub	sp, #72	; 0x48
 800a648:	af02      	add	r7, sp, #8
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	3328      	adds	r3, #40	; 0x28
 800a652:	63fb      	str	r3, [r7, #60]	; 0x3c

	SDMMC_CardStatus_TypeDef cardstatus = {0};
 800a654:	f107 0320 	add.w	r3, r7, #32
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	605a      	str	r2, [r3, #4]
 800a65e:	609a      	str	r2, [r3, #8]
 800a660:	60da      	str	r2, [r3, #12]
 800a662:	611a      	str	r2, [r3, #16]
	uint32_t unitsize;

	// 1. Initialize Card parameters

	// Starting up in 1B bus and 400kHz
	SDMMC_InitTypeDef Init = {0};
 800a664:	f107 030c 	add.w	r3, r7, #12
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	605a      	str	r2, [r3, #4]
 800a66e:	609a      	str	r2, [r3, #8]
 800a670:	60da      	str	r2, [r3, #12]
 800a672:	611a      	str	r2, [r3, #16]
	Init.ClockEdge        		= SDMMC_CLOCK_EDGE_RISING;
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
	Init.ClockPowerSave   		= SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800a678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a67c:	613b      	str	r3, [r7, #16]
	Init.BusWide          		= SDMMC_BUS_WIDE_1B;
 800a67e:	2300      	movs	r3, #0
 800a680:	617b      	str	r3, [r7, #20]
	Init.HardwareFlowControl 	= SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a682:	2300      	movs	r3, #0
 800a684:	61bb      	str	r3, [r7, #24]

	// For freq to 400kHz div = sdmmc_clk / (2 * 400000) -> For 60MHz div = 75
	Init.ClockDiv 				= 75;
 800a686:	234b      	movs	r3, #75	; 0x4b
 800a688:	61fb      	str	r3, [r7, #28]
	if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 800a68a:	466a      	mov	r2, sp
 800a68c:	f107 0318 	add.w	r3, r7, #24
 800a690:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a694:	e882 0003 	stmia.w	r2, {r0, r1}
 800a698:	f107 030c 	add.w	r3, r7, #12
 800a69c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fa50 	bl	800ab44 <SDMMC_Init>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <BSP_STM32_SDMMC_Init+0x6a>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e098      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>

	// Set Power STate to ON
	if (SDMMC_PowerState_ON(hsdmmc)) return BSP_ERROR;
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fa90 	bl	800abd4 <SDMMC_PowerState_ON>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <BSP_STM32_SDMMC_Init+0x7a>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e090      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>

	// Wait min 74 card cycles - 1ms is more than enough
	BSP_Delay(1);
 800a6be:	2001      	movs	r0, #1
 800a6c0:	f7fb f99e 	bl	8005a00 <BSP_Delay>

	// Identify card version, type and voltage
	if (_SD_IdentifyCard(hsdmmc, ctx)) return BSP_ERROR;
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff fac0 	bl	8009c4c <_SD_IdentifyCard>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <BSP_STM32_SDMMC_Init+0x92>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e084      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>

	// Card initialization
	if (_SD_InitCard(hsdmmc, ctx)) return BSP_ERROR;
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff fcc7 	bl	800a06c <_SD_InitCard>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <BSP_STM32_SDMMC_Init+0xa4>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e07b      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>

	// Set Block Size for Card (always 512 bytes)
	if (SDMMC_CmdBlockLength(hsdmmc, 512)) return BSP_ERROR;
 800a6e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fb07 	bl	800ad00 <SDMMC_CmdBlockLength>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <BSP_STM32_SDMMC_Init+0xb8>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e071      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>

	// 2. Getting Card Status and obtaining card speed
	if (_SD_GetCardStatus(hsdmmc, ctx, &cardstatus)) return BSP_ERROR;
 800a6fc:	f107 0320 	add.w	r3, r7, #32
 800a700:	461a      	mov	r2, r3
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff fdf9 	bl	800a2fc <_SD_GetCardStatus>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <BSP_STM32_SDMMC_Init+0xd0>
 800a710:	2301      	movs	r3, #1
 800a712:	e065      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>

	speedgrade = cardstatus.UhsSpeedGrade;
 800a714:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	63bb      	str	r3, [r7, #56]	; 0x38
	unitsize = cardstatus.UhsAllocationUnitSize;
 800a71c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a720:	b2db      	uxtb	r3, r3
 800a722:	637b      	str	r3, [r7, #52]	; 0x34

	sdmmc_ctx->SDCardSpeed = CARD_NORMAL_SPEED;
 800a724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a726:	2200      	movs	r2, #0
 800a728:	609a      	str	r2, [r3, #8]
	if (sdmmc_ctx->SDCardType == CARD_SDHC_SDXC) {
 800a72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72c:	785b      	ldrb	r3, [r3, #1]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b01      	cmp	r3, #1
 800a732:	d10d      	bne.n	800a750 <BSP_STM32_SDMMC_Init+0x10c>
		sdmmc_ctx->SDCardSpeed = CARD_HIGH_SPEED;
 800a734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a73a:	609a      	str	r2, [r3, #8]
		if ((speedgrade != 0U) || (unitsize != 0U)) sdmmc_ctx->SDCardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d102      	bne.n	800a748 <BSP_STM32_SDMMC_Init+0x104>
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	2b00      	cmp	r3, #0
 800a746:	d003      	beq.n	800a750 <BSP_STM32_SDMMC_Init+0x10c>
 800a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a74e:	609a      	str	r2, [r3, #8]
	}

	// 3. Configure 4-bit communication bus
	if (sdmmc_ctx->SDCardType == CARD_SECURED) return BSP_ERROR;
 800a750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a752:	785b      	ldrb	r3, [r3, #1]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b03      	cmp	r3, #3
 800a758:	d101      	bne.n	800a75e <BSP_STM32_SDMMC_Init+0x11a>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e040      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>

	if (_SD_WideBus_Enable(hsdmmc, ctx)) {
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff ff0b 	bl	800a57c <_SD_WideBus_Enable>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d004      	beq.n	800a776 <BSP_STM32_SDMMC_Init+0x132>
		// Clear all the static flags
		__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a1e      	ldr	r2, [pc, #120]	; (800a7e8 <BSP_STM32_SDMMC_Init+0x1a4>)
 800a770:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e034      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>
	}

    // Configure the SDMMC peripheral for 4bit bus operation
	Init.ClockEdge        		= SDMMC_CLOCK_EDGE_RISING;
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
	Init.ClockPowerSave   		= SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800a77a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a77e:	613b      	str	r3, [r7, #16]
	Init.BusWide          		= SDMMC_BUS_WIDE_4B;
 800a780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a784:	617b      	str	r3, [r7, #20]
	Init.HardwareFlowControl 	= SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800a786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a78a:	61bb      	str	r3, [r7, #24]
	// Calculating divider: div = 60MHz / (2 * 7.5MHz) = 4
	// For 60MHz it will give 7.5MHz for SDCard (~3.5MB/s on 4-bit bus)
	Init.ClockDiv				= 4;
 800a78c:	2304      	movs	r3, #4
 800a78e:	61fb      	str	r3, [r7, #28]

    if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 800a790:	466a      	mov	r2, sp
 800a792:	f107 0318 	add.w	r3, r7, #24
 800a796:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a79a:	e882 0003 	stmia.w	r2, {r0, r1}
 800a79e:	f107 030c 	add.w	r3, r7, #12
 800a7a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f9cd 	bl	800ab44 <SDMMC_Init>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <BSP_STM32_SDMMC_Init+0x170>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e015      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>

    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 800a7b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 faa1 	bl	800ad00 <SDMMC_CmdBlockLength>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d004      	beq.n	800a7ce <BSP_STM32_SDMMC_Init+0x18a>
    	// Clear all the static flags
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <BSP_STM32_SDMMC_Init+0x1a4>)
 800a7c8:	639a      	str	r2, [r3, #56]	; 0x38
    	return BSP_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e008      	b.n	800a7e0 <BSP_STM32_SDMMC_Init+0x19c>
    }

    // 4. Verify that SD card is ready to use after Initialization
    while (BSP_STM32_SDMMC_GetCardState(hsdmmc, ctx) != SDMMC_CARD_TRANSFER) {};
 800a7ce:	bf00      	nop
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff ff17 	bl	800a606 <BSP_STM32_SDMMC_GetCardState>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b04      	cmp	r3, #4
 800a7dc:	d1f8      	bne.n	800a7d0 <BSP_STM32_SDMMC_Init+0x18c>

    return BSP_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3740      	adds	r7, #64	; 0x40
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	1fe00fff 	.word	0x1fe00fff

0800a7ec <BSP_STM32_SDMMC_ReadBlocks>:


uint8_t BSP_STM32_SDMMC_ReadBlocks(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b092      	sub	sp, #72	; 0x48
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	603b      	str	r3, [r7, #0]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	3328      	adds	r3, #40	; 0x28
 800a7fe:	633b      	str	r3, [r7, #48]	; 0x30

	SDMMC_DataInitTypeDef config;
	uint32_t errorstate;
	uint32_t tickstart = BSP_GetTick();
 800a800:	f7fb f8f2 	bl	80059e8 <BSP_GetTick>
 800a804:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t count;
	uint32_t data;
	uint32_t dataremaining;
	uint32_t add = BlockAdd;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t *tempbuff = pData;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	637b      	str	r3, [r7, #52]	; 0x34

	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800a80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a812:	441a      	add	r2, r3
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	429a      	cmp	r2, r3
 800a81a:	d901      	bls.n	800a820 <BSP_STM32_SDMMC_ReadBlocks+0x34>
 800a81c:	2301      	movs	r3, #1
 800a81e:	e0b2      	b.n	800a986 <BSP_STM32_SDMMC_ReadBlocks+0x19a>

	// Initialize data control register
	hsdmmc->DCTRL = 0U;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	62da      	str	r2, [r3, #44]	; 0x2c

	if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d002      	beq.n	800a836 <BSP_STM32_SDMMC_ReadBlocks+0x4a>
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	025b      	lsls	r3, r3, #9
 800a834:	63bb      	str	r3, [r7, #56]	; 0x38

	// Configure the SD DPSM (Data Path State Machine)
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a836:	f04f 33ff 	mov.w	r3, #4294967295
 800a83a:	613b      	str	r3, [r7, #16]
	config.DataLength    = NumberOfBlocks * 512U;
 800a83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a83e:	025b      	lsls	r3, r3, #9
 800a840:	617b      	str	r3, [r7, #20]
	config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a842:	2390      	movs	r3, #144	; 0x90
 800a844:	61bb      	str	r3, [r7, #24]
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a846:	2302      	movs	r3, #2
 800a848:	61fb      	str	r3, [r7, #28]
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	623b      	str	r3, [r7, #32]
	config.DPSM          = SDMMC_DPSM_DISABLE;
 800a84e:	2300      	movs	r3, #0
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
	SDMMC_ConfigData(hsdmmc, &config);
 800a852:	f107 0310 	add.w	r3, r7, #16
 800a856:	4619      	mov	r1, r3
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f000 fa25 	bl	800aca8 <SDMMC_ConfigData>
	__SDMMC_CMDTRANS_ENABLE(hsdmmc);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	60da      	str	r2, [r3, #12]

	// Read block(s) in polling mode
	if (NumberOfBlocks > 1U) {
 800a86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d905      	bls.n	800a87c <BSP_STM32_SDMMC_ReadBlocks+0x90>
		// Read Multi Block command
		errorstate = SDMMC_CmdReadMultiBlock(hsdmmc, add);
 800a870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f000 fa8a 	bl	800ad8c <SDMMC_CmdReadMultiBlock>
 800a878:	6478      	str	r0, [r7, #68]	; 0x44
 800a87a:	e004      	b.n	800a886 <BSP_STM32_SDMMC_ReadBlocks+0x9a>
	} else {
		// Read Single Block command
		errorstate = SDMMC_CmdReadSingleBlock(hsdmmc, add);
 800a87c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 fa61 	bl	800ad46 <SDMMC_CmdReadSingleBlock>
 800a884:	6478      	str	r0, [r7, #68]	; 0x44
	}

	// Handle error
	if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800a886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d004      	beq.n	800a896 <BSP_STM32_SDMMC_ReadBlocks+0xaa>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	4a40      	ldr	r2, [pc, #256]	; (800a990 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800a890:	639a      	str	r2, [r3, #56]	; 0x38
 800a892:	2301      	movs	r3, #1
 800a894:	e077      	b.n	800a986 <BSP_STM32_SDMMC_ReadBlocks+0x19a>

	// Poll on SDMMC flags
	dataremaining = config.DataLength;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (!(hsdmmc->STA & (SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 800a89a:	e044      	b.n	800a926 <BSP_STM32_SDMMC_ReadBlocks+0x13a>
		if ((hsdmmc->STA & (SDMMC_FLAG_RXFIFOHF)) && (dataremaining >= 32U)) {
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d031      	beq.n	800a90c <BSP_STM32_SDMMC_ReadBlocks+0x120>
 800a8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8aa:	2b1f      	cmp	r3, #31
 800a8ac:	d92e      	bls.n	800a90c <BSP_STM32_SDMMC_ReadBlocks+0x120>
			// Read data from SDMMC Rx FIFO
			for (count = 0U; count < 8U; count++) {
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a8b2:	e025      	b.n	800a900 <BSP_STM32_SDMMC_ReadBlocks+0x114>
				data = SDMMC_ReadFIFO(hsdmmc);
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f000 f96f 	bl	800ab98 <SDMMC_ReadFIFO>
 800a8ba:	62b8      	str	r0, [r7, #40]	; 0x28
				*tempbuff = (uint8_t)(data & 0xFFU);
 800a8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c2:	701a      	strb	r2, [r3, #0]
				tempbuff++;
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
				*tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	0a1b      	lsrs	r3, r3, #8
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d2:	701a      	strb	r2, [r3, #0]
				tempbuff++;
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	637b      	str	r3, [r7, #52]	; 0x34
				*tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	0c1b      	lsrs	r3, r3, #16
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e2:	701a      	strb	r2, [r3, #0]
				tempbuff++;
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	637b      	str	r3, [r7, #52]	; 0x34
				*tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	0e1b      	lsrs	r3, r3, #24
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f2:	701a      	strb	r2, [r3, #0]
				tempbuff++;
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	637b      	str	r3, [r7, #52]	; 0x34
			for (count = 0U; count < 8U; count++) {
 800a8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	643b      	str	r3, [r7, #64]	; 0x40
 800a900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a902:	2b07      	cmp	r3, #7
 800a904:	d9d6      	bls.n	800a8b4 <BSP_STM32_SDMMC_ReadBlocks+0xc8>
			}
			dataremaining -= 32U;
 800a906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a908:	3b20      	subs	r3, #32
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		// Handle timeout
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800a90c:	f7fb f86c 	bl	80059e8 <BSP_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a91a:	d304      	bcc.n	800a926 <BSP_STM32_SDMMC_ReadBlocks+0x13a>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4a1c      	ldr	r2, [pc, #112]	; (800a990 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800a920:	639a      	str	r2, [r3, #56]	; 0x38
 800a922:	2301      	movs	r3, #1
 800a924:	e02f      	b.n	800a986 <BSP_STM32_SDMMC_ReadBlocks+0x19a>
	while (!(hsdmmc->STA & (SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0b4      	beq.n	800a89c <BSP_STM32_SDMMC_ReadBlocks+0xb0>
	}

	__SDMMC_CMDTRANS_DISABLE(hsdmmc);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	60da      	str	r2, [r3, #12]

	// Send stop transmission command in case of multiblock read
	if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00e      	beq.n	800a968 <BSP_STM32_SDMMC_ReadBlocks+0x17c>
 800a94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d90b      	bls.n	800a968 <BSP_STM32_SDMMC_ReadBlocks+0x17c>
		// Send stop transmission command
		errorstate = SDMMC_CmdStopTransfer(hsdmmc);
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fa85 	bl	800ae60 <SDMMC_CmdStopTransfer>
 800a956:	6478      	str	r0, [r7, #68]	; 0x44
		// Handle error
		if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800a958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <BSP_STM32_SDMMC_ReadBlocks+0x17c>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4a0b      	ldr	r2, [pc, #44]	; (800a990 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800a962:	639a      	str	r2, [r3, #56]	; 0x38
 800a964:	2301      	movs	r3, #1
 800a966:	e00e      	b.n	800a986 <BSP_STM32_SDMMC_ReadBlocks+0x19a>
	}

	// Handle error state
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR)) {
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a970:	2b00      	cmp	r3, #0
 800a972:	d004      	beq.n	800a97e <BSP_STM32_SDMMC_ReadBlocks+0x192>
		// Clear all the static flags
		hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4a06      	ldr	r2, [pc, #24]	; (800a990 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800a978:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e003      	b.n	800a986 <BSP_STM32_SDMMC_ReadBlocks+0x19a>
	}

	// Clear all the static flags
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	4a03      	ldr	r2, [pc, #12]	; (800a990 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800a982:	639a      	str	r2, [r3, #56]	; 0x38
	return BSP_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3748      	adds	r7, #72	; 0x48
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	1fe00fff 	.word	0x1fe00fff

0800a994 <BSP_STM32_SDMMC_WriteBlocks>:


uint8_t BSP_STM32_SDMMC_WriteBlocks(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, const uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 800a994:	b580      	push	{r7, lr}
 800a996:	b092      	sub	sp, #72	; 0x48
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
 800a9a0:	603b      	str	r3, [r7, #0]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	3328      	adds	r3, #40	; 0x28
 800a9a6:	633b      	str	r3, [r7, #48]	; 0x30

	SDMMC_DataInitTypeDef config;
	uint32_t errorstate;
	uint32_t tickstart = BSP_GetTick();
 800a9a8:	f7fb f81e 	bl	80059e8 <BSP_GetTick>
 800a9ac:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t count;
	uint32_t data;
	uint32_t dataremaining;
	uint32_t add = BlockAdd;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	63bb      	str	r3, [r7, #56]	; 0x38
	const uint8_t *tempbuff = pData;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	637b      	str	r3, [r7, #52]	; 0x34


	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800a9b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ba:	441a      	add	r2, r3
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d901      	bls.n	800a9c8 <BSP_STM32_SDMMC_WriteBlocks+0x34>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e0b6      	b.n	800ab36 <BSP_STM32_SDMMC_WriteBlocks+0x1a2>

    // Initialize data control register
    hsdmmc->DCTRL = 0U;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d002      	beq.n	800a9de <BSP_STM32_SDMMC_WriteBlocks+0x4a>
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	025b      	lsls	r3, r3, #9
 800a9dc:	63bb      	str	r3, [r7, #56]	; 0x38

    // Configure the SD DPSM (Data Path State Machine)
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a9de:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * SDMMC_BLOCKSIZE;
 800a9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e6:	025b      	lsls	r3, r3, #9
 800a9e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a9ea:	2390      	movs	r3, #144	; 0x90
 800a9ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsdmmc, &config);
 800a9fa:	f107 0314 	add.w	r3, r7, #20
 800a9fe:	4619      	mov	r1, r3
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 f951 	bl	800aca8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsdmmc);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	60da      	str	r2, [r3, #12]

    // Write Blocks in Polling mode
	if (NumberOfBlocks > 1U) {
 800aa12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d905      	bls.n	800aa24 <BSP_STM32_SDMMC_WriteBlocks+0x90>
		// Write Multi Block command
		errorstate = SDMMC_CmdWriteMultiBlock(hsdmmc, add);
 800aa18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 f9fc 	bl	800ae18 <SDMMC_CmdWriteMultiBlock>
 800aa20:	6478      	str	r0, [r7, #68]	; 0x44
 800aa22:	e004      	b.n	800aa2e <BSP_STM32_SDMMC_WriteBlocks+0x9a>
	} else {
		// Read Single Block command
		errorstate = SDMMC_CmdWriteSingleBlock(hsdmmc, add);
 800aa24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 f9d3 	bl	800add2 <SDMMC_CmdWriteSingleBlock>
 800aa2c:	6478      	str	r0, [r7, #68]	; 0x44
	}

    // Handle error
    if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800aa2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <BSP_STM32_SDMMC_WriteBlocks+0xaa>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a42      	ldr	r2, [pc, #264]	; (800ab40 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800aa38:	639a      	str	r2, [r3, #56]	; 0x38
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e07b      	b.n	800ab36 <BSP_STM32_SDMMC_WriteBlocks+0x1a2>

    // Write block(s) in polling mode
    dataremaining = config.DataLength;
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (!(hsdmmc->STA & (SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 800aa42:	e048      	b.n	800aad6 <BSP_STM32_SDMMC_WriteBlocks+0x142>
    	if ((hsdmmc->STA & (SDMMC_FLAG_TXFIFOHE)) && (dataremaining >= 32U)) {
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d035      	beq.n	800aabc <BSP_STM32_SDMMC_WriteBlocks+0x128>
 800aa50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa52:	2b1f      	cmp	r3, #31
 800aa54:	d932      	bls.n	800aabc <BSP_STM32_SDMMC_WriteBlocks+0x128>
    		// Write data to SDMMC Tx FIFO
    		for (count = 0U; count < 8U; count++) {
 800aa56:	2300      	movs	r3, #0
 800aa58:	643b      	str	r3, [r7, #64]	; 0x40
 800aa5a:	e029      	b.n	800aab0 <BSP_STM32_SDMMC_WriteBlocks+0x11c>
    			data = (uint32_t)(*tempbuff);
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	613b      	str	r3, [r7, #16]
    			tempbuff++;
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	3301      	adds	r3, #1
 800aa66:	637b      	str	r3, [r7, #52]	; 0x34
    			data |= ((uint32_t)(*tempbuff) << 8U);
 800aa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	021a      	lsls	r2, r3, #8
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]
    			tempbuff++;
 800aa74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa76:	3301      	adds	r3, #1
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
    			data |= ((uint32_t)(*tempbuff) << 16U);
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	041a      	lsls	r2, r3, #16
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]
    			tempbuff++;
 800aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa88:	3301      	adds	r3, #1
 800aa8a:	637b      	str	r3, [r7, #52]	; 0x34
    			data |= ((uint32_t)(*tempbuff) << 24U);
 800aa8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	061a      	lsls	r2, r3, #24
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	613b      	str	r3, [r7, #16]
    			tempbuff++;
 800aa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
    			(void)SDMMC_WriteFIFO(hsdmmc, &data);
 800aa9e:	f107 0310 	add.w	r3, r7, #16
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 f884 	bl	800abb2 <SDMMC_WriteFIFO>
    		for (count = 0U; count < 8U; count++) {
 800aaaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaac:	3301      	adds	r3, #1
 800aaae:	643b      	str	r3, [r7, #64]	; 0x40
 800aab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab2:	2b07      	cmp	r3, #7
 800aab4:	d9d2      	bls.n	800aa5c <BSP_STM32_SDMMC_WriteBlocks+0xc8>
    		}
    		dataremaining -= 32U;
 800aab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab8:	3b20      	subs	r3, #32
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
    	}

		// Handle timeout
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800aabc:	f7fa ff94 	bl	80059e8 <BSP_GetTick>
 800aac0:	4602      	mov	r2, r0
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aaca:	d304      	bcc.n	800aad6 <BSP_STM32_SDMMC_WriteBlocks+0x142>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4a1c      	ldr	r2, [pc, #112]	; (800ab40 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800aad0:	639a      	str	r2, [r3, #56]	; 0x38
 800aad2:	2301      	movs	r3, #1
 800aad4:	e02f      	b.n	800ab36 <BSP_STM32_SDMMC_WriteBlocks+0x1a2>
    while (!(hsdmmc->STA & (SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aada:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0b0      	beq.n	800aa44 <BSP_STM32_SDMMC_WriteBlocks+0xb0>
    }
    __SDMMC_CMDTRANS_DISABLE(hsdmmc);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	60da      	str	r2, [r3, #12]

    // Send stop transmission command in case of multiblock write
    if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00e      	beq.n	800ab18 <BSP_STM32_SDMMC_WriteBlocks+0x184>
 800aafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d90b      	bls.n	800ab18 <BSP_STM32_SDMMC_WriteBlocks+0x184>
        // Send stop transmission command
        errorstate = SDMMC_CmdStopTransfer(hsdmmc);
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 f9ad 	bl	800ae60 <SDMMC_CmdStopTransfer>
 800ab06:	6478      	str	r0, [r7, #68]	; 0x44
        // Handle error
        if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800ab08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <BSP_STM32_SDMMC_WriteBlocks+0x184>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4a0b      	ldr	r2, [pc, #44]	; (800ab40 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800ab12:	639a      	str	r2, [r3, #56]	; 0x38
 800ab14:	2301      	movs	r3, #1
 800ab16:	e00e      	b.n	800ab36 <BSP_STM32_SDMMC_WriteBlocks+0x1a2>
    }

	// Handle error state
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_TXUNDERR)) {
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1c:	f003 031a 	and.w	r3, r3, #26
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <BSP_STM32_SDMMC_WriteBlocks+0x19a>
		// Clear all the static flags
		hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4a06      	ldr	r2, [pc, #24]	; (800ab40 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800ab28:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e003      	b.n	800ab36 <BSP_STM32_SDMMC_WriteBlocks+0x1a2>
	}

	// Clear all the static flags
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4a03      	ldr	r2, [pc, #12]	; (800ab40 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800ab32:	639a      	str	r2, [r3, #56]	; 0x38
	return BSP_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3748      	adds	r7, #72	; 0x48
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	1fe00fff 	.word	0x1fe00fff

0800ab44 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ab44:	b084      	sub	sp, #16
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	f107 001c 	add.w	r0, r7, #28
 800ab52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ab5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ab5e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800ab62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800ab66:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800ab6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <SDMMC_Init+0x50>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	b004      	add	sp, #16
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	ffc02c00 	.word	0xffc02c00

0800ab98 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f043 0203 	orr.w	r2, r3, #3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0303 	and.w	r3, r3, #3
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
	...

0800ac14 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ac32:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ac38:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ac3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68da      	ldr	r2, [r3, #12]
 800ac4a:	4b06      	ldr	r3, [pc, #24]	; (800ac64 <SDMMC_SendCommand+0x50>)
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	431a      	orrs	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	fffee0c0 	.word	0xfffee0c0

0800ac68 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	b2db      	uxtb	r3, r3
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b085      	sub	sp, #20
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3314      	adds	r3, #20
 800ac90:	461a      	mov	r2, r3
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	4413      	add	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800acce:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800acd4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800acda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0

}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b088      	sub	sp, #32
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ad0e:	2310      	movs	r3, #16
 800ad10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad22:	f107 0308 	add.w	r3, r7, #8
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff ff73 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ad2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad32:	2110      	movs	r1, #16
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fa5f 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800ad3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3720      	adds	r7, #32
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b088      	sub	sp, #32
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad54:	2311      	movs	r3, #17
 800ad56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad68:	f107 0308 	add.w	r3, r7, #8
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff ff50 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad78:	2111      	movs	r1, #17
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fa3c 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800ad80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad82:	69fb      	ldr	r3, [r7, #28]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3720      	adds	r7, #32
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad9a:	2312      	movs	r3, #18
 800ad9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ada2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ada4:	2300      	movs	r3, #0
 800ada6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ada8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adae:	f107 0308 	add.w	r3, r7, #8
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff ff2d 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800adba:	f241 3288 	movw	r2, #5000	; 0x1388
 800adbe:	2112      	movs	r1, #18
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fa19 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800adc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adc8:	69fb      	ldr	r3, [r7, #28]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b088      	sub	sp, #32
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ade0:	2318      	movs	r3, #24
 800ade2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ade4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ade8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff ff0a 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ae00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae04:	2118      	movs	r1, #24
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f9f6 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800ae0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3720      	adds	r7, #32
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b088      	sub	sp, #32
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ae26:	2319      	movs	r3, #25
 800ae28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae30:	2300      	movs	r3, #0
 800ae32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff fee7 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae4a:	2119      	movs	r1, #25
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f9d3 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800ae52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae54:	69fb      	ldr	r3, [r7, #28]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3720      	adds	r7, #32
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ae6c:	230c      	movs	r3, #12
 800ae6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae76:	2300      	movs	r3, #0
 800ae78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae7e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae98:	f107 0308 	add.w	r3, r7, #8
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7ff feb8 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800aea4:	4a0b      	ldr	r2, [pc, #44]	; (800aed4 <SDMMC_CmdStopTransfer+0x74>)
 800aea6:	210c      	movs	r1, #12
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f9a5 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800aeae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aec2:	d101      	bne.n	800aec8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800aec8:	69fb      	ldr	r3, [r7, #28]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3720      	adds	r7, #32
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	05f5e100 	.word	0x05f5e100

0800aed8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aee6:	2307      	movs	r3, #7
 800aee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef0:	2300      	movs	r3, #0
 800aef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aefa:	f107 0308 	add.w	r3, r7, #8
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fe87 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800af06:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0a:	2107      	movs	r1, #7
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f973 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800af12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af14:	69fb      	ldr	r3, [r7, #28]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3720      	adds	r7, #32
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b088      	sub	sp, #32
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800af26:	2300      	movs	r3, #0
 800af28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800af2e:	2300      	movs	r3, #0
 800af30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af32:	2300      	movs	r3, #0
 800af34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af3c:	f107 0308 	add.w	r3, r7, #8
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff fe66 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fb97 	bl	800b67c <SDMMC_GetCmdError>
 800af4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af50:	69fb      	ldr	r3, [r7, #28]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3720      	adds	r7, #32
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b088      	sub	sp, #32
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800af66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af68:	2308      	movs	r3, #8
 800af6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af72:	2300      	movs	r3, #0
 800af74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af7c:	f107 0308 	add.w	r3, r7, #8
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff fe46 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fb29 	bl	800b5e0 <SDMMC_GetCmdResp7>
 800af8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af90:	69fb      	ldr	r3, [r7, #28]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3720      	adds	r7, #32
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b088      	sub	sp, #32
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800afa8:	2337      	movs	r3, #55	; 0x37
 800afaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afb2:	2300      	movs	r3, #0
 800afb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afbc:	f107 0308 	add.w	r3, r7, #8
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff fe26 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800afc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afcc:	2137      	movs	r1, #55	; 0x37
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f912 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800afd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd6:	69fb      	ldr	r3, [r7, #28]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3720      	adds	r7, #32
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800afee:	2329      	movs	r3, #41	; 0x29
 800aff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aff8:	2300      	movs	r3, #0
 800affa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800affc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff fe03 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fa2e 	bl	800b470 <SDMMC_GetCmdResp3>
 800b014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b016:	69fb      	ldr	r3, [r7, #28]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b02e:	2306      	movs	r3, #6
 800b030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b032:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b042:	f107 0308 	add.w	r3, r7, #8
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff fde3 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b04e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b052:	2106      	movs	r1, #6
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f8cf 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800b05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b05c:	69fb      	ldr	r3, [r7, #28]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b088      	sub	sp, #32
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b072:	2333      	movs	r3, #51	; 0x33
 800b074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b086:	f107 0308 	add.w	r3, r7, #8
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff fdc1 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b092:	f241 3288 	movw	r2, #5000	; 0x1388
 800b096:	2133      	movs	r1, #51	; 0x33
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f8ad 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800b09e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0a0:	69fb      	ldr	r3, [r7, #28]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3720      	adds	r7, #32
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b088      	sub	sp, #32
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b0ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0ca:	f107 0308 	add.w	r3, r7, #8
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff fd9f 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f980 	bl	800b3dc <SDMMC_GetCmdResp2>
 800b0dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0de:	69fb      	ldr	r3, [r7, #28]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b0f6:	2309      	movs	r3, #9
 800b0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b0fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b100:	2300      	movs	r3, #0
 800b102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b108:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b10a:	f107 0308 	add.w	r3, r7, #8
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff fd7f 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f960 	bl	800b3dc <SDMMC_GetCmdResp2>
 800b11c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b11e:	69fb      	ldr	r3, [r7, #28]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3720      	adds	r7, #32
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b132:	2300      	movs	r3, #0
 800b134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b136:	2303      	movs	r3, #3
 800b138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b13a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b13e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b148:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b14a:	f107 0308 	add.w	r3, r7, #8
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff fd5f 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	2103      	movs	r1, #3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f9c8 	bl	800b4f0 <SDMMC_GetCmdResp6>
 800b160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b162:	69fb      	ldr	r3, [r7, #28]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3720      	adds	r7, #32
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b17a:	230d      	movs	r3, #13
 800b17c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b17e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b184:	2300      	movs	r3, #0
 800b186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b18c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b18e:	f107 0308 	add.w	r3, r7, #8
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff fd3d 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b19e:	210d      	movs	r1, #13
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f829 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800b1a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3720      	adds	r7, #32
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b088      	sub	sp, #32
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b1be:	230d      	movs	r3, #13
 800b1c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff fd1b 	bl	800ac14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b1de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e2:	210d      	movs	r1, #13
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 f807 	bl	800b1f8 <SDMMC_GetCmdResp1>
 800b1ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3720      	adds	r7, #32
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b088      	sub	sp, #32
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	460b      	mov	r3, r1
 800b202:	607a      	str	r2, [r7, #4]
 800b204:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b206:	4b70      	ldr	r3, [pc, #448]	; (800b3c8 <SDMMC_GetCmdResp1+0x1d0>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a70      	ldr	r2, [pc, #448]	; (800b3cc <SDMMC_GetCmdResp1+0x1d4>)
 800b20c:	fba2 2303 	umull	r2, r3, r2, r3
 800b210:	0a5a      	lsrs	r2, r3, #9
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	fb02 f303 	mul.w	r3, r2, r3
 800b218:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	1e5a      	subs	r2, r3, #1
 800b21e:	61fa      	str	r2, [r7, #28]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d102      	bne.n	800b22a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b228:	e0c9      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	4b67      	ldr	r3, [pc, #412]	; (800b3d0 <SDMMC_GetCmdResp1+0x1d8>)
 800b234:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b236:	2b00      	cmp	r3, #0
 800b238:	d0ef      	beq.n	800b21a <SDMMC_GetCmdResp1+0x22>
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1ea      	bne.n	800b21a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b248:	f003 0304 	and.w	r3, r3, #4
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d004      	beq.n	800b25a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2204      	movs	r2, #4
 800b254:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b256:	2304      	movs	r3, #4
 800b258:	e0b1      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d004      	beq.n	800b270 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2201      	movs	r2, #1
 800b26a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e0a6      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	4a58      	ldr	r2, [pc, #352]	; (800b3d4 <SDMMC_GetCmdResp1+0x1dc>)
 800b274:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7ff fcf6 	bl	800ac68 <SDMMC_GetCommandResponse>
 800b27c:	4603      	mov	r3, r0
 800b27e:	461a      	mov	r2, r3
 800b280:	7afb      	ldrb	r3, [r7, #11]
 800b282:	4293      	cmp	r3, r2
 800b284:	d001      	beq.n	800b28a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b286:	2301      	movs	r3, #1
 800b288:	e099      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b28a:	2100      	movs	r1, #0
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f7ff fcf8 	bl	800ac82 <SDMMC_GetResponse>
 800b292:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	4b50      	ldr	r3, [pc, #320]	; (800b3d8 <SDMMC_GetCmdResp1+0x1e0>)
 800b298:	4013      	ands	r3, r2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	e08d      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	da02      	bge.n	800b2ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b2a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2ac:	e087      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b2b8:	2340      	movs	r3, #64	; 0x40
 800b2ba:	e080      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b2c6:	2380      	movs	r3, #128	; 0x80
 800b2c8:	e079      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b2d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d8:	e071      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b2e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2e8:	e069      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b2f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2f8:	e061      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b308:	e059      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b318:	e051      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b328:	e049      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b334:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b338:	e041      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b348:	e039      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d002      	beq.n	800b35a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b358:	e031      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b364:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b368:	e029      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b374:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b378:	e021      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b384:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b388:	e019      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b394:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b398:	e011      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b3a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b3a8:	e009      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f003 0308 	and.w	r3, r3, #8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b3b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b3b8:	e001      	b.n	800b3be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b3ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3720      	adds	r7, #32
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	24000004 	.word	0x24000004
 800b3cc:	10624dd3 	.word	0x10624dd3
 800b3d0:	00200045 	.word	0x00200045
 800b3d4:	002000c5 	.word	0x002000c5
 800b3d8:	fdffe008 	.word	0xfdffe008

0800b3dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3e4:	4b1f      	ldr	r3, [pc, #124]	; (800b464 <SDMMC_GetCmdResp2+0x88>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a1f      	ldr	r2, [pc, #124]	; (800b468 <SDMMC_GetCmdResp2+0x8c>)
 800b3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ee:	0a5b      	lsrs	r3, r3, #9
 800b3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f4:	fb02 f303 	mul.w	r3, r2, r3
 800b3f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	1e5a      	subs	r2, r3, #1
 800b3fe:	60fa      	str	r2, [r7, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b408:	e026      	b.n	800b458 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0ef      	beq.n	800b3fa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1ea      	bne.n	800b3fa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d004      	beq.n	800b43a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2204      	movs	r2, #4
 800b434:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b436:	2304      	movs	r3, #4
 800b438:	e00e      	b.n	800b458 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	2b00      	cmp	r3, #0
 800b444:	d004      	beq.n	800b450 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e003      	b.n	800b458 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a06      	ldr	r2, [pc, #24]	; (800b46c <SDMMC_GetCmdResp2+0x90>)
 800b454:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	24000004 	.word	0x24000004
 800b468:	10624dd3 	.word	0x10624dd3
 800b46c:	002000c5 	.word	0x002000c5

0800b470 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b478:	4b1a      	ldr	r3, [pc, #104]	; (800b4e4 <SDMMC_GetCmdResp3+0x74>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a1a      	ldr	r2, [pc, #104]	; (800b4e8 <SDMMC_GetCmdResp3+0x78>)
 800b47e:	fba2 2303 	umull	r2, r3, r2, r3
 800b482:	0a5b      	lsrs	r3, r3, #9
 800b484:	f241 3288 	movw	r2, #5000	; 0x1388
 800b488:	fb02 f303 	mul.w	r3, r2, r3
 800b48c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	1e5a      	subs	r2, r3, #1
 800b492:	60fa      	str	r2, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b498:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b49c:	e01b      	b.n	800b4d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d0ef      	beq.n	800b48e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1ea      	bne.n	800b48e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d004      	beq.n	800b4ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2204      	movs	r2, #4
 800b4c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4ca:	2304      	movs	r3, #4
 800b4cc:	e003      	b.n	800b4d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a06      	ldr	r2, [pc, #24]	; (800b4ec <SDMMC_GetCmdResp3+0x7c>)
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	24000004 	.word	0x24000004
 800b4e8:	10624dd3 	.word	0x10624dd3
 800b4ec:	002000c5 	.word	0x002000c5

0800b4f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b4fe:	4b35      	ldr	r3, [pc, #212]	; (800b5d4 <SDMMC_GetCmdResp6+0xe4>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a35      	ldr	r2, [pc, #212]	; (800b5d8 <SDMMC_GetCmdResp6+0xe8>)
 800b504:	fba2 2303 	umull	r2, r3, r2, r3
 800b508:	0a5b      	lsrs	r3, r3, #9
 800b50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b50e:	fb02 f303 	mul.w	r3, r2, r3
 800b512:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	1e5a      	subs	r2, r3, #1
 800b518:	61fa      	str	r2, [r7, #28]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d102      	bne.n	800b524 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b51e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b522:	e052      	b.n	800b5ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b528:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0ef      	beq.n	800b514 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1ea      	bne.n	800b514 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b542:	f003 0304 	and.w	r3, r3, #4
 800b546:	2b00      	cmp	r3, #0
 800b548:	d004      	beq.n	800b554 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2204      	movs	r2, #4
 800b54e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b550:	2304      	movs	r3, #4
 800b552:	e03a      	b.n	800b5ca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d004      	beq.n	800b56a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b566:	2301      	movs	r3, #1
 800b568:	e02f      	b.n	800b5ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fb7c 	bl	800ac68 <SDMMC_GetCommandResponse>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	7afb      	ldrb	r3, [r7, #11]
 800b576:	4293      	cmp	r3, r2
 800b578:	d001      	beq.n	800b57e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e025      	b.n	800b5ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4a16      	ldr	r2, [pc, #88]	; (800b5dc <SDMMC_GetCmdResp6+0xec>)
 800b582:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b584:	2100      	movs	r1, #0
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7ff fb7b 	bl	800ac82 <SDMMC_GetResponse>
 800b58c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d106      	bne.n	800b5a6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	0c1b      	lsrs	r3, r3, #16
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e011      	b.n	800b5ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b5b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5b4:	e009      	b.n	800b5ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b5c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5c4:	e001      	b.n	800b5ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b5c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3720      	adds	r7, #32
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	24000004 	.word	0x24000004
 800b5d8:	10624dd3 	.word	0x10624dd3
 800b5dc:	002000c5 	.word	0x002000c5

0800b5e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b5e8:	4b22      	ldr	r3, [pc, #136]	; (800b674 <SDMMC_GetCmdResp7+0x94>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a22      	ldr	r2, [pc, #136]	; (800b678 <SDMMC_GetCmdResp7+0x98>)
 800b5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f2:	0a5b      	lsrs	r3, r3, #9
 800b5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5f8:	fb02 f303 	mul.w	r3, r2, r3
 800b5fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1e5a      	subs	r2, r3, #1
 800b602:	60fa      	str	r2, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b60c:	e02c      	b.n	800b668 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0ef      	beq.n	800b5fe <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1ea      	bne.n	800b5fe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	d004      	beq.n	800b63e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2204      	movs	r2, #4
 800b638:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b63a:	2304      	movs	r3, #4
 800b63c:	e014      	b.n	800b668 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d004      	beq.n	800b654 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b650:	2301      	movs	r3, #1
 800b652:	e009      	b.n	800b668 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2240      	movs	r2, #64	; 0x40
 800b664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b666:	2300      	movs	r3, #0

}
 800b668:	4618      	mov	r0, r3
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	24000004 	.word	0x24000004
 800b678:	10624dd3 	.word	0x10624dd3

0800b67c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b684:	4b11      	ldr	r3, [pc, #68]	; (800b6cc <SDMMC_GetCmdError+0x50>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a11      	ldr	r2, [pc, #68]	; (800b6d0 <SDMMC_GetCmdError+0x54>)
 800b68a:	fba2 2303 	umull	r2, r3, r2, r3
 800b68e:	0a5b      	lsrs	r3, r3, #9
 800b690:	f241 3288 	movw	r2, #5000	; 0x1388
 800b694:	fb02 f303 	mul.w	r3, r2, r3
 800b698:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	1e5a      	subs	r2, r3, #1
 800b69e:	60fa      	str	r2, [r7, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6a8:	e009      	b.n	800b6be <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d0f1      	beq.n	800b69a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a06      	ldr	r2, [pc, #24]	; (800b6d4 <SDMMC_GetCmdError+0x58>)
 800b6ba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	24000004 	.word	0x24000004
 800b6d0:	10624dd3 	.word	0x10624dd3
 800b6d4:	002000c5 	.word	0x002000c5

0800b6d8 <BSP_STM32_TIM_Init>:

/*******************************************************************
* TIM Functions
 *******************************************************************/

uint8_t BSP_STM32_TIM_Init(TIM_TypeDef *htim, uint8_t clk_division, uint16_t prescaler, uint16_t counter_limit) {
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	72fb      	strb	r3, [r7, #11]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	813b      	strh	r3, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	80fb      	strh	r3, [r7, #6]
	uint32_t tmp;

	if (clk_division > 3) return BSP_ERROR;
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d901      	bls.n	800b6fc <BSP_STM32_TIM_Init+0x24>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e027      	b.n	800b74c <BSP_STM32_TIM_Init+0x74>

	// Setting CR1 register
	tmp = 0;									// Reset value
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
	tmp |= 0 << TIM_CR1_URS_Pos;				// Update request source
	tmp |= 0 << TIM_CR1_OPM_Pos;				// One pulse mode disabled
	tmp |= 0 << TIM_CR1_DIR_Pos;				// Counting direction UP
	tmp |= 0 << TIM_CR1_CMS_Pos;				// Edge alignment mode
	tmp |= 0 << TIM_CR1_ARPE_Pos;				// Auto-reload preload disabled
	tmp	|= clk_division << TIM_CR1_CKD_Pos;		// Configuring clock division factor
 800b700:	7afb      	ldrb	r3, [r7, #11]
 800b702:	021b      	lsls	r3, r3, #8
 800b704:	461a      	mov	r2, r3
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	4313      	orrs	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]
	tmp |= 0 << TIM_CR1_UIFREMAP_Pos;			// No remapping

	htim->CR1 = tmp;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	601a      	str	r2, [r3, #0]

	// Setting CR2 register
	tmp = 0;	// Reset value
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]
	htim->CR2 = tmp;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	605a      	str	r2, [r3, #4]

	// Setting SMCR register
	tmp = 0;	// Reset value
 800b71c:	2300      	movs	r3, #0
 800b71e:	617b      	str	r3, [r7, #20]
	htim->SMCR = tmp;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	609a      	str	r2, [r3, #8]

	// Setting PSC register (prescaler)
	htim->PSC = prescaler;
 800b726:	893a      	ldrh	r2, [r7, #8]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	629a      	str	r2, [r3, #40]	; 0x28

	// Setting ARR register (counter limit)
	htim->ARR = counter_limit;
 800b72c:	88fa      	ldrh	r2, [r7, #6]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	62da      	str	r2, [r3, #44]	; 0x2c

	// Resetting CNT register (counter)
	htim->CNT = 0;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	625a      	str	r2, [r3, #36]	; 0x24

	// Generating update event to reload registers
	htim->EGR = 1 << TIM_EGR_UG_Pos;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2201      	movs	r2, #1
 800b73c:	615a      	str	r2, [r3, #20]

	// Enabling update event interrupt
	htim->DIER |= (1 << TIM_DIER_UIE_Pos);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	f043 0201 	orr.w	r2, r3, #1
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	60da      	str	r2, [r3, #12]

	return BSP_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	371c      	adds	r7, #28
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <BSP_STM32_TIM_ConfigChannel>:

uint8_t BSP_STM32_TIM_ConfigChannel(TIM_TypeDef *htim, uint8_t channel, uint8_t mode, uint16_t init_value) {
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	4608      	mov	r0, r1
 800b762:	4611      	mov	r1, r2
 800b764:	461a      	mov	r2, r3
 800b766:	4603      	mov	r3, r0
 800b768:	70fb      	strb	r3, [r7, #3]
 800b76a:	460b      	mov	r3, r1
 800b76c:	70bb      	strb	r3, [r7, #2]
 800b76e:	4613      	mov	r3, r2
 800b770:	803b      	strh	r3, [r7, #0]
	// Mode 0b100 - Force channel to inactive level
	// Mode 0b101 - Force channel to active level
	// Mode 0b110 - PWM mode 1
	// Mode 0b111 - PWM mode 2

	channel--;
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	3b01      	subs	r3, #1
 800b776:	70fb      	strb	r3, [r7, #3]

	if (channel > 3) return BSP_ERROR;
 800b778:	78fb      	ldrb	r3, [r7, #3]
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d901      	bls.n	800b782 <BSP_STM32_TIM_ConfigChannel+0x2a>
 800b77e:	2301      	movs	r3, #1
 800b780:	e06d      	b.n	800b85e <BSP_STM32_TIM_ConfigChannel+0x106>
	if (mode > 7) return BSP_ERROR;
 800b782:	78bb      	ldrb	r3, [r7, #2]
 800b784:	2b07      	cmp	r3, #7
 800b786:	d901      	bls.n	800b78c <BSP_STM32_TIM_ConfigChannel+0x34>
 800b788:	2301      	movs	r3, #1
 800b78a:	e068      	b.n	800b85e <BSP_STM32_TIM_ConfigChannel+0x106>

	uint8_t ch_shift;
	uint16_t tmp;

	ch_shift = channel << 2;
 800b78c:	78fb      	ldrb	r3, [r7, #3]
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	737b      	strb	r3, [r7, #13]
	tmp = htim->CCER;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	81fb      	strh	r3, [r7, #14]
	tmp &= ~(0b1011 << ch_shift);	// Resetting channel settings
 800b798:	7b7b      	ldrb	r3, [r7, #13]
 800b79a:	220b      	movs	r2, #11
 800b79c:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a0:	b21b      	sxth	r3, r3
 800b7a2:	43db      	mvns	r3, r3
 800b7a4:	b21a      	sxth	r2, r3
 800b7a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	b21b      	sxth	r3, r3
 800b7ae:	81fb      	strh	r3, [r7, #14]
	tmp |= (0 << (ch_shift + 1));	// Setting positive polarity
	tmp |= (1 << (ch_shift + 0));	// Enable selected channel as output
 800b7b0:	7b7b      	ldrb	r3, [r7, #13]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b8:	b21a      	sxth	r2, r3
 800b7ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	b21b      	sxth	r3, r3
 800b7c2:	81fb      	strh	r3, [r7, #14]
	htim->CCER = tmp;
 800b7c4:	89fa      	ldrh	r2, [r7, #14]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	621a      	str	r2, [r3, #32]


	ch_shift = (channel % 2) << 3;
 800b7ca:	78fb      	ldrb	r3, [r7, #3]
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	737b      	strb	r3, [r7, #13]
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800b7d6:	78fb      	ldrb	r3, [r7, #3]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d803      	bhi.n	800b7e4 <BSP_STM32_TIM_ConfigChannel+0x8c>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	81fb      	strh	r3, [r7, #14]
 800b7e2:	e002      	b.n	800b7ea <BSP_STM32_TIM_ConfigChannel+0x92>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	69db      	ldr	r3, [r3, #28]
 800b7e8:	81fb      	strh	r3, [r7, #14]
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800b7ea:	7b7b      	ldrb	r3, [r7, #13]
 800b7ec:	22ff      	movs	r2, #255	; 0xff
 800b7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f2:	b21b      	sxth	r3, r3
 800b7f4:	43db      	mvns	r3, r3
 800b7f6:	b21a      	sxth	r2, r3
 800b7f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	b21b      	sxth	r3, r3
 800b800:	81fb      	strh	r3, [r7, #14]
	tmp |= (0 << (ch_shift + 0));		// Configure channel as output
	tmp |= (0 << (ch_shift + 2));		// Fast mode disabled
	tmp |= (0 << (ch_shift + 3));		// Preload disabled
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800b802:	78ba      	ldrb	r2, [r7, #2]
 800b804:	7b7b      	ldrb	r3, [r7, #13]
 800b806:	3304      	adds	r3, #4
 800b808:	fa02 f303 	lsl.w	r3, r2, r3
 800b80c:	b21a      	sxth	r2, r3
 800b80e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b812:	4313      	orrs	r3, r2
 800b814:	b21b      	sxth	r3, r3
 800b816:	81fb      	strh	r3, [r7, #14]
	if (channel < 2) htim->CCMR1 = tmp; else htim->CCMR2 = tmp;
 800b818:	78fb      	ldrb	r3, [r7, #3]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d803      	bhi.n	800b826 <BSP_STM32_TIM_ConfigChannel+0xce>
 800b81e:	89fa      	ldrh	r2, [r7, #14]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	619a      	str	r2, [r3, #24]
 800b824:	e002      	b.n	800b82c <BSP_STM32_TIM_ConfigChannel+0xd4>
 800b826:	89fa      	ldrh	r2, [r7, #14]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	61da      	str	r2, [r3, #28]

	// Setting value for selected channel
	if (channel == 0) htim->CCR1 = init_value;
 800b82c:	78fb      	ldrb	r3, [r7, #3]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d102      	bne.n	800b838 <BSP_STM32_TIM_ConfigChannel+0xe0>
 800b832:	883a      	ldrh	r2, [r7, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	635a      	str	r2, [r3, #52]	; 0x34
	if (channel == 1) htim->CCR2 = init_value;
 800b838:	78fb      	ldrb	r3, [r7, #3]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d102      	bne.n	800b844 <BSP_STM32_TIM_ConfigChannel+0xec>
 800b83e:	883a      	ldrh	r2, [r7, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	639a      	str	r2, [r3, #56]	; 0x38
	if (channel == 2) htim->CCR3 = init_value;
 800b844:	78fb      	ldrb	r3, [r7, #3]
 800b846:	2b02      	cmp	r3, #2
 800b848:	d102      	bne.n	800b850 <BSP_STM32_TIM_ConfigChannel+0xf8>
 800b84a:	883a      	ldrh	r2, [r7, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	63da      	str	r2, [r3, #60]	; 0x3c
	if (channel == 3) htim->CCR4 = init_value;
 800b850:	78fb      	ldrb	r3, [r7, #3]
 800b852:	2b03      	cmp	r3, #3
 800b854:	d102      	bne.n	800b85c <BSP_STM32_TIM_ConfigChannel+0x104>
 800b856:	883a      	ldrh	r2, [r7, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	641a      	str	r2, [r3, #64]	; 0x40


	return BSP_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <BSP_STM32_TIM_Start>:

uint8_t BSP_STM32_TIM_Start(TIM_TypeDef *htim) {
 800b86a:	b480      	push	{r7}
 800b86c:	b083      	sub	sp, #12
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
	htim->CR1 |= 1 << TIM_CR1_CEN_Pos;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f043 0201 	orr.w	r2, r3, #1
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	601a      	str	r2, [r3, #0]
	return BSP_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <BSP_STM32_TIM_SetChannelValue>:
uint8_t BSP_STM32_TIM_Stop(TIM_TypeDef *htim) {
	htim->CR1 &= ~(1 << TIM_CR1_CEN_Pos);
	return BSP_OK;
}

uint8_t BSP_STM32_TIM_SetChannelValue(TIM_TypeDef *htim, uint8_t channel, uint16_t value) {
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	70fb      	strb	r3, [r7, #3]
 800b898:	4613      	mov	r3, r2
 800b89a:	803b      	strh	r3, [r7, #0]
	channel --;
 800b89c:	78fb      	ldrb	r3, [r7, #3]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	70fb      	strb	r3, [r7, #3]
	if (channel > 3) return BSP_ERROR;
 800b8a2:	78fb      	ldrb	r3, [r7, #3]
 800b8a4:	2b03      	cmp	r3, #3
 800b8a6:	d901      	bls.n	800b8ac <BSP_STM32_TIM_SetChannelValue+0x20>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e018      	b.n	800b8de <BSP_STM32_TIM_SetChannelValue+0x52>

	// Setting value for selected channel
	if (channel == 0) htim->CCR1 = value;
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d102      	bne.n	800b8b8 <BSP_STM32_TIM_SetChannelValue+0x2c>
 800b8b2:	883a      	ldrh	r2, [r7, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	635a      	str	r2, [r3, #52]	; 0x34
	if (channel == 1) htim->CCR2 = value;
 800b8b8:	78fb      	ldrb	r3, [r7, #3]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d102      	bne.n	800b8c4 <BSP_STM32_TIM_SetChannelValue+0x38>
 800b8be:	883a      	ldrh	r2, [r7, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	639a      	str	r2, [r3, #56]	; 0x38
	if (channel == 2) htim->CCR3 = value;
 800b8c4:	78fb      	ldrb	r3, [r7, #3]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d102      	bne.n	800b8d0 <BSP_STM32_TIM_SetChannelValue+0x44>
 800b8ca:	883a      	ldrh	r2, [r7, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	63da      	str	r2, [r3, #60]	; 0x3c
	if (channel == 3) htim->CCR4 = value;
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d102      	bne.n	800b8dc <BSP_STM32_TIM_SetChannelValue+0x50>
 800b8d6:	883a      	ldrh	r2, [r7, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	641a      	str	r2, [r3, #64]	; 0x40

	return BSP_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <_UART_DMA_Callback_TC>:

#include "BSP_STM32_UART.h"

const uint16_t UARTPrescTable[12] = {1U, 2U, 4U, 6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};

static void _UART_DMA_Callback_TC(void) {
 800b8ea:	b480      	push	{r7}
 800b8ec:	af00      	add	r7, sp, #0

}
 800b8ee:	bf00      	nop
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <BSP_STM32_UART_Init>:



uint8_t BSP_STM32_UART_Init(USART_TypeDef *huart, uint32_t BaudRate, uint32_t WordLength, uint32_t StopBits, uint32_t Parity) {
 800b8f8:	b480      	push	{r7}
 800b8fa:	b089      	sub	sp, #36	; 0x24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
	uint32_t tmpreg = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	61fb      	str	r3, [r7, #28]

	// Disable UART
	huart->CR1 &= ~USART_CR1_UE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f023 0201 	bic.w	r2, r3, #1
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	601a      	str	r2, [r3, #0]

	// USART CR1 Configuration
	tmpreg = (uint32_t)WordLength | Parity | UART_MODE_TX_RX | UART_OVERSAMPLING_16 | UART_FIFOMODE_ENABLE;
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	431a      	orrs	r2, r3
 800b91c:	4b2d      	ldr	r3, [pc, #180]	; (800b9d4 <BSP_STM32_UART_Init+0xdc>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(huart->CR1, USART_CR1_FIELDS, tmpreg);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	4b2c      	ldr	r3, [pc, #176]	; (800b9d8 <BSP_STM32_UART_Init+0xe0>)
 800b928:	4013      	ands	r3, r2
 800b92a:	69fa      	ldr	r2, [r7, #28]
 800b92c:	431a      	orrs	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	601a      	str	r2, [r3, #0]

	// USART CR2 Configuration
	MODIFY_REG(huart->CR2, USART_CR2_STOP, StopBits);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	431a      	orrs	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	605a      	str	r2, [r3, #4]

	// USART CR3 Configuration
	tmpreg = UART_HWCONTROL_NONE | UART_ONE_BIT_SAMPLE_DISABLE | UART_RXFIFO_THRESHOLD_1_2 | UART_TXFIFO_THRESHOLD_1_2;
 800b942:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800b946:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(huart->CR3, USART_CR3_FIELDS, tmpreg);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	689a      	ldr	r2, [r3, #8]
 800b94c:	4b23      	ldr	r3, [pc, #140]	; (800b9dc <BSP_STM32_UART_Init+0xe4>)
 800b94e:	4013      	ands	r3, r2
 800b950:	69fa      	ldr	r2, [r7, #28]
 800b952:	431a      	orrs	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	609a      	str	r2, [r3, #8]

	// Configuring prescaler
	MODIFY_REG(huart->PRESC, USART_PRESC_PRESCALER, UART_PRESCALER_DIV1);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	f023 020f 	bic.w	r2, r3, #15
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	62da      	str	r2, [r3, #44]	; 0x2c

	// USART BRR Configuration
	uint32_t pclk = 120000000; // 120MHz from PCLK1
 800b964:	4b1e      	ldr	r3, [pc, #120]	; (800b9e0 <BSP_STM32_UART_Init+0xe8>)
 800b966:	61bb      	str	r3, [r7, #24]
	uint32_t usartdiv = ((pclk/UARTPrescTable[UART_PRESCALER_DIV1]) + (BaudRate/2U)) / (BaudRate);
 800b968:	2301      	movs	r3, #1
 800b96a:	461a      	mov	r2, r3
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	085b      	lsrs	r3, r3, #1
 800b976:	441a      	add	r2, r3
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97e:	617b      	str	r3, [r7, #20]

	if (usartdiv < UART_BRR_MIN) return BSP_ERROR;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2b0f      	cmp	r3, #15
 800b984:	d801      	bhi.n	800b98a <BSP_STM32_UART_Init+0x92>
 800b986:	2301      	movs	r3, #1
 800b988:	e01d      	b.n	800b9c6 <BSP_STM32_UART_Init+0xce>
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b990:	d301      	bcc.n	800b996 <BSP_STM32_UART_Init+0x9e>
 800b992:	2301      	movs	r3, #1
 800b994:	e017      	b.n	800b9c6 <BSP_STM32_UART_Init+0xce>

	huart->BRR = (uint16_t)usartdiv;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	461a      	mov	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	60da      	str	r2, [r3, #12]

	// Clear bits required for asynchronous mode
	CLEAR_BIT(huart->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	609a      	str	r2, [r3, #8]

	// Enable UART
	huart->CR1 |= USART_CR1_UE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f043 0201 	orr.w	r2, r3, #1
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3724      	adds	r7, #36	; 0x24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	2000000c 	.word	0x2000000c
 800b9d8:	cfff69f3 	.word	0xcfff69f3
 800b9dc:	11fff4ff 	.word	0x11fff4ff
 800b9e0:	07270e00 	.word	0x07270e00

0800b9e4 <BSP_STM32_UART_StartListen>:

uint8_t BSP_STM32_UART_StartListen(USART_TypeDef *huart, TxRxContext_TypeDef * ctx, uint8_t * pBuf, uint32_t bufSize) {
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]

	UARTContext_TypeDef * uart_ctx = (UARTContext_TypeDef *)ctx->ctxmem;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	3328      	adds	r3, #40	; 0x28
 800b9f6:	617b      	str	r3, [r7, #20]

	// Configuring context
	uart_ctx->indexRX0 = 0;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	615a      	str	r2, [r3, #20]
	uart_ctx->pDataRX = pBuf;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	601a      	str	r2, [r3, #0]
	uart_ctx->sizeRX = bufSize;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	60da      	str	r2, [r3, #12]

	// Start DMA
	ctx->callback_TC = (uint32_t)_UART_DMA_Callback_TC;
 800ba0a:	4a11      	ldr	r2, [pc, #68]	; (800ba50 <BSP_STM32_UART_StartListen+0x6c>)
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	621a      	str	r2, [r3, #32]
	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&huart->RDR, (uint32_t)pBuf, bufSize);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3324      	adds	r3, #36	; 0x24
 800ba14:	4619      	mov	r1, r3
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	68b8      	ldr	r0, [r7, #8]
 800ba1c:	f7fb f83a 	bl	8006a94 <BSP_STM32_DMA_StartIT>

	// Enabling IDLE interrupt
	SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	f043 0210 	orr.w	r2, r3, #16
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	621a      	str	r2, [r3, #32]
	SET_BIT(huart->CR1, USART_CR1_IDLEIE);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f043 0210 	orr.w	r2, r3, #16
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	601a      	str	r2, [r3, #0]

	// Start DMA receiving
	SET_BIT(huart->CR3, USART_CR3_DMAR);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	609a      	str	r2, [r3, #8]

	return BSP_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	0800b8eb 	.word	0x0800b8eb

0800ba54 <BSP_STM32_UART_IRQHandler>:

	return BSP_OK;
}


uint8_t BSP_STM32_UART_IRQHandler(USART_TypeDef *huart, TxRxContext_TypeDef *ctx) {
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]

	UARTContext_TypeDef * uart_ctx = (UARTContext_TypeDef *)ctx->ctxmem;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	3328      	adds	r3, #40	; 0x28
 800ba62:	60fb      	str	r3, [r7, #12]

	// Handling TXFTIE interrupt (FIFO buffer not full)
	if (huart->CR3 & USART_CR3_TXFTIE) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d02e      	beq.n	800bace <BSP_STM32_UART_IRQHandler+0x7a>

		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ba70:	e00f      	b.n	800ba92 <BSP_STM32_UART_IRQHandler+0x3e>
			huart->TDR = *uart_ctx->pDataTX;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	629a      	str	r2, [r3, #40]	; 0x28
			uart_ctx->pDataTX++;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	605a      	str	r2, [r3, #4]
			uart_ctx->indexTX++;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	611a      	str	r2, [r3, #16]
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d005      	beq.n	800baaa <BSP_STM32_UART_IRQHandler+0x56>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	691a      	ldr	r2, [r3, #16]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d3e3      	bcc.n	800ba72 <BSP_STM32_UART_IRQHandler+0x1e>
		}

		// Switch off TXFTIE interrupt when no more data is available
		if (uart_ctx->indexTX == uart_ctx->sizeTX) {
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	691a      	ldr	r2, [r3, #16]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d10b      	bne.n	800bace <BSP_STM32_UART_IRQHandler+0x7a>
			CLEAR_BIT(huart->CR3, USART_CR3_TXFTIE);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	609a      	str	r2, [r3, #8]
			SET_BIT(huart->CR1, USART_CR1_TCIE); // Enabling TCIE interrupt
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	601a      	str	r2, [r3, #0]
		}

	}

	// Handling TCIE interrupt
	if ((huart->CR1 & USART_CR1_TCIE) && (huart->ISR & USART_ISR_TC)) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d011      	beq.n	800bafe <BSP_STM32_UART_IRQHandler+0xaa>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00b      	beq.n	800bafe <BSP_STM32_UART_IRQHandler+0xaa>
		CLEAR_BIT(huart->CR1, USART_CR1_TCIE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	601a      	str	r2, [r3, #0]
		SET_BIT(huart->ICR, USART_ICR_TCCF);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	621a      	str	r2, [r3, #32]
	}

	// Handling IDLE interrupt
	if ((huart->CR1 & USART_CR1_IDLEIE) && (huart->ISR & USART_ISR_IDLE)) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f003 0310 	and.w	r3, r3, #16
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d031      	beq.n	800bb6e <BSP_STM32_UART_IRQHandler+0x11a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	f003 0310 	and.w	r3, r3, #16
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d02b      	beq.n	800bb6e <BSP_STM32_UART_IRQHandler+0x11a>
		SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a1b      	ldr	r3, [r3, #32]
 800bb1a:	f043 0210 	orr.w	r2, r3, #16
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	621a      	str	r2, [r3, #32]
		/* #define __HAL_DMA_GET_COUNTER(__HANDLE__) ((IS_DMA_STREAM_INSTANCE((__HANDLE__)->Instance))? \
                                           (((DMA_Stream_TypeDef *)(__HANDLE__)->Instance)->NDTR) :\
                                           (((BDMA_Channel_TypeDef *)(__HANDLE__)->Instance)->CNDTR)) */
		uart_ctx->indexRX0 = uart_ctx->indexRX1;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	699a      	ldr	r2, [r3, #24]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	615a      	str	r2, [r3, #20]
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fa fffa 	bl	8006b28 <BSP_STM32_DMA_GetCounter>
 800bb34:	4603      	mov	r3, r0
 800bb36:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	619a      	str	r2, [r3, #24]
		if (uart_ctx->indexRX1 >= uart_ctx->indexRX0) {
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	699a      	ldr	r2, [r3, #24]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d307      	bcc.n	800bb5c <BSP_STM32_UART_IRQHandler+0x108>
			uart_ctx->sizeRX = uart_ctx->indexRX1 - uart_ctx->indexRX0;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	699a      	ldr	r2, [r3, #24]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	695b      	ldr	r3, [r3, #20]
 800bb54:	1ad2      	subs	r2, r2, r3
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	60da      	str	r2, [r3, #12]
 800bb5a:	e008      	b.n	800bb6e <BSP_STM32_UART_IRQHandler+0x11a>
		} else {
			uart_ctx->sizeRX = (uart_ctx->indexRX1 + SERIAL_BUF_SIZE) - uart_ctx->indexRX0;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	699a      	ldr	r2, [r3, #24]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	60da      	str	r2, [r3, #12]
		}
	}

	return BSP_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bb7c:	4b3d      	ldr	r3, [pc, #244]	; (800bc74 <SystemInit+0xfc>)
 800bb7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb82:	4a3c      	ldr	r2, [pc, #240]	; (800bc74 <SystemInit+0xfc>)
 800bb84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800bb8c:	4b39      	ldr	r3, [pc, #228]	; (800bc74 <SystemInit+0xfc>)
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	4a38      	ldr	r2, [pc, #224]	; (800bc74 <SystemInit+0xfc>)
 800bb92:	f043 0310 	orr.w	r3, r3, #16
 800bb96:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bb98:	4b37      	ldr	r3, [pc, #220]	; (800bc78 <SystemInit+0x100>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 030f 	and.w	r3, r3, #15
 800bba0:	2b06      	cmp	r3, #6
 800bba2:	d807      	bhi.n	800bbb4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bba4:	4b34      	ldr	r3, [pc, #208]	; (800bc78 <SystemInit+0x100>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f023 030f 	bic.w	r3, r3, #15
 800bbac:	4a32      	ldr	r2, [pc, #200]	; (800bc78 <SystemInit+0x100>)
 800bbae:	f043 0307 	orr.w	r3, r3, #7
 800bbb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bbb4:	4b31      	ldr	r3, [pc, #196]	; (800bc7c <SystemInit+0x104>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a30      	ldr	r2, [pc, #192]	; (800bc7c <SystemInit+0x104>)
 800bbba:	f043 0301 	orr.w	r3, r3, #1
 800bbbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bbc0:	4b2e      	ldr	r3, [pc, #184]	; (800bc7c <SystemInit+0x104>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bbc6:	4b2d      	ldr	r3, [pc, #180]	; (800bc7c <SystemInit+0x104>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	492c      	ldr	r1, [pc, #176]	; (800bc7c <SystemInit+0x104>)
 800bbcc:	4b2c      	ldr	r3, [pc, #176]	; (800bc80 <SystemInit+0x108>)
 800bbce:	4013      	ands	r3, r2
 800bbd0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bbd2:	4b29      	ldr	r3, [pc, #164]	; (800bc78 <SystemInit+0x100>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 0308 	and.w	r3, r3, #8
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d007      	beq.n	800bbee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bbde:	4b26      	ldr	r3, [pc, #152]	; (800bc78 <SystemInit+0x100>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f023 030f 	bic.w	r3, r3, #15
 800bbe6:	4a24      	ldr	r2, [pc, #144]	; (800bc78 <SystemInit+0x100>)
 800bbe8:	f043 0307 	orr.w	r3, r3, #7
 800bbec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800bbee:	4b23      	ldr	r3, [pc, #140]	; (800bc7c <SystemInit+0x104>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800bbf4:	4b21      	ldr	r3, [pc, #132]	; (800bc7c <SystemInit+0x104>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800bbfa:	4b20      	ldr	r3, [pc, #128]	; (800bc7c <SystemInit+0x104>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800bc00:	4b1e      	ldr	r3, [pc, #120]	; (800bc7c <SystemInit+0x104>)
 800bc02:	4a20      	ldr	r2, [pc, #128]	; (800bc84 <SystemInit+0x10c>)
 800bc04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800bc06:	4b1d      	ldr	r3, [pc, #116]	; (800bc7c <SystemInit+0x104>)
 800bc08:	4a1f      	ldr	r2, [pc, #124]	; (800bc88 <SystemInit+0x110>)
 800bc0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800bc0c:	4b1b      	ldr	r3, [pc, #108]	; (800bc7c <SystemInit+0x104>)
 800bc0e:	4a1f      	ldr	r2, [pc, #124]	; (800bc8c <SystemInit+0x114>)
 800bc10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bc12:	4b1a      	ldr	r3, [pc, #104]	; (800bc7c <SystemInit+0x104>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800bc18:	4b18      	ldr	r3, [pc, #96]	; (800bc7c <SystemInit+0x104>)
 800bc1a:	4a1c      	ldr	r2, [pc, #112]	; (800bc8c <SystemInit+0x114>)
 800bc1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bc1e:	4b17      	ldr	r3, [pc, #92]	; (800bc7c <SystemInit+0x104>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800bc24:	4b15      	ldr	r3, [pc, #84]	; (800bc7c <SystemInit+0x104>)
 800bc26:	4a19      	ldr	r2, [pc, #100]	; (800bc8c <SystemInit+0x114>)
 800bc28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bc2a:	4b14      	ldr	r3, [pc, #80]	; (800bc7c <SystemInit+0x104>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bc30:	4b12      	ldr	r3, [pc, #72]	; (800bc7c <SystemInit+0x104>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a11      	ldr	r2, [pc, #68]	; (800bc7c <SystemInit+0x104>)
 800bc36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bc3c:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <SystemInit+0x104>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800bc42:	4b13      	ldr	r3, [pc, #76]	; (800bc90 <SystemInit+0x118>)
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	4a12      	ldr	r2, [pc, #72]	; (800bc90 <SystemInit+0x118>)
 800bc48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc4c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bc4e:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <SystemInit+0x11c>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	4b11      	ldr	r3, [pc, #68]	; (800bc98 <SystemInit+0x120>)
 800bc54:	4013      	ands	r3, r2
 800bc56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc5a:	d202      	bcs.n	800bc62 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bc5c:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <SystemInit+0x124>)
 800bc5e:	2201      	movs	r2, #1
 800bc60:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800bc62:	4b0f      	ldr	r3, [pc, #60]	; (800bca0 <SystemInit+0x128>)
 800bc64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800bc68:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800bc6a:	bf00      	nop
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	e000ed00 	.word	0xe000ed00
 800bc78:	52002000 	.word	0x52002000
 800bc7c:	58024400 	.word	0x58024400
 800bc80:	eaf6ed7f 	.word	0xeaf6ed7f
 800bc84:	02020200 	.word	0x02020200
 800bc88:	01ff0000 	.word	0x01ff0000
 800bc8c:	01010280 	.word	0x01010280
 800bc90:	580000c0 	.word	0x580000c0
 800bc94:	5c001000 	.word	0x5c001000
 800bc98:	ffff0000 	.word	0xffff0000
 800bc9c:	51008108 	.word	0x51008108
 800bca0:	52004000 	.word	0x52004000

0800bca4 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 800bcac:	2300      	movs	r3, #0
 800bcae:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3310      	adds	r3, #16
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f002 fa2f 	bl	800e118 <tu_fifo_remaining>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800bcbe:	89bb      	ldrh	r3, [r7, #12]
 800bcc0:	2b3f      	cmp	r3, #63	; 0x3f
 800bcc2:	d801      	bhi.n	800bcc8 <_prep_out_transaction+0x24>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	e02b      	b.n	800bd20 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	78da      	ldrb	r2, [r3, #3]
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	4611      	mov	r1, r2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f002 fe07 	bl	800e8e4 <usbd_edpt_claim>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	f083 0301 	eor.w	r3, r3, #1
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <_prep_out_transaction+0x42>
 800bce2:	2300      	movs	r3, #0
 800bce4:	e01c      	b.n	800bd20 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3310      	adds	r3, #16
 800bcea:	4618      	mov	r0, r3
 800bcec:	f002 fa14 	bl	800e118 <tu_fifo_remaining>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 800bcf4:	89bb      	ldrh	r3, [r7, #12]
 800bcf6:	2b3f      	cmp	r3, #63	; 0x3f
 800bcf8:	d90a      	bls.n	800bd10 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	78d9      	ldrb	r1, [r3, #3]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 800bd04:	7bf8      	ldrb	r0, [r7, #15]
 800bd06:	2340      	movs	r3, #64	; 0x40
 800bd08:	f002 fe40 	bl	800e98c <usbd_edpt_xfer>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	e007      	b.n	800bd20 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	78da      	ldrb	r2, [r3, #3]
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
 800bd16:	4611      	mov	r1, r2
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f002 fe0d 	bl	800e938 <usbd_edpt_release>

    return false;
 800bd1e:	2300      	movs	r3, #0
  }
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	4603      	mov	r3, r0
 800bd30:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800bd32:	79fb      	ldrb	r3, [r7, #7]
 800bd34:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bd38:	fb02 f303 	mul.w	r3, r2, r3
 800bd3c:	4a36      	ldr	r2, [pc, #216]	; (800be18 <tud_cdc_n_write_flush+0xf0>)
 800bd3e:	4413      	add	r3, r2
 800bd40:	617b      	str	r3, [r7, #20]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 800bd42:	f002 fb07 	bl	800e354 <tud_mounted>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d009      	beq.n	800bd60 <tud_cdc_n_write_flush+0x38>
 800bd4c:	f002 fb14 	bl	800e378 <tud_suspended>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f083 0301 	eor.w	r3, r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <tud_cdc_n_write_flush+0x38>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e000      	b.n	800bd62 <tud_cdc_n_write_flush+0x3a>
 800bd60:	2300      	movs	r3, #0
 800bd62:	f003 0301 	and.w	r3, r3, #1
 800bd66:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 800bd68:	f083 0301 	eor.w	r3, r3, #1
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <tud_cdc_n_write_flush+0x4e>
 800bd72:	2300      	movs	r3, #0
 800bd74:	e04c      	b.n	800be10 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	331c      	adds	r3, #28
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f002 f957 	bl	800e02e <tu_fifo_count>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <tud_cdc_n_write_flush+0x62>
 800bd86:	2300      	movs	r3, #0
 800bd88:	e042      	b.n	800be10 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	789a      	ldrb	r2, [r3, #2]
 800bd92:	7cfb      	ldrb	r3, [r7, #19]
 800bd94:	4611      	mov	r1, r2
 800bd96:	4618      	mov	r0, r3
 800bd98:	f002 fda4 	bl	800e8e4 <usbd_edpt_claim>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f083 0301 	eor.w	r3, r3, #1
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d001      	beq.n	800bdac <tud_cdc_n_write_flush+0x84>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	e031      	b.n	800be10 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	f103 001c 	add.w	r0, r3, #28
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	33e8      	adds	r3, #232	; 0xe8
 800bdb6:	2240      	movs	r2, #64	; 0x40
 800bdb8:	4619      	mov	r1, r3
 800bdba:	f002 f9e5 	bl	800e188 <tu_fifo_read_n>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	823b      	strh	r3, [r7, #16]

  if ( count )
 800bdc2:	8a3b      	ldrh	r3, [r7, #16]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d01b      	beq.n	800be00 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	7899      	ldrb	r1, [r3, #2]
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800bdd2:	8a3b      	ldrh	r3, [r7, #16]
 800bdd4:	7cf8      	ldrb	r0, [r7, #19]
 800bdd6:	f002 fdd9 	bl	800e98c <usbd_edpt_xfer>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f083 0301 	eor.w	r3, r3, #1
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <tud_cdc_n_write_flush+0xd4>
 800bde6:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <tud_cdc_n_write_flush+0xf4>)
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d000      	beq.n	800bdf8 <tud_cdc_n_write_flush+0xd0>
 800bdf6:	be00      	bkpt	0x0000
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e009      	b.n	800be10 <tud_cdc_n_write_flush+0xe8>
    return count;
 800bdfc:	8a3b      	ldrh	r3, [r7, #16]
 800bdfe:	e007      	b.n	800be10 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	789a      	ldrb	r2, [r3, #2]
 800be04:	7cfb      	ldrb	r3, [r7, #19]
 800be06:	4611      	mov	r1, r2
 800be08:	4618      	mov	r0, r3
 800be0a:	f002 fd95 	bl	800e938 <usbd_edpt_release>
    return 0;
 800be0e:	2300      	movs	r3, #0
  }
}
 800be10:	4618      	mov	r0, r3
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	240004a8 	.word	0x240004a8
 800be1c:	e000edf0 	.word	0xe000edf0

0800be20 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800be26:	f44f 7294 	mov.w	r2, #296	; 0x128
 800be2a:	2100      	movs	r1, #0
 800be2c:	4820      	ldr	r0, [pc, #128]	; (800beb0 <cdcd_init+0x90>)
 800be2e:	f004 fa88 	bl	8010342 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800be32:	2300      	movs	r3, #0
 800be34:	71fb      	strb	r3, [r7, #7]
 800be36:	e032      	b.n	800be9e <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 800be38:	79fb      	ldrb	r3, [r7, #7]
 800be3a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800be3e:	fb02 f303 	mul.w	r3, r2, r3
 800be42:	4a1b      	ldr	r2, [pc, #108]	; (800beb0 <cdcd_init+0x90>)
 800be44:	4413      	add	r3, r2
 800be46:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	22ff      	movs	r2, #255	; 0xff
 800be4c:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800be54:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2200      	movs	r2, #0
 800be5a:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2200      	movs	r2, #0
 800be60:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2208      	movs	r2, #8
 800be66:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f103 0010 	add.w	r0, r3, #16
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800be74:	2300      	movs	r3, #0
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	2301      	movs	r3, #1
 800be7a:	2240      	movs	r2, #64	; 0x40
 800be7c:	f001 fcca 	bl	800d814 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	f103 001c 	add.w	r0, r3, #28
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800be8c:	2301      	movs	r3, #1
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	2301      	movs	r3, #1
 800be92:	2240      	movs	r2, #64	; 0x40
 800be94:	f001 fcbe 	bl	800d814 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800be98:	79fb      	ldrb	r3, [r7, #7]
 800be9a:	3301      	adds	r3, #1
 800be9c:	71fb      	strb	r3, [r7, #7]
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0c9      	beq.n	800be38 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	240004a8 	.word	0x240004a8

0800beb4 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800bebe:	2300      	movs	r3, #0
 800bec0:	73fb      	strb	r3, [r7, #15]
 800bec2:	e01f      	b.n	800bf04 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800beca:	fb02 f303 	mul.w	r3, r2, r3
 800bece:	4a11      	ldr	r2, [pc, #68]	; (800bf14 <cdcd_reset+0x60>)
 800bed0:	4413      	add	r3, r2
 800bed2:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800bed4:	2205      	movs	r2, #5
 800bed6:	2100      	movs	r1, #0
 800bed8:	68b8      	ldr	r0, [r7, #8]
 800beda:	f004 fa32 	bl	8010342 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	3310      	adds	r3, #16
 800bee2:	4618      	mov	r0, r3
 800bee4:	f002 f9db 	bl	800e29e <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	331c      	adds	r3, #28
 800beec:	4618      	mov	r0, r3
 800beee:	f002 f9d6 	bl	800e29e <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	331c      	adds	r3, #28
 800bef6:	2101      	movs	r1, #1
 800bef8:	4618      	mov	r0, r3
 800befa:	f002 f9e1 	bl	800e2c0 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	3301      	adds	r3, #1
 800bf02:	73fb      	strb	r3, [r7, #15]
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d0dc      	beq.n	800bec4 <cdcd_reset+0x10>
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	bf00      	nop
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	240004a8 	.word	0x240004a8

0800bf18 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b09a      	sub	sp, #104	; 0x68
 800bf1c:	af02      	add	r7, sp, #8
 800bf1e:	4603      	mov	r3, r0
 800bf20:	6039      	str	r1, [r7, #0]
 800bf22:	71fb      	strb	r3, [r7, #7]
 800bf24:	4613      	mov	r3, r2
 800bf26:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	795b      	ldrb	r3, [r3, #5]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d103      	bne.n	800bf38 <cdcd_open+0x20>
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	799b      	ldrb	r3, [r3, #6]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d001      	beq.n	800bf3c <cdcd_open+0x24>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e0e1      	b.n	800c100 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 800bf40:	2300      	movs	r3, #0
 800bf42:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800bf46:	e01a      	b.n	800bf7e <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 800bf48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bf4c:	4a6e      	ldr	r2, [pc, #440]	; (800c108 <cdcd_open+0x1f0>)
 800bf4e:	f44f 7194 	mov.w	r1, #296	; 0x128
 800bf52:	fb01 f303 	mul.w	r3, r1, r3
 800bf56:	4413      	add	r3, r2
 800bf58:	3302      	adds	r3, #2
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d109      	bne.n	800bf74 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 800bf60:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bf64:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bf68:	fb02 f303 	mul.w	r3, r2, r3
 800bf6c:	4a66      	ldr	r2, [pc, #408]	; (800c108 <cdcd_open+0x1f0>)
 800bf6e:	4413      	add	r3, r2
 800bf70:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800bf72:	e008      	b.n	800bf86 <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 800bf74:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bf78:	3301      	adds	r3, #1
 800bf7a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800bf7e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d0e0      	beq.n	800bf48 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 800bf86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <cdcd_open+0x8a>
 800bf8c:	4b5f      	ldr	r3, [pc, #380]	; (800c10c <cdcd_open+0x1f4>)
 800bf8e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d000      	beq.n	800bf9e <cdcd_open+0x86>
 800bf9c:	be00      	bkpt	0x0000
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e0ae      	b.n	800c100 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	789a      	ldrb	r2, [r3, #2]
 800bfa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfa8:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800bfaa:	2309      	movs	r3, #9
 800bfac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	643b      	str	r3, [r7, #64]	; 0x40
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 800bfb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 800bfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc0:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 800bfc2:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800bfc4:	e013      	b.n	800bfee <cdcd_open+0xd6>
 800bfc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc8:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800bfda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfdc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 800bfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfea:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800bfec:	657b      	str	r3, [r7, #84]	; 0x54
 800bfee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800bff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff4:	3301      	adds	r3, #1
 800bff6:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800bff8:	2b24      	cmp	r3, #36	; 0x24
 800bffa:	d104      	bne.n	800c006 <cdcd_open+0xee>
 800bffc:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800c000:	88bb      	ldrh	r3, [r7, #4]
 800c002:	429a      	cmp	r2, r3
 800c004:	d9df      	bls.n	800bfc6 <cdcd_open+0xae>
 800c006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c008:	62bb      	str	r3, [r7, #40]	; 0x28
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	3301      	adds	r3, #1
 800c00e:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800c010:	2b05      	cmp	r3, #5
 800c012:	d12f      	bne.n	800c074 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800c014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c016:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 800c018:	79fb      	ldrb	r3, [r7, #7]
 800c01a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c01c:	4618      	mov	r0, r3
 800c01e:	f002 fc1d 	bl	800e85c <usbd_edpt_open>
 800c022:	4603      	mov	r3, r0
 800c024:	f083 0301 	eor.w	r3, r3, #1
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00a      	beq.n	800c044 <cdcd_open+0x12c>
 800c02e:	4b37      	ldr	r3, [pc, #220]	; (800c10c <cdcd_open+0x1f4>)
 800c030:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d000      	beq.n	800c040 <cdcd_open+0x128>
 800c03e:	be00      	bkpt	0x0000
 800c040:	2300      	movs	r3, #0
 800c042:	e05d      	b.n	800c100 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800c044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c046:	789a      	ldrb	r2, [r3, #2]
 800c048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c04a:	705a      	strb	r2, [r3, #1]
 800c04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c04e:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 800c054:	b29a      	uxth	r2, r3
 800c056:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c05a:	4413      	add	r3, r2
 800c05c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800c060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	461a      	mov	r2, r3
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800c072:	657b      	str	r3, [r7, #84]	; 0x54
 800c074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c076:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	3301      	adds	r3, #1
 800c07c:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800c07e:	2b04      	cmp	r3, #4
 800c080:	d139      	bne.n	800c0f6 <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 800c082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c084:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800c086:	2b0a      	cmp	r3, #10
 800c088:	d135      	bne.n	800c0f6 <cdcd_open+0x1de>
 800c08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c08c:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800c092:	b29a      	uxth	r2, r3
 800c094:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c098:	4413      	add	r3, r2
 800c09a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800c09e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0a0:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800c0b0:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800c0b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b4:	3303      	adds	r3, #3
 800c0b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c0b8:	3202      	adds	r2, #2
 800c0ba:	79f8      	ldrb	r0, [r7, #7]
 800c0bc:	9201      	str	r2, [sp, #4]
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0c6:	f002 fb61 	bl	800e78c <usbd_open_edpt_pair>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	f083 0301 	eor.w	r3, r3, #1
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00a      	beq.n	800c0ec <cdcd_open+0x1d4>
 800c0d6:	4b0d      	ldr	r3, [pc, #52]	; (800c10c <cdcd_open+0x1f4>)
 800c0d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d000      	beq.n	800c0e8 <cdcd_open+0x1d0>
 800c0e6:	be00      	bkpt	0x0000
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e009      	b.n	800c100 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 800c0ec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c0f0:	330e      	adds	r3, #14
 800c0f2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 800c0f6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c0f8:	f7ff fdd4 	bl	800bca4 <_prep_out_transaction>

  return drv_len;
 800c0fc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 800c100:	4618      	mov	r0, r3
 800c102:	3760      	adds	r7, #96	; 0x60
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	240004a8 	.word	0x240004a8
 800c10c:	e000edf0 	.word	0xe000edf0

0800c110 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08a      	sub	sp, #40	; 0x28
 800c114:	af00      	add	r7, sp, #0
 800c116:	4603      	mov	r3, r0
 800c118:	603a      	str	r2, [r7, #0]
 800c11a:	71fb      	strb	r3, [r7, #7]
 800c11c:	460b      	mov	r3, r1
 800c11e:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b20      	cmp	r3, #32
 800c12c:	d001      	beq.n	800c132 <cdcd_control_xfer_cb+0x22>
 800c12e:	2300      	movs	r3, #0
 800c130:	e0cf      	b.n	800c2d2 <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 800c138:	4b68      	ldr	r3, [pc, #416]	; (800c2dc <cdcd_control_xfer_cb+0x1cc>)
 800c13a:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 800c13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <cdcd_control_xfer_cb+0x38>
 800c144:	2300      	movs	r3, #0
 800c146:	e0c4      	b.n	800c2d2 <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 800c148:	6a3b      	ldr	r3, [r7, #32]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	889b      	ldrh	r3, [r3, #4]
 800c152:	b29b      	uxth	r3, r3
 800c154:	429a      	cmp	r2, r3
 800c156:	d009      	beq.n	800c16c <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 800c158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c15c:	3301      	adds	r3, #1
 800c15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800c168:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 800c16a:	e7e7      	b.n	800c13c <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 800c16c:	bf00      	nop
  }

  switch ( request->bRequest )
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	785b      	ldrb	r3, [r3, #1]
 800c172:	3b20      	subs	r3, #32
 800c174:	2b03      	cmp	r3, #3
 800c176:	f200 80a2 	bhi.w	800c2be <cdcd_control_xfer_cb+0x1ae>
 800c17a:	a201      	add	r2, pc, #4	; (adr r2, 800c180 <cdcd_control_xfer_cb+0x70>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c191 	.word	0x0800c191
 800c184:	0800c1cd 	.word	0x0800c1cd
 800c188:	0800c1e5 	.word	0x0800c1e5
 800c18c:	0800c28d 	.word	0x0800c28d
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 800c190:	79bb      	ldrb	r3, [r7, #6]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d108      	bne.n	800c1a8 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	f103 0208 	add.w	r2, r3, #8
 800c19c:	79f8      	ldrb	r0, [r7, #7]
 800c19e:	2307      	movs	r3, #7
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	f002 fd9f 	bl	800ece4 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 800c1a6:	e08c      	b.n	800c2c2 <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 800c1a8:	79bb      	ldrb	r3, [r7, #6]
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	f040 8089 	bne.w	800c2c2 <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800c1b0:	4b4b      	ldr	r3, [pc, #300]	; (800c2e0 <cdcd_control_xfer_cb+0x1d0>)
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 8085 	beq.w	800c2c2 <cdcd_control_xfer_cb+0x1b2>
 800c1b8:	6a3b      	ldr	r3, [r7, #32]
 800c1ba:	f103 0208 	add.w	r2, r3, #8
 800c1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f3af 8000 	nop.w
    break;
 800c1ca:	e07a      	b.n	800c2c2 <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 800c1cc:	79bb      	ldrb	r3, [r7, #6]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d179      	bne.n	800c2c6 <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	f103 0208 	add.w	r2, r3, #8
 800c1d8:	79f8      	ldrb	r0, [r7, #7]
 800c1da:	2307      	movs	r3, #7
 800c1dc:	6839      	ldr	r1, [r7, #0]
 800c1de:	f002 fd81 	bl	800ece4 <tud_control_xfer>
      }
    break;
 800c1e2:	e070      	b.n	800c2c6 <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 800c1e4:	79bb      	ldrb	r3, [r7, #6]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d105      	bne.n	800c1f6 <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 800c1ea:	79fb      	ldrb	r3, [r7, #7]
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f002 fd06 	bl	800ec00 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 800c1f4:	e069      	b.n	800c2ca <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 800c1f6:	79bb      	ldrb	r3, [r7, #6]
 800c1f8:	2b03      	cmp	r3, #3
 800c1fa:	d166      	bne.n	800c2ca <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	885b      	ldrh	r3, [r3, #2]
 800c200:	b29b      	uxth	r3, r3
 800c202:	613b      	str	r3, [r7, #16]
 800c204:	2300      	movs	r3, #0
 800c206:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	fa22 f303 	lsr.w	r3, r2, r3
 800c210:	f003 0301 	and.w	r3, r3, #1
 800c214:	2b00      	cmp	r3, #0
 800c216:	bf14      	ite	ne
 800c218:	2301      	movne	r3, #1
 800c21a:	2300      	moveq	r3, #0
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	885b      	ldrh	r3, [r3, #2]
 800c224:	b29b      	uxth	r3, r3
 800c226:	61bb      	str	r3, [r7, #24]
 800c228:	2301      	movs	r3, #1
 800c22a:	75fb      	strb	r3, [r7, #23]
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	fa22 f303 	lsr.w	r3, r2, r3
 800c234:	f003 0301 	and.w	r3, r3, #1
 800c238:	2b00      	cmp	r3, #0
 800c23a:	bf14      	ite	ne
 800c23c:	2301      	movne	r3, #1
 800c23e:	2300      	moveq	r3, #0
 800c240:	b2db      	uxtb	r3, r3
 800c242:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	885b      	ldrh	r3, [r3, #2]
 800c248:	b29b      	uxth	r3, r3
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	f103 021c 	add.w	r2, r3, #28
 800c256:	7ffb      	ldrb	r3, [r7, #31]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	bf14      	ite	ne
 800c25c:	2301      	movne	r3, #1
 800c25e:	2300      	moveq	r3, #0
 800c260:	b2db      	uxtb	r3, r3
 800c262:	f083 0301 	eor.w	r3, r3, #1
 800c266:	b2db      	uxtb	r3, r3
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	4619      	mov	r1, r3
 800c270:	4610      	mov	r0, r2
 800c272:	f002 f825 	bl	800e2c0 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800c276:	4b1b      	ldr	r3, [pc, #108]	; (800c2e4 <cdcd_control_xfer_cb+0x1d4>)
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d026      	beq.n	800c2ca <cdcd_control_xfer_cb+0x1ba>
 800c27c:	7fba      	ldrb	r2, [r7, #30]
 800c27e:	7ff9      	ldrb	r1, [r7, #31]
 800c280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c284:	4618      	mov	r0, r3
 800c286:	f3af 8000 	nop.w
    break;
 800c28a:	e01e      	b.n	800c2ca <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 800c28c:	79bb      	ldrb	r3, [r7, #6]
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d105      	bne.n	800c29e <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 800c292:	79fb      	ldrb	r3, [r7, #7]
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	4618      	mov	r0, r3
 800c298:	f002 fcb2 	bl	800ec00 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 800c29c:	e017      	b.n	800c2ce <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 800c29e:	79bb      	ldrb	r3, [r7, #6]
 800c2a0:	2b03      	cmp	r3, #3
 800c2a2:	d114      	bne.n	800c2ce <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800c2a4:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <cdcd_control_xfer_cb+0x1d8>)
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d011      	beq.n	800c2ce <cdcd_control_xfer_cb+0x1be>
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	885b      	ldrh	r3, [r3, #2]
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f3af 8000 	nop.w
    break;
 800c2bc:	e007      	b.n	800c2ce <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e007      	b.n	800c2d2 <cdcd_control_xfer_cb+0x1c2>
    break;
 800c2c2:	bf00      	nop
 800c2c4:	e004      	b.n	800c2d0 <cdcd_control_xfer_cb+0x1c0>
    break;
 800c2c6:	bf00      	nop
 800c2c8:	e002      	b.n	800c2d0 <cdcd_control_xfer_cb+0x1c0>
    break;
 800c2ca:	bf00      	nop
 800c2cc:	e000      	b.n	800c2d0 <cdcd_control_xfer_cb+0x1c0>
    break;
 800c2ce:	bf00      	nop
  }

  return true;
 800c2d0:	2301      	movs	r3, #1
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3728      	adds	r7, #40	; 0x28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	240004a8 	.word	0x240004a8
	...

0800c2ec <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	71fb      	strb	r3, [r7, #7]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	71bb      	strb	r3, [r7, #6]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 800c300:	2300      	movs	r3, #0
 800c302:	75fb      	strb	r3, [r7, #23]
 800c304:	e014      	b.n	800c330 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 800c306:	7dfb      	ldrb	r3, [r7, #23]
 800c308:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c30c:	fb02 f303 	mul.w	r3, r2, r3
 800c310:	4a54      	ldr	r2, [pc, #336]	; (800c464 <cdcd_xfer_cb+0x178>)
 800c312:	4413      	add	r3, r2
 800c314:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	78db      	ldrb	r3, [r3, #3]
 800c31a:	79ba      	ldrb	r2, [r7, #6]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d00a      	beq.n	800c336 <cdcd_xfer_cb+0x4a>
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	789b      	ldrb	r3, [r3, #2]
 800c324:	79ba      	ldrb	r2, [r7, #6]
 800c326:	429a      	cmp	r2, r3
 800c328:	d005      	beq.n	800c336 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	3301      	adds	r3, #1
 800c32e:	75fb      	strb	r3, [r7, #23]
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d0e7      	beq.n	800c306 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00a      	beq.n	800c352 <cdcd_xfer_cb+0x66>
 800c33c:	4b4a      	ldr	r3, [pc, #296]	; (800c468 <cdcd_xfer_cb+0x17c>)
 800c33e:	60bb      	str	r3, [r7, #8]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d000      	beq.n	800c34e <cdcd_xfer_cb+0x62>
 800c34c:	be00      	bkpt	0x0000
 800c34e:	2300      	movs	r3, #0
 800c350:	e084      	b.n	800c45c <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	78db      	ldrb	r3, [r3, #3]
 800c356:	79ba      	ldrb	r2, [r7, #6]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d14a      	bne.n	800c3f2 <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f103 0010 	add.w	r0, r3, #16
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	33a8      	adds	r3, #168	; 0xa8
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	b292      	uxth	r2, r2
 800c36a:	4619      	mov	r1, r3
 800c36c:	f001 ff73 	bl	800e256 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 800c370:	4b3e      	ldr	r3, [pc, #248]	; (800c46c <cdcd_xfer_cb+0x180>)
 800c372:	2b00      	cmp	r3, #0
 800c374:	d028      	beq.n	800c3c8 <cdcd_xfer_cb+0xdc>
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	795b      	ldrb	r3, [r3, #5]
 800c37a:	2bff      	cmp	r3, #255	; 0xff
 800c37c:	d024      	beq.n	800c3c8 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800c37e:	2300      	movs	r3, #0
 800c380:	60fb      	str	r3, [r7, #12]
 800c382:	e01d      	b.n	800c3c0 <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	795a      	ldrb	r2, [r3, #5]
 800c388:	6939      	ldr	r1, [r7, #16]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	440b      	add	r3, r1
 800c38e:	33a8      	adds	r3, #168	; 0xa8
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d111      	bne.n	800c3ba <cdcd_xfer_cb+0xce>
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	3310      	adds	r3, #16
 800c39a:	4618      	mov	r0, r3
 800c39c:	f001 fe79 	bl	800e092 <tu_fifo_empty>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f083 0301 	eor.w	r3, r3, #1
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d006      	beq.n	800c3ba <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	795a      	ldrb	r2, [r3, #5]
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	60fb      	str	r3, [r7, #12]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d3dd      	bcc.n	800c384 <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800c3c8:	4b29      	ldr	r3, [pc, #164]	; (800c470 <cdcd_xfer_cb+0x184>)
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00e      	beq.n	800c3ec <cdcd_xfer_cb+0x100>
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	3310      	adds	r3, #16
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f001 fe5d 	bl	800e092 <tu_fifo_empty>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f083 0301 	eor.w	r3, r3, #1
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d003      	beq.n	800c3ec <cdcd_xfer_cb+0x100>
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f3af 8000 	nop.w

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 800c3ec:	6938      	ldr	r0, [r7, #16]
 800c3ee:	f7ff fc59 	bl	800bca4 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	789b      	ldrb	r3, [r3, #2]
 800c3f6:	79ba      	ldrb	r2, [r7, #6]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d12e      	bne.n	800c45a <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 800c3fc:	4b1d      	ldr	r3, [pc, #116]	; (800c474 <cdcd_xfer_cb+0x188>)
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <cdcd_xfer_cb+0x11e>
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	4618      	mov	r0, r3
 800c406:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff fc8b 	bl	800bd28 <tud_cdc_n_write_flush>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d120      	bne.n	800c45a <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	331c      	adds	r3, #28
 800c41c:	4618      	mov	r0, r3
 800c41e:	f001 fe06 	bl	800e02e <tu_fifo_count>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d118      	bne.n	800c45a <cdcd_xfer_cb+0x16e>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d015      	beq.n	800c45a <cdcd_xfer_cb+0x16e>
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c434:	2b00      	cmp	r3, #0
 800c436:	d110      	bne.n	800c45a <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	789a      	ldrb	r2, [r3, #2]
 800c43c:	79fb      	ldrb	r3, [r7, #7]
 800c43e:	4611      	mov	r1, r2
 800c440:	4618      	mov	r0, r3
 800c442:	f002 fa4f 	bl	800e8e4 <usbd_edpt_claim>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d006      	beq.n	800c45a <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	7899      	ldrb	r1, [r3, #2]
 800c450:	79f8      	ldrb	r0, [r7, #7]
 800c452:	2300      	movs	r3, #0
 800c454:	2200      	movs	r2, #0
 800c456:	f002 fa99 	bl	800e98c <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 800c45a:	2301      	movs	r3, #1
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	240004a8 	.word	0x240004a8
 800c468:	e000edf0 	.word	0xe000edf0
	...

0800c478 <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	6039      	str	r1, [r7, #0]
 800c482:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	689a      	ldr	r2, [r3, #8]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48c:	1ad2      	subs	r2, r2, r3
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	629a      	str	r2, [r3, #40]	; 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	2203      	movs	r2, #3
 800c496:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	f103 0220 	add.w	r2, r3, #32
 800c4a6:	79f8      	ldrb	r0, [r7, #7]
 800c4a8:	230d      	movs	r3, #13
 800c4aa:	f002 fa6f 	bl	800e98c <usbd_edpt_xfer>
 800c4ae:	4603      	mov	r3, r0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	4603      	mov	r3, r0
 800c4c0:	6039      	str	r1, [r7, #0]
 800c4c2:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	79f8      	ldrb	r0, [r7, #7]
 800c4d6:	231f      	movs	r3, #31
 800c4d8:	f002 fa58 	bl	800e98c <usbd_edpt_xfer>
 800c4dc:	4603      	mov	r3, r0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b088      	sub	sp, #32
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	6039      	str	r1, [r7, #0]
 800c4f0:	71fb      	strb	r3, [r7, #7]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	3320      	adds	r3, #32
 800c4fe:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	79ba      	ldrb	r2, [r7, #6]
 800c504:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	689a      	ldr	r2, [r3, #8]
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50e:	1ad2      	subs	r2, r2, r3
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2202      	movs	r2, #2
 800c518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c522:	2b00      	cmp	r3, #0
 800c524:	d106      	bne.n	800c534 <fail_scsi_op+0x4e>
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	7b58      	ldrb	r0, [r3, #13]
 800c52a:	2300      	movs	r3, #0
 800c52c:	2220      	movs	r2, #32
 800c52e:	2105      	movs	r1, #5
 800c530:	f000 f8d0 	bl	800c6d4 <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d028      	beq.n	800c58e <fail_scsi_op+0xa8>
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d024      	beq.n	800c58e <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	7b1b      	ldrb	r3, [r3, #12]
 800c548:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	613b      	str	r3, [r7, #16]
 800c54e:	2307      	movs	r3, #7
 800c550:	73fb      	strb	r3, [r7, #15]
 800c552:	7bfb      	ldrb	r3, [r7, #15]
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	fa22 f303 	lsr.w	r3, r2, r3
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	2b00      	cmp	r3, #0
 800c560:	bf14      	ite	ne
 800c562:	2301      	movne	r3, #1
 800c564:	2300      	moveq	r3, #0
 800c566:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d008      	beq.n	800c57e <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800c572:	79fb      	ldrb	r3, [r7, #7]
 800c574:	4611      	mov	r1, r2
 800c576:	4618      	mov	r0, r3
 800c578:	f002 faac 	bl	800ead4 <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 800c57c:	e007      	b.n	800c58e <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c584:	79fb      	ldrb	r3, [r7, #7]
 800c586:	4611      	mov	r1, r2
 800c588:	4618      	mov	r0, r3
 800c58a:	f002 faa3 	bl	800ead4 <usbd_edpt_stall>
}
 800c58e:	bf00      	nop
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 800c596:	b480      	push	{r7}
 800c598:	b085      	sub	sp, #20
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3302      	adds	r3, #2
 800c5a2:	60bb      	str	r3, [r7, #8]


#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	ba1b      	rev	r3, r3
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	330f      	adds	r3, #15
 800c5c6:	3307      	adds	r3, #7
 800c5c8:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 800c5d0:	89fb      	ldrh	r3, [r7, #14]
 800c5d2:	ba5b      	rev16	r3, r3
 800c5d4:	b29b      	uxth	r3, r3
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7ff ffe5 	bl	800c5ba <rdwr10_get_blockcount>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 800c5f4:	89fb      	ldrh	r3, [r7, #14]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <rdwr10_get_blocksize+0x1c>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	e005      	b.n	800c60a <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689a      	ldr	r2, [r3, #8]
 800c602:	89fb      	ldrh	r3, [r7, #14]
 800c604:	fbb2 f3f3 	udiv	r3, r2, r3
 800c608:	b29b      	uxth	r3, r3
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b088      	sub	sp, #32
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 800c61a:	2300      	movs	r3, #0
 800c61c:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff ffcb 	bl	800c5ba <rdwr10_get_blockcount>
 800c624:	4603      	mov	r3, r0
 800c626:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d105      	bne.n	800c63c <rdwr10_validate_cmd+0x2a>
  {
    if ( block_count )
 800c630:	8bbb      	ldrh	r3, [r7, #28]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d048      	beq.n	800c6c8 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800c636:	2302      	movs	r3, #2
 800c638:	77fb      	strb	r3, [r7, #31]
 800c63a:	e045      	b.n	800c6c8 <rdwr10_validate_cmd+0xb6>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	7bdb      	ldrb	r3, [r3, #15]
 800c640:	2b28      	cmp	r3, #40	; 0x28
 800c642:	d119      	bne.n	800c678 <rdwr10_validate_cmd+0x66>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	7b1b      	ldrb	r3, [r3, #12]
 800c648:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 800c64a:	7efb      	ldrb	r3, [r7, #27]
 800c64c:	617b      	str	r3, [r7, #20]
 800c64e:	2307      	movs	r3, #7
 800c650:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800c652:	7cfb      	ldrb	r3, [r7, #19]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	fa22 f303 	lsr.w	r3, r2, r3
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	bf14      	ite	ne
 800c662:	2301      	movne	r3, #1
 800c664:	2300      	moveq	r3, #0
 800c666:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800c668:	f083 0301 	eor.w	r3, r3, #1
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d002      	beq.n	800c678 <rdwr10_validate_cmd+0x66>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 10 (Ho <> Di)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800c672:	2302      	movs	r3, #2
 800c674:	77fb      	strb	r3, [r7, #31]
 800c676:	e027      	b.n	800c6c8 <rdwr10_validate_cmd+0xb6>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	7bdb      	ldrb	r3, [r3, #15]
 800c67c:	2b2a      	cmp	r3, #42	; 0x2a
 800c67e:	d116      	bne.n	800c6ae <rdwr10_validate_cmd+0x9c>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	7b1b      	ldrb	r3, [r3, #12]
 800c684:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 800c686:	7cbb      	ldrb	r3, [r7, #18]
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	2307      	movs	r3, #7
 800c68c:	72fb      	strb	r3, [r7, #11]
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	fa22 f303 	lsr.w	r3, r2, r3
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bf14      	ite	ne
 800c69e:	2301      	movne	r3, #1
 800c6a0:	2300      	moveq	r3, #0
 800c6a2:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d002      	beq.n	800c6ae <rdwr10_validate_cmd+0x9c>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 8 (Hi <> Do)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	77fb      	strb	r3, [r7, #31]
 800c6ac:	e00c      	b.n	800c6c8 <rdwr10_validate_cmd+0xb6>
    }
    else if ( 0 == block_count )
 800c6ae:	8bbb      	ldrh	r3, [r7, #28]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d102      	bne.n	800c6ba <rdwr10_validate_cmd+0xa8>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
      status =  MSC_CSW_STATUS_FAILED;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	77fb      	strb	r3, [r7, #31]
 800c6b8:	e006      	b.n	800c6c8 <rdwr10_validate_cmd+0xb6>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	689a      	ldr	r2, [r3, #8]
 800c6be:	8bbb      	ldrh	r3, [r7, #28]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d201      	bcs.n	800c6c8 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, " Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 800c6c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
	...

0800c6d4 <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 800c6d4:	b490      	push	{r4, r7}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4604      	mov	r4, r0
 800c6dc:	4608      	mov	r0, r1
 800c6de:	4611      	mov	r1, r2
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4623      	mov	r3, r4
 800c6e4:	71fb      	strb	r3, [r7, #7]
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	71bb      	strb	r3, [r7, #6]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	717b      	strb	r3, [r7, #5]
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 800c6f2:	4a09      	ldr	r2, [pc, #36]	; (800c718 <tud_msc_set_sense+0x44>)
 800c6f4:	79bb      	ldrb	r3, [r7, #6]
 800c6f6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 800c6fa:	4a07      	ldr	r2, [pc, #28]	; (800c718 <tud_msc_set_sense+0x44>)
 800c6fc:	797b      	ldrb	r3, [r7, #5]
 800c6fe:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800c702:	4a05      	ldr	r2, [pc, #20]	; (800c718 <tud_msc_set_sense+0x44>)
 800c704:	793b      	ldrb	r3, [r7, #4]
 800c706:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 800c70a:	2301      	movs	r3, #1
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bc90      	pop	{r4, r7}
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	240005d0 	.word	0x240005d0

0800c71c <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 800c726:	79f8      	ldrb	r0, [r7, #7]
 800c728:	2300      	movs	r3, #0
 800c72a:	223a      	movs	r2, #58	; 0x3a
 800c72c:	2102      	movs	r1, #2
 800c72e:	f7ff ffd1 	bl	800c6d4 <tud_msc_set_sense>
}
 800c732:	bf00      	nop
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
	...

0800c73c <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 800c740:	2240      	movs	r2, #64	; 0x40
 800c742:	2100      	movs	r1, #0
 800c744:	4802      	ldr	r0, [pc, #8]	; (800c750 <mscd_init+0x14>)
 800c746:	f003 fdfc 	bl	8010342 <memset>
}
 800c74a:	bf00      	nop
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	240005d0 	.word	0x240005d0

0800c754 <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 800c75e:	2240      	movs	r2, #64	; 0x40
 800c760:	2100      	movs	r1, #0
 800c762:	4803      	ldr	r0, [pc, #12]	; (800c770 <mscd_reset+0x1c>)
 800c764:	f003 fded 	bl	8010342 <memset>
}
 800c768:	bf00      	nop
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	240005d0 	.word	0x240005d0

0800c774 <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08c      	sub	sp, #48	; 0x30
 800c778:	af02      	add	r7, sp, #8
 800c77a:	4603      	mov	r3, r0
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	71fb      	strb	r3, [r7, #7]
 800c780:	4613      	mov	r3, r2
 800c782:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	795b      	ldrb	r3, [r3, #5]
 800c788:	2b08      	cmp	r3, #8
 800c78a:	d107      	bne.n	800c79c <mscd_open+0x28>
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	799b      	ldrb	r3, [r3, #6]
 800c790:	2b06      	cmp	r3, #6
 800c792:	d103      	bne.n	800c79c <mscd_open+0x28>
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	79db      	ldrb	r3, [r3, #7]
 800c798:	2b50      	cmp	r3, #80	; 0x50
 800c79a:	d001      	beq.n	800c7a0 <mscd_open+0x2c>
 800c79c:	2300      	movs	r3, #0
 800c79e:	e053      	b.n	800c848 <mscd_open+0xd4>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 800c7a0:	2317      	movs	r3, #23
 800c7a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 800c7a4:	88ba      	ldrh	r2, [r7, #4]
 800c7a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d20a      	bcs.n	800c7c2 <mscd_open+0x4e>
 800c7ac:	4b28      	ldr	r3, [pc, #160]	; (800c850 <mscd_open+0xdc>)
 800c7ae:	617b      	str	r3, [r7, #20]
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f003 0301 	and.w	r3, r3, #1
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d000      	beq.n	800c7be <mscd_open+0x4a>
 800c7bc:	be00      	bkpt	0x0000
 800c7be:	2300      	movs	r3, #0
 800c7c0:	e042      	b.n	800c848 <mscd_open+0xd4>

  mscd_interface_t * p_msc = &_mscd_itf;
 800c7c2:	4b24      	ldr	r3, [pc, #144]	; (800c854 <mscd_open+0xe0>)
 800c7c4:	623b      	str	r3, [r7, #32]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	789a      	ldrb	r2, [r3, #2]
 800c7ca:	6a3b      	ldr	r3, [r7, #32]
 800c7cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1899      	adds	r1, r3, r2

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	332f      	adds	r3, #47	; 0x2f
 800c7e6:	6a3a      	ldr	r2, [r7, #32]
 800c7e8:	322e      	adds	r2, #46	; 0x2e
 800c7ea:	79f8      	ldrb	r0, [r7, #7]
 800c7ec:	9201      	str	r2, [sp, #4]
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	f001 ffca 	bl	800e78c <usbd_open_edpt_pair>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	f083 0301 	eor.w	r3, r3, #1
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00a      	beq.n	800c81a <mscd_open+0xa6>
 800c804:	4b12      	ldr	r3, [pc, #72]	; (800c850 <mscd_open+0xdc>)
 800c806:	61bb      	str	r3, [r7, #24]
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f003 0301 	and.w	r3, r3, #1
 800c810:	2b00      	cmp	r3, #0
 800c812:	d000      	beq.n	800c816 <mscd_open+0xa2>
 800c814:	be00      	bkpt	0x0000
 800c816:	2300      	movs	r3, #0
 800c818:	e016      	b.n	800c848 <mscd_open+0xd4>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 800c81a:	79fb      	ldrb	r3, [r7, #7]
 800c81c:	6a39      	ldr	r1, [r7, #32]
 800c81e:	4618      	mov	r0, r3
 800c820:	f7ff fe4a 	bl	800c4b8 <prepare_cbw>
 800c824:	4603      	mov	r3, r0
 800c826:	f083 0301 	eor.w	r3, r3, #1
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00a      	beq.n	800c846 <mscd_open+0xd2>
 800c830:	4b07      	ldr	r3, [pc, #28]	; (800c850 <mscd_open+0xdc>)
 800c832:	61fb      	str	r3, [r7, #28]
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d000      	beq.n	800c842 <mscd_open+0xce>
 800c840:	be00      	bkpt	0x0000
 800c842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c844:	e000      	b.n	800c848 <mscd_open+0xd4>

  return drv_len;
 800c846:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3728      	adds	r7, #40	; 0x28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	e000edf0 	.word	0xe000edf0
 800c854:	240005d0 	.word	0x240005d0

0800c858 <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->total_len   = 0;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	635a      	str	r2, [r3, #52]	; 0x34
  p_msc->xferred_len = 0;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	639a      	str	r2, [r3, #56]	; 0x38

  p_msc->sense_key           = 0;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  p_msc->add_sense_code      = 0;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  p_msc->add_sense_qualifier = 0;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b088      	sub	sp, #32
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	603a      	str	r2, [r7, #0]
 800c8a2:	71fb      	strb	r3, [r7, #7]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 800c8a8:	79bb      	ldrb	r3, [r7, #6]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d001      	beq.n	800c8b2 <mscd_control_xfer_cb+0x1a>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e0e6      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>

  mscd_interface_t* p_msc = &_mscd_itf;
 800c8b2:	4b75      	ldr	r3, [pc, #468]	; (800ca88 <mscd_control_xfer_cb+0x1f0>)
 800c8b4:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f040 8090 	bne.w	800c9e6 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	f003 031f 	and.w	r3, r3, #31
 800c8ce:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	f040 8088 	bne.w	800c9e6 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	f040 8083 	bne.w	800c9e6 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	885b      	ldrh	r3, [r3, #2]
 800c8e4:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d17d      	bne.n	800c9e6 <mscd_control_xfer_cb+0x14e>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	889b      	ldrh	r3, [r3, #4]
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800c8f2:	89fb      	ldrh	r3, [r7, #14]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8fe:	2b04      	cmp	r3, #4
 800c900:	d106      	bne.n	800c910 <mscd_control_xfer_cb+0x78>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 800c902:	7efa      	ldrb	r2, [r7, #27]
 800c904:	79fb      	ldrb	r3, [r7, #7]
 800c906:	4611      	mov	r1, r2
 800c908:	4618      	mov	r0, r3
 800c90a:	f002 f8e3 	bl	800ead4 <usbd_edpt_stall>
 800c90e:	e068      	b.n	800c9e2 <mscd_control_xfer_cb+0x14a>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c916:	7efa      	ldrb	r2, [r7, #27]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d11a      	bne.n	800c952 <mscd_control_xfer_cb+0xba>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c922:	2b02      	cmp	r3, #2
 800c924:	d15d      	bne.n	800c9e2 <mscd_control_xfer_cb+0x14a>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 800c926:	79fb      	ldrb	r3, [r7, #7]
 800c928:	69f9      	ldr	r1, [r7, #28]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7ff fda4 	bl	800c478 <send_csw>
 800c930:	4603      	mov	r3, r0
 800c932:	f083 0301 	eor.w	r3, r3, #1
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d052      	beq.n	800c9e2 <mscd_control_xfer_cb+0x14a>
 800c93c:	4b53      	ldr	r3, [pc, #332]	; (800ca8c <mscd_control_xfer_cb+0x1f4>)
 800c93e:	613b      	str	r3, [r7, #16]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0301 	and.w	r3, r3, #1
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d000      	beq.n	800c94e <mscd_control_xfer_cb+0xb6>
 800c94c:	be00      	bkpt	0x0000
 800c94e:	2300      	movs	r3, #0
 800c950:	e096      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c958:	7efa      	ldrb	r2, [r7, #27]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d141      	bne.n	800c9e2 <mscd_control_xfer_cb+0x14a>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c964:	2b00      	cmp	r3, #0
 800c966:	d13c      	bne.n	800c9e2 <mscd_control_xfer_cb+0x14a>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	737b      	strb	r3, [r7, #13]
 800c972:	4613      	mov	r3, r2
 800c974:	733b      	strb	r3, [r7, #12]

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 800c976:	7b3a      	ldrb	r2, [r7, #12]
 800c978:	7b7b      	ldrb	r3, [r7, #13]
 800c97a:	4611      	mov	r1, r2
 800c97c:	4618      	mov	r0, r3
 800c97e:	f002 f87b 	bl	800ea78 <usbd_edpt_busy>
 800c982:	4603      	mov	r3, r0
 800c984:	f083 0301 	eor.w	r3, r3, #1
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00d      	beq.n	800c9aa <mscd_control_xfer_cb+0x112>
 800c98e:	7b3a      	ldrb	r2, [r7, #12]
 800c990:	7b7b      	ldrb	r3, [r7, #13]
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f002 f8e9 	bl	800eb6c <usbd_edpt_stalled>
 800c99a:	4603      	mov	r3, r0
 800c99c:	f083 0301 	eor.w	r3, r3, #1
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <mscd_control_xfer_cb+0x112>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e000      	b.n	800c9ac <mscd_control_xfer_cb+0x114>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f003 0301 	and.w	r3, r3, #1
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d015      	beq.n	800c9e2 <mscd_control_xfer_cb+0x14a>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 800c9b6:	79fb      	ldrb	r3, [r7, #7]
 800c9b8:	69f9      	ldr	r1, [r7, #28]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff fd7c 	bl	800c4b8 <prepare_cbw>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	f083 0301 	eor.w	r3, r3, #1
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00a      	beq.n	800c9e2 <mscd_control_xfer_cb+0x14a>
 800c9cc:	4b2f      	ldr	r3, [pc, #188]	; (800ca8c <mscd_control_xfer_cb+0x1f4>)
 800c9ce:	617b      	str	r3, [r7, #20]
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d000      	beq.n	800c9de <mscd_control_xfer_cb+0x146>
 800c9dc:	be00      	bkpt	0x0000
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e04e      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>
          }
        }
      }
    }

    return true;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e04c      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b20      	cmp	r3, #32
 800c9f2:	d001      	beq.n	800c9f8 <mscd_control_xfer_cb+0x160>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	e043      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>

  switch ( request->bRequest )
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	785b      	ldrb	r3, [r3, #1]
 800c9fc:	2bfe      	cmp	r3, #254	; 0xfe
 800c9fe:	d016      	beq.n	800ca2e <mscd_control_xfer_cb+0x196>
 800ca00:	2bff      	cmp	r3, #255	; 0xff
 800ca02:	d13a      	bne.n	800ca7a <mscd_control_xfer_cb+0x1e2>
  {
    case MSC_REQ_RESET:
      TU_LOG(MSC_DEBUG, "  MSC BOT Reset\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	885b      	ldrh	r3, [r3, #2]
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d104      	bne.n	800ca18 <mscd_control_xfer_cb+0x180>
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	88db      	ldrh	r3, [r3, #6]
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <mscd_control_xfer_cb+0x184>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e031      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>

      // driver state reset
      proc_bot_reset(p_msc);
 800ca1c:	69f8      	ldr	r0, [r7, #28]
 800ca1e:	f7ff ff1b 	bl	800c858 <proc_bot_reset>

      tud_control_status(rhport, request);
 800ca22:	79fb      	ldrb	r3, [r7, #7]
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f002 f8ea 	bl	800ec00 <tud_control_status>
    break;
 800ca2c:	e027      	b.n	800ca7e <mscd_control_xfer_cb+0x1e6>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG(MSC_DEBUG, "  MSC Get Max Lun\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	885b      	ldrh	r3, [r3, #2]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d104      	bne.n	800ca42 <mscd_control_xfer_cb+0x1aa>
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	88db      	ldrh	r3, [r3, #6]
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d001      	beq.n	800ca46 <mscd_control_xfer_cb+0x1ae>
 800ca42:	2300      	movs	r3, #0
 800ca44:	e01c      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>

      uint8_t maxlun = 1;
 800ca46:	2301      	movs	r3, #1
 800ca48:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <mscd_control_xfer_cb+0x1f8>)
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <mscd_control_xfer_cb+0x1c0>
 800ca50:	f3af 8000 	nop.w
 800ca54:	4603      	mov	r3, r0
 800ca56:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 800ca58:	7afb      	ldrb	r3, [r7, #11]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <mscd_control_xfer_cb+0x1ca>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	e00e      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>

      // MAX LUN is minus 1 by specs
      maxlun--;
 800ca62:	7afb      	ldrb	r3, [r7, #11]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 800ca6a:	f107 020b 	add.w	r2, r7, #11
 800ca6e:	79f8      	ldrb	r0, [r7, #7]
 800ca70:	2301      	movs	r3, #1
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	f002 f936 	bl	800ece4 <tud_control_xfer>
    }
    break;
 800ca78:	e001      	b.n	800ca7e <mscd_control_xfer_cb+0x1e6>

    default: return false; // stall unsupported request
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e000      	b.n	800ca80 <mscd_control_xfer_cb+0x1e8>
  }

  return true;
 800ca7e:	2301      	movs	r3, #1
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3720      	adds	r7, #32
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	240005d0 	.word	0x240005d0
 800ca8c:	e000edf0 	.word	0xe000edf0
 800ca90:	00000000 	.word	0x00000000

0800ca94 <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b098      	sub	sp, #96	; 0x60
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	71fb      	strb	r3, [r7, #7]
 800caa0:	460b      	mov	r3, r1
 800caa2:	71bb      	strb	r3, [r7, #6]
 800caa4:	4613      	mov	r3, r2
 800caa6:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 800caa8:	4b95      	ldr	r3, [pc, #596]	; (800cd00 <mscd_xfer_cb+0x26c>)
 800caaa:	65bb      	str	r3, [r7, #88]	; 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800caac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caae:	657b      	str	r3, [r7, #84]	; 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 800cab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cab2:	3320      	adds	r3, #32
 800cab4:	653b      	str	r3, [r7, #80]	; 0x50

  switch (p_msc->stage)
 800cab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cab8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cabc:	2b03      	cmp	r3, #3
 800cabe:	f200 8207 	bhi.w	800ced0 <mscd_xfer_cb+0x43c>
 800cac2:	a201      	add	r2, pc, #4	; (adr r2, 800cac8 <mscd_xfer_cb+0x34>)
 800cac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac8:	0800cad9 	.word	0x0800cad9
 800cacc:	0800cd65 	.word	0x0800cd65
 800cad0:	0800ced1 	.word	0x0800ced1
 800cad4:	0800ce3f 	.word	0x0800ce3f
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 800cad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cada:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cade:	79ba      	ldrb	r2, [r7, #6]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d001      	beq.n	800cae8 <mscd_xfer_cb+0x54>
 800cae4:	2301      	movs	r3, #1
 800cae6:	e247      	b.n	800cf78 <mscd_xfer_cb+0x4e4>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2b1f      	cmp	r3, #31
 800caec:	d104      	bne.n	800caf8 <mscd_xfer_cb+0x64>
 800caee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a84      	ldr	r2, [pc, #528]	; (800cd04 <mscd_xfer_cb+0x270>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d015      	beq.n	800cb24 <mscd_xfer_cb+0x90>
      {
        TU_LOG(MSC_DEBUG, "  SCSI CBW is not valid\r\n");

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 800caf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cafa:	2204      	movs	r2, #4
 800cafc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800cb00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb02:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	4611      	mov	r1, r2
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f001 ffe2 	bl	800ead4 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 800cb10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb12:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cb16:	79fb      	ldrb	r3, [r7, #7]
 800cb18:	4611      	mov	r1, r2
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f001 ffda 	bl	800ead4 <usbd_edpt_stall>

        return false;
 800cb20:	2300      	movs	r3, #0
 800cb22:	e229      	b.n	800cf78 <mscd_xfer_cb+0x4e4>
      }

      TU_LOG(MSC_DEBUG, "  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 800cb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb26:	2200      	movs	r2, #0
 800cb28:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800cb2c:	701a      	strb	r2, [r3, #0]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800cb34:	705a      	strb	r2, [r3, #1]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800cb3c:	709a      	strb	r2, [r3, #2]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800cb44:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 800cb46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb4c:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 800cb4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb50:	2200      	movs	r2, #0
 800cb52:	721a      	strb	r2, [r3, #8]
 800cb54:	2200      	movs	r2, #0
 800cb56:	725a      	strb	r2, [r3, #9]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	729a      	strb	r2, [r3, #10]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 800cb60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb62:	2200      	movs	r2, #0
 800cb64:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 800cb66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 800cb6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb74:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 800cb76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb78:	2200      	movs	r2, #0
 800cb7a:	639a      	str	r2, [r3, #56]	; 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800cb7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb7e:	7bdb      	ldrb	r3, [r3, #15]
 800cb80:	2b28      	cmp	r3, #40	; 0x28
 800cb82:	d003      	beq.n	800cb8c <mscd_xfer_cb+0xf8>
 800cb84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb86:	7bdb      	ldrb	r3, [r3, #15]
 800cb88:	2b2a      	cmp	r3, #42	; 0x2a
 800cb8a:	d12a      	bne.n	800cbe2 <mscd_xfer_cb+0x14e>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 800cb8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cb8e:	f7ff fd40 	bl	800c612 <rdwr10_validate_cmd>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 800cb98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d007      	beq.n	800cbb0 <mscd_xfer_cb+0x11c>
        {
          fail_scsi_op(rhport, p_msc, status);
 800cba0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800cba4:	79fb      	ldrb	r3, [r7, #7]
 800cba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7ff fc9c 	bl	800c4e6 <fail_scsi_op>
      {
 800cbae:	e0d8      	b.n	800cd62 <mscd_xfer_cb+0x2ce>
        }else if ( p_cbw->total_bytes )
 800cbb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00f      	beq.n	800cbd8 <mscd_xfer_cb+0x144>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800cbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbba:	7bdb      	ldrb	r3, [r3, #15]
 800cbbc:	2b28      	cmp	r3, #40	; 0x28
 800cbbe:	d105      	bne.n	800cbcc <mscd_xfer_cb+0x138>
          {
            proc_read10_cmd(rhport, p_msc);
 800cbc0:	79fb      	ldrb	r3, [r7, #7]
 800cbc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fc95 	bl	800d4f4 <proc_read10_cmd>
      {
 800cbca:	e0ca      	b.n	800cd62 <mscd_xfer_cb+0x2ce>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fd23 	bl	800d61c <proc_write10_cmd>
      {
 800cbd6:	e0c4      	b.n	800cd62 <mscd_xfer_cb+0x2ce>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 800cbd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbda:	2202      	movs	r2, #2
 800cbdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      {
 800cbe0:	e0bf      	b.n	800cd62 <mscd_xfer_cb+0x2ce>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 800cbe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d042      	beq.n	800cc70 <mscd_xfer_cb+0x1dc>
 800cbea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbec:	7b1b      	ldrb	r3, [r3, #12]
 800cbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  return tu_bit_test(dir, 7);
 800cbf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbf8:	2307      	movs	r3, #7
 800cbfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800cbfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc04:	fa22 f303 	lsr.w	r3, r2, r3
 800cc08:	f003 0301 	and.w	r3, r3, #1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bf14      	ite	ne
 800cc10:	2301      	movne	r3, #1
 800cc12:	2300      	moveq	r3, #0
 800cc14:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 800cc16:	f083 0301 	eor.w	r3, r3, #1
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d027      	beq.n	800cc70 <mscd_xfer_cb+0x1dc>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 800cc20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc28:	d906      	bls.n	800cc38 <mscd_xfer_cb+0x1a4>
          {
            TU_LOG(MSC_DEBUG, "  SCSI reject non READ10/WRITE10 with large data\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800cc2a:	79fb      	ldrb	r3, [r7, #7]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7ff fc58 	bl	800c4e6 <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 800cc36:	e093      	b.n	800cd60 <mscd_xfer_cb+0x2cc>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 800cc38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc3a:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800cc3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	79f8      	ldrb	r0, [r7, #7]
 800cc46:	4a30      	ldr	r2, [pc, #192]	; (800cd08 <mscd_xfer_cb+0x274>)
 800cc48:	f001 fea0 	bl	800e98c <usbd_edpt_xfer>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	f083 0301 	eor.w	r3, r3, #1
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 8083 	beq.w	800cd60 <mscd_xfer_cb+0x2cc>
 800cc5a:	4b2c      	ldr	r3, [pc, #176]	; (800cd0c <mscd_xfer_cb+0x278>)
 800cc5c:	643b      	str	r3, [r7, #64]	; 0x40
 800cc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0301 	and.w	r3, r3, #1
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d000      	beq.n	800cc6c <mscd_xfer_cb+0x1d8>
 800cc6a:	be00      	bkpt	0x0000
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	e183      	b.n	800cf78 <mscd_xfer_cb+0x4e4>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 800cc70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc72:	7b58      	ldrb	r0, [r3, #13]
 800cc74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc76:	f103 010f 	add.w	r1, r3, #15
 800cc7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc7e:	4a22      	ldr	r2, [pc, #136]	; (800cd08 <mscd_xfer_cb+0x274>)
 800cc80:	f000 f988 	bl	800cf94 <proc_builtin_scsi>
 800cc84:	65f8      	str	r0, [r7, #92]	; 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800cc86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	da10      	bge.n	800ccae <mscd_xfer_cb+0x21a>
 800cc8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10b      	bne.n	800ccae <mscd_xfer_cb+0x21a>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800cc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc98:	7b58      	ldrb	r0, [r3, #13]
 800cc9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc9c:	f103 010f 	add.w	r1, r3, #15
 800cca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	4a18      	ldr	r2, [pc, #96]	; (800cd08 <mscd_xfer_cb+0x274>)
 800cca8:	f7f8 fff2 	bl	8005c90 <tud_msc_scsi_cb>
 800ccac:	65f8      	str	r0, [r7, #92]	; 0x5c
          }

          if ( resplen < 0 )
 800ccae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	da06      	bge.n	800ccc2 <mscd_xfer_cb+0x22e>
          {
            // unsupported command
            TU_LOG(MSC_DEBUG, "  SCSI unsupported or failed command\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800ccb4:	79fb      	ldrb	r3, [r7, #7]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7ff fc13 	bl	800c4e6 <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
            }
          }
        }
      }
    break;
 800ccc0:	e108      	b.n	800ced4 <mscd_xfer_cb+0x440>
          else if (resplen == 0)
 800ccc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10f      	bne.n	800cce8 <mscd_xfer_cb+0x254>
            if (p_cbw->total_bytes)
 800ccc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <mscd_xfer_cb+0x24a>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800ccd0:	79fb      	ldrb	r3, [r7, #7]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff fc05 	bl	800c4e6 <fail_scsi_op>
    break;
 800ccdc:	e0fa      	b.n	800ced4 <mscd_xfer_cb+0x440>
              p_msc->stage = MSC_STAGE_STATUS;
 800ccde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cce0:	2202      	movs	r2, #2
 800cce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 800cce6:	e0f5      	b.n	800ced4 <mscd_xfer_cb+0x440>
            if ( p_cbw->total_bytes == 0 )
 800cce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10f      	bne.n	800cd10 <mscd_xfer_cb+0x27c>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff fbf5 	bl	800c4e6 <fail_scsi_op>
    break;
 800ccfc:	e0ea      	b.n	800ced4 <mscd_xfer_cb+0x440>
 800ccfe:	bf00      	nop
 800cd00:	240005d0 	.word	0x240005d0
 800cd04:	43425355 	.word	0x43425355
 800cd08:	24000610 	.word	0x24000610
 800cd0c:	e000edf0 	.word	0xe000edf0
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 800cd10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	627a      	str	r2, [r7, #36]	; 0x24
 800cd18:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800cd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	bf28      	it	cs
 800cd22:	461a      	movcs	r2, r3
 800cd24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd26:	635a      	str	r2, [r3, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 800cd28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd2a:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 800cd2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	79f8      	ldrb	r0, [r7, #7]
 800cd36:	4a92      	ldr	r2, [pc, #584]	; (800cf80 <mscd_xfer_cb+0x4ec>)
 800cd38:	f001 fe28 	bl	800e98c <usbd_edpt_xfer>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	f083 0301 	eor.w	r3, r3, #1
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 80c5 	beq.w	800ced4 <mscd_xfer_cb+0x440>
 800cd4a:	4b8e      	ldr	r3, [pc, #568]	; (800cf84 <mscd_xfer_cb+0x4f0>)
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d000      	beq.n	800cd5c <mscd_xfer_cb+0x2c8>
 800cd5a:	be00      	bkpt	0x0000
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	e10b      	b.n	800cf78 <mscd_xfer_cb+0x4e4>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 800cd60:	bf00      	nop
    break;
 800cd62:	e0b7      	b.n	800ced4 <mscd_xfer_cb+0x440>

    case MSC_STAGE_DATA:
      TU_LOG(MSC_DEBUG, "  SCSI Data [Lun%u]\r\n", p_cbw->lun);
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800cd64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd66:	7bdb      	ldrb	r3, [r3, #15]
 800cd68:	2b28      	cmp	r3, #40	; 0x28
 800cd6a:	d116      	bne.n	800cd9a <mscd_xfer_cb+0x306>
      {
        p_msc->xferred_len += xferred_bytes;
 800cd6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	441a      	add	r2, r3
 800cd74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd76:	639a      	str	r2, [r3, #56]	; 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 800cd78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d304      	bcc.n	800cd8e <mscd_xfer_cb+0x2fa>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 800cd84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 800cd8c:	e0a4      	b.n	800ced8 <mscd_xfer_cb+0x444>
          proc_read10_cmd(rhport, p_msc);
 800cd8e:	79fb      	ldrb	r3, [r7, #7]
 800cd90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 fbae 	bl	800d4f4 <proc_read10_cmd>
    break;
 800cd98:	e09e      	b.n	800ced8 <mscd_xfer_cb+0x444>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 800cd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd9c:	7bdb      	ldrb	r3, [r3, #15]
 800cd9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cda0:	d106      	bne.n	800cdb0 <mscd_xfer_cb+0x31c>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 fc8f 	bl	800d6cc <proc_write10_new_data>
    break;
 800cdae:	e093      	b.n	800ced8 <mscd_xfer_cb+0x444>
        p_msc->xferred_len += xferred_bytes;
 800cdb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	441a      	add	r2, r3
 800cdb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdba:	639a      	str	r2, [r3, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 800cdbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdbe:	7b1b      	ldrb	r3, [r3, #12]
 800cdc0:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 800cdc2:	7ffb      	ldrb	r3, [r7, #31]
 800cdc4:	61bb      	str	r3, [r7, #24]
 800cdc6:	2307      	movs	r3, #7
 800cdc8:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	69ba      	ldr	r2, [r7, #24]
 800cdce:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd2:	f003 0301 	and.w	r3, r3, #1
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	bf14      	ite	ne
 800cdda:	2301      	movne	r3, #1
 800cddc:	2300      	moveq	r3, #0
 800cdde:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 800cde0:	f083 0301 	eor.w	r3, r3, #1
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d014      	beq.n	800ce14 <mscd_xfer_cb+0x380>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800cdea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdec:	7b58      	ldrb	r0, [r3, #13]
 800cdee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf0:	f103 010f 	add.w	r1, r3, #15
 800cdf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	4a61      	ldr	r2, [pc, #388]	; (800cf80 <mscd_xfer_cb+0x4ec>)
 800cdfc:	f7f8 ff48 	bl	8005c90 <tud_msc_scsi_cb>
 800ce00:	64b8      	str	r0, [r7, #72]	; 0x48
          if ( cb_result < 0 )
 800ce02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	da05      	bge.n	800ce14 <mscd_xfer_cb+0x380>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7ff fb69 	bl	800c4e6 <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 800ce14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d304      	bcc.n	800ce2a <mscd_xfer_cb+0x396>
          p_msc->stage = MSC_STAGE_STATUS;
 800ce20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce22:	2202      	movs	r2, #2
 800ce24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 800ce28:	e056      	b.n	800ced8 <mscd_xfer_cb+0x444>
          TU_BREAKPOINT();
 800ce2a:	4b56      	ldr	r3, [pc, #344]	; (800cf84 <mscd_xfer_cb+0x4f0>)
 800ce2c:	647b      	str	r3, [r7, #68]	; 0x44
 800ce2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d04e      	beq.n	800ced8 <mscd_xfer_cb+0x444>
 800ce3a:	be00      	bkpt	0x0000
    break;
 800ce3c:	e04c      	b.n	800ced8 <mscd_xfer_cb+0x444>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 800ce3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce40:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ce44:	79ba      	ldrb	r2, [r7, #6]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d148      	bne.n	800cedc <mscd_xfer_cb+0x448>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b0d      	cmp	r3, #13
 800ce4e:	d145      	bne.n	800cedc <mscd_xfer_cb+0x448>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 800ce50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce52:	7bdb      	ldrb	r3, [r3, #15]
 800ce54:	2b28      	cmp	r3, #40	; 0x28
 800ce56:	d002      	beq.n	800ce5e <mscd_xfer_cb+0x3ca>
 800ce58:	2b2a      	cmp	r3, #42	; 0x2a
 800ce5a:	d009      	beq.n	800ce70 <mscd_xfer_cb+0x3dc>
 800ce5c:	e011      	b.n	800ce82 <mscd_xfer_cb+0x3ee>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 800ce5e:	4b4a      	ldr	r3, [pc, #296]	; (800cf88 <mscd_xfer_cb+0x4f4>)
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d01a      	beq.n	800ce9a <mscd_xfer_cb+0x406>
 800ce64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce66:	7b5b      	ldrb	r3, [r3, #13]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f3af 8000 	nop.w
          break;
 800ce6e:	e014      	b.n	800ce9a <mscd_xfer_cb+0x406>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 800ce70:	4b46      	ldr	r3, [pc, #280]	; (800cf8c <mscd_xfer_cb+0x4f8>)
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d013      	beq.n	800ce9e <mscd_xfer_cb+0x40a>
 800ce76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce78:	7b5b      	ldrb	r3, [r3, #13]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f3af 8000 	nop.w
          break;
 800ce80:	e00d      	b.n	800ce9e <mscd_xfer_cb+0x40a>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 800ce82:	4b43      	ldr	r3, [pc, #268]	; (800cf90 <mscd_xfer_cb+0x4fc>)
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00c      	beq.n	800cea2 <mscd_xfer_cb+0x40e>
 800ce88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce8a:	7b5a      	ldrb	r2, [r3, #13]
 800ce8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce8e:	330f      	adds	r3, #15
 800ce90:	4619      	mov	r1, r3
 800ce92:	4610      	mov	r0, r2
 800ce94:	f3af 8000 	nop.w
          break;
 800ce98:	e003      	b.n	800cea2 <mscd_xfer_cb+0x40e>
          break;
 800ce9a:	bf00      	nop
 800ce9c:	e002      	b.n	800cea4 <mscd_xfer_cb+0x410>
          break;
 800ce9e:	bf00      	nop
 800cea0:	e000      	b.n	800cea4 <mscd_xfer_cb+0x410>
          break;
 800cea2:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 800cea4:	79fb      	ldrb	r3, [r7, #7]
 800cea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff fb05 	bl	800c4b8 <prepare_cbw>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	f083 0301 	eor.w	r3, r3, #1
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d010      	beq.n	800cedc <mscd_xfer_cb+0x448>
 800ceba:	4b32      	ldr	r3, [pc, #200]	; (800cf84 <mscd_xfer_cb+0x4f0>)
 800cebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d000      	beq.n	800cecc <mscd_xfer_cb+0x438>
 800ceca:	be00      	bkpt	0x0000
 800cecc:	2300      	movs	r3, #0
 800cece:	e053      	b.n	800cf78 <mscd_xfer_cb+0x4e4>
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
      }
    break;

    default : break;
 800ced0:	bf00      	nop
 800ced2:	e004      	b.n	800cede <mscd_xfer_cb+0x44a>
    break;
 800ced4:	bf00      	nop
 800ced6:	e002      	b.n	800cede <mscd_xfer_cb+0x44a>
    break;
 800ced8:	bf00      	nop
 800ceda:	e000      	b.n	800cede <mscd_xfer_cb+0x44a>
    break;
 800cedc:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 800cede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d146      	bne.n	800cf76 <mscd_xfer_cb+0x4e2>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 800cee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceea:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800ceee:	79fb      	ldrb	r3, [r7, #7]
 800cef0:	4611      	mov	r1, r2
 800cef2:	4618      	mov	r0, r3
 800cef4:	f001 fe3a 	bl	800eb6c <usbd_edpt_stalled>
 800cef8:	4603      	mov	r3, r0
 800cefa:	f083 0301 	eor.w	r3, r3, #1
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d038      	beq.n	800cf76 <mscd_xfer_cb+0x4e2>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 800cf04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf06:	689a      	ldr	r2, [r3, #8]
 800cf08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d91c      	bls.n	800cf4a <mscd_xfer_cb+0x4b6>
 800cf10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf12:	7b1b      	ldrb	r3, [r3, #12]
 800cf14:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 800cf16:	7dbb      	ldrb	r3, [r7, #22]
 800cf18:	613b      	str	r3, [r7, #16]
 800cf1a:	2307      	movs	r3, #7
 800cf1c:	73fb      	strb	r3, [r7, #15]
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	fa22 f303 	lsr.w	r3, r2, r3
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	bf14      	ite	ne
 800cf2e:	2301      	movne	r3, #1
 800cf30:	2300      	moveq	r3, #0
 800cf32:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d008      	beq.n	800cf4a <mscd_xfer_cb+0x4b6>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800cf38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf3a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	4611      	mov	r1, r2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f001 fdc6 	bl	800ead4 <usbd_edpt_stall>
 800cf48:	e015      	b.n	800cf76 <mscd_xfer_cb+0x4e2>
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 800cf4a:	79fb      	ldrb	r3, [r7, #7]
 800cf4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff fa92 	bl	800c478 <send_csw>
 800cf54:	4603      	mov	r3, r0
 800cf56:	f083 0301 	eor.w	r3, r3, #1
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00a      	beq.n	800cf76 <mscd_xfer_cb+0x4e2>
 800cf60:	4b08      	ldr	r3, [pc, #32]	; (800cf84 <mscd_xfer_cb+0x4f0>)
 800cf62:	637b      	str	r3, [r7, #52]	; 0x34
 800cf64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d000      	beq.n	800cf72 <mscd_xfer_cb+0x4de>
 800cf70:	be00      	bkpt	0x0000
 800cf72:	2300      	movs	r3, #0
 800cf74:	e000      	b.n	800cf78 <mscd_xfer_cb+0x4e4>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 800cf76:	2301      	movs	r3, #1
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3760      	adds	r7, #96	; 0x60
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	24000610 	.word	0x24000610
 800cf84:	e000edf0 	.word	0xe000edf0
	...

0800cf94 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 800cf94:	b590      	push	{r4, r7, lr}
 800cf96:	b0b7      	sub	sp, #220	; 0xdc
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60b9      	str	r1, [r7, #8]
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	603b      	str	r3, [r7, #0]
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 800cfa4:	4bb2      	ldr	r3, [pc, #712]	; (800d270 <proc_builtin_scsi+0x2dc>)
 800cfa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  switch ( scsi_cmd[0] )
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b25      	cmp	r3, #37	; 0x25
 800cfb0:	f200 8286 	bhi.w	800d4c0 <proc_builtin_scsi+0x52c>
 800cfb4:	a201      	add	r2, pc, #4	; (adr r2, 800cfbc <proc_builtin_scsi+0x28>)
 800cfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfba:	bf00      	nop
 800cfbc:	0800d055 	.word	0x0800d055
 800cfc0:	0800d4c1 	.word	0x0800d4c1
 800cfc4:	0800d4c1 	.word	0x0800d4c1
 800cfc8:	0800d3f9 	.word	0x0800d3f9
 800cfcc:	0800d4c1 	.word	0x0800d4c1
 800cfd0:	0800d4c1 	.word	0x0800d4c1
 800cfd4:	0800d4c1 	.word	0x0800d4c1
 800cfd8:	0800d4c1 	.word	0x0800d4c1
 800cfdc:	0800d4c1 	.word	0x0800d4c1
 800cfe0:	0800d4c1 	.word	0x0800d4c1
 800cfe4:	0800d4c1 	.word	0x0800d4c1
 800cfe8:	0800d4c1 	.word	0x0800d4c1
 800cfec:	0800d4c1 	.word	0x0800d4c1
 800cff0:	0800d4c1 	.word	0x0800d4c1
 800cff4:	0800d4c1 	.word	0x0800d4c1
 800cff8:	0800d4c1 	.word	0x0800d4c1
 800cffc:	0800d4c1 	.word	0x0800d4c1
 800d000:	0800d4c1 	.word	0x0800d4c1
 800d004:	0800d279 	.word	0x0800d279
 800d008:	0800d4c1 	.word	0x0800d4c1
 800d00c:	0800d4c1 	.word	0x0800d4c1
 800d010:	0800d4c1 	.word	0x0800d4c1
 800d014:	0800d4c1 	.word	0x0800d4c1
 800d018:	0800d4c1 	.word	0x0800d4c1
 800d01c:	0800d4c1 	.word	0x0800d4c1
 800d020:	0800d4c1 	.word	0x0800d4c1
 800d024:	0800d341 	.word	0x0800d341
 800d028:	0800d091 	.word	0x0800d091
 800d02c:	0800d4c1 	.word	0x0800d4c1
 800d030:	0800d4c1 	.word	0x0800d4c1
 800d034:	0800d4c1 	.word	0x0800d4c1
 800d038:	0800d4c1 	.word	0x0800d4c1
 800d03c:	0800d4c1 	.word	0x0800d4c1
 800d040:	0800d4c1 	.word	0x0800d4c1
 800d044:	0800d4c1 	.word	0x0800d4c1
 800d048:	0800d1b9 	.word	0x0800d1b9
 800d04c:	0800d4c1 	.word	0x0800d4c1
 800d050:	0800d113 	.word	0x0800d113
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ( !tud_msc_test_unit_ready_cb(lun) )
 800d05a:	7bfb      	ldrb	r3, [r7, #15]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7f8 fdf5 	bl	8005c4c <tud_msc_test_unit_ready_cb>
 800d062:	4603      	mov	r3, r0
 800d064:	f083 0301 	eor.w	r3, r3, #1
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f000 822d 	beq.w	800d4ca <proc_builtin_scsi+0x536>
      {
        // Failed status response
        resplen = - 1;
 800d070:	f04f 33ff 	mov.w	r3, #4294967295
 800d074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800d078:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d080:	2b00      	cmp	r3, #0
 800d082:	f040 8222 	bne.w	800d4ca <proc_builtin_scsi+0x536>
 800d086:	7bfb      	ldrb	r3, [r7, #15]
 800d088:	4618      	mov	r0, r3
 800d08a:	f7ff fb47 	bl	800c71c <set_sense_medium_not_present>
      }
    break;
 800d08e:	e21c      	b.n	800d4ca <proc_builtin_scsi+0x536>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if (tud_msc_start_stop_cb)
 800d096:	4b77      	ldr	r3, [pc, #476]	; (800d274 <proc_builtin_scsi+0x2e0>)
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 8218 	beq.w	800d4ce <proc_builtin_scsi+0x53a>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 800d0a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d0a8:	791b      	ldrb	r3, [r3, #4]
 800d0aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d0b6:	791b      	ldrb	r3, [r3, #4]
 800d0b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	bf14      	ite	ne
 800d0c2:	2301      	movne	r3, #1
 800d0c4:	2300      	moveq	r3, #0
 800d0c6:	b2da      	uxtb	r2, r3
 800d0c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d0cc:	791b      	ldrb	r3, [r3, #4]
 800d0ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	bf14      	ite	ne
 800d0d8:	2301      	movne	r3, #1
 800d0da:	2300      	moveq	r3, #0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	7bf8      	ldrb	r0, [r7, #15]
 800d0e0:	f7f8 fe0a 	bl	8005cf8 <tud_msc_start_stop_cb>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	f083 0301 	eor.w	r3, r3, #1
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 81ee 	beq.w	800d4ce <proc_builtin_scsi+0x53a>
        {
          // Failed status response
          resplen = - 1;
 800d0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800d0fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d0fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d102:	2b00      	cmp	r3, #0
 800d104:	f040 81e3 	bne.w	800d4ce <proc_builtin_scsi+0x53a>
 800d108:	7bfb      	ldrb	r3, [r7, #15]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7ff fb06 	bl	800c71c <set_sense_medium_not_present>
        }
      }
    break;
 800d110:	e1dd      	b.n	800d4ce <proc_builtin_scsi+0x53a>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 800d112:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 800d116:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7f8 fda1 	bl	8005c64 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 800d122:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 800d12a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d003      	beq.n	800d138 <proc_builtin_scsi+0x1a4>
 800d130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10e      	bne.n	800d156 <proc_builtin_scsi+0x1c2>
      {
        resplen = -1;
 800d138:	f04f 33ff 	mov.w	r3, #4294967295
 800d13c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800d140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d134      	bne.n	800d1b6 <proc_builtin_scsi+0x222>
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7ff fae4 	bl	800c71c <set_sense_medium_not_present>
 800d154:	e02f      	b.n	800d1b6 <proc_builtin_scsi+0x222>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 800d156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d158:	3b01      	subs	r3, #1
 800d15a:	ba1b      	rev	r3, r3
 800d15c:	667b      	str	r3, [r7, #100]	; 0x64
        read_capa10.block_size = tu_htonl(block_size);
 800d15e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d162:	ba1b      	rev	r3, r3
 800d164:	66bb      	str	r3, [r7, #104]	; 0x68

        resplen = sizeof(read_capa10);
 800d166:	2308      	movs	r3, #8
 800d168:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &read_capa10, (size_t) resplen));
 800d16c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d17c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d180:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800d184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (count > destsz) {
 800d188:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d18c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d190:	429a      	cmp	r2, r3
 800d192:	d202      	bcs.n	800d19a <proc_builtin_scsi+0x206>
    return -1;
 800d194:	f04f 33ff 	mov.w	r3, #4294967295
 800d198:	e008      	b.n	800d1ac <proc_builtin_scsi+0x218>
  memcpy(dest, src, count);
 800d19a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d19e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d1a2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800d1a6:	f003 f8f9 	bl	801039c <memcpy>
  return 0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8190 	beq.w	800d4d2 <proc_builtin_scsi+0x53e>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e196      	b.n	800d4e4 <proc_builtin_scsi+0x550>
      }
    }
    break;
 800d1b6:	e18c      	b.n	800d4d2 <proc_builtin_scsi+0x53e>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 800d1b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]
 800d1c0:	605a      	str	r2, [r3, #4]
 800d1c2:	609a      	str	r2, [r3, #8]
 800d1c4:	2308      	movs	r3, #8
 800d1c6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 800d1d0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d1d4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f8 fd42 	bl	8005c64 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 800d1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <proc_builtin_scsi+0x25a>
 800d1e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10e      	bne.n	800d20c <proc_builtin_scsi+0x278>
      {
        resplen = -1;
 800d1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800d1f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d1fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d135      	bne.n	800d26e <proc_builtin_scsi+0x2da>
 800d202:	7bfb      	ldrb	r3, [r7, #15]
 800d204:	4618      	mov	r0, r3
 800d206:	f7ff fa89 	bl	800c71c <set_sense_medium_not_present>
 800d20a:	e030      	b.n	800d26e <proc_builtin_scsi+0x2da>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 800d20c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d20e:	ba1b      	rev	r3, r3
 800d210:	65fb      	str	r3, [r7, #92]	; 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 800d212:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800d216:	ba5b      	rev16	r3, r3
 800d218:	b29b      	uxth	r3, r3
 800d21a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        resplen = sizeof(read_fmt_capa);
 800d21e:	230c      	movs	r3, #12
 800d220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &read_fmt_capa, (size_t) resplen));
 800d224:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d22e:	683a      	ldr	r2, [r7, #0]
 800d230:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d234:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d238:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d23c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (count > destsz) {
 800d240:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d248:	429a      	cmp	r2, r3
 800d24a:	d202      	bcs.n	800d252 <proc_builtin_scsi+0x2be>
    return -1;
 800d24c:	f04f 33ff 	mov.w	r3, #4294967295
 800d250:	e008      	b.n	800d264 <proc_builtin_scsi+0x2d0>
  memcpy(dest, src, count);
 800d252:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d256:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800d25a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800d25e:	f003 f89d 	bl	801039c <memcpy>
  return 0;
 800d262:	2300      	movs	r3, #0
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 8136 	beq.w	800d4d6 <proc_builtin_scsi+0x542>
 800d26a:	2300      	movs	r3, #0
 800d26c:	e13a      	b.n	800d4e4 <proc_builtin_scsi+0x550>
      }
    }
    break;
 800d26e:	e132      	b.n	800d4d6 <proc_builtin_scsi+0x542>
 800d270:	240005d0 	.word	0x240005d0
 800d274:	08005cf9 	.word	0x08005cf9

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 800d278:	f107 0314 	add.w	r3, r7, #20
 800d27c:	2224      	movs	r2, #36	; 0x24
 800d27e:	2100      	movs	r1, #0
 800d280:	4618      	mov	r0, r3
 800d282:	f003 f85e 	bl	8010342 <memset>
 800d286:	7d7b      	ldrb	r3, [r7, #21]
 800d288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d28c:	757b      	strb	r3, [r7, #21]
 800d28e:	2302      	movs	r3, #2
 800d290:	75bb      	strb	r3, [r7, #22]
 800d292:	7dfb      	ldrb	r3, [r7, #23]
 800d294:	2202      	movs	r2, #2
 800d296:	f362 0303 	bfi	r3, r2, #0, #4
 800d29a:	75fb      	strb	r3, [r7, #23]
 800d29c:	231f      	movs	r3, #31
 800d29e:	763b      	strb	r3, [r7, #24]
          .response_data_format = 2,
          .additional_length    = sizeof(scsi_inquiry_resp_t) - 5,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 800d2a0:	f107 0314 	add.w	r3, r7, #20
 800d2a4:	3308      	adds	r3, #8
 800d2a6:	2208      	movs	r2, #8
 800d2a8:	2120      	movs	r1, #32
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f003 f849 	bl	8010342 <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 800d2b0:	f107 0314 	add.w	r3, r7, #20
 800d2b4:	3310      	adds	r3, #16
 800d2b6:	2210      	movs	r2, #16
 800d2b8:	2120      	movs	r1, #32
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f003 f841 	bl	8010342 <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 800d2c0:	f107 0314 	add.w	r3, r7, #20
 800d2c4:	3320      	adds	r3, #32
 800d2c6:	2204      	movs	r2, #4
 800d2c8:	2120      	movs	r1, #32
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f003 f839 	bl	8010342 <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 800d2d0:	f107 0314 	add.w	r3, r7, #20
 800d2d4:	f103 0420 	add.w	r4, r3, #32
 800d2d8:	f107 0314 	add.w	r3, r7, #20
 800d2dc:	f103 0210 	add.w	r2, r3, #16
 800d2e0:	f107 0314 	add.w	r3, r7, #20
 800d2e4:	f103 0108 	add.w	r1, r3, #8
 800d2e8:	7bf8      	ldrb	r0, [r7, #15]
 800d2ea:	4623      	mov	r3, r4
 800d2ec:	f7f8 fc76 	bl	8005bdc <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 800d2f0:	2324      	movs	r3, #36	; 0x24
 800d2f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &inquiry_rsp, (size_t) resplen));
 800d2f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800d300:	683a      	ldr	r2, [r7, #0]
 800d302:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d306:	f107 0214 	add.w	r2, r7, #20
 800d30a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800d30e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (count > destsz) {
 800d312:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d202      	bcs.n	800d324 <proc_builtin_scsi+0x390>
    return -1;
 800d31e:	f04f 33ff 	mov.w	r3, #4294967295
 800d322:	e008      	b.n	800d336 <proc_builtin_scsi+0x3a2>
  memcpy(dest, src, count);
 800d324:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d328:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d32c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d330:	f003 f834 	bl	801039c <memcpy>
  return 0;
 800d334:	2300      	movs	r3, #0
 800d336:	2b00      	cmp	r3, #0
 800d338:	f000 80cf 	beq.w	800d4da <proc_builtin_scsi+0x546>
 800d33c:	2300      	movs	r3, #0
 800d33e:	e0d1      	b.n	800d4e4 <proc_builtin_scsi+0x550>
    }
    break;

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 800d340:	2303      	movs	r3, #3
 800d342:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800d346:	2300      	movs	r3, #0
 800d348:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800d34c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d350:	f36f 0306 	bfc	r3, #0, #7
 800d354:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d358:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d35c:	f36f 13c7 	bfc	r3, #7, #1
 800d360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d364:	2300      	movs	r3, #0
 800d366:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
      if ( tud_msc_is_writable_cb )
 800d370:	4b5e      	ldr	r3, [pc, #376]	; (800d4ec <proc_builtin_scsi+0x558>)
 800d372:	2b00      	cmp	r3, #0
 800d374:	d006      	beq.n	800d384 <proc_builtin_scsi+0x3f0>
      {
        writable = tud_msc_is_writable_cb(lun);
 800d376:	7bfb      	ldrb	r3, [r7, #15]
 800d378:	4618      	mov	r0, r3
 800d37a:	f7f8 fce1 	bl	8005d40 <tud_msc_is_writable_cb>
 800d37e:	4603      	mov	r3, r0
 800d380:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
      }

      mode_resp.write_protected = !writable;
 800d384:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	bf14      	ite	ne
 800d38c:	2301      	movne	r3, #1
 800d38e:	2300      	moveq	r3, #0
 800d390:	b2db      	uxtb	r3, r3
 800d392:	f083 0301 	eor.w	r3, r3, #1
 800d396:	b2db      	uxtb	r3, r3
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	b2da      	uxtb	r2, r3
 800d39e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d3a2:	f362 13c7 	bfi	r3, r2, #7, #1
 800d3a6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

      resplen = sizeof(mode_resp);
 800d3aa:	2304      	movs	r3, #4
 800d3ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &mode_resp, (size_t) resplen));
 800d3b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d3c0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d3c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800d3c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (count > destsz) {
 800d3cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d3d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d202      	bcs.n	800d3de <proc_builtin_scsi+0x44a>
    return -1;
 800d3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3dc:	e008      	b.n	800d3f0 <proc_builtin_scsi+0x45c>
  memcpy(dest, src, count);
 800d3de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d3e2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d3e6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d3ea:	f002 ffd7 	bl	801039c <memcpy>
  return 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d074      	beq.n	800d4de <proc_builtin_scsi+0x54a>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	e075      	b.n	800d4e4 <proc_builtin_scsi+0x550>
    }
    break;

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 800d3f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	601a      	str	r2, [r3, #0]
 800d400:	605a      	str	r2, [r3, #4]
 800d402:	609a      	str	r2, [r3, #8]
 800d404:	60da      	str	r2, [r3, #12]
 800d406:	821a      	strh	r2, [r3, #16]
 800d408:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d40c:	2270      	movs	r2, #112	; 0x70
 800d40e:	f362 0306 	bfi	r3, r2, #0, #7
 800d412:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d416:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d41a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d41e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 800d422:	230a      	movs	r3, #10
 800d424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 800d428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d42c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d430:	f003 030f 	and.w	r3, r3, #15
 800d434:	b2da      	uxtb	r2, r3
 800d436:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d43a:	f362 0303 	bfi	r3, r2, #0, #4
 800d43e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 800d442:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d44a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 800d44e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d456:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

      resplen = sizeof(sense_rsp);
 800d45a:	2312      	movs	r3, #18
 800d45c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &sense_rsp, (size_t) resplen));
 800d460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d46e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d472:	67ba      	str	r2, [r7, #120]	; 0x78
 800d474:	677b      	str	r3, [r7, #116]	; 0x74
  if (count > destsz) {
 800d476:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d202      	bcs.n	800d484 <proc_builtin_scsi+0x4f0>
    return -1;
 800d47e:	f04f 33ff 	mov.w	r3, #4294967295
 800d482:	e006      	b.n	800d492 <proc_builtin_scsi+0x4fe>
  memcpy(dest, src, count);
 800d484:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d486:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d488:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d48c:	f002 ff86 	bl	801039c <memcpy>
  return 0;
 800d490:	2300      	movs	r3, #0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d001      	beq.n	800d49a <proc_builtin_scsi+0x506>
 800d496:	2300      	movs	r3, #0
 800d498:	e024      	b.n	800d4e4 <proc_builtin_scsi+0x550>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 800d49a:	4b15      	ldr	r3, [pc, #84]	; (800d4f0 <proc_builtin_scsi+0x55c>)
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d008      	beq.n	800d4b2 <proc_builtin_scsi+0x51e>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	6879      	ldr	r1, [r7, #4]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7f8 fc3a 	bl	8005d22 <tud_msc_request_sense_cb>
 800d4ae:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 800d4b2:	7bf8      	ldrb	r0, [r7, #15]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	f7ff f90b 	bl	800c6d4 <tud_msc_set_sense>
    }
    break;
 800d4be:	e00f      	b.n	800d4e0 <proc_builtin_scsi+0x54c>

    default: resplen = -1; break;
 800d4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d4c8:	e00a      	b.n	800d4e0 <proc_builtin_scsi+0x54c>
    break;
 800d4ca:	bf00      	nop
 800d4cc:	e008      	b.n	800d4e0 <proc_builtin_scsi+0x54c>
    break;
 800d4ce:	bf00      	nop
 800d4d0:	e006      	b.n	800d4e0 <proc_builtin_scsi+0x54c>
    break;
 800d4d2:	bf00      	nop
 800d4d4:	e004      	b.n	800d4e0 <proc_builtin_scsi+0x54c>
    break;
 800d4d6:	bf00      	nop
 800d4d8:	e002      	b.n	800d4e0 <proc_builtin_scsi+0x54c>
    break;
 800d4da:	bf00      	nop
 800d4dc:	e000      	b.n	800d4e0 <proc_builtin_scsi+0x54c>
    break;
 800d4de:	bf00      	nop
  }

  return resplen;
 800d4e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	37dc      	adds	r7, #220	; 0xdc
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd90      	pop	{r4, r7, pc}
 800d4ec:	08005d41 	.word	0x08005d41
 800d4f0:	08005d23 	.word	0x08005d23

0800d4f4 <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b092      	sub	sp, #72	; 0x48
 800d4f8:	af02      	add	r7, sp, #8
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	6039      	str	r1, [r7, #0]
 800d4fe:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 800d504:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d506:	f7ff f86c 	bl	800c5e2 <rdwr10_get_blocksize>
 800d50a:	4603      	mov	r3, r0
 800d50c:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800d50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d510:	330f      	adds	r3, #15
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff f83f 	bl	800c596 <rdwr10_get_lba>
 800d518:	4601      	mov	r1, r0
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d51e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d520:	fbb2 f3f3 	udiv	r3, r2, r3
 800d524:	440b      	add	r3, r1
 800d526:	637b      	str	r3, [r7, #52]	; 0x34

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800d528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d52a:	689a      	ldr	r2, [r3, #8]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d536:	627a      	str	r2, [r7, #36]	; 0x24
 800d538:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800d53a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	4293      	cmp	r3, r2
 800d540:	bf28      	it	cs
 800d542:	4613      	movcs	r3, r2
 800d544:	633b      	str	r3, [r7, #48]	; 0x30

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d54c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d550:	fb01 f202 	mul.w	r2, r1, r2
 800d554:	1a9b      	subs	r3, r3, r2
 800d556:	62fb      	str	r3, [r7, #44]	; 0x2c
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 800d558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d55a:	7b58      	ldrb	r0, [r3, #13]
 800d55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	4b2c      	ldr	r3, [pc, #176]	; (800d614 <proc_read10_cmd+0x120>)
 800d562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d564:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d566:	f7f8 fb02 	bl	8005b6e <tud_msc_read10_cb>
 800d56a:	6338      	str	r0, [r7, #48]	; 0x30

  if ( nbytes < 0 )
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	2b00      	cmp	r3, #0
 800d570:	da0b      	bge.n	800d58a <proc_read10_cmd+0x96>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG(MSC_DEBUG, "  tud_msc_read10_cb() return -1\r\n");

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 800d572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d574:	7b5b      	ldrb	r3, [r3, #13]
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff f8d0 	bl	800c71c <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800d57c:	79fb      	ldrb	r3, [r7, #7]
 800d57e:	2201      	movs	r2, #1
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe ffaf 	bl	800c4e6 <fail_scsi_op>
 800d588:	e040      	b.n	800d60c <proc_read10_cmd+0x118>
  }
  else if ( nbytes == 0 )
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d124      	bne.n	800d5da <proc_read10_cmd+0xe6>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800d596:	79fb      	ldrb	r3, [r7, #7]
 800d598:	77fb      	strb	r3, [r7, #31]
 800d59a:	4613      	mov	r3, r2
 800d59c:	77bb      	strb	r3, [r7, #30]
 800d59e:	2300      	movs	r3, #0
 800d5a0:	61bb      	str	r3, [r7, #24]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	75fb      	strb	r3, [r7, #23]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	75bb      	strb	r3, [r7, #22]
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800d5aa:	f107 0308 	add.w	r3, r7, #8
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	605a      	str	r2, [r3, #4]
 800d5b4:	609a      	str	r2, [r3, #8]
 800d5b6:	7ffb      	ldrb	r3, [r7, #31]
 800d5b8:	723b      	strb	r3, [r7, #8]
 800d5ba:	2307      	movs	r3, #7
 800d5bc:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 800d5be:	7fbb      	ldrb	r3, [r7, #30]
 800d5c0:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800d5c6:	7dfb      	ldrb	r3, [r7, #23]
 800d5c8:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 800d5ca:	7dba      	ldrb	r2, [r7, #22]
 800d5cc:	f107 0308 	add.w	r3, r7, #8
 800d5d0:	4611      	mov	r1, r2
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 fee4 	bl	800e3a0 <dcd_event_handler>
}
 800d5d8:	e018      	b.n	800d60c <proc_read10_cmd+0x118>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	79f8      	ldrb	r0, [r7, #7]
 800d5e6:	4a0b      	ldr	r2, [pc, #44]	; (800d614 <proc_read10_cmd+0x120>)
 800d5e8:	f001 f9d0 	bl	800e98c <usbd_edpt_xfer>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	f083 0301 	eor.w	r3, r3, #1
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d009      	beq.n	800d60c <proc_read10_cmd+0x118>
 800d5f8:	4b07      	ldr	r3, [pc, #28]	; (800d618 <proc_read10_cmd+0x124>)
 800d5fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0301 	and.w	r3, r3, #1
 800d604:	2b00      	cmp	r3, #0
 800d606:	d000      	beq.n	800d60a <proc_read10_cmd+0x116>
 800d608:	be00      	bkpt	0x0000
 800d60a:	bf00      	nop
  }
}
 800d60c:	3740      	adds	r7, #64	; 0x40
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	24000610 	.word	0x24000610
 800d618:	e000edf0 	.word	0xe000edf0

0800d61c <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b088      	sub	sp, #32
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	6039      	str	r1, [r7, #0]
 800d626:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 800d62c:	2301      	movs	r3, #1
 800d62e:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 800d630:	4b23      	ldr	r3, [pc, #140]	; (800d6c0 <proc_write10_cmd+0xa4>)
 800d632:	2b00      	cmp	r3, #0
 800d634:	d006      	beq.n	800d644 <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	7b5b      	ldrb	r3, [r3, #13]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7f8 fb80 	bl	8005d40 <tud_msc_is_writable_cb>
 800d640:	4603      	mov	r3, r0
 800d642:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 800d644:	7ffb      	ldrb	r3, [r7, #31]
 800d646:	f083 0301 	eor.w	r3, r3, #1
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00d      	beq.n	800d66c <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	7b58      	ldrb	r0, [r3, #13]
 800d654:	2300      	movs	r3, #0
 800d656:	2227      	movs	r2, #39	; 0x27
 800d658:	2107      	movs	r1, #7
 800d65a:	f7ff f83b 	bl	800c6d4 <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	2201      	movs	r2, #1
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	4618      	mov	r0, r3
 800d666:	f7fe ff3e 	bl	800c4e6 <fail_scsi_op>
    return;
 800d66a:	e026      	b.n	800d6ba <proc_write10_cmd+0x9e>
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	689a      	ldr	r2, [r3, #8]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d67a:	60fa      	str	r2, [r7, #12]
 800d67c:	60bb      	str	r3, [r7, #8]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	4293      	cmp	r3, r2
 800d684:	bf28      	it	cs
 800d686:	4613      	movcs	r3, r2
 800d688:	82fb      	strh	r3, [r7, #22]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800d690:	8afb      	ldrh	r3, [r7, #22]
 800d692:	79f8      	ldrb	r0, [r7, #7]
 800d694:	4a0b      	ldr	r2, [pc, #44]	; (800d6c4 <proc_write10_cmd+0xa8>)
 800d696:	f001 f979 	bl	800e98c <usbd_edpt_xfer>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f083 0301 	eor.w	r3, r3, #1
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d009      	beq.n	800d6ba <proc_write10_cmd+0x9e>
 800d6a6:	4b08      	ldr	r3, [pc, #32]	; (800d6c8 <proc_write10_cmd+0xac>)
 800d6a8:	613b      	str	r3, [r7, #16]
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d000      	beq.n	800d6b8 <proc_write10_cmd+0x9c>
 800d6b6:	be00      	bkpt	0x0000
 800d6b8:	bf00      	nop
}
 800d6ba:	3720      	adds	r7, #32
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	08005d41 	.word	0x08005d41
 800d6c4:	24000610 	.word	0x24000610
 800d6c8:	e000edf0 	.word	0xe000edf0

0800d6cc <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b092      	sub	sp, #72	; 0x48
 800d6d0:	af02      	add	r7, sp, #8
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
 800d6d8:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 800d6de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d6e0:	f7fe ff7f 	bl	800c5e2 <rdwr10_get_blocksize>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800d6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ea:	330f      	adds	r3, #15
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fe ff52 	bl	800c596 <rdwr10_get_lba>
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6fe:	440b      	add	r3, r1
 800d700:	637b      	str	r3, [r7, #52]	; 0x34

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d706:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d708:	fbb3 f1f2 	udiv	r1, r3, r2
 800d70c:	fb01 f202 	mul.w	r2, r1, r2
 800d710:	1a9b      	subs	r3, r3, r2
 800d712:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 800d714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d716:	7b58      	ldrb	r0, [r3, #13]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4b3c      	ldr	r3, [pc, #240]	; (800d810 <proc_write10_new_data+0x144>)
 800d71e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d720:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d722:	f7f8 fa3f 	bl	8005ba4 <tud_msc_write10_cb>
 800d726:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ( nbytes < 0 )
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	da11      	bge.n	800d752 <proc_write10_new_data+0x86>
  {
    // negative means error -> failed this scsi op
    TU_LOG(MSC_DEBUG, "  tud_msc_write10_cb() return -1\r\n");

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	441a      	add	r2, r3
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	639a      	str	r2, [r3, #56]	; 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 800d73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d73c:	7b5b      	ldrb	r3, [r3, #13]
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fe ffec 	bl	800c71c <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800d744:	7bfb      	ldrb	r3, [r7, #15]
 800d746:	2201      	movs	r2, #1
 800d748:	68b9      	ldr	r1, [r7, #8]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fecb 	bl	800c4e6 <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 800d750:	e059      	b.n	800d806 <proc_write10_new_data+0x13a>
    if ( (uint32_t) nbytes < xferred_bytes )
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	429a      	cmp	r2, r3
 800d758:	d93f      	bls.n	800d7da <proc_write10_new_data+0x10e>
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 800d75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	62bb      	str	r3, [r7, #40]	; 0x28
      if ( nbytes > 0 )
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	2b00      	cmp	r3, #0
 800d766:	dd0e      	ble.n	800d786 <proc_write10_new_data+0xba>
        p_msc->xferred_len += (uint16_t) nbytes;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d76e:	b292      	uxth	r2, r2
 800d770:	441a      	add	r2, r3
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	639a      	str	r2, [r3, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 800d776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d778:	4a25      	ldr	r2, [pc, #148]	; (800d810 <proc_write10_new_data+0x144>)
 800d77a:	4413      	add	r3, r2
 800d77c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d77e:	4619      	mov	r1, r3
 800d780:	4823      	ldr	r0, [pc, #140]	; (800d810 <proc_write10_new_data+0x144>)
 800d782:	f002 fdc4 	bl	801030e <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d792:	4613      	mov	r3, r2
 800d794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	623b      	str	r3, [r7, #32]
 800d79c:	2300      	movs	r3, #0
 800d79e:	77fb      	strb	r3, [r7, #31]
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800d7a4:	f107 0310 	add.w	r3, r7, #16
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	605a      	str	r2, [r3, #4]
 800d7ae:	609a      	str	r2, [r3, #8]
 800d7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b4:	743b      	strb	r3, [r7, #16]
 800d7b6:	2307      	movs	r3, #7
 800d7b8:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800d7ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7be:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800d7c0:	6a3b      	ldr	r3, [r7, #32]
 800d7c2:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800d7c4:	7ffb      	ldrb	r3, [r7, #31]
 800d7c6:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800d7c8:	7fba      	ldrb	r2, [r7, #30]
 800d7ca:	f107 0310 	add.w	r3, r7, #16
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f000 fde5 	bl	800e3a0 <dcd_event_handler>
}
 800d7d6:	bf00      	nop
}
 800d7d8:	e015      	b.n	800d806 <proc_write10_new_data+0x13a>
      p_msc->xferred_len += xferred_bytes;
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	441a      	add	r2, r3
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	639a      	str	r2, [r3, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d304      	bcc.n	800d7fc <proc_write10_new_data+0x130>
        p_msc->stage = MSC_STAGE_STATUS;
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	2202      	movs	r2, #2
 800d7f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800d7fa:	e004      	b.n	800d806 <proc_write10_new_data+0x13a>
        proc_write10_cmd(rhport, p_msc);
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
 800d7fe:	68b9      	ldr	r1, [r7, #8]
 800d800:	4618      	mov	r0, r3
 800d802:	f7ff ff0b 	bl	800d61c <proc_write10_cmd>
}
 800d806:	bf00      	nop
 800d808:	3740      	adds	r7, #64	; 0x40
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	24000610 	.word	0x24000610

0800d814 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	4611      	mov	r1, r2
 800d820:	461a      	mov	r2, r3
 800d822:	460b      	mov	r3, r1
 800d824:	80fb      	strh	r3, [r7, #6]
 800d826:	4613      	mov	r3, r2
 800d828:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800d82a:	88fb      	ldrh	r3, [r7, #6]
 800d82c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d830:	d901      	bls.n	800d836 <tu_fifo_config+0x22>
 800d832:	2300      	movs	r3, #0
 800d834:	e01b      	b.n	800d86e <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	88fa      	ldrh	r2, [r7, #6]
 800d840:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800d842:	88bb      	ldrh	r3, [r7, #4]
 800d844:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d848:	b299      	uxth	r1, r3
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	88d3      	ldrh	r3, [r2, #6]
 800d84e:	f361 030e 	bfi	r3, r1, #0, #15
 800d852:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	79d3      	ldrb	r3, [r2, #7]
 800d858:	7e39      	ldrb	r1, [r7, #24]
 800d85a:	f361 13c7 	bfi	r3, r1, #7, #1
 800d85e:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2200      	movs	r2, #0
 800d864:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800d86c:	2301      	movs	r3, #1
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3714      	adds	r7, #20
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr

0800d87a <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b08a      	sub	sp, #40	; 0x28
 800d87e:	af00      	add	r7, sp, #0
 800d880:	60f8      	str	r0, [r7, #12]
 800d882:	60b9      	str	r1, [r7, #8]
 800d884:	4613      	mov	r3, r2
 800d886:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 800d88c:	88fb      	ldrh	r3, [r7, #6]
 800d88e:	089b      	lsrs	r3, r3, #2
 800d890:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800d892:	e00b      	b.n	800d8ac <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	61ba      	str	r2, [r7, #24]
 800d89c:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	697a      	ldr	r2, [r7, #20]
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	bf00      	nop
    ff_buf += 4;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 800d8ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8ae:	1e5a      	subs	r2, r3, #1
 800d8b0:	84fa      	strh	r2, [r7, #38]	; 0x26
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1ee      	bne.n	800d894 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	f003 0303 	and.w	r3, r3, #3
 800d8be:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800d8c0:	7ffb      	ldrb	r3, [r7, #31]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d009      	beq.n	800d8da <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800d8cc:	7ffa      	ldrb	r2, [r7, #31]
 800d8ce:	f107 0310 	add.w	r3, r7, #16
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f002 fd61 	bl	801039c <memcpy>
  }
}
 800d8da:	bf00      	nop
 800d8dc:	3728      	adds	r7, #40	; 0x28
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b08a      	sub	sp, #40	; 0x28
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	60f8      	str	r0, [r7, #12]
 800d8ea:	60b9      	str	r1, [r7, #8]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 800d8f4:	88fb      	ldrh	r3, [r7, #6]
 800d8f6:	089b      	lsrs	r3, r3, #2
 800d8f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800d8fa:	e008      	b.n	800d90e <_ff_pull_const_addr+0x2c>
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 800d904:	6a3b      	ldr	r3, [r7, #32]
 800d906:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	3304      	adds	r3, #4
 800d90c:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800d90e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d910:	1e5a      	subs	r2, r3, #1
 800d912:	84fa      	strh	r2, [r7, #38]	; 0x26
 800d914:	2b00      	cmp	r3, #0
 800d916:	d1f1      	bne.n	800d8fc <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 800d918:	88fb      	ldrh	r3, [r7, #6]
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	f003 0303 	and.w	r3, r3, #3
 800d920:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800d922:	7ffb      	ldrb	r3, [r7, #31]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00b      	beq.n	800d940 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 800d928:	2300      	movs	r3, #0
 800d92a:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 800d92c:	7ffa      	ldrb	r2, [r7, #31]
 800d92e:	f107 0314 	add.w	r3, r7, #20
 800d932:	68b9      	ldr	r1, [r7, #8]
 800d934:	4618      	mov	r0, r3
 800d936:	f002 fd31 	bl	801039c <memcpy>

    *reg_tx = tmp32;
 800d93a:	697a      	ldr	r2, [r7, #20]
 800d93c:	6a3b      	ldr	r3, [r7, #32]
 800d93e:	601a      	str	r2, [r3, #0]
  }
}
 800d940:	bf00      	nop
 800d942:	3728      	adds	r7, #40	; 0x28
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	4613      	mov	r3, r2
 800d954:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	88fa      	ldrh	r2, [r7, #6]
 800d95c:	68f9      	ldr	r1, [r7, #12]
 800d95e:	88c9      	ldrh	r1, [r1, #6]
 800d960:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800d964:	b289      	uxth	r1, r1
 800d966:	fb01 f202 	mul.w	r2, r1, r2
 800d96a:	1898      	adds	r0, r3, r2
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	88db      	ldrh	r3, [r3, #6]
 800d970:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d974:	b29b      	uxth	r3, r3
 800d976:	461a      	mov	r2, r3
 800d978:	68b9      	ldr	r1, [r7, #8]
 800d97a:	f002 fd0f 	bl	801039c <memcpy>
}
 800d97e:	bf00      	nop
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b08e      	sub	sp, #56	; 0x38
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	60f8      	str	r0, [r7, #12]
 800d98e:	60b9      	str	r1, [r7, #8]
 800d990:	4611      	mov	r1, r2
 800d992:	461a      	mov	r2, r3
 800d994:	460b      	mov	r3, r1
 800d996:	80fb      	strh	r3, [r7, #6]
 800d998:	4613      	mov	r3, r2
 800d99a:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	889a      	ldrh	r2, [r3, #4]
 800d9a0:	88bb      	ldrh	r3, [r7, #4]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 800d9a6:	88fa      	ldrh	r2, [r7, #6]
 800d9a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9aa:	1ad3      	subs	r3, r2, r3
 800d9ac:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	88db      	ldrh	r3, [r3, #6]
 800d9b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9bc:	fb13 f302 	smulbb	r3, r3, r2
 800d9c0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	88db      	ldrh	r3, [r3, #6]
 800d9c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d0:	fb13 f302 	smulbb	r3, r3, r2
 800d9d4:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	88ba      	ldrh	r2, [r7, #4]
 800d9dc:	68f9      	ldr	r1, [r7, #12]
 800d9de:	88c9      	ldrh	r1, [r1, #6]
 800d9e0:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800d9e4:	b289      	uxth	r1, r1
 800d9e6:	fb01 f202 	mul.w	r2, r1, r2
 800d9ea:	4413      	add	r3, r2
 800d9ec:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800d9ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <_ff_push_n+0x76>
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d022      	beq.n	800da40 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 800d9fa:	e09e      	b.n	800db3a <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800d9fc:	88fa      	ldrh	r2, [r7, #6]
 800d9fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da00:	429a      	cmp	r2, r3
 800da02:	d80d      	bhi.n	800da20 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800da04:	88fb      	ldrh	r3, [r7, #6]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	88d2      	ldrh	r2, [r2, #6]
 800da0a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800da0e:	b292      	uxth	r2, r2
 800da10:	fb02 f303 	mul.w	r3, r2, r3
 800da14:	461a      	mov	r2, r3
 800da16:	68b9      	ldr	r1, [r7, #8]
 800da18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da1a:	f002 fcbf 	bl	801039c <memcpy>
      break;
 800da1e:	e08c      	b.n	800db3a <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 800da20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da22:	461a      	mov	r2, r3
 800da24:	68b9      	ldr	r1, [r7, #8]
 800da26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da28:	f002 fcb8 	bl	801039c <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	4413      	add	r3, r2
 800da36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da38:	4619      	mov	r1, r3
 800da3a:	f002 fcaf 	bl	801039c <memcpy>
      break;
 800da3e:	e07c      	b.n	800db3a <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800da40:	88fa      	ldrh	r2, [r7, #6]
 800da42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da44:	429a      	cmp	r2, r3
 800da46:	d80f      	bhi.n	800da68 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	88db      	ldrh	r3, [r3, #6]
 800da4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800da50:	b29b      	uxth	r3, r3
 800da52:	461a      	mov	r2, r3
 800da54:	88fb      	ldrh	r3, [r7, #6]
 800da56:	fb13 f302 	smulbb	r3, r3, r2
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	461a      	mov	r2, r3
 800da5e:	68b9      	ldr	r1, [r7, #8]
 800da60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da62:	f7ff ff0a 	bl	800d87a <_ff_push_const_addr>
      break;
 800da66:	e067      	b.n	800db38 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800da68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da6a:	f023 0303 	bic.w	r3, r3, #3
 800da6e:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800da70:	8c3b      	ldrh	r3, [r7, #32]
 800da72:	461a      	mov	r2, r3
 800da74:	68b9      	ldr	r1, [r7, #8]
 800da76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da78:	f7ff feff 	bl	800d87a <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 800da7c:	8c3b      	ldrh	r3, [r7, #32]
 800da7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da80:	4413      	add	r3, r2
 800da82:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 800da84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da86:	b2db      	uxtb	r3, r3
 800da88:	f003 0303 	and.w	r3, r3, #3
 800da8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 800da90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da94:	2b00      	cmp	r3, #0
 800da96:	d043      	beq.n	800db20 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800da9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	f1c3 0304 	rsb	r3, r3, #4
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800daaa:	837b      	strh	r3, [r7, #26]
 800daac:	4613      	mov	r3, r2
 800daae:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800dab0:	8b7a      	ldrh	r2, [r7, #26]
 800dab2:	8b3b      	ldrh	r3, [r7, #24]
 800dab4:	4293      	cmp	r3, r2
 800dab6:	bf28      	it	cs
 800dab8:	4613      	movcs	r3, r2
 800daba:	b29b      	uxth	r3, r3
 800dabc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 800dac0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 800dad2:	f107 0314 	add.w	r3, r7, #20
 800dad6:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800dad8:	e007      	b.n	800daea <_ff_push_n+0x164>
 800dada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dadc:	1c53      	adds	r3, r2, #1
 800dade:	62bb      	str	r3, [r7, #40]	; 0x28
 800dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae2:	1c59      	adds	r1, r3, #1
 800dae4:	6339      	str	r1, [r7, #48]	; 0x30
 800dae6:	7812      	ldrb	r2, [r2, #0]
 800dae8:	701a      	strb	r2, [r3, #0]
 800daea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daee:	1e5a      	subs	r2, r3, #1
 800daf0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1f0      	bne.n	800dada <_ff_push_n+0x154>
          ff_buf = f->buffer;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 800dafe:	e007      	b.n	800db10 <_ff_push_n+0x18a>
 800db00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db02:	1c53      	adds	r3, r2, #1
 800db04:	62bb      	str	r3, [r7, #40]	; 0x28
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	1c59      	adds	r1, r3, #1
 800db0a:	6339      	str	r1, [r7, #48]	; 0x30
 800db0c:	7812      	ldrb	r2, [r2, #0]
 800db0e:	701a      	strb	r2, [r3, #0]
 800db10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800db14:	1e5a      	subs	r2, r3, #1
 800db16:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1f0      	bne.n	800db00 <_ff_push_n+0x17a>
 800db1e:	e002      	b.n	800db26 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800db26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d005      	beq.n	800db38 <_ff_push_n+0x1b2>
 800db2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800db2e:	461a      	mov	r2, r3
 800db30:	68b9      	ldr	r1, [r7, #8]
 800db32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db34:	f7ff fea1 	bl	800d87a <_ff_push_const_addr>
      break;
 800db38:	bf00      	nop
}
 800db3a:	bf00      	nop
 800db3c:	3738      	adds	r7, #56	; 0x38
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <_ff_pull_n>:
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
}

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800db42:	b580      	push	{r7, lr}
 800db44:	b08e      	sub	sp, #56	; 0x38
 800db46:	af00      	add	r7, sp, #0
 800db48:	60f8      	str	r0, [r7, #12]
 800db4a:	60b9      	str	r1, [r7, #8]
 800db4c:	4611      	mov	r1, r2
 800db4e:	461a      	mov	r2, r3
 800db50:	460b      	mov	r3, r1
 800db52:	80fb      	strh	r3, [r7, #6]
 800db54:	4613      	mov	r3, r2
 800db56:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	889a      	ldrh	r2, [r3, #4]
 800db5c:	88bb      	ldrh	r3, [r7, #4]
 800db5e:	1ad3      	subs	r3, r2, r3
 800db60:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800db62:	88fa      	ldrh	r2, [r7, #6]
 800db64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	88db      	ldrh	r3, [r3, #6]
 800db6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800db72:	b29b      	uxth	r3, r3
 800db74:	461a      	mov	r2, r3
 800db76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db78:	fb13 f302 	smulbb	r3, r3, r2
 800db7c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	88db      	ldrh	r3, [r3, #6]
 800db82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800db86:	b29b      	uxth	r3, r3
 800db88:	461a      	mov	r2, r3
 800db8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db8c:	fb13 f302 	smulbb	r3, r3, r2
 800db90:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	88ba      	ldrh	r2, [r7, #4]
 800db98:	68f9      	ldr	r1, [r7, #12]
 800db9a:	88c9      	ldrh	r1, [r1, #6]
 800db9c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800dba0:	b289      	uxth	r1, r1
 800dba2:	fb01 f202 	mul.w	r2, r1, r2
 800dba6:	4413      	add	r3, r2
 800dba8:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800dbaa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d002      	beq.n	800dbb8 <_ff_pull_n+0x76>
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d022      	beq.n	800dbfc <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 800dbb6:	e0a0      	b.n	800dcfa <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800dbb8:	88fa      	ldrh	r2, [r7, #6]
 800dbba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d80d      	bhi.n	800dbdc <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800dbc0:	88fb      	ldrh	r3, [r7, #6]
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	88d2      	ldrh	r2, [r2, #6]
 800dbc6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dbca:	b292      	uxth	r2, r2
 800dbcc:	fb02 f303 	mul.w	r3, r2, r3
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dbd4:	68b8      	ldr	r0, [r7, #8]
 800dbd6:	f002 fbe1 	bl	801039c <memcpy>
    break;
 800dbda:	e08e      	b.n	800dcfa <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800dbdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbde:	461a      	mov	r2, r3
 800dbe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dbe2:	68b8      	ldr	r0, [r7, #8]
 800dbe4:	f002 fbda 	bl	801039c <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800dbe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	18d0      	adds	r0, r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	f002 fbd1 	bl	801039c <memcpy>
    break;
 800dbfa:	e07e      	b.n	800dcfa <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800dbfc:	88fa      	ldrh	r2, [r7, #6]
 800dbfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d80f      	bhi.n	800dc24 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	88db      	ldrh	r3, [r3, #6]
 800dc08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	461a      	mov	r2, r3
 800dc10:	88fb      	ldrh	r3, [r7, #6]
 800dc12:	fb13 f302 	smulbb	r3, r3, r2
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	461a      	mov	r2, r3
 800dc1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc1c:	68b8      	ldr	r0, [r7, #8]
 800dc1e:	f7ff fe60 	bl	800d8e2 <_ff_pull_const_addr>
    break;
 800dc22:	e069      	b.n	800dcf8 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800dc24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc26:	f023 0303 	bic.w	r3, r3, #3
 800dc2a:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 800dc2c:	8c3b      	ldrh	r3, [r7, #32]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc32:	68b8      	ldr	r0, [r7, #8]
 800dc34:	f7ff fe55 	bl	800d8e2 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800dc38:	8c3b      	ldrh	r3, [r7, #32]
 800dc3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc3c:	4413      	add	r3, r2
 800dc3e:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 800dc40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	f003 0303 	and.w	r3, r3, #3
 800dc48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 800dc4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d045      	beq.n	800dce0 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800dc58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	f1c3 0304 	rsb	r3, r3, #4
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dc66:	837b      	strh	r3, [r7, #26]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	833b      	strh	r3, [r7, #24]
 800dc6c:	8b7a      	ldrh	r2, [r7, #26]
 800dc6e:	8b3b      	ldrh	r3, [r7, #24]
 800dc70:	4293      	cmp	r3, r2
 800dc72:	bf28      	it	cs
 800dc74:	4613      	movcs	r3, r2
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 800dc7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800dc8c:	f107 0314 	add.w	r3, r7, #20
 800dc90:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 800dc92:	e007      	b.n	800dca4 <_ff_pull_n+0x162>
 800dc94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc96:	1c53      	adds	r3, r2, #1
 800dc98:	633b      	str	r3, [r7, #48]	; 0x30
 800dc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9c:	1c59      	adds	r1, r3, #1
 800dc9e:	62b9      	str	r1, [r7, #40]	; 0x28
 800dca0:	7812      	ldrb	r2, [r2, #0]
 800dca2:	701a      	strb	r2, [r3, #0]
 800dca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dca8:	1e5a      	subs	r2, r3, #1
 800dcaa:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1f0      	bne.n	800dc94 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800dcb8:	e007      	b.n	800dcca <_ff_pull_n+0x188>
 800dcba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcbc:	1c53      	adds	r3, r2, #1
 800dcbe:	633b      	str	r3, [r7, #48]	; 0x30
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	1c59      	adds	r1, r3, #1
 800dcc4:	62b9      	str	r1, [r7, #40]	; 0x28
 800dcc6:	7812      	ldrb	r2, [r2, #0]
 800dcc8:	701a      	strb	r2, [r3, #0]
 800dcca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dcce:	1e5a      	subs	r2, r3, #1
 800dcd0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d1f0      	bne.n	800dcba <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800dcd8:	697a      	ldr	r2, [r7, #20]
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	e002      	b.n	800dce6 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 800dce6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d005      	beq.n	800dcf8 <_ff_pull_n+0x1b6>
 800dcec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dcee:	461a      	mov	r2, r3
 800dcf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcf2:	68b8      	ldr	r0, [r7, #8]
 800dcf4:	f7ff fdf5 	bl	800d8e2 <_ff_pull_const_addr>
    break;
 800dcf8:	bf00      	nop
  }
}
 800dcfa:	bf00      	nop
 800dcfc:	3738      	adds	r7, #56	; 0x38
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 800dd02:	b480      	push	{r7}
 800dd04:	b085      	sub	sp, #20
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	4603      	mov	r3, r0
 800dd0a:	80fb      	strh	r3, [r7, #6]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	80bb      	strh	r3, [r7, #4]
 800dd10:	4613      	mov	r3, r2
 800dd12:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800dd14:	88ba      	ldrh	r2, [r7, #4]
 800dd16:	887b      	ldrh	r3, [r7, #2]
 800dd18:	4413      	add	r3, r2
 800dd1a:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800dd1c:	88ba      	ldrh	r2, [r7, #4]
 800dd1e:	89fb      	ldrh	r3, [r7, #14]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d804      	bhi.n	800dd2e <advance_index+0x2c>
 800dd24:	89fa      	ldrh	r2, [r7, #14]
 800dd26:	88fb      	ldrh	r3, [r7, #6]
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	db08      	blt.n	800dd40 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	005b      	lsls	r3, r3, #1
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	425b      	negs	r3, r3
 800dd36:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800dd38:	89fa      	ldrh	r2, [r7, #14]
 800dd3a:	89bb      	ldrh	r3, [r7, #12]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800dd40:	89fb      	ldrh	r3, [r7, #14]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b08c      	sub	sp, #48	; 0x30
 800dd52:	af02      	add	r7, sp, #8
 800dd54:	60f8      	str	r0, [r7, #12]
 800dd56:	60b9      	str	r1, [r7, #8]
 800dd58:	4611      	mov	r1, r2
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	80fb      	strh	r3, [r7, #6]
 800dd60:	4613      	mov	r3, r2
 800dd62:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	889b      	ldrh	r3, [r3, #4]
 800dd68:	847b      	strh	r3, [r7, #34]	; 0x22
 800dd6a:	88bb      	ldrh	r3, [r7, #4]
 800dd6c:	843b      	strh	r3, [r7, #32]
 800dd6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd70:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800dd72:	8c3a      	ldrh	r2, [r7, #32]
 800dd74:	8bfb      	ldrh	r3, [r7, #30]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d304      	bcc.n	800dd84 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800dd7a:	8c3a      	ldrh	r2, [r7, #32]
 800dd7c:	8bfb      	ldrh	r3, [r7, #30]
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	e008      	b.n	800dd96 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800dd84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd86:	005b      	lsls	r3, r3, #1
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	8c39      	ldrh	r1, [r7, #32]
 800dd8c:	8bfb      	ldrh	r3, [r7, #30]
 800dd8e:	1acb      	subs	r3, r1, r3
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	4413      	add	r3, r2
 800dd94:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800dd96:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 800dd98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d101      	bne.n	800dda2 <_tu_fifo_peek_n+0x54>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e041      	b.n	800de26 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	889b      	ldrh	r3, [r3, #4]
 800dda6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d91b      	bls.n	800dde4 <_tu_fifo_peek_n+0x96>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	61bb      	str	r3, [r7, #24]
 800ddb0:	88bb      	ldrh	r3, [r7, #4]
 800ddb2:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	889b      	ldrh	r3, [r3, #4]
 800ddb8:	8afa      	ldrh	r2, [r7, #22]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d305      	bcc.n	800ddca <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	889b      	ldrh	r3, [r3, #4]
 800ddc2:	8afa      	ldrh	r2, [r7, #22]
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	82bb      	strh	r3, [r7, #20]
 800ddc8:	e004      	b.n	800ddd4 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	889a      	ldrh	r2, [r3, #4]
 800ddce:	8afb      	ldrh	r3, [r7, #22]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	8aba      	ldrh	r2, [r7, #20]
 800ddd8:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800ddda:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800dddc:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	889b      	ldrh	r3, [r3, #4]
 800dde2:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 800dde4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dde6:	88fb      	ldrh	r3, [r7, #6]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d201      	bcs.n	800ddf0 <_tu_fifo_peek_n+0xa2>
 800ddec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ddee:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	889b      	ldrh	r3, [r3, #4]
 800ddf4:	827b      	strh	r3, [r7, #18]
 800ddf6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ddf8:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800ddfa:	e003      	b.n	800de04 <_tu_fifo_peek_n+0xb6>
 800ddfc:	8a3a      	ldrh	r2, [r7, #16]
 800ddfe:	8a7b      	ldrh	r3, [r7, #18]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	823b      	strh	r3, [r7, #16]
 800de04:	8a7a      	ldrh	r2, [r7, #18]
 800de06:	8a3b      	ldrh	r3, [r7, #16]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d9f7      	bls.n	800ddfc <_tu_fifo_peek_n+0xae>
  return idx;
 800de0c:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800de0e:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800de10:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800de12:	88fa      	ldrh	r2, [r7, #6]
 800de14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	460b      	mov	r3, r1
 800de1c:	68b9      	ldr	r1, [r7, #8]
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f7ff fe8f 	bl	800db42 <_ff_pull_n>

  return n;
 800de24:	88fb      	ldrh	r3, [r7, #6]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3728      	adds	r7, #40	; 0x28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b092      	sub	sp, #72	; 0x48
 800de32:	af02      	add	r7, sp, #8
 800de34:	60f8      	str	r0, [r7, #12]
 800de36:	60b9      	str	r1, [r7, #8]
 800de38:	4611      	mov	r1, r2
 800de3a:	461a      	mov	r2, r3
 800de3c:	460b      	mov	r3, r1
 800de3e:	80fb      	strh	r3, [r7, #6]
 800de40:	4613      	mov	r3, r2
 800de42:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 800de44:	88fb      	ldrh	r3, [r7, #6]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <_tu_fifo_write_n+0x20>
 800de4a:	2300      	movs	r3, #0
 800de4c:	e0bc      	b.n	800dfc8 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	891b      	ldrh	r3, [r3, #8]
 800de52:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	895b      	ldrh	r3, [r3, #10]
 800de58:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	79db      	ldrb	r3, [r3, #7]
 800de62:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800de66:	b2db      	uxtb	r3, r3
 800de68:	f083 0301 	eor.w	r3, r3, #1
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d036      	beq.n	800dee0 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	889b      	ldrh	r3, [r3, #4]
 800de76:	857b      	strh	r3, [r7, #42]	; 0x2a
 800de78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de7a:	853b      	strh	r3, [r7, #40]	; 0x28
 800de7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800de80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de82:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de86:	847b      	strh	r3, [r7, #34]	; 0x22
 800de88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de8a:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800de8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de8e:	8c3b      	ldrh	r3, [r7, #32]
 800de90:	429a      	cmp	r2, r3
 800de92:	d304      	bcc.n	800de9e <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 800de94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de96:	8c3b      	ldrh	r3, [r7, #32]
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	e008      	b.n	800deb0 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800de9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dea0:	005b      	lsls	r3, r3, #1
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800dea6:	8c3b      	ldrh	r3, [r7, #32]
 800dea8:	1acb      	subs	r3, r1, r3
 800deaa:	b29b      	uxth	r3, r3
 800deac:	4413      	add	r3, r2
 800deae:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800deb0:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 800deb2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800deb4:	8bfb      	ldrh	r3, [r7, #30]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d904      	bls.n	800dec4 <_tu_fifo_write_n+0x96>
 800deba:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800debc:	8bfb      	ldrh	r3, [r7, #30]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	e000      	b.n	800dec6 <_tu_fifo_write_n+0x98>
 800dec4:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800dec6:	867b      	strh	r3, [r7, #50]	; 0x32
 800dec8:	88fb      	ldrh	r3, [r7, #6]
 800deca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800decc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dece:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ded0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ded2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ded4:	4293      	cmp	r3, r2
 800ded6:	bf28      	it	cs
 800ded8:	4613      	movcs	r3, r2
 800deda:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800dedc:	80fb      	strh	r3, [r7, #6]
 800dede:	e04b      	b.n	800df78 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	889b      	ldrh	r3, [r3, #4]
 800dee4:	88fa      	ldrh	r2, [r7, #6]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d317      	bcc.n	800df1a <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 800deea:	797b      	ldrb	r3, [r7, #5]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10e      	bne.n	800df0e <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 800def0:	88fb      	ldrh	r3, [r7, #6]
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	8892      	ldrh	r2, [r2, #4]
 800def6:	1a9b      	subs	r3, r3, r2
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	88d2      	ldrh	r2, [r2, #6]
 800defc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800df00:	b292      	uxth	r2, r2
 800df02:	fb02 f303 	mul.w	r3, r2, r3
 800df06:	461a      	mov	r2, r3
 800df08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0a:	4413      	add	r3, r2
 800df0c:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	889b      	ldrh	r3, [r3, #4]
 800df12:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 800df14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800df16:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800df18:	e02e      	b.n	800df78 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	889b      	ldrh	r3, [r3, #4]
 800df1e:	83bb      	strh	r3, [r7, #28]
 800df20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df22:	837b      	strh	r3, [r7, #26]
 800df24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800df26:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 800df28:	8b7a      	ldrh	r2, [r7, #26]
 800df2a:	8b3b      	ldrh	r3, [r7, #24]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d304      	bcc.n	800df3a <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 800df30:	8b7a      	ldrh	r2, [r7, #26]
 800df32:	8b3b      	ldrh	r3, [r7, #24]
 800df34:	1ad3      	subs	r3, r2, r3
 800df36:	b29b      	uxth	r3, r3
 800df38:	e008      	b.n	800df4c <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800df3a:	8bbb      	ldrh	r3, [r7, #28]
 800df3c:	005b      	lsls	r3, r3, #1
 800df3e:	b29a      	uxth	r2, r3
 800df40:	8b79      	ldrh	r1, [r7, #26]
 800df42:	8b3b      	ldrh	r3, [r7, #24]
 800df44:	1acb      	subs	r3, r1, r3
 800df46:	b29b      	uxth	r3, r3
 800df48:	4413      	add	r3, r2
 800df4a:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800df4c:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 800df4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800df50:	88fb      	ldrh	r3, [r7, #6]
 800df52:	441a      	add	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	889b      	ldrh	r3, [r3, #4]
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	429a      	cmp	r2, r3
 800df5c:	db0c      	blt.n	800df78 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8898      	ldrh	r0, [r3, #4]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	889a      	ldrh	r2, [r3, #4]
 800df66:	88fb      	ldrh	r3, [r7, #6]
 800df68:	1ad3      	subs	r3, r2, r3
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800df6e:	4619      	mov	r1, r3
 800df70:	f7ff fec7 	bl	800dd02 <advance_index>
 800df74:	4603      	mov	r3, r0
 800df76:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800df78:	88fb      	ldrh	r3, [r7, #6]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d023      	beq.n	800dfc6 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	889b      	ldrh	r3, [r3, #4]
 800df82:	82fb      	strh	r3, [r7, #22]
 800df84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df86:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 800df88:	e003      	b.n	800df92 <_tu_fifo_write_n+0x164>
 800df8a:	8aba      	ldrh	r2, [r7, #20]
 800df8c:	8afb      	ldrh	r3, [r7, #22]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	82bb      	strh	r3, [r7, #20]
 800df92:	8afa      	ldrh	r2, [r7, #22]
 800df94:	8abb      	ldrh	r3, [r7, #20]
 800df96:	429a      	cmp	r2, r3
 800df98:	d9f7      	bls.n	800df8a <_tu_fifo_write_n+0x15c>
  return idx;
 800df9a:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800df9c:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 800df9e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800dfa0:	88fa      	ldrh	r2, [r7, #6]
 800dfa2:	797b      	ldrb	r3, [r7, #5]
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7ff fceb 	bl	800d986 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	889b      	ldrh	r3, [r3, #4]
 800dfb4:	88fa      	ldrh	r2, [r7, #6]
 800dfb6:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7ff fea2 	bl	800dd02 <advance_index>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 800dfc6:	88fb      	ldrh	r3, [r7, #6]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3740      	adds	r7, #64	; 0x40
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af02      	add	r7, sp, #8
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	4611      	mov	r1, r2
 800dfdc:	461a      	mov	r2, r3
 800dfde:	460b      	mov	r3, r1
 800dfe0:	80fb      	strh	r3, [r7, #6]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	891b      	ldrh	r3, [r3, #8]
 800dfea:	b298      	uxth	r0, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	895b      	ldrh	r3, [r3, #10]
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	88f9      	ldrh	r1, [r7, #6]
 800dff4:	797a      	ldrb	r2, [r7, #5]
 800dff6:	9201      	str	r2, [sp, #4]
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	4603      	mov	r3, r0
 800dffc:	460a      	mov	r2, r1
 800dffe:	68b9      	ldr	r1, [r7, #8]
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f7ff fea4 	bl	800dd4e <_tu_fifo_peek_n>
 800e006:	4603      	mov	r3, r0
 800e008:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	8898      	ldrh	r0, [r3, #4]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	895b      	ldrh	r3, [r3, #10]
 800e012:	b29b      	uxth	r3, r3
 800e014:	88fa      	ldrh	r2, [r7, #6]
 800e016:	4619      	mov	r1, r3
 800e018:	f7ff fe73 	bl	800dd02 <advance_index>
 800e01c:	4603      	mov	r3, r0
 800e01e:	461a      	mov	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 800e024:	88fb      	ldrh	r3, [r7, #6]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 800e02e:	b480      	push	{r7}
 800e030:	b087      	sub	sp, #28
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	8899      	ldrh	r1, [r3, #4]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	891b      	ldrh	r3, [r3, #8]
 800e03e:	b29a      	uxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	895b      	ldrh	r3, [r3, #10]
 800e044:	b29b      	uxth	r3, r3
 800e046:	8279      	strh	r1, [r7, #18]
 800e048:	823a      	strh	r2, [r7, #16]
 800e04a:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 800e04c:	8a3a      	ldrh	r2, [r7, #16]
 800e04e:	89fb      	ldrh	r3, [r7, #14]
 800e050:	429a      	cmp	r2, r3
 800e052:	d304      	bcc.n	800e05e <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800e054:	8a3a      	ldrh	r2, [r7, #16]
 800e056:	89fb      	ldrh	r3, [r7, #14]
 800e058:	1ad3      	subs	r3, r2, r3
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	e008      	b.n	800e070 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800e05e:	8a7b      	ldrh	r3, [r7, #18]
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	b29a      	uxth	r2, r3
 800e064:	8a39      	ldrh	r1, [r7, #16]
 800e066:	89fb      	ldrh	r3, [r7, #14]
 800e068:	1acb      	subs	r3, r1, r3
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	4413      	add	r3, r2
 800e06e:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	8892      	ldrh	r2, [r2, #4]
 800e074:	82fb      	strh	r3, [r7, #22]
 800e076:	4613      	mov	r3, r2
 800e078:	82bb      	strh	r3, [r7, #20]
 800e07a:	8afa      	ldrh	r2, [r7, #22]
 800e07c:	8abb      	ldrh	r3, [r7, #20]
 800e07e:	4293      	cmp	r3, r2
 800e080:	bf28      	it	cs
 800e082:	4613      	movcs	r3, r2
 800e084:	b29b      	uxth	r3, r3
}
 800e086:	4618      	mov	r0, r3
 800e088:	371c      	adds	r7, #28
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 800e092:	b480      	push	{r7}
 800e094:	b083      	sub	sp, #12
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	891b      	ldrh	r3, [r3, #8]
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	895b      	ldrh	r3, [r3, #10]
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	bf0c      	ite	eq
 800e0aa:	2301      	moveq	r3, #1
 800e0ac:	2300      	movne	r3, #0
 800e0ae:	b2db      	uxtb	r3, r3
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	8899      	ldrh	r1, [r3, #4]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	891b      	ldrh	r3, [r3, #8]
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	895b      	ldrh	r3, [r3, #10]
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	81f9      	strh	r1, [r7, #14]
 800e0d6:	81ba      	strh	r2, [r7, #12]
 800e0d8:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 800e0da:	89ba      	ldrh	r2, [r7, #12]
 800e0dc:	897b      	ldrh	r3, [r7, #10]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d304      	bcc.n	800e0ec <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800e0e2:	89ba      	ldrh	r2, [r7, #12]
 800e0e4:	897b      	ldrh	r3, [r7, #10]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	e008      	b.n	800e0fe <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800e0ec:	89fb      	ldrh	r3, [r7, #14]
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	89b9      	ldrh	r1, [r7, #12]
 800e0f4:	897b      	ldrh	r3, [r7, #10]
 800e0f6:	1acb      	subs	r3, r1, r3
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	4413      	add	r3, r2
 800e0fc:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	8892      	ldrh	r2, [r2, #4]
 800e102:	4293      	cmp	r3, r2
 800e104:	bf2c      	ite	cs
 800e106:	2301      	movcs	r3, #1
 800e108:	2300      	movcc	r3, #0
 800e10a:	b2db      	uxtb	r3, r3
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3714      	adds	r7, #20
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 800e118:	b480      	push	{r7}
 800e11a:	b087      	sub	sp, #28
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	8899      	ldrh	r1, [r3, #4]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	891b      	ldrh	r3, [r3, #8]
 800e128:	b29a      	uxth	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	895b      	ldrh	r3, [r3, #10]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	82f9      	strh	r1, [r7, #22]
 800e132:	82ba      	strh	r2, [r7, #20]
 800e134:	827b      	strh	r3, [r7, #18]
 800e136:	8afb      	ldrh	r3, [r7, #22]
 800e138:	823b      	strh	r3, [r7, #16]
 800e13a:	8abb      	ldrh	r3, [r7, #20]
 800e13c:	81fb      	strh	r3, [r7, #14]
 800e13e:	8a7b      	ldrh	r3, [r7, #18]
 800e140:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 800e142:	89fa      	ldrh	r2, [r7, #14]
 800e144:	89bb      	ldrh	r3, [r7, #12]
 800e146:	429a      	cmp	r2, r3
 800e148:	d304      	bcc.n	800e154 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 800e14a:	89fa      	ldrh	r2, [r7, #14]
 800e14c:	89bb      	ldrh	r3, [r7, #12]
 800e14e:	1ad3      	subs	r3, r2, r3
 800e150:	b29b      	uxth	r3, r3
 800e152:	e008      	b.n	800e166 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800e154:	8a3b      	ldrh	r3, [r7, #16]
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	b29a      	uxth	r2, r3
 800e15a:	89f9      	ldrh	r1, [r7, #14]
 800e15c:	89bb      	ldrh	r3, [r7, #12]
 800e15e:	1acb      	subs	r3, r1, r3
 800e160:	b29b      	uxth	r3, r3
 800e162:	4413      	add	r3, r2
 800e164:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800e166:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 800e168:	8afa      	ldrh	r2, [r7, #22]
 800e16a:	897b      	ldrh	r3, [r7, #10]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d904      	bls.n	800e17a <tu_fifo_remaining+0x62>
 800e170:	8afa      	ldrh	r2, [r7, #22]
 800e172:	897b      	ldrh	r3, [r7, #10]
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	b29b      	uxth	r3, r3
 800e178:	e000      	b.n	800e17c <tu_fifo_remaining+0x64>
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	371c      	adds	r7, #28
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	4613      	mov	r3, r2
 800e194:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 800e196:	88fa      	ldrh	r2, [r7, #6]
 800e198:	2300      	movs	r3, #0
 800e19a:	68b9      	ldr	r1, [r7, #8]
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7ff ff17 	bl	800dfd0 <_tu_fifo_read_n>
 800e1a2:	4603      	mov	r3, r0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800e1ba:	88fa      	ldrh	r2, [r7, #6]
 800e1bc:	2301      	movs	r3, #1
 800e1be:	68b9      	ldr	r1, [r7, #8]
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f7ff ff05 	bl	800dfd0 <_tu_fifo_read_n>
 800e1c6:	4603      	mov	r3, r0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	891b      	ldrh	r3, [r3, #8]
 800e1de:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7ff ff6b 	bl	800e0bc <tu_fifo_full>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00c      	beq.n	800e206 <tu_fifo_write+0x36>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	79db      	ldrb	r3, [r3, #7]
 800e1f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	f083 0301 	eor.w	r3, r3, #1
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d002      	beq.n	800e206 <tu_fifo_write+0x36>
  {
    ret = false;
 800e200:	2300      	movs	r3, #0
 800e202:	75fb      	strb	r3, [r7, #23]
 800e204:	e022      	b.n	800e24c <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	889b      	ldrh	r3, [r3, #4]
 800e20a:	823b      	strh	r3, [r7, #16]
 800e20c:	8abb      	ldrh	r3, [r7, #20]
 800e20e:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800e210:	e003      	b.n	800e21a <tu_fifo_write+0x4a>
 800e212:	89fa      	ldrh	r2, [r7, #14]
 800e214:	8a3b      	ldrh	r3, [r7, #16]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	81fb      	strh	r3, [r7, #14]
 800e21a:	8a3a      	ldrh	r2, [r7, #16]
 800e21c:	89fb      	ldrh	r3, [r7, #14]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d9f7      	bls.n	800e212 <tu_fifo_write+0x42>
  return idx;
 800e222:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800e224:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 800e226:	8a7b      	ldrh	r3, [r7, #18]
 800e228:	461a      	mov	r2, r3
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7ff fb8b 	bl	800d948 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	889b      	ldrh	r3, [r3, #4]
 800e236:	8ab9      	ldrh	r1, [r7, #20]
 800e238:	2201      	movs	r2, #1
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7ff fd61 	bl	800dd02 <advance_index>
 800e240:	4603      	mov	r3, r0
 800e242:	461a      	mov	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	811a      	strh	r2, [r3, #8]

    ret = true;
 800e248:	2301      	movs	r3, #1
 800e24a:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 800e24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b084      	sub	sp, #16
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	4613      	mov	r3, r2
 800e262:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 800e264:	88fa      	ldrh	r2, [r7, #6]
 800e266:	2300      	movs	r3, #0
 800e268:	68b9      	ldr	r1, [r7, #8]
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f7ff fddf 	bl	800de2e <_tu_fifo_write_n>
 800e270:	4603      	mov	r3, r0
}
 800e272:	4618      	mov	r0, r3
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b084      	sub	sp, #16
 800e27e:	af00      	add	r7, sp, #0
 800e280:	60f8      	str	r0, [r7, #12]
 800e282:	60b9      	str	r1, [r7, #8]
 800e284:	4613      	mov	r3, r2
 800e286:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800e288:	88fa      	ldrh	r2, [r7, #6]
 800e28a:	2301      	movs	r3, #1
 800e28c:	68b9      	ldr	r1, [r7, #8]
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f7ff fdcd 	bl	800de2e <_tu_fifo_write_n>
 800e294:	4603      	mov	r3, r0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 800e29e:	b480      	push	{r7}
 800e2a0:	b083      	sub	sp, #12
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 800e2b2:	2301      	movs	r3, #1
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	79d3      	ldrb	r3, [r2, #7]
 800e2d0:	78f9      	ldrb	r1, [r7, #3]
 800e2d2:	f361 13c7 	bfi	r3, r1, #7, #1
 800e2d6:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800e2d8:	2301      	movs	r3, #1
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
	...

0800e2e8 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 800e2f2:	4b14      	ldr	r3, [pc, #80]	; (800e344 <get_driver+0x5c>)
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d012      	beq.n	800e31e <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800e2f8:	4b13      	ldr	r3, [pc, #76]	; (800e348 <get_driver+0x60>)
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	79fa      	ldrb	r2, [r7, #7]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d208      	bcs.n	800e314 <get_driver+0x2c>
 800e302:	4b12      	ldr	r3, [pc, #72]	; (800e34c <get_driver+0x64>)
 800e304:	6819      	ldr	r1, [r3, #0]
 800e306:	79fa      	ldrb	r2, [r7, #7]
 800e308:	4613      	mov	r3, r2
 800e30a:	005b      	lsls	r3, r3, #1
 800e30c:	4413      	add	r3, r2
 800e30e:	00db      	lsls	r3, r3, #3
 800e310:	440b      	add	r3, r1
 800e312:	e010      	b.n	800e336 <get_driver+0x4e>
    drvid -= _app_driver_count;
 800e314:	4b0c      	ldr	r3, [pc, #48]	; (800e348 <get_driver+0x60>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	79fa      	ldrb	r2, [r7, #7]
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800e31e:	79fb      	ldrb	r3, [r7, #7]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d807      	bhi.n	800e334 <get_driver+0x4c>
 800e324:	79fa      	ldrb	r2, [r7, #7]
 800e326:	4613      	mov	r3, r2
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	4413      	add	r3, r2
 800e32c:	00db      	lsls	r3, r3, #3
 800e32e:	4a08      	ldr	r2, [pc, #32]	; (800e350 <get_driver+0x68>)
 800e330:	4413      	add	r3, r2
 800e332:	e000      	b.n	800e336 <get_driver+0x4e>

  return NULL;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	00000000 	.word	0x00000000
 800e348:	2400264c 	.word	0x2400264c
 800e34c:	24002648 	.word	0x24002648
 800e350:	08010ba4 	.word	0x08010ba4

0800e354 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 800e354:	b480      	push	{r7}
 800e356:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 800e358:	4b06      	ldr	r3, [pc, #24]	; (800e374 <tud_mounted+0x20>)
 800e35a:	785b      	ldrb	r3, [r3, #1]
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	2b00      	cmp	r3, #0
 800e360:	bf14      	ite	ne
 800e362:	2301      	movne	r3, #1
 800e364:	2300      	moveq	r3, #0
 800e366:	b2db      	uxtb	r3, r3
}
 800e368:	4618      	mov	r0, r3
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	24002610 	.word	0x24002610

0800e378 <tud_suspended>:

bool tud_suspended(void)
{
 800e378:	b480      	push	{r7}
 800e37a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 800e37c:	4b07      	ldr	r3, [pc, #28]	; (800e39c <tud_suspended+0x24>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	bf14      	ite	ne
 800e38a:	2301      	movne	r3, #1
 800e38c:	2300      	moveq	r3, #0
 800e38e:	b2db      	uxtb	r3, r3
}
 800e390:	4618      	mov	r0, r3
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	24002610 	.word	0x24002610

0800e3a0 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b0aa      	sub	sp, #168	; 0xa8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	785b      	ldrb	r3, [r3, #1]
 800e3b0:	3b02      	subs	r3, #2
 800e3b2:	2b03      	cmp	r3, #3
 800e3b4:	f200 8198 	bhi.w	800e6e8 <dcd_event_handler+0x348>
 800e3b8:	a201      	add	r2, pc, #4	; (adr r2, 800e3c0 <dcd_event_handler+0x20>)
 800e3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3be:	bf00      	nop
 800e3c0:	0800e3d1 	.word	0x0800e3d1
 800e3c4:	0800e5d5 	.word	0x0800e5d5
 800e3c8:	0800e491 	.word	0x0800e491
 800e3cc:	0800e537 	.word	0x0800e537
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 800e3d0:	4a82      	ldr	r2, [pc, #520]	; (800e5dc <dcd_event_handler+0x23c>)
 800e3d2:	7813      	ldrb	r3, [r2, #0]
 800e3d4:	f36f 0300 	bfc	r3, #0, #1
 800e3d8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 800e3da:	4a80      	ldr	r2, [pc, #512]	; (800e5dc <dcd_event_handler+0x23c>)
 800e3dc:	7813      	ldrb	r3, [r2, #0]
 800e3de:	f36f 0341 	bfc	r3, #1, #1
 800e3e2:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 800e3e4:	4b7d      	ldr	r3, [pc, #500]	; (800e5dc <dcd_event_handler+0x23c>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 800e3ea:	4a7c      	ldr	r2, [pc, #496]	; (800e5dc <dcd_event_handler+0x23c>)
 800e3ec:	7813      	ldrb	r3, [r2, #0]
 800e3ee:	f36f 0382 	bfc	r3, #2, #1
 800e3f2:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 800e3f4:	4b7a      	ldr	r3, [pc, #488]	; (800e5e0 <dcd_event_handler+0x240>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e402:	78fb      	ldrb	r3, [r7, #3]
 800e404:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 800e408:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e40c:	f083 0301 	eor.w	r3, r3, #1
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	d009      	beq.n	800e42a <dcd_event_handler+0x8a>
 800e416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e41a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 800e41e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2000      	movs	r0, #0
 800e426:	4798      	blx	r3
}
 800e428:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 800e42a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e42e:	3304      	adds	r3, #4
 800e430:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e434:	4618      	mov	r0, r3
 800e436:	f7ff fecb 	bl	800e1d0 <tu_fifo_write>
 800e43a:	4603      	mov	r3, r0
 800e43c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 800e440:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e444:	f083 0301 	eor.w	r3, r3, #1
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d009      	beq.n	800e462 <dcd_event_handler+0xc2>
 800e44e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 800e456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2001      	movs	r0, #1
 800e45e:	4798      	blx	r3
}
 800e460:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 800e462:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e466:	f083 0301 	eor.w	r3, r3, #1
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00b      	beq.n	800e488 <dcd_event_handler+0xe8>
 800e470:	4b5c      	ldr	r3, [pc, #368]	; (800e5e4 <dcd_event_handler+0x244>)
 800e472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f003 0301 	and.w	r3, r3, #1
 800e480:	2b00      	cmp	r3, #0
 800e482:	d003      	beq.n	800e48c <dcd_event_handler+0xec>
 800e484:	be00      	bkpt	0x0000
 800e486:	e001      	b.n	800e48c <dcd_event_handler+0xec>

  return success;
 800e488:	bf00      	nop
 800e48a:	e172      	b.n	800e772 <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 800e48c:	bf00      	nop
    break;
 800e48e:	e170      	b.n	800e772 <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 800e490:	4b52      	ldr	r3, [pc, #328]	; (800e5dc <dcd_event_handler+0x23c>)
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f000 8164 	beq.w	800e768 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 800e4a0:	4a4e      	ldr	r2, [pc, #312]	; (800e5dc <dcd_event_handler+0x23c>)
 800e4a2:	7813      	ldrb	r3, [r2, #0]
 800e4a4:	f043 0304 	orr.w	r3, r3, #4
 800e4a8:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 800e4aa:	4b4d      	ldr	r3, [pc, #308]	; (800e5e0 <dcd_event_handler+0x240>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e4b6:	78fb      	ldrb	r3, [r7, #3]
 800e4b8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 800e4bc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800e4c0:	f083 0301 	eor.w	r3, r3, #1
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d007      	beq.n	800e4da <dcd_event_handler+0x13a>
 800e4ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4ce:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 800e4d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	4798      	blx	r3
}
 800e4d8:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800e4da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4de:	3304      	adds	r3, #4
 800e4e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7ff fe74 	bl	800e1d0 <tu_fifo_write>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 800e4ee:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800e4f2:	f083 0301 	eor.w	r3, r3, #1
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d007      	beq.n	800e50c <dcd_event_handler+0x16c>
 800e4fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e500:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 800e502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2001      	movs	r0, #1
 800e508:	4798      	blx	r3
}
 800e50a:	bf00      	nop
  TU_ASSERT(success);
 800e50c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800e510:	f083 0301 	eor.w	r3, r3, #1
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d009      	beq.n	800e52e <dcd_event_handler+0x18e>
 800e51a:	4b32      	ldr	r3, [pc, #200]	; (800e5e4 <dcd_event_handler+0x244>)
 800e51c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e51e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	2b00      	cmp	r3, #0
 800e528:	d003      	beq.n	800e532 <dcd_event_handler+0x192>
 800e52a:	be00      	bkpt	0x0000
 800e52c:	e001      	b.n	800e532 <dcd_event_handler+0x192>
  return success;
 800e52e:	bf00      	nop
 800e530:	e11a      	b.n	800e768 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 800e532:	bf00      	nop
      }
    break;
 800e534:	e118      	b.n	800e768 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 800e536:	4b29      	ldr	r3, [pc, #164]	; (800e5dc <dcd_event_handler+0x23c>)
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 8113 	beq.w	800e76c <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 800e546:	4a25      	ldr	r2, [pc, #148]	; (800e5dc <dcd_event_handler+0x23c>)
 800e548:	7813      	ldrb	r3, [r2, #0]
 800e54a:	f36f 0382 	bfc	r3, #2, #1
 800e54e:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 800e550:	4b23      	ldr	r3, [pc, #140]	; (800e5e0 <dcd_event_handler+0x240>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	667b      	str	r3, [r7, #100]	; 0x64
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	663b      	str	r3, [r7, #96]	; 0x60
 800e55a:	78fb      	ldrb	r3, [r7, #3]
 800e55c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 800e560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e564:	f083 0301 	eor.w	r3, r3, #1
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d006      	beq.n	800e57c <dcd_event_handler+0x1dc>
 800e56e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e570:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 800e572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2000      	movs	r0, #0
 800e578:	4798      	blx	r3
}
 800e57a:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800e57c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e57e:	3304      	adds	r3, #4
 800e580:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e582:	4618      	mov	r0, r3
 800e584:	f7ff fe24 	bl	800e1d0 <tu_fifo_write>
 800e588:	4603      	mov	r3, r0
 800e58a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 800e58e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e592:	f083 0301 	eor.w	r3, r3, #1
 800e596:	b2db      	uxtb	r3, r3
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d006      	beq.n	800e5aa <dcd_event_handler+0x20a>
 800e59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e59e:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 800e5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	4798      	blx	r3
}
 800e5a8:	bf00      	nop
  TU_ASSERT(success);
 800e5aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5ae:	f083 0301 	eor.w	r3, r3, #1
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d009      	beq.n	800e5cc <dcd_event_handler+0x22c>
 800e5b8:	4b0a      	ldr	r3, [pc, #40]	; (800e5e4 <dcd_event_handler+0x244>)
 800e5ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 0301 	and.w	r3, r3, #1
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d003      	beq.n	800e5d0 <dcd_event_handler+0x230>
 800e5c8:	be00      	bkpt	0x0000
 800e5ca:	e001      	b.n	800e5d0 <dcd_event_handler+0x230>
  return success;
 800e5cc:	bf00      	nop
 800e5ce:	e0cd      	b.n	800e76c <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 800e5d0:	bf00      	nop
      }
    break;
 800e5d2:	e0cb      	b.n	800e76c <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800e5da:	e023      	b.n	800e624 <dcd_event_handler+0x284>
 800e5dc:	24002610 	.word	0x24002610
 800e5e0:	24002650 	.word	0x24002650
 800e5e4:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 800e5e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7ff fe7b 	bl	800e2e8 <get_driver>
 800e5f2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 800e5f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00d      	beq.n	800e61a <dcd_event_handler+0x27a>
 800e5fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e602:	695b      	ldr	r3, [r3, #20]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d008      	beq.n	800e61a <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 800e608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e60c:	695b      	ldr	r3, [r3, #20]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	7810      	ldrb	r0, [r2, #0]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	6852      	ldr	r2, [r2, #4]
 800e616:	4611      	mov	r1, r2
 800e618:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800e61a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e61e:	3301      	adds	r3, #1
 800e620:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800e624:	4b55      	ldr	r3, [pc, #340]	; (800e77c <dcd_event_handler+0x3dc>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e62e:	429a      	cmp	r2, r3
 800e630:	dada      	bge.n	800e5e8 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 800e632:	4b53      	ldr	r3, [pc, #332]	; (800e780 <dcd_event_handler+0x3e0>)
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f000 8097 	beq.w	800e770 <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 800e642:	4a4f      	ldr	r2, [pc, #316]	; (800e780 <dcd_event_handler+0x3e0>)
 800e644:	7813      	ldrb	r3, [r2, #0]
 800e646:	f36f 0382 	bfc	r3, #2, #1
 800e64a:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 800e64c:	f107 0308 	add.w	r3, r7, #8
 800e650:	2200      	movs	r2, #0
 800e652:	601a      	str	r2, [r3, #0]
 800e654:	605a      	str	r2, [r3, #4]
 800e656:	609a      	str	r2, [r3, #8]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	723b      	strb	r3, [r7, #8]
 800e65e:	2305      	movs	r3, #5
 800e660:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 800e662:	4b48      	ldr	r3, [pc, #288]	; (800e784 <dcd_event_handler+0x3e4>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	64bb      	str	r3, [r7, #72]	; 0x48
 800e668:	f107 0308 	add.w	r3, r7, #8
 800e66c:	647b      	str	r3, [r7, #68]	; 0x44
 800e66e:	78fb      	ldrb	r3, [r7, #3]
 800e670:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 800e674:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e678:	f083 0301 	eor.w	r3, r3, #1
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d006      	beq.n	800e690 <dcd_event_handler+0x2f0>
 800e682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e684:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 800e686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2000      	movs	r0, #0
 800e68c:	4798      	blx	r3
}
 800e68e:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800e690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e692:	3304      	adds	r3, #4
 800e694:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e696:	4618      	mov	r0, r3
 800e698:	f7ff fd9a 	bl	800e1d0 <tu_fifo_write>
 800e69c:	4603      	mov	r3, r0
 800e69e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 800e6a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e6a6:	f083 0301 	eor.w	r3, r3, #1
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d006      	beq.n	800e6be <dcd_event_handler+0x31e>
 800e6b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6b2:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 800e6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2001      	movs	r0, #1
 800e6ba:	4798      	blx	r3
}
 800e6bc:	bf00      	nop
  TU_ASSERT(success);
 800e6be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e6c2:	f083 0301 	eor.w	r3, r3, #1
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d009      	beq.n	800e6e0 <dcd_event_handler+0x340>
 800e6cc:	4b2e      	ldr	r3, [pc, #184]	; (800e788 <dcd_event_handler+0x3e8>)
 800e6ce:	633b      	str	r3, [r7, #48]	; 0x30
 800e6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f003 0301 	and.w	r3, r3, #1
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d003      	beq.n	800e6e4 <dcd_event_handler+0x344>
 800e6dc:	be00      	bkpt	0x0000
 800e6de:	e001      	b.n	800e6e4 <dcd_event_handler+0x344>
  return success;
 800e6e0:	bf00      	nop
 800e6e2:	e045      	b.n	800e770 <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 800e6e4:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 800e6e6:	e043      	b.n	800e770 <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 800e6e8:	4b26      	ldr	r3, [pc, #152]	; (800e784 <dcd_event_handler+0x3e4>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6f2:	78fb      	ldrb	r3, [r7, #3]
 800e6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 800e6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6fc:	f083 0301 	eor.w	r3, r3, #1
 800e700:	b2db      	uxtb	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	d006      	beq.n	800e714 <dcd_event_handler+0x374>
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 800e70a:	6a3b      	ldr	r3, [r7, #32]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2000      	movs	r0, #0
 800e710:	4798      	blx	r3
}
 800e712:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	3304      	adds	r3, #4
 800e718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7ff fd58 	bl	800e1d0 <tu_fifo_write>
 800e720:	4603      	mov	r3, r0
 800e722:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 800e724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e728:	f083 0301 	eor.w	r3, r3, #1
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d006      	beq.n	800e740 <dcd_event_handler+0x3a0>
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2001      	movs	r0, #1
 800e73c:	4798      	blx	r3
}
 800e73e:	bf00      	nop
  TU_ASSERT(success);
 800e740:	7ffb      	ldrb	r3, [r7, #31]
 800e742:	f083 0301 	eor.w	r3, r3, #1
 800e746:	b2db      	uxtb	r3, r3
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d009      	beq.n	800e760 <dcd_event_handler+0x3c0>
 800e74c:	4b0e      	ldr	r3, [pc, #56]	; (800e788 <dcd_event_handler+0x3e8>)
 800e74e:	617b      	str	r3, [r7, #20]
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f003 0301 	and.w	r3, r3, #1
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d003      	beq.n	800e764 <dcd_event_handler+0x3c4>
 800e75c:	be00      	bkpt	0x0000
 800e75e:	e001      	b.n	800e764 <dcd_event_handler+0x3c4>
  return success;
 800e760:	bf00      	nop
 800e762:	e006      	b.n	800e772 <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 800e764:	bf00      	nop
    break;
 800e766:	e004      	b.n	800e772 <dcd_event_handler+0x3d2>
    break;
 800e768:	bf00      	nop
 800e76a:	e002      	b.n	800e772 <dcd_event_handler+0x3d2>
    break;
 800e76c:	bf00      	nop
 800e76e:	e000      	b.n	800e772 <dcd_event_handler+0x3d2>
    break;
 800e770:	bf00      	nop
  }
}
 800e772:	bf00      	nop
 800e774:	37a8      	adds	r7, #168	; 0xa8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	2400264c 	.word	0x2400264c
 800e780:	24002610 	.word	0x24002610
 800e784:	24002650 	.word	0x24002650
 800e788:	e000edf0 	.word	0xe000edf0

0800e78c <usbd_open_edpt_pair>:
  }
}

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b08a      	sub	sp, #40	; 0x28
 800e790:	af00      	add	r7, sp, #0
 800e792:	6039      	str	r1, [r7, #0]
 800e794:	4611      	mov	r1, r2
 800e796:	461a      	mov	r2, r3
 800e798:	4603      	mov	r3, r0
 800e79a:	71fb      	strb	r3, [r7, #7]
 800e79c:	460b      	mov	r3, r1
 800e79e:	71bb      	strb	r3, [r7, #6]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e7a8:	e04d      	b.n	800e846 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800e7ae:	6a3b      	ldr	r3, [r7, #32]
 800e7b0:	785b      	ldrb	r3, [r3, #1]
 800e7b2:	2b05      	cmp	r3, #5
 800e7b4:	d108      	bne.n	800e7c8 <usbd_open_edpt_pair+0x3c>
 800e7b6:	6a3b      	ldr	r3, [r7, #32]
 800e7b8:	78db      	ldrb	r3, [r3, #3]
 800e7ba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	797b      	ldrb	r3, [r7, #5]
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d00a      	beq.n	800e7de <usbd_open_edpt_pair+0x52>
 800e7c8:	4b23      	ldr	r3, [pc, #140]	; (800e858 <usbd_open_edpt_pair+0xcc>)
 800e7ca:	61bb      	str	r3, [r7, #24]
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f003 0301 	and.w	r3, r3, #1
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d000      	beq.n	800e7da <usbd_open_edpt_pair+0x4e>
 800e7d8:	be00      	bkpt	0x0000
 800e7da:	2300      	movs	r3, #0
 800e7dc:	e038      	b.n	800e850 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	6a39      	ldr	r1, [r7, #32]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f000 f83a 	bl	800e85c <usbd_edpt_open>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	f083 0301 	eor.w	r3, r3, #1
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00a      	beq.n	800e80a <usbd_open_edpt_pair+0x7e>
 800e7f4:	4b18      	ldr	r3, [pc, #96]	; (800e858 <usbd_open_edpt_pair+0xcc>)
 800e7f6:	61fb      	str	r3, [r7, #28]
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f003 0301 	and.w	r3, r3, #1
 800e800:	2b00      	cmp	r3, #0
 800e802:	d000      	beq.n	800e806 <usbd_open_edpt_pair+0x7a>
 800e804:	be00      	bkpt	0x0000
 800e806:	2300      	movs	r3, #0
 800e808:	e022      	b.n	800e850 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800e80a:	6a3b      	ldr	r3, [r7, #32]
 800e80c:	789b      	ldrb	r3, [r3, #2]
 800e80e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800e810:	7dfb      	ldrb	r3, [r7, #23]
 800e812:	09db      	lsrs	r3, r3, #7
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b01      	cmp	r3, #1
 800e818:	d104      	bne.n	800e824 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	789a      	ldrb	r2, [r3, #2]
 800e81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e820:	701a      	strb	r2, [r3, #0]
 800e822:	e003      	b.n	800e82c <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 800e824:	6a3b      	ldr	r3, [r7, #32]
 800e826:	789a      	ldrb	r2, [r3, #2]
 800e828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82a:	701a      	strb	r2, [r3, #0]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	461a      	mov	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800e83e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	3301      	adds	r3, #1
 800e844:	627b      	str	r3, [r7, #36]	; 0x24
 800e846:	79bb      	ldrb	r3, [r7, #6]
 800e848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e84a:	429a      	cmp	r2, r3
 800e84c:	dbad      	blt.n	800e7aa <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800e84e:	2301      	movs	r3, #1
}
 800e850:	4618      	mov	r0, r3
 800e852:	3728      	adds	r7, #40	; 0x28
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	e000edf0 	.word	0xe000edf0

0800e85c <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	4603      	mov	r3, r0
 800e864:	6039      	str	r1, [r7, #0]
 800e866:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 800e868:	4b1b      	ldr	r3, [pc, #108]	; (800e8d8 <usbd_edpt_open+0x7c>)
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	789b      	ldrb	r3, [r3, #2]
 800e872:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b08      	cmp	r3, #8
 800e87e:	d90a      	bls.n	800e896 <usbd_edpt_open+0x3a>
 800e880:	4b16      	ldr	r3, [pc, #88]	; (800e8dc <usbd_edpt_open+0x80>)
 800e882:	613b      	str	r3, [r7, #16]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f003 0301 	and.w	r3, r3, #1
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d000      	beq.n	800e892 <usbd_edpt_open+0x36>
 800e890:	be00      	bkpt	0x0000
 800e892:	2300      	movs	r3, #0
 800e894:	e01c      	b.n	800e8d0 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 800e896:	4b12      	ldr	r3, [pc, #72]	; (800e8e0 <usbd_edpt_open+0x84>)
 800e898:	789b      	ldrb	r3, [r3, #2]
 800e89a:	4619      	mov	r1, r3
 800e89c:	6838      	ldr	r0, [r7, #0]
 800e89e:	f001 fc6f 	bl	8010180 <tu_edpt_validate>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	f083 0301 	eor.w	r3, r3, #1
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00a      	beq.n	800e8c4 <usbd_edpt_open+0x68>
 800e8ae:	4b0b      	ldr	r3, [pc, #44]	; (800e8dc <usbd_edpt_open+0x80>)
 800e8b0:	617b      	str	r3, [r7, #20]
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f003 0301 	and.w	r3, r3, #1
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d000      	beq.n	800e8c0 <usbd_edpt_open+0x64>
 800e8be:	be00      	bkpt	0x0000
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	e005      	b.n	800e8d0 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 800e8c4:	79fb      	ldrb	r3, [r7, #7]
 800e8c6:	6839      	ldr	r1, [r7, #0]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 fc7f 	bl	800f1cc <dcd_edpt_open>
 800e8ce:	4603      	mov	r3, r0
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3718      	adds	r7, #24
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	2400000c 	.word	0x2400000c
 800e8dc:	e000edf0 	.word	0xe000edf0
 800e8e0:	24002610 	.word	0x24002610

0800e8e4 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	460a      	mov	r2, r1
 800e8ee:	71fb      	strb	r3, [r7, #7]
 800e8f0:	4613      	mov	r3, r2
 800e8f2:	71bb      	strb	r3, [r7, #6]
 800e8f4:	79bb      	ldrb	r3, [r7, #6]
 800e8f6:	73bb      	strb	r3, [r7, #14]
 800e8f8:	7bbb      	ldrb	r3, [r7, #14]
 800e8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8fe:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 800e900:	75fb      	strb	r3, [r7, #23]
 800e902:	79bb      	ldrb	r3, [r7, #6]
 800e904:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800e906:	7bfb      	ldrb	r3, [r7, #15]
 800e908:	09db      	lsrs	r3, r3, #7
 800e90a:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 800e90c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800e90e:	7dfa      	ldrb	r2, [r7, #23]
 800e910:	7dbb      	ldrb	r3, [r7, #22]
 800e912:	0052      	lsls	r2, r2, #1
 800e914:	4413      	add	r3, r2
 800e916:	3320      	adds	r3, #32
 800e918:	4a06      	ldr	r2, [pc, #24]	; (800e934 <usbd_edpt_claim+0x50>)
 800e91a:	4413      	add	r3, r2
 800e91c:	3305      	adds	r3, #5
 800e91e:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800e920:	2100      	movs	r1, #0
 800e922:	6938      	ldr	r0, [r7, #16]
 800e924:	f001 fbc8 	bl	80100b8 <tu_edpt_claim>
 800e928:	4603      	mov	r3, r0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3718      	adds	r7, #24
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	24002610 	.word	0x24002610

0800e938 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	460a      	mov	r2, r1
 800e942:	71fb      	strb	r3, [r7, #7]
 800e944:	4613      	mov	r3, r2
 800e946:	71bb      	strb	r3, [r7, #6]
 800e948:	79bb      	ldrb	r3, [r7, #6]
 800e94a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e952:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 800e954:	75fb      	strb	r3, [r7, #23]
 800e956:	79bb      	ldrb	r3, [r7, #6]
 800e958:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800e95a:	7bfb      	ldrb	r3, [r7, #15]
 800e95c:	09db      	lsrs	r3, r3, #7
 800e95e:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 800e960:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800e962:	7dfa      	ldrb	r2, [r7, #23]
 800e964:	7dbb      	ldrb	r3, [r7, #22]
 800e966:	0052      	lsls	r2, r2, #1
 800e968:	4413      	add	r3, r2
 800e96a:	3320      	adds	r3, #32
 800e96c:	4a06      	ldr	r2, [pc, #24]	; (800e988 <usbd_edpt_release+0x50>)
 800e96e:	4413      	add	r3, r2
 800e970:	3305      	adds	r3, #5
 800e972:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800e974:	2100      	movs	r1, #0
 800e976:	6938      	ldr	r0, [r7, #16]
 800e978:	f001 fbd8 	bl	801012c <tu_edpt_release>
 800e97c:	4603      	mov	r3, r0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	24002610 	.word	0x24002610

0800e98c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b086      	sub	sp, #24
 800e990:	af00      	add	r7, sp, #0
 800e992:	603a      	str	r2, [r7, #0]
 800e994:	461a      	mov	r2, r3
 800e996:	4603      	mov	r3, r0
 800e998:	71fb      	strb	r3, [r7, #7]
 800e99a:	460b      	mov	r3, r1
 800e99c:	71bb      	strb	r3, [r7, #6]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800e9a2:	4b32      	ldr	r3, [pc, #200]	; (800ea6c <usbd_edpt_xfer+0xe0>)
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	71fb      	strb	r3, [r7, #7]
 800e9a8:	79bb      	ldrb	r3, [r7, #6]
 800e9aa:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800e9ac:	7abb      	ldrb	r3, [r7, #10]
 800e9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9b2:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800e9b4:	75fb      	strb	r3, [r7, #23]
 800e9b6:	79bb      	ldrb	r3, [r7, #6]
 800e9b8:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800e9ba:	7afb      	ldrb	r3, [r7, #11]
 800e9bc:	09db      	lsrs	r3, r3, #7
 800e9be:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800e9c0:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800e9c2:	7dfa      	ldrb	r2, [r7, #23]
 800e9c4:	7dbb      	ldrb	r3, [r7, #22]
 800e9c6:	492a      	ldr	r1, [pc, #168]	; (800ea70 <usbd_edpt_xfer+0xe4>)
 800e9c8:	0052      	lsls	r2, r2, #1
 800e9ca:	440a      	add	r2, r1
 800e9cc:	4413      	add	r3, r2
 800e9ce:	3320      	adds	r3, #32
 800e9d0:	795b      	ldrb	r3, [r3, #5]
 800e9d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00a      	beq.n	800e9f2 <usbd_edpt_xfer+0x66>
 800e9dc:	4b25      	ldr	r3, [pc, #148]	; (800ea74 <usbd_edpt_xfer+0xe8>)
 800e9de:	60fb      	str	r3, [r7, #12]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d000      	beq.n	800e9ee <usbd_edpt_xfer+0x62>
 800e9ec:	be00      	bkpt	0x0000
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e038      	b.n	800ea64 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 800e9f2:	7dfa      	ldrb	r2, [r7, #23]
 800e9f4:	7dbb      	ldrb	r3, [r7, #22]
 800e9f6:	491e      	ldr	r1, [pc, #120]	; (800ea70 <usbd_edpt_xfer+0xe4>)
 800e9f8:	0052      	lsls	r2, r2, #1
 800e9fa:	440a      	add	r2, r1
 800e9fc:	4413      	add	r3, r2
 800e9fe:	f103 0220 	add.w	r2, r3, #32
 800ea02:	7953      	ldrb	r3, [r2, #5]
 800ea04:	f043 0301 	orr.w	r3, r3, #1
 800ea08:	7153      	strb	r3, [r2, #5]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 800ea0a:	88bb      	ldrh	r3, [r7, #4]
 800ea0c:	79b9      	ldrb	r1, [r7, #6]
 800ea0e:	79f8      	ldrb	r0, [r7, #7]
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	f000 fd19 	bl	800f448 <dcd_edpt_xfer>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <usbd_edpt_xfer+0x94>
  {
    return true;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	e021      	b.n	800ea64 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 800ea20:	7dfa      	ldrb	r2, [r7, #23]
 800ea22:	7dbb      	ldrb	r3, [r7, #22]
 800ea24:	4912      	ldr	r1, [pc, #72]	; (800ea70 <usbd_edpt_xfer+0xe4>)
 800ea26:	0052      	lsls	r2, r2, #1
 800ea28:	440a      	add	r2, r1
 800ea2a:	4413      	add	r3, r2
 800ea2c:	f103 0220 	add.w	r2, r3, #32
 800ea30:	7953      	ldrb	r3, [r2, #5]
 800ea32:	f36f 0300 	bfc	r3, #0, #1
 800ea36:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800ea38:	7dfa      	ldrb	r2, [r7, #23]
 800ea3a:	7dbb      	ldrb	r3, [r7, #22]
 800ea3c:	490c      	ldr	r1, [pc, #48]	; (800ea70 <usbd_edpt_xfer+0xe4>)
 800ea3e:	0052      	lsls	r2, r2, #1
 800ea40:	440a      	add	r2, r1
 800ea42:	4413      	add	r3, r2
 800ea44:	f103 0220 	add.w	r2, r3, #32
 800ea48:	7953      	ldrb	r3, [r2, #5]
 800ea4a:	f36f 0382 	bfc	r3, #2, #1
 800ea4e:	7153      	strb	r3, [r2, #5]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 800ea50:	4b08      	ldr	r3, [pc, #32]	; (800ea74 <usbd_edpt_xfer+0xe8>)
 800ea52:	613b      	str	r3, [r7, #16]
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f003 0301 	and.w	r3, r3, #1
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d000      	beq.n	800ea62 <usbd_edpt_xfer+0xd6>
 800ea60:	be00      	bkpt	0x0000
    return false;
 800ea62:	2300      	movs	r3, #0
  }
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	2400000c 	.word	0x2400000c
 800ea70:	24002610 	.word	0x24002610
 800ea74:	e000edf0 	.word	0xe000edf0

0800ea78 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	4603      	mov	r3, r0
 800ea80:	460a      	mov	r2, r1
 800ea82:	71fb      	strb	r3, [r7, #7]
 800ea84:	4613      	mov	r3, r2
 800ea86:	71bb      	strb	r3, [r7, #6]
 800ea88:	79bb      	ldrb	r3, [r7, #6]
 800ea8a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ea8c:	7b3b      	ldrb	r3, [r7, #12]
 800ea8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea92:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800ea94:	73fb      	strb	r3, [r7, #15]
 800ea96:	79bb      	ldrb	r3, [r7, #6]
 800ea98:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ea9a:	7b7b      	ldrb	r3, [r7, #13]
 800ea9c:	09db      	lsrs	r3, r3, #7
 800ea9e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800eaa0:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800eaa2:	7bfa      	ldrb	r2, [r7, #15]
 800eaa4:	7bbb      	ldrb	r3, [r7, #14]
 800eaa6:	490a      	ldr	r1, [pc, #40]	; (800ead0 <usbd_edpt_busy+0x58>)
 800eaa8:	0052      	lsls	r2, r2, #1
 800eaaa:	440a      	add	r2, r1
 800eaac:	4413      	add	r3, r2
 800eaae:	3320      	adds	r3, #32
 800eab0:	795b      	ldrb	r3, [r3, #5]
 800eab2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	bf14      	ite	ne
 800eabc:	2301      	movne	r3, #1
 800eabe:	2300      	moveq	r3, #0
 800eac0:	b2db      	uxtb	r3, r3
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3714      	adds	r7, #20
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop
 800ead0:	24002610 	.word	0x24002610

0800ead4 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	460a      	mov	r2, r1
 800eade:	71fb      	strb	r3, [r7, #7]
 800eae0:	4613      	mov	r3, r2
 800eae2:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800eae4:	4b1f      	ldr	r3, [pc, #124]	; (800eb64 <usbd_edpt_stall+0x90>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	71fb      	strb	r3, [r7, #7]
 800eaea:	79bb      	ldrb	r3, [r7, #6]
 800eaec:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800eaee:	7b3b      	ldrb	r3, [r7, #12]
 800eaf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaf4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800eaf6:	73fb      	strb	r3, [r7, #15]
 800eaf8:	79bb      	ldrb	r3, [r7, #6]
 800eafa:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800eafc:	7b7b      	ldrb	r3, [r7, #13]
 800eafe:	09db      	lsrs	r3, r3, #7
 800eb00:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800eb02:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 800eb04:	7bfa      	ldrb	r2, [r7, #15]
 800eb06:	7bbb      	ldrb	r3, [r7, #14]
 800eb08:	4917      	ldr	r1, [pc, #92]	; (800eb68 <usbd_edpt_stall+0x94>)
 800eb0a:	0052      	lsls	r2, r2, #1
 800eb0c:	440a      	add	r2, r1
 800eb0e:	4413      	add	r3, r2
 800eb10:	3320      	adds	r3, #32
 800eb12:	795b      	ldrb	r3, [r3, #5]
 800eb14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d11d      	bne.n	800eb5a <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 800eb1e:	79ba      	ldrb	r2, [r7, #6]
 800eb20:	79fb      	ldrb	r3, [r7, #7]
 800eb22:	4611      	mov	r1, r2
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 fde3 	bl	800f6f0 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 800eb2a:	7bfa      	ldrb	r2, [r7, #15]
 800eb2c:	7bbb      	ldrb	r3, [r7, #14]
 800eb2e:	490e      	ldr	r1, [pc, #56]	; (800eb68 <usbd_edpt_stall+0x94>)
 800eb30:	0052      	lsls	r2, r2, #1
 800eb32:	440a      	add	r2, r1
 800eb34:	4413      	add	r3, r2
 800eb36:	f103 0220 	add.w	r2, r3, #32
 800eb3a:	7953      	ldrb	r3, [r2, #5]
 800eb3c:	f043 0302 	orr.w	r3, r3, #2
 800eb40:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 800eb42:	7bfa      	ldrb	r2, [r7, #15]
 800eb44:	7bbb      	ldrb	r3, [r7, #14]
 800eb46:	4908      	ldr	r1, [pc, #32]	; (800eb68 <usbd_edpt_stall+0x94>)
 800eb48:	0052      	lsls	r2, r2, #1
 800eb4a:	440a      	add	r2, r1
 800eb4c:	4413      	add	r3, r2
 800eb4e:	f103 0220 	add.w	r2, r3, #32
 800eb52:	7953      	ldrb	r3, [r2, #5]
 800eb54:	f043 0301 	orr.w	r3, r3, #1
 800eb58:	7153      	strb	r3, [r2, #5]
  }
}
 800eb5a:	bf00      	nop
 800eb5c:	3710      	adds	r7, #16
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	2400000c 	.word	0x2400000c
 800eb68:	24002610 	.word	0x24002610

0800eb6c <usbd_edpt_stalled>:
    _usbd_dev.ep_status[epnum][dir].busy = false;
  }
}

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	4603      	mov	r3, r0
 800eb74:	460a      	mov	r2, r1
 800eb76:	71fb      	strb	r3, [r7, #7]
 800eb78:	4613      	mov	r3, r2
 800eb7a:	71bb      	strb	r3, [r7, #6]
 800eb7c:	79bb      	ldrb	r3, [r7, #6]
 800eb7e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800eb80:	7b3b      	ldrb	r3, [r7, #12]
 800eb82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb86:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800eb88:	73fb      	strb	r3, [r7, #15]
 800eb8a:	79bb      	ldrb	r3, [r7, #6]
 800eb8c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800eb8e:	7b7b      	ldrb	r3, [r7, #13]
 800eb90:	09db      	lsrs	r3, r3, #7
 800eb92:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800eb94:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800eb96:	7bfa      	ldrb	r2, [r7, #15]
 800eb98:	7bbb      	ldrb	r3, [r7, #14]
 800eb9a:	490a      	ldr	r1, [pc, #40]	; (800ebc4 <usbd_edpt_stalled+0x58>)
 800eb9c:	0052      	lsls	r2, r2, #1
 800eb9e:	440a      	add	r2, r1
 800eba0:	4413      	add	r3, r2
 800eba2:	3320      	adds	r3, #32
 800eba4:	795b      	ldrb	r3, [r3, #5]
 800eba6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	bf14      	ite	ne
 800ebb0:	2301      	movne	r3, #1
 800ebb2:	2300      	moveq	r3, #0
 800ebb4:	b2db      	uxtb	r3, r3
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3714      	adds	r7, #20
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	24002610 	.word	0x24002610

0800ebc8 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	4603      	mov	r3, r0
 800ebd0:	6039      	str	r1, [r7, #0]
 800ebd2:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <_status_stage_xact+0x1e>
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	e000      	b.n	800ebe8 <_status_stage_xact+0x20>
 800ebe6:	2380      	movs	r3, #128	; 0x80
 800ebe8:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800ebea:	7bf9      	ldrb	r1, [r7, #15]
 800ebec:	79f8      	ldrb	r0, [r7, #7]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f7ff fecb 	bl	800e98c <usbd_edpt_xfer>
 800ebf6:	4603      	mov	r3, r0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3710      	adds	r7, #16
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	4603      	mov	r3, r0
 800ec08:	6039      	str	r1, [r7, #0]
 800ec0a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 800ec0c:	4b0b      	ldr	r3, [pc, #44]	; (800ec3c <tud_control_status+0x3c>)
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	6810      	ldr	r0, [r2, #0]
 800ec12:	6851      	ldr	r1, [r2, #4]
 800ec14:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 800ec16:	4b09      	ldr	r3, [pc, #36]	; (800ec3c <tud_control_status+0x3c>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800ec1c:	4b07      	ldr	r3, [pc, #28]	; (800ec3c <tud_control_status+0x3c>)
 800ec1e:	2200      	movs	r2, #0
 800ec20:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 800ec22:	4b06      	ldr	r3, [pc, #24]	; (800ec3c <tud_control_status+0x3c>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 800ec28:	79fb      	ldrb	r3, [r7, #7]
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7ff ffcb 	bl	800ebc8 <_status_stage_xact>
 800ec32:	4603      	mov	r3, r0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	24002654 	.word	0x24002654

0800ec40 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800ec4a:	4b24      	ldr	r3, [pc, #144]	; (800ecdc <_data_stage_xact+0x9c>)
 800ec4c:	899a      	ldrh	r2, [r3, #12]
 800ec4e:	4b23      	ldr	r3, [pc, #140]	; (800ecdc <_data_stage_xact+0x9c>)
 800ec50:	89db      	ldrh	r3, [r3, #14]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	837b      	strh	r3, [r7, #26]
 800ec58:	2340      	movs	r3, #64	; 0x40
 800ec5a:	833b      	strh	r3, [r7, #24]
 800ec5c:	8b7a      	ldrh	r2, [r7, #26]
 800ec5e:	8b3b      	ldrh	r3, [r7, #24]
 800ec60:	4293      	cmp	r3, r2
 800ec62:	bf28      	it	cs
 800ec64:	4613      	movcs	r3, r2
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 800ec6e:	4b1b      	ldr	r3, [pc, #108]	; (800ecdc <_data_stage_xact+0x9c>)
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d01e      	beq.n	800ecba <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 800ec7c:	2380      	movs	r3, #128	; 0x80
 800ec7e:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 800ec80:	8bbb      	ldrh	r3, [r7, #28]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d019      	beq.n	800ecba <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800ec86:	4b15      	ldr	r3, [pc, #84]	; (800ecdc <_data_stage_xact+0x9c>)
 800ec88:	689a      	ldr	r2, [r3, #8]
 800ec8a:	8bbb      	ldrh	r3, [r7, #28]
 800ec8c:	4914      	ldr	r1, [pc, #80]	; (800ece0 <_data_stage_xact+0xa0>)
 800ec8e:	6179      	str	r1, [r7, #20]
 800ec90:	2140      	movs	r1, #64	; 0x40
 800ec92:	6139      	str	r1, [r7, #16]
 800ec94:	60fa      	str	r2, [r7, #12]
 800ec96:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 800ec98:	693a      	ldr	r2, [r7, #16]
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d202      	bcs.n	800eca6 <_data_stage_xact+0x66>
    return -1;
 800eca0:	f04f 33ff 	mov.w	r3, #4294967295
 800eca4:	e005      	b.n	800ecb2 <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	68f9      	ldr	r1, [r7, #12]
 800ecaa:	6978      	ldr	r0, [r7, #20]
 800ecac:	f001 fb76 	bl	801039c <memcpy>
  return 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <_data_stage_xact+0x7a>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e00b      	b.n	800ecd2 <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 800ecba:	8bbb      	ldrh	r3, [r7, #28]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <_data_stage_xact+0x84>
 800ecc0:	4a07      	ldr	r2, [pc, #28]	; (800ece0 <_data_stage_xact+0xa0>)
 800ecc2:	e000      	b.n	800ecc6 <_data_stage_xact+0x86>
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	8bbb      	ldrh	r3, [r7, #28]
 800ecc8:	7ff9      	ldrb	r1, [r7, #31]
 800ecca:	79f8      	ldrb	r0, [r7, #7]
 800eccc:	f7ff fe5e 	bl	800e98c <usbd_edpt_xfer>
 800ecd0:	4603      	mov	r3, r0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3720      	adds	r7, #32
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	24002654 	.word	0x24002654
 800ece0:	24002668 	.word	0x24002668

0800ece4 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60b9      	str	r1, [r7, #8]
 800ecec:	607a      	str	r2, [r7, #4]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73fb      	strb	r3, [r7, #15]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 800ecf8:	4b30      	ldr	r3, [pc, #192]	; (800edbc <tud_control_xfer+0xd8>)
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	6810      	ldr	r0, [r2, #0]
 800ecfe:	6851      	ldr	r1, [r2, #4]
 800ed00:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 800ed02:	4a2e      	ldr	r2, [pc, #184]	; (800edbc <tud_control_xfer+0xd8>)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800ed08:	4b2c      	ldr	r3, [pc, #176]	; (800edbc <tud_control_xfer+0xd8>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	88db      	ldrh	r3, [r3, #6]
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	89bb      	ldrh	r3, [r7, #12]
 800ed16:	827b      	strh	r3, [r7, #18]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ed1c:	8a7a      	ldrh	r2, [r7, #18]
 800ed1e:	8a3b      	ldrh	r3, [r7, #16]
 800ed20:	4293      	cmp	r3, r2
 800ed22:	bf28      	it	cs
 800ed24:	4613      	movcs	r3, r2
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	4b24      	ldr	r3, [pc, #144]	; (800edbc <tud_control_xfer+0xd8>)
 800ed2a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	88db      	ldrh	r3, [r3, #6]
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d026      	beq.n	800ed84 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 800ed36:	4b21      	ldr	r3, [pc, #132]	; (800edbc <tud_control_xfer+0xd8>)
 800ed38:	899b      	ldrh	r3, [r3, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00d      	beq.n	800ed5a <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10a      	bne.n	800ed5a <tud_control_xfer+0x76>
 800ed44:	4b1e      	ldr	r3, [pc, #120]	; (800edc0 <tud_control_xfer+0xdc>)
 800ed46:	61bb      	str	r3, [r7, #24]
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f003 0301 	and.w	r3, r3, #1
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d000      	beq.n	800ed56 <tud_control_xfer+0x72>
 800ed54:	be00      	bkpt	0x0000
 800ed56:	2300      	movs	r3, #0
 800ed58:	e02b      	b.n	800edb2 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 800ed5a:	7bfb      	ldrb	r3, [r7, #15]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7ff ff6f 	bl	800ec40 <_data_stage_xact>
 800ed62:	4603      	mov	r3, r0
 800ed64:	f083 0301 	eor.w	r3, r3, #1
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d020      	beq.n	800edb0 <tud_control_xfer+0xcc>
 800ed6e:	4b14      	ldr	r3, [pc, #80]	; (800edc0 <tud_control_xfer+0xdc>)
 800ed70:	617b      	str	r3, [r7, #20]
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 0301 	and.w	r3, r3, #1
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d000      	beq.n	800ed80 <tud_control_xfer+0x9c>
 800ed7e:	be00      	bkpt	0x0000
 800ed80:	2300      	movs	r3, #0
 800ed82:	e016      	b.n	800edb2 <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
 800ed86:	68b9      	ldr	r1, [r7, #8]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7ff ff1d 	bl	800ebc8 <_status_stage_xact>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	f083 0301 	eor.w	r3, r3, #1
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00a      	beq.n	800edb0 <tud_control_xfer+0xcc>
 800ed9a:	4b09      	ldr	r3, [pc, #36]	; (800edc0 <tud_control_xfer+0xdc>)
 800ed9c:	61fb      	str	r3, [r7, #28]
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d000      	beq.n	800edac <tud_control_xfer+0xc8>
 800edaa:	be00      	bkpt	0x0000
 800edac:	2300      	movs	r3, #0
 800edae:	e000      	b.n	800edb2 <tud_control_xfer+0xce>
  }

  return true;
 800edb0:	2301      	movs	r3, #1
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3720      	adds	r7, #32
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	24002654 	.word	0x24002654
 800edc0:	e000edf0 	.word	0xe000edf0

0800edc4 <dcd_event_sof>:

static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	4603      	mov	r3, r0
 800edcc:	6039      	str	r1, [r7, #0]
 800edce:	71fb      	strb	r3, [r7, #7]
 800edd0:	4613      	mov	r3, r2
 800edd2:	71bb      	strb	r3, [r7, #6]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 800edd4:	f107 030c 	add.w	r3, r7, #12
 800edd8:	2200      	movs	r2, #0
 800edda:	601a      	str	r2, [r3, #0]
 800eddc:	605a      	str	r2, [r3, #4]
 800edde:	609a      	str	r2, [r3, #8]
 800ede0:	79fb      	ldrb	r3, [r7, #7]
 800ede2:	733b      	strb	r3, [r7, #12]
 800ede4:	2303      	movs	r3, #3
 800ede6:	737b      	strb	r3, [r7, #13]
  event.sof.frame_count = frame_count;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	613b      	str	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800edec:	79ba      	ldrb	r2, [r7, #6]
 800edee:	f107 030c 	add.w	r3, r7, #12
 800edf2:	4611      	mov	r1, r2
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff fad3 	bl	800e3a0 <dcd_event_handler>
}
 800edfa:	bf00      	nop
 800edfc:	3718      	adds	r7, #24
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <calc_grxfsiz>:
// SOF enabling flag - required for SOF to not get disabled in ISR when SOF was enabled by
static bool _sof_en;

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_grxfsiz(uint16_t max_ep_size, uint8_t ep_count)
{
 800ee02:	b480      	push	{r7}
 800ee04:	b083      	sub	sp, #12
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	4603      	mov	r3, r0
 800ee0a:	460a      	mov	r2, r1
 800ee0c:	80fb      	strh	r3, [r7, #6]
 800ee0e:	4613      	mov	r3, r2
 800ee10:	717b      	strb	r3, [r7, #5]
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 800ee12:	88fb      	ldrh	r3, [r7, #6]
 800ee14:	089b      	lsrs	r3, r3, #2
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	797b      	ldrb	r3, [r7, #5]
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	4413      	add	r3, r2
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	005b      	lsls	r3, r3, #1
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	330f      	adds	r3, #15
 800ee26:	b29b      	uxth	r3, r3
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b086      	sub	sp, #24
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	4a1b      	ldr	r2, [pc, #108]	; (800eeb0 <update_grxfsiz+0x7c>)
 800ee42:	011b      	lsls	r3, r3, #4
 800ee44:	4413      	add	r3, r2
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800ee4a:	79fb      	ldrb	r3, [r7, #7]
 800ee4c:	4a18      	ldr	r2, [pc, #96]	; (800eeb0 <update_grxfsiz+0x7c>)
 800ee4e:	011b      	lsls	r3, r3, #4
 800ee50:	4413      	add	r3, r2
 800ee52:	3308      	adds	r3, #8
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	73fb      	strb	r3, [r7, #15]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	757b      	strb	r3, [r7, #21]
 800ee60:	e013      	b.n	800ee8a <update_grxfsiz+0x56>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 800ee62:	7d7b      	ldrb	r3, [r7, #21]
 800ee64:	4a13      	ldr	r2, [pc, #76]	; (800eeb4 <update_grxfsiz+0x80>)
 800ee66:	015b      	lsls	r3, r3, #5
 800ee68:	4413      	add	r3, r2
 800ee6a:	330a      	adds	r3, #10
 800ee6c:	881a      	ldrh	r2, [r3, #0]
 800ee6e:	8afb      	ldrh	r3, [r7, #22]
 800ee70:	81bb      	strh	r3, [r7, #12]
 800ee72:	4613      	mov	r3, r2
 800ee74:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 800ee76:	89ba      	ldrh	r2, [r7, #12]
 800ee78:	897b      	ldrh	r3, [r7, #10]
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	bf38      	it	cc
 800ee7e:	4613      	movcc	r3, r2
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 800ee84:	7d7b      	ldrb	r3, [r7, #21]
 800ee86:	3301      	adds	r3, #1
 800ee88:	757b      	strb	r3, [r7, #21]
 800ee8a:	7d7a      	ldrb	r2, [r7, #21]
 800ee8c:	7bfb      	ldrb	r3, [r7, #15]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d3e7      	bcc.n	800ee62 <update_grxfsiz+0x2e>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 800ee92:	7bfa      	ldrb	r2, [r7, #15]
 800ee94:	8afb      	ldrh	r3, [r7, #22]
 800ee96:	4611      	mov	r1, r2
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7ff ffb2 	bl	800ee02 <calc_grxfsiz>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	461a      	mov	r2, r3
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800eea6:	bf00      	nop
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	08010bd4 	.word	0x08010bd4
 800eeb4:	240026b0 	.word	0x240026b0

0800eeb8 <bus_reset>:

// Start of Bus Reset
static void bus_reset(uint8_t rhport)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	4a3f      	ldr	r2, [pc, #252]	; (800efc4 <bus_reset+0x10c>)
 800eec6:	011b      	lsls	r3, r3, #4
 800eec8:	4413      	add	r3, r2
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800eece:	79fb      	ldrb	r3, [r7, #7]
 800eed0:	4a3c      	ldr	r2, [pc, #240]	; (800efc4 <bus_reset+0x10c>)
 800eed2:	011b      	lsls	r3, r3, #4
 800eed4:	4413      	add	r3, r2
 800eed6:	3308      	adds	r3, #8
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	73fb      	strb	r3, [r7, #15]

  tu_memclr(xfer_status, sizeof(xfer_status));
 800eedc:	f44f 7290 	mov.w	r2, #288	; 0x120
 800eee0:	2100      	movs	r1, #0
 800eee2:	4839      	ldr	r0, [pc, #228]	; (800efc8 <bus_reset+0x110>)
 800eee4:	f001 fa2d 	bl	8010342 <memset>
  _out_ep_closed = false;
 800eee8:	4b38      	ldr	r3, [pc, #224]	; (800efcc <bus_reset+0x114>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	701a      	strb	r2, [r3, #0]

  _sof_en = false;
 800eeee:	4b38      	ldr	r3, [pc, #224]	; (800efd0 <bus_reset+0x118>)
 800eef0:	2200      	movs	r2, #0
 800eef2:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800eefa:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for ( uint8_t n = 0; n < ep_count; n++ )
 800ef04:	2300      	movs	r3, #0
 800ef06:	75fb      	strb	r3, [r7, #23]
 800ef08:	e010      	b.n	800ef2c <bus_reset+0x74>
  {
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800ef0a:	7dfb      	ldrb	r3, [r7, #23]
 800ef0c:	693a      	ldr	r2, [r7, #16]
 800ef0e:	3358      	adds	r3, #88	; 0x58
 800ef10:	015b      	lsls	r3, r3, #5
 800ef12:	4413      	add	r3, r2
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	7dfb      	ldrb	r3, [r7, #23]
 800ef18:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ef1c:	6939      	ldr	r1, [r7, #16]
 800ef1e:	3358      	adds	r3, #88	; 0x58
 800ef20:	015b      	lsls	r3, r3, #5
 800ef22:	440b      	add	r3, r1
 800ef24:	601a      	str	r2, [r3, #0]
  for ( uint8_t n = 0; n < ep_count; n++ )
 800ef26:	7dfb      	ldrb	r3, [r7, #23]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	75fb      	strb	r3, [r7, #23]
 800ef2c:	7dfa      	ldrb	r2, [r7, #23]
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d3ea      	bcc.n	800ef0a <bus_reset+0x52>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800ef3a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk  = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2209      	movs	r2, #9
 800ef42:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk  = DIEPMSK_TOM   | DIEPMSK_XFRCM;
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	2209      	movs	r2, #9
 800ef4a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  // EP0 out max is 64
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 800ef4e:	7bfb      	ldrb	r3, [r7, #15]
 800ef50:	4619      	mov	r1, r3
 800ef52:	2040      	movs	r0, #64	; 0x40
 800ef54:	f7ff ff55 	bl	800ee02 <calc_grxfsiz>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	625a      	str	r2, [r3, #36]	; 0x24

  // Setup the control endpoint 0
  _allocated_fifo_words_tx = 16;
 800ef60:	4b1c      	ldr	r3, [pc, #112]	; (800efd4 <bus_reset+0x11c>)
 800ef62:	2210      	movs	r2, #16
 800ef64:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 800ef66:	79fb      	ldrb	r3, [r7, #7]
 800ef68:	4a16      	ldr	r2, [pc, #88]	; (800efc4 <bus_reset+0x10c>)
 800ef6a:	011b      	lsls	r3, r3, #4
 800ef6c:	4413      	add	r3, r2
 800ef6e:	330c      	adds	r3, #12
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	089b      	lsrs	r3, r3, #2
 800ef74:	4a17      	ldr	r2, [pc, #92]	; (800efd4 <bus_reset+0x11c>)
 800ef76:	8812      	ldrh	r2, [r2, #0]
 800ef78:	1a9b      	subs	r3, r3, r2
 800ef7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 800ef88:	f023 0203 	bic.w	r2, r3, #3
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800ef92:	4b0d      	ldr	r3, [pc, #52]	; (800efc8 <bus_reset+0x110>)
 800ef94:	2240      	movs	r2, #64	; 0x40
 800ef96:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN ].max_size = 64;
 800ef98:	4b0b      	ldr	r3, [pc, #44]	; (800efc8 <bus_reset+0x110>)
 800ef9a:	2240      	movs	r2, #64	; 0x40
 800ef9c:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 800efa4:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	699b      	ldr	r3, [r3, #24]
 800efb2:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	619a      	str	r2, [r3, #24]
}
 800efba:	bf00      	nop
 800efbc:	3718      	adds	r7, #24
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	08010bd4 	.word	0x08010bd4
 800efc8:	240026b0 	.word	0x240026b0
 800efcc:	240027d6 	.word	0x240027d6
 800efd0:	240027d7 	.word	0x240027d7
 800efd4:	240027d4 	.word	0x240027d4

0800efd8 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 800efd8:	b490      	push	{r4, r7}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4604      	mov	r4, r0
 800efe0:	4608      	mov	r0, r1
 800efe2:	4611      	mov	r1, r2
 800efe4:	461a      	mov	r2, r3
 800efe6:	4623      	mov	r3, r4
 800efe8:	71fb      	strb	r3, [r7, #7]
 800efea:	4603      	mov	r3, r0
 800efec:	71bb      	strb	r3, [r7, #6]
 800efee:	460b      	mov	r3, r1
 800eff0:	717b      	strb	r3, [r7, #5]
 800eff2:	4613      	mov	r3, r2
 800eff4:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 800eff6:	79fb      	ldrb	r3, [r7, #7]
 800eff8:	4a71      	ldr	r2, [pc, #452]	; (800f1c0 <edpt_schedule_packets+0x1e8>)
 800effa:	011b      	lsls	r3, r3, #4
 800effc:	4413      	add	r3, r2
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if ( epnum == 0 )
 800f002:	79bb      	ldrb	r3, [r7, #6]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d121      	bne.n	800f04c <edpt_schedule_packets+0x74>
  {
    xfer_ctl_t *const xfer = XFER_CTL_BASE(epnum, dir);
 800f008:	79ba      	ldrb	r2, [r7, #6]
 800f00a:	797b      	ldrb	r3, [r7, #5]
 800f00c:	0052      	lsls	r2, r2, #1
 800f00e:	4413      	add	r3, r2
 800f010:	011b      	lsls	r3, r3, #4
 800f012:	4a6c      	ldr	r2, [pc, #432]	; (800f1c4 <edpt_schedule_packets+0x1ec>)
 800f014:	4413      	add	r3, r2
 800f016:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 800f018:	797b      	ldrb	r3, [r7, #5]
 800f01a:	4a6b      	ldr	r2, [pc, #428]	; (800f1c8 <edpt_schedule_packets+0x1f0>)
 800f01c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f020:	6a3b      	ldr	r3, [r7, #32]
 800f022:	895b      	ldrh	r3, [r3, #10]
 800f024:	81fa      	strh	r2, [r7, #14]
 800f026:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800f028:	89fa      	ldrh	r2, [r7, #14]
 800f02a:	89bb      	ldrh	r3, [r7, #12]
 800f02c:	4293      	cmp	r3, r2
 800f02e:	bf28      	it	cs
 800f030:	4613      	movcs	r3, r2
 800f032:	b29b      	uxth	r3, r3
 800f034:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 800f036:	797b      	ldrb	r3, [r7, #5]
 800f038:	4a63      	ldr	r2, [pc, #396]	; (800f1c8 <edpt_schedule_packets+0x1f0>)
 800f03a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f03e:	797b      	ldrb	r3, [r7, #5]
 800f040:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800f042:	1a8a      	subs	r2, r1, r2
 800f044:	b291      	uxth	r1, r2
 800f046:	4a60      	ldr	r2, [pc, #384]	; (800f1c8 <edpt_schedule_packets+0x1f0>)
 800f048:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if ( dir == TUSB_DIR_IN )
 800f04c:	797b      	ldrb	r3, [r7, #5]
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d156      	bne.n	800f100 <edpt_schedule_packets+0x128>
  {
    dwc2_epin_t* epin = dwc2->epin;
 800f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f058:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 800f05a:	887b      	ldrh	r3, [r7, #2]
 800f05c:	04db      	lsls	r3, r3, #19
 800f05e:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 800f060:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 800f062:	79bb      	ldrb	r3, [r7, #6]
 800f064:	015b      	lsls	r3, r3, #5
 800f066:	6979      	ldr	r1, [r7, #20]
 800f068:	440b      	add	r3, r1
 800f06a:	4302      	orrs	r2, r0
 800f06c:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f06e:	79bb      	ldrb	r3, [r7, #6]
 800f070:	015b      	lsls	r3, r3, #5
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	4413      	add	r3, r2
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	79bb      	ldrb	r3, [r7, #6]
 800f07a:	015b      	lsls	r3, r3, #5
 800f07c:	6979      	ldr	r1, [r7, #20]
 800f07e:	440b      	add	r3, r1
 800f080:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f084:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 800f086:	79bb      	ldrb	r3, [r7, #6]
 800f088:	015b      	lsls	r3, r3, #5
 800f08a:	697a      	ldr	r2, [r7, #20]
 800f08c:	4413      	add	r3, r2
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800f094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f098:	d123      	bne.n	800f0e2 <edpt_schedule_packets+0x10a>
 800f09a:	79ba      	ldrb	r2, [r7, #6]
 800f09c:	797b      	ldrb	r3, [r7, #5]
 800f09e:	4949      	ldr	r1, [pc, #292]	; (800f1c4 <edpt_schedule_packets+0x1ec>)
 800f0a0:	0052      	lsls	r2, r2, #1
 800f0a2:	4413      	add	r3, r2
 800f0a4:	011b      	lsls	r3, r3, #4
 800f0a6:	440b      	add	r3, r1
 800f0a8:	330c      	adds	r3, #12
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d118      	bne.n	800f0e2 <edpt_schedule_packets+0x10a>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800f0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0ba:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 800f0bc:	79bb      	ldrb	r3, [r7, #6]
 800f0be:	015b      	lsls	r3, r3, #5
 800f0c0:	697a      	ldr	r2, [r7, #20]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d002      	beq.n	800f0d2 <edpt_schedule_packets+0xfa>
 800f0cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800f0d0:	e001      	b.n	800f0d6 <edpt_schedule_packets+0xfe>
 800f0d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800f0d6:	79bb      	ldrb	r3, [r7, #6]
 800f0d8:	015b      	lsls	r3, r3, #5
 800f0da:	6978      	ldr	r0, [r7, #20]
 800f0dc:	4403      	add	r3, r0
 800f0de:	430a      	orrs	r2, r1
 800f0e0:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if ( total_bytes != 0 )
 800f0e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d065      	beq.n	800f1b4 <edpt_schedule_packets+0x1dc>
    {
      dwc2->diepempmsk |= (1 << epnum);
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 800f0ee:	79ba      	ldrb	r2, [r7, #6]
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	fa01 f202 	lsl.w	r2, r1, r2
 800f0f6:	431a      	orrs	r2, r3
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fa:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 800f0fe:	e059      	b.n	800f1b4 <edpt_schedule_packets+0x1dc>
    dwc2_epout_t* epout = dwc2->epout;
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f106:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 800f108:	79bb      	ldrb	r3, [r7, #6]
 800f10a:	015b      	lsls	r3, r3, #5
 800f10c:	69fa      	ldr	r2, [r7, #28]
 800f10e:	4413      	add	r3, r2
 800f110:	691a      	ldr	r2, [r3, #16]
 800f112:	79bb      	ldrb	r3, [r7, #6]
 800f114:	015b      	lsls	r3, r3, #5
 800f116:	69f9      	ldr	r1, [r7, #28]
 800f118:	440b      	add	r3, r1
 800f11a:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 800f11e:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 800f120:	79bb      	ldrb	r3, [r7, #6]
 800f122:	015b      	lsls	r3, r3, #5
 800f124:	69fa      	ldr	r2, [r7, #28]
 800f126:	4413      	add	r3, r2
 800f128:	6919      	ldr	r1, [r3, #16]
 800f12a:	887b      	ldrh	r3, [r7, #2]
 800f12c:	04db      	lsls	r3, r3, #19
 800f12e:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 800f130:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 800f132:	431a      	orrs	r2, r3
 800f134:	79bb      	ldrb	r3, [r7, #6]
 800f136:	015b      	lsls	r3, r3, #5
 800f138:	69f8      	ldr	r0, [r7, #28]
 800f13a:	4403      	add	r3, r0
 800f13c:	430a      	orrs	r2, r1
 800f13e:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 800f140:	79bb      	ldrb	r3, [r7, #6]
 800f142:	015b      	lsls	r3, r3, #5
 800f144:	69fa      	ldr	r2, [r7, #28]
 800f146:	4413      	add	r3, r2
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	79bb      	ldrb	r3, [r7, #6]
 800f14c:	015b      	lsls	r3, r3, #5
 800f14e:	69f9      	ldr	r1, [r7, #28]
 800f150:	440b      	add	r3, r1
 800f152:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f156:	601a      	str	r2, [r3, #0]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 800f158:	79bb      	ldrb	r3, [r7, #6]
 800f15a:	015b      	lsls	r3, r3, #5
 800f15c:	69fa      	ldr	r2, [r7, #28]
 800f15e:	4413      	add	r3, r2
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800f166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f16a:	d123      	bne.n	800f1b4 <edpt_schedule_packets+0x1dc>
         XFER_CTL_BASE(epnum, dir)->interval == 1 )
 800f16c:	79ba      	ldrb	r2, [r7, #6]
 800f16e:	797b      	ldrb	r3, [r7, #5]
 800f170:	4914      	ldr	r1, [pc, #80]	; (800f1c4 <edpt_schedule_packets+0x1ec>)
 800f172:	0052      	lsls	r2, r2, #1
 800f174:	4413      	add	r3, r2
 800f176:	011b      	lsls	r3, r3, #4
 800f178:	440b      	add	r3, r1
 800f17a:	330c      	adds	r3, #12
 800f17c:	781b      	ldrb	r3, [r3, #0]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d118      	bne.n	800f1b4 <edpt_schedule_packets+0x1dc>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 800f182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f184:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800f188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f18c:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 800f18e:	79bb      	ldrb	r3, [r7, #6]
 800f190:	015b      	lsls	r3, r3, #5
 800f192:	69fa      	ldr	r2, [r7, #28]
 800f194:	4413      	add	r3, r2
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d002      	beq.n	800f1a4 <edpt_schedule_packets+0x1cc>
 800f19e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800f1a2:	e001      	b.n	800f1a8 <edpt_schedule_packets+0x1d0>
 800f1a4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800f1a8:	79bb      	ldrb	r3, [r7, #6]
 800f1aa:	015b      	lsls	r3, r3, #5
 800f1ac:	69f8      	ldr	r0, [r7, #28]
 800f1ae:	4403      	add	r3, r0
 800f1b0:	430a      	orrs	r2, r1
 800f1b2:	601a      	str	r2, [r3, #0]
}
 800f1b4:	bf00      	nop
 800f1b6:	3728      	adds	r7, #40	; 0x28
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bc90      	pop	{r4, r7}
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	08010bd4 	.word	0x08010bd4
 800f1c4:	240026b0 	.word	0x240026b0
 800f1c8:	240027d0 	.word	0x240027d0

0800f1cc <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08e      	sub	sp, #56	; 0x38
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	6039      	str	r1, [r7, #0]
 800f1d6:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 800f1d8:	79fb      	ldrb	r3, [r7, #7]
 800f1da:	4a97      	ldr	r2, [pc, #604]	; (800f438 <dcd_edpt_open+0x26c>)
 800f1dc:	011b      	lsls	r3, r3, #4
 800f1de:	4413      	add	r3, r2
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	4a94      	ldr	r2, [pc, #592]	; (800f438 <dcd_edpt_open+0x26c>)
 800f1e8:	011b      	lsls	r3, r3, #4
 800f1ea:	4413      	add	r3, r2
 800f1ec:	3308      	adds	r3, #8
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	789b      	ldrb	r3, [r3, #2]
 800f1f8:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800f1fa:	7dbb      	ldrb	r3, [r7, #22]
 800f1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f200:	b2db      	uxtb	r3, r3
 800f202:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	789b      	ldrb	r3, [r3, #2]
 800f20a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800f20c:	7dfb      	ldrb	r3, [r7, #23]
 800f20e:	09db      	lsrs	r3, r3, #7
 800f210:	b2db      	uxtb	r3, r3
 800f212:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  TU_ASSERT(epnum < ep_count);
 800f216:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800f21a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f21e:	429a      	cmp	r2, r3
 800f220:	d30a      	bcc.n	800f238 <dcd_edpt_open+0x6c>
 800f222:	4b86      	ldr	r3, [pc, #536]	; (800f43c <dcd_edpt_open+0x270>)
 800f224:	61bb      	str	r3, [r7, #24]
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d000      	beq.n	800f234 <dcd_edpt_open+0x68>
 800f232:	be00      	bkpt	0x0000
 800f234:	2300      	movs	r3, #0
 800f236:	e0fb      	b.n	800f430 <dcd_edpt_open+0x264>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 800f238:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800f23c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800f240:	0052      	lsls	r2, r2, #1
 800f242:	4413      	add	r3, r2
 800f244:	011b      	lsls	r3, r3, #4
 800f246:	4a7e      	ldr	r2, [pc, #504]	; (800f440 <dcd_edpt_open+0x274>)
 800f248:	4413      	add	r3, r2
 800f24a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	889b      	ldrh	r3, [r3, #4]
 800f254:	b29b      	uxth	r3, r3
 800f256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f25a:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 800f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25e:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	799a      	ldrb	r2, [r3, #6]
 800f264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f266:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	895b      	ldrh	r3, [r3, #10]
 800f26c:	613b      	str	r3, [r7, #16]
 800f26e:	2304      	movs	r3, #4
 800f270:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 800f272:	693a      	ldr	r2, [r7, #16]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	4413      	add	r3, r2
 800f278:	1e5a      	subs	r2, r3, #1
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f280:	857b      	strh	r3, [r7, #42]	; 0x2a

  if(dir == TUSB_DIR_OUT)
 800f282:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800f286:	2b00      	cmp	r3, #0
 800f288:	d160      	bne.n	800f34c <dcd_edpt_open+0x180>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_grxfsiz(4*fifo_size, ep_count);
 800f28a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	b29b      	uxth	r3, r3
 800f290:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f294:	4611      	mov	r1, r2
 800f296:	4618      	mov	r0, r3
 800f298:	f7ff fdb3 	bl	800ee02 <calc_grxfsiz>
 800f29c:	4603      	mov	r3, r0
 800f29e:	847b      	strh	r3, [r7, #34]	; 0x22

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz)
 800f2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d21b      	bcs.n	800f2e2 <dcd_edpt_open+0x116>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size/4);
 800f2aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2ac:	4a65      	ldr	r2, [pc, #404]	; (800f444 <dcd_edpt_open+0x278>)
 800f2ae:	8812      	ldrh	r2, [r2, #0]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	79fb      	ldrb	r3, [r7, #7]
 800f2b6:	4a60      	ldr	r2, [pc, #384]	; (800f438 <dcd_edpt_open+0x26c>)
 800f2b8:	011b      	lsls	r3, r3, #4
 800f2ba:	4413      	add	r3, r2
 800f2bc:	330c      	adds	r3, #12
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	089b      	lsrs	r3, r3, #2
 800f2c2:	4299      	cmp	r1, r3
 800f2c4:	d90a      	bls.n	800f2dc <dcd_edpt_open+0x110>
 800f2c6:	4b5d      	ldr	r3, [pc, #372]	; (800f43c <dcd_edpt_open+0x270>)
 800f2c8:	61fb      	str	r3, [r7, #28]
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f003 0301 	and.w	r3, r3, #1
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d000      	beq.n	800f2d8 <dcd_edpt_open+0x10c>
 800f2d6:	be00      	bkpt	0x0000
 800f2d8:	2300      	movs	r3, #0
 800f2da:	e0a9      	b.n	800f430 <dcd_edpt_open+0x264>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 800f2dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 800f2e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2e8:	3358      	adds	r3, #88	; 0x58
 800f2ea:	015b      	lsls	r3, r3, #5
 800f2ec:	4413      	add	r3, r2
 800f2ee:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	78db      	ldrb	r3, [r3, #3]
 800f2f4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	049b      	lsls	r3, r3, #18
 800f2fc:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	78db      	ldrb	r3, [r3, #3]
 800f302:	f003 0303 	and.w	r3, r3, #3
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d002      	beq.n	800f312 <dcd_edpt_open+0x146>
 800f30c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f310:	e000      	b.n	800f314 <dcd_edpt_open+0x148>
 800f312:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 800f314:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 800f316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f318:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 800f31a:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 800f31c:	431a      	orrs	r2, r3
 800f31e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f326:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f328:	3358      	adds	r3, #88	; 0x58
 800f32a:	015b      	lsls	r3, r3, #5
 800f32c:	440b      	add	r3, r1
 800f32e:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 800f330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f332:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800f336:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f33a:	3310      	adds	r3, #16
 800f33c:	2101      	movs	r1, #1
 800f33e:	fa01 f303 	lsl.w	r3, r1, r3
 800f342:	431a      	orrs	r2, r3
 800f344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f346:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 800f34a:	e070      	b.n	800f42e <dcd_edpt_open+0x262>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size/4);
 800f34c:	4b3d      	ldr	r3, [pc, #244]	; (800f444 <dcd_edpt_open+0x278>)
 800f34e:	881b      	ldrh	r3, [r3, #0]
 800f350:	461a      	mov	r2, r3
 800f352:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f354:	4413      	add	r3, r2
 800f356:	461a      	mov	r2, r3
 800f358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35c:	441a      	add	r2, r3
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	4935      	ldr	r1, [pc, #212]	; (800f438 <dcd_edpt_open+0x26c>)
 800f362:	011b      	lsls	r3, r3, #4
 800f364:	440b      	add	r3, r1
 800f366:	330c      	adds	r3, #12
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	089b      	lsrs	r3, r3, #2
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d90a      	bls.n	800f386 <dcd_edpt_open+0x1ba>
 800f370:	4b32      	ldr	r3, [pc, #200]	; (800f43c <dcd_edpt_open+0x270>)
 800f372:	627b      	str	r3, [r7, #36]	; 0x24
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f003 0301 	and.w	r3, r3, #1
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d000      	beq.n	800f382 <dcd_edpt_open+0x1b6>
 800f380:	be00      	bkpt	0x0000
 800f382:	2300      	movs	r3, #0
 800f384:	e054      	b.n	800f430 <dcd_edpt_open+0x264>

    _allocated_fifo_words_tx += fifo_size;
 800f386:	4b2f      	ldr	r3, [pc, #188]	; (800f444 <dcd_edpt_open+0x278>)
 800f388:	881a      	ldrh	r2, [r3, #0]
 800f38a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f38c:	4413      	add	r3, r2
 800f38e:	b29a      	uxth	r2, r3
 800f390:	4b2c      	ldr	r3, [pc, #176]	; (800f444 <dcd_edpt_open+0x278>)
 800f392:	801a      	strh	r2, [r3, #0]

    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %lu", fifo_size*4, _dwc2_controller[rhport].ep_fifo_size-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 800f394:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f396:	041b      	lsls	r3, r3, #16
 800f398:	4619      	mov	r1, r3
 800f39a:	79fb      	ldrb	r3, [r7, #7]
 800f39c:	4a26      	ldr	r2, [pc, #152]	; (800f438 <dcd_edpt_open+0x26c>)
 800f39e:	011b      	lsls	r3, r3, #4
 800f3a0:	4413      	add	r3, r2
 800f3a2:	330c      	adds	r3, #12
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	089b      	lsrs	r3, r3, #2
 800f3a8:	4a26      	ldr	r2, [pc, #152]	; (800f444 <dcd_edpt_open+0x278>)
 800f3aa:	8812      	ldrh	r2, [r2, #0]
 800f3ac:	1a9a      	subs	r2, r3, r2
 800f3ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	430a      	orrs	r2, r1
 800f3b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f3b8:	3340      	adds	r3, #64	; 0x40
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	440b      	add	r3, r1
 800f3be:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 800f3c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f3c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3c6:	3348      	adds	r3, #72	; 0x48
 800f3c8:	015b      	lsls	r3, r3, #5
 800f3ca:	4413      	add	r3, r2
 800f3cc:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 800f3ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f3d2:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 800f3d4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	78db      	ldrb	r3, [r3, #3]
 800f3dc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	78db      	ldrb	r3, [r3, #3]
 800f3ec:	f003 0303 	and.w	r3, r3, #3
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d002      	beq.n	800f3fc <dcd_edpt_open+0x230>
 800f3f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f3fa:	e000      	b.n	800f3fe <dcd_edpt_open+0x232>
 800f3fc:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 800f3fe:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 800f400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f402:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 800f404:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 800f406:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f40a:	430a      	orrs	r2, r1
 800f40c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f40e:	3348      	adds	r3, #72	; 0x48
 800f410:	015b      	lsls	r3, r3, #5
 800f412:	440b      	add	r3, r1
 800f414:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 800f416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f418:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800f41c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800f420:	2101      	movs	r1, #1
 800f422:	fa01 f202 	lsl.w	r2, r1, r2
 800f426:	431a      	orrs	r2, r3
 800f428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f42a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 800f42e:	2301      	movs	r3, #1
}
 800f430:	4618      	mov	r0, r3
 800f432:	3738      	adds	r7, #56	; 0x38
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	08010bd4 	.word	0x08010bd4
 800f43c:	e000edf0 	.word	0xe000edf0
 800f440:	240026b0 	.word	0x240026b0
 800f444:	240027d4 	.word	0x240027d4

0800f448 <dcd_edpt_xfer>:
  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
}

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 800f448:	b590      	push	{r4, r7, lr}
 800f44a:	b089      	sub	sp, #36	; 0x24
 800f44c:	af02      	add	r7, sp, #8
 800f44e:	603a      	str	r2, [r7, #0]
 800f450:	461a      	mov	r2, r3
 800f452:	4603      	mov	r3, r0
 800f454:	71fb      	strb	r3, [r7, #7]
 800f456:	460b      	mov	r3, r1
 800f458:	71bb      	strb	r3, [r7, #6]
 800f45a:	4613      	mov	r3, r2
 800f45c:	80bb      	strh	r3, [r7, #4]
 800f45e:	79bb      	ldrb	r3, [r7, #6]
 800f460:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800f462:	7b3b      	ldrb	r3, [r7, #12]
 800f464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f468:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800f46a:	757b      	strb	r3, [r7, #21]
 800f46c:	79bb      	ldrb	r3, [r7, #6]
 800f46e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800f470:	7b7b      	ldrb	r3, [r7, #13]
 800f472:	09db      	lsrs	r3, r3, #7
 800f474:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800f476:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 800f478:	7d7a      	ldrb	r2, [r7, #21]
 800f47a:	7d3b      	ldrb	r3, [r7, #20]
 800f47c:	0052      	lsls	r2, r2, #1
 800f47e:	4413      	add	r3, r2
 800f480:	011b      	lsls	r3, r3, #4
 800f482:	4a23      	ldr	r2, [pc, #140]	; (800f510 <dcd_edpt_xfer+0xc8>)
 800f484:	4413      	add	r3, r2
 800f486:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	683a      	ldr	r2, [r7, #0]
 800f48c:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	2200      	movs	r2, #0
 800f492:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	88ba      	ldrh	r2, [r7, #4]
 800f498:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0)
 800f49a:	7d7b      	ldrb	r3, [r7, #21]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d110      	bne.n	800f4c2 <dcd_edpt_xfer+0x7a>
  {
    ep0_pending[dir] = total_bytes;
 800f4a0:	7d3b      	ldrb	r3, [r7, #20]
 800f4a2:	491c      	ldr	r1, [pc, #112]	; (800f514 <dcd_edpt_xfer+0xcc>)
 800f4a4:	88ba      	ldrh	r2, [r7, #4]
 800f4a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 800f4aa:	7d3b      	ldrb	r3, [r7, #20]
 800f4ac:	4a19      	ldr	r2, [pc, #100]	; (800f514 <dcd_edpt_xfer+0xcc>)
 800f4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4b2:	7d3a      	ldrb	r2, [r7, #20]
 800f4b4:	7d79      	ldrb	r1, [r7, #21]
 800f4b6:	79f8      	ldrb	r0, [r7, #7]
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	f7ff fd8c 	bl	800efd8 <edpt_schedule_packets>
 800f4c0:	e020      	b.n	800f504 <dcd_edpt_xfer+0xbc>
  }
  else
  {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	895b      	ldrh	r3, [r3, #10]
 800f4c6:	88ba      	ldrh	r2, [r7, #4]
 800f4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4cc:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	895a      	ldrh	r2, [r3, #10]
 800f4d2:	88bb      	ldrh	r3, [r7, #4]
 800f4d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4d8:	fb01 f202 	mul.w	r2, r1, r2
 800f4dc:	1a9b      	subs	r3, r3, r2
 800f4de:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 800f4e0:	89fb      	ldrh	r3, [r7, #14]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d102      	bne.n	800f4ec <dcd_edpt_xfer+0xa4>
 800f4e6:	88bb      	ldrh	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d102      	bne.n	800f4f2 <dcd_edpt_xfer+0xaa>
 800f4ec:	8afb      	ldrh	r3, [r7, #22]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 800f4f2:	8afc      	ldrh	r4, [r7, #22]
 800f4f4:	7d3a      	ldrb	r2, [r7, #20]
 800f4f6:	7d79      	ldrb	r1, [r7, #21]
 800f4f8:	79f8      	ldrb	r0, [r7, #7]
 800f4fa:	88bb      	ldrh	r3, [r7, #4]
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	4623      	mov	r3, r4
 800f500:	f7ff fd6a 	bl	800efd8 <edpt_schedule_packets>
  }

  return true;
 800f504:	2301      	movs	r3, #1
}
 800f506:	4618      	mov	r0, r3
 800f508:	371c      	adds	r7, #28
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd90      	pop	{r4, r7, pc}
 800f50e:	bf00      	nop
 800f510:	240026b0 	.word	0x240026b0
 800f514:	240027d0 	.word	0x240027d0

0800f518 <dcd_edpt_disable>:

  return true;
}

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 800f518:	b480      	push	{r7}
 800f51a:	b089      	sub	sp, #36	; 0x24
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	4603      	mov	r3, r0
 800f520:	71fb      	strb	r3, [r7, #7]
 800f522:	460b      	mov	r3, r1
 800f524:	71bb      	strb	r3, [r7, #6]
 800f526:	4613      	mov	r3, r2
 800f528:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800f52a:	79fb      	ldrb	r3, [r7, #7]
 800f52c:	4a6e      	ldr	r2, [pc, #440]	; (800f6e8 <dcd_edpt_disable+0x1d0>)
 800f52e:	011b      	lsls	r3, r3, #4
 800f530:	4413      	add	r3, r2
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	61fb      	str	r3, [r7, #28]
 800f536:	79bb      	ldrb	r3, [r7, #6]
 800f538:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800f53a:	7bbb      	ldrb	r3, [r7, #14]
 800f53c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f540:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800f542:	76fb      	strb	r3, [r7, #27]
 800f544:	79bb      	ldrb	r3, [r7, #6]
 800f546:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800f548:	7bfb      	ldrb	r3, [r7, #15]
 800f54a:	09db      	lsrs	r3, r3, #7
 800f54c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800f54e:	76bb      	strb	r3, [r7, #26]

  if ( dir == TUSB_DIR_IN )
 800f550:	7ebb      	ldrb	r3, [r7, #26]
 800f552:	2b01      	cmp	r3, #1
 800f554:	d167      	bne.n	800f626 <dcd_edpt_disable+0x10e>
  {
    dwc2_epin_t* epin = dwc2->epin;
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f55c:	613b      	str	r3, [r7, #16]

    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA) )
 800f55e:	7efb      	ldrb	r3, [r7, #27]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d006      	beq.n	800f572 <dcd_edpt_disable+0x5a>
 800f564:	7efb      	ldrb	r3, [r7, #27]
 800f566:	015b      	lsls	r3, r3, #5
 800f568:	693a      	ldr	r2, [r7, #16]
 800f56a:	4413      	add	r3, r2
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	db13      	blt.n	800f59a <dcd_edpt_disable+0x82>
    {
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800f572:	7efb      	ldrb	r3, [r7, #27]
 800f574:	015b      	lsls	r3, r3, #5
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	4413      	add	r3, r2
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	797b      	ldrb	r3, [r7, #5]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d002      	beq.n	800f588 <dcd_edpt_disable+0x70>
 800f582:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 800f586:	e001      	b.n	800f58c <dcd_edpt_disable+0x74>
 800f588:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800f58c:	7efb      	ldrb	r3, [r7, #27]
 800f58e:	015b      	lsls	r3, r3, #5
 800f590:	6938      	ldr	r0, [r7, #16]
 800f592:	4403      	add	r3, r0
 800f594:	430a      	orrs	r2, r1
 800f596:	601a      	str	r2, [r3, #0]
 800f598:	e037      	b.n	800f60a <dcd_edpt_disable+0xf2>
    }
    else
    {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 800f59a:	7efb      	ldrb	r3, [r7, #27]
 800f59c:	015b      	lsls	r3, r3, #5
 800f59e:	693a      	ldr	r2, [r7, #16]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	7efb      	ldrb	r3, [r7, #27]
 800f5a6:	015b      	lsls	r3, r3, #5
 800f5a8:	6939      	ldr	r1, [r7, #16]
 800f5aa:	440b      	add	r3, r1
 800f5ac:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800f5b0:	601a      	str	r2, [r3, #0]
      while ( (epin[epnum].diepint & DIEPINT_INEPNE) == 0 ) {}
 800f5b2:	bf00      	nop
 800f5b4:	7efb      	ldrb	r3, [r7, #27]
 800f5b6:	015b      	lsls	r3, r3, #5
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	689b      	ldr	r3, [r3, #8]
 800f5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d0f6      	beq.n	800f5b4 <dcd_edpt_disable+0x9c>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800f5c6:	7efb      	ldrb	r3, [r7, #27]
 800f5c8:	015b      	lsls	r3, r3, #5
 800f5ca:	693a      	ldr	r2, [r7, #16]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	797b      	ldrb	r3, [r7, #5]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d001      	beq.n	800f5da <dcd_edpt_disable+0xc2>
 800f5d6:	4945      	ldr	r1, [pc, #276]	; (800f6ec <dcd_edpt_disable+0x1d4>)
 800f5d8:	e001      	b.n	800f5de <dcd_edpt_disable+0xc6>
 800f5da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f5de:	7efb      	ldrb	r3, [r7, #27]
 800f5e0:	015b      	lsls	r3, r3, #5
 800f5e2:	6938      	ldr	r0, [r7, #16]
 800f5e4:	4403      	add	r3, r0
 800f5e6:	430a      	orrs	r2, r1
 800f5e8:	601a      	str	r2, [r3, #0]
      while ( (epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0 ) {}
 800f5ea:	bf00      	nop
 800f5ec:	7efb      	ldrb	r3, [r7, #27]
 800f5ee:	015b      	lsls	r3, r3, #5
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	f003 0302 	and.w	r3, r3, #2
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d0f6      	beq.n	800f5ec <dcd_edpt_disable+0xd4>

      epin[epnum].diepint = DIEPINT_EPDISD;
 800f5fe:	7efb      	ldrb	r3, [r7, #27]
 800f600:	015b      	lsls	r3, r3, #5
 800f602:	693a      	ldr	r2, [r7, #16]
 800f604:	4413      	add	r3, r2
 800f606:	2202      	movs	r2, #2
 800f608:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 800f60a:	7efb      	ldrb	r3, [r7, #27]
 800f60c:	019b      	lsls	r3, r3, #6
 800f60e:	f043 0220 	orr.w	r2, r3, #32
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	611a      	str	r2, [r3, #16]
    while ( (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0 ) {}
 800f616:	bf00      	nop
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	691b      	ldr	r3, [r3, #16]
 800f61c:	f003 0320 	and.w	r3, r3, #32
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1f9      	bne.n	800f618 <dcd_edpt_disable+0x100>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 800f624:	e059      	b.n	800f6da <dcd_edpt_disable+0x1c2>
    dwc2_epout_t* epout = dwc2->epout;
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f62c:	617b      	str	r3, [r7, #20]
    if ( (epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA) )
 800f62e:	7efb      	ldrb	r3, [r7, #27]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d006      	beq.n	800f642 <dcd_edpt_disable+0x12a>
 800f634:	7efb      	ldrb	r3, [r7, #27]
 800f636:	015b      	lsls	r3, r3, #5
 800f638:	697a      	ldr	r2, [r7, #20]
 800f63a:	4413      	add	r3, r2
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	db12      	blt.n	800f668 <dcd_edpt_disable+0x150>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 800f642:	7efb      	ldrb	r3, [r7, #27]
 800f644:	015b      	lsls	r3, r3, #5
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	4413      	add	r3, r2
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	797b      	ldrb	r3, [r7, #5]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d002      	beq.n	800f658 <dcd_edpt_disable+0x140>
 800f652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f656:	e000      	b.n	800f65a <dcd_edpt_disable+0x142>
 800f658:	2100      	movs	r1, #0
 800f65a:	7efb      	ldrb	r3, [r7, #27]
 800f65c:	015b      	lsls	r3, r3, #5
 800f65e:	6978      	ldr	r0, [r7, #20]
 800f660:	4403      	add	r3, r0
 800f662:	430a      	orrs	r2, r1
 800f664:	601a      	str	r2, [r3, #0]
}
 800f666:	e038      	b.n	800f6da <dcd_edpt_disable+0x1c2>
      dwc2->dctl |= DCTL_SGONAK;
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f66e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ( (dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0 ) {}
 800f678:	bf00      	nop
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	695b      	ldr	r3, [r3, #20]
 800f67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f682:	2b00      	cmp	r3, #0
 800f684:	d0f9      	beq.n	800f67a <dcd_edpt_disable+0x162>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800f686:	7efb      	ldrb	r3, [r7, #27]
 800f688:	015b      	lsls	r3, r3, #5
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	4413      	add	r3, r2
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	797b      	ldrb	r3, [r7, #5]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <dcd_edpt_disable+0x182>
 800f696:	4915      	ldr	r1, [pc, #84]	; (800f6ec <dcd_edpt_disable+0x1d4>)
 800f698:	e001      	b.n	800f69e <dcd_edpt_disable+0x186>
 800f69a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f69e:	7efb      	ldrb	r3, [r7, #27]
 800f6a0:	015b      	lsls	r3, r3, #5
 800f6a2:	6978      	ldr	r0, [r7, #20]
 800f6a4:	4403      	add	r3, r0
 800f6a6:	430a      	orrs	r2, r1
 800f6a8:	601a      	str	r2, [r3, #0]
      while ( (epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0 ) {}
 800f6aa:	bf00      	nop
 800f6ac:	7efb      	ldrb	r3, [r7, #27]
 800f6ae:	015b      	lsls	r3, r3, #5
 800f6b0:	697a      	ldr	r2, [r7, #20]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	f003 0302 	and.w	r3, r3, #2
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d0f6      	beq.n	800f6ac <dcd_edpt_disable+0x194>
      epout[epnum].doepint = DOEPINT_EPDISD;
 800f6be:	7efb      	ldrb	r3, [r7, #27]
 800f6c0:	015b      	lsls	r3, r3, #5
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	2202      	movs	r2, #2
 800f6c8:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f6d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 800f6da:	bf00      	nop
 800f6dc:	3724      	adds	r7, #36	; 0x24
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	08010bd4 	.word	0x08010bd4
 800f6ec:	40200000 	.word	0x40200000

0800f6f0 <dcd_edpt_stall>:
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	460a      	mov	r2, r1
 800f6fa:	71fb      	strb	r3, [r7, #7]
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 800f700:	79b9      	ldrb	r1, [r7, #6]
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	2201      	movs	r2, #1
 800f706:	4618      	mov	r0, r3
 800f708:	f7ff ff06 	bl	800f518 <dcd_edpt_disable>
}
 800f70c:	bf00      	nop
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 800f714:	b480      	push	{r7}
 800f716:	b08d      	sub	sp, #52	; 0x34
 800f718:	af00      	add	r7, sp, #0
 800f71a:	4603      	mov	r3, r0
 800f71c:	6039      	str	r1, [r7, #0]
 800f71e:	71fb      	strb	r3, [r7, #7]
 800f720:	4613      	mov	r3, r2
 800f722:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 800f724:	79fb      	ldrb	r3, [r7, #7]
 800f726:	4a27      	ldr	r2, [pc, #156]	; (800f7c4 <read_fifo_packet+0xb0>)
 800f728:	011b      	lsls	r3, r3, #4
 800f72a:	4413      	add	r3, r2
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t * rx_fifo = dwc2->fifo[0];
 800f730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f736:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 800f738:	88bb      	ldrh	r3, [r7, #4]
 800f73a:	089b      	lsrs	r3, r3, #2
 800f73c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while(full_words--)
 800f73e:	e00b      	b.n	800f758 <read_fifo_packet+0x44>
  {
    tu_unaligned_write32(dst, *rx_fifo);
 800f740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	683a      	ldr	r2, [r7, #0]
 800f746:	61ba      	str	r2, [r7, #24]
 800f748:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	601a      	str	r2, [r3, #0]
 800f750:	bf00      	nop
    dst += 4;
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	3304      	adds	r3, #4
 800f756:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800f758:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f75a:	1e5a      	subs	r2, r3, #1
 800f75c:	85fa      	strh	r2, [r7, #46]	; 0x2e
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1ee      	bne.n	800f740 <read_fifo_packet+0x2c>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 800f762:	88bb      	ldrh	r3, [r7, #4]
 800f764:	b2db      	uxtb	r3, r3
 800f766:	f003 0303 	and.w	r3, r3, #3
 800f76a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ( bytes_rem != 0 )
 800f76e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f772:	2b00      	cmp	r3, #0
 800f774:	d020      	beq.n	800f7b8 <read_fifo_packet+0xa4>
  {
    uint32_t const tmp = *rx_fifo;
 800f776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	61fb      	str	r3, [r7, #28]
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	701a      	strb	r2, [r3, #0]
    if ( bytes_rem > 1 ) dst[1] = tu_u32_byte1(tmp);
 800f788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d907      	bls.n	800f7a0 <read_fifo_packet+0x8c>
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	3301      	adds	r3, #1
 800f794:	69fa      	ldr	r2, [r7, #28]
 800f796:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	0a12      	lsrs	r2, r2, #8
 800f79c:	b2d2      	uxtb	r2, r2
 800f79e:	701a      	strb	r2, [r3, #0]
    if ( bytes_rem > 2 ) dst[2] = tu_u32_byte2(tmp);
 800f7a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d907      	bls.n	800f7b8 <read_fifo_packet+0xa4>
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	3302      	adds	r3, #2
 800f7ac:	69fa      	ldr	r2, [r7, #28]
 800f7ae:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800f7b0:	68ba      	ldr	r2, [r7, #8]
 800f7b2:	0c12      	lsrs	r2, r2, #16
 800f7b4:	b2d2      	uxtb	r2, r2
 800f7b6:	701a      	strb	r2, [r3, #0]
  }
}
 800f7b8:	bf00      	nop
 800f7ba:	3734      	adds	r7, #52	; 0x34
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr
 800f7c4:	08010bd4 	.word	0x08010bd4

0800f7c8 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const * src, uint16_t len)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b089      	sub	sp, #36	; 0x24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	603a      	str	r2, [r7, #0]
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	71fb      	strb	r3, [r7, #7]
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	71bb      	strb	r3, [r7, #6]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 800f7de:	79fb      	ldrb	r3, [r7, #7]
 800f7e0:	4a23      	ldr	r2, [pc, #140]	; (800f870 <write_fifo_packet+0xa8>)
 800f7e2:	011b      	lsls	r3, r3, #4
 800f7e4:	4413      	add	r3, r2
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	617b      	str	r3, [r7, #20]
  volatile uint32_t * tx_fifo = dwc2->fifo[fifo_num];
 800f7ea:	79bb      	ldrb	r3, [r7, #6]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	031b      	lsls	r3, r3, #12
 800f7f0:	697a      	ldr	r2, [r7, #20]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 800f7f6:	88bb      	ldrh	r3, [r7, #4]
 800f7f8:	089b      	lsrs	r3, r3, #2
 800f7fa:	83fb      	strh	r3, [r7, #30]
  while(full_words--)
 800f7fc:	e008      	b.n	800f810 <write_fifo_packet+0x48>
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(src);
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	601a      	str	r2, [r3, #0]
    src += 4;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	3304      	adds	r3, #4
 800f80e:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800f810:	8bfb      	ldrh	r3, [r7, #30]
 800f812:	1e5a      	subs	r2, r3, #1
 800f814:	83fa      	strh	r2, [r7, #30]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d1f1      	bne.n	800f7fe <write_fifo_packet+0x36>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 800f81a:	88bb      	ldrh	r3, [r7, #4]
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	f003 0303 	and.w	r3, r3, #3
 800f822:	73fb      	strb	r3, [r7, #15]
  if ( bytes_rem )
 800f824:	7bfb      	ldrb	r3, [r7, #15]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d01b      	beq.n	800f862 <write_fifo_packet+0x9a>
  {
    uint32_t tmp_word = src[0];
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	61bb      	str	r3, [r7, #24]
    if ( bytes_rem > 1 ) tmp_word |= (src[1] << 8);
 800f830:	7bfb      	ldrb	r3, [r7, #15]
 800f832:	2b01      	cmp	r3, #1
 800f834:	d907      	bls.n	800f846 <write_fifo_packet+0x7e>
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	3301      	adds	r3, #1
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	021b      	lsls	r3, r3, #8
 800f83e:	461a      	mov	r2, r3
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	4313      	orrs	r3, r2
 800f844:	61bb      	str	r3, [r7, #24]
    if ( bytes_rem > 2 ) tmp_word |= (src[2] << 16);
 800f846:	7bfb      	ldrb	r3, [r7, #15]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d907      	bls.n	800f85c <write_fifo_packet+0x94>
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	3302      	adds	r3, #2
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	041b      	lsls	r3, r3, #16
 800f854:	461a      	mov	r2, r3
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	4313      	orrs	r3, r2
 800f85a:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	69ba      	ldr	r2, [r7, #24]
 800f860:	601a      	str	r2, [r3, #0]
  }
}
 800f862:	bf00      	nop
 800f864:	3724      	adds	r7, #36	; 0x24
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	08010bd4 	.word	0x08010bd4

0800f874 <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b08c      	sub	sp, #48	; 0x30
 800f878:	af00      	add	r7, sp, #0
 800f87a:	4603      	mov	r3, r0
 800f87c:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 800f87e:	79fb      	ldrb	r3, [r7, #7]
 800f880:	4a5d      	ldr	r2, [pc, #372]	; (800f9f8 <handle_rxflvl_irq+0x184>)
 800f882:	011b      	lsls	r3, r3, #4
 800f884:	4413      	add	r3, r2
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const * rx_fifo = dwc2->fifo[0];
 800f88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f890:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 800f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f894:	6a1b      	ldr	r3, [r3, #32]
 800f896:	623b      	str	r3, [r7, #32]
  uint8_t  const pktsts   = (ctl_word & GRXSTSP_PKTSTS_Msk ) >> GRXSTSP_PKTSTS_Pos;
 800f898:	6a3b      	ldr	r3, [r7, #32]
 800f89a:	0c5b      	lsrs	r3, r3, #17
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	f003 030f 	and.w	r3, r3, #15
 800f8a2:	77fb      	strb	r3, [r7, #31]
  uint8_t  const epnum    = (ctl_word & GRXSTSP_EPNUM_Msk  ) >> GRXSTSP_EPNUM_Pos;
 800f8a4:	6a3b      	ldr	r3, [r7, #32]
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	f003 030f 	and.w	r3, r3, #15
 800f8ac:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt     = (ctl_word & GRXSTSP_BCNT_Msk   ) >> GRXSTSP_BCNT_Pos;
 800f8ae:	6a3b      	ldr	r3, [r7, #32]
 800f8b0:	091b      	lsrs	r3, r3, #4
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8b8:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 800f8ba:	7fbb      	ldrb	r3, [r7, #30]
 800f8bc:	3358      	adds	r3, #88	; 0x58
 800f8be:	015b      	lsls	r3, r3, #5
 800f8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8c2:	4413      	add	r3, r2
 800f8c4:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch ( pktsts )
 800f8c6:	7ffb      	ldrb	r3, [r7, #31]
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	2b05      	cmp	r3, #5
 800f8cc:	d87e      	bhi.n	800f9cc <handle_rxflvl_irq+0x158>
 800f8ce:	a201      	add	r2, pc, #4	; (adr r2, 800f8d4 <handle_rxflvl_irq+0x60>)
 800f8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d4:	0800f9e1 	.word	0x0800f9e1
 800f8d8:	0800f90d 	.word	0x0800f90d
 800f8dc:	0800f987 	.word	0x0800f987
 800f8e0:	0800f8ff 	.word	0x0800f8ff
 800f8e4:	0800f9cd 	.word	0x0800f9cd
 800f8e8:	0800f8ed 	.word	0x0800f8ed
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4a42      	ldr	r2, [pc, #264]	; (800f9fc <handle_rxflvl_irq+0x188>)
 800f8f2:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a40      	ldr	r2, [pc, #256]	; (800f9fc <handle_rxflvl_irq+0x188>)
 800f8fa:	6053      	str	r3, [r2, #4]
    break;
 800f8fc:	e077      	b.n	800f9ee <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	691b      	ldr	r3, [r3, #16]
 800f902:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	611a      	str	r2, [r3, #16]
    break;
 800f90a:	e070      	b.n	800f9ee <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_OUTRX:
    {
      // Out packet received
      xfer_ctl_t *xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800f90c:	7fbb      	ldrb	r3, [r7, #30]
 800f90e:	015b      	lsls	r3, r3, #5
 800f910:	4a3b      	ldr	r2, [pc, #236]	; (800fa00 <handle_rxflvl_irq+0x18c>)
 800f912:	4413      	add	r3, r2
 800f914:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if ( xfer->ff )
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d007      	beq.n	800f92e <handle_rxflvl_irq+0xba>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	8bba      	ldrh	r2, [r7, #28]
 800f924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f926:	4618      	mov	r0, r3
 800f928:	f7fe fca7 	bl	800e27a <tu_fifo_write_n_const_addr_full_words>
 800f92c:	e00c      	b.n	800f948 <handle_rxflvl_irq+0xd4>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	6819      	ldr	r1, [r3, #0]
 800f932:	8bba      	ldrh	r2, [r7, #28]
 800f934:	79fb      	ldrb	r3, [r7, #7]
 800f936:	4618      	mov	r0, r3
 800f938:	f7ff feec 	bl	800f714 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	8bbb      	ldrh	r3, [r7, #28]
 800f942:	441a      	add	r2, r3
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if ( bcnt < xfer->max_size )
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	895b      	ldrh	r3, [r3, #10]
 800f94c:	8bba      	ldrh	r2, [r7, #28]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d248      	bcs.n	800f9e4 <handle_rxflvl_irq+0x170>
      {
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	691b      	ldr	r3, [r3, #16]
 800f956:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	891a      	ldrh	r2, [r3, #8]
 800f95e:	b28b      	uxth	r3, r1
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	b29a      	uxth	r2, r3
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	811a      	strh	r2, [r3, #8]
        if ( epnum == 0 )
 800f968:	7fbb      	ldrb	r3, [r7, #30]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d13a      	bne.n	800f9e4 <handle_rxflvl_irq+0x170>
        {
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	891a      	ldrh	r2, [r3, #8]
 800f972:	4b24      	ldr	r3, [pc, #144]	; (800fa04 <handle_rxflvl_irq+0x190>)
 800f974:	881b      	ldrh	r3, [r3, #0]
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	b29a      	uxth	r2, r3
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 800f97e:	4b21      	ldr	r3, [pc, #132]	; (800fa04 <handle_rxflvl_irq+0x190>)
 800f980:	2200      	movs	r2, #0
 800f982:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 800f984:	e02e      	b.n	800f9e4 <handle_rxflvl_irq+0x170>
        // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
        // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
        // XFRC complete is additionally generated when
        // - setup packet is received
        // - complete the data stage of control write is complete
        if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 800f986:	7fbb      	ldrb	r3, [r7, #30]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d12d      	bne.n	800f9e8 <handle_rxflvl_irq+0x174>
 800f98c:	8bbb      	ldrh	r3, [r7, #28]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d12a      	bne.n	800f9e8 <handle_rxflvl_irq+0x174>
 800f992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	4a1c      	ldr	r2, [pc, #112]	; (800fa08 <handle_rxflvl_irq+0x194>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d925      	bls.n	800f9e8 <handle_rxflvl_irq+0x174>
        {
          uint32_t doepint = epout->doepint;
 800f99c:	69bb      	ldr	r3, [r7, #24]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	617b      	str	r3, [r7, #20]

          if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR))
 800f9a2:	697a      	ldr	r2, [r7, #20]
 800f9a4:	f248 0320 	movw	r3, #32800	; 0x8020
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d01c      	beq.n	800f9e8 <handle_rxflvl_irq+0x174>
          {
            // skip this "no-data" transfer complete event
            // Note: STPKTRX will be clear later by setup received handler
            uint32_t clear_flags = DOEPINT_XFRC;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	f003 0320 	and.w	r3, r3, #32
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <handle_rxflvl_irq+0x150>
 800f9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9be:	f043 0320 	orr.w	r3, r3, #32
 800f9c2:	62fb      	str	r3, [r7, #44]	; 0x2c

            epout->doepint = clear_flags;
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9c8:	609a      	str	r2, [r3, #8]

            // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
          }
        }
    break;
 800f9ca:	e00d      	b.n	800f9e8 <handle_rxflvl_irq+0x174>

    default:    // Invalid
      TU_BREAKPOINT();
 800f9cc:	4b0f      	ldr	r3, [pc, #60]	; (800fa0c <handle_rxflvl_irq+0x198>)
 800f9ce:	60fb      	str	r3, [r7, #12]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f003 0301 	and.w	r3, r3, #1
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d007      	beq.n	800f9ec <handle_rxflvl_irq+0x178>
 800f9dc:	be00      	bkpt	0x0000
    break;
 800f9de:	e005      	b.n	800f9ec <handle_rxflvl_irq+0x178>
    case GRXSTS_PKTSTS_GLOBALOUTNAK: break;
 800f9e0:	bf00      	nop
 800f9e2:	e004      	b.n	800f9ee <handle_rxflvl_irq+0x17a>
    break;
 800f9e4:	bf00      	nop
 800f9e6:	e002      	b.n	800f9ee <handle_rxflvl_irq+0x17a>
    break;
 800f9e8:	bf00      	nop
 800f9ea:	e000      	b.n	800f9ee <handle_rxflvl_irq+0x17a>
    break;
 800f9ec:	bf00      	nop
  }
}
 800f9ee:	bf00      	nop
 800f9f0:	3730      	adds	r7, #48	; 0x30
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	08010bd4 	.word	0x08010bd4
 800f9fc:	240026a8 	.word	0x240026a8
 800fa00:	240026b0 	.word	0x240026b0
 800fa04:	240027d0 	.word	0x240027d0
 800fa08:	4f543009 	.word	0x4f543009
 800fa0c:	e000edf0 	.word	0xe000edf0

0800fa10 <handle_epout_irq>:

static void handle_epout_irq (uint8_t rhport)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b096      	sub	sp, #88	; 0x58
 800fa14:	af02      	add	r7, sp, #8
 800fa16:	4603      	mov	r3, r0
 800fa18:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 800fa1a:	79fb      	ldrb	r3, [r7, #7]
 800fa1c:	4a60      	ldr	r2, [pc, #384]	; (800fba0 <handle_epout_irq+0x190>)
 800fa1e:	011b      	lsls	r3, r3, #4
 800fa20:	4413      	add	r3, r2
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800fa26:	79fb      	ldrb	r3, [r7, #7]
 800fa28:	4a5d      	ldr	r2, [pc, #372]	; (800fba0 <handle_epout_irq+0x190>)
 800fa2a:	011b      	lsls	r3, r3, #4
 800fa2c:	4413      	add	r3, r2
 800fa2e:	3308      	adds	r3, #8
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < ep_count; n++ )
 800fa36:	2300      	movs	r3, #0
 800fa38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fa3c:	e0a4      	b.n	800fb88 <handle_epout_irq+0x178>
  {
    if ( dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n) )
 800fa3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa40:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800fa44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa48:	3310      	adds	r3, #16
 800fa4a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa4e:	f003 0301 	and.w	r3, r3, #1
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f000 8093 	beq.w	800fb7e <handle_epout_irq+0x16e>
    {
      dwc2_epout_t* epout = &dwc2->epout[n];
 800fa58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa5c:	3358      	adds	r3, #88	; 0x58
 800fa5e:	015b      	lsls	r3, r3, #5
 800fa60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa62:	4413      	add	r3, r2
 800fa64:	63fb      	str	r3, [r7, #60]	; 0x3c

      uint32_t const doepint = epout->doepint;
 800fa66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa68:	689b      	ldr	r3, [r3, #8]
 800fa6a:	63bb      	str	r3, [r7, #56]	; 0x38

      // SETUP packet Setup Phase done.
      if ( doepint & DOEPINT_STUP )
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6e:	f003 0308 	and.w	r3, r3, #8
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d034      	beq.n	800fae0 <handle_epout_irq+0xd0>
      {
        uint32_t clear_flag = DOEPINT_STUP;
 800fa76:	2308      	movs	r3, #8
 800fa78:	64bb      	str	r3, [r7, #72]	; 0x48

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d008      	beq.n	800fa96 <handle_epout_irq+0x86>
 800fa84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa88:	4a46      	ldr	r2, [pc, #280]	; (800fba4 <handle_epout_irq+0x194>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d903      	bls.n	800fa96 <handle_epout_irq+0x86>
        {
          clear_flag |= DOEPINT_STPKTRX;
 800fa8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa94:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        epout->doepint = clear_flag;
 800fa96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa9a:	609a      	str	r2, [r3, #8]
 800fa9c:	79fb      	ldrb	r3, [r7, #7]
 800fa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800faa2:	4b41      	ldr	r3, [pc, #260]	; (800fba8 <handle_epout_irq+0x198>)
 800faa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800faa6:	2301      	movs	r3, #1
 800faa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 800faac:	f107 0314 	add.w	r3, r7, #20
 800fab0:	2200      	movs	r2, #0
 800fab2:	601a      	str	r2, [r3, #0]
 800fab4:	605a      	str	r2, [r3, #4]
 800fab6:	609a      	str	r2, [r3, #8]
 800fab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fabc:	753b      	strb	r3, [r7, #20]
 800fabe:	2306      	movs	r3, #6
 800fac0:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800fac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fac4:	f107 0318 	add.w	r3, r7, #24
 800fac8:	6810      	ldr	r0, [r2, #0]
 800faca:	6851      	ldr	r1, [r2, #4]
 800facc:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800face:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800fad2:	f107 0314 	add.w	r3, r7, #20
 800fad6:	4611      	mov	r1, r2
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fe fc61 	bl	800e3a0 <dcd_event_handler>
}
 800fade:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
      }

      // OUT XFER complete
      if ( epout->doepint & DOEPINT_XFRC )
 800fae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	f003 0301 	and.w	r3, r3, #1
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d048      	beq.n	800fb7e <handle_epout_irq+0x16e>
      {
        epout->doepint = DOEPINT_XFRC;
 800faec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faee:	2201      	movs	r2, #1
 800faf0:	609a      	str	r2, [r3, #8]

        xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 800faf2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800faf6:	015b      	lsls	r3, r3, #5
 800faf8:	4a2c      	ldr	r2, [pc, #176]	; (800fbac <handle_epout_irq+0x19c>)
 800fafa:	4413      	add	r3, r2
 800fafc:	637b      	str	r3, [r7, #52]	; 0x34

        // EP0 can only handle one packet
        if ( (n == 0) && ep0_pending[TUSB_DIR_OUT] )
 800fafe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d10e      	bne.n	800fb24 <handle_epout_irq+0x114>
 800fb06:	4b2a      	ldr	r3, [pc, #168]	; (800fbb0 <handle_epout_irq+0x1a0>)
 800fb08:	881b      	ldrh	r3, [r3, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00a      	beq.n	800fb24 <handle_epout_irq+0x114>
        {
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 800fb0e:	4b28      	ldr	r3, [pc, #160]	; (800fbb0 <handle_epout_irq+0x1a0>)
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 800fb16:	79f8      	ldrb	r0, [r7, #7]
 800fb18:	9300      	str	r3, [sp, #0]
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f7ff fa5b 	bl	800efd8 <edpt_schedule_packets>
 800fb22:	e02c      	b.n	800fb7e <handle_epout_irq+0x16e>
        }
        else
        {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800fb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb26:	891b      	ldrh	r3, [r3, #8]
 800fb28:	461a      	mov	r2, r3
 800fb2a:	79fb      	ldrb	r3, [r7, #7]
 800fb2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fb30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb34:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800fb38:	627a      	str	r2, [r7, #36]	; 0x24
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fb40:	2301      	movs	r3, #1
 800fb42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800fb46:	f107 0308 	add.w	r3, r7, #8
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	601a      	str	r2, [r3, #0]
 800fb4e:	605a      	str	r2, [r3, #4]
 800fb50:	609a      	str	r2, [r3, #8]
 800fb52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800fb56:	723b      	strb	r3, [r7, #8]
 800fb58:	2307      	movs	r3, #7
 800fb5a:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800fb5c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fb60:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800fb66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb6a:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800fb6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fb70:	f107 0308 	add.w	r3, r7, #8
 800fb74:	4611      	mov	r1, r2
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fe fc12 	bl	800e3a0 <dcd_event_handler>
}
 800fb7c:	bf00      	nop
  for ( uint8_t n = 0; n < ep_count; n++ )
 800fb7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb82:	3301      	adds	r3, #1
 800fb84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fb88:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fb8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb90:	429a      	cmp	r2, r3
 800fb92:	f4ff af54 	bcc.w	800fa3e <handle_epout_irq+0x2e>
        }
      }
    }
  }
}
 800fb96:	bf00      	nop
 800fb98:	bf00      	nop
 800fb9a:	3750      	adds	r7, #80	; 0x50
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	08010bd4 	.word	0x08010bd4
 800fba4:	4f543009 	.word	0x4f543009
 800fba8:	240026a8 	.word	0x240026a8
 800fbac:	240026b0 	.word	0x240026b0
 800fbb0:	240027d0 	.word	0x240027d0

0800fbb4 <handle_epin_irq>:

static void handle_epin_irq (uint8_t rhport)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b094      	sub	sp, #80	; 0x50
 800fbb8:	af02      	add	r7, sp, #8
 800fbba:	4603      	mov	r3, r0
 800fbbc:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 800fbbe:	79fb      	ldrb	r3, [r7, #7]
 800fbc0:	4a88      	ldr	r2, [pc, #544]	; (800fde4 <handle_epin_irq+0x230>)
 800fbc2:	011b      	lsls	r3, r3, #4
 800fbc4:	4413      	add	r3, r2
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800fbca:	79fb      	ldrb	r3, [r7, #7]
 800fbcc:	4a85      	ldr	r2, [pc, #532]	; (800fde4 <handle_epin_irq+0x230>)
 800fbce:	011b      	lsls	r3, r3, #4
 800fbd0:	4413      	add	r3, r2
 800fbd2:	3308      	adds	r3, #8
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  dwc2_epin_t* epin      = dwc2->epin;
 800fbda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe0:	63bb      	str	r3, [r7, #56]	; 0x38

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < ep_count; n++ )
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fbe8:	e0f0      	b.n	800fdcc <handle_epin_irq+0x218>
  {
    if ( dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n) )
 800fbea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbec:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800fbf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fbf4:	fa22 f303 	lsr.w	r3, r2, r3
 800fbf8:	f003 0301 	and.w	r3, r3, #1
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 80e0 	beq.w	800fdc2 <handle_epin_irq+0x20e>
    {
      // IN XFER complete (entire xfer).
      xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 800fc02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fc06:	015b      	lsls	r3, r3, #5
 800fc08:	3310      	adds	r3, #16
 800fc0a:	4a77      	ldr	r2, [pc, #476]	; (800fde8 <handle_epin_irq+0x234>)
 800fc0c:	4413      	add	r3, r2
 800fc0e:	637b      	str	r3, [r7, #52]	; 0x34

      if ( epin[n].diepint & DIEPINT_XFRC )
 800fc10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fc14:	015b      	lsls	r3, r3, #5
 800fc16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc18:	4413      	add	r3, r2
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	f003 0301 	and.w	r3, r3, #1
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d046      	beq.n	800fcb2 <handle_epin_irq+0xfe>
      {
        epin[n].diepint = DIEPINT_XFRC;
 800fc24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fc28:	015b      	lsls	r3, r3, #5
 800fc2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc2c:	4413      	add	r3, r2
 800fc2e:	2201      	movs	r2, #1
 800fc30:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ( (n == 0) && ep0_pending[TUSB_DIR_IN] )
 800fc32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10e      	bne.n	800fc58 <handle_epin_irq+0xa4>
 800fc3a:	4b6c      	ldr	r3, [pc, #432]	; (800fdec <handle_epin_irq+0x238>)
 800fc3c:	885b      	ldrh	r3, [r3, #2]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00a      	beq.n	800fc58 <handle_epin_irq+0xa4>
        {
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 800fc42:	4b6a      	ldr	r3, [pc, #424]	; (800fdec <handle_epin_irq+0x238>)
 800fc44:	885b      	ldrh	r3, [r3, #2]
 800fc46:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800fc4a:	79f8      	ldrb	r0, [r7, #7]
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	2301      	movs	r3, #1
 800fc50:	2201      	movs	r2, #1
 800fc52:	f7ff f9c1 	bl	800efd8 <edpt_schedule_packets>
 800fc56:	e02c      	b.n	800fcb2 <handle_epin_irq+0xfe>
        }
        else
        {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800fc58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fc5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fc60:	b2d9      	uxtb	r1, r3
 800fc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc64:	891b      	ldrh	r3, [r3, #8]
 800fc66:	461a      	mov	r2, r3
 800fc68:	79fb      	ldrb	r3, [r7, #7]
 800fc6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc6e:	460b      	mov	r3, r1
 800fc70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc74:	623a      	str	r2, [r7, #32]
 800fc76:	2300      	movs	r3, #0
 800fc78:	77fb      	strb	r3, [r7, #31]
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800fc7e:	f107 030c 	add.w	r3, r7, #12
 800fc82:	2200      	movs	r2, #0
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	605a      	str	r2, [r3, #4]
 800fc88:	609a      	str	r2, [r3, #8]
 800fc8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc8e:	733b      	strb	r3, [r7, #12]
 800fc90:	2307      	movs	r3, #7
 800fc92:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 800fc94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc98:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 800fc9e:	7ffb      	ldrb	r3, [r7, #31]
 800fca0:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 800fca2:	7fba      	ldrb	r2, [r7, #30]
 800fca4:	f107 030c 	add.w	r3, r7, #12
 800fca8:	4611      	mov	r1, r2
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fe fb78 	bl	800e3a0 <dcd_event_handler>
}
 800fcb0:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n)) )
 800fcb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fcb6:	015b      	lsls	r3, r3, #5
 800fcb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcba:	4413      	add	r3, r2
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d07d      	beq.n	800fdc2 <handle_epin_irq+0x20e>
 800fcc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcc8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 800fccc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800fcd0:	2101      	movs	r1, #1
 800fcd2:	fa01 f202 	lsl.w	r2, r1, r2
 800fcd6:	4013      	ands	r3, r2
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d072      	beq.n	800fdc2 <handle_epin_irq+0x20e>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 800fcdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fce0:	015b      	lsls	r3, r3, #5
 800fce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fce4:	4413      	add	r3, r2
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	0cdb      	lsrs	r3, r3, #19
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fcf0:	867b      	strh	r3, [r7, #50]	; 0x32

        // Process every single packet (only whole packets can be written to fifo)
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800fcf8:	e045      	b.n	800fd86 <handle_epin_irq+0x1d2>
        {
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 800fcfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fcfe:	015b      	lsls	r3, r3, #5
 800fd00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd02:	4413      	add	r3, r2
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	863b      	strh	r3, [r7, #48]	; 0x30

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 800fd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd0a:	895a      	ldrh	r2, [r3, #10]
 800fd0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fd0e:	83bb      	strh	r3, [r7, #28]
 800fd10:	4613      	mov	r3, r2
 800fd12:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fd14:	8bba      	ldrh	r2, [r7, #28]
 800fd16:	8b7b      	ldrh	r3, [r7, #26]
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	bf28      	it	cs
 800fd1c:	4613      	movcs	r3, r2
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	85fb      	strh	r3, [r7, #46]	; 0x2e

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 800fd22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fd28:	015b      	lsls	r3, r3, #5
 800fd2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd2c:	440b      	add	r3, r1
 800fd2e:	699b      	ldr	r3, [r3, #24]
 800fd30:	0099      	lsls	r1, r3, #2
 800fd32:	4b2f      	ldr	r3, [pc, #188]	; (800fdf0 <handle_epin_irq+0x23c>)
 800fd34:	400b      	ands	r3, r1
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d82b      	bhi.n	800fd92 <handle_epin_irq+0x1de>

          // Push packet to Tx-FIFO
          if ( xfer->ff )
 800fd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00e      	beq.n	800fd60 <handle_epin_irq+0x1ac>
          {
            volatile uint32_t *tx_fifo = dwc2->fifo[n];
 800fd42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fd46:	3301      	adds	r3, #1
 800fd48:	031b      	lsls	r3, r3, #12
 800fd4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd4c:	4413      	add	r3, r2
 800fd4e:	62bb      	str	r3, [r7, #40]	; 0x28
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 800fd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fe fa27 	bl	800e1ac <tu_fifo_read_n_const_addr_full_words>
 800fd5e:	e00d      	b.n	800fd7c <handle_epin_irq+0x1c8>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 800fd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd66:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800fd6a:	79f8      	ldrb	r0, [r7, #7]
 800fd6c:	f7ff fd2c 	bl	800f7c8 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 800fd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd76:	441a      	add	r2, r3
 800fd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7a:	601a      	str	r2, [r3, #0]
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 800fd7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fd80:	3301      	adds	r3, #1
 800fd82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800fd86:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fd8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d3b4      	bcc.n	800fcfa <handle_epin_irq+0x146>
 800fd90:	e000      	b.n	800fd94 <handle_epin_irq+0x1e0>
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 800fd92:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if ( ((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0 )
 800fd94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fd98:	015b      	lsls	r3, r3, #5
 800fd9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd9c:	4413      	add	r3, r2
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d10c      	bne.n	800fdc2 <handle_epin_irq+0x20e>
        {
          dwc2->diepempmsk &= ~(1 << n);
 800fda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdaa:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 800fdae:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800fdb2:	2101      	movs	r1, #1
 800fdb4:	fa01 f202 	lsl.w	r2, r1, r2
 800fdb8:	43d2      	mvns	r2, r2
 800fdba:	401a      	ands	r2, r3
 800fdbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdbe:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for ( uint8_t n = 0; n < ep_count; n++ )
 800fdc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fdcc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800fdd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	f4ff af08 	bcc.w	800fbea <handle_epin_irq+0x36>
        }
      }
    }
  }
}
 800fdda:	bf00      	nop
 800fddc:	bf00      	nop
 800fdde:	3748      	adds	r7, #72	; 0x48
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	08010bd4 	.word	0x08010bd4
 800fde8:	240026b0 	.word	0x240026b0
 800fdec:	240027d0 	.word	0x240027d0
 800fdf0:	0003fffc 	.word	0x0003fffc

0800fdf4 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b09c      	sub	sp, #112	; 0x70
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800fdfe:	79fb      	ldrb	r3, [r7, #7]
 800fe00:	4aaa      	ldr	r2, [pc, #680]	; (80100ac <dcd_int_handler+0x2b8>)
 800fe02:	011b      	lsls	r3, r3, #4
 800fe04:	4413      	add	r3, r2
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	66bb      	str	r3, [r7, #104]	; 0x68

  uint32_t const int_mask = dwc2->gintmsk;
 800fe0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe0c:	699b      	ldr	r3, [r3, #24]
 800fe0e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t const int_status = dwc2->gintsts & int_mask;
 800fe10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe12:	695b      	ldr	r3, [r3, #20]
 800fe14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe16:	4013      	ands	r3, r2
 800fe18:	663b      	str	r3, [r7, #96]	; 0x60

  if(int_status & GINTSTS_USBRST)
 800fe1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d007      	beq.n	800fe34 <dcd_int_handler+0x40>
  {
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800fe24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe2a:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 800fe2c:	79fb      	ldrb	r3, [r7, #7]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7ff f842 	bl	800eeb8 <bus_reset>
  }

  if(int_status & GINTSTS_ENUMDNE)
 800fe34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d03b      	beq.n	800feb6 <dcd_int_handler+0xc2>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    dwc2->gintsts = GINTSTS_ENUMDNE;
 800fe3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fe44:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos)
 800fe46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe48:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800fe4c:	085b      	lsrs	r3, r3, #1
 800fe4e:	f003 0303 	and.w	r3, r3, #3
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d002      	beq.n	800fe5c <dcd_int_handler+0x68>
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d004      	beq.n	800fe64 <dcd_int_handler+0x70>
 800fe5a:	e007      	b.n	800fe6c <dcd_int_handler+0x78>
    {
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 800fe5c:	2302      	movs	r3, #2
 800fe5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800fe62:	e007      	b.n	800fe74 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 800fe64:	2301      	movs	r3, #1
 800fe66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800fe6a:	e003      	b.n	800fe74 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800fe72:	bf00      	nop
 800fe74:	79fb      	ldrb	r3, [r7, #7]
 800fe76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800fe7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fe7e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800fe82:	2301      	movs	r3, #1
 800fe84:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 800fe88:	f107 0318 	add.w	r3, r7, #24
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	601a      	str	r2, [r3, #0]
 800fe90:	605a      	str	r2, [r3, #4]
 800fe92:	609a      	str	r2, [r3, #8]
 800fe94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe98:	763b      	strb	r3, [r7, #24]
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	767b      	strb	r3, [r7, #25]
  event.bus_reset.speed = speed;
 800fe9e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800fea2:	773b      	strb	r3, [r7, #28]
  dcd_event_handler(&event, in_isr);
 800fea4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800fea8:	f107 0318 	add.w	r3, r7, #24
 800feac:	4611      	mov	r1, r2
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fe fa76 	bl	800e3a0 <dcd_event_handler>
}
 800feb4:	bf00      	nop
    }

    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & GINTSTS_USBSUSP)
 800feb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800feb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800febc:	2b00      	cmp	r3, #0
 800febe:	d023      	beq.n	800ff08 <dcd_int_handler+0x114>
  {
    dwc2->gintsts = GINTSTS_USBSUSP;
 800fec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fec6:	615a      	str	r2, [r3, #20]
 800fec8:	79fb      	ldrb	r3, [r7, #7]
 800feca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800fece:	2304      	movs	r3, #4
 800fed0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800fed4:	2301      	movs	r3, #1
 800fed6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800feda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fede:	2200      	movs	r2, #0
 800fee0:	601a      	str	r2, [r3, #0]
 800fee2:	605a      	str	r2, [r3, #4]
 800fee4:	609a      	str	r2, [r3, #8]
 800fee6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800feea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800feee:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fef2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dcd_event_handler(&event, in_isr);
 800fef6:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800fefa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fefe:	4611      	mov	r1, r2
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fe fa4d 	bl	800e3a0 <dcd_event_handler>
}
 800ff06:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & GINTSTS_WKUINT)
 800ff08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	da23      	bge.n	800ff56 <dcd_int_handler+0x162>
  {
    dwc2->gintsts = GINTSTS_WKUINT;
 800ff0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff14:	615a      	str	r2, [r3, #20]
 800ff16:	79fb      	ldrb	r3, [r7, #7]
 800ff18:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800ff1c:	2305      	movs	r3, #5
 800ff1e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800ff22:	2301      	movs	r3, #1
 800ff24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800ff28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	605a      	str	r2, [r3, #4]
 800ff32:	609a      	str	r2, [r3, #8]
 800ff34:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800ff38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800ff3c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ff40:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  dcd_event_handler(&event, in_isr);
 800ff44:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ff48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff4c:	4611      	mov	r1, r2
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fe fa26 	bl	800e3a0 <dcd_event_handler>
}
 800ff54:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if(int_status & GINTSTS_OTGINT)
 800ff56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff58:	f003 0304 	and.w	r3, r3, #4
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d028      	beq.n	800ffb2 <dcd_int_handler+0x1be>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 800ff60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (otg_int & GOTGINT_SEDET)
 800ff66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff68:	f003 0304 	and.w	r3, r3, #4
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d01d      	beq.n	800ffac <dcd_int_handler+0x1b8>
 800ff70:	79fb      	ldrb	r3, [r7, #7]
 800ff72:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ff76:	2302      	movs	r3, #2
 800ff78:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800ff82:	f107 030c 	add.w	r3, r7, #12
 800ff86:	2200      	movs	r2, #0
 800ff88:	601a      	str	r2, [r3, #0]
 800ff8a:	605a      	str	r2, [r3, #4]
 800ff8c:	609a      	str	r2, [r3, #8]
 800ff8e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ff92:	733b      	strb	r3, [r7, #12]
 800ff94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ff98:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800ff9a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800ff9e:	f107 030c 	add.w	r3, r7, #12
 800ffa2:	4611      	mov	r1, r2
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7fe f9fb 	bl	800e3a0 <dcd_event_handler>
}
 800ffaa:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800ffac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ffb0:	605a      	str	r2, [r3, #4]
  }

  if(int_status & GINTSTS_SOF)
 800ffb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffb4:	f003 0308 	and.w	r3, r3, #8
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d03a      	beq.n	8010032 <dcd_int_handler+0x23e>
  {
    dwc2->gotgint = GINTSTS_SOF;
 800ffbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffbe:	2208      	movs	r2, #8
 800ffc0:	605a      	str	r2, [r3, #4]

    if (_sof_en)
 800ffc2:	4b3b      	ldr	r3, [pc, #236]	; (80100b0 <dcd_int_handler+0x2bc>)
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00d      	beq.n	800ffe6 <dcd_int_handler+0x1f2>
    {
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 800ffca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffcc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800ffd0:	0a1b      	lsrs	r3, r3, #8
 800ffd2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ffd6:	65bb      	str	r3, [r7, #88]	; 0x58
      dcd_event_sof(rhport, frame, true);
 800ffd8:	79fb      	ldrb	r3, [r7, #7]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fe fef0 	bl	800edc4 <dcd_event_sof>
 800ffe4:	e005      	b.n	800fff2 <dcd_int_handler+0x1fe>
    }
    else
    {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800ffe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffe8:	699b      	ldr	r3, [r3, #24]
 800ffea:	f023 0208 	bic.w	r2, r3, #8
 800ffee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fff0:	619a      	str	r2, [r3, #24]
 800fff2:	79fb      	ldrb	r3, [r7, #7]
 800fff4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800fff8:	2303      	movs	r3, #3
 800fffa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800fffe:	2301      	movs	r3, #1
 8010000:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8010004:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010008:	2200      	movs	r2, #0
 801000a:	601a      	str	r2, [r3, #0]
 801000c:	605a      	str	r2, [r3, #4]
 801000e:	609a      	str	r2, [r3, #8]
 8010010:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010014:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8010018:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801001c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  dcd_event_handler(&event, in_isr);
 8010020:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8010024:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010028:	4611      	mov	r1, r2
 801002a:	4618      	mov	r0, r3
 801002c:	f7fe f9b8 	bl	800e3a0 <dcd_event_handler>
}
 8010030:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & GINTSTS_RXFLVL)
 8010032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010034:	f003 0310 	and.w	r3, r3, #16
 8010038:	2b00      	cmp	r3, #0
 801003a:	d020      	beq.n	801007e <dcd_int_handler+0x28a>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 801003c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	f023 0210 	bic.w	r2, r3, #16
 8010044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010046:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_irq(rhport);
 8010048:	79fb      	ldrb	r3, [r7, #7]
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff fc12 	bl	800f874 <handle_rxflvl_irq>
    } while(dwc2->gotgint & GINTSTS_RXFLVL);
 8010050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	f003 0310 	and.w	r3, r3, #16
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1f5      	bne.n	8010048 <dcd_int_handler+0x254>

    // Manage RX FIFO size
    if (_out_ep_closed)
 801005c:	4b15      	ldr	r3, [pc, #84]	; (80100b4 <dcd_int_handler+0x2c0>)
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d006      	beq.n	8010072 <dcd_int_handler+0x27e>
    {
      update_grxfsiz(rhport);
 8010064:	79fb      	ldrb	r3, [r7, #7]
 8010066:	4618      	mov	r0, r3
 8010068:	f7fe fee4 	bl	800ee34 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 801006c:	4b11      	ldr	r3, [pc, #68]	; (80100b4 <dcd_int_handler+0x2c0>)
 801006e:	2200      	movs	r2, #0
 8010070:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 8010072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010074:	699b      	ldr	r3, [r3, #24]
 8010076:	f043 0210 	orr.w	r2, r3, #16
 801007a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801007c:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & GINTSTS_OEPINT)
 801007e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010084:	2b00      	cmp	r3, #0
 8010086:	d003      	beq.n	8010090 <dcd_int_handler+0x29c>
  {
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 8010088:	79fb      	ldrb	r3, [r7, #7]
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff fcc0 	bl	800fa10 <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if(int_status & GINTSTS_IEPINT)
 8010090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010096:	2b00      	cmp	r3, #0
 8010098:	d003      	beq.n	80100a2 <dcd_int_handler+0x2ae>
  {
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 801009a:	79fb      	ldrb	r3, [r7, #7]
 801009c:	4618      	mov	r0, r3
 801009e:	f7ff fd89 	bl	800fbb4 <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 80100a2:	bf00      	nop
 80100a4:	3770      	adds	r7, #112	; 0x70
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	08010bd4 	.word	0x08010bd4
 80100b0:	240027d7 	.word	0x240027d7
 80100b4:	240027d6 	.word	0x240027d6

080100b8 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d106      	bne.n	80100de <tu_edpt_claim+0x26>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d001      	beq.n	80100e2 <tu_edpt_claim+0x2a>
 80100de:	2300      	movs	r3, #0
 80100e0:	e01e      	b.n	8010120 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d108      	bne.n	8010102 <tu_edpt_claim+0x4a>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d101      	bne.n	8010102 <tu_edpt_claim+0x4a>
 80100fe:	2301      	movs	r3, #1
 8010100:	e000      	b.n	8010104 <tu_edpt_claim+0x4c>
 8010102:	2300      	movs	r3, #0
 8010104:	73fb      	strb	r3, [r7, #15]
 8010106:	7bfb      	ldrb	r3, [r7, #15]
 8010108:	f003 0301 	and.w	r3, r3, #1
 801010c:	73fb      	strb	r3, [r7, #15]
  if (available)
 801010e:	7bfb      	ldrb	r3, [r7, #15]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d004      	beq.n	801011e <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	7813      	ldrb	r3, [r2, #0]
 8010118:	f043 0304 	orr.w	r3, r3, #4
 801011c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 801011e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010120:	4618      	mov	r0, r3
 8010122:	3714      	adds	r7, #20
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 801012c:	b480      	push	{r7}
 801012e:	b085      	sub	sp, #20
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801013e:	b2db      	uxtb	r3, r3
 8010140:	2b01      	cmp	r3, #1
 8010142:	d108      	bne.n	8010156 <tu_edpt_release+0x2a>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801014c:	b2db      	uxtb	r3, r3
 801014e:	2b00      	cmp	r3, #0
 8010150:	d101      	bne.n	8010156 <tu_edpt_release+0x2a>
 8010152:	2301      	movs	r3, #1
 8010154:	e000      	b.n	8010158 <tu_edpt_release+0x2c>
 8010156:	2300      	movs	r3, #0
 8010158:	73fb      	strb	r3, [r7, #15]
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	f003 0301 	and.w	r3, r3, #1
 8010160:	73fb      	strb	r3, [r7, #15]
  if (ret)
 8010162:	7bfb      	ldrb	r3, [r7, #15]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d004      	beq.n	8010172 <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	7813      	ldrb	r3, [r2, #0]
 801016c:	f36f 0382 	bfc	r3, #2, #1
 8010170:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 8010172:	7bfb      	ldrb	r3, [r7, #15]
}
 8010174:	4618      	mov	r0, r3
 8010176:	3714      	adds	r7, #20
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8010180:	b480      	push	{r7}
 8010182:	b08b      	sub	sp, #44	; 0x2c
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	460b      	mov	r3, r1
 801018a:	70fb      	strb	r3, [r7, #3]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	889b      	ldrh	r3, [r3, #4]
 8010194:	b29b      	uxth	r3, r3
 8010196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801019a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 801019c:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	78db      	ldrb	r3, [r3, #3]
 80101a2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	2b03      	cmp	r3, #3
 80101aa:	d03e      	beq.n	801022a <tu_edpt_validate+0xaa>
 80101ac:	2b03      	cmp	r3, #3
 80101ae:	dc53      	bgt.n	8010258 <tu_edpt_validate+0xd8>
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d002      	beq.n	80101ba <tu_edpt_validate+0x3a>
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d018      	beq.n	80101ea <tu_edpt_validate+0x6a>
 80101b8:	e04e      	b.n	8010258 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80101ba:	78fb      	ldrb	r3, [r7, #3]
 80101bc:	2b02      	cmp	r3, #2
 80101be:	d102      	bne.n	80101c6 <tu_edpt_validate+0x46>
 80101c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101c4:	e001      	b.n	80101ca <tu_edpt_validate+0x4a>
 80101c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80101ca:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 80101cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80101ce:	8afb      	ldrh	r3, [r7, #22]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d943      	bls.n	801025c <tu_edpt_validate+0xdc>
 80101d4:	4b27      	ldr	r3, [pc, #156]	; (8010274 <tu_edpt_validate+0xf4>)
 80101d6:	613b      	str	r3, [r7, #16]
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f003 0301 	and.w	r3, r3, #1
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d000      	beq.n	80101e6 <tu_edpt_validate+0x66>
 80101e4:	be00      	bkpt	0x0000
 80101e6:	2300      	movs	r3, #0
 80101e8:	e03e      	b.n	8010268 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 80101ea:	78fb      	ldrb	r3, [r7, #3]
 80101ec:	2b02      	cmp	r3, #2
 80101ee:	d10e      	bne.n	801020e <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 80101f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80101f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101f6:	d033      	beq.n	8010260 <tu_edpt_validate+0xe0>
 80101f8:	4b1e      	ldr	r3, [pc, #120]	; (8010274 <tu_edpt_validate+0xf4>)
 80101fa:	61bb      	str	r3, [r7, #24]
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f003 0301 	and.w	r3, r3, #1
 8010204:	2b00      	cmp	r3, #0
 8010206:	d000      	beq.n	801020a <tu_edpt_validate+0x8a>
 8010208:	be00      	bkpt	0x0000
 801020a:	2300      	movs	r3, #0
 801020c:	e02c      	b.n	8010268 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 801020e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010210:	2b40      	cmp	r3, #64	; 0x40
 8010212:	d925      	bls.n	8010260 <tu_edpt_validate+0xe0>
 8010214:	4b17      	ldr	r3, [pc, #92]	; (8010274 <tu_edpt_validate+0xf4>)
 8010216:	61fb      	str	r3, [r7, #28]
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f003 0301 	and.w	r3, r3, #1
 8010220:	2b00      	cmp	r3, #0
 8010222:	d000      	beq.n	8010226 <tu_edpt_validate+0xa6>
 8010224:	be00      	bkpt	0x0000
 8010226:	2300      	movs	r3, #0
 8010228:	e01e      	b.n	8010268 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 801022a:	78fb      	ldrb	r3, [r7, #3]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d102      	bne.n	8010236 <tu_edpt_validate+0xb6>
 8010230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010234:	e000      	b.n	8010238 <tu_edpt_validate+0xb8>
 8010236:	2340      	movs	r3, #64	; 0x40
 8010238:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 801023a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801023c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801023e:	429a      	cmp	r2, r3
 8010240:	d910      	bls.n	8010264 <tu_edpt_validate+0xe4>
 8010242:	4b0c      	ldr	r3, [pc, #48]	; (8010274 <tu_edpt_validate+0xf4>)
 8010244:	623b      	str	r3, [r7, #32]
 8010246:	6a3b      	ldr	r3, [r7, #32]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d000      	beq.n	8010254 <tu_edpt_validate+0xd4>
 8010252:	be00      	bkpt	0x0000
 8010254:	2300      	movs	r3, #0
 8010256:	e007      	b.n	8010268 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8010258:	2300      	movs	r3, #0
 801025a:	e005      	b.n	8010268 <tu_edpt_validate+0xe8>
    break;
 801025c:	bf00      	nop
 801025e:	e002      	b.n	8010266 <tu_edpt_validate+0xe6>
    break;
 8010260:	bf00      	nop
 8010262:	e000      	b.n	8010266 <tu_edpt_validate+0xe6>
    break;
 8010264:	bf00      	nop
  }

  return true;
 8010266:	2301      	movs	r3, #1
}
 8010268:	4618      	mov	r0, r3
 801026a:	372c      	adds	r7, #44	; 0x2c
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr
 8010274:	e000edf0 	.word	0xe000edf0

08010278 <main>:
 */

#include "main.h"

int main(void)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af02      	add	r7, sp, #8

	if (BSP_BOARD_Init_CM7()) BSP_Error_Handler();
 801027e:	f7f1 fa09 	bl	8001694 <BSP_BOARD_Init_CM7>
 8010282:	4603      	mov	r3, r0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d001      	beq.n	801028c <main+0x14>
 8010288:	f7f1 fb24 	bl	80018d4 <BSP_Error_Handler>

	BSP_LCD_Init(&BSP_hlcd, LCD_COLOR_MODE_ARGB8888, LCD_BUFFER_MODE_DOUBLE, LCD_LAYER_NO_ONE, C_RED, NULL);
 801028c:	2300      	movs	r3, #0
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8010294:	9300      	str	r3, [sp, #0]
 8010296:	2301      	movs	r3, #1
 8010298:	2202      	movs	r2, #2
 801029a:	2106      	movs	r1, #6
 801029c:	4806      	ldr	r0, [pc, #24]	; (80102b8 <main+0x40>)
 801029e:	f7f3 ffc3 	bl	8004228 <BSP_LCD_Init>

	// Initialize Backlight
	BSP_LCD_InitBackLight(&BSP_hlcd, 10);
 80102a2:	210a      	movs	r1, #10
 80102a4:	4804      	ldr	r0, [pc, #16]	; (80102b8 <main+0x40>)
 80102a6:	f7f4 f8ef 	bl	8004488 <BSP_LCD_InitBackLight>
	BSP_LCD_SetBackLight(&BSP_hlcd, 80, 25);
 80102aa:	2219      	movs	r2, #25
 80102ac:	2150      	movs	r1, #80	; 0x50
 80102ae:	4802      	ldr	r0, [pc, #8]	; (80102b8 <main+0x40>)
 80102b0:	f7f4 f922 	bl	80044f8 <BSP_LCD_SetBackLight>

    /* Loop forever */
	for(;;);
 80102b4:	e7fe      	b.n	80102b4 <main+0x3c>
 80102b6:	bf00      	nop
 80102b8:	24000218 	.word	0x24000218

080102bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80102bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80102f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80102c0:	f7fb fc5a 	bl	800bb78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80102c4:	480c      	ldr	r0, [pc, #48]	; (80102f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80102c6:	490d      	ldr	r1, [pc, #52]	; (80102fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80102c8:	4a0d      	ldr	r2, [pc, #52]	; (8010300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80102ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80102cc:	e002      	b.n	80102d4 <LoopCopyDataInit>

080102ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80102ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80102d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80102d2:	3304      	adds	r3, #4

080102d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80102d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80102d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80102d8:	d3f9      	bcc.n	80102ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80102da:	4a0a      	ldr	r2, [pc, #40]	; (8010304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80102dc:	4c0a      	ldr	r4, [pc, #40]	; (8010308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80102de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80102e0:	e001      	b.n	80102e6 <LoopFillZerobss>

080102e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80102e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80102e4:	3204      	adds	r2, #4

080102e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80102e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80102e8:	d3fb      	bcc.n	80102e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80102ea:	f000 f833 	bl	8010354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80102ee:	f7ff ffc3 	bl	8010278 <main>
  bx  lr
 80102f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80102f4:	24020000 	.word	0x24020000
  ldr r0, =_sdata
 80102f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80102fc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8010300:	08010c34 	.word	0x08010c34
  ldr r2, =_sbss
 8010304:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8010308:	240027d8 	.word	0x240027d8

0801030c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801030c:	e7fe      	b.n	801030c <ADC3_IRQHandler>

0801030e <memmove>:
 801030e:	4288      	cmp	r0, r1
 8010310:	b510      	push	{r4, lr}
 8010312:	eb01 0402 	add.w	r4, r1, r2
 8010316:	d902      	bls.n	801031e <memmove+0x10>
 8010318:	4284      	cmp	r4, r0
 801031a:	4623      	mov	r3, r4
 801031c:	d807      	bhi.n	801032e <memmove+0x20>
 801031e:	1e43      	subs	r3, r0, #1
 8010320:	42a1      	cmp	r1, r4
 8010322:	d008      	beq.n	8010336 <memmove+0x28>
 8010324:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010328:	f803 2f01 	strb.w	r2, [r3, #1]!
 801032c:	e7f8      	b.n	8010320 <memmove+0x12>
 801032e:	4402      	add	r2, r0
 8010330:	4601      	mov	r1, r0
 8010332:	428a      	cmp	r2, r1
 8010334:	d100      	bne.n	8010338 <memmove+0x2a>
 8010336:	bd10      	pop	{r4, pc}
 8010338:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801033c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010340:	e7f7      	b.n	8010332 <memmove+0x24>

08010342 <memset>:
 8010342:	4402      	add	r2, r0
 8010344:	4603      	mov	r3, r0
 8010346:	4293      	cmp	r3, r2
 8010348:	d100      	bne.n	801034c <memset+0xa>
 801034a:	4770      	bx	lr
 801034c:	f803 1b01 	strb.w	r1, [r3], #1
 8010350:	e7f9      	b.n	8010346 <memset+0x4>
	...

08010354 <__libc_init_array>:
 8010354:	b570      	push	{r4, r5, r6, lr}
 8010356:	4d0d      	ldr	r5, [pc, #52]	; (801038c <__libc_init_array+0x38>)
 8010358:	4c0d      	ldr	r4, [pc, #52]	; (8010390 <__libc_init_array+0x3c>)
 801035a:	1b64      	subs	r4, r4, r5
 801035c:	10a4      	asrs	r4, r4, #2
 801035e:	2600      	movs	r6, #0
 8010360:	42a6      	cmp	r6, r4
 8010362:	d109      	bne.n	8010378 <__libc_init_array+0x24>
 8010364:	4d0b      	ldr	r5, [pc, #44]	; (8010394 <__libc_init_array+0x40>)
 8010366:	4c0c      	ldr	r4, [pc, #48]	; (8010398 <__libc_init_array+0x44>)
 8010368:	f000 f9e6 	bl	8010738 <_init>
 801036c:	1b64      	subs	r4, r4, r5
 801036e:	10a4      	asrs	r4, r4, #2
 8010370:	2600      	movs	r6, #0
 8010372:	42a6      	cmp	r6, r4
 8010374:	d105      	bne.n	8010382 <__libc_init_array+0x2e>
 8010376:	bd70      	pop	{r4, r5, r6, pc}
 8010378:	f855 3b04 	ldr.w	r3, [r5], #4
 801037c:	4798      	blx	r3
 801037e:	3601      	adds	r6, #1
 8010380:	e7ee      	b.n	8010360 <__libc_init_array+0xc>
 8010382:	f855 3b04 	ldr.w	r3, [r5], #4
 8010386:	4798      	blx	r3
 8010388:	3601      	adds	r6, #1
 801038a:	e7f2      	b.n	8010372 <__libc_init_array+0x1e>
 801038c:	08010c2c 	.word	0x08010c2c
 8010390:	08010c2c 	.word	0x08010c2c
 8010394:	08010c2c 	.word	0x08010c2c
 8010398:	08010c30 	.word	0x08010c30

0801039c <memcpy>:
 801039c:	440a      	add	r2, r1
 801039e:	4291      	cmp	r1, r2
 80103a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80103a4:	d100      	bne.n	80103a8 <memcpy+0xc>
 80103a6:	4770      	bx	lr
 80103a8:	b510      	push	{r4, lr}
 80103aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103b2:	4291      	cmp	r1, r2
 80103b4:	d1f9      	bne.n	80103aa <memcpy+0xe>
 80103b6:	bd10      	pop	{r4, pc}

080103b8 <atan2f>:
 80103b8:	f000 b844 	b.w	8010444 <__ieee754_atan2f>

080103bc <round>:
 80103bc:	ee10 1a90 	vmov	r1, s1
 80103c0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80103c4:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80103c8:	2b13      	cmp	r3, #19
 80103ca:	b510      	push	{r4, lr}
 80103cc:	ee10 4a10 	vmov	r4, s0
 80103d0:	dc19      	bgt.n	8010406 <round+0x4a>
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	da09      	bge.n	80103ea <round+0x2e>
 80103d6:	3301      	adds	r3, #1
 80103d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80103dc:	d103      	bne.n	80103e6 <round+0x2a>
 80103de:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80103e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80103e6:	2000      	movs	r0, #0
 80103e8:	e025      	b.n	8010436 <round+0x7a>
 80103ea:	4815      	ldr	r0, [pc, #84]	; (8010440 <round+0x84>)
 80103ec:	4118      	asrs	r0, r3
 80103ee:	ea01 0200 	and.w	r2, r1, r0
 80103f2:	4322      	orrs	r2, r4
 80103f4:	d00e      	beq.n	8010414 <round+0x58>
 80103f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80103fa:	fa42 f303 	asr.w	r3, r2, r3
 80103fe:	440b      	add	r3, r1
 8010400:	ea23 0100 	bic.w	r1, r3, r0
 8010404:	e7ef      	b.n	80103e6 <round+0x2a>
 8010406:	2b33      	cmp	r3, #51	; 0x33
 8010408:	dd05      	ble.n	8010416 <round+0x5a>
 801040a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801040e:	d101      	bne.n	8010414 <round+0x58>
 8010410:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010414:	bd10      	pop	{r4, pc}
 8010416:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 801041a:	f04f 32ff 	mov.w	r2, #4294967295
 801041e:	40c2      	lsrs	r2, r0
 8010420:	4222      	tst	r2, r4
 8010422:	d0f7      	beq.n	8010414 <round+0x58>
 8010424:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8010428:	2001      	movs	r0, #1
 801042a:	4098      	lsls	r0, r3
 801042c:	1900      	adds	r0, r0, r4
 801042e:	bf28      	it	cs
 8010430:	3101      	addcs	r1, #1
 8010432:	ea20 0002 	bic.w	r0, r0, r2
 8010436:	460b      	mov	r3, r1
 8010438:	4602      	mov	r2, r0
 801043a:	ec43 2b10 	vmov	d0, r2, r3
 801043e:	e7e9      	b.n	8010414 <round+0x58>
 8010440:	000fffff 	.word	0x000fffff

08010444 <__ieee754_atan2f>:
 8010444:	ee10 2a90 	vmov	r2, s1
 8010448:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801044c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010450:	b510      	push	{r4, lr}
 8010452:	eef0 7a40 	vmov.f32	s15, s0
 8010456:	dc06      	bgt.n	8010466 <__ieee754_atan2f+0x22>
 8010458:	ee10 0a10 	vmov	r0, s0
 801045c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010460:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010464:	dd04      	ble.n	8010470 <__ieee754_atan2f+0x2c>
 8010466:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801046a:	eeb0 0a67 	vmov.f32	s0, s15
 801046e:	bd10      	pop	{r4, pc}
 8010470:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010474:	d103      	bne.n	801047e <__ieee754_atan2f+0x3a>
 8010476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801047a:	f000 b881 	b.w	8010580 <atanf>
 801047e:	1794      	asrs	r4, r2, #30
 8010480:	f004 0402 	and.w	r4, r4, #2
 8010484:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010488:	b93b      	cbnz	r3, 801049a <__ieee754_atan2f+0x56>
 801048a:	2c02      	cmp	r4, #2
 801048c:	d05c      	beq.n	8010548 <__ieee754_atan2f+0x104>
 801048e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801055c <__ieee754_atan2f+0x118>
 8010492:	2c03      	cmp	r4, #3
 8010494:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8010498:	e7e7      	b.n	801046a <__ieee754_atan2f+0x26>
 801049a:	b939      	cbnz	r1, 80104ac <__ieee754_atan2f+0x68>
 801049c:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010560 <__ieee754_atan2f+0x11c>
 80104a0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8010564 <__ieee754_atan2f+0x120>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	fe67 7a87 	vselge.f32	s15, s15, s14
 80104aa:	e7de      	b.n	801046a <__ieee754_atan2f+0x26>
 80104ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80104b0:	d110      	bne.n	80104d4 <__ieee754_atan2f+0x90>
 80104b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80104b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80104ba:	d107      	bne.n	80104cc <__ieee754_atan2f+0x88>
 80104bc:	2c02      	cmp	r4, #2
 80104be:	d846      	bhi.n	801054e <__ieee754_atan2f+0x10a>
 80104c0:	4b29      	ldr	r3, [pc, #164]	; (8010568 <__ieee754_atan2f+0x124>)
 80104c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80104c6:	edd3 7a00 	vldr	s15, [r3]
 80104ca:	e7ce      	b.n	801046a <__ieee754_atan2f+0x26>
 80104cc:	2c02      	cmp	r4, #2
 80104ce:	d841      	bhi.n	8010554 <__ieee754_atan2f+0x110>
 80104d0:	4b26      	ldr	r3, [pc, #152]	; (801056c <__ieee754_atan2f+0x128>)
 80104d2:	e7f6      	b.n	80104c2 <__ieee754_atan2f+0x7e>
 80104d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80104d8:	d0e0      	beq.n	801049c <__ieee754_atan2f+0x58>
 80104da:	1a5b      	subs	r3, r3, r1
 80104dc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80104e0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80104e4:	da1a      	bge.n	801051c <__ieee754_atan2f+0xd8>
 80104e6:	2a00      	cmp	r2, #0
 80104e8:	da01      	bge.n	80104ee <__ieee754_atan2f+0xaa>
 80104ea:	313c      	adds	r1, #60	; 0x3c
 80104ec:	db19      	blt.n	8010522 <__ieee754_atan2f+0xde>
 80104ee:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80104f2:	f000 f919 	bl	8010728 <fabsf>
 80104f6:	f000 f843 	bl	8010580 <atanf>
 80104fa:	eef0 7a40 	vmov.f32	s15, s0
 80104fe:	2c01      	cmp	r4, #1
 8010500:	d012      	beq.n	8010528 <__ieee754_atan2f+0xe4>
 8010502:	2c02      	cmp	r4, #2
 8010504:	d017      	beq.n	8010536 <__ieee754_atan2f+0xf2>
 8010506:	2c00      	cmp	r4, #0
 8010508:	d0af      	beq.n	801046a <__ieee754_atan2f+0x26>
 801050a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8010570 <__ieee754_atan2f+0x12c>
 801050e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010512:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8010574 <__ieee754_atan2f+0x130>
 8010516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801051a:	e7a6      	b.n	801046a <__ieee754_atan2f+0x26>
 801051c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010560 <__ieee754_atan2f+0x11c>
 8010520:	e7ed      	b.n	80104fe <__ieee754_atan2f+0xba>
 8010522:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010578 <__ieee754_atan2f+0x134>
 8010526:	e7ea      	b.n	80104fe <__ieee754_atan2f+0xba>
 8010528:	ee17 3a90 	vmov	r3, s15
 801052c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010530:	ee07 3a90 	vmov	s15, r3
 8010534:	e799      	b.n	801046a <__ieee754_atan2f+0x26>
 8010536:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010570 <__ieee754_atan2f+0x12c>
 801053a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801053e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8010574 <__ieee754_atan2f+0x130>
 8010542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010546:	e790      	b.n	801046a <__ieee754_atan2f+0x26>
 8010548:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010574 <__ieee754_atan2f+0x130>
 801054c:	e78d      	b.n	801046a <__ieee754_atan2f+0x26>
 801054e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801057c <__ieee754_atan2f+0x138>
 8010552:	e78a      	b.n	801046a <__ieee754_atan2f+0x26>
 8010554:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010578 <__ieee754_atan2f+0x134>
 8010558:	e787      	b.n	801046a <__ieee754_atan2f+0x26>
 801055a:	bf00      	nop
 801055c:	c0490fdb 	.word	0xc0490fdb
 8010560:	3fc90fdb 	.word	0x3fc90fdb
 8010564:	bfc90fdb 	.word	0xbfc90fdb
 8010568:	08010bf4 	.word	0x08010bf4
 801056c:	08010c00 	.word	0x08010c00
 8010570:	33bbbd2e 	.word	0x33bbbd2e
 8010574:	40490fdb 	.word	0x40490fdb
 8010578:	00000000 	.word	0x00000000
 801057c:	3f490fdb 	.word	0x3f490fdb

08010580 <atanf>:
 8010580:	b538      	push	{r3, r4, r5, lr}
 8010582:	ee10 5a10 	vmov	r5, s0
 8010586:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801058a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801058e:	eef0 7a40 	vmov.f32	s15, s0
 8010592:	db0f      	blt.n	80105b4 <atanf+0x34>
 8010594:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010598:	dd04      	ble.n	80105a4 <atanf+0x24>
 801059a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801059e:	eeb0 0a67 	vmov.f32	s0, s15
 80105a2:	bd38      	pop	{r3, r4, r5, pc}
 80105a4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80106dc <atanf+0x15c>
 80105a8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80106e0 <atanf+0x160>
 80105ac:	2d00      	cmp	r5, #0
 80105ae:	fe77 7a87 	vselgt.f32	s15, s15, s14
 80105b2:	e7f4      	b.n	801059e <atanf+0x1e>
 80105b4:	4b4b      	ldr	r3, [pc, #300]	; (80106e4 <atanf+0x164>)
 80105b6:	429c      	cmp	r4, r3
 80105b8:	dc10      	bgt.n	80105dc <atanf+0x5c>
 80105ba:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80105be:	da0a      	bge.n	80105d6 <atanf+0x56>
 80105c0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80106e8 <atanf+0x168>
 80105c4:	ee30 7a07 	vadd.f32	s14, s0, s14
 80105c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80105cc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80105d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105d4:	dce3      	bgt.n	801059e <atanf+0x1e>
 80105d6:	f04f 33ff 	mov.w	r3, #4294967295
 80105da:	e013      	b.n	8010604 <atanf+0x84>
 80105dc:	f000 f8a4 	bl	8010728 <fabsf>
 80105e0:	4b42      	ldr	r3, [pc, #264]	; (80106ec <atanf+0x16c>)
 80105e2:	429c      	cmp	r4, r3
 80105e4:	dc4f      	bgt.n	8010686 <atanf+0x106>
 80105e6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80105ea:	429c      	cmp	r4, r3
 80105ec:	dc41      	bgt.n	8010672 <atanf+0xf2>
 80105ee:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80105f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80105f6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80105fa:	2300      	movs	r3, #0
 80105fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010600:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010604:	1c5a      	adds	r2, r3, #1
 8010606:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801060a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80106f0 <atanf+0x170>
 801060e:	eddf 5a39 	vldr	s11, [pc, #228]	; 80106f4 <atanf+0x174>
 8010612:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80106f8 <atanf+0x178>
 8010616:	ee66 6a06 	vmul.f32	s13, s12, s12
 801061a:	eee6 5a87 	vfma.f32	s11, s13, s14
 801061e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80106fc <atanf+0x17c>
 8010622:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010626:	eddf 5a36 	vldr	s11, [pc, #216]	; 8010700 <atanf+0x180>
 801062a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801062e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8010704 <atanf+0x184>
 8010632:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010636:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010708 <atanf+0x188>
 801063a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801063e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801070c <atanf+0x18c>
 8010642:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010646:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010710 <atanf+0x190>
 801064a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801064e:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8010714 <atanf+0x194>
 8010652:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010656:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8010718 <atanf+0x198>
 801065a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801065e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010662:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010666:	ee27 7a87 	vmul.f32	s14, s15, s14
 801066a:	d121      	bne.n	80106b0 <atanf+0x130>
 801066c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010670:	e795      	b.n	801059e <atanf+0x1e>
 8010672:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010676:	ee30 7a67 	vsub.f32	s14, s0, s15
 801067a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801067e:	2301      	movs	r3, #1
 8010680:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010684:	e7be      	b.n	8010604 <atanf+0x84>
 8010686:	4b25      	ldr	r3, [pc, #148]	; (801071c <atanf+0x19c>)
 8010688:	429c      	cmp	r4, r3
 801068a:	dc0b      	bgt.n	80106a4 <atanf+0x124>
 801068c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010694:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010698:	2302      	movs	r3, #2
 801069a:	ee70 6a67 	vsub.f32	s13, s0, s15
 801069e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80106a2:	e7af      	b.n	8010604 <atanf+0x84>
 80106a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80106a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80106ac:	2303      	movs	r3, #3
 80106ae:	e7a9      	b.n	8010604 <atanf+0x84>
 80106b0:	4a1b      	ldr	r2, [pc, #108]	; (8010720 <atanf+0x1a0>)
 80106b2:	491c      	ldr	r1, [pc, #112]	; (8010724 <atanf+0x1a4>)
 80106b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80106b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80106bc:	edd3 6a00 	vldr	s13, [r3]
 80106c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80106c4:	2d00      	cmp	r5, #0
 80106c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80106ca:	edd2 7a00 	vldr	s15, [r2]
 80106ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106d2:	bfb8      	it	lt
 80106d4:	eef1 7a67 	vneglt.f32	s15, s15
 80106d8:	e761      	b.n	801059e <atanf+0x1e>
 80106da:	bf00      	nop
 80106dc:	3fc90fdb 	.word	0x3fc90fdb
 80106e0:	bfc90fdb 	.word	0xbfc90fdb
 80106e4:	3edfffff 	.word	0x3edfffff
 80106e8:	7149f2ca 	.word	0x7149f2ca
 80106ec:	3f97ffff 	.word	0x3f97ffff
 80106f0:	3c8569d7 	.word	0x3c8569d7
 80106f4:	3d4bda59 	.word	0x3d4bda59
 80106f8:	bd6ef16b 	.word	0xbd6ef16b
 80106fc:	3d886b35 	.word	0x3d886b35
 8010700:	3dba2e6e 	.word	0x3dba2e6e
 8010704:	3e124925 	.word	0x3e124925
 8010708:	3eaaaaab 	.word	0x3eaaaaab
 801070c:	bd15a221 	.word	0xbd15a221
 8010710:	bd9d8795 	.word	0xbd9d8795
 8010714:	bde38e38 	.word	0xbde38e38
 8010718:	be4ccccd 	.word	0xbe4ccccd
 801071c:	401bffff 	.word	0x401bffff
 8010720:	08010c0c 	.word	0x08010c0c
 8010724:	08010c1c 	.word	0x08010c1c

08010728 <fabsf>:
 8010728:	ee10 3a10 	vmov	r3, s0
 801072c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010730:	ee00 3a10 	vmov	s0, r3
 8010734:	4770      	bx	lr
	...

08010738 <_init>:
 8010738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073a:	bf00      	nop
 801073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073e:	bc08      	pop	{r3}
 8010740:	469e      	mov	lr, r3
 8010742:	4770      	bx	lr

08010744 <_fini>:
 8010744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010746:	bf00      	nop
 8010748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801074a:	bc08      	pop	{r3}
 801074c:	469e      	mov	lr, r3
 801074e:	4770      	bx	lr
