
Mini-Console-3-Firmware_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c48  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000353c  08018ee0  08018ee0  00028ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c41c  0801c41c  0004028c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c41c  0801c41c  0002c41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c424  0801c424  0004028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c424  0801c424  0002c424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c428  0801c428  0002c428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  24000000  0801c42c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d70  24000038  0801c464  00030038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002da8  0801c464  00032da8  2**0
                  ALLOC
 11 .sh0_ram      00000000  30040000  30040000  0004028c  2**0
                  CONTENTS
 12 .sh1_ram      00000000  38008000  38008000  0004028c  2**0
                  CONTENTS
 13 .buf_ram      0000028c  38000000  38000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bk_ram       00000000  38800000  38800000  0004028c  2**0
                  CONTENTS
 15 .qspi         00000000  90000000  90000000  0004028c  2**0
                  CONTENTS
 16 .ARM.attributes 0000002e  00000000  00000000  0004028c  2**0
                  CONTENTS, READONLY
 17 .comment      00000043  00000000  00000000  000402ba  2**0
                  CONTENTS, READONLY
 18 .debug_info   00029830  00000000  00000000  000402fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00006fa3  00000000  00000000  00069b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001cd8  00000000  00000000  00070ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 0000163f  00000000  00000000  000727a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00041027  00000000  00000000  00073de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0002fb5a  00000000  00000000  000b4e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001436c4  00000000  00000000  000e4968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000721c  00000000  00000000  0022802c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000057  00000000  00000000  0022f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08018ec8 	.word	0x08018ec8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	08018ec8 	.word	0x08018ec8

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <_DRV_QSPI_CheckStatus>:

#include "IS25LP128F.h"


static uint8_t	_DRV_QSPI_CheckStatus(QUADSPI_TypeDef * hqspi, uint8_t mode, uint8_t mask, uint8_t match) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4603      	mov	r3, r0
 80005f4:	70fb      	strb	r3, [r7, #3]
 80005f6:	460b      	mov	r3, r1
 80005f8:	70bb      	strb	r3, [r7, #2]
 80005fa:	4613      	mov	r3, r2
 80005fc:	707b      	strb	r3, [r7, #1]

	// 1. Configure command
	BSP_STM32_QSPI_CfgNewCommand();
 80005fe:	f00a f9fb 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f00a fa48 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_CfgAutoPooling(mask, match, 0x10, QSPI_MATCH_MODE_AND);
 800060c:	78b8      	ldrb	r0, [r7, #2]
 800060e:	7879      	ldrb	r1, [r7, #1]
 8000610:	2300      	movs	r3, #0
 8000612:	2210      	movs	r2, #16
 8000614:	f00a fa5a 	bl	800aacc <BSP_STM32_QSPI_CfgAutoPooling>

	switch (mode) {
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	2b01      	cmp	r3, #1
 800061c:	dc02      	bgt.n	8000624 <_DRV_QSPI_CheckStatus+0x40>
 800061e:	2b00      	cmp	r3, #0
 8000620:	da03      	bge.n	800062a <_DRV_QSPI_CheckStatus+0x46>
 8000622:	e01a      	b.n	800065a <_DRV_QSPI_CheckStatus+0x76>
 8000624:	2b02      	cmp	r3, #2
 8000626:	d00c      	beq.n	8000642 <_DRV_QSPI_CheckStatus+0x5e>
 8000628:	e017      	b.n	800065a <_DRV_QSPI_CheckStatus+0x76>
	case QSPI_MODE_SPI:
	case QSPI_MODE_QSPI:
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 800062a:	2105      	movs	r1, #5
 800062c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000630:	f00a f9ee 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, 0x00000000, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	2100      	movs	r1, #0
 8000638:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800063c:	f00a fa16 	bl	800aa6c <BSP_STM32_QSPI_CfgData>
		break;
 8000640:	e00d      	b.n	800065e <_DRV_QSPI_CheckStatus+0x7a>
	case QSPI_MODE_QPI:
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_4_LINES, QSPI_CMD_RDSR);
 8000642:	2105      	movs	r1, #5
 8000644:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000648:	f00a f9e2 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_4_LINES, 0x00000000, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	2100      	movs	r1, #0
 8000650:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 8000654:	f00a fa0a 	bl	800aa6c <BSP_STM32_QSPI_CfgData>
		break;
 8000658:	e001      	b.n	800065e <_DRV_QSPI_CheckStatus+0x7a>
	default:
		return BSP_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	e008      	b.n	8000670 <_DRV_QSPI_CheckStatus+0x8c>
	}

	// 2. Execute command in Auto Pooling Mode
	if (BSP_STM32_QSPI_StartAutoPooling(hqspi)) return BSP_TIMEOUT;
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f00a fb12 	bl	800ac88 <BSP_STM32_QSPI_StartAutoPooling>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <_DRV_QSPI_CheckStatus+0x8a>
 800066a:	2303      	movs	r3, #3
 800066c:	e000      	b.n	8000670 <_DRV_QSPI_CheckStatus+0x8c>

	return BSP_OK;
 800066e:	2300      	movs	r3, #0

}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <_DRV_QSPI_WriteEnable>:



static uint8_t	_DRV_QSPI_WriteEnable(QUADSPI_TypeDef * hqspi, uint8_t mode) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]

	// 1. COnfigure command
	BSP_STM32_QSPI_CfgNewCommand();
 8000684:	f00a f9b8 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2000      	movs	r0, #0
 800068e:	f00a fa05 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>

	switch (mode) {
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	2b01      	cmp	r3, #1
 8000696:	dc02      	bgt.n	800069e <_DRV_QSPI_WriteEnable+0x26>
 8000698:	2b00      	cmp	r3, #0
 800069a:	da03      	bge.n	80006a4 <_DRV_QSPI_WriteEnable+0x2c>
 800069c:	e00e      	b.n	80006bc <_DRV_QSPI_WriteEnable+0x44>
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d006      	beq.n	80006b0 <_DRV_QSPI_WriteEnable+0x38>
 80006a2:	e00b      	b.n	80006bc <_DRV_QSPI_WriteEnable+0x44>
	case QSPI_MODE_SPI:
	case QSPI_MODE_QSPI:
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WREN);
 80006a4:	2106      	movs	r1, #6
 80006a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006aa:	f00a f9b1 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
		break;
 80006ae:	e005      	b.n	80006bc <_DRV_QSPI_WriteEnable+0x44>
	case QSPI_MODE_QPI:
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_4_LINES, QSPI_CMD_WREN);
 80006b0:	2106      	movs	r1, #6
 80006b2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80006b6:	f00a f9ab 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
		break;
 80006ba:	bf00      	nop
	}

	// 2. Execute command
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f00a fa83 	bl	800abc8 <BSP_STM32_QSPI_StartTransmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <_DRV_QSPI_WriteEnable+0x54>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <_DRV_QSPI_WriteEnable+0x56>

    return BSP_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <BSP_DRV_QSPI_Reset>:



uint8_t	BSP_DRV_QSPI_Reset(QUADSPI_TypeDef * hqspi) {
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]

	// 1. Exit QPI mode and fallback to SPI 1-bit mode
	BSP_STM32_QSPI_CfgNewCommand();
 80006de:	f00a f98b 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_4_LINES, QSPI_CMD_QPIDI);
 80006e2:	21f5      	movs	r1, #245	; 0xf5
 80006e4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80006e8:	f00a f992 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2000      	movs	r0, #0
 80006f2:	f00a f9d3 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_StartTransmit(hqspi);  // This function can exit with error if chip was not in QPI mode - just ignore it
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f00a fa66 	bl	800abc8 <BSP_STM32_QSPI_StartTransmit>

	// 2. Sending Reset Enable command

    BSP_STM32_QSPI_CfgNewCommand();
 80006fc:	f00a f97c 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RSTEN);
 8000700:	2166      	movs	r1, #102	; 0x66
 8000702:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000706:	f00a f983 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f00a f9c4 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f00a fa57 	bl	800abc8 <BSP_STM32_QSPI_StartTransmit>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <BSP_DRV_QSPI_Reset+0x4e>
 8000720:	2301      	movs	r3, #1
 8000722:	e022      	b.n	800076a <BSP_DRV_QSPI_Reset+0x94>

	// 3. Sending Reset command

    BSP_STM32_QSPI_CfgNewCommand();
 8000724:	f00a f968 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RST);
 8000728:	2199      	movs	r1, #153	; 0x99
 800072a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800072e:	f00a f96f 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2000      	movs	r0, #0
 8000738:	f00a f9b0 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f00a fa43 	bl	800abc8 <BSP_STM32_QSPI_StartTransmit>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <BSP_DRV_QSPI_Reset+0x76>
 8000748:	2301      	movs	r3, #1
 800074a:	e00e      	b.n	800076a <BSP_DRV_QSPI_Reset+0x94>

	// 4. Waiting for chip ready status
    BSP_Delay(10); // Delay so CE line can go HIGH
 800074c:	200a      	movs	r0, #10
 800074e:	f005 fe31 	bl	80063b4 <BSP_Delay>
    if (_DRV_QSPI_CheckStatus(hqspi, QSPI_MODE_SPI, 0x01, 0x00)) return BSP_ERROR;
 8000752:	2300      	movs	r3, #0
 8000754:	2201      	movs	r2, #1
 8000756:	2100      	movs	r1, #0
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff43 	bl	80005e4 <_DRV_QSPI_CheckStatus>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <BSP_DRV_QSPI_Reset+0x92>
 8000764:	2301      	movs	r3, #1
 8000766:	e000      	b.n	800076a <BSP_DRV_QSPI_Reset+0x94>

    return BSP_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <BSP_DRV_QSPI_Init>:



uint8_t BSP_DRV_QSPI_Init(QUADSPI_TypeDef * hqspi) {
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
    uint8_t chip_id[2];
    uint8_t	read_reg;
    uint8_t	status_reg;
    uint8_t try = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
    // For some reason memory chip is not working properly after every reset
    // Therefore operation is repeated as required (but not more than 4 times)
    do {

		// 1. Reset chip
		if (BSP_DRV_QSPI_Reset(hqspi)) continue;
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ffa9 	bl	80006d6 <BSP_DRV_QSPI_Reset>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d12e      	bne.n	80007e8 <BSP_DRV_QSPI_Init+0x76>

		// 2. Checking communication and identify chip
		BSP_STM32_QSPI_CfgNewCommand();
 800078a:	f00a f935 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDMDID);
 800078e:	2190      	movs	r1, #144	; 0x90
 8000790:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000794:	f00a f93c 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgAddress(QSPI_ADDRESS_1_LINE, QSPI_ADDRESS_24_BITS, 0x00);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007a2:	f00a f94b 	bl	800aa3c <BSP_STM32_QSPI_CfgAddress>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, chip_id, 2);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2202      	movs	r2, #2
 80007ac:	4619      	mov	r1, r3
 80007ae:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80007b2:	f00a f95b 	bl	800aa6c <BSP_STM32_QSPI_CfgData>
		BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2000      	movs	r0, #0
 80007bc:	f00a f96e 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
		if (BSP_STM32_QSPI_StartReceive(hqspi)) continue;
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f00a f99f 	bl	800ab04 <BSP_STM32_QSPI_StartReceive>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10f      	bne.n	80007ec <BSP_DRV_QSPI_Init+0x7a>

		if (chip_id[0] != QSPI_CHIP_MID) continue;
 80007cc:	7b3b      	ldrb	r3, [r7, #12]
 80007ce:	2b9d      	cmp	r3, #157	; 0x9d
 80007d0:	d10e      	bne.n	80007f0 <BSP_DRV_QSPI_Init+0x7e>

		if (chip_id[1] != QSPI_CHIP_CID) continue;
 80007d2:	7b7b      	ldrb	r3, [r7, #13]
 80007d4:	2b17      	cmp	r3, #23
 80007d6:	d10d      	bne.n	80007f4 <BSP_DRV_QSPI_Init+0x82>

    	try++;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	3301      	adds	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
		if (try >= 4) return BSP_ERROR;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d909      	bls.n	80007f8 <BSP_DRV_QSPI_Init+0x86>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e0e0      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>
		if (BSP_DRV_QSPI_Reset(hqspi)) continue;
 80007e8:	bf00      	nop
 80007ea:	e7c8      	b.n	800077e <BSP_DRV_QSPI_Init+0xc>
		if (BSP_STM32_QSPI_StartReceive(hqspi)) continue;
 80007ec:	bf00      	nop
 80007ee:	e7c6      	b.n	800077e <BSP_DRV_QSPI_Init+0xc>
		if (chip_id[0] != QSPI_CHIP_MID) continue;
 80007f0:	bf00      	nop
 80007f2:	e7c4      	b.n	800077e <BSP_DRV_QSPI_Init+0xc>
		if (chip_id[1] != QSPI_CHIP_CID) continue;
 80007f4:	bf00      	nop
		if (BSP_DRV_QSPI_Reset(hqspi)) continue;
 80007f6:	e7c2      	b.n	800077e <BSP_DRV_QSPI_Init+0xc>

		break;
 80007f8:	bf00      	nop

    } while (1);

	// 3. Setup dummy cycles
    BSP_STM32_QSPI_CfgNewCommand();
 80007fa:	f00a f8fd 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDRP);
 80007fe:	2161      	movs	r1, #97	; 0x61
 8000800:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000804:	f00a f904 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &read_reg, 1);
 8000808:	f107 030b 	add.w	r3, r7, #11
 800080c:	2201      	movs	r2, #1
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000814:	f00a f92a 	bl	800aa6c <BSP_STM32_QSPI_CfgData>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f00a f93d 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartReceive(hqspi)) return BSP_ERROR;
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f00a f96e 	bl	800ab04 <BSP_STM32_QSPI_StartReceive>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <BSP_DRV_QSPI_Init+0xc0>
 800082e:	2301      	movs	r3, #1
 8000830:	e0bb      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

    MODIFY_REG(read_reg, 0b01111000, (QSPI_CFG_DUMMY_CLKS << 3));
 8000832:	7afb      	ldrb	r3, [r7, #11]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 800083a:	b25b      	sxtb	r3, r3
 800083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000840:	b25b      	sxtb	r3, r3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	72fb      	strb	r3, [r7, #11]

    if (_DRV_QSPI_WriteEnable(hqspi, QSPI_MODE_SPI)) return BSP_ERROR;
 8000846:	2100      	movs	r1, #0
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff15 	bl	8000678 <_DRV_QSPI_WriteEnable>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <BSP_DRV_QSPI_Init+0xe6>
 8000854:	2301      	movs	r3, #1
 8000856:	e0a8      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

    BSP_STM32_QSPI_CfgNewCommand();
 8000858:	f00a f8ce 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_SRPV);
 800085c:	2163      	movs	r1, #99	; 0x63
 800085e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000862:	f00a f8d5 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &read_reg, 1);
 8000866:	f107 030b 	add.w	r3, r7, #11
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000872:	f00a f8fb 	bl	800aa6c <BSP_STM32_QSPI_CfgData>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2000      	movs	r0, #0
 800087c:	f00a f90e 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f00a f9a1 	bl	800abc8 <BSP_STM32_QSPI_StartTransmit>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <BSP_DRV_QSPI_Init+0x11e>
 800088c:	2301      	movs	r3, #1
 800088e:	e08c      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

	// Waiting for chip ready status
    if (_DRV_QSPI_CheckStatus(hqspi, QSPI_MODE_SPI, 0x01, 0x00)) return BSP_ERROR;
 8000890:	2300      	movs	r3, #0
 8000892:	2201      	movs	r2, #1
 8000894:	2100      	movs	r1, #0
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fea4 	bl	80005e4 <_DRV_QSPI_CheckStatus>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <BSP_DRV_QSPI_Init+0x134>
 80008a2:	2301      	movs	r3, #1
 80008a4:	e081      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

	// 4. Enable 4bytes addresses (required for mem-mapped mode)
    BSP_STM32_QSPI_CfgNewCommand();
 80008a6:	f00a f8a7 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_EN4B);
 80008aa:	21b7      	movs	r1, #183	; 0xb7
 80008ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008b0:	f00a f8ae 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2000      	movs	r0, #0
 80008ba:	f00a f8ef 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f00a f982 	bl	800abc8 <BSP_STM32_QSPI_StartTransmit>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <BSP_DRV_QSPI_Init+0x15c>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e06d      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

	// 5. Enable quad mode
    BSP_STM32_QSPI_CfgNewCommand();
 80008ce:	f00a f893 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 80008d2:	2105      	movs	r1, #5
 80008d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008d8:	f00a f89a 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &status_reg, 1);
 80008dc:	f107 030a 	add.w	r3, r7, #10
 80008e0:	2201      	movs	r2, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80008e8:	f00a f8c0 	bl	800aa6c <BSP_STM32_QSPI_CfgData>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2000      	movs	r0, #0
 80008f2:	f00a f8d3 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartReceive(hqspi)) return BSP_ERROR;
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f00a f904 	bl	800ab04 <BSP_STM32_QSPI_StartReceive>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <BSP_DRV_QSPI_Init+0x194>
 8000902:	2301      	movs	r3, #1
 8000904:	e051      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

    // The quad mode option bit is non-volatile. If it is already set, there is no need to write it again.
    if ((status_reg & (0b01000000)) == 0) {
 8000906:	7abb      	ldrb	r3, [r7, #10]
 8000908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090c:	2b00      	cmp	r3, #0
 800090e:	d137      	bne.n	8000980 <BSP_DRV_QSPI_Init+0x20e>

    	MODIFY_REG(status_reg, 0b01000000, (1 << 6));
 8000910:	7abb      	ldrb	r3, [r7, #10]
 8000912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000916:	b2db      	uxtb	r3, r3
 8000918:	72bb      	strb	r3, [r7, #10]

		if (_DRV_QSPI_WriteEnable(hqspi, QSPI_MODE_SPI)) return BSP_ERROR;
 800091a:	2100      	movs	r1, #0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff feab 	bl	8000678 <_DRV_QSPI_WriteEnable>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <BSP_DRV_QSPI_Init+0x1ba>
 8000928:	2301      	movs	r3, #1
 800092a:	e03e      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

		BSP_STM32_QSPI_CfgNewCommand();
 800092c:	f00a f864 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WRSR);
 8000930:	2101      	movs	r1, #1
 8000932:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000936:	f00a f86b 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &status_reg, 1);
 800093a:	f107 030a 	add.w	r3, r7, #10
 800093e:	2201      	movs	r2, #1
 8000940:	4619      	mov	r1, r3
 8000942:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000946:	f00a f891 	bl	800aa6c <BSP_STM32_QSPI_CfgData>
		BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2000      	movs	r0, #0
 8000950:	f00a f8a4 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
		if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f00a f937 	bl	800abc8 <BSP_STM32_QSPI_StartTransmit>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <BSP_DRV_QSPI_Init+0x1f2>
 8000960:	2301      	movs	r3, #1
 8000962:	e022      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

		BSP_Delay(10); // Delay so CE line can go HIGH
 8000964:	200a      	movs	r0, #10
 8000966:	f005 fd25 	bl	80063b4 <BSP_Delay>

		// Waiting for chip ready status
		if (_DRV_QSPI_CheckStatus(hqspi, QSPI_MODE_SPI, 0x01, 0x00)) return BSP_ERROR;
 800096a:	2300      	movs	r3, #0
 800096c:	2201      	movs	r2, #1
 800096e:	2100      	movs	r1, #0
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff fe37 	bl	80005e4 <_DRV_QSPI_CheckStatus>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <BSP_DRV_QSPI_Init+0x20e>
 800097c:	2301      	movs	r3, #1
 800097e:	e014      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

    }

	// 6. Enable QPI mode
    BSP_STM32_QSPI_CfgNewCommand();
 8000980:	f00a f83a 	bl	800a9f8 <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_QPIEN);
 8000984:	2135      	movs	r1, #53	; 0x35
 8000986:	f44f 7080 	mov.w	r0, #256	; 0x100
 800098a:	f00a f841 	bl	800aa10 <BSP_STM32_QSPI_CfgInstruction>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f00a f882 	bl	800aa9c <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f00a f915 	bl	800abc8 <BSP_STM32_QSPI_StartTransmit>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <BSP_DRV_QSPI_Init+0x236>
 80009a4:	2301      	movs	r3, #1
 80009a6:	e000      	b.n	80009aa <BSP_DRV_QSPI_Init+0x238>

	return BSP_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <limitvalue>:
#include "IS42S32160F.h"

#include "math.h"

// Private functions
uint32_t limitvalue(uint32_t value, uint32_t min, uint32_t max) {
 80009b2:	b480      	push	{r7}
 80009b4:	b087      	sub	sp, #28
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
	uint32_t val = value;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	617b      	str	r3, [r7, #20]
	if (value < min) val = min;
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d201      	bcs.n	80009ce <limitvalue+0x1c>
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	617b      	str	r3, [r7, #20]
	if (value > max) val = max;
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d901      	bls.n	80009da <limitvalue+0x28>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	617b      	str	r3, [r7, #20]
	return val;
 80009da:	697b      	ldr	r3, [r7, #20]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	371c      	adds	r7, #28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <BSP_DRV_SDRAM_Init>:


// SDRAM Configuration generator
uint8_t	BSP_DRV_SDRAM_Init(FMC_SDRAM_TypeDef *sdram, uint32_t SDBank, uint32_t SDClockPeriod, uint32_t Ck_Freq) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b098      	sub	sp, #96	; 0x60
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	603b      	str	r3, [r7, #0]

	// Ck_Freq in MHz

	#define SDRAM_TIMEOUT	(uint32_t)0xFFFFF
	volatile uint32_t timeout = SDRAM_TIMEOUT;
 80009f6:	4b9a      	ldr	r3, [pc, #616]	; (8000c60 <BSP_DRV_SDRAM_Init+0x278>)
 80009f8:	617b      	str	r3, [r7, #20]

	uint32_t param_CASLatency = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t param_ColumnBitsNumber = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t param_InternalBankNumber = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t param_MemoryDataWidth = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t param_ReadBurst = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t param_ReadPipeDelay = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t param_RowBitsNumber = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t param_WriteProtection = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c


	// Calculating memory parameters (Bank Number and Clock Period are depend on uC and should be configured outside of this driver)
	switch (BSP_SDRAM_CAS_LATENCY) {
		case 1:		param_CASLatency = FMC_SDRAM_CAS_LATENCY_1;		break;
		case 2:		param_CASLatency = FMC_SDRAM_CAS_LATENCY_2;		break;
 8000a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a20:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_COL_ADDR_BITS) {
		case 8:		param_ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;	break;
		case 9:		param_ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;	break;
 8000a22:	2301      	movs	r3, #1
 8000a24:	657b      	str	r3, [r7, #84]	; 0x54
 8000a26:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_BANK_NO) {
		case 2:		param_InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2; break;
		case 4:		param_InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4; break;
 8000a28:	2340      	movs	r3, #64	; 0x40
 8000a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8000a2c:	bf00      	nop
	}

	switch (BSP_SDRAM_DATA_WIDTH) {
		case 8:		param_MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8; 	break;
		case 16:	param_MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16; break;
		case 32:	param_MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;	break;
 8000a2e:	2320      	movs	r3, #32
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a32:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_BURST_READ) {
		case 0:		param_ReadBurst = FMC_SDRAM_RBURST_DISABLE;	break;
		case 1:		param_ReadBurst = FMC_SDRAM_RBURST_ENABLE;	break;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a3a:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_READ_PIPE_DELAY) {
		case 0:		param_ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;	break;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8000a40:	bf00      	nop
	}

	switch (BSP_SDRAM_ROW_ADDR_BITS) {
		case 11:	param_RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;	break;
		case 12:	param_RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;	break;
		case 13:	param_RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;	break;
 8000a42:	2308      	movs	r3, #8
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
 8000a46:	bf00      	nop
		default:	return BSP_ERROR;
	}

	switch (BSP_SDRAM_WRITE_PROTECTION) {
		case 0:		param_WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;	break;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a4c:	bf00      	nop
		default:	return BSP_ERROR;
	}

	// Calculating memory timings

	float CPeriod = 1000.0 / (float)Ck_Freq; // Returns period in ns
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	ee07 3a90 	vmov	s15, r3
 8000a54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a58:	eddf 6a82 	vldr	s13, [pc, #520]	; 8000c64 <BSP_DRV_SDRAM_Init+0x27c>
 8000a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a60:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	uint32_t param_LoadToActiveDelay = limitvalue(round(1.0 * BSP_SDRAM_TMRD / CPeriod), 1, 16);
 8000a64:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a6c:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 8000a70:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a74:	eeb0 0b46 	vmov.f64	d0, d6
 8000a78:	f018 f868 	bl	8018b4c <round>
 8000a7c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a84:	2210      	movs	r2, #16
 8000a86:	2101      	movs	r1, #1
 8000a88:	ee17 0a90 	vmov	r0, s15
 8000a8c:	f7ff ff91 	bl	80009b2 <limitvalue>
 8000a90:	6378      	str	r0, [r7, #52]	; 0x34
	uint32_t param_ExitSelfRefreshDelay = limitvalue(round(1.0 * BSP_SDRAM_TXSR / CPeriod), 1, 16);
 8000a92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a9a:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000c48 <BSP_DRV_SDRAM_Init+0x260>
 8000a9e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000aa2:	eeb0 0b46 	vmov.f64	d0, d6
 8000aa6:	f018 f851 	bl	8018b4c <round>
 8000aaa:	eeb0 7b40 	vmov.f64	d7, d0
 8000aae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	ee17 0a90 	vmov	r0, s15
 8000aba:	f7ff ff7a 	bl	80009b2 <limitvalue>
 8000abe:	6338      	str	r0, [r7, #48]	; 0x30
	uint32_t param_SelfRefreshTime = limitvalue(round(1.0 * BSP_SDRAM_TRAS / CPeriod), 1, 16);
 8000ac0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ac4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac8:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8000c50 <BSP_DRV_SDRAM_Init+0x268>
 8000acc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ad0:	eeb0 0b46 	vmov.f64	d0, d6
 8000ad4:	f018 f83a 	bl	8018b4c <round>
 8000ad8:	eeb0 7b40 	vmov.f64	d7, d0
 8000adc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ae0:	2210      	movs	r2, #16
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	ee17 0a90 	vmov	r0, s15
 8000ae8:	f7ff ff63 	bl	80009b2 <limitvalue>
 8000aec:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t param_RowCycleDelay = limitvalue(round(1.0 * BSP_SDRAM_TRC / CPeriod), 1, 16);
 8000aee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af6:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000c58 <BSP_DRV_SDRAM_Init+0x270>
 8000afa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000afe:	eeb0 0b46 	vmov.f64	d0, d6
 8000b02:	f018 f823 	bl	8018b4c <round>
 8000b06:	eeb0 7b40 	vmov.f64	d7, d0
 8000b0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b0e:	2210      	movs	r2, #16
 8000b10:	2101      	movs	r1, #1
 8000b12:	ee17 0a90 	vmov	r0, s15
 8000b16:	f7ff ff4c 	bl	80009b2 <limitvalue>
 8000b1a:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t param_WriteRecoveryTime = limitvalue(BSP_SDRAM_TWR, 2, 16);
 8000b1c:	2210      	movs	r2, #16
 8000b1e:	2102      	movs	r1, #2
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff ff46 	bl	80009b2 <limitvalue>
 8000b26:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t param_RPDelay = limitvalue(BSP_SDRAM_TRP, 1, 16);
 8000b28:	2210      	movs	r2, #16
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f7ff ff40 	bl	80009b2 <limitvalue>
 8000b32:	6238      	str	r0, [r7, #32]
	uint32_t param_RCDDelay = limitvalue(BSP_SDRAM_TRCD, 1, 16);
 8000b34:	2210      	movs	r2, #16
 8000b36:	2101      	movs	r1, #1
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f7ff ff3a 	bl	80009b2 <limitvalue>
 8000b3e:	61f8      	str	r0, [r7, #28]

	// Configuring SDRAM

	if (SDBank == FMC_SDRAM_BANK1) {
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d115      	bne.n	8000b72 <BSP_DRV_SDRAM_Init+0x18a>
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], 0xFFFFFFFF,(param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber | param_CASLatency |
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b52:	431a      	orrs	r2, r3
 8000b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b56:	431a      	orrs	r2, r3
 8000b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	431a      	orrs	r2, r3
 8000b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b66:	431a      	orrs	r2, r3
 8000b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e01a      	b.n	8000ba8 <BSP_DRV_SDRAM_Init+0x1c0>
	    														param_WriteProtection | SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
	} else {
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b7e:	4319      	orrs	r1, r3
 8000b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b82:	430b      	orrs	r3, r1
 8000b84:	431a      	orrs	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	601a      	str	r2, [r3, #0]
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK2], 0xFFFFFFFF, (param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber |
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b92:	431a      	orrs	r2, r3
 8000b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b96:	431a      	orrs	r2, r3
 8000b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	605a      	str	r2, [r3, #4]
	}


	// Configuring SDRAM timings

	if (SDBank == FMC_SDRAM_BANK1) {
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d11e      	bne.n	8000bec <BSP_DRV_SDRAM_Init+0x204>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb4:	1e5a      	subs	r2, r3, #1
 8000bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	031b      	lsls	r3, r3, #12
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	041b      	lsls	r3, r3, #16
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	051b      	lsls	r3, r3, #20
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	061b      	lsls	r3, r3, #24
 8000be4:	431a      	orrs	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	e023      	b.n	8000c34 <BSP_DRV_SDRAM_Init+0x24c>
	    															(((param_SelfRefreshTime) - 1U) << FMC_SDTRx_TRAS_Pos) | (((param_RowCycleDelay) - 1U) << FMC_SDTRx_TRC_Pos) |
																	(((param_WriteRecoveryTime) - 1U) << FMC_SDTRx_TWR_Pos) | (((param_RPDelay) - 1U) << FMC_SDTRx_TRP_Pos) |
																	(((param_RCDDelay) - 1U) << FMC_SDTRx_TRCD_Pos)));
	} else {
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], FMC_SDTRx_TRC | FMC_SDTRx_TRP, (((param_RowCycleDelay) - 1U) << FMC_SDTRx_TRC_Pos) | (((param_RPDelay) - 1U) << FMC_SDTRx_TRP_Pos));
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <BSP_DRV_SDRAM_Init+0x280>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	0311      	lsls	r1, r2, #12
 8000bfa:	6a3a      	ldr	r2, [r7, #32]
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	0512      	lsls	r2, r2, #20
 8000c00:	430a      	orrs	r2, r1
 8000c02:	431a      	orrs	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	609a      	str	r2, [r3, #8]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	3b01      	subs	r3, #1
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	431a      	orrs	r2, r3
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	3b01      	subs	r3, #1
 8000c24:	041b      	lsls	r3, r3, #16
 8000c26:	431a      	orrs	r2, r3
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	061b      	lsls	r3, r3, #24
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	60da      	str	r2, [r3, #12]
																	(((param_RCDDelay) - 1U) << FMC_SDTRx_TRCD_Pos)));
	}

	// Initialize memory IC

	uint32_t CommandTarget = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (SDBank == FMC_SDRAM_BANK1) CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK1; else CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK2;
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d116      	bne.n	8000c6c <BSP_DRV_SDRAM_Init+0x284>
 8000c3e:	2310      	movs	r3, #16
 8000c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c42:	e015      	b.n	8000c70 <BSP_DRV_SDRAM_Init+0x288>
 8000c44:	f3af 8000 	nop.w
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	40518000 	.word	0x40518000
 8000c50:	00000000 	.word	0x00000000
 8000c54:	40450000 	.word	0x40450000
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	404e0000 	.word	0x404e0000
 8000c60:	000fffff 	.word	0x000fffff
 8000c64:	447a0000 	.word	0x447a0000
 8000c68:	ff0f0fff 	.word	0xff0f0fff
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	65fb      	str	r3, [r7, #92]	; 0x5c

	// Little delay
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 8000c70:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <BSP_DRV_SDRAM_Init+0x390>)
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	bf00      	nop
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	617a      	str	r2, [r7, #20]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1fa      	bne.n	8000c76 <BSP_DRV_SDRAM_Init+0x28e>

	// Configure a clock configuration enable command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <BSP_DRV_SDRAM_Init+0x394>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	f043 0201 	orr.w	r2, r3, #1
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	611a      	str	r2, [r3, #16]
				((FMC_SDRAM_CMD_CLK_ENABLE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Little delay
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 8000c94:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <BSP_DRV_SDRAM_Init+0x390>)
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	bf00      	nop
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	1e5a      	subs	r2, r3, #1
 8000c9e:	617a      	str	r2, [r7, #20]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1fa      	bne.n	8000c9a <BSP_DRV_SDRAM_Init+0x2b2>

	// Configure a PALL (precharge all) command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <BSP_DRV_SDRAM_Init+0x394>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	f043 0202 	orr.w	r2, r3, #2
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
				((FMC_SDRAM_CMD_PALL) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Configure a Auto-Refresh command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <BSP_DRV_SDRAM_Init+0x394>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	f043 02e3 	orr.w	r2, r3, #227	; 0xe3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	611a      	str	r2, [r3, #16]
				((FMC_SDRAM_CMD_AUTOREFRESH_MODE) | (CommandTarget) | (((8) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Configure a Auto-Refresh command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <BSP_DRV_SDRAM_Init+0x394>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	f043 02e3 	orr.w	r2, r3, #227	; 0xe3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	611a      	str	r2, [r3, #16]
				((FMC_SDRAM_CMD_AUTOREFRESH_MODE) | (CommandTarget) | (((8) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Configure a load Mode register command
	if (BSP_SDRAM_CAS_LATENCY == 3) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
				((FMC_SDRAM_CMD_LOAD_MODE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0x0230) << FMC_SDCMR_MRD_Pos)));
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <BSP_DRV_SDRAM_Init+0x394>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cea:	431a      	orrs	r2, r3
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <BSP_DRV_SDRAM_Init+0x398>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	6113      	str	r3, [r2, #16]
			((FMC_SDRAM_CMD_LOAD_MODE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0x0220) << FMC_SDCMR_MRD_Pos)));

	// Program Refresh Period
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	ee07 3a90 	vmov	s15, r3
 8000cfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cfe:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000d60 <BSP_DRV_SDRAM_Init+0x378>
 8000d02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d06:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000d68 <BSP_DRV_SDRAM_Init+0x380>
 8000d0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d0e:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8000d70 <BSP_DRV_SDRAM_Init+0x388>
 8000d12:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000d16:	eeb0 0b46 	vmov.f64	d0, d6
 8000d1a:	f017 ff17 	bl	8018b4c <round>
 8000d1e:	eeb0 7b40 	vmov.f64	d7, d0
 8000d22:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8000d26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d2e:	ee17 3a90 	vmov	r3, s15
 8000d32:	61bb      	str	r3, [r7, #24]
	MODIFY_REG(sdram->SDRTR, FMC_SDRTR_COUNT, (param_RefreshPeriod << FMC_SDRTR_COUNT_Pos));
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <BSP_DRV_SDRAM_Init+0x39c>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	0052      	lsls	r2, r2, #1
 8000d40:	431a      	orrs	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	615a      	str	r2, [r3, #20]

	// Enable FMC Peripheral
	__FMC_ENABLE();
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <BSP_DRV_SDRAM_Init+0x3a0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <BSP_DRV_SDRAM_Init+0x3a0>)
 8000d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d50:	6013      	str	r3, [r2, #0]

	return BSP_OK;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3760      	adds	r7, #96	; 0x60
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	f3af 8000 	nop.w
 8000d60:	00000000 	.word	0x00000000
 8000d64:	408f4000 	.word	0x408f4000
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	40500000 	.word	0x40500000
 8000d70:	00000000 	.word	0x00000000
 8000d74:	40c00000 	.word	0x40c00000
 8000d78:	00effff1 	.word	0x00effff1
 8000d7c:	ffc00000 	.word	0xffc00000
 8000d80:	00044004 	.word	0x00044004
 8000d84:	ffffc001 	.word	0xffffc001
 8000d88:	52004000 	.word	0x52004000

08000d8c <BSP_DRV_IMU_Init>:
KALMAN_HandleTypeDef KALMAN_pitch = {0};
KALMAN_HandleTypeDef KALMAN_roll = {0};
KALMAN_HandleTypeDef KALMAN_yaw = {0};


uint8_t	BSP_DRV_IMU_Init(IMU_HandleTypeDef *himu, I2C_TypeDef *hi2c) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	// Resetting IMU global variable
	himu->cal.c_ox = 0;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
	himu->cal.c_oy = 0;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
	himu->cal.c_oz = 0;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
	himu->cal.c_x = 0;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
	himu->cal.c_y = 0;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
	himu->cal.c_z = 0;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
	himu->cal.progress = 0;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28

	// Reseting MPU
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x80, 100)) return BSP_ERROR;
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	226b      	movs	r2, #107	; 0x6b
 8000dc8:	21d0      	movs	r1, #208	; 0xd0
 8000dca:	6838      	ldr	r0, [r7, #0]
 8000dcc:	f008 fe26 	bl	8009a1c <BSP_STM32_I2C_RegWrite>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <BSP_DRV_IMU_Init+0x4e>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e067      	b.n	8000eaa <BSP_DRV_IMU_Init+0x11e>
	BSP_Delay(100);
 8000dda:	2064      	movs	r0, #100	; 0x64
 8000ddc:	f005 faea 	bl	80063b4 <BSP_Delay>

	// Setting MPU Power mode to "Wake Up Device"
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x03, 100)) return BSP_ERROR;
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2303      	movs	r3, #3
 8000de6:	226b      	movs	r2, #107	; 0x6b
 8000de8:	21d0      	movs	r1, #208	; 0xd0
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f008 fe16 	bl	8009a1c <BSP_STM32_I2C_RegWrite>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <BSP_DRV_IMU_Init+0x6e>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e057      	b.n	8000eaa <BSP_DRV_IMU_Init+0x11e>

	// Setting MPU Gyro range to +/- 500 deg/sec
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_GYRO_CFG, 0x08, 100)) return BSP_ERROR;
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2308      	movs	r3, #8
 8000e00:	221b      	movs	r2, #27
 8000e02:	21d0      	movs	r1, #208	; 0xd0
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f008 fe09 	bl	8009a1c <BSP_STM32_I2C_RegWrite>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <BSP_DRV_IMU_Init+0x88>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e04a      	b.n	8000eaa <BSP_DRV_IMU_Init+0x11e>

	// Setting MPU Accel range to +/- 2 G
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_ACCEL_CFG, 0x00, 100)) return BSP_ERROR;
 8000e14:	2364      	movs	r3, #100	; 0x64
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	221c      	movs	r2, #28
 8000e1c:	21d0      	movs	r1, #208	; 0xd0
 8000e1e:	6838      	ldr	r0, [r7, #0]
 8000e20:	f008 fdfc 	bl	8009a1c <BSP_STM32_I2C_RegWrite>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <BSP_DRV_IMU_Init+0xa2>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e03d      	b.n	8000eaa <BSP_DRV_IMU_Init+0x11e>

	// Setting digital signal filtering (low pass filter = 94Hz / delay 3ms)
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_CONFIG, 0x02, 100)) return BSP_ERROR;
 8000e2e:	2364      	movs	r3, #100	; 0x64
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2302      	movs	r3, #2
 8000e34:	221a      	movs	r2, #26
 8000e36:	21d0      	movs	r1, #208	; 0xd0
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f008 fdef 	bl	8009a1c <BSP_STM32_I2C_RegWrite>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <BSP_DRV_IMU_Init+0xbc>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e030      	b.n	8000eaa <BSP_DRV_IMU_Init+0x11e>

	// Setting update frequency divider to 25Hz (sampling rate = 1kHz / (1 + divider))
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_SMPLRT_DIV, 39, 100)) return BSP_ERROR;
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2327      	movs	r3, #39	; 0x27
 8000e4e:	2219      	movs	r2, #25
 8000e50:	21d0      	movs	r1, #208	; 0xd0
 8000e52:	6838      	ldr	r0, [r7, #0]
 8000e54:	f008 fde2 	bl	8009a1c <BSP_STM32_I2C_RegWrite>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <BSP_DRV_IMU_Init+0xd6>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e023      	b.n	8000eaa <BSP_DRV_IMU_Init+0x11e>

	// Configuring INT pin to ACTIVE HIGH LOGIC, PUSH-PULL, 50us PULSE, CLEAR BY ANY READ OPERATION
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_INT_CFG, 0x10, 100)) return BSP_ERROR;
 8000e62:	2364      	movs	r3, #100	; 0x64
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2310      	movs	r3, #16
 8000e68:	2237      	movs	r2, #55	; 0x37
 8000e6a:	21d0      	movs	r1, #208	; 0xd0
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f008 fdd5 	bl	8009a1c <BSP_STM32_I2C_RegWrite>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <BSP_DRV_IMU_Init+0xf0>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e016      	b.n	8000eaa <BSP_DRV_IMU_Init+0x11e>

	// Enabling INT generation on IMU data ready event
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_INT_EN, 0x01, 100)) return BSP_ERROR;
 8000e7c:	2364      	movs	r3, #100	; 0x64
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	2238      	movs	r2, #56	; 0x38
 8000e84:	21d0      	movs	r1, #208	; 0xd0
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f008 fdc8 	bl	8009a1c <BSP_STM32_I2C_RegWrite>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <BSP_DRV_IMU_Init+0x10a>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e009      	b.n	8000eaa <BSP_DRV_IMU_Init+0x11e>

	// Initializing Kalman filters
	KALMAN_Init(&KALMAN_pitch);
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <BSP_DRV_IMU_Init+0x128>)
 8000e98:	f006 fe02 	bl	8007aa0 <KALMAN_Init>
	KALMAN_Init(&KALMAN_roll);
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <BSP_DRV_IMU_Init+0x12c>)
 8000e9e:	f006 fdff 	bl	8007aa0 <KALMAN_Init>
	KALMAN_Init(&KALMAN_yaw);
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <BSP_DRV_IMU_Init+0x130>)
 8000ea4:	f006 fdfc 	bl	8007aa0 <KALMAN_Init>

	return BSP_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	24000054 	.word	0x24000054
 8000eb8:	24000090 	.word	0x24000090
 8000ebc:	240000cc 	.word	0x240000cc

08000ec0 <BSP_DRV_IMU_Parse>:
	himu->cal.progress = 128;
	return BSP_OK;
}


void BSP_DRV_IMU_Parse(IMU_HandleTypeDef *himu) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

	// Parsing data received from IMU - integer calculations

	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	785b      	ldrb	r3, [r3, #1]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	789b      	ldrb	r3, [r3, #2]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	78db      	ldrb	r3, [r3, #3]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	795b      	ldrb	r3, [r3, #5]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
	z = -z;
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	425b      	negs	r3, r3
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7a1b      	ldrb	r3, [r3, #8]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7a5b      	ldrb	r3, [r3, #9]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	623b      	str	r3, [r7, #32]
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7a9b      	ldrb	r3, [r3, #10]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7adb      	ldrb	r3, [r3, #11]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	61fb      	str	r3, [r7, #28]
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7b1b      	ldrb	r3, [r3, #12]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7b5b      	ldrb	r3, [r3, #13]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	61bb      	str	r3, [r7, #24]

	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	799b      	ldrb	r3, [r3, #6]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	79db      	ldrb	r3, [r3, #7]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	617b      	str	r3, [r7, #20]

	if (himu->cal.progress > 0) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d065      	beq.n	800104a <BSP_DRV_IMU_Parse+0x18a>
		// If calibration enabled, collecting data for calibration
		himu->cal.c_y += y;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1a      	ldr	r2, [r3, #32]
 8000f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f84:	441a      	add	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	621a      	str	r2, [r3, #32]
		himu->cal.c_x += x;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69da      	ldr	r2, [r3, #28]
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	441a      	add	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	61da      	str	r2, [r3, #28]
		himu->cal.c_z += (z - 16384);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fa0:	441a      	add	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
		himu->cal.c_oy += oy;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	441a      	add	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	615a      	str	r2, [r3, #20]
		himu->cal.c_ox += ox;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	441a      	add	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	611a      	str	r2, [r3, #16]
		himu->cal.c_oz += oz;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699a      	ldr	r2, [r3, #24]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
		himu->cal.progress -= 1;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
		if (himu->cal.progress == 0) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d154      	bne.n	8001086 <BSP_DRV_IMU_Parse+0x1c6>
			himu->cal.c_y = himu->cal.c_y / 128;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da00      	bge.n	8000fe6 <BSP_DRV_IMU_Parse+0x126>
 8000fe4:	337f      	adds	r3, #127	; 0x7f
 8000fe6:	11db      	asrs	r3, r3, #7
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	621a      	str	r2, [r3, #32]
			himu->cal.c_x = himu->cal.c_x / 128;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da00      	bge.n	8000ff8 <BSP_DRV_IMU_Parse+0x138>
 8000ff6:	337f      	adds	r3, #127	; 0x7f
 8000ff8:	11db      	asrs	r3, r3, #7
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	61da      	str	r2, [r3, #28]
			himu->cal.c_z = himu->cal.c_z / 128;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	2b00      	cmp	r3, #0
 8001006:	da00      	bge.n	800100a <BSP_DRV_IMU_Parse+0x14a>
 8001008:	337f      	adds	r3, #127	; 0x7f
 800100a:	11db      	asrs	r3, r3, #7
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	2b00      	cmp	r3, #0
 8001018:	da00      	bge.n	800101c <BSP_DRV_IMU_Parse+0x15c>
 800101a:	337f      	adds	r3, #127	; 0x7f
 800101c:	11db      	asrs	r3, r3, #7
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	615a      	str	r2, [r3, #20]
			himu->cal.c_ox = himu->cal.c_ox / 128;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	da00      	bge.n	800102e <BSP_DRV_IMU_Parse+0x16e>
 800102c:	337f      	adds	r3, #127	; 0x7f
 800102e:	11db      	asrs	r3, r3, #7
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	611a      	str	r2, [r3, #16]
			himu->cal.c_oz = himu->cal.c_oz / 128;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da00      	bge.n	8001040 <BSP_DRV_IMU_Parse+0x180>
 800103e:	337f      	adds	r3, #127	; 0x7f
 8001040:	11db      	asrs	r3, r3, #7
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	e01d      	b.n	8001086 <BSP_DRV_IMU_Parse+0x1c6>
		}
	} else {
		// If no calibration in progress than correcting data by calibration factors
		y -= himu->cal.c_y;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
		x -= himu->cal.c_x;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
		z -= himu->cal.c_z;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
		oy -= himu->cal.c_oy;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	6a3a      	ldr	r2, [r7, #32]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	623b      	str	r3, [r7, #32]
		ox -= himu->cal.c_ox;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	61fb      	str	r3, [r7, #28]
		oz -= himu->cal.c_oz;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	61bb      	str	r3, [r7, #24]
	}


	// Calculating floats
	himu->data.y = (float)y / 16384.0;
 8001086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001090:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001250 <BSP_DRV_IMU_Parse+0x390>
 8001094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	himu->data.x = (float)x / 16384.0;
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a8:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001250 <BSP_DRV_IMU_Parse+0x390>
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	himu->data.z = (float)z / 16384.0;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c0:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001250 <BSP_DRV_IMU_Parse+0x390>
 80010c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	himu->data.oy = (float)oy / 65.5;
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001254 <BSP_DRV_IMU_Parse+0x394>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	himu->data.ox = (float)ox / 65.5;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f0:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001254 <BSP_DRV_IMU_Parse+0x394>
 80010f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	himu->data.oz = (float)oz / 65.5;
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001108:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001254 <BSP_DRV_IMU_Parse+0x394>
 800110c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	himu->data.t = (float)t / 340.0 + 36.53;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001120:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001124:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001238 <BSP_DRV_IMU_Parse+0x378>
 8001128:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800112c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001240 <BSP_DRV_IMU_Parse+0x380>
 8001130:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001134:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	// Calculating pitch, roll, yaw
	float acc_pitch = 57.29577951 * atan2f(himu->data.y, himu->data.z);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800114a:	eef0 0a47 	vmov.f32	s1, s14
 800114e:	eeb0 0a67 	vmov.f32	s0, s15
 8001152:	f017 fcf9 	bl	8018b48 <atan2f>
 8001156:	eef0 7a40 	vmov.f32	s15, s0
 800115a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001248 <BSP_DRV_IMU_Parse+0x388>
 8001162:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001166:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800116a:	edc7 7a04 	vstr	s15, [r7, #16]
	himu->pos.pitch = KALMAN_Update(&KALMAN_pitch, acc_pitch, himu->data.ox);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001174:	eef0 0a67 	vmov.f32	s1, s15
 8001178:	ed97 0a04 	vldr	s0, [r7, #16]
 800117c:	4836      	ldr	r0, [pc, #216]	; (8001258 <BSP_DRV_IMU_Parse+0x398>)
 800117e:	f006 fcc3 	bl	8007b08 <KALMAN_Update>
 8001182:	eef0 7a40 	vmov.f32	s15, s0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	float acc_roll = 57.29577951 * atan2f(-himu->data.x, himu->data.z);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001192:	eef1 7a67 	vneg.f32	s15, s15
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800119c:	eef0 0a47 	vmov.f32	s1, s14
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	f017 fcd0 	bl	8018b48 <atan2f>
 80011a8:	eef0 7a40 	vmov.f32	s15, s0
 80011ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011b0:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001248 <BSP_DRV_IMU_Parse+0x388>
 80011b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011bc:	edc7 7a03 	vstr	s15, [r7, #12]
	himu->pos.roll = KALMAN_Update(&KALMAN_roll, acc_roll, himu->data.oy);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011c6:	eef0 0a67 	vmov.f32	s1, s15
 80011ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80011ce:	4823      	ldr	r0, [pc, #140]	; (800125c <BSP_DRV_IMU_Parse+0x39c>)
 80011d0:	f006 fc9a 	bl	8007b08 <KALMAN_Update>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	float acc_yaw = 57.29577951 * atan2f(-himu->data.x, himu->data.y);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80011e4:	eef1 7a67 	vneg.f32	s15, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80011ee:	eef0 0a47 	vmov.f32	s1, s14
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f017 fca7 	bl	8018b48 <atan2f>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001202:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001248 <BSP_DRV_IMU_Parse+0x388>
 8001206:	ee27 7b06 	vmul.f64	d7, d7, d6
 800120a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800120e:	edc7 7a02 	vstr	s15, [r7, #8]
	himu->pos.yaw = KALMAN_Update(&KALMAN_yaw, acc_yaw, himu->data.oz);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001218:	eef0 0a67 	vmov.f32	s1, s15
 800121c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001220:	480f      	ldr	r0, [pc, #60]	; (8001260 <BSP_DRV_IMU_Parse+0x3a0>)
 8001222:	f006 fc71 	bl	8007b08 <KALMAN_Update>
 8001226:	eef0 7a40 	vmov.f32	s15, s0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

}
 8001230:	bf00      	nop
 8001232:	3730      	adds	r7, #48	; 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	00000000 	.word	0x00000000
 800123c:	40754000 	.word	0x40754000
 8001240:	0a3d70a4 	.word	0x0a3d70a4
 8001244:	404243d7 	.word	0x404243d7
 8001248:	1a5d2372 	.word	0x1a5d2372
 800124c:	404ca5dc 	.word	0x404ca5dc
 8001250:	46800000 	.word	0x46800000
 8001254:	42830000 	.word	0x42830000
 8001258:	24000054 	.word	0x24000054
 800125c:	24000090 	.word	0x24000090
 8001260:	240000cc 	.word	0x240000cc

08001264 <BSP_DRV_LCD_TP_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "RVT50AQTNWC00.h"

uint8_t BSP_DRV_LCD_TP_Init(I2C_TypeDef *hi2c) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	return BSP_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	0000      	movs	r0, r0
 800127c:	0000      	movs	r0, r0
	...

08001280 <BSP_DRV_LCD_TP_Parse>:

void BSP_DRV_LCD_TP_Parse(LCD_TP_HandleTypeDef *hlcdtp) {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	// Parsing General Data
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	789b      	ldrb	r3, [r3, #2]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	b2da      	uxtb	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	77da      	strb	r2, [r3, #31]

	// Parsing Individual Touch Points
	for (uint8_t i=0; i<5; i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e054      	b.n	8001346 <BSP_DRV_LCD_TP_Parse+0xc6>
		uint8_t ii = 3 + i * 6;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	461a      	mov	r2, r3
 80012a0:	0052      	lsls	r2, r2, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	3303      	adds	r3, #3
 80012aa:	733b      	strb	r3, [r7, #12]
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 80012ac:	7b3b      	ldrb	r3, [r7, #12]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	5cd2      	ldrb	r2, [r2, r3]
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	0992      	lsrs	r2, r2, #6
 80012b6:	b2d1      	uxtb	r1, r2
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	3304      	adds	r3, #4
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4413      	add	r3, r2
 80012c0:	460a      	mov	r2, r1
 80012c2:	711a      	strb	r2, [r3, #4]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 80012c4:	7b3b      	ldrb	r3, [r7, #12]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	5ccb      	ldrb	r3, [r1, r3]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	b299      	uxth	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3204      	adds	r2, #4
 80012ee:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	3302      	adds	r3, #2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	5cd2      	ldrb	r2, [r2, r3]
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	0912      	lsrs	r2, r2, #4
 80012fe:	b2d1      	uxtb	r1, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	3304      	adds	r3, #4
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	460a      	mov	r2, r1
 800130a:	719a      	strb	r2, [r3, #6]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 800130c:	7b3b      	ldrb	r3, [r7, #12]
 800130e:	3302      	adds	r3, #2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	b29b      	uxth	r3, r3
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001320:	b21a      	sxth	r2, r3
 8001322:	7b3b      	ldrb	r3, [r7, #12]
 8001324:	3303      	adds	r3, #3
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	5ccb      	ldrb	r3, [r1, r3]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21a      	sxth	r2, r3
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	b291      	uxth	r1, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	3304      	adds	r3, #4
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	460a      	mov	r2, r1
 800133e:	805a      	strh	r2, [r3, #2]
	for (uint8_t i=0; i<5; i++) {
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d9a7      	bls.n	800129c <BSP_DRV_LCD_TP_Parse+0x1c>
	}

	// Detecting gestures
	switch (hlcdtp->touch_count) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7fdb      	ldrb	r3, [r3, #31]
 8001350:	2b02      	cmp	r3, #2
 8001352:	f000 81e8 	beq.w	8001726 <BSP_DRV_LCD_TP_Parse+0x4a6>
 8001356:	2b02      	cmp	r3, #2
 8001358:	f300 8312 	bgt.w	8001980 <BSP_DRV_LCD_TP_Parse+0x700>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <BSP_DRV_LCD_TP_Parse+0xe8>
 8001360:	2b01      	cmp	r3, #1
 8001362:	f000 80f8 	beq.w	8001556 <BSP_DRV_LCD_TP_Parse+0x2d6>
 8001366:	e30b      	b.n	8001980 <BSP_DRV_LCD_TP_Parse+0x700>
		case 0: // no fingers touching screen / finger just release screen
			hlcdtp->gest_data.gest = LCD_TP_GEST_NONE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800137e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80015b0 <BSP_DRV_LCD_TP_Parse+0x330>
 8001382:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001394:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001398:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013b0:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80015b0 <BSP_DRV_LCD_TP_Parse+0x330>
 80013b4:	ee27 5b06 	vmul.f64	d5, d7, d6
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80013c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c

			// Gest: Click
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 80013da:	f113 0f04 	cmn.w	r3, #4
 80013de:	db14      	blt.n	800140a <BSP_DRV_LCD_TP_Parse+0x18a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	dc0f      	bgt.n	800140a <BSP_DRV_LCD_TP_Parse+0x18a>
					&& (hlcdtp->gest_data.delta_y > -5) && (hlcdtp->gest_data.delta_y < 5)) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80013f0:	f113 0f04 	cmn.w	r3, #4
 80013f4:	db09      	blt.n	800140a <BSP_DRV_LCD_TP_Parse+0x18a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	dc04      	bgt.n	800140a <BSP_DRV_LCD_TP_Parse+0x18a>
				hlcdtp->gest_data.gest = LCD_TP_GEST_CLICK_UP;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 8001408:	e2c4      	b.n	8001994 <BSP_DRV_LCD_TP_Parse+0x714>
			}

			// Gest: Swipe Left
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 8001410:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001414:	da22      	bge.n	800145c <BSP_DRV_LCD_TP_Parse+0x1dc>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 800141c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80015b8 <BSP_DRV_LCD_TP_Parse+0x338>
 8001420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	d518      	bpl.n	800145c <BSP_DRV_LCD_TP_Parse+0x1dc>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001430:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80015bc <BSP_DRV_LCD_TP_Parse+0x33c>
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dd0e      	ble.n	800145c <BSP_DRV_LCD_TP_Parse+0x1dc>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001444:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80015c0 <BSP_DRV_LCD_TP_Parse+0x340>
 8001448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	d504      	bpl.n	800145c <BSP_DRV_LCD_TP_Parse+0x1dc>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_LEFT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2210      	movs	r2, #16
 8001456:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 800145a:	e29b      	b.n	8001994 <BSP_DRV_LCD_TP_Parse+0x714>
			}

			// Gest: Swipe Right
			if ((hlcdtp->gest_data.delta_x > 100) && (hlcdtp->gest_data.speed_x > 800)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	dd22      	ble.n	80014ac <BSP_DRV_LCD_TP_Parse+0x22c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 800146c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80015c4 <BSP_DRV_LCD_TP_Parse+0x344>
 8001470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001478:	dd18      	ble.n	80014ac <BSP_DRV_LCD_TP_Parse+0x22c>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001480:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80015bc <BSP_DRV_LCD_TP_Parse+0x33c>
 8001484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	dd0e      	ble.n	80014ac <BSP_DRV_LCD_TP_Parse+0x22c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001494:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80015c0 <BSP_DRV_LCD_TP_Parse+0x340>
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d504      	bpl.n	80014ac <BSP_DRV_LCD_TP_Parse+0x22c>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_RIGHT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2220      	movs	r2, #32
 80014a6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 80014aa:	e273      	b.n	8001994 <BSP_DRV_LCD_TP_Parse+0x714>
			}

			// Gest: Swipe Up
			if ((hlcdtp->gest_data.delta_y < -100) && (hlcdtp->gest_data.speed_y < -800)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80014b2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80014b6:	da22      	bge.n	80014fe <BSP_DRV_LCD_TP_Parse+0x27e>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80014be:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80015b8 <BSP_DRV_LCD_TP_Parse+0x338>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	d518      	bpl.n	80014fe <BSP_DRV_LCD_TP_Parse+0x27e>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80014d2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015bc <BSP_DRV_LCD_TP_Parse+0x33c>
 80014d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	dd0e      	ble.n	80014fe <BSP_DRV_LCD_TP_Parse+0x27e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80014e6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80015c0 <BSP_DRV_LCD_TP_Parse+0x340>
 80014ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	d504      	bpl.n	80014fe <BSP_DRV_LCD_TP_Parse+0x27e>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_UP;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2204      	movs	r2, #4
 80014f8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 80014fc:	e24a      	b.n	8001994 <BSP_DRV_LCD_TP_Parse+0x714>
			}

			// Gest: Swipe Up
			if ((hlcdtp->gest_data.delta_y > 100) && (hlcdtp->gest_data.speed_y > 800)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 8001504:	2b64      	cmp	r3, #100	; 0x64
 8001506:	f340 8240 	ble.w	800198a <BSP_DRV_LCD_TP_Parse+0x70a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001510:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80015c4 <BSP_DRV_LCD_TP_Parse+0x344>
 8001514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	dc00      	bgt.n	8001520 <BSP_DRV_LCD_TP_Parse+0x2a0>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_DOWN;
				break;
			}

			break;
 800151e:	e234      	b.n	800198a <BSP_DRV_LCD_TP_Parse+0x70a>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001526:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015bc <BSP_DRV_LCD_TP_Parse+0x33c>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	dc00      	bgt.n	8001536 <BSP_DRV_LCD_TP_Parse+0x2b6>
			break;
 8001534:	e229      	b.n	800198a <BSP_DRV_LCD_TP_Parse+0x70a>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 800153c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80015c0 <BSP_DRV_LCD_TP_Parse+0x340>
 8001540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d400      	bmi.n	800154c <BSP_DRV_LCD_TP_Parse+0x2cc>
			break;
 800154a:	e21e      	b.n	800198a <BSP_DRV_LCD_TP_Parse+0x70a>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_DOWN;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2208      	movs	r2, #8
 8001550:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				break;
 8001554:	e21e      	b.n	8001994 <BSP_DRV_LCD_TP_Parse+0x714>

		case 1:	// 1 finger

			if (hlcdtp->touch_data[0].status == 2) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155c:	2b02      	cmp	r3, #2
 800155e:	f040 8216 	bne.w	800198e <BSP_DRV_LCD_TP_Parse+0x70e>
				if ((hlcdtp->gest_data.gest != LCD_TP_GEST_CLICK_DOWN) && (hlcdtp->gest_data.gest != LCD_TP_GEST_DRAG)) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001568:	2b01      	cmp	r3, #1
 800156a:	f000 80a4 	beq.w	80016b6 <BSP_DRV_LCD_TP_Parse+0x436>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	f000 809e 	beq.w	80016b6 <BSP_DRV_LCD_TP_Parse+0x436>
					hlcdtp->gest_data.start_x = hlcdtp->touch_data[0].x;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8c1a      	ldrh	r2, [r3, #32]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
					hlcdtp->gest_data.start_y = hlcdtp->touch_data[0].y;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
					hlcdtp->gest_data.start_t = BSP_GetTick();
 800158e:	f004 ff05 	bl	800639c <BSP_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
					hlcdtp->gest_data.gest = LCD_TP_GEST_CLICK_DOWN;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

					// Checking active area;
					hlcdtp->gest_data.area = 255;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	22ff      	movs	r2, #255	; 0xff
 80015a6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
					for (uint8_t i=0;i<16;i++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	73bb      	strb	r3, [r7, #14]
 80015ae:	e07e      	b.n	80016ae <BSP_DRV_LCD_TP_Parse+0x42e>
 80015b0:	00000000 	.word	0x00000000
 80015b4:	408f4000 	.word	0x408f4000
 80015b8:	c4480000 	.word	0xc4480000
 80015bc:	c3c80000 	.word	0xc3c80000
 80015c0:	43c80000 	.word	0x43c80000
 80015c4:	44480000 	.word	0x44480000
						if (hlcdtp->touch_areas[i].active == 0) continue;
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	3350      	adds	r3, #80	; 0x50
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d05b      	beq.n	8001696 <BSP_DRV_LCD_TP_Parse+0x416>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80015e4:	4618      	mov	r0, r3
 80015e6:	7bba      	ldrb	r2, [r7, #14]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	440b      	add	r3, r1
 80015f4:	3348      	adds	r3, #72	; 0x48
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	4298      	cmp	r0, r3
 80015fc:	db4d      	blt.n	800169a <BSP_DRV_LCD_TP_Parse+0x41a>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8001604:	4618      	mov	r0, r3
 8001606:	7bba      	ldrb	r2, [r7, #14]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	440b      	add	r3, r1
 8001614:	3348      	adds	r3, #72	; 0x48
 8001616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161a:	461c      	mov	r4, r3
 800161c:	7bba      	ldrb	r2, [r7, #14]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	334c      	adds	r3, #76	; 0x4c
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	4423      	add	r3, r4
 8001630:	4298      	cmp	r0, r3
 8001632:	dc34      	bgt.n	800169e <BSP_DRV_LCD_TP_Parse+0x41e>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800163a:	4618      	mov	r0, r3
 800163c:	7bba      	ldrb	r2, [r7, #14]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	440b      	add	r3, r1
 800164a:	334a      	adds	r3, #74	; 0x4a
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	4298      	cmp	r0, r3
 8001652:	db26      	blt.n	80016a2 <BSP_DRV_LCD_TP_Parse+0x422>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800165a:	4618      	mov	r0, r3
 800165c:	7bba      	ldrb	r2, [r7, #14]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	440b      	add	r3, r1
 800166a:	334a      	adds	r3, #74	; 0x4a
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	461c      	mov	r4, r3
 8001672:	7bba      	ldrb	r2, [r7, #14]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	440b      	add	r3, r1
 8001680:	334e      	adds	r3, #78	; 0x4e
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	4423      	add	r3, r4
 8001686:	4298      	cmp	r0, r3
 8001688:	dc0d      	bgt.n	80016a6 <BSP_DRV_LCD_TP_Parse+0x426>
						hlcdtp->gest_data.area = i;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7bba      	ldrb	r2, [r7, #14]
 800168e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
						break;
 8001692:	bf00      	nop
					for (uint8_t i=0;i<16;i++) {
 8001694:	e046      	b.n	8001724 <BSP_DRV_LCD_TP_Parse+0x4a4>
						if (hlcdtp->touch_areas[i].active == 0) continue;
 8001696:	bf00      	nop
 8001698:	e006      	b.n	80016a8 <BSP_DRV_LCD_TP_Parse+0x428>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 800169a:	bf00      	nop
 800169c:	e004      	b.n	80016a8 <BSP_DRV_LCD_TP_Parse+0x428>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 800169e:	bf00      	nop
 80016a0:	e002      	b.n	80016a8 <BSP_DRV_LCD_TP_Parse+0x428>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <BSP_DRV_LCD_TP_Parse+0x428>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 80016a6:	bf00      	nop
					for (uint8_t i=0;i<16;i++) {
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	3301      	adds	r3, #1
 80016ac:	73bb      	strb	r3, [r7, #14]
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d989      	bls.n	80015c8 <BSP_DRV_LCD_TP_Parse+0x348>
 80016b4:	e036      	b.n	8001724 <BSP_DRV_LCD_TP_Parse+0x4a4>
					}

				} else {
					hlcdtp->gest_data.stop_x = hlcdtp->touch_data[0].x;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8c1a      	ldrh	r2, [r3, #32]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
					hlcdtp->gest_data.stop_y = hlcdtp->touch_data[0].y;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
					hlcdtp->gest_data.stop_t = BSP_GetTick();
 80016ca:	f004 fe67 	bl	800639c <BSP_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
					hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b21a      	sxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
					hlcdtp->gest_data.delta_t = hlcdtp->gest_data.stop_t - hlcdtp->gest_data.start_t;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001712:	1ad2      	subs	r2, r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
					hlcdtp->gest_data.gest = LCD_TP_GEST_DRAG;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				}
			}

			break;
 8001722:	e134      	b.n	800198e <BSP_DRV_LCD_TP_Parse+0x70e>
 8001724:	e133      	b.n	800198e <BSP_DRV_LCD_TP_Parse+0x70e>

		case 2:	// 2 fingers

			if ((hlcdtp->touch_data[0].status == 2) && (hlcdtp->touch_data[1].status == 2)) {
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172c:	2b02      	cmp	r3, #2
 800172e:	f040 8130 	bne.w	8001992 <BSP_DRV_LCD_TP_Parse+0x712>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001738:	2b02      	cmp	r3, #2
 800173a:	f040 812a 	bne.w	8001992 <BSP_DRV_LCD_TP_Parse+0x712>

				hlcdtp->gest_data.start_x = hlcdtp->touch_data[0].x;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8c1a      	ldrh	r2, [r3, #32]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
				hlcdtp->gest_data.start_y = hlcdtp->touch_data[0].y;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
				hlcdtp->gest_data.stop_x = hlcdtp->touch_data[1].x;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
				hlcdtp->gest_data.stop_y = hlcdtp->touch_data[1].y;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
				hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	b29b      	uxth	r3, r3
 8001776:	b21a      	sxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
				hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	b21a      	sxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
				hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001796:	f004 fe01 	bl	800639c <BSP_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

				if (hlcdtp->gest_data.gest != LCD_TP_GEST_ZOOM) {
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	f000 80f2 	beq.w	8001992 <BSP_DRV_LCD_TP_Parse+0x712>
					hlcdtp->gest_data.start_t = BSP_GetTick();
 80017ae:	f004 fdf5 	bl	800639c <BSP_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

					// Checking active area;
					hlcdtp->gest_data.area = 255;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	22ff      	movs	r2, #255	; 0xff
 80017be:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
					for (uint8_t i=0;i<16;i++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	737b      	strb	r3, [r7, #13]
 80017c6:	e0d2      	b.n	800196e <BSP_DRV_LCD_TP_Parse+0x6ee>
						if (hlcdtp->touch_areas[i].active == 0) continue;
 80017c8:	7b7a      	ldrb	r2, [r7, #13]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	440b      	add	r3, r1
 80017d6:	3350      	adds	r3, #80	; 0x50
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80b3 	beq.w	8001946 <BSP_DRV_LCD_TP_Parse+0x6c6>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80017e6:	4618      	mov	r0, r3
 80017e8:	7b7a      	ldrb	r2, [r7, #13]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	440b      	add	r3, r1
 80017f6:	3348      	adds	r3, #72	; 0x48
 80017f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fc:	4298      	cmp	r0, r3
 80017fe:	f2c0 80a4 	blt.w	800194a <BSP_DRV_LCD_TP_Parse+0x6ca>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8001808:	4618      	mov	r0, r3
 800180a:	7b7a      	ldrb	r2, [r7, #13]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	440b      	add	r3, r1
 8001818:	3348      	adds	r3, #72	; 0x48
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	461c      	mov	r4, r3
 8001820:	7b7a      	ldrb	r2, [r7, #13]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	440b      	add	r3, r1
 800182e:	334c      	adds	r3, #76	; 0x4c
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	4423      	add	r3, r4
 8001834:	4298      	cmp	r0, r3
 8001836:	f300 808a 	bgt.w	800194e <BSP_DRV_LCD_TP_Parse+0x6ce>
						if (hlcdtp->gest_data.stop_x < hlcdtp->touch_areas[i].x) continue;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001840:	4618      	mov	r0, r3
 8001842:	7b7a      	ldrb	r2, [r7, #13]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	440b      	add	r3, r1
 8001850:	3348      	adds	r3, #72	; 0x48
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	4298      	cmp	r0, r3
 8001858:	db7b      	blt.n	8001952 <BSP_DRV_LCD_TP_Parse+0x6d2>
						if (hlcdtp->gest_data.stop_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001860:	4618      	mov	r0, r3
 8001862:	7b7a      	ldrb	r2, [r7, #13]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	440b      	add	r3, r1
 8001870:	3348      	adds	r3, #72	; 0x48
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	461c      	mov	r4, r3
 8001878:	7b7a      	ldrb	r2, [r7, #13]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	440b      	add	r3, r1
 8001886:	334c      	adds	r3, #76	; 0x4c
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	4423      	add	r3, r4
 800188c:	4298      	cmp	r0, r3
 800188e:	dc62      	bgt.n	8001956 <BSP_DRV_LCD_TP_Parse+0x6d6>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8001896:	4618      	mov	r0, r3
 8001898:	7b7a      	ldrb	r2, [r7, #13]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	440b      	add	r3, r1
 80018a6:	334a      	adds	r3, #74	; 0x4a
 80018a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ac:	4298      	cmp	r0, r3
 80018ae:	db54      	blt.n	800195a <BSP_DRV_LCD_TP_Parse+0x6da>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80018b6:	4618      	mov	r0, r3
 80018b8:	7b7a      	ldrb	r2, [r7, #13]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	440b      	add	r3, r1
 80018c6:	334a      	adds	r3, #74	; 0x4a
 80018c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018cc:	461c      	mov	r4, r3
 80018ce:	7b7a      	ldrb	r2, [r7, #13]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	440b      	add	r3, r1
 80018dc:	334e      	adds	r3, #78	; 0x4e
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	4423      	add	r3, r4
 80018e2:	4298      	cmp	r0, r3
 80018e4:	dc3b      	bgt.n	800195e <BSP_DRV_LCD_TP_Parse+0x6de>
						if (hlcdtp->gest_data.stop_y < hlcdtp->touch_areas[i].y) continue;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80018ec:	4618      	mov	r0, r3
 80018ee:	7b7a      	ldrb	r2, [r7, #13]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	440b      	add	r3, r1
 80018fc:	334a      	adds	r3, #74	; 0x4a
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	4298      	cmp	r0, r3
 8001904:	db2d      	blt.n	8001962 <BSP_DRV_LCD_TP_Parse+0x6e2>
						if (hlcdtp->gest_data.stop_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800190c:	4618      	mov	r0, r3
 800190e:	7b7a      	ldrb	r2, [r7, #13]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	440b      	add	r3, r1
 800191c:	334a      	adds	r3, #74	; 0x4a
 800191e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001922:	461c      	mov	r4, r3
 8001924:	7b7a      	ldrb	r2, [r7, #13]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	440b      	add	r3, r1
 8001932:	334e      	adds	r3, #78	; 0x4e
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	4423      	add	r3, r4
 8001938:	4298      	cmp	r0, r3
 800193a:	dc14      	bgt.n	8001966 <BSP_DRV_LCD_TP_Parse+0x6e6>

						hlcdtp->gest_data.area = i;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7b7a      	ldrb	r2, [r7, #13]
 8001940:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8001944:	e010      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->touch_areas[i].active == 0) continue;
 8001946:	bf00      	nop
 8001948:	e00e      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 800194a:	bf00      	nop
 800194c:	e00c      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 800194e:	bf00      	nop
 8001950:	e00a      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.stop_x < hlcdtp->touch_areas[i].x) continue;
 8001952:	bf00      	nop
 8001954:	e008      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.stop_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001956:	bf00      	nop
 8001958:	e006      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 800195a:	bf00      	nop
 800195c:	e004      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 800195e:	bf00      	nop
 8001960:	e002      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.stop_y < hlcdtp->touch_areas[i].y) continue;
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <BSP_DRV_LCD_TP_Parse+0x6e8>
						if (hlcdtp->gest_data.stop_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 8001966:	bf00      	nop
					for (uint8_t i=0;i<16;i++) {
 8001968:	7b7b      	ldrb	r3, [r7, #13]
 800196a:	3301      	adds	r3, #1
 800196c:	737b      	strb	r3, [r7, #13]
 800196e:	7b7b      	ldrb	r3, [r7, #13]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	f67f af29 	bls.w	80017c8 <BSP_DRV_LCD_TP_Parse+0x548>
					}

					hlcdtp->gest_data.gest = LCD_TP_GEST_ZOOM;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				}
			}
			break;
 800197e:	e008      	b.n	8001992 <BSP_DRV_LCD_TP_Parse+0x712>

		default:
			hlcdtp->gest_data.gest = LCD_TP_GEST_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		}
}
 8001988:	e004      	b.n	8001994 <BSP_DRV_LCD_TP_Parse+0x714>
			break;
 800198a:	bf00      	nop
 800198c:	e002      	b.n	8001994 <BSP_DRV_LCD_TP_Parse+0x714>
			break;
 800198e:	bf00      	nop
 8001990:	e000      	b.n	8001994 <BSP_DRV_LCD_TP_Parse+0x714>
			break;
 8001992:	bf00      	nop
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}

0800199c <BSP_BOARD_Init_CM7>:

#include "BSP.h"

#define HSEM_ID_0 (0U) // HW semaphore 0

uint8_t BSP_BOARD_Init_CM7() {
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
	uint32_t timeout;

	// Config MPU
	BSP_STM32_MPU_Init();
 80019a2:	f003 fd59 	bl	8005458 <BSP_STM32_MPU_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11b      	bne.n	80019ea <BSP_BOARD_Init_CM7+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019b2:	f3bf 8f4f 	dsb	sy
}
 80019b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019b8:	f3bf 8f6f 	isb	sy
}
 80019bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019be:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019c6:	f3bf 8f4f 	dsb	sy
}
 80019ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019cc:	f3bf 8f6f 	isb	sy
}
 80019d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019d2:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a6a      	ldr	r2, [pc, #424]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019de:	f3bf 8f4f 	dsb	sy
}
 80019e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019e4:	f3bf 8f6f 	isb	sy
}
 80019e8:	e000      	b.n	80019ec <BSP_BOARD_Init_CM7+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d138      	bne.n	8001a6a <BSP_BOARD_Init_CM7+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80019f8:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a00:	f3bf 8f4f 	dsb	sy
}
 8001a04:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001a06:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 8001a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a0c:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	0b5b      	lsrs	r3, r3, #13
 8001a12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a16:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	08db      	lsrs	r3, r3, #3
 8001a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a20:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	015a      	lsls	r2, r3, #5
 8001a26:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001a2a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001a30:	4953      	ldr	r1, [pc, #332]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	60ba      	str	r2, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ef      	bne.n	8001a22 <BSP_BOARD_Init_CM7+0x86>
    } while(sets-- != 0U);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	60fa      	str	r2, [r7, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1e5      	bne.n	8001a18 <BSP_BOARD_Init_CM7+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a4c:	f3bf 8f4f 	dsb	sy
}
 8001a50:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001a52:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <BSP_BOARD_Init_CM7+0x1e4>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a5e:	f3bf 8f4f 	dsb	sy
}
 8001a62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a64:	f3bf 8f6f 	isb	sy
}
 8001a68:	e000      	b.n	8001a6c <BSP_BOARD_Init_CM7+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001a6a:	bf00      	nop

	// Enable D-Cache
	SCB_EnableDCache();

	// Wait until CPU2 boots and enters in stop mode or timeout
	timeout = 0xFFFF;
 8001a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a70:	617b      	str	r3, [r7, #20]
	while (((RCC->CR & RCC_CR_D2CKRDY) != RESET) && (timeout-- > 0));
 8001a72:	bf00      	nop
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <BSP_BOARD_Init_CM7+0x1e8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <BSP_BOARD_Init_CM7+0xee>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	617a      	str	r2, [r7, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f4      	bne.n	8001a74 <BSP_BOARD_Init_CM7+0xd8>
	if ( timeout < 0 ) return BSP_ERROR;

	// Setting NVIC grouping
	BSP_STM32_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f006 fd51 	bl	8008532 <BSP_STM32_NVIC_SetPriorityGrouping>

	// STM32 Initialization - System Clocks
	if (BSP_STM32_Init_SysClocks()) return BSP_ERROR;
 8001a90:	f003 fe70 	bl	8005774 <BSP_STM32_Init_SysClocks>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <BSP_BOARD_Init_CM7+0x102>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e06b      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification
	__BSP_RCC_HSEM_CLK_ENABLE();			// HW semaphore Clock enable
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <BSP_BOARD_Init_CM7+0x1e8>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa4:	4a37      	ldr	r2, [pc, #220]	; (8001b84 <BSP_BOARD_Init_CM7+0x1e8>)
 8001aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aae:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <BSP_BOARD_Init_CM7+0x1e8>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
	BSP_STM32_HSEM_FastTake(HSEM_ID_0); 	// Take HSEM
 8001abc:	2000      	movs	r0, #0
 8001abe:	f007 fcf1 	bl	80094a4 <BSP_STM32_HSEM_FastTake>
	BSP_STM32_HSEM_FastRelease(HSEM_ID_0);	// Release HSEM in order to notify the CPU2(CM4)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f007 fd0c 	bl	80094e0 <BSP_STM32_HSEM_FastRelease>
	timeout = 0xFFFF;						// Wait until CPU2 wakes up from stop mode
 8001ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001acc:	617b      	str	r3, [r7, #20]
	while(((RCC->CR & RCC_CR_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ace:	bf00      	nop
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <BSP_BOARD_Init_CM7+0x1e8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d104      	bne.n	8001ae6 <BSP_BOARD_Init_CM7+0x14a>
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1e5a      	subs	r2, r3, #1
 8001ae0:	617a      	str	r2, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f4      	bne.n	8001ad0 <BSP_BOARD_Init_CM7+0x134>
	if ( timeout < 0 ) return BSP_ERROR;

	// STM32 Initialization - Peripheral Clocks
	if (BSP_STM32_Init_PeriphClocks()) return BSP_ERROR;
 8001ae6:	f003 feef 	bl	80058c8 <BSP_STM32_Init_PeriphClocks>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <BSP_BOARD_Init_CM7+0x158>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e040      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// STM32 Initialization - GPIO Pins
	if (BSP_STM32_Init_GPIO()) return BSP_ERROR;
 8001af4:	f004 f95c 	bl	8005db0 <BSP_STM32_Init_GPIO>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <BSP_BOARD_Init_CM7+0x166>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e039      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// STM32 Initialization - NVIC - Interrupts
	if (BSP_STM32_Init_NVIC()) return BSP_ERROR;
 8001b02:	f004 f8d9 	bl	8005cb8 <BSP_STM32_Init_NVIC>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <BSP_BOARD_Init_CM7+0x174>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e032      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// SDRAM Initialization
	if (BSP_SDRAM_Init(120)) return BSP_ERROR;
 8001b10:	2078      	movs	r0, #120	; 0x78
 8001b12:	f003 fc3d 	bl	8005390 <BSP_SDRAM_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <BSP_BOARD_Init_CM7+0x184>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e02a      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// QSPI Initialization
	if (BSP_QSPI_Init()) return BSP_ERROR;
 8001b20:	f003 f9de 	bl	8004ee0 <BSP_QSPI_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <BSP_BOARD_Init_CM7+0x192>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e023      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// Touch Panel Initialization
	if (BSP_LCD_TP_Init()) return BSP_ERROR;
 8001b2e:	f003 f957 	bl	8004de0 <BSP_LCD_TP_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <BSP_BOARD_Init_CM7+0x1a0>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e01c      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// IMU Initialization
	if (BSP_IMU_Init()) return BSP_ERROR;
 8001b3c:	f000 f860 	bl	8001c00 <BSP_IMU_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <BSP_BOARD_Init_CM7+0x1ae>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e015      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// Joystick and Keyboard Initialization
	if (BSP_Inputs_Init()) return BSP_ERROR;
 8001b4a:	f000 f8c3 	bl	8001cd4 <BSP_Inputs_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <BSP_BOARD_Init_CM7+0x1bc>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e00e      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// SDCARD Initialization
	if (BSP_SDCARD_Init()) return BSP_ERROR;
 8001b58:	f003 fb8e 	bl	8005278 <BSP_SDCARD_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <BSP_BOARD_Init_CM7+0x1ca>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// USART2 Initialization - communication through debug connection
	if (BSP_Serial_Init()) return BSP_ERROR;
 8001b66:	f004 fc85 	bl	8006474 <BSP_Serial_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <BSP_BOARD_Init_CM7+0x1d8>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <BSP_BOARD_Init_CM7+0x1da>

	// Audio Initialization
//	if (BSP_Audio_Init()) return BSP_ERROR;

	return BSP_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	58024400 	.word	0x58024400

08001b88 <NMI_Handler>:


// Configuring Basic Interrupts
void NMI_Handler(void) {
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

	while (1) {}
 8001b8c:	e7fe      	b.n	8001b8c <NMI_Handler+0x4>

08001b8e <HardFault_Handler>:

}

void HardFault_Handler(void) {
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

	while (1) {}
 8001b92:	e7fe      	b.n	8001b92 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

}

void MemManage_Handler(void) {
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

	while (1) {}
 8001b98:	e7fe      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9a <BusFault_Handler>:

}

void BusFault_Handler(void) {
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

	while (1) {}
 8001b9e:	e7fe      	b.n	8001b9e <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

}

void UsageFault_Handler(void) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

	while (1) {}
 8001ba4:	e7fe      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba6 <SVC_Handler>:

}

void SVC_Handler(void) {
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <DebugMon_Handler>:

void DebugMon_Handler(void) {
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <PendSV_Handler>:

void PendSV_Handler(void) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <SysTick_Handler>:

void SysTick_Handler(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

  BSP_IncTick();
 8001bd4:	f004 fbd0 	bl	8006378 <BSP_IncTick>

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <BSP_Error_Handler>:

void BSP_Error_Handler(void) {
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop

  __disable_irq();
  while (1) {}
 8001be4:	e7fe      	b.n	8001be4 <BSP_Error_Handler+0x8>
	...

08001be8 <SPI3_IRQHandler>:

uint8_t BSP_Audio_Resume() {
	return BSP_STM32_I2S_Resume(SPI3, &BSP_haudio_ctx);
}

void SPI3_IRQHandler(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	BSP_STM32_I2S_IRQHandler(SPI3, &BSP_haudio_ctx);
 8001bec:	4902      	ldr	r1, [pc, #8]	; (8001bf8 <SPI3_IRQHandler+0x10>)
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <SPI3_IRQHandler+0x14>)
 8001bf0:	f007 ffef 	bl	8009bd2 <BSP_STM32_I2S_IRQHandler>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	24000108 	.word	0x24000108
 8001bfc:	40003c00 	.word	0x40003c00

08001c00 <BSP_IMU_Init>:
#include "BSP_IMU.h"

BUF_RAM	IMU_HandleTypeDef		BSP_himu = {0};
		TxRxContext_TypeDef		BSP_himu_ctx = {0};

uint8_t BSP_IMU_Init() {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af04      	add	r7, sp, #16
	// Configuring I2C interface
	if (BSP_STM32_I2C_Init(I2C4)) return BSP_ERROR;
 8001c06:	481a      	ldr	r0, [pc, #104]	; (8001c70 <BSP_IMU_Init+0x70>)
 8001c08:	f007 fe32 	bl	8009870 <BSP_STM32_I2C_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <BSP_IMU_Init+0x16>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e028      	b.n	8001c68 <BSP_IMU_Init+0x68>

	// Linking BDMA stream to I2C context
	BSP_BDMA_Init(BDMA_Channel0, BDMA_PERIPH_TO_MEMORY, BDMA_PINC_DISABLE, BDMA_MINC_ENABLE, BDMA_PDATAALIGN_BYTE, BDMA_MDATAALIGN_BYTE, BDMA_NORMAL, BDMA_PRIORITY_LOW);
 8001c16:	2300      	movs	r3, #0
 8001c18:	9303      	str	r3, [sp, #12]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9302      	str	r3, [sp, #8]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	2300      	movs	r3, #0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4811      	ldr	r0, [pc, #68]	; (8001c74 <BSP_IMU_Init+0x74>)
 8001c2e:	f006 f9cd 	bl	8007fcc <BSP_BDMA_Init>
	BSP_BDMA_CtxLink(BDMA_Channel0, &BSP_himu_ctx, BDMA_REQUEST_I2C4_RX);
 8001c32:	220d      	movs	r2, #13
 8001c34:	4910      	ldr	r1, [pc, #64]	; (8001c78 <BSP_IMU_Init+0x78>)
 8001c36:	480f      	ldr	r0, [pc, #60]	; (8001c74 <BSP_IMU_Init+0x74>)
 8001c38:	f006 fa0a 	bl	8008050 <BSP_BDMA_CtxLink>

	// Testing connection
	if (BSP_STM32_I2C_IsDeviceReady(I2C4, (IMU_I2C_ADDR) << 1, 4, 1000)) return BSP_ERROR;
 8001c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c40:	2204      	movs	r2, #4
 8001c42:	21d0      	movs	r1, #208	; 0xd0
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <BSP_IMU_Init+0x70>)
 8001c46:	f007 fe51 	bl	80098ec <BSP_STM32_I2C_IsDeviceReady>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <BSP_IMU_Init+0x54>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e009      	b.n	8001c68 <BSP_IMU_Init+0x68>

	// Initialization of IMU IC
	if (BSP_DRV_IMU_Init(&BSP_himu, I2C4)) return BSP_ERROR;
 8001c54:	4906      	ldr	r1, [pc, #24]	; (8001c70 <BSP_IMU_Init+0x70>)
 8001c56:	4809      	ldr	r0, [pc, #36]	; (8001c7c <BSP_IMU_Init+0x7c>)
 8001c58:	f7ff f898 	bl	8000d8c <BSP_DRV_IMU_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <BSP_IMU_Init+0x66>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <BSP_IMU_Init+0x68>

	return BSP_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	58001c00 	.word	0x58001c00
 8001c74:	58025408 	.word	0x58025408
 8001c78:	24000170 	.word	0x24000170
 8001c7c:	38000000 	.word	0x38000000

08001c80 <BSP_IMU_INTHandler>:
uint8_t BSP_IMU_Reset() {

	return BSP_OK;
}

void BSP_IMU_INTHandler() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af02      	add	r7, sp, #8
	// New data available from IMU, start receiving
	BSP_STM32_I2C_MemRead(I2C4, &BSP_himu_ctx, IMU_I2C_ADDR << 1, IMU_DATA_ADDR, BSP_himu.raw_data, IMU_DATA_LEN);
 8001c86:	230e      	movs	r3, #14
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <BSP_IMU_INTHandler+0x20>)
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	233b      	movs	r3, #59	; 0x3b
 8001c90:	22d0      	movs	r2, #208	; 0xd0
 8001c92:	4904      	ldr	r1, [pc, #16]	; (8001ca4 <BSP_IMU_INTHandler+0x24>)
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <BSP_IMU_INTHandler+0x28>)
 8001c96:	f007 ff3d 	bl	8009b14 <BSP_STM32_I2C_MemRead>
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	38000000 	.word	0x38000000
 8001ca4:	24000170 	.word	0x24000170
 8001ca8:	58001c00 	.word	0x58001c00

08001cac <I2C4_EV_IRQHandler>:

void I2C4_EV_IRQHandler(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	// Receiving and parsing data from IMU
	if (BSP_STM32_I2C_IRQHandler(I2C4, &BSP_himu_ctx) == BSP_OK) BSP_DRV_IMU_Parse(&BSP_himu);
 8001cb0:	4905      	ldr	r1, [pc, #20]	; (8001cc8 <I2C4_EV_IRQHandler+0x1c>)
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <I2C4_EV_IRQHandler+0x20>)
 8001cb4:	f007 ff6b 	bl	8009b8e <BSP_STM32_I2C_IRQHandler>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <I2C4_EV_IRQHandler+0x18>
 8001cbe:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <I2C4_EV_IRQHandler+0x24>)
 8001cc0:	f7ff f8fe 	bl	8000ec0 <BSP_DRV_IMU_Parse>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	24000170 	.word	0x24000170
 8001ccc:	58001c00 	.word	0x58001c00
 8001cd0:	38000000 	.word	0x38000000

08001cd4 <BSP_Inputs_Init>:
#include "BSP_Inputs.h"

BUF_RAM  INPUTS_HandleTypeDef	BSP_hinputs = {0};
		TxRxContext_TypeDef		BSP_hinputs_ctx = {0};

uint8_t BSP_Inputs_Init() {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af04      	add	r7, sp, #16
	// Initializing ADC1 for Joystick
	BSP_ADC_Init(ADC1, ADC_RESOLUTION_16B, 2);
 8001cda:	2202      	movs	r2, #2
 8001cdc:	2100      	movs	r1, #0
 8001cde:	482d      	ldr	r0, [pc, #180]	; (8001d94 <BSP_Inputs_Init+0xc0>)
 8001ce0:	f006 f82c 	bl	8007d3c <BSP_ADC_Init>
	BSP_ADC_ConfigChannel(ADC1, 4, 1);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	482a      	ldr	r0, [pc, #168]	; (8001d94 <BSP_Inputs_Init+0xc0>)
 8001cea:	f006 f8dd 	bl	8007ea8 <BSP_ADC_ConfigChannel>
	BSP_ADC_ConfigChannel(ADC1, 8, 2);
 8001cee:	2202      	movs	r2, #2
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	4828      	ldr	r0, [pc, #160]	; (8001d94 <BSP_Inputs_Init+0xc0>)
 8001cf4:	f006 f8d8 	bl	8007ea8 <BSP_ADC_ConfigChannel>
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9303      	str	r3, [sp, #12]
 8001cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	4820      	ldr	r0, [pc, #128]	; (8001d98 <BSP_Inputs_Init+0xc4>)
 8001d18:	f006 fc96 	bl	8008648 <BSP_STM32_DMA_Init>
	BSP_STM32_DMA_CtxLink(DMA1_Stream1, &BSP_hinputs_ctx, DMA_REQUEST_ADC1);
 8001d1c:	2209      	movs	r2, #9
 8001d1e:	491f      	ldr	r1, [pc, #124]	; (8001d9c <BSP_Inputs_Init+0xc8>)
 8001d20:	481d      	ldr	r0, [pc, #116]	; (8001d98 <BSP_Inputs_Init+0xc4>)
 8001d22:	f006 fcdd 	bl	80086e0 <BSP_STM32_DMA_CtxLink>
	BSP_ADC_StartDMA(ADC1, &BSP_hinputs_ctx, (uint32_t *)BSP_hinputs.raw_data_joy, 2);
 8001d26:	2302      	movs	r3, #2
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d2a:	491c      	ldr	r1, [pc, #112]	; (8001d9c <BSP_Inputs_Init+0xc8>)
 8001d2c:	4819      	ldr	r0, [pc, #100]	; (8001d94 <BSP_Inputs_Init+0xc0>)
 8001d2e:	f006 f92f 	bl	8007f90 <BSP_ADC_StartDMA>

	// Init calibration values
	BSP_hinputs.joy_cal.x_max = 49600;
 8001d32:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d34:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
 8001d38:	81da      	strh	r2, [r3, #14]
	BSP_hinputs.joy_cal.x_min = 7600;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d3c:	f641 52b0 	movw	r2, #7600	; 0x1db0
 8001d40:	819a      	strh	r2, [r3, #12]
	BSP_hinputs.joy_cal.y_max = 58000;
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d44:	f24e 2290 	movw	r2, #58000	; 0xe290
 8001d48:	825a      	strh	r2, [r3, #18]
	BSP_hinputs.joy_cal.y_min = 12300;
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d4c:	f243 020c 	movw	r2, #12300	; 0x300c
 8001d50:	821a      	strh	r2, [r3, #16]

	BSP_hinputs.joy_cal.x_centre_max = 33000;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d54:	f248 02e8 	movw	r2, #33000	; 0x80e8
 8001d58:	80da      	strh	r2, [r3, #6]
	BSP_hinputs.joy_cal.x_centre_min = 30000;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d5c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d60:	809a      	strh	r2, [r3, #4]
	BSP_hinputs.joy_cal.y_centre_max = 35500;
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d64:	f648 22ac 	movw	r2, #35500	; 0x8aac
 8001d68:	815a      	strh	r2, [r3, #10]
	BSP_hinputs.joy_cal.y_centre_min = 31500;
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <BSP_Inputs_Init+0xcc>)
 8001d6c:	f647 320c 	movw	r2, #31500	; 0x7b0c
 8001d70:	811a      	strh	r2, [r3, #8]

	// Configuring TIM2 for parsing joystick and keyboard data
	// Option 1: PWM Frequency = 200MHz Input clock / Prescaler (199+1) / Reload value (9999+1) = 100Hz
	// Option 2: PWM Frequency = 240MHz Input clock / Prescaler (239+1) / Reload value (9999+1) = 100Hz

	BSP_STM32_TIM_Init(TIM2, TIM_CLOCKDIVISION_DIV1, 239, 9999);
 8001d72:	f242 730f 	movw	r3, #9999	; 0x270f
 8001d76:	22ef      	movs	r2, #239	; 0xef
 8001d78:	2100      	movs	r1, #0
 8001d7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d7e:	f00b fd4f 	bl	800d820 <BSP_STM32_TIM_Init>
	BSP_STM32_TIM_Start(TIM2);
 8001d82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d86:	f00b fe14 	bl	800d9b2 <BSP_STM32_TIM_Start>
	return BSP_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40020028 	.word	0x40020028
 8001d9c:	240001d8 	.word	0x240001d8
 8001da0:	38000058 	.word	0x38000058

08001da4 <BSP_Inputs_ParseData>:


uint8_t BSP_Inputs_ParseData() {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
	// Button A - PD4
	BSP_hinputs.buttons.btn_A = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0);
 8001daa:	2110      	movs	r1, #16
 8001dac:	487f      	ldr	r0, [pc, #508]	; (8001fac <BSP_Inputs_ParseData+0x208>)
 8001dae:	f007 fb4f 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001dc2:	761a      	strb	r2, [r3, #24]

	// Button B - PD2
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4879      	ldr	r0, [pc, #484]	; (8001fac <BSP_Inputs_ParseData+0x208>)
 8001dc8:	f007 fb42 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	2300      	movne	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b75      	ldr	r3, [pc, #468]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001ddc:	765a      	strb	r2, [r3, #25]

	// Button C - PI8
	BSP_hinputs.buttons.btn_C = (BSP_STM32_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == 0);
 8001dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de2:	4874      	ldr	r0, [pc, #464]	; (8001fb4 <BSP_Inputs_ParseData+0x210>)
 8001de4:	f007 fb34 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001df8:	769a      	strb	r2, [r3, #26]

	// Button D - PC13
	BSP_hinputs.buttons.btn_D = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 8001dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfe:	486e      	ldr	r0, [pc, #440]	; (8001fb8 <BSP_Inputs_ParseData+0x214>)
 8001e00:	f007 fb26 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001e14:	76da      	strb	r2, [r3, #27]

	// Button XU - PC11
	BSP_hinputs.buttons.btn_X_U = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0);
 8001e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1a:	4867      	ldr	r0, [pc, #412]	; (8001fb8 <BSP_Inputs_ParseData+0x214>)
 8001e1c:	f007 fb18 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf0c      	ite	eq
 8001e26:	2301      	moveq	r3, #1
 8001e28:	2300      	movne	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b60      	ldr	r3, [pc, #384]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001e30:	771a      	strb	r2, [r3, #28]

	// Button XD - PG3
	BSP_hinputs.buttons.btn_X_D = (BSP_STM32_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 0);
 8001e32:	2108      	movs	r1, #8
 8001e34:	4861      	ldr	r0, [pc, #388]	; (8001fbc <BSP_Inputs_ParseData+0x218>)
 8001e36:	f007 fb0b 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001e4a:	775a      	strb	r2, [r3, #29]

	// Button XL - PA9
	BSP_hinputs.buttons.btn_X_L = (BSP_STM32_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	485b      	ldr	r0, [pc, #364]	; (8001fc0 <BSP_Inputs_ParseData+0x21c>)
 8001e52:	f007 fafd 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b52      	ldr	r3, [pc, #328]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001e66:	779a      	strb	r2, [r3, #30]

	// Button XR - PC7
	BSP_hinputs.buttons.btn_X_R = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0);
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	4853      	ldr	r0, [pc, #332]	; (8001fb8 <BSP_Inputs_ParseData+0x214>)
 8001e6c:	f007 faf0 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf0c      	ite	eq
 8001e76:	2301      	moveq	r3, #1
 8001e78:	2300      	movne	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001e80:	77da      	strb	r2, [r3, #31]

	// Button MENU - PE3
	BSP_hinputs.buttons.btn_MENU = (BSP_STM32_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0);
 8001e82:	2108      	movs	r1, #8
 8001e84:	484f      	ldr	r0, [pc, #316]	; (8001fc4 <BSP_Inputs_ParseData+0x220>)
 8001e86:	f007 fae3 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	// Button PWR - PB5
	BSP_hinputs.buttons.btn_PWR = (BSP_STM32_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0);
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	4849      	ldr	r0, [pc, #292]	; (8001fc8 <BSP_Inputs_ParseData+0x224>)
 8001ea2:	f007 fad5 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001eb6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	// Button JOY - PH5
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 8001eba:	2120      	movs	r1, #32
 8001ebc:	4843      	ldr	r0, [pc, #268]	; (8001fcc <BSP_Inputs_ParseData+0x228>)
 8001ebe:	f007 fac7 	bl	8009450 <BSP_STM32_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001ed2:	f883 2020 	strb.w	r2, [r3, #32]

	// Parsing joystick XY axis
	int16_t joy_X = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	80fb      	strh	r3, [r7, #6]
	int16_t joy_Y = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	80bb      	strh	r3, [r7, #4]


	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 8001ede:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001ee0:	885a      	ldrh	r2, [r3, #2]
 8001ee2:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001ee4:	88db      	ldrh	r3, [r3, #6]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d90f      	bls.n	8001f0a <BSP_Inputs_ParseData+0x166>
		joy_X = ((BSP_hinputs.raw_data_joy[1] - BSP_hinputs.joy_cal.x_centre_max) * 128)/ (BSP_hinputs.joy_cal.x_max - BSP_hinputs.joy_cal.x_centre_max);
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001eec:	885b      	ldrh	r3, [r3, #2]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001ef2:	88db      	ldrh	r3, [r3, #6]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	01da      	lsls	r2, r3, #7
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001efa:	89db      	ldrh	r3, [r3, #14]
 8001efc:	4619      	mov	r1, r3
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f00:	88db      	ldrh	r3, [r3, #6]
 8001f02:	1acb      	subs	r3, r1, r3
 8001f04:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f08:	80fb      	strh	r3, [r7, #6]
	}

	if (BSP_hinputs.raw_data_joy[1] < BSP_hinputs.joy_cal.x_centre_min) {
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f0c:	885a      	ldrh	r2, [r3, #2]
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f10:	889b      	ldrh	r3, [r3, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d20f      	bcs.n	8001f36 <BSP_Inputs_ParseData+0x192>
		joy_X = ((BSP_hinputs.raw_data_joy[1] - BSP_hinputs.joy_cal.x_centre_min) * 128)/ (BSP_hinputs.joy_cal.x_centre_min - BSP_hinputs.joy_cal.x_min);
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f18:	885b      	ldrh	r3, [r3, #2]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	01da      	lsls	r2, r3, #7
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f26:	889b      	ldrh	r3, [r3, #4]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f2c:	899b      	ldrh	r3, [r3, #12]
 8001f2e:	1acb      	subs	r3, r1, r3
 8001f30:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f34:	80fb      	strh	r3, [r7, #6]
	}

	if (BSP_hinputs.raw_data_joy[0] > BSP_hinputs.joy_cal.y_centre_max) {
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f38:	881a      	ldrh	r2, [r3, #0]
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f3c:	895b      	ldrh	r3, [r3, #10]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d90f      	bls.n	8001f62 <BSP_Inputs_ParseData+0x1be>
		joy_Y = ((BSP_hinputs.raw_data_joy[0] - BSP_hinputs.joy_cal.y_centre_max) * 128)/ (BSP_hinputs.joy_cal.y_max - BSP_hinputs.joy_cal.y_centre_max);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f4a:	895b      	ldrh	r3, [r3, #10]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	01da      	lsls	r2, r3, #7
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f52:	8a5b      	ldrh	r3, [r3, #18]
 8001f54:	4619      	mov	r1, r3
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f58:	895b      	ldrh	r3, [r3, #10]
 8001f5a:	1acb      	subs	r3, r1, r3
 8001f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f60:	80bb      	strh	r3, [r7, #4]
	}

	if (BSP_hinputs.raw_data_joy[0] < BSP_hinputs.joy_cal.y_centre_min) {
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f68:	891b      	ldrh	r3, [r3, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d20f      	bcs.n	8001f8e <BSP_Inputs_ParseData+0x1ea>
		joy_Y = ((BSP_hinputs.raw_data_joy[0] - BSP_hinputs.joy_cal.y_centre_min) * 128)/ (BSP_hinputs.joy_cal.y_centre_min - BSP_hinputs.joy_cal.y_min);
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f76:	891b      	ldrh	r3, [r3, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	01da      	lsls	r2, r3, #7
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f7e:	891b      	ldrh	r3, [r3, #8]
 8001f80:	4619      	mov	r1, r3
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f84:	8a1b      	ldrh	r3, [r3, #16]
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f8c:	80bb      	strh	r3, [r7, #4]
	}

	BSP_hinputs.joy.joy_X = -joy_X;
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	425b      	negs	r3, r3
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f98:	829a      	strh	r2, [r3, #20]
	BSP_hinputs.joy.joy_Y = joy_Y;
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <BSP_Inputs_ParseData+0x20c>)
 8001f9c:	88bb      	ldrh	r3, [r7, #4]
 8001f9e:	82d3      	strh	r3, [r2, #22]

	return BSP_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	58020c00 	.word	0x58020c00
 8001fb0:	38000058 	.word	0x38000058
 8001fb4:	58022000 	.word	0x58022000
 8001fb8:	58020800 	.word	0x58020800
 8001fbc:	58021800 	.word	0x58021800
 8001fc0:	58020000 	.word	0x58020000
 8001fc4:	58021000 	.word	0x58021000
 8001fc8:	58020400 	.word	0x58020400
 8001fcc:	58021c00 	.word	0x58021c00

08001fd0 <TIM2_IRQHandler>:


void TIM2_IRQHandler() {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	// Update event interrupt
	if (TIM2->SR & TIM_SR_UIF) {
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <TIM2_IRQHandler+0x26>
		// Reseting interrupt
		TIM2->SR &= ~(TIM_SR_UIF);
 8001fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6113      	str	r3, [r2, #16]

		BSP_Inputs_ParseData();
 8001ff2:	f7ff fed7 	bl	8001da4 <BSP_Inputs_ParseData>
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_color_dist>:

/******************************************************************************
 * Private functions
 ******************************************************************************/

inline static uint32_t _color_dist(uint32_t c1, uint32_t c2) {
 8001ffa:	b480      	push	{r7}
 8001ffc:	b087      	sub	sp, #28
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
	// Color distance is calculated as per formula presented in:
	// https://www.compuphase.com/cmetric.htm, and
	// https://en.wikipedia.org/wiki/Color_difference


	uint8_t c1_b = (c1 & 0x000000ff) >> 0;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	75fb      	strb	r3, [r7, #23]
	uint8_t c1_g = (c1 & 0x0000ff00) >> 8;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	75bb      	strb	r3, [r7, #22]
	uint8_t c1_r = (c1 & 0x00ff0000) >> 16;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	757b      	strb	r3, [r7, #21]

	uint8_t c2_b = (c2 & 0x000000ff) >> 0;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	753b      	strb	r3, [r7, #20]
	uint8_t c2_g = (c2 & 0x0000ff00) >> 8;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	74fb      	strb	r3, [r7, #19]
	uint8_t c2_r = (c2 & 0x00ff0000) >> 16;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	74bb      	strb	r3, [r7, #18]

	int16_t av_r = (c1_r + c2_r) >> 1;
 8002024:	7d7a      	ldrb	r2, [r7, #21]
 8002026:	7cbb      	ldrb	r3, [r7, #18]
 8002028:	4413      	add	r3, r2
 800202a:	105b      	asrs	r3, r3, #1
 800202c:	823b      	strh	r3, [r7, #16]
	int16_t	dr = (int16_t)c1_r - (int16_t)c2_r;
 800202e:	7d7b      	ldrb	r3, [r7, #21]
 8002030:	b29a      	uxth	r2, r3
 8002032:	7cbb      	ldrb	r3, [r7, #18]
 8002034:	b29b      	uxth	r3, r3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	b29b      	uxth	r3, r3
 800203a:	81fb      	strh	r3, [r7, #14]
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 800203c:	7dbb      	ldrb	r3, [r7, #22]
 800203e:	b29a      	uxth	r2, r3
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	b29b      	uxth	r3, r3
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	b29b      	uxth	r3, r3
 8002048:	81bb      	strh	r3, [r7, #12]
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	b29a      	uxth	r2, r3
 800204e:	7d3b      	ldrb	r3, [r7, #20]
 8002050:	b29b      	uxth	r3, r3
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	b29b      	uxth	r3, r3
 8002056:	817b      	strh	r3, [r7, #10]

	//return sqrt((((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8));
	// SQRT can be omitted, as it has no effect on finding minimum value of the function
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 8002058:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800205c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002060:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	121a      	asrs	r2, r3, #8
 8002072:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002076:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	441a      	add	r2, r3
 8002082:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002086:	f240 23ff 	movw	r3, #767	; 0x2ff
 800208a:	1a5b      	subs	r3, r3, r1
 800208c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	121b      	asrs	r3, r3, #8
 800209e:	4413      	add	r3, r2
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ARGB8888_color>:
 * Functions for various color modes
 ******************************************************************************/

/* ARGB8888 ------------------------------------------------------------------*/

static uint32_t _ARGB8888_color(uint32_t color, uint8_t alpha) {
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	return (color & 0x00FFFFFF) | ((uint32_t)alpha << 24);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	4313      	orrs	r3, r2
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_ARGB8888_alpha>:


static uint32_t _ARGB8888_alpha(uint32_t color, uint8_t alpha) {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	return (color & 0x00FFFFFF) | ((uint32_t)alpha << 24);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	061b      	lsls	r3, r3, #24
 80020e6:	4313      	orrs	r3, r2
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_ARGB8888_dma2dwait>:


static void _ARGB8888_dma2dwait(void) {
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 80020f8:	bf00      	nop
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <_ARGB8888_dma2dwait+0x1c>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d0fb      	beq.n	80020fa <_ARGB8888_dma2dwait+0x6>
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	24000240 	.word	0x24000240

08002114 <_ARGB8888_updatepixel>:


static void _ARGB8888_updatepixel(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	817b      	strh	r3, [r7, #10]
 8002122:	4613      	mov	r3, r2
 8002124:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8002126:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800212a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800212e:	da1d      	bge.n	800216c <_ARGB8888_updatepixel+0x58>
	if (x < 0) return;
 8002130:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db1b      	blt.n	8002170 <_ARGB8888_updatepixel+0x5c>
	if (y >= LCD_HEIGHT) return;
 8002138:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800213c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002140:	da18      	bge.n	8002174 <_ARGB8888_updatepixel+0x60>
	if (y < 0) return;
 8002142:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db16      	blt.n	8002178 <_ARGB8888_updatepixel+0x64>

	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 800214a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800214e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002152:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	009a      	lsls	r2, r3, #2
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
	*addr = value;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e006      	b.n	800217a <_ARGB8888_updatepixel+0x66>
	if (x >= LCD_WIDTH) return;
 800216c:	bf00      	nop
 800216e:	e004      	b.n	800217a <_ARGB8888_updatepixel+0x66>
	if (x < 0) return;
 8002170:	bf00      	nop
 8002172:	e002      	b.n	800217a <_ARGB8888_updatepixel+0x66>
	if (y >= LCD_HEIGHT) return;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <_ARGB8888_updatepixel+0x66>
	if (y < 0) return;
 8002178:	bf00      	nop
}
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_ARGB8888_updatepixelblend>:


static void _ARGB8888_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002184:	b480      	push	{r7}
 8002186:	b091      	sub	sp, #68	; 0x44
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	4613      	mov	r3, r2
 8002194:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8002196:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800219a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800219e:	da72      	bge.n	8002286 <_ARGB8888_updatepixelblend+0x102>
	if (x < 0) return;
 80021a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db70      	blt.n	800228a <_ARGB8888_updatepixelblend+0x106>
	if (y >= LCD_HEIGHT) return;
 80021a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80021ac:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80021b0:	da6d      	bge.n	800228e <_ARGB8888_updatepixelblend+0x10a>
	if (y < 0) return;
 80021b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db6b      	blt.n	8002292 <_ARGB8888_updatepixelblend+0x10e>

	uint32_t a1 = (value << 0) >> 24;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0e1b      	lsrs	r3, r3, #24
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (a1 == 0) return;
 80021c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d067      	beq.n	8002296 <_ARGB8888_updatepixelblend+0x112>

	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 80021c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80021ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80021ce:	f44f 7148 	mov.w	r1, #800	; 0x320
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	009a      	lsls	r2, r3, #2
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38

	if (a1 < 255) {
 80021e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e2:	2bfe      	cmp	r3, #254	; 0xfe
 80021e4:	d84b      	bhi.n	800227e <_ARGB8888_updatepixelblend+0xfa>
		uint32_t a1n = 255 - a1;
 80021e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t bgvalue = *addr;
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t r1 = (value << 8) >> 24;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	0e1b      	lsrs	r3, r3, #24
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t g1 = (value << 16) >> 24;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	041b      	lsls	r3, r3, #16
 8002200:	0e1b      	lsrs	r3, r3, #24
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t b1 = (value << 24) >> 24;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t a0 = (bgvalue << 0) >> 24;
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	0e1b      	lsrs	r3, r3, #24
 800220e:	623b      	str	r3, [r7, #32]
		uint32_t r0 = (bgvalue << 8) >> 24;
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	0e1b      	lsrs	r3, r3, #24
 8002216:	61fb      	str	r3, [r7, #28]
		uint32_t g0 = (bgvalue << 16) >> 24;
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	0e1b      	lsrs	r3, r3, #24
 800221e:	61bb      	str	r3, [r7, #24]
		uint32_t b0 = (bgvalue << 24) >> 24;
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	b2db      	uxtb	r3, r3
 8002224:	617b      	str	r3, [r7, #20]
		r1 = ((a1 * r1) + (a1n * r0)) >> 8;
 8002226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800222a:	fb03 f202 	mul.w	r2, r3, r2
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	69f9      	ldr	r1, [r7, #28]
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
		g1 = ((a1 * g1) + (a1n * g0)) >> 8;
 800223c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800223e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002240:	fb03 f202 	mul.w	r2, r3, r2
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
		b1 = ((a1 * b1) + (a1n * b0)) >> 8;
 8002252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	fb03 f202 	mul.w	r2, r3, r2
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	061a      	lsls	r2, r3, #24
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	4313      	orrs	r3, r2
 8002278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227a:	4313      	orrs	r3, r2
 800227c:	607b      	str	r3, [r7, #4]
	}
	*addr = value;
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e008      	b.n	8002298 <_ARGB8888_updatepixelblend+0x114>
	if (x >= LCD_WIDTH) return;
 8002286:	bf00      	nop
 8002288:	e006      	b.n	8002298 <_ARGB8888_updatepixelblend+0x114>
	if (x < 0) return;
 800228a:	bf00      	nop
 800228c:	e004      	b.n	8002298 <_ARGB8888_updatepixelblend+0x114>
	if (y >= LCD_HEIGHT) return;
 800228e:	bf00      	nop
 8002290:	e002      	b.n	8002298 <_ARGB8888_updatepixelblend+0x114>
	if (y < 0) return;
 8002292:	bf00      	nop
 8002294:	e000      	b.n	8002298 <_ARGB8888_updatepixelblend+0x114>
	if (a1 == 0) return;
 8002296:	bf00      	nop
}
 8002298:	3744      	adds	r7, #68	; 0x44
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_ARGB8888_getpixel>:

static uint32_t _ARGB8888_getpixel(uint32_t offset,  int16_t x, int16_t y) {
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 80022b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022b6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80022ba:	db01      	blt.n	80022c0 <_ARGB8888_getpixel+0x1e>
 80022bc:	2300      	movs	r3, #0
 80022be:	e021      	b.n	8002304 <_ARGB8888_getpixel+0x62>
	if (x < 0) return 0x00000000;
 80022c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	da01      	bge.n	80022cc <_ARGB8888_getpixel+0x2a>
 80022c8:	2300      	movs	r3, #0
 80022ca:	e01b      	b.n	8002304 <_ARGB8888_getpixel+0x62>
	if (y >= LCD_HEIGHT) return 0x00000000;
 80022cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022d0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80022d4:	db01      	blt.n	80022da <_ARGB8888_getpixel+0x38>
 80022d6:	2300      	movs	r3, #0
 80022d8:	e014      	b.n	8002304 <_ARGB8888_getpixel+0x62>
	if (y < 0) return 0x00000000;
 80022da:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da01      	bge.n	80022e6 <_ARGB8888_getpixel+0x44>
 80022e2:	2300      	movs	r3, #0
 80022e4:	e00e      	b.n	8002304 <_ARGB8888_getpixel+0x62>

	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 80022e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022ee:	f44f 7148 	mov.w	r1, #800	; 0x320
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	009a      	lsls	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
	return *addr;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_ARGB8888_fillbuf>:


static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af04      	add	r7, sp, #16
 8002316:	4604      	mov	r4, r0
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4623      	mov	r3, r4
 8002320:	80fb      	strh	r3, [r7, #6]
 8002322:	4603      	mov	r3, r0
 8002324:	80bb      	strh	r3, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]
 800232a:	4613      	mov	r3, r2
 800232c:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <_ARGB8888_fillbuf+0x74>)
 8002330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002334:	73fb      	strb	r3, [r7, #15]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <_ARGB8888_fillbuf+0x74>)
 800233a:	330a      	adds	r3, #10
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	88f9      	ldrh	r1, [r7, #6]
 8002344:	88ba      	ldrh	r2, [r7, #4]
 8002346:	f44f 7048 	mov.w	r0, #800	; 0x320
 800234a:	fb00 f202 	mul.w	r2, r0, r2
 800234e:	440a      	add	r2, r1
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	4413      	add	r3, r2
 8002354:	60bb      	str	r3, [r7, #8]

	_ARGB8888_dma2dwait();
 8002356:	f7ff fecd 	bl	80020f4 <_ARGB8888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <_ARGB8888_fillbuf+0x74>)
 800235c:	2201      	movs	r2, #1
 800235e:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color);
 8002360:	8839      	ldrh	r1, [r7, #0]
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	8c3b      	ldrh	r3, [r7, #32]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	460b      	mov	r3, r1
 8002372:	2100      	movs	r1, #0
 8002374:	4804      	ldr	r0, [pc, #16]	; (8002388 <_ARGB8888_fillbuf+0x78>)
 8002376:	f006 fc73 	bl	8008c60 <BSP_STM32_DMA2D_FillBuff>
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}
 8002382:	bf00      	nop
 8002384:	24000240 	.word	0x24000240
 8002388:	52001000 	.word	0x52001000

0800238c <_ARGB8888_fillbufblend>:


static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b08b      	sub	sp, #44	; 0x2c
 8002390:	af04      	add	r7, sp, #16
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	80fb      	strh	r3, [r7, #6]
 800239e:	4603      	mov	r3, r0
 80023a0:	80bb      	strh	r3, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
 80023a6:	4613      	mov	r3, r2
 80023a8:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <_ARGB8888_fillbufblend+0x7c>)
 80023ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023b0:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <_ARGB8888_fillbufblend+0x7c>)
 80023b6:	330a      	adds	r3, #10
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	88f9      	ldrh	r1, [r7, #6]
 80023c0:	88ba      	ldrh	r2, [r7, #4]
 80023c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80023c6:	fb00 f202 	mul.w	r2, r0, r2
 80023ca:	440a      	add	r2, r1
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
	uint8_t alpha  = color >> 24;
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	0e1b      	lsrs	r3, r3, #24
 80023d6:	73fb      	strb	r3, [r7, #15]

	_ARGB8888_dma2dwait();
 80023d8:	f7ff fe8c 	bl	80020f4 <_ARGB8888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <_ARGB8888_fillbufblend+0x7c>)
 80023de:	2201      	movs	r2, #1
 80023e0:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color, alpha);
 80023e2:	8839      	ldrh	r1, [r7, #0]
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	9303      	str	r3, [sp, #12]
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	460b      	mov	r3, r1
 80023f8:	2100      	movs	r1, #0
 80023fa:	4804      	ldr	r0, [pc, #16]	; (800240c <_ARGB8888_fillbufblend+0x80>)
 80023fc:	f006 fc7a 	bl	8008cf4 <BSP_STM32_DMA2D_FillBuffBlend>
}
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	24000240 	.word	0x24000240
 800240c:	52001000 	.word	0x52001000

08002410 <_ARGB8888_copybuf>:


static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af04      	add	r7, sp, #16
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	460b      	mov	r3, r1
 8002424:	813b      	strh	r3, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <_ARGB8888_copybuf+0x74>)
 800242c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002430:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <_ARGB8888_copybuf+0x74>)
 8002436:	330a      	adds	r3, #10
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	8939      	ldrh	r1, [r7, #8]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002446:	fb00 f202 	mul.w	r2, r0, r2
 800244a:	440a      	add	r2, r1
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	4413      	add	r3, r2
 8002450:	613b      	str	r3, [r7, #16]

	_ARGB8888_dma2dwait();
 8002452:	f7ff fe4f 	bl	80020f4 <_ARGB8888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <_ARGB8888_copybuf+0x74>)
 8002458:	2201      	movs	r2, #1
 800245a:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 800245c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800245e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	9303      	str	r3, [sp, #12]
 8002464:	8c3b      	ldrh	r3, [r7, #32]
 8002466:	9302      	str	r3, [sp, #8]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	460b      	mov	r3, r1
 8002472:	2100      	movs	r1, #0
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <_ARGB8888_copybuf+0x78>)
 8002476:	f006 fcd5 	bl	8008e24 <BSP_STM32_DMA2D_CopyBuf>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	24000240 	.word	0x24000240
 8002488:	52001000 	.word	0x52001000

0800248c <_ARGB8888_copybufblend>:


static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af06      	add	r7, sp, #24
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	817b      	strh	r3, [r7, #10]
 800249e:	460b      	mov	r3, r1
 80024a0:	813b      	strh	r3, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <_ARGB8888_copybufblend+0x78>)
 80024a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024ac:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_ARGB8888_copybufblend+0x78>)
 80024b2:	330a      	adds	r3, #10
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	8939      	ldrh	r1, [r7, #8]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	f44f 7048 	mov.w	r0, #800	; 0x320
 80024c2:	fb00 f202 	mul.w	r2, r0, r2
 80024c6:	440a      	add	r2, r1
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]

	_ARGB8888_dma2dwait();
 80024ce:	f7ff fe11 	bl	80020f4 <_ARGB8888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <_ARGB8888_copybufblend+0x78>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 80024d8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80024da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024e0:	9304      	str	r3, [sp, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	9303      	str	r3, [sp, #12]
 80024e6:	8c3b      	ldrh	r3, [r7, #32]
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	460b      	mov	r3, r1
 80024f4:	2100      	movs	r1, #0
 80024f6:	4804      	ldr	r0, [pc, #16]	; (8002508 <_ARGB8888_copybufblend+0x7c>)
 80024f8:	f006 fd50 	bl	8008f9c <BSP_STM32_DMA2D_CopyBufBlend>
}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	24000240 	.word	0x24000240
 8002508:	52001000 	.word	0x52001000

0800250c <_ARGB8888_copybufJPEG>:


static void _ARGB8888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af06      	add	r7, sp, #24
 8002512:	4603      	mov	r3, r0
 8002514:	460a      	mov	r2, r1
 8002516:	80fb      	strh	r3, [r7, #6]
 8002518:	4613      	mov	r3, r2
 800251a:	80bb      	strh	r3, [r7, #4]
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 800251c:	4b46      	ldr	r3, [pc, #280]	; (8002638 <_ARGB8888_copybufJPEG+0x12c>)
 800251e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002522:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	4a44      	ldr	r2, [pc, #272]	; (8002638 <_ARGB8888_copybufJPEG+0x12c>)
 8002528:	330a      	adds	r3, #10
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	88f9      	ldrh	r1, [r7, #6]
 8002532:	88ba      	ldrh	r2, [r7, #4]
 8002534:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002538:	fb00 f202 	mul.w	r2, r0, r2
 800253c:	440a      	add	r2, r1
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4413      	add	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
	uint32_t chroma = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]

	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002548:	483c      	ldr	r0, [pc, #240]	; (800263c <_ARGB8888_copybufJPEG+0x130>)
 800254a:	f007 fd77 	bl	800a03c <BSP_STM32_JPEG_GetColorSpace>
 800254e:	4603      	mov	r3, r0
 8002550:	2b10      	cmp	r3, #16
 8002552:	d16a      	bne.n	800262a <_ARGB8888_copybufJPEG+0x11e>

	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002554:	4839      	ldr	r0, [pc, #228]	; (800263c <_ARGB8888_copybufJPEG+0x130>)
 8002556:	f007 fd47 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 800255a:	60f8      	str	r0, [r7, #12]
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 800255c:	4837      	ldr	r0, [pc, #220]	; (800263c <_ARGB8888_copybufJPEG+0x130>)
 800255e:	f007 fd43 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 8002562:	4603      	mov	r3, r0
 8002564:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8002568:	60bb      	str	r3, [r7, #8]
	uint32_t offsline_src = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]

	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 800256e:	4833      	ldr	r0, [pc, #204]	; (800263c <_ARGB8888_copybufJPEG+0x130>)
 8002570:	f007 fd56 	bl	800a020 <BSP_STM32_JPEG_GetCSS>
 8002574:	4603      	mov	r3, r0
 8002576:	2b02      	cmp	r3, #2
 8002578:	d013      	beq.n	80025a2 <_ARGB8888_copybufJPEG+0x96>
 800257a:	2b02      	cmp	r3, #2
 800257c:	d857      	bhi.n	800262e <_ARGB8888_copybufJPEG+0x122>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01d      	beq.n	80025be <_ARGB8888_copybufJPEG+0xb2>
 8002582:	2b01      	cmp	r3, #1
 8002584:	d153      	bne.n	800262e <_ARGB8888_copybufJPEG+0x122>
	case JPEG_420_SUBSAMPLING:
		chroma = DMA2D_CSS_420;
 8002586:	2302      	movs	r3, #2
 8002588:	61fb      	str	r3, [r7, #28]
		if (width % 16) offsline_src = 16 - (width % 16);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	2b00      	cmp	r3, #0
 8002592:	d022      	beq.n	80025da <_ARGB8888_copybufJPEG+0xce>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	f1c3 0310 	rsb	r3, r3, #16
 800259e:	61bb      	str	r3, [r7, #24]
		break;
 80025a0:	e01b      	b.n	80025da <_ARGB8888_copybufJPEG+0xce>
	case JPEG_422_SUBSAMPLING:
		chroma = DMA2D_CSS_422;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
		if (width % 16) offsline_src = 16 - (width % 16);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d016      	beq.n	80025de <_ARGB8888_copybufJPEG+0xd2>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	f1c3 0310 	rsb	r3, r3, #16
 80025ba:	61bb      	str	r3, [r7, #24]
		break;
 80025bc:	e00f      	b.n	80025de <_ARGB8888_copybufJPEG+0xd2>
	case JPEG_444_SUBSAMPLING:
		chroma = DMA2D_CSS_444;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
		if (width % 8) offsline_src = 8 - (width % 8);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <_ARGB8888_copybufJPEG+0xd6>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	f1c3 0308 	rsb	r3, r3, #8
 80025d6:	61bb      	str	r3, [r7, #24]
		break;
 80025d8:	e003      	b.n	80025e2 <_ARGB8888_copybufJPEG+0xd6>
		break;
 80025da:	bf00      	nop
 80025dc:	e002      	b.n	80025e4 <_ARGB8888_copybufJPEG+0xd8>
		break;
 80025de:	bf00      	nop
 80025e0:	e000      	b.n	80025e4 <_ARGB8888_copybufJPEG+0xd8>
		break;
 80025e2:	bf00      	nop
	default:
		return;
	}

	// Wait for any previous DMA2D operation to complete
	_ARGB8888_dma2dwait();
 80025e4:	f7ff fd86 	bl	80020f4 <_ARGB8888_dma2dwait>

	// Starting DMA2D color space conversion and copy to frame buffer.
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_ARGB8888_copybufJPEG+0x12c>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGBuf, offsline_dest, dest_addr, chroma);
 80025ee:	4813      	ldr	r0, [pc, #76]	; (800263c <_ARGB8888_copybufJPEG+0x130>)
 80025f0:	f007 fcfa 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 80025f4:	4603      	mov	r3, r0
 80025f6:	b29c      	uxth	r4, r3
 80025f8:	4810      	ldr	r0, [pc, #64]	; (800263c <_ARGB8888_copybufJPEG+0x130>)
 80025fa:	f007 fd03 	bl	800a004 <BSP_STM32_JPEG_GetHeight>
 80025fe:	4603      	mov	r3, r0
 8002600:	b29d      	uxth	r5, r3
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <_ARGB8888_copybufJPEG+0x12c>)
 8002608:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	b289      	uxth	r1, r1
 800260e:	69f8      	ldr	r0, [r7, #28]
 8002610:	9004      	str	r0, [sp, #16]
 8002612:	6938      	ldr	r0, [r7, #16]
 8002614:	9003      	str	r0, [sp, #12]
 8002616:	9102      	str	r1, [sp, #8]
 8002618:	9201      	str	r2, [sp, #4]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	462b      	mov	r3, r5
 800261e:	4622      	mov	r2, r4
 8002620:	2100      	movs	r1, #0
 8002622:	4807      	ldr	r0, [pc, #28]	; (8002640 <_ARGB8888_copybufJPEG+0x134>)
 8002624:	f006 fc5a 	bl	8008edc <BSP_STM32_DMA2D_CopyBufJPEG>
 8002628:	e002      	b.n	8002630 <_ARGB8888_copybufJPEG+0x124>
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <_ARGB8888_copybufJPEG+0x124>
		return;
 800262e:	bf00      	nop
}
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bdb0      	pop	{r4, r5, r7, pc}
 8002636:	bf00      	nop
 8002638:	24000240 	.word	0x24000240
 800263c:	52003000 	.word	0x52003000
 8002640:	52001000 	.word	0x52001000

08002644 <_ARGB1555_color>:

/* ARGB1555 ------------------------------------------------------------------*/

static uint32_t _ARGB1555_color(uint32_t color, uint8_t alpha) {
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t r = ((color & 0x000000FF) >> 3 ) << 0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	617b      	str	r3, [r7, #20]
	uint32_t g = ((color & 0x0000FF00) >> 11) << 5;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0adb      	lsrs	r3, r3, #11
 800265e:	015b      	lsls	r3, r3, #5
 8002660:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8002664:	613b      	str	r3, [r7, #16]
	uint32_t b = ((color & 0x00FF0000) >> 19) << 10;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0cdb      	lsrs	r3, r3, #19
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002670:	60fb      	str	r3, [r7, #12]
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <_ARGB1555_color+0x3a>
 8002678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800267c:	e000      	b.n	8002680 <_ARGB1555_color+0x3c>
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
	return r | g | b | a;
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	431a      	orrs	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	431a      	orrs	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
}
 8002690:	4618      	mov	r0, r3
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_ARGB1555_alpha>:


static uint32_t _ARGB1555_alpha(uint32_t color, uint8_t alpha) {
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t c = color & 0x0007FFF;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80026ae:	60fb      	str	r3, [r7, #12]
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <_ARGB1555_alpha+0x20>
 80026b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ba:	e000      	b.n	80026be <_ARGB1555_alpha+0x22>
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
	return c | a;
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4313      	orrs	r3, r2
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <_ARGB1555_dma2dwait>:


static void _ARGB1555_dma2dwait(void) {
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 80026d8:	bf00      	nop
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <_ARGB1555_dma2dwait+0x1c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d0fb      	beq.n	80026da <_ARGB1555_dma2dwait+0x6>
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	24000240 	.word	0x24000240

080026f4 <_ARGB1555_updatepixel>:


static void _ARGB1555_updatepixel(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	817b      	strh	r3, [r7, #10]
 8002702:	4613      	mov	r3, r2
 8002704:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8002706:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800270a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800270e:	da1e      	bge.n	800274e <_ARGB1555_updatepixel+0x5a>
	if (x < 0) return;
 8002710:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db1c      	blt.n	8002752 <_ARGB1555_updatepixel+0x5e>
	if (y >= LCD_HEIGHT) return;
 8002718:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800271c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002720:	da19      	bge.n	8002756 <_ARGB1555_updatepixel+0x62>
	if (y < 0) return;
 8002722:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db17      	blt.n	800275a <_ARGB1555_updatepixel+0x66>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 800272a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800272e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002732:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	005a      	lsls	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
	*addr = (uint16_t)value;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	b29a      	uxth	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	e006      	b.n	800275c <_ARGB1555_updatepixel+0x68>
	if (x >= LCD_WIDTH) return;
 800274e:	bf00      	nop
 8002750:	e004      	b.n	800275c <_ARGB1555_updatepixel+0x68>
	if (x < 0) return;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <_ARGB1555_updatepixel+0x68>
	if (y >= LCD_HEIGHT) return;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <_ARGB1555_updatepixel+0x68>
	if (y < 0) return;
 800275a:	bf00      	nop
}
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <_ARGB1555_updatepixelblend>:


static void _ARGB1555_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002766:	b480      	push	{r7}
 8002768:	b087      	sub	sp, #28
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	817b      	strh	r3, [r7, #10]
 8002774:	4613      	mov	r3, r2
 8002776:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8002778:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800277c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002780:	da23      	bge.n	80027ca <_ARGB1555_updatepixelblend+0x64>
	if (x < 0) return;
 8002782:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db21      	blt.n	80027ce <_ARGB1555_updatepixelblend+0x68>
	if (y >= LCD_HEIGHT) return;
 800278a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800278e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002792:	da1e      	bge.n	80027d2 <_ARGB1555_updatepixelblend+0x6c>
	if (y < 0) return;
 8002794:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db1c      	blt.n	80027d6 <_ARGB1555_updatepixelblend+0x70>

	if (!(value & 0x8000)) return;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <_ARGB1555_updatepixelblend+0x74>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80027a6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80027aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80027ae:	f44f 7148 	mov.w	r1, #800	; 0x320
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	005a      	lsls	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
	*addr = (uint16_t)value;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	801a      	strh	r2, [r3, #0]
	return;
 80027c8:	e008      	b.n	80027dc <_ARGB1555_updatepixelblend+0x76>
	if (x >= LCD_WIDTH) return;
 80027ca:	bf00      	nop
 80027cc:	e006      	b.n	80027dc <_ARGB1555_updatepixelblend+0x76>
	if (x < 0) return;
 80027ce:	bf00      	nop
 80027d0:	e004      	b.n	80027dc <_ARGB1555_updatepixelblend+0x76>
	if (y >= LCD_HEIGHT) return;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <_ARGB1555_updatepixelblend+0x76>
	if (y < 0) return;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <_ARGB1555_updatepixelblend+0x76>
	if (!(value & 0x8000)) return;
 80027da:	bf00      	nop

}
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_ARGB1555_getpixel>:


static uint32_t _ARGB1555_getpixel(uint32_t offset,  int16_t x, int16_t y) {
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	807b      	strh	r3, [r7, #2]
 80027f2:	4613      	mov	r3, r2
 80027f4:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 80027f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80027fe:	db01      	blt.n	8002804 <_ARGB1555_getpixel+0x1e>
 8002800:	2300      	movs	r3, #0
 8002802:	e021      	b.n	8002848 <_ARGB1555_getpixel+0x62>
	if (x < 0) return 0x00000000;
 8002804:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da01      	bge.n	8002810 <_ARGB1555_getpixel+0x2a>
 800280c:	2300      	movs	r3, #0
 800280e:	e01b      	b.n	8002848 <_ARGB1555_getpixel+0x62>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8002810:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002814:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002818:	db01      	blt.n	800281e <_ARGB1555_getpixel+0x38>
 800281a:	2300      	movs	r3, #0
 800281c:	e014      	b.n	8002848 <_ARGB1555_getpixel+0x62>
	if (y < 0) return 0x00000000;
 800281e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	da01      	bge.n	800282a <_ARGB1555_getpixel+0x44>
 8002826:	2300      	movs	r3, #0
 8002828:	e00e      	b.n	8002848 <_ARGB1555_getpixel+0x62>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 800282a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800282e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002832:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	005a      	lsls	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
	return *addr;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	881b      	ldrh	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_ARGB1555_fillbuf>:


static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af04      	add	r7, sp, #16
 800285a:	4604      	mov	r4, r0
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4623      	mov	r3, r4
 8002864:	80fb      	strh	r3, [r7, #6]
 8002866:	4603      	mov	r3, r0
 8002868:	80bb      	strh	r3, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]
 800286e:	4613      	mov	r3, r2
 8002870:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <_ARGB1555_fillbuf+0x74>)
 8002874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002878:	73fb      	strb	r3, [r7, #15]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <_ARGB1555_fillbuf+0x74>)
 800287e:	330a      	adds	r3, #10
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	88f9      	ldrh	r1, [r7, #6]
 8002888:	88ba      	ldrh	r2, [r7, #4]
 800288a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800288e:	fb00 f202 	mul.w	r2, r0, r2
 8002892:	440a      	add	r2, r1
 8002894:	0052      	lsls	r2, r2, #1
 8002896:	4413      	add	r3, r2
 8002898:	60bb      	str	r3, [r7, #8]

	_ARGB1555_dma2dwait();
 800289a:	f7ff ff1b 	bl	80026d4 <_ARGB1555_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <_ARGB1555_fillbuf+0x74>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color);
 80028a4:	8839      	ldrh	r1, [r7, #0]
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	8c3b      	ldrh	r3, [r7, #32]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	460b      	mov	r3, r1
 80028b6:	2103      	movs	r1, #3
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <_ARGB1555_fillbuf+0x78>)
 80028ba:	f006 f9d1 	bl	8008c60 <BSP_STM32_DMA2D_FillBuff>
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	24000240 	.word	0x24000240
 80028cc:	52001000 	.word	0x52001000

080028d0 <_ARGB1555_fillbufblend>:


static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b08b      	sub	sp, #44	; 0x2c
 80028d4:	af04      	add	r7, sp, #16
 80028d6:	4604      	mov	r4, r0
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4623      	mov	r3, r4
 80028e0:	80fb      	strh	r3, [r7, #6]
 80028e2:	4603      	mov	r3, r0
 80028e4:	80bb      	strh	r3, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	807b      	strh	r3, [r7, #2]
 80028ea:	4613      	mov	r3, r2
 80028ec:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <_ARGB1555_fillbufblend+0x88>)
 80028f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028f4:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	4a17      	ldr	r2, [pc, #92]	; (8002958 <_ARGB1555_fillbufblend+0x88>)
 80028fa:	330a      	adds	r3, #10
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	88f9      	ldrh	r1, [r7, #6]
 8002904:	88ba      	ldrh	r2, [r7, #4]
 8002906:	f44f 7048 	mov.w	r0, #800	; 0x320
 800290a:	fb00 f202 	mul.w	r2, r0, r2
 800290e:	440a      	add	r2, r1
 8002910:	0052      	lsls	r2, r2, #1
 8002912:	4413      	add	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
	uint8_t alpha  = ((color & 0x8000) >> 15)?255:0;
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <_ARGB1555_fillbufblend+0x54>
 8002920:	23ff      	movs	r3, #255	; 0xff
 8002922:	e000      	b.n	8002926 <_ARGB1555_fillbufblend+0x56>
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]

	_ARGB1555_dma2dwait();
 8002928:	f7ff fed4 	bl	80026d4 <_ARGB1555_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <_ARGB1555_fillbufblend+0x88>)
 800292e:	2201      	movs	r2, #1
 8002930:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color, alpha);
 8002932:	8839      	ldrh	r1, [r7, #0]
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	9303      	str	r3, [sp, #12]
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	9302      	str	r3, [sp, #8]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	460b      	mov	r3, r1
 8002948:	2103      	movs	r1, #3
 800294a:	4804      	ldr	r0, [pc, #16]	; (800295c <_ARGB1555_fillbufblend+0x8c>)
 800294c:	f006 f9d2 	bl	8008cf4 <BSP_STM32_DMA2D_FillBuffBlend>
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	24000240 	.word	0x24000240
 800295c:	52001000 	.word	0x52001000

08002960 <_ARGB1555_copybuf>:


static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af04      	add	r7, sp, #16
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	4608      	mov	r0, r1
 800296a:	4611      	mov	r1, r2
 800296c:	461a      	mov	r2, r3
 800296e:	4603      	mov	r3, r0
 8002970:	817b      	strh	r3, [r7, #10]
 8002972:	460b      	mov	r3, r1
 8002974:	813b      	strh	r3, [r7, #8]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <_ARGB1555_copybuf+0x74>)
 800297c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002980:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <_ARGB1555_copybuf+0x74>)
 8002986:	330a      	adds	r3, #10
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	8939      	ldrh	r1, [r7, #8]
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002996:	fb00 f202 	mul.w	r2, r0, r2
 800299a:	440a      	add	r2, r1
 800299c:	0052      	lsls	r2, r2, #1
 800299e:	4413      	add	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

	_ARGB1555_dma2dwait();
 80029a2:	f7ff fe97 	bl	80026d4 <_ARGB1555_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <_ARGB1555_copybuf+0x74>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 80029ac:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80029ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	9303      	str	r3, [sp, #12]
 80029b4:	8c3b      	ldrh	r3, [r7, #32]
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	897b      	ldrh	r3, [r7, #10]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	2103      	movs	r1, #3
 80029c4:	4804      	ldr	r0, [pc, #16]	; (80029d8 <_ARGB1555_copybuf+0x78>)
 80029c6:	f006 fa2d 	bl	8008e24 <BSP_STM32_DMA2D_CopyBuf>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	24000240 	.word	0x24000240
 80029d8:	52001000 	.word	0x52001000

080029dc <_ARGB1555_copybufblend>:


static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af06      	add	r7, sp, #24
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	460b      	mov	r3, r1
 80029f0:	813b      	strh	r3, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <_ARGB1555_copybufblend+0x78>)
 80029f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029fc:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <_ARGB1555_copybufblend+0x78>)
 8002a02:	330a      	adds	r3, #10
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	8939      	ldrh	r1, [r7, #8]
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002a12:	fb00 f202 	mul.w	r2, r0, r2
 8002a16:	440a      	add	r2, r1
 8002a18:	0052      	lsls	r2, r2, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]

	_ARGB1555_dma2dwait();
 8002a1e:	f7ff fe59 	bl	80026d4 <_ARGB1555_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <_ARGB1555_copybufblend+0x78>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8002a28:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002a2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a30:	9304      	str	r3, [sp, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	8c3b      	ldrh	r3, [r7, #32]
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	460b      	mov	r3, r1
 8002a44:	2103      	movs	r1, #3
 8002a46:	4804      	ldr	r0, [pc, #16]	; (8002a58 <_ARGB1555_copybufblend+0x7c>)
 8002a48:	f006 faa8 	bl	8008f9c <BSP_STM32_DMA2D_CopyBufBlend>
}
 8002a4c:	bf00      	nop
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	24000240 	.word	0x24000240
 8002a58:	52001000 	.word	0x52001000

08002a5c <_ARGB1555_copybufJPEG>:


static void _ARGB1555_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af06      	add	r7, sp, #24
 8002a62:	4603      	mov	r3, r0
 8002a64:	460a      	mov	r2, r1
 8002a66:	80fb      	strh	r3, [r7, #6]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	80bb      	strh	r3, [r7, #4]
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8002a6c:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <_ARGB1555_copybufJPEG+0x12c>)
 8002a6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a72:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	4a44      	ldr	r2, [pc, #272]	; (8002b88 <_ARGB1555_copybufJPEG+0x12c>)
 8002a78:	330a      	adds	r3, #10
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	88f9      	ldrh	r1, [r7, #6]
 8002a82:	88ba      	ldrh	r2, [r7, #4]
 8002a84:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002a88:	fb00 f202 	mul.w	r2, r0, r2
 8002a8c:	440a      	add	r2, r1
 8002a8e:	0052      	lsls	r2, r2, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
	uint32_t chroma = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]

	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002a98:	483c      	ldr	r0, [pc, #240]	; (8002b8c <_ARGB1555_copybufJPEG+0x130>)
 8002a9a:	f007 facf 	bl	800a03c <BSP_STM32_JPEG_GetColorSpace>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d16a      	bne.n	8002b7a <_ARGB1555_copybufJPEG+0x11e>

	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002aa4:	4839      	ldr	r0, [pc, #228]	; (8002b8c <_ARGB1555_copybufJPEG+0x130>)
 8002aa6:	f007 fa9f 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 8002aaa:	60f8      	str	r0, [r7, #12]
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8002aac:	4837      	ldr	r0, [pc, #220]	; (8002b8c <_ARGB1555_copybufJPEG+0x130>)
 8002aae:	f007 fa9b 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8002ab8:	60bb      	str	r3, [r7, #8]
	uint32_t offsline_src = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]

	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8002abe:	4833      	ldr	r0, [pc, #204]	; (8002b8c <_ARGB1555_copybufJPEG+0x130>)
 8002ac0:	f007 faae 	bl	800a020 <BSP_STM32_JPEG_GetCSS>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d013      	beq.n	8002af2 <_ARGB1555_copybufJPEG+0x96>
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d857      	bhi.n	8002b7e <_ARGB1555_copybufJPEG+0x122>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01d      	beq.n	8002b0e <_ARGB1555_copybufJPEG+0xb2>
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d153      	bne.n	8002b7e <_ARGB1555_copybufJPEG+0x122>
	case JPEG_420_SUBSAMPLING:
		chroma = DMA2D_CSS_420;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	61fb      	str	r3, [r7, #28]
		if (width % 16) offsline_src = 16 - (width % 16);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d022      	beq.n	8002b2a <_ARGB1555_copybufJPEG+0xce>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	f1c3 0310 	rsb	r3, r3, #16
 8002aee:	61bb      	str	r3, [r7, #24]
		break;
 8002af0:	e01b      	b.n	8002b2a <_ARGB1555_copybufJPEG+0xce>
	case JPEG_422_SUBSAMPLING:
		chroma = DMA2D_CSS_422;
 8002af2:	2301      	movs	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
		if (width % 16) offsline_src = 16 - (width % 16);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <_ARGB1555_copybufJPEG+0xd2>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	f1c3 0310 	rsb	r3, r3, #16
 8002b0a:	61bb      	str	r3, [r7, #24]
		break;
 8002b0c:	e00f      	b.n	8002b2e <_ARGB1555_copybufJPEG+0xd2>
	case JPEG_444_SUBSAMPLING:
		chroma = DMA2D_CSS_444;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
		if (width % 8) offsline_src = 8 - (width % 8);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <_ARGB1555_copybufJPEG+0xd6>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	f1c3 0308 	rsb	r3, r3, #8
 8002b26:	61bb      	str	r3, [r7, #24]
		break;
 8002b28:	e003      	b.n	8002b32 <_ARGB1555_copybufJPEG+0xd6>
		break;
 8002b2a:	bf00      	nop
 8002b2c:	e002      	b.n	8002b34 <_ARGB1555_copybufJPEG+0xd8>
		break;
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <_ARGB1555_copybufJPEG+0xd8>
		break;
 8002b32:	bf00      	nop
	default:
		return;
	}

	// Wait for any previous DMA2D operation to complete
	_ARGB1555_dma2dwait();
 8002b34:	f7ff fdce 	bl	80026d4 <_ARGB1555_dma2dwait>

	// Starting DMA2D color space conversion and copy to frame buffer.
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <_ARGB1555_copybufJPEG+0x12c>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGBuf, offsline_dest, dest_addr, chroma);
 8002b3e:	4813      	ldr	r0, [pc, #76]	; (8002b8c <_ARGB1555_copybufJPEG+0x130>)
 8002b40:	f007 fa52 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 8002b44:	4603      	mov	r3, r0
 8002b46:	b29c      	uxth	r4, r3
 8002b48:	4810      	ldr	r0, [pc, #64]	; (8002b8c <_ARGB1555_copybufJPEG+0x130>)
 8002b4a:	f007 fa5b 	bl	800a004 <BSP_STM32_JPEG_GetHeight>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	b29d      	uxth	r5, r3
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <_ARGB1555_copybufJPEG+0x12c>)
 8002b58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	b289      	uxth	r1, r1
 8002b5e:	69f8      	ldr	r0, [r7, #28]
 8002b60:	9004      	str	r0, [sp, #16]
 8002b62:	6938      	ldr	r0, [r7, #16]
 8002b64:	9003      	str	r0, [sp, #12]
 8002b66:	9102      	str	r1, [sp, #8]
 8002b68:	9201      	str	r2, [sp, #4]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	462b      	mov	r3, r5
 8002b6e:	4622      	mov	r2, r4
 8002b70:	2103      	movs	r1, #3
 8002b72:	4807      	ldr	r0, [pc, #28]	; (8002b90 <_ARGB1555_copybufJPEG+0x134>)
 8002b74:	f006 f9b2 	bl	8008edc <BSP_STM32_DMA2D_CopyBufJPEG>
 8002b78:	e002      	b.n	8002b80 <_ARGB1555_copybufJPEG+0x124>
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <_ARGB1555_copybufJPEG+0x124>
		return;
 8002b7e:	bf00      	nop
}
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bdb0      	pop	{r4, r5, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	24000240 	.word	0x24000240
 8002b8c:	52003000 	.word	0x52003000
 8002b90:	52001000 	.word	0x52001000

08002b94 <_ARGB4444_color>:


/* ARGB4444 ------------------------------------------------------------------*/

static uint32_t _ARGB4444_color(uint32_t color, uint8_t alpha) {
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t b = ((color & 0x000000FF) >> 4 ) << 0;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	61fb      	str	r3, [r7, #28]
	uint32_t g = ((color & 0x0000FF00) >> 12) << 4;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0b1b      	lsrs	r3, r3, #12
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	61bb      	str	r3, [r7, #24]
	uint32_t r = ((color & 0x00FF0000) >> 20) << 8;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	0d1b      	lsrs	r3, r3, #20
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002bbe:	617b      	str	r3, [r7, #20]
	uint32_t a = ((uint32_t)alpha >> 4) << 12;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	031b      	lsls	r3, r3, #12
 8002bc8:	613b      	str	r3, [r7, #16]
	uint32_t c = r | g | b | a;
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
	return c;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3724      	adds	r7, #36	; 0x24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_ARGB4444_alpha>:


static uint32_t _ARGB4444_alpha(uint32_t color, uint8_t alpha) {
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t c = color & 0x0000FFF;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfa:	60fb      	str	r3, [r7, #12]
	uint32_t a = ((uint32_t)alpha >> 4) << 12;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	031b      	lsls	r3, r3, #12
 8002c04:	60bb      	str	r3, [r7, #8]
	return c | a;
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_ARGB4444_dma2dwait>:


static void _ARGB4444_dma2dwait(void) {
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 8002c1c:	bf00      	nop
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <_ARGB4444_dma2dwait+0x1c>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d0fb      	beq.n	8002c1e <_ARGB4444_dma2dwait+0x6>
}
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	24000240 	.word	0x24000240

08002c38 <_ARGB4444_updatepixel>:


static void _ARGB4444_updatepixel(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	4613      	mov	r3, r2
 8002c48:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8002c4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c4e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002c52:	da1e      	bge.n	8002c92 <_ARGB4444_updatepixel+0x5a>
	if (x < 0) return;
 8002c54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db1c      	blt.n	8002c96 <_ARGB4444_updatepixel+0x5e>
	if (y >= LCD_HEIGHT) return;
 8002c5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c60:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002c64:	da19      	bge.n	8002c9a <_ARGB4444_updatepixel+0x62>
	if (y < 0) return;
 8002c66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db17      	blt.n	8002c9e <_ARGB4444_updatepixel+0x66>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8002c6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c72:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c76:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	005a      	lsls	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
	*addr = (uint16_t)value;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e006      	b.n	8002ca0 <_ARGB4444_updatepixel+0x68>
	if (x >= LCD_WIDTH) return;
 8002c92:	bf00      	nop
 8002c94:	e004      	b.n	8002ca0 <_ARGB4444_updatepixel+0x68>
	if (x < 0) return;
 8002c96:	bf00      	nop
 8002c98:	e002      	b.n	8002ca0 <_ARGB4444_updatepixel+0x68>
	if (y >= LCD_HEIGHT) return;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <_ARGB4444_updatepixel+0x68>
	if (y < 0) return;
 8002c9e:	bf00      	nop
}
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <_ARGB4444_updatepixelblend>:


static void _ARGB4444_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002caa:	b480      	push	{r7}
 8002cac:	b091      	sub	sp, #68	; 0x44
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	817b      	strh	r3, [r7, #10]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8002cbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cc0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002cc4:	da7d      	bge.n	8002dc2 <_ARGB4444_updatepixelblend+0x118>
	if (x < 0) return;
 8002cc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db7b      	blt.n	8002dc6 <_ARGB4444_updatepixelblend+0x11c>
	if (y >= LCD_HEIGHT) return;
 8002cce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cd2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002cd6:	da78      	bge.n	8002dca <_ARGB4444_updatepixelblend+0x120>
	if (y < 0) return;
 8002cd8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db76      	blt.n	8002dce <_ARGB4444_updatepixelblend+0x124>

	uint32_t a1 = (value & 0xF000) >> 12;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0b1b      	lsrs	r3, r3, #12
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (a1 == 0) return;
 8002cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d070      	beq.n	8002dd2 <_ARGB4444_updatepixelblend+0x128>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8002cf0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002cf4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cf8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	005a      	lsls	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38

	if (a1 < 15) {
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0c:	2b0e      	cmp	r3, #14
 8002d0e:	d853      	bhi.n	8002db8 <_ARGB4444_updatepixelblend+0x10e>
		uint32_t a1n = 15 - a1;
 8002d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d12:	f1c3 030f 	rsb	r3, r3, #15
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t bgvalue = *addr;
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t r1 = (value & 0x0F00) >> 8;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t g1 = (value & 0x00F0) >> 4;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t b1 = (value & 0x000F) >> 0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t a0 = (bgvalue & 0xF000) >> 12;
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	0b1b      	lsrs	r3, r3, #12
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	623b      	str	r3, [r7, #32]
		uint32_t r0 = (bgvalue & 0x0F00) >> 8;
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	61fb      	str	r3, [r7, #28]
		uint32_t g0 = (bgvalue & 0x00F0) >> 4;
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	61bb      	str	r3, [r7, #24]
		uint32_t b0 = (bgvalue & 0x000F) >> 0;
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	617b      	str	r3, [r7, #20]
		r1 = ((a1 * r1) + (a1n * r0)) >> 4;
 8002d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d64:	fb03 f202 	mul.w	r2, r3, r2
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	69f9      	ldr	r1, [r7, #28]
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
		g1 = ((a1 * g1) + (a1n * g0)) >> 4;
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d7a:	fb03 f202 	mul.w	r2, r3, r2
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	69b9      	ldr	r1, [r7, #24]
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
		b1 = ((a1 * b1) + (a1n * b0)) >> 4;
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	fb03 f202 	mul.w	r2, r3, r2
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d96:	6979      	ldr	r1, [r7, #20]
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	031a      	lsls	r2, r3, #12
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	431a      	orrs	r2, r3
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4313      	orrs	r3, r2
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	4313      	orrs	r3, r2
 8002db6:	607b      	str	r3, [r7, #4]
	}
	*addr = (uint16_t)value;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e008      	b.n	8002dd4 <_ARGB4444_updatepixelblend+0x12a>
	if (x >= LCD_WIDTH) return;
 8002dc2:	bf00      	nop
 8002dc4:	e006      	b.n	8002dd4 <_ARGB4444_updatepixelblend+0x12a>
	if (x < 0) return;
 8002dc6:	bf00      	nop
 8002dc8:	e004      	b.n	8002dd4 <_ARGB4444_updatepixelblend+0x12a>
	if (y >= LCD_HEIGHT) return;
 8002dca:	bf00      	nop
 8002dcc:	e002      	b.n	8002dd4 <_ARGB4444_updatepixelblend+0x12a>
	if (y < 0) return;
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <_ARGB4444_updatepixelblend+0x12a>
	if (a1 == 0) return;
 8002dd2:	bf00      	nop
}
 8002dd4:	3744      	adds	r7, #68	; 0x44
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <_ARGB4444_getpixel>:


static uint32_t _ARGB4444_getpixel(uint32_t offset,  int16_t x, int16_t y) {
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	807b      	strh	r3, [r7, #2]
 8002dea:	4613      	mov	r3, r2
 8002dec:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 8002dee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002df2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002df6:	db01      	blt.n	8002dfc <_ARGB4444_getpixel+0x1e>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e021      	b.n	8002e40 <_ARGB4444_getpixel+0x62>
	if (x < 0) return 0x00000000;
 8002dfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da01      	bge.n	8002e08 <_ARGB4444_getpixel+0x2a>
 8002e04:	2300      	movs	r3, #0
 8002e06:	e01b      	b.n	8002e40 <_ARGB4444_getpixel+0x62>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8002e08:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002e0c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002e10:	db01      	blt.n	8002e16 <_ARGB4444_getpixel+0x38>
 8002e12:	2300      	movs	r3, #0
 8002e14:	e014      	b.n	8002e40 <_ARGB4444_getpixel+0x62>
	if (y < 0) return 0x00000000;
 8002e16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da01      	bge.n	8002e22 <_ARGB4444_getpixel+0x44>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e00e      	b.n	8002e40 <_ARGB4444_getpixel+0x62>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8002e22:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002e26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002e2a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	005a      	lsls	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
	return *addr;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	881b      	ldrh	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_ARGB4444_fillbuf>:


static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af04      	add	r7, sp, #16
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	80fb      	strh	r3, [r7, #6]
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80bb      	strh	r3, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	807b      	strh	r3, [r7, #2]
 8002e66:	4613      	mov	r3, r2
 8002e68:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <_ARGB4444_fillbuf+0x74>)
 8002e6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e70:	73fb      	strb	r3, [r7, #15]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <_ARGB4444_fillbuf+0x74>)
 8002e76:	330a      	adds	r3, #10
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	88f9      	ldrh	r1, [r7, #6]
 8002e80:	88ba      	ldrh	r2, [r7, #4]
 8002e82:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002e86:	fb00 f202 	mul.w	r2, r0, r2
 8002e8a:	440a      	add	r2, r1
 8002e8c:	0052      	lsls	r2, r2, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	60bb      	str	r3, [r7, #8]

	_ARGB4444_dma2dwait();
 8002e92:	f7ff fec1 	bl	8002c18 <_ARGB4444_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <_ARGB4444_fillbuf+0x74>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color);
 8002e9c:	8839      	ldrh	r1, [r7, #0]
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	8c3b      	ldrh	r3, [r7, #32]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	460b      	mov	r3, r1
 8002eae:	2104      	movs	r1, #4
 8002eb0:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <_ARGB4444_fillbuf+0x78>)
 8002eb2:	f005 fed5 	bl	8008c60 <BSP_STM32_DMA2D_FillBuff>
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd90      	pop	{r4, r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	24000240 	.word	0x24000240
 8002ec4:	52001000 	.word	0x52001000

08002ec8 <_ARGB4444_fillbufblend>:


static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b08b      	sub	sp, #44	; 0x2c
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	80fb      	strh	r3, [r7, #6]
 8002eda:	4603      	mov	r3, r0
 8002edc:	80bb      	strh	r3, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	807b      	strh	r3, [r7, #2]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <_ARGB4444_fillbufblend+0x80>)
 8002ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eec:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <_ARGB4444_fillbufblend+0x80>)
 8002ef2:	330a      	adds	r3, #10
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	88f9      	ldrh	r1, [r7, #6]
 8002efc:	88ba      	ldrh	r2, [r7, #4]
 8002efe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002f02:	fb00 f202 	mul.w	r2, r0, r2
 8002f06:	440a      	add	r2, r1
 8002f08:	0052      	lsls	r2, r2, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
	uint8_t alpha  = ((color & 0xF000) >> 12) << 4;
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	0b1b      	lsrs	r3, r3, #12
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	73fb      	strb	r3, [r7, #15]

	_ARGB4444_dma2dwait();
 8002f18:	f7ff fe7e 	bl	8002c18 <_ARGB4444_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <_ARGB4444_fillbufblend+0x80>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color, alpha);
 8002f22:	8839      	ldrh	r1, [r7, #0]
 8002f24:	887a      	ldrh	r2, [r7, #2]
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	9303      	str	r3, [sp, #12]
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	9302      	str	r3, [sp, #8]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	460b      	mov	r3, r1
 8002f38:	2104      	movs	r1, #4
 8002f3a:	4804      	ldr	r0, [pc, #16]	; (8002f4c <_ARGB4444_fillbufblend+0x84>)
 8002f3c:	f005 feda 	bl	8008cf4 <BSP_STM32_DMA2D_FillBuffBlend>
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	24000240 	.word	0x24000240
 8002f4c:	52001000 	.word	0x52001000

08002f50 <_ARGB4444_copybuf>:


static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af04      	add	r7, sp, #16
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	817b      	strh	r3, [r7, #10]
 8002f62:	460b      	mov	r3, r1
 8002f64:	813b      	strh	r3, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <_ARGB4444_copybuf+0x74>)
 8002f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f70:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <_ARGB4444_copybuf+0x74>)
 8002f76:	330a      	adds	r3, #10
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	8939      	ldrh	r1, [r7, #8]
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002f86:	fb00 f202 	mul.w	r2, r0, r2
 8002f8a:	440a      	add	r2, r1
 8002f8c:	0052      	lsls	r2, r2, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]

	_ARGB4444_dma2dwait();
 8002f92:	f7ff fe41 	bl	8002c18 <_ARGB4444_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <_ARGB4444_copybuf+0x74>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8002f9c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002f9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	9303      	str	r3, [sp, #12]
 8002fa4:	8c3b      	ldrh	r3, [r7, #32]
 8002fa6:	9302      	str	r3, [sp, #8]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	897b      	ldrh	r3, [r7, #10]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <_ARGB4444_copybuf+0x78>)
 8002fb6:	f005 ff35 	bl	8008e24 <BSP_STM32_DMA2D_CopyBuf>
}
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	24000240 	.word	0x24000240
 8002fc8:	52001000 	.word	0x52001000

08002fcc <_ARGB4444_copybufblend>:


static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	; 0x30
 8002fd0:	af06      	add	r7, sp, #24
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	4608      	mov	r0, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	817b      	strh	r3, [r7, #10]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	813b      	strh	r3, [r7, #8]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <_ARGB4444_copybufblend+0x78>)
 8002fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fec:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <_ARGB4444_copybufblend+0x78>)
 8002ff2:	330a      	adds	r3, #10
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	8939      	ldrh	r1, [r7, #8]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003002:	fb00 f202 	mul.w	r2, r0, r2
 8003006:	440a      	add	r2, r1
 8003008:	0052      	lsls	r2, r2, #1
 800300a:	4413      	add	r3, r2
 800300c:	613b      	str	r3, [r7, #16]

	_ARGB4444_dma2dwait();
 800300e:	f7ff fe03 	bl	8002c18 <_ARGB4444_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <_ARGB4444_copybufblend+0x78>)
 8003014:	2201      	movs	r2, #1
 8003016:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8003018:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800301a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800301c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003020:	9304      	str	r3, [sp, #16]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	9303      	str	r3, [sp, #12]
 8003026:	8c3b      	ldrh	r3, [r7, #32]
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	460b      	mov	r3, r1
 8003034:	2104      	movs	r1, #4
 8003036:	4804      	ldr	r0, [pc, #16]	; (8003048 <_ARGB4444_copybufblend+0x7c>)
 8003038:	f005 ffb0 	bl	8008f9c <BSP_STM32_DMA2D_CopyBufBlend>
}
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	24000240 	.word	0x24000240
 8003048:	52001000 	.word	0x52001000

0800304c <_ARGB4444_copybufJPEG>:


static void _ARGB4444_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 800304c:	b5b0      	push	{r4, r5, r7, lr}
 800304e:	b08e      	sub	sp, #56	; 0x38
 8003050:	af06      	add	r7, sp, #24
 8003052:	4603      	mov	r3, r0
 8003054:	460a      	mov	r2, r1
 8003056:	80fb      	strh	r3, [r7, #6]
 8003058:	4613      	mov	r3, r2
 800305a:	80bb      	strh	r3, [r7, #4]
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <_ARGB4444_copybufJPEG+0x12c>)
 800305e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003062:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	4a44      	ldr	r2, [pc, #272]	; (8003178 <_ARGB4444_copybufJPEG+0x12c>)
 8003068:	330a      	adds	r3, #10
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	88f9      	ldrh	r1, [r7, #6]
 8003072:	88ba      	ldrh	r2, [r7, #4]
 8003074:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003078:	fb00 f202 	mul.w	r2, r0, r2
 800307c:	440a      	add	r2, r1
 800307e:	0052      	lsls	r2, r2, #1
 8003080:	4413      	add	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
	uint32_t chroma = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]

	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8003088:	483c      	ldr	r0, [pc, #240]	; (800317c <_ARGB4444_copybufJPEG+0x130>)
 800308a:	f006 ffd7 	bl	800a03c <BSP_STM32_JPEG_GetColorSpace>
 800308e:	4603      	mov	r3, r0
 8003090:	2b10      	cmp	r3, #16
 8003092:	d16a      	bne.n	800316a <_ARGB4444_copybufJPEG+0x11e>

	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8003094:	4839      	ldr	r0, [pc, #228]	; (800317c <_ARGB4444_copybufJPEG+0x130>)
 8003096:	f006 ffa7 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 800309a:	60f8      	str	r0, [r7, #12]
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 800309c:	4837      	ldr	r0, [pc, #220]	; (800317c <_ARGB4444_copybufJPEG+0x130>)
 800309e:	f006 ffa3 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 80030a8:	60bb      	str	r3, [r7, #8]
	uint32_t offsline_src = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]

	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 80030ae:	4833      	ldr	r0, [pc, #204]	; (800317c <_ARGB4444_copybufJPEG+0x130>)
 80030b0:	f006 ffb6 	bl	800a020 <BSP_STM32_JPEG_GetCSS>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d013      	beq.n	80030e2 <_ARGB4444_copybufJPEG+0x96>
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d857      	bhi.n	800316e <_ARGB4444_copybufJPEG+0x122>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01d      	beq.n	80030fe <_ARGB4444_copybufJPEG+0xb2>
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d153      	bne.n	800316e <_ARGB4444_copybufJPEG+0x122>
	case JPEG_420_SUBSAMPLING:
		chroma = DMA2D_CSS_420;
 80030c6:	2302      	movs	r3, #2
 80030c8:	61fb      	str	r3, [r7, #28]
		if (width % 16) offsline_src = 16 - (width % 16);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d022      	beq.n	800311a <_ARGB4444_copybufJPEG+0xce>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	f1c3 0310 	rsb	r3, r3, #16
 80030de:	61bb      	str	r3, [r7, #24]
		break;
 80030e0:	e01b      	b.n	800311a <_ARGB4444_copybufJPEG+0xce>
	case JPEG_422_SUBSAMPLING:
		chroma = DMA2D_CSS_422;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
		if (width % 16) offsline_src = 16 - (width % 16);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d016      	beq.n	800311e <_ARGB4444_copybufJPEG+0xd2>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	f1c3 0310 	rsb	r3, r3, #16
 80030fa:	61bb      	str	r3, [r7, #24]
		break;
 80030fc:	e00f      	b.n	800311e <_ARGB4444_copybufJPEG+0xd2>
	case JPEG_444_SUBSAMPLING:
		chroma = DMA2D_CSS_444;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
		if (width % 8) offsline_src = 8 - (width % 8);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <_ARGB4444_copybufJPEG+0xd6>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	f1c3 0308 	rsb	r3, r3, #8
 8003116:	61bb      	str	r3, [r7, #24]
		break;
 8003118:	e003      	b.n	8003122 <_ARGB4444_copybufJPEG+0xd6>
		break;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <_ARGB4444_copybufJPEG+0xd8>
		break;
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <_ARGB4444_copybufJPEG+0xd8>
		break;
 8003122:	bf00      	nop
	default:
		return;
	}

	// Wait for any previous DMA2D operation to complete
	_ARGB4444_dma2dwait();
 8003124:	f7ff fd78 	bl	8002c18 <_ARGB4444_dma2dwait>

	// Starting DMA2D color space conversion and copy to frame buffer.
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <_ARGB4444_copybufJPEG+0x12c>)
 800312a:	2201      	movs	r2, #1
 800312c:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGBuf, offsline_dest, dest_addr, chroma);
 800312e:	4813      	ldr	r0, [pc, #76]	; (800317c <_ARGB4444_copybufJPEG+0x130>)
 8003130:	f006 ff5a 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 8003134:	4603      	mov	r3, r0
 8003136:	b29c      	uxth	r4, r3
 8003138:	4810      	ldr	r0, [pc, #64]	; (800317c <_ARGB4444_copybufJPEG+0x130>)
 800313a:	f006 ff63 	bl	800a004 <BSP_STM32_JPEG_GetHeight>
 800313e:	4603      	mov	r3, r0
 8003140:	b29d      	uxth	r5, r3
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	b29b      	uxth	r3, r3
 8003146:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <_ARGB4444_copybufJPEG+0x12c>)
 8003148:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	b289      	uxth	r1, r1
 800314e:	69f8      	ldr	r0, [r7, #28]
 8003150:	9004      	str	r0, [sp, #16]
 8003152:	6938      	ldr	r0, [r7, #16]
 8003154:	9003      	str	r0, [sp, #12]
 8003156:	9102      	str	r1, [sp, #8]
 8003158:	9201      	str	r2, [sp, #4]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	462b      	mov	r3, r5
 800315e:	4622      	mov	r2, r4
 8003160:	2104      	movs	r1, #4
 8003162:	4807      	ldr	r0, [pc, #28]	; (8003180 <_ARGB4444_copybufJPEG+0x134>)
 8003164:	f005 feba 	bl	8008edc <BSP_STM32_DMA2D_CopyBufJPEG>
 8003168:	e002      	b.n	8003170 <_ARGB4444_copybufJPEG+0x124>
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <_ARGB4444_copybufJPEG+0x124>
		return;
 800316e:	bf00      	nop
}
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bdb0      	pop	{r4, r5, r7, pc}
 8003176:	bf00      	nop
 8003178:	24000240 	.word	0x24000240
 800317c:	52003000 	.word	0x52003000
 8003180:	52001000 	.word	0x52001000

08003184 <_RGB888_color>:



/* RGB888 --------------------------------------------------------------------*/

static uint32_t _RGB888_color(uint32_t color, uint8_t alpha) {
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	return (color & 0x00FFFFFF) | ((uint32_t)alpha << 24);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	4313      	orrs	r3, r2
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <_RGB888_alpha>:


static uint32_t _RGB888_alpha(uint32_t color, uint8_t alpha) {
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	return (color & 0x00FFFFFF) | ((uint32_t)alpha << 24);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	4313      	orrs	r3, r2
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_RGB888_dma2dwait>:


static void _RGB888_dma2dwait(void) {
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 80031d0:	bf00      	nop
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <_RGB888_dma2dwait+0x1c>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d0fb      	beq.n	80031d2 <_RGB888_dma2dwait+0x6>
}
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	24000240 	.word	0x24000240

080031ec <_RGB888_updatepixel>:


static void _RGB888_updatepixel(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	4613      	mov	r3, r2
 80031fc:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 80031fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003202:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003206:	da35      	bge.n	8003274 <_RGB888_updatepixel+0x88>
	if (x < 0) return;
 8003208:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800320c:	2b00      	cmp	r3, #0
 800320e:	db33      	blt.n	8003278 <_RGB888_updatepixel+0x8c>
	if (y >= LCD_HEIGHT) return;
 8003210:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003214:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003218:	da30      	bge.n	800327c <_RGB888_updatepixel+0x90>
	if (y < 0) return;
 800321a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db2e      	blt.n	8003280 <_RGB888_updatepixel+0x94>

	uint32_t pvalue = (uint32_t)&value;
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	617b      	str	r3, [r7, #20]
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8003226:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800322a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800322e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	441a      	add	r2, r3
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	613b      	str	r3, [r7, #16]

	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	617a      	str	r2, [r7, #20]
 800324c:	4619      	mov	r1, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	613a      	str	r2, [r7, #16]
 8003254:	780a      	ldrb	r2, [r1, #0]
 8003256:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	617a      	str	r2, [r7, #20]
 800325e:	4619      	mov	r1, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	613a      	str	r2, [r7, #16]
 8003266:	780a      	ldrb	r2, [r1, #0]
 8003268:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)(addr  ) = *(uint8_t *)(pvalue  );
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	7812      	ldrb	r2, [r2, #0]
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e006      	b.n	8003282 <_RGB888_updatepixel+0x96>
	if (x >= LCD_WIDTH) return;
 8003274:	bf00      	nop
 8003276:	e004      	b.n	8003282 <_RGB888_updatepixel+0x96>
	if (x < 0) return;
 8003278:	bf00      	nop
 800327a:	e002      	b.n	8003282 <_RGB888_updatepixel+0x96>
	if (y >= LCD_HEIGHT) return;
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <_RGB888_updatepixel+0x96>
	if (y < 0) return;
 8003280:	bf00      	nop
}
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_RGB888_updatepixelblend>:


static void _RGB888_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 800328c:	b480      	push	{r7}
 800328e:	b08f      	sub	sp, #60	; 0x3c
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	4613      	mov	r3, r2
 800329c:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 800329e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80032a6:	da67      	bge.n	8003378 <_RGB888_updatepixelblend+0xec>
	if (x < 0) return;
 80032a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	db65      	blt.n	800337c <_RGB888_updatepixelblend+0xf0>
	if (y >= LCD_HEIGHT) return;
 80032b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80032b4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80032b8:	da62      	bge.n	8003380 <_RGB888_updatepixelblend+0xf4>
	if (y < 0) return;
 80032ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db60      	blt.n	8003384 <_RGB888_updatepixelblend+0xf8>

	uint32_t a1 = (value << 0) >> 24;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	637b      	str	r3, [r7, #52]	; 0x34
	if (a1 == 0) return;
 80032c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d05c      	beq.n	8003388 <_RGB888_updatepixelblend+0xfc>

	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 80032ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80032d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80032d6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	441a      	add	r2, r3
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t * addr_r = (uint8_t *)addr;
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t * addr_g = addr_r + 1;
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f4:	3301      	adds	r3, #1
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t * addr_b = addr_g + 1;
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	3301      	adds	r3, #1
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t a1n = 255 - a1;
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003304:	623b      	str	r3, [r7, #32]
	uint32_t r1 = (value & 0x00FF0000) >> 16;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	b2db      	uxtb	r3, r3
 800330c:	61fb      	str	r3, [r7, #28]
	uint32_t g1 = (value & 0x0000FF00) >> 8;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	b2db      	uxtb	r3, r3
 8003314:	61bb      	str	r3, [r7, #24]
	uint32_t b1 = (value & 0x000000FF) >> 0;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	617b      	str	r3, [r7, #20]
	*addr_r = ((a1 * r1) + (a1n * (*addr_r))) >> 8;
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	fb03 f202 	mul.w	r2, r3, r2
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	4619      	mov	r1, r3
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	b2da      	uxtb	r2, r3
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	701a      	strb	r2, [r3, #0]
	*addr_g = ((a1 * g1) + (a1n * (*addr_g))) >> 8;
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	fb03 f202 	mul.w	r2, r3, r2
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	b2da      	uxtb	r2, r3
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	701a      	strb	r2, [r3, #0]
	*addr_b = ((a1 * b1) + (a1n * (*addr_b))) >> 8;
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	fb03 f202 	mul.w	r2, r3, r2
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	b2da      	uxtb	r2, r3
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e008      	b.n	800338a <_RGB888_updatepixelblend+0xfe>
	if (x >= LCD_WIDTH) return;
 8003378:	bf00      	nop
 800337a:	e006      	b.n	800338a <_RGB888_updatepixelblend+0xfe>
	if (x < 0) return;
 800337c:	bf00      	nop
 800337e:	e004      	b.n	800338a <_RGB888_updatepixelblend+0xfe>
	if (y >= LCD_HEIGHT) return;
 8003380:	bf00      	nop
 8003382:	e002      	b.n	800338a <_RGB888_updatepixelblend+0xfe>
	if (y < 0) return;
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <_RGB888_updatepixelblend+0xfe>
	if (a1 == 0) return;
 8003388:	bf00      	nop
}
 800338a:	373c      	adds	r7, #60	; 0x3c
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_RGB888_getpixel>:

static uint32_t _RGB888_getpixel(uint32_t offset,  int16_t x, int16_t y) {
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
 80033a0:	4613      	mov	r3, r2
 80033a2:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 80033a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033a8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80033ac:	db01      	blt.n	80033b2 <_RGB888_getpixel+0x1e>
 80033ae:	2300      	movs	r3, #0
 80033b0:	e038      	b.n	8003424 <_RGB888_getpixel+0x90>
	if (x < 0) return 0x00000000;
 80033b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da01      	bge.n	80033be <_RGB888_getpixel+0x2a>
 80033ba:	2300      	movs	r3, #0
 80033bc:	e032      	b.n	8003424 <_RGB888_getpixel+0x90>
	if (y >= LCD_HEIGHT) return 0x00000000;
 80033be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80033c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80033c6:	db01      	blt.n	80033cc <_RGB888_getpixel+0x38>
 80033c8:	2300      	movs	r3, #0
 80033ca:	e02b      	b.n	8003424 <_RGB888_getpixel+0x90>
	if (y < 0) return 0x00000000;
 80033cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	da01      	bge.n	80033d8 <_RGB888_getpixel+0x44>
 80033d4:	2300      	movs	r3, #0
 80033d6:	e025      	b.n	8003424 <_RGB888_getpixel+0x90>

	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 80033d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80033dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80033e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	441a      	add	r2, r3
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

	if (addr & 1) return (*(uint8_t *)(addr + 1)) | (*(uint16_t *)(addr) << 8);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <_RGB888_getpixel+0x80>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3301      	adds	r3, #1
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	4313      	orrs	r3, r2
 8003412:	e007      	b.n	8003424 <_RGB888_getpixel+0x90>
	return (*(uint16_t *)(addr + 1)) | (*(uint8_t *)(addr) << 16);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3301      	adds	r3, #1
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	4313      	orrs	r3, r2
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <_RGB888_fillbuf>:


static void _RGB888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af04      	add	r7, sp, #16
 8003436:	4604      	mov	r4, r0
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4623      	mov	r3, r4
 8003440:	80fb      	strh	r3, [r7, #6]
 8003442:	4603      	mov	r3, r0
 8003444:	80bb      	strh	r3, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	807b      	strh	r3, [r7, #2]
 800344a:	4613      	mov	r3, r2
 800344c:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <_RGB888_fillbuf+0x78>)
 8003450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003454:	73fb      	strb	r3, [r7, #15]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <_RGB888_fillbuf+0x78>)
 800345a:	330a      	adds	r3, #10
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	88bb      	ldrh	r3, [r7, #4]
 8003466:	f44f 7048 	mov.w	r0, #800	; 0x320
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	441a      	add	r2, r3
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	440b      	add	r3, r1
 8003478:	60bb      	str	r3, [r7, #8]

	_RGB888_dma2dwait();
 800347a:	f7ff fea7 	bl	80031cc <_RGB888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <_RGB888_fillbuf+0x78>)
 8003480:	2201      	movs	r2, #1
 8003482:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color);
 8003484:	8839      	ldrh	r1, [r7, #0]
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	9302      	str	r3, [sp, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	8c3b      	ldrh	r3, [r7, #32]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	460b      	mov	r3, r1
 8003496:	2101      	movs	r1, #1
 8003498:	4804      	ldr	r0, [pc, #16]	; (80034ac <_RGB888_fillbuf+0x7c>)
 800349a:	f005 fbe1 	bl	8008c60 <BSP_STM32_DMA2D_FillBuff>
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	24000240 	.word	0x24000240
 80034ac:	52001000 	.word	0x52001000

080034b0 <_RGB888_fillbufblend>:


static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b08b      	sub	sp, #44	; 0x2c
 80034b4:	af04      	add	r7, sp, #16
 80034b6:	4604      	mov	r4, r0
 80034b8:	4608      	mov	r0, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	461a      	mov	r2, r3
 80034be:	4623      	mov	r3, r4
 80034c0:	80fb      	strh	r3, [r7, #6]
 80034c2:	4603      	mov	r3, r0
 80034c4:	80bb      	strh	r3, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	807b      	strh	r3, [r7, #2]
 80034ca:	4613      	mov	r3, r2
 80034cc:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <_RGB888_fillbufblend+0x80>)
 80034d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034d4:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <_RGB888_fillbufblend+0x80>)
 80034da:	330a      	adds	r3, #10
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	88bb      	ldrh	r3, [r7, #4]
 80034e6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80034ea:	fb00 f303 	mul.w	r3, r0, r3
 80034ee:	441a      	add	r2, r3
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	613b      	str	r3, [r7, #16]
	uint8_t alpha  = color >> 24;
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	0e1b      	lsrs	r3, r3, #24
 80034fe:	73fb      	strb	r3, [r7, #15]

	_RGB888_dma2dwait();
 8003500:	f7ff fe64 	bl	80031cc <_RGB888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <_RGB888_fillbufblend+0x80>)
 8003506:	2201      	movs	r2, #1
 8003508:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color, alpha);
 800350a:	8839      	ldrh	r1, [r7, #0]
 800350c:	887a      	ldrh	r2, [r7, #2]
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	9303      	str	r3, [sp, #12]
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	9302      	str	r3, [sp, #8]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	460b      	mov	r3, r1
 8003520:	2101      	movs	r1, #1
 8003522:	4804      	ldr	r0, [pc, #16]	; (8003534 <_RGB888_fillbufblend+0x84>)
 8003524:	f005 fbe6 	bl	8008cf4 <BSP_STM32_DMA2D_FillBuffBlend>
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	24000240 	.word	0x24000240
 8003534:	52001000 	.word	0x52001000

08003538 <_RGB888_copybuf>:


static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af04      	add	r7, sp, #16
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4603      	mov	r3, r0
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	460b      	mov	r3, r1
 800354c:	813b      	strh	r3, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <_RGB888_copybuf+0x78>)
 8003554:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003558:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <_RGB888_copybuf+0x78>)
 800355e:	330a      	adds	r3, #10
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	893a      	ldrh	r2, [r7, #8]
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800356e:	fb00 f303 	mul.w	r3, r0, r3
 8003572:	441a      	add	r2, r3
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	440b      	add	r3, r1
 800357c:	613b      	str	r3, [r7, #16]

	_RGB888_dma2dwait();
 800357e:	f7ff fe25 	bl	80031cc <_RGB888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <_RGB888_copybuf+0x78>)
 8003584:	2201      	movs	r2, #1
 8003586:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8003588:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800358a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	9303      	str	r3, [sp, #12]
 8003590:	8c3b      	ldrh	r3, [r7, #32]
 8003592:	9302      	str	r3, [sp, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	897b      	ldrh	r3, [r7, #10]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	460b      	mov	r3, r1
 800359e:	2101      	movs	r1, #1
 80035a0:	4804      	ldr	r0, [pc, #16]	; (80035b4 <_RGB888_copybuf+0x7c>)
 80035a2:	f005 fc3f 	bl	8008e24 <BSP_STM32_DMA2D_CopyBuf>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	24000240 	.word	0x24000240
 80035b4:	52001000 	.word	0x52001000

080035b8 <_RGB888_copybufblend>:


static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af06      	add	r7, sp, #24
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	460b      	mov	r3, r1
 80035cc:	813b      	strh	r3, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <_RGB888_copybufblend+0x7c>)
 80035d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035d8:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <_RGB888_copybufblend+0x7c>)
 80035de:	330a      	adds	r3, #10
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	893a      	ldrh	r2, [r7, #8]
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	f44f 7048 	mov.w	r0, #800	; 0x320
 80035ee:	fb00 f303 	mul.w	r3, r0, r3
 80035f2:	441a      	add	r2, r3
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	440b      	add	r3, r1
 80035fc:	613b      	str	r3, [r7, #16]

	_RGB888_dma2dwait();
 80035fe:	f7ff fde5 	bl	80031cc <_RGB888_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <_RGB888_copybufblend+0x7c>)
 8003604:	2201      	movs	r2, #1
 8003606:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8003608:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800360a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800360c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	9303      	str	r3, [sp, #12]
 8003616:	8c3b      	ldrh	r3, [r7, #32]
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	897b      	ldrh	r3, [r7, #10]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	460b      	mov	r3, r1
 8003624:	2101      	movs	r1, #1
 8003626:	4804      	ldr	r0, [pc, #16]	; (8003638 <_RGB888_copybufblend+0x80>)
 8003628:	f005 fcb8 	bl	8008f9c <BSP_STM32_DMA2D_CopyBufBlend>
}
 800362c:	bf00      	nop
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	24000240 	.word	0x24000240
 8003638:	52001000 	.word	0x52001000

0800363c <_RGB888_copybufJPEG>:


static void _RGB888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	b08e      	sub	sp, #56	; 0x38
 8003640:	af06      	add	r7, sp, #24
 8003642:	4603      	mov	r3, r0
 8003644:	460a      	mov	r2, r1
 8003646:	80fb      	strh	r3, [r7, #6]
 8003648:	4613      	mov	r3, r2
 800364a:	80bb      	strh	r3, [r7, #4]
	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <_RGB888_copybufJPEG+0x130>)
 800364e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003652:	75fb      	strb	r3, [r7, #23]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	4a45      	ldr	r2, [pc, #276]	; (800376c <_RGB888_copybufJPEG+0x130>)
 8003658:	330a      	adds	r3, #10
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	88bb      	ldrh	r3, [r7, #4]
 8003664:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003668:	fb00 f303 	mul.w	r3, r0, r3
 800366c:	441a      	add	r2, r3
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	440b      	add	r3, r1
 8003676:	613b      	str	r3, [r7, #16]
	uint32_t chroma = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]

	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 800367c:	483c      	ldr	r0, [pc, #240]	; (8003770 <_RGB888_copybufJPEG+0x134>)
 800367e:	f006 fcdd 	bl	800a03c <BSP_STM32_JPEG_GetColorSpace>
 8003682:	4603      	mov	r3, r0
 8003684:	2b10      	cmp	r3, #16
 8003686:	d16a      	bne.n	800375e <_RGB888_copybufJPEG+0x122>

	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8003688:	4839      	ldr	r0, [pc, #228]	; (8003770 <_RGB888_copybufJPEG+0x134>)
 800368a:	f006 fcad 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 800368e:	60f8      	str	r0, [r7, #12]
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8003690:	4837      	ldr	r0, [pc, #220]	; (8003770 <_RGB888_copybufJPEG+0x134>)
 8003692:	f006 fca9 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 8003696:	4603      	mov	r3, r0
 8003698:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 800369c:	60bb      	str	r3, [r7, #8]
	uint32_t offsline_src = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]

	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 80036a2:	4833      	ldr	r0, [pc, #204]	; (8003770 <_RGB888_copybufJPEG+0x134>)
 80036a4:	f006 fcbc 	bl	800a020 <BSP_STM32_JPEG_GetCSS>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d013      	beq.n	80036d6 <_RGB888_copybufJPEG+0x9a>
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d857      	bhi.n	8003762 <_RGB888_copybufJPEG+0x126>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01d      	beq.n	80036f2 <_RGB888_copybufJPEG+0xb6>
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d153      	bne.n	8003762 <_RGB888_copybufJPEG+0x126>
	case JPEG_420_SUBSAMPLING:
		chroma = DMA2D_CSS_420;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61fb      	str	r3, [r7, #28]
		if (width % 16) offsline_src = 16 - (width % 16);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d022      	beq.n	800370e <_RGB888_copybufJPEG+0xd2>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	f1c3 0310 	rsb	r3, r3, #16
 80036d2:	61bb      	str	r3, [r7, #24]
		break;
 80036d4:	e01b      	b.n	800370e <_RGB888_copybufJPEG+0xd2>
	case JPEG_422_SUBSAMPLING:
		chroma = DMA2D_CSS_422;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
		if (width % 16) offsline_src = 16 - (width % 16);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d016      	beq.n	8003712 <_RGB888_copybufJPEG+0xd6>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	f1c3 0310 	rsb	r3, r3, #16
 80036ee:	61bb      	str	r3, [r7, #24]
		break;
 80036f0:	e00f      	b.n	8003712 <_RGB888_copybufJPEG+0xd6>
	case JPEG_444_SUBSAMPLING:
		chroma = DMA2D_CSS_444;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
		if (width % 8) offsline_src = 8 - (width % 8);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <_RGB888_copybufJPEG+0xda>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	f1c3 0308 	rsb	r3, r3, #8
 800370a:	61bb      	str	r3, [r7, #24]
		break;
 800370c:	e003      	b.n	8003716 <_RGB888_copybufJPEG+0xda>
		break;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <_RGB888_copybufJPEG+0xdc>
		break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <_RGB888_copybufJPEG+0xdc>
		break;
 8003716:	bf00      	nop
	default:
		return;
	}

	// Wait for any previous DMA2D operation to complete
	_ARGB8888_dma2dwait();
 8003718:	f7fe fcec 	bl	80020f4 <_ARGB8888_dma2dwait>

	// Starting DMA2D color space conversion and copy to frame buffer.
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <_RGB888_copybufJPEG+0x130>)
 800371e:	2201      	movs	r2, #1
 8003720:	609a      	str	r2, [r3, #8]

	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGBuf, offsline_dest, dest_addr, chroma);
 8003722:	4813      	ldr	r0, [pc, #76]	; (8003770 <_RGB888_copybufJPEG+0x134>)
 8003724:	f006 fc60 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 8003728:	4603      	mov	r3, r0
 800372a:	b29c      	uxth	r4, r3
 800372c:	4810      	ldr	r0, [pc, #64]	; (8003770 <_RGB888_copybufJPEG+0x134>)
 800372e:	f006 fc69 	bl	800a004 <BSP_STM32_JPEG_GetHeight>
 8003732:	4603      	mov	r3, r0
 8003734:	b29d      	uxth	r5, r3
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	b29b      	uxth	r3, r3
 800373a:	4a0c      	ldr	r2, [pc, #48]	; (800376c <_RGB888_copybufJPEG+0x130>)
 800373c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	b289      	uxth	r1, r1
 8003742:	69f8      	ldr	r0, [r7, #28]
 8003744:	9004      	str	r0, [sp, #16]
 8003746:	6938      	ldr	r0, [r7, #16]
 8003748:	9003      	str	r0, [sp, #12]
 800374a:	9102      	str	r1, [sp, #8]
 800374c:	9201      	str	r2, [sp, #4]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	462b      	mov	r3, r5
 8003752:	4622      	mov	r2, r4
 8003754:	2101      	movs	r1, #1
 8003756:	4807      	ldr	r0, [pc, #28]	; (8003774 <_RGB888_copybufJPEG+0x138>)
 8003758:	f005 fbc0 	bl	8008edc <BSP_STM32_DMA2D_CopyBufJPEG>
 800375c:	e002      	b.n	8003764 <_RGB888_copybufJPEG+0x128>
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 800375e:	bf00      	nop
 8003760:	e000      	b.n	8003764 <_RGB888_copybufJPEG+0x128>
		return;
 8003762:	bf00      	nop
}
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bdb0      	pop	{r4, r5, r7, pc}
 800376a:	bf00      	nop
 800376c:	24000240 	.word	0x24000240
 8003770:	52003000 	.word	0x52003000
 8003774:	52001000 	.word	0x52001000

08003778 <_AL88_color>:


/* AL88 ----------------------------------------------------------------------*/

static uint32_t _AL88_color(uint32_t color, uint8_t alpha) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	uint32_t match_c = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
	uint32_t min_dist = 0xffffffff;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
 800378c:	613b      	str	r3, [r7, #16]
	uint32_t dist;

	for (uint16_t m=0; m<256; m++) {
 800378e:	2300      	movs	r3, #0
 8003790:	81fb      	strh	r3, [r7, #14]
 8003792:	e013      	b.n	80037bc <_AL88_color+0x44>
		dist = _color_dist(color, C_LUT_COLOR[m]);
 8003794:	89fb      	ldrh	r3, [r7, #14]
 8003796:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <_AL88_color+0x68>)
 8003798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe fc2b 	bl	8001ffa <_color_dist>
 80037a4:	60b8      	str	r0, [r7, #8]
		if (dist < min_dist) {
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d203      	bcs.n	80037b6 <_AL88_color+0x3e>
			min_dist = dist;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	613b      	str	r3, [r7, #16]
			match_c = m;
 80037b2:	89fb      	ldrh	r3, [r7, #14]
 80037b4:	617b      	str	r3, [r7, #20]
	for (uint16_t m=0; m<256; m++) {
 80037b6:	89fb      	ldrh	r3, [r7, #14]
 80037b8:	3301      	adds	r3, #1
 80037ba:	81fb      	strh	r3, [r7, #14]
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	2bff      	cmp	r3, #255	; 0xff
 80037c0:	d9e8      	bls.n	8003794 <_AL88_color+0x1c>
		}
	}

	return (match_c) | ((uint32_t)alpha << 8) | (match_c << 16) | ((uint32_t)alpha << 24);
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	021a      	lsls	r2, r3, #8
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	431a      	orrs	r2, r3
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	061b      	lsls	r3, r3, #24
 80037d4:	4313      	orrs	r3, r2
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	0801ba90 	.word	0x0801ba90

080037e4 <_AL88_alpha>:


static uint32_t _AL88_alpha(uint32_t color, uint8_t alpha) {
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	return (color & 0x00FF00FF) | ((uint32_t)alpha << 8) | ((uint32_t)alpha << 24);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	431a      	orrs	r2, r3
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	4313      	orrs	r3, r2
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <_AL88_dma2dwait>:


static void _AL88_dma2dwait(void) {
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 8003814:	bf00      	nop
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <_AL88_dma2dwait+0x1c>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d0fb      	beq.n	8003816 <_AL88_dma2dwait+0x6>
}
 800381e:	bf00      	nop
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	24000240 	.word	0x24000240

08003830 <_AL88_updatepixel>:


static void _AL88_updatepixel(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	817b      	strh	r3, [r7, #10]
 800383e:	4613      	mov	r3, r2
 8003840:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8003842:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003846:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800384a:	da1e      	bge.n	800388a <_AL88_updatepixel+0x5a>
	if (x < 0) return;
 800384c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003850:	2b00      	cmp	r3, #0
 8003852:	db1c      	blt.n	800388e <_AL88_updatepixel+0x5e>
	if (y >= LCD_HEIGHT) return;
 8003854:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003858:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800385c:	da19      	bge.n	8003892 <_AL88_updatepixel+0x62>
	if (y < 0) return;
 800385e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db17      	blt.n	8003896 <_AL88_updatepixel+0x66>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8003866:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800386a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800386e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	005a      	lsls	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
	*addr = (uint16_t)value;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	b29a      	uxth	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e006      	b.n	8003898 <_AL88_updatepixel+0x68>
	if (x >= LCD_WIDTH) return;
 800388a:	bf00      	nop
 800388c:	e004      	b.n	8003898 <_AL88_updatepixel+0x68>
	if (x < 0) return;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <_AL88_updatepixel+0x68>
	if (y >= LCD_HEIGHT) return;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <_AL88_updatepixel+0x68>
	if (y < 0) return;
 8003896:	bf00      	nop
}
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <_AL88_updatepixelblend>:


static void _AL88_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 80038a2:	b480      	push	{r7}
 80038a4:	b087      	sub	sp, #28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	817b      	strh	r3, [r7, #10]
 80038b0:	4613      	mov	r3, r2
 80038b2:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 80038b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038b8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80038bc:	da23      	bge.n	8003906 <_AL88_updatepixelblend+0x64>
	if (x < 0) return;
 80038be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	db21      	blt.n	800390a <_AL88_updatepixelblend+0x68>
	if (y >= LCD_HEIGHT) return;
 80038c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80038ca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80038ce:	da1e      	bge.n	800390e <_AL88_updatepixelblend+0x6c>
	if (y < 0) return;
 80038d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db1c      	blt.n	8003912 <_AL88_updatepixelblend+0x70>

	if (!(value & 0xFF00)) return;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d019      	beq.n	8003916 <_AL88_updatepixelblend+0x74>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80038e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80038e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80038ea:	f44f 7148 	mov.w	r1, #800	; 0x320
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	005a      	lsls	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
	*addr = (uint16_t)value;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	e008      	b.n	8003918 <_AL88_updatepixelblend+0x76>
	if (x >= LCD_WIDTH) return;
 8003906:	bf00      	nop
 8003908:	e006      	b.n	8003918 <_AL88_updatepixelblend+0x76>
	if (x < 0) return;
 800390a:	bf00      	nop
 800390c:	e004      	b.n	8003918 <_AL88_updatepixelblend+0x76>
	if (y >= LCD_HEIGHT) return;
 800390e:	bf00      	nop
 8003910:	e002      	b.n	8003918 <_AL88_updatepixelblend+0x76>
	if (y < 0) return;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <_AL88_updatepixelblend+0x76>
	if (!(value & 0xFF00)) return;
 8003916:	bf00      	nop
}
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <_AL88_getpixel>:


static uint32_t _AL88_getpixel(uint32_t offset,  int16_t x, int16_t y) {
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	807b      	strh	r3, [r7, #2]
 800392e:	4613      	mov	r3, r2
 8003930:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 8003932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003936:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800393a:	db01      	blt.n	8003940 <_AL88_getpixel+0x1e>
 800393c:	2300      	movs	r3, #0
 800393e:	e021      	b.n	8003984 <_AL88_getpixel+0x62>
	if (x < 0) return 0x00000000;
 8003940:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003944:	2b00      	cmp	r3, #0
 8003946:	da01      	bge.n	800394c <_AL88_getpixel+0x2a>
 8003948:	2300      	movs	r3, #0
 800394a:	e01b      	b.n	8003984 <_AL88_getpixel+0x62>
	if (y >= LCD_HEIGHT) return 0x00000000;
 800394c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003950:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003954:	db01      	blt.n	800395a <_AL88_getpixel+0x38>
 8003956:	2300      	movs	r3, #0
 8003958:	e014      	b.n	8003984 <_AL88_getpixel+0x62>
	if (y < 0) return 0x00000000;
 800395a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800395e:	2b00      	cmp	r3, #0
 8003960:	da01      	bge.n	8003966 <_AL88_getpixel+0x44>
 8003962:	2300      	movs	r3, #0
 8003964:	e00e      	b.n	8003984 <_AL88_getpixel+0x62>

	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8003966:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800396a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800396e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	005a      	lsls	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
	return *addr;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	881b      	ldrh	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <_AL88_fillbuf>:


static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af04      	add	r7, sp, #16
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	461a      	mov	r2, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	80fb      	strh	r3, [r7, #6]
 80039a2:	4603      	mov	r3, r0
 80039a4:	80bb      	strh	r3, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	807b      	strh	r3, [r7, #2]
 80039aa:	4613      	mov	r3, r2
 80039ac:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed

	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <_AL88_fillbuf+0x74>)
 80039b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039b4:	73fb      	strb	r3, [r7, #15]
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <_AL88_fillbuf+0x74>)
 80039ba:	330a      	adds	r3, #10
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	88f9      	ldrh	r1, [r7, #6]
 80039c4:	88ba      	ldrh	r2, [r7, #4]
 80039c6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80039ca:	fb00 f202 	mul.w	r2, r0, r2
 80039ce:	440a      	add	r2, r1
 80039d0:	0052      	lsls	r2, r2, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	60bb      	str	r3, [r7, #8]

	_AL88_dma2dwait();
 80039d6:	f7ff ff1b 	bl	8003810 <_AL88_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <_AL88_fillbuf+0x74>)
 80039dc:	2201      	movs	r2, #1
 80039de:	609a      	str	r2, [r3, #8]

	// RGB5656 mode used for 16 bits transfer (officially AL mode is not supported).
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 80039e0:	8839      	ldrh	r1, [r7, #0]
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	9302      	str	r3, [sp, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	8c3b      	ldrh	r3, [r7, #32]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	460b      	mov	r3, r1
 80039f2:	2102      	movs	r1, #2
 80039f4:	4804      	ldr	r0, [pc, #16]	; (8003a08 <_AL88_fillbuf+0x78>)
 80039f6:	f005 f933 	bl	8008c60 <BSP_STM32_DMA2D_FillBuff>

}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	24000240 	.word	0x24000240
 8003a08:	52001000 	.word	0x52001000

08003a0c <_AL88_fillbufblend>:


static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	4604      	mov	r4, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4623      	mov	r3, r4
 8003a1c:	80fb      	strh	r3, [r7, #6]
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80bb      	strh	r3, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	807b      	strh	r3, [r7, #2]
 8003a26:	4613      	mov	r3, r2
 8003a28:	803b      	strh	r3, [r7, #0]
	// Function not available in color modes with CLUT tables
	_AL88_fillbuf(x, y, width, height, offsetline, color);
 8003a2a:	883c      	ldrh	r4, [r7, #0]
 8003a2c:	887a      	ldrh	r2, [r7, #2]
 8003a2e:	88b9      	ldrh	r1, [r7, #4]
 8003a30:	88f8      	ldrh	r0, [r7, #6]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	8b3b      	ldrh	r3, [r7, #24]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	f7ff ffa8 	bl	8003990 <_AL88_fillbuf>
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd90      	pop	{r4, r7, pc}

08003a48 <_AL88_copybuf>:


static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af04      	add	r7, sp, #16
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed

	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <_AL88_copybuf+0x74>)
 8003a64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a68:	75fb      	strb	r3, [r7, #23]
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.Layers[0].Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8003a6a:	893a      	ldrh	r2, [r7, #8]
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	005a      	lsls	r2, r3, #1
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	490f      	ldr	r1, [pc, #60]	; (8003abc <_AL88_copybuf+0x74>)
 8003a7e:	330a      	adds	r3, #10
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]

	_AL88_dma2dwait();
 8003a8a:	f7ff fec1 	bl	8003810 <_AL88_dma2dwait>

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <_AL88_copybuf+0x74>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	609a      	str	r2, [r3, #8]

	// RGB5656 mode used for 16 bits transfer (officially AL mode is not supported).
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003a98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a9a:	9303      	str	r3, [sp, #12]
 8003a9c:	8c3b      	ldrh	r3, [r7, #32]
 8003a9e:	9302      	str	r3, [sp, #8]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	897b      	ldrh	r3, [r7, #10]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <_AL88_copybuf+0x78>)
 8003aae:	f005 f9b9 	bl	8008e24 <BSP_STM32_DMA2D_CopyBuf>
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	24000240 	.word	0x24000240
 8003ac0:	52001000 	.word	0x52001000

08003ac4 <_AL88_copybufblend>:


static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af04      	add	r7, sp, #16
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	4608      	mov	r0, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	817b      	strh	r3, [r7, #10]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	813b      	strh	r3, [r7, #8]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	// Effective and fast blending is not possible with CLUT mode
	_AL88_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 8003ade:	88f8      	ldrh	r0, [r7, #6]
 8003ae0:	893a      	ldrh	r2, [r7, #8]
 8003ae2:	8979      	ldrh	r1, [r7, #10]
 8003ae4:	8c3b      	ldrh	r3, [r7, #32]
 8003ae6:	9302      	str	r3, [sp, #8]
 8003ae8:	8bbb      	ldrh	r3, [r7, #28]
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	8b3b      	ldrh	r3, [r7, #24]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	4603      	mov	r3, r0
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff ffa8 	bl	8003a48 <_AL88_copybuf>
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_AL88_copybufJPEG>:


static void _AL88_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8003b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	4603      	mov	r3, r0
 8003b08:	460a      	mov	r2, r1
 8003b0a:	80fb      	strh	r3, [r7, #6]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80bb      	strh	r3, [r7, #4]
	// Function not available in AL color mode. Instead area is filled with black color.
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8003b10:	4811      	ldr	r0, [pc, #68]	; (8003b58 <_AL88_copybufJPEG+0x58>)
 8003b12:	f006 fa69 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 8003b16:	60f8      	str	r0, [r7, #12]
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 8003b18:	480f      	ldr	r0, [pc, #60]	; (8003b58 <_AL88_copybufJPEG+0x58>)
 8003b1a:	f006 fa73 	bl	800a004 <BSP_STM32_JPEG_GetHeight>
 8003b1e:	60b8      	str	r0, [r7, #8]

	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	b29d      	uxth	r5, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	b29e      	uxth	r6, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8003b30:	b29c      	uxth	r4, r3
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <_AL88_copybufJPEG+0x5c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	21ff      	movs	r1, #255	; 0xff
 8003b38:	2000      	movs	r0, #0
 8003b3a:	4798      	blx	r3
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	88b9      	ldrh	r1, [r7, #4]
 8003b40:	88f8      	ldrh	r0, [r7, #6]
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	9400      	str	r4, [sp, #0]
 8003b46:	4633      	mov	r3, r6
 8003b48:	462a      	mov	r2, r5
 8003b4a:	f7ff ff21 	bl	8003990 <_AL88_fillbuf>
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	52003000 	.word	0x52003000
 8003b5c:	240002a0 	.word	0x240002a0

08003b60 <_L8_color>:

/* L8 ------------------------------------------------------------------------*/

static uint32_t _L8_color(uint32_t color, uint8_t alpha) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	// Alpha is ignored in this color mode

	uint32_t match_c = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
	uint32_t min_dist = 0xffffffff;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
 8003b74:	613b      	str	r3, [r7, #16]
	uint32_t dist;

	for (uint16_t m=0; m<256; m++) {
 8003b76:	2300      	movs	r3, #0
 8003b78:	81fb      	strh	r3, [r7, #14]
 8003b7a:	e013      	b.n	8003ba4 <_L8_color+0x44>
		dist = _color_dist(color, C_LUT_COLOR[m]);
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <_L8_color+0x68>)
 8003b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fe fa37 	bl	8001ffa <_color_dist>
 8003b8c:	60b8      	str	r0, [r7, #8]
		if (dist < min_dist) {
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d203      	bcs.n	8003b9e <_L8_color+0x3e>
			min_dist = dist;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	613b      	str	r3, [r7, #16]
			match_c = m;
 8003b9a:	89fb      	ldrh	r3, [r7, #14]
 8003b9c:	617b      	str	r3, [r7, #20]
	for (uint16_t m=0; m<256; m++) {
 8003b9e:	89fb      	ldrh	r3, [r7, #14]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	81fb      	strh	r3, [r7, #14]
 8003ba4:	89fb      	ldrh	r3, [r7, #14]
 8003ba6:	2bff      	cmp	r3, #255	; 0xff
 8003ba8:	d9e8      	bls.n	8003b7c <_L8_color+0x1c>
		}
	}

	return (match_c) | (match_c << 8) | (match_c << 16) | (match_c << 24);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	021a      	lsls	r2, r3, #8
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	061b      	lsls	r3, r3, #24
 8003bbc:	4313      	orrs	r3, r2
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	0801ba90 	.word	0x0801ba90

08003bcc <_L8_alpha>:


static uint32_t _L8_alpha(uint32_t color, uint8_t alpha) {
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
	// Status: Function Completed
	// Alpha is ignored in this color mode

	return color;
 8003bd8:	687b      	ldr	r3, [r7, #4]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <_L8_dma2dwait>:


static void _L8_dma2dwait(void) {
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	// Status: Function Completed
	while (BSP_hlcd.priv_.dma2d_state == LCD_DMA2D_BUSY) {};
 8003bec:	bf00      	nop
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <_L8_dma2dwait+0x1c>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d0fb      	beq.n	8003bee <_L8_dma2dwait+0x6>
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	24000240 	.word	0x24000240

08003c08 <_L8_updatepixel>:


static void _L8_updatepixel(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	817b      	strh	r3, [r7, #10]
 8003c16:	4613      	mov	r3, r2
 8003c18:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8003c1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c1e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003c22:	da1e      	bge.n	8003c62 <_L8_updatepixel+0x5a>
	if (x < 0) return;
 8003c24:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	db1c      	blt.n	8003c66 <_L8_updatepixel+0x5e>
	if (y >= LCD_HEIGHT) return;
 8003c2c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c30:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003c34:	da19      	bge.n	8003c6a <_L8_updatepixel+0x62>
	if (y < 0) return;
 8003c36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	db17      	blt.n	8003c6e <_L8_updatepixel+0x66>

	uint8_t *addr = (uint8_t *)offset + ((x + y * LCD_WIDTH));
 8003c3e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c46:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	461a      	mov	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4413      	add	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
	*addr = (uint8_t)value;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e006      	b.n	8003c70 <_L8_updatepixel+0x68>
	if (x >= LCD_WIDTH) return;
 8003c62:	bf00      	nop
 8003c64:	e004      	b.n	8003c70 <_L8_updatepixel+0x68>
	if (x < 0) return;
 8003c66:	bf00      	nop
 8003c68:	e002      	b.n	8003c70 <_L8_updatepixel+0x68>
	if (y >= LCD_HEIGHT) return;
 8003c6a:	bf00      	nop
 8003c6c:	e000      	b.n	8003c70 <_L8_updatepixel+0x68>
	if (y < 0) return;
 8003c6e:	bf00      	nop
}
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <_L8_updatepixelblend>:


static void _L8_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8003c7a:	b480      	push	{r7}
 8003c7c:	b087      	sub	sp, #28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	607b      	str	r3, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	817b      	strh	r3, [r7, #10]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	813b      	strh	r3, [r7, #8]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
 8003c8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c90:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003c94:	da21      	bge.n	8003cda <_L8_updatepixelblend+0x60>
	if (x < 0) return;
 8003c96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db1f      	blt.n	8003cde <_L8_updatepixelblend+0x64>
	if (y >= LCD_HEIGHT) return;
 8003c9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003ca2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003ca6:	da1c      	bge.n	8003ce2 <_L8_updatepixelblend+0x68>
	if (y < 0) return;
 8003ca8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	db1a      	blt.n	8003ce6 <_L8_updatepixelblend+0x6c>

	if (value == 0) return;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d019      	beq.n	8003cea <_L8_updatepixelblend+0x70>

	uint8_t *addr = (uint8_t *)offset + (x + y * LCD_WIDTH);
 8003cb6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003cba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003cbe:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
	*addr = (uint8_t)value;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	e008      	b.n	8003cec <_L8_updatepixelblend+0x72>
	if (x >= LCD_WIDTH) return;
 8003cda:	bf00      	nop
 8003cdc:	e006      	b.n	8003cec <_L8_updatepixelblend+0x72>
	if (x < 0) return;
 8003cde:	bf00      	nop
 8003ce0:	e004      	b.n	8003cec <_L8_updatepixelblend+0x72>
	if (y >= LCD_HEIGHT) return;
 8003ce2:	bf00      	nop
 8003ce4:	e002      	b.n	8003cec <_L8_updatepixelblend+0x72>
	if (y < 0) return;
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <_L8_updatepixelblend+0x72>
	if (value == 0) return;
 8003cea:	bf00      	nop
}
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <_L8_getpixel>:


static uint32_t _L8_getpixel(uint32_t offset,  int16_t x, int16_t y) {
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	807b      	strh	r3, [r7, #2]
 8003d02:	4613      	mov	r3, r2
 8003d04:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return 0x00000000;
 8003d06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d0a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003d0e:	db01      	blt.n	8003d14 <_L8_getpixel+0x1e>
 8003d10:	2300      	movs	r3, #0
 8003d12:	e021      	b.n	8003d58 <_L8_getpixel+0x62>
	if (x < 0) return 0x00000000;
 8003d14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	da01      	bge.n	8003d20 <_L8_getpixel+0x2a>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e01b      	b.n	8003d58 <_L8_getpixel+0x62>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8003d20:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d24:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003d28:	db01      	blt.n	8003d2e <_L8_getpixel+0x38>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e014      	b.n	8003d58 <_L8_getpixel+0x62>
	if (y < 0) return 0x00000000;
 8003d2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da01      	bge.n	8003d3a <_L8_getpixel+0x44>
 8003d36:	2300      	movs	r3, #0
 8003d38:	e00e      	b.n	8003d58 <_L8_getpixel+0x62>

	uint8_t *addr = (uint8_t *)offset + ((x + y * LCD_WIDTH));
 8003d3a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003d3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d42:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
	return *addr;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	781b      	ldrb	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <_L8_fillbuf>:


static void _L8_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b091      	sub	sp, #68	; 0x44
 8003d68:	af04      	add	r7, sp, #16
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	80fb      	strh	r3, [r7, #6]
 8003d76:	4603      	mov	r3, r0
 8003d78:	80bb      	strh	r3, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	807b      	strh	r3, [r7, #2]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	803b      	strh	r3, [r7, #0]
	// Status: Function Completed

	// Because DMA2D cannot handle 8bit formats, below workaround was required

	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8003d82:	4b57      	ldr	r3, [pc, #348]	; (8003ee0 <_L8_fillbuf+0x17c>)
 8003d84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d88:	77fb      	strb	r3, [r7, #31]

	// Finding x0 and x1 so it will be within filled area and are divided by 4 (required by DMA2D in 32bit mode)
	uint16_t x0 = x & 0xFFFC;
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	f023 0303 	bic.w	r3, r3, #3
 8003d90:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (x0 < x) x0 += 4;
 8003d92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d202      	bcs.n	8003da0 <_L8_fillbuf+0x3c>
 8003d9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t x1 = (x + width) & 0xFFFC;
 8003da0:	88fa      	ldrh	r2, [r7, #6]
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	4413      	add	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f023 0303 	bic.w	r3, r3, #3
 8003dac:	83bb      	strh	r3, [r7, #28]

	uint8_t *color8 = (uint8_t *)&color;
 8003dae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003db2:	61bb      	str	r3, [r7, #24]
	uint8_t *addr;

	// Waiting for completion of previous DMA2D (accessing memory concurrently with DMA2D slows everything down)
	_L8_dma2dwait();
 8003db4:	f7ff ff18 	bl	8003be8 <_L8_dma2dwait>

	//Manual filling areas outside DMA2D range (not aligned to 4 bytes)

	for (uint32_t yy=y; yy<(y+height); yy++) {
 8003db8:	88bb      	ldrh	r3, [r7, #4]
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbc:	e04f      	b.n	8003e5e <_L8_fillbuf+0xfa>
		for (uint32_t xx=x; xx<MIN(x0, x+width); xx++) {
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	e015      	b.n	8003df0 <_L8_fillbuf+0x8c>
			addr = (uint8_t *)(BSP_hlcd.Layers[0].Frames[eframe]) + (xx + yy*LCD_WIDTH);
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003dca:	fb03 f202 	mul.w	r2, r3, r2
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	441a      	add	r2, r3
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	4942      	ldr	r1, [pc, #264]	; (8003ee0 <_L8_fillbuf+0x17c>)
 8003dd6:	330a      	adds	r3, #10
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
			*addr = *color8;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	701a      	strb	r2, [r3, #0]
		for (uint32_t xx=x; xx<MIN(x0, x+width); xx++) {
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	3301      	adds	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
 8003df0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003df2:	88f9      	ldrh	r1, [r7, #6]
 8003df4:	887b      	ldrh	r3, [r7, #2]
 8003df6:	440b      	add	r3, r1
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	dd03      	ble.n	8003e04 <_L8_fillbuf+0xa0>
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	887b      	ldrh	r3, [r7, #2]
 8003e00:	4413      	add	r3, r2
 8003e02:	e000      	b.n	8003e06 <_L8_fillbuf+0xa2>
 8003e04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d8db      	bhi.n	8003dc4 <_L8_fillbuf+0x60>
		}
		if (x1<x0) continue;
 8003e0c:	8bba      	ldrh	r2, [r7, #28]
 8003e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d320      	bcc.n	8003e56 <_L8_fillbuf+0xf2>
		for (uint32_t xx=x1; xx<(x+width); xx++) {
 8003e14:	8bbb      	ldrh	r3, [r7, #28]
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	e015      	b.n	8003e46 <_L8_fillbuf+0xe2>
			addr = (uint8_t *)(BSP_hlcd.Layers[0].Frames[eframe]) + (xx + yy*LCD_WIDTH);
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e20:	fb03 f202 	mul.w	r2, r3, r2
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	441a      	add	r2, r3
 8003e28:	7ffb      	ldrb	r3, [r7, #31]
 8003e2a:	492d      	ldr	r1, [pc, #180]	; (8003ee0 <_L8_fillbuf+0x17c>)
 8003e2c:	330a      	adds	r3, #10
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
			*addr = *color8;
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	701a      	strb	r2, [r3, #0]
		for (uint32_t xx=x1; xx<(x+width); xx++) {
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	3301      	adds	r3, #1
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d3e2      	bcc.n	8003e1a <_L8_fillbuf+0xb6>
 8003e54:	e000      	b.n	8003e58 <_L8_fillbuf+0xf4>
		if (x1<x0) continue;
 8003e56:	bf00      	nop
	for (uint32_t yy=y; yy<(y+height); yy++) {
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	88ba      	ldrh	r2, [r7, #4]
 8003e60:	883b      	ldrh	r3, [r7, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d3a8      	bcc.n	8003dbe <_L8_fillbuf+0x5a>
		}
	}

	// Testing condition to start DMA2D
	if (x1<=x0) return;
 8003e6c:	8bba      	ldrh	r2, [r7, #28]
 8003e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d930      	bls.n	8003ed6 <_L8_fillbuf+0x172>

	// Calculating width for DMA2D
	uint16_t w = x1-x0;
 8003e74:	8bba      	ldrh	r2, [r7, #28]
 8003e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	82fb      	strh	r3, [r7, #22]

	// Calculating offset line for DMA2D
	uint16_t ol = offsetline + width - w;
 8003e7c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003e80:	887b      	ldrh	r3, [r7, #2]
 8003e82:	4413      	add	r3, r2
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	8afb      	ldrh	r3, [r7, #22]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	82bb      	strh	r3, [r7, #20]

	// Setting destination address for DMA2D
	uint32_t dest_addr = BSP_hlcd.Layers[0].Frames[eframe] + (x0 + y * LCD_WIDTH);
 8003e8c:	7ffb      	ldrb	r3, [r7, #31]
 8003e8e:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <_L8_fillbuf+0x17c>)
 8003e90:	330a      	adds	r3, #10
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003e9a:	88ba      	ldrh	r2, [r7, #4]
 8003e9c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003ea0:	fb00 f202 	mul.w	r2, r0, r2
 8003ea4:	440a      	add	r2, r1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]

	// Starting DMA2D
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <_L8_fillbuf+0x17c>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	609a      	str	r2, [r3, #8]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 8003eb0:	8afb      	ldrh	r3, [r7, #22]
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	b299      	uxth	r1, r3
 8003eb6:	8abb      	ldrh	r3, [r7, #20]
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ebe:	8838      	ldrh	r0, [r7, #0]
 8003ec0:	9202      	str	r2, [sp, #8]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	9201      	str	r2, [sp, #4]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	4603      	mov	r3, r0
 8003eca:	460a      	mov	r2, r1
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4805      	ldr	r0, [pc, #20]	; (8003ee4 <_L8_fillbuf+0x180>)
 8003ed0:	f004 fec6 	bl	8008c60 <BSP_STM32_DMA2D_FillBuff>
 8003ed4:	e000      	b.n	8003ed8 <_L8_fillbuf+0x174>
	if (x1<=x0) return;
 8003ed6:	bf00      	nop
}
 8003ed8:	3734      	adds	r7, #52	; 0x34
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	24000240 	.word	0x24000240
 8003ee4:	52001000 	.word	0x52001000

08003ee8 <_L8_fillbufblend>:


static void _L8_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	80fb      	strh	r3, [r7, #6]
 8003efa:	4603      	mov	r3, r0
 8003efc:	80bb      	strh	r3, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	807b      	strh	r3, [r7, #2]
 8003f02:	4613      	mov	r3, r2
 8003f04:	803b      	strh	r3, [r7, #0]
	// Function not available in color modes with CLUT tables
	_L8_fillbuf(x, y, width, height, offsetline, color);
 8003f06:	883c      	ldrh	r4, [r7, #0]
 8003f08:	887a      	ldrh	r2, [r7, #2]
 8003f0a:	88b9      	ldrh	r1, [r7, #4]
 8003f0c:	88f8      	ldrh	r0, [r7, #6]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	8b3b      	ldrh	r3, [r7, #24]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	4623      	mov	r3, r4
 8003f18:	f7ff ff24 	bl	8003d64 <_L8_fillbuf>
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd90      	pop	{r4, r7, pc}

08003f24 <_L8_copybuf>:


static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8003f24:	b5b0      	push	{r4, r5, r7, lr}
 8003f26:	b090      	sub	sp, #64	; 0x40
 8003f28:	af04      	add	r7, sp, #16
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]

	// Because DMA2D cannot handle 8bit formats, below workaround was required

	uint8_t eframe = BSP_hlcd.Layers[0].Frame_EDIT;
 8003f3e:	4b56      	ldr	r3, [pc, #344]	; (8004098 <_L8_copybuf+0x174>)
 8003f40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f44:	767b      	strb	r3, [r7, #25]

	uint8_t *d_addr = (uint8_t *)BSP_hlcd.Layers[0].Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8003f46:	893a      	ldrh	r2, [r7, #8]
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	7e7b      	ldrb	r3, [r7, #25]
 8003f58:	4a4f      	ldr	r2, [pc, #316]	; (8004098 <_L8_copybuf+0x174>)
 8003f5a:	330a      	adds	r3, #10
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	440b      	add	r3, r1
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t *s_addr = (uint8_t *)src_addr;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t size = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24

	_L8_dma2dwait();
 8003f6e:	f7ff fe3b 	bl	8003be8 <_L8_dma2dwait>

	if (((uint32_t)s_addr % 2) || ((uint32_t)d_addr % 2)>0) {
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d125      	bne.n	8003fc8 <_L8_copybuf+0xa4>
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d02b      	beq.n	8003fde <_L8_copybuf+0xba>
		// Cannot use DMA2D
		while (size<(width * height)) {
 8003f86:	e01f      	b.n	8003fc8 <_L8_copybuf+0xa4>
			*d_addr = *s_addr;
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	781a      	ldrb	r2, [r3, #0]
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	701a      	strb	r2, [r3, #0]
			size++;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	3301      	adds	r3, #1
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
			if (!(size % width)) {
 8003f96:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fa0:	fb01 f202 	mul.w	r2, r1, r2
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d108      	bne.n	8003fbc <_L8_copybuf+0x98>
				d_addr+=offsline_dest;
 8003faa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb0:	4413      	add	r3, r2
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
				s_addr+=offsline_src;
 8003fb4:	897b      	ldrh	r3, [r7, #10]
 8003fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb8:	4413      	add	r3, r2
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			d_addr++;
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
			s_addr++;
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
		while (size<(width * height)) {
 8003fc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fcc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d3d5      	bcc.n	8003f88 <_L8_copybuf+0x64>
		}
		return;
 8003fdc:	e058      	b.n	8004090 <_L8_copybuf+0x16c>

	} else {
		// Can use DMA2D
		uint16_t w = width & 0xFFFE;
 8003fde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	82fb      	strh	r3, [r7, #22]
		uint16_t os = offsline_src + width - w;
 8003fe8:	897a      	ldrh	r2, [r7, #10]
 8003fea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fee:	4413      	add	r3, r2
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	8afb      	ldrh	r3, [r7, #22]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	82bb      	strh	r3, [r7, #20]
		uint16_t od = offsline_dest + width - w;
 8003ff8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003ffc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004000:	4413      	add	r3, r2
 8004002:	b29a      	uxth	r2, r3
 8004004:	8afb      	ldrh	r3, [r7, #22]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	827b      	strh	r3, [r7, #18]

		// Fill area not covered by DMA2D (if required)
		if (w < width) {
 800400a:	8afa      	ldrh	r2, [r7, #22]
 800400c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004010:	429a      	cmp	r2, r3
 8004012:	d223      	bcs.n	800405c <_L8_copybuf+0x138>
			uint8_t *dd_addr = d_addr + width - 1;
 8004014:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004018:	3b01      	subs	r3, #1
 800401a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401c:	4413      	add	r3, r2
 800401e:	623b      	str	r3, [r7, #32]
			uint8_t *ss_addr = s_addr + width - 1;
 8004020:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004024:	3b01      	subs	r3, #1
 8004026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004028:	4413      	add	r3, r2
 800402a:	61fb      	str	r3, [r7, #28]
			for (uint16_t yy = 0; yy< height; yy++) {
 800402c:	2300      	movs	r3, #0
 800402e:	837b      	strh	r3, [r7, #26]
 8004030:	e00f      	b.n	8004052 <_L8_copybuf+0x12e>
				*dd_addr = *ss_addr;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	701a      	strb	r2, [r3, #0]
				dd_addr+=offsline_dest;
 800403a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800403e:	6a3a      	ldr	r2, [r7, #32]
 8004040:	4413      	add	r3, r2
 8004042:	623b      	str	r3, [r7, #32]
				ss_addr+=offsline_src;
 8004044:	897b      	ldrh	r3, [r7, #10]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	61fb      	str	r3, [r7, #28]
			for (uint16_t yy = 0; yy< height; yy++) {
 800404c:	8b7b      	ldrh	r3, [r7, #26]
 800404e:	3301      	adds	r3, #1
 8004050:	837b      	strh	r3, [r7, #26]
 8004052:	8b7a      	ldrh	r2, [r7, #26]
 8004054:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004058:	429a      	cmp	r2, r3
 800405a:	d3ea      	bcc.n	8004032 <_L8_copybuf+0x10e>
			}
		}

		// DMA2D Start
		BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_BUSY;
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <_L8_copybuf+0x174>)
 800405e:	2201      	movs	r2, #1
 8004060:	609a      	str	r2, [r3, #8]

		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);
 8004062:	8afb      	ldrh	r3, [r7, #22]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b29c      	uxth	r4, r3
 8004068:	8abb      	ldrh	r3, [r7, #20]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004070:	8a79      	ldrh	r1, [r7, #18]
 8004072:	0849      	lsrs	r1, r1, #1
 8004074:	b289      	uxth	r1, r1
 8004076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004078:	f8b7 5048 	ldrh.w	r5, [r7, #72]	; 0x48
 800407c:	9003      	str	r0, [sp, #12]
 800407e:	9102      	str	r1, [sp, #8]
 8004080:	9201      	str	r2, [sp, #4]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	462b      	mov	r3, r5
 8004086:	4622      	mov	r2, r4
 8004088:	2102      	movs	r1, #2
 800408a:	4804      	ldr	r0, [pc, #16]	; (800409c <_L8_copybuf+0x178>)
 800408c:	f004 feca 	bl	8008e24 <BSP_STM32_DMA2D_CopyBuf>

	}


}
 8004090:	3730      	adds	r7, #48	; 0x30
 8004092:	46bd      	mov	sp, r7
 8004094:	bdb0      	pop	{r4, r5, r7, pc}
 8004096:	bf00      	nop
 8004098:	24000240 	.word	0x24000240
 800409c:	52001000 	.word	0x52001000

080040a0 <_L8_copybufblend>:


static void _L8_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af04      	add	r7, sp, #16
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	817b      	strh	r3, [r7, #10]
 80040b2:	460b      	mov	r3, r1
 80040b4:	813b      	strh	r3, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
	// Status: Function Completed
	// Effective and fast blending is not possible with CLUT mode
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 80040ba:	88f8      	ldrh	r0, [r7, #6]
 80040bc:	893a      	ldrh	r2, [r7, #8]
 80040be:	8979      	ldrh	r1, [r7, #10]
 80040c0:	8c3b      	ldrh	r3, [r7, #32]
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	8bbb      	ldrh	r3, [r7, #28]
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	8b3b      	ldrh	r3, [r7, #24]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	4603      	mov	r3, r0
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff ff28 	bl	8003f24 <_L8_copybuf>
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <_L8_copybufJPEG>:


static void _L8_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80040dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040de:	b087      	sub	sp, #28
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	4603      	mov	r3, r0
 80040e4:	460a      	mov	r2, r1
 80040e6:	80fb      	strh	r3, [r7, #6]
 80040e8:	4613      	mov	r3, r2
 80040ea:	80bb      	strh	r3, [r7, #4]
	// Function not available in AL color mode. Instead area is filled with black color.
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 80040ec:	4811      	ldr	r0, [pc, #68]	; (8004134 <_L8_copybufJPEG+0x58>)
 80040ee:	f005 ff7b 	bl	8009fe8 <BSP_STM32_JPEG_GetWidth>
 80040f2:	60f8      	str	r0, [r7, #12]
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 80040f4:	480f      	ldr	r0, [pc, #60]	; (8004134 <_L8_copybufJPEG+0x58>)
 80040f6:	f005 ff85 	bl	800a004 <BSP_STM32_JPEG_GetHeight>
 80040fa:	60b8      	str	r0, [r7, #8]

	_L8_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	b29d      	uxth	r5, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	b29e      	uxth	r6, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	b29b      	uxth	r3, r3
 8004108:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 800410c:	b29c      	uxth	r4, r3
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <_L8_copybufJPEG+0x5c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	21ff      	movs	r1, #255	; 0xff
 8004114:	2000      	movs	r0, #0
 8004116:	4798      	blx	r3
 8004118:	4603      	mov	r3, r0
 800411a:	88b9      	ldrh	r1, [r7, #4]
 800411c:	88f8      	ldrh	r0, [r7, #6]
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	9400      	str	r4, [sp, #0]
 8004122:	4633      	mov	r3, r6
 8004124:	462a      	mov	r2, r5
 8004126:	f7ff fe1d 	bl	8003d64 <_L8_fillbuf>
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004132:	bf00      	nop
 8004134:	52003000 	.word	0x52003000
 8004138:	240002a0 	.word	0x240002a0

0800413c <_config_triplebuf>:

/******************************************************************************
 * Config functions for various modes
 ******************************************************************************/

static void _config_triplebuf(void) {
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
	// Setting up layer 0 for 3 buffers
	BSP_hlcd.Layers[0].Frame_IDLE = 2;
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <_config_triplebuf+0x7c>)
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	BSP_hlcd.Layers[0].Frame_EDIT = 1;
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <_config_triplebuf+0x7c>)
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	BSP_hlcd.Layers[0].Frame_READY = 255;
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <_config_triplebuf+0x7c>)
 8004152:	22ff      	movs	r2, #255	; 0xff
 8004154:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	BSP_hlcd.Layers[0].Frame_ACTIVE = 0;
 8004158:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <_config_triplebuf+0x7c>)
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	BSP_hlcd.Layers[0].Frame_NOUSE = 255;
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <_config_triplebuf+0x7c>)
 8004162:	22ff      	movs	r2, #255	; 0xff
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	BSP_hlcd.Layers[0].Frame_PREV = 0;
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <_config_triplebuf+0x7c>)
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	BSP_hlcd.Layers[0].Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 1 * BSP_hlcd.config_.framesize;
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <_config_triplebuf+0x7c>)
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f1c3 4344 	rsb	r3, r3, #3288334336	; 0xc4000000
 8004178:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <_config_triplebuf+0x7c>)
 800417a:	62d3      	str	r3, [r2, #44]	; 0x2c
	BSP_hlcd.Layers[0].Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 2 * BSP_hlcd.config_.framesize;
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <_config_triplebuf+0x7c>)
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f1c3 43c4 	rsb	r3, r3, #1644167168	; 0x62000000
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <_config_triplebuf+0x7c>)
 8004188:	6313      	str	r3, [r2, #48]	; 0x30
	BSP_hlcd.Layers[0].Frames[2] = LCD_FRAMEBUFFER_END_ADDR - 3 * BSP_hlcd.config_.framesize;
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <_config_triplebuf+0x7c>)
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	f1c3 4344 	rsb	r3, r3, #3288334336	; 0xc4000000
 8004198:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <_config_triplebuf+0x7c>)
 800419a:	6353      	str	r3, [r2, #52]	; 0x34
	BSP_hlcd.JPEGBuf = LCD_FRAMEBUFFER_END_ADDR - (3 * BSP_hlcd.config_.framesize) - LCD_JPEGBUF_SIZE;
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <_config_triplebuf+0x7c>)
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	441a      	add	r2, r3
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <_config_triplebuf+0x80>)
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <_config_triplebuf+0x7c>)
 80041ac:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80041ae:	bf00      	nop
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	24000240 	.word	0x24000240
 80041bc:	c3e00000 	.word	0xc3e00000

080041c0 <_config_doublebuf>:


static void _config_doublebuf(void) {
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
	// Setting up layer 0 for 2 buffers
	BSP_hlcd.Layers[0].Frame_IDLE = 255;
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <_config_doublebuf+0x6c>)
 80041c6:	22ff      	movs	r2, #255	; 0xff
 80041c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	BSP_hlcd.Layers[0].Frame_EDIT = 1;
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <_config_doublebuf+0x6c>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	BSP_hlcd.Layers[0].Frame_READY = 255;
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <_config_doublebuf+0x6c>)
 80041d6:	22ff      	movs	r2, #255	; 0xff
 80041d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	BSP_hlcd.Layers[0].Frame_ACTIVE = 0;
 80041dc:	4b13      	ldr	r3, [pc, #76]	; (800422c <_config_doublebuf+0x6c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	BSP_hlcd.Layers[0].Frame_NOUSE = 2;
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <_config_doublebuf+0x6c>)
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	BSP_hlcd.Layers[0].Frame_PREV = 0;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <_config_doublebuf+0x6c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	BSP_hlcd.Layers[0].Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 1 * BSP_hlcd.config_.framesize;
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <_config_doublebuf+0x6c>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f1c3 4344 	rsb	r3, r3, #3288334336	; 0xc4000000
 80041fc:	4a0b      	ldr	r2, [pc, #44]	; (800422c <_config_doublebuf+0x6c>)
 80041fe:	62d3      	str	r3, [r2, #44]	; 0x2c
	BSP_hlcd.Layers[0].Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 2 * BSP_hlcd.config_.framesize;
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <_config_doublebuf+0x6c>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f1c3 43c4 	rsb	r3, r3, #1644167168	; 0x62000000
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4a08      	ldr	r2, [pc, #32]	; (800422c <_config_doublebuf+0x6c>)
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
	BSP_hlcd.Layers[0].Frames[2] = 0;
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <_config_doublebuf+0x6c>)
 8004210:	2200      	movs	r2, #0
 8004212:	635a      	str	r2, [r3, #52]	; 0x34
	BSP_hlcd.JPEGBuf = LCD_FRAMEBUFFER_END_ADDR - (2 * BSP_hlcd.config_.framesize) - LCD_JPEGBUF_SIZE;
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <_config_doublebuf+0x6c>)
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <_config_doublebuf+0x70>)
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4a03      	ldr	r2, [pc, #12]	; (800422c <_config_doublebuf+0x6c>)
 8004220:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	24000240 	.word	0x24000240
 8004230:	e1f00000 	.word	0xe1f00000

08004234 <_ARGB8888_config>:


static void _ARGB8888_config(void) {
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
	BSP_hlcd.config_.bytesperpixel = 4;
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <_ARGB8888_config+0x74>)
 800423a:	2204      	movs	r2, #4
 800423c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	BSP_hlcd.config_.framesize *=4;
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <_ARGB8888_config+0x74>)
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <_ARGB8888_config+0x74>)
 8004248:	6193      	str	r3, [r2, #24]
	BSP_hlcd.config_.framebuffersize = BSP_hlcd.config_.framesize * BSP_hlcd.config_.buffermode;
 800424a:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <_ARGB8888_config+0x74>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <_ARGB8888_config+0x74>)
 8004250:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <_ARGB8888_config+0x74>)
 800425a:	61d3      	str	r3, [r2, #28]

	// Updating function pointers
	BSP_LCD_Color = _ARGB8888_color;
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <_ARGB8888_config+0x78>)
 800425e:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <_ARGB8888_config+0x7c>)
 8004260:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _ARGB8888_alpha;
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <_ARGB8888_config+0x80>)
 8004264:	4a14      	ldr	r2, [pc, #80]	; (80042b8 <_ARGB8888_config+0x84>)
 8004266:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB8888_dma2dwait;
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <_ARGB8888_config+0x88>)
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <_ARGB8888_config+0x8c>)
 800426c:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB8888_updatepixel;
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <_ARGB8888_config+0x90>)
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <_ARGB8888_config+0x94>)
 8004272:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB8888_updatepixelblend;
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <_ARGB8888_config+0x98>)
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <_ARGB8888_config+0x9c>)
 8004278:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _ARGB8888_getpixel;
 800427a:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <_ARGB8888_config+0xa0>)
 800427c:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <_ARGB8888_config+0xa4>)
 800427e:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _ARGB8888_fillbuf;
 8004280:	4b16      	ldr	r3, [pc, #88]	; (80042dc <_ARGB8888_config+0xa8>)
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <_ARGB8888_config+0xac>)
 8004284:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB8888_fillbufblend;
 8004286:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <_ARGB8888_config+0xb0>)
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <_ARGB8888_config+0xb4>)
 800428a:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB8888_copybuf;
 800428c:	4b17      	ldr	r3, [pc, #92]	; (80042ec <_ARGB8888_config+0xb8>)
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <_ARGB8888_config+0xbc>)
 8004290:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB8888_copybufblend;
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <_ARGB8888_config+0xc0>)
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <_ARGB8888_config+0xc4>)
 8004296:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB8888_copybufJPEG;
 8004298:	4b18      	ldr	r3, [pc, #96]	; (80042fc <_ARGB8888_config+0xc8>)
 800429a:	4a19      	ldr	r2, [pc, #100]	; (8004300 <_ARGB8888_config+0xcc>)
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	24000240 	.word	0x24000240
 80042ac:	240002a0 	.word	0x240002a0
 80042b0:	080020ad 	.word	0x080020ad
 80042b4:	240002a4 	.word	0x240002a4
 80042b8:	080020d1 	.word	0x080020d1
 80042bc:	240002a8 	.word	0x240002a8
 80042c0:	080020f5 	.word	0x080020f5
 80042c4:	240002ac 	.word	0x240002ac
 80042c8:	08002115 	.word	0x08002115
 80042cc:	240002b0 	.word	0x240002b0
 80042d0:	08002185 	.word	0x08002185
 80042d4:	240002b4 	.word	0x240002b4
 80042d8:	080022a3 	.word	0x080022a3
 80042dc:	240002b8 	.word	0x240002b8
 80042e0:	08002311 	.word	0x08002311
 80042e4:	240002bc 	.word	0x240002bc
 80042e8:	0800238d 	.word	0x0800238d
 80042ec:	240002c0 	.word	0x240002c0
 80042f0:	08002411 	.word	0x08002411
 80042f4:	240002c4 	.word	0x240002c4
 80042f8:	0800248d 	.word	0x0800248d
 80042fc:	240002c8 	.word	0x240002c8
 8004300:	0800250d 	.word	0x0800250d

08004304 <_ARGB8888_config_layer>:

static void _ARGB8888_config_layer(void) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b08c      	sub	sp, #48	; 0x30
 8004308:	af0c      	add	r7, sp, #48	; 0x30
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_PAxCA,
			LTDC_BLENDING_FACTOR2_PAxCA,
			BSP_hlcd.Layers[0].Frames[0],
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <_ARGB8888_config_layer+0x50>)
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	BSP_STM32_LTDC_ConfigLayer(
 800430e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004312:	920a      	str	r2, [sp, #40]	; 0x28
 8004314:	2200      	movs	r2, #0
 8004316:	9209      	str	r2, [sp, #36]	; 0x24
 8004318:	f44f 7248 	mov.w	r2, #800	; 0x320
 800431c:	9208      	str	r2, [sp, #32]
 800431e:	2200      	movs	r2, #0
 8004320:	9207      	str	r2, [sp, #28]
 8004322:	2200      	movs	r2, #0
 8004324:	9206      	str	r2, [sp, #24]
 8004326:	f44f 7248 	mov.w	r2, #800	; 0x320
 800432a:	9205      	str	r2, [sp, #20]
 800432c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004330:	9204      	str	r2, [sp, #16]
 8004332:	9303      	str	r3, [sp, #12]
 8004334:	2307      	movs	r3, #7
 8004336:	9302      	str	r3, [sp, #8]
 8004338:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2300      	movs	r3, #0
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	22ff      	movs	r2, #255	; 0xff
 8004346:	2100      	movs	r1, #0
 8004348:	4803      	ldr	r0, [pc, #12]	; (8004358 <_ARGB8888_config_layer+0x54>)
 800434a:	f005 ff63 	bl	800a214 <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	24000240 	.word	0x24000240
 8004358:	50001000 	.word	0x50001000

0800435c <_ARGB1555_config>:

static void _ARGB1555_config(void) {
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
	BSP_hlcd.config_.bytesperpixel = 2;
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <_ARGB1555_config+0x74>)
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	BSP_hlcd.config_.framesize *=2;
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <_ARGB1555_config+0x74>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <_ARGB1555_config+0x74>)
 8004370:	6193      	str	r3, [r2, #24]
	BSP_hlcd.config_.framebuffersize = BSP_hlcd.config_.framesize * BSP_hlcd.config_.buffermode;
 8004372:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <_ARGB1555_config+0x74>)
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <_ARGB1555_config+0x74>)
 8004378:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <_ARGB1555_config+0x74>)
 8004382:	61d3      	str	r3, [r2, #28]

	// Updating function pointers
	BSP_LCD_Color = _ARGB1555_color;
 8004384:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <_ARGB1555_config+0x78>)
 8004386:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <_ARGB1555_config+0x7c>)
 8004388:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _ARGB1555_alpha;
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <_ARGB1555_config+0x80>)
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <_ARGB1555_config+0x84>)
 800438e:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB1555_dma2dwait;
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <_ARGB1555_config+0x88>)
 8004392:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <_ARGB1555_config+0x8c>)
 8004394:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB1555_updatepixel;
 8004396:	4b15      	ldr	r3, [pc, #84]	; (80043ec <_ARGB1555_config+0x90>)
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <_ARGB1555_config+0x94>)
 800439a:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB1555_updatepixelblend;
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <_ARGB1555_config+0x98>)
 800439e:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <_ARGB1555_config+0x9c>)
 80043a0:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _ARGB1555_getpixel;
 80043a2:	4b16      	ldr	r3, [pc, #88]	; (80043fc <_ARGB1555_config+0xa0>)
 80043a4:	4a16      	ldr	r2, [pc, #88]	; (8004400 <_ARGB1555_config+0xa4>)
 80043a6:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _ARGB1555_fillbuf;
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <_ARGB1555_config+0xa8>)
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <_ARGB1555_config+0xac>)
 80043ac:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB1555_fillbufblend;
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <_ARGB1555_config+0xb0>)
 80043b0:	4a17      	ldr	r2, [pc, #92]	; (8004410 <_ARGB1555_config+0xb4>)
 80043b2:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB1555_copybuf;
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <_ARGB1555_config+0xb8>)
 80043b6:	4a18      	ldr	r2, [pc, #96]	; (8004418 <_ARGB1555_config+0xbc>)
 80043b8:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB1555_copybufblend;
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <_ARGB1555_config+0xc0>)
 80043bc:	4a18      	ldr	r2, [pc, #96]	; (8004420 <_ARGB1555_config+0xc4>)
 80043be:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB1555_copybufJPEG;
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <_ARGB1555_config+0xc8>)
 80043c2:	4a19      	ldr	r2, [pc, #100]	; (8004428 <_ARGB1555_config+0xcc>)
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	24000240 	.word	0x24000240
 80043d4:	240002a0 	.word	0x240002a0
 80043d8:	08002645 	.word	0x08002645
 80043dc:	240002a4 	.word	0x240002a4
 80043e0:	0800269d 	.word	0x0800269d
 80043e4:	240002a8 	.word	0x240002a8
 80043e8:	080026d5 	.word	0x080026d5
 80043ec:	240002ac 	.word	0x240002ac
 80043f0:	080026f5 	.word	0x080026f5
 80043f4:	240002b0 	.word	0x240002b0
 80043f8:	08002767 	.word	0x08002767
 80043fc:	240002b4 	.word	0x240002b4
 8004400:	080027e7 	.word	0x080027e7
 8004404:	240002b8 	.word	0x240002b8
 8004408:	08002855 	.word	0x08002855
 800440c:	240002bc 	.word	0x240002bc
 8004410:	080028d1 	.word	0x080028d1
 8004414:	240002c0 	.word	0x240002c0
 8004418:	08002961 	.word	0x08002961
 800441c:	240002c4 	.word	0x240002c4
 8004420:	080029dd 	.word	0x080029dd
 8004424:	240002c8 	.word	0x240002c8
 8004428:	08002a5d 	.word	0x08002a5d

0800442c <_ARGB1555_config_layer>:

static void _ARGB1555_config_layer(void) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	; 0x30
 8004430:	af0c      	add	r7, sp, #48	; 0x30
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_PAxCA,
			LTDC_BLENDING_FACTOR2_PAxCA,
			BSP_hlcd.Layers[0].Frames[0],
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <_ARGB1555_config_layer+0x50>)
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	BSP_STM32_LTDC_ConfigLayer(
 8004436:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800443a:	920a      	str	r2, [sp, #40]	; 0x28
 800443c:	2200      	movs	r2, #0
 800443e:	9209      	str	r2, [sp, #36]	; 0x24
 8004440:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004444:	9208      	str	r2, [sp, #32]
 8004446:	2200      	movs	r2, #0
 8004448:	9207      	str	r2, [sp, #28]
 800444a:	2203      	movs	r2, #3
 800444c:	9206      	str	r2, [sp, #24]
 800444e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004452:	9205      	str	r2, [sp, #20]
 8004454:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004458:	9204      	str	r2, [sp, #16]
 800445a:	9303      	str	r3, [sp, #12]
 800445c:	2307      	movs	r3, #7
 800445e:	9302      	str	r3, [sp, #8]
 8004460:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	2100      	movs	r1, #0
 8004470:	4803      	ldr	r0, [pc, #12]	; (8004480 <_ARGB1555_config_layer+0x54>)
 8004472:	f005 fecf 	bl	800a214 <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

}
 8004476:	bf00      	nop
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	24000240 	.word	0x24000240
 8004480:	50001000 	.word	0x50001000

08004484 <_ARGB4444_config>:


static void _ARGB4444_config(void) {
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
	BSP_hlcd.config_.bytesperpixel = 2;
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <_ARGB4444_config+0x74>)
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	BSP_hlcd.config_.framesize *=2;
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <_ARGB4444_config+0x74>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <_ARGB4444_config+0x74>)
 8004498:	6193      	str	r3, [r2, #24]
	BSP_hlcd.config_.framebuffersize = BSP_hlcd.config_.framesize * BSP_hlcd.config_.buffermode;
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <_ARGB4444_config+0x74>)
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <_ARGB4444_config+0x74>)
 80044a0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <_ARGB4444_config+0x74>)
 80044aa:	61d3      	str	r3, [r2, #28]

	// Updating function pointers
	BSP_LCD_Color = _ARGB4444_color;
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <_ARGB4444_config+0x78>)
 80044ae:	4a14      	ldr	r2, [pc, #80]	; (8004500 <_ARGB4444_config+0x7c>)
 80044b0:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _ARGB4444_alpha;
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <_ARGB4444_config+0x80>)
 80044b4:	4a14      	ldr	r2, [pc, #80]	; (8004508 <_ARGB4444_config+0x84>)
 80044b6:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB4444_dma2dwait;
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <_ARGB4444_config+0x88>)
 80044ba:	4a15      	ldr	r2, [pc, #84]	; (8004510 <_ARGB4444_config+0x8c>)
 80044bc:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB4444_updatepixel;
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <_ARGB4444_config+0x90>)
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <_ARGB4444_config+0x94>)
 80044c2:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB4444_updatepixelblend;
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <_ARGB4444_config+0x98>)
 80044c6:	4a16      	ldr	r2, [pc, #88]	; (8004520 <_ARGB4444_config+0x9c>)
 80044c8:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _ARGB4444_getpixel;
 80044ca:	4b16      	ldr	r3, [pc, #88]	; (8004524 <_ARGB4444_config+0xa0>)
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <_ARGB4444_config+0xa4>)
 80044ce:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _ARGB4444_fillbuf;
 80044d0:	4b16      	ldr	r3, [pc, #88]	; (800452c <_ARGB4444_config+0xa8>)
 80044d2:	4a17      	ldr	r2, [pc, #92]	; (8004530 <_ARGB4444_config+0xac>)
 80044d4:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB4444_fillbufblend;
 80044d6:	4b17      	ldr	r3, [pc, #92]	; (8004534 <_ARGB4444_config+0xb0>)
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <_ARGB4444_config+0xb4>)
 80044da:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB4444_copybuf;
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <_ARGB4444_config+0xb8>)
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <_ARGB4444_config+0xbc>)
 80044e0:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB4444_copybufblend;
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <_ARGB4444_config+0xc0>)
 80044e4:	4a18      	ldr	r2, [pc, #96]	; (8004548 <_ARGB4444_config+0xc4>)
 80044e6:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB4444_copybufJPEG;
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <_ARGB4444_config+0xc8>)
 80044ea:	4a19      	ldr	r2, [pc, #100]	; (8004550 <_ARGB4444_config+0xcc>)
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	bf00      	nop
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	24000240 	.word	0x24000240
 80044fc:	240002a0 	.word	0x240002a0
 8004500:	08002b95 	.word	0x08002b95
 8004504:	240002a4 	.word	0x240002a4
 8004508:	08002be9 	.word	0x08002be9
 800450c:	240002a8 	.word	0x240002a8
 8004510:	08002c19 	.word	0x08002c19
 8004514:	240002ac 	.word	0x240002ac
 8004518:	08002c39 	.word	0x08002c39
 800451c:	240002b0 	.word	0x240002b0
 8004520:	08002cab 	.word	0x08002cab
 8004524:	240002b4 	.word	0x240002b4
 8004528:	08002ddf 	.word	0x08002ddf
 800452c:	240002b8 	.word	0x240002b8
 8004530:	08002e4d 	.word	0x08002e4d
 8004534:	240002bc 	.word	0x240002bc
 8004538:	08002ec9 	.word	0x08002ec9
 800453c:	240002c0 	.word	0x240002c0
 8004540:	08002f51 	.word	0x08002f51
 8004544:	240002c4 	.word	0x240002c4
 8004548:	08002fcd 	.word	0x08002fcd
 800454c:	240002c8 	.word	0x240002c8
 8004550:	0800304d 	.word	0x0800304d

08004554 <_ARGB4444_config_layer>:

static void _ARGB4444_config_layer(void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b08c      	sub	sp, #48	; 0x30
 8004558:	af0c      	add	r7, sp, #48	; 0x30
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_PAxCA,
			LTDC_BLENDING_FACTOR2_PAxCA,
			BSP_hlcd.Layers[0].Frames[0],
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <_ARGB4444_config_layer+0x50>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	BSP_STM32_LTDC_ConfigLayer(
 800455e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004562:	920a      	str	r2, [sp, #40]	; 0x28
 8004564:	2200      	movs	r2, #0
 8004566:	9209      	str	r2, [sp, #36]	; 0x24
 8004568:	f44f 7248 	mov.w	r2, #800	; 0x320
 800456c:	9208      	str	r2, [sp, #32]
 800456e:	2200      	movs	r2, #0
 8004570:	9207      	str	r2, [sp, #28]
 8004572:	2204      	movs	r2, #4
 8004574:	9206      	str	r2, [sp, #24]
 8004576:	f44f 7248 	mov.w	r2, #800	; 0x320
 800457a:	9205      	str	r2, [sp, #20]
 800457c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004580:	9204      	str	r2, [sp, #16]
 8004582:	9303      	str	r3, [sp, #12]
 8004584:	2307      	movs	r3, #7
 8004586:	9302      	str	r3, [sp, #8]
 8004588:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	2300      	movs	r3, #0
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	2300      	movs	r3, #0
 8004594:	22ff      	movs	r2, #255	; 0xff
 8004596:	2100      	movs	r1, #0
 8004598:	4803      	ldr	r0, [pc, #12]	; (80045a8 <_ARGB4444_config_layer+0x54>)
 800459a:	f005 fe3b 	bl	800a214 <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

}
 800459e:	bf00      	nop
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	24000240 	.word	0x24000240
 80045a8:	50001000 	.word	0x50001000

080045ac <_RGB888_config>:

static void _RGB888_config(void) {
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
	BSP_hlcd.config_.bytesperpixel = 3;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <_RGB888_config+0x78>)
 80045b2:	2203      	movs	r2, #3
 80045b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	BSP_hlcd.config_.framesize *=3;
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <_RGB888_config+0x78>)
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	4a18      	ldr	r2, [pc, #96]	; (8004624 <_RGB888_config+0x78>)
 80045c4:	6193      	str	r3, [r2, #24]
	BSP_hlcd.config_.framebuffersize = BSP_hlcd.config_.framesize * BSP_hlcd.config_.buffermode;
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <_RGB888_config+0x78>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	4a16      	ldr	r2, [pc, #88]	; (8004624 <_RGB888_config+0x78>)
 80045cc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <_RGB888_config+0x78>)
 80045d6:	61d3      	str	r3, [r2, #28]

	// Updating function pointers
	BSP_LCD_Color = _RGB888_color;
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <_RGB888_config+0x7c>)
 80045da:	4a14      	ldr	r2, [pc, #80]	; (800462c <_RGB888_config+0x80>)
 80045dc:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _RGB888_alpha;
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <_RGB888_config+0x84>)
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <_RGB888_config+0x88>)
 80045e2:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _RGB888_dma2dwait;
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <_RGB888_config+0x8c>)
 80045e6:	4a15      	ldr	r2, [pc, #84]	; (800463c <_RGB888_config+0x90>)
 80045e8:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _RGB888_updatepixel;
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <_RGB888_config+0x94>)
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <_RGB888_config+0x98>)
 80045ee:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _RGB888_updatepixelblend;
 80045f0:	4b15      	ldr	r3, [pc, #84]	; (8004648 <_RGB888_config+0x9c>)
 80045f2:	4a16      	ldr	r2, [pc, #88]	; (800464c <_RGB888_config+0xa0>)
 80045f4:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _RGB888_getpixel;
 80045f6:	4b16      	ldr	r3, [pc, #88]	; (8004650 <_RGB888_config+0xa4>)
 80045f8:	4a16      	ldr	r2, [pc, #88]	; (8004654 <_RGB888_config+0xa8>)
 80045fa:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _RGB888_fillbuf;
 80045fc:	4b16      	ldr	r3, [pc, #88]	; (8004658 <_RGB888_config+0xac>)
 80045fe:	4a17      	ldr	r2, [pc, #92]	; (800465c <_RGB888_config+0xb0>)
 8004600:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBufBlend = _RGB888_fillbufblend;
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <_RGB888_config+0xb4>)
 8004604:	4a17      	ldr	r2, [pc, #92]	; (8004664 <_RGB888_config+0xb8>)
 8004606:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _RGB888_copybuf;
 8004608:	4b17      	ldr	r3, [pc, #92]	; (8004668 <_RGB888_config+0xbc>)
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <_RGB888_config+0xc0>)
 800460c:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _RGB888_copybufblend;
 800460e:	4b18      	ldr	r3, [pc, #96]	; (8004670 <_RGB888_config+0xc4>)
 8004610:	4a18      	ldr	r2, [pc, #96]	; (8004674 <_RGB888_config+0xc8>)
 8004612:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _RGB888_copybufJPEG;
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <_RGB888_config+0xcc>)
 8004616:	4a19      	ldr	r2, [pc, #100]	; (800467c <_RGB888_config+0xd0>)
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	24000240 	.word	0x24000240
 8004628:	240002a0 	.word	0x240002a0
 800462c:	08003185 	.word	0x08003185
 8004630:	240002a4 	.word	0x240002a4
 8004634:	080031a9 	.word	0x080031a9
 8004638:	240002a8 	.word	0x240002a8
 800463c:	080031cd 	.word	0x080031cd
 8004640:	240002ac 	.word	0x240002ac
 8004644:	080031ed 	.word	0x080031ed
 8004648:	240002b0 	.word	0x240002b0
 800464c:	0800328d 	.word	0x0800328d
 8004650:	240002b4 	.word	0x240002b4
 8004654:	08003395 	.word	0x08003395
 8004658:	240002b8 	.word	0x240002b8
 800465c:	08003431 	.word	0x08003431
 8004660:	240002bc 	.word	0x240002bc
 8004664:	080034b1 	.word	0x080034b1
 8004668:	240002c0 	.word	0x240002c0
 800466c:	08003539 	.word	0x08003539
 8004670:	240002c4 	.word	0x240002c4
 8004674:	080035b9 	.word	0x080035b9
 8004678:	240002c8 	.word	0x240002c8
 800467c:	0800363d 	.word	0x0800363d

08004680 <_RGB888_config_layer>:

static void _RGB888_config_layer(void) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	; 0x30
 8004684:	af0c      	add	r7, sp, #48	; 0x30
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_CA,
			LTDC_BLENDING_FACTOR2_CA,
			BSP_hlcd.Layers[0].Frames[0],
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <_RGB888_config_layer+0x5c>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	BSP_STM32_LTDC_ConfigLayer(
 800468a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800468e:	920a      	str	r2, [sp, #40]	; 0x28
 8004690:	2200      	movs	r2, #0
 8004692:	9209      	str	r2, [sp, #36]	; 0x24
 8004694:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004698:	9208      	str	r2, [sp, #32]
 800469a:	2200      	movs	r2, #0
 800469c:	9207      	str	r2, [sp, #28]
 800469e:	2201      	movs	r2, #1
 80046a0:	9206      	str	r2, [sp, #24]
 80046a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80046a6:	9205      	str	r2, [sp, #20]
 80046a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80046ac:	9204      	str	r2, [sp, #16]
 80046ae:	9303      	str	r3, [sp, #12]
 80046b0:	2305      	movs	r3, #5
 80046b2:	9302      	str	r3, [sp, #8]
 80046b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	22ff      	movs	r2, #255	; 0xff
 80046c2:	2100      	movs	r1, #0
 80046c4:	4806      	ldr	r0, [pc, #24]	; (80046e0 <_RGB888_config_layer+0x60>)
 80046c6:	f005 fda5 	bl	800a214 <BSP_STM32_LTDC_ConfigLayer>
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

	// Configure color keying so 0x00000000 is transparent
	BSP_STM32_LTDC_SetTransparentColor(LTDC, 0, 0x00000000);
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	4804      	ldr	r0, [pc, #16]	; (80046e0 <_RGB888_config_layer+0x60>)
 80046d0:	f005 fec2 	bl	800a458 <BSP_STM32_LTDC_SetTransparentColor>
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	24000240 	.word	0x24000240
 80046e0:	50001000 	.word	0x50001000

080046e4 <_AL88_config>:

static void _AL88_config(void) {
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
	BSP_hlcd.config_.bytesperpixel = 2;
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <_AL88_config+0x74>)
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	BSP_hlcd.config_.framesize *=2;
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <_AL88_config+0x74>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <_AL88_config+0x74>)
 80046f8:	6193      	str	r3, [r2, #24]
	BSP_hlcd.config_.framebuffersize = BSP_hlcd.config_.framesize * BSP_hlcd.config_.buffermode;
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <_AL88_config+0x74>)
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	4a16      	ldr	r2, [pc, #88]	; (8004758 <_AL88_config+0x74>)
 8004700:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	4a13      	ldr	r2, [pc, #76]	; (8004758 <_AL88_config+0x74>)
 800470a:	61d3      	str	r3, [r2, #28]

	// Updating function pointers
	BSP_LCD_Color = _AL88_color;
 800470c:	4b13      	ldr	r3, [pc, #76]	; (800475c <_AL88_config+0x78>)
 800470e:	4a14      	ldr	r2, [pc, #80]	; (8004760 <_AL88_config+0x7c>)
 8004710:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _AL88_alpha;
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <_AL88_config+0x80>)
 8004714:	4a14      	ldr	r2, [pc, #80]	; (8004768 <_AL88_config+0x84>)
 8004716:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _AL88_dma2dwait;
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <_AL88_config+0x88>)
 800471a:	4a15      	ldr	r2, [pc, #84]	; (8004770 <_AL88_config+0x8c>)
 800471c:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _AL88_updatepixel;
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <_AL88_config+0x90>)
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <_AL88_config+0x94>)
 8004722:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _AL88_updatepixelblend;
 8004724:	4b15      	ldr	r3, [pc, #84]	; (800477c <_AL88_config+0x98>)
 8004726:	4a16      	ldr	r2, [pc, #88]	; (8004780 <_AL88_config+0x9c>)
 8004728:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _AL88_getpixel;
 800472a:	4b16      	ldr	r3, [pc, #88]	; (8004784 <_AL88_config+0xa0>)
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <_AL88_config+0xa4>)
 800472e:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _AL88_fillbuf;
 8004730:	4b16      	ldr	r3, [pc, #88]	; (800478c <_AL88_config+0xa8>)
 8004732:	4a17      	ldr	r2, [pc, #92]	; (8004790 <_AL88_config+0xac>)
 8004734:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBufBlend = _AL88_fillbufblend;
 8004736:	4b17      	ldr	r3, [pc, #92]	; (8004794 <_AL88_config+0xb0>)
 8004738:	4a17      	ldr	r2, [pc, #92]	; (8004798 <_AL88_config+0xb4>)
 800473a:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _AL88_copybuf;
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <_AL88_config+0xb8>)
 800473e:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <_AL88_config+0xbc>)
 8004740:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _AL88_copybufblend;
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <_AL88_config+0xc0>)
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <_AL88_config+0xc4>)
 8004746:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _AL88_copybufJPEG;
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <_AL88_config+0xc8>)
 800474a:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <_AL88_config+0xcc>)
 800474c:	601a      	str	r2, [r3, #0]
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	24000240 	.word	0x24000240
 800475c:	240002a0 	.word	0x240002a0
 8004760:	08003779 	.word	0x08003779
 8004764:	240002a4 	.word	0x240002a4
 8004768:	080037e5 	.word	0x080037e5
 800476c:	240002a8 	.word	0x240002a8
 8004770:	08003811 	.word	0x08003811
 8004774:	240002ac 	.word	0x240002ac
 8004778:	08003831 	.word	0x08003831
 800477c:	240002b0 	.word	0x240002b0
 8004780:	080038a3 	.word	0x080038a3
 8004784:	240002b4 	.word	0x240002b4
 8004788:	08003923 	.word	0x08003923
 800478c:	240002b8 	.word	0x240002b8
 8004790:	08003991 	.word	0x08003991
 8004794:	240002bc 	.word	0x240002bc
 8004798:	08003a0d 	.word	0x08003a0d
 800479c:	240002c0 	.word	0x240002c0
 80047a0:	08003a49 	.word	0x08003a49
 80047a4:	240002c4 	.word	0x240002c4
 80047a8:	08003ac5 	.word	0x08003ac5
 80047ac:	240002c8 	.word	0x240002c8
 80047b0:	08003b01 	.word	0x08003b01

080047b4 <_AL88_config_layer>:

static void _AL88_config_layer(uint32_t *clut) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08e      	sub	sp, #56	; 0x38
 80047b8:	af0c      	add	r7, sp, #48	; 0x30
 80047ba:	6078      	str	r0, [r7, #4]
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_PAxCA,
			LTDC_BLENDING_FACTOR2_PAxCA,
			BSP_hlcd.Layers[0].Frames[0],
 80047bc:	4b15      	ldr	r3, [pc, #84]	; (8004814 <_AL88_config_layer+0x60>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	BSP_STM32_LTDC_ConfigLayer(
 80047c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80047c4:	920a      	str	r2, [sp, #40]	; 0x28
 80047c6:	2200      	movs	r2, #0
 80047c8:	9209      	str	r2, [sp, #36]	; 0x24
 80047ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80047ce:	9208      	str	r2, [sp, #32]
 80047d0:	2200      	movs	r2, #0
 80047d2:	9207      	str	r2, [sp, #28]
 80047d4:	2207      	movs	r2, #7
 80047d6:	9206      	str	r2, [sp, #24]
 80047d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80047dc:	9205      	str	r2, [sp, #20]
 80047de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80047e2:	9204      	str	r2, [sp, #16]
 80047e4:	9303      	str	r3, [sp, #12]
 80047e6:	2307      	movs	r3, #7
 80047e8:	9302      	str	r3, [sp, #8]
 80047ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	2300      	movs	r3, #0
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2300      	movs	r3, #0
 80047f6:	22ff      	movs	r2, #255	; 0xff
 80047f8:	2100      	movs	r1, #0
 80047fa:	4807      	ldr	r0, [pc, #28]	; (8004818 <_AL88_config_layer+0x64>)
 80047fc:	f005 fd0a 	bl	800a214 <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

	BSP_STM32_LTDC_ConfigCLUT(LTDC, 0, clut);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	2100      	movs	r1, #0
 8004804:	4804      	ldr	r0, [pc, #16]	; (8004818 <_AL88_config_layer+0x64>)
 8004806:	f005 fddb 	bl	800a3c0 <BSP_STM32_LTDC_ConfigCLUT>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	24000240 	.word	0x24000240
 8004818:	50001000 	.word	0x50001000

0800481c <_L8_config>:

static void _L8_config(void) {
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
	BSP_hlcd.config_.bytesperpixel = 1;
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <_L8_config+0x74>)
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	BSP_hlcd.config_.framesize *=1;
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <_L8_config+0x74>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4a18      	ldr	r2, [pc, #96]	; (8004890 <_L8_config+0x74>)
 800482e:	6193      	str	r3, [r2, #24]
	BSP_hlcd.config_.framebuffersize = BSP_hlcd.config_.framesize * BSP_hlcd.config_.buffermode;
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <_L8_config+0x74>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	4a16      	ldr	r2, [pc, #88]	; (8004890 <_L8_config+0x74>)
 8004836:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	4a14      	ldr	r2, [pc, #80]	; (8004890 <_L8_config+0x74>)
 8004840:	61d3      	str	r3, [r2, #28]

	// Updating function pointers
	BSP_LCD_Color = _L8_color;
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <_L8_config+0x78>)
 8004844:	4a14      	ldr	r2, [pc, #80]	; (8004898 <_L8_config+0x7c>)
 8004846:	601a      	str	r2, [r3, #0]
	BSP_LCD_Alpha = _L8_alpha;
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <_L8_config+0x80>)
 800484a:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <_L8_config+0x84>)
 800484c:	601a      	str	r2, [r3, #0]
	BSP_LCD_DMA2D_Wait = _L8_dma2dwait;
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <_L8_config+0x88>)
 8004850:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <_L8_config+0x8c>)
 8004852:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixel = _L8_updatepixel;
 8004854:	4b15      	ldr	r3, [pc, #84]	; (80048ac <_L8_config+0x90>)
 8004856:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <_L8_config+0x94>)
 8004858:	601a      	str	r2, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _L8_updatepixelblend;
 800485a:	4b16      	ldr	r3, [pc, #88]	; (80048b4 <_L8_config+0x98>)
 800485c:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <_L8_config+0x9c>)
 800485e:	601a      	str	r2, [r3, #0]
	BSP_LCD_GetPixel = _L8_getpixel;
 8004860:	4b16      	ldr	r3, [pc, #88]	; (80048bc <_L8_config+0xa0>)
 8004862:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <_L8_config+0xa4>)
 8004864:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBuf = _L8_fillbuf;
 8004866:	4b17      	ldr	r3, [pc, #92]	; (80048c4 <_L8_config+0xa8>)
 8004868:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <_L8_config+0xac>)
 800486a:	601a      	str	r2, [r3, #0]
	BSP_LCD_FillBufBlend = _L8_fillbufblend;
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <_L8_config+0xb0>)
 800486e:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <_L8_config+0xb4>)
 8004870:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBuf = _L8_copybuf;
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <_L8_config+0xb8>)
 8004874:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <_L8_config+0xbc>)
 8004876:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufBlend = _L8_copybufblend;
 8004878:	4b18      	ldr	r3, [pc, #96]	; (80048dc <_L8_config+0xc0>)
 800487a:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <_L8_config+0xc4>)
 800487c:	601a      	str	r2, [r3, #0]
	BSP_LCD_CopyBufJPEG = _L8_copybufJPEG;
 800487e:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <_L8_config+0xc8>)
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <_L8_config+0xcc>)
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	24000240 	.word	0x24000240
 8004894:	240002a0 	.word	0x240002a0
 8004898:	08003b61 	.word	0x08003b61
 800489c:	240002a4 	.word	0x240002a4
 80048a0:	08003bcd 	.word	0x08003bcd
 80048a4:	240002a8 	.word	0x240002a8
 80048a8:	08003be9 	.word	0x08003be9
 80048ac:	240002ac 	.word	0x240002ac
 80048b0:	08003c09 	.word	0x08003c09
 80048b4:	240002b0 	.word	0x240002b0
 80048b8:	08003c7b 	.word	0x08003c7b
 80048bc:	240002b4 	.word	0x240002b4
 80048c0:	08003cf7 	.word	0x08003cf7
 80048c4:	240002b8 	.word	0x240002b8
 80048c8:	08003d65 	.word	0x08003d65
 80048cc:	240002bc 	.word	0x240002bc
 80048d0:	08003ee9 	.word	0x08003ee9
 80048d4:	240002c0 	.word	0x240002c0
 80048d8:	08003f25 	.word	0x08003f25
 80048dc:	240002c4 	.word	0x240002c4
 80048e0:	080040a1 	.word	0x080040a1
 80048e4:	240002c8 	.word	0x240002c8
 80048e8:	080040dd 	.word	0x080040dd

080048ec <_L8_config_layer>:

static void _L8_config_layer(uint32_t *clut) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08e      	sub	sp, #56	; 0x38
 80048f0:	af0c      	add	r7, sp, #48	; 0x30
 80048f2:	6078      	str	r0, [r7, #4]
			255,
			0,
			0x00000000,
			LTDC_BLENDING_FACTOR1_CA,
			LTDC_BLENDING_FACTOR2_CA,
			BSP_hlcd.Layers[0].Frames[0],
 80048f4:	4b15      	ldr	r3, [pc, #84]	; (800494c <_L8_config_layer+0x60>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	BSP_STM32_LTDC_ConfigLayer(
 80048f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80048fc:	920a      	str	r2, [sp, #40]	; 0x28
 80048fe:	2200      	movs	r2, #0
 8004900:	9209      	str	r2, [sp, #36]	; 0x24
 8004902:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004906:	9208      	str	r2, [sp, #32]
 8004908:	2200      	movs	r2, #0
 800490a:	9207      	str	r2, [sp, #28]
 800490c:	2205      	movs	r2, #5
 800490e:	9206      	str	r2, [sp, #24]
 8004910:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004914:	9205      	str	r2, [sp, #20]
 8004916:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800491a:	9204      	str	r2, [sp, #16]
 800491c:	9303      	str	r3, [sp, #12]
 800491e:	2305      	movs	r3, #5
 8004920:	9302      	str	r3, [sp, #8]
 8004922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	2300      	movs	r3, #0
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	22ff      	movs	r2, #255	; 0xff
 8004930:	2100      	movs	r1, #0
 8004932:	4807      	ldr	r0, [pc, #28]	; (8004950 <_L8_config_layer+0x64>)
 8004934:	f005 fc6e 	bl	800a214 <BSP_STM32_LTDC_ConfigLayer>
			0,
			LCD_WIDTH,
			0,
			LCD_HEIGHT);

	BSP_STM32_LTDC_ConfigCLUT(LTDC, 0, clut);
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	2100      	movs	r1, #0
 800493c:	4804      	ldr	r0, [pc, #16]	; (8004950 <_L8_config_layer+0x64>)
 800493e:	f005 fd3f 	bl	800a3c0 <BSP_STM32_LTDC_ConfigCLUT>

}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	24000240 	.word	0x24000240
 8004950:	50001000 	.word	0x50001000

08004954 <BSP_LCD_Init>:
/******************************************************************************
 * Public functions
 ******************************************************************************/


void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af06      	add	r7, sp, #24
 800495a:	60ba      	str	r2, [r7, #8]
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	4603      	mov	r3, r0
 8004960:	73fb      	strb	r3, [r7, #15]
 8004962:	460b      	mov	r3, r1
 8004964:	73bb      	strb	r3, [r7, #14]
	// CLUT parameter is ignored in ARGB and RGB modes

	// Setting up config variables
	BSP_hlcd.frametime[0] = 0;
 8004966:	4b59      	ldr	r3, [pc, #356]	; (8004acc <BSP_LCD_Init+0x178>)
 8004968:	2200      	movs	r2, #0
 800496a:	655a      	str	r2, [r3, #84]	; 0x54
	BSP_hlcd.frametime[1] = 0;
 800496c:	4b57      	ldr	r3, [pc, #348]	; (8004acc <BSP_LCD_Init+0x178>)
 800496e:	2200      	movs	r2, #0
 8004970:	659a      	str	r2, [r3, #88]	; 0x58
	BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_READY;
 8004972:	4b56      	ldr	r3, [pc, #344]	; (8004acc <BSP_LCD_Init+0x178>)
 8004974:	2200      	movs	r2, #0
 8004976:	609a      	str	r2, [r3, #8]
	BSP_hlcd.priv_.l_timestamp[0] = 0;
 8004978:	4b54      	ldr	r3, [pc, #336]	; (8004acc <BSP_LCD_Init+0x178>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
	BSP_hlcd.priv_.l_timestamp[1] = 0;
 800497e:	4b53      	ldr	r3, [pc, #332]	; (8004acc <BSP_LCD_Init+0x178>)
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]
	BSP_hlcd.config_.colormode = color_mode;
 8004984:	4a51      	ldr	r2, [pc, #324]	; (8004acc <BSP_LCD_Init+0x178>)
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	f882 3020 	strb.w	r3, [r2, #32]
	BSP_hlcd.config_.buffermode = buffer_mode;
 800498c:	4a4f      	ldr	r2, [pc, #316]	; (8004acc <BSP_LCD_Init+0x178>)
 800498e:	7bbb      	ldrb	r3, [r7, #14]
 8004990:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	BSP_hlcd.config_.bgcolor = bgcolor;
 8004994:	4a4d      	ldr	r2, [pc, #308]	; (8004acc <BSP_LCD_Init+0x178>)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6253      	str	r3, [r2, #36]	; 0x24
	BSP_hlcd.config_.framesize = LCD_WIDTH * LCD_HEIGHT;
 800499a:	4b4c      	ldr	r3, [pc, #304]	; (8004acc <BSP_LCD_Init+0x178>)
 800499c:	4a4c      	ldr	r2, [pc, #304]	; (8004ad0 <BSP_LCD_Init+0x17c>)
 800499e:	619a      	str	r2, [r3, #24]

	// Configuring color mode
	switch (BSP_hlcd.config_.colormode) {
 80049a0:	4b4a      	ldr	r3, [pc, #296]	; (8004acc <BSP_LCD_Init+0x178>)
 80049a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d821      	bhi.n	80049f0 <BSP_LCD_Init+0x9c>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <BSP_LCD_Init+0x60>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049df 	.word	0x080049df
 80049c0:	080049d3 	.word	0x080049d3
 80049c4:	080049d9 	.word	0x080049d9
 80049c8:	080049cd 	.word	0x080049cd
	case LCD_COLOR_MODE_ARGB8888:
		_ARGB8888_config();
 80049cc:	f7ff fc32 	bl	8004234 <_ARGB8888_config>
		break;
 80049d0:	e00e      	b.n	80049f0 <BSP_LCD_Init+0x9c>
	case LCD_COLOR_MODE_ARGB1555:
		_ARGB1555_config();
 80049d2:	f7ff fcc3 	bl	800435c <_ARGB1555_config>
		break;
 80049d6:	e00b      	b.n	80049f0 <BSP_LCD_Init+0x9c>
	case LCD_COLOR_MODE_ARGB4444:
		_ARGB4444_config();
 80049d8:	f7ff fd54 	bl	8004484 <_ARGB4444_config>
		break;
 80049dc:	e008      	b.n	80049f0 <BSP_LCD_Init+0x9c>
	case LCD_COLOR_MODE_RGB888:
		_RGB888_config();
 80049de:	f7ff fde5 	bl	80045ac <_RGB888_config>
		break;
 80049e2:	e005      	b.n	80049f0 <BSP_LCD_Init+0x9c>
	case LCD_COLOR_MODE_AL88:
		_AL88_config();
 80049e4:	f7ff fe7e 	bl	80046e4 <_AL88_config>
		break;
 80049e8:	e002      	b.n	80049f0 <BSP_LCD_Init+0x9c>
	case LCD_COLOR_MODE_L8:
		_L8_config();
 80049ea:	f7ff ff17 	bl	800481c <_L8_config>
		break;
 80049ee:	bf00      	nop
	}

	// Clearing memory for frame buffer
	memset((void *)(LCD_FRAMEBUFFER_END_ADDR - BSP_hlcd.config_.framebuffersize - LCD_JPEGBUF_SIZE),0x00, (BSP_hlcd.config_.framebuffersize + LCD_JPEGBUF_SIZE));
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <BSP_LCD_Init+0x178>)
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <BSP_LCD_Init+0x180>)
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	4b34      	ldr	r3, [pc, #208]	; (8004acc <BSP_LCD_Init+0x178>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004a02:	461a      	mov	r2, r3
 8004a04:	2100      	movs	r1, #0
 8004a06:	f014 f858 	bl	8018aba <memset>

	// Configuring frame buffer parameters
	switch (BSP_hlcd.config_.buffermode) {
 8004a0a:	4b30      	ldr	r3, [pc, #192]	; (8004acc <BSP_LCD_Init+0x178>)
 8004a0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d004      	beq.n	8004a1e <BSP_LCD_Init+0xca>
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d105      	bne.n	8004a24 <BSP_LCD_Init+0xd0>
	case LCD_BUFFER_MODE_TRIPLE:
		_config_triplebuf();
 8004a18:	f7ff fb90 	bl	800413c <_config_triplebuf>
		break;
 8004a1c:	e002      	b.n	8004a24 <BSP_LCD_Init+0xd0>
	case LCD_BUFFER_MODE_DOUBLE:
		_config_doublebuf();
 8004a1e:	f7ff fbcf 	bl	80041c0 <_config_doublebuf>
		break;
 8004a22:	bf00      	nop
	}

	// Configuring LTDC controller
	BSP_STM32_LTDC_Init(LTDC, LCD_H_SYNC, LCD_V_SYNC, LCD_ACC_H_BACK_PORCH_WIDTH, LCD_ACC_V_BACK_PORCH_HEIGHT,
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f240 2343 	movw	r3, #579	; 0x243
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	f240 335d 	movw	r3, #861	; 0x35d
 8004a32:	9303      	str	r3, [sp, #12]
 8004a34:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8004a38:	9302      	str	r3, [sp, #8]
 8004a3a:	f240 334d 	movw	r3, #845	; 0x34d
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	2316      	movs	r3, #22
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	232d      	movs	r3, #45	; 0x2d
 8004a46:	2202      	movs	r2, #2
 8004a48:	2119      	movs	r1, #25
 8004a4a:	4823      	ldr	r0, [pc, #140]	; (8004ad8 <BSP_LCD_Init+0x184>)
 8004a4c:	f005 fb04 	bl	800a058 <BSP_STM32_LTDC_Init>
			LCD_ACC_ACTIVE_WIDTH, LCD_ACC_ACTIVE_HEIGHT, LCD_TOTAL_WIDTH, LCD_TOTAL_HEIGHT, bgcolor);

	// Configuring JPEG hardware codec
	BSP_STM32_JPEG_Init(JPEG);
 8004a50:	4822      	ldr	r0, [pc, #136]	; (8004adc <BSP_LCD_Init+0x188>)
 8004a52:	f005 fa79 	bl	8009f48 <BSP_STM32_JPEG_Init>

	// Disabling both layers
	BSP_STM32_LTDC_DisableLayer(LTDC, 0);
 8004a56:	2100      	movs	r1, #0
 8004a58:	481f      	ldr	r0, [pc, #124]	; (8004ad8 <BSP_LCD_Init+0x184>)
 8004a5a:	f005 fb8d 	bl	800a178 <BSP_STM32_LTDC_DisableLayer>

	// Configuring LTDC Layers
	switch (BSP_hlcd.config_.colormode) {
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <BSP_LCD_Init+0x178>)
 8004a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d822      	bhi.n	8004ab0 <BSP_LCD_Init+0x15c>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <BSP_LCD_Init+0x11c>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004aa9 	.word	0x08004aa9
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004a9b 	.word	0x08004a9b
 8004a7c:	08004a8f 	.word	0x08004a8f
 8004a80:	08004a95 	.word	0x08004a95
 8004a84:	08004a89 	.word	0x08004a89
	case LCD_COLOR_MODE_ARGB8888:
		_ARGB8888_config_layer();
 8004a88:	f7ff fc3c 	bl	8004304 <_ARGB8888_config_layer>
		break;
 8004a8c:	e010      	b.n	8004ab0 <BSP_LCD_Init+0x15c>
	case LCD_COLOR_MODE_ARGB1555:
		_ARGB1555_config_layer();
 8004a8e:	f7ff fccd 	bl	800442c <_ARGB1555_config_layer>
		break;
 8004a92:	e00d      	b.n	8004ab0 <BSP_LCD_Init+0x15c>
	case LCD_COLOR_MODE_ARGB4444:
		_ARGB4444_config_layer();
 8004a94:	f7ff fd5e 	bl	8004554 <_ARGB4444_config_layer>
		break;
 8004a98:	e00a      	b.n	8004ab0 <BSP_LCD_Init+0x15c>
	case LCD_COLOR_MODE_RGB888:
		_RGB888_config_layer();
 8004a9a:	f7ff fdf1 	bl	8004680 <_RGB888_config_layer>
		break;
 8004a9e:	e007      	b.n	8004ab0 <BSP_LCD_Init+0x15c>
	case LCD_COLOR_MODE_AL88:
		_AL88_config_layer(clut);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fe87 	bl	80047b4 <_AL88_config_layer>
		break;
 8004aa6:	e003      	b.n	8004ab0 <BSP_LCD_Init+0x15c>
	case LCD_COLOR_MODE_L8:
		_L8_config_layer(clut);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff1f 	bl	80048ec <_L8_config_layer>
		break;
 8004aae:	bf00      	nop
	}

	// Enabling required layers
	BSP_STM32_LTDC_EnableLayer(LTDC, 0);
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4809      	ldr	r0, [pc, #36]	; (8004ad8 <BSP_LCD_Init+0x184>)
 8004ab4:	f005 fb88 	bl	800a1c8 <BSP_STM32_LTDC_EnableLayer>

	// Programming LTDC line interrupt
	BSP_STM32_LTDC_SetLineInt(LTDC, (uint32_t)LCD_HEIGHT);
 8004ab8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004abc:	4806      	ldr	r0, [pc, #24]	; (8004ad8 <BSP_LCD_Init+0x184>)
 8004abe:	f005 fcef 	bl	800a4a0 <BSP_STM32_LTDC_SetLineInt>
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	24000240 	.word	0x24000240
 8004ad0:	0005dc00 	.word	0x0005dc00
 8004ad4:	c3e00000 	.word	0xc3e00000
 8004ad8:	50001000 	.word	0x50001000
 8004adc:	52003000 	.word	0x52003000

08004ae0 <BSP_LCD_FrameReady>:


void BSP_LCD_FrameReady(void) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
	// Marking EDIT frame as READY for display
	// Marking previous READY frame (if exists) as EDIT, else IDLE becoming EDIT

	// Waiting for any DMA2D in progress
	BSP_LCD_DMA2D_Wait();
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <BSP_LCD_FrameReady+0x90>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4798      	blx	r3

	uint8_t t = BSP_hlcd.Layers[0].Frame_READY;
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004aee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004af2:	73fb      	strb	r3, [r7, #15]
	BSP_hlcd.Layers[0].Frame_READY = BSP_hlcd.Layers[0].Frame_EDIT;
 8004af4:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004af6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	BSP_hlcd.Layers[0].Frame_PREV = BSP_hlcd.Layers[0].Frame_EDIT;
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	if (t<255) BSP_hlcd.Layers[0].Frame_EDIT = t;
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2bff      	cmp	r3, #255	; 0xff
 8004b14:	d004      	beq.n	8004b20 <BSP_LCD_FrameReady+0x40>
 8004b16:	4a17      	ldr	r2, [pc, #92]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
 8004b1e:	e00a      	b.n	8004b36 <BSP_LCD_FrameReady+0x56>
		else {
			BSP_hlcd.Layers[0].Frame_EDIT = BSP_hlcd.Layers[0].Frame_IDLE;
 8004b20:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			BSP_hlcd.Layers[0].Frame_IDLE = t;
 8004b2e:	4a11      	ldr	r2, [pc, #68]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
		}

	// Calculating frame time [ms]. FPS = 1000 / frametime.
	uint32_t timestamp = BSP_GetTick();
 8004b36:	f001 fc31 	bl	800639c <BSP_GetTick>
 8004b3a:	60b8      	str	r0, [r7, #8]
	uint32_t dt = timestamp - BSP_hlcd.priv_.l_timestamp[0];
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	607b      	str	r3, [r7, #4]
	BSP_hlcd.priv_.l_timestamp[0] = timestamp;
 8004b46:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6013      	str	r3, [r2, #0]
	BSP_hlcd.frametime[0] = (BSP_hlcd.frametime[0] * 768 + (dt << 8)) >> 10; // Moving average
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	4413      	add	r3, r2
 8004b60:	0a9b      	lsrs	r3, r3, #10
 8004b62:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <BSP_LCD_FrameReady+0x94>)
 8004b64:	6553      	str	r3, [r2, #84]	; 0x54
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	240002a8 	.word	0x240002a8
 8004b74:	24000240 	.word	0x24000240

08004b78 <BSP_LCD_InitBackLight>:
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(0)));
	return (uint8_t)(l->CACR & LTDC_LxCACR_CONSTA);
}


void BSP_LCD_InitBackLight(uint8_t value) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
	// PWM Timer - base configration
	// Option 1: PWM Frequency = 200MHz Input clock / Prescaler (7+1) / Reload value (999+1) = 25kHz
	// Option 2: PWM Frequency = 240MHz Input clock / Prescaler (7+1) / Reload value (999+1) = 30kHz

	BSP_hlcd.priv_.bklt_setting = (int32_t)value << 6;
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	019b      	lsls	r3, r3, #6
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <BSP_LCD_InitBackLight+0x68>)
 8004b88:	6113      	str	r3, [r2, #16]
	BSP_hlcd.priv_.bklt_value = BSP_hlcd.priv_.bklt_setting;
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <BSP_LCD_InitBackLight+0x68>)
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <BSP_LCD_InitBackLight+0x68>)
 8004b90:	60d3      	str	r3, [r2, #12]
	BSP_hlcd.priv_.bklt_dimspeed = 0;
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <BSP_LCD_InitBackLight+0x68>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	615a      	str	r2, [r3, #20]

	uint32_t val = (((uint32_t)(BSP_hlcd.priv_.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8004b98:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <BSP_LCD_InitBackLight+0x68>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	119b      	asrs	r3, r3, #6
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <BSP_LCD_InitBackLight+0x6c>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	33c8      	adds	r3, #200	; 0xc8
 8004bb2:	60fb      	str	r3, [r7, #12]

	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 8004bb4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004bb8:	2207      	movs	r2, #7
 8004bba:	2100      	movs	r1, #0
 8004bbc:	480a      	ldr	r0, [pc, #40]	; (8004be8 <BSP_LCD_InitBackLight+0x70>)
 8004bbe:	f008 fe2f 	bl	800d820 <BSP_STM32_TIM_Init>
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2206      	movs	r2, #6
 8004bc8:	2103      	movs	r1, #3
 8004bca:	4807      	ldr	r0, [pc, #28]	; (8004be8 <BSP_LCD_InitBackLight+0x70>)
 8004bcc:	f008 fe68 	bl	800d8a0 <BSP_STM32_TIM_ConfigChannel>
	BSP_STM32_TIM_Start(LCD_BKL_TIM);
 8004bd0:	4805      	ldr	r0, [pc, #20]	; (8004be8 <BSP_LCD_InitBackLight+0x70>)
 8004bd2:	f008 feee 	bl	800d9b2 <BSP_STM32_TIM_Start>
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	24000240 	.word	0x24000240
 8004be4:	51eb851f 	.word	0x51eb851f
 8004be8:	40000400 	.word	0x40000400

08004bec <BSP_LCD_SetBackLight>:


void BSP_LCD_SetBackLight(uint8_t value, uint8_t dimspeed) {
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	460a      	mov	r2, r1
 8004bf6:	71fb      	strb	r3, [r7, #7]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71bb      	strb	r3, [r7, #6]
	// Sets backlight value 0 - 100%

	BSP_hlcd.priv_.bklt_setting = (int32_t)value << 6;
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	019b      	lsls	r3, r3, #6
 8004c00:	4a05      	ldr	r2, [pc, #20]	; (8004c18 <BSP_LCD_SetBackLight+0x2c>)
 8004c02:	6113      	str	r3, [r2, #16]
	BSP_hlcd.priv_.bklt_dimspeed = (int32_t)dimspeed;
 8004c04:	79bb      	ldrb	r3, [r7, #6]
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <BSP_LCD_SetBackLight+0x2c>)
 8004c08:	6153      	str	r3, [r2, #20]

}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	24000240 	.word	0x24000240

08004c1c <BSP_LCD_DecodeJPEG>:

	return value;
}


void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
	// Decode JPEG into intermediate buffer (organized in YCbCr MCU blocks)
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGBuf, LCD_JPEGBUF_SIZE);
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <BSP_LCD_DecodeJPEG+0x28>)
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c2e:	9200      	str	r2, [sp, #0]
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4804      	ldr	r0, [pc, #16]	; (8004c48 <BSP_LCD_DecodeJPEG+0x2c>)
 8004c36:	f005 f9bc 	bl	8009fb2 <BSP_STM32_JPEG_Decode>
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	24000240 	.word	0x24000240
 8004c48:	52003000 	.word	0x52003000

08004c4c <LTDC_IRQHandler>:
 * Callback for blanking interval. Updating display buffer.
 ******************************************************************************/

// INT Handler for LTDC controller
void LTDC_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
	if (BSP_STM32_LTDC_IRQHandler(LTDC)==BSP_OK) {
 8004c52:	4856      	ldr	r0, [pc, #344]	; (8004dac <LTDC_IRQHandler+0x160>)
 8004c54:	f005 fc42 	bl	800a4dc <BSP_STM32_LTDC_IRQHandler>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 80a3 	bne.w	8004da6 <LTDC_IRQHandler+0x15a>

		// Updating backlight brightness
		if (BSP_hlcd.priv_.bklt_value != BSP_hlcd.priv_.bklt_setting) {
 8004c60:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	4b52      	ldr	r3, [pc, #328]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d042      	beq.n	8004cf2 <LTDC_IRQHandler+0xa6>
			if (BSP_hlcd.priv_.bklt_value < BSP_hlcd.priv_.bklt_setting) {
 8004c6c:	4b50      	ldr	r3, [pc, #320]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	4b4f      	ldr	r3, [pc, #316]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	da10      	bge.n	8004c9a <LTDC_IRQHandler+0x4e>
				BSP_hlcd.priv_.bklt_value += BSP_hlcd.priv_.bklt_dimspeed;
 8004c78:	4b4d      	ldr	r3, [pc, #308]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	4a4b      	ldr	r2, [pc, #300]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c84:	60d3      	str	r3, [r2, #12]
				if (BSP_hlcd.priv_.bklt_value > BSP_hlcd.priv_.bklt_setting) BSP_hlcd.priv_.bklt_value = BSP_hlcd.priv_.bklt_setting;
 8004c86:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	dd03      	ble.n	8004c9a <LTDC_IRQHandler+0x4e>
 8004c92:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	4a46      	ldr	r2, [pc, #280]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c98:	60d3      	str	r3, [r2, #12]
			}

			if (BSP_hlcd.priv_.bklt_value > BSP_hlcd.priv_.bklt_setting) {
 8004c9a:	4b45      	ldr	r3, [pc, #276]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	4b44      	ldr	r3, [pc, #272]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	dd10      	ble.n	8004cc8 <LTDC_IRQHandler+0x7c>
				BSP_hlcd.priv_.bklt_value -= BSP_hlcd.priv_.bklt_dimspeed;
 8004ca6:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	4a41      	ldr	r2, [pc, #260]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004cac:	68d2      	ldr	r2, [r2, #12]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	4a3f      	ldr	r2, [pc, #252]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004cb2:	60d3      	str	r3, [r2, #12]
				if (BSP_hlcd.priv_.bklt_value < BSP_hlcd.priv_.bklt_setting) BSP_hlcd.priv_.bklt_value = BSP_hlcd.priv_.bklt_setting;
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	da03      	bge.n	8004cc8 <LTDC_IRQHandler+0x7c>
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	4a3a      	ldr	r2, [pc, #232]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004cc6:	60d3      	str	r3, [r2, #12]
			}

			uint32_t val = (((uint32_t)(BSP_hlcd.priv_.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8004cc8:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	119b      	asrs	r3, r3, #6
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
 8004cd8:	4a36      	ldr	r2, [pc, #216]	; (8004db4 <LTDC_IRQHandler+0x168>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	33c8      	adds	r3, #200	; 0xc8
 8004ce2:	607b      	str	r3, [r7, #4]
			BSP_STM32_TIM_SetChannelValue(LCD_BKL_TIM, 3, val);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2103      	movs	r1, #3
 8004cec:	4832      	ldr	r0, [pc, #200]	; (8004db8 <LTDC_IRQHandler+0x16c>)
 8004cee:	f008 fe71 	bl	800d9d4 <BSP_STM32_TIM_SetChannelValue>
		}

		// Switching frames
		switch (BSP_hlcd.config_.buffermode) {
 8004cf2:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d029      	beq.n	8004d50 <LTDC_IRQHandler+0x104>
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d152      	bne.n	8004da6 <LTDC_IRQHandler+0x15a>
		case LCD_BUFFER_MODE_TRIPLE:

			if (BSP_hlcd.Layers[0].Frame_READY < 255) {
 8004d00:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2bff      	cmp	r3, #255	; 0xff
 8004d0a:	d049      	beq.n	8004da0 <LTDC_IRQHandler+0x154>
				uint8_t t = BSP_hlcd.Layers[0].Frame_ACTIVE;
 8004d0c:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d0e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004d12:	70fb      	strb	r3, [r7, #3]
				BSP_hlcd.Layers[0].Frame_ACTIVE = BSP_hlcd.Layers[0].Frame_READY;
 8004d14:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d1e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				BSP_hlcd.Layers[0].Frame_IDLE = t;
 8004d22:	4a23      	ldr	r2, [pc, #140]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				BSP_hlcd.Layers[0].Frame_READY = 255;
 8004d2a:	4b21      	ldr	r3, [pc, #132]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d2c:	22ff      	movs	r2, #255	; 0xff
 8004d2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

				// Updating Framebuffer address
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.Layers[0].Frames[BSP_hlcd.Layers[0].Frame_ACTIVE]);
 8004d32:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d34:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d3c:	330a      	adds	r3, #10
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	461a      	mov	r2, r3
 8004d46:	2100      	movs	r1, #0
 8004d48:	4818      	ldr	r0, [pc, #96]	; (8004dac <LTDC_IRQHandler+0x160>)
 8004d4a:	f005 fb17 	bl	800a37c <BSP_STM32_LTDC_UpdateFrameBufAddr>

			}
			return;
 8004d4e:	e027      	b.n	8004da0 <LTDC_IRQHandler+0x154>

		case LCD_BUFFER_MODE_DOUBLE:

			if (BSP_hlcd.Layers[0].Frame_READY < 255) {
 8004d50:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2bff      	cmp	r3, #255	; 0xff
 8004d5a:	d023      	beq.n	8004da4 <LTDC_IRQHandler+0x158>
				uint8_t t = BSP_hlcd.Layers[0].Frame_ACTIVE;
 8004d5c:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d5e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004d62:	70bb      	strb	r3, [r7, #2]
				BSP_hlcd.Layers[0].Frame_ACTIVE = BSP_hlcd.Layers[0].Frame_READY;
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d6e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				BSP_hlcd.Layers[0].Frame_EDIT = t;
 8004d72:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d74:	78bb      	ldrb	r3, [r7, #2]
 8004d76:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
				BSP_hlcd.Layers[0].Frame_READY = 255;
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

				// Updating Framebuffer address
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.Layers[0].Frames[BSP_hlcd.Layers[0].Frame_ACTIVE]);
 8004d82:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d84:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <LTDC_IRQHandler+0x164>)
 8004d8c:	330a      	adds	r3, #10
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	461a      	mov	r2, r3
 8004d96:	2100      	movs	r1, #0
 8004d98:	4804      	ldr	r0, [pc, #16]	; (8004dac <LTDC_IRQHandler+0x160>)
 8004d9a:	f005 faef 	bl	800a37c <BSP_STM32_LTDC_UpdateFrameBufAddr>

			}
			return;
 8004d9e:	e001      	b.n	8004da4 <LTDC_IRQHandler+0x158>
			return;
 8004da0:	bf00      	nop
 8004da2:	e000      	b.n	8004da6 <LTDC_IRQHandler+0x15a>
			return;
 8004da4:	bf00      	nop

		}

	}

}
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	50001000 	.word	0x50001000
 8004db0:	24000240 	.word	0x24000240
 8004db4:	51eb851f 	.word	0x51eb851f
 8004db8:	40000400 	.word	0x40000400

08004dbc <DMA2D_IRQHandler>:

// INT Handler for DMA2D
void DMA2D_IRQHandler(void) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0

	// Update state flag
	if (BSP_STM32_DMA2D_IRQHandler(DMA2D) == BSP_OK) BSP_hlcd.priv_.dma2d_state = LCD_DMA2D_READY;
 8004dc0:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <DMA2D_IRQHandler+0x1c>)
 8004dc2:	f004 f963 	bl	800908c <BSP_STM32_DMA2D_IRQHandler>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <DMA2D_IRQHandler+0x16>
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <DMA2D_IRQHandler+0x20>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	609a      	str	r2, [r3, #8]
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	52001000 	.word	0x52001000
 8004ddc:	24000240 	.word	0x24000240

08004de0 <BSP_LCD_TP_Init>:

BUF_RAM	LCD_TP_HandleTypeDef	BSP_hlcdtp = {0};
		TxRxContext_TypeDef		BSP_hlcdtp_ctx = {0};


uint8_t BSP_LCD_TP_Init() {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af04      	add	r7, sp, #16
	// Configuring I2C interface
	if (BSP_STM32_I2C_Init(I2C1)) return BSP_ERROR;
 8004de6:	4825      	ldr	r0, [pc, #148]	; (8004e7c <BSP_LCD_TP_Init+0x9c>)
 8004de8:	f004 fd42 	bl	8009870 <BSP_STM32_I2C_Init>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <BSP_LCD_TP_Init+0x16>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e03f      	b.n	8004e76 <BSP_LCD_TP_Init+0x96>

	// Linking DMA stream to I2C context
	BSP_STM32_DMA_Init(DMA1_Stream2, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_BYTE, DMA_MDATAALIGN_BYTE, DMA_NORMAL, DMA_PRIORITY_LOW);
 8004df6:	2300      	movs	r3, #0
 8004df8:	9303      	str	r3, [sp, #12]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9302      	str	r3, [sp, #8]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	481c      	ldr	r0, [pc, #112]	; (8004e80 <BSP_LCD_TP_Init+0xa0>)
 8004e10:	f003 fc1a 	bl	8008648 <BSP_STM32_DMA_Init>
	if (BSP_STM32_DMA_CtxLink(DMA1_Stream2, &BSP_hlcdtp_ctx, DMA_REQUEST_I2C1_RX)) return BSP_ERROR;
 8004e14:	2221      	movs	r2, #33	; 0x21
 8004e16:	491b      	ldr	r1, [pc, #108]	; (8004e84 <BSP_LCD_TP_Init+0xa4>)
 8004e18:	4819      	ldr	r0, [pc, #100]	; (8004e80 <BSP_LCD_TP_Init+0xa0>)
 8004e1a:	f003 fc61 	bl	80086e0 <BSP_STM32_DMA_CtxLink>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <BSP_LCD_TP_Init+0x48>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e026      	b.n	8004e76 <BSP_LCD_TP_Init+0x96>

	// Reset Panel Controller
	BSP_STM32_GPIO_WritePin(BSP_LCD_TP_RST_PORT, BSP_LCD_TP_RST_PIN, GPIO_PIN_RESET);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e2e:	4816      	ldr	r0, [pc, #88]	; (8004e88 <BSP_LCD_TP_Init+0xa8>)
 8004e30:	f004 fb22 	bl	8009478 <BSP_STM32_GPIO_WritePin>
	BSP_Delay(5);
 8004e34:	2005      	movs	r0, #5
 8004e36:	f001 fabd 	bl	80063b4 <BSP_Delay>
	BSP_STM32_GPIO_WritePin(BSP_LCD_TP_RST_PORT, BSP_LCD_TP_RST_PIN, GPIO_PIN_SET);
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e40:	4811      	ldr	r0, [pc, #68]	; (8004e88 <BSP_LCD_TP_Init+0xa8>)
 8004e42:	f004 fb19 	bl	8009478 <BSP_STM32_GPIO_WritePin>
	BSP_Delay(5);
 8004e46:	2005      	movs	r0, #5
 8004e48:	f001 fab4 	bl	80063b4 <BSP_Delay>

	// Testing connection
	if (BSP_STM32_I2C_IsDeviceReady(I2C1, (LCD_TP_I2C_ADDR) << 1, 4, 1000)) return BSP_ERROR;
 8004e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e50:	2204      	movs	r2, #4
 8004e52:	2170      	movs	r1, #112	; 0x70
 8004e54:	4809      	ldr	r0, [pc, #36]	; (8004e7c <BSP_LCD_TP_Init+0x9c>)
 8004e56:	f004 fd49 	bl	80098ec <BSP_STM32_I2C_IsDeviceReady>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <BSP_LCD_TP_Init+0x84>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e008      	b.n	8004e76 <BSP_LCD_TP_Init+0x96>

	// Initialization of Touch Panel
	if (BSP_DRV_LCD_TP_Init(I2C1)) return BSP_ERROR;
 8004e64:	4805      	ldr	r0, [pc, #20]	; (8004e7c <BSP_LCD_TP_Init+0x9c>)
 8004e66:	f7fc f9fd 	bl	8001264 <BSP_DRV_LCD_TP_Init>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <BSP_LCD_TP_Init+0x94>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <BSP_LCD_TP_Init+0x96>

	return BSP_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40005400 	.word	0x40005400
 8004e80:	40020040 	.word	0x40020040
 8004e84:	240002cc 	.word	0x240002cc
 8004e88:	58021800 	.word	0x58021800

08004e8c <BSP_LCD_TP_INTHandler>:

	return BSP_OK;
}


void BSP_LCD_TP_INTHandler() {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af02      	add	r7, sp, #8
	// New data available from touch panel, start receiving
	//BSP_STM32_I2C_MemReadIT(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
	BSP_STM32_I2C_MemRead(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
 8004e92:	231f      	movs	r3, #31
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <BSP_LCD_TP_INTHandler+0x20>)
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2270      	movs	r2, #112	; 0x70
 8004e9e:	4904      	ldr	r1, [pc, #16]	; (8004eb0 <BSP_LCD_TP_INTHandler+0x24>)
 8004ea0:	4804      	ldr	r0, [pc, #16]	; (8004eb4 <BSP_LCD_TP_INTHandler+0x28>)
 8004ea2:	f004 fe37 	bl	8009b14 <BSP_STM32_I2C_MemRead>
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	3800007c 	.word	0x3800007c
 8004eb0:	240002cc 	.word	0x240002cc
 8004eb4:	40005400 	.word	0x40005400

08004eb8 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
	// Receiving and parsing data from touch panel
	if (BSP_STM32_I2C_IRQHandler(I2C1, &BSP_hlcdtp_ctx) == BSP_OK) BSP_DRV_LCD_TP_Parse(&BSP_hlcdtp);
 8004ebc:	4905      	ldr	r1, [pc, #20]	; (8004ed4 <I2C1_EV_IRQHandler+0x1c>)
 8004ebe:	4806      	ldr	r0, [pc, #24]	; (8004ed8 <I2C1_EV_IRQHandler+0x20>)
 8004ec0:	f004 fe65 	bl	8009b8e <BSP_STM32_I2C_IRQHandler>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <I2C1_EV_IRQHandler+0x18>
 8004eca:	4804      	ldr	r0, [pc, #16]	; (8004edc <I2C1_EV_IRQHandler+0x24>)
 8004ecc:	f7fc f9d8 	bl	8001280 <BSP_DRV_LCD_TP_Parse>
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	240002cc 	.word	0x240002cc
 8004ed8:	40005400 	.word	0x40005400
 8004edc:	3800007c 	.word	0x3800007c

08004ee0 <BSP_QSPI_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_QSPI.h"

uint8_t BSP_QSPI_Init() {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af02      	add	r7, sp, #8
	if (BSP_STM32_QSPI_Init(BSP_QSPI, BSP_QSPI_PRESCALER, BSP_QSPI_CLOCKMODE, 1, BSP_QSPI_MEMSIZE)) return BSP_ERROR;
 8004ee6:	2317      	movs	r3, #23
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	2301      	movs	r3, #1
 8004eec:	2201      	movs	r2, #1
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4809      	ldr	r0, [pc, #36]	; (8004f18 <BSP_QSPI_Init+0x38>)
 8004ef2:	f005 fd41 	bl	800a978 <BSP_STM32_QSPI_Init>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <BSP_QSPI_Init+0x20>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e008      	b.n	8004f12 <BSP_QSPI_Init+0x32>
	if (BSP_DRV_QSPI_Init(QUADSPI)) return BSP_ERROR;
 8004f00:	4805      	ldr	r0, [pc, #20]	; (8004f18 <BSP_QSPI_Init+0x38>)
 8004f02:	f7fb fc36 	bl	8000772 <BSP_DRV_QSPI_Init>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <BSP_QSPI_Init+0x30>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <BSP_QSPI_Init+0x32>

	return BSP_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	52005000 	.word	0x52005000

08004f1c <BSP_Res_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_Resources.h"

uint8_t BSP_Res_Init(ResCtx_TypeDef *resctx, uint32_t resAddr, uint32_t resSize) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]

	FRESULT res;

	// Initiating variables

	resctx->resAddr = resAddr;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f8c2 3840 	str.w	r3, [r2, #2112]	; 0x840
	resctx->resSize = resSize;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8c2 3844 	str.w	r3, [r2, #2116]	; 0x844
	resctx->resFree = resSize;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8c2 3848 	str.w	r3, [r2, #2120]	; 0x848
	resctx->resIndex = (resAddr % 4)?(4 - (resAddr % 4)):0;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <BSP_Res_Init+0x4c>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	f1c3 0304 	rsb	r3, r3, #4
 8004f66:	e000      	b.n	8004f6a <BSP_Res_Init+0x4e>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f70:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c

	// Cleaning reserved resource space

	memset((uint8_t *)resctx->resAddr, 0, resctx->resSize);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7a:	f8d3 3840 	ldr.w	r3, [r3, #2112]	; 0x840
 8004f7e:	4618      	mov	r0, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f86:	f8d3 3844 	ldr.w	r3, [r3, #2116]	; 0x844
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	f013 fd94 	bl	8018aba <memset>

	// Cleaning item list
	for (uint16_t id=0; id<RES_ITEM_NUM; id++) {
 8004f92:	2300      	movs	r3, #0
 8004f94:	82fb      	strh	r3, [r7, #22]
 8004f96:	e00d      	b.n	8004fb4 <BSP_Res_Init+0x98>
		resctx->items[id].addr = 0;
 8004f98:	8afa      	ldrh	r2, [r7, #22]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		resctx->items[id].size = 0;
 8004fa2:	8afb      	ldrh	r3, [r7, #22]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	605a      	str	r2, [r3, #4]
	for (uint16_t id=0; id<RES_ITEM_NUM; id++) {
 8004fae:	8afb      	ldrh	r3, [r7, #22]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	82fb      	strh	r3, [r7, #22]
 8004fb4:	8afb      	ldrh	r3, [r7, #22]
 8004fb6:	2bff      	cmp	r3, #255	; 0xff
 8004fb8:	d9ee      	bls.n	8004f98 <BSP_Res_Init+0x7c>
	}

	// Mounting File System
	f_init();
 8004fba:	f008 ff1f 	bl	800ddfc <f_init>
	res = f_mount(&resctx->fs, "0:/", 1);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4908      	ldr	r1, [pc, #32]	; (8004fe8 <BSP_Res_Init+0xcc>)
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f00c fcff 	bl	80119cc <f_mount>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	757b      	strb	r3, [r7, #21]
	if (res) return res;
 8004fd2:	7d7b      	ldrb	r3, [r7, #21]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <BSP_Res_Init+0xc0>
 8004fd8:	7d7b      	ldrb	r3, [r7, #21]
 8004fda:	e000      	b.n	8004fde <BSP_Res_Init+0xc2>

	return FR_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	08018ee0 	.word	0x08018ee0

08004fec <BSP_Res_Load>:

uint8_t BSP_Res_Load(ResCtx_TypeDef *resctx, char *filename, uint16_t id) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004ff8:	f843 0c74 	str.w	r0, [r3, #-116]
 8004ffc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005000:	f843 1c78 	str.w	r1, [r3, #-120]
 8005004:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005008:	f823 2c7a 	strh.w	r2, [r3, #-122]
	FIL	file;
	FRESULT res;

	// Opening file

	res = f_open(&file, filename, FA_READ);
 800500c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005010:	4619      	mov	r1, r3
 8005012:	4b86      	ldr	r3, [pc, #536]	; (800522c <BSP_Res_Load+0x240>)
 8005014:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8005018:	443b      	add	r3, r7
 800501a:	2201      	movs	r2, #1
 800501c:	f851 1c78 	ldr.w	r1, [r1, #-120]
 8005020:	4618      	mov	r0, r3
 8005022:	f00c fd1f 	bl	8011a64 <f_open>
 8005026:	4603      	mov	r3, r0
 8005028:	f241 027b 	movw	r2, #4219	; 0x107b
 800502c:	443a      	add	r2, r7
 800502e:	7013      	strb	r3, [r2, #0]
	if (res) return res;
 8005030:	f241 037b 	movw	r3, #4219	; 0x107b
 8005034:	443b      	add	r3, r7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d004      	beq.n	8005046 <BSP_Res_Load+0x5a>
 800503c:	f241 037b 	movw	r3, #4219	; 0x107b
 8005040:	443b      	add	r3, r7
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	e0ec      	b.n	8005220 <BSP_Res_Load+0x234>

	uint32_t fsize = f_size(&file);
 8005046:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800504a:	e953 2316 	ldrd	r2, r3, [r3, #-88]	; 0x58
 800504e:	4613      	mov	r3, r2
 8005050:	f241 0274 	movw	r2, #4212	; 0x1074
 8005054:	443a      	add	r2, r7
 8005056:	6013      	str	r3, [r2, #0]
	uint32_t findex = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	f241 027c 	movw	r2, #4220	; 0x107c
 800505e:	443a      	add	r2, r7
 8005060:	6013      	str	r3, [r2, #0]
	uint32_t fread = 0;
 8005062:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005066:	461a      	mov	r2, r3
 8005068:	2300      	movs	r3, #0
 800506a:	f842 3c6c 	str.w	r3, [r2, #-108]

	if (fsize > resctx->resFree) return FR_DENIED;
 800506e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005072:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8005076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507a:	f8d3 3848 	ldr.w	r3, [r3, #2120]	; 0x848
 800507e:	f241 0274 	movw	r2, #4212	; 0x1074
 8005082:	443a      	add	r2, r7
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d901      	bls.n	800508e <BSP_Res_Load+0xa2>
 800508a:	2307      	movs	r3, #7
 800508c:	e0c8      	b.n	8005220 <BSP_Res_Load+0x234>

	// Calculating start address
	uint32_t startaddress = resctx->resAddr + resctx->resIndex;
 800508e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005092:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8005096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509a:	f8d3 2840 	ldr.w	r2, [r3, #2112]	; 0x840
 800509e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80050a2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80050a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050aa:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 80050ae:	4413      	add	r3, r2
 80050b0:	f241 0270 	movw	r2, #4208	; 0x1070
 80050b4:	443a      	add	r2, r7
 80050b6:	6013      	str	r3, [r2, #0]

	// Reading file into SDRAM
	while (findex < fsize) {
 80050b8:	e032      	b.n	8005120 <BSP_Res_Load+0x134>
		res = f_read(&file, (uint8_t *)(startaddress + findex), 4096, (UINT *)&fread);
 80050ba:	f241 0370 	movw	r3, #4208	; 0x1070
 80050be:	443b      	add	r3, r7
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	f241 037c 	movw	r3, #4220	; 0x107c
 80050c6:	443b      	add	r3, r7
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4413      	add	r3, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	4b58      	ldr	r3, [pc, #352]	; (8005230 <BSP_Res_Load+0x244>)
 80050d0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80050d4:	443b      	add	r3, r7
 80050d6:	4855      	ldr	r0, [pc, #340]	; (800522c <BSP_Res_Load+0x240>)
 80050d8:	f500 5284 	add.w	r2, r0, #4224	; 0x1080
 80050dc:	19d0      	adds	r0, r2, r7
 80050de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050e2:	f00c ff4e 	bl	8011f82 <f_read>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f241 027b 	movw	r2, #4219	; 0x107b
 80050ec:	443a      	add	r2, r7
 80050ee:	7013      	strb	r3, [r2, #0]
		if (res) return res;
 80050f0:	f241 037b 	movw	r3, #4219	; 0x107b
 80050f4:	443b      	add	r3, r7
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <BSP_Res_Load+0x11a>
 80050fc:	f241 037b 	movw	r3, #4219	; 0x107b
 8005100:	443b      	add	r3, r7
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	e08c      	b.n	8005220 <BSP_Res_Load+0x234>
		findex += fread;
 8005106:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800510a:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800510e:	f241 027c 	movw	r2, #4220	; 0x107c
 8005112:	443a      	add	r2, r7
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	4413      	add	r3, r2
 8005118:	f241 027c 	movw	r2, #4220	; 0x107c
 800511c:	443a      	add	r2, r7
 800511e:	6013      	str	r3, [r2, #0]
	while (findex < fsize) {
 8005120:	f241 037c 	movw	r3, #4220	; 0x107c
 8005124:	443b      	add	r3, r7
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	f241 0374 	movw	r3, #4212	; 0x1074
 800512c:	443b      	add	r3, r7
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d3c2      	bcc.n	80050ba <BSP_Res_Load+0xce>
	}

	// Updating resource item list
	resctx->items[id].addr = startaddress;
 8005134:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005138:	f833 2c7a 	ldrh.w	r2, [r3, #-122]
 800513c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005140:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8005144:	f241 0170 	movw	r1, #4208	; 0x1070
 8005148:	4439      	add	r1, r7
 800514a:	6809      	ldr	r1, [r1, #0]
 800514c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	resctx->items[id].size = fsize;
 8005150:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005154:	f833 3c7a 	ldrh.w	r3, [r3, #-122]
 8005158:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800515c:	f852 2c74 	ldr.w	r2, [r2, #-116]
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	f241 0274 	movw	r2, #4212	; 0x1074
 8005168:	443a      	add	r2, r7
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	605a      	str	r2, [r3, #4]
	resctx->resIndex += fsize;
 800516e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005172:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8005176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517a:	f8d3 284c 	ldr.w	r2, [r3, #2124]	; 0x84c
 800517e:	f241 0374 	movw	r3, #4212	; 0x1074
 8005182:	443b      	add	r3, r7
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4413      	add	r3, r2
 8005188:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800518c:	f852 2c74 	ldr.w	r2, [r2, #-116]
 8005190:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005194:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c

	// Aligning index to next whole 4 bytes;
	resctx->resIndex &= 0xFFFFFFFC;
 8005198:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800519c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 80051a8:	f023 0303 	bic.w	r3, r3, #3
 80051ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80051b0:	f852 2c74 	ldr.w	r2, [r2, #-116]
 80051b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051b8:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
	resctx->resIndex += 4;
 80051bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80051c0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80051c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c8:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 80051cc:	3304      	adds	r3, #4
 80051ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80051d2:	f852 2c74 	ldr.w	r2, [r2, #-116]
 80051d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051da:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
	resctx->resFree = resctx->resSize - resctx->resIndex;
 80051de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80051e2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80051e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ea:	f8d3 2844 	ldr.w	r2, [r3, #2116]	; 0x844
 80051ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80051f2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80051f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fa:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005204:	f852 2c74 	ldr.w	r2, [r2, #-116]
 8005208:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800520c:	f8c2 3848 	str.w	r3, [r2, #2120]	; 0x848

	// Closing file
	f_close(&file);
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <BSP_Res_Load+0x240>)
 8005212:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8005216:	443b      	add	r3, r7
 8005218:	4618      	mov	r0, r3
 800521a:	f00d f968 	bl	80124ee <f_close>

	return FR_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	ffffef98 	.word	0xffffef98
 8005230:	ffffef94 	.word	0xffffef94

08005234 <BSP_Res_GetAddr>:


uint32_t BSP_Res_GetAddr(ResCtx_TypeDef *resctx, uint16_t id) {
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
	return resctx->items[id].addr;
 8005240:	887a      	ldrh	r2, [r7, #2]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <BSP_Res_GetSize>:

uint32_t BSP_Res_GetSize(ResCtx_TypeDef *resctx, uint16_t id) {
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	807b      	strh	r3, [r7, #2]
	return resctx->items[id].size;
 8005260:	887b      	ldrh	r3, [r7, #2]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	685b      	ldr	r3, [r3, #4]
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <BSP_SDCARD_Init>:

TxRxContext_TypeDef	hsdcardctx = {0};



uint8_t BSP_SDCARD_Init() {
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
	if (BSP_STM32_SDMMC_Init(SDMMC2, &hsdcardctx)) return BSP_ERROR;
 800527c:	4905      	ldr	r1, [pc, #20]	; (8005294 <BSP_SDCARD_Init+0x1c>)
 800527e:	4806      	ldr	r0, [pc, #24]	; (8005298 <BSP_SDCARD_Init+0x20>)
 8005280:	f007 fa84 	bl	800c78c <BSP_STM32_SDMMC_Init>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <BSP_SDCARD_Init+0x16>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <BSP_SDCARD_Init+0x18>
	return BSP_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	24000334 	.word	0x24000334
 8005298:	48022400 	.word	0x48022400

0800529c <BSP_SDCARD_ReadBlocks>:

uint8_t BSP_SDCARD_ReadBlocks(uint8_t * pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	if (BSP_STM32_SDMMC_ReadBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	490a      	ldr	r1, [pc, #40]	; (80052dc <BSP_SDCARD_ReadBlocks+0x40>)
 80052b2:	480b      	ldr	r0, [pc, #44]	; (80052e0 <BSP_SDCARD_ReadBlocks+0x44>)
 80052b4:	f007 fb3e 	bl	800c934 <BSP_STM32_SDMMC_ReadBlocks>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <BSP_SDCARD_ReadBlocks+0x26>
 80052be:	2301      	movs	r3, #1
 80052c0:	e008      	b.n	80052d4 <BSP_SDCARD_ReadBlocks+0x38>
	//Wait until operation finish
	while(!(BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER)) {}
 80052c2:	bf00      	nop
 80052c4:	4905      	ldr	r1, [pc, #20]	; (80052dc <BSP_SDCARD_ReadBlocks+0x40>)
 80052c6:	4806      	ldr	r0, [pc, #24]	; (80052e0 <BSP_SDCARD_ReadBlocks+0x44>)
 80052c8:	f007 fa41 	bl	800c74e <BSP_STM32_SDMMC_GetCardState>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d1f8      	bne.n	80052c4 <BSP_SDCARD_ReadBlocks+0x28>
	return BSP_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	24000334 	.word	0x24000334
 80052e0:	48022400 	.word	0x48022400

080052e4 <BSP_SDCARD_WriteBlocks>:

uint8_t BSP_SDCARD_WriteBlocks(uint8_t * pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
	if (BSP_STM32_SDMMC_WriteBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	490a      	ldr	r1, [pc, #40]	; (8005324 <BSP_SDCARD_WriteBlocks+0x40>)
 80052fa:	480b      	ldr	r0, [pc, #44]	; (8005328 <BSP_SDCARD_WriteBlocks+0x44>)
 80052fc:	f007 fbee 	bl	800cadc <BSP_STM32_SDMMC_WriteBlocks>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <BSP_SDCARD_WriteBlocks+0x26>
 8005306:	2301      	movs	r3, #1
 8005308:	e008      	b.n	800531c <BSP_SDCARD_WriteBlocks+0x38>
	//Wait until operation finish
	while(!(BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER)) {}
 800530a:	bf00      	nop
 800530c:	4905      	ldr	r1, [pc, #20]	; (8005324 <BSP_SDCARD_WriteBlocks+0x40>)
 800530e:	4806      	ldr	r0, [pc, #24]	; (8005328 <BSP_SDCARD_WriteBlocks+0x44>)
 8005310:	f007 fa1d 	bl	800c74e <BSP_STM32_SDMMC_GetCardState>
 8005314:	4603      	mov	r3, r0
 8005316:	2b04      	cmp	r3, #4
 8005318:	d1f8      	bne.n	800530c <BSP_SDCARD_WriteBlocks+0x28>
	return BSP_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	24000334 	.word	0x24000334
 8005328:	48022400 	.word	0x48022400

0800532c <BSP_SDCARD_GetBlockNo>:

uint32_t BSP_SDCARD_GetBlockNo() {
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	SDMMCContext_TypeDef * sdcardctx = (SDMMCContext_TypeDef *)hsdcardctx.ctxmem;
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <BSP_SDCARD_GetBlockNo+0x1c>)
 8005334:	607b      	str	r3, [r7, #4]
	return sdcardctx->SDCardLogBlockNbr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	2400035c 	.word	0x2400035c

0800534c <BSP_SDCARD_GetBlockSize>:

uint16_t BSP_SDCARD_GetBlockSize() {
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
	SDMMCContext_TypeDef * sdcardctx = (SDMMCContext_TypeDef *)hsdcardctx.ctxmem;
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <BSP_SDCARD_GetBlockSize+0x1c>)
 8005354:	607b      	str	r3, [r7, #4]
	return (uint16_t)sdcardctx->SDCardLogBlockSize;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535a:	b29b      	uxth	r3, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	2400035c 	.word	0x2400035c

0800536c <BSP_SDCARD_GetCardState>:

uint8_t BSP_SDCARD_GetCardState() {
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
	if (BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER) return BSP_OK;
 8005370:	4905      	ldr	r1, [pc, #20]	; (8005388 <BSP_SDCARD_GetCardState+0x1c>)
 8005372:	4806      	ldr	r0, [pc, #24]	; (800538c <BSP_SDCARD_GetCardState+0x20>)
 8005374:	f007 f9eb 	bl	800c74e <BSP_STM32_SDMMC_GetCardState>
 8005378:	4603      	mov	r3, r0
 800537a:	2b04      	cmp	r3, #4
 800537c:	d101      	bne.n	8005382 <BSP_SDCARD_GetCardState+0x16>
 800537e:	2300      	movs	r3, #0
 8005380:	e000      	b.n	8005384 <BSP_SDCARD_GetCardState+0x18>
	return BSP_ERROR;
 8005382:	2301      	movs	r3, #1
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	24000334 	.word	0x24000334
 800538c:	48022400 	.word	0x48022400

08005390 <BSP_SDRAM_Init>:
 *******************************************************************/

#include "BSP_SDRAM.h"

// Configuring SDRAM on the board
uint8_t	BSP_SDRAM_Init(uint32_t Freq) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	// Freq in MHz

	// Init SDRAM
	if (BSP_DRV_SDRAM_Init(FMC_SDRAM_DEVICE, FMC_SDRAM_BANK1, FMC_SDRAM_CLOCK_PERIOD_2, Freq)) return BSP_ERROR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800539e:	2100      	movs	r1, #0
 80053a0:	4806      	ldr	r0, [pc, #24]	; (80053bc <BSP_SDRAM_Init+0x2c>)
 80053a2:	f7fb fb21 	bl	80009e8 <BSP_DRV_SDRAM_Init>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <BSP_SDRAM_Init+0x20>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <BSP_SDRAM_Init+0x22>

	return BSP_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	52004140 	.word	0x52004140

080053c0 <__NVIC_SetPriority>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	6039      	str	r1, [r7, #0]
 80053ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	db0a      	blt.n	80053ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	490c      	ldr	r1, [pc, #48]	; (800540c <__NVIC_SetPriority+0x4c>)
 80053da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053de:	0112      	lsls	r2, r2, #4
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	440b      	add	r3, r1
 80053e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053e8:	e00a      	b.n	8005400 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <__NVIC_SetPriority+0x50>)
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	3b04      	subs	r3, #4
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	440b      	add	r3, r1
 80053fe:	761a      	strb	r2, [r3, #24]
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	e000e100 	.word	0xe000e100
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3b01      	subs	r3, #1
 8005420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005424:	d301      	bcc.n	800542a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005426:	2301      	movs	r3, #1
 8005428:	e00f      	b.n	800544a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800542a:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <SysTick_Config+0x40>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3b01      	subs	r3, #1
 8005430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005432:	210f      	movs	r1, #15
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	f7ff ffc2 	bl	80053c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <SysTick_Config+0x40>)
 800543e:	2200      	movs	r2, #0
 8005440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <SysTick_Config+0x40>)
 8005444:	2207      	movs	r2, #7
 8005446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	e000e010 	.word	0xe000e010

08005458 <BSP_STM32_MPU_Init>:

__IO static uint32_t tickvalue = 0;
__IO static uint32_t tickfrequency = 1;


uint8_t BSP_STM32_MPU_Init(void) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
	MPU_Region_TypeDef MPU_InitStruct = {0};
 800545e:	463b      	mov	r3, r7
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	60da      	str	r2, [r3, #12]

	// Disables the MPU
	BSP_STM32_MPU_Disable();
 800546a:	f003 f88f 	bl	800858c <BSP_STM32_MPU_Disable>

	// 0x00: CONFIGURING MPU FOR ALL ADDRESS SPACE (4GB) TO AVOID INCORRECT SPECULATIVE READ
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800546e:	2301      	movs	r3, #1
 8005470:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005472:	2300      	movs	r3, #0
 8005474:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x00000000;
 8005476:	2300      	movs	r3, #0
 8005478:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800547a:	231f      	movs	r3, #31
 800547c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800547e:	2300      	movs	r3, #0
 8005480:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005482:	2301      	movs	r3, #1
 8005484:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005486:	2300      	movs	r3, #0
 8005488:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800548e:	2301      	movs	r3, #1
 8005490:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x87; // <- Excluded areas of memory
 8005492:	2387      	movs	r3, #135	; 0x87
 8005494:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005496:	2300      	movs	r3, #0
 8005498:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800549a:	463b      	mov	r3, r7
 800549c:	4618      	mov	r0, r3
 800549e:	f003 f88d 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x01: CONFIGURING MPU FOR ITCMRAM (0x00000000, 64kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80054a2:	2301      	movs	r3, #1
 80054a4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80054a6:	2301      	movs	r3, #1
 80054a8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x00000000;
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80054ae:	230f      	movs	r3, #15
 80054b0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80054c6:	2300      	movs	r3, #0
 80054c8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 80054ca:	2301      	movs	r3, #1
 80054cc:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80054ce:	463b      	mov	r3, r7
 80054d0:	4618      	mov	r0, r3
 80054d2:	f003 f873 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x02: CONFIGURING MPU FOR FLASH (0x08000000, 512kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80054da:	2302      	movs	r3, #2
 80054dc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x08000000;
 80054de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054e2:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80054e4:	2312      	movs	r3, #18
 80054e6:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80054fc:	2300      	movs	r3, #0
 80054fe:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8005500:	2301      	movs	r3, #1
 8005502:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8005504:	463b      	mov	r3, r7
 8005506:	4618      	mov	r0, r3
 8005508:	f003 f858 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x03: CONFIGURING MPU FOR DTCMRAM (0x20000000, 128kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800550c:	2301      	movs	r3, #1
 800550e:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8005510:	2303      	movs	r3, #3
 8005512:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x20000000;
 8005514:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005518:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800551a:	2310      	movs	r3, #16
 800551c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800551e:	2301      	movs	r3, #1
 8005520:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005522:	2301      	movs	r3, #1
 8005524:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005526:	2301      	movs	r3, #1
 8005528:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800552e:	2301      	movs	r3, #1
 8005530:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8005532:	2300      	movs	r3, #0
 8005534:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8005536:	2301      	movs	r3, #1
 8005538:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800553a:	463b      	mov	r3, r7
 800553c:	4618      	mov	r0, r3
 800553e:	f003 f83d 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x04: CONFIGURING MPU FOR OS_RAM + APP_RAM (0x24000000, 512kB)
	// 0x05: CONFIGURING MPU FOR OS_RAM (0x24000000, 128kB) - Restricting access to first 128kB
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005542:	2301      	movs	r3, #1
 8005544:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8005546:	2304      	movs	r3, #4
 8005548:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x24000000;
 800554a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800554e:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8005550:	2312      	movs	r3, #18
 8005552:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8005554:	2301      	movs	r3, #1
 8005556:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005558:	2301      	movs	r3, #1
 800555a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800555c:	2301      	movs	r3, #1
 800555e:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005564:	2301      	movs	r3, #1
 8005566:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8005568:	2300      	movs	r3, #0
 800556a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800556c:	2303      	movs	r3, #3
 800556e:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8005570:	463b      	mov	r3, r7
 8005572:	4618      	mov	r0, r3
 8005574:	f003 f822 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005578:	2301      	movs	r3, #1
 800557a:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800557c:	2305      	movs	r3, #5
 800557e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x24000000;
 8005580:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8005584:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8005586:	2310      	movs	r3, #16
 8005588:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800558a:	2301      	movs	r3, #1
 800558c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800558e:	2301      	movs	r3, #1
 8005590:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005592:	2301      	movs	r3, #1
 8005594:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800559a:	2301      	movs	r3, #1
 800559c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 800559e:	2300      	movs	r3, #0
 80055a0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 80055a2:	2301      	movs	r3, #1
 80055a4:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80055a6:	463b      	mov	r3, r7
 80055a8:	4618      	mov	r0, r3
 80055aa:	f003 f807 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x06: CONFIGURING MPU FOR SND_RAM (0x30040000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 80055b2:	2306      	movs	r3, #6
 80055b4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x30040000;
 80055b6:	4b6d      	ldr	r3, [pc, #436]	; (800576c <BSP_STM32_MPU_Init+0x314>)
 80055b8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80055ba:	230e      	movs	r3, #14
 80055bc:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80055be:	2301      	movs	r3, #1
 80055c0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80055d2:	2300      	movs	r3, #0
 80055d4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 80055d6:	2301      	movs	r3, #1
 80055d8:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80055da:	463b      	mov	r3, r7
 80055dc:	4618      	mov	r0, r3
 80055de:	f002 ffed 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x07: CONFIGURING MPU FOR BUF_RAM (0x38000000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80055e2:	2301      	movs	r3, #1
 80055e4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 80055e6:	2307      	movs	r3, #7
 80055e8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x38000000;
 80055ea:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80055ee:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80055f0:	230e      	movs	r3, #14
 80055f2:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80055f4:	2301      	movs	r3, #1
 80055f6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80055f8:	2301      	movs	r3, #1
 80055fa:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005600:	2300      	movs	r3, #0
 8005602:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005604:	2301      	movs	r3, #1
 8005606:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8005608:	2300      	movs	r3, #0
 800560a:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 800560c:	2301      	movs	r3, #1
 800560e:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8005610:	463b      	mov	r3, r7
 8005612:	4618      	mov	r0, r3
 8005614:	f002 ffd2 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x08: CONFIGURING MPU FOR SH_RAM (0x38008000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005618:	2301      	movs	r3, #1
 800561a:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER8;
 800561c:	2308      	movs	r3, #8
 800561e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x38008000;
 8005620:	4b53      	ldr	r3, [pc, #332]	; (8005770 <BSP_STM32_MPU_Init+0x318>)
 8005622:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8005624:	230e      	movs	r3, #14
 8005626:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8005628:	2301      	movs	r3, #1
 800562a:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800562c:	2301      	movs	r3, #1
 800562e:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005630:	2300      	movs	r3, #0
 8005632:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005638:	2301      	movs	r3, #1
 800563a:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 800563c:	2300      	movs	r3, #0
 800563e:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8005640:	2302      	movs	r3, #2
 8005642:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8005644:	463b      	mov	r3, r7
 8005646:	4618      	mov	r0, r3
 8005648:	f002 ffb8 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x09: CONFIGURING MPU FOR BK_RAM (0x38800000, 4kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800564c:	2301      	movs	r3, #1
 800564e:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER9;
 8005650:	2309      	movs	r3, #9
 8005652:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x38800000;
 8005654:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8005658:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 800565a:	230b      	movs	r3, #11
 800565c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800565e:	2301      	movs	r3, #1
 8005660:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005662:	2301      	movs	r3, #1
 8005664:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005666:	2300      	movs	r3, #0
 8005668:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800566e:	2301      	movs	r3, #1
 8005670:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8005672:	2300      	movs	r3, #0
 8005674:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 8005676:	2301      	movs	r3, #1
 8005678:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800567a:	463b      	mov	r3, r7
 800567c:	4618      	mov	r0, r3
 800567e:	f002 ff9d 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x0A: CONFIGURING MPU FOR PERIPHERAL REGISTERS (0x40000000, 512kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005682:	2301      	movs	r3, #1
 8005684:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER10;
 8005686:	230a      	movs	r3, #10
 8005688:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x40000000;
 800568a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800568e:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8005690:	2312      	movs	r3, #18
 8005692:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005694:	2300      	movs	r3, #0
 8005696:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005698:	2301      	movs	r3, #1
 800569a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800569c:	2300      	movs	r3, #0
 800569e:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80056a8:	2300      	movs	r3, #0
 80056aa:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 80056ac:	2301      	movs	r3, #1
 80056ae:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80056b0:	463b      	mov	r3, r7
 80056b2:	4618      	mov	r0, r3
 80056b4:	f002 ff82 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x0B: CONFIGURING MPU FOR APP_FLASH (0x90000000, 16MB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER11;
 80056bc:	230b      	movs	r3, #11
 80056be:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x90000000;
 80056c0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80056c4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80056c6:	2317      	movs	r3, #23
 80056c8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80056ce:	2301      	movs	r3, #1
 80056d0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80056da:	2300      	movs	r3, #0
 80056dc:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80056de:	2300      	movs	r3, #0
 80056e0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 80056e2:	2302      	movs	r3, #2
 80056e4:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80056e6:	463b      	mov	r3, r7
 80056e8:	4618      	mov	r0, r3
 80056ea:	f002 ff67 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// 0x0C: CONFIGURING MPU FOR APP_SDRAM + VIDEO_SDRAM (0xC0000000, 64MB) - General use memory
	// 0x0D: CONFIGURING MPU FOR VIDEO_SDRAM (0xC3000000, 16MB) - restricting access to last 16MB for Video Memory
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80056ee:	2301      	movs	r3, #1
 80056f0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER12;
 80056f2:	230c      	movs	r3, #12
 80056f4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 80056f6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80056fa:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80056fc:	2319      	movs	r3, #25
 80056fe:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005700:	2300      	movs	r3, #0
 8005702:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005704:	2301      	movs	r3, #1
 8005706:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005708:	2300      	movs	r3, #0
 800570a:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005710:	2301      	movs	r3, #1
 8005712:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8005714:	2300      	movs	r3, #0
 8005716:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005718:	2303      	movs	r3, #3
 800571a:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800571c:	463b      	mov	r3, r7
 800571e:	4618      	mov	r0, r3
 8005720:	f002 ff4c 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005724:	2301      	movs	r3, #1
 8005726:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER13;
 8005728:	230d      	movs	r3, #13
 800572a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xC3000000;
 800572c:	f04f 4343 	mov.w	r3, #3271557120	; 0xc3000000
 8005730:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8005732:	2317      	movs	r3, #23
 8005734:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005736:	2300      	movs	r3, #0
 8005738:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800573a:	2301      	movs	r3, #1
 800573c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800573e:	2300      	movs	r3, #0
 8005740:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005746:	2301      	movs	r3, #1
 8005748:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.SubRegionDisable = 0x00;
 800574a:	2300      	movs	r3, #0
 800574c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 800574e:	2301      	movs	r3, #1
 8005750:	72fb      	strb	r3, [r7, #11]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8005752:	463b      	mov	r3, r7
 8005754:	4618      	mov	r0, r3
 8005756:	f002 ff31 	bl	80085bc <BSP_STM32_MPU_ConfigRegion>

	// Enables the MPU
	BSP_STM32_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800575a:	2004      	movs	r0, #4
 800575c:	f002 fef6 	bl	800854c <BSP_STM32_MPU_Enable>

	return BSP_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	30040000 	.word	0x30040000
 8005770:	38008000 	.word	0x38008000

08005774 <BSP_STM32_Init_SysClocks>:


uint8_t BSP_STM32_Init_SysClocks(void) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af06      	add	r7, sp, #24

	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800577a:	f006 f8af 	bl	800b8dc <BSP_STM32_RCC_GetSysClockFreq>
 800577e:	4602      	mov	r2, r0
 8005780:	4b4d      	ldr	r3, [pc, #308]	; (80058b8 <BSP_STM32_Init_SysClocks+0x144>)
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	494c      	ldr	r1, [pc, #304]	; (80058bc <BSP_STM32_Init_SysClocks+0x148>)
 800578c:	5ccb      	ldrb	r3, [r1, r3]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	fa22 f303 	lsr.w	r3, r2, r3
 8005796:	60fb      	str	r3, [r7, #12]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005798:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <BSP_STM32_Init_SysClocks+0x144>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	4a46      	ldr	r2, [pc, #280]	; (80058bc <BSP_STM32_Init_SysClocks+0x148>)
 80057a2:	5cd3      	ldrb	r3, [r2, r3]
 80057a4:	f003 031f 	and.w	r3, r3, #31
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	fa22 f303 	lsr.w	r3, r2, r3
 80057ae:	4a44      	ldr	r2, [pc, #272]	; (80058c0 <BSP_STM32_Init_SysClocks+0x14c>)
 80057b0:	6013      	str	r3, [r2, #0]
	SystemCoreClock = common_system_clock;
 80057b2:	4a44      	ldr	r2, [pc, #272]	; (80058c4 <BSP_STM32_Init_SysClocks+0x150>)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6013      	str	r3, [r2, #0]
	BSP_TickInit(SystemCoreClock, 1, (1UL << __NVIC_PRIO_BITS));
 80057b8:	4b42      	ldr	r3, [pc, #264]	; (80058c4 <BSP_STM32_Init_SysClocks+0x150>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2210      	movs	r2, #16
 80057be:	2101      	movs	r1, #1
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fda9 	bl	8006318 <BSP_TickInit>

	// Starting SYSCFG clock
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 80057c6:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <BSP_STM32_Init_SysClocks+0x144>)
 80057c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057cc:	4a3a      	ldr	r2, [pc, #232]	; (80058b8 <BSP_STM32_Init_SysClocks+0x144>)
 80057ce:	f043 0302 	orr.w	r3, r3, #2
 80057d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057d6:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <BSP_STM32_Init_SysClocks+0x144>)
 80057d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]

	//Supply configuration update enable
	BSP_STM32_PWR_ConfigSupply(PWR_SMPS_1V8_SUPPLIES_LDO);
 80057e4:	2016      	movs	r0, #22
 80057e6:	f004 ff03 	bl	800a5f0 <BSP_STM32_PWR_ConfigSupply>

	// Configure the main internal regulator output voltage
	BSP_STM32_PWR_VoltageScalingConfig(PWR_REGULATOR_VOLTAGE_SCALE0);
 80057ea:	2000      	movs	r0, #0
 80057ec:	f004 ff7c 	bl	800a6e8 <BSP_STM32_PWR_VoltageScalingConfig>

	// Waiting until required voltage is set
	BSP_STM32_PWR_WaitForVOSRDY();
 80057f0:	f004 ffd8 	bl	800a7a4 <BSP_STM32_PWR_WaitForVOSRDY>

	// Configure LSE Drive Capability
	BSP_STM32_PWR_EnableBkUpAccess();
 80057f4:	f004 fff6 	bl	800a7e4 <BSP_STM32_PWR_EnableBkUpAccess>
	BSP_STM32_RCC_LSEConfigDrive(RCC_LSEDRIVE_MEDIUMHIGH);
 80057f8:	2010      	movs	r0, #16
 80057fa:	f005 fba7 	bl	800af4c <BSP_STM32_RCC_LSEConfigDrive>

	// Setting the PLL clock source
	BSP_STM32_RCC_PLLClockSource(RCC_PLLSOURCE_HSE);
 80057fe:	2002      	movs	r0, #2
 8005800:	f005 fb8e 	bl	800af20 <BSP_STM32_RCC_PLLClockSource>

	// Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.
	BSP_STM32_RCC_ConfigHSE(RCC_HSE_BYPASS);
 8005804:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 8005808:	f005 fbb6 	bl	800af78 <BSP_STM32_RCC_ConfigHSE>
	BSP_STM32_RCC_ConfigHSI(RCC_HSI_DIV1, RCC_HSICALIBRATION_DEFAULT);
 800580c:	2140      	movs	r1, #64	; 0x40
 800580e:	2001      	movs	r0, #1
 8005810:	f005 fc40 	bl	800b094 <BSP_STM32_RCC_ConfigHSI>
	BSP_STM32_RCC_ConfigLSE(RCC_LSE_ON);
 8005814:	2001      	movs	r0, #1
 8005816:	f005 fccd 	bl	800b1b4 <BSP_STM32_RCC_ConfigLSE>
	BSP_STM32_RCC_ConfigHSI48(RCC_HSI48_ON);
 800581a:	2001      	movs	r0, #1
 800581c:	f005 fd54 	bl	800b2c8 <BSP_STM32_RCC_ConfigHSI48>

	// For 480/240MHz M: 5 / N: 192 / P: 2 / Q: 16 / R: 2
	// For 400/200MHz M: 2 / N: 160 / P: 2 / Q: 16 / R: 2
	BSP_STM32_RCC_ConfigPLL1(RCC_PLL_ON, RCC_PLLSOURCE_HSE, RCC_PLL1VCIRANGE_2, RCC_PLL1VCOWIDE, 5, 192, 2, 16, 2);
 8005820:	2302      	movs	r3, #2
 8005822:	9304      	str	r3, [sp, #16]
 8005824:	2310      	movs	r3, #16
 8005826:	9303      	str	r3, [sp, #12]
 8005828:	2302      	movs	r3, #2
 800582a:	9302      	str	r3, [sp, #8]
 800582c:	23c0      	movs	r3, #192	; 0xc0
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	2305      	movs	r3, #5
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	2208      	movs	r2, #8
 8005838:	2102      	movs	r1, #2
 800583a:	2002      	movs	r0, #2
 800583c:	f005 fd82 	bl	800b344 <BSP_STM32_RCC_ConfigPLL1>

	// Initializes the CPU, AHB and APB buses clocks
	uint32_t clocktype = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8005840:	233f      	movs	r3, #63	; 0x3f
 8005842:	60bb      	str	r3, [r7, #8]

	BSP_STM32_RCC_ClockConfig(clocktype, RCC_SYSCLKSOURCE_PLLCLK, RCC_SYSCLK_DIV1, RCC_HCLK_DIV2, RCC_APB1_DIV2, RCC_APB2_DIV2, RCC_APB3_DIV2, RCC_APB4_DIV2, FLASH_LATENCY_2);
 8005844:	2302      	movs	r3, #2
 8005846:	9304      	str	r3, [sp, #16]
 8005848:	2340      	movs	r3, #64	; 0x40
 800584a:	9303      	str	r3, [sp, #12]
 800584c:	2340      	movs	r3, #64	; 0x40
 800584e:	9302      	str	r3, [sp, #8]
 8005850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	2340      	movs	r3, #64	; 0x40
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	2308      	movs	r3, #8
 800585c:	2200      	movs	r2, #0
 800585e:	2103      	movs	r1, #3
 8005860:	68b8      	ldr	r0, [r7, #8]
 8005862:	f005 fed3 	bl	800b60c <BSP_STM32_RCC_ClockConfig>

	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005866:	f006 f839 	bl	800b8dc <BSP_STM32_RCC_GetSysClockFreq>
 800586a:	4602      	mov	r2, r0
 800586c:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <BSP_STM32_Init_SysClocks+0x144>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	4911      	ldr	r1, [pc, #68]	; (80058bc <BSP_STM32_Init_SysClocks+0x148>)
 8005878:	5ccb      	ldrb	r3, [r1, r3]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	60fb      	str	r3, [r7, #12]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <BSP_STM32_Init_SysClocks+0x144>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	4a0b      	ldr	r2, [pc, #44]	; (80058bc <BSP_STM32_Init_SysClocks+0x148>)
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <BSP_STM32_Init_SysClocks+0x14c>)
 800589c:	6013      	str	r3, [r2, #0]
	SystemCoreClock = common_system_clock;
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <BSP_STM32_Init_SysClocks+0x150>)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6013      	str	r3, [r2, #0]

	BSP_TickInit(common_system_clock, 1, (1UL << __NVIC_PRIO_BITS));
 80058a4:	2210      	movs	r2, #16
 80058a6:	2101      	movs	r1, #1
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fd35 	bl	8006318 <BSP_TickInit>
	return BSP_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	58024400 	.word	0x58024400
 80058bc:	0801c384 	.word	0x0801c384
 80058c0:	24000020 	.word	0x24000020
 80058c4:	2400001c 	.word	0x2400001c

080058c8 <BSP_STM32_Init_PeriphClocks>:

uint8_t BSP_STM32_Init_PeriphClocks(void) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b09e      	sub	sp, #120	; 0x78
 80058cc:	af04      	add	r7, sp, #16

	// Configuring PLL3
	BSP_STM32_RCC_ConfigPLL3(RCC_PLL3VCIRANGE_2, RCC_PLL3VCOMEDIUM, 5, 30, 2, 2, 10, 0);
 80058ce:	2300      	movs	r3, #0
 80058d0:	9303      	str	r3, [sp, #12]
 80058d2:	230a      	movs	r3, #10
 80058d4:	9302      	str	r3, [sp, #8]
 80058d6:	2302      	movs	r3, #2
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	2302      	movs	r3, #2
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	231e      	movs	r3, #30
 80058e0:	2205      	movs	r2, #5
 80058e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80058ea:	f005 fded 	bl	800b4c8 <BSP_STM32_RCC_ConfigPLL3>

	// Starting peripherals clock - ADC
	BSP_STM32_RCC_CLKConfig_ADC();
 80058ee:	f005 fafd 	bl	800aeec <BSP_STM32_RCC_CLKConfig_ADC>

	// Starting peripherals clock - LTDC
	BSP_STM32_RCC_CLKConfig_LTDC();
 80058f2:	f005 fb0d 	bl	800af10 <BSP_STM32_RCC_CLKConfig_LTDC>

	// Starting peripherals clocks - RTC
    if (BSP_STM32_RCC_CLKConfig_RTC()) return BSP_ERROR;
 80058f6:	f005 fa19 	bl	800ad2c <BSP_STM32_RCC_CLKConfig_RTC>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <BSP_STM32_Init_PeriphClocks+0x3c>
 8005900:	2301      	movs	r3, #1
 8005902:	e1d3      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_RTC_ENABLE();
 8005904:	4baf      	ldr	r3, [pc, #700]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4aae      	ldr	r2, [pc, #696]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800590a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590e:	6713      	str	r3, [r2, #112]	; 0x70

    if (BSP_STM32_RTC_Init(RTC, 127, 255)) return BSP_ERROR;
 8005910:	22ff      	movs	r2, #255	; 0xff
 8005912:	217f      	movs	r1, #127	; 0x7f
 8005914:	48ac      	ldr	r0, [pc, #688]	; (8005bc8 <BSP_STM32_Init_PeriphClocks+0x300>)
 8005916:	f006 f9ed 	bl	800bcf4 <BSP_STM32_RTC_Init>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <BSP_STM32_Init_PeriphClocks+0x5c>
 8005920:	2301      	movs	r3, #1
 8005922:	e1c3      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>

    // Starting Backup RAM
    // __BSP_RCC_BKPRAM_CLK_ENABLE();

	// Enable SYSCFG Clock
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 8005924:	4ba7      	ldr	r3, [pc, #668]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800592a:	4aa6      	ldr	r2, [pc, #664]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800592c:	f043 0302 	orr.w	r3, r3, #2
 8005930:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005934:	4ba3      	ldr	r3, [pc, #652]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	667b      	str	r3, [r7, #100]	; 0x64
 8005940:	6e7b      	ldr	r3, [r7, #100]	; 0x64

	// Starting GPIOs clocks
	__BSP_RCC_GPIOA_CLK_ENABLE();
 8005942:	4ba0      	ldr	r3, [pc, #640]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005948:	4a9e      	ldr	r2, [pc, #632]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005952:	4b9c      	ldr	r3, [pc, #624]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	663b      	str	r3, [r7, #96]	; 0x60
 800595e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	__BSP_RCC_GPIOB_CLK_ENABLE();
 8005960:	4b98      	ldr	r3, [pc, #608]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005966:	4a97      	ldr	r2, [pc, #604]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005968:	f043 0302 	orr.w	r3, r3, #2
 800596c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005970:	4b94      	ldr	r3, [pc, #592]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800597c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	__BSP_RCC_GPIOC_CLK_ENABLE();
 800597e:	4b91      	ldr	r3, [pc, #580]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005984:	4a8f      	ldr	r2, [pc, #572]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005986:	f043 0304 	orr.w	r3, r3, #4
 800598a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800598e:	4b8d      	ldr	r3, [pc, #564]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	65bb      	str	r3, [r7, #88]	; 0x58
 800599a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	__BSP_RCC_GPIOD_CLK_ENABLE();
 800599c:	4b89      	ldr	r3, [pc, #548]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 800599e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059a2:	4a88      	ldr	r2, [pc, #544]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059a4:	f043 0308 	orr.w	r3, r3, #8
 80059a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059ac:	4b85      	ldr	r3, [pc, #532]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	657b      	str	r3, [r7, #84]	; 0x54
 80059b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	__BSP_RCC_GPIOE_CLK_ENABLE();
 80059ba:	4b82      	ldr	r3, [pc, #520]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059c0:	4a80      	ldr	r2, [pc, #512]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059c2:	f043 0310 	orr.w	r3, r3, #16
 80059c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059ca:	4b7e      	ldr	r3, [pc, #504]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	653b      	str	r3, [r7, #80]	; 0x50
 80059d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	__BSP_RCC_GPIOF_CLK_ENABLE();
 80059d8:	4b7a      	ldr	r3, [pc, #488]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059de:	4a79      	ldr	r2, [pc, #484]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059e0:	f043 0320 	orr.w	r3, r3, #32
 80059e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059e8:	4b76      	ldr	r3, [pc, #472]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	__BSP_RCC_GPIOG_CLK_ENABLE();
 80059f6:	4b73      	ldr	r3, [pc, #460]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059fc:	4a71      	ldr	r2, [pc, #452]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 80059fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a06:	4b6f      	ldr	r3, [pc, #444]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	__BSP_RCC_GPIOH_CLK_ENABLE();
 8005a14:	4b6b      	ldr	r3, [pc, #428]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a1a:	4a6a      	ldr	r2, [pc, #424]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a24:	4b67      	ldr	r3, [pc, #412]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	__BSP_RCC_GPIOI_CLK_ENABLE();
 8005a32:	4b64      	ldr	r3, [pc, #400]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a38:	4a62      	ldr	r2, [pc, #392]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a42:	4b60      	ldr	r3, [pc, #384]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40

	// Starting peripherals clocks - FMC (SDRAM Controller)
	if (BSP_STM32_RCC_CLKConfig_FMC()) return BSP_ERROR;
 8005a50:	f005 f9ce 	bl	800adf0 <BSP_STM32_RCC_CLKConfig_FMC>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <BSP_STM32_Init_PeriphClocks+0x196>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e126      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
	__BSP_RCC_FMC_CLK_ENABLE();
 8005a5e:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005a64:	4a57      	ldr	r2, [pc, #348]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a6a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005a6e:	4b55      	ldr	r3, [pc, #340]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

	// Starting peripherals clocks - LTDC (LCD Controller)
	__BSP_RCC_LTDC_CLK_ENABLE();
 8005a7c:	4b51      	ldr	r3, [pc, #324]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a82:	4a50      	ldr	r2, [pc, #320]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a84:	f043 0308 	orr.w	r3, r3, #8
 8005a88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a8c:	4b4d      	ldr	r3, [pc, #308]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	// Starting peripherals clocks - DMA2D
    __BSP_RCC_DMA2D_CLK_ENABLE();
 8005a9a:	4b4a      	ldr	r3, [pc, #296]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005a9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005aa0:	4a48      	ldr	r2, [pc, #288]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005aa2:	f043 0310 	orr.w	r3, r3, #16
 8005aa6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005aaa:	4b46      	ldr	r3, [pc, #280]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005aac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    // Starting peripherals clocks - JPEG
    __BSP_RCC_JPGDECEN_CLK_ENABLE();
 8005ab8:	4b42      	ldr	r3, [pc, #264]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005aba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005abe:	4a41      	ldr	r2, [pc, #260]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005ac0:	f043 0320 	orr.w	r3, r3, #32
 8005ac4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005ac8:	4b3e      	ldr	r3, [pc, #248]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005aca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    // Starting peripherals clocks - DMA1
    __BSP_RCC_DMA1_CLK_ENABLE();
 8005ad6:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005adc:	4a39      	ldr	r2, [pc, #228]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005ae6:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    // Starting peripherals clocks - BDMA
    __BSP_RCC_BDMA_CLK_ENABLE();
 8005af4:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005afa:	4a32      	ldr	r2, [pc, #200]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b04:	4b2f      	ldr	r3, [pc, #188]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28

    // Starting peripherals clocks - ADC1
    __BSP_RCC_ADC12_CLK_ENABLE();
 8005b12:	4b2c      	ldr	r3, [pc, #176]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b18:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b1a:	f043 0320 	orr.w	r3, r3, #32
 8005b1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005b22:	4b28      	ldr	r3, [pc, #160]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    // Starting peripherals clocks - I2C1
    if (BSP_STM32_RCC_CLKConfig_I2C1()) return BSP_ERROR;
 8005b30:	f005 f966 	bl	800ae00 <BSP_STM32_RCC_CLKConfig_I2C1>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <BSP_STM32_Init_PeriphClocks+0x276>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e0b6      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_I2C1_CLK_ENABLE();
 8005b3e:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b44:	4a1f      	ldr	r2, [pc, #124]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]

    // Starting peripherals clocks - I2C4
    if (BSP_STM32_RCC_CLKConfig_I2C4()) return BSP_ERROR;
 8005b5c:	f005 f960 	bl	800ae20 <BSP_STM32_RCC_CLKConfig_I2C4>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <BSP_STM32_Init_PeriphClocks+0x2a2>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0a0      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_I2C4_CLK_ENABLE();
 8005b6a:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b70:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	69fb      	ldr	r3, [r7, #28]
    // Starting peripherials clocks - I2S3 <<<<<<<<<< Started in CM4 Project
    //    if (BSP_STM32_RCC_CLKConfig_I2S3()) return BSP_ERROR;
    //    __BSP_RCC_I2S3_CLK_ENABLE();

    // Starting peripherals clocks - QSPI
    if (BSP_STM32_RCC_CLKConfig_QSPI()) return BSP_ERROR;
 8005b88:	f005 f95a 	bl	800ae40 <BSP_STM32_RCC_CLKConfig_QSPI>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <BSP_STM32_Init_PeriphClocks+0x2ce>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e08a      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_QSPI_CLK_ENABLE();
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b9c:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ba2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <BSP_STM32_Init_PeriphClocks+0x2fc>)
 8005ba8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	69bb      	ldr	r3, [r7, #24]

    // Starting peripherals clocks - SDMMC2
    if (BSP_STM32_RCC_CLKConfig_SDMMC2()) return BSP_ERROR;
 8005bb4:	f005 f954 	bl	800ae60 <BSP_STM32_RCC_CLKConfig_SDMMC2>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <BSP_STM32_Init_PeriphClocks+0x304>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e074      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
 8005bc2:	bf00      	nop
 8005bc4:	58024400 	.word	0x58024400
 8005bc8:	58004000 	.word	0x58004000
    __BSP_RCC_SDMMC2_CLK_ENABLE();
 8005bcc:	4b39      	ldr	r3, [pc, #228]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005bce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005bd2:	4a38      	ldr	r2, [pc, #224]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bd8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005bdc:	4b35      	ldr	r3, [pc, #212]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005bde:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	697b      	ldr	r3, [r7, #20]

    // Starting peripherals clocks - TIM2
    __BSP_RCC_TIM2_CLK_ENABLE();
 8005bea:	4b32      	ldr	r3, [pc, #200]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bf0:	4a30      	ldr	r2, [pc, #192]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005bfa:	4b2e      	ldr	r3, [pc, #184]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	693b      	ldr	r3, [r7, #16]

    // Starting peripherals clocks - TIM3
    __BSP_RCC_TIM3_CLK_ENABLE();
 8005c08:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c0e:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c10:	f043 0302 	orr.w	r3, r3, #2
 8005c14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c18:	4b26      	ldr	r3, [pc, #152]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]

    // Starting peripherals clocks - UART5
    if (BSP_STM32_RCC_CLKConfig_UART5()) return BSP_ERROR;
 8005c26:	f005 f931 	bl	800ae8c <BSP_STM32_RCC_CLKConfig_UART5>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <BSP_STM32_Init_PeriphClocks+0x36c>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e03b      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_UART5_CLK_ENABLE();
 8005c34:	4b1f      	ldr	r3, [pc, #124]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c44:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]

    // Starting peripherals clocks - USART2
    if (BSP_STM32_RCC_CLKConfig_USART2()) return BSP_ERROR;
 8005c52:	f005 f92b 	bl	800aeac <BSP_STM32_RCC_CLKConfig_USART2>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <BSP_STM32_Init_PeriphClocks+0x398>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e025      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_USART2_CLK_ENABLE();
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c66:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c70:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	607b      	str	r3, [r7, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]

    // Starting peripherals clock - USB_OTG_FS
    if (BSP_STM32_RCC_CLKConfig_USBFS()) return BSP_ERROR;
 8005c7e:	f005 f925 	bl	800aecc <BSP_STM32_RCC_CLKConfig_USBFS>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <BSP_STM32_Init_PeriphClocks+0x3c4>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e00f      	b.n	8005cac <BSP_STM32_Init_PeriphClocks+0x3e4>
    __BSP_RCC_USB2_FS_CLK_ENABLE();
 8005c8c:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c92:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <BSP_STM32_Init_PeriphClocks+0x3ec>)
 8005c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]

	return BSP_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3768      	adds	r7, #104	; 0x68
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	58024400 	.word	0x58024400

08005cb8 <BSP_STM32_Init_NVIC>:


uint8_t BSP_STM32_Init_NVIC(void) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0

	uint32_t pp;
	uint32_t sp;

	/************** PRIORITY 0 *************/
	pp = 0;		sp = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	607b      	str	r3, [r7, #4]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	603b      	str	r3, [r7, #0]

	// Configuring NVIC for LTDC
	BSP_STM32_NVIC_SetPriority(LTDC_IRQn, pp, sp);
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	2058      	movs	r0, #88	; 0x58
 8005ccc:	f002 fc16 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(LTDC_IRQn);
 8005cd0:	2058      	movs	r0, #88	; 0x58
 8005cd2:	f002 fc04 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>

    // Configuring NVIC for DMA2D
    BSP_STM32_NVIC_SetPriority(DMA2D_IRQn, pp, sp);
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	205a      	movs	r0, #90	; 0x5a
 8005cdc:	f002 fc0e 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA2D_IRQn);
 8005ce0:	205a      	movs	r0, #90	; 0x5a
 8005ce2:	f002 fbfc 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>
    // Configuring NVIC for DMA1 - Stream 0 - for I2S3 TX
//    BSP_NVIC_SetPriority(DMA1_Stream0_IRQn, pp, sp);
//    BSP_NVIC_EnableIRQ(DMA1_Stream0_IRQn);

    // Configuring NVIC for DMA1 - Stream 1 - for ADC1
    BSP_STM32_NVIC_SetPriority(DMA1_Stream1_IRQn, pp, sp);
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	200c      	movs	r0, #12
 8005cec:	f002 fc06 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005cf0:	200c      	movs	r0, #12
 8005cf2:	f002 fbf4 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>

    // Configuring NVIC for DMA1 - Stream 2 - for I2C1 RX
    BSP_STM32_NVIC_SetPriority(DMA1_Stream2_IRQn, pp, sp);
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	200d      	movs	r0, #13
 8005cfc:	f002 fbfe 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005d00:	200d      	movs	r0, #13
 8005d02:	f002 fbec 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>

    // Configuring NVIC for BDMA - Channel 0 - for I2C4 RX
    BSP_STM32_NVIC_SetPriority(BDMA_Channel0_IRQn, pp, sp);
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	2081      	movs	r0, #129	; 0x81
 8005d0c:	f002 fbf6 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8005d10:	2081      	movs	r0, #129	; 0x81
 8005d12:	f002 fbe4 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>

    // Configure NVIC for USBFS
    BSP_STM32_NVIC_SetPriority(OTG_FS_IRQn, pp, sp);
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	2065      	movs	r0, #101	; 0x65
 8005d1c:	f002 fbee 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005d20:	2065      	movs	r0, #101	; 0x65
 8005d22:	f002 fbdc 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>


    /************** PRIORITY 1 *************/
	pp = 1;		sp = 0;
 8005d26:	2301      	movs	r3, #1
 8005d28:	607b      	str	r3, [r7, #4]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	603b      	str	r3, [r7, #0]
    // BSP_NVIC_SetPriority(SDMMC2_IRQn, pp, sp);
    // BSP_NVIC_EnableIRQ(SDMMC2_IRQn);


    /************** PRIORITY 2 *************/
    pp = 2;		sp = 0;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	607b      	str	r3, [r7, #4]
 8005d32:	2300      	movs	r3, #0
 8005d34:	603b      	str	r3, [r7, #0]


    /************** PRIORITY 3 *************/
    pp = 3;		sp = 0;
 8005d36:	2303      	movs	r3, #3
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	603b      	str	r3, [r7, #0]

    // Configure NVIC for I2C1
    BSP_STM32_NVIC_SetPriority(I2C1_EV_IRQn, pp, sp);
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	201f      	movs	r0, #31
 8005d44:	f002 fbda 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005d48:	201f      	movs	r0, #31
 8005d4a:	f002 fbc8 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>

    // Configure NVIC for I2C4
    BSP_STM32_NVIC_SetPriority(I2C4_EV_IRQn, pp, sp);
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	205f      	movs	r0, #95	; 0x5f
 8005d54:	f002 fbd2 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8005d58:	205f      	movs	r0, #95	; 0x5f
 8005d5a:	f002 fbc0 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>

    // Configure NVIC for USART2
    BSP_STM32_NVIC_SetPriority(USART2_IRQn, pp, sp);
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	2026      	movs	r0, #38	; 0x26
 8005d64:	f002 fbca 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(USART2_IRQn);
 8005d68:	2026      	movs	r0, #38	; 0x26
 8005d6a:	f002 fbb8 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>
//    BSP_NVIC_SetPriority(SPI3_IRQn, pp, sp);
//    BSP_NVIC_EnableIRQ(SPI3_IRQn);


    /************** PRIORITY 4 *************/
    pp = 4;		sp = 0;
 8005d6e:	2304      	movs	r3, #4
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	2300      	movs	r3, #0
 8005d74:	603b      	str	r3, [r7, #0]

    // Configure NVIC for GPIOs
    BSP_STM32_NVIC_SetPriority(EXTI15_10_IRQn, pp, sp); // Touch panel and MPU6050
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	2028      	movs	r0, #40	; 0x28
 8005d7c:	f002 fbbe 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d80:	2028      	movs	r0, #40	; 0x28
 8005d82:	f002 fbac 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(EXTI9_5_IRQn, pp, sp); // BT Module
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	2017      	movs	r0, #23
 8005d8c:	f002 fbb6 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005d90:	2017      	movs	r0, #23
 8005d92:	f002 fba4 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>

    //Configure NVIC for TIM2
    BSP_STM32_NVIC_SetPriority(TIM2_IRQn, pp, sp); // Timer for sampling joystick and keyboard
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	201c      	movs	r0, #28
 8005d9c:	f002 fbae 	bl	80084fc <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(TIM2_IRQn);
 8005da0:	201c      	movs	r0, #28
 8005da2:	f002 fb9c 	bl	80084de <BSP_STM32_NVIC_EnableIRQ>

    return BSP_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <BSP_STM32_Init_GPIO>:


uint8_t BSP_STM32_Init_GPIO(void) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af02      	add	r7, sp, #8
	// PG8   ------> FMC_SDCLK		PH13   ------> FMC_D21		PH14   ------> FMC_D22		PH15   ------> FMC_D23		PI0   ------> FMC_D24
	// PI1   ------> FMC_D25		PI2   ------> FMC_D26		PI3   ------> FMC_D27		PD0   ------> FMC_D2		PD1   ------> FMC_D3
	// PG15   ------> FMC_SDNCAS	PE0   ------> FMC_NBL0		PE1   ------> FMC_NBL1		PI4   ------> FMC_NBL2		PI5   ------> FMC_NBL3
	// PI6   ------> FMC_D28		PI7   ------> FMC_D29

	Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8005db6:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8005dba:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	9301      	str	r3, [sp, #4]
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	48b6      	ldr	r0, [pc, #728]	; (80060a4 <BSP_STM32_Init_GPIO+0x2f4>)
 8005dcc:	f003 f9ae 	bl	800912c <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8005dd0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005dd4:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	2303      	movs	r3, #3
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	2300      	movs	r3, #0
 8005de0:	2202      	movs	r2, #2
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	48b0      	ldr	r0, [pc, #704]	; (80060a8 <BSP_STM32_Init_GPIO+0x2f8>)
 8005de6:	f003 f9a1 	bl	800912c <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8005dea:	230c      	movs	r3, #12
 8005dec:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005dee:	230c      	movs	r3, #12
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	2303      	movs	r3, #3
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	2300      	movs	r3, #0
 8005df8:	2202      	movs	r2, #2
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	48ab      	ldr	r0, [pc, #684]	; (80060ac <BSP_STM32_Init_GPIO+0x2fc>)
 8005dfe:	f003 f995 	bl	800912c <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_7;
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005e06:	230c      	movs	r3, #12
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2202      	movs	r2, #2
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	48a6      	ldr	r0, [pc, #664]	; (80060b0 <BSP_STM32_Init_GPIO+0x300>)
 8005e16:	f003 f989 	bl	800912c <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8005e1a:	f248 1337 	movw	r3, #33079	; 0x8137
 8005e1e:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005e20:	230c      	movs	r3, #12
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	2303      	movs	r3, #3
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	48a1      	ldr	r0, [pc, #644]	; (80060b4 <BSP_STM32_Init_GPIO+0x304>)
 8005e30:	f003 f97c 	bl	800912c <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
 8005e34:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005e38:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	2303      	movs	r3, #3
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	2202      	movs	r2, #2
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	489b      	ldr	r0, [pc, #620]	; (80060b8 <BSP_STM32_Init_GPIO+0x308>)
 8005e4a:	f003 f96f 	bl	800912c <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8005e4e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8005e52:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005e54:	230c      	movs	r3, #12
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	2303      	movs	r3, #3
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2202      	movs	r2, #2
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4896      	ldr	r0, [pc, #600]	; (80060bc <BSP_STM32_Init_GPIO+0x30c>)
 8005e64:	f003 f962 	bl	800912c <BSP_STM32_GPIO_Init>

	Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
 8005e68:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005e6c:	607b      	str	r3, [r7, #4]
	BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8005e6e:	230c      	movs	r3, #12
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	2303      	movs	r3, #3
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	2300      	movs	r3, #0
 8005e78:	2202      	movs	r2, #2
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	4890      	ldr	r0, [pc, #576]	; (80060c0 <BSP_STM32_Init_GPIO+0x310>)
 8005e7e:	f003 f955 	bl	800912c <BSP_STM32_GPIO_Init>
	// PA4     ------> LTDC_VSYNC   PA5     ------> LTDC_R4    PA6     ------> LTDC_G2		PB0     ------> LTDC_R3    PB1     ------> LTDC_R6
    // PI15     ------> LTDC_R0		PB11     ------> LTDC_G5   PG6     ------> LTDC_R7		PG7     ------> LTDC_CLK   PC6     ------> LTDC_HSYNC
    // PC9     ------> LTDC_G3		PA8     ------> LTDC_B3    PA10     ------> LTDC_B4		PD3     ------> LTDC_G7    PG10     ------> LTDC_B2
    // PG12     ------> LTDC_B1     PB8     ------> LTDC_B6    PB9     ------> LTDC_B7

    Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005e82:	2370      	movs	r3, #112	; 0x70
 8005e84:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005e86:	230e      	movs	r3, #14
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2202      	movs	r2, #2
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4888      	ldr	r0, [pc, #544]	; (80060b8 <BSP_STM32_Init_GPIO+0x308>)
 8005e96:	f003 f949 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_11;
 8005e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e9e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8005ea0:	2309      	movs	r3, #9
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2202      	movs	r2, #2
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	487d      	ldr	r0, [pc, #500]	; (80060a4 <BSP_STM32_Init_GPIO+0x2f4>)
 8005eb0:	f003 f93c 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_10;
 8005eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb8:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005eba:	230e      	movs	r3, #14
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4877      	ldr	r0, [pc, #476]	; (80060a8 <BSP_STM32_Init_GPIO+0x2f8>)
 8005eca:	f003 f92f 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_0|GPIO_PIN_6;
 8005ece:	2341      	movs	r3, #65	; 0x41
 8005ed0:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005ed2:	230e      	movs	r3, #14
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	2300      	movs	r3, #0
 8005edc:	2202      	movs	r2, #2
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4872      	ldr	r0, [pc, #456]	; (80060ac <BSP_STM32_Init_GPIO+0x2fc>)
 8005ee2:	f003 f923 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005ee6:	237e      	movs	r3, #126	; 0x7e
 8005ee8:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005eea:	230e      	movs	r3, #14
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	486d      	ldr	r0, [pc, #436]	; (80060b0 <BSP_STM32_Init_GPIO+0x300>)
 8005efa:	f003 f917 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_4;
 8005efe:	2310      	movs	r3, #16
 8005f00:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005f02:	230e      	movs	r3, #14
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	2300      	movs	r3, #0
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4866      	ldr	r0, [pc, #408]	; (80060ac <BSP_STM32_Init_GPIO+0x2fc>)
 8005f12:	f003 f90b 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f16:	2303      	movs	r3, #3
 8005f18:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8005f1a:	2309      	movs	r3, #9
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	2202      	movs	r2, #2
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4866      	ldr	r0, [pc, #408]	; (80060c4 <BSP_STM32_Init_GPIO+0x314>)
 8005f2a:	f003 f8ff 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_15;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005f34:	230e      	movs	r3, #14
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2202      	movs	r2, #2
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4858      	ldr	r0, [pc, #352]	; (80060a4 <BSP_STM32_Init_GPIO+0x2f4>)
 8005f44:	f003 f8f2 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8005f48:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8005f4c:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005f4e:	230e      	movs	r3, #14
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	2202      	movs	r2, #2
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4859      	ldr	r0, [pc, #356]	; (80060c4 <BSP_STM32_Init_GPIO+0x314>)
 8005f5e:	f003 f8e5 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8005f62:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8005f66:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005f68:	230e      	movs	r3, #14
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	2202      	movs	r2, #2
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	484f      	ldr	r0, [pc, #316]	; (80060b4 <BSP_STM32_Init_GPIO+0x304>)
 8005f78:	f003 f8d8 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_9;
 8005f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f80:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF10_LTDC);
 8005f82:	230a      	movs	r3, #10
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	2300      	movs	r3, #0
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4846      	ldr	r0, [pc, #280]	; (80060ac <BSP_STM32_Init_GPIO+0x2fc>)
 8005f92:	f003 f8cb 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_8;
 8005f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF13_LTDC);
 8005f9c:	230d      	movs	r3, #13
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4841      	ldr	r0, [pc, #260]	; (80060b0 <BSP_STM32_Init_GPIO+0x300>)
 8005fac:	f003 f8be 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_10;
 8005fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb4:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF12_LTDC);
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	483a      	ldr	r0, [pc, #232]	; (80060b0 <BSP_STM32_Init_GPIO+0x300>)
 8005fc6:	f003 f8b1 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_3;
 8005fca:	2308      	movs	r3, #8
 8005fcc:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8005fce:	230e      	movs	r3, #14
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2202      	movs	r2, #2
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	4838      	ldr	r0, [pc, #224]	; (80060c0 <BSP_STM32_Init_GPIO+0x310>)
 8005fde:	f003 f8a5 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - ADC1
    // PC4     ------> ADC1_INP4	PC5     ------> ADC1_INP8

    Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005fe2:	2330      	movs	r3, #48	; 0x30
 8005fe4:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_ANALOG, GPIO_NOPULL, 0, 0);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	482d      	ldr	r0, [pc, #180]	; (80060ac <BSP_STM32_Init_GPIO+0x2fc>)
 8005ff6:	f003 f899 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - I2C1
    // PB6     ------> I2C1_SCL    	PB7     ------> I2C1_SDA

    Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ffa:	23c0      	movs	r3, #192	; 0xc0
 8005ffc:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_I2C1);
 8005ffe:	2304      	movs	r3, #4
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	2300      	movs	r3, #0
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2300      	movs	r3, #0
 8006008:	2212      	movs	r2, #18
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	482d      	ldr	r0, [pc, #180]	; (80060c4 <BSP_STM32_Init_GPIO+0x314>)
 800600e:	f003 f88d 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - I2C4
    // PD12     ------> I2C4_SCL    PD13     ------> I2C4_SDA

    Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006012:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006016:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_I2C4);
 8006018:	2304      	movs	r3, #4
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	2300      	movs	r3, #0
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	2300      	movs	r3, #0
 8006022:	2212      	movs	r2, #18
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4826      	ldr	r0, [pc, #152]	; (80060c0 <BSP_STM32_Init_GPIO+0x310>)
 8006028:	f003 f880 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - QSPI
    // PF6     ------> QUADSPI_BK1_IO3		PF7     ------> QUADSPI_BK1_IO2		PF8     ------> QUADSPI_BK1_IO0
    // PF9     ------> QUADSPI_BK1_IO1		PB2     ------> QUADSPI_CLK			PB10     ------> QUADSPI_BK1_NCS

    Pin = GPIO_PIN_6|GPIO_PIN_7;
 800602c:	23c0      	movs	r3, #192	; 0xc0
 800602e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 8006030:	2309      	movs	r3, #9
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	2302      	movs	r3, #2
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2300      	movs	r3, #0
 800603a:	2202      	movs	r2, #2
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	481a      	ldr	r0, [pc, #104]	; (80060a8 <BSP_STM32_Init_GPIO+0x2f8>)
 8006040:	f003 f874 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006044:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006048:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF10_QUADSPI);
 800604a:	230a      	movs	r3, #10
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	2302      	movs	r3, #2
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	2300      	movs	r3, #0
 8006054:	2202      	movs	r2, #2
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4813      	ldr	r0, [pc, #76]	; (80060a8 <BSP_STM32_Init_GPIO+0x2f8>)
 800605a:	f003 f867 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_2|GPIO_PIN_10;
 800605e:	f240 4304 	movw	r3, #1028	; 0x404
 8006062:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 8006064:	2309      	movs	r3, #9
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	2302      	movs	r3, #2
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	2300      	movs	r3, #0
 800606e:	2202      	movs	r2, #2
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4814      	ldr	r0, [pc, #80]	; (80060c4 <BSP_STM32_Init_GPIO+0x314>)
 8006074:	f003 f85a 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - SDMMC2
    // PC1     ------> SDMMC2_CK		PA0     ------> SDMMC2_CMD		PB14     ------> SDMMC2_D0
    // PB15     ------> SDMMC2_D1		PG11     ------> SDMMC2_D2		PB4 (NJTRST)     ------> SDMMC2_D3

    Pin = GPIO_PIN_1;
 8006078:	2302      	movs	r3, #2
 800607a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 800607c:	2309      	movs	r3, #9
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	2303      	movs	r3, #3
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	2300      	movs	r3, #0
 8006086:	2202      	movs	r2, #2
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4808      	ldr	r0, [pc, #32]	; (80060ac <BSP_STM32_Init_GPIO+0x2fc>)
 800608c:	f003 f84e 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_0;
 8006090:	2301      	movs	r3, #1
 8006092:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 8006094:	2309      	movs	r3, #9
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	2303      	movs	r3, #3
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	2202      	movs	r2, #2
 80060a0:	e012      	b.n	80060c8 <BSP_STM32_Init_GPIO+0x318>
 80060a2:	bf00      	nop
 80060a4:	58022000 	.word	0x58022000
 80060a8:	58021400 	.word	0x58021400
 80060ac:	58020800 	.word	0x58020800
 80060b0:	58020000 	.word	0x58020000
 80060b4:	58021800 	.word	0x58021800
 80060b8:	58021000 	.word	0x58021000
 80060bc:	58021c00 	.word	0x58021c00
 80060c0:	58020c00 	.word	0x58020c00
 80060c4:	58020400 	.word	0x58020400
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	488b      	ldr	r0, [pc, #556]	; (80062f8 <BSP_STM32_Init_GPIO+0x548>)
 80060cc:	f003 f82e 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 80060d0:	f24c 0310 	movw	r3, #49168	; 0xc010
 80060d4:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 80060d6:	2309      	movs	r3, #9
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	2303      	movs	r3, #3
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	2300      	movs	r3, #0
 80060e0:	2202      	movs	r2, #2
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	4885      	ldr	r0, [pc, #532]	; (80062fc <BSP_STM32_Init_GPIO+0x54c>)
 80060e6:	f003 f821 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_11;
 80060ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060ee:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF10_SDIO2);
 80060f0:	230a      	movs	r3, #10
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	2303      	movs	r3, #3
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	2202      	movs	r2, #2
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4880      	ldr	r0, [pc, #512]	; (8006300 <BSP_STM32_Init_GPIO+0x550>)
 8006100:	f003 f814 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - TIM3
    // PC8 ------> TIM3 PWM Output

    Pin = GPIO_PIN_8;
 8006104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006108:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF2_TIM3);
 800610a:	2302      	movs	r3, #2
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	2300      	movs	r3, #0
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	2300      	movs	r3, #0
 8006114:	2202      	movs	r2, #2
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	487a      	ldr	r0, [pc, #488]	; (8006304 <BSP_STM32_Init_GPIO+0x554>)
 800611a:	f003 f807 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - UART5
    // PB12     ------> UART5_RX		PB13     ------> UART5_TX

    Pin = GPIO_PIN_12|GPIO_PIN_13;
 800611e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006122:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_UART5);
 8006124:	230e      	movs	r3, #14
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	2300      	movs	r3, #0
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	2300      	movs	r3, #0
 800612e:	2202      	movs	r2, #2
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4872      	ldr	r0, [pc, #456]	; (80062fc <BSP_STM32_Init_GPIO+0x54c>)
 8006134:	f002 fffa 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - USART2
    // PD5     ------> USART2_TX		PD6     ------> USART2_RX

    Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006138:	2360      	movs	r3, #96	; 0x60
 800613a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF7_USART2);
 800613c:	2307      	movs	r3, #7
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	2300      	movs	r3, #0
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	2202      	movs	r2, #2
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	486f      	ldr	r0, [pc, #444]	; (8006308 <BSP_STM32_Init_GPIO+0x558>)
 800614c:	f002 ffee 	bl	800912c <BSP_STM32_GPIO_Init>

    // Configuring GPIO pins - USB_OTG_FS
    // PA11     ------> USB_OTG_FS_DM	PA12     ------> USB_OTG_FS_DP

    Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006150:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006154:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF10_OTG1_FS);
 8006156:	230a      	movs	r3, #10
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	2302      	movs	r3, #2
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	2300      	movs	r3, #0
 8006160:	2202      	movs	r2, #2
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	4864      	ldr	r0, [pc, #400]	; (80062f8 <BSP_STM32_Init_GPIO+0x548>)
 8006166:	f002 ffe1 	bl	800912c <BSP_STM32_GPIO_Init>
    // PH6	------> EXTI   - BLE INT
    // PH7	------> OUTPUT - BLE GPIO			- DEFAULT: LOW
    // PI8	------> INPUT  - BUTTON 2

//    BSP_STM32_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
    BSP_STM32_GPIO_WritePin(GPIOH, GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 800616a:	2200      	movs	r2, #0
 800616c:	2188      	movs	r1, #136	; 0x88
 800616e:	4867      	ldr	r0, [pc, #412]	; (800630c <BSP_STM32_Init_GPIO+0x55c>)
 8006170:	f003 f982 	bl	8009478 <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8006174:	2201      	movs	r2, #1
 8006176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800617a:	4861      	ldr	r0, [pc, #388]	; (8006300 <BSP_STM32_Init_GPIO+0x550>)
 800617c:	f003 f97c 	bl	8009478 <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8006180:	2200      	movs	r2, #0
 8006182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006186:	485e      	ldr	r0, [pc, #376]	; (8006300 <BSP_STM32_Init_GPIO+0x550>)
 8006188:	f003 f976 	bl	8009478 <BSP_STM32_GPIO_WritePin>

//    Pin = GPIO_PIN_2;
//    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);

    Pin = GPIO_PIN_3;
 800618c:	2308      	movs	r3, #8
 800618e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8006190:	2300      	movs	r3, #0
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	2300      	movs	r3, #0
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	485c      	ldr	r0, [pc, #368]	; (8006310 <BSP_STM32_Init_GPIO+0x560>)
 80061a0:	f002 ffc4 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_8;
 80061a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061a8:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80061aa:	2300      	movs	r3, #0
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	2300      	movs	r3, #0
 80061b4:	2200      	movs	r2, #0
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4856      	ldr	r0, [pc, #344]	; (8006314 <BSP_STM32_Init_GPIO+0x564>)
 80061ba:	f002 ffb7 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_11;
 80061be:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 80061c2:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80061c4:	2300      	movs	r3, #0
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	2300      	movs	r3, #0
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2300      	movs	r3, #0
 80061ce:	2200      	movs	r2, #0
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	484c      	ldr	r0, [pc, #304]	; (8006304 <BSP_STM32_Init_GPIO+0x554>)
 80061d4:	f002 ffaa 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_2;
 80061d8:	2304      	movs	r3, #4
 80061da:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80061dc:	2300      	movs	r3, #0
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	2300      	movs	r3, #0
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	2300      	movs	r3, #0
 80061e6:	2200      	movs	r2, #0
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4848      	ldr	r0, [pc, #288]	; (800630c <BSP_STM32_Init_GPIO+0x55c>)
 80061ec:	f002 ff9e 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_3|GPIO_PIN_7;
 80061f0:	2388      	movs	r3, #136	; 0x88
 80061f2:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);
 80061f4:	2300      	movs	r3, #0
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	2300      	movs	r3, #0
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	2201      	movs	r2, #1
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4842      	ldr	r0, [pc, #264]	; (800630c <BSP_STM32_Init_GPIO+0x55c>)
 8006204:	f002 ff92 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_5;
 8006208:	2320      	movs	r3, #32
 800620a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 800620c:	2300      	movs	r3, #0
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	2300      	movs	r3, #0
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	2200      	movs	r2, #0
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	483c      	ldr	r0, [pc, #240]	; (800630c <BSP_STM32_Init_GPIO+0x55c>)
 800621c:	f002 ff86 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_6;
 8006220:	2340      	movs	r3, #64	; 0x40
 8006222:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 8006224:	2300      	movs	r3, #0
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	2300      	movs	r3, #0
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4835      	ldr	r0, [pc, #212]	; (800630c <BSP_STM32_Init_GPIO+0x55c>)
 8006236:	f002 ff79 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_11;
 800623a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800623e:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 8006240:	2300      	movs	r3, #0
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	2300      	movs	r3, #0
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	2300      	movs	r3, #0
 800624a:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	482d      	ldr	r0, [pc, #180]	; (8006308 <BSP_STM32_Init_GPIO+0x558>)
 8006252:	f002 ff6b 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_3;
 8006256:	2308      	movs	r3, #8
 8006258:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 800625a:	2300      	movs	r3, #0
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	2300      	movs	r3, #0
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	2300      	movs	r3, #0
 8006264:	2200      	movs	r2, #0
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4825      	ldr	r0, [pc, #148]	; (8006300 <BSP_STM32_Init_GPIO+0x550>)
 800626a:	f002 ff5f 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_9;
 800626e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006272:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8006274:	2300      	movs	r3, #0
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	2300      	movs	r3, #0
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	2300      	movs	r3, #0
 800627e:	2200      	movs	r2, #0
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	481d      	ldr	r0, [pc, #116]	; (80062f8 <BSP_STM32_Init_GPIO+0x548>)
 8006284:	f002 ff52 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_7;
 8006288:	2394      	movs	r3, #148	; 0x94
 800628a:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 800628c:	2300      	movs	r3, #0
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	2300      	movs	r3, #0
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	2200      	movs	r2, #0
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	481b      	ldr	r0, [pc, #108]	; (8006308 <BSP_STM32_Init_GPIO+0x558>)
 800629c:	f002 ff46 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_9|GPIO_PIN_14;
 80062a0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80062a4:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);
 80062a6:	2300      	movs	r3, #0
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	2300      	movs	r3, #0
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	2300      	movs	r3, #0
 80062b0:	2201      	movs	r2, #1
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4812      	ldr	r0, [pc, #72]	; (8006300 <BSP_STM32_Init_GPIO+0x550>)
 80062b6:	f002 ff39 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_13;
 80062ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062be:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 80062c0:	2300      	movs	r3, #0
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	2300      	movs	r3, #0
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2300      	movs	r3, #0
 80062ca:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	480b      	ldr	r0, [pc, #44]	; (8006300 <BSP_STM32_Init_GPIO+0x550>)
 80062d2:	f002 ff2b 	bl	800912c <BSP_STM32_GPIO_Init>

    Pin = GPIO_PIN_5;
 80062d6:	2320      	movs	r3, #32
 80062d8:	607b      	str	r3, [r7, #4]
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80062da:	2300      	movs	r3, #0
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	2300      	movs	r3, #0
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	2300      	movs	r3, #0
 80062e4:	2200      	movs	r2, #0
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	4804      	ldr	r0, [pc, #16]	; (80062fc <BSP_STM32_Init_GPIO+0x54c>)
 80062ea:	f002 ff1f 	bl	800912c <BSP_STM32_GPIO_Init>

	return BSP_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	58020000 	.word	0x58020000
 80062fc:	58020400 	.word	0x58020400
 8006300:	58021800 	.word	0x58021800
 8006304:	58020800 	.word	0x58020800
 8006308:	58020c00 	.word	0x58020c00
 800630c:	58021c00 	.word	0x58021c00
 8006310:	58021000 	.word	0x58021000
 8006314:	58022000 	.word	0x58022000

08006318 <BSP_TickInit>:


uint8_t BSP_TickInit(uint32_t CoreClock, uint32_t TickFreq, uint32_t TickPriority) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]

	if (TickFreq == 0) return BSP_ERROR;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <BSP_TickInit+0x16>
 800632a:	2301      	movs	r3, #1
 800632c:	e01e      	b.n	800636c <BSP_TickInit+0x54>

	// Set SysTick frequency
	if (SysTick_Config(CoreClock / (1000UL / TickFreq))) return BSP_ERROR;
 800632e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	fbb2 f3f3 	udiv	r3, r2, r3
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	fbb2 f3f3 	udiv	r3, r2, r3
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff f868 	bl	8005414 <SysTick_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <BSP_TickInit+0x36>
 800634a:	2301      	movs	r3, #1
 800634c:	e00e      	b.n	800636c <BSP_TickInit+0x54>
	tickfrequency = TickFreq;
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <BSP_TickInit+0x5c>)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	6013      	str	r3, [r2, #0]

	// Set SysTick priority
	if (TickPriority > (1UL << __NVIC_PRIO_BITS)) return BSP_ERROR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b10      	cmp	r3, #16
 8006358:	d901      	bls.n	800635e <BSP_TickInit+0x46>
 800635a:	2301      	movs	r3, #1
 800635c:	e006      	b.n	800636c <BSP_TickInit+0x54>
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800635e:	2200      	movs	r2, #0
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	f04f 30ff 	mov.w	r0, #4294967295
 8006366:	f002 f8c9 	bl	80084fc <BSP_STM32_NVIC_SetPriority>

	return BSP_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	24000000 	.word	0x24000000

08006378 <BSP_IncTick>:


void BSP_IncTick(void) {
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0

	tickvalue += tickfrequency;
 800637c:	4b05      	ldr	r3, [pc, #20]	; (8006394 <BSP_IncTick+0x1c>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <BSP_IncTick+0x20>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4413      	add	r3, r2
 8006386:	4a04      	ldr	r2, [pc, #16]	; (8006398 <BSP_IncTick+0x20>)
 8006388:	6013      	str	r3, [r2, #0]

}
 800638a:	bf00      	nop
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	24000000 	.word	0x24000000
 8006398:	2400039c 	.word	0x2400039c

0800639c <BSP_GetTick>:

uint32_t BSP_GetTick(void) {
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0

	return tickvalue;
 80063a0:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <BSP_GetTick+0x14>)
 80063a2:	681b      	ldr	r3, [r3, #0]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	2400039c 	.word	0x2400039c

080063b4 <BSP_Delay>:

void BSP_Delay(uint32_t delay) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]

	uint32_t wait = delay + tickfrequency;
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <BSP_Delay+0x34>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
	uint32_t tickstart = BSP_GetTick();
 80063c6:	f7ff ffe9 	bl	800639c <BSP_GetTick>
 80063ca:	60b8      	str	r0, [r7, #8]

	while ((BSP_GetTick() - tickstart) < wait) {}
 80063cc:	bf00      	nop
 80063ce:	f7ff ffe5 	bl	800639c <BSP_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d8f7      	bhi.n	80063ce <BSP_Delay+0x1a>

}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	24000000 	.word	0x24000000

080063ec <EXTI15_10_IRQHandler>:
* INT HANDLERS FOR GPIO GROUP EXTIS shared between subsystems
 *******************************************************************/

// INT Handlers for Touch Panel, MPU6050

void EXTI15_10_IRQHandler(void) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & GPIO_PIN_13) {
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <EXTI15_10_IRQHandler+0x2c>
		EXTI->PR1 |= ~(GPIO_PIN_13);
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800640c:	f463 5300 	orn	r3, r3, #8192	; 0x2000
 8006410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		// Call to Touch Panel INT handler
		BSP_LCD_TP_INTHandler();
 8006414:	f7fe fd3a 	bl	8004e8c <BSP_LCD_TP_INTHandler>
	}

	if (EXTI->PR1 & GPIO_PIN_11) {
 8006418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <EXTI15_10_IRQHandler+0x54>
		EXTI->PR1 |= ~(GPIO_PIN_11);
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006434:	f463 6300 	orn	r3, r3, #2048	; 0x800
 8006438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		// Call to IMU INT handler
		BSP_IMU_INTHandler();
 800643c:	f7fb fc20 	bl	8001c80 <BSP_IMU_INTHandler>
	}
}
 8006440:	bf00      	nop
 8006442:	bd80      	pop	{r7, pc}

08006444 <EXTI9_5_IRQHandler>:

// INT Handler for BLE Module

void EXTI9_5_IRQHandler(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & GPIO_PIN_6) {
 8006448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <EXTI9_5_IRQHandler+0x2c>
		EXTI->PR1 |= ~(GPIO_PIN_6);
 8006458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006464:	f063 0340 	orn	r3, r3, #64	; 0x40
 8006468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		// Call to BLE module INT handler
		BSP_BLE_INTHandler();
 800646c:	f3af 8000 	nop.w
	}
}
 8006470:	bf00      	nop
 8006472:	bd80      	pop	{r7, pc}

08006474 <BSP_Serial_Init>:
	BSP_STM32_UART_Transmit(USART2, pData, 1);
	return ch;
}


uint8_t BSP_Serial_Init(void) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af04      	add	r7, sp, #16
	// Configure USART2 interface
	if (BSP_STM32_UART_Init(USART2, 115200, UART_WORDLENGTH_8B, UART_STOPBITS_1, UART_PARITY_NONE)) return BSP_ERROR;
 800647a:	2300      	movs	r3, #0
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	2300      	movs	r3, #0
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8006486:	4819      	ldr	r0, [pc, #100]	; (80064ec <BSP_Serial_Init+0x78>)
 8006488:	f007 fada 	bl	800da40 <BSP_STM32_UART_Init>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <BSP_Serial_Init+0x22>
 8006492:	2301      	movs	r3, #1
 8006494:	e026      	b.n	80064e4 <BSP_Serial_Init+0x70>

	// Linking DMA Stream to USART2 RX context
	if (BSP_STM32_DMA_Init(DMA1_Stream3, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_BYTE, DMA_MDATAALIGN_BYTE, DMA_CIRCULAR, DMA_PRIORITY_LOW)) return BSP_ERROR;
 8006496:	2300      	movs	r3, #0
 8006498:	9303      	str	r3, [sp, #12]
 800649a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800649e:	9302      	str	r3, [sp, #8]
 80064a0:	2300      	movs	r3, #0
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	2300      	movs	r3, #0
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064ac:	2200      	movs	r2, #0
 80064ae:	2100      	movs	r1, #0
 80064b0:	480f      	ldr	r0, [pc, #60]	; (80064f0 <BSP_Serial_Init+0x7c>)
 80064b2:	f002 f8c9 	bl	8008648 <BSP_STM32_DMA_Init>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <BSP_Serial_Init+0x4c>
 80064bc:	2301      	movs	r3, #1
 80064be:	e011      	b.n	80064e4 <BSP_Serial_Init+0x70>
	if (BSP_STM32_DMA_CtxLink(DMA1_Stream3, &BSP_hserial_ctx, DMA_REQUEST_USART2_RX)) return BSP_ERROR;
 80064c0:	222b      	movs	r2, #43	; 0x2b
 80064c2:	490c      	ldr	r1, [pc, #48]	; (80064f4 <BSP_Serial_Init+0x80>)
 80064c4:	480a      	ldr	r0, [pc, #40]	; (80064f0 <BSP_Serial_Init+0x7c>)
 80064c6:	f002 f90b 	bl	80086e0 <BSP_STM32_DMA_CtxLink>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <BSP_Serial_Init+0x60>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e007      	b.n	80064e4 <BSP_Serial_Init+0x70>

	// Start listening on USART2 port
	BSP_STM32_UART_StartListen(USART2, &BSP_hserial_ctx, BSP_hserial.data_rx, SERIAL_BUF_SIZE);
 80064d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064d8:	4a07      	ldr	r2, [pc, #28]	; (80064f8 <BSP_Serial_Init+0x84>)
 80064da:	4906      	ldr	r1, [pc, #24]	; (80064f4 <BSP_Serial_Init+0x80>)
 80064dc:	4803      	ldr	r0, [pc, #12]	; (80064ec <BSP_Serial_Init+0x78>)
 80064de:	f007 fb25 	bl	800db2c <BSP_STM32_UART_StartListen>

	return BSP_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40004400 	.word	0x40004400
 80064f0:	40020058 	.word	0x40020058
 80064f4:	240003a0 	.word	0x240003a0
 80064f8:	3800018c 	.word	0x3800018c

080064fc <USART2_IRQHandler>:
	if (BSP_STM32_UART_Transmit_IT(USART2, &BSP_hserial_ctx, pData, Size)) return BSP_ERROR;
	return BSP_OK;
}


void USART2_IRQHandler(void) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
	BSP_STM32_UART_IRQHandler(USART2, &BSP_hserial_ctx);
 8006500:	4902      	ldr	r1, [pc, #8]	; (800650c <USART2_IRQHandler+0x10>)
 8006502:	4803      	ldr	r0, [pc, #12]	; (8006510 <USART2_IRQHandler+0x14>)
 8006504:	f007 fb4a 	bl	800db9c <BSP_STM32_UART_IRQHandler>
}
 8006508:	bf00      	nop
 800650a:	bd80      	pop	{r7, pc}
 800650c:	240003a0 	.word	0x240003a0
 8006510:	40004400 	.word	0x40004400

08006514 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8006518:	2000      	movs	r0, #0
 800651a:	f00c f9e5 	bl	80128e8 <tud_cdc_n_available>
 800651e:	4603      	mov	r3, r0
}
 8006520:	4618      	mov	r0, r3
 8006522:	bd80      	pop	{r7, pc}

08006524 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	2000      	movs	r0, #0
 8006534:	f00c f9f0 	bl	8012918 <tud_cdc_n_read>
 8006538:	4603      	mov	r3, r0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	2000      	movs	r0, #0
 8006552:	f00c fa05 	bl	8012960 <tud_cdc_n_write>
 8006556:	4603      	mov	r3, r0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8006564:	2000      	movs	r0, #0
 8006566:	f00c fa27 	bl	80129b8 <tud_cdc_n_write_flush>
 800656a:	4603      	mov	r3, r0
}
 800656c:	4618      	mov	r0, r3
 800656e:	bd80      	pop	{r7, pc}

08006570 <BSP_USB_Init_MSC>:

//--------------------------------------------------------------------+
// BSP USB functions
//--------------------------------------------------------------------+

uint8_t BSP_USB_Init_MSC() {
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
	usb_mode = USB_MODE_MSC;
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <BSP_USB_Init_MSC+0x1c>)
 8006576:	2201      	movs	r2, #1
 8006578:	701a      	strb	r2, [r3, #0]
	BSP_STM32_PCD_EnableUSBVoltageDetector();
 800657a:	f004 f829 	bl	800a5d0 <BSP_STM32_PCD_EnableUSBVoltageDetector>
	tud_init(TUD_OPT_RHPORT);
 800657e:	2000      	movs	r0, #0
 8006580:	f00e fe0e 	bl	80151a0 <tud_init>
	return BSP_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	24000408 	.word	0x24000408

08006590 <BSP_USB_Task>:
	tud_disconnect();
	BSP_STM32_PCD_DisableUSBVoltageDetector();
	return BSP_OK;
}

void BSP_USB_Task() {
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
	if (usb_mode == USB_MODE_NONE) return;
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <BSP_USB_Task+0x40>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d012      	beq.n	80065c2 <BSP_USB_Task+0x32>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 800659c:	2100      	movs	r1, #0
 800659e:	f04f 30ff 	mov.w	r0, #4294967295
 80065a2:	f00e fec9 	bl	8015338 <tud_task_ext>
}
 80065a6:	bf00      	nop

	tud_task();

	switch (usb_mode) {
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <BSP_USB_Task+0x40>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d00a      	beq.n	80065c6 <BSP_USB_Task+0x36>
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	dc0b      	bgt.n	80065cc <BSP_USB_Task+0x3c>
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d008      	beq.n	80065ca <BSP_USB_Task+0x3a>
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d107      	bne.n	80065cc <BSP_USB_Task+0x3c>
	case USB_MODE_MSC:
		break;
	case USB_MODE_CDC:
		cdc_task();
 80065bc:	f000 f9b0 	bl	8006920 <cdc_task>
		break;
 80065c0:	e004      	b.n	80065cc <BSP_USB_Task+0x3c>
	if (usb_mode == USB_MODE_NONE) return;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <BSP_USB_Task+0x3c>
	case USB_MODE_HID:
		// hid_task();
		break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <BSP_USB_Task+0x3c>
		break;
 80065ca:	bf00      	nop
	}
}
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	24000408 	.word	0x24000408

080065d4 <OTG_FS_IRQHandler>:

//--------------------------------------------------------------------+
// USB global IRQ handler
//--------------------------------------------------------------------+

void OTG_FS_IRQHandler(void) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 80065d8:	2000      	movs	r0, #0
 80065da:	f011 fe99 	bl	8018310 <dcd_int_handler>
}
 80065de:	bf00      	nop
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <tud_mount_cb>:
//--------------------------------------------------------------------+
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void) {}
 80065e2:	b480      	push	{r7}
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	bf00      	nop
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {}
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	bf00      	nop
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en) {
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	4603      	mov	r3, r0
 8006606:	71fb      	strb	r3, [r7, #7]
	(void) remote_wakeup_en;
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void) {}
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
 8006618:	bf00      	nop
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <tud_descriptor_device_cb>:

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void) {
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
	switch (usb_mode) {
 8006628:	4b08      	ldr	r3, [pc, #32]	; (800664c <tud_descriptor_device_cb+0x28>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d002      	beq.n	8006636 <tud_descriptor_device_cb+0x12>
 8006630:	2b02      	cmp	r3, #2
 8006632:	d002      	beq.n	800663a <tud_descriptor_device_cb+0x16>
 8006634:	e003      	b.n	800663e <tud_descriptor_device_cb+0x1a>
	case USB_MODE_MSC:
		return (uint8_t const *) &desc_device_msc;
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <tud_descriptor_device_cb+0x2c>)
 8006638:	e002      	b.n	8006640 <tud_descriptor_device_cb+0x1c>
	case USB_MODE_CDC:
		return (uint8_t const *) &desc_device_cdc;
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <tud_descriptor_device_cb+0x30>)
 800663c:	e000      	b.n	8006640 <tud_descriptor_device_cb+0x1c>
	}
	return 0;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	24000408 	.word	0x24000408
 8006650:	0801be94 	.word	0x0801be94
 8006654:	0801bec8 	.word	0x0801bec8

08006658 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index) {
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	71fb      	strb	r3, [r7, #7]
	(void) index; // for multiple configurations
	switch (usb_mode) {
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <tud_descriptor_configuration_cb+0x30>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d002      	beq.n	8006670 <tud_descriptor_configuration_cb+0x18>
 800666a:	2b02      	cmp	r3, #2
 800666c:	d002      	beq.n	8006674 <tud_descriptor_configuration_cb+0x1c>
 800666e:	e003      	b.n	8006678 <tud_descriptor_configuration_cb+0x20>
	case USB_MODE_MSC:
		return desc_fs_conf_msc;
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <tud_descriptor_configuration_cb+0x34>)
 8006672:	e002      	b.n	800667a <tud_descriptor_configuration_cb+0x22>
	case USB_MODE_CDC:
		return desc_fs_conf_cdc;
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <tud_descriptor_configuration_cb+0x38>)
 8006676:	e000      	b.n	800667a <tud_descriptor_configuration_cb+0x22>
	}
	return 0;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	24000408 	.word	0x24000408
 800668c:	0801bea8 	.word	0x0801bea8
 8006690:	0801bedc 	.word	0x0801bedc

08006694 <tud_descriptor_string_cb>:

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	460a      	mov	r2, r1
 800669e:	71fb      	strb	r3, [r7, #7]
 80066a0:	4613      	mov	r3, r2
 80066a2:	80bb      	strh	r3, [r7, #4]
	(void) langid;

	uint8_t chr_count;

	if (index == 0) {
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d108      	bne.n	80066bc <tud_descriptor_string_cb+0x28>
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80066aa:	4b21      	ldr	r3, [pc, #132]	; (8006730 <tud_descriptor_string_cb+0x9c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	4b20      	ldr	r3, [pc, #128]	; (8006734 <tud_descriptor_string_cb+0xa0>)
 80066b4:	805a      	strh	r2, [r3, #2]
		chr_count = 1;
 80066b6:	2301      	movs	r3, #1
 80066b8:	73fb      	strb	r3, [r7, #15]
 80066ba:	e027      	b.n	800670c <tud_descriptor_string_cb+0x78>
	} else {
		// Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
		// https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

		if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d901      	bls.n	80066c6 <tud_descriptor_string_cb+0x32>
 80066c2:	2300      	movs	r3, #0
 80066c4:	e030      	b.n	8006728 <tud_descriptor_string_cb+0x94>

		const char* str = string_desc_arr[index];
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	4a19      	ldr	r2, [pc, #100]	; (8006730 <tud_descriptor_string_cb+0x9c>)
 80066ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ce:	60bb      	str	r3, [r7, #8]

		// Cap at max char
		chr_count = (uint8_t) strlen(str);
 80066d0:	68b8      	ldr	r0, [r7, #8]
 80066d2:	f7f9 fe01 	bl	80002d8 <strlen>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]
		if ( chr_count > 31 ) chr_count = 31;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b1f      	cmp	r3, #31
 80066de:	d901      	bls.n	80066e4 <tud_descriptor_string_cb+0x50>
 80066e0:	231f      	movs	r3, #31
 80066e2:	73fb      	strb	r3, [r7, #15]

		// Convert ASCII string into UTF-16
		for(uint8_t i=0; i<chr_count; i++) _desc_str[1+i] = str[i];
 80066e4:	2300      	movs	r3, #0
 80066e6:	73bb      	strb	r3, [r7, #14]
 80066e8:	e00c      	b.n	8006704 <tud_descriptor_string_cb+0x70>
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	4413      	add	r3, r2
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	3301      	adds	r3, #1
 80066f6:	b291      	uxth	r1, r2
 80066f8:	4a0e      	ldr	r2, [pc, #56]	; (8006734 <tud_descriptor_string_cb+0xa0>)
 80066fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	3301      	adds	r3, #1
 8006702:	73bb      	strb	r3, [r7, #14]
 8006704:	7bba      	ldrb	r2, [r7, #14]
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	429a      	cmp	r2, r3
 800670a:	d3ee      	bcc.n	80066ea <tud_descriptor_string_cb+0x56>
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	b29b      	uxth	r3, r3
 8006710:	3301      	adds	r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	b29b      	uxth	r3, r3
 8006718:	b21b      	sxth	r3, r3
 800671a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800671e:	b21b      	sxth	r3, r3
 8006720:	b29a      	uxth	r2, r3
 8006722:	4b04      	ldr	r3, [pc, #16]	; (8006734 <tud_descriptor_string_cb+0xa0>)
 8006724:	801a      	strh	r2, [r3, #0]

	return _desc_str;
 8006726:	4b03      	ldr	r3, [pc, #12]	; (8006734 <tud_descriptor_string_cb+0xa0>)
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	24000004 	.word	0x24000004
 8006734:	2400040c 	.word	0x2400040c

08006738 <tud_msc_read10_cb>:
// USB MSC
//--------------------------------------------------------------------+


// Invoked when received SCSI READ10 command
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]

	(void) lun;
	(void) offset; // Offset always 0 when MSC buff is larger than block size

	uint32_t bn = bufsize >> 9; // Divide by 512
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	0a5b      	lsrs	r3, r3, #9
 800674c:	617b      	str	r3, [r7, #20]

	//if (HAL_SD_ReadBlocks(&hsd2, buffer, lba, bn, HAL_MAX_DELAY)) return -1;
	if (BSP_SDCARD_ReadBlocks(buffer, lba, bn)) return -1;
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	6838      	ldr	r0, [r7, #0]
 8006754:	f7fe fda2 	bl	800529c <BSP_SDCARD_ReadBlocks>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <tud_msc_read10_cb+0x2c>
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	e000      	b.n	8006766 <tud_msc_read10_cb+0x2e>

	return (int32_t) bufsize;
 8006764:	6a3b      	ldr	r3, [r7, #32]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <tud_msc_write10_cb>:

// Invoked when received SCSI WRITE10 command
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize) {
 800676e:	b580      	push	{r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4603      	mov	r3, r0
 800677c:	73fb      	strb	r3, [r7, #15]

	(void) lun;
	(void) offset; // Offset always 0 when MSC buff is larger than block size

	uint32_t bn = bufsize >> 9; // Divide by 512
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	0a5b      	lsrs	r3, r3, #9
 8006782:	617b      	str	r3, [r7, #20]

	//if (HAL_SD_WriteBlocks(&hsd2, buffer, lba, bn, HAL_MAX_DELAY)) return -1;
	if (BSP_SDCARD_WriteBlocks(buffer, lba, bn)) return -1;
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	6838      	ldr	r0, [r7, #0]
 800678a:	f7fe fdab 	bl	80052e4 <BSP_SDCARD_WriteBlocks>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <tud_msc_write10_cb+0x2c>
 8006794:	f04f 33ff 	mov.w	r3, #4294967295
 8006798:	e000      	b.n	800679c <tud_msc_write10_cb+0x2e>

	return (int32_t) bufsize;
 800679a:	6a3b      	ldr	r3, [r7, #32]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <tud_msc_inquiry_cb>:

// Invoked when received SCSI_CMD_INQUIRY
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4]) {
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b08d      	sub	sp, #52	; 0x34
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]

	(void) lun;

	const char vid[] = USB_MANUFACTURER;
 80067b4:	4a14      	ldr	r2, [pc, #80]	; (8006808 <tud_msc_inquiry_cb+0x64>)
 80067b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80067bc:	c303      	stmia	r3!, {r0, r1}
 80067be:	701a      	strb	r2, [r3, #0]
	const char pid[] = USB_PRODUCT;
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <tud_msc_inquiry_cb+0x68>)
 80067c2:	f107 0414 	add.w	r4, r7, #20
 80067c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067c8:	c407      	stmia	r4!, {r0, r1, r2}
 80067ca:	8023      	strh	r3, [r4, #0]
	const char rev[] = USB_REVISION;
 80067cc:	4a10      	ldr	r2, [pc, #64]	; (8006810 <tud_msc_inquiry_cb+0x6c>)
 80067ce:	f107 0310 	add.w	r3, r7, #16
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	4611      	mov	r1, r2
 80067d6:	8019      	strh	r1, [r3, #0]
 80067d8:	3302      	adds	r3, #2
 80067da:	0c12      	lsrs	r2, r2, #16
 80067dc:	701a      	strb	r2, [r3, #0]

	memcpy(vendor_id  , vid, strlen(vid));
 80067de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067e2:	2208      	movs	r2, #8
 80067e4:	4619      	mov	r1, r3
 80067e6:	68b8      	ldr	r0, [r7, #8]
 80067e8:	f012 f9a0 	bl	8018b2c <memcpy>
	memcpy(product_id , pid, strlen(pid));
 80067ec:	f107 0314 	add.w	r3, r7, #20
 80067f0:	220d      	movs	r2, #13
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f012 f999 	bl	8018b2c <memcpy>
 80067fa:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(product_rev, rev, strlen(rev));
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	801a      	strh	r2, [r3, #0]
}
 8006800:	bf00      	nop
 8006802:	3734      	adds	r7, #52	; 0x34
 8006804:	46bd      	mov	sp, r7
 8006806:	bd90      	pop	{r4, r7, pc}
 8006808:	08018ee4 	.word	0x08018ee4
 800680c:	08018ef0 	.word	0x08018ef0
 8006810:	08018f1c 	.word	0x08018f1c

08006814 <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun) {
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	71fb      	strb	r3, [r7, #7]
	(void) lun;
	return true;
 800681e:	2301      	movs	r3, #1
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	4603      	mov	r3, r0
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	73fb      	strb	r3, [r7, #15]

	(void) lun;

	*block_count  = BSP_SDCARD_GetBlockNo();
 800683a:	f7fe fd77 	bl	800532c <BSP_SDCARD_GetBlockNo>
 800683e:	4602      	mov	r2, r0
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	601a      	str	r2, [r3, #0]
	*block_size = BSP_SDCARD_GetBlockSize();
 8006844:	f7fe fd82 	bl	800534c <BSP_SDCARD_GetBlockSize>
 8006848:	4603      	mov	r3, r0
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	801a      	strh	r2, [r3, #0]
}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <tud_msc_scsi_cb>:

// Invoked when received an SCSI command not in built-in list below.
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, TEST_UNIT_READY, START_STOP_UNIT, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb(uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize) {
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	461a      	mov	r2, r3
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	4613      	mov	r3, r2
 800686a:	81bb      	strh	r3, [r7, #12]

	void const* response = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	61bb      	str	r3, [r7, #24]
	int32_t resplen = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]

	// most scsi handled is input
	bool in_xfer = true;
 8006874:	2301      	movs	r3, #1
 8006876:	75fb      	strb	r3, [r7, #23]

	switch (scsi_cmd[0]) {

    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8006878:	7bf8      	ldrb	r0, [r7, #15]
 800687a:	2300      	movs	r3, #0
 800687c:	2220      	movs	r2, #32
 800687e:	2105      	movs	r1, #5
 8006880:	f00c fd70 	bl	8013364 <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	61fb      	str	r3, [r7, #28]
      break;
 800688a:	bf00      	nop

	}

	// return resplen must not larger than bufsize
	if (resplen > bufsize) resplen = bufsize;
 800688c:	89bb      	ldrh	r3, [r7, #12]
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	429a      	cmp	r2, r3
 8006892:	dd01      	ble.n	8006898 <tud_msc_scsi_cb+0x40>
 8006894:	89bb      	ldrh	r3, [r7, #12]
 8006896:	61fb      	str	r3, [r7, #28]

	if (response && (resplen > 0)) {
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <tud_msc_scsi_cb+0x5e>
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dd08      	ble.n	80068b6 <tud_msc_scsi_cb+0x5e>
		if(in_xfer) {
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <tud_msc_scsi_cb+0x5e>
			memcpy(buffer, response, (size_t) resplen);
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	461a      	mov	r2, r3
 80068ae:	69b9      	ldr	r1, [r7, #24]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f012 f93b 	bl	8018b2c <memcpy>
		} else {
			// SCSI output
		}
	}

	return (int32_t) resplen;
 80068b6:	69fb      	ldr	r3, [r7, #28]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <tud_msc_start_stop_cb>:

// Invoked when received Start Stop Unit command
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject) {
 80068c0:	b490      	push	{r4, r7}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4604      	mov	r4, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	461a      	mov	r2, r3
 80068ce:	4623      	mov	r3, r4
 80068d0:	71fb      	strb	r3, [r7, #7]
 80068d2:	4603      	mov	r3, r0
 80068d4:	71bb      	strb	r3, [r7, #6]
 80068d6:	460b      	mov	r3, r1
 80068d8:	717b      	strb	r3, [r7, #5]
 80068da:	4613      	mov	r3, r2
 80068dc:	713b      	strb	r3, [r7, #4]
		} else {
			// unload disk storage
		}
	}

	return true;
 80068de:	2301      	movs	r3, #1
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc90      	pop	{r4, r7}
 80068e8:	4770      	bx	lr

080068ea <tud_msc_request_sense_cb>:

// Invoked when received REQUEST_SENSE
int32_t tud_msc_request_sense_cb(uint8_t lun, void* buffer, uint16_t bufsize) {
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	4603      	mov	r3, r0
 80068f2:	6039      	str	r1, [r7, #0]
 80068f4:	71fb      	strb	r3, [r7, #7]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80bb      	strh	r3, [r7, #4]
	(void) lun;
	(void) buffer;
	(void) bufsize;
	return 0;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <tud_msc_is_writable_cb>:

// Invoked to check if device is writable as part of SCSI WRITE10
bool tud_msc_is_writable_cb(uint8_t lun) {
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
	(void) lun;
	return true;
 8006912:	2301      	movs	r3, #1
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <cdc_task>:
//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+

void cdc_task(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b092      	sub	sp, #72	; 0x48
 8006924:	af00      	add	r7, sp, #0
  // connected() check for DTR bit
  // Most but not all terminal client set this when making connection
  // if ( tud_cdc_connected() )
  {
    // connected and there are data available
    if ( tud_cdc_available() )
 8006926:	f7ff fdf5 	bl	8006514 <tud_cdc_available>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00c      	beq.n	800694a <cdc_task+0x2a>
    {
      // read data
      char buf[64];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	2140      	movs	r1, #64	; 0x40
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff fdf5 	bl	8006524 <tud_cdc_read>
 800693a:	6478      	str	r0, [r7, #68]	; 0x44

      // Echo back
      // Note: Skip echo by commenting out write() and write_flush()
      // for throughput test e.g
      //    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
      tud_cdc_write(buf, count);
 800693c:	1d3b      	adds	r3, r7, #4
 800693e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fdfe 	bl	8006542 <tud_cdc_write>
      tud_cdc_write_flush();
 8006946:	f7ff fe0b 	bl	8006560 <tud_cdc_write_flush>
    }
  }
}
 800694a:	bf00      	nop
 800694c:	3748      	adds	r7, #72	; 0x48
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <_charw>:
#define ABS(X)		((X) > 0 ? (X) : -(X))
#define MIN(A, B)	((A) > (B) ? (B) : (A))
#define MAX(A, B)	((A) > (B) ? (A) : (B))


inline static uint8_t _charw(const uint8_t *font, uint8_t ch) {
 8006952:	b480      	push	{r7}
 8006954:	b087      	sub	sp, #28
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	70fb      	strb	r3, [r7, #3]
	// This function only returns character width

	uint16_t *adr0;								// Start address of encoded character
	uint16_t *adr1;								// End address of encoded character
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3301      	adds	r3, #1
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	75fb      	strb	r3, [r7, #23]

	// Testing if character is outside allowable range
	if ((ch < 33) || (ch > 126)) return swidth;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	2b20      	cmp	r3, #32
 800696a:	d902      	bls.n	8006972 <_charw+0x20>
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	2b7e      	cmp	r3, #126	; 0x7e
 8006970:	d901      	bls.n	8006976 <_charw+0x24>
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	e01c      	b.n	80069b0 <_charw+0x5e>

	// Looking for character in index
	uint16_t a = (ch - 33) * 2;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	3b21      	subs	r3, #33	; 0x21
 800697a:	b29b      	uxth	r3, r3
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	82bb      	strh	r3, [r7, #20]
	adr0 = (uint16_t*)(font + a + 2);
 8006980:	8abb      	ldrh	r3, [r7, #20]
 8006982:	3302      	adds	r3, #2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4413      	add	r3, r2
 8006988:	613b      	str	r3, [r7, #16]
	adr1 = (uint16_t*)(font + a + 4);
 800698a:	8abb      	ldrh	r3, [r7, #20]
 800698c:	3304      	adds	r3, #4
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4413      	add	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

	// Testing if character is outside defined subset
	if (*adr0 == *adr1) return swidth;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	881a      	ldrh	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d101      	bne.n	80069a4 <_charw+0x52>
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	e005      	b.n	80069b0 <_charw+0x5e>

	// Reading width of given character
	return *(font + *adr0);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	781b      	ldrb	r3, [r3, #0]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <_charblend>:
	}
	return width;
}


inline static uint8_t _charblend(LCD_HandleTypeDef *lcd, uint8_t layer,  int16_t x, int16_t y, const uint8_t *font, uint8_t ch, uint32_t *text_clut) {
 80069bc:	b590      	push	{r4, r7, lr}
 80069be:	b08d      	sub	sp, #52	; 0x34
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	4608      	mov	r0, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	461a      	mov	r2, r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	72fb      	strb	r3, [r7, #11]
 80069ce:	460b      	mov	r3, r1
 80069d0:	813b      	strh	r3, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
	// Function rendering character on screen
	uint16_t *adr0;								// Start address of encoded character
	uint16_t *adr1;								// End address of encoded character
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 80069d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d8:	3301      	adds	r3, #1
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Testing if character is outside allowable range
	if ((ch < 33) || (ch > 126)) return swidth;
 80069e0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d903      	bls.n	80069f0 <_charblend+0x34>
 80069e8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80069ec:	2b7e      	cmp	r3, #126	; 0x7e
 80069ee:	d902      	bls.n	80069f6 <_charblend+0x3a>
 80069f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069f4:	e0d2      	b.n	8006b9c <_charblend+0x1e0>

	// Looking for character in index
	uint16_t a = (ch - 33) * 2;
 80069f6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80069fa:	3b21      	subs	r3, #33	; 0x21
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	84bb      	strh	r3, [r7, #36]	; 0x24
	adr0 = (uint16_t*)(font + a + 2);
 8006a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a04:	3302      	adds	r3, #2
 8006a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a08:	4413      	add	r3, r2
 8006a0a:	623b      	str	r3, [r7, #32]
	adr1 = (uint16_t*)(font + a + 4);
 8006a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a0e:	3304      	adds	r3, #4
 8006a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a12:	4413      	add	r3, r2
 8006a14:	61fb      	str	r3, [r7, #28]

	// Testing if character is outside defined subset
	if (*adr0 == *adr1) return swidth;
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	881a      	ldrh	r2, [r3, #0]
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d102      	bne.n	8006a28 <_charblend+0x6c>
 8006a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a26:	e0b9      	b.n	8006b9c <_charblend+0x1e0>

	// Reading width of given character
	uint8_t width = *(font + *adr0);
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a30:	4413      	add	r3, r2
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	76fb      	strb	r3, [r7, #27]

	// Decoding and drawing character
	uint8_t m;
	int16_t fx = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t fy = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8006a3e:	7afa      	ldrb	r2, [r7, #11]
 8006a40:	68f9      	ldr	r1, [r7, #12]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	3339      	adds	r3, #57	; 0x39
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	76bb      	strb	r3, [r7, #26]
	uint32_t offset = lcd->Layers[layer].Frames[eframe];
 8006a52:	7afa      	ldrb	r2, [r7, #11]
 8006a54:	7eb8      	ldrb	r0, [r7, #26]
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	4403      	add	r3, r0
 8006a60:	330a      	adds	r3, #10
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	617b      	str	r3, [r7, #20]


	for (uint16_t j = *adr0 + 1; j < *adr1; j++) {
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a72:	e08c      	b.n	8006b8e <_charblend+0x1d2>
		m = *(font + j);
 8006a74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a78:	4413      	add	r3, r2
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	74fb      	strb	r3, [r7, #19]
		switch (m >> 6) {
 8006a7e:	7cfb      	ldrb	r3, [r7, #19]
 8006a80:	099b      	lsrs	r3, r3, #6
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d009      	beq.n	8006a9c <_charblend+0xe0>
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	dc7d      	bgt.n	8006b88 <_charblend+0x1cc>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <_charblend+0xe0>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db79      	blt.n	8006b88 <_charblend+0x1cc>
 8006a94:	3b01      	subs	r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d876      	bhi.n	8006b88 <_charblend+0x1cc>
 8006a9a:	e039      	b.n	8006b10 <_charblend+0x154>
		case 0: // 0% color
		case 3:	// 100% color
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006aa2:	e02d      	b.n	8006b00 <_charblend+0x144>
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 8006aa4:	4b3f      	ldr	r3, [pc, #252]	; (8006ba4 <_charblend+0x1e8>)
 8006aa6:	681c      	ldr	r4, [r3, #0]
 8006aa8:	893a      	ldrh	r2, [r7, #8]
 8006aaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006aac:	4413      	add	r3, r2
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	b219      	sxth	r1, r3
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ab6:	4413      	add	r3, r2
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	b218      	sxth	r0, r3
 8006abc:	7cfb      	ldrb	r3, [r7, #19]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac6:	4413      	add	r3, r2
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4602      	mov	r2, r0
 8006acc:	6978      	ldr	r0, [r7, #20]
 8006ace:	47a0      	blx	r4
				fx++;
 8006ad0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	85fb      	strh	r3, [r7, #46]	; 0x2e
				if (fx==width) { fx = 0; fy++; }
 8006adc:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006ae0:	7efb      	ldrb	r3, [r7, #27]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d107      	bne.n	8006af6 <_charblend+0x13a>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006aea:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3301      	adds	r3, #1
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	85bb      	strh	r3, [r7, #44]	; 0x2c
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 8006af6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006afa:	3301      	adds	r3, #1
 8006afc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006b00:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006b04:	7cfb      	ldrb	r3, [r7, #19]
 8006b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	dbca      	blt.n	8006aa4 <_charblend+0xe8>
			}
			break;
 8006b0e:	e03b      	b.n	8006b88 <_charblend+0x1cc>
		case 1: // 33% color
		case 2: // 66% color
			for (int8_t i = 6; i >= 0; i-=2) {
 8006b10:	2306      	movs	r3, #6
 8006b12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006b16:	e032      	b.n	8006b7e <_charblend+0x1c2>
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[(m >> i) & 0x03]);
 8006b18:	4b22      	ldr	r3, [pc, #136]	; (8006ba4 <_charblend+0x1e8>)
 8006b1a:	681c      	ldr	r4, [r3, #0]
 8006b1c:	893a      	ldrh	r2, [r7, #8]
 8006b1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b20:	4413      	add	r3, r2
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	b219      	sxth	r1, r3
 8006b26:	88fa      	ldrh	r2, [r7, #6]
 8006b28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b2a:	4413      	add	r3, r2
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	b218      	sxth	r0, r3
 8006b30:	7cfa      	ldrb	r2, [r7, #19]
 8006b32:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8006b36:	fa42 f303 	asr.w	r3, r2, r3
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b42:	4413      	add	r3, r2
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4602      	mov	r2, r0
 8006b48:	6978      	ldr	r0, [r7, #20]
 8006b4a:	47a0      	blx	r4
				fx++;
 8006b4c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3301      	adds	r3, #1
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	85fb      	strh	r3, [r7, #46]	; 0x2e
				if (fx==width) { fx = 0; fy++; }
 8006b58:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006b5c:	7efb      	ldrb	r3, [r7, #27]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d107      	bne.n	8006b72 <_charblend+0x1b6>
 8006b62:	2300      	movs	r3, #0
 8006b64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b66:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	85bb      	strh	r3, [r7, #44]	; 0x2c
			for (int8_t i = 6; i >= 0; i-=2) {
 8006b72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b76:	3b02      	subs	r3, #2
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006b7e:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dac8      	bge.n	8006b18 <_charblend+0x15c>
			}
			break;
 8006b86:	bf00      	nop
	for (uint16_t j = *adr0 + 1; j < *adr1; j++) {
 8006b88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006b94:	429a      	cmp	r2, r3
 8006b96:	f4ff af6d 	bcc.w	8006a74 <_charblend+0xb8>
		}
	}
	return width;
 8006b9a:	7efb      	ldrb	r3, [r7, #27]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3734      	adds	r7, #52	; 0x34
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd90      	pop	{r4, r7, pc}
 8006ba4:	240002b0 	.word	0x240002b0

08006ba8 <G2D_DrawHLine>:

	BSP_LCD_DMA2D_Wait();
	BSP_LCD_UpdatePixel(offset, x, y, color);
}

void G2D_DrawHLine(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, int16_t length, uint32_t color) {
 8006ba8:	b590      	push	{r4, r7, lr}
 8006baa:	b089      	sub	sp, #36	; 0x24
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	72fb      	strb	r3, [r7, #11]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	813b      	strh	r3, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]
	if (length == 0) return;
 8006bc2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d048      	beq.n	8006c5c <G2D_DrawHLine+0xb4>
	if (length < 0) {x -= length + 1; length = -length;}
 8006bca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da0a      	bge.n	8006be8 <G2D_DrawHLine+0x40>
 8006bd2:	893a      	ldrh	r2, [r7, #8]
 8006bd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	813b      	strh	r3, [r7, #8]
 8006be0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006be2:	425b      	negs	r3, r3
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	853b      	strh	r3, [r7, #40]	; 0x28
	if (y < 1) return;
 8006be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dd37      	ble.n	8006c60 <G2D_DrawHLine+0xb8>
	if (y >= LCD_HEIGHT) return;
 8006bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bf4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006bf8:	da34      	bge.n	8006c64 <G2D_DrawHLine+0xbc>
	if ((x + length) < 1) return;
 8006bfa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006bfe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006c02:	4413      	add	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd2f      	ble.n	8006c68 <G2D_DrawHLine+0xc0>
	if (x >= LCD_WIDTH) return;
 8006c08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006c0c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006c10:	da2c      	bge.n	8006c6c <G2D_DrawHLine+0xc4>
	uint16_t x0 = MAX(0, x);
 8006c12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006c16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c1a:	b21b      	sxth	r3, r3
 8006c1c:	82fb      	strh	r3, [r7, #22]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8006c1e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006c22:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006c26:	4413      	add	r3, r2
 8006c28:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006c2c:	bfa8      	it	ge
 8006c2e:	f44f 7348 	movge.w	r3, #800	; 0x320
 8006c32:	82bb      	strh	r3, [r7, #20]
	uint16_t l = x1 - x0;
 8006c34:	8aba      	ldrh	r2, [r7, #20]
 8006c36:	8afb      	ldrh	r3, [r7, #22]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	827b      	strh	r3, [r7, #18]
	uint16_t lo = LCD_WIDTH - l;
 8006c3c:	8a7b      	ldrh	r3, [r7, #18]
 8006c3e:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8006c42:	823b      	strh	r3, [r7, #16]
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <G2D_DrawHLine+0xcc>)
 8006c46:	681c      	ldr	r4, [r3, #0]
 8006c48:	88f9      	ldrh	r1, [r7, #6]
 8006c4a:	8a7a      	ldrh	r2, [r7, #18]
 8006c4c:	8af8      	ldrh	r0, [r7, #22]
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	8a3b      	ldrh	r3, [r7, #16]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2301      	movs	r3, #1
 8006c58:	47a0      	blx	r4
 8006c5a:	e008      	b.n	8006c6e <G2D_DrawHLine+0xc6>
	if (length == 0) return;
 8006c5c:	bf00      	nop
 8006c5e:	e006      	b.n	8006c6e <G2D_DrawHLine+0xc6>
	if (y < 1) return;
 8006c60:	bf00      	nop
 8006c62:	e004      	b.n	8006c6e <G2D_DrawHLine+0xc6>
	if (y >= LCD_HEIGHT) return;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <G2D_DrawHLine+0xc6>
	if ((x + length) < 1) return;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <G2D_DrawHLine+0xc6>
	if (x >= LCD_WIDTH) return;
 8006c6c:	bf00      	nop
}
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd90      	pop	{r4, r7, pc}
 8006c74:	240002b8 	.word	0x240002b8

08006c78 <G2D_DrawHLineBlend>:


void G2D_DrawHLineBlend(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, int16_t length, uint32_t color) {
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	b089      	sub	sp, #36	; 0x24
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	461a      	mov	r2, r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	72fb      	strb	r3, [r7, #11]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	813b      	strh	r3, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
	if (length == 0) return;
 8006c92:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d048      	beq.n	8006d2c <G2D_DrawHLineBlend+0xb4>
	if (length < 0) {x -= length + 1; length = -length;}
 8006c9a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	da0a      	bge.n	8006cb8 <G2D_DrawHLineBlend+0x40>
 8006ca2:	893a      	ldrh	r2, [r7, #8]
 8006ca4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	813b      	strh	r3, [r7, #8]
 8006cb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cb2:	425b      	negs	r3, r3
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	853b      	strh	r3, [r7, #40]	; 0x28
	if (y < 1) return;
 8006cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dd37      	ble.n	8006d30 <G2D_DrawHLineBlend+0xb8>
	if (y >= LCD_HEIGHT) return;
 8006cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cc4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006cc8:	da34      	bge.n	8006d34 <G2D_DrawHLineBlend+0xbc>
	if ((x + length) < 1) return;
 8006cca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006cce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006cd2:	4413      	add	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dd2f      	ble.n	8006d38 <G2D_DrawHLineBlend+0xc0>
	if (x >= LCD_WIDTH) return;
 8006cd8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006cdc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006ce0:	da2c      	bge.n	8006d3c <G2D_DrawHLineBlend+0xc4>
	uint16_t x0 = MAX(0, x);
 8006ce2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006ce6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006cea:	b21b      	sxth	r3, r3
 8006cec:	82fb      	strh	r3, [r7, #22]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8006cee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006cf2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006cfc:	bfa8      	it	ge
 8006cfe:	f44f 7348 	movge.w	r3, #800	; 0x320
 8006d02:	82bb      	strh	r3, [r7, #20]
	uint16_t l = x1 - x0;
 8006d04:	8aba      	ldrh	r2, [r7, #20]
 8006d06:	8afb      	ldrh	r3, [r7, #22]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	827b      	strh	r3, [r7, #18]
	uint16_t lo = LCD_WIDTH - l;
 8006d0c:	8a7b      	ldrh	r3, [r7, #18]
 8006d0e:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8006d12:	823b      	strh	r3, [r7, #16]
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <G2D_DrawHLineBlend+0xcc>)
 8006d16:	681c      	ldr	r4, [r3, #0]
 8006d18:	88f9      	ldrh	r1, [r7, #6]
 8006d1a:	8a7a      	ldrh	r2, [r7, #18]
 8006d1c:	8af8      	ldrh	r0, [r7, #22]
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	8a3b      	ldrh	r3, [r7, #16]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	2301      	movs	r3, #1
 8006d28:	47a0      	blx	r4
 8006d2a:	e008      	b.n	8006d3e <G2D_DrawHLineBlend+0xc6>
	if (length == 0) return;
 8006d2c:	bf00      	nop
 8006d2e:	e006      	b.n	8006d3e <G2D_DrawHLineBlend+0xc6>
	if (y < 1) return;
 8006d30:	bf00      	nop
 8006d32:	e004      	b.n	8006d3e <G2D_DrawHLineBlend+0xc6>
	if (y >= LCD_HEIGHT) return;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <G2D_DrawHLineBlend+0xc6>
	if ((x + length) < 1) return;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <G2D_DrawHLineBlend+0xc6>
	if (x >= LCD_WIDTH) return;
 8006d3c:	bf00      	nop
}
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd90      	pop	{r4, r7, pc}
 8006d44:	240002bc 	.word	0x240002bc

08006d48 <G2D_DrawVLine>:


void G2D_DrawVLine(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, int16_t length, uint32_t color) {
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b089      	sub	sp, #36	; 0x24
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	72fb      	strb	r3, [r7, #11]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	813b      	strh	r3, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
	if (length == 0) return;
 8006d62:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d04b      	beq.n	8006e02 <G2D_DrawVLine+0xba>
	if (length < 0) {y -= length + 1; length = -length;}
 8006d6a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da0a      	bge.n	8006d88 <G2D_DrawVLine+0x40>
 8006d72:	88fa      	ldrh	r2, [r7, #6]
 8006d74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	80fb      	strh	r3, [r7, #6]
 8006d80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d82:	425b      	negs	r3, r3
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	853b      	strh	r3, [r7, #40]	; 0x28
	if (x < 1) return;
 8006d88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dd3a      	ble.n	8006e06 <G2D_DrawVLine+0xbe>
	if (x >= LCD_WIDTH) return;
 8006d90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006d94:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006d98:	da37      	bge.n	8006e0a <G2D_DrawVLine+0xc2>
	if ((y + length) < 1) return;
 8006d9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d9e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006da2:	4413      	add	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dd32      	ble.n	8006e0e <G2D_DrawVLine+0xc6>
	if (y >= LCD_HEIGHT) return;
 8006da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dac:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006db0:	da2f      	bge.n	8006e12 <G2D_DrawVLine+0xca>
	uint16_t y0 = MAX(0, y);
 8006db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006db6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	82fb      	strh	r3, [r7, #22]
	uint16_t y1 = MIN(LCD_HEIGHT, y + length);
 8006dbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006dc2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006dcc:	bfa8      	it	ge
 8006dce:	f44f 73f0 	movge.w	r3, #480	; 0x1e0
 8006dd2:	82bb      	strh	r3, [r7, #20]
	uint16_t l = y1 - y0;
 8006dd4:	8aba      	ldrh	r2, [r7, #20]
 8006dd6:	8afb      	ldrh	r3, [r7, #22]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	827b      	strh	r3, [r7, #18]
	if (l == 0) return;
 8006ddc:	8a7b      	ldrh	r3, [r7, #18]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d019      	beq.n	8006e16 <G2D_DrawVLine+0xce>
	uint16_t lo = LCD_WIDTH - 1;
 8006de2:	f240 331f 	movw	r3, #799	; 0x31f
 8006de6:	823b      	strh	r3, [r7, #16]
	BSP_LCD_FillBuf(x, y0, 1, l, lo, color);
 8006de8:	4b0d      	ldr	r3, [pc, #52]	; (8006e20 <G2D_DrawVLine+0xd8>)
 8006dea:	681c      	ldr	r4, [r3, #0]
 8006dec:	8938      	ldrh	r0, [r7, #8]
 8006dee:	8a7a      	ldrh	r2, [r7, #18]
 8006df0:	8af9      	ldrh	r1, [r7, #22]
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	8a3b      	ldrh	r3, [r7, #16]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	47a0      	blx	r4
 8006e00:	e00a      	b.n	8006e18 <G2D_DrawVLine+0xd0>
	if (length == 0) return;
 8006e02:	bf00      	nop
 8006e04:	e008      	b.n	8006e18 <G2D_DrawVLine+0xd0>
	if (x < 1) return;
 8006e06:	bf00      	nop
 8006e08:	e006      	b.n	8006e18 <G2D_DrawVLine+0xd0>
	if (x >= LCD_WIDTH) return;
 8006e0a:	bf00      	nop
 8006e0c:	e004      	b.n	8006e18 <G2D_DrawVLine+0xd0>
	if ((y + length) < 1) return;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <G2D_DrawVLine+0xd0>
	if (y >= LCD_HEIGHT) return;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <G2D_DrawVLine+0xd0>
	if (l == 0) return;
 8006e16:	bf00      	nop
}
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd90      	pop	{r4, r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	240002b8 	.word	0x240002b8

08006e24 <G2D_DrawFillRectBlend>:
	uint16_t ol = LCD_WIDTH - w;

	BSP_LCD_FillBuf(x1, y1, w, h, ol, color);
}

void G2D_DrawFillRectBlend(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, uint16_t width, uint16_t height, uint32_t color) {
 8006e24:	b5b0      	push	{r4, r5, r7, lr}
 8006e26:	b08a      	sub	sp, #40	; 0x28
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	461a      	mov	r2, r3
 8006e32:	4603      	mov	r3, r0
 8006e34:	72fb      	strb	r3, [r7, #11]
 8006e36:	460b      	mov	r3, r1
 8006e38:	813b      	strh	r3, [r7, #8]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	80fb      	strh	r3, [r7, #6]
	uint16_t x1 = MAX(0, x);
 8006e3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006e42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e46:	b21b      	sxth	r3, r3
 8006e48:	83fb      	strh	r3, [r7, #30]
	uint16_t y1 = MAX(0, y);
 8006e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e52:	b21b      	sxth	r3, r3
 8006e54:	83bb      	strh	r3, [r7, #28]
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8006e56:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006e5a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f240 321f 	movw	r2, #799	; 0x31f
 8006e62:	4293      	cmp	r3, r2
 8006e64:	bfa8      	it	ge
 8006e66:	4613      	movge	r3, r2
 8006e68:	837b      	strh	r3, [r7, #26]
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 8006e6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e70:	4413      	add	r3, r2
 8006e72:	f240 12df 	movw	r2, #479	; 0x1df
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfa8      	it	ge
 8006e7a:	4613      	movge	r3, r2
 8006e7c:	833b      	strh	r3, [r7, #24]
	uint16_t w = x2 - x1;
 8006e7e:	8b7a      	ldrh	r2, [r7, #26]
 8006e80:	8bfb      	ldrh	r3, [r7, #30]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	82fb      	strh	r3, [r7, #22]
	uint16_t h = y2 - y1;
 8006e86:	8b3a      	ldrh	r2, [r7, #24]
 8006e88:	8bbb      	ldrh	r3, [r7, #28]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	82bb      	strh	r3, [r7, #20]
	uint16_t ol = LCD_WIDTH - w;
 8006e8e:	8afb      	ldrh	r3, [r7, #22]
 8006e90:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8006e94:	827b      	strh	r3, [r7, #18]

	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8006e96:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <G2D_DrawFillRectBlend+0x94>)
 8006e98:	681c      	ldr	r4, [r3, #0]
 8006e9a:	8abd      	ldrh	r5, [r7, #20]
 8006e9c:	8afa      	ldrh	r2, [r7, #22]
 8006e9e:	8bb9      	ldrh	r1, [r7, #28]
 8006ea0:	8bf8      	ldrh	r0, [r7, #30]
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	8a7b      	ldrh	r3, [r7, #18]
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	462b      	mov	r3, r5
 8006eac:	47a0      	blx	r4
}
 8006eae:	bf00      	nop
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	240002bc 	.word	0x240002bc

08006ebc <G2D_DrawCircle>:

void G2D_DrawCircle(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b08b      	sub	sp, #44	; 0x2c
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4603      	mov	r3, r0
 8006ecc:	72fb      	strb	r3, [r7, #11]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	813b      	strh	r3, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
	int32_t d;			/* Decision Variable */
	int32_t curx;		/* Current X Value */
	int32_t cury;		/* Current Y Value */

	d = 3 - (r << 1);
 8006ed6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	f1c3 0303 	rsb	r3, r3, #3
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
	curx = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	623b      	str	r3, [r7, #32]
	cury = r;
 8006ee4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ee6:	61fb      	str	r3, [r7, #28]

	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8006ee8:	7afa      	ldrb	r2, [r7, #11]
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3339      	adds	r3, #57	; 0x39
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	76fb      	strb	r3, [r7, #27]
	uint32_t offset = lcd->Layers[layer].Frames[eframe];
 8006efc:	7afa      	ldrb	r2, [r7, #11]
 8006efe:	7ef8      	ldrb	r0, [r7, #27]
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	4403      	add	r3, r0
 8006f0a:	330a      	adds	r3, #10
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	617b      	str	r3, [r7, #20]

	BSP_LCD_DMA2D_Wait();
 8006f14:	4b56      	ldr	r3, [pc, #344]	; (8007070 <G2D_DrawCircle+0x1b4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4798      	blx	r3

	while (curx <= cury) {
 8006f1a:	e09f      	b.n	800705c <G2D_DrawCircle+0x1a0>
		BSP_LCD_UpdatePixel(offset, (x + curx), (y - cury), color);
 8006f1c:	4b55      	ldr	r3, [pc, #340]	; (8007074 <G2D_DrawCircle+0x1b8>)
 8006f1e:	681c      	ldr	r4, [r3, #0]
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	893b      	ldrh	r3, [r7, #8]
 8006f26:	4413      	add	r3, r2
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	b219      	sxth	r1, r3
 8006f2c:	88fa      	ldrh	r2, [r7, #6]
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	b21a      	sxth	r2, r3
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	6978      	ldr	r0, [r7, #20]
 8006f3c:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x - curx), (y - cury), color);
 8006f3e:	4b4d      	ldr	r3, [pc, #308]	; (8007074 <G2D_DrawCircle+0x1b8>)
 8006f40:	681c      	ldr	r4, [r3, #0]
 8006f42:	893a      	ldrh	r2, [r7, #8]
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	b219      	sxth	r1, r3
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	b21a      	sxth	r2, r3
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5c:	6978      	ldr	r0, [r7, #20]
 8006f5e:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x + cury), (y - curx), color);
 8006f60:	4b44      	ldr	r3, [pc, #272]	; (8007074 <G2D_DrawCircle+0x1b8>)
 8006f62:	681c      	ldr	r4, [r3, #0]
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	893b      	ldrh	r3, [r7, #8]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	b219      	sxth	r1, r3
 8006f70:	88fa      	ldrh	r2, [r7, #6]
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	b21a      	sxth	r2, r3
 8006f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7e:	6978      	ldr	r0, [r7, #20]
 8006f80:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x - cury), (y - curx), color);
 8006f82:	4b3c      	ldr	r3, [pc, #240]	; (8007074 <G2D_DrawCircle+0x1b8>)
 8006f84:	681c      	ldr	r4, [r3, #0]
 8006f86:	893a      	ldrh	r2, [r7, #8]
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	b219      	sxth	r1, r3
 8006f92:	88fa      	ldrh	r2, [r7, #6]
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	b21a      	sxth	r2, r3
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa0:	6978      	ldr	r0, [r7, #20]
 8006fa2:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x + curx), (y + cury), color);
 8006fa4:	4b33      	ldr	r3, [pc, #204]	; (8007074 <G2D_DrawCircle+0x1b8>)
 8006fa6:	681c      	ldr	r4, [r3, #0]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	893b      	ldrh	r3, [r7, #8]
 8006fae:	4413      	add	r3, r2
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	b219      	sxth	r1, r3
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	4413      	add	r3, r2
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	b21a      	sxth	r2, r3
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc2:	6978      	ldr	r0, [r7, #20]
 8006fc4:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x - curx), (y + cury), color);
 8006fc6:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <G2D_DrawCircle+0x1b8>)
 8006fc8:	681c      	ldr	r4, [r3, #0]
 8006fca:	893a      	ldrh	r2, [r7, #8]
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	b219      	sxth	r1, r3
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	4413      	add	r3, r2
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	b21a      	sxth	r2, r3
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe4:	6978      	ldr	r0, [r7, #20]
 8006fe6:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x + cury), (y + curx), color);
 8006fe8:	4b22      	ldr	r3, [pc, #136]	; (8007074 <G2D_DrawCircle+0x1b8>)
 8006fea:	681c      	ldr	r4, [r3, #0]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	893b      	ldrh	r3, [r7, #8]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	b219      	sxth	r1, r3
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	4413      	add	r3, r2
 8007000:	b29b      	uxth	r3, r3
 8007002:	b21a      	sxth	r2, r3
 8007004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007006:	6978      	ldr	r0, [r7, #20]
 8007008:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x - cury), (y + curx), color);
 800700a:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <G2D_DrawCircle+0x1b8>)
 800700c:	681c      	ldr	r4, [r3, #0]
 800700e:	893a      	ldrh	r2, [r7, #8]
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	b29b      	uxth	r3, r3
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	b29b      	uxth	r3, r3
 8007018:	b219      	sxth	r1, r3
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	b29a      	uxth	r2, r3
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	4413      	add	r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	b21a      	sxth	r2, r3
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	6978      	ldr	r0, [r7, #20]
 800702a:	47a0      	blx	r4

		if (d < 0) {
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	2b00      	cmp	r3, #0
 8007030:	da06      	bge.n	8007040 <G2D_DrawCircle+0x184>
			d += (curx << 2) + 6;
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	3306      	adds	r3, #6
 8007038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703a:	4413      	add	r3, r2
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
 800703e:	e00a      	b.n	8007056 <G2D_DrawCircle+0x19a>
		} else {
			d += ((curx - cury) << 2) + 10;
 8007040:	6a3a      	ldr	r2, [r7, #32]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	330a      	adds	r3, #10
 800704a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704c:	4413      	add	r3, r2
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
			cury--;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	3b01      	subs	r3, #1
 8007054:	61fb      	str	r3, [r7, #28]
		}
		curx++;
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	3301      	adds	r3, #1
 800705a:	623b      	str	r3, [r7, #32]
	while (curx <= cury) {
 800705c:	6a3a      	ldr	r2, [r7, #32]
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	429a      	cmp	r2, r3
 8007062:	f77f af5b 	ble.w	8006f1c <G2D_DrawCircle+0x60>
	}
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	372c      	adds	r7, #44	; 0x2c
 800706c:	46bd      	mov	sp, r7
 800706e:	bd90      	pop	{r4, r7, pc}
 8007070:	240002a8 	.word	0x240002a8
 8007074:	240002ac 	.word	0x240002ac

08007078 <G2D_DrawFillCircleBlend>:
		curx++;
	}
}


void G2D_DrawFillCircleBlend(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b08b      	sub	sp, #44	; 0x2c
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	4608      	mov	r0, r1
 8007082:	4611      	mov	r1, r2
 8007084:	461a      	mov	r2, r3
 8007086:	4603      	mov	r3, r0
 8007088:	72fb      	strb	r3, [r7, #11]
 800708a:	460b      	mov	r3, r1
 800708c:	813b      	strh	r3, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
	int32_t  d;    	/* Decision Variable */
	int32_t  curx;	/* Current X Value */
	int32_t  cury;	/* Current Y Value */

	d = 3 - (r << 1);
 8007092:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	f1c3 0303 	rsb	r3, r3, #3
 800709a:	61fb      	str	r3, [r7, #28]
	curx = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	61bb      	str	r3, [r7, #24]
	cury = r;
 80070a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80070a2:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 80070a4:	e08d      	b.n	80071c2 <G2D_DrawFillCircleBlend+0x14a>
		if(cury > 0) {
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dd37      	ble.n	800711c <G2D_DrawFillCircleBlend+0xa4>
			G2D_DrawHLineBlend(lcd, layer, x - cury, y + curx, 2 * cury + 1, color);
 80070ac:	893a      	ldrh	r2, [r7, #8]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	b218      	sxth	r0, r3
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	4413      	add	r3, r2
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	b21c      	sxth	r4, r3
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3301      	adds	r3, #1
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	b21b      	sxth	r3, r3
 80070d2:	7af9      	ldrb	r1, [r7, #11]
 80070d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d6:	9201      	str	r2, [sp, #4]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	4623      	mov	r3, r4
 80070dc:	4602      	mov	r2, r0
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7ff fdca 	bl	8006c78 <G2D_DrawHLineBlend>
			G2D_DrawHLineBlend(lcd, layer, x - cury, y - curx, 2 * cury + 1, color);
 80070e4:	893a      	ldrh	r2, [r7, #8]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	b218      	sxth	r0, r3
 80070f0:	88fa      	ldrh	r2, [r7, #6]
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	b21c      	sxth	r4, r3
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	b29b      	uxth	r3, r3
 8007104:	3301      	adds	r3, #1
 8007106:	b29b      	uxth	r3, r3
 8007108:	b21b      	sxth	r3, r3
 800710a:	7af9      	ldrb	r1, [r7, #11]
 800710c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710e:	9201      	str	r2, [sp, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4623      	mov	r3, r4
 8007114:	4602      	mov	r2, r0
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff fdae 	bl	8006c78 <G2D_DrawHLineBlend>
		}

		if(curx > 0) {
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	dd37      	ble.n	8007192 <G2D_DrawFillCircleBlend+0x11a>
			G2D_DrawHLineBlend(lcd, layer, x - curx, y - cury, 2 * curx + 1, color);
 8007122:	893a      	ldrh	r2, [r7, #8]
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	b29b      	uxth	r3, r3
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	b29b      	uxth	r3, r3
 800712c:	b218      	sxth	r0, r3
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	b29b      	uxth	r3, r3
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	b21c      	sxth	r4, r3
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	b29b      	uxth	r3, r3
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	3301      	adds	r3, #1
 8007144:	b29b      	uxth	r3, r3
 8007146:	b21b      	sxth	r3, r3
 8007148:	7af9      	ldrb	r1, [r7, #11]
 800714a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800714c:	9201      	str	r2, [sp, #4]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4623      	mov	r3, r4
 8007152:	4602      	mov	r2, r0
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fd8f 	bl	8006c78 <G2D_DrawHLineBlend>
			G2D_DrawHLineBlend(lcd, layer, x - curx, y + cury, 2 * curx + 1, color);
 800715a:	893a      	ldrh	r2, [r7, #8]
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	b29b      	uxth	r3, r3
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	b29b      	uxth	r3, r3
 8007164:	b218      	sxth	r0, r3
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	b29a      	uxth	r2, r3
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	4413      	add	r3, r2
 800716e:	b29b      	uxth	r3, r3
 8007170:	b21c      	sxth	r4, r3
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	b29b      	uxth	r3, r3
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	b29b      	uxth	r3, r3
 800717a:	3301      	adds	r3, #1
 800717c:	b29b      	uxth	r3, r3
 800717e:	b21b      	sxth	r3, r3
 8007180:	7af9      	ldrb	r1, [r7, #11]
 8007182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007184:	9201      	str	r2, [sp, #4]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4623      	mov	r3, r4
 800718a:	4602      	mov	r2, r0
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7ff fd73 	bl	8006c78 <G2D_DrawHLineBlend>
		}
		if (d < 0) {
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	2b00      	cmp	r3, #0
 8007196:	da06      	bge.n	80071a6 <G2D_DrawFillCircleBlend+0x12e>
			d += (curx << 2) + 6;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	3306      	adds	r3, #6
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	4413      	add	r3, r2
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	e00a      	b.n	80071bc <G2D_DrawFillCircleBlend+0x144>
		} else {
			d += ((curx - cury) << 2) + 10;
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	330a      	adds	r3, #10
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	61fb      	str	r3, [r7, #28]
			cury--;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	617b      	str	r3, [r7, #20]
		}
		curx++;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	3301      	adds	r3, #1
 80071c0:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	f77f af6d 	ble.w	80070a6 <G2D_DrawFillCircleBlend+0x2e>
	}
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	3724      	adds	r7, #36	; 0x24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd90      	pop	{r4, r7, pc}
	...

080071d8 <G2D_DrawRoundRect>:


void G2D_DrawRoundRect(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b08f      	sub	sp, #60	; 0x3c
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	4608      	mov	r0, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	72fb      	strb	r3, [r7, #11]
 80071ea:	460b      	mov	r3, r1
 80071ec:	813b      	strh	r3, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
	int32_t  d;    	/* Decision Variable */
	int32_t  curx;	/* Current X Value */
	int32_t  cury;	/* Current Y Value */

	uint16_t radius2 = radius << 1;
 80071f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	847b      	strh	r3, [r7, #34]	; 0x22

	if (height < radius2) return;
 80071fa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80071fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007200:	429a      	cmp	r2, r3
 8007202:	f0c0 814f 	bcc.w	80074a4 <G2D_DrawRoundRect+0x2cc>
	if (width < radius2) return;
 8007206:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800720a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800720c:	429a      	cmp	r2, r3
 800720e:	f0c0 814b 	bcc.w	80074a8 <G2D_DrawRoundRect+0x2d0>

	d = 3 - radius2;
 8007212:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007214:	f1c3 0303 	rsb	r3, r3, #3
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
	curx = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
	cury = radius;
 800721e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007222:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8007224:	7afa      	ldrb	r2, [r7, #11]
 8007226:	68f9      	ldr	r1, [r7, #12]
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	440b      	add	r3, r1
 8007232:	3339      	adds	r3, #57	; 0x39
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint32_t offset = lcd->Layers[layer].Frames[eframe];
 800723a:	7afa      	ldrb	r2, [r7, #11]
 800723c:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
 8007240:	68f9      	ldr	r1, [r7, #12]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	4403      	add	r3, r0
 800724a:	330a      	adds	r3, #10
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	61fb      	str	r3, [r7, #28]
	int16_t x0 = x + radius;
 8007254:	893a      	ldrh	r2, [r7, #8]
 8007256:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800725a:	4413      	add	r3, r2
 800725c:	b29b      	uxth	r3, r3
 800725e:	837b      	strh	r3, [r7, #26]
	int16_t y0 = y + radius;
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007266:	4413      	add	r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	833b      	strh	r3, [r7, #24]
	int16_t x1 = x + width - radius;
 800726c:	893a      	ldrh	r2, [r7, #8]
 800726e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007272:	4413      	add	r3, r2
 8007274:	b29a      	uxth	r2, r3
 8007276:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	b29b      	uxth	r3, r3
 800727e:	82fb      	strh	r3, [r7, #22]
	int16_t y1 = y + height - radius;
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007286:	4413      	add	r3, r2
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	b29b      	uxth	r3, r3
 8007292:	82bb      	strh	r3, [r7, #20]

	// Drawing H lines
	if (width > radius2) {
 8007294:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800729a:	429a      	cmp	r2, r3
 800729c:	d929      	bls.n	80072f2 <G2D_DrawRoundRect+0x11a>
		G2D_DrawHLine(lcd, layer, x0, y, width - radius2, color);
 800729e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80072a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	b21b      	sxth	r3, r3
 80072aa:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80072ae:	f9b7 001a 	ldrsh.w	r0, [r7, #26]
 80072b2:	7af9      	ldrb	r1, [r7, #11]
 80072b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072b6:	9201      	str	r2, [sp, #4]
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	4623      	mov	r3, r4
 80072bc:	4602      	mov	r2, r0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff fc72 	bl	8006ba8 <G2D_DrawHLine>
		G2D_DrawHLine(lcd, layer, x0, y + height, width - radius2, color);
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072ca:	4413      	add	r3, r2
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	b21c      	sxth	r4, r3
 80072d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80072d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	b29b      	uxth	r3, r3
 80072da:	b21b      	sxth	r3, r3
 80072dc:	f9b7 001a 	ldrsh.w	r0, [r7, #26]
 80072e0:	7af9      	ldrb	r1, [r7, #11]
 80072e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072e4:	9201      	str	r2, [sp, #4]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4623      	mov	r3, r4
 80072ea:	4602      	mov	r2, r0
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7ff fc5b 	bl	8006ba8 <G2D_DrawHLine>
	}
	// Drawing V lines
	if (height > radius2) {
 80072f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80072f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d929      	bls.n	8007350 <G2D_DrawRoundRect+0x178>
		G2D_DrawVLine(lcd, layer, x, y0, height - radius2, color);
 80072fc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8007300:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	b29b      	uxth	r3, r3
 8007306:	b21b      	sxth	r3, r3
 8007308:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800730c:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8007310:	7af9      	ldrb	r1, [r7, #11]
 8007312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007314:	9201      	str	r2, [sp, #4]
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4623      	mov	r3, r4
 800731a:	4602      	mov	r2, r0
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fd13 	bl	8006d48 <G2D_DrawVLine>
		G2D_DrawVLine(lcd, layer, x + width, y0, height - radius2, color);
 8007322:	893a      	ldrh	r2, [r7, #8]
 8007324:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007328:	4413      	add	r3, r2
 800732a:	b29b      	uxth	r3, r3
 800732c:	b218      	sxth	r0, r3
 800732e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8007332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	b29b      	uxth	r3, r3
 8007338:	b21b      	sxth	r3, r3
 800733a:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800733e:	7af9      	ldrb	r1, [r7, #11]
 8007340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007342:	9201      	str	r2, [sp, #4]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4623      	mov	r3, r4
 8007348:	4602      	mov	r2, r0
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff fcfc 	bl	8006d48 <G2D_DrawVLine>
	}

	BSP_LCD_DMA2D_Wait();
 8007350:	4b57      	ldr	r3, [pc, #348]	; (80074b0 <G2D_DrawRoundRect+0x2d8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4798      	blx	r3

	// Drawing round corners
	while (curx <= cury) {
 8007356:	e09f      	b.n	8007498 <G2D_DrawRoundRect+0x2c0>
		BSP_LCD_UpdatePixel(offset, (x0 - curx), (y0 - cury), color);
 8007358:	4b56      	ldr	r3, [pc, #344]	; (80074b4 <G2D_DrawRoundRect+0x2dc>)
 800735a:	681c      	ldr	r4, [r3, #0]
 800735c:	8b7a      	ldrh	r2, [r7, #26]
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	b29b      	uxth	r3, r3
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	b219      	sxth	r1, r3
 8007368:	8b3a      	ldrh	r2, [r7, #24]
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	b29b      	uxth	r3, r3
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	b29b      	uxth	r3, r3
 8007372:	b21a      	sxth	r2, r3
 8007374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007376:	69f8      	ldr	r0, [r7, #28]
 8007378:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x0 - cury), (y0 - curx), color);
 800737a:	4b4e      	ldr	r3, [pc, #312]	; (80074b4 <G2D_DrawRoundRect+0x2dc>)
 800737c:	681c      	ldr	r4, [r3, #0]
 800737e:	8b7a      	ldrh	r2, [r7, #26]
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	b29b      	uxth	r3, r3
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	b29b      	uxth	r3, r3
 8007388:	b219      	sxth	r1, r3
 800738a:	8b3a      	ldrh	r2, [r7, #24]
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	b29b      	uxth	r3, r3
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	b29b      	uxth	r3, r3
 8007394:	b21a      	sxth	r2, r3
 8007396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007398:	69f8      	ldr	r0, [r7, #28]
 800739a:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x1 + curx), (y0 - cury), color);
 800739c:	4b45      	ldr	r3, [pc, #276]	; (80074b4 <G2D_DrawRoundRect+0x2dc>)
 800739e:	681c      	ldr	r4, [r3, #0]
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	8afb      	ldrh	r3, [r7, #22]
 80073a6:	4413      	add	r3, r2
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	b219      	sxth	r1, r3
 80073ac:	8b3a      	ldrh	r2, [r7, #24]
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	b21a      	sxth	r2, r3
 80073b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ba:	69f8      	ldr	r0, [r7, #28]
 80073bc:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x1 + cury), (y0 - curx), color);
 80073be:	4b3d      	ldr	r3, [pc, #244]	; (80074b4 <G2D_DrawRoundRect+0x2dc>)
 80073c0:	681c      	ldr	r4, [r3, #0]
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	8afb      	ldrh	r3, [r7, #22]
 80073c8:	4413      	add	r3, r2
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	b219      	sxth	r1, r3
 80073ce:	8b3a      	ldrh	r2, [r7, #24]
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b21a      	sxth	r2, r3
 80073da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073dc:	69f8      	ldr	r0, [r7, #28]
 80073de:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x0 - curx), (y1 + cury), color);
 80073e0:	4b34      	ldr	r3, [pc, #208]	; (80074b4 <G2D_DrawRoundRect+0x2dc>)
 80073e2:	681c      	ldr	r4, [r3, #0]
 80073e4:	8b7a      	ldrh	r2, [r7, #26]
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	b219      	sxth	r1, r3
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	8abb      	ldrh	r3, [r7, #20]
 80073f6:	4413      	add	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	b21a      	sxth	r2, r3
 80073fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fe:	69f8      	ldr	r0, [r7, #28]
 8007400:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x0 - cury), (y1 + curx), color);
 8007402:	4b2c      	ldr	r3, [pc, #176]	; (80074b4 <G2D_DrawRoundRect+0x2dc>)
 8007404:	681c      	ldr	r4, [r3, #0]
 8007406:	8b7a      	ldrh	r2, [r7, #26]
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	b29b      	uxth	r3, r3
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	b29b      	uxth	r3, r3
 8007410:	b219      	sxth	r1, r3
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	b29a      	uxth	r2, r3
 8007416:	8abb      	ldrh	r3, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	b29b      	uxth	r3, r3
 800741c:	b21a      	sxth	r2, r3
 800741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007420:	69f8      	ldr	r0, [r7, #28]
 8007422:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x1 + cury), (y1 + curx), color);
 8007424:	4b23      	ldr	r3, [pc, #140]	; (80074b4 <G2D_DrawRoundRect+0x2dc>)
 8007426:	681c      	ldr	r4, [r3, #0]
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	b29a      	uxth	r2, r3
 800742c:	8afb      	ldrh	r3, [r7, #22]
 800742e:	4413      	add	r3, r2
 8007430:	b29b      	uxth	r3, r3
 8007432:	b219      	sxth	r1, r3
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	b29a      	uxth	r2, r3
 8007438:	8abb      	ldrh	r3, [r7, #20]
 800743a:	4413      	add	r3, r2
 800743c:	b29b      	uxth	r3, r3
 800743e:	b21a      	sxth	r2, r3
 8007440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007442:	69f8      	ldr	r0, [r7, #28]
 8007444:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x1 + curx), (y1 + cury), color);
 8007446:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <G2D_DrawRoundRect+0x2dc>)
 8007448:	681c      	ldr	r4, [r3, #0]
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	b29a      	uxth	r2, r3
 800744e:	8afb      	ldrh	r3, [r7, #22]
 8007450:	4413      	add	r3, r2
 8007452:	b29b      	uxth	r3, r3
 8007454:	b219      	sxth	r1, r3
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	b29a      	uxth	r2, r3
 800745a:	8abb      	ldrh	r3, [r7, #20]
 800745c:	4413      	add	r3, r2
 800745e:	b29b      	uxth	r3, r3
 8007460:	b21a      	sxth	r2, r3
 8007462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007464:	69f8      	ldr	r0, [r7, #28]
 8007466:	47a0      	blx	r4
		if (d < 0) {
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	da06      	bge.n	800747c <G2D_DrawRoundRect+0x2a4>
			d += (curx << 2) + 6;
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	3306      	adds	r3, #6
 8007474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007476:	4413      	add	r3, r2
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800747a:	e00a      	b.n	8007492 <G2D_DrawRoundRect+0x2ba>
		} else {
			d += ((curx - cury) << 2) + 10;
 800747c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	330a      	adds	r3, #10
 8007486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007488:	4413      	add	r3, r2
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c
			cury--;
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	3b01      	subs	r3, #1
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
		}
		curx++;
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	3301      	adds	r3, #1
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
	while (curx <= cury) {
 8007498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	429a      	cmp	r2, r3
 800749e:	f77f af5b 	ble.w	8007358 <G2D_DrawRoundRect+0x180>
 80074a2:	e002      	b.n	80074aa <G2D_DrawRoundRect+0x2d2>
	if (height < radius2) return;
 80074a4:	bf00      	nop
 80074a6:	e000      	b.n	80074aa <G2D_DrawRoundRect+0x2d2>
	if (width < radius2) return;
 80074a8:	bf00      	nop
	}

}
 80074aa:	3734      	adds	r7, #52	; 0x34
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd90      	pop	{r4, r7, pc}
 80074b0:	240002a8 	.word	0x240002a8
 80074b4:	240002ac 	.word	0x240002ac

080074b8 <G2D_DrawFillRoundRectBlend>:
	}

}


void G2D_DrawFillRoundRectBlend(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 80074b8:	b590      	push	{r4, r7, lr}
 80074ba:	b08f      	sub	sp, #60	; 0x3c
 80074bc:	af04      	add	r7, sp, #16
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	72fb      	strb	r3, [r7, #11]
 80074ca:	460b      	mov	r3, r1
 80074cc:	813b      	strh	r3, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
	int32_t  d;    	/* Decision Variable */
	int32_t  curx;	/* Current X Value */
	int32_t  cury;	/* Current Y Value */

	uint16_t radius2 = radius << 1;
 80074d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	837b      	strh	r3, [r7, #26]

	if (height < radius2) return;
 80074da:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80074dc:	8b7b      	ldrh	r3, [r7, #26]
 80074de:	429a      	cmp	r2, r3
 80074e0:	f0c0 80d7 	bcc.w	8007692 <G2D_DrawFillRoundRectBlend+0x1da>
	if (width < radius2) return;
 80074e4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80074e6:	8b7b      	ldrh	r3, [r7, #26]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	f0c0 80d4 	bcc.w	8007696 <G2D_DrawFillRoundRectBlend+0x1de>

	d = 3 - radius2;
 80074ee:	8b7b      	ldrh	r3, [r7, #26]
 80074f0:	f1c3 0303 	rsb	r3, r3, #3
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
	curx = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	623b      	str	r3, [r7, #32]
	cury = radius;
 80074fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80074fe:	61fb      	str	r3, [r7, #28]

	int16_t x0 = x + radius;
 8007500:	893a      	ldrh	r2, [r7, #8]
 8007502:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007506:	4413      	add	r3, r2
 8007508:	b29b      	uxth	r3, r3
 800750a:	833b      	strh	r3, [r7, #24]
	int16_t y0 = y + radius;
 800750c:	88fa      	ldrh	r2, [r7, #6]
 800750e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007512:	4413      	add	r3, r2
 8007514:	b29b      	uxth	r3, r3
 8007516:	82fb      	strh	r3, [r7, #22]
	int16_t y1 = y + height - radius;
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800751c:	4413      	add	r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	82bb      	strh	r3, [r7, #20]
	uint16_t wr = width - radius2;
 800752a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800752c:	8b7b      	ldrh	r3, [r7, #26]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	827b      	strh	r3, [r7, #18]

	// Drawing middle filled area
	G2D_DrawFillRectBlend(lcd, layer, x, y0 + 1, width, height - radius2 - 1, color);
 8007532:	8afb      	ldrh	r3, [r7, #22]
 8007534:	3301      	adds	r3, #1
 8007536:	b29b      	uxth	r3, r3
 8007538:	b21c      	sxth	r4, r3
 800753a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800753c:	8b7b      	ldrh	r3, [r7, #26]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800754a:	7af9      	ldrb	r1, [r7, #11]
 800754c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800754e:	9202      	str	r2, [sp, #8]
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	4623      	mov	r3, r4
 8007558:	4602      	mov	r2, r0
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff fc62 	bl	8006e24 <G2D_DrawFillRectBlend>

	// Drawing round parts (top and bottom)
	while (curx <= cury) {
 8007560:	e091      	b.n	8007686 <G2D_DrawFillRoundRectBlend+0x1ce>
		if(cury > 0) {
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	2b00      	cmp	r3, #0
 8007566:	dd39      	ble.n	80075dc <G2D_DrawFillRoundRectBlend+0x124>
			G2D_DrawHLineBlend(lcd, layer, x0 - cury, y1 + curx, 2 * cury + wr, color);
 8007568:	8b3a      	ldrh	r2, [r7, #24]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	b29b      	uxth	r3, r3
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	b29b      	uxth	r3, r3
 8007572:	b218      	sxth	r0, r3
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	b29a      	uxth	r2, r3
 8007578:	8abb      	ldrh	r3, [r7, #20]
 800757a:	4413      	add	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	b21c      	sxth	r4, r3
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	b29b      	uxth	r3, r3
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	8a7b      	ldrh	r3, [r7, #18]
 800758a:	4413      	add	r3, r2
 800758c:	b29b      	uxth	r3, r3
 800758e:	b21b      	sxth	r3, r3
 8007590:	7af9      	ldrb	r1, [r7, #11]
 8007592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007594:	9201      	str	r2, [sp, #4]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	4623      	mov	r3, r4
 800759a:	4602      	mov	r2, r0
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff fb6b 	bl	8006c78 <G2D_DrawHLineBlend>
			G2D_DrawHLineBlend(lcd, layer, x0 - cury, y0 - curx, 2 * cury + wr, color);
 80075a2:	8b3a      	ldrh	r2, [r7, #24]
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	b218      	sxth	r0, r3
 80075ae:	8afa      	ldrh	r2, [r7, #22]
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	b21c      	sxth	r4, r3
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	8a7b      	ldrh	r3, [r7, #18]
 80075c4:	4413      	add	r3, r2
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	b21b      	sxth	r3, r3
 80075ca:	7af9      	ldrb	r1, [r7, #11]
 80075cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ce:	9201      	str	r2, [sp, #4]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4623      	mov	r3, r4
 80075d4:	4602      	mov	r2, r0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff fb4e 	bl	8006c78 <G2D_DrawHLineBlend>
		}

		if(curx > 0) {
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd39      	ble.n	8007656 <G2D_DrawFillRoundRectBlend+0x19e>
			G2D_DrawHLineBlend(lcd, layer, x0 - curx, y0 - cury, 2 * curx + wr, color);
 80075e2:	8b3a      	ldrh	r2, [r7, #24]
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	b218      	sxth	r0, r3
 80075ee:	8afa      	ldrh	r2, [r7, #22]
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	b21c      	sxth	r4, r3
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	8a7b      	ldrh	r3, [r7, #18]
 8007604:	4413      	add	r3, r2
 8007606:	b29b      	uxth	r3, r3
 8007608:	b21b      	sxth	r3, r3
 800760a:	7af9      	ldrb	r1, [r7, #11]
 800760c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800760e:	9201      	str	r2, [sp, #4]
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	4623      	mov	r3, r4
 8007614:	4602      	mov	r2, r0
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff fb2e 	bl	8006c78 <G2D_DrawHLineBlend>
			G2D_DrawHLineBlend(lcd, layer, x0 - curx, y1 + cury, 2 * curx + wr, color);
 800761c:	8b3a      	ldrh	r2, [r7, #24]
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	b29b      	uxth	r3, r3
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	b29b      	uxth	r3, r3
 8007626:	b218      	sxth	r0, r3
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	b29a      	uxth	r2, r3
 800762c:	8abb      	ldrh	r3, [r7, #20]
 800762e:	4413      	add	r3, r2
 8007630:	b29b      	uxth	r3, r3
 8007632:	b21c      	sxth	r4, r3
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	b29b      	uxth	r3, r3
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	8a7b      	ldrh	r3, [r7, #18]
 800763e:	4413      	add	r3, r2
 8007640:	b29b      	uxth	r3, r3
 8007642:	b21b      	sxth	r3, r3
 8007644:	7af9      	ldrb	r1, [r7, #11]
 8007646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007648:	9201      	str	r2, [sp, #4]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4623      	mov	r3, r4
 800764e:	4602      	mov	r2, r0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7ff fb11 	bl	8006c78 <G2D_DrawHLineBlend>
		}
		if (d < 0) {
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	da06      	bge.n	800766a <G2D_DrawFillRoundRectBlend+0x1b2>
			d += (curx << 2) + 6;
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	3306      	adds	r3, #6
 8007662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007664:	4413      	add	r3, r2
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
 8007668:	e00a      	b.n	8007680 <G2D_DrawFillRoundRectBlend+0x1c8>
		} else {
			d += ((curx - cury) << 2) + 10;
 800766a:	6a3a      	ldr	r2, [r7, #32]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	330a      	adds	r3, #10
 8007674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007676:	4413      	add	r3, r2
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
			cury--;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	3b01      	subs	r3, #1
 800767e:	61fb      	str	r3, [r7, #28]
		}
		curx++;
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	3301      	adds	r3, #1
 8007684:	623b      	str	r3, [r7, #32]
	while (curx <= cury) {
 8007686:	6a3a      	ldr	r2, [r7, #32]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	429a      	cmp	r2, r3
 800768c:	f77f af69 	ble.w	8007562 <G2D_DrawFillRoundRectBlend+0xaa>
 8007690:	e002      	b.n	8007698 <G2D_DrawFillRoundRectBlend+0x1e0>
	if (height < radius2) return;
 8007692:	bf00      	nop
 8007694:	e000      	b.n	8007698 <G2D_DrawFillRoundRectBlend+0x1e0>
	if (width < radius2) return;
 8007696:	bf00      	nop
	}

}
 8007698:	372c      	adds	r7, #44	; 0x2c
 800769a:	46bd      	mov	sp, r7
 800769c:	bd90      	pop	{r4, r7, pc}
	...

080076a0 <G2D_TextBlend>:
	}
	return x + w;
}


uint16_t G2D_TextBlend(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y, const uint8_t *font, char *str, uint32_t color) {
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b091      	sub	sp, #68	; 0x44
 80076a4:	af04      	add	r7, sp, #16
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	4608      	mov	r0, r1
 80076aa:	4611      	mov	r1, r2
 80076ac:	461a      	mov	r2, r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	72fb      	strb	r3, [r7, #11]
 80076b2:	460b      	mov	r3, r1
 80076b4:	813b      	strh	r3, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
	// Calculating color array for anty-aliasing
	uint32_t text_clut[4];
	uint32_t a1 = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (lcd->config_.colormode) {
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	2b05      	cmp	r3, #5
 80076c8:	d862      	bhi.n	8007790 <G2D_TextBlend+0xf0>
 80076ca:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <G2D_TextBlend+0x30>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	0800777f 	.word	0x0800777f
 80076d4:	0800777f 	.word	0x0800777f
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	08007729 	.word	0x08007729
 80076e0:	0800773b 	.word	0x0800773b
 80076e4:	080076e9 	.word	0x080076e9
	case LCD_COLOR_MODE_ARGB8888:
	case LCD_COLOR_MODE_RGB888:
		a1 = (color & 0xFF000000) >> 24;
 80076e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ea:	0e1b      	lsrs	r3, r3, #24
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
		text_clut[0] = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 80076f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	011a      	lsls	r2, r3, #4
 80076fc:	4413      	add	r3, r2
 80076fe:	0a1b      	lsrs	r3, r3, #8
 8007700:	061a      	lsls	r2, r3, #24
 8007702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007704:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007708:	4313      	orrs	r3, r2
 800770a:	61bb      	str	r3, [r7, #24]
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	22ab      	movs	r2, #171	; 0xab
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	0a1b      	lsrs	r3, r3, #8
 8007716:	061a      	lsls	r2, r3, #24
 8007718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800771a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800771e:	4313      	orrs	r3, r2
 8007720:	61fb      	str	r3, [r7, #28]
		text_clut[3] = color;
 8007722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007724:	623b      	str	r3, [r7, #32]
		break;
 8007726:	e033      	b.n	8007790 <G2D_TextBlend+0xf0>
	case LCD_COLOR_MODE_ARGB1555:
		text_clut[0] = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
		text_clut[1] = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	61bb      	str	r3, [r7, #24]
		text_clut[2] = color;
 8007730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007732:	61fb      	str	r3, [r7, #28]
		text_clut[3] = color;
 8007734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007736:	623b      	str	r3, [r7, #32]
		break;
 8007738:	e02a      	b.n	8007790 <G2D_TextBlend+0xf0>
	case LCD_COLOR_MODE_ARGB4444:
		a1 = (color & 0xF000) >> 12;
 800773a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773c:	0b1b      	lsrs	r3, r3, #12
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28

		text_clut[0] = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8007748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	011a      	lsls	r2, r3, #4
 8007752:	4413      	add	r3, r2
 8007754:	0a1b      	lsrs	r3, r3, #8
 8007756:	031a      	lsls	r2, r3, #12
 8007758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800775e:	4313      	orrs	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	22ab      	movs	r2, #171	; 0xab
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	031a      	lsls	r2, r3, #12
 800776e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007774:	4313      	orrs	r3, r2
 8007776:	61fb      	str	r3, [r7, #28]
		text_clut[3] = color;
 8007778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800777a:	623b      	str	r3, [r7, #32]
		break;
 800777c:	e008      	b.n	8007790 <G2D_TextBlend+0xf0>
//		break;

	case LCD_COLOR_MODE_AL88:
	case LCD_COLOR_MODE_L8:
		// No anty-aliasing in AL and L modes
		text_clut[0] = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
		text_clut[1] = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
		text_clut[2] = color;
 8007786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007788:	61fb      	str	r3, [r7, #28]
		text_clut[3] = color;
 800778a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800778c:	623b      	str	r3, [r7, #32]
		break;
 800778e:	bf00      	nop
	}


	uint8_t h = *(font);	// Font height
 8007790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t w = 0;			// Character width
 8007798:	2300      	movs	r3, #0
 800779a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t flag = 0;		// Flag -> character pointer not to beupdated in first loop
 800779e:	2300      	movs	r3, #0
 80077a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	// Waiting for DMA2D to stop
	BSP_LCD_DMA2D_Wait();
 80077a4:	4b2b      	ldr	r3, [pc, #172]	; (8007854 <G2D_TextBlend+0x1b4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4798      	blx	r3

	while (*str > 0) {
 80077aa:	e044      	b.n	8007836 <G2D_TextBlend+0x196>
		x += w;
 80077ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	893b      	ldrh	r3, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	813b      	strh	r3, [r7, #8]
		if (flag) str += 1;
 80077ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <G2D_TextBlend+0x128>
 80077c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c4:	3301      	adds	r3, #1
 80077c6:	647b      	str	r3, [r7, #68]	; 0x44
		flag = 1;
 80077c8:	2301      	movs	r3, #1
 80077ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		// Getting character width
		w = _charw(font, *str);
 80077ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80077d6:	f7ff f8bc 	bl	8006952 <_charw>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		// Is character within screen area?
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 80077e0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80077e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077e8:	4413      	add	r3, r2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	db23      	blt.n	8007836 <G2D_TextBlend+0x196>
 80077ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80077f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80077f6:	da1e      	bge.n	8007836 <G2D_TextBlend+0x196>
 80077f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80077fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007800:	4413      	add	r3, r2
 8007802:	2b00      	cmp	r3, #0
 8007804:	db17      	blt.n	8007836 <G2D_TextBlend+0x196>
 8007806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800780a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800780e:	db00      	blt.n	8007812 <G2D_TextBlend+0x172>
 8007810:	e011      	b.n	8007836 <G2D_TextBlend+0x196>

		// Character rendering
		_charblend(lcd, layer, x, y, font, *str, text_clut);
 8007812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800781a:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800781e:	7af9      	ldrb	r1, [r7, #11]
 8007820:	f107 0214 	add.w	r2, r7, #20
 8007824:	9202      	str	r2, [sp, #8]
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4623      	mov	r3, r4
 800782e:	4602      	mov	r2, r0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff f8c3 	bl	80069bc <_charblend>
	while (*str > 0) {
 8007836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1b6      	bne.n	80077ac <G2D_TextBlend+0x10c>

	}
	return x + w;
 800783e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007842:	b29a      	uxth	r2, r3
 8007844:	893b      	ldrh	r3, [r7, #8]
 8007846:	4413      	add	r3, r2
 8007848:	b29b      	uxth	r3, r3
}
 800784a:	4618      	mov	r0, r3
 800784c:	3734      	adds	r7, #52	; 0x34
 800784e:	46bd      	mov	sp, r7
 8007850:	bd90      	pop	{r4, r7, pc}
 8007852:	bf00      	nop
 8007854:	240002a8 	.word	0x240002a8

08007858 <G2D_DrawIconBlend>:
	y -= height >> 1;
	G2D_DrawIcon(lcd, layer, iconsource, x, y, color, bgcolor);
}


void G2D_DrawIconBlend(LCD_HandleTypeDef *lcd, uint8_t layer, uint32_t iconsource, int16_t x, int16_t y, uint32_t color) {
 8007858:	b590      	push	{r4, r7, lr}
 800785a:	b091      	sub	sp, #68	; 0x44
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	461a      	mov	r2, r3
 8007864:	460b      	mov	r3, r1
 8007866:	72fb      	strb	r3, [r7, #11]
 8007868:	4613      	mov	r3, r2
 800786a:	813b      	strh	r3, [r7, #8]
	// Calculating color array for anty-aliasing
	uint32_t icon_clut[4];
	uint32_t a1 = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	633b      	str	r3, [r7, #48]	; 0x30

	switch (lcd->config_.colormode) {
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007876:	3b01      	subs	r3, #1
 8007878:	2b05      	cmp	r3, #5
 800787a:	d863      	bhi.n	8007944 <G2D_DrawIconBlend+0xec>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <G2D_DrawIconBlend+0x2c>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007933 	.word	0x08007933
 8007888:	08007933 	.word	0x08007933
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078dd 	.word	0x080078dd
 8007894:	080078ef 	.word	0x080078ef
 8007898:	0800789d 	.word	0x0800789d
	case LCD_COLOR_MODE_ARGB8888:
	case LCD_COLOR_MODE_RGB888:
		a1 = (color & 0xFF000000) >> 24;
 800789c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800789e:	0e1b      	lsrs	r3, r3, #24
 80078a0:	633b      	str	r3, [r7, #48]	; 0x30
		icon_clut[0] = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	613b      	str	r3, [r7, #16]
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 80078a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	011a      	lsls	r2, r3, #4
 80078b0:	4413      	add	r3, r2
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	061a      	lsls	r2, r3, #24
 80078b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078bc:	4313      	orrs	r3, r2
 80078be:	617b      	str	r3, [r7, #20]
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	22ab      	movs	r2, #171	; 0xab
 80078c4:	fb02 f303 	mul.w	r3, r2, r3
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	061a      	lsls	r2, r3, #24
 80078cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078d2:	4313      	orrs	r3, r2
 80078d4:	61bb      	str	r3, [r7, #24]
		icon_clut[3] = color;
 80078d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078d8:	61fb      	str	r3, [r7, #28]
		break;
 80078da:	e033      	b.n	8007944 <G2D_DrawIconBlend+0xec>
	case LCD_COLOR_MODE_ARGB1555:
		icon_clut[0] = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
		icon_clut[1] = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]
		icon_clut[2] = color;
 80078e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078e6:	61bb      	str	r3, [r7, #24]
		icon_clut[3] = color;
 80078e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ea:	61fb      	str	r3, [r7, #28]
		break;
 80078ec:	e02a      	b.n	8007944 <G2D_DrawIconBlend+0xec>
	case LCD_COLOR_MODE_ARGB4444:
		a1 = (color & 0xF000) >> 12;
 80078ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f0:	0b1b      	lsrs	r3, r3, #12
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	633b      	str	r3, [r7, #48]	; 0x30
		icon_clut[0] = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	613b      	str	r3, [r7, #16]
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 80078fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	011a      	lsls	r2, r3, #4
 8007906:	4413      	add	r3, r2
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	031a      	lsls	r2, r3, #12
 800790c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800790e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	22ab      	movs	r2, #171	; 0xab
 800791a:	fb02 f303 	mul.w	r3, r2, r3
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	031a      	lsls	r2, r3, #12
 8007922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
		icon_clut[3] = color;
 800792c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800792e:	61fb      	str	r3, [r7, #28]
		break;
 8007930:	e008      	b.n	8007944 <G2D_DrawIconBlend+0xec>

	case LCD_COLOR_MODE_AL88:
	case LCD_COLOR_MODE_L8:
		// No anty-aliasing in AL and L modes
		icon_clut[0] = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	613b      	str	r3, [r7, #16]
		icon_clut[1] = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
		icon_clut[2] = color;
 800793a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793c:	61bb      	str	r3, [r7, #24]
		icon_clut[3] = color;
 800793e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007940:	61fb      	str	r3, [r7, #28]
		break;
 8007942:	bf00      	nop
	}

	// Calculating destination address
	uint8_t eframe = lcd->Layers[layer].Frame_EDIT;
 8007944:	7afa      	ldrb	r2, [r7, #11]
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	4613      	mov	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	440b      	add	r3, r1
 8007952:	3339      	adds	r3, #57	; 0x39
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t faddr = lcd->Layers[layer].Frames[eframe];
 800795a:	7afa      	ldrb	r2, [r7, #11]
 800795c:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8007960:	68f9      	ldr	r1, [r7, #12]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	4403      	add	r3, r0
 800796a:	330a      	adds	r3, #10
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	62bb      	str	r3, [r7, #40]	; 0x28

	// Decoding compressed icon data
	uint8_t *pdata;
	pdata = (uint8_t *)iconsource;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint16_t width = *(uint16_t *)(pdata++);
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdata++;
 8007982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007984:	3301      	adds	r3, #1
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t height = *(uint16_t *)(pdata++);
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdata++;
 8007992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007994:	3301      	adds	r3, #1
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
	int16_t xx = x;
 8007998:	893b      	ldrh	r3, [r7, #8]
 800799a:	877b      	strh	r3, [r7, #58]	; 0x3a
	int16_t yy = y;
 800799c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80079a0:	873b      	strh	r3, [r7, #56]	; 0x38

	// Waiting for DMA2D to stop
	BSP_LCD_DMA2D_Wait();
 80079a2:	4b29      	ldr	r3, [pc, #164]	; (8007a48 <G2D_DrawIconBlend+0x1f0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4798      	blx	r3

	while (yy < (y+height)) {
 80079a8:	e040      	b.n	8007a2c <G2D_DrawIconBlend+0x1d4>
		uint8_t j = *(pdata++);
 80079aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t m = j >> 6;
 80079b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079ba:	099b      	lsrs	r3, r3, #6
 80079bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t r = j & 0x3F;
 80079c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		for (uint32_t z = 0; z<r; z++) {
 80079cc:	2300      	movs	r3, #0
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
 80079d0:	e027      	b.n	8007a22 <G2D_DrawIconBlend+0x1ca>
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80079d2:	4b1e      	ldr	r3, [pc, #120]	; (8007a4c <G2D_DrawIconBlend+0x1f4>)
 80079d4:	681c      	ldr	r4, [r3, #0]
 80079d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	3340      	adds	r3, #64	; 0x40
 80079de:	443b      	add	r3, r7
 80079e0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80079e4:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80079e8:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 80079ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ee:	47a0      	blx	r4
			xx++;
 80079f0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3301      	adds	r3, #1
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	877b      	strh	r3, [r7, #58]	; 0x3a
			if (xx == (x+width)) {
 80079fc:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8007a00:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8007a04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a06:	440b      	add	r3, r1
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d107      	bne.n	8007a1c <G2D_DrawIconBlend+0x1c4>
				xx = x;
 8007a0c:	893b      	ldrh	r3, [r7, #8]
 8007a0e:	877b      	strh	r3, [r7, #58]	; 0x3a
				yy++;
 8007a10:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3301      	adds	r3, #1
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	873b      	strh	r3, [r7, #56]	; 0x38
		for (uint32_t z = 0; z<r; z++) {
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1e:	3301      	adds	r3, #1
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d3d2      	bcc.n	80079d2 <G2D_DrawIconBlend+0x17a>
	while (yy < (y+height)) {
 8007a2c:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8007a30:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 8007a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a36:	440b      	add	r3, r1
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	dbb6      	blt.n	80079aa <G2D_DrawIconBlend+0x152>
			}
		}
	}
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	3744      	adds	r7, #68	; 0x44
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd90      	pop	{r4, r7, pc}
 8007a46:	bf00      	nop
 8007a48:	240002a8 	.word	0x240002a8
 8007a4c:	240002b0 	.word	0x240002b0

08007a50 <G2D_DrawLastJPEG>:
	y -= BSP_STM32_JPEG_GetHeight(JPEG) >> 1;

	BSP_LCD_CopyBufJPEG((uint16_t)x, (uint16_t)y);
}

void G2D_DrawLastJPEG(LCD_HandleTypeDef *lcd, uint8_t layer, int16_t x, int16_t y) {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	4608      	mov	r0, r1
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	72fb      	strb	r3, [r7, #11]
 8007a62:	460b      	mov	r3, r1
 8007a64:	813b      	strh	r3, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
	// TODO: Checking if JPEG is within borders of screen
	BSP_LCD_CopyBufJPEG((uint16_t)x, (uint16_t)y);
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <G2D_DrawLastJPEG+0x30>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	893a      	ldrh	r2, [r7, #8]
 8007a70:	88f9      	ldrh	r1, [r7, #6]
 8007a72:	4610      	mov	r0, r2
 8007a74:	4798      	blx	r3
}
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	240002c8 	.word	0x240002c8

08007a84 <G2D_DecodeJPEG>:

	BSP_LCD_CopyBufJPEG((uint16_t)x, (uint16_t)y);
}


void G2D_DecodeJPEG(LCD_HandleTypeDef *lcd, uint32_t jpeg_addr, uint32_t jpeg_size) {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]

	BSP_LCD_DecodeJPEG(jpeg_addr, jpeg_size);
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	68b8      	ldr	r0, [r7, #8]
 8007a94:	f7fd f8c2 	bl	8004c1c <BSP_LCD_DecodeJPEG>

}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <KALMAN_Init>:
 *  Created on: 7 lut 2023
 *      Author: marek
 */
#include "kalman.h"

void KALMAN_Init(KALMAN_HandleTypeDef *kalman) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
    // We will set the variables like so, these can also be tuned by the user
    kalman->Q_angle   = 0.001;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a14      	ldr	r2, [pc, #80]	; (8007afc <KALMAN_Init+0x5c>)
 8007aac:	601a      	str	r2, [r3, #0]
    kalman->Q_bias    = 0.003;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <KALMAN_Init+0x60>)
 8007ab2:	605a      	str	r2, [r3, #4]
    kalman->R_measure = 0.03;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a13      	ldr	r2, [pc, #76]	; (8007b04 <KALMAN_Init+0x64>)
 8007ab8:	609a      	str	r2, [r3, #8]

    kalman->angle = 0.0; // Reset the angle
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	60da      	str	r2, [r3, #12]
    kalman->bias  = 0.0; // Reset bias
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	611a      	str	r2, [r3, #16]

    // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so
    // see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
    kalman->P[0][0] = 0.0;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	619a      	str	r2, [r3, #24]
    kalman->P[0][1] = 0.0;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	61da      	str	r2, [r3, #28]
    kalman->P[1][0] = 0.0;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	621a      	str	r2, [r3, #32]
    kalman->P[1][1] = 0.0;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	625a      	str	r2, [r3, #36]	; 0x24

    kalman->tick = BSP_GetTick();
 8007aea:	f7fe fc57 	bl	800639c <BSP_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	3a83126f 	.word	0x3a83126f
 8007b00:	3b449ba6 	.word	0x3b449ba6
 8007b04:	3cf5c28f 	.word	0x3cf5c28f

08007b08 <KALMAN_Update>:

float KALMAN_Update(KALMAN_HandleTypeDef *kalman, float newAngle, float newRate) {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	ed87 0a02 	vstr	s0, [r7, #8]
 8007b14:	edc7 0a01 	vstr	s1, [r7, #4]
	// newAngle - last calculated angle from accelerometer [deg]
	// newRate - last rate of turn from gyro [deg/sec]


    // Step 1
	uint32_t tick = BSP_GetTick();
 8007b18:	f7fe fc40 	bl	800639c <BSP_GetTick>
 8007b1c:	6178      	str	r0, [r7, #20]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b2e:	eddf 6a82 	vldr	s13, [pc, #520]	; 8007d38 <KALMAN_Update+0x230>
 8007b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b36:	edc7 7a04 	vstr	s15, [r7, #16]
	kalman->tick = tick;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38

    kalman->rate = newRate - kalman->bias;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b46:	ed97 7a01 	vldr	s14, [r7, #4]
 8007b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->angle += dt * kalman->rate;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	ed93 7a03 	vldr	s14, [r3, #12]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	edd3 6a05 	vldr	s13, [r3, #20]
 8007b60:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Step 2
    // Update estimation error covariance - Project the error covariance ahead
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	ed93 7a06 	vldr	s14, [r3, #24]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8007b7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	edd3 7a07 	vldr	s15, [r3, #28]
 8007b8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	edd3 7a08 	vldr	s15, [r3, #32]
 8007b96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	edd3 7a00 	vldr	s15, [r3]
 8007ba0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007ba4:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	edc3 7a06 	vstr	s15, [r3, #24]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	ed93 7a07 	vldr	s14, [r3, #28]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8007bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8007bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	edc3 7a07 	vstr	s15, [r3, #28]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	ed93 7a08 	vldr	s14, [r3, #32]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8007be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8007be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	edc3 7a08 	vstr	s15, [r3, #32]
    kalman->P[1][1] += kalman->Q_bias * dt;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	edd3 6a01 	vldr	s13, [r3, #4]
 8007bfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Step 4
    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    kalman->S = kalman->P[0][0] + kalman->R_measure;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	ed93 7a06 	vldr	s14, [r3, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Step 5
    kalman->K[0] = kalman->P[0][0] / kalman->S;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	edd3 6a06 	vldr	s13, [r3, #24]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8007c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    kalman->K[1] = kalman->P[1][0] / kalman->S;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	edd3 6a08 	vldr	s13, [r3, #32]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8007c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Step 3
    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    kalman->y = newAngle - kalman->angle;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c58:	ed97 7a02 	vldr	s14, [r7, #8]
 8007c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Step 6
    kalman->angle += kalman->K[0] * kalman->y;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	ed93 7a03 	vldr	s14, [r3, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->bias += kalman->K[1] * kalman->y;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	ed93 7a04 	vldr	s14, [r3, #16]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	edc3 7a04 	vstr	s15, [r3, #16]

    // Step 7
    // Calculate estimation error covariance - Update the error covariance
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	ed93 7a06 	vldr	s14, [r3, #24]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	edd3 7a06 	vldr	s15, [r3, #24]
 8007cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	edc3 7a06 	vstr	s15, [r3, #24]
    kalman->P[0][1] -= kalman->K[0] * kalman->P[0][1];
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	ed93 7a07 	vldr	s14, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	edd3 7a07 	vldr	s15, [r3, #28]
 8007cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	edc3 7a07 	vstr	s15, [r3, #28]
    kalman->P[1][0] -= kalman->K[1] * kalman->P[0][0];
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	ed93 7a08 	vldr	s14, [r3, #32]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	edd3 7a06 	vldr	s15, [r3, #24]
 8007cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	edc3 7a08 	vstr	s15, [r3, #32]
    kalman->P[1][1] -= kalman->K[1] * kalman->P[0][1];
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	edd3 7a07 	vldr	s15, [r3, #28]
 8007d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return kalman->angle;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	ee07 3a90 	vmov	s15, r3
}
 8007d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	447a0000 	.word	0x447a0000

08007d3c <BSP_ADC_Init>:

/*******************************************************************
* I2C Functions
 *******************************************************************/

uint8_t BSP_ADC_Init(ADC_TypeDef * hadc, uint32_t resolution, uint32_t nb_conversions) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]

	uint32_t t_start = BSP_GetTick();
 8007d48:	f7fe fb28 	bl	800639c <BSP_GetTick>
 8007d4c:	61b8      	str	r0, [r7, #24]
	uint32_t tmpCFGR;

	// Exiting from deep power-down
	if (hadc->CR & ADC_CR_DEEPPWD) hadc->CR &= ~(ADC_CR_DEEPPWD);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <BSP_ADC_Init+0x2a>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	609a      	str	r2, [r3, #8]

	// Starting internal voltage regulator
	hadc->CR |= ADC_CR_ADVREGEN;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	609a      	str	r2, [r3, #8]

	// Waiting for voltage regulator to start
	while ((hadc->ISR & ADC_ISR_LDORDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 8007d72:	e008      	b.n	8007d86 <BSP_ADC_Init+0x4a>
 8007d74:	f7fe fb12 	bl	800639c <BSP_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b64      	cmp	r3, #100	; 0x64
 8007d80:	d901      	bls.n	8007d86 <BSP_ADC_Init+0x4a>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e084      	b.n	8007e90 <BSP_ADC_Init+0x154>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f0      	beq.n	8007d74 <BSP_ADC_Init+0x38>

	// Setting ADC clock prescaler
	ADC_Common_TypeDef * ADCxy_common;
	if ((hadc == ADC1) || (hadc == ADC2)) ADCxy_common = ADC12_COMMON; else ADCxy_common = ADC3_COMMON;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4a40      	ldr	r2, [pc, #256]	; (8007e98 <BSP_ADC_Init+0x15c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d003      	beq.n	8007da2 <BSP_ADC_Init+0x66>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4a3f      	ldr	r2, [pc, #252]	; (8007e9c <BSP_ADC_Init+0x160>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d102      	bne.n	8007da8 <BSP_ADC_Init+0x6c>
 8007da2:	4b3f      	ldr	r3, [pc, #252]	; (8007ea0 <BSP_ADC_Init+0x164>)
 8007da4:	61fb      	str	r3, [r7, #28]
 8007da6:	e001      	b.n	8007dac <BSP_ADC_Init+0x70>
 8007da8:	4b3e      	ldr	r3, [pc, #248]	; (8007ea4 <BSP_ADC_Init+0x168>)
 8007daa:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(ADCxy_common->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, ADC_CLOCK_ASYNC_DIV1);
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	609a      	str	r2, [r3, #8]

	// Enable continuous conversion mode
	tmpCFGR = ADC_CFGR_CONT;
 8007db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dbc:	617b      	str	r3, [r7, #20]

	// Configure conversion overrun
	tmpCFGR |= ADC_OVR_DATA_OVERWRITTEN;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dc4:	617b      	str	r3, [r7, #20]

	// Configure ADC resolution
	tmpCFGR |= resolution;
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]

	// Enabling DMA data management
	tmpCFGR |= ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f043 0303 	orr.w	r3, r3, #3
 8007dd4:	617b      	str	r3, [r7, #20]

	// Update Configuration Register CFGR
	hadc->CFGR = tmpCFGR;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	60da      	str	r2, [r3, #12]

	// Disable ADC oversampling scope on ADC group regular
	CLEAR_BIT(hadc->CFGR2, ADC_CFGR2_ROVSE);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	f023 0201 	bic.w	r2, r3, #1
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	611a      	str	r2, [r3, #16]

	// Set the LeftShift parameter: it is applied to the final result with or without oversampling
	MODIFY_REG(hadc->CFGR2, ADC_CFGR2_LSHIFT, ADC_LEFTBITSHIFT_NONE);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	611a      	str	r2, [r3, #16]
	// Setting boost:
	// 00: used when ADC clock ≤ 6.25 MHz
	// 01: used when 6.25 MHz < ADC clock frequency ≤ 12.5 MHz
	// 10: used when 12.5 MHz < ADC clock ≤ 25.0 MHz <<<<<<<<< SELECTED (Clock for ADC is 15MHz)
	// 11: used when 25.0 MHz < ADC clock ≤ 50.0 MHz
	MODIFY_REG(hadc->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	609a      	str	r2, [r3, #8]

	// Set number of ranks in regular group sequencer
	MODIFY_REG(hadc->SQR1, ADC_SQR1_L, (nb_conversions - (uint8_t)1));
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	f023 020f 	bic.w	r2, r3, #15
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	431a      	orrs	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30

	// Auto-calibration - requesting single-ended calibration
	hadc->CR &= ~(ADC_CR_ADCALDIF);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	609a      	str	r2, [r3, #8]

	// Auto-calibration - requesting calibration of offset and linearity
	hadc->CR |= ADC_CR_ADCALLIN;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	609a      	str	r2, [r3, #8]

	// Starting calibration
	hadc->CR |= ADC_CR_ADCAL;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	609a      	str	r2, [r3, #8]

	// Waiting for completion of calibration
	while (hadc->CR & ADC_CR_ADCAL) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 8007e3a:	e008      	b.n	8007e4e <BSP_ADC_Init+0x112>
 8007e3c:	f7fe faae 	bl	800639c <BSP_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b64      	cmp	r3, #100	; 0x64
 8007e48:	d901      	bls.n	8007e4e <BSP_ADC_Init+0x112>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e020      	b.n	8007e90 <BSP_ADC_Init+0x154>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dbf2      	blt.n	8007e3c <BSP_ADC_Init+0x100>

	// Enabling ADC
	hadc->CR |= ADC_CR_ADEN;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f043 0201 	orr.w	r2, r3, #1
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	609a      	str	r2, [r3, #8]

	// Waiting until ADC started
	while ((hadc->ISR & ADC_ISR_ADRDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 8007e62:	e008      	b.n	8007e76 <BSP_ADC_Init+0x13a>
 8007e64:	f7fe fa9a 	bl	800639c <BSP_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b64      	cmp	r3, #100	; 0x64
 8007e70:	d901      	bls.n	8007e76 <BSP_ADC_Init+0x13a>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e00c      	b.n	8007e90 <BSP_ADC_Init+0x154>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0f0      	beq.n	8007e64 <BSP_ADC_Init+0x128>
	// Clearing ADRDY flag
	hadc->ISR &= ~(ADC_ISR_ADRDY);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f023 0201 	bic.w	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	40022000 	.word	0x40022000
 8007e9c:	40022100 	.word	0x40022100
 8007ea0:	40022300 	.word	0x40022300
 8007ea4:	58026300 	.word	0x58026300

08007ea8 <BSP_ADC_ConfigChannel>:


uint8_t BSP_ADC_ConfigChannel(ADC_TypeDef * hadc, uint32_t channel, uint32_t sequence) {
 8007ea8:	b480      	push	{r7}
 8007eaa:	b089      	sub	sp, #36	; 0x24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]

	if (channel>19) return BSP_ERROR;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b13      	cmp	r3, #19
 8007eb8:	d901      	bls.n	8007ebe <BSP_ADC_ConfigChannel+0x16>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e060      	b.n	8007f80 <BSP_ADC_ConfigChannel+0xd8>
	if (sequence == 0) return BSP_ERROR;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <BSP_ADC_ConfigChannel+0x20>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e05b      	b.n	8007f80 <BSP_ADC_ConfigChannel+0xd8>
	if (sequence > ((hadc->SQR1) & 0x0F)+1) return BSP_ERROR;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d901      	bls.n	8007edc <BSP_ADC_ConfigChannel+0x34>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e051      	b.n	8007f80 <BSP_ADC_ConfigChannel+0xd8>

	// ADC channels preselection
	hadc->PCSEL |= (1UL << channel);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	61da      	str	r2, [r3, #28]

	// Set ADC group regular sequence: channel on the selected scan sequence rank
	uint8_t sqr_shift = (sequence % 5) * 6;
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	4b26      	ldr	r3, [pc, #152]	; (8007f8c <BSP_ADC_ConfigChannel+0xe4>)
 8007ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ef6:	089a      	lsrs	r2, r3, #2
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	1aca      	subs	r2, r1, r3
 8007f00:	b2d3      	uxtb	r3, r2
 8007f02:	461a      	mov	r2, r3
 8007f04:	0052      	lsls	r2, r2, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	77fb      	strb	r3, [r7, #31]
	uint32_t * sqr_reg = &hadc->SQR1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3330      	adds	r3, #48	; 0x30
 8007f10:	61bb      	str	r3, [r7, #24]
	sqr_reg += (sequence / 5);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a1d      	ldr	r2, [pc, #116]	; (8007f8c <BSP_ADC_ConfigChannel+0xe4>)
 8007f16:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1a:	089b      	lsrs	r3, r3, #2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	4413      	add	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
	*sqr_reg |= (channel << sqr_shift);
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	7ffb      	ldrb	r3, [r7, #31]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f30:	431a      	orrs	r2, r3
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	601a      	str	r2, [r3, #0]

	// Set sampling time of the selected ADC channel
	uint8_t smpr_shift = (channel % 10) * 3;
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <BSP_ADC_ConfigChannel+0xe4>)
 8007f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f3e:	08da      	lsrs	r2, r3, #3
 8007f40:	4613      	mov	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	1aca      	subs	r2, r1, r3
 8007f4a:	b2d3      	uxtb	r3, r2
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	0052      	lsls	r2, r2, #1
 8007f50:	4413      	add	r3, r2
 8007f52:	75fb      	strb	r3, [r7, #23]
	uint32_t * smpr_reg = &hadc->SMPR1;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3314      	adds	r3, #20
 8007f58:	613b      	str	r3, [r7, #16]
	smpr_reg += (channel / 10);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	4a0b      	ldr	r2, [pc, #44]	; (8007f8c <BSP_ADC_ConfigChannel+0xe4>)
 8007f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f62:	08db      	lsrs	r3, r3, #3
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4413      	add	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
	*smpr_reg |= (ADC_SAMPLINGTIME_64CYCLES_5 << smpr_shift);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
 8007f72:	2105      	movs	r1, #5
 8007f74:	fa01 f303 	lsl.w	r3, r1, r3
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	601a      	str	r2, [r3, #0]

	// For this application all other parameters remains default

	return BSP_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3724      	adds	r7, #36	; 0x24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	cccccccd 	.word	0xcccccccd

08007f90 <BSP_ADC_StartDMA>:


uint8_t BSP_ADC_StartDMA(ADC_TypeDef * hadc, TxRxContext_TypeDef *ctx, uint32_t *pData, uint32_t Length) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]

	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&hadc->DR, (uint32_t)pData, Length);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3340      	adds	r3, #64	; 0x40
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68b8      	ldr	r0, [r7, #8]
 8007faa:	f000 fc17 	bl	80087dc <BSP_STM32_DMA_StartIT>
	MODIFY_REG(hadc->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <BSP_ADC_StartDMA+0x38>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	f043 0204 	orr.w	r2, r3, #4
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	609a      	str	r2, [r3, #8]
	return BSP_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	7fffffc0 	.word	0x7fffffc0

08007fcc <BSP_BDMA_Init>:
  __IO uint32_t IFCR;  // BDMA interrupt flag clear register
} BDMA_Base_Registers;

uint32_t BDMACTXvectors[8] = {0};

uint8_t BSP_BDMA_Init(BDMA_Channel_TypeDef *hbdma, uint32_t dir, uint32_t pinc, uint32_t minc, uint32_t pdatalign, uint32_t mdatalign, uint32_t mode, uint32_t priority) {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]

	uint32_t tickstart = BSP_GetTick();
 8007fda:	f7fe f9df 	bl	800639c <BSP_GetTick>
 8007fde:	6178      	str	r0, [r7, #20]

    // Disable the peripheral
    hbdma->CCR &= ~BDMA_CCR_EN;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f023 0201 	bic.w	r2, r3, #1
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	601a      	str	r2, [r3, #0]

    // Check if the BDMA Channel is effectively disabled
    while ((hbdma->CCR & BDMA_CCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 8007fec:	e008      	b.n	8008000 <BSP_BDMA_Init+0x34>
 8007fee:	f7fe f9d5 	bl	800639c <BSP_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <BSP_BDMA_Init+0x34>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e020      	b.n	8008042 <BSP_BDMA_Init+0x76>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f0      	bne.n	8007fee <BSP_BDMA_Init+0x22>

	// Get the CR register value
	uint32_t registerValue = hbdma->CCR;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	613b      	str	r3, [r7, #16]

	// Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits
	registerValue &= ((uint32_t)~(BDMA_CCR_PL | BDMA_CCR_MSIZE | BDMA_CCR_PSIZE | BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC | BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM | BDMA_CCR_CT));
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4b0d      	ldr	r3, [pc, #52]	; (800804c <BSP_BDMA_Init+0x80>)
 8008016:	4013      	ands	r3, r2
 8008018:	613b      	str	r3, [r7, #16]

	// Prepare the BDMA Channel configuration */
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	431a      	orrs	r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	431a      	orrs	r2, r3
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	431a      	orrs	r2, r3
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	431a      	orrs	r2, r3
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	431a      	orrs	r2, r3
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	4313      	orrs	r3, r2
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]

	// Write to BDMA Channel CR register
	hbdma->CCR = registerValue;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	fffe000f 	.word	0xfffe000f

08008050 <BSP_BDMA_CtxLink>:


uint8_t BSP_BDMA_CtxLink(BDMA_Channel_TypeDef *hbdma, TxRxContext_TypeDef *ctx, uint32_t request) {
 8008050:	b480      	push	{r7}
 8008052:	b089      	sub	sp, #36	; 0x24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]

	ctx->dma_stream = (uint32_t)hbdma;
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	605a      	str	r2, [r3, #4]
	ctx->dma_mode = TXRX_CTX_MODE_BDMA;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2202      	movs	r2, #2
 8008066:	601a      	str	r2, [r3, #0]

	// Initialize BaseAddress and Index parameters
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <BSP_BDMA_CtxLink+0xa4>)
 800806c:	4413      	add	r3, r2
 800806e:	4a22      	ldr	r2, [pc, #136]	; (80080f8 <BSP_BDMA_CtxLink+0xa8>)
 8008070:	fba2 2303 	umull	r2, r3, r2, r3
 8008074:	091b      	lsrs	r3, r3, #4
 8008076:	61fb      	str	r3, [r7, #28]
	ctx->dma_index = channel_number << 2U;
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	009a      	lsls	r2, r3, #2
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	609a      	str	r2, [r3, #8]
	BDMA_Base_Registers * dma_baseregs = (BDMA_Base_Registers *)((uint32_t)(hbdma) & (uint32_t)(~0xFFU));
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008086:	61bb      	str	r3, [r7, #24]
	ctx->dma_baseregs = (uint32_t)dma_baseregs;
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	60da      	str	r2, [r3, #12]

	// Clear all interrupt flags
	dma_baseregs->IFCR = ((BDMA_IFCR_CGIF0) << (ctx->dma_index & 0x1FU));
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	2201      	movs	r2, #1
 8008098:	409a      	lsls	r2, r3
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	605a      	str	r2, [r3, #4]

	// Initialize parameters for DMAMUX channel
    // BDMA Channels are connected to DMAMUX2 channels
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	4b16      	ldr	r3, [pc, #88]	; (80080fc <BSP_BDMA_CtxLink+0xac>)
 80080a2:	4413      	add	r3, r2
 80080a4:	009a      	lsls	r2, r3, #2
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	611a      	str	r2, [r3, #16]
	ctx->dma_muxchannelstatus = DMAMUX2_ChannelStatus_BASE;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4a14      	ldr	r2, [pc, #80]	; (8008100 <BSP_BDMA_CtxLink+0xb0>)
 80080ae:	615a      	str	r2, [r3, #20]
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	2201      	movs	r2, #1
 80080b8:	409a      	lsls	r2, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	619a      	str	r2, [r3, #24]

	DMAMUX_Channel_TypeDef * dma_muxchannel = (DMAMUX_Channel_TypeDef *)ctx->dma_muxchannel;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	617b      	str	r3, [r7, #20]
	dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	601a      	str	r2, [r3, #0]

	// Clear the DMAMUX synchro overrun flag
	DMAMUX_ChannelStatus_TypeDef * dma_muxchannelstatus = (DMAMUX_ChannelStatus_TypeDef *)ctx->dma_muxchannelstatus;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	613b      	str	r3, [r7, #16]
	dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	605a      	str	r2, [r3, #4]

	// Assigning TxRx Context to BDMA channel
	BDMACTXvectors[channel_number] = (uint32_t)ctx;
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	4909      	ldr	r1, [pc, #36]	; (8008104 <BSP_BDMA_CtxLink+0xb4>)
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return BSP_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3724      	adds	r7, #36	; 0x24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	a7fdabf8 	.word	0xa7fdabf8
 80080f8:	cccccccd 	.word	0xcccccccd
 80080fc:	16009600 	.word	0x16009600
 8008100:	58025880 	.word	0x58025880
 8008104:	2400044c 	.word	0x2400044c

08008108 <BSP_BDMA_StartIT>:


uint8_t BSP_BDMA_StartIT(TxRxContext_TypeDef *ctx, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]

	BDMA_Channel_TypeDef * hbdma = (BDMA_Channel_TypeDef *)ctx->dma_stream;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	617b      	str	r3, [r7, #20]
	BDMA_Base_Registers * regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	613b      	str	r3, [r7, #16]

	// Disable the peripheral
	hbdma->CCR &= ~BDMA_CCR_EN;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f023 0201 	bic.w	r2, r3, #1
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	601a      	str	r2, [r3, #0]

	// Clear all flags
	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 031f 	and.w	r3, r3, #31
 8008136:	2201      	movs	r2, #1
 8008138:	409a      	lsls	r2, r3
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	605a      	str	r2, [r3, #4]

	// Configure DMA Stream data length
	hbdma->CNDTR = DataLength;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	605a      	str	r2, [r3, #4]

	if((hbdma->CCR & BDMA_CCR_DIR) == BDMA_MEMORY_TO_PERIPH) {
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b10      	cmp	r3, #16
 800814e:	d106      	bne.n	800815e <BSP_BDMA_StartIT+0x56>
			// Memory to Peripheral
			// Configure DMA Stream source address
			hbdma->CPAR = DstAddress;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	609a      	str	r2, [r3, #8]

			// Configure DMA Stream destination address
			hbdma->CM0AR = SrcAddress;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	60da      	str	r2, [r3, #12]
 800815c:	e005      	b.n	800816a <BSP_BDMA_StartIT+0x62>
		} else {
			// Peripheral to Memory
			// Configure DMA Stream destination address
		    hbdma->CPAR = SrcAddress;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	609a      	str	r2, [r3, #8]

		    // Configure DMA Stream source address
		    hbdma->CM0AR = DstAddress;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	60da      	str	r2, [r3, #12]
		}

	// Enable Common interrupts
	MODIFY_REG(hbdma->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE));
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f043 020e 	orr.w	r2, r3, #14
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	601a      	str	r2, [r3, #0]

	// Enable BDMA
	hbdma->CCR |=  BDMA_CCR_EN;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f043 0201 	orr.w	r2, r3, #1
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <BDMA_Stream_IRQHandler>:


void BDMA_Stream_IRQHandler(TxRxContext_TypeDef * ctx) {
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	617b      	str	r3, [r7, #20]
	BDMA_Channel_TypeDef *regs_bdma_channel = (BDMA_Channel_TypeDef *)ctx->dma_stream;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	613b      	str	r3, [r7, #16]
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]

	// Half Transfer Complete Interrupt management ******************************
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	2104      	movs	r1, #4
 80081b8:	fa01 f303 	lsl.w	r3, r1, r3
 80081bc:	4013      	ands	r3, r2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d017      	beq.n	80081f2 <BDMA_Stream_IRQHandler+0x62>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d012      	beq.n	80081f2 <BDMA_Stream_IRQHandler+0x62>

      // Clear the half transfer complete flag
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f003 031f 	and.w	r3, r3, #31
 80081d4:	2204      	movs	r2, #4
 80081d6:	409a      	lsls	r2, r3
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	605a      	str	r2, [r3, #4]

      // Disable the half transfer interrupt if the BDMA mode is not CIRCULAR
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <BDMA_Stream_IRQHandler+0x62>
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f023 0204 	bic.w	r2, r3, #4
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	601a      	str	r2, [r3, #0]
      // TODO: HALF TRANSFER CALLBACK

    }

	// Transfer Complete Interrupt management ***********************************
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f003 031f 	and.w	r3, r3, #31
 80081fe:	2102      	movs	r1, #2
 8008200:	fa01 f303 	lsl.w	r3, r1, r3
 8008204:	4013      	ands	r3, r2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d017      	beq.n	800823a <BDMA_Stream_IRQHandler+0xaa>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d012      	beq.n	800823a <BDMA_Stream_IRQHandler+0xaa>

      // Clear the transfer complete flag
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	2202      	movs	r2, #2
 800821e:	409a      	lsls	r2, r3
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	605a      	str	r2, [r3, #4]

      // Disable the transfer complete interrupt if the BDMA mode is not CIRCULAR
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d105      	bne.n	800823a <BDMA_Stream_IRQHandler+0xaa>
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f023 0202 	bic.w	r2, r3, #2
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	601a      	str	r2, [r3, #0]
      // TODO: HALF TRANSFER CALLBACK

    }

	// Transfer Error Interrupt management **************************************
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 031f 	and.w	r3, r3, #31
 8008246:	2108      	movs	r1, #8
 8008248:	fa01 f303 	lsl.w	r3, r1, r3
 800824c:	4013      	ands	r3, r2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d012      	beq.n	8008278 <BDMA_Stream_IRQHandler+0xe8>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00d      	beq.n	8008278 <BDMA_Stream_IRQHandler+0xe8>

    	// Disable all interrupts
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f023 020e 	bic.w	r2, r3, #14
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	601a      	str	r2, [r3, #0]

    	// Clear all flags
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f003 031f 	and.w	r3, r3, #31
 8008270:	2201      	movs	r2, #1
 8008272:	409a      	lsls	r2, r3
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	605a      	str	r2, [r3, #4]
    }


}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <BDMA_Channel0_IRQHandler>:


void BDMA_Channel0_IRQHandler() {
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
	if (BDMACTXvectors[0x00]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x00]));
 8008288:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <BDMA_Channel0_IRQHandler+0x1c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <BDMA_Channel0_IRQHandler+0x16>
 8008290:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <BDMA_Channel0_IRQHandler+0x1c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff ff7b 	bl	8008190 <BDMA_Stream_IRQHandler>
}
 800829a:	bf00      	nop
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	2400044c 	.word	0x2400044c

080082a4 <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler() { if (BDMACTXvectors[0x01]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x01])); }
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <BDMA_Channel1_IRQHandler+0x1c>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <BDMA_Channel1_IRQHandler+0x16>
 80082b0:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <BDMA_Channel1_IRQHandler+0x1c>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff ff6b 	bl	8008190 <BDMA_Stream_IRQHandler>
 80082ba:	bf00      	nop
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	2400044c 	.word	0x2400044c

080082c4 <BDMA_Channel2_IRQHandler>:
void BDMA_Channel2_IRQHandler() { if (BDMACTXvectors[0x02]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x02])); }
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <BDMA_Channel2_IRQHandler+0x1c>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d004      	beq.n	80082da <BDMA_Channel2_IRQHandler+0x16>
 80082d0:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <BDMA_Channel2_IRQHandler+0x1c>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff ff5b 	bl	8008190 <BDMA_Stream_IRQHandler>
 80082da:	bf00      	nop
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	2400044c 	.word	0x2400044c

080082e4 <BDMA_Channel3_IRQHandler>:
void BDMA_Channel3_IRQHandler() { if (BDMACTXvectors[0x03]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x03])); }
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <BDMA_Channel3_IRQHandler+0x1c>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d004      	beq.n	80082fa <BDMA_Channel3_IRQHandler+0x16>
 80082f0:	4b03      	ldr	r3, [pc, #12]	; (8008300 <BDMA_Channel3_IRQHandler+0x1c>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff ff4b 	bl	8008190 <BDMA_Stream_IRQHandler>
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	2400044c 	.word	0x2400044c

08008304 <BDMA_Channel4_IRQHandler>:
void BDMA_Channel4_IRQHandler() { if (BDMACTXvectors[0x04]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x04])); }
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <BDMA_Channel4_IRQHandler+0x1c>)
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <BDMA_Channel4_IRQHandler+0x16>
 8008310:	4b03      	ldr	r3, [pc, #12]	; (8008320 <BDMA_Channel4_IRQHandler+0x1c>)
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff ff3b 	bl	8008190 <BDMA_Stream_IRQHandler>
 800831a:	bf00      	nop
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	2400044c 	.word	0x2400044c

08008324 <BDMA_Channel5_IRQHandler>:
void BDMA_Channel5_IRQHandler() { if (BDMACTXvectors[0x05]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x05])); }
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <BDMA_Channel5_IRQHandler+0x1c>)
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <BDMA_Channel5_IRQHandler+0x16>
 8008330:	4b03      	ldr	r3, [pc, #12]	; (8008340 <BDMA_Channel5_IRQHandler+0x1c>)
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff ff2b 	bl	8008190 <BDMA_Stream_IRQHandler>
 800833a:	bf00      	nop
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	2400044c 	.word	0x2400044c

08008344 <BDMA_Channel6_IRQHandler>:
void BDMA_Channel6_IRQHandler() { if (BDMACTXvectors[0x06]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x06])); }
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <BDMA_Channel6_IRQHandler+0x1c>)
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <BDMA_Channel6_IRQHandler+0x16>
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <BDMA_Channel6_IRQHandler+0x1c>)
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff ff1b 	bl	8008190 <BDMA_Stream_IRQHandler>
 800835a:	bf00      	nop
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	2400044c 	.word	0x2400044c

08008364 <BDMA_Channel7_IRQHandler>:
void BDMA_Channel7_IRQHandler() { if (BDMACTXvectors[0x07]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x07])); }
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
 8008368:	4b05      	ldr	r3, [pc, #20]	; (8008380 <BDMA_Channel7_IRQHandler+0x1c>)
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <BDMA_Channel7_IRQHandler+0x16>
 8008370:	4b03      	ldr	r3, [pc, #12]	; (8008380 <BDMA_Channel7_IRQHandler+0x1c>)
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff ff0b 	bl	8008190 <BDMA_Stream_IRQHandler>
 800837a:	bf00      	nop
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	2400044c 	.word	0x2400044c

08008384 <__NVIC_SetPriorityGrouping>:
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008394:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <__NVIC_SetPriorityGrouping+0x40>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80083a0:	4013      	ands	r3, r2
 80083a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <__NVIC_SetPriorityGrouping+0x44>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083b2:	4a04      	ldr	r2, [pc, #16]	; (80083c4 <__NVIC_SetPriorityGrouping+0x40>)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	60d3      	str	r3, [r2, #12]
}
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	e000ed00 	.word	0xe000ed00
 80083c8:	05fa0000 	.word	0x05fa0000

080083cc <__NVIC_GetPriorityGrouping>:
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083d0:	4b04      	ldr	r3, [pc, #16]	; (80083e4 <__NVIC_GetPriorityGrouping+0x18>)
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	0a1b      	lsrs	r3, r3, #8
 80083d6:	f003 0307 	and.w	r3, r3, #7
}
 80083da:	4618      	mov	r0, r3
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	e000ed00 	.word	0xe000ed00

080083e8 <__NVIC_EnableIRQ>:
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80083f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	db0b      	blt.n	8008412 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	f003 021f 	and.w	r2, r3, #31
 8008400:	4907      	ldr	r1, [pc, #28]	; (8008420 <__NVIC_EnableIRQ+0x38>)
 8008402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008406:	095b      	lsrs	r3, r3, #5
 8008408:	2001      	movs	r0, #1
 800840a:	fa00 f202 	lsl.w	r2, r0, r2
 800840e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	e000e100 	.word	0xe000e100

08008424 <__NVIC_SetPriority>:
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	6039      	str	r1, [r7, #0]
 800842e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008434:	2b00      	cmp	r3, #0
 8008436:	db0a      	blt.n	800844e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	b2da      	uxtb	r2, r3
 800843c:	490c      	ldr	r1, [pc, #48]	; (8008470 <__NVIC_SetPriority+0x4c>)
 800843e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008442:	0112      	lsls	r2, r2, #4
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	440b      	add	r3, r1
 8008448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800844c:	e00a      	b.n	8008464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	b2da      	uxtb	r2, r3
 8008452:	4908      	ldr	r1, [pc, #32]	; (8008474 <__NVIC_SetPriority+0x50>)
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	3b04      	subs	r3, #4
 800845c:	0112      	lsls	r2, r2, #4
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	440b      	add	r3, r1
 8008462:	761a      	strb	r2, [r3, #24]
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	e000e100 	.word	0xe000e100
 8008474:	e000ed00 	.word	0xe000ed00

08008478 <NVIC_EncodePriority>:
{
 8008478:	b480      	push	{r7}
 800847a:	b089      	sub	sp, #36	; 0x24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f1c3 0307 	rsb	r3, r3, #7
 8008492:	2b04      	cmp	r3, #4
 8008494:	bf28      	it	cs
 8008496:	2304      	movcs	r3, #4
 8008498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	3304      	adds	r3, #4
 800849e:	2b06      	cmp	r3, #6
 80084a0:	d902      	bls.n	80084a8 <NVIC_EncodePriority+0x30>
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	3b03      	subs	r3, #3
 80084a6:	e000      	b.n	80084aa <NVIC_EncodePriority+0x32>
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084ac:	f04f 32ff 	mov.w	r2, #4294967295
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	43da      	mvns	r2, r3
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	401a      	ands	r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084c0:	f04f 31ff 	mov.w	r1, #4294967295
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ca:	43d9      	mvns	r1, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d0:	4313      	orrs	r3, r2
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3724      	adds	r7, #36	; 0x24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <BSP_STM32_NVIC_EnableIRQ>:
 *******************************************************************/

#include "BSP_STM32_CORE.h"


uint8_t BSP_STM32_NVIC_EnableIRQ(IRQn_Type IRQn) {
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	4603      	mov	r3, r0
 80084e6:	80fb      	strh	r3, [r7, #6]
	NVIC_EnableIRQ(IRQn);
 80084e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff ff7b 	bl	80083e8 <__NVIC_EnableIRQ>
	return BSP_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <BSP_STM32_NVIC_SetPriority>:


uint8_t BSP_STM32_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	81fb      	strh	r3, [r7, #14]
	uint32_t prioritygroup = NVIC_GetPriorityGrouping();
 800850a:	f7ff ff5f 	bl	80083cc <__NVIC_GetPriorityGrouping>
 800850e:	6178      	str	r0, [r7, #20]
	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	6978      	ldr	r0, [r7, #20]
 8008516:	f7ff ffaf 	bl	8008478 <NVIC_EncodePriority>
 800851a:	4602      	mov	r2, r0
 800851c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff ff7e 	bl	8008424 <__NVIC_SetPriority>
	return BSP_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <BSP_STM32_NVIC_SetPriorityGrouping>:

uint8_t BSP_STM32_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
	// Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value
	NVIC_SetPriorityGrouping(PriorityGroup);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff ff22 	bl	8008384 <__NVIC_SetPriorityGrouping>
	return BSP_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <BSP_STM32_MPU_Enable>:

uint8_t BSP_STM32_MPU_Enable(uint32_t MPU_Control) {
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	// Enable the MPU
	MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008554:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <BSP_STM32_MPU_Enable+0x38>)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	6053      	str	r3, [r2, #4]
	// Enable fault exceptions
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800855e:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <BSP_STM32_MPU_Enable+0x3c>)
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	4a09      	ldr	r2, [pc, #36]	; (8008588 <BSP_STM32_MPU_Enable+0x3c>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008568:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800856a:	f3bf 8f4f 	dsb	sy
}
 800856e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008570:	f3bf 8f6f 	isb	sy
}
 8008574:	bf00      	nop
	// Ensure MPU setting take effects
	  __DSB();
	  __ISB();
	return BSP_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	e000ed90 	.word	0xe000ed90
 8008588:	e000ed00 	.word	0xe000ed00

0800858c <BSP_STM32_MPU_Disable>:

uint8_t BSP_STM32_MPU_Disable() {
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8008590:	f3bf 8f5f 	dmb	sy
}
 8008594:	bf00      	nop
	// Make sure outstanding transfers are done
	__DMB();
	// Disable fault exceptions
	SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008596:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <BSP_STM32_MPU_Disable+0x28>)
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	4a06      	ldr	r2, [pc, #24]	; (80085b4 <BSP_STM32_MPU_Disable+0x28>)
 800859c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085a0:	6253      	str	r3, [r2, #36]	; 0x24
	// Disable the MPU and clear the control register
	MPU->CTRL = 0;
 80085a2:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <BSP_STM32_MPU_Disable+0x2c>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	605a      	str	r2, [r3, #4]
	return BSP_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	e000ed00 	.word	0xe000ed00
 80085b8:	e000ed90 	.word	0xe000ed90

080085bc <BSP_STM32_MPU_ConfigRegion>:

uint8_t BSP_STM32_MPU_ConfigRegion(MPU_Region_TypeDef *MPU_Init) {
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
	// Set the Region number
	MPU->RNR = MPU_Init->Number;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	785a      	ldrb	r2, [r3, #1]
 80085c8:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <BSP_STM32_MPU_ConfigRegion+0x88>)
 80085ca:	609a      	str	r2, [r3, #8]

	if (MPU_Init->Enable == MPU_REGION_DISABLE) { MPU->RBAR = 0; MPU->RASR = 0; return BSP_OK; }
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d107      	bne.n	80085e4 <BSP_STM32_MPU_ConfigRegion+0x28>
 80085d4:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <BSP_STM32_MPU_ConfigRegion+0x88>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <BSP_STM32_MPU_ConfigRegion+0x88>)
 80085dc:	2200      	movs	r2, #0
 80085de:	611a      	str	r2, [r3, #16]
 80085e0:	2300      	movs	r3, #0
 80085e2:	e029      	b.n	8008638 <BSP_STM32_MPU_ConfigRegion+0x7c>

	MPU->RBAR = MPU_Init->BaseAddress;
 80085e4:	4a17      	ldr	r2, [pc, #92]	; (8008644 <BSP_STM32_MPU_ConfigRegion+0x88>)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	60d3      	str	r3, [r2, #12]
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7b1b      	ldrb	r3, [r3, #12]
 80085f0:	071a      	lsls	r2, r3, #28
	            ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	7adb      	ldrb	r3, [r3, #11]
 80085f6:	061b      	lsls	r3, r3, #24
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80085f8:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7a9b      	ldrb	r3, [r3, #10]
 80085fe:	04db      	lsls	r3, r3, #19
	            ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008600:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	7b5b      	ldrb	r3, [r3, #13]
 8008606:	049b      	lsls	r3, r3, #18
	            ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008608:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	7b9b      	ldrb	r3, [r3, #14]
 800860e:	045b      	lsls	r3, r3, #17
	            ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008610:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7bdb      	ldrb	r3, [r3, #15]
 8008616:	041b      	lsls	r3, r3, #16
	            ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008618:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	7a5b      	ldrb	r3, [r3, #9]
 800861e:	021b      	lsls	r3, r3, #8
	            ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008620:	431a      	orrs	r2, r3
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7a1b      	ldrb	r3, [r3, #8]
 8008626:	005b      	lsls	r3, r3, #1
	            ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008628:	4313      	orrs	r3, r2
	            ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	7812      	ldrb	r2, [r2, #0]
 800862e:	4611      	mov	r1, r2
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008630:	4a04      	ldr	r2, [pc, #16]	; (8008644 <BSP_STM32_MPU_ConfigRegion+0x88>)
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008632:	430b      	orrs	r3, r1
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008634:	6113      	str	r3, [r2, #16]

	return BSP_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	e000ed90 	.word	0xe000ed90

08008648 <BSP_STM32_DMA_Init>:


uint32_t DMACTXvectors[16] = {0};


uint8_t BSP_STM32_DMA_Init(DMA_Stream_TypeDef *hdma, uint32_t dir, uint32_t pinc, uint32_t minc, uint32_t pdatalign, uint32_t mdatalign, uint32_t mode, uint32_t priority) {
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]

	uint32_t tickstart = BSP_GetTick();
 8008656:	f7fd fea1 	bl	800639c <BSP_GetTick>
 800865a:	6178      	str	r0, [r7, #20]

    // Disable the peripheral
    hdma->CR &= ~DMA_SxCR_EN;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f023 0201 	bic.w	r2, r3, #1
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	601a      	str	r2, [r3, #0]

    // Check if the DMA Stream is effectively disabled
    while ((hdma->CR & DMA_SxCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 8008668:	e008      	b.n	800867c <BSP_STM32_DMA_Init+0x34>
 800866a:	f7fd fe97 	bl	800639c <BSP_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <BSP_STM32_DMA_Init+0x34>
 8008678:	2301      	movs	r3, #1
 800867a:	e02a      	b.n	80086d2 <BSP_STM32_DMA_Init+0x8a>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f0      	bne.n	800866a <BSP_STM32_DMA_Init+0x22>

    // Get the CR register value
    uint32_t registerValue = hdma->CR;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	613b      	str	r3, [r7, #16]

    // Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	4b12      	ldr	r3, [pc, #72]	; (80086dc <BSP_STM32_DMA_Init+0x94>)
 8008692:	4013      	ands	r3, r2
 8008694:	613b      	str	r3, [r7, #16]

    // Prepare the DMA Stream configuration
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	431a      	orrs	r2, r3
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	431a      	orrs	r2, r3
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	431a      	orrs	r2, r3
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	431a      	orrs	r2, r3
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	4313      	orrs	r3, r2
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]

    // Write to DMA Stream CR register
    hdma->CR = registerValue;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	601a      	str	r2, [r3, #0]

    // Get the FCR register value
    registerValue = hdma->FCR;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	613b      	str	r3, [r7, #16]

    // Clear Direct mode and FIFO threshold bits
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f023 0307 	bic.w	r3, r3, #7
 80086c8:	613b      	str	r3, [r7, #16]

    // Write to DMA Stream FCR
    hdma->FCR = registerValue;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	615a      	str	r2, [r3, #20]

	return BSP_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	fe10803f 	.word	0xfe10803f

080086e0 <BSP_STM32_DMA_CtxLink>:


uint8_t BSP_STM32_DMA_CtxLink(DMA_Stream_TypeDef *hdma, TxRxContext_TypeDef *ctx, uint32_t request) {
 80086e0:	b480      	push	{r7}
 80086e2:	b089      	sub	sp, #36	; 0x24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]

	ctx->dma_stream = (uint32_t)hdma;
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	605a      	str	r2, [r3, #4]
	ctx->dma_mode = TXRX_CTX_MODE_DMA;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2201      	movs	r2, #1
 80086f6:	601a      	str	r2, [r3, #0]

    // Initialize StreamBaseAddress and StreamIndex parameters
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma) & 0xFFU) - 16U) / 24U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	3b10      	subs	r3, #16
 80086fe:	4a2f      	ldr	r2, [pc, #188]	; (80087bc <BSP_STM32_DMA_CtxLink+0xdc>)
 8008700:	fba2 2303 	umull	r2, r3, r2, r3
 8008704:	091b      	lsrs	r3, r3, #4
 8008706:	61fb      	str	r3, [r7, #28]
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	4a2c      	ldr	r2, [pc, #176]	; (80087c0 <BSP_STM32_DMA_CtxLink+0xe0>)
 8008710:	5cd3      	ldrb	r3, [r2, r3]
 8008712:	461a      	mov	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	609a      	str	r2, [r3, #8]
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b03      	cmp	r3, #3
 800871c:	d906      	bls.n	800872c <BSP_STM32_DMA_CtxLink+0x4c>
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4b28      	ldr	r3, [pc, #160]	; (80087c4 <BSP_STM32_DMA_CtxLink+0xe4>)
 8008722:	4013      	ands	r3, r2
 8008724:	1d1a      	adds	r2, r3, #4
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	60da      	str	r2, [r3, #12]
 800872a:	e004      	b.n	8008736 <BSP_STM32_DMA_CtxLink+0x56>
    	else ctx->dma_baseregs = ((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU));
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4b25      	ldr	r3, [pc, #148]	; (80087c4 <BSP_STM32_DMA_CtxLink+0xe4>)
 8008730:	4013      	ands	r3, r2
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	60d3      	str	r3, [r2, #12]

    //Clear all interrupt flags
    DMA_Base_Registers * regs_dma = (DMA_Base_Registers * )ctx->dma_baseregs;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	61bb      	str	r3, [r7, #24]
    regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f003 031f 	and.w	r3, r3, #31
 8008744:	223f      	movs	r2, #63	; 0x3f
 8008746:	409a      	lsls	r2, r3
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	609a      	str	r2, [r3, #8]

    // Initialize parameters for DMAMUX channel
    if((ctx->dma_baseregs <= ((uint32_t)DMA2_Stream7)) && (ctx->dma_baseregs >= ((uint32_t)DMA2_Stream0))) stream_number += 8U;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <BSP_STM32_DMA_CtxLink+0xe8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d807      	bhi.n	8008766 <BSP_STM32_DMA_CtxLink+0x86>
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	4a1c      	ldr	r2, [pc, #112]	; (80087cc <BSP_STM32_DMA_CtxLink+0xec>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d902      	bls.n	8008766 <BSP_STM32_DMA_CtxLink+0x86>
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	3308      	adds	r3, #8
 8008764:	61fb      	str	r3, [r7, #28]

    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	4b19      	ldr	r3, [pc, #100]	; (80087d0 <BSP_STM32_DMA_CtxLink+0xf0>)
 800876a:	4413      	add	r3, r2
 800876c:	009a      	lsls	r2, r3, #2
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	611a      	str	r2, [r3, #16]
    ctx->dma_muxchannelstatus = DMAMUX1_ChannelStatus_BASE;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4a17      	ldr	r2, [pc, #92]	; (80087d4 <BSP_STM32_DMA_CtxLink+0xf4>)
 8008776:	615a      	str	r2, [r3, #20]
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f003 031f 	and.w	r3, r3, #31
 800877e:	2201      	movs	r2, #1
 8008780:	409a      	lsls	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	619a      	str	r2, [r3, #24]

    // Set peripheral request  to DMAMUX channel
    DMAMUX_Channel_TypeDef * dma_muxchannel = (DMAMUX_Channel_TypeDef *)ctx->dma_muxchannel;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	617b      	str	r3, [r7, #20]
    dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	b2da      	uxtb	r2, r3
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	601a      	str	r2, [r3, #0]

    // Clear the DMAMUX synchro overrun flag
    DMAMUX_ChannelStatus_TypeDef * dma_muxchannelstatus = (DMAMUX_ChannelStatus_TypeDef *)ctx->dma_muxchannelstatus;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	613b      	str	r3, [r7, #16]
    dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	605a      	str	r2, [r3, #4]

    // Assigning TxRx Context to DMA stream
    DMACTXvectors[stream_number] = (uint32_t)ctx;
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	490c      	ldr	r1, [pc, #48]	; (80087d8 <BSP_STM32_DMA_CtxLink+0xf8>)
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return BSP_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3724      	adds	r7, #36	; 0x24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	aaaaaaab 	.word	0xaaaaaaab
 80087c0:	0801bf28 	.word	0x0801bf28
 80087c4:	fffffc00 	.word	0xfffffc00
 80087c8:	400204b8 	.word	0x400204b8
 80087cc:	4002040f 	.word	0x4002040f
 80087d0:	10008200 	.word	0x10008200
 80087d4:	40020880 	.word	0x40020880
 80087d8:	2400046c 	.word	0x2400046c

080087dc <BSP_STM32_DMA_StartIT>:


uint8_t BSP_STM32_DMA_StartIT(TxRxContext_TypeDef *ctx, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]

	DMA_Stream_TypeDef * hdma = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	617b      	str	r3, [r7, #20]
	DMA_Base_Registers * regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	613b      	str	r3, [r7, #16]

	// Disable the peripheral
	hdma->CR &= ~DMA_SxCR_EN;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f023 0201 	bic.w	r2, r3, #1
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	601a      	str	r2, [r3, #0]

	// Clear all interrupt flags at correct offset within the register
	regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 031f 	and.w	r3, r3, #31
 800880a:	223f      	movs	r2, #63	; 0x3f
 800880c:	409a      	lsls	r2, r3
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	609a      	str	r2, [r3, #8]

	// Clear DBM bit
	hdma->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	601a      	str	r2, [r3, #0]

	// Configure DMA Stream data length
	hdma->NDTR = DataLength;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	605a      	str	r2, [r3, #4]

	if((hdma->CR & DMA_SxCR_DIR) == DMA_MEMORY_TO_PERIPH) {
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800882c:	2b40      	cmp	r3, #64	; 0x40
 800882e:	d106      	bne.n	800883e <BSP_STM32_DMA_StartIT+0x62>
		// Memory to Peripheral
		// Configure DMA Stream source address
		hdma->PAR = DstAddress;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	609a      	str	r2, [r3, #8]

		// Configure DMA Stream destination address
		hdma->M0AR = SrcAddress;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	60da      	str	r2, [r3, #12]
 800883c:	e005      	b.n	800884a <BSP_STM32_DMA_StartIT+0x6e>
	} else {
		// Peripheral to Memory
		// Configure DMA Stream destination address
	    hdma->PAR = SrcAddress;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	609a      	str	r2, [r3, #8]

	    // Configure DMA Stream source address
	    hdma->M0AR = DstAddress;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]
	}

	// Enable Common interrupts
	MODIFY_REG(hdma->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT));
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f043 021e 	orr.w	r2, r3, #30
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	601a      	str	r2, [r3, #0]

	// Enable DMA
	hdma->CR |=  DMA_SxCR_EN;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f043 0201 	orr.w	r2, r3, #1
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <BSP_STM32_DMA_GetCounter>:
    dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;

	return BSP_OK;
}

uint32_t BSP_STM32_DMA_GetCounter(DMA_Stream_TypeDef *hdma) {
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	return hdma->NDTR;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <DMA_Stream_IRQHandler>:



// ************* DMA INT handlers *************

void DMA_Stream_IRQHandler(TxRxContext_TypeDef * ctx) {
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
	// Callback management
	void (* pCallback_TE)(TxRxContext_TypeDef * ctx);
	void (* pCallback_HT)(TxRxContext_TypeDef * ctx);
	void (* pCallback_TC)(TxRxContext_TypeDef * ctx);

	pCallback_TE = (void *)ctx->callback_TE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	61fb      	str	r3, [r7, #28]
	pCallback_HT = (void *)ctx->callback_HT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	61bb      	str	r3, [r7, #24]
	pCallback_TC = (void *)ctx->callback_TC;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	617b      	str	r3, [r7, #20]

	// Accessing DMA registers
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	613b      	str	r3, [r7, #16]
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	60fb      	str	r3, [r7, #12]

	// Transfer Error Interrupt management
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d026      	beq.n	8008908 <DMA_Stream_IRQHandler+0x80>
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 031f 	and.w	r3, r3, #31
 80088c6:	2108      	movs	r1, #8
 80088c8:	fa01 f303 	lsl.w	r3, r1, r3
 80088cc:	4013      	ands	r3, r2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d01a      	beq.n	8008908 <DMA_Stream_IRQHandler+0x80>
        // Disable the transfer error interrupt
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f023 0204 	bic.w	r2, r3, #4
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	601a      	str	r2, [r3, #0]
        // Clear the transfer error flag
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2208      	movs	r2, #8
 80088e8:	409a      	lsls	r2, r3
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	609a      	str	r2, [r3, #8]
	    // Disable DMA
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f023 0201 	bic.w	r2, r3, #1
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	601a      	str	r2, [r3, #0]

	    // Execute error callback if set
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <DMA_Stream_IRQHandler+0x80>
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	4798      	blx	r3
	}

	// FIFO Error Interrupt management
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008910:	2b00      	cmp	r3, #0
 8008912:	d026      	beq.n	8008962 <DMA_Stream_IRQHandler+0xda>
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f003 031f 	and.w	r3, r3, #31
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01a      	beq.n	8008962 <DMA_Stream_IRQHandler+0xda>
        // Disable the FIFO error interrupt
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	615a      	str	r2, [r3, #20]
		// Clear the FIFO error flag
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	2201      	movs	r2, #1
 8008942:	409a      	lsls	r2, r3
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	609a      	str	r2, [r3, #8]
	    // Disable DMA
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f023 0201 	bic.w	r2, r3, #1
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	601a      	str	r2, [r3, #0]

	    // Execute error callback if set
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <DMA_Stream_IRQHandler+0xda>
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4798      	blx	r3
	}

	// Direct Mode Error Interrupt management
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d01a      	beq.n	80089a4 <DMA_Stream_IRQHandler+0x11c>
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 031f 	and.w	r3, r3, #31
 800897a:	2104      	movs	r1, #4
 800897c:	fa01 f303 	lsl.w	r3, r1, r3
 8008980:	4013      	ands	r3, r2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00e      	beq.n	80089a4 <DMA_Stream_IRQHandler+0x11c>
        // Clear the direct mode error flag
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 031f 	and.w	r3, r3, #31
 800898e:	2204      	movs	r2, #4
 8008990:	409a      	lsls	r2, r3
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	609a      	str	r2, [r3, #8]

        // Execute error callback if set
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <DMA_Stream_IRQHandler+0x11c>
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	4798      	blx	r3
	}

	// Half Transfer Complete Interrupt management
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d026      	beq.n	80089fe <DMA_Stream_IRQHandler+0x176>
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f003 031f 	and.w	r3, r3, #31
 80089bc:	2110      	movs	r1, #16
 80089be:	fa01 f303 	lsl.w	r3, r1, r3
 80089c2:	4013      	ands	r3, r2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01a      	beq.n	80089fe <DMA_Stream_IRQHandler+0x176>
        // Clear the half transfer complete flag
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f003 031f 	and.w	r3, r3, #31
 80089d0:	2210      	movs	r2, #16
 80089d2:	409a      	lsls	r2, r3
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	609a      	str	r2, [r3, #8]
        // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d105      	bne.n	80089f0 <DMA_Stream_IRQHandler+0x168>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f023 0208 	bic.w	r2, r3, #8
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	601a      	str	r2, [r3, #0]

        // Execute half transfer callback if set
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <DMA_Stream_IRQHandler+0x176>
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	4798      	blx	r3

	}

	// Transfer Complete Interrupt management
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0310 	and.w	r3, r3, #16
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d026      	beq.n	8008a58 <DMA_Stream_IRQHandler+0x1d0>
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 031f 	and.w	r3, r3, #31
 8008a16:	2120      	movs	r1, #32
 8008a18:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01a      	beq.n	8008a58 <DMA_Stream_IRQHandler+0x1d0>
		// Clear the transfer complete flag
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f003 031f 	and.w	r3, r3, #31
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	409a      	lsls	r2, r3
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	609a      	str	r2, [r3, #8]
		// Disable the transfer complete interrupt if the DMA mode is not CIRCULAR
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d105      	bne.n	8008a4a <DMA_Stream_IRQHandler+0x1c2>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f023 0210 	bic.w	r2, r3, #16
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]

        // Execute transfer completed callback if set
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <DMA_Stream_IRQHandler+0x1d0>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
	}

}
 8008a58:	bf00      	nop
 8008a5a:	3720      	adds	r7, #32
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler() { if (DMACTXvectors[0x00]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x00])); }
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <DMA1_Stream0_IRQHandler+0x1c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <DMA1_Stream0_IRQHandler+0x16>
 8008a6c:	4b03      	ldr	r3, [pc, #12]	; (8008a7c <DMA1_Stream0_IRQHandler+0x1c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff ff09 	bl	8008888 <DMA_Stream_IRQHandler>
 8008a76:	bf00      	nop
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	2400046c 	.word	0x2400046c

08008a80 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler() { if (DMACTXvectors[0x01]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x01])); }
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <DMA1_Stream1_IRQHandler+0x1c>)
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d004      	beq.n	8008a96 <DMA1_Stream1_IRQHandler+0x16>
 8008a8c:	4b03      	ldr	r3, [pc, #12]	; (8008a9c <DMA1_Stream1_IRQHandler+0x1c>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff fef9 	bl	8008888 <DMA_Stream_IRQHandler>
 8008a96:	bf00      	nop
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	2400046c 	.word	0x2400046c

08008aa0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler() { if (DMACTXvectors[0x02]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x02])); }
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	4b05      	ldr	r3, [pc, #20]	; (8008abc <DMA1_Stream2_IRQHandler+0x1c>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d004      	beq.n	8008ab6 <DMA1_Stream2_IRQHandler+0x16>
 8008aac:	4b03      	ldr	r3, [pc, #12]	; (8008abc <DMA1_Stream2_IRQHandler+0x1c>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff fee9 	bl	8008888 <DMA_Stream_IRQHandler>
 8008ab6:	bf00      	nop
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	2400046c 	.word	0x2400046c

08008ac0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler() { if (DMACTXvectors[0x03]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x03])); }
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <DMA1_Stream3_IRQHandler+0x1c>)
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d004      	beq.n	8008ad6 <DMA1_Stream3_IRQHandler+0x16>
 8008acc:	4b03      	ldr	r3, [pc, #12]	; (8008adc <DMA1_Stream3_IRQHandler+0x1c>)
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fed9 	bl	8008888 <DMA_Stream_IRQHandler>
 8008ad6:	bf00      	nop
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	2400046c 	.word	0x2400046c

08008ae0 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler() { if (DMACTXvectors[0x04]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x04])); }
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	4b05      	ldr	r3, [pc, #20]	; (8008afc <DMA1_Stream4_IRQHandler+0x1c>)
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <DMA1_Stream4_IRQHandler+0x16>
 8008aec:	4b03      	ldr	r3, [pc, #12]	; (8008afc <DMA1_Stream4_IRQHandler+0x1c>)
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff fec9 	bl	8008888 <DMA_Stream_IRQHandler>
 8008af6:	bf00      	nop
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	2400046c 	.word	0x2400046c

08008b00 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler() { if (DMACTXvectors[0x05]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x05])); }
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <DMA1_Stream5_IRQHandler+0x1c>)
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d004      	beq.n	8008b16 <DMA1_Stream5_IRQHandler+0x16>
 8008b0c:	4b03      	ldr	r3, [pc, #12]	; (8008b1c <DMA1_Stream5_IRQHandler+0x1c>)
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff feb9 	bl	8008888 <DMA_Stream_IRQHandler>
 8008b16:	bf00      	nop
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	2400046c 	.word	0x2400046c

08008b20 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler() { if (DMACTXvectors[0x06]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x06])); }
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <DMA1_Stream6_IRQHandler+0x1c>)
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d004      	beq.n	8008b36 <DMA1_Stream6_IRQHandler+0x16>
 8008b2c:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <DMA1_Stream6_IRQHandler+0x1c>)
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff fea9 	bl	8008888 <DMA_Stream_IRQHandler>
 8008b36:	bf00      	nop
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	2400046c 	.word	0x2400046c

08008b40 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler() { if (DMACTXvectors[0x07]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x07])); }
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <DMA1_Stream7_IRQHandler+0x1c>)
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <DMA1_Stream7_IRQHandler+0x16>
 8008b4c:	4b03      	ldr	r3, [pc, #12]	; (8008b5c <DMA1_Stream7_IRQHandler+0x1c>)
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff fe99 	bl	8008888 <DMA_Stream_IRQHandler>
 8008b56:	bf00      	nop
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	2400046c 	.word	0x2400046c

08008b60 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler() { if (DMACTXvectors[0x08]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x08])); }
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <DMA2_Stream0_IRQHandler+0x1c>)
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <DMA2_Stream0_IRQHandler+0x16>
 8008b6c:	4b03      	ldr	r3, [pc, #12]	; (8008b7c <DMA2_Stream0_IRQHandler+0x1c>)
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff fe89 	bl	8008888 <DMA_Stream_IRQHandler>
 8008b76:	bf00      	nop
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	2400046c 	.word	0x2400046c

08008b80 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler() { if (DMACTXvectors[0x09]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x09])); }
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <DMA2_Stream1_IRQHandler+0x1c>)
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <DMA2_Stream1_IRQHandler+0x16>
 8008b8c:	4b03      	ldr	r3, [pc, #12]	; (8008b9c <DMA2_Stream1_IRQHandler+0x1c>)
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fe79 	bl	8008888 <DMA_Stream_IRQHandler>
 8008b96:	bf00      	nop
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	2400046c 	.word	0x2400046c

08008ba0 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler() { if (DMACTXvectors[0x0A]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0A])); }
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <DMA2_Stream2_IRQHandler+0x1c>)
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <DMA2_Stream2_IRQHandler+0x16>
 8008bac:	4b03      	ldr	r3, [pc, #12]	; (8008bbc <DMA2_Stream2_IRQHandler+0x1c>)
 8008bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff fe69 	bl	8008888 <DMA_Stream_IRQHandler>
 8008bb6:	bf00      	nop
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2400046c 	.word	0x2400046c

08008bc0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler() { if (DMACTXvectors[0x0B]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0B])); }
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <DMA2_Stream3_IRQHandler+0x1c>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <DMA2_Stream3_IRQHandler+0x16>
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <DMA2_Stream3_IRQHandler+0x1c>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff fe59 	bl	8008888 <DMA_Stream_IRQHandler>
 8008bd6:	bf00      	nop
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	2400046c 	.word	0x2400046c

08008be0 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler() { if (DMACTXvectors[0x0C]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0C])); }
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <DMA2_Stream4_IRQHandler+0x1c>)
 8008be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <DMA2_Stream4_IRQHandler+0x16>
 8008bec:	4b03      	ldr	r3, [pc, #12]	; (8008bfc <DMA2_Stream4_IRQHandler+0x1c>)
 8008bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff fe49 	bl	8008888 <DMA_Stream_IRQHandler>
 8008bf6:	bf00      	nop
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	2400046c 	.word	0x2400046c

08008c00 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler() { if (DMACTXvectors[0x0D]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0D])); }
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <DMA2_Stream5_IRQHandler+0x1c>)
 8008c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <DMA2_Stream5_IRQHandler+0x16>
 8008c0c:	4b03      	ldr	r3, [pc, #12]	; (8008c1c <DMA2_Stream5_IRQHandler+0x1c>)
 8008c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff fe39 	bl	8008888 <DMA_Stream_IRQHandler>
 8008c16:	bf00      	nop
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	2400046c 	.word	0x2400046c

08008c20 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler() { if (DMACTXvectors[0x0E]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0E])); }
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <DMA2_Stream6_IRQHandler+0x1c>)
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d004      	beq.n	8008c36 <DMA2_Stream6_IRQHandler+0x16>
 8008c2c:	4b03      	ldr	r3, [pc, #12]	; (8008c3c <DMA2_Stream6_IRQHandler+0x1c>)
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff fe29 	bl	8008888 <DMA_Stream_IRQHandler>
 8008c36:	bf00      	nop
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2400046c 	.word	0x2400046c

08008c40 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler() { if (DMACTXvectors[0x0F]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0F])); }
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <DMA2_Stream7_IRQHandler+0x1c>)
 8008c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <DMA2_Stream7_IRQHandler+0x16>
 8008c4c:	4b03      	ldr	r3, [pc, #12]	; (8008c5c <DMA2_Stream7_IRQHandler+0x1c>)
 8008c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff fe19 	bl	8008888 <DMA_Stream_IRQHandler>
 8008c56:	bf00      	nop
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	2400046c 	.word	0x2400046c

08008c60 <BSP_STM32_DMA2D_FillBuff>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_STM32_DMA2D.h"

uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	460b      	mov	r3, r1
 8008c70:	80fb      	strh	r3, [r7, #6]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80bb      	strh	r3, [r7, #4]

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_R2M);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008c7e:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8a:	f023 0207 	bic.w	r2, r3, #7
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	431a      	orrs	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, (uint32_t)offsetline);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c9a:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <BSP_STM32_DMA2D_FillBuff+0x90>)
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	8b3a      	ldrh	r2, [r7, #24]
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	641a      	str	r2, [r3, #64]	; 0x40
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), ((uint32_t)height | ((uint32_t)width << DMA2D_NLR_PL_Pos)));
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8008cae:	88b9      	ldrh	r1, [r7, #4]
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	041b      	lsls	r3, r3, #16
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	69fa      	ldr	r2, [r7, #28]
 8008cc0:	63da      	str	r2, [r3, #60]	; 0x3c
	WRITE_REG(hdma2d->OCOLR, color);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a3a      	ldr	r2, [r7, #32]
 8008cc6:	639a      	str	r2, [r3, #56]	; 0x38

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	601a      	str	r2, [r3, #0]

	// Enable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f043 0201 	orr.w	r2, r3, #1
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	ffff0000 	.word	0xffff0000

08008cf4 <BSP_STM32_DMA2D_FillBuffBlend>:


uint8_t BSP_STM32_DMA2D_FillBuffBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color, uint8_t alpha) {
 8008cf4:	b480      	push	{r7}
 8008cf6:	b089      	sub	sp, #36	; 0x24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	461a      	mov	r2, r3
 8008d02:	460b      	mov	r3, r1
 8008d04:	80fb      	strh	r3, [r7, #6]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80bb      	strh	r3, [r7, #4]
	// Recalculating color for ARGB4444 and ARGB1555
	switch (colormode) {
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d011      	beq.n	8008d34 <BSP_STM32_DMA2D_FillBuffBlend+0x40>
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d11d      	bne.n	8008d52 <BSP_STM32_DMA2D_FillBuffBlend+0x5e>
	case DMA2D_ARGB4444:
		color = ((color & 0x0F00) << 12) | ((color & 0x00F0) << 8) | ((color & 0x000F) << 4);
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	031b      	lsls	r3, r3, #12
 8008d1a:	f403 0270 	and.w	r2, r3, #15728640	; 0xf00000
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008d26:	431a      	orrs	r2, r3
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8008d32:	e00e      	b.n	8008d52 <BSP_STM32_DMA2D_FillBuffBlend+0x5e>
	case DMA2D_ARGB1555:
		color = ((color & 0x7C00) << 9) | ((color & 0x03E0) << 6) | ((color & 0x001F) << 3);
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	025b      	lsls	r3, r3, #9
 8008d38:	f403 0278 	and.w	r2, r3, #16252928	; 0xf80000
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	019b      	lsls	r3, r3, #6
 8008d40:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8008d44:	431a      	orrs	r2, r3
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8008d50:	bf00      	nop
	}

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND_FG);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008d5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d66:	f023 0207 	bic.w	r2, r3, #7
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, offsetline);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d76:	4b29      	ldr	r3, [pc, #164]	; (8008e1c <BSP_STM32_DMA2D_FillBuffBlend+0x128>)
 8008d78:	4013      	ands	r3, r2
 8008d7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	641a      	str	r2, [r3, #64]	; 0x40

	uint32_t regValue1 = colormode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos);
 8008d82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008d86:	061b      	lsls	r3, r3, #24
 8008d88:	461a      	mov	r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d92:	61fb      	str	r3, [r7, #28]
	uint32_t regMask1  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA);
 8008d94:	4b22      	ldr	r3, [pc, #136]	; (8008e20 <BSP_STM32_DMA2D_FillBuffBlend+0x12c>)
 8008d96:	61bb      	str	r3, [r7, #24]
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	69da      	ldr	r2, [r3, #28]
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	43db      	mvns	r3, r3
 8008da0:	401a      	ands	r2, r3
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	431a      	orrs	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	61da      	str	r2, [r3, #28]
	WRITE_REG(hdma2d->FGCOLR, color);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dae:	621a      	str	r2, [r3, #32]

	uint32_t regValue0 = colormode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFF << DMA2D_BGPFCCR_ALPHA_Pos);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db6:	617b      	str	r3, [r7, #20]
	uint32_t regMask0  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA);
 8008db8:	4b19      	ldr	r3, [pc, #100]	; (8008e20 <BSP_STM32_DMA2D_FillBuffBlend+0x12c>)
 8008dba:	613b      	str	r3, [r7, #16]
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	43db      	mvns	r3, r3
 8008dc4:	401a      	ands	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	625a      	str	r2, [r3, #36]	; 0x24
	WRITE_REG(hdma2d->BGOR, offsetline);
 8008dce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	619a      	str	r2, [r3, #24]

	WRITE_REG(hdma2d->BGMAR, dest_addr);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd8:	615a      	str	r2, [r3, #20]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008de2:	88b9      	ldrh	r1, [r7, #4]
 8008de4:	88fa      	ldrh	r2, [r7, #6]
 8008de6:	0412      	lsls	r2, r2, #16
 8008de8:	430a      	orrs	r2, r1
 8008dea:	431a      	orrs	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008df4:	63da      	str	r2, [r3, #60]	; 0x3c

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	601a      	str	r2, [r3, #0]
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f043 0201 	orr.w	r2, r3, #1
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3724      	adds	r7, #36	; 0x24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	ffff0000 	.word	0xffff0000
 8008e20:	ff03000f 	.word	0xff03000f

08008e24 <BSP_STM32_DMA2D_CopyBuf>:


uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4611      	mov	r1, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	460b      	mov	r3, r1
 8008e34:	80fb      	strh	r3, [r7, #6]
 8008e36:	4613      	mov	r3, r2
 8008e38:	80bb      	strh	r3, [r7, #4]

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4a:	f023 0207 	bic.w	r2, r3, #7
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	431a      	orrs	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e5a:	4b1e      	ldr	r3, [pc, #120]	; (8008ed4 <BSP_STM32_DMA2D_CopyBuf+0xb0>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008e60:	431a      	orrs	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40
	uint32_t regValue = colormode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFF << DMA2D_FGPFCCR_ALPHA_Pos);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e6c:	617b      	str	r3, [r7, #20]
	uint32_t regMask  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA);
 8008e6e:	4b1a      	ldr	r3, [pc, #104]	; (8008ed8 <BSP_STM32_DMA2D_CopyBuf+0xb4>)
 8008e70:	613b      	str	r3, [r7, #16]
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	69da      	ldr	r2, [r3, #28]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	43db      	mvns	r3, r3
 8008e7a:	401a      	ands	r2, r3
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	61da      	str	r2, [r3, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8008e84:	8c3a      	ldrh	r2, [r7, #32]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	611a      	str	r2, [r3, #16]

	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008e92:	88b9      	ldrh	r1, [r7, #4]
 8008e94:	88fa      	ldrh	r2, [r7, #6]
 8008e96:	0412      	lsls	r2, r2, #16
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ea4:	63da      	str	r2, [r3, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eaa:	60da      	str	r2, [r3, #12]

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	601a      	str	r2, [r3, #0]
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f043 0201 	orr.w	r2, r3, #1
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	ffff0000 	.word	0xffff0000
 8008ed8:	ff03000f 	.word	0xff03000f

08008edc <BSP_STM32_DMA2D_CopyBufJPEG>:

uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	461a      	mov	r2, r3
 8008eea:	460b      	mov	r3, r1
 8008eec:	80fb      	strh	r3, [r7, #6]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	80bb      	strh	r3, [r7, #4]

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_PFC);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008efa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f06:	f023 0207 	bic.w	r2, r3, #7
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f16:	4b1e      	ldr	r3, [pc, #120]	; (8008f90 <BSP_STM32_DMA2D_CopyBufJPEG+0xb4>)
 8008f18:	4013      	ands	r3, r2
 8008f1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	641a      	str	r2, [r3, #64]	; 0x40

	uint32_t regValue = DMA2D_YCBCR | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFF << DMA2D_FGPFCCR_ALPHA_Pos) | (chroma << DMA2D_FGPFCCR_CSS_Pos);
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	049a      	lsls	r2, r3, #18
 8008f26:	4b1b      	ldr	r3, [pc, #108]	; (8008f94 <BSP_STM32_DMA2D_CopyBufJPEG+0xb8>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	617b      	str	r3, [r7, #20]
	uint32_t regMask  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_CSS);
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <BSP_STM32_DMA2D_CopyBufJPEG+0xbc>)
 8008f2e:	613b      	str	r3, [r7, #16]
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	69da      	ldr	r2, [r3, #28]
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	43db      	mvns	r3, r3
 8008f38:	401a      	ands	r2, r3
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	61da      	str	r2, [r3, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8008f42:	8c3a      	ldrh	r2, [r7, #32]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	611a      	str	r2, [r3, #16]

	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008f50:	88b9      	ldrh	r1, [r7, #4]
 8008f52:	88fa      	ldrh	r2, [r7, #6]
 8008f54:	0412      	lsls	r2, r2, #16
 8008f56:	430a      	orrs	r2, r1
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f62:	63da      	str	r2, [r3, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f68:	60da      	str	r2, [r3, #12]

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	601a      	str	r2, [r3, #0]
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f043 0201 	orr.w	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	371c      	adds	r7, #28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	ffff0000 	.word	0xffff0000
 8008f94:	ff01000b 	.word	0xff01000b
 8008f98:	ff0f000f 	.word	0xff0f000f

08008f9c <BSP_STM32_DMA2D_CopyBufBlend>:

uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8008f9c:	b480      	push	{r7}
 8008f9e:	b089      	sub	sp, #36	; 0x24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	461a      	mov	r2, r3
 8008faa:	460b      	mov	r3, r1
 8008fac:	80fb      	strh	r3, [r7, #6]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	80bb      	strh	r3, [r7, #4]

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008fba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	601a      	str	r2, [r3, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc6:	f023 0207 	bic.w	r2, r3, #7
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	635a      	str	r2, [r3, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fd6:	4b2b      	ldr	r3, [pc, #172]	; (8009084 <BSP_STM32_DMA2D_CopyBufBlend+0xe8>)
 8008fd8:	4013      	ands	r3, r2
 8008fda:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	641a      	str	r2, [r3, #64]	; 0x40

	uint32_t regValue1 = colormode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos);
 8008fe2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008fe6:	061b      	lsls	r3, r3, #24
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff2:	61fb      	str	r3, [r7, #28]
	uint32_t regMask1  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA);
 8008ff4:	4b24      	ldr	r3, [pc, #144]	; (8009088 <BSP_STM32_DMA2D_CopyBufBlend+0xec>)
 8008ff6:	61bb      	str	r3, [r7, #24]
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	69da      	ldr	r2, [r3, #28]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	43db      	mvns	r3, r3
 8009000:	401a      	ands	r2, r3
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	431a      	orrs	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	61da      	str	r2, [r3, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 800900a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	611a      	str	r2, [r3, #16]

	uint32_t regValue0 = colormode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFF << DMA2D_BGPFCCR_ALPHA_Pos);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009016:	617b      	str	r3, [r7, #20]
	uint32_t regMask0  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA);
 8009018:	4b1b      	ldr	r3, [pc, #108]	; (8009088 <BSP_STM32_DMA2D_CopyBufBlend+0xec>)
 800901a:	613b      	str	r3, [r7, #16]
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	43db      	mvns	r3, r3
 8009024:	401a      	ands	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	431a      	orrs	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	625a      	str	r2, [r3, #36]	; 0x24
	WRITE_REG(hdma2d->BGOR, dest_offsetline);
 800902e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	619a      	str	r2, [r3, #24]

	WRITE_REG(hdma2d->BGMAR, dest_addr);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009038:	615a      	str	r2, [r3, #20]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009042:	88b9      	ldrh	r1, [r7, #4]
 8009044:	88fa      	ldrh	r2, [r7, #6]
 8009046:	0412      	lsls	r2, r2, #16
 8009048:	430a      	orrs	r2, r1
 800904a:	431a      	orrs	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	645a      	str	r2, [r3, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009054:	63da      	str	r2, [r3, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800905a:	60da      	str	r2, [r3, #12]

	// Enable Interrupts
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f443 520c 	orr.w	r2, r3, #8960	; 0x2300
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	601a      	str	r2, [r3, #0]
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f043 0201 	orr.w	r2, r3, #1
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3724      	adds	r7, #36	; 0x24
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	ffff0000 	.word	0xffff0000
 8009088:	ff03000f 	.word	0xff03000f

0800908c <BSP_STM32_DMA2D_IRQHandler>:


uint8_t BSP_STM32_DMA2D_IRQHandler(DMA2D_TypeDef * hdma2d) {
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	if (((hdma2d->ISR & DMA2D_ISR_TCIF) > 0) &&  ((hdma2d->CR & DMA2D_CR_TCIE) > 0)) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d010      	beq.n	80090c2 <BSP_STM32_DMA2D_IRQHandler+0x36>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00a      	beq.n	80090c2 <BSP_STM32_DMA2D_IRQHandler+0x36>

		// Disable the transfer complete interrupt
		hdma2d->CR &= ~(DMA2D_CR_TCIE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]

		// Clear the transfer complete flag
		hdma2d->IFCR = DMA2D_IFCR_CTCIF;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	609a      	str	r2, [r3, #8]

		return BSP_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	e02e      	b.n	8009120 <BSP_STM32_DMA2D_IRQHandler+0x94>
	}

	if (((hdma2d->ISR & DMA2D_ISR_TEIF) > 0) && ((hdma2d->CR & DMA2D_CR_TEIE) > 0)) {
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d010      	beq.n	80090f0 <BSP_STM32_DMA2D_IRQHandler+0x64>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <BSP_STM32_DMA2D_IRQHandler+0x64>

		// Disable the transfer error interrupt
		hdma2d->CR &= ~(DMA2D_CR_TEIE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]

		// Clear the transfer error flag
		hdma2d->IFCR = DMA2D_IFCR_CTEIF;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	609a      	str	r2, [r3, #8]

		return BSP_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e017      	b.n	8009120 <BSP_STM32_DMA2D_IRQHandler+0x94>
	}

	if (((hdma2d->ISR & DMA2D_ISR_CEIF) > 0) && ((hdma2d->CR & DMA2D_CR_CEIE) > 0)) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d010      	beq.n	800911e <BSP_STM32_DMA2D_IRQHandler+0x92>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00a      	beq.n	800911e <BSP_STM32_DMA2D_IRQHandler+0x92>

		// Disable the configuration error interrupt
		hdma2d->CR &= ~(DMA2D_CR_CEIE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	601a      	str	r2, [r3, #0]

		// Clear the configuration error flag
		hdma2d->IFCR = DMA2D_IFCR_CCEIF;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	609a      	str	r2, [r3, #8]

		return BSP_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <BSP_STM32_DMA2D_IRQHandler+0x94>
	}
	return BSP_ERROR;
 800911e:	2301      	movs	r3, #1
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <BSP_STM32_GPIO_Init>:
#define EXTI_CPU1             (0x01000000U)
#define EXTI_CPU2             (0x02000000U)
#endif /*DUAL_CORE*/


uint8_t BSP_STM32_GPIO_Init(GPIO_TypeDef  *GPIOx, uint32_t Pins, uint32_t Mode, uint32_t Pull, uint32_t Speed, uint32_t Alternate) {
 800912c:	b480      	push	{r7}
 800912e:	b089      	sub	sp, #36	; 0x24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]

	uint32_t position = 0x00U;
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]
	EXTI_Core_TypeDef *EXTI_CurrentCPU;

	#if defined(DUAL_CORE) && defined(CORE_CM4)
		EXTI_CurrentCPU = EXTI_D2; // EXTI for CM4 CPU
	#else
		EXTI_CurrentCPU = EXTI_D1; // EXTI for CM7 CPU
 800913e:	4b7c      	ldr	r3, [pc, #496]	; (8009330 <BSP_STM32_GPIO_Init+0x204>)
 8009140:	617b      	str	r3, [r7, #20]
	#endif

	// Configure the port pins
	while (((Pins) >> position) != 0x00U) {
 8009142:	e174      	b.n	800942e <BSP_STM32_GPIO_Init+0x302>

		// Get current io position
	    iocurrent = (Pins) & (1UL << position);
 8009144:	2201      	movs	r2, #1
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	fa02 f303 	lsl.w	r3, r2, r3
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	4013      	ands	r3, r2
 8009150:	613b      	str	r3, [r7, #16]

	    if (iocurrent != 0x00U) {
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 8167 	beq.w	8009428 <BSP_STM32_GPIO_Init+0x2fc>

	      // --------------------- GPIO Mode Configuration ------------------------
	      // In case of Output or Alternate function mode selection

	      if (((Mode & GPIO_MODE) == MODE_OUTPUT) || ((Mode & GPIO_MODE) == MODE_AF)) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f003 0303 	and.w	r3, r3, #3
 8009160:	2b01      	cmp	r3, #1
 8009162:	d004      	beq.n	800916e <BSP_STM32_GPIO_Init+0x42>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b02      	cmp	r3, #2
 800916c:	d12e      	bne.n	80091cc <BSP_STM32_GPIO_Init+0xa0>

	    	  // Configure the IO Speed
	    	  temp = GPIOx->OSPEEDR;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	61bb      	str	r3, [r7, #24]
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	2203      	movs	r2, #3
 800917a:	fa02 f303 	lsl.w	r3, r2, r3
 800917e:	43db      	mvns	r3, r3
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	4013      	ands	r3, r2
 8009184:	61bb      	str	r3, [r7, #24]
	    	  temp |= (Speed << (position * 2U));
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800918c:	fa02 f303 	lsl.w	r3, r2, r3
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	4313      	orrs	r3, r2
 8009194:	61bb      	str	r3, [r7, #24]
	    	  GPIOx->OSPEEDR = temp;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	69ba      	ldr	r2, [r7, #24]
 800919a:	609a      	str	r2, [r3, #8]

	    	  // Configure the IO Output Type
	    	  temp = GPIOx->OTYPER;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	61bb      	str	r3, [r7, #24]
	    	  temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80091a2:	2201      	movs	r2, #1
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	43db      	mvns	r3, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	4013      	ands	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]
	    	  temp |= (((Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	091b      	lsrs	r3, r3, #4
 80091b6:	f003 0201 	and.w	r2, r3, #1
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	61bb      	str	r3, [r7, #24]
	    	  GPIOx->OTYPER = temp;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	605a      	str	r2, [r3, #4]
	      }

	      if ((Mode & GPIO_MODE) != MODE_ANALOG) {
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d016      	beq.n	8009204 <BSP_STM32_GPIO_Init+0xd8>

	    	  // Activate the Pull-up or Pull down resistor for the current IO
	    	  temp = GPIOx->PUPDR;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	61bb      	str	r3, [r7, #24]
	    	  temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	2203      	movs	r2, #3
 80091e2:	fa02 f303 	lsl.w	r3, r2, r3
 80091e6:	43db      	mvns	r3, r3
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	4013      	ands	r3, r2
 80091ec:	61bb      	str	r3, [r7, #24]
	    	  temp |= ((Pull) << (position * 2U));
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	fa02 f303 	lsl.w	r3, r2, r3
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
	    	  GPIOx->PUPDR = temp;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	60da      	str	r2, [r3, #12]

	      }

	      // In case of Alternate function mode selection
	      if ((Mode & GPIO_MODE) == MODE_AF) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	2b02      	cmp	r3, #2
 800920c:	d122      	bne.n	8009254 <BSP_STM32_GPIO_Init+0x128>

	    	  // Configure Alternate function mapped with the current IO
	    	  temp = GPIOx->AFR[position >> 3U];
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	08da      	lsrs	r2, r3, #3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3208      	adds	r2, #8
 8009216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921a:	61bb      	str	r3, [r7, #24]
	    	  temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	220f      	movs	r2, #15
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	43db      	mvns	r3, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
	    	  temp |= ((Alternate) << ((position & 0x07U) * 4U));
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	4313      	orrs	r3, r2
 8009244:	61bb      	str	r3, [r7, #24]
	    	  GPIOx->AFR[position >> 3U] = temp;
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	08da      	lsrs	r2, r3, #3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3208      	adds	r2, #8
 800924e:	69b9      	ldr	r1, [r7, #24]
 8009250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	      }

	      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
	      temp = GPIOx->MODER;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	61bb      	str	r3, [r7, #24]
	      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	2203      	movs	r2, #3
 8009260:	fa02 f303 	lsl.w	r3, r2, r3
 8009264:	43db      	mvns	r3, r3
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	4013      	ands	r3, r2
 800926a:	61bb      	str	r3, [r7, #24]
	      temp |= ((Mode & GPIO_MODE) << (position * 2U));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f003 0203 	and.w	r2, r3, #3
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	fa02 f303 	lsl.w	r3, r2, r3
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	4313      	orrs	r3, r2
 800927e:	61bb      	str	r3, [r7, #24]
	      GPIOx->MODER = temp;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	601a      	str	r2, [r3, #0]

	      //--------------------- EXTI Mode Configuration ------------------------
	      // Configure the External Interrupt or event for the current IO

	      if ((Mode & EXTI_MODE) != 0x00U) {
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80cb 	beq.w	8009428 <BSP_STM32_GPIO_Init+0x2fc>

	        temp = SYSCFG->EXTICR[position >> 2U];
 8009292:	4a28      	ldr	r2, [pc, #160]	; (8009334 <BSP_STM32_GPIO_Init+0x208>)
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	089b      	lsrs	r3, r3, #2
 8009298:	3302      	adds	r3, #2
 800929a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800929e:	61bb      	str	r3, [r7, #24]
	        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	f003 0303 	and.w	r3, r3, #3
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	220f      	movs	r2, #15
 80092aa:	fa02 f303 	lsl.w	r3, r2, r3
 80092ae:	43db      	mvns	r3, r3
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	4013      	ands	r3, r2
 80092b4:	61bb      	str	r3, [r7, #24]
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4a1f      	ldr	r2, [pc, #124]	; (8009338 <BSP_STM32_GPIO_Init+0x20c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d050      	beq.n	8009360 <BSP_STM32_GPIO_Init+0x234>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4a1e      	ldr	r2, [pc, #120]	; (800933c <BSP_STM32_GPIO_Init+0x210>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d031      	beq.n	800932a <BSP_STM32_GPIO_Init+0x1fe>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4a1d      	ldr	r2, [pc, #116]	; (8009340 <BSP_STM32_GPIO_Init+0x214>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d02b      	beq.n	8009326 <BSP_STM32_GPIO_Init+0x1fa>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4a1c      	ldr	r2, [pc, #112]	; (8009344 <BSP_STM32_GPIO_Init+0x218>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d025      	beq.n	8009322 <BSP_STM32_GPIO_Init+0x1f6>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4a1b      	ldr	r2, [pc, #108]	; (8009348 <BSP_STM32_GPIO_Init+0x21c>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d01f      	beq.n	800931e <BSP_STM32_GPIO_Init+0x1f2>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4a1a      	ldr	r2, [pc, #104]	; (800934c <BSP_STM32_GPIO_Init+0x220>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d019      	beq.n	800931a <BSP_STM32_GPIO_Init+0x1ee>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4a19      	ldr	r2, [pc, #100]	; (8009350 <BSP_STM32_GPIO_Init+0x224>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d013      	beq.n	8009316 <BSP_STM32_GPIO_Init+0x1ea>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4a18      	ldr	r2, [pc, #96]	; (8009354 <BSP_STM32_GPIO_Init+0x228>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00d      	beq.n	8009312 <BSP_STM32_GPIO_Init+0x1e6>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4a17      	ldr	r2, [pc, #92]	; (8009358 <BSP_STM32_GPIO_Init+0x22c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d007      	beq.n	800930e <BSP_STM32_GPIO_Init+0x1e2>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4a16      	ldr	r2, [pc, #88]	; (800935c <BSP_STM32_GPIO_Init+0x230>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d101      	bne.n	800930a <BSP_STM32_GPIO_Init+0x1de>
 8009306:	2309      	movs	r3, #9
 8009308:	e02b      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 800930a:	230a      	movs	r3, #10
 800930c:	e029      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 800930e:	2308      	movs	r3, #8
 8009310:	e027      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 8009312:	2307      	movs	r3, #7
 8009314:	e025      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 8009316:	2306      	movs	r3, #6
 8009318:	e023      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 800931a:	2305      	movs	r3, #5
 800931c:	e021      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 800931e:	2304      	movs	r3, #4
 8009320:	e01f      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 8009322:	2303      	movs	r3, #3
 8009324:	e01d      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 8009326:	2302      	movs	r3, #2
 8009328:	e01b      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 800932a:	2301      	movs	r3, #1
 800932c:	e019      	b.n	8009362 <BSP_STM32_GPIO_Init+0x236>
 800932e:	bf00      	nop
 8009330:	58000080 	.word	0x58000080
 8009334:	58000400 	.word	0x58000400
 8009338:	58020000 	.word	0x58020000
 800933c:	58020400 	.word	0x58020400
 8009340:	58020800 	.word	0x58020800
 8009344:	58020c00 	.word	0x58020c00
 8009348:	58021000 	.word	0x58021000
 800934c:	58021400 	.word	0x58021400
 8009350:	58021800 	.word	0x58021800
 8009354:	58021c00 	.word	0x58021c00
 8009358:	58022000 	.word	0x58022000
 800935c:	58022400 	.word	0x58022400
 8009360:	2300      	movs	r3, #0
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	f002 0203 	and.w	r2, r2, #3
 8009368:	0092      	lsls	r2, r2, #2
 800936a:	4093      	lsls	r3, r2
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	4313      	orrs	r3, r2
 8009370:	61bb      	str	r3, [r7, #24]
	        SYSCFG->EXTICR[position >> 2U] = temp;
 8009372:	4936      	ldr	r1, [pc, #216]	; (800944c <BSP_STM32_GPIO_Init+0x320>)
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	089b      	lsrs	r3, r3, #2
 8009378:	3302      	adds	r3, #2
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	        // Clear Rising Falling edge configuration
	        temp = EXTI->RTSR1;
 8009380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	61bb      	str	r3, [r7, #24]
	        temp &= ~(iocurrent);
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	43db      	mvns	r3, r3
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	4013      	ands	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <BSP_STM32_GPIO_Init+0x278>
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	61bb      	str	r3, [r7, #24]
	        EXTI->RTSR1 = temp;
 80093a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	6013      	str	r3, [r2, #0]

	        temp = EXTI->FTSR1;
 80093ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	61bb      	str	r3, [r7, #24]
	        temp &= ~(iocurrent);
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	43db      	mvns	r3, r3
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	4013      	ands	r3, r2
 80093bc:	61bb      	str	r3, [r7, #24]
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <BSP_STM32_GPIO_Init+0x2a4>
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	61bb      	str	r3, [r7, #24]
	        EXTI->FTSR1 = temp;
 80093d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	6053      	str	r3, [r2, #4]

	        temp = EXTI_CurrentCPU->EMR1;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	61bb      	str	r3, [r7, #24]
	        temp &= ~(iocurrent);
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	43db      	mvns	r3, r3
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	4013      	ands	r3, r2
 80093e6:	61bb      	str	r3, [r7, #24]
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <BSP_STM32_GPIO_Init+0x2ce>
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	61bb      	str	r3, [r7, #24]
	        EXTI_CurrentCPU->EMR1 = temp;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	605a      	str	r2, [r3, #4]

	        // Clear EXTI line configuration
	        temp = EXTI_CurrentCPU->IMR1;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	61bb      	str	r3, [r7, #24]
	        temp &= ~(iocurrent);
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	43db      	mvns	r3, r3
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	4013      	ands	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <BSP_STM32_GPIO_Init+0x2f6>
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	4313      	orrs	r3, r2
 8009420:	61bb      	str	r3, [r7, #24]
	        EXTI_CurrentCPU->IMR1 = temp;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	601a      	str	r2, [r3, #0]
	      }
	    }

	    position++;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	3301      	adds	r3, #1
 800942c:	61fb      	str	r3, [r7, #28]
	while (((Pins) >> position) != 0x00U) {
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	fa22 f303 	lsr.w	r3, r2, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	f47f ae84 	bne.w	8009144 <BSP_STM32_GPIO_Init+0x18>
	  }

	return BSP_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3724      	adds	r7, #36	; 0x24
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	58000400 	.word	0x58000400

08009450 <BSP_STM32_GPIO_ReadPin>:


uint32_t BSP_STM32_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin) {
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	return ((GPIOx->IDR & GPIO_Pin) > 0)?GPIO_PIN_SET:GPIO_PIN_RESET;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	4013      	ands	r3, r2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <BSP_STM32_GPIO_ReadPin+0x1a>
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <BSP_STM32_GPIO_ReadPin+0x1c>
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <BSP_STM32_GPIO_WritePin>:

uint8_t BSP_STM32_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin, uint32_t PinState) {
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
	GPIOx->BSRR=((PinState==GPIO_PIN_SET)?GPIO_Pin:GPIO_Pin << GPIO_NUMBER);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d002      	beq.n	8009490 <BSP_STM32_GPIO_WritePin+0x18>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	041b      	lsls	r3, r3, #16
 800948e:	e000      	b.n	8009492 <BSP_STM32_GPIO_WritePin+0x1a>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	6193      	str	r3, [r2, #24]
	return BSP_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <BSP_STM32_HSEM_FastTake>:
	if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK)) return BSP_OK;
	return BSP_ERROR;
}


uint8_t BSP_STM32_HSEM_FastTake(uint32_t SemID) {
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	// Validate input parameters
	if (SemID > 31) return BSP_ERROR;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b1f      	cmp	r3, #31
 80094b0:	d901      	bls.n	80094b6 <BSP_STM32_HSEM_FastTake+0x12>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e00a      	b.n	80094cc <BSP_STM32_HSEM_FastTake+0x28>

	// Read the RLR register to take the semaphore
	if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK)) return BSP_OK;
 80094b6:	4a08      	ldr	r2, [pc, #32]	; (80094d8 <BSP_STM32_HSEM_FastTake+0x34>)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3320      	adds	r3, #32
 80094bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094c0:	4a06      	ldr	r2, [pc, #24]	; (80094dc <BSP_STM32_HSEM_FastTake+0x38>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d101      	bne.n	80094ca <BSP_STM32_HSEM_FastTake+0x26>
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <BSP_STM32_HSEM_FastTake+0x28>
	return BSP_ERROR;
 80094ca:	2301      	movs	r3, #1
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	58026400 	.word	0x58026400
 80094dc:	80000300 	.word	0x80000300

080094e0 <BSP_STM32_HSEM_FastRelease>:
	// Clear the semaphore by writing to the R register: the MasterID, the ProcessID and take bit = 0
	HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
	return BSP_OK;
}

uint8_t BSP_STM32_HSEM_FastRelease(uint32_t SemID) {
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
	// Validate input parameters
	if (SemID > 31) return BSP_ERROR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b1f      	cmp	r3, #31
 80094ec:	d901      	bls.n	80094f2 <BSP_STM32_HSEM_FastRelease+0x12>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e006      	b.n	8009500 <BSP_STM32_HSEM_FastRelease+0x20>

	// Clear the semaphore by writing to the R register: the MasterID, the ProcessID = 0 and take bit = 0
	HSEM->R[SemID] = (HSEM_CR_COREID_CURRENT);
 80094f2:	4a06      	ldr	r2, [pc, #24]	; (800950c <BSP_STM32_HSEM_FastRelease+0x2c>)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80094fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return BSP_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	58026400 	.word	0x58026400

08009510 <_I2C_MemReadIT>:

/*******************************************************************
* Private Functions
 *******************************************************************/

uint8_t _I2C_MemReadIT(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4611      	mov	r1, r2
 800951c:	461a      	mov	r2, r3
 800951e:	460b      	mov	r3, r1
 8009520:	80fb      	strh	r3, [r7, #6]
 8009522:	4613      	mov	r3, r2
 8009524:	717b      	strb	r3, [r7, #5]

	#define I2C_NO_OPTION_FRAME     (0xFFFF0000U)

	I2CContext_TypeDef * i2c_ctx = (I2CContext_TypeDef *)ctx->ctxmem;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	3328      	adds	r3, #40	; 0x28
 800952a:	617b      	str	r3, [r7, #20]

	i2c_ctx->pData = pData;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	6a3a      	ldr	r2, [r7, #32]
 8009530:	601a      	str	r2, [r3, #0]
	i2c_ctx->size = Size;
 8009532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	605a      	str	r2, [r3, #4]
	i2c_ctx->index = 0xFFFFFFFFU;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f04f 32ff 	mov.w	r2, #4294967295
 800953e:	609a      	str	r2, [r3, #8]
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	4a11      	ldr	r2, [pc, #68]	; (8009588 <_I2C_MemReadIT+0x78>)
 8009544:	60da      	str	r2, [r3, #12]
	i2c_ctx->devaddr = DevAddress;
 8009546:	88fa      	ldrh	r2, [r7, #6]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	611a      	str	r2, [r3, #16]

	// Assuming that memory address size is 8Bit (only use case in this project)
	hi2c->TXDR = MemAddress;
 800954c:	797a      	ldrb	r2, [r7, #5]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	629a      	str	r2, [r3, #40]	; 0x28

	// Declaration of tmp to prevent undefined behavior of volatile usage
	uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | ((1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE) & (~0x80000000U));
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009558:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
 800955c:	613b      	str	r3, [r7, #16]

	// Update CR2 register
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	4b0a      	ldr	r3, [pc, #40]	; (800958c <_I2C_MemReadIT+0x7c>)
 8009564:	4013      	ands	r3, r2
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	431a      	orrs	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	605a      	str	r2, [r3, #4]

	// Enable I2C Interrupts
	hi2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_TCIE | I2C_CR1_STOPIE | I2C_CR1_NACKIE | I2C_CR1_TXIE | I2C_CR1_RXIE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f043 02f6 	orr.w	r2, r3, #246	; 0xf6
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	ffff0000 	.word	0xffff0000
 800958c:	fc009800 	.word	0xfc009800

08009590 <_I2C_MemReadDMA>:


uint8_t _I2C_MemReadDMA(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	4611      	mov	r1, r2
 800959c:	461a      	mov	r2, r3
 800959e:	460b      	mov	r3, r1
 80095a0:	80fb      	strh	r3, [r7, #6]
 80095a2:	4613      	mov	r3, r2
 80095a4:	717b      	strb	r3, [r7, #5]

	#define I2C_NO_OPTION_FRAME     (0xFFFF0000U)

	I2CContext_TypeDef * i2c_ctx = (I2CContext_TypeDef *)ctx->ctxmem;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	3328      	adds	r3, #40	; 0x28
 80095aa:	617b      	str	r3, [r7, #20]

	i2c_ctx->pData = pData;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	6a3a      	ldr	r2, [r7, #32]
 80095b0:	601a      	str	r2, [r3, #0]
	i2c_ctx->size = Size;
 80095b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	605a      	str	r2, [r3, #4]
	i2c_ctx->index = 0xFFFFFFFFU;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f04f 32ff 	mov.w	r2, #4294967295
 80095be:	609a      	str	r2, [r3, #8]
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	4a1d      	ldr	r2, [pc, #116]	; (8009638 <_I2C_MemReadDMA+0xa8>)
 80095c4:	60da      	str	r2, [r3, #12]
	i2c_ctx->devaddr = DevAddress;
 80095c6:	88fa      	ldrh	r2, [r7, #6]
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	611a      	str	r2, [r3, #16]

	// Assuming that memory address size is 8Bit (only use case in this project)
	hi2c->TXDR = MemAddress;
 80095cc:	797a      	ldrb	r2, [r7, #5]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	629a      	str	r2, [r3, #40]	; 0x28

	// Enable the DMA stream or channel depends on Instance
	switch (ctx->dma_mode) {
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d002      	beq.n	80095e0 <_I2C_MemReadDMA+0x50>
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d009      	beq.n	80095f2 <_I2C_MemReadDMA+0x62>
 80095de:	e011      	b.n	8009604 <_I2C_MemReadDMA+0x74>
	case TXRX_CTX_MODE_DMA:
		BSP_STM32_DMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3324      	adds	r3, #36	; 0x24
 80095e4:	4619      	mov	r1, r3
 80095e6:	6a3a      	ldr	r2, [r7, #32]
 80095e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095ea:	68b8      	ldr	r0, [r7, #8]
 80095ec:	f7ff f8f6 	bl	80087dc <BSP_STM32_DMA_StartIT>
		break;
 80095f0:	e008      	b.n	8009604 <_I2C_MemReadDMA+0x74>
	case TXRX_CTX_MODE_BDMA:
		BSP_BDMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3324      	adds	r3, #36	; 0x24
 80095f6:	4619      	mov	r1, r3
 80095f8:	6a3a      	ldr	r2, [r7, #32]
 80095fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095fc:	68b8      	ldr	r0, [r7, #8]
 80095fe:	f7fe fd83 	bl	8008108 <BSP_BDMA_StartIT>
		break;
 8009602:	bf00      	nop
	}


	// Declaration of tmp to prevent undefined behavior of volatile usage
	uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | ((1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE) & (~0x80000000U));
 8009604:	88fb      	ldrh	r3, [r7, #6]
 8009606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800960a:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
 800960e:	613b      	str	r3, [r7, #16]

	// Update CR2 register
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	4b09      	ldr	r3, [pc, #36]	; (800963c <_I2C_MemReadDMA+0xac>)
 8009616:	4013      	ands	r3, r2
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	431a      	orrs	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	605a      	str	r2, [r3, #4]

	// Enable I2C Interrupts
	hi2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_TCIE | I2C_CR1_STOPIE | I2C_CR1_NACKIE | I2C_CR1_TXIE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f043 02f2 	orr.w	r2, r3, #242	; 0xf2
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	ffff0000 	.word	0xffff0000
 800963c:	fc009800 	.word	0xfc009800

08009640 <_I2C_IRQHandler_IT>:


uint8_t _I2C_IRQHandler_IT(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
 8009640:	b480      	push	{r7}
 8009642:	b089      	sub	sp, #36	; 0x24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]

	I2CContext_TypeDef * i2c_ctx = (I2CContext_TypeDef *)ctx->ctxmem;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	3328      	adds	r3, #40	; 0x28
 800964e:	61fb      	str	r3, [r7, #28]

	// Get current IT Flags and IT sources value
	uint32_t itflags   = hi2c->ISR;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	61bb      	str	r3, [r7, #24]
	uint32_t itsources = hi2c->CR1;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	617b      	str	r3, [r7, #20]

	uint32_t direction = (uint32_t)(0x80000000U | I2C_CR2_START); //Generate start write
 800965c:	4b40      	ldr	r3, [pc, #256]	; (8009760 <_I2C_IRQHandler_IT+0x120>)
 800965e:	613b      	str	r3, [r7, #16]

	// Handling errors
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f003 0310 	and.w	r3, r3, #16
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01e      	beq.n	80096a8 <_I2C_IRQHandler_IT+0x68>
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f003 0310 	and.w	r3, r3, #16
 8009670:	2b00      	cmp	r3, #0
 8009672:	d019      	beq.n	80096a8 <_I2C_IRQHandler_IT+0x68>
	    // Clear NACK Flag
	    hi2c->ICR = I2C_ICR_NACKCF;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2210      	movs	r2, #16
 8009678:	61da      	str	r2, [r3, #28]

	    // Flush TX register
	    // If a pending TXIS flag is set
	    // Write a dummy data in TXDR to clear it
	    if ((hi2c->ISR & I2C_ISR_TXIS) > 0) hi2c->TXDR = 0x00U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <_I2C_IRQHandler_IT+0x4c>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	629a      	str	r2, [r3, #40]	; 0x28

	    // Flush TX register if not empty
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d105      	bne.n	80096a4 <_I2C_IRQHandler_IT+0x64>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	f043 0201 	orr.w	r2, r3, #1
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	619a      	str	r2, [r3, #24]

	    return BSP_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e054      	b.n	8009752 <_I2C_IRQHandler_IT+0x112>
	}

	// Initiate reading from memory
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d025      	beq.n	80096fe <_I2C_IRQHandler_IT+0xbe>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d020      	beq.n	80096fe <_I2C_IRQHandler_IT+0xbe>

		direction = (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN);
 80096bc:	4b29      	ldr	r3, [pc, #164]	; (8009764 <_I2C_IRQHandler_IT+0x124>)
 80096be:	613b      	str	r3, [r7, #16]

		// Set NBYTES to write and generate RESTART
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	041b      	lsls	r3, r3, #16
 80096ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096d2:	431a      	orrs	r2, r3
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80096dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80096e0:	60fb      	str	r3, [r7, #12]
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	0d5b      	lsrs	r3, r3, #21
 80096ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80096ee:	4b1e      	ldr	r3, [pc, #120]	; (8009768 <_I2C_IRQHandler_IT+0x128>)
 80096f0:	430b      	orrs	r3, r1
 80096f2:	43db      	mvns	r3, r3
 80096f4:	401a      	ands	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	605a      	str	r2, [r3, #4]
	}

	// Read one byte from memory
	if (((itflags & I2C_ISR_RXNE) > 0) && ((itsources & I2C_CR1_RXIE) > 0)) {
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d014      	beq.n	8009732 <_I2C_IRQHandler_IT+0xf2>
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00f      	beq.n	8009732 <_I2C_IRQHandler_IT+0xf2>

		// Clear the flag
	    // Read data from RXDR
	    *i2c_ctx->pData = (uint8_t)hi2c->RXDR;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	701a      	strb	r2, [r3, #0]

	    // Increment Buffer pointer
	    i2c_ctx->pData++;
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	601a      	str	r2, [r3, #0]
	    i2c_ctx->size--;
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	1e5a      	subs	r2, r3, #1
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	605a      	str	r2, [r3, #4]
	}

	// Completion of reading
	if (((itflags & I2C_ISR_STOPF) > 0) && ((itsources & I2C_CR1_STOPIE) > 0)) {
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b00      	cmp	r3, #0
 800973a:	d009      	beq.n	8009750 <_I2C_IRQHandler_IT+0x110>
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <_I2C_IRQHandler_IT+0x110>

		// Clear the flag
		hi2c->ICR = I2C_ICR_STOPCF;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	61da      	str	r2, [r3, #28]

		return BSP_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	e000      	b.n	8009752 <_I2C_IRQHandler_IT+0x112>
	}

	return BSP_BUSY;
 8009750:	2302      	movs	r3, #2
}
 8009752:	4618      	mov	r0, r3
 8009754:	3724      	adds	r7, #36	; 0x24
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	80002000 	.word	0x80002000
 8009764:	80002400 	.word	0x80002400
 8009768:	03ff63ff 	.word	0x03ff63ff

0800976c <_I2C_IRQHandler_DMA>:


uint8_t _I2C_IRQHandler_DMA(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
 800976c:	b480      	push	{r7}
 800976e:	b089      	sub	sp, #36	; 0x24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]

	I2CContext_TypeDef * i2c_ctx = (I2CContext_TypeDef *)ctx->ctxmem;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	3328      	adds	r3, #40	; 0x28
 800977a:	61fb      	str	r3, [r7, #28]

	// Get current IT Flags and IT sources value
	uint32_t itflags   = hi2c->ISR;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	61bb      	str	r3, [r7, #24]
	uint32_t itsources = hi2c->CR1;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	617b      	str	r3, [r7, #20]

	uint32_t direction = (uint32_t)(0x80000000U | I2C_CR2_START); //Generate start write
 8009788:	4b36      	ldr	r3, [pc, #216]	; (8009864 <_I2C_IRQHandler_DMA+0xf8>)
 800978a:	613b      	str	r3, [r7, #16]

	// Handling errors
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f003 0310 	and.w	r3, r3, #16
 8009792:	2b00      	cmp	r3, #0
 8009794:	d01e      	beq.n	80097d4 <_I2C_IRQHandler_DMA+0x68>
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f003 0310 	and.w	r3, r3, #16
 800979c:	2b00      	cmp	r3, #0
 800979e:	d019      	beq.n	80097d4 <_I2C_IRQHandler_DMA+0x68>
	    // Clear NACK Flag
	    hi2c->ICR = I2C_ICR_NACKCF;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2210      	movs	r2, #16
 80097a4:	61da      	str	r2, [r3, #28]

	    // Flush TX register
	    // If a pending TXIS flag is set
	    // Write a dummy data in TXDR to clear it
	    if ((hi2c->ISR & I2C_ISR_TXIS) > 0) hi2c->TXDR = 0x00U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <_I2C_IRQHandler_DMA+0x4c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	629a      	str	r2, [r3, #40]	; 0x28

	    // Flush TX register if not empty
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d105      	bne.n	80097d0 <_I2C_IRQHandler_DMA+0x64>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	f043 0201 	orr.w	r2, r3, #1
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	619a      	str	r2, [r3, #24]

	    return BSP_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e040      	b.n	8009856 <_I2C_IRQHandler_DMA+0xea>
	}

	// Initiate reading from memory
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d02b      	beq.n	8009836 <_I2C_IRQHandler_DMA+0xca>
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d026      	beq.n	8009836 <_I2C_IRQHandler_DMA+0xca>

		direction = I2C_GENERATE_START_READ;
 80097e8:	4b1f      	ldr	r3, [pc, #124]	; (8009868 <_I2C_IRQHandler_DMA+0xfc>)
 80097ea:	613b      	str	r3, [r7, #16]

		uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	041b      	lsls	r3, r3, #16
 80097fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097fe:	431a      	orrs	r2, r3
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	4313      	orrs	r3, r2
 8009804:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8009808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800980c:	60fb      	str	r3, [r7, #12]
		MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	0d5b      	lsrs	r3, r3, #21
 8009816:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800981a:	4b14      	ldr	r3, [pc, #80]	; (800986c <_I2C_IRQHandler_DMA+0x100>)
 800981c:	430b      	orrs	r3, r1
 800981e:	43db      	mvns	r3, r3
 8009820:	401a      	ands	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	605a      	str	r2, [r3, #4]

		/* Enable DMA Request */
		hi2c->CR1 |= I2C_CR1_RXDMAEN;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	601a      	str	r2, [r3, #0]
	}


	// Completion of reading
	if (((itflags & I2C_ISR_STOPF) > 0) && ((itsources & I2C_CR1_STOPIE) > 0)) {
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d009      	beq.n	8009854 <_I2C_IRQHandler_DMA+0xe8>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b00      	cmp	r3, #0
 8009848:	d004      	beq.n	8009854 <_I2C_IRQHandler_DMA+0xe8>

		// Clear the flag
		hi2c->ICR = I2C_ICR_STOPCF;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	61da      	str	r2, [r3, #28]

		return BSP_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	e000      	b.n	8009856 <_I2C_IRQHandler_DMA+0xea>
	}

	return BSP_BUSY;
 8009854:	2302      	movs	r3, #2
}
 8009856:	4618      	mov	r0, r3
 8009858:	3724      	adds	r7, #36	; 0x24
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	80002000 	.word	0x80002000
 8009868:	80002400 	.word	0x80002400
 800986c:	03ff63ff 	.word	0x03ff63ff

08009870 <BSP_STM32_I2C_Init>:

/*******************************************************************
* I2C Functions
 *******************************************************************/

uint8_t BSP_STM32_I2C_Init(I2C_TypeDef *hi2c) {
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	#define TIMING_CLEAR_MASK   (0xF0FFFFFFU)

	// Disable I2C periph
	CLEAR_BIT(hi2c->CR1, I2C_CR1_PE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f023 0201 	bic.w	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]

	// Configure I2Cx: Frequency range
	hi2c->TIMINGR = 0x009034B6 & TIMING_CLEAR_MASK; // 400kHz - High Speed I2C
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a17      	ldr	r2, [pc, #92]	; (80098e4 <BSP_STM32_I2C_Init+0x74>)
 8009888:	611a      	str	r2, [r3, #16]

	// Disable Own Address1
	hi2c->OAR1 &= ~I2C_OAR1_OA1EN;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	609a      	str	r2, [r3, #8]

	// Disable Own Address2
	hi2c->OAR2 &= ~I2C_OAR2_OA2EN;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	60da      	str	r2, [r3, #12]

	// Enable the AUTOEND and NACK
	hi2c->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <BSP_STM32_I2C_Init+0x78>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	6053      	str	r3, [r2, #4]

	// Configure I2C Generalcall and NoStretch mode
	hi2c->CR1 = (I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]

	// Configure analog filter
	hi2c->CR1 &= ~(I2C_CR1_ANFOFF);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	601a      	str	r2, [r3, #0]
	hi2c->CR1 |= I2C_ANALOGFILTER_ENABLE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	601a      	str	r2, [r3, #0]

	// Enable I2C periph
	SET_BIT(hi2c->CR1, I2C_CR1_PE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f043 0201 	orr.w	r2, r3, #1
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	009034b6 	.word	0x009034b6
 80098e8:	02008000 	.word	0x02008000

080098ec <BSP_STM32_I2C_IsDeviceReady>:


uint8_t BSP_STM32_I2C_IsDeviceReady(I2C_TypeDef *hi2c, uint32_t device_address, uint32_t maxtrials, uint32_t timeout) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]

	uint32_t tickstart;

	__IO uint32_t trials = 0UL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]

	uint8_t tmp1;
	uint8_t tmp2;

	// No need to Check TC flag, with AUTOEND mode the stop is automatically generated. Wait until STOPF flag is set or a NACK flag is set.
	tickstart = BSP_GetTick();
 80098fe:	f7fc fd4d 	bl	800639c <BSP_GetTick>
 8009902:	61b8      	str	r0, [r7, #24]

    while (trials < maxtrials) {
 8009904:	e064      	b.n	80099d0 <BSP_STM32_I2C_IsDeviceReady+0xe4>
		// Generate Start
		hi2c->CR2 = ((((uint32_t)(device_address) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN));
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800990c:	4b42      	ldr	r3, [pc, #264]	; (8009a18 <BSP_STM32_I2C_IsDeviceReady+0x12c>)
 800990e:	4313      	orrs	r3, r2
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	6053      	str	r3, [r2, #4]

		tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	77fb      	strb	r3, [r7, #31]
		tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f003 0310 	and.w	r3, r3, #16
 800992a:	77bb      	strb	r3, [r7, #30]

		while ((tmp1 == 0) && (tmp2 == 0)) {
 800992c:	e015      	b.n	800995a <BSP_STM32_I2C_IsDeviceReady+0x6e>

			if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 800992e:	f7fc fd35 	bl	800639c <BSP_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d201      	bcs.n	8009942 <BSP_STM32_I2C_IsDeviceReady+0x56>
 800993e:	2301      	movs	r3, #1
 8009940:	e065      	b.n	8009a0e <BSP_STM32_I2C_IsDeviceReady+0x122>
			tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	77fb      	strb	r3, [r7, #31]
			tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	77bb      	strb	r3, [r7, #30]
		while ((tmp1 == 0) && (tmp2 == 0)) {
 800995a:	7ffb      	ldrb	r3, [r7, #31]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d102      	bne.n	8009966 <BSP_STM32_I2C_IsDeviceReady+0x7a>
 8009960:	7fbb      	ldrb	r3, [r7, #30]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0e3      	beq.n	800992e <BSP_STM32_I2C_IsDeviceReady+0x42>
		}

	    // Check if the NACKF flag has not been set
	    if ((hi2c->ISR & I2C_ISR_NACKF) == 0) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	f003 0310 	and.w	r3, r3, #16
 800996e:	2b00      	cmp	r3, #0
 8009970:	d11f      	bne.n	80099b2 <BSP_STM32_I2C_IsDeviceReady+0xc6>

	    	// Wait until STOPF flag is reset
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8009972:	e009      	b.n	8009988 <BSP_STM32_I2C_IsDeviceReady+0x9c>
 8009974:	f7fc fd12 	bl	800639c <BSP_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d201      	bcs.n	8009988 <BSP_STM32_I2C_IsDeviceReady+0x9c>
 8009984:	2301      	movs	r3, #1
 8009986:	e042      	b.n	8009a0e <BSP_STM32_I2C_IsDeviceReady+0x122>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	f003 0320 	and.w	r3, r3, #32
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0ef      	beq.n	8009974 <BSP_STM32_I2C_IsDeviceReady+0x88>

	        // Clear STOP Flag
	        hi2c->ICR = I2C_ICR_STOPCF;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2220      	movs	r2, #32
 8009998:	61da      	str	r2, [r3, #28]

	        return BSP_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	e037      	b.n	8009a0e <BSP_STM32_I2C_IsDeviceReady+0x122>

	    } else {

	    	// Wait until STOPF flag is reset
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 800999e:	f7fc fcfd 	bl	800639c <BSP_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d201      	bcs.n	80099b2 <BSP_STM32_I2C_IsDeviceReady+0xc6>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e02d      	b.n	8009a0e <BSP_STM32_I2C_IsDeviceReady+0x122>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	f003 0320 	and.w	r3, r3, #32
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0ef      	beq.n	800999e <BSP_STM32_I2C_IsDeviceReady+0xb2>

	        // Clear NACK Flag
	    	hi2c->ICR = I2C_ICR_NACKCF;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2210      	movs	r2, #16
 80099c2:	61da      	str	r2, [r3, #28]

	        // Clear STOP Flag, auto generated with autoend
	    	hi2c->ICR = I2C_ICR_STOPCF;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2220      	movs	r2, #32
 80099c8:	61da      	str	r2, [r3, #28]
	    }

	    // Increment Trials
	    trials++;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	3301      	adds	r3, #1
 80099ce:	617b      	str	r3, [r7, #20]
    while (trials < maxtrials) {
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d896      	bhi.n	8009906 <BSP_STM32_I2C_IsDeviceReady+0x1a>
    }

    // Generate Stop
    hi2c->CR2 |= I2C_CR2_STOP;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	605a      	str	r2, [r3, #4]

    // Wait until STOPF flag is reset
    while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 80099e4:	e009      	b.n	80099fa <BSP_STM32_I2C_IsDeviceReady+0x10e>
 80099e6:	f7fc fcd9 	bl	800639c <BSP_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d201      	bcs.n	80099fa <BSP_STM32_I2C_IsDeviceReady+0x10e>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e009      	b.n	8009a0e <BSP_STM32_I2C_IsDeviceReady+0x122>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	f003 0320 	and.w	r3, r3, #32
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0ef      	beq.n	80099e6 <BSP_STM32_I2C_IsDeviceReady+0xfa>

    // Clear STOP Flag
    hi2c->ICR = I2C_ICR_STOPCF;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	61da      	str	r2, [r3, #28]

    return BSP_ERROR;
 8009a0c:	2301      	movs	r3, #1
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3720      	adds	r7, #32
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	02002000 	.word	0x02002000

08009a1c <BSP_STM32_I2C_RegWrite>:


uint8_t BSP_STM32_I2C_RegWrite(I2C_TypeDef *hi2c, uint16_t DevAddress, uint8_t RegAddress, uint8_t RegValue, uint32_t Timeout) {
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	461a      	mov	r2, r3
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	807b      	strh	r3, [r7, #2]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	707b      	strb	r3, [r7, #1]
 8009a32:	4613      	mov	r3, r2
 8009a34:	703b      	strb	r3, [r7, #0]

	uint32_t tickstart = BSP_GetTick();
 8009a36:	f7fc fcb1 	bl	800639c <BSP_GetTick>
 8009a3a:	60f8      	str	r0, [r7, #12]
	uint32_t tmp;

	// Wait for BUSY flag to reset
	while ((hi2c->ISR & I2C_ISR_BUSY) > 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8009a3c:	e009      	b.n	8009a52 <BSP_STM32_I2C_RegWrite+0x36>
 8009a3e:	f7fc fcad 	bl	800639c <BSP_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d201      	bcs.n	8009a52 <BSP_STM32_I2C_RegWrite+0x36>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e056      	b.n	8009b00 <BSP_STM32_I2C_RegWrite+0xe4>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1ef      	bne.n	8009a3e <BSP_STM32_I2C_RegWrite+0x22>

	// Config transfer
	tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)2 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)I2C_GENERATE_START_WRITE) & (~0x80000000U));
 8009a5e:	887b      	ldrh	r3, [r7, #2]
 8009a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009a64:	4b28      	ldr	r3, [pc, #160]	; (8009b08 <BSP_STM32_I2C_RegWrite+0xec>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60bb      	str	r3, [r7, #8]
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <BSP_STM32_I2C_RegWrite+0xf0>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	431a      	orrs	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	605a      	str	r2, [r3, #4]

	while ((hi2c->ISR & I2C_ISR_TXIS) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8009a7a:	e009      	b.n	8009a90 <BSP_STM32_I2C_RegWrite+0x74>
 8009a7c:	f7fc fc8e 	bl	800639c <BSP_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d201      	bcs.n	8009a90 <BSP_STM32_I2C_RegWrite+0x74>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e037      	b.n	8009b00 <BSP_STM32_I2C_RegWrite+0xe4>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0ef      	beq.n	8009a7c <BSP_STM32_I2C_RegWrite+0x60>

	hi2c->TXDR = RegAddress;
 8009a9c:	787a      	ldrb	r2, [r7, #1]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	629a      	str	r2, [r3, #40]	; 0x28

	while ((hi2c->ISR & I2C_ISR_TXIS) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8009aa2:	e009      	b.n	8009ab8 <BSP_STM32_I2C_RegWrite+0x9c>
 8009aa4:	f7fc fc7a 	bl	800639c <BSP_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d201      	bcs.n	8009ab8 <BSP_STM32_I2C_RegWrite+0x9c>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e023      	b.n	8009b00 <BSP_STM32_I2C_RegWrite+0xe4>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	f003 0302 	and.w	r3, r3, #2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0ef      	beq.n	8009aa4 <BSP_STM32_I2C_RegWrite+0x88>

	hi2c->TXDR = RegValue;
 8009ac4:	783a      	ldrb	r2, [r7, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	629a      	str	r2, [r3, #40]	; 0x28

	//while ((hi2c->ISR & I2C_FLAG_TCR) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;

	// Wait for Stop flag
	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8009aca:	e009      	b.n	8009ae0 <BSP_STM32_I2C_RegWrite+0xc4>
 8009acc:	f7fc fc66 	bl	800639c <BSP_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d201      	bcs.n	8009ae0 <BSP_STM32_I2C_RegWrite+0xc4>
 8009adc:	2301      	movs	r3, #1
 8009ade:	e00f      	b.n	8009b00 <BSP_STM32_I2C_RegWrite+0xe4>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	f003 0320 	and.w	r3, r3, #32
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0ef      	beq.n	8009acc <BSP_STM32_I2C_RegWrite+0xb0>

	// Clear Stop Flag
	hi2c->ICR = I2C_ICR_STOPCF;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2220      	movs	r2, #32
 8009af0:	61da      	str	r2, [r3, #28]

	hi2c->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD  | I2C_CR2_RD_WRN));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <BSP_STM32_I2C_RegWrite+0xf4>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	6053      	str	r3, [r2, #4]


	return BSP_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	02022000 	.word	0x02022000
 8009b0c:	fc009800 	.word	0xfc009800
 8009b10:	fe00e800 	.word	0xfe00e800

08009b14 <BSP_STM32_I2C_MemRead>:


uint8_t BSP_STM32_I2C_MemRead(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af02      	add	r7, sp, #8
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4611      	mov	r1, r2
 8009b20:	461a      	mov	r2, r3
 8009b22:	460b      	mov	r3, r1
 8009b24:	80fb      	strh	r3, [r7, #6]
 8009b26:	4613      	mov	r3, r2
 8009b28:	717b      	strb	r3, [r7, #5]
	switch (ctx->dma_mode) {
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <BSP_STM32_I2C_MemRead+0x26>
 8009b32:	3b01      	subs	r3, #1
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d81a      	bhi.n	8009b6e <BSP_STM32_I2C_MemRead+0x5a>
 8009b38:	e00c      	b.n	8009b54 <BSP_STM32_I2C_MemRead+0x40>
	case TXRX_CTX_MODE_IT:
		return _I2C_MemReadIT(hi2c, ctx, DevAddress, MemAddress, pData, Size);
 8009b3a:	7979      	ldrb	r1, [r7, #5]
 8009b3c:	88fa      	ldrh	r2, [r7, #6]
 8009b3e:	8bbb      	ldrh	r3, [r7, #28]
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	460b      	mov	r3, r1
 8009b48:	68b9      	ldr	r1, [r7, #8]
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7ff fce0 	bl	8009510 <_I2C_MemReadIT>
 8009b50:	4603      	mov	r3, r0
 8009b52:	e018      	b.n	8009b86 <BSP_STM32_I2C_MemRead+0x72>
	case TXRX_CTX_MODE_DMA:
	case TXRX_CTX_MODE_BDMA:
		return _I2C_MemReadDMA(hi2c, ctx, DevAddress, MemAddress, pData, Size);
 8009b54:	7979      	ldrb	r1, [r7, #5]
 8009b56:	88fa      	ldrh	r2, [r7, #6]
 8009b58:	8bbb      	ldrh	r3, [r7, #28]
 8009b5a:	9301      	str	r3, [sp, #4]
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	460b      	mov	r3, r1
 8009b62:	68b9      	ldr	r1, [r7, #8]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fd13 	bl	8009590 <_I2C_MemReadDMA>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	e00b      	b.n	8009b86 <BSP_STM32_I2C_MemRead+0x72>
	}
	return _I2C_MemReadIT(hi2c, ctx, DevAddress, MemAddress, pData, Size);
 8009b6e:	7979      	ldrb	r1, [r7, #5]
 8009b70:	88fa      	ldrh	r2, [r7, #6]
 8009b72:	8bbb      	ldrh	r3, [r7, #28]
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	68b9      	ldr	r1, [r7, #8]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7ff fcc6 	bl	8009510 <_I2C_MemReadIT>
 8009b84:	4603      	mov	r3, r0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <BSP_STM32_I2C_IRQHandler>:


uint8_t BSP_STM32_I2C_IRQHandler(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	6039      	str	r1, [r7, #0]
	switch (ctx->dma_mode) {
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <BSP_STM32_I2C_IRQHandler+0x1a>
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d80c      	bhi.n	8009bc0 <BSP_STM32_I2C_IRQHandler+0x32>
 8009ba6:	e005      	b.n	8009bb4 <BSP_STM32_I2C_IRQHandler+0x26>
	case TXRX_CTX_MODE_IT:
		return _I2C_IRQHandler_IT(hi2c, ctx);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff fd48 	bl	8009640 <_I2C_IRQHandler_IT>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	e00a      	b.n	8009bca <BSP_STM32_I2C_IRQHandler+0x3c>
	case TXRX_CTX_MODE_DMA:
	case TXRX_CTX_MODE_BDMA:
		return _I2C_IRQHandler_DMA(hi2c, ctx);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fdd8 	bl	800976c <_I2C_IRQHandler_DMA>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	e004      	b.n	8009bca <BSP_STM32_I2C_IRQHandler+0x3c>
	}
	return _I2C_IRQHandler_IT(hi2c, ctx);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fd3c 	bl	8009640 <_I2C_IRQHandler_IT>
 8009bc8:	4603      	mov	r3, r0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <BSP_STM32_I2S_IRQHandler>:
	return BSP_OK;
}



uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b08a      	sub	sp, #40	; 0x28
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]

	I2SContext_TypeDef * i2s_ctx = (I2SContext_TypeDef *)ctx->ctxmem;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	3328      	adds	r3, #40	; 0x28
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t	reg_ier = hi2s->IER;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	623b      	str	r3, [r7, #32]
	uint32_t	reg_sr = hi2s->SR;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	61fb      	str	r3, [r7, #28]
	uint32_t	trigger = reg_ier & reg_sr;
 8009bee:	6a3a      	ldr	r2, [r7, #32]
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	61bb      	str	r3, [r7, #24]
	// Callback management
	void (* pCallback_TE)(TxRxContext_TypeDef * ctx);
	void (* pCallback_HT)(TxRxContext_TypeDef * ctx);
	void (* pCallback_TC)(TxRxContext_TypeDef * ctx);

	pCallback_TE = (void *)ctx->callback_TE;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	617b      	str	r3, [r7, #20]
	pCallback_HT = (void *)ctx->callback_HT;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	613b      	str	r3, [r7, #16]
	pCallback_TC = (void *)ctx->callback_TC;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	60fb      	str	r3, [r7, #12]

	__IO int16_t *ptxdr = (__IO int16_t *)(&(hi2s->TXDR));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3320      	adds	r3, #32
 8009c0c:	60bb      	str	r3, [r7, #8]

	// TX Mode
	if (((trigger & I2S_FLAG_TXP) == I2S_FLAG_TXP) && ((trigger & I2S_FLAG_UDR)== 0)) {
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d038      	beq.n	8009c8a <BSP_STM32_I2S_IRQHandler+0xb8>
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d133      	bne.n	8009c8a <BSP_STM32_I2S_IRQHandler+0xb8>
		// Writing 16 bits to TX data register
		*ptxdr = *i2s_ctx->pData;
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	801a      	strh	r2, [r3, #0]
		// Increasing index by 2 bytes (16 bits)
		i2s_ctx->index+=2;
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	1c9a      	adds	r2, r3, #2
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	609a      	str	r2, [r3, #8]
		i2s_ctx->pData++;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	1c9a      	adds	r2, r3, #2
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	601a      	str	r2, [r3, #0]

		// Half buffer transmited??
		if (i2s_ctx->index == (i2s_ctx->size >> 1)) {
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	689a      	ldr	r2, [r3, #8]
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	085b      	lsrs	r3, r3, #1
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d106      	bne.n	8009c5e <BSP_STM32_I2S_IRQHandler+0x8c>
			 // Execute half transfer callback if set
			 if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <BSP_STM32_I2S_IRQHandler+0x8c>
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	6838      	ldr	r0, [r7, #0]
 8009c5c:	4798      	blx	r3
		}

		// Transmission completed??
		if (i2s_ctx->index >= i2s_ctx->size) {
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d30f      	bcc.n	8009c8a <BSP_STM32_I2S_IRQHandler+0xb8>
			// Disable TXP and ERR interrupt
			hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	611a      	str	r2, [r3, #16]
			// Update status
			i2s_ctx->status = I2S_STATUS_READY;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	2200      	movs	r2, #0
 8009c7a:	731a      	strb	r2, [r3, #12]
			// Execute transfer completed callback if set
			if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <BSP_STM32_I2S_IRQHandler+0xb8>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6838      	ldr	r0, [r7, #0]
 8009c88:	4798      	blx	r3
		}
	}

	// Underrun error
	if ((trigger & I2S_FLAG_UDR) == I2S_FLAG_UDR) {
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	f003 0320 	and.w	r3, r3, #32
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d017      	beq.n	8009cc4 <BSP_STM32_I2S_IRQHandler+0xf2>
		// Disable TXP and ERR interrupts
		hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	611a      	str	r2, [r3, #16]
		// Clear underrun flag
		hi2s->IFCR |= I2S_FLAG_UDR;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	f043 0220 	orr.w	r2, r3, #32
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	619a      	str	r2, [r3, #24]
		// Update status
		i2s_ctx->status = I2S_STATUS_READY;
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	2200      	movs	r2, #0
 8009cb0:	731a      	strb	r2, [r3, #12]
		// Execute error callback if set
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <BSP_STM32_I2S_IRQHandler+0xee>
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	6838      	ldr	r0, [r7, #0]
 8009cbe:	4798      	blx	r3
		return BSP_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e000      	b.n	8009cc6 <BSP_STM32_I2S_IRQHandler+0xf4>
	}

	return BSP_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3728      	adds	r7, #40	; 0x28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <_JPEG_DecInit>:

#include "BSP_STM32_JPEG.h"

static JPEGContext_TypeDef JPEGctx = {0};

static uint8_t _JPEG_DecInit(JPEG_TypeDef * _hjpeg, uint32_t JPEG_Addr, uint32_t JPEG_Size, uint32_t OutputBuf_Addr, uint32_t OutputBuf_Size) {
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]

	// Setup context
	JPEGctx.CSSType = 0;
 8009cde:	4b27      	ldr	r3, [pc, #156]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	615a      	str	r2, [r3, #20]
	JPEGctx.ColorSpace = 0;
 8009ce4:	4b25      	ldr	r3, [pc, #148]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	619a      	str	r2, [r3, #24]
	JPEGctx.ImageHeight = 0;
 8009cea:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	621a      	str	r2, [r3, #32]
	JPEGctx.ImageWidth = 0;
 8009cf0:	4b22      	ldr	r3, [pc, #136]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	61da      	str	r2, [r3, #28]
	JPEGctx.JPEGAddr = JPEG_Addr;
 8009cf6:	4a21      	ldr	r2, [pc, #132]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6013      	str	r3, [r2, #0]
	JPEGctx.JPEGSize = JPEG_Size;
 8009cfc:	4a1f      	ldr	r2, [pc, #124]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6053      	str	r3, [r2, #4]
	JPEGctx.JPEGEnd = JPEG_Addr + JPEG_Size;
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4413      	add	r3, r2
 8009d08:	4a1c      	ldr	r2, [pc, #112]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009d0a:	6093      	str	r3, [r2, #8]
	JPEGctx.OutputBufAddr = OutputBuf_Addr;
 8009d0c:	4a1b      	ldr	r2, [pc, #108]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	60d3      	str	r3, [r2, #12]
	JPEGctx.OutputBufSize = OutputBuf_Size;
 8009d12:	4a1a      	ldr	r2, [pc, #104]	; (8009d7c <_JPEG_DecInit+0xac>)
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	6113      	str	r3, [r2, #16]

	// Set codec mode to decoding
	_hjpeg->CONFR1 |= JPEG_CONFR1_DE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f043 0208 	orr.w	r2, r3, #8
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	605a      	str	r2, [r3, #4]

	// Stop any decoding process
	_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f023 0201 	bic.w	r2, r3, #1
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	601a      	str	r2, [r3, #0]

	// Disable all interrupts
	MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d34:	f023 027e 	bic.w	r2, r3, #126	; 0x7e
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	631a      	str	r2, [r3, #48]	; 0x30

	// Flush input and output FIFOs
	_hjpeg->CR |= JPEG_CR_IFF;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_OFF;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	631a      	str	r2, [r3, #48]	; 0x30

	// Clear all flags
	_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d58:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	639a      	str	r2, [r3, #56]	; 0x38

	// Start decoding
	_hjpeg->CONFR0 |=  JPEG_CONFR0_START;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f043 0201 	orr.w	r2, r3, #1
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	240004ac 	.word	0x240004ac

08009d80 <_JPEG_DecProcess>:
//
//	JPEGctx.OutputBufAddr += (data_size << 2);
//}


static uint8_t _JPEG_DecProcess(JPEG_TypeDef * _hjpeg) {
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
	uint32_t yblockNb;
	uint32_t cBblockNb;
	uint32_t cRblockNb;

	// Header parsing completed
	if ((_hjpeg->SR) & JPEG_FLAG_HPDF) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 8098 	beq.w	8009ec6 <_JPEG_DecProcess+0x146>

		// Updating JPEG context
		switch ((_hjpeg->CONFR1 & JPEG_CONFR1_NF)) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f003 0303 	and.w	r3, r3, #3
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d03e      	beq.n	8009e20 <_JPEG_DecProcess+0xa0>
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d86d      	bhi.n	8009e82 <_JPEG_DecProcess+0x102>
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <_JPEG_DecProcess+0x30>
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d007      	beq.n	8009dbe <_JPEG_DecProcess+0x3e>
 8009dae:	e068      	b.n	8009e82 <_JPEG_DecProcess+0x102>
		case 0:
			JPEGctx.ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8009db0:	4b64      	ldr	r3, [pc, #400]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	619a      	str	r2, [r3, #24]
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 8009db6:	4b63      	ldr	r3, [pc, #396]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	615a      	str	r2, [r3, #20]
			break;
 8009dbc:	e066      	b.n	8009e8c <_JPEG_DecProcess+0x10c>
		case JPEG_CONFR1_NF_1:
			JPEGctx.ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009dbe:	4b61      	ldr	r3, [pc, #388]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	619a      	str	r2, [r3, #24]
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	091b      	lsrs	r3, r3, #4
 8009dca:	f003 030f 	and.w	r3, r3, #15
 8009dce:	617b      	str	r3, [r7, #20]
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	091b      	lsrs	r3, r3, #4
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	613b      	str	r3, [r7, #16]
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	091b      	lsrs	r3, r3, #4
 8009de2:	f003 030f 	and.w	r3, r3, #15
 8009de6:	60fb      	str	r3, [r7, #12]
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 8009de8:	4b56      	ldr	r3, [pc, #344]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	615a      	str	r2, [r3, #20]
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d108      	bne.n	8009e06 <_JPEG_DecProcess+0x86>
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d105      	bne.n	8009e06 <_JPEG_DecProcess+0x86>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d102      	bne.n	8009e06 <_JPEG_DecProcess+0x86>
 8009e00:	4b50      	ldr	r3, [pc, #320]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009e02:	2202      	movs	r2, #2
 8009e04:	615a      	str	r2, [r3, #20]
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d13c      	bne.n	8009e86 <_JPEG_DecProcess+0x106>
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d139      	bne.n	8009e86 <_JPEG_DecProcess+0x106>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d136      	bne.n	8009e86 <_JPEG_DecProcess+0x106>
 8009e18:	4b4a      	ldr	r3, [pc, #296]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	615a      	str	r2, [r3, #20]
			break;
 8009e1e:	e032      	b.n	8009e86 <_JPEG_DecProcess+0x106>
		case JPEG_CONFR1_NF:
			JPEGctx.ColorSpace = JPEG_CMYK_COLORSPACE;
 8009e20:	4b48      	ldr	r3, [pc, #288]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009e22:	2230      	movs	r2, #48	; 0x30
 8009e24:	619a      	str	r2, [r3, #24]
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	091b      	lsrs	r3, r3, #4
 8009e2c:	f003 030f 	and.w	r3, r3, #15
 8009e30:	617b      	str	r3, [r7, #20]
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	091b      	lsrs	r3, r3, #4
 8009e38:	f003 030f 	and.w	r3, r3, #15
 8009e3c:	613b      	str	r3, [r7, #16]
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	091b      	lsrs	r3, r3, #4
 8009e44:	f003 030f 	and.w	r3, r3, #15
 8009e48:	60fb      	str	r3, [r7, #12]
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 8009e4a:	4b3e      	ldr	r3, [pc, #248]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	615a      	str	r2, [r3, #20]
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d108      	bne.n	8009e68 <_JPEG_DecProcess+0xe8>
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <_JPEG_DecProcess+0xe8>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <_JPEG_DecProcess+0xe8>
 8009e62:	4b38      	ldr	r3, [pc, #224]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009e64:	2202      	movs	r2, #2
 8009e66:	615a      	str	r2, [r3, #20]
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d10d      	bne.n	8009e8a <_JPEG_DecProcess+0x10a>
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <_JPEG_DecProcess+0x10a>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d107      	bne.n	8009e8a <_JPEG_DecProcess+0x10a>
 8009e7a:	4b32      	ldr	r3, [pc, #200]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	615a      	str	r2, [r3, #20]
			break;
 8009e80:	e003      	b.n	8009e8a <_JPEG_DecProcess+0x10a>
		default:
			return BSP_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e058      	b.n	8009f38 <_JPEG_DecProcess+0x1b8>
			break;
 8009e86:	bf00      	nop
 8009e88:	e000      	b.n	8009e8c <_JPEG_DecProcess+0x10c>
			break;
 8009e8a:	bf00      	nop
		}

		JPEGctx.ImageHeight = (_hjpeg->CONFR1 & 0xFFFF0000UL) >> 16;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	0c1b      	lsrs	r3, r3, #16
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	4a2b      	ldr	r2, [pc, #172]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009e96:	6213      	str	r3, [r2, #32]
		JPEGctx.ImageWidth  = (_hjpeg->CONFR3 & 0xFFFF0000UL) >> 16;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	0c1b      	lsrs	r3, r3, #16
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	4a28      	ldr	r2, [pc, #160]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009ea2:	61d3      	str	r3, [r2, #28]

		//Clear flag
		_hjpeg->CFR |= JPEG_FLAG_HPDF;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// Input FIFO handling
	while ((((_hjpeg->SR) & JPEG_FLAG_IFNFF) > 0) && (JPEGctx.JPEGAddr < JPEGctx.JPEGEnd)) {
 8009eb0:	e009      	b.n	8009ec6 <_JPEG_DecProcess+0x146>
		_hjpeg->DIR = *((uint32_t *)JPEGctx.JPEGAddr);
 8009eb2:	4b24      	ldr	r3, [pc, #144]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	641a      	str	r2, [r3, #64]	; 0x40
		JPEGctx.JPEGAddr += 4;
 8009ebc:	4b21      	ldr	r3, [pc, #132]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4a20      	ldr	r2, [pc, #128]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009ec4:	6013      	str	r3, [r2, #0]
	while ((((_hjpeg->SR) & JPEG_FLAG_IFNFF) > 0) && (JPEGctx.JPEGAddr < JPEGctx.JPEGEnd)) {
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eca:	f003 0304 	and.w	r3, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d011      	beq.n	8009ef6 <_JPEG_DecProcess+0x176>
 8009ed2:	4b1c      	ldr	r3, [pc, #112]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	4b1b      	ldr	r3, [pc, #108]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d3e9      	bcc.n	8009eb2 <_JPEG_DecProcess+0x132>
	}

	// Output FIFO handling
	while ((_hjpeg->SR) & JPEG_FLAG_OFNEF) {
 8009ede:	e00a      	b.n	8009ef6 <_JPEG_DecProcess+0x176>
		*((uint32_t *)JPEGctx.OutputBufAddr) = _hjpeg->DOR;
 8009ee0:	4b18      	ldr	r3, [pc, #96]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eea:	6013      	str	r3, [r2, #0]
		JPEGctx.OutputBufAddr += 4;
 8009eec:	4b15      	ldr	r3, [pc, #84]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	4a14      	ldr	r2, [pc, #80]	; (8009f44 <_JPEG_DecProcess+0x1c4>)
 8009ef4:	60d3      	str	r3, [r2, #12]
	while ((_hjpeg->SR) & JPEG_FLAG_OFNEF) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efa:	f003 0310 	and.w	r3, r3, #16
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1ee      	bne.n	8009ee0 <_JPEG_DecProcess+0x160>
	}

	// End of decoding handling (EOC flag high, Output FIFO flags low)
	if (((_hjpeg->SR) & (JPEG_FLAG_EOCF | JPEG_FLAG_OFNEF | JPEG_FLAG_OFTF)) == JPEG_FLAG_EOCF) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f0a:	2b20      	cmp	r3, #32
 8009f0c:	d113      	bne.n	8009f36 <_JPEG_DecProcess+0x1b6>

		//Stop decoding process
		_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f023 0201 	bic.w	r2, r3, #1
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	601a      	str	r2, [r3, #0]

		// Disable all interrupts
		MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1e:	f023 027e 	bic.w	r2, r3, #126	; 0x7e
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30

		// Clear all flags
		_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	639a      	str	r2, [r3, #56]	; 0x38

		return BSP_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	e000      	b.n	8009f38 <_JPEG_DecProcess+0x1b8>
	}

	return BSP_BUSY;
 8009f36:	2302      	movs	r3, #2
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	240004ac 	.word	0x240004ac

08009f48 <BSP_STM32_JPEG_Init>:


uint8_t BSP_STM32_JPEG_Init(JPEG_TypeDef * _hjpeg) {
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]

	// Enable JPEG core
	_hjpeg->CR |=  JPEG_CR_JCEN;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f54:	f043 0201 	orr.w	r2, r3, #1
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	631a      	str	r2, [r3, #48]	; 0x30

	// Stop any decoding process
	_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f023 0201 	bic.w	r2, r3, #1
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	601a      	str	r2, [r3, #0]

	// Disable all interrupts
	MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6c:	f023 027e 	bic.w	r2, r3, #126	; 0x7e
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	631a      	str	r2, [r3, #48]	; 0x30

	// Flush input and output FIFOs
	_hjpeg->CR |= JPEG_CR_IFF;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_OFF;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f84:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	631a      	str	r2, [r3, #48]	; 0x30

	// Clear all flags
	_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	639a      	str	r2, [r3, #56]	; 0x38

	// Enable header processing
	_hjpeg->CONFR1 |= JPEG_CONFR1_HDR;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	605a      	str	r2, [r3, #4]

	return BSP_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <BSP_STM32_JPEG_Decode>:

uint8_t BSP_STM32_JPEG_Decode(JPEG_TypeDef * _hjpeg, uint32_t JPEG_Addr, uint32_t JPEG_Size, uint32_t OutputBuf_Addr, uint32_t OutputBuf_Size) {
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b086      	sub	sp, #24
 8009fb6:	af02      	add	r7, sp, #8
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
 8009fbe:	603b      	str	r3, [r7, #0]
	// Init decode process
	_JPEG_DecInit(_hjpeg, JPEG_Addr, JPEG_Size, OutputBuf_Addr, OutputBuf_Size);
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	68b9      	ldr	r1, [r7, #8]
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff fe80 	bl	8009cd0 <_JPEG_DecInit>

	// Decode process
	while (_JPEG_DecProcess(_hjpeg) == BSP_BUSY) {};
 8009fd0:	bf00      	nop
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7ff fed4 	bl	8009d80 <_JPEG_DecProcess>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d0f9      	beq.n	8009fd2 <BSP_STM32_JPEG_Decode+0x20>

	return BSP_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <BSP_STM32_JPEG_GetWidth>:

uint32_t BSP_STM32_JPEG_GetWidth(JPEG_TypeDef * _hjpeg) {
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	UNUSED(_hjpeg);

	return JPEGctx.ImageWidth;
 8009ff0:	4b03      	ldr	r3, [pc, #12]	; (800a000 <BSP_STM32_JPEG_GetWidth+0x18>)
 8009ff2:	69db      	ldr	r3, [r3, #28]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	240004ac 	.word	0x240004ac

0800a004 <BSP_STM32_JPEG_GetHeight>:

uint32_t BSP_STM32_JPEG_GetHeight(JPEG_TypeDef * _hjpeg) {
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
	UNUSED(_hjpeg);

	return JPEGctx.ImageHeight;
 800a00c:	4b03      	ldr	r3, [pc, #12]	; (800a01c <BSP_STM32_JPEG_GetHeight+0x18>)
 800a00e:	6a1b      	ldr	r3, [r3, #32]
}
 800a010:	4618      	mov	r0, r3
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	240004ac 	.word	0x240004ac

0800a020 <BSP_STM32_JPEG_GetCSS>:

uint32_t BSP_STM32_JPEG_GetCSS(JPEG_TypeDef * _hjpeg) {
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	UNUSED(_hjpeg);

	return JPEGctx.CSSType;
 800a028:	4b03      	ldr	r3, [pc, #12]	; (800a038 <BSP_STM32_JPEG_GetCSS+0x18>)
 800a02a:	695b      	ldr	r3, [r3, #20]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	240004ac 	.word	0x240004ac

0800a03c <BSP_STM32_JPEG_GetColorSpace>:

uint32_t BSP_STM32_JPEG_GetColorSpace(JPEG_TypeDef * _hjpeg) {
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	UNUSED(_hjpeg);

	return JPEGctx.ColorSpace;
 800a044:	4b03      	ldr	r3, [pc, #12]	; (800a054 <BSP_STM32_JPEG_GetColorSpace+0x18>)
 800a046:	699b      	ldr	r3, [r3, #24]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	240004ac 	.word	0x240004ac

0800a058 <BSP_STM32_LTDC_Init>:


uint8_t BSP_STM32_LTDC_Init(LTDC_TypeDef *hltdc, uint32_t lcd_h_sync, uint32_t lcd_v_sync,
		uint32_t lcd_acc_h_back_porch_width, uint32_t lcd_acc_v_back_porch_height,
		uint32_t lcd_acc_active_width, uint32_t lcd_acc_active_height,
		uint32_t lcd_total_width, uint32_t lcd_total_height, uint32_t bgcolor) {
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]

	// Checking if LTDC already initialized
	if (hltdc->GCR & LTDC_GCR_LTDCEN) return BSP_OK;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <BSP_STM32_LTDC_Init+0x1e>
 800a072:	2300      	movs	r3, #0
 800a074:	e078      	b.n	800a168 <BSP_STM32_LTDC_Init+0x110>
//	BSP_Delay(1);
//	RCC->APB3RSTR &= ~RCC_APB3RSTR_LTDCRST;
//	BSP_Delay(1);

	// Setting AXI QOS to higher priority for LTDC peripheral
	GPV->AXI_INI6_READ_QOS = 1UL;
 800a076:	f04f 43a2 	mov.w	r3, #1358954496	; 0x51000000
 800a07a:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
 800a07e:	461a      	mov	r2, r3
 800a080:	2301      	movs	r3, #1
 800a082:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	GPV->AXI_INI6_WRITE_QOS = 1UL;
 800a086:	f04f 43a2 	mov.w	r3, #1358954496	; 0x51000000
 800a08a:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
 800a08e:	461a      	mov	r2, r3
 800a090:	2301      	movs	r3, #1
 800a092:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	// LTDC Init

	// Configure the HS, VS, DE and PC polarity
	hltdc->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	619a      	str	r2, [r3, #24]
	hltdc->GCR |= (uint32_t)(LTDC_HSPOLARITY_AL | LTDC_VSPOLARITY_AL | LTDC_DEPOLARITY_AL | LTDC_PCPOLARITY_IPC);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699a      	ldr	r2, [r3, #24]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	619a      	str	r2, [r3, #24]

	// Set Synchronization size
	hltdc->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	689a      	ldr	r2, [r3, #8]
 800a0ae:	4b31      	ldr	r3, [pc, #196]	; (800a174 <BSP_STM32_LTDC_Init+0x11c>)
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	6093      	str	r3, [r2, #8]
	tmp = ((lcd_h_sync) << 16U);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	041b      	lsls	r3, r3, #16
 800a0ba:	617b      	str	r3, [r7, #20]
	hltdc->SSCR |= (tmp | (lcd_v_sync));
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	6979      	ldr	r1, [r7, #20]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	609a      	str	r2, [r3, #8]

	// Set Accumulated Back porch
	hltdc->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	68da      	ldr	r2, [r3, #12]
 800a0d0:	4b28      	ldr	r3, [pc, #160]	; (800a174 <BSP_STM32_LTDC_Init+0x11c>)
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	60d3      	str	r3, [r2, #12]
	tmp = ((lcd_acc_h_back_porch_width) << 16U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	041b      	lsls	r3, r3, #16
 800a0dc:	617b      	str	r3, [r7, #20]
	hltdc->BPCR |= (tmp | (lcd_acc_v_back_porch_height));
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	6979      	ldr	r1, [r7, #20]
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	431a      	orrs	r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	60da      	str	r2, [r3, #12]

	// Set Accumulated Active Width
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	691a      	ldr	r2, [r3, #16]
 800a0f2:	4b20      	ldr	r3, [pc, #128]	; (800a174 <BSP_STM32_LTDC_Init+0x11c>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	6113      	str	r3, [r2, #16]
	tmp = ((lcd_acc_active_width) << 16U);
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	041b      	lsls	r3, r3, #16
 800a0fe:	617b      	str	r3, [r7, #20]
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	6979      	ldr	r1, [r7, #20]
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	430b      	orrs	r3, r1
 800a10a:	431a      	orrs	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	611a      	str	r2, [r3, #16]

	// Set Total Width
	hltdc->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	695a      	ldr	r2, [r3, #20]
 800a114:	4b17      	ldr	r3, [pc, #92]	; (800a174 <BSP_STM32_LTDC_Init+0x11c>)
 800a116:	4013      	ands	r3, r2
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	6153      	str	r3, [r2, #20]
	tmp = ((lcd_total_width) << 16U);
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	041b      	lsls	r3, r3, #16
 800a120:	617b      	str	r3, [r7, #20]
	hltdc->TWCR |= (tmp | (lcd_total_height));
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	695a      	ldr	r2, [r3, #20]
 800a126:	6979      	ldr	r1, [r7, #20]
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	430b      	orrs	r3, r1
 800a12c:	431a      	orrs	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	615a      	str	r2, [r3, #20]

	// Set the background color value
	hltdc->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc->BCCR |= (bgcolor & 0x00FFFFFF);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a144:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a148:	431a      	orrs	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable the Transfer Error and FIFO underrun interrupts */
	hltdc->IER |= LTDC_IER_TERRIE | LTDC_IER_FUIE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a152:	f043 0206 	orr.w	r2, r3, #6
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	635a      	str	r2, [r3, #52]	; 0x34

	// Enable LTDC by setting LTDCEN bit
	hltdc->GCR |= LTDC_GCR_LTDCEN;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	f043 0201 	orr.w	r2, r3, #1
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	619a      	str	r2, [r3, #24]

	return BSP_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	371c      	adds	r7, #28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	f000f800 	.word	0xf000f800

0800a178 <BSP_STM32_LTDC_DisableLayer>:

uint8_t BSP_STM32_LTDC_DisableLayer(LTDC_TypeDef *hltdc, uint32_t layer) {
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	01da      	lsls	r2, r3, #7
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4413      	add	r3, r2
 800a18a:	3384      	adds	r3, #132	; 0x84
 800a18c:	60fb      	str	r3, [r7, #12]

	// Disable Layer
	l->CR &= ~(LTDC_LxCR_LEN | LTDC_LxCR_CLUTEN | LTDC_LxCR_COLKEN);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f023 0213 	bic.w	r2, r3, #19
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	601a      	str	r2, [r3, #0]
	l->CKCR = 0x00000000;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	60da      	str	r2, [r3, #12]

	// Set the Reload on Vertical Blank
	hltdc->SRCR |= LTDC_SRCR_VBR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	f043 0202 	orr.w	r2, r3, #2
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait for layer to disable
	while (l->CR & LTDC_LxCR_LEN) {};
 800a1ac:	bf00      	nop
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1f9      	bne.n	800a1ae <BSP_STM32_LTDC_DisableLayer+0x36>

	return BSP_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <BSP_STM32_LTDC_EnableLayer>:

uint8_t BSP_STM32_LTDC_EnableLayer(LTDC_TypeDef *hltdc, uint32_t layer) {
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	01da      	lsls	r2, r3, #7
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4413      	add	r3, r2
 800a1da:	3384      	adds	r3, #132	; 0x84
 800a1dc:	60fb      	str	r3, [r7, #12]

	// Enable layer
	l->CR |= LTDC_LxCR_LEN;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f043 0201 	orr.w	r2, r3, #1
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	601a      	str	r2, [r3, #0]

	// Set the Reload on Vertical Blank
	hltdc->SRCR |= LTDC_SRCR_VBR;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	f043 0202 	orr.w	r2, r3, #2
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait for layer to enable
	while (!(l->CR & LTDC_LxCR_LEN)) {};
 800a1f6:	bf00      	nop
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0f9      	beq.n	800a1f8 <BSP_STM32_LTDC_EnableLayer+0x30>

	return BSP_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
	...

0800a214 <BSP_STM32_LTDC_ConfigLayer>:

uint8_t BSP_STM32_LTDC_ConfigLayer(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t alpha, uint32_t alpha0, uint32_t bgcolor,
		uint32_t blendingfactor1, uint32_t blendingfactor2, uint32_t fbstartaddress, uint32_t imgheight, uint32_t imgwidth,
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	603b      	str	r3, [r7, #0]

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	01da      	lsls	r2, r3, #7
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4413      	add	r3, r2
 800a22a:	3384      	adds	r3, #132	; 0x84
 800a22c:	613b      	str	r3, [r7, #16]

	// Disable Layer
	// BSP_STM32_LTDC_DisableLayer(hltdc, layer);

	// Configure the horizontal start and stop position
	tmp = ((x1 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	0c1b      	lsrs	r3, r3, #16
 800a234:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800a238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a23a:	4413      	add	r3, r2
 800a23c:	041b      	lsls	r3, r3, #16
 800a23e:	617b      	str	r3, [r7, #20]
	l->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	605a      	str	r2, [r3, #4]
	l->WHPCR = ((x0 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	0c1b      	lsrs	r3, r3, #16
 800a252:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800a256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a258:	4413      	add	r3, r2
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	431a      	orrs	r2, r3
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	605a      	str	r2, [r3, #4]

	// Configure the vertical start and stop position
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a26e:	4413      	add	r3, r2
 800a270:	041b      	lsls	r3, r3, #16
 800a272:	617b      	str	r3, [r7, #20]
	l->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	609a      	str	r2, [r3, #8]
	l->WVPCR  = ((y0 + (hltdc->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a28a:	4413      	add	r3, r2
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	431a      	orrs	r2, r3
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	609a      	str	r2, [r3, #8]

	// Specifies the pixel format
	l->PFCR &= ~(LTDC_LxPFCR_PF);
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	f023 0207 	bic.w	r2, r3, #7
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	611a      	str	r2, [r3, #16]
	l->PFCR = pixelformat;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2a6:	611a      	str	r2, [r3, #16]

	// Configure the default color values
	l->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	619a      	str	r2, [r3, #24]
	l->DCCR = bgcolor;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6a3a      	ldr	r2, [r7, #32]
 800a2b6:	619a      	str	r2, [r3, #24]

	// Specifies the constant alpha value
	l->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	615a      	str	r2, [r3, #20]
	l->CACR = alpha;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	615a      	str	r2, [r3, #20]

	// Specifies the blending factors
	l->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	69da      	ldr	r2, [r3, #28]
 800a2ce:	4b29      	ldr	r3, [pc, #164]	; (800a374 <BSP_STM32_LTDC_ConfigLayer+0x160>)
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	61d3      	str	r3, [r2, #28]
	l->BFCR = (blendingfactor1 | blendingfactor2);
 800a2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	61da      	str	r2, [r3, #28]

	// Configure the color frame buffer start address
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	629a      	str	r2, [r3, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ee:	629a      	str	r2, [r3, #40]	; 0x28

	if (pixelformat == LTDC_PIXEL_FORMAT_ARGB8888) { tmp = 4U; }
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d102      	bne.n	800a2fc <BSP_STM32_LTDC_ConfigLayer+0xe8>
 800a2f6:	2304      	movs	r3, #4
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	e016      	b.n	800a32a <BSP_STM32_LTDC_ConfigLayer+0x116>
	else if (pixelformat == LTDC_PIXEL_FORMAT_RGB888) { tmp = 3U; }
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d102      	bne.n	800a308 <BSP_STM32_LTDC_ConfigLayer+0xf4>
 800a302:	2303      	movs	r3, #3
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	e010      	b.n	800a32a <BSP_STM32_LTDC_ConfigLayer+0x116>
	else if ((pixelformat == LTDC_PIXEL_FORMAT_ARGB4444) || (pixelformat == LTDC_PIXEL_FORMAT_RGB565) || (pixelformat == LTDC_PIXEL_FORMAT_ARGB1555) || (pixelformat == LTDC_PIXEL_FORMAT_AL88)) { tmp = 2U; }
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	2b04      	cmp	r3, #4
 800a30c:	d008      	beq.n	800a320 <BSP_STM32_LTDC_ConfigLayer+0x10c>
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	2b02      	cmp	r3, #2
 800a312:	d005      	beq.n	800a320 <BSP_STM32_LTDC_ConfigLayer+0x10c>
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	2b03      	cmp	r3, #3
 800a318:	d002      	beq.n	800a320 <BSP_STM32_LTDC_ConfigLayer+0x10c>
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	2b07      	cmp	r3, #7
 800a31e:	d102      	bne.n	800a326 <BSP_STM32_LTDC_ConfigLayer+0x112>
 800a320:	2302      	movs	r3, #2
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	e001      	b.n	800a32a <BSP_STM32_LTDC_ConfigLayer+0x116>
	else { tmp = 1U; }
 800a326:	2301      	movs	r3, #1
 800a328:	617b      	str	r3, [r7, #20]

	// Configure the color frame buffer pitch in byte
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32e:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	62da      	str	r2, [r3, #44]	; 0x2c
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 800a336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a338:	697a      	ldr	r2, [r7, #20]
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
 800a33e:	041a      	lsls	r2, r3, #16
 800a340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a344:	1acb      	subs	r3, r1, r3
 800a346:	6979      	ldr	r1, [r7, #20]
 800a348:	fb01 f303 	mul.w	r3, r1, r3
 800a34c:	3307      	adds	r3, #7
 800a34e:	431a      	orrs	r2, r3
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure the frame buffer line number
	l->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a358:	4b07      	ldr	r3, [pc, #28]	; (800a378 <BSP_STM32_LTDC_ConfigLayer+0x164>)
 800a35a:	4013      	ands	r3, r2
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	6313      	str	r3, [r2, #48]	; 0x30
	l->CFBLNR  = (imgheight);
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a364:	631a      	str	r2, [r3, #48]	; 0x30

	// Enable Layer
	// BSP_STM32_LTDC_EnableLayer(hltdc, layer);

	return BSP_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	371c      	adds	r7, #28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	fffff8f8 	.word	0xfffff8f8
 800a378:	fffff800 	.word	0xfffff800

0800a37c <BSP_STM32_LTDC_UpdateFrameBufAddr>:


uint8_t BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t fbstartaddress) {
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]

	// Updating Framebuffer address
	LTDC_Layer_TypeDef *l = ((LTDC_Layer_TypeDef *)((uint32_t)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)))));
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	01da      	lsls	r2, r3, #7
 800a38c:	4b0b      	ldr	r3, [pc, #44]	; (800a3bc <BSP_STM32_LTDC_UpdateFrameBufAddr+0x40>)
 800a38e:	4413      	add	r3, r2
 800a390:	617b      	str	r3, [r7, #20]
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2200      	movs	r2, #0
 800a39a:	629a      	str	r2, [r3, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc->SRCR |= LTDC_SRCR_VBR;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	f043 0202 	orr.w	r2, r3, #2
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	625a      	str	r2, [r3, #36]	; 0x24

	return BSP_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	50001084 	.word	0x50001084

0800a3c0 <BSP_STM32_LTDC_ConfigCLUT>:


uint8_t BSP_STM32_LTDC_ConfigCLUT(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t *clut) {
 800a3c0:	b480      	push	{r7}
 800a3c2:	b089      	sub	sp, #36	; 0x24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	01da      	lsls	r2, r3, #7
 800a3d0:	4b20      	ldr	r3, [pc, #128]	; (800a454 <BSP_STM32_LTDC_ConfigCLUT+0x94>)
 800a3d2:	4413      	add	r3, r2
 800a3d4:	617b      	str	r3, [r7, #20]
	uint32_t *pcolorlut = clut;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	61fb      	str	r3, [r7, #28]
	uint32_t counter;
	uint32_t tmp;

	// Configure CLUT
	for (counter = 0U; (counter < 256); counter++) {
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	e010      	b.n	800a402 <BSP_STM32_LTDC_ConfigCLUT+0x42>
		tmp  = (counter << 24U) | ((uint32_t)(*pcolorlut) & 0x00FFFFFF);
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	061a      	lsls	r2, r3, #24
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	613b      	str	r3, [r7, #16]
	    pcolorlut++;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	61fb      	str	r3, [r7, #28]
	    l->CLUTWR  = tmp;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	641a      	str	r2, [r3, #64]	; 0x40
	for (counter = 0U; (counter < 256); counter++) {
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	3301      	adds	r3, #1
 800a400:	61bb      	str	r3, [r7, #24]
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	2bff      	cmp	r3, #255	; 0xff
 800a406:	d9eb      	bls.n	800a3e0 <BSP_STM32_LTDC_ConfigCLUT+0x20>
	}
	// Enable CLUT
	l->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f043 0210 	orr.w	r2, r3, #16
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	601a      	str	r2, [r3, #0]
	hltdc->SRCR = LTDC_SRCR_IMR;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	625a      	str	r2, [r3, #36]	; 0x24

	// Configure color keying
	l->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	60da      	str	r2, [r3, #12]
	l->CKCR  = 0x00000000;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	2200      	movs	r2, #0
 800a42a:	60da      	str	r2, [r3, #12]
	hltdc->SRCR = LTDC_SRCR_IMR;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2201      	movs	r2, #1
 800a430:	625a      	str	r2, [r3, #36]	; 0x24
	// Enable color keying
	l->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f043 0202 	orr.w	r2, r3, #2
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	601a      	str	r2, [r3, #0]
	hltdc->SRCR = LTDC_SRCR_IMR;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2201      	movs	r2, #1
 800a442:	625a      	str	r2, [r3, #36]	; 0x24

	return BSP_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3724      	adds	r7, #36	; 0x24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	50001084 	.word	0x50001084

0800a458 <BSP_STM32_LTDC_SetTransparentColor>:

uint8_t BSP_STM32_LTDC_SetTransparentColor(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t color) {
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	01da      	lsls	r2, r3, #7
 800a468:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <BSP_STM32_LTDC_SetTransparentColor+0x44>)
 800a46a:	4413      	add	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]

	// Setting transparent color
	l->CKCR  = color;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	60da      	str	r2, [r3, #12]
	hltdc->SRCR = LTDC_SRCR_IMR;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	625a      	str	r2, [r3, #36]	; 0x24
	// Enable color keying
	l->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f043 0202 	orr.w	r2, r3, #2
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	601a      	str	r2, [r3, #0]
	hltdc->SRCR = LTDC_SRCR_IMR;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	625a      	str	r2, [r3, #36]	; 0x24

	return BSP_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	371c      	adds	r7, #28
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	50001084 	.word	0x50001084

0800a4a0 <BSP_STM32_LTDC_SetLineInt>:

uint8_t BSP_STM32_LTDC_SetLineInt(LTDC_TypeDef *hltdc, uint32_t line) {
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
	// Programming LTDC line interrupt
	hltdc->IER &= ~(LTDC_IER_LIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ae:	f023 0201 	bic.w	r2, r3, #1
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	635a      	str	r2, [r3, #52]	; 0x34
	hltdc->LIPCR = line;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	641a      	str	r2, [r3, #64]	; 0x40
	hltdc->IER |= LTDC_IER_LIE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c0:	f043 0201 	orr.w	r2, r3, #1
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	635a      	str	r2, [r3, #52]	; 0x34
	hltdc->SRCR = LTDC_SRCR_IMR;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	625a      	str	r2, [r3, #36]	; 0x24

	return BSP_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <BSP_STM32_LTDC_IRQHandler>:

uint8_t BSP_STM32_LTDC_IRQHandler(LTDC_TypeDef *hltdc) {
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	if (((hltdc->ISR & LTDC_ISR_LIF) != 0U) && ((hltdc->IER & LTDC_IER_LIE) != 0U)) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d016      	beq.n	800a51e <BSP_STM32_LTDC_IRQHandler+0x42>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d010      	beq.n	800a51e <BSP_STM32_LTDC_IRQHandler+0x42>
	    // Disable the Line interrupt
		hltdc->IER &= ~(LTDC_IER_LIE);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a500:	f023 0201 	bic.w	r2, r3, #1
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	635a      	str	r2, [r3, #52]	; 0x34
	    // Clear the Line interrupt flag
		hltdc->ICR = LTDC_ICR_CLIF;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	63da      	str	r2, [r3, #60]	; 0x3c
	    // Enable the Line interrupt
		hltdc->IER |= (LTDC_IER_LIE);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a512:	f043 0201 	orr.w	r2, r3, #1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	635a      	str	r2, [r3, #52]	; 0x34
		return BSP_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	e051      	b.n	800a5c2 <BSP_STM32_LTDC_IRQHandler+0xe6>
	}

	if (((hltdc->ISR & LTDC_ISR_FUIF) != 0U) && ((hltdc->IER & LTDC_IER_FUIE) != 0U)) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d014      	beq.n	800a554 <BSP_STM32_LTDC_IRQHandler+0x78>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52e:	f003 0302 	and.w	r3, r3, #2
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00e      	beq.n	800a554 <BSP_STM32_LTDC_IRQHandler+0x78>
		// Disable the interrupt FIFO Underrun
		hltdc->IER &= ~(LTDC_IER_FUIE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53a:	f023 0202 	bic.w	r2, r3, #2
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	635a      	str	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CFUIF;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2202      	movs	r2, #2
 800a546:	63da      	str	r2, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_FUIE);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54c:	f043 0202 	orr.w	r2, r3, #2
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (((hltdc->ISR & LTDC_ISR_RRIF) != 0U) && ((hltdc->IER & LTDC_IER_RRIE) != 0U)) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a558:	f003 0308 	and.w	r3, r3, #8
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d014      	beq.n	800a58a <BSP_STM32_LTDC_IRQHandler+0xae>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a564:	f003 0308 	and.w	r3, r3, #8
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00e      	beq.n	800a58a <BSP_STM32_LTDC_IRQHandler+0xae>
		// Disable the interrupt Register Reload
		hltdc->IER &= ~(LTDC_IER_RRIE);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a570:	f023 0208 	bic.w	r2, r3, #8
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	635a      	str	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CRRIF;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2208      	movs	r2, #8
 800a57c:	63da      	str	r2, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_RRIE);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a582:	f043 0208 	orr.w	r2, r3, #8
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (((hltdc->ISR & LTDC_ISR_TERRIF) != 0U) && ((hltdc->IER & LTDC_IER_TERRIE) != 0U)) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	d014      	beq.n	800a5c0 <BSP_STM32_LTDC_IRQHandler+0xe4>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00e      	beq.n	800a5c0 <BSP_STM32_LTDC_IRQHandler+0xe4>
		// Disable the interrupt Transfer Error
		hltdc->IER &= ~(LTDC_IER_TERRIE);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a6:	f023 0204 	bic.w	r2, r3, #4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	635a      	str	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CTERRIF;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2204      	movs	r2, #4
 800a5b2:	63da      	str	r2, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_TERRIE);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b8:	f043 0204 	orr.w	r2, r3, #4
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return BSP_ERROR;
 800a5c0:	2301      	movs	r3, #1
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <BSP_STM32_PCD_EnableUSBVoltageDetector>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_STM32_PCD.h"

uint8_t BSP_STM32_PCD_EnableUSBVoltageDetector() {
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
  // Enable the USB voltage detector
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a5d4:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <BSP_STM32_PCD_EnableUSBVoltageDetector+0x1c>)
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	4a04      	ldr	r2, [pc, #16]	; (800a5ec <BSP_STM32_PCD_EnableUSBVoltageDetector+0x1c>)
 800a5da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5de:	60d3      	str	r3, [r2, #12]
  return BSP_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	58024800 	.word	0x58024800

0800a5f0 <BSP_STM32_PWR_ConfigSupply>:
 *******************************************************************/

#include "BSP_STM32_PWR.h"


uint8_t BSP_STM32_PWR_ConfigSupply(uint32_t SupplySource) {
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	uint32_t tick;

	// Validate input parameters
	switch (SupplySource) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a5fc:	d81b      	bhi.n	800a636 <BSP_STM32_PWR_ConfigSupply+0x46>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b16      	cmp	r3, #22
 800a602:	d206      	bcs.n	800a612 <BSP_STM32_PWR_ConfigSupply+0x22>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b02      	cmp	r3, #2
 800a608:	d812      	bhi.n	800a630 <BSP_STM32_PWR_ConfigSupply+0x40>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d114      	bne.n	800a63a <BSP_STM32_PWR_ConfigSupply+0x4a>
 800a610:	e011      	b.n	800a636 <BSP_STM32_PWR_ConfigSupply+0x46>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3b16      	subs	r3, #22
 800a616:	4a32      	ldr	r2, [pc, #200]	; (800a6e0 <BSP_STM32_PWR_ConfigSupply+0xf0>)
 800a618:	fa22 f303 	lsr.w	r3, r2, r3
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	bf14      	ite	ne
 800a624:	2301      	movne	r3, #1
 800a626:	2300      	moveq	r3, #0
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d105      	bne.n	800a63a <BSP_STM32_PWR_ConfigSupply+0x4a>
 800a62e:	e002      	b.n	800a636 <BSP_STM32_PWR_ConfigSupply+0x46>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b04      	cmp	r3, #4
 800a634:	d001      	beq.n	800a63a <BSP_STM32_PWR_ConfigSupply+0x4a>
	case PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO:
	case PWR_SMPS_1V8_SUPPLIES_EXT:
	case PWR_SMPS_2V5_SUPPLIES_EXT:
		break;
	default:
		return BSP_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e04e      	b.n	800a6d8 <BSP_STM32_PWR_ConfigSupply+0xe8>
		break;
 800a63a:	bf00      	nop
	}

	// PWR Config Mask
	uint32_t pwr_config_mask = (PWR_CR3_SMPSLEVEL_Msk | PWR_CR3_SMPSEXTHP_Msk | PWR_CR3_SMPSEN_Msk | PWR_CR3_LDOEN_Msk | PWR_CR3_BYPASS_Msk);
 800a63c:	233f      	movs	r3, #63	; 0x3f
 800a63e:	60fb      	str	r3, [r7, #12]

	// SupplyConfig can be configured only once after Power-On Reset
	if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN)) {
 800a640:	4b28      	ldr	r3, [pc, #160]	; (800a6e4 <BSP_STM32_PWR_ConfigSupply+0xf4>)
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	f003 0307 	and.w	r3, r3, #7
 800a648:	2b06      	cmp	r3, #6
 800a64a:	d00a      	beq.n	800a662 <BSP_STM32_PWR_ConfigSupply+0x72>
		if ((PWR->CR3 & pwr_config_mask) == SupplySource) return BSP_OK;
 800a64c:	4b25      	ldr	r3, [pc, #148]	; (800a6e4 <BSP_STM32_PWR_ConfigSupply+0xf4>)
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4013      	ands	r3, r2
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	429a      	cmp	r2, r3
 800a658:	d101      	bne.n	800a65e <BSP_STM32_PWR_ConfigSupply+0x6e>
 800a65a:	2300      	movs	r3, #0
 800a65c:	e03c      	b.n	800a6d8 <BSP_STM32_PWR_ConfigSupply+0xe8>
		return BSP_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e03a      	b.n	800a6d8 <BSP_STM32_PWR_ConfigSupply+0xe8>
	}

	// Setting PWR Supply Source
	MODIFY_REG(PWR->CR3, pwr_config_mask, SupplySource);
 800a662:	4b20      	ldr	r3, [pc, #128]	; (800a6e4 <BSP_STM32_PWR_ConfigSupply+0xf4>)
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	43db      	mvns	r3, r3
 800a66a:	401a      	ands	r2, r3
 800a66c:	491d      	ldr	r1, [pc, #116]	; (800a6e4 <BSP_STM32_PWR_ConfigSupply+0xf4>)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4313      	orrs	r3, r2
 800a672:	60cb      	str	r3, [r1, #12]

	// Wait for voltage to stabilize
	tick = BSP_GetTick();
 800a674:	f7fb fe92 	bl	800639c <BSP_GetTick>
 800a678:	60b8      	str	r0, [r7, #8]
	while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) != PWR_CSR1_ACTVOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 800a67a:	e009      	b.n	800a690 <BSP_STM32_PWR_ConfigSupply+0xa0>
 800a67c:	f7fb fe8e 	bl	800639c <BSP_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a68a:	d901      	bls.n	800a690 <BSP_STM32_PWR_ConfigSupply+0xa0>
 800a68c:	2303      	movs	r3, #3
 800a68e:	e023      	b.n	800a6d8 <BSP_STM32_PWR_ConfigSupply+0xe8>
 800a690:	4b14      	ldr	r3, [pc, #80]	; (800a6e4 <BSP_STM32_PWR_ConfigSupply+0xf4>)
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69c:	d1ee      	bne.n	800a67c <BSP_STM32_PWR_ConfigSupply+0x8c>

	// If no SMPS in use, than return
	if ((SupplySource & PWR_CR3_SMPSEN) == 0) return BSP_OK;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <BSP_STM32_PWR_ConfigSupply+0xbc>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e015      	b.n	800a6d8 <BSP_STM32_PWR_ConfigSupply+0xe8>

	// Wait for SMPS readiness
	tick = BSP_GetTick();
 800a6ac:	f7fb fe76 	bl	800639c <BSP_GetTick>
 800a6b0:	60b8      	str	r0, [r7, #8]
	while ((PWR->CR3 & PWR_CR3_SMPSEXTRDY) != PWR_CR3_SMPSEXTRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 800a6b2:	e009      	b.n	800a6c8 <BSP_STM32_PWR_ConfigSupply+0xd8>
 800a6b4:	f7fb fe72 	bl	800639c <BSP_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6c2:	d901      	bls.n	800a6c8 <BSP_STM32_PWR_ConfigSupply+0xd8>
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e007      	b.n	800a6d8 <BSP_STM32_PWR_ConfigSupply+0xe8>
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <BSP_STM32_PWR_ConfigSupply+0xf4>)
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6d4:	d1ee      	bne.n	800a6b4 <BSP_STM32_PWR_ConfigSupply+0xc4>

	return BSP_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	01810181 	.word	0x01810181
 800a6e4:	58024800 	.word	0x58024800

0800a6e8 <BSP_STM32_PWR_VoltageScalingConfig>:


uint8_t BSP_STM32_PWR_VoltageScalingConfig(uint32_t Regulator) {
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	// For STM32H74xxx and STM32H75xxx lines
	__IO uint32_t tmpreg = 0x00;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	60fb      	str	r3, [r7, #12]

	// Validating input parameters
	switch (Regulator) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6fa:	d014      	beq.n	800a726 <BSP_STM32_PWR_VoltageScalingConfig+0x3e>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a702:	d80e      	bhi.n	800a722 <BSP_STM32_PWR_VoltageScalingConfig+0x3a>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a70a:	d00c      	beq.n	800a726 <BSP_STM32_PWR_VoltageScalingConfig+0x3e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a712:	d806      	bhi.n	800a722 <BSP_STM32_PWR_VoltageScalingConfig+0x3a>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d005      	beq.n	800a726 <BSP_STM32_PWR_VoltageScalingConfig+0x3e>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a720:	d001      	beq.n	800a726 <BSP_STM32_PWR_VoltageScalingConfig+0x3e>
	case PWR_REGULATOR_VOLTAGE_SCALE1:
	case PWR_REGULATOR_VOLTAGE_SCALE2:
	case PWR_REGULATOR_VOLTAGE_SCALE3:
		break;
	default:
		return BSP_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e034      	b.n	800a790 <BSP_STM32_PWR_VoltageScalingConfig+0xa8>
		break;
 800a726:	bf00      	nop
	}

	// Check voltage scaling to be configured
	if (Regulator == PWR_REGULATOR_VOLTAGE_SCALE0) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d116      	bne.n	800a75c <BSP_STM32_PWR_VoltageScalingConfig+0x74>
		// Configure the Voltage Scaling 1
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a72e:	4b1b      	ldr	r3, [pc, #108]	; (800a79c <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	4a1a      	ldr	r2, [pc, #104]	; (800a79c <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 800a734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a738:	6193      	str	r3, [r2, #24]
		// Delay after setting the voltage scaling
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
 800a73a:	4b18      	ldr	r3, [pc, #96]	; (800a79c <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a742:	60fb      	str	r3, [r7, #12]
		// Enable the PWR overdrive
		SET_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 800a744:	4b16      	ldr	r3, [pc, #88]	; (800a7a0 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	4a15      	ldr	r2, [pc, #84]	; (800a7a0 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 800a74a:	f043 0301 	orr.w	r3, r3, #1
 800a74e:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Delay after setting the syscfg boost setting
		tmpreg = READ_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 800a750:	4b13      	ldr	r3, [pc, #76]	; (800a7a0 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	e017      	b.n	800a78c <BSP_STM32_PWR_VoltageScalingConfig+0xa4>
	} else {
		// Disable the PWR overdrive
		CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 800a75c:	4b10      	ldr	r3, [pc, #64]	; (800a7a0 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	4a0f      	ldr	r2, [pc, #60]	; (800a7a0 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 800a762:	f023 0301 	bic.w	r3, r3, #1
 800a766:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Delay after setting the syscfg boost setting
		tmpreg = READ_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 800a768:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <BSP_STM32_PWR_VoltageScalingConfig+0xb8>)
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	60fb      	str	r3, [r7, #12]
		// Configure the Voltage Scaling x
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, Regulator);
 800a772:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a77a:	4908      	ldr	r1, [pc, #32]	; (800a79c <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4313      	orrs	r3, r2
 800a780:	618b      	str	r3, [r1, #24]
		// Delay after setting the voltage scaling
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
 800a782:	4b06      	ldr	r3, [pc, #24]	; (800a79c <BSP_STM32_PWR_VoltageScalingConfig+0xb4>)
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a78a:	60fb      	str	r3, [r7, #12]
	}
	UNUSED(tmpreg);
 800a78c:	68fb      	ldr	r3, [r7, #12]
	return BSP_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	58024800 	.word	0x58024800
 800a7a0:	58000400 	.word	0x58000400

0800a7a4 <BSP_STM32_PWR_WaitForVOSRDY>:

uint8_t BSP_STM32_PWR_WaitForVOSRDY(void) {
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
	uint32_t tick = BSP_GetTick();
 800a7aa:	f7fb fdf7 	bl	800639c <BSP_GetTick>
 800a7ae:	6078      	str	r0, [r7, #4]
	while ((PWR->D3CR & PWR_D3CR_VOSRDY) != PWR_D3CR_VOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_ERROR;
 800a7b0:	e009      	b.n	800a7c6 <BSP_STM32_PWR_WaitForVOSRDY+0x22>
 800a7b2:	f7fb fdf3 	bl	800639c <BSP_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7c0:	d901      	bls.n	800a7c6 <BSP_STM32_PWR_WaitForVOSRDY+0x22>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e007      	b.n	800a7d6 <BSP_STM32_PWR_WaitForVOSRDY+0x32>
 800a7c6:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <BSP_STM32_PWR_WaitForVOSRDY+0x3c>)
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7d2:	d1ee      	bne.n	800a7b2 <BSP_STM32_PWR_WaitForVOSRDY+0xe>
	return BSP_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	58024800 	.word	0x58024800

0800a7e4 <BSP_STM32_PWR_EnableBkUpAccess>:

uint8_t BSP_STM32_PWR_EnableBkUpAccess(void) {
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
  // Enable access to RTC and backup registers
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a7e8:	4b05      	ldr	r3, [pc, #20]	; (800a800 <BSP_STM32_PWR_EnableBkUpAccess+0x1c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a04      	ldr	r2, [pc, #16]	; (800a800 <BSP_STM32_PWR_EnableBkUpAccess+0x1c>)
 800a7ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7f2:	6013      	str	r3, [r2, #0]
  return BSP_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	58024800 	.word	0x58024800

0800a804 <_QSPI_WaitForFlag>:
} QSPI_CTX_TypeDef;

static QSPI_CTX_TypeDef qspictx;


static uint8_t _QSPI_WaitForFlag(QUADSPI_TypeDef * hqspi, uint32_t flag, uint32_t state, uint32_t timeout) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
	uint32_t tick = BSP_GetTick();
 800a812:	f7fb fdc3 	bl	800639c <BSP_GetTick>
 800a816:	6178      	str	r0, [r7, #20]

	while (1) {
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	689a      	ldr	r2, [r3, #8]
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	4013      	ands	r3, r2
 800a820:	2b00      	cmp	r3, #0
 800a822:	bf14      	ite	ne
 800a824:	2301      	movne	r3, #1
 800a826:	2300      	moveq	r3, #0
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	613b      	str	r3, [r7, #16]
		if (reg == state) break;
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	429a      	cmp	r2, r3
 800a832:	d009      	beq.n	800a848 <_QSPI_WaitForFlag+0x44>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800a834:	f7fb fdb2 	bl	800639c <BSP_GetTick>
 800a838:	4602      	mov	r2, r0
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d2e9      	bcs.n	800a818 <_QSPI_WaitForFlag+0x14>
 800a844:	2303      	movs	r3, #3
 800a846:	e001      	b.n	800a84c <_QSPI_WaitForFlag+0x48>
		if (reg == state) break;
 800a848:	bf00      	nop

//	while ((((hqspi->SR & flag) == 0)?RESET:SET) != state) {
//		if ((HAL_GetTick() - tick) > timeout) return BSP_TIMEOUT;
//	}

	return BSP_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <_QSPI_GetConfigCCR>:


static uint32_t _QSPI_GetConfigCCR(QUADSPI_TypeDef * hqspi, uint32_t FMode) {
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]

	uint32_t reg_ccr = 0x00;
 800a85e:	2300      	movs	r3, #0
 800a860:	60fb      	str	r3, [r7, #12]

	// Program Instruction Block
	if (qspictx.InstructionMode != QSPI_INSTRUCTION_NONE) {
 800a862:	4b44      	ldr	r3, [pc, #272]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00c      	beq.n	800a884 <_QSPI_GetConfigCCR+0x30>
		reg_ccr |= (qspictx.Instruction & QUADSPI_CCR_INSTRUCTION_Msk);
 800a86a:	4b42      	ldr	r3, [pc, #264]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
		reg_ccr |= (qspictx.InstructionMode & QUADSPI_CCR_IMODE_Msk);
 800a876:	4b3f      	ldr	r3, [pc, #252]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	4313      	orrs	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
	}

	// Program Address Block
	if (qspictx.AddressMode !=QSPI_ADDRESS_NONE) {
 800a884:	4b3b      	ldr	r3, [pc, #236]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d019      	beq.n	800a8c0 <_QSPI_GetConfigCCR+0x6c>
		reg_ccr |= (qspictx.AddressMode & QUADSPI_CCR_ADMODE_Msk);
 800a88c:	4b39      	ldr	r3, [pc, #228]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
		reg_ccr |= (qspictx.AddressSize & QUADSPI_CCR_ADSIZE_Msk);
 800a89a:	4b36      	ldr	r3, [pc, #216]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->AR = qspictx.Address;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a8ae:	d004      	beq.n	800a8ba <_QSPI_GetConfigCCR+0x66>
 800a8b0:	4b30      	ldr	r3, [pc, #192]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a8b2:	691a      	ldr	r2, [r3, #16]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	619a      	str	r2, [r3, #24]
 800a8b8:	e002      	b.n	800a8c0 <_QSPI_GetConfigCCR+0x6c>
			else hqspi->AR = 0;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	619a      	str	r2, [r3, #24]
	}

	// Program Alternate Bytes
	if (qspictx.AlternateMode != QSPI_ALTERNATE_BYTES_NONE) {
 800a8c0:	4b2c      	ldr	r3, [pc, #176]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d011      	beq.n	800a8ec <_QSPI_GetConfigCCR+0x98>
		reg_ccr |= (qspictx.AlternateMode & QUADSPI_CCR_ABMODE_Msk);
 800a8c8:	4b2a      	ldr	r3, [pc, #168]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	60fb      	str	r3, [r7, #12]
		reg_ccr |= (qspictx.AlternateSize & QUADSPI_CCR_ABSIZE_Msk);
 800a8d6:	4b27      	ldr	r3, [pc, #156]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	60fb      	str	r3, [r7, #12]
		hqspi->ABR = qspictx.AlternateBytes;
 800a8e4:	4b23      	ldr	r3, [pc, #140]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a8e6:	69da      	ldr	r2, [r3, #28]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	61da      	str	r2, [r3, #28]
	}

	// Program Dummy Cycles
	if (qspictx.DummyCycles > 0) {
 800a8ec:	4b21      	ldr	r3, [pc, #132]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a8ee:	6a1b      	ldr	r3, [r3, #32]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d005      	beq.n	800a900 <_QSPI_GetConfigCCR+0xac>
		reg_ccr |= (qspictx.DummyCycles << QUADSPI_CCR_DCYC_Pos);
 800a8f4:	4b1f      	ldr	r3, [pc, #124]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	049b      	lsls	r3, r3, #18
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
	}

	// Program Data Block
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 800a900:	4b1c      	ldr	r3, [pc, #112]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	2b00      	cmp	r3, #0
 800a906:	d013      	beq.n	800a930 <_QSPI_GetConfigCCR+0xdc>
		reg_ccr |= (qspictx.DataMode & QUADSPI_CCR_DMODE_Msk);
 800a908:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4313      	orrs	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->DLR = qspictx.DataLenth - 1U;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a91c:	d005      	beq.n	800a92a <_QSPI_GetConfigCCR+0xd6>
 800a91e:	4b15      	ldr	r3, [pc, #84]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a922:	1e5a      	subs	r2, r3, #1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	611a      	str	r2, [r3, #16]
 800a928:	e002      	b.n	800a930 <_QSPI_GetConfigCCR+0xdc>
			else hqspi->DLR = 0;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	611a      	str	r2, [r3, #16]
	}

	// Program Additional Options
	reg_ccr |= (qspictx.DDRMode & QUADSPI_CCR_DDRM_Msk); 		// DDR Configuration
 800a930:	4b10      	ldr	r3, [pc, #64]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]
	reg_ccr |= (qspictx.SignalDelay & QUADSPI_CCR_DHHC_Msk); 	// Signal Shift
 800a93e:	4b0d      	ldr	r3, [pc, #52]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a942:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4313      	orrs	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
	reg_ccr |= (qspictx.SIOOMode & QUADSPI_CCR_SIOO_Msk);		// SIOO Mode
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <_QSPI_GetConfigCCR+0x120>)
 800a94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	4313      	orrs	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]
	reg_ccr |= (FMode & QUADSPI_CCR_FMODE_Msk);					// Functional Mode
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	4313      	orrs	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]

	return reg_ccr;
 800a966:	68fb      	ldr	r3, [r7, #12]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	240004d0 	.word	0x240004d0

0800a978 <BSP_STM32_QSPI_Init>:


uint8_t BSP_STM32_QSPI_Init(QUADSPI_TypeDef * hqspi, uint32_t ClockPrescaler, uint32_t ClockMode, uint32_t FifoThreshold, uint32_t FlashSize) {
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]

	// Configure QSPI FIFO Threshold
	MODIFY_REG(hqspi->CR, QUADSPI_CR_FTHRES, ((FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	3b01      	subs	r3, #1
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	431a      	orrs	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	601a      	str	r2, [r3, #0]

	// Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 800a99a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2120      	movs	r1, #32
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff ff2e 	bl	800a804 <_QSPI_WaitForFlag>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <BSP_STM32_QSPI_Init+0x3a>
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e01a      	b.n	800a9e8 <BSP_STM32_QSPI_Init+0x70>

	// Configure QSPI Clock Prescaler and Sample Shift
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	4b0e      	ldr	r3, [pc, #56]	; (800a9f0 <BSP_STM32_QSPI_Init+0x78>)
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	0612      	lsls	r2, r2, #24
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	601a      	str	r2, [r3, #0]
			((ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) | QSPI_SAMPLE_SHIFTING_NONE  | QSPI_FLASH_ID_1 | QSPI_DUALFLASH_DISABLE));

	// Configure QSPI Flash Size, CS High Time and Clock Mode
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	4b0a      	ldr	r3, [pc, #40]	; (800a9f4 <BSP_STM32_QSPI_Init+0x7c>)
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	0411      	lsls	r1, r2, #16
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	431a      	orrs	r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	605a      	str	r2, [r3, #4]
			((FlashSize << QUADSPI_DCR_FSIZE_Pos) | QSPI_CS_HIGH_TIME_1_CYCLE | ClockMode));

	// Enable the QSPI peripheral
	hqspi->CR |= QUADSPI_CR_EN;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f043 0201 	orr.w	r2, r3, #1
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	601a      	str	r2, [r3, #0]

    return BSP_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	00ffff2f 	.word	0x00ffff2f
 800a9f4:	ffe0f8fe 	.word	0xffe0f8fe

0800a9f8 <BSP_STM32_QSPI_CfgNewCommand>:


uint8_t BSP_STM32_QSPI_CfgNewCommand() {
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0

	memset(&qspictx, 0x00, sizeof(qspictx));
 800a9fc:	224c      	movs	r2, #76	; 0x4c
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4802      	ldr	r0, [pc, #8]	; (800aa0c <BSP_STM32_QSPI_CfgNewCommand+0x14>)
 800aa02:	f00e f85a 	bl	8018aba <memset>

	return BSP_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	240004d0 	.word	0x240004d0

0800aa10 <BSP_STM32_QSPI_CfgInstruction>:

uint8_t BSP_STM32_QSPI_CfgInstruction(uint32_t Mode, uint8_t Instruction) {
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]

	qspictx.InstructionMode = Mode;
 800aa1c:	4a06      	ldr	r2, [pc, #24]	; (800aa38 <BSP_STM32_QSPI_CfgInstruction+0x28>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6013      	str	r3, [r2, #0]
	qspictx.Instruction = Instruction;
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	4a04      	ldr	r2, [pc, #16]	; (800aa38 <BSP_STM32_QSPI_CfgInstruction+0x28>)
 800aa26:	6053      	str	r3, [r2, #4]

	return BSP_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	240004d0 	.word	0x240004d0

0800aa3c <BSP_STM32_QSPI_CfgAddress>:

uint8_t BSP_STM32_QSPI_CfgAddress(uint32_t Mode, uint32_t Size, uint32_t Address) {
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]

	qspictx.AddressMode = Mode;
 800aa48:	4a07      	ldr	r2, [pc, #28]	; (800aa68 <BSP_STM32_QSPI_CfgAddress+0x2c>)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6093      	str	r3, [r2, #8]
	qspictx.AddressSize = Size;
 800aa4e:	4a06      	ldr	r2, [pc, #24]	; (800aa68 <BSP_STM32_QSPI_CfgAddress+0x2c>)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	60d3      	str	r3, [r2, #12]
	qspictx.Address = Address;
 800aa54:	4a04      	ldr	r2, [pc, #16]	; (800aa68 <BSP_STM32_QSPI_CfgAddress+0x2c>)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6113      	str	r3, [r2, #16]

	return BSP_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	240004d0 	.word	0x240004d0

0800aa6c <BSP_STM32_QSPI_CfgData>:
	qspictx.DummyCycles = DummyCycles;

	return BSP_OK;
}

uint8_t BSP_STM32_QSPI_CfgData(uint32_t Mode, uint8_t * pData, uint32_t Length) {
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]

	qspictx.DataMode = Mode;
 800aa78:	4a07      	ldr	r2, [pc, #28]	; (800aa98 <BSP_STM32_QSPI_CfgData+0x2c>)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6253      	str	r3, [r2, #36]	; 0x24
	qspictx.DataLenth = Length;
 800aa7e:	4a06      	ldr	r2, [pc, #24]	; (800aa98 <BSP_STM32_QSPI_CfgData+0x2c>)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6293      	str	r3, [r2, #40]	; 0x28
	qspictx.pData = pData;
 800aa84:	4a04      	ldr	r2, [pc, #16]	; (800aa98 <BSP_STM32_QSPI_CfgData+0x2c>)
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	62d3      	str	r3, [r2, #44]	; 0x2c

	return BSP_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	240004d0 	.word	0x240004d0

0800aa9c <BSP_STM32_QSPI_CfgOptions>:

uint8_t	BSP_STM32_QSPI_CfgOptions(uint32_t DDRMode, uint32_t SignalDelay, uint32_t SIOOMode) {
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
	qspictx.DDRMode = DDRMode;
 800aaa8:	4a07      	ldr	r2, [pc, #28]	; (800aac8 <BSP_STM32_QSPI_CfgOptions+0x2c>)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6313      	str	r3, [r2, #48]	; 0x30
	qspictx.SignalDelay = SignalDelay;
 800aaae:	4a06      	ldr	r2, [pc, #24]	; (800aac8 <BSP_STM32_QSPI_CfgOptions+0x2c>)
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	6353      	str	r3, [r2, #52]	; 0x34
	qspictx.SIOOMode = SIOOMode;
 800aab4:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <BSP_STM32_QSPI_CfgOptions+0x2c>)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6393      	str	r3, [r2, #56]	; 0x38

	return BSP_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	240004d0 	.word	0x240004d0

0800aacc <BSP_STM32_QSPI_CfgAutoPooling>:

uint8_t BSP_STM32_QSPI_CfgAutoPooling(uint32_t mask, uint32_t match, uint32_t interval, uint32_t matchmode) {
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
	qspictx.AutoPoolingMask = mask;
 800aada:	4a09      	ldr	r2, [pc, #36]	; (800ab00 <BSP_STM32_QSPI_CfgAutoPooling+0x34>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6413      	str	r3, [r2, #64]	; 0x40
	qspictx.AutoPoolingMatch = match;
 800aae0:	4a07      	ldr	r2, [pc, #28]	; (800ab00 <BSP_STM32_QSPI_CfgAutoPooling+0x34>)
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	63d3      	str	r3, [r2, #60]	; 0x3c
	qspictx.AutoPoolingInterval = interval;
 800aae6:	4a06      	ldr	r2, [pc, #24]	; (800ab00 <BSP_STM32_QSPI_CfgAutoPooling+0x34>)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6493      	str	r3, [r2, #72]	; 0x48
	qspictx.AutoPoolingMode = matchmode;
 800aaec:	4a04      	ldr	r2, [pc, #16]	; (800ab00 <BSP_STM32_QSPI_CfgAutoPooling+0x34>)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	6453      	str	r3, [r2, #68]	; 0x44

	return BSP_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	240004d0 	.word	0x240004d0

0800ab04 <BSP_STM32_QSPI_StartReceive>:


uint8_t BSP_STM32_QSPI_StartReceive(QUADSPI_TypeDef * hqspi) {
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]

	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 800ab0c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab10:	2200      	movs	r2, #0
 800ab12:	2120      	movs	r1, #32
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7ff fe75 	bl	800a804 <_QSPI_WaitForFlag>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <BSP_STM32_QSPI_StartReceive+0x20>
 800ab20:	2303      	movs	r3, #3
 800ab22:	e04a      	b.n	800abba <BSP_STM32_QSPI_StartReceive+0xb6>

	// 2. Set CCR configuration register
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ab24:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff fe93 	bl	800a854 <_QSPI_GetConfigCCR>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	615a      	str	r2, [r3, #20]

	// 3. Initiate transmit of data by rewriting Address Register
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 800ab34:	4b23      	ldr	r3, [pc, #140]	; (800abc4 <BSP_STM32_QSPI_StartReceive+0xc0>)
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d003      	beq.n	800ab44 <BSP_STM32_QSPI_StartReceive+0x40>
 800ab3c:	4b21      	ldr	r3, [pc, #132]	; (800abc4 <BSP_STM32_QSPI_StartReceive+0xc0>)
 800ab3e:	691a      	ldr	r2, [r3, #16]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	619a      	str	r2, [r3, #24]

	// 4. If Data block defined than receive data
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 800ab44:	4b1f      	ldr	r3, [pc, #124]	; (800abc4 <BSP_STM32_QSPI_StartReceive+0xc0>)
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d023      	beq.n	800ab94 <BSP_STM32_QSPI_StartReceive+0x90>
		uint32_t xFerCount = qspictx.DataLenth;
 800ab4c:	4b1d      	ldr	r3, [pc, #116]	; (800abc4 <BSP_STM32_QSPI_StartReceive+0xc0>)
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab50:	617b      	str	r3, [r7, #20]
		__IO uint8_t * pData = qspictx.pData;
 800ab52:	4b1c      	ldr	r3, [pc, #112]	; (800abc4 <BSP_STM32_QSPI_StartReceive+0xc0>)
 800ab54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab56:	613b      	str	r3, [r7, #16]
		__IO uint8_t * pRegDR = (uint8_t *)&hqspi->DR;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3320      	adds	r3, #32
 800ab5c:	60fb      	str	r3, [r7, #12]

		while (xFerCount > 0) {
 800ab5e:	e016      	b.n	800ab8e <BSP_STM32_QSPI_StartReceive+0x8a>

			//Wait until FT or TC flag is set to read received data
			if (_QSPI_WaitForFlag(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, 5000)) return BSP_TIMEOUT;
 800ab60:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab64:	2201      	movs	r2, #1
 800ab66:	2106      	movs	r1, #6
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff fe4b 	bl	800a804 <_QSPI_WaitForFlag>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <BSP_STM32_QSPI_StartReceive+0x74>
 800ab74:	2303      	movs	r3, #3
 800ab76:	e020      	b.n	800abba <BSP_STM32_QSPI_StartReceive+0xb6>

			// Copy data from DR register
			*pData = *pRegDR;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	701a      	strb	r2, [r3, #0]

			pData++;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	3301      	adds	r3, #1
 800ab86:	613b      	str	r3, [r7, #16]
			xFerCount--;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	617b      	str	r3, [r7, #20]
		while (xFerCount > 0) {
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1e5      	bne.n	800ab60 <BSP_STM32_QSPI_StartReceive+0x5c>
		}

	}

	// 5. Wait for TC flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_TC, SET, 5000)) return BSP_TIMEOUT;
 800ab94:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab98:	2201      	movs	r2, #1
 800ab9a:	2102      	movs	r1, #2
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7ff fe31 	bl	800a804 <_QSPI_WaitForFlag>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <BSP_STM32_QSPI_StartReceive+0xa8>
 800aba8:	2303      	movs	r3, #3
 800abaa:	e006      	b.n	800abba <BSP_STM32_QSPI_StartReceive+0xb6>

	// 6. Reset TC flag
	hqspi->FCR |= QSPI_FLAG_TC;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f043 0202 	orr.w	r2, r3, #2
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	60da      	str	r2, [r3, #12]


	return BSP_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	240004d0 	.word	0x240004d0

0800abc8 <BSP_STM32_QSPI_StartTransmit>:


uint8_t BSP_STM32_QSPI_StartTransmit(QUADSPI_TypeDef * hqspi) {
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]

	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 800abd0:	f241 3388 	movw	r3, #5000	; 0x1388
 800abd4:	2200      	movs	r2, #0
 800abd6:	2120      	movs	r1, #32
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff fe13 	bl	800a804 <_QSPI_WaitForFlag>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <BSP_STM32_QSPI_StartTransmit+0x20>
 800abe4:	2303      	movs	r3, #3
 800abe6:	e049      	b.n	800ac7c <BSP_STM32_QSPI_StartTransmit+0xb4>

	// 2. Set CCR configuration register
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800abe8:	2100      	movs	r1, #0
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff fe32 	bl	800a854 <_QSPI_GetConfigCCR>
 800abf0:	4602      	mov	r2, r0
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	615a      	str	r2, [r3, #20]

	// 3. Initiate transmit of data by rewriting Address Register
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 800abf6:	4b23      	ldr	r3, [pc, #140]	; (800ac84 <BSP_STM32_QSPI_StartTransmit+0xbc>)
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <BSP_STM32_QSPI_StartTransmit+0x3e>
 800abfe:	4b21      	ldr	r3, [pc, #132]	; (800ac84 <BSP_STM32_QSPI_StartTransmit+0xbc>)
 800ac00:	691a      	ldr	r2, [r3, #16]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	619a      	str	r2, [r3, #24]

	// 4. If Data block defined than receive data
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 800ac06:	4b1f      	ldr	r3, [pc, #124]	; (800ac84 <BSP_STM32_QSPI_StartTransmit+0xbc>)
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d023      	beq.n	800ac56 <BSP_STM32_QSPI_StartTransmit+0x8e>
		uint32_t xFerCount = qspictx.DataLenth;
 800ac0e:	4b1d      	ldr	r3, [pc, #116]	; (800ac84 <BSP_STM32_QSPI_StartTransmit+0xbc>)
 800ac10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac12:	617b      	str	r3, [r7, #20]
		__IO uint8_t * pData = qspictx.pData;
 800ac14:	4b1b      	ldr	r3, [pc, #108]	; (800ac84 <BSP_STM32_QSPI_StartTransmit+0xbc>)
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	613b      	str	r3, [r7, #16]
		__IO uint8_t * pRegDR = (uint8_t *)&hqspi->DR;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3320      	adds	r3, #32
 800ac1e:	60fb      	str	r3, [r7, #12]

		while (xFerCount > 0) {
 800ac20:	e016      	b.n	800ac50 <BSP_STM32_QSPI_StartTransmit+0x88>

			//Wait until FT is set to transmit data
			if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_FT, SET, 5000)) return BSP_TIMEOUT;
 800ac22:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac26:	2201      	movs	r2, #1
 800ac28:	2104      	movs	r1, #4
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff fdea 	bl	800a804 <_QSPI_WaitForFlag>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <BSP_STM32_QSPI_StartTransmit+0x72>
 800ac36:	2303      	movs	r3, #3
 800ac38:	e020      	b.n	800ac7c <BSP_STM32_QSPI_StartTransmit+0xb4>

			// Copy data to DR register
			 *pRegDR = *pData;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	701a      	strb	r2, [r3, #0]

			pData++;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	3301      	adds	r3, #1
 800ac48:	613b      	str	r3, [r7, #16]
			xFerCount--;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	617b      	str	r3, [r7, #20]
		while (xFerCount > 0) {
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e5      	bne.n	800ac22 <BSP_STM32_QSPI_StartTransmit+0x5a>
		}

	}

	// 5. Wait for TC flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_TC, SET, 5000)) return BSP_TIMEOUT;
 800ac56:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	2102      	movs	r1, #2
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff fdd0 	bl	800a804 <_QSPI_WaitForFlag>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <BSP_STM32_QSPI_StartTransmit+0xa6>
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	e006      	b.n	800ac7c <BSP_STM32_QSPI_StartTransmit+0xb4>

	// 6. Reset TC flag
	hqspi->FCR |= QSPI_FLAG_TC;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f043 0202 	orr.w	r2, r3, #2
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	60da      	str	r2, [r3, #12]


	return BSP_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	240004d0 	.word	0x240004d0

0800ac88 <BSP_STM32_QSPI_StartAutoPooling>:

	 return BSP_OK;
}


uint8_t BSP_STM32_QSPI_StartAutoPooling(QUADSPI_TypeDef * hqspi) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 800ac90:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac94:	2200      	movs	r2, #0
 800ac96:	2120      	movs	r1, #32
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff fdb3 	bl	800a804 <_QSPI_WaitForFlag>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <BSP_STM32_QSPI_StartAutoPooling+0x20>
 800aca4:	2303      	movs	r3, #3
 800aca6:	e03a      	b.n	800ad1e <BSP_STM32_QSPI_StartAutoPooling+0x96>

	// 2. Configure Auto Pooling parameters
	hqspi->PSMAR = qspictx.AutoPoolingMatch;
 800aca8:	4b1f      	ldr	r3, [pc, #124]	; (800ad28 <BSP_STM32_QSPI_StartAutoPooling+0xa0>)
 800acaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	629a      	str	r2, [r3, #40]	; 0x28
	hqspi->PSMKR = qspictx.AutoPoolingMask;
 800acb0:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <BSP_STM32_QSPI_StartAutoPooling+0xa0>)
 800acb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	625a      	str	r2, [r3, #36]	; 0x24
	hqspi->PIR = qspictx.AutoPoolingInterval;
 800acb8:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <BSP_STM32_QSPI_StartAutoPooling+0xa0>)
 800acba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	62da      	str	r2, [r3, #44]	; 0x2c

	// 3. Configure CR register for Auto Pooling mode
    MODIFY_REG(hqspi->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), (qspictx.AutoPoolingMode | QSPI_AUTOMATIC_STOP_ENABLE));
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acc8:	4b17      	ldr	r3, [pc, #92]	; (800ad28 <BSP_STM32_QSPI_StartAutoPooling+0xa0>)
 800acca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800accc:	4313      	orrs	r3, r2
 800acce:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	601a      	str	r2, [r3, #0]

    // 4. Configure CCR register
    hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800acd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff fdba 	bl	800a854 <_QSPI_GetConfigCCR>
 800ace0:	4602      	mov	r2, r0
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	615a      	str	r2, [r3, #20]

	// 5. Wait for SM flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_SM, SET, 60000)) return BSP_TIMEOUT;
 800ace6:	f64e 2360 	movw	r3, #60000	; 0xea60
 800acea:	2201      	movs	r2, #1
 800acec:	2108      	movs	r1, #8
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff fd88 	bl	800a804 <_QSPI_WaitForFlag>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <BSP_STM32_QSPI_StartAutoPooling+0x76>
 800acfa:	2303      	movs	r3, #3
 800acfc:	e00f      	b.n	800ad1e <BSP_STM32_QSPI_StartAutoPooling+0x96>

	hqspi->FCR = QSPI_FLAG_SM;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2208      	movs	r2, #8
 800ad02:	60da      	str	r2, [r3, #12]

	// 6. Exit autopooling mode
	SET_BIT(hqspi->CR, QUADSPI_CR_ABORT);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f043 0202 	orr.w	r2, r3, #2
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(hqspi->CCR, QUADSPI_CCR_FMODE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	615a      	str	r2, [r3, #20]

	return BSP_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	240004d0 	.word	0x240004d0

0800ad2c <BSP_STM32_RCC_CLKConfig_RTC>:
 *******************************************************************/

#include "BSP_STM32_RCC.h"

// Setting RTC clock source to external LSE
uint8_t BSP_STM32_RCC_CLKConfig_RTC() {
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0

	uint32_t tickstart;
	uint32_t tmpreg;

	// Enable write access to Backup domain
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad32:	4b2d      	ldr	r3, [pc, #180]	; (800ade8 <BSP_STM32_RCC_CLKConfig_RTC+0xbc>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a2c      	ldr	r2, [pc, #176]	; (800ade8 <BSP_STM32_RCC_CLKConfig_RTC+0xbc>)
 800ad38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad3c:	6013      	str	r3, [r2, #0]

	// Wait for Backup domain Write protection disable
	tickstart = BSP_GetTick();
 800ad3e:	f7fb fb2d 	bl	800639c <BSP_GetTick>
 800ad42:	6078      	str	r0, [r7, #4]

	while ((PWR->CR1 & PWR_CR1_DBP) == 0) if ((BSP_GetTick() - tickstart) > 100) return BSP_ERROR;
 800ad44:	e008      	b.n	800ad58 <BSP_STM32_RCC_CLKConfig_RTC+0x2c>
 800ad46:	f7fb fb29 	bl	800639c <BSP_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b64      	cmp	r3, #100	; 0x64
 800ad52:	d901      	bls.n	800ad58 <BSP_STM32_RCC_CLKConfig_RTC+0x2c>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e042      	b.n	800adde <BSP_STM32_RCC_CLKConfig_RTC+0xb2>
 800ad58:	4b23      	ldr	r3, [pc, #140]	; (800ade8 <BSP_STM32_RCC_CLKConfig_RTC+0xbc>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d0f0      	beq.n	800ad46 <BSP_STM32_RCC_CLKConfig_RTC+0x1a>

	// Reset the Backup domain only if the RTC Clock source selection is modified
	if ((RCC->BDCR & RCC_BDCR_RTCSEL) != RCC_RTCCLKSOURCE_LSE) {
 800ad64:	4b21      	ldr	r3, [pc, #132]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800ad66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad70:	d013      	beq.n	800ad9a <BSP_STM32_RCC_CLKConfig_RTC+0x6e>

		// Store the content of BDCR register before the reset of Backup Domain
	    tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad72:	4b1e      	ldr	r3, [pc, #120]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800ad74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad7a:	603b      	str	r3, [r7, #0]

	    // RTC Clock selection can be changed only if the Backup Domain is reset
	    __BSP_RCC_BACKUPRESET_FORCE();
 800ad7c:	4b1b      	ldr	r3, [pc, #108]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800ad7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad80:	4a1a      	ldr	r2, [pc, #104]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800ad82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad86:	6713      	str	r3, [r2, #112]	; 0x70
	    __BSP_RCC_BACKUPRESET_RELEASE();
 800ad88:	4b18      	ldr	r3, [pc, #96]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800ad8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8c:	4a17      	ldr	r2, [pc, #92]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800ad8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad92:	6713      	str	r3, [r2, #112]	; 0x70

	    // Restore the Content of BDCR register
	    RCC->BDCR = tmpreg;
 800ad94:	4a15      	ldr	r2, [pc, #84]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	6713      	str	r3, [r2, #112]	; 0x70
	}

	// Wait for LSE reactivation
    tickstart = BSP_GetTick();
 800ad9a:	f7fb faff 	bl	800639c <BSP_GetTick>
 800ad9e:	6078      	str	r0, [r7, #4]

	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_ERROR;
 800ada0:	e00a      	b.n	800adb8 <BSP_STM32_RCC_CLKConfig_RTC+0x8c>
 800ada2:	f7fb fafb 	bl	800639c <BSP_GetTick>
 800ada6:	4602      	mov	r2, r0
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d901      	bls.n	800adb8 <BSP_STM32_RCC_CLKConfig_RTC+0x8c>
 800adb4:	2301      	movs	r3, #1
 800adb6:	e012      	b.n	800adde <BSP_STM32_RCC_CLKConfig_RTC+0xb2>
 800adb8:	4b0c      	ldr	r3, [pc, #48]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800adba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d0ee      	beq.n	800ada2 <BSP_STM32_RCC_CLKConfig_RTC+0x76>

	__BSP_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 800adc4:	4b09      	ldr	r3, [pc, #36]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	4a08      	ldr	r2, [pc, #32]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800adca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800adce:	6113      	str	r3, [r2, #16]
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800add2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add4:	4a05      	ldr	r2, [pc, #20]	; (800adec <BSP_STM32_RCC_CLKConfig_RTC+0xc0>)
 800add6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adda:	6713      	str	r3, [r2, #112]	; 0x70

	return BSP_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	58024800 	.word	0x58024800
 800adec:	58024400 	.word	0x58024400

0800adf0 <BSP_STM32_RCC_CLKConfig_FMC>:


// Setting FMC clock source to HCLK
uint8_t BSP_STM32_RCC_CLKConfig_FMC() {
 800adf0:	b480      	push	{r7}
 800adf2:	af00      	add	r7, sp, #0
	// This is default configuration. Nothing to change.
	return BSP_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <BSP_STM32_RCC_CLKConfig_I2C1>:

// Setting I2C1 clock source to PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_I2C1() {
 800ae00:	b480      	push	{r7}
 800ae02:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_I2C123SEL, RCC_I2C123CLKSOURCE_D2PCLK1);
 800ae04:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <BSP_STM32_RCC_CLKConfig_I2C1+0x1c>)
 800ae06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae08:	4a04      	ldr	r2, [pc, #16]	; (800ae1c <BSP_STM32_RCC_CLKConfig_I2C1+0x1c>)
 800ae0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ae0e:	6553      	str	r3, [r2, #84]	; 0x54
	return BSP_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	58024400 	.word	0x58024400

0800ae20 <BSP_STM32_RCC_CLKConfig_I2C4>:

// Setting I2C4 clock source to PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_I2C4() {
 800ae20:	b480      	push	{r7}
 800ae22:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_I2C4SEL, RCC_I2C4CLKSOURCE_D3PCLK1);
 800ae24:	4b05      	ldr	r3, [pc, #20]	; (800ae3c <BSP_STM32_RCC_CLKConfig_I2C4+0x1c>)
 800ae26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae28:	4a04      	ldr	r2, [pc, #16]	; (800ae3c <BSP_STM32_RCC_CLKConfig_I2C4+0x1c>)
 800ae2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae2e:	6593      	str	r3, [r2, #88]	; 0x58
	return BSP_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	58024400 	.word	0x58024400

0800ae40 <BSP_STM32_RCC_CLKConfig_QSPI>:
	return BSP_OK;
}


// Setting QSPI clock source to D1HCLK
uint8_t BSP_STM32_RCC_CLKConfig_QSPI() {
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_QSPISEL, RCC_QSPICLKSOURCE_D1HCLK);
 800ae44:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <BSP_STM32_RCC_CLKConfig_QSPI+0x1c>)
 800ae46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae48:	4a04      	ldr	r2, [pc, #16]	; (800ae5c <BSP_STM32_RCC_CLKConfig_QSPI+0x1c>)
 800ae4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ae4e:	64d3      	str	r3, [r2, #76]	; 0x4c
	return BSP_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	58024400 	.word	0x58024400

0800ae60 <BSP_STM32_RCC_CLKConfig_SDMMC2>:


// Setting SDMMC2 clock source to PLL
uint8_t BSP_STM32_RCC_CLKConfig_SDMMC2() {
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
	RCC->PLLCFGR |= RCC_PLLCFGR_DIVQ1EN;
 800ae64:	4b08      	ldr	r3, [pc, #32]	; (800ae88 <BSP_STM32_RCC_CLKConfig_SDMMC2+0x28>)
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	4a07      	ldr	r2, [pc, #28]	; (800ae88 <BSP_STM32_RCC_CLKConfig_SDMMC2+0x28>)
 800ae6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae6e:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_SDMMCSEL, RCC_SDMMCCLKSOURCE_PLL);
 800ae70:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <BSP_STM32_RCC_CLKConfig_SDMMC2+0x28>)
 800ae72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae74:	4a04      	ldr	r2, [pc, #16]	; (800ae88 <BSP_STM32_RCC_CLKConfig_SDMMC2+0x28>)
 800ae76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae7a:	64d3      	str	r3, [r2, #76]	; 0x4c
	return BSP_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	58024400 	.word	0x58024400

0800ae8c <BSP_STM32_RCC_CLKConfig_UART5>:


// Setting UART5 clock source to D2PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_UART5() {
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USART28SEL, RCC_USART234578CLKSOURCE_D2PCLK1);
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <BSP_STM32_RCC_CLKConfig_UART5+0x1c>)
 800ae92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae94:	4a04      	ldr	r2, [pc, #16]	; (800aea8 <BSP_STM32_RCC_CLKConfig_UART5+0x1c>)
 800ae96:	f023 0307 	bic.w	r3, r3, #7
 800ae9a:	6553      	str	r3, [r2, #84]	; 0x54
	return BSP_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	58024400 	.word	0x58024400

0800aeac <BSP_STM32_RCC_CLKConfig_USART2>:


// Setting UART5 clock source to D2PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_USART2() {
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USART28SEL, RCC_USART234578CLKSOURCE_D2PCLK1);
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <BSP_STM32_RCC_CLKConfig_USART2+0x1c>)
 800aeb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb4:	4a04      	ldr	r2, [pc, #16]	; (800aec8 <BSP_STM32_RCC_CLKConfig_USART2+0x1c>)
 800aeb6:	f023 0307 	bic.w	r3, r3, #7
 800aeba:	6553      	str	r3, [r2, #84]	; 0x54
	return BSP_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	58024400 	.word	0x58024400

0800aecc <BSP_STM32_RCC_CLKConfig_USBFS>:

// Setting USBFS clock source to_HSI48
uint8_t BSP_STM32_RCC_CLKConfig_USBFS() {
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USBSEL, RCC_USBCLKSOURCE_HSI48);
 800aed0:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <BSP_STM32_RCC_CLKConfig_USBFS+0x1c>)
 800aed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed4:	4a04      	ldr	r2, [pc, #16]	; (800aee8 <BSP_STM32_RCC_CLKConfig_USBFS+0x1c>)
 800aed6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aeda:	6553      	str	r3, [r2, #84]	; 0x54
	return BSP_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	58024400 	.word	0x58024400

0800aeec <BSP_STM32_RCC_CLKConfig_ADC>:

// Setting ADC clock source to PLL3
uint8_t BSP_STM32_RCC_CLKConfig_ADC() {
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, RCC_ADCCLKSOURCE_PLL3);
 800aef0:	4b06      	ldr	r3, [pc, #24]	; (800af0c <BSP_STM32_RCC_CLKConfig_ADC+0x20>)
 800aef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800aef8:	4a04      	ldr	r2, [pc, #16]	; (800af0c <BSP_STM32_RCC_CLKConfig_ADC+0x20>)
 800aefa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aefe:	6593      	str	r3, [r2, #88]	; 0x58
	return BSP_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	58024400 	.word	0x58024400

0800af10 <BSP_STM32_RCC_CLKConfig_LTDC>:

// Setting LTDC clock source to PLL3
uint8_t	BSP_STM32_RCC_CLKConfig_LTDC() {
 800af10:	b480      	push	{r7}
 800af12:	af00      	add	r7, sp, #0
	// Nothing to do. PLL3 is default and only clock source for LTDC.
	return BSP_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <BSP_STM32_RCC_PLLClockSource>:

// Setting the PLL clock source
uint8_t BSP_STM32_RCC_PLLClockSource(uint32_t pllsource) {
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, pllsource);
 800af28:	4b07      	ldr	r3, [pc, #28]	; (800af48 <BSP_STM32_RCC_PLLClockSource+0x28>)
 800af2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2c:	f023 0203 	bic.w	r2, r3, #3
 800af30:	4905      	ldr	r1, [pc, #20]	; (800af48 <BSP_STM32_RCC_PLLClockSource+0x28>)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4313      	orrs	r3, r2
 800af36:	628b      	str	r3, [r1, #40]	; 0x28
	return BSP_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400

0800af4c <BSP_STM32_RCC_LSEConfigDrive>:

// Setting LSE drive capability
uint8_t BSP_STM32_RCC_LSEConfigDrive(uint32_t lsedrive) {
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
	MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, lsedrive);
 800af54:	4b07      	ldr	r3, [pc, #28]	; (800af74 <BSP_STM32_RCC_LSEConfigDrive+0x28>)
 800af56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af58:	f023 0218 	bic.w	r2, r3, #24
 800af5c:	4905      	ldr	r1, [pc, #20]	; (800af74 <BSP_STM32_RCC_LSEConfigDrive+0x28>)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4313      	orrs	r3, r2
 800af62:	670b      	str	r3, [r1, #112]	; 0x70
	return BSP_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	58024400 	.word	0x58024400

0800af78 <BSP_STM32_RCC_ConfigHSE>:

// Configure HSE Oscillator
uint8_t BSP_STM32_RCC_ConfigHSE(uint32_t hsestate) {
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]

	uint32_t tickstart;

	// Getting system clock source
    uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 800af80:	4b43      	ldr	r3, [pc, #268]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af88:	617b      	str	r3, [r7, #20]
    uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af8a:	4b41      	ldr	r3, [pc, #260]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800af8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8e:	613b      	str	r3, [r7, #16]

    // When the HSE is used as system clock or clock source for PLL in these cases HSE will not be disabled
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE))) {
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b10      	cmp	r3, #16
 800af94:	d007      	beq.n	800afa6 <BSP_STM32_RCC_ConfigHSE+0x2e>
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b18      	cmp	r3, #24
 800af9a:	d10f      	bne.n	800afbc <BSP_STM32_RCC_ConfigHSE+0x44>
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f003 0303 	and.w	r3, r3, #3
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d10a      	bne.n	800afbc <BSP_STM32_RCC_ConfigHSE+0x44>

    	if (((RCC->CR & RCC_CR_HSERDY) != 0U) && (hsestate == RCC_HSE_OFF)) return BSP_ERROR;
 800afa6:	4b3a      	ldr	r3, [pc, #232]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d067      	beq.n	800b082 <BSP_STM32_RCC_ConfigHSE+0x10a>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d164      	bne.n	800b082 <BSP_STM32_RCC_ConfigHSE+0x10a>
 800afb8:	2301      	movs	r3, #1
 800afba:	e064      	b.n	800b086 <BSP_STM32_RCC_ConfigHSE+0x10e>

    } else {

    	// Set the new HSE configuration
    	switch (hsestate) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afc2:	d01e      	beq.n	800b002 <BSP_STM32_RCC_ConfigHSE+0x8a>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afca:	d827      	bhi.n	800b01c <BSP_STM32_RCC_ConfigHSE+0xa4>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00a      	beq.n	800afe8 <BSP_STM32_RCC_ConfigHSE+0x70>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afd8:	d120      	bne.n	800b01c <BSP_STM32_RCC_ConfigHSE+0xa4>
    	case RCC_HSE_ON:
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
 800afda:	4b2d      	ldr	r3, [pc, #180]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a2c      	ldr	r2, [pc, #176]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800afe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afe4:	6013      	str	r3, [r2, #0]
    		break;
 800afe6:	e025      	b.n	800b034 <BSP_STM32_RCC_ConfigHSE+0xbc>
    	case RCC_HSE_OFF:
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800afe8:	4b29      	ldr	r3, [pc, #164]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a28      	ldr	r2, [pc, #160]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800afee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aff2:	6013      	str	r3, [r2, #0]
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800aff4:	4b26      	ldr	r3, [pc, #152]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a25      	ldr	r2, [pc, #148]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800affa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800affe:	6013      	str	r3, [r2, #0]
    		break;
 800b000:	e018      	b.n	800b034 <BSP_STM32_RCC_ConfigHSE+0xbc>
    	case RCC_HSE_BYPASS:
    		SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800b002:	4b23      	ldr	r3, [pc, #140]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a22      	ldr	r2, [pc, #136]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b00c:	6013      	str	r3, [r2, #0]
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b00e:	4b20      	ldr	r3, [pc, #128]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a1f      	ldr	r2, [pc, #124]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b018:	6013      	str	r3, [r2, #0]
    		break;
 800b01a:	e00b      	b.n	800b034 <BSP_STM32_RCC_ConfigHSE+0xbc>
    	default:
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b01c:	4b1c      	ldr	r3, [pc, #112]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a1b      	ldr	r2, [pc, #108]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b026:	6013      	str	r3, [r2, #0]
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800b028:	4b19      	ldr	r3, [pc, #100]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a18      	ldr	r2, [pc, #96]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b02e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b032:	6013      	str	r3, [r2, #0]
    	}

    	// Check the HSE State

    	tickstart = BSP_GetTick();
 800b034:	f7fb f9b2 	bl	800639c <BSP_GetTick>
 800b038:	60f8      	str	r0, [r7, #12]
    	if (hsestate != RCC_HSE_OFF) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d019      	beq.n	800b074 <BSP_STM32_RCC_ConfigHSE+0xfc>

    		// Wait till HSE is ready
    		while ((RCC->CR & RCC_CR_HSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 800b040:	e008      	b.n	800b054 <BSP_STM32_RCC_ConfigHSE+0xdc>
 800b042:	f7fb f9ab 	bl	800639c <BSP_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	2b64      	cmp	r3, #100	; 0x64
 800b04e:	d901      	bls.n	800b054 <BSP_STM32_RCC_ConfigHSE+0xdc>
 800b050:	2303      	movs	r3, #3
 800b052:	e018      	b.n	800b086 <BSP_STM32_RCC_ConfigHSE+0x10e>
 800b054:	4b0e      	ldr	r3, [pc, #56]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0f0      	beq.n	800b042 <BSP_STM32_RCC_ConfigHSE+0xca>
 800b060:	e010      	b.n	800b084 <BSP_STM32_RCC_ConfigHSE+0x10c>

    	} else {

    		// Wait till HSE is disabled
    		while ((RCC->CR & RCC_CR_HSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 800b062:	f7fb f99b 	bl	800639c <BSP_GetTick>
 800b066:	4602      	mov	r2, r0
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	2b64      	cmp	r3, #100	; 0x64
 800b06e:	d901      	bls.n	800b074 <BSP_STM32_RCC_ConfigHSE+0xfc>
 800b070:	2303      	movs	r3, #3
 800b072:	e008      	b.n	800b086 <BSP_STM32_RCC_ConfigHSE+0x10e>
 800b074:	4b06      	ldr	r3, [pc, #24]	; (800b090 <BSP_STM32_RCC_ConfigHSE+0x118>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1f0      	bne.n	800b062 <BSP_STM32_RCC_ConfigHSE+0xea>
 800b080:	e000      	b.n	800b084 <BSP_STM32_RCC_ConfigHSE+0x10c>
    	if (((RCC->CR & RCC_CR_HSERDY) != 0U) && (hsestate == RCC_HSE_OFF)) return BSP_ERROR;
 800b082:	bf00      	nop

        }
    }
    return BSP_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	58024400 	.word	0x58024400

0800b094 <BSP_STM32_RCC_ConfigHSI>:


// Configure HSI Oscillator
uint8_t BSP_STM32_RCC_ConfigHSI(uint32_t hsistate, uint32_t hsicalvalue) {
 800b094:	b580      	push	{r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]

	uint32_t tickstart;

    // When the HSI is used as system clock it will not be disabled
    const uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 800b09e:	4b44      	ldr	r3, [pc, #272]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0a6:	617b      	str	r3, [r7, #20]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b0a8:	4b41      	ldr	r3, [pc, #260]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ac:	613b      	str	r3, [r7, #16]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI))) {
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d007      	beq.n	800b0c4 <BSP_STM32_RCC_ConfigHSI+0x30>
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2b18      	cmp	r3, #24
 800b0b8:	d134      	bne.n	800b124 <BSP_STM32_RCC_ConfigHSI+0x90>
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f003 0303 	and.w	r3, r3, #3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d12f      	bne.n	800b124 <BSP_STM32_RCC_ConfigHSI+0x90>

    	// When HSI is used as system clock it will not be disabled */
    	if (((RCC->CR & RCC_CR_HSIRDY) != 0U) && (hsistate == RCC_HSI_OFF)) {
 800b0c4:	4b3a      	ldr	r3, [pc, #232]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d004      	beq.n	800b0da <BSP_STM32_RCC_ConfigHSI+0x46>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <BSP_STM32_RCC_ConfigHSI+0x46>

    		return BSP_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e066      	b.n	800b1a8 <BSP_STM32_RCC_ConfigHSI+0x114>

    	} else {

    		// Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8)
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 800b0da:	4b35      	ldr	r3, [pc, #212]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f023 0219 	bic.w	r2, r3, #25
 800b0e2:	4933      	ldr	r1, [pc, #204]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	600b      	str	r3, [r1, #0]

    		// Wait till HSI is ready
    		tickstart = BSP_GetTick();
 800b0ea:	f7fb f957 	bl	800639c <BSP_GetTick>
 800b0ee:	60f8      	str	r0, [r7, #12]
    		while ((RCC->CR & RCC_CR_HSIRDY) == 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b0f0:	e008      	b.n	800b104 <BSP_STM32_RCC_ConfigHSI+0x70>
 800b0f2:	f7fb f953 	bl	800639c <BSP_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d901      	bls.n	800b104 <BSP_STM32_RCC_ConfigHSI+0x70>
 800b100:	2303      	movs	r3, #3
 800b102:	e051      	b.n	800b1a8 <BSP_STM32_RCC_ConfigHSI+0x114>
 800b104:	4b2a      	ldr	r3, [pc, #168]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0304 	and.w	r3, r3, #4
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0f0      	beq.n	800b0f2 <BSP_STM32_RCC_ConfigHSI+0x5e>

    	}

        // Adjusts the Internal High Speed oscillator (HSI) calibration value (REV_V only)
    	MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, hsicalvalue << RCC_HSICFGR_HSITRIM_Pos);
 800b110:	4b27      	ldr	r3, [pc, #156]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	061b      	lsls	r3, r3, #24
 800b11c:	4924      	ldr	r1, [pc, #144]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b11e:	4313      	orrs	r3, r2
 800b120:	604b      	str	r3, [r1, #4]
 800b122:	e040      	b.n	800b1a6 <BSP_STM32_RCC_ConfigHSI+0x112>

    } else {


    	// Check the HSI State
    	if (hsistate != RCC_HSI_OFF) {
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d024      	beq.n	800b174 <BSP_STM32_RCC_ConfigHSI+0xe0>

    		// Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8)
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 800b12a:	4b21      	ldr	r3, [pc, #132]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f023 0219 	bic.w	r2, r3, #25
 800b132:	491f      	ldr	r1, [pc, #124]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4313      	orrs	r3, r2
 800b138:	600b      	str	r3, [r1, #0]

    		// Wait till HSI is ready
    		tickstart = BSP_GetTick();
 800b13a:	f7fb f92f 	bl	800639c <BSP_GetTick>
 800b13e:	60f8      	str	r0, [r7, #12]
    		while ((RCC->CR & RCC_CR_HSIRDY) == 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b140:	e008      	b.n	800b154 <BSP_STM32_RCC_ConfigHSI+0xc0>
 800b142:	f7fb f92b 	bl	800639c <BSP_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d901      	bls.n	800b154 <BSP_STM32_RCC_ConfigHSI+0xc0>
 800b150:	2303      	movs	r3, #3
 800b152:	e029      	b.n	800b1a8 <BSP_STM32_RCC_ConfigHSI+0x114>
 800b154:	4b16      	ldr	r3, [pc, #88]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d0f0      	beq.n	800b142 <BSP_STM32_RCC_ConfigHSI+0xae>

    		// Adjusts the Internal High Speed oscillator (HSI) calibration value (REV_V only)
    		MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, hsicalvalue << RCC_HSICFGR_HSITRIM_Pos);
 800b160:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	061b      	lsls	r3, r3, #24
 800b16c:	4910      	ldr	r1, [pc, #64]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b16e:	4313      	orrs	r3, r2
 800b170:	604b      	str	r3, [r1, #4]
 800b172:	e018      	b.n	800b1a6 <BSP_STM32_RCC_ConfigHSI+0x112>

    	} else {

    		// Disable the Internal High Speed oscillator (HSI)
    		CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b174:	4b0e      	ldr	r3, [pc, #56]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a0d      	ldr	r2, [pc, #52]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	6013      	str	r3, [r2, #0]

    	  	// Wait till HSI is disabled
    	  	tickstart = BSP_GetTick();
 800b180:	f7fb f90c 	bl	800639c <BSP_GetTick>
 800b184:	60f8      	str	r0, [r7, #12]
    	  	while ((RCC->CR & RCC_CR_HSIRDY) != 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b186:	e008      	b.n	800b19a <BSP_STM32_RCC_ConfigHSI+0x106>
 800b188:	f7fb f908 	bl	800639c <BSP_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	2b02      	cmp	r3, #2
 800b194:	d901      	bls.n	800b19a <BSP_STM32_RCC_ConfigHSI+0x106>
 800b196:	2303      	movs	r3, #3
 800b198:	e006      	b.n	800b1a8 <BSP_STM32_RCC_ConfigHSI+0x114>
 800b19a:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <BSP_STM32_RCC_ConfigHSI+0x11c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0304 	and.w	r3, r3, #4
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1f0      	bne.n	800b188 <BSP_STM32_RCC_ConfigHSI+0xf4>
    	}

    }

    return BSP_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3718      	adds	r7, #24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	58024400 	.word	0x58024400

0800b1b4 <BSP_STM32_RCC_ConfigLSE>:


// Configure LSE Oscillator
uint8_t BSP_STM32_RCC_ConfigLSE(uint32_t lsestate) {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	// Enable write access to Backup domain
    PWR->CR1 |= PWR_CR1_DBP;
 800b1bc:	4b40      	ldr	r3, [pc, #256]	; (800b2c0 <BSP_STM32_RCC_ConfigLSE+0x10c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a3f      	ldr	r2, [pc, #252]	; (800b2c0 <BSP_STM32_RCC_ConfigLSE+0x10c>)
 800b1c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1c6:	6013      	str	r3, [r2, #0]

    // Wait for Backup domain Write protection disable
    tickstart = BSP_GetTick();
 800b1c8:	f7fb f8e8 	bl	800639c <BSP_GetTick>
 800b1cc:	60f8      	str	r0, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 800b1ce:	e008      	b.n	800b1e2 <BSP_STM32_RCC_ConfigLSE+0x2e>
 800b1d0:	f7fb f8e4 	bl	800639c <BSP_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b64      	cmp	r3, #100	; 0x64
 800b1dc:	d901      	bls.n	800b1e2 <BSP_STM32_RCC_ConfigLSE+0x2e>
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e069      	b.n	800b2b6 <BSP_STM32_RCC_ConfigLSE+0x102>
 800b1e2:	4b37      	ldr	r3, [pc, #220]	; (800b2c0 <BSP_STM32_RCC_ConfigLSE+0x10c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0f0      	beq.n	800b1d0 <BSP_STM32_RCC_ConfigLSE+0x1c>

    // Set the new LSE configuration
    switch (lsestate) {
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b05      	cmp	r3, #5
 800b1f2:	d01c      	beq.n	800b22e <BSP_STM32_RCC_ConfigLSE+0x7a>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	d826      	bhi.n	800b248 <BSP_STM32_RCC_ConfigLSE+0x94>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d009      	beq.n	800b214 <BSP_STM32_RCC_ConfigLSE+0x60>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d120      	bne.n	800b248 <BSP_STM32_RCC_ConfigLSE+0x94>
    case RCC_LSE_ON:
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b206:	4b2f      	ldr	r3, [pc, #188]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20a:	4a2e      	ldr	r2, [pc, #184]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b20c:	f043 0301 	orr.w	r3, r3, #1
 800b210:	6713      	str	r3, [r2, #112]	; 0x70
    	break;
 800b212:	e025      	b.n	800b260 <BSP_STM32_RCC_ConfigLSE+0xac>
    case RCC_LSE_OFF:
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b214:	4b2b      	ldr	r3, [pc, #172]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b218:	4a2a      	ldr	r2, [pc, #168]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b21a:	f023 0301 	bic.w	r3, r3, #1
 800b21e:	6713      	str	r3, [r2, #112]	; 0x70
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b220:	4b28      	ldr	r3, [pc, #160]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b224:	4a27      	ldr	r2, [pc, #156]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b226:	f023 0304 	bic.w	r3, r3, #4
 800b22a:	6713      	str	r3, [r2, #112]	; 0x70
    	break;
 800b22c:	e018      	b.n	800b260 <BSP_STM32_RCC_ConfigLSE+0xac>
    case RCC_LSE_BYPASS:
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b22e:	4b25      	ldr	r3, [pc, #148]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b232:	4a24      	ldr	r2, [pc, #144]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b234:	f043 0304 	orr.w	r3, r3, #4
 800b238:	6713      	str	r3, [r2, #112]	; 0x70
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b23a:	4b22      	ldr	r3, [pc, #136]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23e:	4a21      	ldr	r2, [pc, #132]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b240:	f043 0301 	orr.w	r3, r3, #1
 800b244:	6713      	str	r3, [r2, #112]	; 0x70
    	break;
 800b246:	e00b      	b.n	800b260 <BSP_STM32_RCC_ConfigLSE+0xac>
	default:
		CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b248:	4b1e      	ldr	r3, [pc, #120]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24c:	4a1d      	ldr	r2, [pc, #116]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b24e:	f023 0301 	bic.w	r3, r3, #1
 800b252:	6713      	str	r3, [r2, #112]	; 0x70
		CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b254:	4b1b      	ldr	r3, [pc, #108]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b258:	4a1a      	ldr	r2, [pc, #104]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b25a:	f023 0304 	bic.w	r3, r3, #4
 800b25e:	6713      	str	r3, [r2, #112]	; 0x70
    }


    // Check the LSE State
    tickstart = BSP_GetTick();
 800b260:	f7fb f89c 	bl	800639c <BSP_GetTick>
 800b264:	60f8      	str	r0, [r7, #12]
    if (lsestate != RCC_LSE_OFF) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01d      	beq.n	800b2a8 <BSP_STM32_RCC_ConfigLSE+0xf4>

    	// Wait till LSE is ready
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 800b26c:	e00a      	b.n	800b284 <BSP_STM32_RCC_ConfigLSE+0xd0>
 800b26e:	f7fb f895 	bl	800639c <BSP_GetTick>
 800b272:	4602      	mov	r2, r0
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d901      	bls.n	800b284 <BSP_STM32_RCC_ConfigLSE+0xd0>
 800b280:	2303      	movs	r3, #3
 800b282:	e018      	b.n	800b2b6 <BSP_STM32_RCC_ConfigLSE+0x102>
 800b284:	4b0f      	ldr	r3, [pc, #60]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d0ee      	beq.n	800b26e <BSP_STM32_RCC_ConfigLSE+0xba>
 800b290:	e010      	b.n	800b2b4 <BSP_STM32_RCC_ConfigLSE+0x100>

    } else {

    	// Wait till LSE is disabled
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 800b292:	f7fb f883 	bl	800639c <BSP_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d901      	bls.n	800b2a8 <BSP_STM32_RCC_ConfigLSE+0xf4>
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e006      	b.n	800b2b6 <BSP_STM32_RCC_ConfigLSE+0x102>
 800b2a8:	4b06      	ldr	r3, [pc, #24]	; (800b2c4 <BSP_STM32_RCC_ConfigLSE+0x110>)
 800b2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1ee      	bne.n	800b292 <BSP_STM32_RCC_ConfigLSE+0xde>

    }
    return BSP_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	58024800 	.word	0x58024800
 800b2c4:	58024400 	.word	0x58024400

0800b2c8 <BSP_STM32_RCC_ConfigHSI48>:

// Configure HSI48 Oscillator
uint8_t BSP_STM32_RCC_ConfigHSI48(uint32_t hsi48state) {
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]

	uint32_t tickstart = BSP_GetTick();
 800b2d0:	f7fb f864 	bl	800639c <BSP_GetTick>
 800b2d4:	60f8      	str	r0, [r7, #12]

    // Check the HSI48 State
    if (hsi48state != RCC_HSI48_OFF) {
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d016      	beq.n	800b30a <BSP_STM32_RCC_ConfigHSI48+0x42>
    	// Enable the Internal Low Speed oscillator (HSI48)
    	SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 800b2dc:	4b18      	ldr	r3, [pc, #96]	; (800b340 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a17      	ldr	r2, [pc, #92]	; (800b340 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 800b2e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b2e6:	6013      	str	r3, [r2, #0]

    	// Wait till HSI48 is ready
    	while ((RCC->CR & RCC_CR_HSI48RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b2e8:	e008      	b.n	800b2fc <BSP_STM32_RCC_ConfigHSI48+0x34>
 800b2ea:	f7fb f857 	bl	800639c <BSP_GetTick>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d901      	bls.n	800b2fc <BSP_STM32_RCC_ConfigHSI48+0x34>
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e01d      	b.n	800b338 <BSP_STM32_RCC_ConfigHSI48+0x70>
 800b2fc:	4b10      	ldr	r3, [pc, #64]	; (800b340 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0f0      	beq.n	800b2ea <BSP_STM32_RCC_ConfigHSI48+0x22>
 800b308:	e015      	b.n	800b336 <BSP_STM32_RCC_ConfigHSI48+0x6e>

    } else {

    	// Disable the Internal Low Speed oscillator (HSI48)
    	CLEAR_BIT(RCC->CR, RCC_CR_HSI48ON);
 800b30a:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a0c      	ldr	r2, [pc, #48]	; (800b340 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 800b310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b314:	6013      	str	r3, [r2, #0]

    	/* Wait till HSI48 is ready */
    	while ((RCC->CR & RCC_CR_HSI48RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b316:	e008      	b.n	800b32a <BSP_STM32_RCC_ConfigHSI48+0x62>
 800b318:	f7fb f840 	bl	800639c <BSP_GetTick>
 800b31c:	4602      	mov	r2, r0
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	2b02      	cmp	r3, #2
 800b324:	d901      	bls.n	800b32a <BSP_STM32_RCC_ConfigHSI48+0x62>
 800b326:	2303      	movs	r3, #3
 800b328:	e006      	b.n	800b338 <BSP_STM32_RCC_ConfigHSI48+0x70>
 800b32a:	4b05      	ldr	r3, [pc, #20]	; (800b340 <BSP_STM32_RCC_ConfigHSI48+0x78>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1f0      	bne.n	800b318 <BSP_STM32_RCC_ConfigHSI48+0x50>

    }

    return BSP_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	58024400 	.word	0x58024400

0800b344 <BSP_STM32_RCC_ConfigPLL1>:


uint8_t BSP_STM32_RCC_ConfigPLL1(uint32_t pllstate, uint32_t pllsource, uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r) {
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]

	uint32_t tickstart;

	// Check if the PLL is used as system clock or not
	if ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL1) {
 800b352:	4b5a      	ldr	r3, [pc, #360]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b35a:	2b18      	cmp	r3, #24
 800b35c:	f000 80a7 	beq.w	800b4ae <BSP_STM32_RCC_ConfigPLL1+0x16a>

		if (pllstate == RCC_PLL_ON) {
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b02      	cmp	r3, #2
 800b364:	f040 8089 	bne.w	800b47a <BSP_STM32_RCC_ConfigPLL1+0x136>

			// Disable the main PLL
			CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800b368:	4b54      	ldr	r3, [pc, #336]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a53      	ldr	r2, [pc, #332]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b36e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b372:	6013      	str	r3, [r2, #0]

			// Wait till PLL is disabled
			tickstart = BSP_GetTick();
 800b374:	f7fb f812 	bl	800639c <BSP_GetTick>
 800b378:	6178      	str	r0, [r7, #20]
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b37a:	e008      	b.n	800b38e <BSP_STM32_RCC_ConfigPLL1+0x4a>
 800b37c:	f7fb f80e 	bl	800639c <BSP_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	2b02      	cmp	r3, #2
 800b388:	d901      	bls.n	800b38e <BSP_STM32_RCC_ConfigPLL1+0x4a>
 800b38a:	2303      	movs	r3, #3
 800b38c:	e092      	b.n	800b4b4 <BSP_STM32_RCC_ConfigPLL1+0x170>
 800b38e:	4b4b      	ldr	r3, [pc, #300]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f0      	bne.n	800b37c <BSP_STM32_RCC_ConfigPLL1+0x38>

			// Configure the main PLL clock source, multiplication and division factors
			MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | RCC_PLLCKSELR_DIVM1) , (pllsource | ( m << 4)));
 800b39a:	4b48      	ldr	r3, [pc, #288]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b39c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b39e:	4b48      	ldr	r3, [pc, #288]	; (800b4c0 <BSP_STM32_RCC_ConfigPLL1+0x17c>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	6a3a      	ldr	r2, [r7, #32]
 800b3a4:	0111      	lsls	r1, r2, #4
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	4944      	ldr	r1, [pc, #272]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	628b      	str	r3, [r1, #40]	; 0x28
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	025b      	lsls	r3, r3, #9
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	041b      	lsls	r3, r3, #16
 800b3c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	061b      	lsls	r3, r3, #24
 800b3d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3d8:	4938      	ldr	r1, [pc, #224]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	630b      	str	r3, [r1, #48]	; 0x30

			// Disable PLLFRACN
			CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 800b3de:	4b37      	ldr	r3, [pc, #220]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e2:	4a36      	ldr	r2, [pc, #216]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b3e4:	f023 0301 	bic.w	r3, r3, #1
 800b3e8:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Configure PLL PLL1FRACN (always 0 for this project)
			MODIFY_REG(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1, 0 << RCC_PLL1FRACR_FRACN1_Pos);
 800b3ea:	4b34      	ldr	r3, [pc, #208]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b3ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3ee:	4933      	ldr	r1, [pc, #204]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b3f0:	4b34      	ldr	r3, [pc, #208]	; (800b4c4 <BSP_STM32_RCC_ConfigPLL1+0x180>)
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	634b      	str	r3, [r1, #52]	; 0x34

			// Select PLL1 input reference frequency range: VCI
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, pllrge);
 800b3f6:	4b31      	ldr	r3, [pc, #196]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fa:	f023 020c 	bic.w	r2, r3, #12
 800b3fe:	492f      	ldr	r1, [pc, #188]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4313      	orrs	r3, r2
 800b404:	62cb      	str	r3, [r1, #44]	; 0x2c

			// Select PLL1 output frequency range : VCO
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, pllvcosel);
 800b406:	4b2d      	ldr	r3, [pc, #180]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40a:	f023 0202 	bic.w	r2, r3, #2
 800b40e:	492b      	ldr	r1, [pc, #172]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	4313      	orrs	r3, r2
 800b414:	62cb      	str	r3, [r1, #44]	; 0x2c

			// Enable PLL System Clock output
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVP);
 800b416:	4b29      	ldr	r3, [pc, #164]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4a28      	ldr	r2, [pc, #160]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b41c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b420:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Enable PLL1Q Clock output
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVQ);
 800b422:	4b26      	ldr	r3, [pc, #152]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	4a25      	ldr	r2, [pc, #148]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b42c:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Enable PLL1R  Clock output
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVR);
 800b42e:	4b23      	ldr	r3, [pc, #140]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b432:	4a22      	ldr	r2, [pc, #136]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b438:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Enable PLL1FRACN
			SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 800b43a:	4b20      	ldr	r3, [pc, #128]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	4a1f      	ldr	r2, [pc, #124]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b440:	f043 0301 	orr.w	r3, r3, #1
 800b444:	62d3      	str	r3, [r2, #44]	; 0x2c

			// Enable the main PLL
			SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 800b446:	4b1d      	ldr	r3, [pc, #116]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a1c      	ldr	r2, [pc, #112]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b44c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b450:	6013      	str	r3, [r2, #0]

			// Wait till PLL is ready
			tickstart = BSP_GetTick();
 800b452:	f7fa ffa3 	bl	800639c <BSP_GetTick>
 800b456:	6178      	str	r0, [r7, #20]
			while ((RCC->CR & RCC_CR_PLL1RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b458:	e008      	b.n	800b46c <BSP_STM32_RCC_ConfigPLL1+0x128>
 800b45a:	f7fa ff9f 	bl	800639c <BSP_GetTick>
 800b45e:	4602      	mov	r2, r0
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	2b02      	cmp	r3, #2
 800b466:	d901      	bls.n	800b46c <BSP_STM32_RCC_ConfigPLL1+0x128>
 800b468:	2303      	movs	r3, #3
 800b46a:	e023      	b.n	800b4b4 <BSP_STM32_RCC_ConfigPLL1+0x170>
 800b46c:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d0f0      	beq.n	800b45a <BSP_STM32_RCC_ConfigPLL1+0x116>
 800b478:	e01b      	b.n	800b4b2 <BSP_STM32_RCC_ConfigPLL1+0x16e>

		} else {

			// Disable the main PLL
			CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800b47a:	4b10      	ldr	r3, [pc, #64]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a0f      	ldr	r2, [pc, #60]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b484:	6013      	str	r3, [r2, #0]

			// Wait till PLL is disabled
			tickstart = BSP_GetTick();
 800b486:	f7fa ff89 	bl	800639c <BSP_GetTick>
 800b48a:	6178      	str	r0, [r7, #20]
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b48c:	e008      	b.n	800b4a0 <BSP_STM32_RCC_ConfigPLL1+0x15c>
 800b48e:	f7fa ff85 	bl	800639c <BSP_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d901      	bls.n	800b4a0 <BSP_STM32_RCC_ConfigPLL1+0x15c>
 800b49c:	2303      	movs	r3, #3
 800b49e:	e009      	b.n	800b4b4 <BSP_STM32_RCC_ConfigPLL1+0x170>
 800b4a0:	4b06      	ldr	r3, [pc, #24]	; (800b4bc <BSP_STM32_RCC_ConfigPLL1+0x178>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1f0      	bne.n	800b48e <BSP_STM32_RCC_ConfigPLL1+0x14a>
 800b4ac:	e001      	b.n	800b4b2 <BSP_STM32_RCC_ConfigPLL1+0x16e>
		}

    } else {

    	// PLL1 already used as SYSCLK source, therefore full configuration cannot be completed
    	return BSP_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e000      	b.n	800b4b4 <BSP_STM32_RCC_ConfigPLL1+0x170>

    }

	return BSP_OK;
 800b4b2:	2300      	movs	r3, #0

}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	58024400 	.word	0x58024400
 800b4c0:	fffffc0c 	.word	0xfffffc0c
 800b4c4:	ffff0007 	.word	0xffff0007

0800b4c8 <BSP_STM32_RCC_ConfigPLL3>:


uint8_t BSP_STM32_RCC_ConfigPLL3(uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r, uint32_t frac) {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	603b      	str	r3, [r7, #0]

	uint32_t tickstart;

	// Check that PLL3 OSC clock source is already set
	if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLSOURCE_NONE) return BSP_ERROR;
 800b4d6:	4b4b      	ldr	r3, [pc, #300]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d101      	bne.n	800b4e6 <BSP_STM32_RCC_ConfigPLL3+0x1e>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e089      	b.n	800b5fa <BSP_STM32_RCC_ConfigPLL3+0x132>

	// Disable PLL3
	CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 800b4e6:	4b47      	ldr	r3, [pc, #284]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a46      	ldr	r2, [pc, #280]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b4ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4f0:	6013      	str	r3, [r2, #0]

    // Wait till PLL3 is disabled
	tickstart = BSP_GetTick();
 800b4f2:	f7fa ff53 	bl	800639c <BSP_GetTick>
 800b4f6:	6178      	str	r0, [r7, #20]
	while ((RCC->CR & RCC_CR_PLL3RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b4f8:	e008      	b.n	800b50c <BSP_STM32_RCC_ConfigPLL3+0x44>
 800b4fa:	f7fa ff4f 	bl	800639c <BSP_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	2b02      	cmp	r3, #2
 800b506:	d901      	bls.n	800b50c <BSP_STM32_RCC_ConfigPLL3+0x44>
 800b508:	2303      	movs	r3, #3
 800b50a:	e076      	b.n	800b5fa <BSP_STM32_RCC_ConfigPLL3+0x132>
 800b50c:	4b3d      	ldr	r3, [pc, #244]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1f0      	bne.n	800b4fa <BSP_STM32_RCC_ConfigPLL3+0x32>

    // Configure the PLL3  multiplication and division factors
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3, (m << 20));
 800b518:	4b3a      	ldr	r3, [pc, #232]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	051b      	lsls	r3, r3, #20
 800b524:	4937      	ldr	r1, [pc, #220]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b526:	4313      	orrs	r3, r2
 800b528:	628b      	str	r3, [r1, #40]	; 0x28
    WRITE_REG (RCC->PLL3DIVR, (((n - 1) & RCC_PLL3DIVR_N3) | (((p - 1) << 9U) & RCC_PLL3DIVR_P3) | (((q -1) << 16U) & RCC_PLL3DIVR_Q3) | (((r - 1) << 24U) & RCC_PLL3DIVR_R3)));
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	3b01      	subs	r3, #1
 800b536:	025b      	lsls	r3, r3, #9
 800b538:	b29b      	uxth	r3, r3
 800b53a:	431a      	orrs	r2, r3
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	3b01      	subs	r3, #1
 800b540:	041b      	lsls	r3, r3, #16
 800b542:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b546:	431a      	orrs	r2, r3
 800b548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54a:	3b01      	subs	r3, #1
 800b54c:	061b      	lsls	r3, r3, #24
 800b54e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b552:	492c      	ldr	r1, [pc, #176]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b554:	4313      	orrs	r3, r2
 800b556:	640b      	str	r3, [r1, #64]	; 0x40

	// Select PLL3 input reference frequency range: VCI
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3RGE, pllrge);
 800b558:	4b2a      	ldr	r3, [pc, #168]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b560:	4928      	ldr	r1, [pc, #160]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4313      	orrs	r3, r2
 800b566:	62cb      	str	r3, [r1, #44]	; 0x2c

	// Select PLL3 output frequency range : VCO
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3VCOSEL, pllvcosel);
 800b568:	4b26      	ldr	r3, [pc, #152]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b570:	4924      	ldr	r1, [pc, #144]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	4313      	orrs	r3, r2
 800b576:	62cb      	str	r3, [r1, #44]	; 0x2c

	// Disable PLL3FRACN
    CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN);
 800b578:	4b22      	ldr	r3, [pc, #136]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	4a21      	ldr	r2, [pc, #132]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b57e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b582:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Configures PLL3 clock Fractional Part Of The Multiplication Factor
    MODIFY_REG(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3, frac << RCC_PLL3FRACR_FRACN3_Pos);
 800b584:	4b1f      	ldr	r3, [pc, #124]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b588:	4b1f      	ldr	r3, [pc, #124]	; (800b608 <BSP_STM32_RCC_ConfigPLL3+0x140>)
 800b58a:	4013      	ands	r3, r2
 800b58c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b58e:	00d2      	lsls	r2, r2, #3
 800b590:	491c      	ldr	r1, [pc, #112]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b592:	4313      	orrs	r3, r2
 800b594:	644b      	str	r3, [r1, #68]	; 0x44

	// Enable PLL3FRACN
    SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN);
 800b596:	4b1b      	ldr	r3, [pc, #108]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	4a1a      	ldr	r2, [pc, #104]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b59c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5a0:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Enable the PLL3 clock outputs
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVP);
 800b5a2:	4b18      	ldr	r3, [pc, #96]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a6:	4a17      	ldr	r2, [pc, #92]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVQ);
 800b5ae:	4b15      	ldr	r3, [pc, #84]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b2:	4a14      	ldr	r2, [pc, #80]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVR);
 800b5ba:	4b12      	ldr	r3, [pc, #72]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5be:	4a11      	ldr	r2, [pc, #68]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5c4:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Enable PLL3
    SET_BIT(RCC->CR, RCC_CR_PLL3ON);
 800b5c6:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a0e      	ldr	r2, [pc, #56]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d0:	6013      	str	r3, [r2, #0]

    // Wait till PLL3 is enabled
	tickstart = BSP_GetTick();
 800b5d2:	f7fa fee3 	bl	800639c <BSP_GetTick>
 800b5d6:	6178      	str	r0, [r7, #20]
	while ((RCC->CR & RCC_CR_PLL3RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800b5d8:	e008      	b.n	800b5ec <BSP_STM32_RCC_ConfigPLL3+0x124>
 800b5da:	f7fa fedf 	bl	800639c <BSP_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d901      	bls.n	800b5ec <BSP_STM32_RCC_ConfigPLL3+0x124>
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e006      	b.n	800b5fa <BSP_STM32_RCC_ConfigPLL3+0x132>
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <BSP_STM32_RCC_ConfigPLL3+0x13c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0f0      	beq.n	800b5da <BSP_STM32_RCC_ConfigPLL3+0x112>

	return BSP_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	58024400 	.word	0x58024400
 800b608:	ffff0007 	.word	0xffff0007

0800b60c <BSP_STM32_RCC_ClockConfig>:

uint8_t BSP_STM32_RCC_ClockConfig(uint32_t clocktype, uint32_t SYSSource, uint32_t SYSDiv, uint32_t AHBDiv, uint32_t APB1Div, uint32_t APB2Div, uint32_t APB3Div, uint32_t APB4Div, uint32_t flatency) {
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]

	// To correctly read data from FLASH memory, the number of wait states (LATENCY) must be correctly programmed
	// according to the frequency of the CPU clock (HCLK) and the supply voltage of the device.

	// Increasing the CPU frequency
	if (flatency > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))  {
 800b61a:	4b82      	ldr	r3, [pc, #520]	; (800b824 <BSP_STM32_RCC_ClockConfig+0x218>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 030f 	and.w	r3, r3, #15
 800b622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b624:	429a      	cmp	r2, r3
 800b626:	d910      	bls.n	800b64a <BSP_STM32_RCC_ClockConfig+0x3e>

	    // Program the new number of wait states to the LATENCY bits in the FLASH_ACR register
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, flatency);
 800b628:	4b7e      	ldr	r3, [pc, #504]	; (800b824 <BSP_STM32_RCC_ClockConfig+0x218>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f023 020f 	bic.w	r2, r3, #15
 800b630:	497c      	ldr	r1, [pc, #496]	; (800b824 <BSP_STM32_RCC_ClockConfig+0x218>)
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	4313      	orrs	r3, r2
 800b636:	600b      	str	r3, [r1, #0]

	    // Check that the new number of wait states is taken into account to access the Flash memory by reading the FLASH_ACR register
	    if ((READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)) != flatency) return BSP_ERROR;
 800b638:	4b7a      	ldr	r3, [pc, #488]	; (800b824 <BSP_STM32_RCC_ClockConfig+0x218>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 030f 	and.w	r3, r3, #15
 800b640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b642:	429a      	cmp	r2, r3
 800b644:	d001      	beq.n	800b64a <BSP_STM32_RCC_ClockConfig+0x3e>
 800b646:	2301      	movs	r3, #1
 800b648:	e141      	b.n	800b8ce <BSP_STM32_RCC_ClockConfig+0x2c2>

	}

	// Clocks Configuration
	if ((clocktype & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1) {
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f003 0304 	and.w	r3, r3, #4
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00e      	beq.n	800b672 <BSP_STM32_RCC_ClockConfig+0x66>

		if (APB3Div > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, APB3Div);
 800b654:	4b74      	ldr	r3, [pc, #464]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b65e:	429a      	cmp	r2, r3
 800b660:	d907      	bls.n	800b672 <BSP_STM32_RCC_ClockConfig+0x66>
 800b662:	4b71      	ldr	r3, [pc, #452]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b66a:	496f      	ldr	r1, [pc, #444]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	4313      	orrs	r3, r2
 800b670:	618b      	str	r3, [r1, #24]

	}

	if ((clocktype & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f003 0308 	and.w	r3, r3, #8
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00e      	beq.n	800b69a <BSP_STM32_RCC_ClockConfig+0x8e>

		if (APB1Div > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, APB1Div);
 800b67c:	4b6a      	ldr	r3, [pc, #424]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b67e:	69db      	ldr	r3, [r3, #28]
 800b680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b684:	6a3a      	ldr	r2, [r7, #32]
 800b686:	429a      	cmp	r2, r3
 800b688:	d907      	bls.n	800b69a <BSP_STM32_RCC_ClockConfig+0x8e>
 800b68a:	4b67      	ldr	r3, [pc, #412]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b692:	4965      	ldr	r1, [pc, #404]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	4313      	orrs	r3, r2
 800b698:	61cb      	str	r3, [r1, #28]

	}

	if ((clocktype & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f003 0310 	and.w	r3, r3, #16
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00e      	beq.n	800b6c2 <BSP_STM32_RCC_ClockConfig+0xb6>

		if (APB2Div > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, APB2Div);
 800b6a4:	4b60      	ldr	r3, [pc, #384]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d907      	bls.n	800b6c2 <BSP_STM32_RCC_ClockConfig+0xb6>
 800b6b2:	4b5d      	ldr	r3, [pc, #372]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b6b4:	69db      	ldr	r3, [r3, #28]
 800b6b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b6ba:	495b      	ldr	r1, [pc, #364]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	61cb      	str	r3, [r1, #28]

	}

	if ((clocktype & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1) {
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f003 0320 	and.w	r3, r3, #32
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00e      	beq.n	800b6ea <BSP_STM32_RCC_ClockConfig+0xde>

	    if (APB4Div > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 800b6cc:	4b56      	ldr	r3, [pc, #344]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d907      	bls.n	800b6ea <BSP_STM32_RCC_ClockConfig+0xde>
 800b6da:	4b53      	ldr	r3, [pc, #332]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b6e2:	4951      	ldr	r1, [pc, #324]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	620b      	str	r3, [r1, #32]

	}

	if ((clocktype & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f003 0302 	and.w	r3, r3, #2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00e      	beq.n	800b712 <BSP_STM32_RCC_ClockConfig+0x106>

		if (AHBDiv > (RCC->D1CFGR & RCC_D1CFGR_HPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, AHBDiv);
 800b6f4:	4b4c      	ldr	r3, [pc, #304]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	f003 030f 	and.w	r3, r3, #15
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d907      	bls.n	800b712 <BSP_STM32_RCC_ClockConfig+0x106>
 800b702:	4b49      	ldr	r3, [pc, #292]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	f023 020f 	bic.w	r2, r3, #15
 800b70a:	4947      	ldr	r1, [pc, #284]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	4313      	orrs	r3, r2
 800b710:	618b      	str	r3, [r1, #24]

	}

	if ((clocktype & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d057      	beq.n	800b7cc <BSP_STM32_RCC_ClockConfig+0x1c0>

		MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, SYSDiv);
 800b71c:	4b42      	ldr	r3, [pc, #264]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b724:	4940      	ldr	r1, [pc, #256]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4313      	orrs	r3, r2
 800b72a:	618b      	str	r3, [r1, #24]

		switch (SYSSource) {
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d010      	beq.n	800b754 <BSP_STM32_RCC_ClockConfig+0x148>
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b03      	cmp	r3, #3
 800b736:	d81d      	bhi.n	800b774 <BSP_STM32_RCC_ClockConfig+0x168>
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d012      	beq.n	800b764 <BSP_STM32_RCC_ClockConfig+0x158>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2b02      	cmp	r3, #2
 800b742:	d117      	bne.n	800b774 <BSP_STM32_RCC_ClockConfig+0x168>
		case RCC_SYSCLKSOURCE_HSE:
			if ((RCC->CR & RCC_CR_HSERDY) == 0) return BSP_ERROR;
 800b744:	4b38      	ldr	r3, [pc, #224]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d119      	bne.n	800b784 <BSP_STM32_RCC_ClockConfig+0x178>
 800b750:	2301      	movs	r3, #1
 800b752:	e0bc      	b.n	800b8ce <BSP_STM32_RCC_ClockConfig+0x2c2>
			break;
		case RCC_SYSCLKSOURCE_PLLCLK:
			if ((RCC->CR & RCC_CR_PLL1RDY) == 0) return BSP_ERROR;
 800b754:	4b34      	ldr	r3, [pc, #208]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d113      	bne.n	800b788 <BSP_STM32_RCC_ClockConfig+0x17c>
 800b760:	2301      	movs	r3, #1
 800b762:	e0b4      	b.n	800b8ce <BSP_STM32_RCC_ClockConfig+0x2c2>
			break;
		case RCC_SYSCLKSOURCE_CSI:
			if ((RCC->CR & RCC_CR_CSIRDY) == 0) return BSP_ERROR;
 800b764:	4b30      	ldr	r3, [pc, #192]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10d      	bne.n	800b78c <BSP_STM32_RCC_ClockConfig+0x180>
 800b770:	2301      	movs	r3, #1
 800b772:	e0ac      	b.n	800b8ce <BSP_STM32_RCC_ClockConfig+0x2c2>
			break;
		default:
			if ((RCC->CR & RCC_CR_HSIRDY) == 0) return BSP_ERROR;
 800b774:	4b2c      	ldr	r3, [pc, #176]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 0304 	and.w	r3, r3, #4
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d106      	bne.n	800b78e <BSP_STM32_RCC_ClockConfig+0x182>
 800b780:	2301      	movs	r3, #1
 800b782:	e0a4      	b.n	800b8ce <BSP_STM32_RCC_ClockConfig+0x2c2>
			break;
 800b784:	bf00      	nop
 800b786:	e002      	b.n	800b78e <BSP_STM32_RCC_ClockConfig+0x182>
			break;
 800b788:	bf00      	nop
 800b78a:	e000      	b.n	800b78e <BSP_STM32_RCC_ClockConfig+0x182>
			break;
 800b78c:	bf00      	nop
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, SYSSource);
 800b78e:	4b26      	ldr	r3, [pc, #152]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	f023 0207 	bic.w	r2, r3, #7
 800b796:	4924      	ldr	r1, [pc, #144]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	610b      	str	r3, [r1, #16]

		// Wait until selected Sys Clock is ready
		tickstart = BSP_GetTick();
 800b79e:	f7fa fdfd 	bl	800639c <BSP_GetTick>
 800b7a2:	6178      	str	r0, [r7, #20]
		while ((RCC->CFGR & RCC_CFGR_SWS) != (SYSSource << RCC_CFGR_SWS_Pos)) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 800b7a4:	e00a      	b.n	800b7bc <BSP_STM32_RCC_ClockConfig+0x1b0>
 800b7a6:	f7fa fdf9 	bl	800639c <BSP_GetTick>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d901      	bls.n	800b7bc <BSP_STM32_RCC_ClockConfig+0x1b0>
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e088      	b.n	800b8ce <BSP_STM32_RCC_ClockConfig+0x2c2>
 800b7bc:	4b1a      	ldr	r3, [pc, #104]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d1ec      	bne.n	800b7a6 <BSP_STM32_RCC_ClockConfig+0x19a>

	}

	if ((clocktype & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f003 0302 	and.w	r3, r3, #2
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00e      	beq.n	800b7f4 <BSP_STM32_RCC_ClockConfig+0x1e8>

		if (AHBDiv < (RCC->D1CFGR & RCC_D1CFGR_HPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, AHBDiv);
 800b7d6:	4b14      	ldr	r3, [pc, #80]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	f003 030f 	and.w	r3, r3, #15
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d207      	bcs.n	800b7f4 <BSP_STM32_RCC_ClockConfig+0x1e8>
 800b7e4:	4b10      	ldr	r3, [pc, #64]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	f023 020f 	bic.w	r2, r3, #15
 800b7ec:	490e      	ldr	r1, [pc, #56]	; (800b828 <BSP_STM32_RCC_ClockConfig+0x21c>)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	618b      	str	r3, [r1, #24]

	}

	// Decreasing the number of wait states because of lower CPU frequency
	if (flatency < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800b7f4:	4b0b      	ldr	r3, [pc, #44]	; (800b824 <BSP_STM32_RCC_ClockConfig+0x218>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 030f 	and.w	r3, r3, #15
 800b7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d214      	bcs.n	800b82c <BSP_STM32_RCC_ClockConfig+0x220>

		// Program the new number of wait states to the LATENCY bits in the FLASH_ACR register
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, flatency);
 800b802:	4b08      	ldr	r3, [pc, #32]	; (800b824 <BSP_STM32_RCC_ClockConfig+0x218>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f023 020f 	bic.w	r2, r3, #15
 800b80a:	4906      	ldr	r1, [pc, #24]	; (800b824 <BSP_STM32_RCC_ClockConfig+0x218>)
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	4313      	orrs	r3, r2
 800b810:	600b      	str	r3, [r1, #0]

		// Check that the new number of wait states is taken into account to access the Flash memory by reading the FLASH_ACR register
		if ((READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)) != flatency) return BSP_ERROR;
 800b812:	4b04      	ldr	r3, [pc, #16]	; (800b824 <BSP_STM32_RCC_ClockConfig+0x218>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 030f 	and.w	r3, r3, #15
 800b81a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d005      	beq.n	800b82c <BSP_STM32_RCC_ClockConfig+0x220>
 800b820:	2301      	movs	r3, #1
 800b822:	e054      	b.n	800b8ce <BSP_STM32_RCC_ClockConfig+0x2c2>
 800b824:	52002000 	.word	0x52002000
 800b828:	58024400 	.word	0x58024400

	}

	if ((clocktype & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1) {
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f003 0304 	and.w	r3, r3, #4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00e      	beq.n	800b854 <BSP_STM32_RCC_ClockConfig+0x248>

	    if (APB3Div < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, APB3Div);
 800b836:	4b28      	ldr	r3, [pc, #160]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b840:	429a      	cmp	r2, r3
 800b842:	d207      	bcs.n	800b854 <BSP_STM32_RCC_ClockConfig+0x248>
 800b844:	4b24      	ldr	r3, [pc, #144]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b846:	699b      	ldr	r3, [r3, #24]
 800b848:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b84c:	4922      	ldr	r1, [pc, #136]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b850:	4313      	orrs	r3, r2
 800b852:	618b      	str	r3, [r1, #24]

	}

	if ((clocktype & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f003 0308 	and.w	r3, r3, #8
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00e      	beq.n	800b87c <BSP_STM32_RCC_ClockConfig+0x270>

		if (APB1Div < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, APB1Div);
 800b85e:	4b1e      	ldr	r3, [pc, #120]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b866:	6a3a      	ldr	r2, [r7, #32]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d207      	bcs.n	800b87c <BSP_STM32_RCC_ClockConfig+0x270>
 800b86c:	4b1a      	ldr	r3, [pc, #104]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b86e:	69db      	ldr	r3, [r3, #28]
 800b870:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b874:	4918      	ldr	r1, [pc, #96]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b876:	6a3b      	ldr	r3, [r7, #32]
 800b878:	4313      	orrs	r3, r2
 800b87a:	61cb      	str	r3, [r1, #28]

	}

	if ((clocktype & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f003 0310 	and.w	r3, r3, #16
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00e      	beq.n	800b8a4 <BSP_STM32_RCC_ClockConfig+0x298>

		if (APB2Div < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, APB2Div);
 800b886:	4b14      	ldr	r3, [pc, #80]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b890:	429a      	cmp	r2, r3
 800b892:	d207      	bcs.n	800b8a4 <BSP_STM32_RCC_ClockConfig+0x298>
 800b894:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b896:	69db      	ldr	r3, [r3, #28]
 800b898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b89c:	490e      	ldr	r1, [pc, #56]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	61cb      	str	r3, [r1, #28]

	}

	if ((clocktype & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1) {
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f003 0320 	and.w	r3, r3, #32
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00e      	beq.n	800b8cc <BSP_STM32_RCC_ClockConfig+0x2c0>

		if (APB4Div < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 800b8ae:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b8b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d207      	bcs.n	800b8cc <BSP_STM32_RCC_ClockConfig+0x2c0>
 800b8bc:	4b06      	ldr	r3, [pc, #24]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b8be:	6a1b      	ldr	r3, [r3, #32]
 800b8c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b8c4:	4904      	ldr	r1, [pc, #16]	; (800b8d8 <BSP_STM32_RCC_ClockConfig+0x2cc>)
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	620b      	str	r3, [r1, #32]

	}

	return BSP_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	58024400 	.word	0x58024400

0800b8dc <BSP_STM32_RCC_GetSysClockFreq>:


uint32_t BSP_STM32_RCC_GetSysClockFreq(void) {
 800b8dc:	b480      	push	{r7}
 800b8de:	b089      	sub	sp, #36	; 0x24
 800b8e0:	af00      	add	r7, sp, #0
    float_t fracn1, pllvco;
    uint32_t sysclockfreq;

    // Get SYSCLK source

    switch (RCC->CFGR & RCC_CFGR_SWS) {
 800b8e2:	4bb3      	ldr	r3, [pc, #716]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8ea:	2b18      	cmp	r3, #24
 800b8ec:	f200 8155 	bhi.w	800bb9a <BSP_STM32_RCC_GetSysClockFreq+0x2be>
 800b8f0:	a201      	add	r2, pc, #4	; (adr r2, 800b8f8 <BSP_STM32_RCC_GetSysClockFreq+0x1c>)
 800b8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f6:	bf00      	nop
 800b8f8:	0800b95d 	.word	0x0800b95d
 800b8fc:	0800bb9b 	.word	0x0800bb9b
 800b900:	0800bb9b 	.word	0x0800bb9b
 800b904:	0800bb9b 	.word	0x0800bb9b
 800b908:	0800bb9b 	.word	0x0800bb9b
 800b90c:	0800bb9b 	.word	0x0800bb9b
 800b910:	0800bb9b 	.word	0x0800bb9b
 800b914:	0800bb9b 	.word	0x0800bb9b
 800b918:	0800b983 	.word	0x0800b983
 800b91c:	0800bb9b 	.word	0x0800bb9b
 800b920:	0800bb9b 	.word	0x0800bb9b
 800b924:	0800bb9b 	.word	0x0800bb9b
 800b928:	0800bb9b 	.word	0x0800bb9b
 800b92c:	0800bb9b 	.word	0x0800bb9b
 800b930:	0800bb9b 	.word	0x0800bb9b
 800b934:	0800bb9b 	.word	0x0800bb9b
 800b938:	0800b989 	.word	0x0800b989
 800b93c:	0800bb9b 	.word	0x0800bb9b
 800b940:	0800bb9b 	.word	0x0800bb9b
 800b944:	0800bb9b 	.word	0x0800bb9b
 800b948:	0800bb9b 	.word	0x0800bb9b
 800b94c:	0800bb9b 	.word	0x0800bb9b
 800b950:	0800bb9b 	.word	0x0800bb9b
 800b954:	0800bb9b 	.word	0x0800bb9b
 800b958:	0800b98f 	.word	0x0800b98f

    case RCC_CFGR_SWS_HSI:  // HSI used as system clock source

    	if ((RCC->CR & RCC_CR_HSIDIV_Msk) != 0U) {
 800b95c:	4b94      	ldr	r3, [pc, #592]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0318 	and.w	r3, r3, #24
 800b964:	2b00      	cmp	r3, #0
 800b966:	d009      	beq.n	800b97c <BSP_STM32_RCC_GetSysClockFreq+0xa0>

    		sysclockfreq = (uint32_t)(HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 800b968:	4b91      	ldr	r3, [pc, #580]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	08db      	lsrs	r3, r3, #3
 800b96e:	f003 0303 	and.w	r3, r3, #3
 800b972:	4a90      	ldr	r2, [pc, #576]	; (800bbb4 <BSP_STM32_RCC_GetSysClockFreq+0x2d8>)
 800b974:	fa42 f303 	asr.w	r3, r2, r3
 800b978:	61bb      	str	r3, [r7, #24]
    	} else {

    		sysclockfreq = (uint32_t) HSI_VALUE;
    	}

    	break;
 800b97a:	e111      	b.n	800bba0 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>
    		sysclockfreq = (uint32_t) HSI_VALUE;
 800b97c:	4b8d      	ldr	r3, [pc, #564]	; (800bbb4 <BSP_STM32_RCC_GetSysClockFreq+0x2d8>)
 800b97e:	61bb      	str	r3, [r7, #24]
    	break;
 800b980:	e10e      	b.n	800bba0 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  // CSI used as system clock  source

    	sysclockfreq = CSI_VALUE;
 800b982:	4b8d      	ldr	r3, [pc, #564]	; (800bbb8 <BSP_STM32_RCC_GetSysClockFreq+0x2dc>)
 800b984:	61bb      	str	r3, [r7, #24]
    	break;
 800b986:	e10b      	b.n	800bba0 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  // HSE used as system clock  source

    	sysclockfreq = HSE_VALUE;
 800b988:	4b8c      	ldr	r3, [pc, #560]	; (800bbbc <BSP_STM32_RCC_GetSysClockFreq+0x2e0>)
 800b98a:	61bb      	str	r3, [r7, #24]
    	break;
 800b98c:	e108      	b.n	800bba0 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_PLL1:  // PLL1 used as system clock  source

    	// PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN      SYSCLK = PLL_VCO / PLLR

    	pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b98e:	4b88      	ldr	r3, [pc, #544]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b992:	f003 0303 	and.w	r3, r3, #3
 800b996:	617b      	str	r3, [r7, #20]
    	pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b998:	4b85      	ldr	r3, [pc, #532]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99c:	091b      	lsrs	r3, r3, #4
 800b99e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9a2:	613b      	str	r3, [r7, #16]
    	pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b9a4:	4b82      	ldr	r3, [pc, #520]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	60fb      	str	r3, [r7, #12]
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b9ae:	4b80      	ldr	r3, [pc, #512]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b9b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b2:	08db      	lsrs	r3, r3, #3
 800b9b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	fb02 f303 	mul.w	r3, r2, r3
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c6:	edc7 7a02 	vstr	s15, [r7, #8]

    	if (pllm != 0U) {
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 80e1 	beq.w	800bb94 <BSP_STM32_RCC_GetSysClockFreq+0x2b8>
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	f000 8083 	beq.w	800bae0 <BSP_STM32_RCC_GetSysClockFreq+0x204>
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	f200 80a1 	bhi.w	800bb24 <BSP_STM32_RCC_GetSysClockFreq+0x248>
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d003      	beq.n	800b9f0 <BSP_STM32_RCC_GetSysClockFreq+0x114>
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d056      	beq.n	800ba9c <BSP_STM32_RCC_GetSysClockFreq+0x1c0>
 800b9ee:	e099      	b.n	800bb24 <BSP_STM32_RCC_GetSysClockFreq+0x248>
    		switch (pllsource) {

    		case RCC_PLLSOURCE_HSI:  // HSI used as PLL clock source

    			if ((RCC->CR & RCC_CR_HSIDIV_Msk) != 0U) {
 800b9f0:	4b6f      	ldr	r3, [pc, #444]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0318 	and.w	r3, r3, #24
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d02d      	beq.n	800ba58 <BSP_STM32_RCC_GetSysClockFreq+0x17c>

    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 800b9fc:	4b6c      	ldr	r3, [pc, #432]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	08db      	lsrs	r3, r3, #3
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	4a6b      	ldr	r2, [pc, #428]	; (800bbb4 <BSP_STM32_RCC_GetSysClockFreq+0x2d8>)
 800ba08:	fa42 f303 	asr.w	r3, r2, r3
 800ba0c:	607b      	str	r3, [r7, #4]
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	ee07 3a90 	vmov	s15, r3
 800ba14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	ee07 3a90 	vmov	s15, r3
 800ba1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba26:	4b62      	ldr	r3, [pc, #392]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800ba28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba36:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800bbc0 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 800ba3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba52:	edc7 7a07 	vstr	s15, [r7, #28]
    			} else {

    				pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);

    			}
    			break;
 800ba56:	e087      	b.n	800bb68 <BSP_STM32_RCC_GetSysClockFreq+0x28c>
    				pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba62:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bbc4 <BSP_STM32_RCC_GetSysClockFreq+0x2e8>
 800ba66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba6a:	4b51      	ldr	r3, [pc, #324]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800bbc0 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 800ba82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba96:	edc7 7a07 	vstr	s15, [r7, #28]
    			break;
 800ba9a:	e065      	b.n	800bb68 <BSP_STM32_RCC_GetSysClockFreq+0x28c>

    		case RCC_PLLSOURCE_CSI:  // CSI used as PLL clock source

    			pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bbc8 <BSP_STM32_RCC_GetSysClockFreq+0x2ec>
 800baaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baae:	4b40      	ldr	r3, [pc, #256]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800bab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab6:	ee07 3a90 	vmov	s15, r3
 800baba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800babe:	ed97 6a02 	vldr	s12, [r7, #8]
 800bac2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bbc0 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 800bac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bada:	edc7 7a07 	vstr	s15, [r7, #28]
    			break;
 800bade:	e043      	b.n	800bb68 <BSP_STM32_RCC_GetSysClockFreq+0x28c>

    		case RCC_PLLSOURCE_HSE:  // HSE used as PLL clock source

    			pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	ee07 3a90 	vmov	s15, r3
 800bae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baea:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bbcc <BSP_STM32_RCC_GetSysClockFreq+0x2f0>
 800baee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baf2:	4b2f      	ldr	r3, [pc, #188]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafa:	ee07 3a90 	vmov	s15, r3
 800bafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb02:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bbc0 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 800bb0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb1e:	edc7 7a07 	vstr	s15, [r7, #28]
    			break;
 800bb22:	e021      	b.n	800bb68 <BSP_STM32_RCC_GetSysClockFreq+0x28c>

    		default:

    			pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	ee07 3a90 	vmov	s15, r3
 800bb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bbc8 <BSP_STM32_RCC_GetSysClockFreq+0x2ec>
 800bb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb36:	4b1e      	ldr	r3, [pc, #120]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800bb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb46:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bbc0 <BSP_STM32_RCC_GetSysClockFreq+0x2e4>
 800bb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb62:	edc7 7a07 	vstr	s15, [r7, #28]
    			break;
 800bb66:	bf00      	nop

    		}

        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bb68:	4b11      	ldr	r3, [pc, #68]	; (800bbb0 <BSP_STM32_RCC_GetSysClockFreq+0x2d4>)
 800bb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb6c:	0a5b      	lsrs	r3, r3, #9
 800bb6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb72:	3301      	adds	r3, #1
 800bb74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	ee07 3a90 	vmov	s15, r3
 800bb7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb80:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb8c:	ee17 3a90 	vmov	r3, s15
 800bb90:	61bb      	str	r3, [r7, #24]

    	} else {

    		sysclockfreq = 0U;
    	}
    	break;
 800bb92:	e005      	b.n	800bba0 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>
    		sysclockfreq = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61bb      	str	r3, [r7, #24]
    	break;
 800bb98:	e002      	b.n	800bba0 <BSP_STM32_RCC_GetSysClockFreq+0x2c4>

    default:

    	sysclockfreq = CSI_VALUE;
 800bb9a:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <BSP_STM32_RCC_GetSysClockFreq+0x2dc>)
 800bb9c:	61bb      	str	r3, [r7, #24]
    	break;
 800bb9e:	bf00      	nop

    }

    return sysclockfreq;
 800bba0:	69bb      	ldr	r3, [r7, #24]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3724      	adds	r7, #36	; 0x24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	58024400 	.word	0x58024400
 800bbb4:	03d09000 	.word	0x03d09000
 800bbb8:	003d0900 	.word	0x003d0900
 800bbbc:	017d7840 	.word	0x017d7840
 800bbc0:	46000000 	.word	0x46000000
 800bbc4:	4c742400 	.word	0x4c742400
 800bbc8:	4a742400 	.word	0x4a742400
 800bbcc:	4bbebc20 	.word	0x4bbebc20

0800bbd0 <_RTC_WaitForSynchro>:
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
  return (tmp + (Value & 0x0FU));
}


static uint8_t _RTC_WaitForSynchro(RTC_TypeDef *hrtc) {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]

	uint32_t tickstart = BSP_GetTick();
 800bbd8:	f7fa fbe0 	bl	800639c <BSP_GetTick>
 800bbdc:	60f8      	str	r0, [r7, #12]

	// Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect)
	hrtc->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a0b      	ldr	r2, [pc, #44]	; (800bc10 <_RTC_WaitForSynchro+0x40>)
 800bbe2:	60da      	str	r2, [r3, #12]

	// Wait the registers to be synchronized
    while ((hrtc->ISR & RTC_ISR_RSF) == 0U)
 800bbe4:	e009      	b.n	800bbfa <_RTC_WaitForSynchro+0x2a>
    	if ((BSP_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) return BSP_TIMEOUT;
 800bbe6:	f7fa fbd9 	bl	800639c <BSP_GetTick>
 800bbea:	4602      	mov	r2, r0
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	1ad3      	subs	r3, r2, r3
 800bbf0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bbf4:	d901      	bls.n	800bbfa <_RTC_WaitForSynchro+0x2a>
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	e006      	b.n	800bc08 <_RTC_WaitForSynchro+0x38>
    while ((hrtc->ISR & RTC_ISR_RSF) == 0U)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	f003 0320 	and.w	r3, r3, #32
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d0ef      	beq.n	800bbe6 <_RTC_WaitForSynchro+0x16>

    return BSP_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	0003ff5f 	.word	0x0003ff5f

0800bc14 <_RTC_WriteEnable>:


static void _RTC_WriteEnable(RTC_TypeDef * hrtc) {
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
	// Enables write to registers
	hrtc->WPR = 0xCA;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	22ca      	movs	r2, #202	; 0xca
 800bc20:	625a      	str	r2, [r3, #36]	; 0x24
	hrtc->WPR = 0x53;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2253      	movs	r2, #83	; 0x53
 800bc26:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <_RTC_WriteDisable>:


static void _RTC_WriteDisable(RTC_TypeDef * hrtc) {
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
	// Disable write to registers
	hrtc->WPR = 0xFF;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	22ff      	movs	r2, #255	; 0xff
 800bc40:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <_RTC_EnterInitMode>:


static uint8_t _RTC_EnterInitMode(RTC_TypeDef * hrtc) {
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]

	uint32_t tickstart;

	// Check if the Initialization mode is set
	if ((hrtc->ISR & RTC_ISR_INITF) == 0U) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d117      	bne.n	800bc92 <_RTC_EnterInitMode+0x44>

		// Set the Initialization mode
		hrtc->ISR = (uint32_t)RTC_INIT_MASK;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f04f 32ff 	mov.w	r2, #4294967295
 800bc68:	60da      	str	r2, [r3, #12]

		tickstart = BSP_GetTick();
 800bc6a:	f7fa fb97 	bl	800639c <BSP_GetTick>
 800bc6e:	60f8      	str	r0, [r7, #12]

		// Wait till RTC is in INIT state and if timeout is reached exit
		while ((hrtc->ISR & RTC_ISR_INITF) == 0U)
 800bc70:	e009      	b.n	800bc86 <_RTC_EnterInitMode+0x38>
			if((BSP_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE) return BSP_TIMEOUT;
 800bc72:	f7fa fb93 	bl	800639c <BSP_GetTick>
 800bc76:	4602      	mov	r2, r0
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bc80:	d901      	bls.n	800bc86 <_RTC_EnterInitMode+0x38>
 800bc82:	2303      	movs	r3, #3
 800bc84:	e006      	b.n	800bc94 <_RTC_EnterInitMode+0x46>
		while ((hrtc->ISR & RTC_ISR_INITF) == 0U)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0ef      	beq.n	800bc72 <_RTC_EnterInitMode+0x24>
	}
	return BSP_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <_RTC_ExitInitMode>:


static uint8_t _RTC_ExitInitMode(RTC_TypeDef *hrtc)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
	// Exit Initialization mode
	CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800bca4:	4b12      	ldr	r3, [pc, #72]	; (800bcf0 <_RTC_ExitInitMode+0x54>)
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	4a11      	ldr	r2, [pc, #68]	; (800bcf0 <_RTC_ExitInitMode+0x54>)
 800bcaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcae:	60d3      	str	r3, [r2, #12]

	// If CR_BYPSHAD bit = 0, wait for synchro
	if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD)) {
 800bcb0:	4b0f      	ldr	r3, [pc, #60]	; (800bcf0 <_RTC_ExitInitMode+0x54>)
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	f003 0320 	and.w	r3, r3, #32
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d005      	beq.n	800bcc8 <_RTC_ExitInitMode+0x2c>
		// Clear BYPSHAD bit
		CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bcbc:	4b0c      	ldr	r3, [pc, #48]	; (800bcf0 <_RTC_ExitInitMode+0x54>)
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	4a0b      	ldr	r2, [pc, #44]	; (800bcf0 <_RTC_ExitInitMode+0x54>)
 800bcc2:	f023 0320 	bic.w	r3, r3, #32
 800bcc6:	6093      	str	r3, [r2, #8]
    }

	if (_RTC_WaitForSynchro(hrtc)) return BSP_TIMEOUT;
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff ff81 	bl	800bbd0 <_RTC_WaitForSynchro>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d001      	beq.n	800bcd8 <_RTC_ExitInitMode+0x3c>
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e006      	b.n	800bce6 <_RTC_ExitInitMode+0x4a>

	// Restore BYPSHAD bit
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bcd8:	4b05      	ldr	r3, [pc, #20]	; (800bcf0 <_RTC_ExitInitMode+0x54>)
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	4a04      	ldr	r2, [pc, #16]	; (800bcf0 <_RTC_ExitInitMode+0x54>)
 800bcde:	f043 0320 	orr.w	r3, r3, #32
 800bce2:	6093      	str	r3, [r2, #8]

  return BSP_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	58004000 	.word	0x58004000

0800bcf4 <BSP_STM32_RTC_Init>:


uint8_t BSP_STM32_RTC_Init(RTC_TypeDef * hrtc, uint32_t AsynchPrediv, uint32_t SynchPrediv) {
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
	// TODO: This code will be moved to separate part responsible for configuration of debugger interface
	// DBGMCU->APB4FZ1 |= DBGMCU_APB4FZ1_DBG_RTC;
	// DBGMCU->APB4FZ2 |= DBGMCU_APB4FZ2_DBG_RTC;

	// Check whether the calendar needs to be initialized
	if (((hrtc->ISR)  & (RTC_ISR_INITS)) == RTC_ISR_INITS) return BSP_OK;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	f003 0310 	and.w	r3, r3, #16
 800bd08:	2b10      	cmp	r3, #16
 800bd0a:	d101      	bne.n	800bd10 <BSP_STM32_RTC_Init+0x1c>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	e03a      	b.n	800bd86 <BSP_STM32_RTC_Init+0x92>

	// Disable the write protection for RTC registers
	_RTC_WriteEnable(hrtc);
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f7ff ff7f 	bl	800bc14 <_RTC_WriteEnable>

	// Enter Initialization mode
	if (_RTC_EnterInitMode(hrtc)) {
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff ff99 	bl	800bc4e <_RTC_EnterInitMode>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d004      	beq.n	800bd2c <BSP_STM32_RTC_Init+0x38>
		_RTC_WriteDisable(hrtc);	return BSP_ERROR;
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f7ff ff86 	bl	800bc34 <_RTC_WriteDisable>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e02c      	b.n	800bd86 <BSP_STM32_RTC_Init+0x92>
	}

	// Clear RTC_CR FMT, OSEL and POL Bits
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	689a      	ldr	r2, [r3, #8]
 800bd30:	4b17      	ldr	r3, [pc, #92]	; (800bd90 <BSP_STM32_RTC_Init+0x9c>)
 800bd32:	4013      	ands	r3, r2
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	6093      	str	r3, [r2, #8]

	// Set RTC_CR register
	hrtc->CR |= (RTC_HOURFORMAT_24 | RTC_OUTPUT_DISABLE | RTC_OUTPUT_POLARITY_HIGH);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	689a      	ldr	r2, [r3, #8]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	609a      	str	r2, [r3, #8]

	// Configure the RTC PRER
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	041b      	lsls	r3, r3, #16
 800bd44:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800bd4e:	431a      	orrs	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	611a      	str	r2, [r3, #16]

	// Exit Initialization mode
	if (_RTC_ExitInitMode(hrtc)) {
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f7ff ffa1 	bl	800bc9c <_RTC_ExitInitMode>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d004      	beq.n	800bd6a <BSP_STM32_RTC_Init+0x76>
		_RTC_WriteDisable(hrtc);	return BSP_ERROR;
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f7ff ff67 	bl	800bc34 <_RTC_WriteDisable>
 800bd66:	2301      	movs	r3, #1
 800bd68:	e00d      	b.n	800bd86 <BSP_STM32_RTC_Init+0x92>
	}

	hrtc->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd6e:	f023 0203 	bic.w	r2, r3, #3
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	64da      	str	r2, [r3, #76]	; 0x4c
	hrtc->OR |= (RTC_OUTPUT_TYPE_OPENDRAIN | RTC_OUTPUT_REMAP_NONE);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	64da      	str	r2, [r3, #76]	; 0x4c

	// Enable the write protection for RTC registers
	_RTC_WriteDisable(hrtc);
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7ff ff58 	bl	800bc34 <_RTC_WriteDisable>
	return BSP_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	ff8fffbf 	.word	0xff8fffbf

0800bd94 <_SD_IdentifyCard>:
} SDMMC_CardStatus_TypeDef;




static uint8_t _SD_IdentifyCard(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]

	SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	3328      	adds	r3, #40	; 0x28
 800bda2:	60fb      	str	r3, [r7, #12]

	__IO uint32_t count = 0U;
 800bda4:	2300      	movs	r3, #0
 800bda6:	60bb      	str	r3, [r7, #8]
	uint32_t response = 0U;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	617b      	str	r3, [r7, #20]
	uint32_t validvoltage = 0U;
 800bdac:	2300      	movs	r3, #0
 800bdae:	613b      	str	r3, [r7, #16]

	// CMD0: GO_IDLE_STATE
	if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f001 f958 	bl	800d066 <SDMMC_CmdGoIdleState>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <_SD_IdentifyCard+0x2c>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e057      	b.n	800be70 <_SD_IdentifyCard+0xdc>

	// CMD8: SEND_IF_COND: Command available only on V2.0 cards
	if (SDMMC_CmdOperCond(hsdmmc) == SDMMC_ERROR_TIMEOUT) {
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f001 f96e 	bl	800d0a2 <SDMMC_CmdOperCond>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdcc:	d10a      	bne.n	800bde4 <_SD_IdentifyCard+0x50>

		// No response to CMD8
		sdmmc_ctx->SDCardVersion = CARD_V1_X;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	701a      	strb	r2, [r3, #0]
		// CMD0: GO_IDLE_STATE
		if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f001 f946 	bl	800d066 <SDMMC_CmdGoIdleState>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d02f      	beq.n	800be40 <_SD_IdentifyCard+0xac>
 800bde0:	2301      	movs	r3, #1
 800bde2:	e045      	b.n	800be70 <_SD_IdentifyCard+0xdc>

	} else {

		sdmmc_ctx->SDCardVersion = CARD_V2_X;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2201      	movs	r2, #1
 800bde8:	701a      	strb	r2, [r3, #0]
		// SEND CMD55 APP_CMD with RCA as 0
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 800bdea:	2100      	movs	r1, #0
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f001 f978 	bl	800d0e2 <SDMMC_CmdAppCommand>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d023      	beq.n	800be40 <_SD_IdentifyCard+0xac>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e039      	b.n	800be70 <_SD_IdentifyCard+0xdc>

	// Send ACMD41 SD_APP_OP_COND with Argument 0x80100000
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {

		// SEND CMD55 APP_CMD with RCA as 0
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 f96f 	bl	800d0e2 <SDMMC_CmdAppCommand>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <_SD_IdentifyCard+0x7a>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e030      	b.n	800be70 <_SD_IdentifyCard+0xdc>

		// Send CMD41
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 800be0e:	491a      	ldr	r1, [pc, #104]	; (800be78 <_SD_IdentifyCard+0xe4>)
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f001 f989 	bl	800d128 <SDMMC_CmdAppOperCommand>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <_SD_IdentifyCard+0x8c>
 800be1c:	2301      	movs	r3, #1
 800be1e:	e027      	b.n	800be70 <_SD_IdentifyCard+0xdc>

		// Get command response
		response = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 800be20:	2100      	movs	r1, #0
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 ffd1 	bl	800cdca <SDMMC_GetResponse>
 800be28:	6178      	str	r0, [r7, #20]

		// Get operating voltage
		validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	0fdb      	lsrs	r3, r3, #31
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d101      	bne.n	800be36 <_SD_IdentifyCard+0xa2>
 800be32:	2301      	movs	r3, #1
 800be34:	e000      	b.n	800be38 <_SD_IdentifyCard+0xa4>
 800be36:	2300      	movs	r3, #0
 800be38:	613b      	str	r3, [r7, #16]

		count++;
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	3301      	adds	r3, #1
 800be3e:	60bb      	str	r3, [r7, #8]
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800be46:	4293      	cmp	r3, r2
 800be48:	d802      	bhi.n	800be50 <_SD_IdentifyCard+0xbc>
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d0d5      	beq.n	800bdfc <_SD_IdentifyCard+0x68>
	}

	if (count >= SDMMC_MAX_VOLT_TRIAL) return BSP_ERROR;
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800be56:	4293      	cmp	r3, r2
 800be58:	d901      	bls.n	800be5e <_SD_IdentifyCard+0xca>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e008      	b.n	800be70 <_SD_IdentifyCard+0xdc>

  	// Set default card type
	sdmmc_ctx->SDCardType = ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) ? CARD_SDHC_SDXC : CARD_SDSC;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	0f9b      	lsrs	r3, r3, #30
 800be62:	b2db      	uxtb	r3, r3
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	705a      	strb	r2, [r3, #1]

	return BSP_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3718      	adds	r7, #24
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	c1100000 	.word	0xc1100000

0800be7c <_SD_GetCardCSD>:


static uint8_t _SD_GetCardCSD(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, SDMMC_CSD_TypeDef * CSD) {
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]

	SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	3328      	adds	r3, #40	; 0x28
 800be8c:	617b      	str	r3, [r7, #20]

	CSD->CSDStruct = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0xC0000000U) >> 30U);
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	0f9b      	lsrs	r3, r3, #30
 800be94:	b2da      	uxtb	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	701a      	strb	r2, [r3, #0]
	CSD->SysSpecVersion = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x3C000000U) >> 26U);
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	0e9b      	lsrs	r3, r3, #26
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f003 030f 	and.w	r3, r3, #15
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	705a      	strb	r2, [r3, #1]
	CSD->Reserved1 = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x03000000U) >> 24U);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	69db      	ldr	r3, [r3, #28]
 800beb0:	0e1b      	lsrs	r3, r3, #24
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	f003 0303 	and.w	r3, r3, #3
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	709a      	strb	r2, [r3, #2]
	CSD->TAAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x00FF0000U) >> 16U);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	0c1b      	lsrs	r3, r3, #16
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	70da      	strb	r2, [r3, #3]
	CSD->NSAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x0000FF00U) >> 8U);
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	0a1b      	lsrs	r3, r3, #8
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	711a      	strb	r2, [r3, #4]
	CSD->MaxBusClkFrec = (uint8_t)(sdmmc_ctx->SDCardSD[0] & 0x000000FFU);
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	715a      	strb	r2, [r3, #5]
	CSD->CardComdClasses = (uint16_t)((sdmmc_ctx->SDCardSD[1] & 0xFFF00000U) >> 20U);
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	0d1b      	lsrs	r3, r3, #20
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	80da      	strh	r2, [r3, #6]
	CSD->RdBlockLen = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x000F0000U) >> 16U);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	6a1b      	ldr	r3, [r3, #32]
 800bef0:	0c1b      	lsrs	r3, r3, #16
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	f003 030f 	and.w	r3, r3, #15
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	721a      	strb	r2, [r3, #8]
	CSD->PartBlockRead   = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00008000U) >> 15U);
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	0bdb      	lsrs	r3, r3, #15
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	f003 0301 	and.w	r3, r3, #1
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	725a      	strb	r2, [r3, #9]
	CSD->WrBlockMisalign = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00004000U) >> 14U);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	6a1b      	ldr	r3, [r3, #32]
 800bf14:	0b9b      	lsrs	r3, r3, #14
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	b2da      	uxtb	r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	729a      	strb	r2, [r3, #10]
	CSD->RdBlockMisalign = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00002000U) >> 13U);
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	0b5b      	lsrs	r3, r3, #13
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	72da      	strb	r2, [r3, #11]
	CSD->DSRImpl = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00001000U) >> 12U);
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	6a1b      	ldr	r3, [r3, #32]
 800bf38:	0b1b      	lsrs	r3, r3, #12
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	731a      	strb	r2, [r3, #12]
	CSD->Reserved2 = 0U; /*!< Reserved */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	735a      	strb	r2, [r3, #13]

	switch (sdmmc_ctx->SDCardType) {
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	785b      	ldrb	r3, [r3, #1]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <_SD_GetCardCSD+0xde>
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d064      	beq.n	800c022 <_SD_GetCardCSD+0x1a6>
 800bf58:	e081      	b.n	800c05e <_SD_GetCardCSD+0x1e2>
	case CARD_SDSC:
		CSD->DeviceSize = (((sdmmc_ctx->SDCardSD[1] & 0x000003FFU) << 2U) | ((sdmmc_ctx->SDCardSD[2] & 0xC0000000U) >> 30U));
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	009a      	lsls	r2, r3, #2
 800bf60:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bf64:	4013      	ands	r3, r2
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bf6a:	0f92      	lsrs	r2, r2, #30
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	611a      	str	r2, [r3, #16]
		CSD->MaxRdCurrentVDDMin = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x38000000U) >> 27U);
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	0edb      	lsrs	r3, r3, #27
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	f003 0307 	and.w	r3, r3, #7
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	751a      	strb	r2, [r3, #20]
		CSD->MaxRdCurrentVDDMax = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x07000000U) >> 24U);
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf88:	0e1b      	lsrs	r3, r3, #24
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f003 0307 	and.w	r3, r3, #7
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	755a      	strb	r2, [r3, #21]
		CSD->MaxWrCurrentVDDMin = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00E00000U) >> 21U);
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9a:	0d5b      	lsrs	r3, r3, #21
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	f003 0307 	and.w	r3, r3, #7
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	759a      	strb	r2, [r3, #22]
		CSD->MaxWrCurrentVDDMax = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x001C0000U) >> 18U);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	0c9b      	lsrs	r3, r3, #18
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	f003 0307 	and.w	r3, r3, #7
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	75da      	strb	r2, [r3, #23]
		CSD->DeviceSizeMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00038000U) >> 15U);
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbe:	0bdb      	lsrs	r3, r3, #15
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	f003 0307 	and.w	r3, r3, #7
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	761a      	strb	r2, [r3, #24]
		sdmmc_ctx->SDCardBlockNbr  = (CSD->DeviceSize + 1U) ;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	631a      	str	r2, [r3, #48]	; 0x30
		sdmmc_ctx->SDCardBlockNbr *= (1UL << ((CSD->DeviceSizeMul & 0x07U) + 2U));
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	7e1b      	ldrb	r3, [r3, #24]
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	f003 0307 	and.w	r3, r3, #7
 800bfe0:	3302      	adds	r3, #2
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe8:	697a      	ldr	r2, [r7, #20]
 800bfea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bfec:	fb03 f202 	mul.w	r2, r3, r2
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	631a      	str	r2, [r3, #48]	; 0x30
		sdmmc_ctx->SDCardBlockSize = (1UL << (CSD->RdBlockLen & 0x0FU));
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7a1b      	ldrb	r3, [r3, #8]
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	f003 030f 	and.w	r3, r3, #15
 800bffe:	2201      	movs	r2, #1
 800c000:	409a      	lsls	r2, r3
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	635a      	str	r2, [r3, #52]	; 0x34
		sdmmc_ctx->SDCardLogBlockNbr = (sdmmc_ctx->SDCardBlockNbr) * ((sdmmc_ctx->SDCardBlockSize) / 512U);
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c00e:	0a52      	lsrs	r2, r2, #9
 800c010:	fb03 f202 	mul.w	r2, r3, r2
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	639a      	str	r2, [r3, #56]	; 0x38
		sdmmc_ctx->SDCardLogBlockSize = 512U;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c01e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800c020:	e022      	b.n	800c068 <_SD_GetCardCSD+0x1ec>
	case CARD_SDHC_SDXC:
		/* Byte 7 */
		CSD->DeviceSize = (((sdmmc_ctx->SDCardSD[1] & 0x0000003FU) << 16U) | ((sdmmc_ctx->SDCardSD[2] & 0xFFFF0000U) >> 16U));
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	6a1b      	ldr	r3, [r3, #32]
 800c026:	041b      	lsls	r3, r3, #16
 800c028:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	0c1b      	lsrs	r3, r3, #16
 800c032:	431a      	orrs	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	611a      	str	r2, [r3, #16]
		sdmmc_ctx->SDCardBlockNbr = ((CSD->DeviceSize + 1U) * 1024U);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	3301      	adds	r3, #1
 800c03e:	029a      	lsls	r2, r3, #10
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	631a      	str	r2, [r3, #48]	; 0x30
		sdmmc_ctx->SDCardLogBlockNbr = sdmmc_ctx->SDCardBlockNbr;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38
		sdmmc_ctx->SDCardBlockSize = 512U;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c052:	635a      	str	r2, [r3, #52]	; 0x34
		sdmmc_ctx->SDCardLogBlockSize = sdmmc_ctx->SDCardBlockSize;
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800c05c:	e004      	b.n	800c068 <_SD_GetCardCSD+0x1ec>
	default:
		// Clear all the static flags
		__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	4a53      	ldr	r2, [pc, #332]	; (800c1b0 <_SD_GetCardCSD+0x334>)
 800c062:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	e09d      	b.n	800c1a4 <_SD_GetCardCSD+0x328>
	}

	CSD->EraseGrSize = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00004000U) >> 14U);
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	0b9b      	lsrs	r3, r3, #14
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	b2da      	uxtb	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	765a      	strb	r2, [r3, #25]
	CSD->EraseGrMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00003F80U) >> 7U);
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07e:	09db      	lsrs	r3, r3, #7
 800c080:	b2db      	uxtb	r3, r3
 800c082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c086:	b2da      	uxtb	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	769a      	strb	r2, [r3, #26]
	CSD->WrProtectGrSize = (uint8_t)(sdmmc_ctx->SDCardSD[2] & 0x0000007FU);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c090:	b2db      	uxtb	r3, r3
 800c092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c096:	b2da      	uxtb	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	76da      	strb	r2, [r3, #27]
	CSD->WrProtectGrEnable = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x80000000U) >> 31U);
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a0:	0fdb      	lsrs	r3, r3, #31
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	771a      	strb	r2, [r3, #28]
	CSD->ManDeflECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x60000000U) >> 29U);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ac:	0f5b      	lsrs	r3, r3, #29
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	f003 0303 	and.w	r3, r3, #3
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	775a      	strb	r2, [r3, #29]
	CSD->WrSpeedFact = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x1C000000U) >> 26U);
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0be:	0e9b      	lsrs	r3, r3, #26
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	f003 0307 	and.w	r3, r3, #7
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	779a      	strb	r2, [r3, #30]
	CSD->MaxWrBlockLen = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x03C00000U) >> 22U);
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d0:	0d9b      	lsrs	r3, r3, #22
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	f003 030f 	and.w	r3, r3, #15
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	77da      	strb	r2, [r3, #31]
	CSD->WriteBlockPaPartial = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00200000U) >> 21U);
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e2:	0d5b      	lsrs	r3, r3, #21
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	f003 0301 	and.w	r3, r3, #1
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f883 2020 	strb.w	r2, [r3, #32]
	CSD->Reserved3 = 0;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	CSD->ContentProtectAppli = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00010000U) >> 16U);
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fe:	0c1b      	lsrs	r3, r3, #16
 800c100:	b2db      	uxtb	r3, r3
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	b2da      	uxtb	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	CSD->FileFormatGroup = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00008000U) >> 15U);
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c112:	0bdb      	lsrs	r3, r3, #15
 800c114:	b2db      	uxtb	r3, r3
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	CSD->CopyFlag = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00004000U) >> 14U);
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c126:	0b9b      	lsrs	r3, r3, #14
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	CSD->PermWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00002000U) >> 13U);
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c13a:	0b5b      	lsrs	r3, r3, #13
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	f003 0301 	and.w	r3, r3, #1
 800c142:	b2da      	uxtb	r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	CSD->TempWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00001000U) >> 12U);
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14e:	0b1b      	lsrs	r3, r3, #12
 800c150:	b2db      	uxtb	r3, r3
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	b2da      	uxtb	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	CSD->FileFormat = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000C00U) >> 10U);
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c162:	0a9b      	lsrs	r3, r3, #10
 800c164:	b2db      	uxtb	r3, r3
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	CSD->ECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000300U) >> 8U);
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c176:	0a1b      	lsrs	r3, r3, #8
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	f003 0303 	and.w	r3, r3, #3
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	CSD->CSD_CRC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x000000FEU) >> 1U);
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18a:	085b      	lsrs	r3, r3, #1
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c192:	b2da      	uxtb	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	CSD->Reserved4 = 1;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2201      	movs	r2, #1
 800c19e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	return BSP_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	371c      	adds	r7, #28
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	1fe00fff 	.word	0x1fe00fff

0800c1b4 <_SD_InitCard>:


static uint8_t _SD_InitCard(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b090      	sub	sp, #64	; 0x40
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]

	SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	3328      	adds	r3, #40	; 0x28
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c

	SDMMC_CSD_TypeDef CSD;

	uint16_t sd_rca = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	817b      	strh	r3, [r7, #10]
	uint32_t tickstart = BSP_GetTick();
 800c1c8:	f7fa f8e8 	bl	800639c <BSP_GetTick>
 800c1cc:	63b8      	str	r0, [r7, #56]	; 0x38

	// Chheck the power State
	if (SDMMC_GetPowerState(hsdmmc) == 0U) return BSP_ERROR;
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fdb5 	bl	800cd3e <SDMMC_GetPowerState>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <_SD_InitCard+0x2a>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e090      	b.n	800c300 <_SD_InitCard+0x14c>

	// Check if card is secured
	if (sdmmc_ctx->SDCardType == CARD_SECURED) return BSP_ERROR;
 800c1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e0:	785b      	ldrb	r3, [r3, #1]
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d101      	bne.n	800c1ea <_SD_InitCard+0x36>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e08a      	b.n	800c300 <_SD_InitCard+0x14c>

    // Send CMD2 ALL_SEND_CID
    if (SDMMC_CmdSendCID(hsdmmc)) return BSP_ERROR;
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f001 f801 	bl	800d1f2 <SDMMC_CmdSendCID>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <_SD_InitCard+0x46>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e082      	b.n	800c300 <_SD_InitCard+0x14c>

    //Get Card identification number data
    sdmmc_ctx->SDCardID[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fde4 	bl	800cdca <SDMMC_GetResponse>
 800c202:	4602      	mov	r2, r0
 800c204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c206:	60da      	str	r2, [r3, #12]
    sdmmc_ctx->SDCardID[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 800c208:	2104      	movs	r1, #4
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fddd 	bl	800cdca <SDMMC_GetResponse>
 800c210:	4602      	mov	r2, r0
 800c212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c214:	611a      	str	r2, [r3, #16]
    sdmmc_ctx->SDCardID[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 800c216:	2108      	movs	r1, #8
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 fdd6 	bl	800cdca <SDMMC_GetResponse>
 800c21e:	4602      	mov	r2, r0
 800c220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c222:	615a      	str	r2, [r3, #20]
    sdmmc_ctx->SDCardID[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 800c224:	210c      	movs	r1, #12
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fdcf 	bl	800cdca <SDMMC_GetResponse>
 800c22c:	4602      	mov	r2, r0
 800c22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c230:	619a      	str	r2, [r3, #24]

    // Send CMD3 SET_REL_ADDR with argument 0
    // SD Card publishes its RCA
    while (sd_rca == 0U) {
 800c232:	e015      	b.n	800c260 <_SD_InitCard+0xac>
    	if (SDMMC_CmdSetRelAdd(hsdmmc, &sd_rca)) return BSP_ERROR;
 800c234:	f107 030a 	add.w	r3, r7, #10
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 f818 	bl	800d270 <SDMMC_CmdSetRelAdd>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <_SD_InitCard+0x96>
 800c246:	2301      	movs	r3, #1
 800c248:	e05a      	b.n	800c300 <_SD_InitCard+0x14c>
    	if ((BSP_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT) return BSP_ERROR;
 800c24a:	f7fa f8a7 	bl	800639c <BSP_GetTick>
 800c24e:	4602      	mov	r2, r0
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	f241 3287 	movw	r2, #4999	; 0x1387
 800c258:	4293      	cmp	r3, r2
 800c25a:	d901      	bls.n	800c260 <_SD_InitCard+0xac>
 800c25c:	2301      	movs	r3, #1
 800c25e:	e04f      	b.n	800c300 <_SD_InitCard+0x14c>
    while (sd_rca == 0U) {
 800c260:	897b      	ldrh	r3, [r7, #10]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0e6      	beq.n	800c234 <_SD_InitCard+0x80>
    }

    // Get the SD card RCA
    sdmmc_ctx->SDCardRelAdd = sd_rca;
 800c266:	897b      	ldrh	r3, [r7, #10]
 800c268:	461a      	mov	r2, r3
 800c26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26c:	62da      	str	r2, [r3, #44]	; 0x2c

    // Send CMD9 SEND_CSD with argument as card's RCA
    if (SDMMC_CmdSendCSD(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 800c26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c272:	041b      	lsls	r3, r3, #16
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 ffda 	bl	800d230 <SDMMC_CmdSendCSD>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <_SD_InitCard+0xd2>
 800c282:	2301      	movs	r3, #1
 800c284:	e03c      	b.n	800c300 <_SD_InitCard+0x14c>

    // Get Card Specific Data
    sdmmc_ctx->SDCardSD[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 800c286:	2100      	movs	r1, #0
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fd9e 	bl	800cdca <SDMMC_GetResponse>
 800c28e:	4602      	mov	r2, r0
 800c290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c292:	61da      	str	r2, [r3, #28]
    sdmmc_ctx->SDCardSD[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 800c294:	2104      	movs	r1, #4
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fd97 	bl	800cdca <SDMMC_GetResponse>
 800c29c:	4602      	mov	r2, r0
 800c29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a0:	621a      	str	r2, [r3, #32]
    sdmmc_ctx->SDCardSD[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 800c2a2:	2108      	movs	r1, #8
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 fd90 	bl	800cdca <SDMMC_GetResponse>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ae:	625a      	str	r2, [r3, #36]	; 0x24
    sdmmc_ctx->SDCardSD[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 800c2b0:	210c      	movs	r1, #12
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fd89 	bl	800cdca <SDMMC_GetResponse>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2bc:	629a      	str	r2, [r3, #40]	; 0x28

    // Get the Card Class
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 800c2be:	2104      	movs	r1, #4
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fd82 	bl	800cdca <SDMMC_GetResponse>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	0d1a      	lsrs	r2, r3, #20
 800c2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2cc:	605a      	str	r2, [r3, #4]

    // Get CSD parameters
    if (_SD_GetCardCSD(hsdmmc, ctx, &CSD)) return BSP_ERROR;
 800c2ce:	f107 030c 	add.w	r3, r7, #12
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff fdd0 	bl	800be7c <_SD_GetCardCSD>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <_SD_InitCard+0x132>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e00c      	b.n	800c300 <_SD_InitCard+0x14c>

    // Select the Card
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 800c2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ea:	041b      	lsls	r3, r3, #16
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fe96 	bl	800d020 <SDMMC_CmdSelDesel>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <_SD_InitCard+0x14a>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e000      	b.n	800c300 <_SD_InitCard+0x14c>

    return BSP_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3740      	adds	r7, #64	; 0x40
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <_SD_SendSDStatus>:


static uint8_t _SD_SendSDStatus(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, uint32_t *pSDstatus) {
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08e      	sub	sp, #56	; 0x38
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]

	SDMMC_DataInitTypeDef config;
	uint32_t tickstart = BSP_GetTick();
 800c314:	f7fa f842 	bl	800639c <BSP_GetTick>
 800c318:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t count;
	uint32_t *pData = pSDstatus;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	633b      	str	r3, [r7, #48]	; 0x30
	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	3328      	adds	r3, #40	; 0x28
 800c322:	62bb      	str	r3, [r7, #40]	; 0x28

	// Check SD response
	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 800c324:	2100      	movs	r1, #0
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 fd4f 	bl	800cdca <SDMMC_GetResponse>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c336:	d101      	bne.n	800c33c <_SD_SendSDStatus+0x34>
 800c338:	2301      	movs	r3, #1
 800c33a:	e07c      	b.n	800c436 <_SD_SendSDStatus+0x12e>

	// Set block size for card if it is not equal to current block size for card
	if (SDMMC_CmdBlockLength(hsdmmc, 64U)) return BSP_ERROR;
 800c33c:	2140      	movs	r1, #64	; 0x40
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 fd82 	bl	800ce48 <SDMMC_CmdBlockLength>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <_SD_SendSDStatus+0x46>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e073      	b.n	800c436 <_SD_SendSDStatus+0x12e>

	// Send CMD55
	if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 800c34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c352:	041b      	lsls	r3, r3, #16
 800c354:	4619      	mov	r1, r3
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 fec3 	bl	800d0e2 <SDMMC_CmdAppCommand>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <_SD_SendSDStatus+0x5e>
 800c362:	2301      	movs	r3, #1
 800c364:	e067      	b.n	800c436 <_SD_SendSDStatus+0x12e>

	// Configure the SD DPSM (Data Path State Machine)
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c366:	f04f 33ff 	mov.w	r3, #4294967295
 800c36a:	613b      	str	r3, [r7, #16]
	config.DataLength    = 64U;
 800c36c:	2340      	movs	r3, #64	; 0x40
 800c36e:	617b      	str	r3, [r7, #20]
	config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c370:	2360      	movs	r3, #96	; 0x60
 800c372:	61bb      	str	r3, [r7, #24]
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c374:	2302      	movs	r3, #2
 800c376:	61fb      	str	r3, [r7, #28]
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c378:	2300      	movs	r3, #0
 800c37a:	623b      	str	r3, [r7, #32]
	config.DPSM          = SDMMC_DPSM_ENABLE;
 800c37c:	2301      	movs	r3, #1
 800c37e:	627b      	str	r3, [r7, #36]	; 0x24
	(void)SDMMC_ConfigData(hsdmmc, &config);
 800c380:	f107 0310 	add.w	r3, r7, #16
 800c384:	4619      	mov	r1, r3
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fd32 	bl	800cdf0 <SDMMC_ConfigData>

	// Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA
	if (SDMMC_CmdStatusRegister(hsdmmc)) return BSP_ERROR;
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 ffb4 	bl	800d2fa <SDMMC_CmdStatusRegister>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d023      	beq.n	800c3e0 <_SD_SendSDStatus+0xd8>
 800c398:	2301      	movs	r3, #1
 800c39a:	e04c      	b.n	800c436 <_SD_SendSDStatus+0x12e>

	// Get status data
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND)) {
		if (__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOHF)) {
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d011      	beq.n	800c3cc <_SD_SendSDStatus+0xc4>
			for (count = 0U; count < 8U; count++) {
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ac:	e00b      	b.n	800c3c6 <_SD_SendSDStatus+0xbe>
				*pData = SDMMC_ReadFIFO(hsdmmc);
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f000 fc96 	bl	800cce0 <SDMMC_ReadFIFO>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	601a      	str	r2, [r3, #0]
				pData++;
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	3304      	adds	r3, #4
 800c3be:	633b      	str	r3, [r7, #48]	; 0x30
			for (count = 0U; count < 8U; count++) {
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c8:	2b07      	cmp	r3, #7
 800c3ca:	d9f0      	bls.n	800c3ae <_SD_SendSDStatus+0xa6>
			}
		}
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 800c3cc:	f7f9 ffe6 	bl	800639c <BSP_GetTick>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d101      	bne.n	800c3e0 <_SD_SendSDStatus+0xd8>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e02a      	b.n	800c436 <_SD_SendSDStatus+0x12e>
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND)) {
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d0d7      	beq.n	800c39c <_SD_SendSDStatus+0x94>
	}

	if (__SDMMC_GET_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR))) return BSP_ERROR;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f0:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d014      	beq.n	800c422 <_SD_SendSDStatus+0x11a>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e01c      	b.n	800c436 <_SD_SendSDStatus+0x12e>

	while ((__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_DPSMACT))) {
		*pData = SDMMC_ReadFIFO(hsdmmc);
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f000 fc6f 	bl	800cce0 <SDMMC_ReadFIFO>
 800c402:	4602      	mov	r2, r0
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	601a      	str	r2, [r3, #0]
		pData++;
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	3304      	adds	r3, #4
 800c40c:	633b      	str	r3, [r7, #48]	; 0x30
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 800c40e:	f7f9 ffc5 	bl	800639c <BSP_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c41c:	d101      	bne.n	800c422 <_SD_SendSDStatus+0x11a>
 800c41e:	2301      	movs	r3, #1
 800c420:	e009      	b.n	800c436 <_SD_SendSDStatus+0x12e>
	while ((__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_DPSMACT))) {
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1e6      	bne.n	800c3fc <_SD_SendSDStatus+0xf4>
	}

	// Clear all the static status flags
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	4a03      	ldr	r2, [pc, #12]	; (800c440 <_SD_SendSDStatus+0x138>)
 800c432:	639a      	str	r2, [r3, #56]	; 0x38

	return BSP_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3738      	adds	r7, #56	; 0x38
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	1fe00fff 	.word	0x1fe00fff

0800c444 <_SD_GetCardStatus>:


static uint8_t _SD_GetCardStatus(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, SDMMC_CardStatus_TypeDef * status) {
 800c444:	b580      	push	{r7, lr}
 800c446:	b094      	sub	sp, #80	; 0x50
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]

	uint32_t sd_status[16];

	if (_SD_SendSDStatus(hsdmmc, ctx, sd_status)) {
 800c450:	f107 0310 	add.w	r3, r7, #16
 800c454:	461a      	mov	r2, r3
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f7ff ff55 	bl	800c308 <_SD_SendSDStatus>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d004      	beq.n	800c46e <_SD_GetCardStatus+0x2a>
		// Clear all the static flags
		__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4a43      	ldr	r2, [pc, #268]	; (800c574 <_SD_GetCardStatus+0x130>)
 800c468:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e07e      	b.n	800c56c <_SD_GetCardStatus+0x128>
	}

    status->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	099b      	lsrs	r3, r3, #6
 800c472:	b2db      	uxtb	r3, r3
 800c474:	f003 0303 	and.w	r3, r3, #3
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	701a      	strb	r2, [r3, #0]
    status->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	095b      	lsrs	r3, r3, #5
 800c482:	b2db      	uxtb	r3, r3
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	705a      	strb	r2, [r3, #1]
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	0a1b      	lsrs	r3, r3, #8
 800c492:	b29b      	uxth	r3, r3
 800c494:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c498:	b29a      	uxth	r2, r3
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	0e1b      	lsrs	r3, r3, #24
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	805a      	strh	r2, [r3, #2]
    status->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	061a      	lsls	r2, r3, #24
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	021b      	lsls	r3, r3, #8
 800c4b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4b4:	431a      	orrs	r2, r3
                                ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	0a1b      	lsrs	r3, r3, #8
 800c4ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    status->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4be:	431a      	orrs	r2, r3
                                ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	0e1b      	lsrs	r3, r3, #24
 800c4c4:	431a      	orrs	r2, r3
    status->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	605a      	str	r2, [r3, #4]
    status->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	721a      	strb	r2, [r3, #8]
    status->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	0a1b      	lsrs	r3, r3, #8
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	725a      	strb	r2, [r3, #9]
    status->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	0d1b      	lsrs	r3, r3, #20
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	f003 030f 	and.w	r3, r3, #15
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	729a      	strb	r2, [r3, #10]
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	0c1b      	lsrs	r3, r3, #16
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	4313      	orrs	r3, r2
 800c502:	b29a      	uxth	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	819a      	strh	r2, [r3, #12]
    status->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	0a9b      	lsrs	r3, r3, #10
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c512:	b2da      	uxtb	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	739a      	strb	r2, [r3, #14]
    status->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	0a1b      	lsrs	r3, r3, #8
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	b2da      	uxtb	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	73da      	strb	r2, [r3, #15]
    status->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	091b      	lsrs	r3, r3, #4
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	f003 030f 	and.w	r3, r3, #15
 800c532:	b2da      	uxtb	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	741a      	strb	r2, [r3, #16]
    status->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	f003 030f 	and.w	r3, r3, #15
 800c540:	b2da      	uxtb	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	745a      	strb	r2, [r3, #17]
    status->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	0e1b      	lsrs	r3, r3, #24
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	749a      	strb	r2, [r3, #18]

    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 800c550:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 fc77 	bl	800ce48 <SDMMC_CmdBlockLength>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d004      	beq.n	800c56a <_SD_GetCardStatus+0x126>
    	// Clear all the static flags
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	4a04      	ldr	r2, [pc, #16]	; (800c574 <_SD_GetCardStatus+0x130>)
 800c564:	639a      	str	r2, [r3, #56]	; 0x38
    	return BSP_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e000      	b.n	800c56c <_SD_GetCardStatus+0x128>
    }

    return BSP_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3750      	adds	r7, #80	; 0x50
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	1fe00fff 	.word	0x1fe00fff

0800c578 <_SD_FindSCR>:


static uint8_t _SD_FindSCR(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, uint32_t *pSCR) {
 800c578:	b580      	push	{r7, lr}
 800c57a:	b090      	sub	sp, #64	; 0x40
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
	SDMMC_DataInitTypeDef config;
	uint32_t tickstart = BSP_GetTick();
 800c584:	f7f9 ff0a 	bl	800639c <BSP_GetTick>
 800c588:	63b8      	str	r0, [r7, #56]	; 0x38
	uint32_t index = 0U;
 800c58a:	2300      	movs	r3, #0
 800c58c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tempscr[2U] = {0UL, 0UL};
 800c58e:	2300      	movs	r3, #0
 800c590:	613b      	str	r3, [r7, #16]
 800c592:	2300      	movs	r3, #0
 800c594:	617b      	str	r3, [r7, #20]
	uint32_t *scr = pSCR;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	637b      	str	r3, [r7, #52]	; 0x34

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	3328      	adds	r3, #40	; 0x28
 800c59e:	633b      	str	r3, [r7, #48]	; 0x30

	// Set Block Size To 8 Bytes
	if (SDMMC_CmdBlockLength(hsdmmc, 8U)) return BSP_ERROR;
 800c5a0:	2108      	movs	r1, #8
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f000 fc50 	bl	800ce48 <SDMMC_CmdBlockLength>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <_SD_FindSCR+0x3a>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e081      	b.n	800c6b6 <_SD_FindSCR+0x13e>

	// Send CMD55 APP_CMD with argument as card's RCA
	if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)((sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b6:	041b      	lsls	r3, r3, #16
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f000 fd91 	bl	800d0e2 <SDMMC_CmdAppCommand>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <_SD_FindSCR+0x52>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e075      	b.n	800c6b6 <_SD_FindSCR+0x13e>

	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c5ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ce:	61bb      	str	r3, [r7, #24]
	config.DataLength    = 8U;
 800c5d0:	2308      	movs	r3, #8
 800c5d2:	61fb      	str	r3, [r7, #28]
	config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c5d4:	2330      	movs	r3, #48	; 0x30
 800c5d6:	623b      	str	r3, [r7, #32]
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c5d8:	2302      	movs	r3, #2
 800c5da:	627b      	str	r3, [r7, #36]	; 0x24
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	62bb      	str	r3, [r7, #40]	; 0x28
	config.DPSM          = SDMMC_DPSM_ENABLE;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDMMC_ConfigData(hsdmmc, &config);
 800c5e4:	f107 0318 	add.w	r3, r7, #24
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f000 fc00 	bl	800cdf0 <SDMMC_ConfigData>

	// Send ACMD51 SD_APP_SEND_SCR with argument as 0
	if (SDMMC_CmdSendSCR(hsdmmc)) return BSP_ERROR;
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f000 fddc 	bl	800d1ae <SDMMC_CmdSendSCR>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d021      	beq.n	800c640 <_SD_FindSCR+0xc8>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e05a      	b.n	800c6b6 <_SD_FindSCR+0x13e>

	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND)) {
		if ((!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOE)) && (index == 0U)) {
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10f      	bne.n	800c62c <_SD_FindSCR+0xb4>
 800c60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10c      	bne.n	800c62c <_SD_FindSCR+0xb4>
			tempscr[0] = SDMMC_ReadFIFO(hsdmmc);
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f000 fb64 	bl	800cce0 <SDMMC_ReadFIFO>
 800c618:	4603      	mov	r3, r0
 800c61a:	613b      	str	r3, [r7, #16]
			tempscr[1] = SDMMC_ReadFIFO(hsdmmc);
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 fb5f 	bl	800cce0 <SDMMC_ReadFIFO>
 800c622:	4603      	mov	r3, r0
 800c624:	617b      	str	r3, [r7, #20]
			index++;
 800c626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c628:	3301      	adds	r3, #1
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 800c62c:	f7f9 feb6 	bl	800639c <BSP_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63a:	d101      	bne.n	800c640 <_SD_FindSCR+0xc8>
 800c63c:	2301      	movs	r3, #1
 800c63e:	e03a      	b.n	800c6b6 <_SD_FindSCR+0x13e>
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND)) {
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c644:	f240 532a 	movw	r3, #1322	; 0x52a
 800c648:	4013      	ands	r3, r2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0d8      	beq.n	800c600 <_SD_FindSCR+0x88>
	}

	// Checking for error flags
	if (__SDMMC_GET_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR))) {
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c652:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <_SD_FindSCR+0xec>
		__SDMMC_CLEAR_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR));
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	222a      	movs	r2, #42	; 0x2a
 800c65e:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	e028      	b.n	800c6b6 <_SD_FindSCR+0x13e>
	}

    // No error flag set
    // Clear all the static flags
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_DATA_FLAGS);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	4a16      	ldr	r2, [pc, #88]	; (800c6c0 <_SD_FindSCR+0x148>)
 800c668:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	061a      	lsls	r2, r3, #24
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	021b      	lsls	r3, r3, #8
 800c672:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c676:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	0a1b      	lsrs	r3, r3, #8
 800c67c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800c680:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	0e1b      	lsrs	r3, r3, #24
 800c686:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800c688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68a:	601a      	str	r2, [r3, #0]
    scr++;
 800c68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68e:	3304      	adds	r3, #4
 800c690:	637b      	str	r3, [r7, #52]	; 0x34
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	061a      	lsls	r2, r3, #24
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	021b      	lsls	r3, r3, #8
 800c69a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c69e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	0a1b      	lsrs	r3, r3, #8
 800c6a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800c6a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	0e1b      	lsrs	r3, r3, #24
 800c6ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800c6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b2:	601a      	str	r2, [r3, #0]

    return BSP_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3740      	adds	r7, #64	; 0x40
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	18000f3a 	.word	0x18000f3a

0800c6c4 <_SD_WideBus_Enable>:


static uint8_t _SD_WideBus_Enable(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
	uint32_t scr[2U] = {0UL, 0UL};
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	613b      	str	r3, [r7, #16]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	3328      	adds	r3, #40	; 0x28
 800c6da:	617b      	str	r3, [r7, #20]

	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 800c6dc:	2100      	movs	r1, #0
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fb73 	bl	800cdca <SDMMC_GetResponse>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6ee:	d101      	bne.n	800c6f4 <_SD_WideBus_Enable+0x30>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e028      	b.n	800c746 <_SD_WideBus_Enable+0x82>

	// Get SCR Register
	if (_SD_FindSCR(hsdmmc, ctx, scr)) return BSP_ERROR;
 800c6f4:	f107 030c 	add.w	r3, r7, #12
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7ff ff3b 	bl	800c578 <_SD_FindSCR>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d001      	beq.n	800c70c <_SD_WideBus_Enable+0x48>
 800c708:	2301      	movs	r3, #1
 800c70a:	e01c      	b.n	800c746 <_SD_WideBus_Enable+0x82>

	// If requested card supports wide bus operation
	if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) == SDMMC_ALLZERO) return BSP_ERROR;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <_SD_WideBus_Enable+0x56>
 800c716:	2301      	movs	r3, #1
 800c718:	e015      	b.n	800c746 <_SD_WideBus_Enable+0x82>

    // Send CMD55 APP_CMD with argument as card's RCA
    if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71e:	041b      	lsls	r3, r3, #16
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fcdd 	bl	800d0e2 <SDMMC_CmdAppCommand>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <_SD_WideBus_Enable+0x6e>
 800c72e:	2301      	movs	r3, #1
 800c730:	e009      	b.n	800c746 <_SD_WideBus_Enable+0x82>

    // Send ACMD6 APP_CMD with argument as 2 for wide bus mode
    if (SDMMC_CmdBusWidth(hsdmmc, 2U)) return BSP_ERROR;
 800c732:	2102      	movs	r1, #2
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fd17 	bl	800d168 <SDMMC_CmdBusWidth>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <_SD_WideBus_Enable+0x80>
 800c740:	2301      	movs	r3, #1
 800c742:	e000      	b.n	800c746 <_SD_WideBus_Enable+0x82>

    return BSP_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <BSP_STM32_SDMMC_GetCardState>:

uint32_t BSP_STM32_SDMMC_GetCardState(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	6039      	str	r1, [r7, #0]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	3328      	adds	r3, #40	; 0x28
 800c75c:	60fb      	str	r3, [r7, #12]

	uint32_t resp1 = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	60bb      	str	r3, [r7, #8]

	SDMMC_CmdSendStatus(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U));
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c766:	041b      	lsls	r3, r3, #16
 800c768:	4619      	mov	r1, r3
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 fda2 	bl	800d2b4 <SDMMC_CmdSendStatus>
	resp1 = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 800c770:	2100      	movs	r1, #0
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fb29 	bl	800cdca <SDMMC_GetResponse>
 800c778:	60b8      	str	r0, [r7, #8]

	return ((resp1 >> 9U) & 0x0FU);
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	0a5b      	lsrs	r3, r3, #9
 800c77e:	f003 030f 	and.w	r3, r3, #15
}
 800c782:	4618      	mov	r0, r3
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
	...

0800c78c <BSP_STM32_SDMMC_Init>:



uint8_t BSP_STM32_SDMMC_Init(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b092      	sub	sp, #72	; 0x48
 800c790:	af02      	add	r7, sp, #8
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	3328      	adds	r3, #40	; 0x28
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c

	SDMMC_CardStatus_TypeDef cardstatus = {0};
 800c79c:	f107 0320 	add.w	r3, r7, #32
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	605a      	str	r2, [r3, #4]
 800c7a6:	609a      	str	r2, [r3, #8]
 800c7a8:	60da      	str	r2, [r3, #12]
 800c7aa:	611a      	str	r2, [r3, #16]
	uint32_t unitsize;

	// 1. Initialize Card parameters

	// Starting up in 1B bus and 400kHz
	SDMMC_InitTypeDef Init = {0};
 800c7ac:	f107 030c 	add.w	r3, r7, #12
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	601a      	str	r2, [r3, #0]
 800c7b4:	605a      	str	r2, [r3, #4]
 800c7b6:	609a      	str	r2, [r3, #8]
 800c7b8:	60da      	str	r2, [r3, #12]
 800c7ba:	611a      	str	r2, [r3, #16]
	Init.ClockEdge        		= SDMMC_CLOCK_EDGE_RISING;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	60fb      	str	r3, [r7, #12]
	Init.ClockPowerSave   		= SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800c7c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7c4:	613b      	str	r3, [r7, #16]
	Init.BusWide          		= SDMMC_BUS_WIDE_1B;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	617b      	str	r3, [r7, #20]
	Init.HardwareFlowControl 	= SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	61bb      	str	r3, [r7, #24]

	// For freq to 400kHz div = sdmmc_clk / (2 * 400000) -> For 60MHz div = 75
	Init.ClockDiv 				= 75;
 800c7ce:	234b      	movs	r3, #75	; 0x4b
 800c7d0:	61fb      	str	r3, [r7, #28]
	if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 800c7d2:	466a      	mov	r2, sp
 800c7d4:	f107 0318 	add.w	r3, r7, #24
 800c7d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c7dc:	e882 0003 	stmia.w	r2, {r0, r1}
 800c7e0:	f107 030c 	add.w	r3, r7, #12
 800c7e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fa50 	bl	800cc8c <SDMMC_Init>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <BSP_STM32_SDMMC_Init+0x6a>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e098      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>

	// Set Power STate to ON
	if (SDMMC_PowerState_ON(hsdmmc)) return BSP_ERROR;
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fa90 	bl	800cd1c <SDMMC_PowerState_ON>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <BSP_STM32_SDMMC_Init+0x7a>
 800c802:	2301      	movs	r3, #1
 800c804:	e090      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>

	// Wait min 74 card cycles - 1ms is more than enough
	BSP_Delay(1);
 800c806:	2001      	movs	r0, #1
 800c808:	f7f9 fdd4 	bl	80063b4 <BSP_Delay>

	// Identify card version, type and voltage
	if (_SD_IdentifyCard(hsdmmc, ctx)) return BSP_ERROR;
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7ff fac0 	bl	800bd94 <_SD_IdentifyCard>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <BSP_STM32_SDMMC_Init+0x92>
 800c81a:	2301      	movs	r3, #1
 800c81c:	e084      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>

	// Card initialization
	if (_SD_InitCard(hsdmmc, ctx)) return BSP_ERROR;
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7ff fcc7 	bl	800c1b4 <_SD_InitCard>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <BSP_STM32_SDMMC_Init+0xa4>
 800c82c:	2301      	movs	r3, #1
 800c82e:	e07b      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>

	// Set Block Size for Card (always 512 bytes)
	if (SDMMC_CmdBlockLength(hsdmmc, 512)) return BSP_ERROR;
 800c830:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fb07 	bl	800ce48 <SDMMC_CmdBlockLength>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <BSP_STM32_SDMMC_Init+0xb8>
 800c840:	2301      	movs	r3, #1
 800c842:	e071      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>

	// 2. Getting Card Status and obtaining card speed
	if (_SD_GetCardStatus(hsdmmc, ctx, &cardstatus)) return BSP_ERROR;
 800c844:	f107 0320 	add.w	r3, r7, #32
 800c848:	461a      	mov	r2, r3
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fdf9 	bl	800c444 <_SD_GetCardStatus>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <BSP_STM32_SDMMC_Init+0xd0>
 800c858:	2301      	movs	r3, #1
 800c85a:	e065      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>

	speedgrade = cardstatus.UhsSpeedGrade;
 800c85c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c860:	b2db      	uxtb	r3, r3
 800c862:	63bb      	str	r3, [r7, #56]	; 0x38
	unitsize = cardstatus.UhsAllocationUnitSize;
 800c864:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	637b      	str	r3, [r7, #52]	; 0x34

	sdmmc_ctx->SDCardSpeed = CARD_NORMAL_SPEED;
 800c86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86e:	2200      	movs	r2, #0
 800c870:	609a      	str	r2, [r3, #8]
	if (sdmmc_ctx->SDCardType == CARD_SDHC_SDXC) {
 800c872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c874:	785b      	ldrb	r3, [r3, #1]
 800c876:	b2db      	uxtb	r3, r3
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d10d      	bne.n	800c898 <BSP_STM32_SDMMC_Init+0x10c>
		sdmmc_ctx->SDCardSpeed = CARD_HIGH_SPEED;
 800c87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c87e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c882:	609a      	str	r2, [r3, #8]
		if ((speedgrade != 0U) || (unitsize != 0U)) sdmmc_ctx->SDCardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	2b00      	cmp	r3, #0
 800c888:	d102      	bne.n	800c890 <BSP_STM32_SDMMC_Init+0x104>
 800c88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d003      	beq.n	800c898 <BSP_STM32_SDMMC_Init+0x10c>
 800c890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c892:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c896:	609a      	str	r2, [r3, #8]
	}

	// 3. Configure 4-bit communication bus
	if (sdmmc_ctx->SDCardType == CARD_SECURED) return BSP_ERROR;
 800c898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89a:	785b      	ldrb	r3, [r3, #1]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d101      	bne.n	800c8a6 <BSP_STM32_SDMMC_Init+0x11a>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e040      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>

	if (_SD_WideBus_Enable(hsdmmc, ctx)) {
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff ff0b 	bl	800c6c4 <_SD_WideBus_Enable>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d004      	beq.n	800c8be <BSP_STM32_SDMMC_Init+0x132>
		// Clear all the static flags
		__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a1e      	ldr	r2, [pc, #120]	; (800c930 <BSP_STM32_SDMMC_Init+0x1a4>)
 800c8b8:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e034      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>
	}

    // Configure the SDMMC peripheral for 4bit bus operation
	Init.ClockEdge        		= SDMMC_CLOCK_EDGE_RISING;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60fb      	str	r3, [r7, #12]
	Init.ClockPowerSave   		= SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800c8c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8c6:	613b      	str	r3, [r7, #16]
	Init.BusWide          		= SDMMC_BUS_WIDE_4B;
 800c8c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c8cc:	617b      	str	r3, [r7, #20]
	Init.HardwareFlowControl 	= SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800c8ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c8d2:	61bb      	str	r3, [r7, #24]
	// Calculating divider: div = 60MHz / (2 * 7.5MHz) = 4
	// For 60MHz it will give 7.5MHz for SDCard (~3.5MB/s on 4-bit bus)
	Init.ClockDiv				= 4;
 800c8d4:	2304      	movs	r3, #4
 800c8d6:	61fb      	str	r3, [r7, #28]

    if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 800c8d8:	466a      	mov	r2, sp
 800c8da:	f107 0318 	add.w	r3, r7, #24
 800c8de:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c8e2:	e882 0003 	stmia.w	r2, {r0, r1}
 800c8e6:	f107 030c 	add.w	r3, r7, #12
 800c8ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f9cd 	bl	800cc8c <SDMMC_Init>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <BSP_STM32_SDMMC_Init+0x170>
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e015      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>

    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 800c8fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 faa1 	bl	800ce48 <SDMMC_CmdBlockLength>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d004      	beq.n	800c916 <BSP_STM32_SDMMC_Init+0x18a>
    	// Clear all the static flags
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a08      	ldr	r2, [pc, #32]	; (800c930 <BSP_STM32_SDMMC_Init+0x1a4>)
 800c910:	639a      	str	r2, [r3, #56]	; 0x38
    	return BSP_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e008      	b.n	800c928 <BSP_STM32_SDMMC_Init+0x19c>
    }

    // 4. Verify that SD card is ready to use after Initialization
    while (BSP_STM32_SDMMC_GetCardState(hsdmmc, ctx) != SDMMC_CARD_TRANSFER) {};
 800c916:	bf00      	nop
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff ff17 	bl	800c74e <BSP_STM32_SDMMC_GetCardState>
 800c920:	4603      	mov	r3, r0
 800c922:	2b04      	cmp	r3, #4
 800c924:	d1f8      	bne.n	800c918 <BSP_STM32_SDMMC_Init+0x18c>

    return BSP_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3740      	adds	r7, #64	; 0x40
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	1fe00fff 	.word	0x1fe00fff

0800c934 <BSP_STM32_SDMMC_ReadBlocks>:


uint8_t BSP_STM32_SDMMC_ReadBlocks(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 800c934:	b580      	push	{r7, lr}
 800c936:	b092      	sub	sp, #72	; 0x48
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	3328      	adds	r3, #40	; 0x28
 800c946:	633b      	str	r3, [r7, #48]	; 0x30

	SDMMC_DataInitTypeDef config;
	uint32_t errorstate;
	uint32_t tickstart = BSP_GetTick();
 800c948:	f7f9 fd28 	bl	800639c <BSP_GetTick>
 800c94c:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t count;
	uint32_t data;
	uint32_t dataremaining;
	uint32_t add = BlockAdd;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t *tempbuff = pData;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	637b      	str	r3, [r7, #52]	; 0x34

	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800c956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c95a:	441a      	add	r2, r3
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c960:	429a      	cmp	r2, r3
 800c962:	d901      	bls.n	800c968 <BSP_STM32_SDMMC_ReadBlocks+0x34>
 800c964:	2301      	movs	r3, #1
 800c966:	e0b2      	b.n	800cace <BSP_STM32_SDMMC_ReadBlocks+0x19a>

	// Initialize data control register
	hsdmmc->DCTRL = 0U;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	785b      	ldrb	r3, [r3, #1]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b01      	cmp	r3, #1
 800c976:	d002      	beq.n	800c97e <BSP_STM32_SDMMC_ReadBlocks+0x4a>
 800c978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97a:	025b      	lsls	r3, r3, #9
 800c97c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Configure the SD DPSM (Data Path State Machine)
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c97e:	f04f 33ff 	mov.w	r3, #4294967295
 800c982:	613b      	str	r3, [r7, #16]
	config.DataLength    = NumberOfBlocks * 512U;
 800c984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c986:	025b      	lsls	r3, r3, #9
 800c988:	617b      	str	r3, [r7, #20]
	config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c98a:	2390      	movs	r3, #144	; 0x90
 800c98c:	61bb      	str	r3, [r7, #24]
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c98e:	2302      	movs	r3, #2
 800c990:	61fb      	str	r3, [r7, #28]
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c992:	2300      	movs	r3, #0
 800c994:	623b      	str	r3, [r7, #32]
	config.DPSM          = SDMMC_DPSM_DISABLE;
 800c996:	2300      	movs	r3, #0
 800c998:	627b      	str	r3, [r7, #36]	; 0x24
	SDMMC_ConfigData(hsdmmc, &config);
 800c99a:	f107 0310 	add.w	r3, r7, #16
 800c99e:	4619      	mov	r1, r3
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f000 fa25 	bl	800cdf0 <SDMMC_ConfigData>
	__SDMMC_CMDTRANS_ENABLE(hsdmmc);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	60da      	str	r2, [r3, #12]

	// Read block(s) in polling mode
	if (NumberOfBlocks > 1U) {
 800c9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d905      	bls.n	800c9c4 <BSP_STM32_SDMMC_ReadBlocks+0x90>
		// Read Multi Block command
		errorstate = SDMMC_CmdReadMultiBlock(hsdmmc, add);
 800c9b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f000 fa8a 	bl	800ced4 <SDMMC_CmdReadMultiBlock>
 800c9c0:	6478      	str	r0, [r7, #68]	; 0x44
 800c9c2:	e004      	b.n	800c9ce <BSP_STM32_SDMMC_ReadBlocks+0x9a>
	} else {
		// Read Single Block command
		errorstate = SDMMC_CmdReadSingleBlock(hsdmmc, add);
 800c9c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f000 fa61 	bl	800ce8e <SDMMC_CmdReadSingleBlock>
 800c9cc:	6478      	str	r0, [r7, #68]	; 0x44
	}

	// Handle error
	if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800c9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d004      	beq.n	800c9de <BSP_STM32_SDMMC_ReadBlocks+0xaa>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	4a40      	ldr	r2, [pc, #256]	; (800cad8 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800c9d8:	639a      	str	r2, [r3, #56]	; 0x38
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e077      	b.n	800cace <BSP_STM32_SDMMC_ReadBlocks+0x19a>

	// Poll on SDMMC flags
	dataremaining = config.DataLength;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (!(hsdmmc->STA & (SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 800c9e2:	e044      	b.n	800ca6e <BSP_STM32_SDMMC_ReadBlocks+0x13a>
		if ((hsdmmc->STA & (SDMMC_FLAG_RXFIFOHF)) && (dataremaining >= 32U)) {
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d031      	beq.n	800ca54 <BSP_STM32_SDMMC_ReadBlocks+0x120>
 800c9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f2:	2b1f      	cmp	r3, #31
 800c9f4:	d92e      	bls.n	800ca54 <BSP_STM32_SDMMC_ReadBlocks+0x120>
			// Read data from SDMMC Rx FIFO
			for (count = 0U; count < 8U; count++) {
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	643b      	str	r3, [r7, #64]	; 0x40
 800c9fa:	e025      	b.n	800ca48 <BSP_STM32_SDMMC_ReadBlocks+0x114>
				data = SDMMC_ReadFIFO(hsdmmc);
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 f96f 	bl	800cce0 <SDMMC_ReadFIFO>
 800ca02:	62b8      	str	r0, [r7, #40]	; 0x28
				*tempbuff = (uint8_t)(data & 0xFFU);
 800ca04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0a:	701a      	strb	r2, [r3, #0]
				tempbuff++;
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0e:	3301      	adds	r3, #1
 800ca10:	637b      	str	r3, [r7, #52]	; 0x34
				*tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	0a1b      	lsrs	r3, r3, #8
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca1a:	701a      	strb	r2, [r3, #0]
				tempbuff++;
 800ca1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca1e:	3301      	adds	r3, #1
 800ca20:	637b      	str	r3, [r7, #52]	; 0x34
				*tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca24:	0c1b      	lsrs	r3, r3, #16
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2a:	701a      	strb	r2, [r3, #0]
				tempbuff++;
 800ca2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2e:	3301      	adds	r3, #1
 800ca30:	637b      	str	r3, [r7, #52]	; 0x34
				*tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	0e1b      	lsrs	r3, r3, #24
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3a:	701a      	strb	r2, [r3, #0]
				tempbuff++;
 800ca3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3e:	3301      	adds	r3, #1
 800ca40:	637b      	str	r3, [r7, #52]	; 0x34
			for (count = 0U; count < 8U; count++) {
 800ca42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca44:	3301      	adds	r3, #1
 800ca46:	643b      	str	r3, [r7, #64]	; 0x40
 800ca48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca4a:	2b07      	cmp	r3, #7
 800ca4c:	d9d6      	bls.n	800c9fc <BSP_STM32_SDMMC_ReadBlocks+0xc8>
			}
			dataremaining -= 32U;
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca50:	3b20      	subs	r3, #32
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		// Handle timeout
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800ca54:	f7f9 fca2 	bl	800639c <BSP_GetTick>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca62:	d304      	bcc.n	800ca6e <BSP_STM32_SDMMC_ReadBlocks+0x13a>
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4a1c      	ldr	r2, [pc, #112]	; (800cad8 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800ca68:	639a      	str	r2, [r3, #56]	; 0x38
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e02f      	b.n	800cace <BSP_STM32_SDMMC_ReadBlocks+0x19a>
	while (!(hsdmmc->STA & (SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca72:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0b4      	beq.n	800c9e4 <BSP_STM32_SDMMC_ReadBlocks+0xb0>
	}

	__SDMMC_CMDTRANS_DISABLE(hsdmmc);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	60da      	str	r2, [r3, #12]

	// Send stop transmission command in case of multiblock read
	if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00e      	beq.n	800cab0 <BSP_STM32_SDMMC_ReadBlocks+0x17c>
 800ca92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d90b      	bls.n	800cab0 <BSP_STM32_SDMMC_ReadBlocks+0x17c>
		// Send stop transmission command
		errorstate = SDMMC_CmdStopTransfer(hsdmmc);
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f000 fa85 	bl	800cfa8 <SDMMC_CmdStopTransfer>
 800ca9e:	6478      	str	r0, [r7, #68]	; 0x44
		// Handle error
		if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800caa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d004      	beq.n	800cab0 <BSP_STM32_SDMMC_ReadBlocks+0x17c>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	4a0b      	ldr	r2, [pc, #44]	; (800cad8 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800caaa:	639a      	str	r2, [r3, #56]	; 0x38
 800caac:	2301      	movs	r3, #1
 800caae:	e00e      	b.n	800cace <BSP_STM32_SDMMC_ReadBlocks+0x19a>
	}

	// Handle error state
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR)) {
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cab4:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d004      	beq.n	800cac6 <BSP_STM32_SDMMC_ReadBlocks+0x192>
		// Clear all the static flags
		hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4a06      	ldr	r2, [pc, #24]	; (800cad8 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800cac0:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	e003      	b.n	800cace <BSP_STM32_SDMMC_ReadBlocks+0x19a>
	}

	// Clear all the static flags
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4a03      	ldr	r2, [pc, #12]	; (800cad8 <BSP_STM32_SDMMC_ReadBlocks+0x1a4>)
 800caca:	639a      	str	r2, [r3, #56]	; 0x38
	return BSP_OK;
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3748      	adds	r7, #72	; 0x48
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	1fe00fff 	.word	0x1fe00fff

0800cadc <BSP_STM32_SDMMC_WriteBlocks>:


uint8_t BSP_STM32_SDMMC_WriteBlocks(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, const uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 800cadc:	b580      	push	{r7, lr}
 800cade:	b092      	sub	sp, #72	; 0x48
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	3328      	adds	r3, #40	; 0x28
 800caee:	633b      	str	r3, [r7, #48]	; 0x30

	SDMMC_DataInitTypeDef config;
	uint32_t errorstate;
	uint32_t tickstart = BSP_GetTick();
 800caf0:	f7f9 fc54 	bl	800639c <BSP_GetTick>
 800caf4:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t count;
	uint32_t data;
	uint32_t dataremaining;
	uint32_t add = BlockAdd;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	63bb      	str	r3, [r7, #56]	; 0x38
	const uint8_t *tempbuff = pData;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	637b      	str	r3, [r7, #52]	; 0x34


	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800cafe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb02:	441a      	add	r2, r3
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d901      	bls.n	800cb10 <BSP_STM32_SDMMC_WriteBlocks+0x34>
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e0b6      	b.n	800cc7e <BSP_STM32_SDMMC_WriteBlocks+0x1a2>

    // Initialize data control register
    hsdmmc->DCTRL = 0U;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	62da      	str	r2, [r3, #44]	; 0x2c

    if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	785b      	ldrb	r3, [r3, #1]
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d002      	beq.n	800cb26 <BSP_STM32_SDMMC_WriteBlocks+0x4a>
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	025b      	lsls	r3, r3, #9
 800cb24:	63bb      	str	r3, [r7, #56]	; 0x38

    // Configure the SD DPSM (Data Path State Machine)
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb26:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * SDMMC_BLOCKSIZE;
 800cb2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb2e:	025b      	lsls	r3, r3, #9
 800cb30:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cb32:	2390      	movs	r3, #144	; 0x90
 800cb34:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cb36:	2300      	movs	r3, #0
 800cb38:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsdmmc, &config);
 800cb42:	f107 0314 	add.w	r3, r7, #20
 800cb46:	4619      	mov	r1, r3
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 f951 	bl	800cdf0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsdmmc);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	60da      	str	r2, [r3, #12]

    // Write Blocks in Polling mode
	if (NumberOfBlocks > 1U) {
 800cb5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d905      	bls.n	800cb6c <BSP_STM32_SDMMC_WriteBlocks+0x90>
		// Write Multi Block command
		errorstate = SDMMC_CmdWriteMultiBlock(hsdmmc, add);
 800cb60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f000 f9fc 	bl	800cf60 <SDMMC_CmdWriteMultiBlock>
 800cb68:	6478      	str	r0, [r7, #68]	; 0x44
 800cb6a:	e004      	b.n	800cb76 <BSP_STM32_SDMMC_WriteBlocks+0x9a>
	} else {
		// Read Single Block command
		errorstate = SDMMC_CmdWriteSingleBlock(hsdmmc, add);
 800cb6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f000 f9d3 	bl	800cf1a <SDMMC_CmdWriteSingleBlock>
 800cb74:	6478      	str	r0, [r7, #68]	; 0x44
	}

    // Handle error
    if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800cb76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d004      	beq.n	800cb86 <BSP_STM32_SDMMC_WriteBlocks+0xaa>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4a42      	ldr	r2, [pc, #264]	; (800cc88 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800cb80:	639a      	str	r2, [r3, #56]	; 0x38
 800cb82:	2301      	movs	r3, #1
 800cb84:	e07b      	b.n	800cc7e <BSP_STM32_SDMMC_WriteBlocks+0x1a2>

    // Write block(s) in polling mode
    dataremaining = config.DataLength;
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (!(hsdmmc->STA & (SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 800cb8a:	e048      	b.n	800cc1e <BSP_STM32_SDMMC_WriteBlocks+0x142>
    	if ((hsdmmc->STA & (SDMMC_FLAG_TXFIFOHE)) && (dataremaining >= 32U)) {
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d035      	beq.n	800cc04 <BSP_STM32_SDMMC_WriteBlocks+0x128>
 800cb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb9a:	2b1f      	cmp	r3, #31
 800cb9c:	d932      	bls.n	800cc04 <BSP_STM32_SDMMC_WriteBlocks+0x128>
    		// Write data to SDMMC Tx FIFO
    		for (count = 0U; count < 8U; count++) {
 800cb9e:	2300      	movs	r3, #0
 800cba0:	643b      	str	r3, [r7, #64]	; 0x40
 800cba2:	e029      	b.n	800cbf8 <BSP_STM32_SDMMC_WriteBlocks+0x11c>
    			data = (uint32_t)(*tempbuff);
 800cba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	613b      	str	r3, [r7, #16]
    			tempbuff++;
 800cbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbac:	3301      	adds	r3, #1
 800cbae:	637b      	str	r3, [r7, #52]	; 0x34
    			data |= ((uint32_t)(*tempbuff) << 8U);
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	021a      	lsls	r2, r3, #8
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	613b      	str	r3, [r7, #16]
    			tempbuff++;
 800cbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	637b      	str	r3, [r7, #52]	; 0x34
    			data |= ((uint32_t)(*tempbuff) << 16U);
 800cbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	041a      	lsls	r2, r3, #16
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	613b      	str	r3, [r7, #16]
    			tempbuff++;
 800cbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	637b      	str	r3, [r7, #52]	; 0x34
    			data |= ((uint32_t)(*tempbuff) << 24U);
 800cbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	061a      	lsls	r2, r3, #24
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	613b      	str	r3, [r7, #16]
    			tempbuff++;
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	637b      	str	r3, [r7, #52]	; 0x34
    			(void)SDMMC_WriteFIFO(hsdmmc, &data);
 800cbe6:	f107 0310 	add.w	r3, r7, #16
 800cbea:	4619      	mov	r1, r3
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f000 f884 	bl	800ccfa <SDMMC_WriteFIFO>
    		for (count = 0U; count < 8U; count++) {
 800cbf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbfa:	2b07      	cmp	r3, #7
 800cbfc:	d9d2      	bls.n	800cba4 <BSP_STM32_SDMMC_WriteBlocks+0xc8>
    		}
    		dataremaining -= 32U;
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc00:	3b20      	subs	r3, #32
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
    	}

		// Handle timeout
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800cc04:	f7f9 fbca 	bl	800639c <BSP_GetTick>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc12:	d304      	bcc.n	800cc1e <BSP_STM32_SDMMC_WriteBlocks+0x142>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	4a1c      	ldr	r2, [pc, #112]	; (800cc88 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800cc18:	639a      	str	r2, [r3, #56]	; 0x38
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e02f      	b.n	800cc7e <BSP_STM32_SDMMC_WriteBlocks+0x1a2>
    while (!(hsdmmc->STA & (SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc22:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0b0      	beq.n	800cb8c <BSP_STM32_SDMMC_WriteBlocks+0xb0>
    }
    __SDMMC_CMDTRANS_DISABLE(hsdmmc);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	60da      	str	r2, [r3, #12]

    // Send stop transmission command in case of multiblock write
    if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00e      	beq.n	800cc60 <BSP_STM32_SDMMC_WriteBlocks+0x184>
 800cc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d90b      	bls.n	800cc60 <BSP_STM32_SDMMC_WriteBlocks+0x184>
        // Send stop transmission command
        errorstate = SDMMC_CmdStopTransfer(hsdmmc);
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 f9ad 	bl	800cfa8 <SDMMC_CmdStopTransfer>
 800cc4e:	6478      	str	r0, [r7, #68]	; 0x44
        // Handle error
        if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800cc50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d004      	beq.n	800cc60 <BSP_STM32_SDMMC_WriteBlocks+0x184>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	4a0b      	ldr	r2, [pc, #44]	; (800cc88 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800cc5a:	639a      	str	r2, [r3, #56]	; 0x38
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e00e      	b.n	800cc7e <BSP_STM32_SDMMC_WriteBlocks+0x1a2>
    }

	// Handle error state
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_TXUNDERR)) {
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc64:	f003 031a 	and.w	r3, r3, #26
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d004      	beq.n	800cc76 <BSP_STM32_SDMMC_WriteBlocks+0x19a>
		// Clear all the static flags
		hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	4a06      	ldr	r2, [pc, #24]	; (800cc88 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
		return BSP_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e003      	b.n	800cc7e <BSP_STM32_SDMMC_WriteBlocks+0x1a2>
	}

	// Clear all the static flags
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	4a03      	ldr	r2, [pc, #12]	; (800cc88 <BSP_STM32_SDMMC_WriteBlocks+0x1ac>)
 800cc7a:	639a      	str	r2, [r3, #56]	; 0x38
	return BSP_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3748      	adds	r7, #72	; 0x48
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	1fe00fff 	.word	0x1fe00fff

0800cc8c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	b480      	push	{r7}
 800cc90:	b085      	sub	sp, #20
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	f107 001c 	add.w	r0, r7, #28
 800cc9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800cca2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800cca4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800cca6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800ccaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ccac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800ccae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ccb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800ccb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	4b07      	ldr	r3, [pc, #28]	; (800ccdc <SDMMC_Init+0x50>)
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3714      	adds	r7, #20
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	b004      	add	sp, #16
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	ffc02c00 	.word	0xffc02c00

0800cce0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	370c      	adds	r7, #12
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr

0800ccfa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b083      	sub	sp, #12
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
 800cd02:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f043 0203 	orr.w	r2, r3, #3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f003 0303 	and.w	r3, r3, #3
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
	...

0800cd5c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cd7a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800cd80:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800cd86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	68da      	ldr	r2, [r3, #12]
 800cd92:	4b06      	ldr	r3, [pc, #24]	; (800cdac <SDMMC_SendCommand+0x50>)
 800cd94:	4013      	ands	r3, r2
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	fffee0c0 	.word	0xfffee0c0

0800cdb0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	b2db      	uxtb	r3, r3
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	370c      	adds	r7, #12
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b085      	sub	sp, #20
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	3314      	adds	r3, #20
 800cdd8:	461a      	mov	r2, r3
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	4413      	add	r3, r2
 800cdde:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ce16:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ce1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ce22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	431a      	orrs	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ce3a:	2300      	movs	r3, #0

}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ce56:	2310      	movs	r3, #16
 800ce58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce60:	2300      	movs	r3, #0
 800ce62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce6a:	f107 0308 	add.w	r3, r7, #8
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff ff73 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ce76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce7a:	2110      	movs	r1, #16
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 fa5f 	bl	800d340 <SDMMC_GetCmdResp1>
 800ce82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce84:	69fb      	ldr	r3, [r7, #28]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3720      	adds	r7, #32
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b088      	sub	sp, #32
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ce9c:	2311      	movs	r3, #17
 800ce9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cea6:	2300      	movs	r3, #0
 800cea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ceaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ceae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ceb0:	f107 0308 	add.w	r3, r7, #8
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7ff ff50 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cebc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cec0:	2111      	movs	r1, #17
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fa3c 	bl	800d340 <SDMMC_GetCmdResp1>
 800cec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceca:	69fb      	ldr	r3, [r7, #28]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3720      	adds	r7, #32
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b088      	sub	sp, #32
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cee2:	2312      	movs	r3, #18
 800cee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceec:	2300      	movs	r3, #0
 800ceee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cef6:	f107 0308 	add.w	r3, r7, #8
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff ff2d 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cf02:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf06:	2112      	movs	r1, #18
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fa19 	bl	800d340 <SDMMC_GetCmdResp1>
 800cf0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf10:	69fb      	ldr	r3, [r7, #28]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b088      	sub	sp, #32
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cf28:	2318      	movs	r3, #24
 800cf2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf32:	2300      	movs	r3, #0
 800cf34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf3c:	f107 0308 	add.w	r3, r7, #8
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff ff0a 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cf48:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf4c:	2118      	movs	r1, #24
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f9f6 	bl	800d340 <SDMMC_GetCmdResp1>
 800cf54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf56:	69fb      	ldr	r3, [r7, #28]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3720      	adds	r7, #32
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b088      	sub	sp, #32
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cf6e:	2319      	movs	r3, #25
 800cf70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf82:	f107 0308 	add.w	r3, r7, #8
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7ff fee7 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cf8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf92:	2119      	movs	r1, #25
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f9d3 	bl	800d340 <SDMMC_GetCmdResp1>
 800cf9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cfb4:	230c      	movs	r3, #12
 800cfb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfc6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfe0:	f107 0308 	add.w	r3, r7, #8
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7ff feb8 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cfec:	4a0b      	ldr	r2, [pc, #44]	; (800d01c <SDMMC_CmdStopTransfer+0x74>)
 800cfee:	210c      	movs	r1, #12
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f9a5 	bl	800d340 <SDMMC_GetCmdResp1>
 800cff6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d00a:	d101      	bne.n	800d010 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d00c:	2300      	movs	r3, #0
 800d00e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d010:	69fb      	ldr	r3, [r7, #28]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3720      	adds	r7, #32
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	05f5e100 	.word	0x05f5e100

0800d020 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b088      	sub	sp, #32
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d02e:	2307      	movs	r3, #7
 800d030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d032:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d038:	2300      	movs	r3, #0
 800d03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d042:	f107 0308 	add.w	r3, r7, #8
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff fe87 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d04e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d052:	2107      	movs	r1, #7
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 f973 	bl	800d340 <SDMMC_GetCmdResp1>
 800d05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d05c:	69fb      	ldr	r3, [r7, #28]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3720      	adds	r7, #32
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b088      	sub	sp, #32
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d06e:	2300      	movs	r3, #0
 800d070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d072:	2300      	movs	r3, #0
 800d074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d076:	2300      	movs	r3, #0
 800d078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d07a:	2300      	movs	r3, #0
 800d07c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d07e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d082:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d084:	f107 0308 	add.w	r3, r7, #8
 800d088:	4619      	mov	r1, r3
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7ff fe66 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 fb97 	bl	800d7c4 <SDMMC_GetCmdError>
 800d096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d098:	69fb      	ldr	r3, [r7, #28]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3720      	adds	r7, #32
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b088      	sub	sp, #32
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d0aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d0ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d0b0:	2308      	movs	r3, #8
 800d0b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0c4:	f107 0308 	add.w	r3, r7, #8
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7ff fe46 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fb29 	bl	800d728 <SDMMC_GetCmdResp7>
 800d0d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0d8:	69fb      	ldr	r3, [r7, #28]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3720      	adds	r7, #32
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b088      	sub	sp, #32
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
 800d0ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d0f0:	2337      	movs	r3, #55	; 0x37
 800d0f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d104:	f107 0308 	add.w	r3, r7, #8
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff fe26 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d110:	f241 3288 	movw	r2, #5000	; 0x1388
 800d114:	2137      	movs	r1, #55	; 0x37
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 f912 	bl	800d340 <SDMMC_GetCmdResp1>
 800d11c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d11e:	69fb      	ldr	r3, [r7, #28]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3720      	adds	r7, #32
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b088      	sub	sp, #32
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d136:	2329      	movs	r3, #41	; 0x29
 800d138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d13a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d13e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d140:	2300      	movs	r3, #0
 800d142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d148:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d14a:	f107 0308 	add.w	r3, r7, #8
 800d14e:	4619      	mov	r1, r3
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7ff fe03 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fa2e 	bl	800d5b8 <SDMMC_GetCmdResp3>
 800d15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d15e:	69fb      	ldr	r3, [r7, #28]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b088      	sub	sp, #32
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d176:	2306      	movs	r3, #6
 800d178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d17a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d180:	2300      	movs	r3, #0
 800d182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d18a:	f107 0308 	add.w	r3, r7, #8
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff fde3 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d196:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19a:	2106      	movs	r1, #6
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f8cf 	bl	800d340 <SDMMC_GetCmdResp1>
 800d1a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1a4:	69fb      	ldr	r3, [r7, #28]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3720      	adds	r7, #32
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b088      	sub	sp, #32
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d1ba:	2333      	movs	r3, #51	; 0x33
 800d1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1ce:	f107 0308 	add.w	r3, r7, #8
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff fdc1 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d1da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1de:	2133      	movs	r1, #51	; 0x33
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f8ad 	bl	800d340 <SDMMC_GetCmdResp1>
 800d1e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3720      	adds	r7, #32
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b088      	sub	sp, #32
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d1fe:	2302      	movs	r3, #2
 800d200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d202:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d208:	2300      	movs	r3, #0
 800d20a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d20c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d210:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d212:	f107 0308 	add.w	r3, r7, #8
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7ff fd9f 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f980 	bl	800d524 <SDMMC_GetCmdResp2>
 800d224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d226:	69fb      	ldr	r3, [r7, #28]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3720      	adds	r7, #32
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d23e:	2309      	movs	r3, #9
 800d240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d242:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d248:	2300      	movs	r3, #0
 800d24a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d24c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d250:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d252:	f107 0308 	add.w	r3, r7, #8
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7ff fd7f 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f960 	bl	800d524 <SDMMC_GetCmdResp2>
 800d264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d266:	69fb      	ldr	r3, [r7, #28]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3720      	adds	r7, #32
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d27a:	2300      	movs	r3, #0
 800d27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d27e:	2303      	movs	r3, #3
 800d280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d282:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d288:	2300      	movs	r3, #0
 800d28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d28c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d292:	f107 0308 	add.w	r3, r7, #8
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff fd5f 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	2103      	movs	r1, #3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f9c8 	bl	800d638 <SDMMC_GetCmdResp6>
 800d2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2aa:	69fb      	ldr	r3, [r7, #28]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b088      	sub	sp, #32
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d2c2:	230d      	movs	r3, #13
 800d2c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2d6:	f107 0308 	add.w	r3, r7, #8
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff fd3d 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e6:	210d      	movs	r1, #13
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f829 	bl	800d340 <SDMMC_GetCmdResp1>
 800d2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2f0:	69fb      	ldr	r3, [r7, #28]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b088      	sub	sp, #32
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d302:	2300      	movs	r3, #0
 800d304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d306:	230d      	movs	r3, #13
 800d308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d30a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d30e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d310:	2300      	movs	r3, #0
 800d312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d31a:	f107 0308 	add.w	r3, r7, #8
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff fd1b 	bl	800cd5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d326:	f241 3288 	movw	r2, #5000	; 0x1388
 800d32a:	210d      	movs	r1, #13
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f807 	bl	800d340 <SDMMC_GetCmdResp1>
 800d332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d334:	69fb      	ldr	r3, [r7, #28]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3720      	adds	r7, #32
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
	...

0800d340 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	460b      	mov	r3, r1
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d34e:	4b70      	ldr	r3, [pc, #448]	; (800d510 <SDMMC_GetCmdResp1+0x1d0>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a70      	ldr	r2, [pc, #448]	; (800d514 <SDMMC_GetCmdResp1+0x1d4>)
 800d354:	fba2 2303 	umull	r2, r3, r2, r3
 800d358:	0a5a      	lsrs	r2, r3, #9
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	fb02 f303 	mul.w	r3, r2, r3
 800d360:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	1e5a      	subs	r2, r3, #1
 800d366:	61fa      	str	r2, [r7, #28]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d102      	bne.n	800d372 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d36c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d370:	e0c9      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d376:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d378:	69ba      	ldr	r2, [r7, #24]
 800d37a:	4b67      	ldr	r3, [pc, #412]	; (800d518 <SDMMC_GetCmdResp1+0x1d8>)
 800d37c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0ef      	beq.n	800d362 <SDMMC_GetCmdResp1+0x22>
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1ea      	bne.n	800d362 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d390:	f003 0304 	and.w	r3, r3, #4
 800d394:	2b00      	cmp	r3, #0
 800d396:	d004      	beq.n	800d3a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2204      	movs	r2, #4
 800d39c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d39e:	2304      	movs	r3, #4
 800d3a0:	e0b1      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a6:	f003 0301 	and.w	r3, r3, #1
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d004      	beq.n	800d3b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e0a6      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	4a58      	ldr	r2, [pc, #352]	; (800d51c <SDMMC_GetCmdResp1+0x1dc>)
 800d3bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f7ff fcf6 	bl	800cdb0 <SDMMC_GetCommandResponse>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	7afb      	ldrb	r3, [r7, #11]
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d001      	beq.n	800d3d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e099      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7ff fcf8 	bl	800cdca <SDMMC_GetResponse>
 800d3da:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	4b50      	ldr	r3, [pc, #320]	; (800d520 <SDMMC_GetCmdResp1+0x1e0>)
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d101      	bne.n	800d3ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	e08d      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	da02      	bge.n	800d3f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d3f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d3f4:	e087      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d400:	2340      	movs	r3, #64	; 0x40
 800d402:	e080      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d40e:	2380      	movs	r3, #128	; 0x80
 800d410:	e079      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d41c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d420:	e071      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d42c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d430:	e069      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d43c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d440:	e061      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d44c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d450:	e059      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d45c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d460:	e051      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d46c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d470:	e049      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d002      	beq.n	800d482 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d47c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d480:	e041      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d002      	beq.n	800d492 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d48c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d490:	e039      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d49c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d4a0:	e031      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d002      	beq.n	800d4b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d4ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d4b0:	e029      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d4bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d4c0:	e021      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d4cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d4d0:	e019      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d4dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d4e0:	e011      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d4ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d4f0:	e009      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f003 0308 	and.w	r3, r3, #8
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d4fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d500:	e001      	b.n	800d506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d506:	4618      	mov	r0, r3
 800d508:	3720      	adds	r7, #32
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	2400001c 	.word	0x2400001c
 800d514:	10624dd3 	.word	0x10624dd3
 800d518:	00200045 	.word	0x00200045
 800d51c:	002000c5 	.word	0x002000c5
 800d520:	fdffe008 	.word	0xfdffe008

0800d524 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d524:	b480      	push	{r7}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d52c:	4b1f      	ldr	r3, [pc, #124]	; (800d5ac <SDMMC_GetCmdResp2+0x88>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a1f      	ldr	r2, [pc, #124]	; (800d5b0 <SDMMC_GetCmdResp2+0x8c>)
 800d532:	fba2 2303 	umull	r2, r3, r2, r3
 800d536:	0a5b      	lsrs	r3, r3, #9
 800d538:	f241 3288 	movw	r2, #5000	; 0x1388
 800d53c:	fb02 f303 	mul.w	r3, r2, r3
 800d540:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	1e5a      	subs	r2, r3, #1
 800d546:	60fa      	str	r2, [r7, #12]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d102      	bne.n	800d552 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d54c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d550:	e026      	b.n	800d5a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d556:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d0ef      	beq.n	800d542 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1ea      	bne.n	800d542 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d570:	f003 0304 	and.w	r3, r3, #4
 800d574:	2b00      	cmp	r3, #0
 800d576:	d004      	beq.n	800d582 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2204      	movs	r2, #4
 800d57c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d57e:	2304      	movs	r3, #4
 800d580:	e00e      	b.n	800d5a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d004      	beq.n	800d598 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2201      	movs	r2, #1
 800d592:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d594:	2301      	movs	r3, #1
 800d596:	e003      	b.n	800d5a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a06      	ldr	r2, [pc, #24]	; (800d5b4 <SDMMC_GetCmdResp2+0x90>)
 800d59c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3714      	adds	r7, #20
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	2400001c 	.word	0x2400001c
 800d5b0:	10624dd3 	.word	0x10624dd3
 800d5b4:	002000c5 	.word	0x002000c5

0800d5b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d5c0:	4b1a      	ldr	r3, [pc, #104]	; (800d62c <SDMMC_GetCmdResp3+0x74>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a1a      	ldr	r2, [pc, #104]	; (800d630 <SDMMC_GetCmdResp3+0x78>)
 800d5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ca:	0a5b      	lsrs	r3, r3, #9
 800d5cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5d0:	fb02 f303 	mul.w	r3, r2, r3
 800d5d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	1e5a      	subs	r2, r3, #1
 800d5da:	60fa      	str	r2, [r7, #12]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d102      	bne.n	800d5e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5e4:	e01b      	b.n	800d61e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d0ef      	beq.n	800d5d6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1ea      	bne.n	800d5d6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d604:	f003 0304 	and.w	r3, r3, #4
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d004      	beq.n	800d616 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2204      	movs	r2, #4
 800d610:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d612:	2304      	movs	r3, #4
 800d614:	e003      	b.n	800d61e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a06      	ldr	r2, [pc, #24]	; (800d634 <SDMMC_GetCmdResp3+0x7c>)
 800d61a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	2400001c 	.word	0x2400001c
 800d630:	10624dd3 	.word	0x10624dd3
 800d634:	002000c5 	.word	0x002000c5

0800d638 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b088      	sub	sp, #32
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	460b      	mov	r3, r1
 800d642:	607a      	str	r2, [r7, #4]
 800d644:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d646:	4b35      	ldr	r3, [pc, #212]	; (800d71c <SDMMC_GetCmdResp6+0xe4>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a35      	ldr	r2, [pc, #212]	; (800d720 <SDMMC_GetCmdResp6+0xe8>)
 800d64c:	fba2 2303 	umull	r2, r3, r2, r3
 800d650:	0a5b      	lsrs	r3, r3, #9
 800d652:	f241 3288 	movw	r2, #5000	; 0x1388
 800d656:	fb02 f303 	mul.w	r3, r2, r3
 800d65a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	1e5a      	subs	r2, r3, #1
 800d660:	61fa      	str	r2, [r7, #28]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d102      	bne.n	800d66c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d666:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d66a:	e052      	b.n	800d712 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d670:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d0ef      	beq.n	800d65c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1ea      	bne.n	800d65c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d68a:	f003 0304 	and.w	r3, r3, #4
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d004      	beq.n	800d69c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2204      	movs	r2, #4
 800d696:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d698:	2304      	movs	r3, #4
 800d69a:	e03a      	b.n	800d712 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a0:	f003 0301 	and.w	r3, r3, #1
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d004      	beq.n	800d6b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e02f      	b.n	800d712 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f7ff fb7c 	bl	800cdb0 <SDMMC_GetCommandResponse>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d001      	beq.n	800d6c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e025      	b.n	800d712 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	4a16      	ldr	r2, [pc, #88]	; (800d724 <SDMMC_GetCmdResp6+0xec>)
 800d6ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f7ff fb7b 	bl	800cdca <SDMMC_GetResponse>
 800d6d4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d106      	bne.n	800d6ee <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	0c1b      	lsrs	r3, r3, #16
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	e011      	b.n	800d712 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d6f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d6fc:	e009      	b.n	800d712 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d704:	2b00      	cmp	r3, #0
 800d706:	d002      	beq.n	800d70e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d70c:	e001      	b.n	800d712 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d70e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d712:	4618      	mov	r0, r3
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	2400001c 	.word	0x2400001c
 800d720:	10624dd3 	.word	0x10624dd3
 800d724:	002000c5 	.word	0x002000c5

0800d728 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d728:	b480      	push	{r7}
 800d72a:	b085      	sub	sp, #20
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d730:	4b22      	ldr	r3, [pc, #136]	; (800d7bc <SDMMC_GetCmdResp7+0x94>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a22      	ldr	r2, [pc, #136]	; (800d7c0 <SDMMC_GetCmdResp7+0x98>)
 800d736:	fba2 2303 	umull	r2, r3, r2, r3
 800d73a:	0a5b      	lsrs	r3, r3, #9
 800d73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d740:	fb02 f303 	mul.w	r3, r2, r3
 800d744:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	1e5a      	subs	r2, r3, #1
 800d74a:	60fa      	str	r2, [r7, #12]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d754:	e02c      	b.n	800d7b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d762:	2b00      	cmp	r3, #0
 800d764:	d0ef      	beq.n	800d746 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1ea      	bne.n	800d746 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d774:	f003 0304 	and.w	r3, r3, #4
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d004      	beq.n	800d786 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2204      	movs	r2, #4
 800d780:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d782:	2304      	movs	r3, #4
 800d784:	e014      	b.n	800d7b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78a:	f003 0301 	and.w	r3, r3, #1
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d004      	beq.n	800d79c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2201      	movs	r2, #1
 800d796:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d798:	2301      	movs	r3, #1
 800d79a:	e009      	b.n	800d7b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2240      	movs	r2, #64	; 0x40
 800d7ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d7ae:	2300      	movs	r3, #0

}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	2400001c 	.word	0x2400001c
 800d7c0:	10624dd3 	.word	0x10624dd3

0800d7c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d7cc:	4b11      	ldr	r3, [pc, #68]	; (800d814 <SDMMC_GetCmdError+0x50>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a11      	ldr	r2, [pc, #68]	; (800d818 <SDMMC_GetCmdError+0x54>)
 800d7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d6:	0a5b      	lsrs	r3, r3, #9
 800d7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7dc:	fb02 f303 	mul.w	r3, r2, r3
 800d7e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	1e5a      	subs	r2, r3, #1
 800d7e6:	60fa      	str	r2, [r7, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d102      	bne.n	800d7f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7f0:	e009      	b.n	800d806 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d0f1      	beq.n	800d7e2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a06      	ldr	r2, [pc, #24]	; (800d81c <SDMMC_GetCmdError+0x58>)
 800d802:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	2400001c 	.word	0x2400001c
 800d818:	10624dd3 	.word	0x10624dd3
 800d81c:	002000c5 	.word	0x002000c5

0800d820 <BSP_STM32_TIM_Init>:

/*******************************************************************
* TIM Functions
 *******************************************************************/

uint8_t BSP_STM32_TIM_Init(TIM_TypeDef *htim, uint8_t clk_division, uint16_t prescaler, uint16_t counter_limit) {
 800d820:	b480      	push	{r7}
 800d822:	b087      	sub	sp, #28
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	4608      	mov	r0, r1
 800d82a:	4611      	mov	r1, r2
 800d82c:	461a      	mov	r2, r3
 800d82e:	4603      	mov	r3, r0
 800d830:	72fb      	strb	r3, [r7, #11]
 800d832:	460b      	mov	r3, r1
 800d834:	813b      	strh	r3, [r7, #8]
 800d836:	4613      	mov	r3, r2
 800d838:	80fb      	strh	r3, [r7, #6]
	uint32_t tmp;

	if (clk_division > 3) return BSP_ERROR;
 800d83a:	7afb      	ldrb	r3, [r7, #11]
 800d83c:	2b03      	cmp	r3, #3
 800d83e:	d901      	bls.n	800d844 <BSP_STM32_TIM_Init+0x24>
 800d840:	2301      	movs	r3, #1
 800d842:	e027      	b.n	800d894 <BSP_STM32_TIM_Init+0x74>

	// Setting CR1 register
	tmp = 0;									// Reset value
 800d844:	2300      	movs	r3, #0
 800d846:	617b      	str	r3, [r7, #20]
	tmp |= 0 << TIM_CR1_URS_Pos;				// Update request source
	tmp |= 0 << TIM_CR1_OPM_Pos;				// One pulse mode disabled
	tmp |= 0 << TIM_CR1_DIR_Pos;				// Counting direction UP
	tmp |= 0 << TIM_CR1_CMS_Pos;				// Edge alignment mode
	tmp |= 0 << TIM_CR1_ARPE_Pos;				// Auto-reload preload disabled
	tmp	|= clk_division << TIM_CR1_CKD_Pos;		// Configuring clock division factor
 800d848:	7afb      	ldrb	r3, [r7, #11]
 800d84a:	021b      	lsls	r3, r3, #8
 800d84c:	461a      	mov	r2, r3
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	4313      	orrs	r3, r2
 800d852:	617b      	str	r3, [r7, #20]
	tmp |= 0 << TIM_CR1_UIFREMAP_Pos;			// No remapping

	htim->CR1 = tmp;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	601a      	str	r2, [r3, #0]

	// Setting CR2 register
	tmp = 0;	// Reset value
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
	htim->CR2 = tmp;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	605a      	str	r2, [r3, #4]

	// Setting SMCR register
	tmp = 0;	// Reset value
 800d864:	2300      	movs	r3, #0
 800d866:	617b      	str	r3, [r7, #20]
	htim->SMCR = tmp;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	609a      	str	r2, [r3, #8]

	// Setting PSC register (prescaler)
	htim->PSC = prescaler;
 800d86e:	893a      	ldrh	r2, [r7, #8]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	629a      	str	r2, [r3, #40]	; 0x28

	// Setting ARR register (counter limit)
	htim->ARR = counter_limit;
 800d874:	88fa      	ldrh	r2, [r7, #6]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	62da      	str	r2, [r3, #44]	; 0x2c

	// Resetting CNT register (counter)
	htim->CNT = 0;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2200      	movs	r2, #0
 800d87e:	625a      	str	r2, [r3, #36]	; 0x24

	// Generating update event to reload registers
	htim->EGR = 1 << TIM_EGR_UG_Pos;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2201      	movs	r2, #1
 800d884:	615a      	str	r2, [r3, #20]

	// Enabling update event interrupt
	htim->DIER |= (1 << TIM_DIER_UIE_Pos);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	f043 0201 	orr.w	r2, r3, #1
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	60da      	str	r2, [r3, #12]

	return BSP_OK;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	371c      	adds	r7, #28
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <BSP_STM32_TIM_ConfigChannel>:

uint8_t BSP_STM32_TIM_ConfigChannel(TIM_TypeDef *htim, uint8_t channel, uint8_t mode, uint16_t init_value) {
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	70fb      	strb	r3, [r7, #3]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	70bb      	strb	r3, [r7, #2]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	803b      	strh	r3, [r7, #0]
	// Mode 0b100 - Force channel to inactive level
	// Mode 0b101 - Force channel to active level
	// Mode 0b110 - PWM mode 1
	// Mode 0b111 - PWM mode 2

	channel--;
 800d8ba:	78fb      	ldrb	r3, [r7, #3]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	70fb      	strb	r3, [r7, #3]

	if (channel > 3) return BSP_ERROR;
 800d8c0:	78fb      	ldrb	r3, [r7, #3]
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	d901      	bls.n	800d8ca <BSP_STM32_TIM_ConfigChannel+0x2a>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e06d      	b.n	800d9a6 <BSP_STM32_TIM_ConfigChannel+0x106>
	if (mode > 7) return BSP_ERROR;
 800d8ca:	78bb      	ldrb	r3, [r7, #2]
 800d8cc:	2b07      	cmp	r3, #7
 800d8ce:	d901      	bls.n	800d8d4 <BSP_STM32_TIM_ConfigChannel+0x34>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e068      	b.n	800d9a6 <BSP_STM32_TIM_ConfigChannel+0x106>

	uint8_t ch_shift;
	uint16_t tmp;

	ch_shift = channel << 2;
 800d8d4:	78fb      	ldrb	r3, [r7, #3]
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	737b      	strb	r3, [r7, #13]
	tmp = htim->CCER;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a1b      	ldr	r3, [r3, #32]
 800d8de:	81fb      	strh	r3, [r7, #14]
	tmp &= ~(0b1011 << ch_shift);	// Resetting channel settings
 800d8e0:	7b7b      	ldrb	r3, [r7, #13]
 800d8e2:	220b      	movs	r2, #11
 800d8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8e8:	b21b      	sxth	r3, r3
 800d8ea:	43db      	mvns	r3, r3
 800d8ec:	b21a      	sxth	r2, r3
 800d8ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d8f2:	4013      	ands	r3, r2
 800d8f4:	b21b      	sxth	r3, r3
 800d8f6:	81fb      	strh	r3, [r7, #14]
	tmp |= (0 << (ch_shift + 1));	// Setting positive polarity
	tmp |= (1 << (ch_shift + 0));	// Enable selected channel as output
 800d8f8:	7b7b      	ldrb	r3, [r7, #13]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d900:	b21a      	sxth	r2, r3
 800d902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d906:	4313      	orrs	r3, r2
 800d908:	b21b      	sxth	r3, r3
 800d90a:	81fb      	strh	r3, [r7, #14]
	htim->CCER = tmp;
 800d90c:	89fa      	ldrh	r2, [r7, #14]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	621a      	str	r2, [r3, #32]


	ch_shift = (channel % 2) << 3;
 800d912:	78fb      	ldrb	r3, [r7, #3]
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	b2db      	uxtb	r3, r3
 800d918:	f003 0308 	and.w	r3, r3, #8
 800d91c:	737b      	strb	r3, [r7, #13]
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800d91e:	78fb      	ldrb	r3, [r7, #3]
 800d920:	2b01      	cmp	r3, #1
 800d922:	d803      	bhi.n	800d92c <BSP_STM32_TIM_ConfigChannel+0x8c>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	699b      	ldr	r3, [r3, #24]
 800d928:	81fb      	strh	r3, [r7, #14]
 800d92a:	e002      	b.n	800d932 <BSP_STM32_TIM_ConfigChannel+0x92>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	69db      	ldr	r3, [r3, #28]
 800d930:	81fb      	strh	r3, [r7, #14]
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800d932:	7b7b      	ldrb	r3, [r7, #13]
 800d934:	22ff      	movs	r2, #255	; 0xff
 800d936:	fa02 f303 	lsl.w	r3, r2, r3
 800d93a:	b21b      	sxth	r3, r3
 800d93c:	43db      	mvns	r3, r3
 800d93e:	b21a      	sxth	r2, r3
 800d940:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d944:	4013      	ands	r3, r2
 800d946:	b21b      	sxth	r3, r3
 800d948:	81fb      	strh	r3, [r7, #14]
	tmp |= (0 << (ch_shift + 0));		// Configure channel as output
	tmp |= (0 << (ch_shift + 2));		// Fast mode disabled
	tmp |= (0 << (ch_shift + 3));		// Preload disabled
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800d94a:	78ba      	ldrb	r2, [r7, #2]
 800d94c:	7b7b      	ldrb	r3, [r7, #13]
 800d94e:	3304      	adds	r3, #4
 800d950:	fa02 f303 	lsl.w	r3, r2, r3
 800d954:	b21a      	sxth	r2, r3
 800d956:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	81fb      	strh	r3, [r7, #14]
	if (channel < 2) htim->CCMR1 = tmp; else htim->CCMR2 = tmp;
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	2b01      	cmp	r3, #1
 800d964:	d803      	bhi.n	800d96e <BSP_STM32_TIM_ConfigChannel+0xce>
 800d966:	89fa      	ldrh	r2, [r7, #14]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	619a      	str	r2, [r3, #24]
 800d96c:	e002      	b.n	800d974 <BSP_STM32_TIM_ConfigChannel+0xd4>
 800d96e:	89fa      	ldrh	r2, [r7, #14]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	61da      	str	r2, [r3, #28]

	// Setting value for selected channel
	if (channel == 0) htim->CCR1 = init_value;
 800d974:	78fb      	ldrb	r3, [r7, #3]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d102      	bne.n	800d980 <BSP_STM32_TIM_ConfigChannel+0xe0>
 800d97a:	883a      	ldrh	r2, [r7, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	635a      	str	r2, [r3, #52]	; 0x34
	if (channel == 1) htim->CCR2 = init_value;
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d102      	bne.n	800d98c <BSP_STM32_TIM_ConfigChannel+0xec>
 800d986:	883a      	ldrh	r2, [r7, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	639a      	str	r2, [r3, #56]	; 0x38
	if (channel == 2) htim->CCR3 = init_value;
 800d98c:	78fb      	ldrb	r3, [r7, #3]
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d102      	bne.n	800d998 <BSP_STM32_TIM_ConfigChannel+0xf8>
 800d992:	883a      	ldrh	r2, [r7, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	63da      	str	r2, [r3, #60]	; 0x3c
	if (channel == 3) htim->CCR4 = init_value;
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d102      	bne.n	800d9a4 <BSP_STM32_TIM_ConfigChannel+0x104>
 800d99e:	883a      	ldrh	r2, [r7, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	641a      	str	r2, [r3, #64]	; 0x40


	return BSP_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <BSP_STM32_TIM_Start>:

uint8_t BSP_STM32_TIM_Start(TIM_TypeDef *htim) {
 800d9b2:	b480      	push	{r7}
 800d9b4:	b083      	sub	sp, #12
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
	htim->CR1 |= 1 << TIM_CR1_CEN_Pos;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f043 0201 	orr.w	r2, r3, #1
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	601a      	str	r2, [r3, #0]
	return BSP_OK;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <BSP_STM32_TIM_SetChannelValue>:
uint8_t BSP_STM32_TIM_Stop(TIM_TypeDef *htim) {
	htim->CR1 &= ~(1 << TIM_CR1_CEN_Pos);
	return BSP_OK;
}

uint8_t BSP_STM32_TIM_SetChannelValue(TIM_TypeDef *htim, uint8_t channel, uint16_t value) {
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	803b      	strh	r3, [r7, #0]
	channel --;
 800d9e4:	78fb      	ldrb	r3, [r7, #3]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	70fb      	strb	r3, [r7, #3]
	if (channel > 3) return BSP_ERROR;
 800d9ea:	78fb      	ldrb	r3, [r7, #3]
 800d9ec:	2b03      	cmp	r3, #3
 800d9ee:	d901      	bls.n	800d9f4 <BSP_STM32_TIM_SetChannelValue+0x20>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e018      	b.n	800da26 <BSP_STM32_TIM_SetChannelValue+0x52>

	// Setting value for selected channel
	if (channel == 0) htim->CCR1 = value;
 800d9f4:	78fb      	ldrb	r3, [r7, #3]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d102      	bne.n	800da00 <BSP_STM32_TIM_SetChannelValue+0x2c>
 800d9fa:	883a      	ldrh	r2, [r7, #0]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	635a      	str	r2, [r3, #52]	; 0x34
	if (channel == 1) htim->CCR2 = value;
 800da00:	78fb      	ldrb	r3, [r7, #3]
 800da02:	2b01      	cmp	r3, #1
 800da04:	d102      	bne.n	800da0c <BSP_STM32_TIM_SetChannelValue+0x38>
 800da06:	883a      	ldrh	r2, [r7, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	639a      	str	r2, [r3, #56]	; 0x38
	if (channel == 2) htim->CCR3 = value;
 800da0c:	78fb      	ldrb	r3, [r7, #3]
 800da0e:	2b02      	cmp	r3, #2
 800da10:	d102      	bne.n	800da18 <BSP_STM32_TIM_SetChannelValue+0x44>
 800da12:	883a      	ldrh	r2, [r7, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	63da      	str	r2, [r3, #60]	; 0x3c
	if (channel == 3) htim->CCR4 = value;
 800da18:	78fb      	ldrb	r3, [r7, #3]
 800da1a:	2b03      	cmp	r3, #3
 800da1c:	d102      	bne.n	800da24 <BSP_STM32_TIM_SetChannelValue+0x50>
 800da1e:	883a      	ldrh	r2, [r7, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	641a      	str	r2, [r3, #64]	; 0x40

	return BSP_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <_UART_DMA_Callback_TC>:

#include "BSP_STM32_UART.h"

const uint16_t UARTPrescTable[12] = {1U, 2U, 4U, 6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};

static void _UART_DMA_Callback_TC(void) {
 800da32:	b480      	push	{r7}
 800da34:	af00      	add	r7, sp, #0

}
 800da36:	bf00      	nop
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <BSP_STM32_UART_Init>:



uint8_t BSP_STM32_UART_Init(USART_TypeDef *huart, uint32_t BaudRate, uint32_t WordLength, uint32_t StopBits, uint32_t Parity) {
 800da40:	b480      	push	{r7}
 800da42:	b089      	sub	sp, #36	; 0x24
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
 800da4c:	603b      	str	r3, [r7, #0]
	uint32_t tmpreg = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	61fb      	str	r3, [r7, #28]

	// Disable UART
	huart->CR1 &= ~USART_CR1_UE;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f023 0201 	bic.w	r2, r3, #1
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	601a      	str	r2, [r3, #0]

	// USART CR1 Configuration
	tmpreg = (uint32_t)WordLength | Parity | UART_MODE_TX_RX | UART_OVERSAMPLING_16 | UART_FIFOMODE_ENABLE;
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	431a      	orrs	r2, r3
 800da64:	4b2d      	ldr	r3, [pc, #180]	; (800db1c <BSP_STM32_UART_Init+0xdc>)
 800da66:	4313      	orrs	r3, r2
 800da68:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(huart->CR1, USART_CR1_FIELDS, tmpreg);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	4b2c      	ldr	r3, [pc, #176]	; (800db20 <BSP_STM32_UART_Init+0xe0>)
 800da70:	4013      	ands	r3, r2
 800da72:	69fa      	ldr	r2, [r7, #28]
 800da74:	431a      	orrs	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	601a      	str	r2, [r3, #0]

	// USART CR2 Configuration
	MODIFY_REG(huart->CR2, USART_CR2_STOP, StopBits);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	431a      	orrs	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	605a      	str	r2, [r3, #4]

	// USART CR3 Configuration
	tmpreg = UART_HWCONTROL_NONE | UART_ONE_BIT_SAMPLE_DISABLE | UART_RXFIFO_THRESHOLD_1_2 | UART_TXFIFO_THRESHOLD_1_2;
 800da8a:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800da8e:	61fb      	str	r3, [r7, #28]
	MODIFY_REG(huart->CR3, USART_CR3_FIELDS, tmpreg);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	689a      	ldr	r2, [r3, #8]
 800da94:	4b23      	ldr	r3, [pc, #140]	; (800db24 <BSP_STM32_UART_Init+0xe4>)
 800da96:	4013      	ands	r3, r2
 800da98:	69fa      	ldr	r2, [r7, #28]
 800da9a:	431a      	orrs	r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	609a      	str	r2, [r3, #8]

	// Configuring prescaler
	MODIFY_REG(huart->PRESC, USART_PRESC_PRESCALER, UART_PRESCALER_DIV1);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa4:	f023 020f 	bic.w	r2, r3, #15
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	62da      	str	r2, [r3, #44]	; 0x2c

	// USART BRR Configuration
	uint32_t pclk = 120000000; // 120MHz from PCLK1
 800daac:	4b1e      	ldr	r3, [pc, #120]	; (800db28 <BSP_STM32_UART_Init+0xe8>)
 800daae:	61bb      	str	r3, [r7, #24]
	uint32_t usartdiv = ((pclk/UARTPrescTable[UART_PRESCALER_DIV1]) + (BaudRate/2U)) / (BaudRate);
 800dab0:	2301      	movs	r3, #1
 800dab2:	461a      	mov	r2, r3
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	fbb3 f2f2 	udiv	r2, r3, r2
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	085b      	lsrs	r3, r3, #1
 800dabe:	441a      	add	r2, r3
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dac6:	617b      	str	r3, [r7, #20]

	if (usartdiv < UART_BRR_MIN) return BSP_ERROR;
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	2b0f      	cmp	r3, #15
 800dacc:	d801      	bhi.n	800dad2 <BSP_STM32_UART_Init+0x92>
 800dace:	2301      	movs	r3, #1
 800dad0:	e01d      	b.n	800db0e <BSP_STM32_UART_Init+0xce>
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad8:	d301      	bcc.n	800dade <BSP_STM32_UART_Init+0x9e>
 800dada:	2301      	movs	r3, #1
 800dadc:	e017      	b.n	800db0e <BSP_STM32_UART_Init+0xce>

	huart->BRR = (uint16_t)usartdiv;
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	461a      	mov	r2, r3
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	60da      	str	r2, [r3, #12]

	// Clear bits required for asynchronous mode
	CLEAR_BIT(huart->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	609a      	str	r2, [r3, #8]

	// Enable UART
	huart->CR1 |= USART_CR1_UE;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f043 0201 	orr.w	r2, r3, #1
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3724      	adds	r7, #36	; 0x24
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	2000000c 	.word	0x2000000c
 800db20:	cfff69f3 	.word	0xcfff69f3
 800db24:	11fff4ff 	.word	0x11fff4ff
 800db28:	07270e00 	.word	0x07270e00

0800db2c <BSP_STM32_UART_StartListen>:

uint8_t BSP_STM32_UART_StartListen(USART_TypeDef *huart, TxRxContext_TypeDef * ctx, uint8_t * pBuf, uint32_t bufSize) {
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b086      	sub	sp, #24
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
 800db38:	603b      	str	r3, [r7, #0]

	UARTContext_TypeDef * uart_ctx = (UARTContext_TypeDef *)ctx->ctxmem;
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	3328      	adds	r3, #40	; 0x28
 800db3e:	617b      	str	r3, [r7, #20]

	// Configuring context
	uart_ctx->indexRX0 = 0;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2200      	movs	r2, #0
 800db44:	615a      	str	r2, [r3, #20]
	uart_ctx->pDataRX = pBuf;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	601a      	str	r2, [r3, #0]
	uart_ctx->sizeRX = bufSize;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	60da      	str	r2, [r3, #12]

	// Start DMA
	ctx->callback_TC = (uint32_t)_UART_DMA_Callback_TC;
 800db52:	4a11      	ldr	r2, [pc, #68]	; (800db98 <BSP_STM32_UART_StartListen+0x6c>)
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	621a      	str	r2, [r3, #32]
	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&huart->RDR, (uint32_t)pBuf, bufSize);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	3324      	adds	r3, #36	; 0x24
 800db5c:	4619      	mov	r1, r3
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	68b8      	ldr	r0, [r7, #8]
 800db64:	f7fa fe3a 	bl	80087dc <BSP_STM32_DMA_StartIT>

	// Enabling IDLE interrupt
	SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	f043 0210 	orr.w	r2, r3, #16
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	621a      	str	r2, [r3, #32]
	SET_BIT(huart->CR1, USART_CR1_IDLEIE);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f043 0210 	orr.w	r2, r3, #16
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	601a      	str	r2, [r3, #0]

	// Start DMA receiving
	SET_BIT(huart->CR3, USART_CR3_DMAR);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	609a      	str	r2, [r3, #8]

	return BSP_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	0800da33 	.word	0x0800da33

0800db9c <BSP_STM32_UART_IRQHandler>:

	return BSP_OK;
}


uint8_t BSP_STM32_UART_IRQHandler(USART_TypeDef *huart, TxRxContext_TypeDef *ctx) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]

	UARTContext_TypeDef * uart_ctx = (UARTContext_TypeDef *)ctx->ctxmem;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	3328      	adds	r3, #40	; 0x28
 800dbaa:	60fb      	str	r3, [r7, #12]

	// Handling TXFTIE interrupt (FIFO buffer not full)
	if (huart->CR3 & USART_CR3_TXFTIE) {
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d02e      	beq.n	800dc16 <BSP_STM32_UART_IRQHandler+0x7a>

		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800dbb8:	e00f      	b.n	800dbda <BSP_STM32_UART_IRQHandler+0x3e>
			huart->TDR = *uart_ctx->pDataTX;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	629a      	str	r2, [r3, #40]	; 0x28
			uart_ctx->pDataTX++;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	605a      	str	r2, [r3, #4]
			uart_ctx->indexTX++;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	1c5a      	adds	r2, r3, #1
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	611a      	str	r2, [r3, #16]
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	69db      	ldr	r3, [r3, #28]
 800dbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d005      	beq.n	800dbf2 <BSP_STM32_UART_IRQHandler+0x56>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	691a      	ldr	r2, [r3, #16]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d3e3      	bcc.n	800dbba <BSP_STM32_UART_IRQHandler+0x1e>
		}

		// Switch off TXFTIE interrupt when no more data is available
		if (uart_ctx->indexTX == uart_ctx->sizeTX) {
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	691a      	ldr	r2, [r3, #16]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d10b      	bne.n	800dc16 <BSP_STM32_UART_IRQHandler+0x7a>
			CLEAR_BIT(huart->CR3, USART_CR3_TXFTIE);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	609a      	str	r2, [r3, #8]
			SET_BIT(huart->CR1, USART_CR1_TCIE); // Enabling TCIE interrupt
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	601a      	str	r2, [r3, #0]
		}

	}

	// Handling TCIE interrupt
	if ((huart->CR1 & USART_CR1_TCIE) && (huart->ISR & USART_ISR_TC)) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d011      	beq.n	800dc46 <BSP_STM32_UART_IRQHandler+0xaa>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	69db      	ldr	r3, [r3, #28]
 800dc26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00b      	beq.n	800dc46 <BSP_STM32_UART_IRQHandler+0xaa>
		CLEAR_BIT(huart->CR1, USART_CR1_TCIE);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	601a      	str	r2, [r3, #0]
		SET_BIT(huart->ICR, USART_ICR_TCCF);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a1b      	ldr	r3, [r3, #32]
 800dc3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	621a      	str	r2, [r3, #32]
	}

	// Handling IDLE interrupt
	if ((huart->CR1 & USART_CR1_IDLEIE) && (huart->ISR & USART_ISR_IDLE)) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f003 0310 	and.w	r3, r3, #16
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d031      	beq.n	800dcb6 <BSP_STM32_UART_IRQHandler+0x11a>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	f003 0310 	and.w	r3, r3, #16
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d02b      	beq.n	800dcb6 <BSP_STM32_UART_IRQHandler+0x11a>
		SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	f043 0210 	orr.w	r2, r3, #16
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	621a      	str	r2, [r3, #32]
		/* #define __HAL_DMA_GET_COUNTER(__HANDLE__) ((IS_DMA_STREAM_INSTANCE((__HANDLE__)->Instance))? \
                                           (((DMA_Stream_TypeDef *)(__HANDLE__)->Instance)->NDTR) :\
                                           (((BDMA_Channel_TypeDef *)(__HANDLE__)->Instance)->CNDTR)) */
		uart_ctx->indexRX0 = uart_ctx->indexRX1;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	699a      	ldr	r2, [r3, #24]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	615a      	str	r2, [r3, #20]
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fa fdfa 	bl	8008870 <BSP_STM32_DMA_GetCounter>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800dc82:	461a      	mov	r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	619a      	str	r2, [r3, #24]
		if (uart_ctx->indexRX1 >= uart_ctx->indexRX0) {
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	699a      	ldr	r2, [r3, #24]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	695b      	ldr	r3, [r3, #20]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d307      	bcc.n	800dca4 <BSP_STM32_UART_IRQHandler+0x108>
			uart_ctx->sizeRX = uart_ctx->indexRX1 - uart_ctx->indexRX0;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	699a      	ldr	r2, [r3, #24]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	695b      	ldr	r3, [r3, #20]
 800dc9c:	1ad2      	subs	r2, r2, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	60da      	str	r2, [r3, #12]
 800dca2:	e008      	b.n	800dcb6 <BSP_STM32_UART_IRQHandler+0x11a>
		} else {
			uart_ctx->sizeRX = (uart_ctx->indexRX1 + SERIAL_BUF_SIZE) - uart_ctx->indexRX0;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	699a      	ldr	r2, [r3, #24]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	695b      	ldr	r3, [r3, #20]
 800dcac:	1ad3      	subs	r3, r2, r3
 800dcae:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	60da      	str	r2, [r3, #12]
		}
	}

	return BSP_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <disk_status>:
#endif
#endif

extern Disk_drvTypeDef  disk;

DSTATUS disk_status (BYTE pdrv) {
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dcca:	79fb      	ldrb	r3, [r7, #7]
 800dccc:	4a08      	ldr	r2, [pc, #32]	; (800dcf0 <disk_status+0x30>)
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	79fa      	ldrb	r2, [r7, #7]
 800dcd8:	4905      	ldr	r1, [pc, #20]	; (800dcf0 <disk_status+0x30>)
 800dcda:	440a      	add	r2, r1
 800dcdc:	7a12      	ldrb	r2, [r2, #8]
 800dcde:	4610      	mov	r0, r2
 800dce0:	4798      	blx	r3
 800dce2:	4603      	mov	r3, r0
 800dce4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	24000524 	.word	0x24000524

0800dcf4 <disk_initialize>:


DSTATUS disk_initialize (BYTE pdrv) {
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	4a0d      	ldr	r2, [pc, #52]	; (800dd3c <disk_initialize+0x48>)
 800dd06:	5cd3      	ldrb	r3, [r2, r3]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d111      	bne.n	800dd30 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dd0c:	79fb      	ldrb	r3, [r7, #7]
 800dd0e:	4a0b      	ldr	r2, [pc, #44]	; (800dd3c <disk_initialize+0x48>)
 800dd10:	2101      	movs	r1, #1
 800dd12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dd14:	79fb      	ldrb	r3, [r7, #7]
 800dd16:	4a09      	ldr	r2, [pc, #36]	; (800dd3c <disk_initialize+0x48>)
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	79fa      	ldrb	r2, [r7, #7]
 800dd22:	4906      	ldr	r1, [pc, #24]	; (800dd3c <disk_initialize+0x48>)
 800dd24:	440a      	add	r2, r1
 800dd26:	7a12      	ldrb	r2, [r2, #8]
 800dd28:	4610      	mov	r0, r2
 800dd2a:	4798      	blx	r3
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	24000524 	.word	0x24000524

0800dd40 <disk_read>:


DRESULT disk_read (BYTE pdrv, BYTE *buff, DWORD sector,	UINT count) {
 800dd40:	b590      	push	{r4, r7, lr}
 800dd42:	b087      	sub	sp, #28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60b9      	str	r1, [r7, #8]
 800dd48:	607a      	str	r2, [r7, #4]
 800dd4a:	603b      	str	r3, [r7, #0]
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
 800dd52:	4a0a      	ldr	r2, [pc, #40]	; (800dd7c <disk_read+0x3c>)
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	689c      	ldr	r4, [r3, #8]
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
 800dd5e:	4a07      	ldr	r2, [pc, #28]	; (800dd7c <disk_read+0x3c>)
 800dd60:	4413      	add	r3, r2
 800dd62:	7a18      	ldrb	r0, [r3, #8]
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	68b9      	ldr	r1, [r7, #8]
 800dd6a:	47a0      	blx	r4
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	75fb      	strb	r3, [r7, #23]
  return res;
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	371c      	adds	r7, #28
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd90      	pop	{r4, r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	24000524 	.word	0x24000524

0800dd80 <disk_write>:


#if FF_FS_READONLY == 0

DRESULT disk_write (BYTE pdrv, const BYTE *buff, DWORD sector, UINT count) {
 800dd80:	b590      	push	{r4, r7, lr}
 800dd82:	b087      	sub	sp, #28
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60b9      	str	r1, [r7, #8]
 800dd88:	607a      	str	r2, [r7, #4]
 800dd8a:	603b      	str	r3, [r7, #0]
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
 800dd92:	4a0a      	ldr	r2, [pc, #40]	; (800ddbc <disk_write+0x3c>)
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4413      	add	r3, r2
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	68dc      	ldr	r4, [r3, #12]
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	4a07      	ldr	r2, [pc, #28]	; (800ddbc <disk_write+0x3c>)
 800dda0:	4413      	add	r3, r2
 800dda2:	7a18      	ldrb	r0, [r3, #8]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	68b9      	ldr	r1, [r7, #8]
 800ddaa:	47a0      	blx	r4
 800ddac:	4603      	mov	r3, r0
 800ddae:	75fb      	strb	r3, [r7, #23]
  return res;
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	371c      	adds	r7, #28
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd90      	pop	{r4, r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	24000524 	.word	0x24000524

0800ddc0 <disk_ioctl>:

#endif /* FF_FS_READONLY */


DRESULT disk_ioctl (BYTE pdrv, BYTE cmd, void *buff) {
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	603a      	str	r2, [r7, #0]
 800ddca:	71fb      	strb	r3, [r7, #7]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ddd0:	79fb      	ldrb	r3, [r7, #7]
 800ddd2:	4a09      	ldr	r2, [pc, #36]	; (800ddf8 <disk_ioctl+0x38>)
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4413      	add	r3, r2
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	691b      	ldr	r3, [r3, #16]
 800dddc:	79fa      	ldrb	r2, [r7, #7]
 800ddde:	4906      	ldr	r1, [pc, #24]	; (800ddf8 <disk_ioctl+0x38>)
 800dde0:	440a      	add	r2, r1
 800dde2:	7a10      	ldrb	r0, [r2, #8]
 800dde4:	79b9      	ldrb	r1, [r7, #6]
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	4798      	blx	r3
 800ddea:	4603      	mov	r3, r0
 800ddec:	73fb      	strb	r3, [r7, #15]
  return res;
 800ddee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	24000524 	.word	0x24000524

0800ddfc <f_init>:
char SDPath[4];
FATFS SDFatFS;
FIL SDFile;

void f_init(void)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	af00      	add	r7, sp, #0
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800de00:	4904      	ldr	r1, [pc, #16]	; (800de14 <f_init+0x18>)
 800de02:	4805      	ldr	r0, [pc, #20]	; (800de18 <f_init+0x1c>)
 800de04:	f000 f860 	bl	800dec8 <FATFS_LinkDriver>
 800de08:	4603      	mov	r3, r0
 800de0a:	461a      	mov	r2, r3
 800de0c:	4b03      	ldr	r3, [pc, #12]	; (800de1c <f_init+0x20>)
 800de0e:	701a      	strb	r2, [r3, #0]
}
 800de10:	bf00      	nop
 800de12:	bd80      	pop	{r7, pc}
 800de14:	24000520 	.word	0x24000520
 800de18:	0801bf30 	.word	0x0801bf30
 800de1c:	2400051c 	.word	0x2400051c

0800de20 <get_fattime>:


DWORD get_fattime(void)
{
 800de20:	b480      	push	{r7}
 800de22:	af00      	add	r7, sp, #0
  return 0;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <FATFS_LinkDriverEx>:
#include "BSP_ff_gen_drv.h"

Disk_drvTypeDef disk = {{0},{0},{0},0};


uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun) {
 800de30:	b480      	push	{r7}
 800de32:	b087      	sub	sp, #28
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	4613      	mov	r3, r2
 800de3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de3e:	2301      	movs	r3, #1
 800de40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES) {
 800de46:	4b1f      	ldr	r3, [pc, #124]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de48:	7a5b      	ldrb	r3, [r3, #9]
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d131      	bne.n	800deb4 <FATFS_LinkDriverEx+0x84>
    disk.is_initialized[disk.nbr] = 0;
 800de50:	4b1c      	ldr	r3, [pc, #112]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de52:	7a5b      	ldrb	r3, [r3, #9]
 800de54:	b2db      	uxtb	r3, r3
 800de56:	461a      	mov	r2, r3
 800de58:	4b1a      	ldr	r3, [pc, #104]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de5a:	2100      	movs	r1, #0
 800de5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de5e:	4b19      	ldr	r3, [pc, #100]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de60:	7a5b      	ldrb	r3, [r3, #9]
 800de62:	b2db      	uxtb	r3, r3
 800de64:	4a17      	ldr	r2, [pc, #92]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de6e:	4b15      	ldr	r3, [pc, #84]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de70:	7a5b      	ldrb	r3, [r3, #9]
 800de72:	b2db      	uxtb	r3, r3
 800de74:	461a      	mov	r2, r3
 800de76:	4b13      	ldr	r3, [pc, #76]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de78:	4413      	add	r3, r2
 800de7a:	79fa      	ldrb	r2, [r7, #7]
 800de7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de7e:	4b11      	ldr	r3, [pc, #68]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de80:	7a5b      	ldrb	r3, [r3, #9]
 800de82:	b2db      	uxtb	r3, r3
 800de84:	1c5a      	adds	r2, r3, #1
 800de86:	b2d1      	uxtb	r1, r2
 800de88:	4a0e      	ldr	r2, [pc, #56]	; (800dec4 <FATFS_LinkDriverEx+0x94>)
 800de8a:	7251      	strb	r1, [r2, #9]
 800de8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800de8e:	7dbb      	ldrb	r3, [r7, #22]
 800de90:	3330      	adds	r3, #48	; 0x30
 800de92:	b2da      	uxtb	r2, r3
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	3301      	adds	r3, #1
 800de9c:	223a      	movs	r2, #58	; 0x3a
 800de9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	3302      	adds	r3, #2
 800dea4:	222f      	movs	r2, #47	; 0x2f
 800dea6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	3303      	adds	r3, #3
 800deac:	2200      	movs	r2, #0
 800deae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800deb0:	2300      	movs	r3, #0
 800deb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800deb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	371c      	adds	r7, #28
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	24000524 	.word	0x24000524

0800dec8 <FATFS_LinkDriver>:


uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path) {
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ded2:	2200      	movs	r2, #0
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7ff ffaa 	bl	800de30 <FATFS_LinkDriverEx>
 800dedc:	4603      	mov	r3, r0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
	...

0800dee8 <SD_CheckStatus>:
};


// Private functions

static DSTATUS SD_CheckStatus(BYTE lun) {
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	4603      	mov	r3, r0
 800def0:	71fb      	strb	r3, [r7, #7]
	Stat = STA_NOINIT;
 800def2:	4b0b      	ldr	r3, [pc, #44]	; (800df20 <SD_CheckStatus+0x38>)
 800def4:	2201      	movs	r2, #1
 800def6:	701a      	strb	r2, [r3, #0]

	if (!BSP_SDCARD_GetCardState()) {
 800def8:	f7f7 fa38 	bl	800536c <BSP_SDCARD_GetCardState>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d107      	bne.n	800df12 <SD_CheckStatus+0x2a>
		Stat &= ~STA_NOINIT;
 800df02:	4b07      	ldr	r3, [pc, #28]	; (800df20 <SD_CheckStatus+0x38>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	b2db      	uxtb	r3, r3
 800df08:	f023 0301 	bic.w	r3, r3, #1
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	4b04      	ldr	r3, [pc, #16]	; (800df20 <SD_CheckStatus+0x38>)
 800df10:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800df12:	4b03      	ldr	r3, [pc, #12]	; (800df20 <SD_CheckStatus+0x38>)
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	b2db      	uxtb	r3, r3
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	24000018 	.word	0x24000018

0800df24 <SD_initialize>:

DSTATUS SD_initialize(BYTE lun) {
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	4603      	mov	r3, r0
 800df2c:	71fb      	strb	r3, [r7, #7]
	// NOTE: SDCard initialized separately!!!
	return SD_CheckStatus(lun)?STA_NOINIT:~STA_NOINIT;
 800df2e:	79fb      	ldrb	r3, [r7, #7]
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff ffd9 	bl	800dee8 <SD_CheckStatus>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d001      	beq.n	800df40 <SD_initialize+0x1c>
 800df3c:	2301      	movs	r3, #1
 800df3e:	e000      	b.n	800df42 <SD_initialize+0x1e>
 800df40:	23fe      	movs	r3, #254	; 0xfe
}
 800df42:	4618      	mov	r0, r3
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <SD_status>:


DSTATUS SD_status(BYTE lun) {
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b082      	sub	sp, #8
 800df4e:	af00      	add	r7, sp, #0
 800df50:	4603      	mov	r3, r0
 800df52:	71fb      	strb	r3, [r7, #7]
	return SD_CheckStatus(lun);
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff ffc6 	bl	800dee8 <SD_CheckStatus>
 800df5c:	4603      	mov	r3, r0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <SD_read>:


DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800df66:	b580      	push	{r7, lr}
 800df68:	b084      	sub	sp, #16
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
 800df70:	603b      	str	r3, [r7, #0]
 800df72:	4603      	mov	r3, r0
 800df74:	73fb      	strb	r3, [r7, #15]
	if(BSP_SDCARD_ReadBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800df76:	683a      	ldr	r2, [r7, #0]
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	68b8      	ldr	r0, [r7, #8]
 800df7c:	f7f7 f98e 	bl	800529c <BSP_SDCARD_ReadBlocks>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d001      	beq.n	800df8a <SD_read+0x24>
 800df86:	2301      	movs	r3, #1
 800df88:	e000      	b.n	800df8c <SD_read+0x26>
	return RES_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <SD_write>:


#if FF_READONLY == 0

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60b9      	str	r1, [r7, #8]
 800df9c:	607a      	str	r2, [r7, #4]
 800df9e:	603b      	str	r3, [r7, #0]
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	73fb      	strb	r3, [r7, #15]
	if(BSP_SDCARD_WriteBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	6879      	ldr	r1, [r7, #4]
 800dfa8:	68b8      	ldr	r0, [r7, #8]
 800dfaa:	f7f7 f99b 	bl	80052e4 <BSP_SDCARD_WriteBlocks>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <SD_write+0x24>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e000      	b.n	800dfba <SD_write+0x26>
	return RES_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <SD_ioctl>:

#endif /* FF_READONLY == 0 */



DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff) {
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	4603      	mov	r3, r0
 800dfcc:	603a      	str	r2, [r7, #0]
 800dfce:	71fb      	strb	r3, [r7, #7]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	73fb      	strb	r3, [r7, #15]

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dfd8:	4b1e      	ldr	r3, [pc, #120]	; (800e054 <SD_ioctl+0x90>)
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <SD_ioctl+0x26>
 800dfe6:	2303      	movs	r3, #3
 800dfe8:	e030      	b.n	800e04c <SD_ioctl+0x88>

  switch (cmd) {
 800dfea:	79bb      	ldrb	r3, [r7, #6]
 800dfec:	2b03      	cmp	r3, #3
 800dfee:	d82a      	bhi.n	800e046 <SD_ioctl+0x82>
 800dff0:	a201      	add	r2, pc, #4	; (adr r2, 800dff8 <SD_ioctl+0x34>)
 800dff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff6:	bf00      	nop
 800dff8:	0800e009 	.word	0x0800e009
 800dffc:	0800e00f 	.word	0x0800e00f
 800e000:	0800e01f 	.word	0x0800e01f
 800e004:	0800e031 	.word	0x0800e031
  // Make sure that no pending write process
  case CTRL_SYNC :
    res = RES_OK;
 800e008:	2300      	movs	r3, #0
 800e00a:	73fb      	strb	r3, [r7, #15]
    break;
 800e00c:	e01d      	b.n	800e04a <SD_ioctl+0x86>

  // Get number of sectors on the disk (DWORD)
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = BSP_SDCARD_GetBlockNo();
 800e00e:	f7f7 f98d 	bl	800532c <BSP_SDCARD_GetBlockNo>
 800e012:	4602      	mov	r2, r0
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]
    break;
 800e01c:	e015      	b.n	800e04a <SD_ioctl+0x86>

  // Get R/W sector size (WORD)
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BSP_SDCARD_GetBlockSize();
 800e01e:	f7f7 f995 	bl	800534c <BSP_SDCARD_GetBlockSize>
 800e022:	4603      	mov	r3, r0
 800e024:	461a      	mov	r2, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e02a:	2300      	movs	r3, #0
 800e02c:	73fb      	strb	r3, [r7, #15]
    break;
 800e02e:	e00c      	b.n	800e04a <SD_ioctl+0x86>

  // Get erase block size in unit of sector (DWORD)
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BSP_SDCARD_GetBlockSize() / SD_DEFAULT_BLOCK_SIZE;
 800e030:	f7f7 f98c 	bl	800534c <BSP_SDCARD_GetBlockSize>
 800e034:	4603      	mov	r3, r0
 800e036:	0a5b      	lsrs	r3, r3, #9
 800e038:	b29b      	uxth	r3, r3
 800e03a:	461a      	mov	r2, r3
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e040:	2300      	movs	r3, #0
 800e042:	73fb      	strb	r3, [r7, #15]
    break;
 800e044:	e001      	b.n	800e04a <SD_ioctl+0x86>

  default:
    res = RES_PARERR;
 800e046:	2304      	movs	r3, #4
 800e048:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800e04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	24000018 	.word	0x24000018

0800e058 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	3301      	adds	r3, #1
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e068:	89fb      	ldrh	r3, [r7, #14]
 800e06a:	021b      	lsls	r3, r3, #8
 800e06c:	b21a      	sxth	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	b21b      	sxth	r3, r3
 800e074:	4313      	orrs	r3, r2
 800e076:	b21b      	sxth	r3, r3
 800e078:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e07a:	89fb      	ldrh	r3, [r7, #14]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3303      	adds	r3, #3
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	3202      	adds	r2, #2
 800e0a0:	7812      	ldrb	r2, [r2, #0]
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	021b      	lsls	r3, r3, #8
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	3201      	adds	r2, #1
 800e0ae:	7812      	ldrb	r2, [r2, #0]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	021b      	lsls	r3, r3, #8
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	7812      	ldrb	r2, [r2, #0]
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	60fb      	str	r3, [r7, #12]
	return rv;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3714      	adds	r7, #20
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800e0ce:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e0d2:	b09d      	sub	sp, #116	; 0x74
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800e0d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0da:	3307      	adds	r3, #7
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	469a      	mov	sl, r3
 800e0e4:	4693      	mov	fp, r2
 800e0e6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800e0ea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e0ee:	f04f 0000 	mov.w	r0, #0
 800e0f2:	f04f 0100 	mov.w	r1, #0
 800e0f6:	0219      	lsls	r1, r3, #8
 800e0f8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e0fc:	0210      	lsls	r0, r2, #8
 800e0fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e100:	3306      	adds	r3, #6
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2200      	movs	r2, #0
 800e108:	461c      	mov	r4, r3
 800e10a:	4615      	mov	r5, r2
 800e10c:	ea40 0804 	orr.w	r8, r0, r4
 800e110:	ea41 0905 	orr.w	r9, r1, r5
 800e114:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800e118:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e11c:	f04f 0000 	mov.w	r0, #0
 800e120:	f04f 0100 	mov.w	r1, #0
 800e124:	0219      	lsls	r1, r3, #8
 800e126:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e12a:	0210      	lsls	r0, r2, #8
 800e12c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e12e:	3305      	adds	r3, #5
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	2200      	movs	r2, #0
 800e136:	65bb      	str	r3, [r7, #88]	; 0x58
 800e138:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e13a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800e13e:	4623      	mov	r3, r4
 800e140:	4303      	orrs	r3, r0
 800e142:	62bb      	str	r3, [r7, #40]	; 0x28
 800e144:	462b      	mov	r3, r5
 800e146:	430b      	orrs	r3, r1
 800e148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e14a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e14e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800e152:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e156:	f04f 0000 	mov.w	r0, #0
 800e15a:	f04f 0100 	mov.w	r1, #0
 800e15e:	0219      	lsls	r1, r3, #8
 800e160:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e164:	0210      	lsls	r0, r2, #8
 800e166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e168:	3304      	adds	r3, #4
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2200      	movs	r2, #0
 800e170:	653b      	str	r3, [r7, #80]	; 0x50
 800e172:	657a      	str	r2, [r7, #84]	; 0x54
 800e174:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e178:	4623      	mov	r3, r4
 800e17a:	4303      	orrs	r3, r0
 800e17c:	623b      	str	r3, [r7, #32]
 800e17e:	462b      	mov	r3, r5
 800e180:	430b      	orrs	r3, r1
 800e182:	627b      	str	r3, [r7, #36]	; 0x24
 800e184:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e188:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800e18c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e190:	f04f 0000 	mov.w	r0, #0
 800e194:	f04f 0100 	mov.w	r1, #0
 800e198:	0219      	lsls	r1, r3, #8
 800e19a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e19e:	0210      	lsls	r0, r2, #8
 800e1a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1a2:	3303      	adds	r3, #3
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e1ae:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800e1b2:	4623      	mov	r3, r4
 800e1b4:	4303      	orrs	r3, r0
 800e1b6:	61bb      	str	r3, [r7, #24]
 800e1b8:	462b      	mov	r3, r5
 800e1ba:	430b      	orrs	r3, r1
 800e1bc:	61fb      	str	r3, [r7, #28]
 800e1be:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e1c2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800e1c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e1ca:	f04f 0000 	mov.w	r0, #0
 800e1ce:	f04f 0100 	mov.w	r1, #0
 800e1d2:	0219      	lsls	r1, r3, #8
 800e1d4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e1d8:	0210      	lsls	r0, r2, #8
 800e1da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1dc:	3302      	adds	r3, #2
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e1e6:	647a      	str	r2, [r7, #68]	; 0x44
 800e1e8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e1ec:	4623      	mov	r3, r4
 800e1ee:	4303      	orrs	r3, r0
 800e1f0:	613b      	str	r3, [r7, #16]
 800e1f2:	462b      	mov	r3, r5
 800e1f4:	430b      	orrs	r3, r1
 800e1f6:	617b      	str	r3, [r7, #20]
 800e1f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e1fc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800e200:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e204:	f04f 0200 	mov.w	r2, #0
 800e208:	f04f 0300 	mov.w	r3, #0
 800e20c:	020b      	lsls	r3, r1, #8
 800e20e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e212:	0202      	lsls	r2, r0, #8
 800e214:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e216:	3101      	adds	r1, #1
 800e218:	7809      	ldrb	r1, [r1, #0]
 800e21a:	b2c9      	uxtb	r1, r1
 800e21c:	2000      	movs	r0, #0
 800e21e:	63b9      	str	r1, [r7, #56]	; 0x38
 800e220:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e222:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800e226:	4621      	mov	r1, r4
 800e228:	4311      	orrs	r1, r2
 800e22a:	60b9      	str	r1, [r7, #8]
 800e22c:	4629      	mov	r1, r5
 800e22e:	4319      	orrs	r1, r3
 800e230:	60f9      	str	r1, [r7, #12]
 800e232:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e236:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800e23a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e23e:	f04f 0200 	mov.w	r2, #0
 800e242:	f04f 0300 	mov.w	r3, #0
 800e246:	020b      	lsls	r3, r1, #8
 800e248:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e24c:	0202      	lsls	r2, r0, #8
 800e24e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e250:	7809      	ldrb	r1, [r1, #0]
 800e252:	b2c9      	uxtb	r1, r1
 800e254:	2000      	movs	r0, #0
 800e256:	6339      	str	r1, [r7, #48]	; 0x30
 800e258:	6378      	str	r0, [r7, #52]	; 0x34
 800e25a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e25e:	4621      	mov	r1, r4
 800e260:	4311      	orrs	r1, r2
 800e262:	6039      	str	r1, [r7, #0]
 800e264:	4629      	mov	r1, r5
 800e266:	4319      	orrs	r1, r3
 800e268:	6079      	str	r1, [r7, #4]
 800e26a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e26e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800e272:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800e276:	4610      	mov	r0, r2
 800e278:	4619      	mov	r1, r3
 800e27a:	3774      	adds	r7, #116	; 0x74
 800e27c:	46bd      	mov	sp, r7
 800e27e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e282:	4770      	bx	lr

0800e284 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	460b      	mov	r3, r1
 800e28e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	607a      	str	r2, [r7, #4]
 800e296:	887a      	ldrh	r2, [r7, #2]
 800e298:	b2d2      	uxtb	r2, r2
 800e29a:	701a      	strb	r2, [r3, #0]
 800e29c:	887b      	ldrh	r3, [r7, #2]
 800e29e:	0a1b      	lsrs	r3, r3, #8
 800e2a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	1c5a      	adds	r2, r3, #1
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	887a      	ldrh	r2, [r7, #2]
 800e2aa:	b2d2      	uxtb	r2, r2
 800e2ac:	701a      	strb	r2, [r3, #0]
}
 800e2ae:	bf00      	nop
 800e2b0:	370c      	adds	r7, #12
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr

0800e2ba <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e2ba:	b480      	push	{r7}
 800e2bc:	b083      	sub	sp, #12
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	1c5a      	adds	r2, r3, #1
 800e2c8:	607a      	str	r2, [r7, #4]
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	b2d2      	uxtb	r2, r2
 800e2ce:	701a      	strb	r2, [r3, #0]
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	0a1b      	lsrs	r3, r3, #8
 800e2d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	1c5a      	adds	r2, r3, #1
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	683a      	ldr	r2, [r7, #0]
 800e2de:	b2d2      	uxtb	r2, r2
 800e2e0:	701a      	strb	r2, [r3, #0]
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	0a1b      	lsrs	r3, r3, #8
 800e2e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	1c5a      	adds	r2, r3, #1
 800e2ec:	607a      	str	r2, [r7, #4]
 800e2ee:	683a      	ldr	r2, [r7, #0]
 800e2f0:	b2d2      	uxtb	r2, r2
 800e2f2:	701a      	strb	r2, [r3, #0]
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	0a1b      	lsrs	r3, r3, #8
 800e2f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	1c5a      	adds	r2, r3, #1
 800e2fe:	607a      	str	r2, [r7, #4]
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	b2d2      	uxtb	r2, r2
 800e304:	701a      	strb	r2, [r3, #0]
}
 800e306:	bf00      	nop
 800e308:	370c      	adds	r7, #12
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr

0800e312 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800e312:	b480      	push	{r7}
 800e314:	b085      	sub	sp, #20
 800e316:	af00      	add	r7, sp, #0
 800e318:	60f8      	str	r0, [r7, #12]
 800e31a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	60fa      	str	r2, [r7, #12]
 800e324:	783a      	ldrb	r2, [r7, #0]
 800e326:	701a      	strb	r2, [r3, #0]
 800e328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e32c:	f04f 0200 	mov.w	r2, #0
 800e330:	f04f 0300 	mov.w	r3, #0
 800e334:	0a02      	lsrs	r2, r0, #8
 800e336:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e33a:	0a0b      	lsrs	r3, r1, #8
 800e33c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	1c5a      	adds	r2, r3, #1
 800e344:	60fa      	str	r2, [r7, #12]
 800e346:	783a      	ldrb	r2, [r7, #0]
 800e348:	701a      	strb	r2, [r3, #0]
 800e34a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e34e:	f04f 0200 	mov.w	r2, #0
 800e352:	f04f 0300 	mov.w	r3, #0
 800e356:	0a02      	lsrs	r2, r0, #8
 800e358:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e35c:	0a0b      	lsrs	r3, r1, #8
 800e35e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	1c5a      	adds	r2, r3, #1
 800e366:	60fa      	str	r2, [r7, #12]
 800e368:	783a      	ldrb	r2, [r7, #0]
 800e36a:	701a      	strb	r2, [r3, #0]
 800e36c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e370:	f04f 0200 	mov.w	r2, #0
 800e374:	f04f 0300 	mov.w	r3, #0
 800e378:	0a02      	lsrs	r2, r0, #8
 800e37a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e37e:	0a0b      	lsrs	r3, r1, #8
 800e380:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	60fa      	str	r2, [r7, #12]
 800e38a:	783a      	ldrb	r2, [r7, #0]
 800e38c:	701a      	strb	r2, [r3, #0]
 800e38e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e392:	f04f 0200 	mov.w	r2, #0
 800e396:	f04f 0300 	mov.w	r3, #0
 800e39a:	0a02      	lsrs	r2, r0, #8
 800e39c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e3a0:	0a0b      	lsrs	r3, r1, #8
 800e3a2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	1c5a      	adds	r2, r3, #1
 800e3aa:	60fa      	str	r2, [r7, #12]
 800e3ac:	783a      	ldrb	r2, [r7, #0]
 800e3ae:	701a      	strb	r2, [r3, #0]
 800e3b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3b4:	f04f 0200 	mov.w	r2, #0
 800e3b8:	f04f 0300 	mov.w	r3, #0
 800e3bc:	0a02      	lsrs	r2, r0, #8
 800e3be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e3c2:	0a0b      	lsrs	r3, r1, #8
 800e3c4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	1c5a      	adds	r2, r3, #1
 800e3cc:	60fa      	str	r2, [r7, #12]
 800e3ce:	783a      	ldrb	r2, [r7, #0]
 800e3d0:	701a      	strb	r2, [r3, #0]
 800e3d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3d6:	f04f 0200 	mov.w	r2, #0
 800e3da:	f04f 0300 	mov.w	r3, #0
 800e3de:	0a02      	lsrs	r2, r0, #8
 800e3e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e3e4:	0a0b      	lsrs	r3, r1, #8
 800e3e6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	60fa      	str	r2, [r7, #12]
 800e3f0:	783a      	ldrb	r2, [r7, #0]
 800e3f2:	701a      	strb	r2, [r3, #0]
 800e3f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3f8:	f04f 0200 	mov.w	r2, #0
 800e3fc:	f04f 0300 	mov.w	r3, #0
 800e400:	0a02      	lsrs	r2, r0, #8
 800e402:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e406:	0a0b      	lsrs	r3, r1, #8
 800e408:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	60fa      	str	r2, [r7, #12]
 800e412:	783a      	ldrb	r2, [r7, #0]
 800e414:	701a      	strb	r2, [r3, #0]
}
 800e416:	bf00      	nop
 800e418:	3714      	adds	r7, #20
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800e422:	b480      	push	{r7}
 800e424:	b083      	sub	sp, #12
 800e426:	af00      	add	r7, sp, #0
 800e428:	4603      	mov	r3, r0
 800e42a:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800e42c:	79fb      	ldrb	r3, [r7, #7]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d001      	beq.n	800e436 <dbc_1st+0x14>
 800e432:	2300      	movs	r3, #0
 800e434:	e000      	b.n	800e438 <dbc_1st+0x16>
#endif
	return 0;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	4603      	mov	r3, r0
 800e44c:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d001      	beq.n	800e458 <dbc_2nd+0x14>
 800e454:	2300      	movs	r3, #0
 800e456:	e000      	b.n	800e45a <dbc_2nd+0x16>
#endif
	return 0;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	370c      	adds	r7, #12
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr

0800e466 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800e466:	b580      	push	{r7, lr}
 800e468:	b086      	sub	sp, #24
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	1c5a      	adds	r2, r3, #1
 800e478:	617a      	str	r2, [r7, #20]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 800e47e:	8a7b      	ldrh	r3, [r7, #18]
 800e480:	b2db      	uxtb	r3, r3
 800e482:	4618      	mov	r0, r3
 800e484:	f7ff ffcd 	bl	800e422 <dbc_1st>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d015      	beq.n	800e4ba <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	1c5a      	adds	r2, r3, #1
 800e492:	617a      	str	r2, [r7, #20]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 800e498:	7c7b      	ldrb	r3, [r7, #17]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7ff ffd2 	bl	800e444 <dbc_2nd>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d102      	bne.n	800e4ac <tchar2uni+0x46>
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4aa:	e01d      	b.n	800e4e8 <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 800e4ac:	8a7b      	ldrh	r3, [r7, #18]
 800e4ae:	021b      	lsls	r3, r3, #8
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	7c7b      	ldrb	r3, [r7, #17]
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	4413      	add	r3, r2
 800e4b8:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 800e4ba:	8a7b      	ldrh	r3, [r7, #18]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00d      	beq.n	800e4dc <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 800e4c0:	8a7b      	ldrh	r3, [r7, #18]
 800e4c2:	f240 3152 	movw	r1, #850	; 0x352
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f004 f876 	bl	80125b8 <ff_oem2uni>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800e4d0:	8a7b      	ldrh	r3, [r7, #18]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d102      	bne.n	800e4dc <tchar2uni+0x76>
 800e4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4da:	e005      	b.n	800e4e8 <tchar2uni+0x82>
	}
	uc = wc;
 800e4dc:	8a7b      	ldrh	r3, [r7, #18]
 800e4de:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	697a      	ldr	r2, [r7, #20]
 800e4e4:	601a      	str	r2, [r3, #0]
	return uc;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <chk_share>:

static FRESULT chk_share (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800e4fe:	2300      	movs	r3, #0
 800e500:	60fb      	str	r3, [r7, #12]
 800e502:	e029      	b.n	800e558 <chk_share+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e504:	4a27      	ldr	r2, [pc, #156]	; (800e5a4 <chk_share+0xb4>)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	011b      	lsls	r3, r3, #4
 800e50a:	4413      	add	r3, r2
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d01d      	beq.n	800e54e <chk_share+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800e512:	4a24      	ldr	r2, [pc, #144]	; (800e5a4 <chk_share+0xb4>)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	011b      	lsls	r3, r3, #4
 800e518:	4413      	add	r3, r2
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	429a      	cmp	r2, r3
 800e522:	d116      	bne.n	800e552 <chk_share+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e524:	4a1f      	ldr	r2, [pc, #124]	; (800e5a4 <chk_share+0xb4>)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	011b      	lsls	r3, r3, #4
 800e52a:	4413      	add	r3, r2
 800e52c:	3304      	adds	r3, #4
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800e534:	429a      	cmp	r2, r3
 800e536:	d10c      	bne.n	800e552 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 800e538:	4a1a      	ldr	r2, [pc, #104]	; (800e5a4 <chk_share+0xb4>)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	011b      	lsls	r3, r3, #4
 800e53e:	4413      	add	r3, r2
 800e540:	3308      	adds	r3, #8
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800e548:	429a      	cmp	r2, r3
 800e54a:	d102      	bne.n	800e552 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 800e54c:	e007      	b.n	800e55e <chk_share+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e54e:	2301      	movs	r3, #1
 800e550:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	3301      	adds	r3, #1
 800e556:	60fb      	str	r3, [r7, #12]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d9d2      	bls.n	800e504 <chk_share+0x14>
		}
	}
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2b02      	cmp	r3, #2
 800e562:	d109      	bne.n	800e578 <chk_share+0x88>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d104      	bne.n	800e574 <chk_share+0x84>
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d001      	beq.n	800e574 <chk_share+0x84>
 800e570:	2312      	movs	r3, #18
 800e572:	e010      	b.n	800e596 <chk_share+0xa6>
 800e574:	2300      	movs	r3, #0
 800e576:	e00e      	b.n	800e596 <chk_share+0xa6>
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d108      	bne.n	800e590 <chk_share+0xa0>
 800e57e:	4a09      	ldr	r2, [pc, #36]	; (800e5a4 <chk_share+0xb4>)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	011b      	lsls	r3, r3, #4
 800e584:	4413      	add	r3, r2
 800e586:	330c      	adds	r3, #12
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e58e:	d101      	bne.n	800e594 <chk_share+0xa4>
 800e590:	2310      	movs	r3, #16
 800e592:	e000      	b.n	800e596 <chk_share+0xa6>
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3714      	adds	r7, #20
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	24000538 	.word	0x24000538

0800e5a8 <enq_share>:


static int enq_share (void)	/* Check if an entry is available for a new object */
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	607b      	str	r3, [r7, #4]
 800e5b2:	e002      	b.n	800e5ba <enq_share+0x12>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	607b      	str	r3, [r7, #4]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d806      	bhi.n	800e5ce <enq_share+0x26>
 800e5c0:	4a09      	ldr	r2, [pc, #36]	; (800e5e8 <enq_share+0x40>)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	011b      	lsls	r3, r3, #4
 800e5c6:	4413      	add	r3, r2
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1f2      	bne.n	800e5b4 <enq_share+0xc>
	return (i == FF_FS_LOCK) ? 0 : 1;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	bf14      	ite	ne
 800e5d4:	2301      	movne	r3, #1
 800e5d6:	2300      	moveq	r3, #0
 800e5d8:	b2db      	uxtb	r3, r3
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	370c      	adds	r7, #12
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	24000538 	.word	0x24000538

0800e5ec <inc_share>:

static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b085      	sub	sp, #20
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	60fb      	str	r3, [r7, #12]
 800e5fa:	e01f      	b.n	800e63c <inc_share+0x50>
		if (Files[i].fs == dp->obj.fs
 800e5fc:	4a41      	ldr	r2, [pc, #260]	; (800e704 <inc_share+0x118>)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	011b      	lsls	r3, r3, #4
 800e602:	4413      	add	r3, r2
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d113      	bne.n	800e636 <inc_share+0x4a>
		 && Files[i].clu == dp->obj.sclust
 800e60e:	4a3d      	ldr	r2, [pc, #244]	; (800e704 <inc_share+0x118>)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	011b      	lsls	r3, r3, #4
 800e614:	4413      	add	r3, r2
 800e616:	3304      	adds	r3, #4
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d109      	bne.n	800e636 <inc_share+0x4a>
		 && Files[i].ofs == dp->dptr) break;
 800e622:	4a38      	ldr	r2, [pc, #224]	; (800e704 <inc_share+0x118>)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	011b      	lsls	r3, r3, #4
 800e628:	4413      	add	r3, r2
 800e62a:	3308      	adds	r3, #8
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e632:	429a      	cmp	r2, r3
 800e634:	d006      	beq.n	800e644 <inc_share+0x58>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3301      	adds	r3, #1
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d9dc      	bls.n	800e5fc <inc_share+0x10>
 800e642:	e000      	b.n	800e646 <inc_share+0x5a>
		 && Files[i].ofs == dp->dptr) break;
 800e644:	bf00      	nop
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d132      	bne.n	800e6b2 <inc_share+0xc6>
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800e64c:	2300      	movs	r3, #0
 800e64e:	60fb      	str	r3, [r7, #12]
 800e650:	e002      	b.n	800e658 <inc_share+0x6c>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3301      	adds	r3, #1
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d806      	bhi.n	800e66c <inc_share+0x80>
 800e65e:	4a29      	ldr	r2, [pc, #164]	; (800e704 <inc_share+0x118>)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	011b      	lsls	r3, r3, #4
 800e664:	4413      	add	r3, r2
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1f2      	bne.n	800e652 <inc_share+0x66>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d101      	bne.n	800e676 <inc_share+0x8a>
 800e672:	2300      	movs	r3, #0
 800e674:	e03f      	b.n	800e6f6 <inc_share+0x10a>
		Files[i].fs = dp->obj.fs;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	4922      	ldr	r1, [pc, #136]	; (800e704 <inc_share+0x118>)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	011b      	lsls	r3, r3, #4
 800e680:	440b      	add	r3, r1
 800e682:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	689a      	ldr	r2, [r3, #8]
 800e688:	491e      	ldr	r1, [pc, #120]	; (800e704 <inc_share+0x118>)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	011b      	lsls	r3, r3, #4
 800e68e:	440b      	add	r3, r1
 800e690:	3304      	adds	r3, #4
 800e692:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e698:	491a      	ldr	r1, [pc, #104]	; (800e704 <inc_share+0x118>)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	011b      	lsls	r3, r3, #4
 800e69e:	440b      	add	r3, r1
 800e6a0:	3308      	adds	r3, #8
 800e6a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e6a4:	4a17      	ldr	r2, [pc, #92]	; (800e704 <inc_share+0x118>)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	011b      	lsls	r3, r3, #4
 800e6aa:	4413      	add	r3, r2
 800e6ac:	330c      	adds	r3, #12
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	601a      	str	r2, [r3, #0]
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	dd09      	ble.n	800e6cc <inc_share+0xe0>
 800e6b8:	4a12      	ldr	r2, [pc, #72]	; (800e704 <inc_share+0x118>)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	011b      	lsls	r3, r3, #4
 800e6be:	4413      	add	r3, r2
 800e6c0:	330c      	adds	r3, #12
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d001      	beq.n	800e6cc <inc_share+0xe0>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	e014      	b.n	800e6f6 <inc_share+0x10a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d107      	bne.n	800e6e2 <inc_share+0xf6>
 800e6d2:	4a0c      	ldr	r2, [pc, #48]	; (800e704 <inc_share+0x118>)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	011b      	lsls	r3, r3, #4
 800e6d8:	4413      	add	r3, r2
 800e6da:	330c      	adds	r3, #12
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	e001      	b.n	800e6e6 <inc_share+0xfa>
 800e6e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6e6:	4907      	ldr	r1, [pc, #28]	; (800e704 <inc_share+0x118>)
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	0112      	lsls	r2, r2, #4
 800e6ec:	440a      	add	r2, r1
 800e6ee:	320c      	adds	r2, #12
 800e6f0:	6013      	str	r3, [r2, #0]

	return i + 1;	/* Index number origin from 1 */
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	3301      	adds	r3, #1
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3714      	adds	r7, #20
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
 800e702:	bf00      	nop
 800e704:	24000538 	.word	0x24000538

0800e708 <dec_share>:


static FRESULT dec_share (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
	UINT n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	3b01      	subs	r3, #1
 800e714:	607b      	str	r3, [r7, #4]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d825      	bhi.n	800e768 <dec_share+0x60>
		n = Files[i].ctr;
 800e71c:	4a17      	ldr	r2, [pc, #92]	; (800e77c <dec_share+0x74>)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	011b      	lsls	r3, r3, #4
 800e722:	4413      	add	r3, r2
 800e724:	330c      	adds	r3, #12
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	60fb      	str	r3, [r7, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e730:	d101      	bne.n	800e736 <dec_share+0x2e>
 800e732:	2300      	movs	r3, #0
 800e734:	60fb      	str	r3, [r7, #12]
		if (n > 0) n--;			/* Decrement read mode open count */
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d002      	beq.n	800e742 <dec_share+0x3a>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	3b01      	subs	r3, #1
 800e740:	60fb      	str	r3, [r7, #12]
		Files[i].ctr = n;
 800e742:	4a0e      	ldr	r2, [pc, #56]	; (800e77c <dec_share+0x74>)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	011b      	lsls	r3, r3, #4
 800e748:	4413      	add	r3, r2
 800e74a:	330c      	adds	r3, #12
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	601a      	str	r2, [r3, #0]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d105      	bne.n	800e762 <dec_share+0x5a>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 800e756:	4a09      	ldr	r2, [pc, #36]	; (800e77c <dec_share+0x74>)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	011b      	lsls	r3, r3, #4
 800e75c:	4413      	add	r3, r2
 800e75e:	2200      	movs	r2, #0
 800e760:	601a      	str	r2, [r3, #0]
		}
		res = FR_OK;
 800e762:	2300      	movs	r3, #0
 800e764:	72fb      	strb	r3, [r7, #11]
 800e766:	e001      	b.n	800e76c <dec_share+0x64>
	} else {
		res = FR_INT_ERR;		/* Invalid index number */
 800e768:	2302      	movs	r3, #2
 800e76a:	72fb      	strb	r3, [r7, #11]
	}
	return res;
 800e76c:	7afb      	ldrb	r3, [r7, #11]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3714      	adds	r7, #20
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	24000538 	.word	0x24000538

0800e780 <clear_share>:


static void clear_share (	/* Clear all lock entries of the volume */
	FATFS* fs
)
{
 800e780:	b480      	push	{r7}
 800e782:	b085      	sub	sp, #20
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
 800e788:	2300      	movs	r3, #0
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	e010      	b.n	800e7b0 <clear_share+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e78e:	4a0d      	ldr	r2, [pc, #52]	; (800e7c4 <clear_share+0x44>)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	011b      	lsls	r3, r3, #4
 800e794:	4413      	add	r3, r2
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d105      	bne.n	800e7aa <clear_share+0x2a>
 800e79e:	4a09      	ldr	r2, [pc, #36]	; (800e7c4 <clear_share+0x44>)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	011b      	lsls	r3, r3, #4
 800e7a4:	4413      	add	r3, r2
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	60fb      	str	r3, [r7, #12]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d9eb      	bls.n	800e78e <clear_share+0xe>
	}
}
 800e7b6:	bf00      	nop
 800e7b8:	bf00      	nop
 800e7ba:	3714      	adds	r7, #20
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr
 800e7c4:	24000538 	.word	0x24000538

0800e7c8 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	791b      	ldrb	r3, [r3, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d02c      	beq.n	800e836 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	7858      	ldrb	r0, [r3, #1]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	f7ff fac8 	bl	800dd80 <disk_write>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d11d      	bne.n	800e832 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e804:	1ad2      	subs	r2, r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d213      	bcs.n	800e836 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	78db      	ldrb	r3, [r3, #3]
 800e812:	2b02      	cmp	r3, #2
 800e814:	d10f      	bne.n	800e836 <sync_window+0x6e>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	7858      	ldrb	r0, [r3, #1]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e828:	441a      	add	r2, r3
 800e82a:	2301      	movs	r3, #1
 800e82c:	f7ff faa8 	bl	800dd80 <disk_write>
 800e830:	e001      	b.n	800e836 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800e832:	2301      	movs	r3, #1
 800e834:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800e836:	7bfb      	ldrb	r3, [r7, #15]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e84a:	2300      	movs	r3, #0
 800e84c:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	429a      	cmp	r2, r3
 800e856:	d01b      	beq.n	800e890 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7ff ffb5 	bl	800e7c8 <sync_window>
 800e85e:	4603      	mov	r3, r0
 800e860:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e862:	7bfb      	ldrb	r3, [r7, #15]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d113      	bne.n	800e890 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	7858      	ldrb	r0, [r3, #1]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e872:	2301      	movs	r3, #1
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	f7ff fa63 	bl	800dd40 <disk_read>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d004      	beq.n	800e88a <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800e880:	f04f 33ff 	mov.w	r3, #4294967295
 800e884:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e886:	2301      	movs	r3, #1
 800e888:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	683a      	ldr	r2, [r7, #0]
 800e88e:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 800e890:	7bfb      	ldrb	r3, [r7, #15]
}
 800e892:	4618      	mov	r0, r3
 800e894:	3710      	adds	r7, #16
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
	...

0800e89c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f7ff ff8f 	bl	800e7c8 <sync_window>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e8ae:	7bfb      	ldrb	r3, [r7, #15]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d158      	bne.n	800e966 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d148      	bne.n	800e94e <sync_fs+0xb2>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	795b      	ldrb	r3, [r3, #5]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d144      	bne.n	800e94e <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3340      	adds	r3, #64	; 0x40
 800e8c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f00a f8f3 	bl	8018aba <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	3340      	adds	r3, #64	; 0x40
 800e8d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff fccf 	bl	800e284 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	3340      	adds	r3, #64	; 0x40
 800e8ea:	4921      	ldr	r1, [pc, #132]	; (800e970 <sync_fs+0xd4>)
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff fce4 	bl	800e2ba <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	3340      	adds	r3, #64	; 0x40
 800e8f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e8fa:	491e      	ldr	r1, [pc, #120]	; (800e974 <sync_fs+0xd8>)
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7ff fcdc 	bl	800e2ba <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	3340      	adds	r3, #64	; 0x40
 800e906:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	69db      	ldr	r3, [r3, #28]
 800e90e:	4619      	mov	r1, r3
 800e910:	4610      	mov	r0, r2
 800e912:	f7ff fcd2 	bl	800e2ba <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	3340      	adds	r3, #64	; 0x40
 800e91a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	4619      	mov	r1, r3
 800e924:	4610      	mov	r0, r2
 800e926:	f7ff fcc8 	bl	800e2ba <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e92e:	1c5a      	adds	r2, r3, #1
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	7858      	ldrb	r0, [r3, #1]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e942:	2301      	movs	r3, #1
 800e944:	f7ff fa1c 	bl	800dd80 <disk_write>
			fs->fsi_flag = 0;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	785b      	ldrb	r3, [r3, #1]
 800e952:	2200      	movs	r2, #0
 800e954:	2100      	movs	r1, #0
 800e956:	4618      	mov	r0, r3
 800e958:	f7ff fa32 	bl	800ddc0 <disk_ioctl>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <sync_fs+0xca>
 800e962:	2301      	movs	r3, #1
 800e964:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e966:	7bfb      	ldrb	r3, [r7, #15]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	41615252 	.word	0x41615252
 800e974:	61417272 	.word	0x61417272

0800e978 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	3b02      	subs	r3, #2
 800e986:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a1b      	ldr	r3, [r3, #32]
 800e98c:	3b02      	subs	r3, #2
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	429a      	cmp	r2, r3
 800e992:	d301      	bcc.n	800e998 <clst2sect+0x20>
 800e994:	2300      	movs	r3, #0
 800e996:	e008      	b.n	800e9aa <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	895b      	ldrh	r3, [r3, #10]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	fb01 f303 	mul.w	r3, r1, r3
 800e9a8:	4413      	add	r3, r2
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	370c      	adds	r7, #12
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
	...

0800e9b8 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800e9b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e9bc:	b088      	sub	sp, #32
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d904      	bls.n	800e9da <get_fat+0x22>
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	6a1b      	ldr	r3, [r3, #32]
 800e9d4:	683a      	ldr	r2, [r7, #0]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d302      	bcc.n	800e9e0 <get_fat+0x28>
		val = 1;	/* Internal error */
 800e9da:	2301      	movs	r3, #1
 800e9dc:	61fb      	str	r3, [r7, #28]
 800e9de:	e145      	b.n	800ec6c <get_fat+0x2b4>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e4:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	2b03      	cmp	r3, #3
 800e9ee:	f200 8131 	bhi.w	800ec54 <get_fat+0x29c>
 800e9f2:	a201      	add	r2, pc, #4	; (adr r2, 800e9f8 <get_fat+0x40>)
 800e9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f8:	0800ea09 	.word	0x0800ea09
 800e9fc:	0800eab7 	.word	0x0800eab7
 800ea00:	0800eb03 	.word	0x0800eb03
 800ea04:	0800eb53 	.word	0x0800eb53
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	60fb      	str	r3, [r7, #12]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	085b      	lsrs	r3, r3, #1
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	4413      	add	r3, r2
 800ea14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	899b      	ldrh	r3, [r3, #12]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea26:	4413      	add	r3, r2
 800ea28:	4619      	mov	r1, r3
 800ea2a:	69b8      	ldr	r0, [r7, #24]
 800ea2c:	f7ff ff08 	bl	800e840 <move_window>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f040 8111 	bne.w	800ec5a <get_fat+0x2a2>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	60fa      	str	r2, [r7, #12]
 800ea3e:	69ba      	ldr	r2, [r7, #24]
 800ea40:	8992      	ldrh	r2, [r2, #12]
 800ea42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea46:	fb01 f202 	mul.w	r2, r1, r2
 800ea4a:	1a9b      	subs	r3, r3, r2
 800ea4c:	69ba      	ldr	r2, [r7, #24]
 800ea4e:	4413      	add	r3, r2
 800ea50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	899b      	ldrh	r3, [r3, #12]
 800ea5e:	4619      	mov	r1, r3
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea66:	4413      	add	r3, r2
 800ea68:	4619      	mov	r1, r3
 800ea6a:	69b8      	ldr	r0, [r7, #24]
 800ea6c:	f7ff fee8 	bl	800e840 <move_window>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f040 80f3 	bne.w	800ec5e <get_fat+0x2a6>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	899b      	ldrh	r3, [r3, #12]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea84:	fb01 f202 	mul.w	r2, r1, r2
 800ea88:	1a9b      	subs	r3, r3, r2
 800ea8a:	69ba      	ldr	r2, [r7, #24]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea92:	021b      	lsls	r3, r3, #8
 800ea94:	461a      	mov	r2, r3
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	f003 0301 	and.w	r3, r3, #1
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d002      	beq.n	800eaac <get_fat+0xf4>
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	091b      	lsrs	r3, r3, #4
 800eaaa:	e002      	b.n	800eab2 <get_fat+0xfa>
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eab2:	61fb      	str	r3, [r7, #28]
			break;
 800eab4:	e0da      	b.n	800ec6c <get_fat+0x2b4>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	899b      	ldrh	r3, [r3, #12]
 800eabe:	085b      	lsrs	r3, r3, #1
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	4619      	mov	r1, r3
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	fbb3 f3f1 	udiv	r3, r3, r1
 800eaca:	4413      	add	r3, r2
 800eacc:	4619      	mov	r1, r3
 800eace:	69b8      	ldr	r0, [r7, #24]
 800ead0:	f7ff feb6 	bl	800e840 <move_window>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f040 80c3 	bne.w	800ec62 <get_fat+0x2aa>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	69ba      	ldr	r2, [r7, #24]
 800eae8:	8992      	ldrh	r2, [r2, #12]
 800eaea:	fbb3 f0f2 	udiv	r0, r3, r2
 800eaee:	fb00 f202 	mul.w	r2, r0, r2
 800eaf2:	1a9b      	subs	r3, r3, r2
 800eaf4:	440b      	add	r3, r1
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7ff faae 	bl	800e058 <ld_word>
 800eafc:	4603      	mov	r3, r0
 800eafe:	61fb      	str	r3, [r7, #28]
			break;
 800eb00:	e0b4      	b.n	800ec6c <get_fat+0x2b4>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	899b      	ldrh	r3, [r3, #12]
 800eb0a:	089b      	lsrs	r3, r3, #2
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	4619      	mov	r1, r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb16:	4413      	add	r3, r2
 800eb18:	4619      	mov	r1, r3
 800eb1a:	69b8      	ldr	r0, [r7, #24]
 800eb1c:	f7ff fe90 	bl	800e840 <move_window>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	f040 809f 	bne.w	800ec66 <get_fat+0x2ae>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	69ba      	ldr	r2, [r7, #24]
 800eb34:	8992      	ldrh	r2, [r2, #12]
 800eb36:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb3a:	fb00 f202 	mul.w	r2, r0, r2
 800eb3e:	1a9b      	subs	r3, r3, r2
 800eb40:	440b      	add	r3, r1
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff faa0 	bl	800e088 <ld_dword>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eb4e:	61fb      	str	r3, [r7, #28]
			break;
 800eb50:	e08c      	b.n	800ec6c <get_fat+0x2b4>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	d003      	beq.n	800eb64 <get_fat+0x1ac>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d103      	bne.n	800eb6c <get_fat+0x1b4>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	79db      	ldrb	r3, [r3, #7]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d170      	bne.n	800ec4e <get_fat+0x296>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eb7c:	1e54      	subs	r4, r2, #1
 800eb7e:	f143 35ff 	adc.w	r5, r3, #4294967295
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	899b      	ldrh	r3, [r3, #12]
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	2200      	movs	r2, #0
 800eb8a:	4698      	mov	r8, r3
 800eb8c:	4691      	mov	r9, r2
 800eb8e:	4642      	mov	r2, r8
 800eb90:	464b      	mov	r3, r9
 800eb92:	4620      	mov	r0, r4
 800eb94:	4629      	mov	r1, r5
 800eb96:	f7f1 fba7 	bl	80002e8 <__aeabi_uldivmod>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	895b      	ldrh	r3, [r3, #10]
 800eba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eba6:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	79db      	ldrb	r3, [r3, #7]
 800ebac:	2b02      	cmp	r3, #2
 800ebae:	d10e      	bne.n	800ebce <get_fat+0x216>
 800ebb0:	697a      	ldr	r2, [r7, #20]
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d80a      	bhi.n	800ebce <get_fat+0x216>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d002      	beq.n	800ebc6 <get_fat+0x20e>
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	e001      	b.n	800ebca <get_fat+0x212>
 800ebc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ebca:	61fb      	str	r3, [r7, #28]
					break;
 800ebcc:	e04e      	b.n	800ec6c <get_fat+0x2b4>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	79db      	ldrb	r3, [r3, #7]
 800ebd2:	2b03      	cmp	r3, #3
 800ebd4:	d108      	bne.n	800ebe8 <get_fat+0x230>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	697a      	ldr	r2, [r7, #20]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d203      	bcs.n	800ebe8 <get_fat+0x230>
					val = clst + 1; 	/* Generate the value */
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	61fb      	str	r3, [r7, #28]
					break;
 800ebe6:	e041      	b.n	800ec6c <get_fat+0x2b4>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	79db      	ldrb	r3, [r3, #7]
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d02e      	beq.n	800ec4e <get_fat+0x296>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	69db      	ldr	r3, [r3, #28]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d003      	beq.n	800ec00 <get_fat+0x248>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800ebf8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ebfc:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800ebfe:	e035      	b.n	800ec6c <get_fat+0x2b4>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	899b      	ldrh	r3, [r3, #12]
 800ec08:	089b      	lsrs	r3, r3, #2
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec14:	4413      	add	r3, r2
 800ec16:	4619      	mov	r1, r3
 800ec18:	69b8      	ldr	r0, [r7, #24]
 800ec1a:	f7ff fe11 	bl	800e840 <move_window>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d122      	bne.n	800ec6a <get_fat+0x2b2>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	69ba      	ldr	r2, [r7, #24]
 800ec30:	8992      	ldrh	r2, [r2, #12]
 800ec32:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec36:	fb00 f202 	mul.w	r2, r0, r2
 800ec3a:	1a9b      	subs	r3, r3, r2
 800ec3c:	440b      	add	r3, r1
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff fa22 	bl	800e088 <ld_dword>
 800ec44:	4603      	mov	r3, r0
 800ec46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec4a:	61fb      	str	r3, [r7, #28]
					break;
 800ec4c:	e00e      	b.n	800ec6c <get_fat+0x2b4>
				}
			}
			val = 1;	/* Internal error */
 800ec4e:	2301      	movs	r3, #1
 800ec50:	61fb      	str	r3, [r7, #28]
			break;
 800ec52:	e00b      	b.n	800ec6c <get_fat+0x2b4>
#endif
		default:
			val = 1;	/* Internal error */
 800ec54:	2301      	movs	r3, #1
 800ec56:	61fb      	str	r3, [r7, #28]
 800ec58:	e008      	b.n	800ec6c <get_fat+0x2b4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec5a:	bf00      	nop
 800ec5c:	e006      	b.n	800ec6c <get_fat+0x2b4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec5e:	bf00      	nop
 800ec60:	e004      	b.n	800ec6c <get_fat+0x2b4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec62:	bf00      	nop
 800ec64:	e002      	b.n	800ec6c <get_fat+0x2b4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec66:	bf00      	nop
 800ec68:	e000      	b.n	800ec6c <get_fat+0x2b4>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec6a:	bf00      	nop
		}
	}

	return val;
 800ec6c:	69fb      	ldr	r3, [r7, #28]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3720      	adds	r7, #32
 800ec72:	46bd      	mov	sp, r7
 800ec74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ec78 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ec78:	b590      	push	{r4, r7, lr}
 800ec7a:	b089      	sub	sp, #36	; 0x24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ec84:	2302      	movs	r3, #2
 800ec86:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	f240 810d 	bls.w	800eeaa <put_fat+0x232>
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	6a1b      	ldr	r3, [r3, #32]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	f080 8107 	bcs.w	800eeaa <put_fat+0x232>
		switch (fs->fs_type) {
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	f300 8102 	bgt.w	800eeaa <put_fat+0x232>
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	f280 80b3 	bge.w	800ee12 <put_fat+0x19a>
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d003      	beq.n	800ecb8 <put_fat+0x40>
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	f000 8083 	beq.w	800edbc <put_fat+0x144>
 800ecb6:	e0f8      	b.n	800eeaa <put_fat+0x232>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	61bb      	str	r3, [r7, #24]
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	085b      	lsrs	r3, r3, #1
 800ecc0:	69ba      	ldr	r2, [r7, #24]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	899b      	ldrh	r3, [r3, #12]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecd6:	4413      	add	r3, r2
 800ecd8:	4619      	mov	r1, r3
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	f7ff fdb0 	bl	800e840 <move_window>
 800ece0:	4603      	mov	r3, r0
 800ece2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ece4:	7ffb      	ldrb	r3, [r7, #31]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f040 80d8 	bne.w	800ee9c <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	61ba      	str	r2, [r7, #24]
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	8992      	ldrh	r2, [r2, #12]
 800ecfc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed00:	fb00 f202 	mul.w	r2, r0, r2
 800ed04:	1a9b      	subs	r3, r3, r2
 800ed06:	440b      	add	r3, r1
 800ed08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	f003 0301 	and.w	r3, r3, #1
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00d      	beq.n	800ed30 <put_fat+0xb8>
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	b25b      	sxtb	r3, r3
 800ed1a:	f003 030f 	and.w	r3, r3, #15
 800ed1e:	b25a      	sxtb	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	011b      	lsls	r3, r3, #4
 800ed26:	b25b      	sxtb	r3, r3
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	b25b      	sxtb	r3, r3
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	e001      	b.n	800ed34 <put_fat+0xbc>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	899b      	ldrh	r3, [r3, #12]
 800ed46:	4619      	mov	r1, r3
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed4e:	4413      	add	r3, r2
 800ed50:	4619      	mov	r1, r3
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f7ff fd74 	bl	800e840 <move_window>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed5c:	7ffb      	ldrb	r3, [r7, #31]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f040 809e 	bne.w	800eea0 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	899b      	ldrh	r3, [r3, #12]
 800ed6e:	461a      	mov	r2, r3
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed76:	fb00 f202 	mul.w	r2, r0, r2
 800ed7a:	1a9b      	subs	r3, r3, r2
 800ed7c:	440b      	add	r3, r1
 800ed7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	f003 0301 	and.w	r3, r3, #1
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <put_fat+0x11a>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	091b      	lsrs	r3, r3, #4
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	e00e      	b.n	800edb0 <put_fat+0x138>
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	b25b      	sxtb	r3, r3
 800ed98:	f023 030f 	bic.w	r3, r3, #15
 800ed9c:	b25a      	sxtb	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	0a1b      	lsrs	r3, r3, #8
 800eda2:	b25b      	sxtb	r3, r3
 800eda4:	f003 030f 	and.w	r3, r3, #15
 800eda8:	b25b      	sxtb	r3, r3
 800edaa:	4313      	orrs	r3, r2
 800edac:	b25b      	sxtb	r3, r3
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	697a      	ldr	r2, [r7, #20]
 800edb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2201      	movs	r2, #1
 800edb8:	711a      	strb	r2, [r3, #4]
			break;
 800edba:	e076      	b.n	800eeaa <put_fat+0x232>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	899b      	ldrh	r3, [r3, #12]
 800edc4:	085b      	lsrs	r3, r3, #1
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	4619      	mov	r1, r3
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	fbb3 f3f1 	udiv	r3, r3, r1
 800edd0:	4413      	add	r3, r2
 800edd2:	4619      	mov	r1, r3
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f7ff fd33 	bl	800e840 <move_window>
 800edda:	4603      	mov	r3, r0
 800eddc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edde:	7ffb      	ldrb	r3, [r7, #31]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d15f      	bne.n	800eea4 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	005b      	lsls	r3, r3, #1
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	8992      	ldrh	r2, [r2, #12]
 800edf2:	fbb3 f0f2 	udiv	r0, r3, r2
 800edf6:	fb00 f202 	mul.w	r2, r0, r2
 800edfa:	1a9b      	subs	r3, r3, r2
 800edfc:	440b      	add	r3, r1
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	b292      	uxth	r2, r2
 800ee02:	4611      	mov	r1, r2
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff fa3d 	bl	800e284 <st_word>
			fs->wflag = 1;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	711a      	strb	r2, [r3, #4]
			break;
 800ee10:	e04b      	b.n	800eeaa <put_fat+0x232>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	899b      	ldrh	r3, [r3, #12]
 800ee1a:	089b      	lsrs	r3, r3, #2
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4619      	mov	r1, r3
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee26:	4413      	add	r3, r2
 800ee28:	4619      	mov	r1, r3
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f7ff fd08 	bl	800e840 <move_window>
 800ee30:	4603      	mov	r3, r0
 800ee32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee34:	7ffb      	ldrb	r3, [r7, #31]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d136      	bne.n	800eea8 <put_fat+0x230>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	2b04      	cmp	r3, #4
 800ee40:	d017      	beq.n	800ee72 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	8992      	ldrh	r2, [r2, #12]
 800ee56:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee5a:	fb00 f202 	mul.w	r2, r0, r2
 800ee5e:	1a9b      	subs	r3, r3, r2
 800ee60:	440b      	add	r3, r1
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7ff f910 	bl	800e088 <ld_dword>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee6e:	4323      	orrs	r3, r4
 800ee70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	68fa      	ldr	r2, [r7, #12]
 800ee7e:	8992      	ldrh	r2, [r2, #12]
 800ee80:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee84:	fb00 f202 	mul.w	r2, r0, r2
 800ee88:	1a9b      	subs	r3, r3, r2
 800ee8a:	440b      	add	r3, r1
 800ee8c:	6879      	ldr	r1, [r7, #4]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff fa13 	bl	800e2ba <st_dword>
			fs->wflag = 1;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2201      	movs	r2, #1
 800ee98:	711a      	strb	r2, [r3, #4]
			break;
 800ee9a:	e006      	b.n	800eeaa <put_fat+0x232>
			if (res != FR_OK) break;
 800ee9c:	bf00      	nop
 800ee9e:	e004      	b.n	800eeaa <put_fat+0x232>
			if (res != FR_OK) break;
 800eea0:	bf00      	nop
 800eea2:	e002      	b.n	800eeaa <put_fat+0x232>
			if (res != FR_OK) break;
 800eea4:	bf00      	nop
 800eea6:	e000      	b.n	800eeaa <put_fat+0x232>
			if (res != FR_OK) break;
 800eea8:	bf00      	nop
		}
	}
	return res;
 800eeaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3724      	adds	r7, #36	; 0x24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd90      	pop	{r4, r7, pc}

0800eeb4 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b08a      	sub	sp, #40	; 0x28
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	3b02      	subs	r3, #2
 800eec4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	3b02      	subs	r3, #2
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d301      	bcc.n	800eed6 <find_bitmap+0x22>
 800eed2:	2300      	movs	r3, #0
 800eed4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	61fb      	str	r3, [r7, #28]
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	61bb      	str	r3, [r7, #24]
 800eede:	2300      	movs	r3, #0
 800eee0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	08db      	lsrs	r3, r3, #3
 800eeea:	68f9      	ldr	r1, [r7, #12]
 800eeec:	8989      	ldrh	r1, [r1, #12]
 800eeee:	fbb3 f3f1 	udiv	r3, r3, r1
 800eef2:	4413      	add	r3, r2
 800eef4:	4619      	mov	r1, r3
 800eef6:	68f8      	ldr	r0, [r7, #12]
 800eef8:	f7ff fca2 	bl	800e840 <move_window>
 800eefc:	4603      	mov	r3, r0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d002      	beq.n	800ef08 <find_bitmap+0x54>
 800ef02:	f04f 33ff 	mov.w	r3, #4294967295
 800ef06:	e058      	b.n	800efba <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	08db      	lsrs	r3, r3, #3
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	8992      	ldrh	r2, [r2, #12]
 800ef10:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef14:	fb01 f202 	mul.w	r2, r1, r2
 800ef18:	1a9b      	subs	r3, r3, r2
 800ef1a:	623b      	str	r3, [r7, #32]
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	f003 0307 	and.w	r3, r3, #7
 800ef22:	2201      	movs	r2, #1
 800ef24:	fa02 f303 	lsl.w	r3, r2, r3
 800ef28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	6a3b      	ldr	r3, [r7, #32]
 800ef30:	4413      	add	r3, r2
 800ef32:	3340      	adds	r3, #64	; 0x40
 800ef34:	781a      	ldrb	r2, [r3, #0]
 800ef36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	74fb      	strb	r3, [r7, #19]
 800ef3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	61fb      	str	r3, [r7, #28]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6a1b      	ldr	r3, [r3, #32]
 800ef52:	3b02      	subs	r3, #2
 800ef54:	69fa      	ldr	r2, [r7, #28]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d307      	bcc.n	800ef6a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	61fb      	str	r3, [r7, #28]
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	899b      	ldrh	r3, [r3, #12]
 800ef68:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 800ef6a:	7cfb      	ldrb	r3, [r7, #19]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d109      	bne.n	800ef84 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	3301      	adds	r3, #1
 800ef74:	617b      	str	r3, [r7, #20]
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d106      	bne.n	800ef8c <find_bitmap+0xd8>
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	3302      	adds	r3, #2
 800ef82:	e01a      	b.n	800efba <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	61bb      	str	r3, [r7, #24]
 800ef88:	2300      	movs	r3, #0
 800ef8a:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800ef8c:	69fa      	ldr	r2, [r7, #28]
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d101      	bne.n	800ef98 <find_bitmap+0xe4>
 800ef94:	2300      	movs	r3, #0
 800ef96:	e010      	b.n	800efba <find_bitmap+0x106>
			} while (bm != 0);
 800ef98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d1c5      	bne.n	800ef2c <find_bitmap+0x78>
			bm = 1;
 800efa0:	2301      	movs	r3, #1
 800efa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	3301      	adds	r3, #1
 800efaa:	623b      	str	r3, [r7, #32]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	899b      	ldrh	r3, [r3, #12]
 800efb0:	461a      	mov	r2, r3
 800efb2:	6a3b      	ldr	r3, [r7, #32]
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d3b9      	bcc.n	800ef2c <find_bitmap+0x78>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800efb8:	e793      	b.n	800eee2 <find_bitmap+0x2e>
	}
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3728      	adds	r7, #40	; 0x28
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b088      	sub	sp, #32
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	60f8      	str	r0, [r7, #12]
 800efca:	60b9      	str	r1, [r7, #8]
 800efcc:	607a      	str	r2, [r7, #4]
 800efce:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	3b02      	subs	r3, #2
 800efd4:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	08db      	lsrs	r3, r3, #3
 800efde:	68f9      	ldr	r1, [r7, #12]
 800efe0:	8989      	ldrh	r1, [r1, #12]
 800efe2:	fbb3 f3f1 	udiv	r3, r3, r1
 800efe6:	4413      	add	r3, r2
 800efe8:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	08db      	lsrs	r3, r3, #3
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	8992      	ldrh	r2, [r2, #12]
 800eff2:	fbb3 f1f2 	udiv	r1, r3, r2
 800eff6:	fb01 f202 	mul.w	r2, r1, r2
 800effa:	1a9b      	subs	r3, r3, r2
 800effc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	f003 0307 	and.w	r3, r3, #7
 800f004:	2201      	movs	r2, #1
 800f006:	fa02 f303 	lsl.w	r3, r2, r3
 800f00a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	617a      	str	r2, [r7, #20]
 800f012:	4619      	mov	r1, r3
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f7ff fc13 	bl	800e840 <move_window>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d001      	beq.n	800f024 <change_bitmap+0x62>
 800f020:	2301      	movs	r3, #1
 800f022:	e03f      	b.n	800f0a4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	4413      	add	r3, r2
 800f02a:	3340      	adds	r3, #64	; 0x40
 800f02c:	781a      	ldrb	r2, [r3, #0]
 800f02e:	7ffb      	ldrb	r3, [r7, #31]
 800f030:	4013      	ands	r3, r2
 800f032:	b2db      	uxtb	r3, r3
 800f034:	2b00      	cmp	r3, #0
 800f036:	bf14      	ite	ne
 800f038:	2301      	movne	r3, #1
 800f03a:	2300      	moveq	r3, #0
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	461a      	mov	r2, r3
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	4293      	cmp	r3, r2
 800f044:	d101      	bne.n	800f04a <change_bitmap+0x88>
 800f046:	2302      	movs	r3, #2
 800f048:	e02c      	b.n	800f0a4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	4413      	add	r3, r2
 800f050:	3340      	adds	r3, #64	; 0x40
 800f052:	781a      	ldrb	r2, [r3, #0]
 800f054:	7ffb      	ldrb	r3, [r7, #31]
 800f056:	4053      	eors	r3, r2
 800f058:	b2d9      	uxtb	r1, r3
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	4413      	add	r3, r2
 800f060:	3340      	adds	r3, #64	; 0x40
 800f062:	460a      	mov	r2, r1
 800f064:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2201      	movs	r2, #1
 800f06a:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	3b01      	subs	r3, #1
 800f070:	607b      	str	r3, [r7, #4]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d101      	bne.n	800f07c <change_bitmap+0xba>
 800f078:	2300      	movs	r3, #0
 800f07a:	e013      	b.n	800f0a4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800f07c:	7ffb      	ldrb	r3, [r7, #31]
 800f07e:	005b      	lsls	r3, r3, #1
 800f080:	77fb      	strb	r3, [r7, #31]
 800f082:	7ffb      	ldrb	r3, [r7, #31]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d1cd      	bne.n	800f024 <change_bitmap+0x62>
			bm = 1;
 800f088:	2301      	movs	r3, #1
 800f08a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	3301      	adds	r3, #1
 800f090:	61bb      	str	r3, [r7, #24]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	899b      	ldrh	r3, [r3, #12]
 800f096:	461a      	mov	r2, r3
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d3c2      	bcc.n	800f024 <change_bitmap+0x62>
		i = 0;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800f0a2:	e7b3      	b.n	800f00c <change_bitmap+0x4a>
	}
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3720      	adds	r7, #32
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	79db      	ldrb	r3, [r3, #7]
 800f0b8:	2b03      	cmp	r3, #3
 800f0ba:	d121      	bne.n	800f100 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	617b      	str	r3, [r7, #20]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	699b      	ldr	r3, [r3, #24]
 800f0c6:	613b      	str	r3, [r7, #16]
 800f0c8:	e014      	b.n	800f0f4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6818      	ldr	r0, [r3, #0]
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	6979      	ldr	r1, [r7, #20]
 800f0d6:	f7ff fdcf 	bl	800ec78 <put_fat>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <fill_first_frag+0x3c>
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	e00c      	b.n	800f102 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	617b      	str	r3, [r7, #20]
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	613b      	str	r3, [r7, #16]
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d1e7      	bne.n	800f0ca <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3718      	adds	r7, #24
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b086      	sub	sp, #24
 800f10e:	af00      	add	r7, sp, #0
 800f110:	60f8      	str	r0, [r7, #12]
 800f112:	60b9      	str	r1, [r7, #8]
 800f114:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800f116:	e020      	b.n	800f15a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6818      	ldr	r0, [r3, #0]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	69db      	ldr	r3, [r3, #28]
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	1c59      	adds	r1, r3, #1
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	69db      	ldr	r3, [r3, #28]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d905      	bls.n	800f13a <fill_last_frag+0x30>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	69db      	ldr	r3, [r3, #28]
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	3302      	adds	r3, #2
 800f138:	e000      	b.n	800f13c <fill_last_frag+0x32>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	461a      	mov	r2, r3
 800f13e:	f7ff fd9b 	bl	800ec78 <put_fat>
 800f142:	4603      	mov	r3, r0
 800f144:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800f146:	7dfb      	ldrb	r3, [r7, #23]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d001      	beq.n	800f150 <fill_last_frag+0x46>
 800f14c:	7dfb      	ldrb	r3, [r7, #23]
 800f14e:	e009      	b.n	800f164 <fill_last_frag+0x5a>
		obj->n_frag--;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	69db      	ldr	r3, [r3, #28]
 800f154:	1e5a      	subs	r2, r3, #1
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	69db      	ldr	r3, [r3, #28]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1da      	bne.n	800f118 <fill_last_frag+0xe>
	}
	return FR_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3718      	adds	r7, #24
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	; 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f178:	2300      	movs	r3, #0
 800f17a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	627b      	str	r3, [r7, #36]	; 0x24
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d904      	bls.n	800f19a <remove_chain+0x2e>
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	6a1b      	ldr	r3, [r3, #32]
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	429a      	cmp	r2, r3
 800f198:	d301      	bcc.n	800f19e <remove_chain+0x32>
 800f19a:	2302      	movs	r3, #2
 800f19c:	e0c4      	b.n	800f328 <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d014      	beq.n	800f1ce <remove_chain+0x62>
 800f1a4:	69bb      	ldr	r3, [r7, #24]
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	2b04      	cmp	r3, #4
 800f1aa:	d103      	bne.n	800f1b4 <remove_chain+0x48>
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	79db      	ldrb	r3, [r3, #7]
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d00c      	beq.n	800f1ce <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b8:	6879      	ldr	r1, [r7, #4]
 800f1ba:	69b8      	ldr	r0, [r7, #24]
 800f1bc:	f7ff fd5c 	bl	800ec78 <put_fat>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f1c4:	7ffb      	ldrb	r3, [r7, #31]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d001      	beq.n	800f1ce <remove_chain+0x62>
 800f1ca:	7ffb      	ldrb	r3, [r7, #31]
 800f1cc:	e0ac      	b.n	800f328 <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f1ce:	68b9      	ldr	r1, [r7, #8]
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f7ff fbf1 	bl	800e9b8 <get_fat>
 800f1d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d055      	beq.n	800f28a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d101      	bne.n	800f1e8 <remove_chain+0x7c>
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	e09f      	b.n	800f328 <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ee:	d101      	bne.n	800f1f4 <remove_chain+0x88>
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e099      	b.n	800f328 <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	2b04      	cmp	r3, #4
 800f1fa:	d00b      	beq.n	800f214 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	68b9      	ldr	r1, [r7, #8]
 800f200:	69b8      	ldr	r0, [r7, #24]
 800f202:	f7ff fd39 	bl	800ec78 <put_fat>
 800f206:	4603      	mov	r3, r0
 800f208:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f20a:	7ffb      	ldrb	r3, [r7, #31]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d001      	beq.n	800f214 <remove_chain+0xa8>
 800f210:	7ffb      	ldrb	r3, [r7, #31]
 800f212:	e089      	b.n	800f328 <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f214:	69bb      	ldr	r3, [r7, #24]
 800f216:	69da      	ldr	r2, [r3, #28]
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	6a1b      	ldr	r3, [r3, #32]
 800f21c:	3b02      	subs	r3, #2
 800f21e:	429a      	cmp	r2, r3
 800f220:	d20b      	bcs.n	800f23a <remove_chain+0xce>
			fs->free_clst++;
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	69db      	ldr	r3, [r3, #28]
 800f226:	1c5a      	adds	r2, r3, #1
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	795b      	ldrb	r3, [r3, #5]
 800f230:	f043 0301 	orr.w	r3, r3, #1
 800f234:	b2da      	uxtb	r2, r3
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800f23a:	6a3b      	ldr	r3, [r7, #32]
 800f23c:	3301      	adds	r3, #1
 800f23e:	697a      	ldr	r2, [r7, #20]
 800f240:	429a      	cmp	r2, r3
 800f242:	d102      	bne.n	800f24a <remove_chain+0xde>
			ecl = nxt;
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	623b      	str	r3, [r7, #32]
 800f248:	e017      	b.n	800f27a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	2b04      	cmp	r3, #4
 800f250:	d10f      	bne.n	800f272 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800f252:	6a3a      	ldr	r2, [r7, #32]
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	1ad3      	subs	r3, r2, r3
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	2300      	movs	r3, #0
 800f25c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f25e:	69b8      	ldr	r0, [r7, #24]
 800f260:	f7ff feaf 	bl	800efc2 <change_bitmap>
 800f264:	4603      	mov	r3, r0
 800f266:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800f268:	7ffb      	ldrb	r3, [r7, #31]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d001      	beq.n	800f272 <remove_chain+0x106>
 800f26e:	7ffb      	ldrb	r3, [r7, #31]
 800f270:	e05a      	b.n	800f328 <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	623b      	str	r3, [r7, #32]
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	68ba      	ldr	r2, [r7, #8]
 800f284:	429a      	cmp	r2, r3
 800f286:	d3a2      	bcc.n	800f1ce <remove_chain+0x62>
 800f288:	e000      	b.n	800f28c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800f28a:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	2b04      	cmp	r3, #4
 800f292:	d148      	bne.n	800f326 <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d103      	bne.n	800f2a2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2200      	movs	r2, #0
 800f29e:	71da      	strb	r2, [r3, #7]
 800f2a0:	e041      	b.n	800f326 <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	79db      	ldrb	r3, [r3, #7]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d129      	bne.n	800f2fe <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800f2b0:	e017      	b.n	800f2e2 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 800f2b2:	68b9      	ldr	r1, [r7, #8]
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f7ff fb7f 	bl	800e9b8 <get_fat>
 800f2ba:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d801      	bhi.n	800f2c6 <remove_chain+0x15a>
 800f2c2:	2302      	movs	r3, #2
 800f2c4:	e030      	b.n	800f328 <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2cc:	d101      	bne.n	800f2d2 <remove_chain+0x166>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e02a      	b.n	800f328 <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	697a      	ldr	r2, [r7, #20]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d107      	bne.n	800f2ec <remove_chain+0x180>
					clst++;
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d1e3      	bne.n	800f2b2 <remove_chain+0x146>
 800f2ea:	e000      	b.n	800f2ee <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800f2ec:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 800f2ee:	68ba      	ldr	r2, [r7, #8]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d117      	bne.n	800f326 <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2202      	movs	r2, #2
 800f2fa:	71da      	strb	r2, [r3, #7]
 800f2fc:	e013      	b.n	800f326 <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	79db      	ldrb	r3, [r3, #7]
 800f302:	2b03      	cmp	r3, #3
 800f304:	d10f      	bne.n	800f326 <remove_chain+0x1ba>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d30a      	bcc.n	800f326 <remove_chain+0x1ba>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	689a      	ldr	r2, [r3, #8]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	699b      	ldr	r3, [r3, #24]
 800f318:	4413      	add	r3, r2
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d802      	bhi.n	800f326 <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2202      	movs	r2, #2
 800f324:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 800f326:	2300      	movs	r3, #0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3728      	adds	r7, #40	; 0x28
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b088      	sub	sp, #32
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10d      	bne.n	800f362 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	699b      	ldr	r3, [r3, #24]
 800f34a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d004      	beq.n	800f35c <create_chain+0x2c>
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	6a1b      	ldr	r3, [r3, #32]
 800f356:	69ba      	ldr	r2, [r7, #24]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d31b      	bcc.n	800f394 <create_chain+0x64>
 800f35c:	2301      	movs	r3, #1
 800f35e:	61bb      	str	r3, [r7, #24]
 800f360:	e018      	b.n	800f394 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f362:	6839      	ldr	r1, [r7, #0]
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f7ff fb27 	bl	800e9b8 <get_fat>
 800f36a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d801      	bhi.n	800f376 <create_chain+0x46>
 800f372:	2301      	movs	r3, #1
 800f374:	e113      	b.n	800f59e <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f37c:	d101      	bne.n	800f382 <create_chain+0x52>
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	e10d      	b.n	800f59e <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	68fa      	ldr	r2, [r7, #12]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d201      	bcs.n	800f390 <create_chain+0x60>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	e106      	b.n	800f59e <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	69db      	ldr	r3, [r3, #28]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d101      	bne.n	800f3a0 <create_chain+0x70>
 800f39c:	2300      	movs	r3, #0
 800f39e:	e0fe      	b.n	800f59e <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	2b04      	cmp	r3, #4
 800f3a6:	d165      	bne.n	800f474 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	69b9      	ldr	r1, [r7, #24]
 800f3ac:	6938      	ldr	r0, [r7, #16]
 800f3ae:	f7ff fd81 	bl	800eeb4 <find_bitmap>
 800f3b2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d003      	beq.n	800f3c2 <create_chain+0x92>
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c0:	d101      	bne.n	800f3c6 <create_chain+0x96>
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	e0eb      	b.n	800f59e <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	69f9      	ldr	r1, [r7, #28]
 800f3cc:	6938      	ldr	r0, [r7, #16]
 800f3ce:	f7ff fdf8 	bl	800efc2 <change_bitmap>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800f3d6:	7dfb      	ldrb	r3, [r7, #23]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d101      	bne.n	800f3e0 <create_chain+0xb0>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e0de      	b.n	800f59e <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800f3e0:	7dfb      	ldrb	r3, [r7, #23]
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d102      	bne.n	800f3ec <create_chain+0xbc>
 800f3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ea:	e0d8      	b.n	800f59e <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d103      	bne.n	800f3fa <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2202      	movs	r2, #2
 800f3f6:	71da      	strb	r2, [r3, #7]
 800f3f8:	e011      	b.n	800f41e <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	79db      	ldrb	r3, [r3, #7]
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d10d      	bne.n	800f41e <create_chain+0xee>
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	3301      	adds	r3, #1
 800f406:	69fa      	ldr	r2, [r7, #28]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d008      	beq.n	800f41e <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	69ba      	ldr	r2, [r7, #24]
 800f412:	1ad2      	subs	r2, r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2203      	movs	r2, #3
 800f41c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	79db      	ldrb	r3, [r3, #7]
 800f422:	2b02      	cmp	r3, #2
 800f424:	f000 8098 	beq.w	800f558 <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	3301      	adds	r3, #1
 800f42c:	69fa      	ldr	r2, [r7, #28]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d10b      	bne.n	800f44a <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	69db      	ldr	r3, [r3, #28]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d003      	beq.n	800f442 <create_chain+0x112>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	69db      	ldr	r3, [r3, #28]
 800f43e:	3301      	adds	r3, #1
 800f440:	e000      	b.n	800f444 <create_chain+0x114>
 800f442:	2302      	movs	r3, #2
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	61d3      	str	r3, [r2, #28]
 800f448:	e086      	b.n	800f558 <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	69db      	ldr	r3, [r3, #28]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d102      	bne.n	800f458 <create_chain+0x128>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2201      	movs	r2, #1
 800f456:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800f458:	69fa      	ldr	r2, [r7, #28]
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7ff fe54 	bl	800f10a <fill_last_frag>
 800f462:	4603      	mov	r3, r0
 800f464:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800f466:	7dfb      	ldrb	r3, [r7, #23]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d175      	bne.n	800f558 <create_chain+0x228>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2201      	movs	r2, #1
 800f470:	61da      	str	r2, [r3, #28]
 800f472:	e071      	b.n	800f558 <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800f474:	2300      	movs	r3, #0
 800f476:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800f478:	69ba      	ldr	r2, [r7, #24]
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d129      	bne.n	800f4d4 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	3301      	adds	r3, #1
 800f484:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	6a1b      	ldr	r3, [r3, #32]
 800f48a:	69fa      	ldr	r2, [r7, #28]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d301      	bcc.n	800f494 <create_chain+0x164>
 800f490:	2302      	movs	r3, #2
 800f492:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800f494:	69f9      	ldr	r1, [r7, #28]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7ff fa8e 	bl	800e9b8 <get_fat>
 800f49c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d003      	beq.n	800f4ac <create_chain+0x17c>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4aa:	d101      	bne.n	800f4b0 <create_chain+0x180>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	e076      	b.n	800f59e <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00e      	beq.n	800f4d4 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	699b      	ldr	r3, [r3, #24]
 800f4ba:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d906      	bls.n	800f4d0 <create_chain+0x1a0>
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	6a1b      	ldr	r3, [r3, #32]
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d201      	bcs.n	800f4d0 <create_chain+0x1a0>
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d129      	bne.n	800f52e <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	6a1b      	ldr	r3, [r3, #32]
 800f4e8:	69fa      	ldr	r2, [r7, #28]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d307      	bcc.n	800f4fe <create_chain+0x1ce>
					ncl = 2;
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800f4f2:	69fa      	ldr	r2, [r7, #28]
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d901      	bls.n	800f4fe <create_chain+0x1ce>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	e04f      	b.n	800f59e <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f4fe:	69f9      	ldr	r1, [r7, #28]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff fa59 	bl	800e9b8 <get_fat>
 800f506:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00e      	beq.n	800f52c <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b01      	cmp	r3, #1
 800f512:	d003      	beq.n	800f51c <create_chain+0x1ec>
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f51a:	d101      	bne.n	800f520 <create_chain+0x1f0>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	e03e      	b.n	800f59e <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800f520:	69fa      	ldr	r2, [r7, #28]
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	429a      	cmp	r2, r3
 800f526:	d1da      	bne.n	800f4de <create_chain+0x1ae>
 800f528:	2300      	movs	r3, #0
 800f52a:	e038      	b.n	800f59e <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 800f52c:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800f52e:	f04f 32ff 	mov.w	r2, #4294967295
 800f532:	69f9      	ldr	r1, [r7, #28]
 800f534:	6938      	ldr	r0, [r7, #16]
 800f536:	f7ff fb9f 	bl	800ec78 <put_fat>
 800f53a:	4603      	mov	r3, r0
 800f53c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f53e:	7dfb      	ldrb	r3, [r7, #23]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d109      	bne.n	800f558 <create_chain+0x228>
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d006      	beq.n	800f558 <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800f54a:	69fa      	ldr	r2, [r7, #28]
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6938      	ldr	r0, [r7, #16]
 800f550:	f7ff fb92 	bl	800ec78 <put_fat>
 800f554:	4603      	mov	r3, r0
 800f556:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f558:	7dfb      	ldrb	r3, [r7, #23]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d116      	bne.n	800f58c <create_chain+0x25c>
		fs->last_clst = ncl;
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	69fa      	ldr	r2, [r7, #28]
 800f562:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	69da      	ldr	r2, [r3, #28]
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	6a1b      	ldr	r3, [r3, #32]
 800f56c:	3b02      	subs	r3, #2
 800f56e:	429a      	cmp	r2, r3
 800f570:	d804      	bhi.n	800f57c <create_chain+0x24c>
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	69db      	ldr	r3, [r3, #28]
 800f576:	1e5a      	subs	r2, r3, #1
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	795b      	ldrb	r3, [r3, #5]
 800f580:	f043 0301 	orr.w	r3, r3, #1
 800f584:	b2da      	uxtb	r2, r3
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	715a      	strb	r2, [r3, #5]
 800f58a:	e007      	b.n	800f59c <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f58c:	7dfb      	ldrb	r3, [r7, #23]
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d102      	bne.n	800f598 <create_chain+0x268>
 800f592:	f04f 33ff 	mov.w	r3, #4294967295
 800f596:	e000      	b.n	800f59a <create_chain+0x26a>
 800f598:	2301      	movs	r3, #1
 800f59a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f59c:	69fb      	ldr	r3, [r7, #28]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3720      	adds	r7, #32
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <clmt_clust>:

static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f5a6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f5aa:	b088      	sub	sp, #32
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl;
	DWORD *tbl;
	FATFS *fs = fp->obj.fs;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5be:	3304      	adds	r3, #4
 800f5c0:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	899b      	ldrh	r3, [r3, #12]
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	4698      	mov	r8, r3
 800f5cc:	4691      	mov	r9, r2
 800f5ce:	4642      	mov	r2, r8
 800f5d0:	464b      	mov	r3, r9
 800f5d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5d6:	f7f0 fe87 	bl	80002e8 <__aeabi_uldivmod>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	460b      	mov	r3, r1
 800f5de:	4610      	mov	r0, r2
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	895b      	ldrh	r3, [r3, #10]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	461c      	mov	r4, r3
 800f5ec:	4615      	mov	r5, r2
 800f5ee:	4622      	mov	r2, r4
 800f5f0:	462b      	mov	r3, r5
 800f5f2:	f7f0 fe79 	bl	80002e8 <__aeabi_uldivmod>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	460b      	mov	r3, r1
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	1d1a      	adds	r2, r3, #4
 800f602:	61ba      	str	r2, [r7, #24]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d101      	bne.n	800f612 <clmt_clust+0x6c>
 800f60e:	2300      	movs	r3, #0
 800f610:	e010      	b.n	800f634 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800f612:	69fa      	ldr	r2, [r7, #28]
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	429a      	cmp	r2, r3
 800f618:	d307      	bcc.n	800f62a <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800f61a:	69fa      	ldr	r2, [r7, #28]
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	61fb      	str	r3, [r7, #28]
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	3304      	adds	r3, #4
 800f626:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f628:	e7e9      	b.n	800f5fe <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800f62a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	4413      	add	r3, r2
}
 800f634:	4618      	mov	r0, r3
 800f636:	3720      	adds	r7, #32
 800f638:	46bd      	mov	sp, r7
 800f63a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f63e <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b086      	sub	sp, #24
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7ff f8bd 	bl	800e7c8 <sync_window>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d001      	beq.n	800f658 <dir_clear+0x1a>
 800f654:	2301      	movs	r3, #1
 800f656:	e036      	b.n	800f6c6 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800f658:	6839      	ldr	r1, [r7, #0]
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7ff f98c 	bl	800e978 <clst2sect>
 800f660:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	693a      	ldr	r2, [r7, #16]
 800f666:	63da      	str	r2, [r3, #60]	; 0x3c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	3340      	adds	r3, #64	; 0x40
 800f66c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f670:	2100      	movs	r1, #0
 800f672:	4618      	mov	r0, r3
 800f674:	f009 fa21 	bl	8018aba <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	3340      	adds	r3, #64	; 0x40
 800f67c:	60fb      	str	r3, [r7, #12]
 800f67e:	2301      	movs	r3, #1
 800f680:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800f682:	2300      	movs	r3, #0
 800f684:	617b      	str	r3, [r7, #20]
 800f686:	e003      	b.n	800f690 <dir_clear+0x52>
 800f688:	697a      	ldr	r2, [r7, #20]
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	4413      	add	r3, r2
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	895b      	ldrh	r3, [r3, #10]
 800f694:	461a      	mov	r2, r3
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	4293      	cmp	r3, r2
 800f69a:	d20b      	bcs.n	800f6b4 <dir_clear+0x76>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	7858      	ldrb	r0, [r3, #1]
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	441a      	add	r2, r3
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	68f9      	ldr	r1, [r7, #12]
 800f6aa:	f7fe fb69 	bl	800dd80 <disk_write>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d0e9      	beq.n	800f688 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	895b      	ldrh	r3, [r3, #10]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	bf14      	ite	ne
 800f6c0:	2301      	movne	r3, #1
 800f6c2:	2300      	moveq	r3, #0
 800f6c4:	b2db      	uxtb	r3, r3
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3718      	adds	r7, #24
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b086      	sub	sp, #24
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
 800f6d6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	2b04      	cmp	r3, #4
 800f6e4:	d102      	bne.n	800f6ec <dir_sdi+0x1e>
 800f6e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ea:	e001      	b.n	800f6f0 <dir_sdi+0x22>
 800f6ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d904      	bls.n	800f700 <dir_sdi+0x32>
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	f003 031f 	and.w	r3, r3, #31
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <dir_sdi+0x36>
		return FR_INT_ERR;
 800f700:	2302      	movs	r3, #2
 800f702:	e074      	b.n	800f7ee <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d109      	bne.n	800f72a <dir_sdi+0x5c>
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	d905      	bls.n	800f72a <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f722:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10c      	bne.n	800f74a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	095b      	lsrs	r3, r3, #5
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	8912      	ldrh	r2, [r2, #8]
 800f738:	4293      	cmp	r3, r2
 800f73a:	d301      	bcc.n	800f740 <dir_sdi+0x72>
 800f73c:	2302      	movs	r3, #2
 800f73e:	e056      	b.n	800f7ee <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	639a      	str	r2, [r3, #56]	; 0x38
 800f748:	e02d      	b.n	800f7a6 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	895b      	ldrh	r3, [r3, #10]
 800f74e:	461a      	mov	r2, r3
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	899b      	ldrh	r3, [r3, #12]
 800f754:	fb02 f303 	mul.w	r3, r2, r3
 800f758:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f75a:	e019      	b.n	800f790 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6979      	ldr	r1, [r7, #20]
 800f760:	4618      	mov	r0, r3
 800f762:	f7ff f929 	bl	800e9b8 <get_fat>
 800f766:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76e:	d101      	bne.n	800f774 <dir_sdi+0xa6>
 800f770:	2301      	movs	r3, #1
 800f772:	e03c      	b.n	800f7ee <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	2b01      	cmp	r3, #1
 800f778:	d904      	bls.n	800f784 <dir_sdi+0xb6>
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	6a1b      	ldr	r3, [r3, #32]
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	429a      	cmp	r2, r3
 800f782:	d301      	bcc.n	800f788 <dir_sdi+0xba>
 800f784:	2302      	movs	r3, #2
 800f786:	e032      	b.n	800f7ee <dir_sdi+0x120>
			ofs -= csz;
 800f788:	683a      	ldr	r2, [r7, #0]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f790:	683a      	ldr	r2, [r7, #0]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	429a      	cmp	r2, r3
 800f796:	d2e1      	bcs.n	800f75c <dir_sdi+0x8e>
		}
		dp->sect = clst2sect(fs, clst);
 800f798:	6979      	ldr	r1, [r7, #20]
 800f79a:	6938      	ldr	r0, [r7, #16]
 800f79c:	f7ff f8ec 	bl	800e978 <clst2sect>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	697a      	ldr	r2, [r7, #20]
 800f7aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d101      	bne.n	800f7b8 <dir_sdi+0xea>
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	e01a      	b.n	800f7ee <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	899b      	ldrh	r3, [r3, #12]
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7c8:	441a      	add	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	899b      	ldrh	r3, [r3, #12]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7e0:	fb00 f202 	mul.w	r2, r0, r2
 800f7e4:	1a9b      	subs	r3, r3, r2
 800f7e6:	18ca      	adds	r2, r1, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3718      	adds	r7, #24
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b086      	sub	sp, #24
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f80a:	3320      	adds	r3, #32
 800f80c:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	2b04      	cmp	r3, #4
 800f814:	d102      	bne.n	800f81c <dir_next+0x26>
 800f816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f81a:	e001      	b.n	800f820 <dir_next+0x2a>
 800f81c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	429a      	cmp	r2, r3
 800f824:	d802      	bhi.n	800f82c <dir_next+0x36>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2200      	movs	r2, #0
 800f82a:	639a      	str	r2, [r3, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f830:	2b00      	cmp	r3, #0
 800f832:	d101      	bne.n	800f838 <dir_next+0x42>
 800f834:	2304      	movs	r3, #4
 800f836:	e08f      	b.n	800f958 <dir_next+0x162>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	899b      	ldrh	r3, [r3, #12]
 800f83c:	461a      	mov	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	fbb3 f1f2 	udiv	r1, r3, r2
 800f844:	fb01 f202 	mul.w	r2, r1, r2
 800f848:	1a9b      	subs	r3, r3, r2
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d171      	bne.n	800f932 <dir_next+0x13c>
		dp->sect++;				/* Next sector */
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	639a      	str	r2, [r3, #56]	; 0x38

		if (dp->clust == 0) {	/* Static table */
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10a      	bne.n	800f876 <dir_next+0x80>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	095b      	lsrs	r3, r3, #5
 800f864:	693a      	ldr	r2, [r7, #16]
 800f866:	8912      	ldrh	r2, [r2, #8]
 800f868:	4293      	cmp	r3, r2
 800f86a:	d362      	bcc.n	800f932 <dir_next+0x13c>
				dp->sect = 0; return FR_NO_FILE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	639a      	str	r2, [r3, #56]	; 0x38
 800f872:	2304      	movs	r3, #4
 800f874:	e070      	b.n	800f958 <dir_next+0x162>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	899b      	ldrh	r3, [r3, #12]
 800f87a:	461a      	mov	r2, r3
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f882:	693a      	ldr	r2, [r7, #16]
 800f884:	8952      	ldrh	r2, [r2, #10]
 800f886:	3a01      	subs	r2, #1
 800f888:	4013      	ands	r3, r2
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d151      	bne.n	800f932 <dir_next+0x13c>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f894:	4619      	mov	r1, r3
 800f896:	4610      	mov	r0, r2
 800f898:	f7ff f88e 	bl	800e9b8 <get_fat>
 800f89c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d801      	bhi.n	800f8a8 <dir_next+0xb2>
 800f8a4:	2302      	movs	r3, #2
 800f8a6:	e057      	b.n	800f958 <dir_next+0x162>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ae:	d101      	bne.n	800f8b4 <dir_next+0xbe>
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	e051      	b.n	800f958 <dir_next+0x162>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	6a1b      	ldr	r3, [r3, #32]
 800f8b8:	697a      	ldr	r2, [r7, #20]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d32f      	bcc.n	800f91e <dir_next+0x128>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d104      	bne.n	800f8ce <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	639a      	str	r2, [r3, #56]	; 0x38
 800f8ca:	2304      	movs	r3, #4
 800f8cc:	e044      	b.n	800f958 <dir_next+0x162>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	4610      	mov	r0, r2
 800f8d8:	f7ff fd2a 	bl	800f330 <create_chain>
 800f8dc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d101      	bne.n	800f8e8 <dir_next+0xf2>
 800f8e4:	2307      	movs	r3, #7
 800f8e6:	e037      	b.n	800f958 <dir_next+0x162>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d101      	bne.n	800f8f2 <dir_next+0xfc>
 800f8ee:	2302      	movs	r3, #2
 800f8f0:	e032      	b.n	800f958 <dir_next+0x162>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f8:	d101      	bne.n	800f8fe <dir_next+0x108>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e02c      	b.n	800f958 <dir_next+0x162>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800f8fe:	6979      	ldr	r1, [r7, #20]
 800f900:	6938      	ldr	r0, [r7, #16]
 800f902:	f7ff fe9c 	bl	800f63e <dir_clear>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <dir_next+0x11a>
 800f90c:	2301      	movs	r3, #1
 800f90e:	e023      	b.n	800f958 <dir_next+0x162>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	79db      	ldrb	r3, [r3, #7]
 800f914:	f043 0304 	orr.w	r3, r3, #4
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	697a      	ldr	r2, [r7, #20]
 800f922:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 800f924:	6979      	ldr	r1, [r7, #20]
 800f926:	6938      	ldr	r0, [r7, #16]
 800f928:	f7ff f826 	bl	800e978 <clst2sect>
 800f92c:	4602      	mov	r2, r0
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	899b      	ldrh	r3, [r3, #12]
 800f942:	461a      	mov	r2, r3
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	fbb3 f0f2 	udiv	r0, r3, r2
 800f94a:	fb00 f202 	mul.w	r2, r0, r2
 800f94e:	1a9b      	subs	r3, r3, r2
 800f950:	18ca      	adds	r2, r1, r3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3718      	adds	r7, #24
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b086      	sub	sp, #24
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f970:	2100      	movs	r1, #0
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f7ff feab 	bl	800f6ce <dir_sdi>
 800f978:	4603      	mov	r3, r0
 800f97a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f97c:	7dfb      	ldrb	r3, [r7, #23]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d140      	bne.n	800fa04 <dir_alloc+0xa4>
		n = 0;
 800f982:	2300      	movs	r3, #0
 800f984:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f98a:	4619      	mov	r1, r3
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7fe ff57 	bl	800e840 <move_window>
 800f992:	4603      	mov	r3, r0
 800f994:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f996:	7dfb      	ldrb	r3, [r7, #23]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d132      	bne.n	800fa02 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b04      	cmp	r3, #4
 800f9a2:	d108      	bne.n	800f9b6 <dir_alloc+0x56>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	b25b      	sxtb	r3, r3
 800f9ac:	43db      	mvns	r3, r3
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	09db      	lsrs	r3, r3, #7
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	e00f      	b.n	800f9d6 <dir_alloc+0x76>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	2be5      	cmp	r3, #229	; 0xe5
 800f9be:	d004      	beq.n	800f9ca <dir_alloc+0x6a>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <dir_alloc+0x6e>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e000      	b.n	800f9d0 <dir_alloc+0x70>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	f003 0301 	and.w	r3, r3, #1
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d007      	beq.n	800f9ea <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	613b      	str	r3, [r7, #16]
 800f9e0:	693a      	ldr	r2, [r7, #16]
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d102      	bne.n	800f9ee <dir_alloc+0x8e>
 800f9e8:	e00c      	b.n	800fa04 <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7ff ff00 	bl	800f7f6 <dir_next>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800f9fa:	7dfb      	ldrb	r3, [r7, #23]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d0c2      	beq.n	800f986 <dir_alloc+0x26>
 800fa00:	e000      	b.n	800fa04 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800fa02:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fa04:	7dfb      	ldrb	r3, [r7, #23]
 800fa06:	2b04      	cmp	r3, #4
 800fa08:	d101      	bne.n	800fa0e <dir_alloc+0xae>
 800fa0a:	2307      	movs	r3, #7
 800fa0c:	75fb      	strb	r3, [r7, #23]
	return res;
 800fa0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3718      	adds	r7, #24
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	331a      	adds	r3, #26
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fe fb16 	bl	800e058 <ld_word>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	2b03      	cmp	r3, #3
 800fa36:	d109      	bne.n	800fa4c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	3314      	adds	r3, #20
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fe fb0b 	bl	800e058 <ld_word>
 800fa42:	4603      	mov	r3, r0
 800fa44:	041b      	lsls	r3, r3, #16
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	4313      	orrs	r3, r2
 800fa4a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3710      	adds	r7, #16
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b084      	sub	sp, #16
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	60f8      	str	r0, [r7, #12]
 800fa5e:	60b9      	str	r1, [r7, #8]
 800fa60:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	331a      	adds	r3, #26
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	b292      	uxth	r2, r2
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7fe fc09 	bl	800e284 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	2b03      	cmp	r3, #3
 800fa78:	d109      	bne.n	800fa8e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	f103 0214 	add.w	r2, r3, #20
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	0c1b      	lsrs	r3, r3, #16
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	4619      	mov	r1, r3
 800fa88:	4610      	mov	r0, r2
 800fa8a:	f7fe fbfb 	bl	800e284 <st_word>
	}
}
 800fa8e:	bf00      	nop
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
	...

0800fa98 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800fa98:	b590      	push	{r4, r7, lr}
 800fa9a:	b087      	sub	sp, #28
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	331a      	adds	r3, #26
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fe fad6 	bl	800e058 <ld_word>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d001      	beq.n	800fab6 <cmp_lfn+0x1e>
 800fab2:	2300      	movs	r3, #0
 800fab4:	e058      	b.n	800fb68 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fabe:	1e5a      	subs	r2, r3, #1
 800fac0:	4613      	mov	r3, r2
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	4413      	add	r3, r2
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	4413      	add	r3, r2
 800faca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800facc:	2301      	movs	r3, #1
 800face:	81fb      	strh	r3, [r7, #14]
 800fad0:	2300      	movs	r3, #0
 800fad2:	613b      	str	r3, [r7, #16]
 800fad4:	e032      	b.n	800fb3c <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fad6:	4a26      	ldr	r2, [pc, #152]	; (800fb70 <cmp_lfn+0xd8>)
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	4413      	add	r3, r2
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	461a      	mov	r2, r3
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	4413      	add	r3, r2
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fe fab7 	bl	800e058 <ld_word>
 800faea:	4603      	mov	r3, r0
 800faec:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800faee:	89fb      	ldrh	r3, [r7, #14]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d019      	beq.n	800fb28 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	2bff      	cmp	r3, #255	; 0xff
 800faf8:	d811      	bhi.n	800fb1e <cmp_lfn+0x86>
 800fafa:	89bb      	ldrh	r3, [r7, #12]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f002 fd89 	bl	8012614 <ff_wtoupper>
 800fb02:	4604      	mov	r4, r0
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	617a      	str	r2, [r7, #20]
 800fb0a:	005b      	lsls	r3, r3, #1
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	4413      	add	r3, r2
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	4618      	mov	r0, r3
 800fb14:	f002 fd7e 	bl	8012614 <ff_wtoupper>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	429c      	cmp	r4, r3
 800fb1c:	d001      	beq.n	800fb22 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 800fb1e:	2300      	movs	r3, #0
 800fb20:	e022      	b.n	800fb68 <cmp_lfn+0xd0>
			}
			wc = uc;
 800fb22:	89bb      	ldrh	r3, [r7, #12]
 800fb24:	81fb      	strh	r3, [r7, #14]
 800fb26:	e006      	b.n	800fb36 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb28:	89bb      	ldrh	r3, [r7, #12]
 800fb2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d001      	beq.n	800fb36 <cmp_lfn+0x9e>
 800fb32:	2300      	movs	r3, #0
 800fb34:	e018      	b.n	800fb68 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	3301      	adds	r3, #1
 800fb3a:	613b      	str	r3, [r7, #16]
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	2b0c      	cmp	r3, #12
 800fb40:	d9c9      	bls.n	800fad6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00b      	beq.n	800fb66 <cmp_lfn+0xce>
 800fb4e:	89fb      	ldrh	r3, [r7, #14]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d008      	beq.n	800fb66 <cmp_lfn+0xce>
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	005b      	lsls	r3, r3, #1
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	881b      	ldrh	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <cmp_lfn+0xce>
 800fb62:	2300      	movs	r3, #0
 800fb64:	e000      	b.n	800fb68 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 800fb66:	2301      	movs	r3, #1
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	371c      	adds	r7, #28
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd90      	pop	{r4, r7, pc}
 800fb70:	0801bf44 	.word	0x0801bf44

0800fb74 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	331a      	adds	r3, #26
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fe fa68 	bl	800e058 <ld_word>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <pick_lfn+0x1e>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e050      	b.n	800fc34 <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb9a:	1e5a      	subs	r2, r3, #1
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	005b      	lsls	r3, r3, #1
 800fba0:	4413      	add	r3, r2
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4413      	add	r3, r2
 800fba6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fba8:	2301      	movs	r3, #1
 800fbaa:	81fb      	strh	r3, [r7, #14]
 800fbac:	2300      	movs	r3, #0
 800fbae:	613b      	str	r3, [r7, #16]
 800fbb0:	e028      	b.n	800fc04 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fbb2:	4a22      	ldr	r2, [pc, #136]	; (800fc3c <pick_lfn+0xc8>)
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fe fa49 	bl	800e058 <ld_word>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800fbca:	89fb      	ldrh	r3, [r7, #14]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d00f      	beq.n	800fbf0 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2bff      	cmp	r3, #255	; 0xff
 800fbd4:	d901      	bls.n	800fbda <pick_lfn+0x66>
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	e02c      	b.n	800fc34 <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fbda:	89bb      	ldrh	r3, [r7, #12]
 800fbdc:	81fb      	strh	r3, [r7, #14]
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	1c5a      	adds	r2, r3, #1
 800fbe2:	617a      	str	r2, [r7, #20]
 800fbe4:	005b      	lsls	r3, r3, #1
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	4413      	add	r3, r2
 800fbea:	89fa      	ldrh	r2, [r7, #14]
 800fbec:	801a      	strh	r2, [r3, #0]
 800fbee:	e006      	b.n	800fbfe <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fbf0:	89bb      	ldrh	r3, [r7, #12]
 800fbf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d001      	beq.n	800fbfe <pick_lfn+0x8a>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	e01a      	b.n	800fc34 <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	3301      	adds	r3, #1
 800fc02:	613b      	str	r3, [r7, #16]
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	2b0c      	cmp	r3, #12
 800fc08:	d9d3      	bls.n	800fbb2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d00d      	beq.n	800fc32 <pick_lfn+0xbe>
 800fc16:	89fb      	ldrh	r3, [r7, #14]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d00a      	beq.n	800fc32 <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	2bff      	cmp	r3, #255	; 0xff
 800fc20:	d901      	bls.n	800fc26 <pick_lfn+0xb2>
 800fc22:	2300      	movs	r3, #0
 800fc24:	e006      	b.n	800fc34 <pick_lfn+0xc0>
		lfnbuf[i] = 0;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	2200      	movs	r2, #0
 800fc30:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800fc32:	2301      	movs	r3, #1
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3718      	adds	r7, #24
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	0801bf44 	.word	0x0801bf44

0800fc40 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b088      	sub	sp, #32
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	4611      	mov	r1, r2
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	460b      	mov	r3, r1
 800fc50:	71fb      	strb	r3, [r7, #7]
 800fc52:	4613      	mov	r3, r2
 800fc54:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	330d      	adds	r3, #13
 800fc5a:	79ba      	ldrb	r2, [r7, #6]
 800fc5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	330b      	adds	r3, #11
 800fc62:	220f      	movs	r2, #15
 800fc64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	330c      	adds	r3, #12
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	331a      	adds	r3, #26
 800fc72:	2100      	movs	r1, #0
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fe fb05 	bl	800e284 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fc7a:	79fb      	ldrb	r3, [r7, #7]
 800fc7c:	1e5a      	subs	r2, r3, #1
 800fc7e:	4613      	mov	r3, r2
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	4413      	add	r3, r2
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	4413      	add	r3, r2
 800fc88:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	82fb      	strh	r3, [r7, #22]
 800fc8e:	2300      	movs	r3, #0
 800fc90:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fc92:	8afb      	ldrh	r3, [r7, #22]
 800fc94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d007      	beq.n	800fcac <put_lfn+0x6c>
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	61fa      	str	r2, [r7, #28]
 800fca2:	005b      	lsls	r3, r3, #1
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	4413      	add	r3, r2
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fcac:	4a17      	ldr	r2, [pc, #92]	; (800fd0c <put_lfn+0xcc>)
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	4413      	add	r3, r2
 800fcba:	8afa      	ldrh	r2, [r7, #22]
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7fe fae0 	bl	800e284 <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 800fcc4:	8afb      	ldrh	r3, [r7, #22]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d102      	bne.n	800fcd0 <put_lfn+0x90>
 800fcca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	61bb      	str	r3, [r7, #24]
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	2b0c      	cmp	r3, #12
 800fcda:	d9da      	bls.n	800fc92 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fcdc:	8afb      	ldrh	r3, [r7, #22]
 800fcde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d006      	beq.n	800fcf4 <put_lfn+0xb4>
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	005b      	lsls	r3, r3, #1
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	4413      	add	r3, r2
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d103      	bne.n	800fcfc <put_lfn+0xbc>
 800fcf4:	79fb      	ldrb	r3, [r7, #7]
 800fcf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	79fa      	ldrb	r2, [r7, #7]
 800fd00:	701a      	strb	r2, [r3, #0]
}
 800fd02:	bf00      	nop
 800fd04:	3720      	adds	r7, #32
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	0801bf44 	.word	0x0801bf44

0800fd10 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b08c      	sub	sp, #48	; 0x30
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	60b9      	str	r1, [r7, #8]
 800fd1a:	607a      	str	r2, [r7, #4]
 800fd1c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800fd1e:	220b      	movs	r2, #11
 800fd20:	68b9      	ldr	r1, [r7, #8]
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f008 ff02 	bl	8018b2c <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	2b05      	cmp	r3, #5
 800fd2c:	d929      	bls.n	800fd82 <gen_numname+0x72>
		sreg = seq;
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 800fd32:	e020      	b.n	800fd76 <gen_numname+0x66>
			wc = *lfn++;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	1c9a      	adds	r2, r3, #2
 800fd38:	607a      	str	r2, [r7, #4]
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800fd3e:	2300      	movs	r3, #0
 800fd40:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd42:	e015      	b.n	800fd70 <gen_numname+0x60>
				sreg = (sreg << 1) + (wc & 1);
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	005a      	lsls	r2, r3, #1
 800fd48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd4a:	f003 0301 	and.w	r3, r3, #1
 800fd4e:	4413      	add	r3, r2
 800fd50:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fd52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd54:	085b      	lsrs	r3, r3, #1
 800fd56:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d003      	beq.n	800fd6a <gen_numname+0x5a>
 800fd62:	69fa      	ldr	r2, [r7, #28]
 800fd64:	4b3c      	ldr	r3, [pc, #240]	; (800fe58 <gen_numname+0x148>)
 800fd66:	4053      	eors	r3, r2
 800fd68:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd72:	2b0f      	cmp	r3, #15
 800fd74:	d9e6      	bls.n	800fd44 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	881b      	ldrh	r3, [r3, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d1da      	bne.n	800fd34 <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 800fd82:	2307      	movs	r3, #7
 800fd84:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	f003 030f 	and.w	r3, r3, #15
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	3330      	adds	r3, #48	; 0x30
 800fd92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	091b      	lsrs	r3, r3, #4
 800fd9a:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 800fd9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fda0:	2b39      	cmp	r3, #57	; 0x39
 800fda2:	d904      	bls.n	800fdae <gen_numname+0x9e>
 800fda4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fda8:	3307      	adds	r3, #7
 800fdaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	1e5a      	subs	r2, r3, #1
 800fdb2:	62ba      	str	r2, [r7, #40]	; 0x28
 800fdb4:	3330      	adds	r3, #48	; 0x30
 800fdb6:	443b      	add	r3, r7
 800fdb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fdbc:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 800fdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d002      	beq.n	800fdcc <gen_numname+0xbc>
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d1dc      	bne.n	800fd86 <gen_numname+0x76>
	ns[i] = '~';
 800fdcc:	f107 0214 	add.w	r2, r7, #20
 800fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd2:	4413      	add	r3, r2
 800fdd4:	227e      	movs	r2, #126	; 0x7e
 800fdd6:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800fdd8:	2300      	movs	r3, #0
 800fdda:	627b      	str	r3, [r7, #36]	; 0x24
 800fddc:	e014      	b.n	800fe08 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde2:	4413      	add	r3, r2
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fe fb1b 	bl	800e422 <dbc_1st>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d007      	beq.n	800fe02 <gen_numname+0xf2>
			if (j == i - 1) break;
 800fdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf4:	3b01      	subs	r3, #1
 800fdf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d010      	beq.n	800fe1e <gen_numname+0x10e>
			j++;
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfe:	3301      	adds	r3, #1
 800fe00:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe04:	3301      	adds	r3, #1
 800fe06:	627b      	str	r3, [r7, #36]	; 0x24
 800fe08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d207      	bcs.n	800fe20 <gen_numname+0x110>
 800fe10:	68fa      	ldr	r2, [r7, #12]
 800fe12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe14:	4413      	add	r3, r2
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	2b20      	cmp	r3, #32
 800fe1a:	d1e0      	bne.n	800fdde <gen_numname+0xce>
 800fe1c:	e000      	b.n	800fe20 <gen_numname+0x110>
			if (j == i - 1) break;
 800fe1e:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800fe20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe22:	2b07      	cmp	r3, #7
 800fe24:	d807      	bhi.n	800fe36 <gen_numname+0x126>
 800fe26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe28:	1c5a      	adds	r2, r3, #1
 800fe2a:	62ba      	str	r2, [r7, #40]	; 0x28
 800fe2c:	3330      	adds	r3, #48	; 0x30
 800fe2e:	443b      	add	r3, r7
 800fe30:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fe34:	e000      	b.n	800fe38 <gen_numname+0x128>
 800fe36:	2120      	movs	r1, #32
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	1c5a      	adds	r2, r3, #1
 800fe3c:	627a      	str	r2, [r7, #36]	; 0x24
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	4413      	add	r3, r2
 800fe42:	460a      	mov	r2, r1
 800fe44:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800fe46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe48:	2b07      	cmp	r3, #7
 800fe4a:	d9e9      	bls.n	800fe20 <gen_numname+0x110>
}
 800fe4c:	bf00      	nop
 800fe4e:	bf00      	nop
 800fe50:	3730      	adds	r7, #48	; 0x30
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	00011021 	.word	0x00011021

0800fe5c <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fe64:	2300      	movs	r3, #0
 800fe66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fe68:	230b      	movs	r3, #11
 800fe6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
 800fe6e:	b2da      	uxtb	r2, r3
 800fe70:	0852      	lsrs	r2, r2, #1
 800fe72:	01db      	lsls	r3, r3, #7
 800fe74:	4313      	orrs	r3, r2
 800fe76:	b2da      	uxtb	r2, r3
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	1c59      	adds	r1, r3, #1
 800fe7c:	6079      	str	r1, [r7, #4]
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	4413      	add	r3, r2
 800fe82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	3b01      	subs	r3, #1
 800fe88:	60bb      	str	r3, [r7, #8]
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1ed      	bne.n	800fe6c <sum_sfn+0x10>
	return sum;
 800fe90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3714      	adds	r7, #20
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr

0800fe9e <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800fe9e:	b480      	push	{r7}
 800fea0:	b087      	sub	sp, #28
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	3301      	adds	r3, #1
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	3301      	adds	r3, #1
 800feae:	015b      	lsls	r3, r3, #5
 800feb0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800feb2:	2300      	movs	r3, #0
 800feb4:	827b      	strh	r3, [r7, #18]
 800feb6:	2300      	movs	r3, #0
 800feb8:	617b      	str	r3, [r7, #20]
 800feba:	e018      	b.n	800feee <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	2b02      	cmp	r3, #2
 800fec0:	d103      	bne.n	800feca <xdir_sum+0x2c>
			i++;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	3301      	adds	r3, #1
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	e00e      	b.n	800fee8 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800feca:	8a7b      	ldrh	r3, [r7, #18]
 800fecc:	03db      	lsls	r3, r3, #15
 800fece:	b29a      	uxth	r2, r3
 800fed0:	8a7b      	ldrh	r3, [r7, #18]
 800fed2:	085b      	lsrs	r3, r3, #1
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	4413      	add	r3, r2
 800fed8:	b29a      	uxth	r2, r3
 800feda:	6879      	ldr	r1, [r7, #4]
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	440b      	add	r3, r1
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	4413      	add	r3, r2
 800fee6:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	3301      	adds	r3, #1
 800feec:	617b      	str	r3, [r7, #20]
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d3e2      	bcc.n	800febc <xdir_sum+0x1e>
		}
	}
	return sum;
 800fef6:	8a7b      	ldrh	r3, [r7, #18]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	371c      	adds	r7, #28
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ff10:	e01f      	b.n	800ff52 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800ff12:	89bb      	ldrh	r3, [r7, #12]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f002 fb7d 	bl	8012614 <ff_wtoupper>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ff1e:	89fb      	ldrh	r3, [r7, #14]
 800ff20:	03db      	lsls	r3, r3, #15
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	89fb      	ldrh	r3, [r7, #14]
 800ff26:	085b      	lsrs	r3, r3, #1
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	4413      	add	r3, r2
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	89bb      	ldrh	r3, [r7, #12]
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	4413      	add	r3, r2
 800ff36:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ff38:	89fb      	ldrh	r3, [r7, #14]
 800ff3a:	03db      	lsls	r3, r3, #15
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	89fb      	ldrh	r3, [r7, #14]
 800ff40:	085b      	lsrs	r3, r3, #1
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	4413      	add	r3, r2
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	89bb      	ldrh	r3, [r7, #12]
 800ff4a:	0a1b      	lsrs	r3, r3, #8
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	4413      	add	r3, r2
 800ff50:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	1c9a      	adds	r2, r3, #2
 800ff56:	607a      	str	r2, [r7, #4]
 800ff58:	881b      	ldrh	r3, [r3, #0]
 800ff5a:	81bb      	strh	r3, [r7, #12]
 800ff5c:	89bb      	ldrh	r3, [r7, #12]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1d7      	bne.n	800ff12 <xname_sum+0xe>
	}
	return sum;
 800ff62:	89fb      	ldrh	r3, [r7, #14]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 800ff6c:	b590      	push	{r4, r7, lr}
 800ff6e:	b087      	sub	sp, #28
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	695b      	ldr	r3, [r3, #20]
 800ff7a:	60fb      	str	r3, [r7, #12]


	/* Load file directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff84:	4619      	mov	r1, r3
 800ff86:	4610      	mov	r0, r2
 800ff88:	f7fe fc5a 	bl	800e840 <move_window>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ff90:	7dfb      	ldrb	r3, [r7, #23]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <load_xdir+0x2e>
 800ff96:	7dfb      	ldrb	r3, [r7, #23]
 800ff98:	e0a9      	b.n	80100ee <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	2b85      	cmp	r3, #133	; 0x85
 800ffa2:	d001      	beq.n	800ffa8 <load_xdir+0x3c>
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	e0a2      	b.n	80100ee <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffac:	2220      	movs	r2, #32
 800ffae:	4619      	mov	r1, r3
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f008 fdbb 	bl	8018b2c <memcpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	015b      	lsls	r3, r3, #5
 800ffc0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	2b5f      	cmp	r3, #95	; 0x5f
 800ffc6:	d903      	bls.n	800ffd0 <load_xdir+0x64>
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ffce:	d901      	bls.n	800ffd4 <load_xdir+0x68>
 800ffd0:	2302      	movs	r3, #2
 800ffd2:	e08c      	b.n	80100ee <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7ff fc0d 	bl	800f7f6 <dir_next>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
 800ffe2:	2b04      	cmp	r3, #4
 800ffe4:	d101      	bne.n	800ffea <load_xdir+0x7e>
 800ffe6:	2302      	movs	r3, #2
 800ffe8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ffea:	7dfb      	ldrb	r3, [r7, #23]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d001      	beq.n	800fff4 <load_xdir+0x88>
 800fff0:	7dfb      	ldrb	r3, [r7, #23]
 800fff2:	e07c      	b.n	80100ee <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fffc:	4619      	mov	r1, r3
 800fffe:	4610      	mov	r0, r2
 8010000:	f7fe fc1e 	bl	800e840 <move_window>
 8010004:	4603      	mov	r3, r0
 8010006:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010008:	7dfb      	ldrb	r3, [r7, #23]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d001      	beq.n	8010012 <load_xdir+0xa6>
 801000e:	7dfb      	ldrb	r3, [r7, #23]
 8010010:	e06d      	b.n	80100ee <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2bc0      	cmp	r3, #192	; 0xc0
 801001a:	d001      	beq.n	8010020 <load_xdir+0xb4>
 801001c:	2302      	movs	r3, #2
 801001e:	e066      	b.n	80100ee <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f103 0020 	add.w	r0, r3, #32
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801002a:	2220      	movs	r2, #32
 801002c:	4619      	mov	r1, r3
 801002e:	f008 fd7d 	bl	8018b2c <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	3323      	adds	r3, #35	; 0x23
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	332c      	adds	r3, #44	; 0x2c
 801003a:	4a2f      	ldr	r2, [pc, #188]	; (80100f8 <load_xdir+0x18c>)
 801003c:	fba2 2303 	umull	r2, r3, r2, r3
 8010040:	08db      	lsrs	r3, r3, #3
 8010042:	015b      	lsls	r3, r3, #5
 8010044:	68ba      	ldr	r2, [r7, #8]
 8010046:	429a      	cmp	r2, r3
 8010048:	d201      	bcs.n	801004e <load_xdir+0xe2>
 801004a:	2302      	movs	r3, #2
 801004c:	e04f      	b.n	80100ee <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 801004e:	2340      	movs	r3, #64	; 0x40
 8010050:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 8010052:	2100      	movs	r1, #0
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7ff fbce 	bl	800f7f6 <dir_next>
 801005a:	4603      	mov	r3, r0
 801005c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 801005e:	7dfb      	ldrb	r3, [r7, #23]
 8010060:	2b04      	cmp	r3, #4
 8010062:	d101      	bne.n	8010068 <load_xdir+0xfc>
 8010064:	2302      	movs	r3, #2
 8010066:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010068:	7dfb      	ldrb	r3, [r7, #23]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <load_xdir+0x106>
 801006e:	7dfb      	ldrb	r3, [r7, #23]
 8010070:	e03d      	b.n	80100ee <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801007a:	4619      	mov	r1, r3
 801007c:	4610      	mov	r0, r2
 801007e:	f7fe fbdf 	bl	800e840 <move_window>
 8010082:	4603      	mov	r3, r0
 8010084:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010086:	7dfb      	ldrb	r3, [r7, #23]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d001      	beq.n	8010090 <load_xdir+0x124>
 801008c:	7dfb      	ldrb	r3, [r7, #23]
 801008e:	e02e      	b.n	80100ee <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	2bc1      	cmp	r3, #193	; 0xc1
 8010098:	d001      	beq.n	801009e <load_xdir+0x132>
 801009a:	2302      	movs	r3, #2
 801009c:	e027      	b.n	80100ee <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80100a4:	d208      	bcs.n	80100b8 <load_xdir+0x14c>
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	18d0      	adds	r0, r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100b0:	2220      	movs	r2, #32
 80100b2:	4619      	mov	r1, r3
 80100b4:	f008 fd3a 	bl	8018b2c <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	3320      	adds	r3, #32
 80100bc:	613b      	str	r3, [r7, #16]
 80100be:	693a      	ldr	r2, [r7, #16]
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d3c5      	bcc.n	8010052 <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80100cc:	d80e      	bhi.n	80100ec <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f7ff fee5 	bl	800fe9e <xdir_sum>
 80100d4:	4603      	mov	r3, r0
 80100d6:	461c      	mov	r4, r3
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	3302      	adds	r3, #2
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fd ffbb 	bl	800e058 <ld_word>
 80100e2:	4603      	mov	r3, r0
 80100e4:	429c      	cmp	r4, r3
 80100e6:	d001      	beq.n	80100ec <load_xdir+0x180>
 80100e8:	2302      	movs	r3, #2
 80100ea:	e000      	b.n	80100ee <load_xdir+0x182>
	}
	return FR_OK;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	371c      	adds	r7, #28
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd90      	pop	{r4, r7, pc}
 80100f6:	bf00      	nop
 80100f8:	88888889 	.word	0x88888889

080100fc <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	695b      	ldr	r3, [r3, #20]
 801010a:	3334      	adds	r3, #52	; 0x34
 801010c:	4618      	mov	r0, r3
 801010e:	f7fd ffbb 	bl	800e088 <ld_dword>
 8010112:	4602      	mov	r2, r0
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	695b      	ldr	r3, [r3, #20]
 801011c:	3338      	adds	r3, #56	; 0x38
 801011e:	4618      	mov	r0, r3
 8010120:	f7fd ffd5 	bl	800e0ce <ld_qword>
 8010124:	4602      	mov	r2, r0
 8010126:	460b      	mov	r3, r1
 8010128:	6839      	ldr	r1, [r7, #0]
 801012a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	695b      	ldr	r3, [r3, #20]
 8010132:	3321      	adds	r3, #33	; 0x21
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	f003 0302 	and.w	r3, r3, #2
 801013a:	b2da      	uxtb	r2, r3
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	2200      	movs	r2, #0
 8010144:	61da      	str	r2, [r3, #28]
}
 8010146:	bf00      	nop
 8010148:	3708      	adds	r7, #8
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 801014e:	b5b0      	push	{r4, r5, r7, lr}
 8010150:	b084      	sub	sp, #16
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8010158:	6839      	ldr	r1, [r7, #0]
 801015a:	6808      	ldr	r0, [r1, #0]
 801015c:	6879      	ldr	r1, [r7, #4]
 801015e:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8010160:	6839      	ldr	r1, [r7, #0]
 8010162:	6a08      	ldr	r0, [r1, #32]
 8010164:	6879      	ldr	r1, [r7, #4]
 8010166:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 801016c:	b2c8      	uxtb	r0, r1
 801016e:	6879      	ldr	r1, [r7, #4]
 8010170:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8010172:	6839      	ldr	r1, [r7, #0]
 8010174:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8010176:	2000      	movs	r0, #0
 8010178:	460c      	mov	r4, r1
 801017a:	4605      	mov	r5, r0
 801017c:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8010180:	2300      	movs	r3, #0
 8010182:	6879      	ldr	r1, [r7, #4]
 8010184:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2200      	movs	r2, #0
 801018c:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f7ff fa96 	bl	800f6ce <dir_sdi>
 80101a2:	4603      	mov	r3, r0
 80101a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d104      	bne.n	80101b6 <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f7ff fedd 	bl	800ff6c <load_xdir>
 80101b2:	4603      	mov	r3, r0
 80101b4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80101b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bdb0      	pop	{r4, r5, r7, pc}

080101c0 <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 80101c0:	b590      	push	{r4, r7, lr}
 80101c2:	b087      	sub	sp, #28
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	695b      	ldr	r3, [r3, #20]
 80101ce:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	1c9c      	adds	r4, r3, #2
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f7ff fe62 	bl	800fe9e <xdir_sum>
 80101da:	4603      	mov	r3, r0
 80101dc:	4619      	mov	r1, r3
 80101de:	4620      	mov	r0, r4
 80101e0:	f7fe f850 	bl	800e284 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	3301      	adds	r3, #1
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	3301      	adds	r3, #1
 80101ec:	613b      	str	r3, [r7, #16]

	/* Store the directory entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101f2:	4619      	mov	r1, r3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7ff fa6a 	bl	800f6ce <dir_sdi>
 80101fa:	4603      	mov	r3, r0
 80101fc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80101fe:	e026      	b.n	801024e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010208:	4619      	mov	r1, r3
 801020a:	4610      	mov	r0, r2
 801020c:	f7fe fb18 	bl	800e840 <move_window>
 8010210:	4603      	mov	r3, r0
 8010212:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010214:	7dfb      	ldrb	r3, [r7, #23]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d11d      	bne.n	8010256 <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801021e:	2220      	movs	r2, #32
 8010220:	68f9      	ldr	r1, [r7, #12]
 8010222:	4618      	mov	r0, r3
 8010224:	f008 fc82 	bl	8018b2c <memcpy>
		dp->obj.fs->wflag = 1;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2201      	movs	r2, #1
 801022e:	711a      	strb	r2, [r3, #4]
		if (--nent == 0) break;
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	3b01      	subs	r3, #1
 8010234:	613b      	str	r3, [r7, #16]
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00e      	beq.n	801025a <store_xdir+0x9a>
		dirb += SZDIRE;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3320      	adds	r3, #32
 8010240:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8010242:	2100      	movs	r1, #0
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7ff fad6 	bl	800f7f6 <dir_next>
 801024a:	4603      	mov	r3, r0
 801024c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 801024e:	7dfb      	ldrb	r3, [r7, #23]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d0d5      	beq.n	8010200 <store_xdir+0x40>
 8010254:	e002      	b.n	801025c <store_xdir+0x9c>
		if (res != FR_OK) break;
 8010256:	bf00      	nop
 8010258:	e000      	b.n	801025c <store_xdir+0x9c>
		if (--nent == 0) break;
 801025a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 801025c:	7dfb      	ldrb	r3, [r7, #23]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d002      	beq.n	8010268 <store_xdir+0xa8>
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d101      	bne.n	801026c <store_xdir+0xac>
 8010268:	7dfb      	ldrb	r3, [r7, #23]
 801026a:	e000      	b.n	801026e <store_xdir+0xae>
 801026c:	2302      	movs	r3, #2
}
 801026e:	4618      	mov	r0, r3
 8010270:	371c      	adds	r7, #28
 8010272:	46bd      	mov	sp, r7
 8010274:	bd90      	pop	{r4, r7, pc}

08010276 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 8010276:	b590      	push	{r4, r7, lr}
 8010278:	b085      	sub	sp, #20
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
 801027e:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	memset(dirb, 0, 2 * SZDIRE);
 8010280:	2240      	movs	r2, #64	; 0x40
 8010282:	2100      	movs	r1, #0
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f008 fc18 	bl	8018aba <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2285      	movs	r2, #133	; 0x85
 801028e:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	3320      	adds	r3, #32
 8010294:	22c0      	movs	r2, #192	; 0xc0
 8010296:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 8010298:	2340      	movs	r3, #64	; 0x40
 801029a:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 801029c:	2300      	movs	r3, #0
 801029e:	72fb      	strb	r3, [r7, #11]
 80102a0:	7afb      	ldrb	r3, [r7, #11]
 80102a2:	72bb      	strb	r3, [r7, #10]
 80102a4:	2301      	movs	r3, #1
 80102a6:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	1c5a      	adds	r2, r3, #1
 80102ac:	60fa      	str	r2, [r7, #12]
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	4413      	add	r3, r2
 80102b2:	22c1      	movs	r2, #193	; 0xc1
 80102b4:	701a      	strb	r2, [r3, #0]
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	1c5a      	adds	r2, r3, #1
 80102ba:	60fa      	str	r2, [r7, #12]
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	4413      	add	r3, r2
 80102c0:	2200      	movs	r2, #0
 80102c2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 80102c4:	893b      	ldrh	r3, [r7, #8]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d00b      	beq.n	80102e2 <create_xdir+0x6c>
 80102ca:	7abb      	ldrb	r3, [r7, #10]
 80102cc:	005b      	lsls	r3, r3, #1
 80102ce:	683a      	ldr	r2, [r7, #0]
 80102d0:	4413      	add	r3, r2
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	813b      	strh	r3, [r7, #8]
 80102d6:	893b      	ldrh	r3, [r7, #8]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d002      	beq.n	80102e2 <create_xdir+0x6c>
 80102dc:	7abb      	ldrb	r3, [r7, #10]
 80102de:	3301      	adds	r3, #1
 80102e0:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 	/* Store it */
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	4413      	add	r3, r2
 80102e8:	893a      	ldrh	r2, [r7, #8]
 80102ea:	4611      	mov	r1, r2
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fd ffc9 	bl	800e284 <st_word>
			i += 2;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	3302      	adds	r3, #2
 80102f6:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f003 031f 	and.w	r3, r3, #31
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d1e0      	bne.n	80102c4 <create_xdir+0x4e>
		nc1++;
 8010302:	7afb      	ldrb	r3, [r7, #11]
 8010304:	3301      	adds	r3, #1
 8010306:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 8010308:	7abb      	ldrb	r3, [r7, #10]
 801030a:	005b      	lsls	r3, r3, #1
 801030c:	683a      	ldr	r2, [r7, #0]
 801030e:	4413      	add	r3, r2
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1c8      	bne.n	80102a8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	3323      	adds	r3, #35	; 0x23
 801031a:	7aba      	ldrb	r2, [r7, #10]
 801031c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	3301      	adds	r3, #1
 8010322:	7afa      	ldrb	r2, [r7, #11]
 8010324:	3201      	adds	r2, #1
 8010326:	b2d2      	uxtb	r2, r2
 8010328:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8010330:	6838      	ldr	r0, [r7, #0]
 8010332:	f7ff fde7 	bl	800ff04 <xname_sum>
 8010336:	4603      	mov	r3, r0
 8010338:	4619      	mov	r1, r3
 801033a:	4620      	mov	r0, r4
 801033c:	f7fd ffa2 	bl	800e284 <st_word>
}
 8010340:	bf00      	nop
 8010342:	3714      	adds	r7, #20
 8010344:	46bd      	mov	sp, r7
 8010346:	bd90      	pop	{r4, r7, pc}

08010348 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010352:	2304      	movs	r3, #4
 8010354:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 801035c:	23ff      	movs	r3, #255	; 0xff
 801035e:	757b      	strb	r3, [r7, #21]
 8010360:	23ff      	movs	r3, #255	; 0xff
 8010362:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8010364:	e0a6      	b.n	80104b4 <dir_read+0x16c>
		res = move_window(fs, dp->sect);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036a:	4619      	mov	r1, r3
 801036c:	6938      	ldr	r0, [r7, #16]
 801036e:	f7fe fa67 	bl	800e840 <move_window>
 8010372:	4603      	mov	r3, r0
 8010374:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010376:	7dfb      	ldrb	r3, [r7, #23]
 8010378:	2b00      	cmp	r3, #0
 801037a:	f040 80a1 	bne.w	80104c0 <dir_read+0x178>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 8010386:	7dbb      	ldrb	r3, [r7, #22]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d102      	bne.n	8010392 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801038c:	2304      	movs	r3, #4
 801038e:	75fb      	strb	r3, [r7, #23]
 8010390:	e09d      	b.n	80104ce <dir_read+0x186>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	2b04      	cmp	r3, #4
 8010398:	d11f      	bne.n	80103da <dir_read+0x92>
			if (FF_USE_LABEL && vol) {
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d003      	beq.n	80103a8 <dir_read+0x60>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
 80103a0:	7dbb      	ldrb	r3, [r7, #22]
 80103a2:	2b83      	cmp	r3, #131	; 0x83
 80103a4:	d17d      	bne.n	80104a2 <dir_read+0x15a>
 80103a6:	e092      	b.n	80104ce <dir_read+0x186>
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 80103a8:	7dbb      	ldrb	r3, [r7, #22]
 80103aa:	2b85      	cmp	r3, #133	; 0x85
 80103ac:	d179      	bne.n	80104a2 <dir_read+0x15a>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f7ff fdd8 	bl	800ff6c <load_xdir>
 80103bc:	4603      	mov	r3, r0
 80103be:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80103c0:	7dfb      	ldrb	r3, [r7, #23]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d17e      	bne.n	80104c4 <dir_read+0x17c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	695b      	ldr	r3, [r3, #20]
 80103ca:	3304      	adds	r3, #4
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	719a      	strb	r2, [r3, #6]
					}
					break;
 80103d8:	e074      	b.n	80104c4 <dir_read+0x17c>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103de:	330b      	adds	r3, #11
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103e6:	73fb      	strb	r3, [r7, #15]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	7bfa      	ldrb	r2, [r7, #15]
 80103ec:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80103ee:	7dbb      	ldrb	r3, [r7, #22]
 80103f0:	2be5      	cmp	r3, #229	; 0xe5
 80103f2:	d00e      	beq.n	8010412 <dir_read+0xca>
 80103f4:	7dbb      	ldrb	r3, [r7, #22]
 80103f6:	2b2e      	cmp	r3, #46	; 0x2e
 80103f8:	d00b      	beq.n	8010412 <dir_read+0xca>
 80103fa:	7bfb      	ldrb	r3, [r7, #15]
 80103fc:	f023 0320 	bic.w	r3, r3, #32
 8010400:	2b08      	cmp	r3, #8
 8010402:	bf0c      	ite	eq
 8010404:	2301      	moveq	r3, #1
 8010406:	2300      	movne	r3, #0
 8010408:	b2db      	uxtb	r3, r3
 801040a:	461a      	mov	r2, r3
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	4293      	cmp	r3, r2
 8010410:	d002      	beq.n	8010418 <dir_read+0xd0>
				ord = 0xFF;
 8010412:	23ff      	movs	r3, #255	; 0xff
 8010414:	757b      	strb	r3, [r7, #21]
 8010416:	e044      	b.n	80104a2 <dir_read+0x15a>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 8010418:	7bfb      	ldrb	r3, [r7, #15]
 801041a:	2b0f      	cmp	r3, #15
 801041c:	d12f      	bne.n	801047e <dir_read+0x136>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 801041e:	7dbb      	ldrb	r3, [r7, #22]
 8010420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010424:	2b00      	cmp	r3, #0
 8010426:	d00d      	beq.n	8010444 <dir_read+0xfc>
						sum = dp->dir[LDIR_Chksum];
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801042c:	7b5b      	ldrb	r3, [r3, #13]
 801042e:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 8010430:	7dbb      	ldrb	r3, [r7, #22]
 8010432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010436:	75bb      	strb	r3, [r7, #22]
 8010438:	7dbb      	ldrb	r3, [r7, #22]
 801043a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010444:	7dba      	ldrb	r2, [r7, #22]
 8010446:	7d7b      	ldrb	r3, [r7, #21]
 8010448:	429a      	cmp	r2, r3
 801044a:	d115      	bne.n	8010478 <dir_read+0x130>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010450:	330d      	adds	r3, #13
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	7d3a      	ldrb	r2, [r7, #20]
 8010456:	429a      	cmp	r2, r3
 8010458:	d10e      	bne.n	8010478 <dir_read+0x130>
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	691a      	ldr	r2, [r3, #16]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010462:	4619      	mov	r1, r3
 8010464:	4610      	mov	r0, r2
 8010466:	f7ff fb85 	bl	800fb74 <pick_lfn>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d003      	beq.n	8010478 <dir_read+0x130>
 8010470:	7d7b      	ldrb	r3, [r7, #21]
 8010472:	3b01      	subs	r3, #1
 8010474:	b2db      	uxtb	r3, r3
 8010476:	e000      	b.n	801047a <dir_read+0x132>
 8010478:	23ff      	movs	r3, #255	; 0xff
 801047a:	757b      	strb	r3, [r7, #21]
 801047c:	e011      	b.n	80104a2 <dir_read+0x15a>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801047e:	7d7b      	ldrb	r3, [r7, #21]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d109      	bne.n	8010498 <dir_read+0x150>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fce7 	bl	800fe5c <sum_sfn>
 801048e:	4603      	mov	r3, r0
 8010490:	461a      	mov	r2, r3
 8010492:	7d3b      	ldrb	r3, [r7, #20]
 8010494:	4293      	cmp	r3, r2
 8010496:	d017      	beq.n	80104c8 <dir_read+0x180>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f04f 32ff 	mov.w	r2, #4294967295
 801049e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 80104a0:	e012      	b.n	80104c8 <dir_read+0x180>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80104a2:	2100      	movs	r1, #0
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f7ff f9a6 	bl	800f7f6 <dir_next>
 80104aa:	4603      	mov	r3, r0
 80104ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80104ae:	7dfb      	ldrb	r3, [r7, #23]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d10b      	bne.n	80104cc <dir_read+0x184>
	while (dp->sect) {
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	f47f af54 	bne.w	8010366 <dir_read+0x1e>
 80104be:	e006      	b.n	80104ce <dir_read+0x186>
		if (res != FR_OK) break;
 80104c0:	bf00      	nop
 80104c2:	e004      	b.n	80104ce <dir_read+0x186>
					break;
 80104c4:	bf00      	nop
 80104c6:	e002      	b.n	80104ce <dir_read+0x186>
					break;
 80104c8:	bf00      	nop
 80104ca:	e000      	b.n	80104ce <dir_read+0x186>
		if (res != FR_OK) break;
 80104cc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80104ce:	7dfb      	ldrb	r3, [r7, #23]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d002      	beq.n	80104da <dir_read+0x192>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80104da:	7dfb      	ldrb	r3, [r7, #23]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3718      	adds	r7, #24
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80104e4:	b590      	push	{r4, r7, lr}
 80104e6:	b089      	sub	sp, #36	; 0x24
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80104f2:	2100      	movs	r1, #0
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f7ff f8ea 	bl	800f6ce <dir_sdi>
 80104fa:	4603      	mov	r3, r0
 80104fc:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80104fe:	7ffb      	ldrb	r3, [r7, #31]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d001      	beq.n	8010508 <dir_find+0x24>
 8010504:	7ffb      	ldrb	r3, [r7, #31]
 8010506:	e111      	b.n	801072c <dir_find+0x248>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b04      	cmp	r3, #4
 801050e:	d163      	bne.n	80105d8 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	691b      	ldr	r3, [r3, #16]
 8010514:	4618      	mov	r0, r3
 8010516:	f7ff fcf5 	bl	800ff04 <xname_sum>
 801051a:	4603      	mov	r3, r0
 801051c:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 801051e:	e04e      	b.n	80105be <dir_find+0xda>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	695b      	ldr	r3, [r3, #20]
 8010524:	3324      	adds	r3, #36	; 0x24
 8010526:	4618      	mov	r0, r3
 8010528:	f7fd fd96 	bl	800e058 <ld_word>
 801052c:	4603      	mov	r3, r0
 801052e:	461a      	mov	r2, r3
 8010530:	893b      	ldrh	r3, [r7, #8]
 8010532:	4293      	cmp	r3, r2
 8010534:	d000      	beq.n	8010538 <dir_find+0x54>
 8010536:	e042      	b.n	80105be <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	695b      	ldr	r3, [r3, #20]
 801053c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010540:	76fb      	strb	r3, [r7, #27]
 8010542:	2340      	movs	r3, #64	; 0x40
 8010544:	617b      	str	r3, [r7, #20]
 8010546:	2300      	movs	r3, #0
 8010548:	613b      	str	r3, [r7, #16]
 801054a:	e028      	b.n	801059e <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	f003 031f 	and.w	r3, r3, #31
 8010552:	2b00      	cmp	r3, #0
 8010554:	d102      	bne.n	801055c <dir_find+0x78>
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	3302      	adds	r3, #2
 801055a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	695a      	ldr	r2, [r3, #20]
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	4413      	add	r3, r2
 8010564:	4618      	mov	r0, r3
 8010566:	f7fd fd77 	bl	800e058 <ld_word>
 801056a:	4603      	mov	r3, r0
 801056c:	4618      	mov	r0, r3
 801056e:	f002 f851 	bl	8012614 <ff_wtoupper>
 8010572:	4604      	mov	r4, r0
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	691a      	ldr	r2, [r3, #16]
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	4413      	add	r3, r2
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	4618      	mov	r0, r3
 8010582:	f002 f847 	bl	8012614 <ff_wtoupper>
 8010586:	4603      	mov	r3, r0
 8010588:	429c      	cmp	r4, r3
 801058a:	d10c      	bne.n	80105a6 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 801058c:	7efb      	ldrb	r3, [r7, #27]
 801058e:	3b01      	subs	r3, #1
 8010590:	76fb      	strb	r3, [r7, #27]
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	3302      	adds	r3, #2
 8010596:	617b      	str	r3, [r7, #20]
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	3301      	adds	r3, #1
 801059c:	613b      	str	r3, [r7, #16]
 801059e:	7efb      	ldrb	r3, [r7, #27]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1d3      	bne.n	801054c <dir_find+0x68>
 80105a4:	e000      	b.n	80105a8 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80105a6:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80105a8:	7efb      	ldrb	r3, [r7, #27]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d107      	bne.n	80105be <dir_find+0xda>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	691a      	ldr	r2, [r3, #16]
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	005b      	lsls	r3, r3, #1
 80105b6:	4413      	add	r3, r2
 80105b8:	881b      	ldrh	r3, [r3, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d009      	beq.n	80105d2 <dir_find+0xee>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 80105be:	2100      	movs	r1, #0
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff fec1 	bl	8010348 <dir_read>
 80105c6:	4603      	mov	r3, r0
 80105c8:	77fb      	strb	r3, [r7, #31]
 80105ca:	7ffb      	ldrb	r3, [r7, #31]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d0a7      	beq.n	8010520 <dir_find+0x3c>
 80105d0:	e000      	b.n	80105d4 <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80105d2:	bf00      	nop
		}
		return res;
 80105d4:	7ffb      	ldrb	r3, [r7, #31]
 80105d6:	e0a9      	b.n	801072c <dir_find+0x248>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80105d8:	23ff      	movs	r3, #255	; 0xff
 80105da:	773b      	strb	r3, [r7, #28]
 80105dc:	7f3b      	ldrb	r3, [r7, #28]
 80105de:	777b      	strb	r3, [r7, #29]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f04f 32ff 	mov.w	r2, #4294967295
 80105e6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ec:	4619      	mov	r1, r3
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f7fe f926 	bl	800e840 <move_window>
 80105f4:	4603      	mov	r3, r0
 80105f6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80105f8:	7ffb      	ldrb	r3, [r7, #31]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f040 8090 	bne.w	8010720 <dir_find+0x23c>
		c = dp->dir[DIR_Name];
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010608:	7fbb      	ldrb	r3, [r7, #30]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d102      	bne.n	8010614 <dir_find+0x130>
 801060e:	2304      	movs	r3, #4
 8010610:	77fb      	strb	r3, [r7, #31]
 8010612:	e08a      	b.n	801072a <dir_find+0x246>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010618:	330b      	adds	r3, #11
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010620:	72fb      	strb	r3, [r7, #11]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	7afa      	ldrb	r2, [r7, #11]
 8010626:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010628:	7fbb      	ldrb	r3, [r7, #30]
 801062a:	2be5      	cmp	r3, #229	; 0xe5
 801062c:	d007      	beq.n	801063e <dir_find+0x15a>
 801062e:	7afb      	ldrb	r3, [r7, #11]
 8010630:	f003 0308 	and.w	r3, r3, #8
 8010634:	2b00      	cmp	r3, #0
 8010636:	d009      	beq.n	801064c <dir_find+0x168>
 8010638:	7afb      	ldrb	r3, [r7, #11]
 801063a:	2b0f      	cmp	r3, #15
 801063c:	d006      	beq.n	801064c <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801063e:	23ff      	movs	r3, #255	; 0xff
 8010640:	777b      	strb	r3, [r7, #29]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f04f 32ff 	mov.w	r2, #4294967295
 8010648:	64da      	str	r2, [r3, #76]	; 0x4c
 801064a:	e05e      	b.n	801070a <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801064c:	7afb      	ldrb	r3, [r7, #11]
 801064e:	2b0f      	cmp	r3, #15
 8010650:	d136      	bne.n	80106c0 <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8010658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801065c:	2b00      	cmp	r3, #0
 801065e:	d154      	bne.n	801070a <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010660:	7fbb      	ldrb	r3, [r7, #30]
 8010662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00d      	beq.n	8010686 <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801066e:	7b5b      	ldrb	r3, [r3, #13]
 8010670:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010672:	7fbb      	ldrb	r3, [r7, #30]
 8010674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010678:	77bb      	strb	r3, [r7, #30]
 801067a:	7fbb      	ldrb	r3, [r7, #30]
 801067c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010686:	7fba      	ldrb	r2, [r7, #30]
 8010688:	7f7b      	ldrb	r3, [r7, #29]
 801068a:	429a      	cmp	r2, r3
 801068c:	d115      	bne.n	80106ba <dir_find+0x1d6>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010692:	330d      	adds	r3, #13
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	7f3a      	ldrb	r2, [r7, #28]
 8010698:	429a      	cmp	r2, r3
 801069a:	d10e      	bne.n	80106ba <dir_find+0x1d6>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	691a      	ldr	r2, [r3, #16]
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106a4:	4619      	mov	r1, r3
 80106a6:	4610      	mov	r0, r2
 80106a8:	f7ff f9f6 	bl	800fa98 <cmp_lfn>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d003      	beq.n	80106ba <dir_find+0x1d6>
 80106b2:	7f7b      	ldrb	r3, [r7, #29]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	e000      	b.n	80106bc <dir_find+0x1d8>
 80106ba:	23ff      	movs	r3, #255	; 0xff
 80106bc:	777b      	strb	r3, [r7, #29]
 80106be:	e024      	b.n	801070a <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80106c0:	7f7b      	ldrb	r3, [r7, #29]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d109      	bne.n	80106da <dir_find+0x1f6>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7ff fbc6 	bl	800fe5c <sum_sfn>
 80106d0:	4603      	mov	r3, r0
 80106d2:	461a      	mov	r2, r3
 80106d4:	7f3b      	ldrb	r3, [r7, #28]
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d024      	beq.n	8010724 <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80106e0:	f003 0301 	and.w	r3, r3, #1
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d10a      	bne.n	80106fe <dir_find+0x21a>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	3340      	adds	r3, #64	; 0x40
 80106f0:	220b      	movs	r2, #11
 80106f2:	4619      	mov	r1, r3
 80106f4:	f008 f9b7 	bl	8018a66 <memcmp>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d014      	beq.n	8010728 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80106fe:	23ff      	movs	r3, #255	; 0xff
 8010700:	777b      	strb	r3, [r7, #29]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f04f 32ff 	mov.w	r2, #4294967295
 8010708:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801070a:	2100      	movs	r1, #0
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7ff f872 	bl	800f7f6 <dir_next>
 8010712:	4603      	mov	r3, r0
 8010714:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8010716:	7ffb      	ldrb	r3, [r7, #31]
 8010718:	2b00      	cmp	r3, #0
 801071a:	f43f af65 	beq.w	80105e8 <dir_find+0x104>
 801071e:	e004      	b.n	801072a <dir_find+0x246>
		if (res != FR_OK) break;
 8010720:	bf00      	nop
 8010722:	e002      	b.n	801072a <dir_find+0x246>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010724:	bf00      	nop
 8010726:	e000      	b.n	801072a <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010728:	bf00      	nop

	return res;
 801072a:	7ffb      	ldrb	r3, [r7, #31]
}
 801072c:	4618      	mov	r0, r3
 801072e:	3724      	adds	r7, #36	; 0x24
 8010730:	46bd      	mov	sp, r7
 8010732:	bd90      	pop	{r4, r7, pc}

08010734 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8010734:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010738:	b0a0      	sub	sp, #128	; 0x80
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	66fb      	str	r3, [r7, #108]	; 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801074a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d001      	beq.n	8010756 <dir_register+0x22>
 8010752:	2306      	movs	r3, #6
 8010754:	e198      	b.n	8010a88 <dir_register+0x354>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 8010756:	2300      	movs	r3, #0
 8010758:	677b      	str	r3, [r7, #116]	; 0x74
 801075a:	e002      	b.n	8010762 <dir_register+0x2e>
 801075c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801075e:	3301      	adds	r3, #1
 8010760:	677b      	str	r3, [r7, #116]	; 0x74
 8010762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010764:	691a      	ldr	r2, [r3, #16]
 8010766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010768:	005b      	lsls	r3, r3, #1
 801076a:	4413      	add	r3, r2
 801076c:	881b      	ldrh	r3, [r3, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1f4      	bne.n	801075c <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	2b04      	cmp	r3, #4
 8010778:	f040 80aa 	bne.w	80108d0 <dir_register+0x19c>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 801077c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801077e:	330e      	adds	r3, #14
 8010780:	4aa7      	ldr	r2, [pc, #668]	; (8010a20 <dir_register+0x2ec>)
 8010782:	fba2 2303 	umull	r2, r3, r2, r3
 8010786:	08db      	lsrs	r3, r3, #3
 8010788:	3302      	adds	r3, #2
 801078a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 801078c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f7ff f8e6 	bl	800f960 <dir_alloc>
 8010794:	4603      	mov	r3, r0
 8010796:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 801079a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d002      	beq.n	80107a8 <dir_register+0x74>
 80107a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80107a6:	e16f      	b.n	8010a88 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107ae:	3b01      	subs	r3, #1
 80107b0:	015b      	lsls	r3, r3, #5
 80107b2:	1ad2      	subs	r2, r2, r3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	79db      	ldrb	r3, [r3, #7]
 80107bc:	f003 0304 	and.w	r3, r3, #4
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d07b      	beq.n	80108bc <dir_register+0x188>
			dp->obj.stat &= ~4;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	79db      	ldrb	r3, [r3, #7]
 80107c8:	f023 0304 	bic.w	r3, r3, #4
 80107cc:	b2da      	uxtb	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7fe fc69 	bl	800f0ac <fill_first_frag>
 80107da:	4603      	mov	r3, r0
 80107dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80107e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <dir_register+0xba>
 80107e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80107ec:	e14c      	b.n	8010a88 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f4:	f04f 32ff 	mov.w	r2, #4294967295
 80107f8:	4619      	mov	r1, r3
 80107fa:	f7fe fc86 	bl	800f10a <fill_last_frag>
 80107fe:	4603      	mov	r3, r0
 8010800:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8010804:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010808:	2b00      	cmp	r3, #0
 801080a:	d002      	beq.n	8010812 <dir_register+0xde>
 801080c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010810:	e13a      	b.n	8010a88 <dir_register+0x354>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d050      	beq.n	80108bc <dir_register+0x188>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	f107 0308 	add.w	r3, r7, #8
 8010820:	4611      	mov	r1, r2
 8010822:	4618      	mov	r0, r3
 8010824:	f7ff fc93 	bl	801014e <load_obj_xdir>
 8010828:	4603      	mov	r3, r0
 801082a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 801082e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010832:	2b00      	cmp	r3, #0
 8010834:	d002      	beq.n	801083c <dir_register+0x108>
 8010836:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801083a:	e125      	b.n	8010a88 <dir_register+0x354>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010842:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010844:	8949      	ldrh	r1, [r1, #10]
 8010846:	4608      	mov	r0, r1
 8010848:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801084a:	8989      	ldrh	r1, [r1, #12]
 801084c:	fb00 f101 	mul.w	r1, r0, r1
 8010850:	2000      	movs	r0, #0
 8010852:	460c      	mov	r4, r1
 8010854:	4605      	mov	r5, r0
 8010856:	eb12 0804 	adds.w	r8, r2, r4
 801085a:	eb43 0905 	adc.w	r9, r3, r5
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8010864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010872:	4608      	mov	r0, r1
 8010874:	f7fd fd4d 	bl	800e312 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8010878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801087a:	695b      	ldr	r3, [r3, #20]
 801087c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010886:	4608      	mov	r0, r1
 8010888:	f7fd fd43 	bl	800e312 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	79da      	ldrb	r2, [r3, #7]
 8010890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010892:	695b      	ldr	r3, [r3, #20]
 8010894:	3321      	adds	r3, #33	; 0x21
 8010896:	f042 0201 	orr.w	r2, r2, #1
 801089a:	b2d2      	uxtb	r2, r2
 801089c:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 801089e:	f107 0308 	add.w	r3, r7, #8
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7ff fc8c 	bl	80101c0 <store_xdir>
 80108a8:	4603      	mov	r3, r0
 80108aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 80108ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d002      	beq.n	80108bc <dir_register+0x188>
 80108b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80108ba:	e0e5      	b.n	8010a88 <dir_register+0x354>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80108bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108be:	695a      	ldr	r2, [r3, #20]
 80108c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108c2:	691b      	ldr	r3, [r3, #16]
 80108c4:	4619      	mov	r1, r3
 80108c6:	4610      	mov	r0, r2
 80108c8:	f7ff fcd5 	bl	8010276 <create_xdir>
		return FR_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	e0db      	b.n	8010a88 <dir_register+0x354>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80108d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80108da:	6810      	ldr	r0, [r2, #0]
 80108dc:	6851      	ldr	r1, [r2, #4]
 80108de:	6892      	ldr	r2, [r2, #8]
 80108e0:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80108e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108e6:	f003 0301 	and.w	r3, r3, #1
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d033      	beq.n	8010956 <dir_register+0x222>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2240      	movs	r2, #64	; 0x40
 80108f2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 80108f6:	2301      	movs	r3, #1
 80108f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80108fa:	e016      	b.n	801092a <dir_register+0x1f6>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010904:	691a      	ldr	r2, [r3, #16]
 8010906:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 801090a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801090c:	f7ff fa00 	bl	800fd10 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff fde7 	bl	80104e4 <dir_find>
 8010916:	4603      	mov	r3, r0
 8010918:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 801091c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010920:	2b00      	cmp	r3, #0
 8010922:	d106      	bne.n	8010932 <dir_register+0x1fe>
		for (n = 1; n < 100; n++) {
 8010924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010926:	3301      	adds	r3, #1
 8010928:	67bb      	str	r3, [r7, #120]	; 0x78
 801092a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801092c:	2b63      	cmp	r3, #99	; 0x63
 801092e:	d9e5      	bls.n	80108fc <dir_register+0x1c8>
 8010930:	e000      	b.n	8010934 <dir_register+0x200>
			if (res != FR_OK) break;
 8010932:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010936:	2b64      	cmp	r3, #100	; 0x64
 8010938:	d101      	bne.n	801093e <dir_register+0x20a>
 801093a:	2307      	movs	r3, #7
 801093c:	e0a4      	b.n	8010a88 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801093e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010942:	2b04      	cmp	r3, #4
 8010944:	d002      	beq.n	801094c <dir_register+0x218>
 8010946:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801094a:	e09d      	b.n	8010a88 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801094c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010956:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801095a:	f003 0302 	and.w	r3, r3, #2
 801095e:	2b00      	cmp	r3, #0
 8010960:	d007      	beq.n	8010972 <dir_register+0x23e>
 8010962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010964:	330c      	adds	r3, #12
 8010966:	4a2f      	ldr	r2, [pc, #188]	; (8010a24 <dir_register+0x2f0>)
 8010968:	fba2 2303 	umull	r2, r3, r2, r3
 801096c:	089b      	lsrs	r3, r3, #2
 801096e:	3301      	adds	r3, #1
 8010970:	e000      	b.n	8010974 <dir_register+0x240>
 8010972:	2301      	movs	r3, #1
 8010974:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8010976:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7fe fff1 	bl	800f960 <dir_alloc>
 801097e:	4603      	mov	r3, r0
 8010980:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8010984:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010988:	2b00      	cmp	r3, #0
 801098a:	d14e      	bne.n	8010a2a <dir_register+0x2f6>
 801098c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801098e:	3b01      	subs	r3, #1
 8010990:	673b      	str	r3, [r7, #112]	; 0x70
 8010992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010994:	2b00      	cmp	r3, #0
 8010996:	d048      	beq.n	8010a2a <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801099c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801099e:	015b      	lsls	r3, r3, #5
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	4619      	mov	r1, r3
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7fe fe92 	bl	800f6ce <dir_sdi>
 80109aa:	4603      	mov	r3, r0
 80109ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80109b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d138      	bne.n	8010a2a <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	3340      	adds	r3, #64	; 0x40
 80109bc:	4618      	mov	r0, r3
 80109be:	f7ff fa4d 	bl	800fe5c <sum_sfn>
 80109c2:	4603      	mov	r3, r0
 80109c4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109cc:	4619      	mov	r1, r3
 80109ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80109d0:	f7fd ff36 	bl	800e840 <move_window>
 80109d4:	4603      	mov	r3, r0
 80109d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 80109da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d122      	bne.n	8010a28 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 80109e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109e4:	6918      	ldr	r0, [r3, #16]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80109ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80109f2:	f7ff f925 	bl	800fc40 <put_lfn>
				fs->wflag = 1;
 80109f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109f8:	2201      	movs	r2, #1
 80109fa:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 80109fc:	2100      	movs	r1, #0
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f7fe fef9 	bl	800f7f6 <dir_next>
 8010a04:	4603      	mov	r3, r0
 8010a06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --n_ent);
 8010a0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d10b      	bne.n	8010a2a <dir_register+0x2f6>
 8010a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a14:	3b01      	subs	r3, #1
 8010a16:	673b      	str	r3, [r7, #112]	; 0x70
 8010a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d1d4      	bne.n	80109c8 <dir_register+0x294>
 8010a1e:	e004      	b.n	8010a2a <dir_register+0x2f6>
 8010a20:	88888889 	.word	0x88888889
 8010a24:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8010a28:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d128      	bne.n	8010a84 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a36:	4619      	mov	r1, r3
 8010a38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010a3a:	f7fd ff01 	bl	800e840 <move_window>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8010a44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d11b      	bne.n	8010a84 <dir_register+0x350>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a50:	2220      	movs	r2, #32
 8010a52:	2100      	movs	r1, #0
 8010a54:	4618      	mov	r0, r3
 8010a56:	f008 f830 	bl	8018aba <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	3340      	adds	r3, #64	; 0x40
 8010a62:	220b      	movs	r2, #11
 8010a64:	4619      	mov	r1, r3
 8010a66:	f008 f861 	bl	8018b2c <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a74:	330c      	adds	r3, #12
 8010a76:	f002 0218 	and.w	r2, r2, #24
 8010a7a:	b2d2      	uxtb	r2, r2
 8010a7c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a80:	2201      	movs	r2, #1
 8010a82:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8010a84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3780      	adds	r7, #128	; 0x80
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010a92:	bf00      	nop

08010a94 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b08a      	sub	sp, #40	; 0x28
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	60bb      	str	r3, [r7, #8]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	691b      	ldr	r3, [r3, #16]
 8010aaa:	613b      	str	r3, [r7, #16]
 8010aac:	2300      	movs	r3, #0
 8010aae:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8010ab0:	f107 0308 	add.w	r3, r7, #8
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fd fcd6 	bl	800e466 <tchar2uni>
 8010aba:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac2:	d101      	bne.n	8010ac8 <create_name+0x34>
 8010ac4:	2306      	movs	r3, #6
 8010ac6:	e1bf      	b.n	8010e48 <create_name+0x3b4>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ace:	d309      	bcc.n	8010ae4 <create_name+0x50>
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	0c19      	lsrs	r1, r3, #16
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	1c5a      	adds	r2, r3, #1
 8010ad8:	617a      	str	r2, [r7, #20]
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	693a      	ldr	r2, [r7, #16]
 8010ade:	4413      	add	r3, r2
 8010ae0:	b28a      	uxth	r2, r1
 8010ae2:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8010ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010aea:	2b1f      	cmp	r3, #31
 8010aec:	d920      	bls.n	8010b30 <create_name+0x9c>
 8010aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010af0:	2b2f      	cmp	r3, #47	; 0x2f
 8010af2:	d01d      	beq.n	8010b30 <create_name+0x9c>
 8010af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010af6:	2b5c      	cmp	r3, #92	; 0x5c
 8010af8:	d01a      	beq.n	8010b30 <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010afc:	2b7f      	cmp	r3, #127	; 0x7f
 8010afe:	d809      	bhi.n	8010b14 <create_name+0x80>
 8010b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b02:	4619      	mov	r1, r3
 8010b04:	4895      	ldr	r0, [pc, #596]	; (8010d5c <create_name+0x2c8>)
 8010b06:	f007 ffe0 	bl	8018aca <strchr>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d001      	beq.n	8010b14 <create_name+0x80>
 8010b10:	2306      	movs	r3, #6
 8010b12:	e199      	b.n	8010e48 <create_name+0x3b4>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	2bfe      	cmp	r3, #254	; 0xfe
 8010b18:	d901      	bls.n	8010b1e <create_name+0x8a>
 8010b1a:	2306      	movs	r3, #6
 8010b1c:	e194      	b.n	8010e48 <create_name+0x3b4>
		lfn[di++] = wc;				/* Store the Unicode character */
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	1c5a      	adds	r2, r3, #1
 8010b22:	617a      	str	r2, [r7, #20]
 8010b24:	005b      	lsls	r3, r3, #1
 8010b26:	693a      	ldr	r2, [r7, #16]
 8010b28:	4413      	add	r3, r2
 8010b2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b2c:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8010b2e:	e7bf      	b.n	8010ab0 <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 8010b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b32:	2b1f      	cmp	r3, #31
 8010b34:	d806      	bhi.n	8010b44 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 8010b36:	2304      	movs	r3, #4
 8010b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010b3c:	e014      	b.n	8010b68 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	3301      	adds	r3, #1
 8010b42:	60bb      	str	r3, [r7, #8]
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	2b2f      	cmp	r3, #47	; 0x2f
 8010b4a:	d0f8      	beq.n	8010b3e <create_name+0xaa>
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2b5c      	cmp	r3, #92	; 0x5c
 8010b52:	d0f4      	beq.n	8010b3e <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 8010b54:	2300      	movs	r3, #0
 8010b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	2b1f      	cmp	r3, #31
 8010b60:	d802      	bhi.n	8010b68 <create_name+0xd4>
 8010b62:	2304      	movs	r3, #4
 8010b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	601a      	str	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8010b6e:	e011      	b.n	8010b94 <create_name+0x100>
		wc = lfn[di - 1];
 8010b70:	697a      	ldr	r2, [r7, #20]
 8010b72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010b76:	4413      	add	r3, r2
 8010b78:	005b      	lsls	r3, r3, #1
 8010b7a:	693a      	ldr	r2, [r7, #16]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8010b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b84:	2b20      	cmp	r3, #32
 8010b86:	d002      	beq.n	8010b8e <create_name+0xfa>
 8010b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8010b8c:	d106      	bne.n	8010b9c <create_name+0x108>
		di--;
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	3b01      	subs	r3, #1
 8010b92:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1ea      	bne.n	8010b70 <create_name+0xdc>
 8010b9a:	e000      	b.n	8010b9e <create_name+0x10a>
		if (wc != ' ' && wc != '.') break;
 8010b9c:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	693a      	ldr	r2, [r7, #16]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d101      	bne.n	8010bb4 <create_name+0x120>
 8010bb0:	2306      	movs	r3, #6
 8010bb2:	e149      	b.n	8010e48 <create_name+0x3b4>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	61bb      	str	r3, [r7, #24]
 8010bb8:	e002      	b.n	8010bc0 <create_name+0x12c>
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	61bb      	str	r3, [r7, #24]
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	005b      	lsls	r3, r3, #1
 8010bc4:	693a      	ldr	r2, [r7, #16]
 8010bc6:	4413      	add	r3, r2
 8010bc8:	881b      	ldrh	r3, [r3, #0]
 8010bca:	2b20      	cmp	r3, #32
 8010bcc:	d0f5      	beq.n	8010bba <create_name+0x126>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d106      	bne.n	8010be2 <create_name+0x14e>
 8010bd4:	69bb      	ldr	r3, [r7, #24]
 8010bd6:	005b      	lsls	r3, r3, #1
 8010bd8:	693a      	ldr	r2, [r7, #16]
 8010bda:	4413      	add	r3, r2
 8010bdc:	881b      	ldrh	r3, [r3, #0]
 8010bde:	2b2e      	cmp	r3, #46	; 0x2e
 8010be0:	d109      	bne.n	8010bf6 <create_name+0x162>
 8010be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010be6:	f043 0303 	orr.w	r3, r3, #3
 8010bea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8010bee:	e002      	b.n	8010bf6 <create_name+0x162>
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	617b      	str	r3, [r7, #20]
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d009      	beq.n	8010c10 <create_name+0x17c>
 8010bfc:	697a      	ldr	r2, [r7, #20]
 8010bfe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010c02:	4413      	add	r3, r2
 8010c04:	005b      	lsls	r3, r3, #1
 8010c06:	693a      	ldr	r2, [r7, #16]
 8010c08:	4413      	add	r3, r2
 8010c0a:	881b      	ldrh	r3, [r3, #0]
 8010c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8010c0e:	d1ef      	bne.n	8010bf0 <create_name+0x15c>

	memset(dp->fn, ' ', 11);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	3340      	adds	r3, #64	; 0x40
 8010c14:	220b      	movs	r2, #11
 8010c16:	2120      	movs	r1, #32
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f007 ff4e 	bl	8018aba <memset>
	i = b = 0; ni = 8;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c24:	2300      	movs	r3, #0
 8010c26:	623b      	str	r3, [r7, #32]
 8010c28:	2308      	movs	r3, #8
 8010c2a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	1c5a      	adds	r2, r3, #1
 8010c30:	61ba      	str	r2, [r7, #24]
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	693a      	ldr	r2, [r7, #16]
 8010c36:	4413      	add	r3, r2
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8010c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f000 80b8 	beq.w	8010db4 <create_name+0x320>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8010c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c46:	2b20      	cmp	r3, #32
 8010c48:	d006      	beq.n	8010c58 <create_name+0x1c4>
 8010c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8010c4e:	d10a      	bne.n	8010c66 <create_name+0x1d2>
 8010c50:	69ba      	ldr	r2, [r7, #24]
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d006      	beq.n	8010c66 <create_name+0x1d2>
			cf |= NS_LOSS | NS_LFN;
 8010c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c5c:	f043 0303 	orr.w	r3, r3, #3
 8010c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8010c64:	e0a5      	b.n	8010db2 <create_name+0x31e>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8010c66:	6a3a      	ldr	r2, [r7, #32]
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d203      	bcs.n	8010c76 <create_name+0x1e2>
 8010c6e:	69ba      	ldr	r2, [r7, #24]
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d124      	bne.n	8010cc0 <create_name+0x22c>
			if (ni == 11) {				/* Name extension overflow? */
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	2b0b      	cmp	r3, #11
 8010c7a:	d106      	bne.n	8010c8a <create_name+0x1f6>
				cf |= NS_LOSS | NS_LFN;
 8010c7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c80:	f043 0303 	orr.w	r3, r3, #3
 8010c84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8010c88:	e097      	b.n	8010dba <create_name+0x326>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8010c8a:	69ba      	ldr	r2, [r7, #24]
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d005      	beq.n	8010c9e <create_name+0x20a>
 8010c92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c96:	f043 0303 	orr.w	r3, r3, #3
 8010c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 8010c9e:	69ba      	ldr	r2, [r7, #24]
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	f200 8088 	bhi.w	8010db8 <create_name+0x324>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	61bb      	str	r3, [r7, #24]
 8010cac:	2308      	movs	r3, #8
 8010cae:	623b      	str	r3, [r7, #32]
 8010cb0:	230b      	movs	r3, #11
 8010cb2:	61fb      	str	r3, [r7, #28]
 8010cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 8010cbe:	e078      	b.n	8010db2 <create_name+0x31e>
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 8010cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8010cc4:	d918      	bls.n	8010cf8 <create_name+0x264>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8010cc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010cca:	f043 0302 	orr.w	r3, r3, #2
 8010cce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8010cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cd4:	f240 3152 	movw	r1, #850	; 0x352
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f001 fc33 	bl	8012544 <ff_uni2oem>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8010ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d005      	beq.n	8010cf8 <create_name+0x264>
 8010cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cf2:	4a1b      	ldr	r2, [pc, #108]	; (8010d60 <create_name+0x2cc>)
 8010cf4:	5cd3      	ldrb	r3, [r2, r3]
 8010cf6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8010cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cfa:	2bff      	cmp	r3, #255	; 0xff
 8010cfc:	d91a      	bls.n	8010d34 <create_name+0x2a0>
			if (i >= ni - 1) {			/* Field overflow? */
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	3b01      	subs	r3, #1
 8010d02:	6a3a      	ldr	r2, [r7, #32]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d308      	bcc.n	8010d1a <create_name+0x286>
				cf |= NS_LOSS | NS_LFN;
 8010d08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d0c:	f043 0303 	orr.w	r3, r3, #3
 8010d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	623b      	str	r3, [r7, #32]
 8010d18:	e04b      	b.n	8010db2 <create_name+0x31e>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8010d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d1c:	0a1b      	lsrs	r3, r3, #8
 8010d1e:	b299      	uxth	r1, r3
 8010d20:	6a3b      	ldr	r3, [r7, #32]
 8010d22:	1c5a      	adds	r2, r3, #1
 8010d24:	623a      	str	r2, [r7, #32]
 8010d26:	b2c9      	uxtb	r1, r1
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	460a      	mov	r2, r1
 8010d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d32:	e034      	b.n	8010d9e <create_name+0x30a>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 8010d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d007      	beq.n	8010d4a <create_name+0x2b6>
 8010d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	4809      	ldr	r0, [pc, #36]	; (8010d64 <create_name+0x2d0>)
 8010d40:	f007 fec3 	bl	8018aca <strchr>
 8010d44:	4603      	mov	r3, r0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d00e      	beq.n	8010d68 <create_name+0x2d4>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010d4a:	235f      	movs	r3, #95	; 0x5f
 8010d4c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d52:	f043 0303 	orr.w	r3, r3, #3
 8010d56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010d5a:	e020      	b.n	8010d9e <create_name+0x30a>
 8010d5c:	08018f20 	.word	0x08018f20
 8010d60:	0801bf54 	.word	0x0801bf54
 8010d64:	08018f2c 	.word	0x08018f2c
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8010d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d6a:	2b40      	cmp	r3, #64	; 0x40
 8010d6c:	d908      	bls.n	8010d80 <create_name+0x2ec>
 8010d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d70:	2b5a      	cmp	r3, #90	; 0x5a
 8010d72:	d805      	bhi.n	8010d80 <create_name+0x2ec>
					b |= 2;
 8010d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d78:	f043 0302 	orr.w	r3, r3, #2
 8010d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8010d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d82:	2b60      	cmp	r3, #96	; 0x60
 8010d84:	d90b      	bls.n	8010d9e <create_name+0x30a>
 8010d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d88:	2b7a      	cmp	r3, #122	; 0x7a
 8010d8a:	d808      	bhi.n	8010d9e <create_name+0x30a>
					b |= 1; wc -= 0x20;
 8010d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d90:	f043 0301 	orr.w	r3, r3, #1
 8010d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d9a:	3b20      	subs	r3, #32
 8010d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8010d9e:	6a3b      	ldr	r3, [r7, #32]
 8010da0:	1c5a      	adds	r2, r3, #1
 8010da2:	623a      	str	r2, [r7, #32]
 8010da4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010da6:	b2d1      	uxtb	r1, r2
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	4413      	add	r3, r2
 8010dac:	460a      	mov	r2, r1
 8010dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
 8010db2:	e73b      	b.n	8010c2c <create_name+0x198>
		if (wc == 0) break;				/* Break on end of the LFN */
 8010db4:	bf00      	nop
 8010db6:	e000      	b.n	8010dba <create_name+0x326>
			if (si > di) break;						/* No name extension? */
 8010db8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dc0:	2be5      	cmp	r3, #229	; 0xe5
 8010dc2:	d103      	bne.n	8010dcc <create_name+0x338>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2205      	movs	r2, #5
 8010dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	2b08      	cmp	r3, #8
 8010dd0:	d104      	bne.n	8010ddc <create_name+0x348>
 8010dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dd6:	009b      	lsls	r3, r3, #2
 8010dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8010ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010de0:	f003 030c 	and.w	r3, r3, #12
 8010de4:	2b0c      	cmp	r3, #12
 8010de6:	d005      	beq.n	8010df4 <create_name+0x360>
 8010de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dec:	f003 0303 	and.w	r3, r3, #3
 8010df0:	2b03      	cmp	r3, #3
 8010df2:	d105      	bne.n	8010e00 <create_name+0x36c>
 8010df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010df8:	f043 0302 	orr.w	r3, r3, #2
 8010dfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010e00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e04:	f003 0302 	and.w	r3, r3, #2
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d117      	bne.n	8010e3c <create_name+0x3a8>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8010e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e10:	f003 0301 	and.w	r3, r3, #1
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d005      	beq.n	8010e24 <create_name+0x390>
 8010e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e1c:	f043 0310 	orr.w	r3, r3, #16
 8010e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8010e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e28:	f003 0304 	and.w	r3, r3, #4
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d005      	beq.n	8010e3c <create_name+0x3a8>
 8010e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e34:	f043 0308 	orr.w	r3, r3, #8
 8010e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010e42:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8010e46:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3728      	adds	r7, #40	; 0x28
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b086      	sub	sp, #24
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8010e60:	e002      	b.n	8010e68 <follow_path+0x18>
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	3301      	adds	r3, #1
 8010e66:	603b      	str	r3, [r7, #0]
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8010e6e:	d0f8      	beq.n	8010e62 <follow_path+0x12>
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	2b5c      	cmp	r3, #92	; 0x5c
 8010e76:	d0f4      	beq.n	8010e62 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2200      	movs	r2, #0
 8010e82:	61da      	str	r2, [r3, #28]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	2b1f      	cmp	r3, #31
 8010e8a:	d80a      	bhi.n	8010ea2 <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2280      	movs	r2, #128	; 0x80
 8010e90:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8010e94:	2100      	movs	r1, #0
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f7fe fc19 	bl	800f6ce <dir_sdi>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	75fb      	strb	r3, [r7, #23]
 8010ea0:	e065      	b.n	8010f6e <follow_path+0x11e>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ea2:	463b      	mov	r3, r7
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7ff fdf4 	bl	8010a94 <create_name>
 8010eac:	4603      	mov	r3, r0
 8010eae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010eb0:	7dfb      	ldrb	r3, [r7, #23]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d156      	bne.n	8010f64 <follow_path+0x114>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7ff fb14 	bl	80104e4 <dir_find>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8010ec6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8010ec8:	7dfb      	ldrb	r3, [r7, #23]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00a      	beq.n	8010ee4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010ece:	7dfb      	ldrb	r3, [r7, #23]
 8010ed0:	2b04      	cmp	r3, #4
 8010ed2:	d149      	bne.n	8010f68 <follow_path+0x118>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
 8010ed6:	f003 0304 	and.w	r3, r3, #4
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d144      	bne.n	8010f68 <follow_path+0x118>
 8010ede:	2305      	movs	r3, #5
 8010ee0:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010ee2:	e041      	b.n	8010f68 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8010ee4:	7bfb      	ldrb	r3, [r7, #15]
 8010ee6:	f003 0304 	and.w	r3, r3, #4
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d13e      	bne.n	8010f6c <follow_path+0x11c>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	799b      	ldrb	r3, [r3, #6]
 8010ef2:	f003 0310 	and.w	r3, r3, #16
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d102      	bne.n	8010f00 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8010efa:	2305      	movs	r3, #5
 8010efc:	75fb      	strb	r3, [r7, #23]
 8010efe:	e036      	b.n	8010f6e <follow_path+0x11e>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b04      	cmp	r3, #4
 8010f06:	d118      	bne.n	8010f3a <follow_path+0xea>
				dp->obj.c_scl = dp->obj.sclust;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	689a      	ldr	r2, [r3, #8]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010f16:	4613      	mov	r3, r2
 8010f18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010f1c:	687a      	ldr	r2, [r7, #4]
 8010f1e:	79d2      	ldrb	r2, [r2, #7]
 8010f20:	431a      	orrs	r2, r3
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	625a      	str	r2, [r3, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	4619      	mov	r1, r3
 8010f32:	6938      	ldr	r0, [r7, #16]
 8010f34:	f7ff f8e2 	bl	80100fc <init_alloc_info>
 8010f38:	e7b3      	b.n	8010ea2 <follow_path+0x52>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	8992      	ldrh	r2, [r2, #12]
 8010f48:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f4c:	fb00 f202 	mul.w	r2, r0, r2
 8010f50:	1a9b      	subs	r3, r3, r2
 8010f52:	440b      	add	r3, r1
 8010f54:	4619      	mov	r1, r3
 8010f56:	6938      	ldr	r0, [r7, #16]
 8010f58:	f7fe fd5e 	bl	800fa18 <ld_clust>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010f62:	e79e      	b.n	8010ea2 <follow_path+0x52>
			if (res != FR_OK) break;
 8010f64:	bf00      	nop
 8010f66:	e002      	b.n	8010f6e <follow_path+0x11e>
				break;
 8010f68:	bf00      	nop
 8010f6a:	e000      	b.n	8010f6e <follow_path+0x11e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8010f6c:	bf00      	nop
			}
		}
	}

	return res;
 8010f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3718      	adds	r7, #24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b089      	sub	sp, #36	; 0x24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8010f80:	f04f 33ff 	mov.w	r3, #4294967295
 8010f84:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	613b      	str	r3, [r7, #16]
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d101      	bne.n	8010f9a <get_ldnumber+0x22>
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	e02d      	b.n	8010ff6 <get_ldnumber+0x7e>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	1c5a      	adds	r2, r3, #1
 8010f9e:	61fa      	str	r2, [r7, #28]
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
 8010fa6:	2b1f      	cmp	r3, #31
 8010fa8:	d902      	bls.n	8010fb0 <get_ldnumber+0x38>
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	2b3a      	cmp	r3, #58	; 0x3a
 8010fae:	d1f4      	bne.n	8010f9a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8010fb0:	7bfb      	ldrb	r3, [r7, #15]
 8010fb2:	2b3a      	cmp	r3, #58	; 0x3a
 8010fb4:	d11c      	bne.n	8010ff0 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	2b2f      	cmp	r3, #47	; 0x2f
 8010fc0:	d90c      	bls.n	8010fdc <get_ldnumber+0x64>
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	2b39      	cmp	r3, #57	; 0x39
 8010fc8:	d808      	bhi.n	8010fdc <get_ldnumber+0x64>
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	3302      	adds	r3, #2
 8010fce:	69fa      	ldr	r2, [r7, #28]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d103      	bne.n	8010fdc <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	3b30      	subs	r3, #48	; 0x30
 8010fda:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	dc04      	bgt.n	8010fec <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	69fa      	ldr	r2, [r7, #28]
 8010fea:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	e002      	b.n	8010ff6 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8010ff4:	697b      	ldr	r3, [r7, #20]
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3724      	adds	r7, #36	; 0x24
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr
	...

08011004 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2200      	movs	r2, #0
 8011012:	711a      	strb	r2, [r3, #4]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f04f 32ff 	mov.w	r2, #4294967295
 801101a:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 801101c:	6839      	ldr	r1, [r7, #0]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7fd fc0e 	bl	800e840 <move_window>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d001      	beq.n	801102e <check_fs+0x2a>
 801102a:	2304      	movs	r3, #4
 801102c:	e099      	b.n	8011162 <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	3340      	adds	r3, #64	; 0x40
 8011032:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011036:	4618      	mov	r0, r3
 8011038:	f7fd f80e 	bl	800e058 <ld_word>
 801103c:	4603      	mov	r3, r0
 801103e:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8011040:	89fb      	ldrh	r3, [r7, #14]
 8011042:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011046:	4293      	cmp	r3, r2
 8011048:	d10b      	bne.n	8011062 <check_fs+0x5e>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	3340      	adds	r3, #64	; 0x40
 801104e:	220b      	movs	r2, #11
 8011050:	4946      	ldr	r1, [pc, #280]	; (801116c <check_fs+0x168>)
 8011052:	4618      	mov	r0, r3
 8011054:	f007 fd07 	bl	8018a66 <memcmp>
 8011058:	4603      	mov	r3, r0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d101      	bne.n	8011062 <check_fs+0x5e>
 801105e:	2301      	movs	r3, #1
 8011060:	e07f      	b.n	8011162 <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011068:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 801106a:	7b7b      	ldrb	r3, [r7, #13]
 801106c:	2beb      	cmp	r3, #235	; 0xeb
 801106e:	d005      	beq.n	801107c <check_fs+0x78>
 8011070:	7b7b      	ldrb	r3, [r7, #13]
 8011072:	2be9      	cmp	r3, #233	; 0xe9
 8011074:	d002      	beq.n	801107c <check_fs+0x78>
 8011076:	7b7b      	ldrb	r3, [r7, #13]
 8011078:	2be8      	cmp	r3, #232	; 0xe8
 801107a:	d16a      	bne.n	8011152 <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 801107c:	89fb      	ldrh	r3, [r7, #14]
 801107e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011082:	4293      	cmp	r3, r2
 8011084:	d10c      	bne.n	80110a0 <check_fs+0x9c>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	3340      	adds	r3, #64	; 0x40
 801108a:	3352      	adds	r3, #82	; 0x52
 801108c:	2208      	movs	r2, #8
 801108e:	4938      	ldr	r1, [pc, #224]	; (8011170 <check_fs+0x16c>)
 8011090:	4618      	mov	r0, r3
 8011092:	f007 fce8 	bl	8018a66 <memcmp>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d101      	bne.n	80110a0 <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 801109c:	2300      	movs	r3, #0
 801109e:	e060      	b.n	8011162 <check_fs+0x15e>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	3340      	adds	r3, #64	; 0x40
 80110a4:	330b      	adds	r3, #11
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fc ffd6 	bl	800e058 <ld_word>
 80110ac:	4603      	mov	r3, r0
 80110ae:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80110b6:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80110b8:	897a      	ldrh	r2, [r7, #10]
 80110ba:	897b      	ldrh	r3, [r7, #10]
 80110bc:	3b01      	subs	r3, #1
 80110be:	4013      	ands	r3, r2
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d146      	bne.n	8011152 <check_fs+0x14e>
 80110c4:	897b      	ldrh	r3, [r7, #10]
 80110c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110ca:	d342      	bcc.n	8011152 <check_fs+0x14e>
 80110cc:	897b      	ldrh	r3, [r7, #10]
 80110ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110d2:	d83e      	bhi.n	8011152 <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 80110d4:	7b7b      	ldrb	r3, [r7, #13]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d03b      	beq.n	8011152 <check_fs+0x14e>
 80110da:	7b7a      	ldrb	r2, [r7, #13]
 80110dc:	7b7b      	ldrb	r3, [r7, #13]
 80110de:	3b01      	subs	r3, #1
 80110e0:	4013      	ands	r3, r2
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d135      	bne.n	8011152 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	3340      	adds	r3, #64	; 0x40
 80110ea:	330e      	adds	r3, #14
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7fc ffb3 	bl	800e058 <ld_word>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d02c      	beq.n	8011152 <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80110fe:	3b01      	subs	r3, #1
 8011100:	2b01      	cmp	r3, #1
 8011102:	d826      	bhi.n	8011152 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	3340      	adds	r3, #64	; 0x40
 8011108:	3311      	adds	r3, #17
 801110a:	4618      	mov	r0, r3
 801110c:	f7fc ffa4 	bl	800e058 <ld_word>
 8011110:	4603      	mov	r3, r0
 8011112:	2b00      	cmp	r3, #0
 8011114:	d01d      	beq.n	8011152 <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	3340      	adds	r3, #64	; 0x40
 801111a:	3313      	adds	r3, #19
 801111c:	4618      	mov	r0, r3
 801111e:	f7fc ff9b 	bl	800e058 <ld_word>
 8011122:	4603      	mov	r3, r0
 8011124:	2b7f      	cmp	r3, #127	; 0x7f
 8011126:	d809      	bhi.n	801113c <check_fs+0x138>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	3340      	adds	r3, #64	; 0x40
 801112c:	3320      	adds	r3, #32
 801112e:	4618      	mov	r0, r3
 8011130:	f7fc ffaa 	bl	800e088 <ld_dword>
 8011134:	4603      	mov	r3, r0
 8011136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801113a:	d30a      	bcc.n	8011152 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	3340      	adds	r3, #64	; 0x40
 8011140:	3316      	adds	r3, #22
 8011142:	4618      	mov	r0, r3
 8011144:	f7fc ff88 	bl	800e058 <ld_word>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d001      	beq.n	8011152 <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 801114e:	2300      	movs	r3, #0
 8011150:	e007      	b.n	8011162 <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8011152:	89fb      	ldrh	r3, [r7, #14]
 8011154:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011158:	4293      	cmp	r3, r2
 801115a:	d101      	bne.n	8011160 <check_fs+0x15c>
 801115c:	2302      	movs	r3, #2
 801115e:	e000      	b.n	8011162 <check_fs+0x15e>
 8011160:	2303      	movs	r3, #3
}
 8011162:	4618      	mov	r0, r3
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	08018f34 	.word	0x08018f34
 8011170:	08018f40 	.word	0x08018f40

08011174 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 801117e:	2100      	movs	r1, #0
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7ff ff3f 	bl	8011004 <check_fs>
 8011186:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8011188:	69bb      	ldr	r3, [r7, #24]
 801118a:	2b02      	cmp	r3, #2
 801118c:	d007      	beq.n	801119e <find_volume+0x2a>
 801118e:	69bb      	ldr	r3, [r7, #24]
 8011190:	2b02      	cmp	r3, #2
 8011192:	d802      	bhi.n	801119a <find_volume+0x26>
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d101      	bne.n	801119e <find_volume+0x2a>
 801119a:	69bb      	ldr	r3, [r7, #24]
 801119c:	e045      	b.n	801122a <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 801119e:	2300      	movs	r3, #0
 80111a0:	61fb      	str	r3, [r7, #28]
 80111a2:	e014      	b.n	80111ce <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	011b      	lsls	r3, r3, #4
 80111ae:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80111b2:	4413      	add	r3, r2
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fc ff67 	bl	800e088 <ld_dword>
 80111ba:	4602      	mov	r2, r0
 80111bc:	69fb      	ldr	r3, [r7, #28]
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	3320      	adds	r3, #32
 80111c2:	443b      	add	r3, r7
 80111c4:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	3301      	adds	r3, #1
 80111cc:	61fb      	str	r3, [r7, #28]
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	2b03      	cmp	r3, #3
 80111d2:	d9e7      	bls.n	80111a4 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d002      	beq.n	80111e0 <find_volume+0x6c>
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	3b01      	subs	r3, #1
 80111de:	e000      	b.n	80111e2 <find_volume+0x6e>
 80111e0:	2300      	movs	r3, #0
 80111e2:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	3320      	adds	r3, #32
 80111ea:	443b      	add	r3, r7
 80111ec:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00b      	beq.n	801120c <find_volume+0x98>
 80111f4:	69fb      	ldr	r3, [r7, #28]
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	3320      	adds	r3, #32
 80111fa:	443b      	add	r3, r7
 80111fc:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8011200:	4619      	mov	r1, r3
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff fefe 	bl	8011004 <check_fs>
 8011208:	4603      	mov	r3, r0
 801120a:	e000      	b.n	801120e <find_volume+0x9a>
 801120c:	2303      	movs	r3, #3
 801120e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d108      	bne.n	8011228 <find_volume+0xb4>
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d905      	bls.n	8011228 <find_volume+0xb4>
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	3301      	adds	r3, #1
 8011220:	61fb      	str	r3, [r7, #28]
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	2b03      	cmp	r3, #3
 8011226:	d9dd      	bls.n	80111e4 <find_volume+0x70>
	return fmt;
 8011228:	69bb      	ldr	r3, [r7, #24]
}
 801122a:	4618      	mov	r0, r3
 801122c:	3720      	adds	r7, #32
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
	...

08011234 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8011234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011238:	b09a      	sub	sp, #104	; 0x68
 801123a:	af00      	add	r7, sp, #0
 801123c:	61f8      	str	r0, [r7, #28]
 801123e:	61b9      	str	r1, [r7, #24]
 8011240:	4613      	mov	r3, r2
 8011242:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8011244:	69bb      	ldr	r3, [r7, #24]
 8011246:	2200      	movs	r2, #0
 8011248:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801124a:	69f8      	ldr	r0, [r7, #28]
 801124c:	f7ff fe94 	bl	8010f78 <get_ldnumber>
 8011250:	64b8      	str	r0, [r7, #72]	; 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 8011252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011254:	2b00      	cmp	r3, #0
 8011256:	da01      	bge.n	801125c <mount_volume+0x28>
 8011258:	230b      	movs	r3, #11
 801125a:	e36f      	b.n	801193c <mount_volume+0x708>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 801125c:	4aa6      	ldr	r2, [pc, #664]	; (80114f8 <mount_volume+0x2c4>)
 801125e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011264:	647b      	str	r3, [r7, #68]	; 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8011266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011268:	2b00      	cmp	r3, #0
 801126a:	d101      	bne.n	8011270 <mount_volume+0x3c>
 801126c:	230c      	movs	r3, #12
 801126e:	e365      	b.n	801193c <mount_volume+0x708>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011274:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011276:	7dfb      	ldrb	r3, [r7, #23]
 8011278:	f023 0301 	bic.w	r3, r3, #1
 801127c:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 801127e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d01a      	beq.n	80112bc <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
 8011286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011288:	785b      	ldrb	r3, [r3, #1]
 801128a:	4618      	mov	r0, r3
 801128c:	f7fc fd18 	bl	800dcc0 <disk_status>
 8011290:	4603      	mov	r3, r0
 8011292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011296:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801129a:	f003 0301 	and.w	r3, r3, #1
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d10c      	bne.n	80112bc <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80112a2:	7dfb      	ldrb	r3, [r7, #23]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d007      	beq.n	80112b8 <mount_volume+0x84>
 80112a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112ac:	f003 0304 	and.w	r3, r3, #4
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d001      	beq.n	80112b8 <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
 80112b4:	230a      	movs	r3, #10
 80112b6:	e341      	b.n	801193c <mount_volume+0x708>
			}
			return FR_OK;				/* The filesystem object is already valid */
 80112b8:	2300      	movs	r3, #0
 80112ba:	e33f      	b.n	801193c <mount_volume+0x708>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 80112bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112be:	2200      	movs	r2, #0
 80112c0:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 80112c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112c4:	785b      	ldrb	r3, [r3, #1]
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fc fd14 	bl	800dcf4 <disk_initialize>
 80112cc:	4603      	mov	r3, r0
 80112ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80112d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112d6:	f003 0301 	and.w	r3, r3, #1
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d001      	beq.n	80112e2 <mount_volume+0xae>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80112de:	2303      	movs	r3, #3
 80112e0:	e32c      	b.n	801193c <mount_volume+0x708>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80112e2:	7dfb      	ldrb	r3, [r7, #23]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d007      	beq.n	80112f8 <mount_volume+0xc4>
 80112e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112ec:	f003 0304 	and.w	r3, r3, #4
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <mount_volume+0xc4>
		return FR_WRITE_PROTECTED;
 80112f4:	230a      	movs	r3, #10
 80112f6:	e321      	b.n	801193c <mount_volume+0x708>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80112f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112fa:	7858      	ldrb	r0, [r3, #1]
 80112fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112fe:	330c      	adds	r3, #12
 8011300:	461a      	mov	r2, r3
 8011302:	2102      	movs	r1, #2
 8011304:	f7fc fd5c 	bl	800ddc0 <disk_ioctl>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <mount_volume+0xde>
 801130e:	2301      	movs	r3, #1
 8011310:	e314      	b.n	801193c <mount_volume+0x708>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011314:	899b      	ldrh	r3, [r3, #12]
 8011316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801131a:	d80d      	bhi.n	8011338 <mount_volume+0x104>
 801131c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801131e:	899b      	ldrh	r3, [r3, #12]
 8011320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011324:	d308      	bcc.n	8011338 <mount_volume+0x104>
 8011326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011328:	899b      	ldrh	r3, [r3, #12]
 801132a:	461a      	mov	r2, r3
 801132c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801132e:	899b      	ldrh	r3, [r3, #12]
 8011330:	3b01      	subs	r3, #1
 8011332:	4013      	ands	r3, r2
 8011334:	2b00      	cmp	r3, #0
 8011336:	d001      	beq.n	801133c <mount_volume+0x108>
 8011338:	2301      	movs	r3, #1
 801133a:	e2ff      	b.n	801193c <mount_volume+0x708>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 801133c:	2100      	movs	r1, #0
 801133e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011340:	f7ff ff18 	bl	8011174 <find_volume>
 8011344:	65b8      	str	r0, [r7, #88]	; 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8011346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011348:	2b04      	cmp	r3, #4
 801134a:	d101      	bne.n	8011350 <mount_volume+0x11c>
 801134c:	2301      	movs	r3, #1
 801134e:	e2f5      	b.n	801193c <mount_volume+0x708>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011352:	2b01      	cmp	r3, #1
 8011354:	d901      	bls.n	801135a <mount_volume+0x126>
 8011356:	230d      	movs	r3, #13
 8011358:	e2f0      	b.n	801193c <mount_volume+0x708>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 801135a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801135e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 8011360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011362:	2b01      	cmp	r3, #1
 8011364:	f040 8155 	bne.w	8011612 <mount_volume+0x3de>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8011368:	230b      	movs	r3, #11
 801136a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801136c:	e002      	b.n	8011374 <mount_volume+0x140>
 801136e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011370:	3301      	adds	r3, #1
 8011372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011376:	2b3f      	cmp	r3, #63	; 0x3f
 8011378:	d806      	bhi.n	8011388 <mount_volume+0x154>
 801137a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801137c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137e:	4413      	add	r3, r2
 8011380:	3340      	adds	r3, #64	; 0x40
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d0f2      	beq.n	801136e <mount_volume+0x13a>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8011388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801138a:	2b3f      	cmp	r3, #63	; 0x3f
 801138c:	d801      	bhi.n	8011392 <mount_volume+0x15e>
 801138e:	230d      	movs	r3, #13
 8011390:	e2d4      	b.n	801193c <mount_volume+0x708>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 8011392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011394:	3340      	adds	r3, #64	; 0x40
 8011396:	3368      	adds	r3, #104	; 0x68
 8011398:	4618      	mov	r0, r3
 801139a:	f7fc fe5d 	bl	800e058 <ld_word>
 801139e:	4603      	mov	r3, r0
 80113a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113a4:	d001      	beq.n	80113aa <mount_volume+0x176>
 80113a6:	230d      	movs	r3, #13
 80113a8:	e2c8      	b.n	801193c <mount_volume+0x708>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80113aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80113b0:	461a      	mov	r2, r3
 80113b2:	2301      	movs	r3, #1
 80113b4:	4093      	lsls	r3, r2
 80113b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113b8:	8992      	ldrh	r2, [r2, #12]
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d001      	beq.n	80113c2 <mount_volume+0x18e>
			return FR_NO_FILESYSTEM;
 80113be:	230d      	movs	r3, #13
 80113c0:	e2bc      	b.n	801193c <mount_volume+0x708>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 80113c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113c4:	3340      	adds	r3, #64	; 0x40
 80113c6:	3348      	adds	r3, #72	; 0x48
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fc fe80 	bl	800e0ce <ld_qword>
 80113ce:	4602      	mov	r2, r0
 80113d0:	460b      	mov	r3, r1
 80113d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80113d4:	2000      	movs	r0, #0
 80113d6:	60b9      	str	r1, [r7, #8]
 80113d8:	60f8      	str	r0, [r7, #12]
 80113da:	68b9      	ldr	r1, [r7, #8]
 80113dc:	1851      	adds	r1, r2, r1
 80113de:	6039      	str	r1, [r7, #0]
 80113e0:	68f9      	ldr	r1, [r7, #12]
 80113e2:	eb43 0101 	adc.w	r1, r3, r1
 80113e6:	6079      	str	r1, [r7, #4]
 80113e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 80113f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d301      	bcc.n	80113fc <mount_volume+0x1c8>
 80113f8:	230d      	movs	r3, #13
 80113fa:	e29f      	b.n	801193c <mount_volume+0x708>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80113fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113fe:	3340      	adds	r3, #64	; 0x40
 8011400:	3354      	adds	r3, #84	; 0x54
 8011402:	4618      	mov	r0, r3
 8011404:	f7fc fe40 	bl	800e088 <ld_dword>
 8011408:	4602      	mov	r2, r0
 801140a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801140c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 801140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011410:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8011414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011416:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8011418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801141a:	78db      	ldrb	r3, [r3, #3]
 801141c:	2b01      	cmp	r3, #1
 801141e:	d001      	beq.n	8011424 <mount_volume+0x1f0>
 8011420:	230d      	movs	r3, #13
 8011422:	e28b      	b.n	801193c <mount_volume+0x708>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8011424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011426:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 801142a:	461a      	mov	r2, r3
 801142c:	2301      	movs	r3, #1
 801142e:	4093      	lsls	r3, r2
 8011430:	b29a      	uxth	r2, r3
 8011432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011434:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 8011436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011438:	895b      	ldrh	r3, [r3, #10]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d101      	bne.n	8011442 <mount_volume+0x20e>
 801143e:	230d      	movs	r3, #13
 8011440:	e27c      	b.n	801193c <mount_volume+0x708>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8011442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011444:	3340      	adds	r3, #64	; 0x40
 8011446:	335c      	adds	r3, #92	; 0x5c
 8011448:	4618      	mov	r0, r3
 801144a:	f7fc fe1d 	bl	800e088 <ld_dword>
 801144e:	6338      	str	r0, [r7, #48]	; 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8011450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011452:	4a2a      	ldr	r2, [pc, #168]	; (80114fc <mount_volume+0x2c8>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d901      	bls.n	801145c <mount_volume+0x228>
 8011458:	230d      	movs	r3, #13
 801145a:	e26f      	b.n	801193c <mount_volume+0x708>
		fs->n_fatent = nclst + 2;
 801145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145e:	1c9a      	adds	r2, r3, #2
 8011460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011462:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8011464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011468:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801146a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801146c:	3340      	adds	r3, #64	; 0x40
 801146e:	3358      	adds	r3, #88	; 0x58
 8011470:	4618      	mov	r0, r3
 8011472:	f7fc fe09 	bl	800e088 <ld_dword>
 8011476:	4602      	mov	r2, r0
 8011478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801147a:	441a      	add	r2, r3
 801147c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801147e:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8011480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011482:	3340      	adds	r3, #64	; 0x40
 8011484:	3350      	adds	r3, #80	; 0x50
 8011486:	4618      	mov	r0, r3
 8011488:	f7fc fdfe 	bl	800e088 <ld_dword>
 801148c:	4602      	mov	r2, r0
 801148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011490:	441a      	add	r2, r3
 8011492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011494:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8011496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801149a:	2200      	movs	r2, #0
 801149c:	469a      	mov	sl, r3
 801149e:	4693      	mov	fp, r2
 80114a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114a2:	895b      	ldrh	r3, [r3, #10]
 80114a4:	461a      	mov	r2, r3
 80114a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a8:	fb02 f303 	mul.w	r3, r2, r3
 80114ac:	2200      	movs	r2, #0
 80114ae:	4698      	mov	r8, r3
 80114b0:	4691      	mov	r9, r2
 80114b2:	eb1a 0408 	adds.w	r4, sl, r8
 80114b6:	eb4b 0509 	adc.w	r5, fp, r9
 80114ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80114be:	42a2      	cmp	r2, r4
 80114c0:	41ab      	sbcs	r3, r5
 80114c2:	d201      	bcs.n	80114c8 <mount_volume+0x294>
 80114c4:	230d      	movs	r3, #13
 80114c6:	e239      	b.n	801193c <mount_volume+0x708>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80114c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114ca:	3340      	adds	r3, #64	; 0x40
 80114cc:	3360      	adds	r3, #96	; 0x60
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fc fdda 	bl	800e088 <ld_dword>
 80114d4:	4602      	mov	r2, r0
 80114d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114d8:	631a      	str	r2, [r3, #48]	; 0x30

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 80114da:	2300      	movs	r3, #0
 80114dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114e0:	657b      	str	r3, [r7, #84]	; 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 80114e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d120      	bne.n	801152a <mount_volume+0x2f6>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 80114e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114ea:	895b      	ldrh	r3, [r3, #10]
 80114ec:	461a      	mov	r2, r3
 80114ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d305      	bcc.n	8011500 <mount_volume+0x2cc>
 80114f4:	230d      	movs	r3, #13
 80114f6:	e221      	b.n	801193c <mount_volume+0x708>
 80114f8:	24000530 	.word	0x24000530
 80114fc:	7ffffffd 	.word	0x7ffffffd
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8011500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011504:	4619      	mov	r1, r3
 8011506:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011508:	f7fd fa36 	bl	800e978 <clst2sect>
 801150c:	4602      	mov	r2, r0
 801150e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011510:	4413      	add	r3, r2
 8011512:	4619      	mov	r1, r3
 8011514:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011516:	f7fd f993 	bl	800e840 <move_window>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <mount_volume+0x2f0>
 8011520:	2301      	movs	r3, #1
 8011522:	e20b      	b.n	801193c <mount_volume+0x708>
				so++;
 8011524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011526:	3301      	adds	r3, #1
 8011528:	657b      	str	r3, [r7, #84]	; 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 801152a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801152c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801152e:	4413      	add	r3, r2
 8011530:	3340      	adds	r3, #64	; 0x40
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	2b81      	cmp	r3, #129	; 0x81
 8011536:	d00a      	beq.n	801154e <mount_volume+0x31a>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8011538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801153a:	3320      	adds	r3, #32
 801153c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801153e:	8992      	ldrh	r2, [r2, #12]
 8011540:	fbb3 f1f2 	udiv	r1, r3, r2
 8011544:	fb01 f202 	mul.w	r2, r1, r2
 8011548:	1a9b      	subs	r3, r3, r2
 801154a:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (i == 0) {
 801154c:	e7c9      	b.n	80114e2 <mount_volume+0x2ae>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 801154e:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8011550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011552:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8011556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011558:	3314      	adds	r3, #20
 801155a:	4413      	add	r3, r2
 801155c:	4618      	mov	r0, r3
 801155e:	f7fc fd93 	bl	800e088 <ld_dword>
 8011562:	6538      	str	r0, [r7, #80]	; 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8011564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011566:	2b01      	cmp	r3, #1
 8011568:	d904      	bls.n	8011574 <mount_volume+0x340>
 801156a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801156c:	6a1b      	ldr	r3, [r3, #32]
 801156e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011570:	429a      	cmp	r2, r3
 8011572:	d301      	bcc.n	8011578 <mount_volume+0x344>
 8011574:	230d      	movs	r3, #13
 8011576:	e1e1      	b.n	801193c <mount_volume+0x708>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 8011578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157e:	895b      	ldrh	r3, [r3, #10]
 8011580:	4619      	mov	r1, r3
 8011582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011584:	3b02      	subs	r3, #2
 8011586:	fb01 f303 	mul.w	r3, r1, r3
 801158a:	441a      	add	r2, r3
 801158c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801158e:	639a      	str	r2, [r3, #56]	; 0x38
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8011590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011596:	899b      	ldrh	r3, [r3, #12]
 8011598:	089b      	lsrs	r3, r3, #2
 801159a:	b29b      	uxth	r3, r3
 801159c:	4619      	mov	r1, r3
 801159e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80115a4:	4413      	add	r3, r2
 80115a6:	4619      	mov	r1, r3
 80115a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80115aa:	f7fd f949 	bl	800e840 <move_window>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <mount_volume+0x384>
 80115b4:	2301      	movs	r3, #1
 80115b6:	e1c1      	b.n	801193c <mount_volume+0x708>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 80115b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115ba:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80115be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115c0:	899b      	ldrh	r3, [r3, #12]
 80115c2:	089b      	lsrs	r3, r3, #2
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	461a      	mov	r2, r3
 80115c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80115ce:	fb00 f202 	mul.w	r2, r0, r2
 80115d2:	1a9b      	subs	r3, r3, r2
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	440b      	add	r3, r1
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fc fd55 	bl	800e088 <ld_dword>
 80115de:	6278      	str	r0, [r7, #36]	; 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 80115e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e6:	d008      	beq.n	80115fa <mount_volume+0x3c6>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 80115e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ea:	3301      	adds	r3, #1
 80115ec:	653b      	str	r3, [r7, #80]	; 0x50
 80115ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d0cc      	beq.n	8011590 <mount_volume+0x35c>
 80115f6:	230d      	movs	r3, #13
 80115f8:	e1a0      	b.n	801193c <mount_volume+0x708>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 80115fa:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80115fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011602:	61da      	str	r2, [r3, #28]
 8011604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011606:	69da      	ldr	r2, [r3, #28]
 8011608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801160a:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 801160c:	2304      	movs	r3, #4
 801160e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011610:	e17c      	b.n	801190c <mount_volume+0x6d8>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011614:	3340      	adds	r3, #64	; 0x40
 8011616:	330b      	adds	r3, #11
 8011618:	4618      	mov	r0, r3
 801161a:	f7fc fd1d 	bl	800e058 <ld_word>
 801161e:	4603      	mov	r3, r0
 8011620:	461a      	mov	r2, r3
 8011622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011624:	899b      	ldrh	r3, [r3, #12]
 8011626:	429a      	cmp	r2, r3
 8011628:	d001      	beq.n	801162e <mount_volume+0x3fa>
 801162a:	230d      	movs	r3, #13
 801162c:	e186      	b.n	801193c <mount_volume+0x708>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801162e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011630:	3340      	adds	r3, #64	; 0x40
 8011632:	3316      	adds	r3, #22
 8011634:	4618      	mov	r0, r3
 8011636:	f7fc fd0f 	bl	800e058 <ld_word>
 801163a:	4603      	mov	r3, r0
 801163c:	663b      	str	r3, [r7, #96]	; 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801163e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011640:	2b00      	cmp	r3, #0
 8011642:	d106      	bne.n	8011652 <mount_volume+0x41e>
 8011644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011646:	3340      	adds	r3, #64	; 0x40
 8011648:	3324      	adds	r3, #36	; 0x24
 801164a:	4618      	mov	r0, r3
 801164c:	f7fc fd1c 	bl	800e088 <ld_dword>
 8011650:	6638      	str	r0, [r7, #96]	; 0x60
		fs->fsize = fasize;
 8011652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011656:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801165a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801165e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011660:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011664:	78db      	ldrb	r3, [r3, #3]
 8011666:	2b01      	cmp	r3, #1
 8011668:	d005      	beq.n	8011676 <mount_volume+0x442>
 801166a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801166c:	78db      	ldrb	r3, [r3, #3]
 801166e:	2b02      	cmp	r3, #2
 8011670:	d001      	beq.n	8011676 <mount_volume+0x442>
 8011672:	230d      	movs	r3, #13
 8011674:	e162      	b.n	801193c <mount_volume+0x708>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011678:	78db      	ldrb	r3, [r3, #3]
 801167a:	461a      	mov	r2, r3
 801167c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801167e:	fb02 f303 	mul.w	r3, r2, r3
 8011682:	663b      	str	r3, [r7, #96]	; 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011686:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801168a:	b29a      	uxth	r2, r3
 801168c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801168e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011692:	895b      	ldrh	r3, [r3, #10]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d008      	beq.n	80116aa <mount_volume+0x476>
 8011698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801169a:	895b      	ldrh	r3, [r3, #10]
 801169c:	461a      	mov	r2, r3
 801169e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116a0:	895b      	ldrh	r3, [r3, #10]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	4013      	ands	r3, r2
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d001      	beq.n	80116ae <mount_volume+0x47a>
 80116aa:	230d      	movs	r3, #13
 80116ac:	e146      	b.n	801193c <mount_volume+0x708>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80116ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116b0:	3340      	adds	r3, #64	; 0x40
 80116b2:	3311      	adds	r3, #17
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fc fccf 	bl	800e058 <ld_word>
 80116ba:	4603      	mov	r3, r0
 80116bc:	461a      	mov	r2, r3
 80116be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116c0:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80116c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116c4:	891b      	ldrh	r3, [r3, #8]
 80116c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116c8:	8992      	ldrh	r2, [r2, #12]
 80116ca:	0952      	lsrs	r2, r2, #5
 80116cc:	b292      	uxth	r2, r2
 80116ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80116d2:	fb01 f202 	mul.w	r2, r1, r2
 80116d6:	1a9b      	subs	r3, r3, r2
 80116d8:	b29b      	uxth	r3, r3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <mount_volume+0x4ae>
 80116de:	230d      	movs	r3, #13
 80116e0:	e12c      	b.n	801193c <mount_volume+0x708>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80116e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116e4:	3340      	adds	r3, #64	; 0x40
 80116e6:	3313      	adds	r3, #19
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fc fcb5 	bl	800e058 <ld_word>
 80116ee:	4603      	mov	r3, r0
 80116f0:	667b      	str	r3, [r7, #100]	; 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80116f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d106      	bne.n	8011706 <mount_volume+0x4d2>
 80116f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116fa:	3340      	adds	r3, #64	; 0x40
 80116fc:	3320      	adds	r3, #32
 80116fe:	4618      	mov	r0, r3
 8011700:	f7fc fcc2 	bl	800e088 <ld_dword>
 8011704:	6678      	str	r0, [r7, #100]	; 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011708:	3340      	adds	r3, #64	; 0x40
 801170a:	330e      	adds	r3, #14
 801170c:	4618      	mov	r0, r3
 801170e:	f7fc fca3 	bl	800e058 <ld_word>
 8011712:	4603      	mov	r3, r0
 8011714:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011716:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011718:	2b00      	cmp	r3, #0
 801171a:	d101      	bne.n	8011720 <mount_volume+0x4ec>
 801171c:	230d      	movs	r3, #13
 801171e:	e10d      	b.n	801193c <mount_volume+0x708>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011720:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011724:	4413      	add	r3, r2
 8011726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011728:	8911      	ldrh	r1, [r2, #8]
 801172a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801172c:	8992      	ldrh	r2, [r2, #12]
 801172e:	0952      	lsrs	r2, r2, #5
 8011730:	b292      	uxth	r2, r2
 8011732:	fbb1 f2f2 	udiv	r2, r1, r2
 8011736:	b292      	uxth	r2, r2
 8011738:	4413      	add	r3, r2
 801173a:	637b      	str	r3, [r7, #52]	; 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801173c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011740:	429a      	cmp	r2, r3
 8011742:	d201      	bcs.n	8011748 <mount_volume+0x514>
 8011744:	230d      	movs	r3, #13
 8011746:	e0f9      	b.n	801193c <mount_volume+0x708>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011748:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801174c:	1ad3      	subs	r3, r2, r3
 801174e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011750:	8952      	ldrh	r2, [r2, #10]
 8011752:	fbb3 f3f2 	udiv	r3, r3, r2
 8011756:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175a:	2b00      	cmp	r3, #0
 801175c:	d101      	bne.n	8011762 <mount_volume+0x52e>
 801175e:	230d      	movs	r3, #13
 8011760:	e0ec      	b.n	801193c <mount_volume+0x708>
		fmt = 0;
 8011762:	2300      	movs	r3, #0
 8011764:	65bb      	str	r3, [r7, #88]	; 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8011766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011768:	4a77      	ldr	r2, [pc, #476]	; (8011948 <mount_volume+0x714>)
 801176a:	4293      	cmp	r3, r2
 801176c:	d801      	bhi.n	8011772 <mount_volume+0x53e>
 801176e:	2303      	movs	r3, #3
 8011770:	65bb      	str	r3, [r7, #88]	; 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011778:	4293      	cmp	r3, r2
 801177a:	d801      	bhi.n	8011780 <mount_volume+0x54c>
 801177c:	2302      	movs	r3, #2
 801177e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011782:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011786:	4293      	cmp	r3, r2
 8011788:	d801      	bhi.n	801178e <mount_volume+0x55a>
 801178a:	2301      	movs	r3, #1
 801178c:	65bb      	str	r3, [r7, #88]	; 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 801178e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011790:	2b00      	cmp	r3, #0
 8011792:	d101      	bne.n	8011798 <mount_volume+0x564>
 8011794:	230d      	movs	r3, #13
 8011796:	e0d1      	b.n	801193c <mount_volume+0x708>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	1c9a      	adds	r2, r3, #2
 801179c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801179e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80117a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80117a4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80117a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80117a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117aa:	441a      	add	r2, r3
 80117ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117ae:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80117b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80117b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117b4:	441a      	add	r2, r3
 80117b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117b8:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80117ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117bc:	2b03      	cmp	r3, #3
 80117be:	d11e      	bne.n	80117fe <mount_volume+0x5ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80117c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117c2:	3340      	adds	r3, #64	; 0x40
 80117c4:	332a      	adds	r3, #42	; 0x2a
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fc fc46 	bl	800e058 <ld_word>
 80117cc:	4603      	mov	r3, r0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d001      	beq.n	80117d6 <mount_volume+0x5a2>
 80117d2:	230d      	movs	r3, #13
 80117d4:	e0b2      	b.n	801193c <mount_volume+0x708>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80117d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117d8:	891b      	ldrh	r3, [r3, #8]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d001      	beq.n	80117e2 <mount_volume+0x5ae>
 80117de:	230d      	movs	r3, #13
 80117e0:	e0ac      	b.n	801193c <mount_volume+0x708>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80117e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117e4:	3340      	adds	r3, #64	; 0x40
 80117e6:	332c      	adds	r3, #44	; 0x2c
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7fc fc4d 	bl	800e088 <ld_dword>
 80117ee:	4602      	mov	r2, r0
 80117f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117f2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80117f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117f6:	6a1b      	ldr	r3, [r3, #32]
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117fc:	e01e      	b.n	801183c <mount_volume+0x608>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80117fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011800:	891b      	ldrh	r3, [r3, #8]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d101      	bne.n	801180a <mount_volume+0x5d6>
 8011806:	230d      	movs	r3, #13
 8011808:	e098      	b.n	801193c <mount_volume+0x708>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801180a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801180e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011810:	441a      	add	r2, r3
 8011812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011814:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011818:	2b02      	cmp	r3, #2
 801181a:	d103      	bne.n	8011824 <mount_volume+0x5f0>
 801181c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801181e:	6a1b      	ldr	r3, [r3, #32]
 8011820:	005b      	lsls	r3, r3, #1
 8011822:	e00a      	b.n	801183a <mount_volume+0x606>
 8011824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011826:	6a1a      	ldr	r2, [r3, #32]
 8011828:	4613      	mov	r3, r2
 801182a:	005b      	lsls	r3, r3, #1
 801182c:	4413      	add	r3, r2
 801182e:	085a      	lsrs	r2, r3, #1
 8011830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011832:	6a1b      	ldr	r3, [r3, #32]
 8011834:	f003 0301 	and.w	r3, r3, #1
 8011838:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801183a:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801183c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801183e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011842:	899b      	ldrh	r3, [r3, #12]
 8011844:	4619      	mov	r1, r3
 8011846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011848:	440b      	add	r3, r1
 801184a:	3b01      	subs	r3, #1
 801184c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801184e:	8989      	ldrh	r1, [r1, #12]
 8011850:	fbb3 f3f1 	udiv	r3, r3, r1
 8011854:	429a      	cmp	r2, r3
 8011856:	d201      	bcs.n	801185c <mount_volume+0x628>
 8011858:	230d      	movs	r3, #13
 801185a:	e06f      	b.n	801193c <mount_volume+0x708>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801185e:	f04f 32ff 	mov.w	r2, #4294967295
 8011862:	61da      	str	r2, [r3, #28]
 8011864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011866:	69da      	ldr	r2, [r3, #28]
 8011868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801186a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 801186c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801186e:	2280      	movs	r2, #128	; 0x80
 8011870:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8011872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011874:	2b03      	cmp	r3, #3
 8011876:	d149      	bne.n	801190c <mount_volume+0x6d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801187a:	3340      	adds	r3, #64	; 0x40
 801187c:	3330      	adds	r3, #48	; 0x30
 801187e:	4618      	mov	r0, r3
 8011880:	f7fc fbea 	bl	800e058 <ld_word>
 8011884:	4603      	mov	r3, r0
 8011886:	2b01      	cmp	r3, #1
 8011888:	d140      	bne.n	801190c <mount_volume+0x6d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801188c:	3301      	adds	r3, #1
 801188e:	4619      	mov	r1, r3
 8011890:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011892:	f7fc ffd5 	bl	800e840 <move_window>
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d137      	bne.n	801190c <mount_volume+0x6d8>
		{
			fs->fsi_flag = 0;
 801189c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801189e:	2200      	movs	r2, #0
 80118a0:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80118a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118a4:	3340      	adds	r3, #64	; 0x40
 80118a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fc fbd4 	bl	800e058 <ld_word>
 80118b0:	4603      	mov	r3, r0
 80118b2:	461a      	mov	r2, r3
 80118b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d127      	bne.n	801190c <mount_volume+0x6d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80118bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118be:	3340      	adds	r3, #64	; 0x40
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7fc fbe1 	bl	800e088 <ld_dword>
 80118c6:	4603      	mov	r3, r0
 80118c8:	4a20      	ldr	r2, [pc, #128]	; (801194c <mount_volume+0x718>)
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d11e      	bne.n	801190c <mount_volume+0x6d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80118ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118d0:	3340      	adds	r3, #64	; 0x40
 80118d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fc fbd6 	bl	800e088 <ld_dword>
 80118dc:	4603      	mov	r3, r0
 80118de:	4a1c      	ldr	r2, [pc, #112]	; (8011950 <mount_volume+0x71c>)
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d113      	bne.n	801190c <mount_volume+0x6d8>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80118e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118e6:	3340      	adds	r3, #64	; 0x40
 80118e8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fc fbcb 	bl	800e088 <ld_dword>
 80118f2:	4602      	mov	r2, r0
 80118f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118f6:	61da      	str	r2, [r3, #28]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80118f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118fa:	3340      	adds	r3, #64	; 0x40
 80118fc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011900:	4618      	mov	r0, r3
 8011902:	f7fc fbc1 	bl	800e088 <ld_dword>
 8011906:	4602      	mov	r2, r0
 8011908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801190a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 801190c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801190e:	b2da      	uxtb	r2, r3
 8011910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011912:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8011914:	4b0f      	ldr	r3, [pc, #60]	; (8011954 <mount_volume+0x720>)
 8011916:	881b      	ldrh	r3, [r3, #0]
 8011918:	3301      	adds	r3, #1
 801191a:	b29a      	uxth	r2, r3
 801191c:	4b0d      	ldr	r3, [pc, #52]	; (8011954 <mount_volume+0x720>)
 801191e:	801a      	strh	r2, [r3, #0]
 8011920:	4b0c      	ldr	r3, [pc, #48]	; (8011954 <mount_volume+0x720>)
 8011922:	881a      	ldrh	r2, [r3, #0]
 8011924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011926:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801192a:	4a0b      	ldr	r2, [pc, #44]	; (8011958 <mount_volume+0x724>)
 801192c:	611a      	str	r2, [r3, #16]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 801192e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011930:	4a0a      	ldr	r2, [pc, #40]	; (801195c <mount_volume+0x728>)
 8011932:	615a      	str	r2, [r3, #20]
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
 8011934:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011936:	f7fc ff23 	bl	800e780 <clear_share>
#endif
	return FR_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	3768      	adds	r7, #104	; 0x68
 8011940:	46bd      	mov	sp, r7
 8011942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011946:	bf00      	nop
 8011948:	0ffffff5 	.word	0x0ffffff5
 801194c:	41615252 	.word	0x41615252
 8011950:	61417272 	.word	0x61417272
 8011954:	24000534 	.word	0x24000534
 8011958:	240007b8 	.word	0x240007b8
 801195c:	24000558 	.word	0x24000558

08011960 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b084      	sub	sp, #16
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801196a:	2309      	movs	r3, #9
 801196c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d01c      	beq.n	80119ae <validate+0x4e>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d018      	beq.n	80119ae <validate+0x4e>
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d013      	beq.n	80119ae <validate+0x4e>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	889a      	ldrh	r2, [r3, #4]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	88db      	ldrh	r3, [r3, #6]
 8011990:	429a      	cmp	r2, r3
 8011992:	d10c      	bne.n	80119ae <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	785b      	ldrb	r3, [r3, #1]
 801199a:	4618      	mov	r0, r3
 801199c:	f7fc f990 	bl	800dcc0 <disk_status>
 80119a0:	4603      	mov	r3, r0
 80119a2:	f003 0301 	and.w	r3, r3, #1
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d101      	bne.n	80119ae <validate+0x4e>
			res = FR_OK;
 80119aa:	2300      	movs	r3, #0
 80119ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 80119ae:	7bfb      	ldrb	r3, [r7, #15]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d102      	bne.n	80119ba <validate+0x5a>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	e000      	b.n	80119bc <validate+0x5c>
 80119ba:	2300      	movs	r3, #0
 80119bc:	683a      	ldr	r2, [r7, #0]
 80119be:	6013      	str	r3, [r2, #0]
	return res;
 80119c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
	...

080119cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b088      	sub	sp, #32
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	4613      	mov	r3, r2
 80119d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 80119de:	f107 0310 	add.w	r3, r7, #16
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff fac8 	bl	8010f78 <get_ldnumber>
 80119e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	da01      	bge.n	80119f4 <f_mount+0x28>
 80119f0:	230b      	movs	r3, #11
 80119f2:	e031      	b.n	8011a58 <f_mount+0x8c>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 80119f4:	4a1a      	ldr	r2, [pc, #104]	; (8011a60 <f_mount+0x94>)
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00a      	beq.n	8011a1a <f_mount+0x4e>
		FatFs[vol] = 0;
 8011a04:	4a16      	ldr	r2, [pc, #88]	; (8011a60 <f_mount+0x94>)
 8011a06:	69fb      	ldr	r3, [r7, #28]
 8011a08:	2100      	movs	r1, #0
 8011a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
 8011a0e:	69b8      	ldr	r0, [r7, #24]
 8011a10:	f7fc feb6 	bl	800e780 <clear_share>
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	2200      	movs	r2, #0
 8011a18:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00b      	beq.n	8011a38 <f_mount+0x6c>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	69fa      	ldr	r2, [r7, #28]
 8011a24:	b2d2      	uxtb	r2, r2
 8011a26:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8011a2e:	68fa      	ldr	r2, [r7, #12]
 8011a30:	490b      	ldr	r1, [pc, #44]	; (8011a60 <f_mount+0x94>)
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8011a38:	79fb      	ldrb	r3, [r7, #7]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d101      	bne.n	8011a42 <f_mount+0x76>
 8011a3e:	2300      	movs	r3, #0
 8011a40:	e00a      	b.n	8011a58 <f_mount+0x8c>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011a42:	f107 010c 	add.w	r1, r7, #12
 8011a46:	f107 0308 	add.w	r3, r7, #8
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7ff fbf1 	bl	8011234 <mount_volume>
 8011a52:	4603      	mov	r3, r0
 8011a54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3720      	adds	r7, #32
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	24000530 	.word	0x24000530

08011a64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8011a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a68:	b0a9      	sub	sp, #164	; 0xa4
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6278      	str	r0, [r7, #36]	; 0x24
 8011a6e:	6239      	str	r1, [r7, #32]
 8011a70:	4613      	mov	r3, r2
 8011a72:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d101      	bne.n	8011a7e <f_open+0x1a>
 8011a7a:	2309      	movs	r3, #9
 8011a7c:	e27c      	b.n	8011f78 <f_open+0x514>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8011a7e:	7ffb      	ldrb	r3, [r7, #31]
 8011a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011a84:	77fb      	strb	r3, [r7, #31]
	res = mount_volume(&path, &fs, mode);
 8011a86:	7ffb      	ldrb	r3, [r7, #31]
 8011a88:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011a8c:	f107 0020 	add.w	r0, r7, #32
 8011a90:	461a      	mov	r2, r3
 8011a92:	f7ff fbcf 	bl	8011234 <mount_volume>
 8011a96:	4603      	mov	r3, r0
 8011a98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 8011a9c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f040 8260 	bne.w	8011f66 <f_open+0x502>
		dj.obj.fs = fs;
 8011aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa8:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011aaa:	6a3b      	ldr	r3, [r7, #32]
 8011aac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	4610      	mov	r0, r2
 8011ab4:	f7ff f9cc 	bl	8010e50 <follow_path>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8011abe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d11a      	bne.n	8011afc <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011ac6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8011aca:	b25b      	sxtb	r3, r3
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	da03      	bge.n	8011ad8 <f_open+0x74>
				res = FR_INVALID_NAME;
 8011ad0:	2306      	movs	r3, #6
 8011ad2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8011ad6:	e011      	b.n	8011afc <f_open+0x98>
			}
#if FF_FS_LOCK
			else {
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 8011ad8:	7ffb      	ldrb	r3, [r7, #31]
 8011ada:	f023 0301 	bic.w	r3, r3, #1
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	bf14      	ite	ne
 8011ae2:	2301      	movne	r3, #1
 8011ae4:	2300      	moveq	r3, #0
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	461a      	mov	r2, r3
 8011aea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011aee:	4611      	mov	r1, r2
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fc fcfd 	bl	800e4f0 <chk_share>
 8011af6:	4603      	mov	r3, r0
 8011af8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011afc:	7ffb      	ldrb	r3, [r7, #31]
 8011afe:	f003 031c 	and.w	r3, r3, #28
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	f000 80e1 	beq.w	8011cca <f_open+0x266>
			if (res != FR_OK) {					/* No file, create new */
 8011b08:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d017      	beq.n	8011b40 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011b10:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011b14:	2b04      	cmp	r3, #4
 8011b16:	d10e      	bne.n	8011b36 <f_open+0xd2>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011b18:	f7fc fd46 	bl	800e5a8 <enq_share>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d006      	beq.n	8011b30 <f_open+0xcc>
 8011b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fe fe04 	bl	8010734 <dir_register>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	e000      	b.n	8011b32 <f_open+0xce>
 8011b30:	2312      	movs	r3, #18
 8011b32:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011b36:	7ffb      	ldrb	r3, [r7, #31]
 8011b38:	f043 0308 	orr.w	r3, r3, #8
 8011b3c:	77fb      	strb	r3, [r7, #31]
 8011b3e:	e011      	b.n	8011b64 <f_open+0x100>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011b40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011b44:	f003 0311 	and.w	r3, r3, #17
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d003      	beq.n	8011b54 <f_open+0xf0>
					res = FR_DENIED;
 8011b4c:	2307      	movs	r3, #7
 8011b4e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8011b52:	e007      	b.n	8011b64 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011b54:	7ffb      	ldrb	r3, [r7, #31]
 8011b56:	f003 0304 	and.w	r3, r3, #4
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d002      	beq.n	8011b64 <f_open+0x100>
 8011b5e:	2308      	movs	r3, #8
 8011b60:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8011b64:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	f040 80ca 	bne.w	8011d02 <f_open+0x29e>
 8011b6e:	7ffb      	ldrb	r3, [r7, #31]
 8011b70:	f003 0308 	and.w	r3, r3, #8
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	f000 80c4 	beq.w	8011d02 <f_open+0x29e>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8011b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	2b04      	cmp	r3, #4
 8011b80:	d14f      	bne.n	8011c22 <f_open+0x1be>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8011b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b86:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 8011b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	4610      	mov	r0, r2
 8011b90:	f7fe fab4 	bl	80100fc <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	695b      	ldr	r3, [r3, #20]
 8011b98:	3302      	adds	r3, #2
 8011b9a:	221e      	movs	r2, #30
 8011b9c:	2100      	movs	r1, #0
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f006 ff8b 	bl	8018aba <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	695b      	ldr	r3, [r3, #20]
 8011ba8:	3326      	adds	r3, #38	; 0x26
 8011baa:	221a      	movs	r2, #26
 8011bac:	2100      	movs	r1, #0
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f006 ff83 	bl	8018aba <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8011bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb6:	695b      	ldr	r3, [r3, #20]
 8011bb8:	1d1a      	adds	r2, r3, #4
 8011bba:	2320      	movs	r3, #32
 8011bbc:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8011bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc0:	695b      	ldr	r3, [r3, #20]
 8011bc2:	f103 0408 	add.w	r4, r3, #8
 8011bc6:	f7fc f92b 	bl	800de20 <get_fattime>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	4619      	mov	r1, r3
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7fc fb73 	bl	800e2ba <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8011bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd6:	695b      	ldr	r3, [r3, #20]
 8011bd8:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8011bdc:	2301      	movs	r3, #1
 8011bde:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8011be0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7fe faeb 	bl	80101c0 <store_xdir>
 8011bea:	4603      	mov	r3, r0
 8011bec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8011bf0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	f040 8084 	bne.w	8011d02 <f_open+0x29e>
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfc:	689b      	ldr	r3, [r3, #8]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d07f      	beq.n	8011d02 <f_open+0x29e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8011c02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c06:	689b      	ldr	r3, [r3, #8]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	f7fd faae 	bl	800f16c <remove_chain>
 8011c10:	4603      	mov	r3, r0
 8011c12:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8011c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c18:	689b      	ldr	r3, [r3, #8]
 8011c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c1c:	3b01      	subs	r3, #1
 8011c1e:	6193      	str	r3, [r2, #24]
 8011c20:	e06f      	b.n	8011d02 <f_open+0x29e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8011c22:	f7fc f8fd 	bl	800de20 <get_fattime>
 8011c26:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
					st_dword(dj.dir + DIR_CrtTime, tm);
 8011c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c2c:	330e      	adds	r3, #14
 8011c2e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fc fb41 	bl	800e2ba <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8011c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c3a:	3316      	adds	r3, #22
 8011c3c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fc fb3a 	bl	800e2ba <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8011c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	4610      	mov	r0, r2
 8011c4e:	f7fd fee3 	bl	800fa18 <ld_clust>
 8011c52:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c58:	f103 020b 	add.w	r2, r3, #11
 8011c5c:	2320      	movs	r3, #32
 8011c5e:	7013      	strb	r3, [r2, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c64:	2200      	movs	r2, #0
 8011c66:	4619      	mov	r1, r3
 8011c68:	f7fd fef5 	bl	800fa56 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c6e:	331c      	adds	r3, #28
 8011c70:	2100      	movs	r1, #0
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fc fb21 	bl	800e2ba <st_dword>
					fs->wflag = 1;
 8011c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	7113      	strb	r3, [r2, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8011c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d03d      	beq.n	8011d02 <f_open+0x29e>
						sc = fs->winsect;
 8011c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8011c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c92:	2200      	movs	r2, #0
 8011c94:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7fd fa67 	bl	800f16c <remove_chain>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 8011ca4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d12a      	bne.n	8011d02 <f_open+0x29e>
							res = move_window(fs, sc);
 8011cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cae:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fc fdc4 	bl	800e840 <move_window>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	6193      	str	r3, [r2, #24]
 8011cc8:	e01b      	b.n	8011d02 <f_open+0x29e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8011cca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d117      	bne.n	8011d02 <f_open+0x29e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8011cd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011cd6:	f003 0310 	and.w	r3, r3, #16
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d003      	beq.n	8011ce6 <f_open+0x282>
					res = FR_NO_FILE;
 8011cde:	2304      	movs	r3, #4
 8011ce0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8011ce4:	e00d      	b.n	8011d02 <f_open+0x29e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8011ce6:	7ffb      	ldrb	r3, [r7, #31]
 8011ce8:	f003 0302 	and.w	r3, r3, #2
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d008      	beq.n	8011d02 <f_open+0x29e>
 8011cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011cf4:	f003 0301 	and.w	r3, r3, #1
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d002      	beq.n	8011d02 <f_open+0x29e>
						res = FR_DENIED;
 8011cfc:	2307      	movs	r3, #7
 8011cfe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011d02:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d128      	bne.n	8011d5c <f_open+0x2f8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8011d0a:	7ffb      	ldrb	r3, [r7, #31]
 8011d0c:	f003 0308 	and.w	r3, r3, #8
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d003      	beq.n	8011d1c <f_open+0x2b8>
 8011d14:	7ffb      	ldrb	r3, [r7, #31]
 8011d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d1a:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8011d24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d28:	64da      	str	r2, [r3, #76]	; 0x4c
#if FF_FS_LOCK
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8011d2a:	7ffb      	ldrb	r3, [r7, #31]
 8011d2c:	f023 0301 	bic.w	r3, r3, #1
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	bf14      	ite	ne
 8011d34:	2301      	movne	r3, #1
 8011d36:	2300      	moveq	r3, #0
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d40:	4611      	mov	r1, r2
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fc fc52 	bl	800e5ec <inc_share>
 8011d48:	4602      	mov	r2, r0
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d102      	bne.n	8011d5c <f_open+0x2f8>
 8011d56:	2302      	movs	r3, #2
 8011d58:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011d5c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f040 8100 	bne.w	8011f66 <f_open+0x502>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8011d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	2b04      	cmp	r3, #4
 8011d6c:	d116      	bne.n	8011d9c <f_open+0x338>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8011d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d72:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8011d74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011d78:	4613      	mov	r3, r2
 8011d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011d7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011d82:	431a      	orrs	r2, r3
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8011d88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8c:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 8011d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d92:	4611      	mov	r1, r2
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fe f9b1 	bl	80100fc <init_alloc_info>
 8011d9a:	e016      	b.n	8011dca <f_open+0x366>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011da0:	4619      	mov	r1, r3
 8011da2:	4610      	mov	r0, r2
 8011da4:	f7fd fe38 	bl	800fa18 <ld_clust>
 8011da8:	4602      	mov	r2, r0
 8011daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011db0:	331c      	adds	r3, #28
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fc f968 	bl	800e088 <ld_dword>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2200      	movs	r2, #0
 8011dbc:	613b      	str	r3, [r7, #16]
 8011dbe:	617a      	str	r2, [r7, #20]
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011dc6:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
 8011dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dcc:	2200      	movs	r2, #0
 8011dce:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8011dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd8:	88da      	ldrh	r2, [r3, #6]
 8011dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ddc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8011dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de0:	7ffa      	ldrb	r2, [r7, #31]
 8011de2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;		/* Clear error flag */
 8011de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de8:	2200      	movs	r2, #0
 8011dea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	2200      	movs	r2, #0
 8011df2:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 8011df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011df6:	f04f 0200 	mov.w	r2, #0
 8011dfa:	f04f 0300 	mov.w	r3, #0
 8011dfe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	3354      	adds	r3, #84	; 0x54
 8011e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011e0a:	2100      	movs	r1, #0
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f006 fe54 	bl	8018aba <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011e12:	7ffb      	ldrb	r3, [r7, #31]
 8011e14:	f003 0320 	and.w	r3, r3, #32
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	f000 80a4 	beq.w	8011f66 <f_open+0x502>
 8011e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011e24:	4313      	orrs	r3, r2
 8011e26:	f000 809e 	beq.w	8011f66 <f_open+0x502>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e32:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e38:	895b      	ldrh	r3, [r3, #10]
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3e:	899b      	ldrh	r3, [r3, #12]
 8011e40:	fb02 f303 	mul.w	r3, r2, r3
 8011e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011e56:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8011e5a:	e023      	b.n	8011ea4 <f_open+0x440>
					clst = get_fat(&fp->obj, clst);
 8011e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fc fda8 	bl	800e9b8 <get_fat>
 8011e68:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 8011e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d802      	bhi.n	8011e7a <f_open+0x416>
 8011e74:	2302      	movs	r3, #2
 8011e76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e82:	d102      	bne.n	8011e8a <f_open+0x426>
 8011e84:	2301      	movs	r3, #1
 8011e86:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e8e:	2200      	movs	r2, #0
 8011e90:	469a      	mov	sl, r3
 8011e92:	4693      	mov	fp, r2
 8011e94:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011e98:	ebb2 050a 	subs.w	r5, r2, sl
 8011e9c:	eb63 060b 	sbc.w	r6, r3, fp
 8011ea0:	e9c7 5624 	strd	r5, r6, [r7, #144]	; 0x90
 8011ea4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10a      	bne.n	8011ec2 <f_open+0x45e>
 8011eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	4698      	mov	r8, r3
 8011eb4:	4691      	mov	r9, r2
 8011eb6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011eba:	4590      	cmp	r8, r2
 8011ebc:	eb79 0303 	sbcs.w	r3, r9, r3
 8011ec0:	d3cc      	bcc.n	8011e5c <f_open+0x3f8>
				}
				fp->clust = clst;
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011ec8:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011eca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d140      	bne.n	8011f54 <f_open+0x4f0>
 8011ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed4:	899b      	ldrh	r3, [r3, #12]
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	2200      	movs	r2, #0
 8011eda:	60bb      	str	r3, [r7, #8]
 8011edc:	60fa      	str	r2, [r7, #12]
 8011ede:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8011ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011ee6:	f7ee f9ff 	bl	80002e8 <__aeabi_uldivmod>
 8011eea:	4313      	orrs	r3, r2
 8011eec:	d032      	beq.n	8011f54 <f_open+0x4f0>
					sc = clst2sect(fs, clst);
 8011eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fc fd3f 	bl	800e978 <clst2sect>
 8011efa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					if (sc == 0) {
 8011efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d103      	bne.n	8011f0e <f_open+0x4aa>
						res = FR_INT_ERR;
 8011f06:	2302      	movs	r3, #2
 8011f08:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8011f0c:	e022      	b.n	8011f54 <f_open+0x4f0>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f10:	899b      	ldrh	r3, [r3, #12]
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	2200      	movs	r2, #0
 8011f16:	603b      	str	r3, [r7, #0]
 8011f18:	607a      	str	r2, [r7, #4]
 8011f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f1e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8011f22:	f7ee f9e1 	bl	80002e8 <__aeabi_uldivmod>
 8011f26:	4602      	mov	r2, r0
 8011f28:	460b      	mov	r3, r1
 8011f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f2e:	441a      	add	r2, r3
 8011f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f32:	645a      	str	r2, [r3, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f36:	7858      	ldrb	r0, [r3, #1]
 8011f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f42:	2301      	movs	r3, #1
 8011f44:	f7fb fefc 	bl	800dd40 <disk_read>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d002      	beq.n	8011f54 <f_open+0x4f0>
 8011f4e:	2301      	movs	r3, #1
 8011f50:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#endif
					}
				}
#if FF_FS_LOCK
				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
 8011f54:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d004      	beq.n	8011f66 <f_open+0x502>
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7fc fbd1 	bl	800e708 <dec_share>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011f66:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <f_open+0x510>
 8011f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f70:	2200      	movs	r2, #0
 8011f72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011f74:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	37a4      	adds	r7, #164	; 0xa4
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f82 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8011f82:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011f86:	b098      	sub	sp, #96	; 0x60
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011f8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8011f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8011f90:	623b      	str	r3, [r7, #32]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f94:	64fb      	str	r3, [r7, #76]	; 0x4c


	*br = 0;	/* Clear read byte counter */
 8011f96:	6a3a      	ldr	r2, [r7, #32]
 8011f98:	2300      	movs	r3, #0
 8011f9a:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	4610      	mov	r0, r2
 8011fa6:	f7ff fcdb 	bl	8011960 <validate>
 8011faa:	4603      	mov	r3, r0
 8011fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d108      	bne.n	8011fca <f_read+0x48>
 8011fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d002      	beq.n	8011fd0 <f_read+0x4e>
 8011fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fce:	e16b      	b.n	80122a8 <f_read+0x326>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fd6:	f003 0301 	and.w	r3, r3, #1
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d101      	bne.n	8011fe2 <f_read+0x60>
 8011fde:	2307      	movs	r3, #7
 8011fe0:	e162      	b.n	80122a8 <f_read+0x326>
	remain = fp->obj.objsize - fp->fptr;
 8011fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011fee:	ebb0 0802 	subs.w	r8, r0, r2
 8011ff2:	eb61 0903 	sbc.w	r9, r1, r3
 8011ff6:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	461c      	mov	r4, r3
 8012000:	4615      	mov	r5, r2
 8012002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012006:	42a2      	cmp	r2, r4
 8012008:	41ab      	sbcs	r3, r5
 801200a:	f080 8148 	bcs.w	801229e <f_read+0x31c>
 801200e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012010:	627b      	str	r3, [r7, #36]	; 0x24

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8012012:	e144      	b.n	801229e <f_read+0x31c>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012016:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801201c:	899b      	ldrh	r3, [r3, #12]
 801201e:	b29b      	uxth	r3, r3
 8012020:	2200      	movs	r2, #0
 8012022:	61bb      	str	r3, [r7, #24]
 8012024:	61fa      	str	r2, [r7, #28]
 8012026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801202a:	f7ee f95d 	bl	80002e8 <__aeabi_uldivmod>
 801202e:	4313      	orrs	r3, r2
 8012030:	f040 80e9 	bne.w	8012206 <f_read+0x284>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012036:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801203c:	899b      	ldrh	r3, [r3, #12]
 801203e:	b29b      	uxth	r3, r3
 8012040:	2200      	movs	r2, #0
 8012042:	613b      	str	r3, [r7, #16]
 8012044:	617a      	str	r2, [r7, #20]
 8012046:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801204a:	f7ee f94d 	bl	80002e8 <__aeabi_uldivmod>
 801204e:	4602      	mov	r2, r0
 8012050:	460b      	mov	r3, r1
 8012052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012054:	895b      	ldrh	r3, [r3, #10]
 8012056:	3b01      	subs	r3, #1
 8012058:	4013      	ands	r3, r2
 801205a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 801205c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801205e:	2b00      	cmp	r3, #0
 8012060:	d132      	bne.n	80120c8 <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012064:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012068:	4313      	orrs	r3, r2
 801206a:	d103      	bne.n	8012074 <f_read+0xf2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206e:	689b      	ldr	r3, [r3, #8]
 8012070:	65bb      	str	r3, [r7, #88]	; 0x58
 8012072:	e013      	b.n	801209c <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 8012074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012078:	2b00      	cmp	r3, #0
 801207a:	d007      	beq.n	801208c <f_read+0x10a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012084:	f7fd fa8f 	bl	800f5a6 <clmt_clust>
 8012088:	65b8      	str	r0, [r7, #88]	; 0x58
 801208a:	e007      	b.n	801209c <f_read+0x11a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801208c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012092:	4619      	mov	r1, r3
 8012094:	4610      	mov	r0, r2
 8012096:	f7fc fc8f 	bl	800e9b8 <get_fat>
 801209a:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801209c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d805      	bhi.n	80120ae <f_read+0x12c>
 80120a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a4:	2202      	movs	r2, #2
 80120a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80120aa:	2302      	movs	r3, #2
 80120ac:	e0fc      	b.n	80122a8 <f_read+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80120ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b4:	d105      	bne.n	80120c2 <f_read+0x140>
 80120b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b8:	2201      	movs	r2, #1
 80120ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80120be:	2301      	movs	r3, #1
 80120c0:	e0f2      	b.n	80122a8 <f_read+0x326>
				fp->clust = clst;				/* Update current cluster */
 80120c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120c6:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80120c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ce:	4619      	mov	r1, r3
 80120d0:	4610      	mov	r0, r2
 80120d2:	f7fc fc51 	bl	800e978 <clst2sect>
 80120d6:	63b8      	str	r0, [r7, #56]	; 0x38
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80120d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d105      	bne.n	80120ea <f_read+0x168>
 80120de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e0:	2202      	movs	r2, #2
 80120e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80120e6:	2302      	movs	r3, #2
 80120e8:	e0de      	b.n	80122a8 <f_read+0x326>
			sect += csect;
 80120ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ee:	4413      	add	r3, r2
 80120f0:	63bb      	str	r3, [r7, #56]	; 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80120f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120f4:	899b      	ldrh	r3, [r3, #12]
 80120f6:	461a      	mov	r2, r3
 80120f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80120fe:	653b      	str	r3, [r7, #80]	; 0x50
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8012100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012102:	2b00      	cmp	r3, #0
 8012104:	d043      	beq.n	801218e <f_read+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210a:	4413      	add	r3, r2
 801210c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801210e:	8952      	ldrh	r2, [r2, #10]
 8012110:	4293      	cmp	r3, r2
 8012112:	d905      	bls.n	8012120 <f_read+0x19e>
					cc = fs->csize - csect;
 8012114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012116:	895b      	ldrh	r3, [r3, #10]
 8012118:	461a      	mov	r2, r3
 801211a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801211c:	1ad3      	subs	r3, r2, r3
 801211e:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012122:	7858      	ldrb	r0, [r3, #1]
 8012124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012128:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801212a:	f7fb fe09 	bl	800dd40 <disk_read>
 801212e:	4603      	mov	r3, r0
 8012130:	2b00      	cmp	r3, #0
 8012132:	d005      	beq.n	8012140 <f_read+0x1be>
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	2201      	movs	r2, #1
 8012138:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801213c:	2301      	movs	r3, #1
 801213e:	e0b3      	b.n	80122a8 <f_read+0x326>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012146:	b25b      	sxtb	r3, r3
 8012148:	2b00      	cmp	r3, #0
 801214a:	da18      	bge.n	801217e <f_read+0x1fc>
 801214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012152:	1ad3      	subs	r3, r2, r3
 8012154:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012156:	429a      	cmp	r2, r3
 8012158:	d911      	bls.n	801217e <f_read+0x1fc>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012160:	1ad3      	subs	r3, r2, r3
 8012162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012164:	8992      	ldrh	r2, [r2, #12]
 8012166:	fb02 f303 	mul.w	r3, r2, r3
 801216a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801216c:	18d0      	adds	r0, r2, r3
 801216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012170:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8012174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012176:	899b      	ldrh	r3, [r3, #12]
 8012178:	461a      	mov	r2, r3
 801217a:	f006 fcd7 	bl	8018b2c <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012180:	899b      	ldrh	r3, [r3, #12]
 8012182:	461a      	mov	r2, r3
 8012184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012186:	fb02 f303 	mul.w	r3, r2, r3
 801218a:	657b      	str	r3, [r7, #84]	; 0x54
				continue;
 801218c:	e067      	b.n	801225e <f_read+0x2dc>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012194:	429a      	cmp	r2, r3
 8012196:	d033      	beq.n	8012200 <f_read+0x27e>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801219e:	b25b      	sxtb	r3, r3
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	da1b      	bge.n	80121dc <f_read+0x25a>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80121a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a6:	7858      	ldrb	r0, [r3, #1]
 80121a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121aa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80121ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80121b2:	2301      	movs	r3, #1
 80121b4:	f7fb fde4 	bl	800dd80 <disk_write>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d005      	beq.n	80121ca <f_read+0x248>
 80121be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c0:	2201      	movs	r2, #1
 80121c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80121c6:	2301      	movs	r3, #1
 80121c8:	e06e      	b.n	80122a8 <f_read+0x326>
					fp->flag &= (BYTE)~FA_DIRTY;
 80121ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121d4:	b2da      	uxtb	r2, r3
 80121d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80121dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121de:	7858      	ldrb	r0, [r3, #1]
 80121e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80121e6:	2301      	movs	r3, #1
 80121e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121ea:	f7fb fda9 	bl	800dd40 <disk_read>
 80121ee:	4603      	mov	r3, r0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d005      	beq.n	8012200 <f_read+0x27e>
 80121f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f6:	2201      	movs	r2, #1
 80121f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80121fc:	2301      	movs	r3, #1
 80121fe:	e053      	b.n	80122a8 <f_read+0x326>
			}
#endif
			fp->sect = sect;
 8012200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012204:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8012206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012208:	899b      	ldrh	r3, [r3, #12]
 801220a:	4618      	mov	r0, r3
 801220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012214:	899b      	ldrh	r3, [r3, #12]
 8012216:	fbb2 f1f3 	udiv	r1, r2, r3
 801221a:	fb01 f303 	mul.w	r3, r1, r3
 801221e:	1ad3      	subs	r3, r2, r3
 8012220:	1ac3      	subs	r3, r0, r3
 8012222:	657b      	str	r3, [r7, #84]	; 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012228:	429a      	cmp	r2, r3
 801222a:	d901      	bls.n	8012230 <f_read+0x2ae>
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	657b      	str	r3, [r7, #84]	; 0x54
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012232:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8012236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012238:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801223e:	899b      	ldrh	r3, [r3, #12]
 8012240:	b29b      	uxth	r3, r3
 8012242:	2200      	movs	r2, #0
 8012244:	60bb      	str	r3, [r7, #8]
 8012246:	60fa      	str	r2, [r7, #12]
 8012248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801224c:	f7ee f84c 	bl	80002e8 <__aeabi_uldivmod>
 8012250:	4613      	mov	r3, r2
 8012252:	4423      	add	r3, r4
 8012254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012256:	4619      	mov	r1, r3
 8012258:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801225a:	f006 fc67 	bl	8018b2c <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 801225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012262:	1ad3      	subs	r3, r2, r3
 8012264:	627b      	str	r3, [r7, #36]	; 0x24
 8012266:	6a3b      	ldr	r3, [r7, #32]
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801226c:	441a      	add	r2, r3
 801226e:	6a3b      	ldr	r3, [r7, #32]
 8012270:	601a      	str	r2, [r3, #0]
 8012272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012276:	4413      	add	r3, r2
 8012278:	64fb      	str	r3, [r7, #76]	; 0x4c
 801227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012282:	2000      	movs	r0, #0
 8012284:	468a      	mov	sl, r1
 8012286:	4683      	mov	fp, r0
 8012288:	eb12 010a 	adds.w	r1, r2, sl
 801228c:	6039      	str	r1, [r7, #0]
 801228e:	eb43 030b 	adc.w	r3, r3, fp
 8012292:	607b      	str	r3, [r7, #4]
 8012294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012296:	e9d7 1200 	ldrd	r1, r2, [r7]
 801229a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 801229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	f47f aeb7 	bne.w	8012014 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80122a6:	2300      	movs	r3, #0
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3760      	adds	r7, #96	; 0x60
 80122ac:	46bd      	mov	sp, r7
 80122ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080122b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80122b2:	b580      	push	{r7, lr}
 80122b4:	b09a      	sub	sp, #104	; 0x68
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80122c0:	4611      	mov	r1, r2
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7ff fb4c 	bl	8011960 <validate>
 80122c8:	4603      	mov	r3, r0
 80122ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80122ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f040 8105 	bne.w	80124e2 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f000 80fd 	beq.w	80124e2 <f_sync+0x230>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122ee:	b25b      	sxtb	r3, r3
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	da17      	bge.n	8012324 <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80122f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122f6:	7858      	ldrb	r0, [r3, #1]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012302:	2301      	movs	r3, #1
 8012304:	f7fb fd3c 	bl	800dd80 <disk_write>
 8012308:	4603      	mov	r3, r0
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <f_sync+0x60>
 801230e:	2301      	movs	r3, #1
 8012310:	e0e9      	b.n	80124e6 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801231c:	b2da      	uxtb	r2, r3
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012324:	f7fb fd7c 	bl	800de20 <get_fattime>
 8012328:	6638      	str	r0, [r7, #96]	; 0x60
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801232a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	2b04      	cmp	r3, #4
 8012330:	f040 808c 	bne.w	801244c <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	4618      	mov	r0, r3
 8012338:	f7fc feb8 	bl	800f0ac <fill_first_frag>
 801233c:	4603      	mov	r3, r0
 801233e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8012342:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012346:	2b00      	cmp	r3, #0
 8012348:	d10a      	bne.n	8012360 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012350:	f04f 32ff 	mov.w	r2, #4294967295
 8012354:	4619      	mov	r1, r3
 8012356:	f7fc fed8 	bl	800f10a <fill_last_frag>
 801235a:	4603      	mov	r3, r0
 801235c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8012360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012364:	2b00      	cmp	r3, #0
 8012366:	f040 80bc 	bne.w	80124e2 <f_sync+0x230>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	f107 0308 	add.w	r3, r7, #8
 8012370:	4611      	mov	r1, r2
 8012372:	4618      	mov	r0, r3
 8012374:	f7fd feeb 	bl	801014e <load_obj_xdir>
 8012378:	4603      	mov	r3, r0
 801237a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 801237e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012382:	2b00      	cmp	r3, #0
 8012384:	f040 80ad 	bne.w	80124e2 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8012388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801238a:	695b      	ldr	r3, [r3, #20]
 801238c:	3304      	adds	r3, #4
 801238e:	781a      	ldrb	r2, [r3, #0]
 8012390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012392:	695b      	ldr	r3, [r3, #20]
 8012394:	3304      	adds	r3, #4
 8012396:	f042 0220 	orr.w	r2, r2, #32
 801239a:	b2d2      	uxtb	r2, r2
 801239c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	79da      	ldrb	r2, [r3, #7]
 80123a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123a4:	695b      	ldr	r3, [r3, #20]
 80123a6:	3321      	adds	r3, #33	; 0x21
 80123a8:	f042 0201 	orr.w	r2, r2, #1
 80123ac:	b2d2      	uxtb	r2, r2
 80123ae:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 80123b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123b2:	695b      	ldr	r3, [r3, #20]
 80123b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	689b      	ldr	r3, [r3, #8]
 80123bc:	4619      	mov	r1, r3
 80123be:	4610      	mov	r0, r2
 80123c0:	f7fb ff7b 	bl	800e2ba <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 80123c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123c6:	695b      	ldr	r3, [r3, #20]
 80123c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80123d2:	4608      	mov	r0, r1
 80123d4:	f7fb ff9d 	bl	800e312 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 80123d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123da:	695b      	ldr	r3, [r3, #20]
 80123dc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80123e6:	4608      	mov	r0, r1
 80123e8:	f7fb ff93 	bl	800e312 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80123ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123ee:	695b      	ldr	r3, [r3, #20]
 80123f0:	330c      	adds	r3, #12
 80123f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fb ff60 	bl	800e2ba <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80123fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123fc:	695b      	ldr	r3, [r3, #20]
 80123fe:	3315      	adds	r3, #21
 8012400:	2200      	movs	r2, #0
 8012402:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8012404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012406:	695b      	ldr	r3, [r3, #20]
 8012408:	3310      	adds	r3, #16
 801240a:	2100      	movs	r1, #0
 801240c:	4618      	mov	r0, r3
 801240e:	f7fb ff54 	bl	800e2ba <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8012412:	f107 0308 	add.w	r3, r7, #8
 8012416:	4618      	mov	r0, r3
 8012418:	f7fd fed2 	bl	80101c0 <store_xdir>
 801241c:	4603      	mov	r3, r0
 801241e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8012422:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012426:	2b00      	cmp	r3, #0
 8012428:	d15b      	bne.n	80124e2 <f_sync+0x230>
							res = sync_fs(fs);
 801242a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801242c:	4618      	mov	r0, r3
 801242e:	f7fc fa35 	bl	800e89c <sync_fs>
 8012432:	4603      	mov	r3, r0
 8012434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801243e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012442:	b2da      	uxtb	r2, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801244a:	e04a      	b.n	80124e2 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801244c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012452:	4619      	mov	r1, r3
 8012454:	4610      	mov	r0, r2
 8012456:	f7fc f9f3 	bl	800e840 <move_window>
 801245a:	4603      	mov	r3, r0
 801245c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8012460:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012464:	2b00      	cmp	r3, #0
 8012466:	d13c      	bne.n	80124e2 <f_sync+0x230>
					dir = fp->dir_ptr;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801246c:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 801246e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012470:	330b      	adds	r3, #11
 8012472:	781a      	ldrb	r2, [r3, #0]
 8012474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012476:	330b      	adds	r3, #11
 8012478:	f042 0220 	orr.w	r2, r2, #32
 801247c:	b2d2      	uxtb	r2, r2
 801247e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6818      	ldr	r0, [r3, #0]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	689b      	ldr	r3, [r3, #8]
 8012488:	461a      	mov	r2, r3
 801248a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801248c:	f7fd fae3 	bl	800fa56 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012492:	f103 001c 	add.w	r0, r3, #28
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801249c:	4613      	mov	r3, r2
 801249e:	4619      	mov	r1, r3
 80124a0:	f7fb ff0b 	bl	800e2ba <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80124a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124a6:	3316      	adds	r3, #22
 80124a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7fb ff05 	bl	800e2ba <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80124b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124b2:	3312      	adds	r3, #18
 80124b4:	2100      	movs	r1, #0
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7fb fee4 	bl	800e284 <st_word>
					fs->wflag = 1;
 80124bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124be:	2201      	movs	r2, #1
 80124c0:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 80124c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7fc f9e9 	bl	800e89c <sync_fs>
 80124ca:	4603      	mov	r3, r0
 80124cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80124d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80124da:	b2da      	uxtb	r2, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80124e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3768      	adds	r7, #104	; 0x68
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b084      	sub	sp, #16
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f7ff fedb 	bl	80122b2 <f_sync>
 80124fc:	4603      	mov	r3, r0
 80124fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012500:	7bfb      	ldrb	r3, [r7, #15]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d118      	bne.n	8012538 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f107 0208 	add.w	r2, r7, #8
 801250c:	4611      	mov	r1, r2
 801250e:	4618      	mov	r0, r3
 8012510:	f7ff fa26 	bl	8011960 <validate>
 8012514:	4603      	mov	r3, r0
 8012516:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012518:	7bfb      	ldrb	r3, [r7, #15]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d10c      	bne.n	8012538 <f_close+0x4a>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012522:	4618      	mov	r0, r3
 8012524:	f7fc f8f0 	bl	800e708 <dec_share>
 8012528:	4603      	mov	r3, r0
 801252a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 801252c:	7bfb      	ldrb	r3, [r7, #15]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d102      	bne.n	8012538 <f_close+0x4a>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2200      	movs	r2, #0
 8012536:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012538:	7bfb      	ldrb	r3, [r7, #15]
}
 801253a:	4618      	mov	r0, r3
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	460b      	mov	r3, r1
 801254e:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8012550:	2300      	movs	r3, #0
 8012552:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8012554:	4b17      	ldr	r3, [pc, #92]	; (80125b4 <ff_uni2oem+0x70>)
 8012556:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2b7f      	cmp	r3, #127	; 0x7f
 801255c:	d802      	bhi.n	8012564 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	81fb      	strh	r3, [r7, #14]
 8012562:	e01f      	b.n	80125a4 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801256a:	d21b      	bcs.n	80125a4 <ff_uni2oem+0x60>
 801256c:	887b      	ldrh	r3, [r7, #2]
 801256e:	f240 3252 	movw	r2, #850	; 0x352
 8012572:	4293      	cmp	r3, r2
 8012574:	d116      	bne.n	80125a4 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8012576:	2300      	movs	r3, #0
 8012578:	81fb      	strh	r3, [r7, #14]
 801257a:	e002      	b.n	8012582 <ff_uni2oem+0x3e>
 801257c:	89fb      	ldrh	r3, [r7, #14]
 801257e:	3301      	adds	r3, #1
 8012580:	81fb      	strh	r3, [r7, #14]
 8012582:	89fb      	ldrh	r3, [r7, #14]
 8012584:	2b7f      	cmp	r3, #127	; 0x7f
 8012586:	d808      	bhi.n	801259a <ff_uni2oem+0x56>
 8012588:	89fb      	ldrh	r3, [r7, #14]
 801258a:	005b      	lsls	r3, r3, #1
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	4413      	add	r3, r2
 8012590:	881b      	ldrh	r3, [r3, #0]
 8012592:	461a      	mov	r2, r3
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	4293      	cmp	r3, r2
 8012598:	d1f0      	bne.n	801257c <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 801259a:	89fb      	ldrh	r3, [r7, #14]
 801259c:	3380      	adds	r3, #128	; 0x80
 801259e:	b29b      	uxth	r3, r3
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80125a4:	89fb      	ldrh	r3, [r7, #14]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3714      	adds	r7, #20
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop
 80125b4:	0801bfd4 	.word	0x0801bfd4

080125b8 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80125b8:	b480      	push	{r7}
 80125ba:	b085      	sub	sp, #20
 80125bc:	af00      	add	r7, sp, #0
 80125be:	4603      	mov	r3, r0
 80125c0:	460a      	mov	r2, r1
 80125c2:	80fb      	strh	r3, [r7, #6]
 80125c4:	4613      	mov	r3, r2
 80125c6:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 80125c8:	2300      	movs	r3, #0
 80125ca:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 80125cc:	4b0f      	ldr	r3, [pc, #60]	; (801260c <ff_oem2uni+0x54>)
 80125ce:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 80125d0:	88fb      	ldrh	r3, [r7, #6]
 80125d2:	2b7f      	cmp	r3, #127	; 0x7f
 80125d4:	d802      	bhi.n	80125dc <ff_oem2uni+0x24>
		c = oem;
 80125d6:	88fb      	ldrh	r3, [r7, #6]
 80125d8:	81fb      	strh	r3, [r7, #14]
 80125da:	e00f      	b.n	80125fc <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 80125dc:	88bb      	ldrh	r3, [r7, #4]
 80125de:	f240 3252 	movw	r2, #850	; 0x352
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d10a      	bne.n	80125fc <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 80125e6:	88fb      	ldrh	r3, [r7, #6]
 80125e8:	2bff      	cmp	r3, #255	; 0xff
 80125ea:	d807      	bhi.n	80125fc <ff_oem2uni+0x44>
 80125ec:	88fa      	ldrh	r2, [r7, #6]
 80125ee:	4b08      	ldr	r3, [pc, #32]	; (8012610 <ff_oem2uni+0x58>)
 80125f0:	4413      	add	r3, r2
 80125f2:	005b      	lsls	r3, r3, #1
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	4413      	add	r3, r2
 80125f8:	881b      	ldrh	r3, [r3, #0]
 80125fa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80125fc:	89fb      	ldrh	r3, [r7, #14]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3714      	adds	r7, #20
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop
 801260c:	0801bfd4 	.word	0x0801bfd4
 8012610:	7fffff80 	.word	0x7fffff80

08012614 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8012614:	b480      	push	{r7}
 8012616:	b087      	sub	sp, #28
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012622:	d27d      	bcs.n	8012720 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8012628:	8a7b      	ldrh	r3, [r7, #18]
 801262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801262e:	d201      	bcs.n	8012634 <ff_wtoupper+0x20>
 8012630:	4b3f      	ldr	r3, [pc, #252]	; (8012730 <ff_wtoupper+0x11c>)
 8012632:	e000      	b.n	8012636 <ff_wtoupper+0x22>
 8012634:	4b3f      	ldr	r3, [pc, #252]	; (8012734 <ff_wtoupper+0x120>)
 8012636:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	1c9a      	adds	r2, r3, #2
 801263c:	617a      	str	r2, [r7, #20]
 801263e:	881b      	ldrh	r3, [r3, #0]
 8012640:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8012642:	8a3b      	ldrh	r3, [r7, #16]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d069      	beq.n	801271c <ff_wtoupper+0x108>
 8012648:	8a7a      	ldrh	r2, [r7, #18]
 801264a:	8a3b      	ldrh	r3, [r7, #16]
 801264c:	429a      	cmp	r2, r3
 801264e:	d365      	bcc.n	801271c <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	1c9a      	adds	r2, r3, #2
 8012654:	617a      	str	r2, [r7, #20]
 8012656:	881b      	ldrh	r3, [r3, #0]
 8012658:	81fb      	strh	r3, [r7, #14]
 801265a:	89fb      	ldrh	r3, [r7, #14]
 801265c:	0a1b      	lsrs	r3, r3, #8
 801265e:	81bb      	strh	r3, [r7, #12]
 8012660:	89fb      	ldrh	r3, [r7, #14]
 8012662:	b2db      	uxtb	r3, r3
 8012664:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 8012666:	8a7a      	ldrh	r2, [r7, #18]
 8012668:	8a39      	ldrh	r1, [r7, #16]
 801266a:	89fb      	ldrh	r3, [r7, #14]
 801266c:	440b      	add	r3, r1
 801266e:	429a      	cmp	r2, r3
 8012670:	da4a      	bge.n	8012708 <ff_wtoupper+0xf4>
				switch (cmd) {
 8012672:	89bb      	ldrh	r3, [r7, #12]
 8012674:	2b08      	cmp	r3, #8
 8012676:	d850      	bhi.n	801271a <ff_wtoupper+0x106>
 8012678:	a201      	add	r2, pc, #4	; (adr r2, 8012680 <ff_wtoupper+0x6c>)
 801267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801267e:	bf00      	nop
 8012680:	080126a5 	.word	0x080126a5
 8012684:	080126b7 	.word	0x080126b7
 8012688:	080126cd 	.word	0x080126cd
 801268c:	080126d5 	.word	0x080126d5
 8012690:	080126dd 	.word	0x080126dd
 8012694:	080126e5 	.word	0x080126e5
 8012698:	080126ed 	.word	0x080126ed
 801269c:	080126f5 	.word	0x080126f5
 80126a0:	080126fd 	.word	0x080126fd
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 80126a4:	8a7a      	ldrh	r2, [r7, #18]
 80126a6:	8a3b      	ldrh	r3, [r7, #16]
 80126a8:	1ad3      	subs	r3, r2, r3
 80126aa:	005b      	lsls	r3, r3, #1
 80126ac:	697a      	ldr	r2, [r7, #20]
 80126ae:	4413      	add	r3, r2
 80126b0:	881b      	ldrh	r3, [r3, #0]
 80126b2:	827b      	strh	r3, [r7, #18]
 80126b4:	e027      	b.n	8012706 <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 80126b6:	8a7a      	ldrh	r2, [r7, #18]
 80126b8:	8a3b      	ldrh	r3, [r7, #16]
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	b29b      	uxth	r3, r3
 80126be:	f003 0301 	and.w	r3, r3, #1
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	8a7a      	ldrh	r2, [r7, #18]
 80126c6:	1ad3      	subs	r3, r2, r3
 80126c8:	827b      	strh	r3, [r7, #18]
 80126ca:	e01c      	b.n	8012706 <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 80126cc:	8a7b      	ldrh	r3, [r7, #18]
 80126ce:	3b10      	subs	r3, #16
 80126d0:	827b      	strh	r3, [r7, #18]
 80126d2:	e018      	b.n	8012706 <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 80126d4:	8a7b      	ldrh	r3, [r7, #18]
 80126d6:	3b20      	subs	r3, #32
 80126d8:	827b      	strh	r3, [r7, #18]
 80126da:	e014      	b.n	8012706 <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80126dc:	8a7b      	ldrh	r3, [r7, #18]
 80126de:	3b30      	subs	r3, #48	; 0x30
 80126e0:	827b      	strh	r3, [r7, #18]
 80126e2:	e010      	b.n	8012706 <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80126e4:	8a7b      	ldrh	r3, [r7, #18]
 80126e6:	3b1a      	subs	r3, #26
 80126e8:	827b      	strh	r3, [r7, #18]
 80126ea:	e00c      	b.n	8012706 <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 80126ec:	8a7b      	ldrh	r3, [r7, #18]
 80126ee:	3308      	adds	r3, #8
 80126f0:	827b      	strh	r3, [r7, #18]
 80126f2:	e008      	b.n	8012706 <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 80126f4:	8a7b      	ldrh	r3, [r7, #18]
 80126f6:	3b50      	subs	r3, #80	; 0x50
 80126f8:	827b      	strh	r3, [r7, #18]
 80126fa:	e004      	b.n	8012706 <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 80126fc:	8a7b      	ldrh	r3, [r7, #18]
 80126fe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8012702:	827b      	strh	r3, [r7, #18]
 8012704:	bf00      	nop
				}
				break;
 8012706:	e008      	b.n	801271a <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8012708:	89bb      	ldrh	r3, [r7, #12]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d194      	bne.n	8012638 <ff_wtoupper+0x24>
 801270e:	89fb      	ldrh	r3, [r7, #14]
 8012710:	005b      	lsls	r3, r3, #1
 8012712:	697a      	ldr	r2, [r7, #20]
 8012714:	4413      	add	r3, r2
 8012716:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8012718:	e78e      	b.n	8012638 <ff_wtoupper+0x24>
				break;
 801271a:	bf00      	nop
		}
		uni = uc;
 801271c:	8a7b      	ldrh	r3, [r7, #18]
 801271e:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8012720:	687b      	ldr	r3, [r7, #4]
}
 8012722:	4618      	mov	r0, r3
 8012724:	371c      	adds	r7, #28
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop
 8012730:	0801c0d4 	.word	0x0801c0d4
 8012734:	0801c2c8 	.word	0x0801c2c8

08012738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8012738:	b480      	push	{r7}
 801273a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801273c:	4b3d      	ldr	r3, [pc, #244]	; (8012834 <SystemInit+0xfc>)
 801273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012742:	4a3c      	ldr	r2, [pc, #240]	; (8012834 <SystemInit+0xfc>)
 8012744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 801274c:	4b39      	ldr	r3, [pc, #228]	; (8012834 <SystemInit+0xfc>)
 801274e:	691b      	ldr	r3, [r3, #16]
 8012750:	4a38      	ldr	r2, [pc, #224]	; (8012834 <SystemInit+0xfc>)
 8012752:	f043 0310 	orr.w	r3, r3, #16
 8012756:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8012758:	4b37      	ldr	r3, [pc, #220]	; (8012838 <SystemInit+0x100>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f003 030f 	and.w	r3, r3, #15
 8012760:	2b06      	cmp	r3, #6
 8012762:	d807      	bhi.n	8012774 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8012764:	4b34      	ldr	r3, [pc, #208]	; (8012838 <SystemInit+0x100>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f023 030f 	bic.w	r3, r3, #15
 801276c:	4a32      	ldr	r2, [pc, #200]	; (8012838 <SystemInit+0x100>)
 801276e:	f043 0307 	orr.w	r3, r3, #7
 8012772:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8012774:	4b31      	ldr	r3, [pc, #196]	; (801283c <SystemInit+0x104>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	4a30      	ldr	r2, [pc, #192]	; (801283c <SystemInit+0x104>)
 801277a:	f043 0301 	orr.w	r3, r3, #1
 801277e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012780:	4b2e      	ldr	r3, [pc, #184]	; (801283c <SystemInit+0x104>)
 8012782:	2200      	movs	r2, #0
 8012784:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8012786:	4b2d      	ldr	r3, [pc, #180]	; (801283c <SystemInit+0x104>)
 8012788:	681a      	ldr	r2, [r3, #0]
 801278a:	492c      	ldr	r1, [pc, #176]	; (801283c <SystemInit+0x104>)
 801278c:	4b2c      	ldr	r3, [pc, #176]	; (8012840 <SystemInit+0x108>)
 801278e:	4013      	ands	r3, r2
 8012790:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8012792:	4b29      	ldr	r3, [pc, #164]	; (8012838 <SystemInit+0x100>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	f003 0308 	and.w	r3, r3, #8
 801279a:	2b00      	cmp	r3, #0
 801279c:	d007      	beq.n	80127ae <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 801279e:	4b26      	ldr	r3, [pc, #152]	; (8012838 <SystemInit+0x100>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	f023 030f 	bic.w	r3, r3, #15
 80127a6:	4a24      	ldr	r2, [pc, #144]	; (8012838 <SystemInit+0x100>)
 80127a8:	f043 0307 	orr.w	r3, r3, #7
 80127ac:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80127ae:	4b23      	ldr	r3, [pc, #140]	; (801283c <SystemInit+0x104>)
 80127b0:	2200      	movs	r2, #0
 80127b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80127b4:	4b21      	ldr	r3, [pc, #132]	; (801283c <SystemInit+0x104>)
 80127b6:	2200      	movs	r2, #0
 80127b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80127ba:	4b20      	ldr	r3, [pc, #128]	; (801283c <SystemInit+0x104>)
 80127bc:	2200      	movs	r2, #0
 80127be:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80127c0:	4b1e      	ldr	r3, [pc, #120]	; (801283c <SystemInit+0x104>)
 80127c2:	4a20      	ldr	r2, [pc, #128]	; (8012844 <SystemInit+0x10c>)
 80127c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80127c6:	4b1d      	ldr	r3, [pc, #116]	; (801283c <SystemInit+0x104>)
 80127c8:	4a1f      	ldr	r2, [pc, #124]	; (8012848 <SystemInit+0x110>)
 80127ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80127cc:	4b1b      	ldr	r3, [pc, #108]	; (801283c <SystemInit+0x104>)
 80127ce:	4a1f      	ldr	r2, [pc, #124]	; (801284c <SystemInit+0x114>)
 80127d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80127d2:	4b1a      	ldr	r3, [pc, #104]	; (801283c <SystemInit+0x104>)
 80127d4:	2200      	movs	r2, #0
 80127d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80127d8:	4b18      	ldr	r3, [pc, #96]	; (801283c <SystemInit+0x104>)
 80127da:	4a1c      	ldr	r2, [pc, #112]	; (801284c <SystemInit+0x114>)
 80127dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80127de:	4b17      	ldr	r3, [pc, #92]	; (801283c <SystemInit+0x104>)
 80127e0:	2200      	movs	r2, #0
 80127e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80127e4:	4b15      	ldr	r3, [pc, #84]	; (801283c <SystemInit+0x104>)
 80127e6:	4a19      	ldr	r2, [pc, #100]	; (801284c <SystemInit+0x114>)
 80127e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80127ea:	4b14      	ldr	r3, [pc, #80]	; (801283c <SystemInit+0x104>)
 80127ec:	2200      	movs	r2, #0
 80127ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80127f0:	4b12      	ldr	r3, [pc, #72]	; (801283c <SystemInit+0x104>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4a11      	ldr	r2, [pc, #68]	; (801283c <SystemInit+0x104>)
 80127f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80127fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80127fc:	4b0f      	ldr	r3, [pc, #60]	; (801283c <SystemInit+0x104>)
 80127fe:	2200      	movs	r2, #0
 8012800:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8012802:	4b13      	ldr	r3, [pc, #76]	; (8012850 <SystemInit+0x118>)
 8012804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012806:	4a12      	ldr	r2, [pc, #72]	; (8012850 <SystemInit+0x118>)
 8012808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801280c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801280e:	4b11      	ldr	r3, [pc, #68]	; (8012854 <SystemInit+0x11c>)
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	4b11      	ldr	r3, [pc, #68]	; (8012858 <SystemInit+0x120>)
 8012814:	4013      	ands	r3, r2
 8012816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801281a:	d202      	bcs.n	8012822 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 801281c:	4b0f      	ldr	r3, [pc, #60]	; (801285c <SystemInit+0x124>)
 801281e:	2201      	movs	r2, #1
 8012820:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8012822:	4b0f      	ldr	r3, [pc, #60]	; (8012860 <SystemInit+0x128>)
 8012824:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8012828:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 801282a:	bf00      	nop
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr
 8012834:	e000ed00 	.word	0xe000ed00
 8012838:	52002000 	.word	0x52002000
 801283c:	58024400 	.word	0x58024400
 8012840:	eaf6ed7f 	.word	0xeaf6ed7f
 8012844:	02020200 	.word	0x02020200
 8012848:	01ff0000 	.word	0x01ff0000
 801284c:	01010280 	.word	0x01010280
 8012850:	580000c0 	.word	0x580000c0
 8012854:	5c001000 	.word	0x5c001000
 8012858:	ffff0000 	.word	0xffff0000
 801285c:	51008108 	.word	0x51008108
 8012860:	52004000 	.word	0x52004000

08012864 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 801286c:	2300      	movs	r3, #0
 801286e:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	3310      	adds	r3, #16
 8012874:	4618      	mov	r0, r3
 8012876:	f002 fb1c 	bl	8014eb2 <tu_fifo_remaining>
 801287a:	4603      	mov	r3, r0
 801287c:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 801287e:	89bb      	ldrh	r3, [r7, #12]
 8012880:	2b3f      	cmp	r3, #63	; 0x3f
 8012882:	d801      	bhi.n	8012888 <_prep_out_transaction+0x24>
 8012884:	2300      	movs	r3, #0
 8012886:	e02b      	b.n	80128e0 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	78da      	ldrb	r2, [r3, #3]
 801288c:	7bfb      	ldrb	r3, [r7, #15]
 801288e:	4611      	mov	r1, r2
 8012890:	4618      	mov	r0, r3
 8012892:	f003 fde7 	bl	8016464 <usbd_edpt_claim>
 8012896:	4603      	mov	r3, r0
 8012898:	f083 0301 	eor.w	r3, r3, #1
 801289c:	b2db      	uxtb	r3, r3
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d001      	beq.n	80128a6 <_prep_out_transaction+0x42>
 80128a2:	2300      	movs	r3, #0
 80128a4:	e01c      	b.n	80128e0 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	3310      	adds	r3, #16
 80128aa:	4618      	mov	r0, r3
 80128ac:	f002 fb01 	bl	8014eb2 <tu_fifo_remaining>
 80128b0:	4603      	mov	r3, r0
 80128b2:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 80128b4:	89bb      	ldrh	r3, [r7, #12]
 80128b6:	2b3f      	cmp	r3, #63	; 0x3f
 80128b8:	d90a      	bls.n	80128d0 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	78d9      	ldrb	r1, [r3, #3]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80128c4:	7bf8      	ldrb	r0, [r7, #15]
 80128c6:	2340      	movs	r3, #64	; 0x40
 80128c8:	f003 fe20 	bl	801650c <usbd_edpt_xfer>
 80128cc:	4603      	mov	r3, r0
 80128ce:	e007      	b.n	80128e0 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	78da      	ldrb	r2, [r3, #3]
 80128d4:	7bfb      	ldrb	r3, [r7, #15]
 80128d6:	4611      	mov	r1, r2
 80128d8:	4618      	mov	r0, r3
 80128da:	f003 fded 	bl	80164b8 <usbd_edpt_release>

    return false;
 80128de:	2300      	movs	r3, #0
  }
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3710      	adds	r7, #16
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	4603      	mov	r3, r0
 80128f0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80128f2:	79fb      	ldrb	r3, [r7, #7]
 80128f4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80128f8:	fb02 f303 	mul.w	r3, r2, r3
 80128fc:	3310      	adds	r3, #16
 80128fe:	4a05      	ldr	r2, [pc, #20]	; (8012914 <tud_cdc_n_available+0x2c>)
 8012900:	4413      	add	r3, r2
 8012902:	4618      	mov	r0, r3
 8012904:	f002 fa60 	bl	8014dc8 <tu_fifo_count>
 8012908:	4603      	mov	r3, r0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	240009b8 	.word	0x240009b8

08012918 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af00      	add	r7, sp, #0
 801291e:	4603      	mov	r3, r0
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
 8012924:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8012926:	7bfb      	ldrb	r3, [r7, #15]
 8012928:	f44f 7294 	mov.w	r2, #296	; 0x128
 801292c:	fb02 f303 	mul.w	r3, r2, r3
 8012930:	4a0a      	ldr	r2, [pc, #40]	; (801295c <tud_cdc_n_read+0x44>)
 8012932:	4413      	add	r3, r2
 8012934:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	3310      	adds	r3, #16
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	b292      	uxth	r2, r2
 801293e:	68b9      	ldr	r1, [r7, #8]
 8012940:	4618      	mov	r0, r3
 8012942:	f002 fb12 	bl	8014f6a <tu_fifo_read_n>
 8012946:	4603      	mov	r3, r0
 8012948:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 801294a:	6978      	ldr	r0, [r7, #20]
 801294c:	f7ff ff8a 	bl	8012864 <_prep_out_transaction>
  return num_read;
 8012950:	693b      	ldr	r3, [r7, #16]
}
 8012952:	4618      	mov	r0, r3
 8012954:	3718      	adds	r7, #24
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	240009b8 	.word	0x240009b8

08012960 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	4603      	mov	r3, r0
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
 801296c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 801296e:	7bfb      	ldrb	r3, [r7, #15]
 8012970:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012974:	fb02 f303 	mul.w	r3, r2, r3
 8012978:	4a0e      	ldr	r2, [pc, #56]	; (80129b4 <tud_cdc_n_write+0x54>)
 801297a:	4413      	add	r3, r2
 801297c:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	331c      	adds	r3, #28
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	b292      	uxth	r2, r2
 8012986:	68b9      	ldr	r1, [r7, #8]
 8012988:	4618      	mov	r0, r3
 801298a:	f002 fb55 	bl	8015038 <tu_fifo_write_n>
 801298e:	4603      	mov	r3, r0
 8012990:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	331c      	adds	r3, #28
 8012996:	4618      	mov	r0, r3
 8012998:	f002 fa16 	bl	8014dc8 <tu_fifo_count>
 801299c:	4603      	mov	r3, r0
 801299e:	2b3f      	cmp	r3, #63	; 0x3f
 80129a0:	d903      	bls.n	80129aa <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 80129a2:	7bfb      	ldrb	r3, [r7, #15]
 80129a4:	4618      	mov	r0, r3
 80129a6:	f000 f807 	bl	80129b8 <tud_cdc_n_write_flush>
  }

  return ret;
 80129aa:	8a7b      	ldrh	r3, [r7, #18]
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3718      	adds	r7, #24
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	240009b8 	.word	0x240009b8

080129b8 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b086      	sub	sp, #24
 80129bc:	af00      	add	r7, sp, #0
 80129be:	4603      	mov	r3, r0
 80129c0:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80129c2:	79fb      	ldrb	r3, [r7, #7]
 80129c4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80129c8:	fb02 f303 	mul.w	r3, r2, r3
 80129cc:	4a36      	ldr	r2, [pc, #216]	; (8012aa8 <tud_cdc_n_write_flush+0xf0>)
 80129ce:	4413      	add	r3, r2
 80129d0:	617b      	str	r3, [r7, #20]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 80129d2:	f002 fbaf 	bl	8015134 <tud_mounted>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d009      	beq.n	80129f0 <tud_cdc_n_write_flush+0x38>
 80129dc:	f002 fbbc 	bl	8015158 <tud_suspended>
 80129e0:	4603      	mov	r3, r0
 80129e2:	f083 0301 	eor.w	r3, r3, #1
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d001      	beq.n	80129f0 <tud_cdc_n_write_flush+0x38>
 80129ec:	2301      	movs	r3, #1
 80129ee:	e000      	b.n	80129f2 <tud_cdc_n_write_flush+0x3a>
 80129f0:	2300      	movs	r3, #0
 80129f2:	f003 0301 	and.w	r3, r3, #1
 80129f6:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 80129f8:	f083 0301 	eor.w	r3, r3, #1
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d001      	beq.n	8012a06 <tud_cdc_n_write_flush+0x4e>
 8012a02:	2300      	movs	r3, #0
 8012a04:	e04c      	b.n	8012aa0 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	331c      	adds	r3, #28
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f002 f9dc 	bl	8014dc8 <tu_fifo_count>
 8012a10:	4603      	mov	r3, r0
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d101      	bne.n	8012a1a <tud_cdc_n_write_flush+0x62>
 8012a16:	2300      	movs	r3, #0
 8012a18:	e042      	b.n	8012aa0 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	789a      	ldrb	r2, [r3, #2]
 8012a22:	7cfb      	ldrb	r3, [r7, #19]
 8012a24:	4611      	mov	r1, r2
 8012a26:	4618      	mov	r0, r3
 8012a28:	f003 fd1c 	bl	8016464 <usbd_edpt_claim>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	f083 0301 	eor.w	r3, r3, #1
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d001      	beq.n	8012a3c <tud_cdc_n_write_flush+0x84>
 8012a38:	2300      	movs	r3, #0
 8012a3a:	e031      	b.n	8012aa0 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	f103 001c 	add.w	r0, r3, #28
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	33e8      	adds	r3, #232	; 0xe8
 8012a46:	2240      	movs	r2, #64	; 0x40
 8012a48:	4619      	mov	r1, r3
 8012a4a:	f002 fa8e 	bl	8014f6a <tu_fifo_read_n>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	823b      	strh	r3, [r7, #16]

  if ( count )
 8012a52:	8a3b      	ldrh	r3, [r7, #16]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d01b      	beq.n	8012a90 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	7899      	ldrb	r1, [r3, #2]
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8012a62:	8a3b      	ldrh	r3, [r7, #16]
 8012a64:	7cf8      	ldrb	r0, [r7, #19]
 8012a66:	f003 fd51 	bl	801650c <usbd_edpt_xfer>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	f083 0301 	eor.w	r3, r3, #1
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d00a      	beq.n	8012a8c <tud_cdc_n_write_flush+0xd4>
 8012a76:	4b0d      	ldr	r3, [pc, #52]	; (8012aac <tud_cdc_n_write_flush+0xf4>)
 8012a78:	60fb      	str	r3, [r7, #12]
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	f003 0301 	and.w	r3, r3, #1
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d000      	beq.n	8012a88 <tud_cdc_n_write_flush+0xd0>
 8012a86:	be00      	bkpt	0x0000
 8012a88:	2300      	movs	r3, #0
 8012a8a:	e009      	b.n	8012aa0 <tud_cdc_n_write_flush+0xe8>
    return count;
 8012a8c:	8a3b      	ldrh	r3, [r7, #16]
 8012a8e:	e007      	b.n	8012aa0 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	789a      	ldrb	r2, [r3, #2]
 8012a94:	7cfb      	ldrb	r3, [r7, #19]
 8012a96:	4611      	mov	r1, r2
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f003 fd0d 	bl	80164b8 <usbd_edpt_release>
    return 0;
 8012a9e:	2300      	movs	r3, #0
  }
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3718      	adds	r7, #24
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	240009b8 	.word	0x240009b8
 8012aac:	e000edf0 	.word	0xe000edf0

08012ab0 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b084      	sub	sp, #16
 8012ab4:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8012ab6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012aba:	2100      	movs	r1, #0
 8012abc:	4820      	ldr	r0, [pc, #128]	; (8012b40 <cdcd_init+0x90>)
 8012abe:	f005 fffc 	bl	8018aba <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	71fb      	strb	r3, [r7, #7]
 8012ac6:	e032      	b.n	8012b2e <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8012ac8:	79fb      	ldrb	r3, [r7, #7]
 8012aca:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012ace:	fb02 f303 	mul.w	r3, r2, r3
 8012ad2:	4a1b      	ldr	r2, [pc, #108]	; (8012b40 <cdcd_init+0x90>)
 8012ad4:	4413      	add	r3, r2
 8012ad6:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	22ff      	movs	r2, #255	; 0xff
 8012adc:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012ae4:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2200      	movs	r2, #0
 8012af0:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	2208      	movs	r2, #8
 8012af6:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	f103 0010 	add.w	r0, r3, #16
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8012b04:	2300      	movs	r3, #0
 8012b06:	9300      	str	r3, [sp, #0]
 8012b08:	2301      	movs	r3, #1
 8012b0a:	2240      	movs	r2, #64	; 0x40
 8012b0c:	f001 fcca 	bl	80144a4 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	f103 001c 	add.w	r0, r3, #28
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	2301      	movs	r3, #1
 8012b22:	2240      	movs	r2, #64	; 0x40
 8012b24:	f001 fcbe 	bl	80144a4 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8012b28:	79fb      	ldrb	r3, [r7, #7]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	71fb      	strb	r3, [r7, #7]
 8012b2e:	79fb      	ldrb	r3, [r7, #7]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d0c9      	beq.n	8012ac8 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 8012b34:	bf00      	nop
 8012b36:	bf00      	nop
 8012b38:	3708      	adds	r7, #8
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	240009b8 	.word	0x240009b8

08012b44 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8012b4e:	2300      	movs	r3, #0
 8012b50:	73fb      	strb	r3, [r7, #15]
 8012b52:	e01f      	b.n	8012b94 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8012b54:	7bfb      	ldrb	r3, [r7, #15]
 8012b56:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012b5a:	fb02 f303 	mul.w	r3, r2, r3
 8012b5e:	4a11      	ldr	r2, [pc, #68]	; (8012ba4 <cdcd_reset+0x60>)
 8012b60:	4413      	add	r3, r2
 8012b62:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8012b64:	2205      	movs	r2, #5
 8012b66:	2100      	movs	r1, #0
 8012b68:	68b8      	ldr	r0, [r7, #8]
 8012b6a:	f005 ffa6 	bl	8018aba <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	3310      	adds	r3, #16
 8012b72:	4618      	mov	r0, r3
 8012b74:	f002 fa84 	bl	8015080 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	331c      	adds	r3, #28
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f002 fa7f 	bl	8015080 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	331c      	adds	r3, #28
 8012b86:	2101      	movs	r1, #1
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f002 fa8a 	bl	80150a2 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8012b8e:	7bfb      	ldrb	r3, [r7, #15]
 8012b90:	3301      	adds	r3, #1
 8012b92:	73fb      	strb	r3, [r7, #15]
 8012b94:	7bfb      	ldrb	r3, [r7, #15]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d0dc      	beq.n	8012b54 <cdcd_reset+0x10>
  }
}
 8012b9a:	bf00      	nop
 8012b9c:	bf00      	nop
 8012b9e:	3710      	adds	r7, #16
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	240009b8 	.word	0x240009b8

08012ba8 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b09a      	sub	sp, #104	; 0x68
 8012bac:	af02      	add	r7, sp, #8
 8012bae:	4603      	mov	r3, r0
 8012bb0:	6039      	str	r1, [r7, #0]
 8012bb2:	71fb      	strb	r3, [r7, #7]
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	795b      	ldrb	r3, [r3, #5]
 8012bbc:	2b02      	cmp	r3, #2
 8012bbe:	d103      	bne.n	8012bc8 <cdcd_open+0x20>
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	799b      	ldrb	r3, [r3, #6]
 8012bc4:	2b02      	cmp	r3, #2
 8012bc6:	d001      	beq.n	8012bcc <cdcd_open+0x24>
 8012bc8:	2300      	movs	r3, #0
 8012bca:	e0e1      	b.n	8012d90 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8012bd6:	e01a      	b.n	8012c0e <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8012bd8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8012bdc:	4a6e      	ldr	r2, [pc, #440]	; (8012d98 <cdcd_open+0x1f0>)
 8012bde:	f44f 7194 	mov.w	r1, #296	; 0x128
 8012be2:	fb01 f303 	mul.w	r3, r1, r3
 8012be6:	4413      	add	r3, r2
 8012be8:	3302      	adds	r3, #2
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d109      	bne.n	8012c04 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8012bf0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8012bf4:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012bf8:	fb02 f303 	mul.w	r3, r2, r3
 8012bfc:	4a66      	ldr	r2, [pc, #408]	; (8012d98 <cdcd_open+0x1f0>)
 8012bfe:	4413      	add	r3, r2
 8012c00:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8012c02:	e008      	b.n	8012c16 <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8012c04:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8012c08:	3301      	adds	r3, #1
 8012c0a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8012c0e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d0e0      	beq.n	8012bd8 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8012c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d10a      	bne.n	8012c32 <cdcd_open+0x8a>
 8012c1c:	4b5f      	ldr	r3, [pc, #380]	; (8012d9c <cdcd_open+0x1f4>)
 8012c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8012c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f003 0301 	and.w	r3, r3, #1
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d000      	beq.n	8012c2e <cdcd_open+0x86>
 8012c2c:	be00      	bkpt	0x0000
 8012c2e:	2300      	movs	r3, #0
 8012c30:	e0ae      	b.n	8012d90 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	789a      	ldrb	r2, [r3, #2]
 8012c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c38:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8012c3a:	2309      	movs	r3, #9
 8012c3c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	643b      	str	r3, [r7, #64]	; 0x40
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8012c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c50:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8012c52:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8012c54:	e013      	b.n	8012c7e <cdcd_open+0xd6>
 8012c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c58:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8012c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c5c:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8012c5e:	b29a      	uxth	r2, r3
 8012c60:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8012c64:	4413      	add	r3, r2
 8012c66:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8012c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8012c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c70:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	461a      	mov	r2, r3
 8012c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c7a:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8012c7c:	657b      	str	r3, [r7, #84]	; 0x54
 8012c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8012c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c84:	3301      	adds	r3, #1
 8012c86:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8012c88:	2b24      	cmp	r3, #36	; 0x24
 8012c8a:	d104      	bne.n	8012c96 <cdcd_open+0xee>
 8012c8c:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8012c90:	88bb      	ldrh	r3, [r7, #4]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d9df      	bls.n	8012c56 <cdcd_open+0xae>
 8012c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8012ca0:	2b05      	cmp	r3, #5
 8012ca2:	d12f      	bne.n	8012d04 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8012ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ca6:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8012ca8:	79fb      	ldrb	r3, [r7, #7]
 8012caa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012cac:	4618      	mov	r0, r3
 8012cae:	f003 fb95 	bl	80163dc <usbd_edpt_open>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	f083 0301 	eor.w	r3, r3, #1
 8012cb8:	b2db      	uxtb	r3, r3
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d00a      	beq.n	8012cd4 <cdcd_open+0x12c>
 8012cbe:	4b37      	ldr	r3, [pc, #220]	; (8012d9c <cdcd_open+0x1f4>)
 8012cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f003 0301 	and.w	r3, r3, #1
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d000      	beq.n	8012cd0 <cdcd_open+0x128>
 8012cce:	be00      	bkpt	0x0000
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	e05d      	b.n	8012d90 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8012cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cd6:	789a      	ldrb	r2, [r3, #2]
 8012cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012cda:	705a      	strb	r2, [r3, #1]
 8012cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cde:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8012cea:	4413      	add	r3, r2
 8012cec:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8012cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8012cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf6:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012cf8:	6a3b      	ldr	r3, [r7, #32]
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	6a3b      	ldr	r3, [r7, #32]
 8012d00:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8012d02:	657b      	str	r3, [r7, #84]	; 0x54
 8012d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d06:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8012d0e:	2b04      	cmp	r3, #4
 8012d10:	d139      	bne.n	8012d86 <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8012d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d14:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8012d16:	2b0a      	cmp	r3, #10
 8012d18:	d135      	bne.n	8012d86 <cdcd_open+0x1de>
 8012d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d1c:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8012d22:	b29a      	uxth	r2, r3
 8012d24:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8012d28:	4413      	add	r3, r2
 8012d2a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8012d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d30:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8012d40:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8012d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d44:	3303      	adds	r3, #3
 8012d46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012d48:	3202      	adds	r2, #2
 8012d4a:	79f8      	ldrb	r0, [r7, #7]
 8012d4c:	9201      	str	r2, [sp, #4]
 8012d4e:	9300      	str	r3, [sp, #0]
 8012d50:	2302      	movs	r3, #2
 8012d52:	2202      	movs	r2, #2
 8012d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012d56:	f003 fad9 	bl	801630c <usbd_open_edpt_pair>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	f083 0301 	eor.w	r3, r3, #1
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d00a      	beq.n	8012d7c <cdcd_open+0x1d4>
 8012d66:	4b0d      	ldr	r3, [pc, #52]	; (8012d9c <cdcd_open+0x1f4>)
 8012d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f003 0301 	and.w	r3, r3, #1
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d000      	beq.n	8012d78 <cdcd_open+0x1d0>
 8012d76:	be00      	bkpt	0x0000
 8012d78:	2300      	movs	r3, #0
 8012d7a:	e009      	b.n	8012d90 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8012d7c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8012d80:	330e      	adds	r3, #14
 8012d82:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8012d86:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012d88:	f7ff fd6c 	bl	8012864 <_prep_out_transaction>

  return drv_len;
 8012d8c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3760      	adds	r7, #96	; 0x60
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	240009b8 	.word	0x240009b8
 8012d9c:	e000edf0 	.word	0xe000edf0

08012da0 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b08a      	sub	sp, #40	; 0x28
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	4603      	mov	r3, r0
 8012da8:	603a      	str	r2, [r7, #0]
 8012daa:	71fb      	strb	r3, [r7, #7]
 8012dac:	460b      	mov	r3, r1
 8012dae:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012db8:	b2db      	uxtb	r3, r3
 8012dba:	2b20      	cmp	r3, #32
 8012dbc:	d001      	beq.n	8012dc2 <cdcd_control_xfer_cb+0x22>
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	e0cf      	b.n	8012f62 <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8012dc8:	4b68      	ldr	r3, [pc, #416]	; (8012f6c <cdcd_control_xfer_cb+0x1cc>)
 8012dca:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8012dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d001      	beq.n	8012dd8 <cdcd_control_xfer_cb+0x38>
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	e0c4      	b.n	8012f62 <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8012dd8:	6a3b      	ldr	r3, [r7, #32]
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	889b      	ldrh	r3, [r3, #4]
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d009      	beq.n	8012dfc <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8012de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012dec:	3301      	adds	r3, #1
 8012dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012df2:	6a3b      	ldr	r3, [r7, #32]
 8012df4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8012df8:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8012dfa:	e7e7      	b.n	8012dcc <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8012dfc:	bf00      	nop
  }

  switch ( request->bRequest )
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	785b      	ldrb	r3, [r3, #1]
 8012e02:	3b20      	subs	r3, #32
 8012e04:	2b03      	cmp	r3, #3
 8012e06:	f200 80a2 	bhi.w	8012f4e <cdcd_control_xfer_cb+0x1ae>
 8012e0a:	a201      	add	r2, pc, #4	; (adr r2, 8012e10 <cdcd_control_xfer_cb+0x70>)
 8012e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e10:	08012e21 	.word	0x08012e21
 8012e14:	08012e5d 	.word	0x08012e5d
 8012e18:	08012e75 	.word	0x08012e75
 8012e1c:	08012f1d 	.word	0x08012f1d
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8012e20:	79bb      	ldrb	r3, [r7, #6]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d108      	bne.n	8012e38 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8012e26:	6a3b      	ldr	r3, [r7, #32]
 8012e28:	f103 0208 	add.w	r2, r3, #8
 8012e2c:	79f8      	ldrb	r0, [r7, #7]
 8012e2e:	2307      	movs	r3, #7
 8012e30:	6839      	ldr	r1, [r7, #0]
 8012e32:	f003 fd63 	bl	80168fc <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8012e36:	e08c      	b.n	8012f52 <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 8012e38:	79bb      	ldrb	r3, [r7, #6]
 8012e3a:	2b03      	cmp	r3, #3
 8012e3c:	f040 8089 	bne.w	8012f52 <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8012e40:	4b4b      	ldr	r3, [pc, #300]	; (8012f70 <cdcd_control_xfer_cb+0x1d0>)
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	f000 8085 	beq.w	8012f52 <cdcd_control_xfer_cb+0x1b2>
 8012e48:	6a3b      	ldr	r3, [r7, #32]
 8012e4a:	f103 0208 	add.w	r2, r3, #8
 8012e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e52:	4611      	mov	r1, r2
 8012e54:	4618      	mov	r0, r3
 8012e56:	f3af 8000 	nop.w
    break;
 8012e5a:	e07a      	b.n	8012f52 <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8012e5c:	79bb      	ldrb	r3, [r7, #6]
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	d179      	bne.n	8012f56 <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8012e62:	6a3b      	ldr	r3, [r7, #32]
 8012e64:	f103 0208 	add.w	r2, r3, #8
 8012e68:	79f8      	ldrb	r0, [r7, #7]
 8012e6a:	2307      	movs	r3, #7
 8012e6c:	6839      	ldr	r1, [r7, #0]
 8012e6e:	f003 fd45 	bl	80168fc <tud_control_xfer>
      }
    break;
 8012e72:	e070      	b.n	8012f56 <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8012e74:	79bb      	ldrb	r3, [r7, #6]
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	d105      	bne.n	8012e86 <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 8012e7a:	79fb      	ldrb	r3, [r7, #7]
 8012e7c:	6839      	ldr	r1, [r7, #0]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f003 fcca 	bl	8016818 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8012e84:	e069      	b.n	8012f5a <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 8012e86:	79bb      	ldrb	r3, [r7, #6]
 8012e88:	2b03      	cmp	r3, #3
 8012e8a:	d166      	bne.n	8012f5a <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	885b      	ldrh	r3, [r3, #2]
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	613b      	str	r3, [r7, #16]
 8012e94:	2300      	movs	r3, #0
 8012e96:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8012e98:	7bfb      	ldrb	r3, [r7, #15]
 8012e9a:	693a      	ldr	r2, [r7, #16]
 8012e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8012ea0:	f003 0301 	and.w	r3, r3, #1
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	bf14      	ite	ne
 8012ea8:	2301      	movne	r3, #1
 8012eaa:	2300      	moveq	r3, #0
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	885b      	ldrh	r3, [r3, #2]
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	61bb      	str	r3, [r7, #24]
 8012eb8:	2301      	movs	r3, #1
 8012eba:	75fb      	strb	r3, [r7, #23]
 8012ebc:	7dfb      	ldrb	r3, [r7, #23]
 8012ebe:	69ba      	ldr	r2, [r7, #24]
 8012ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ec4:	f003 0301 	and.w	r3, r3, #1
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	bf14      	ite	ne
 8012ecc:	2301      	movne	r3, #1
 8012ece:	2300      	moveq	r3, #0
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	885b      	ldrh	r3, [r3, #2]
 8012ed8:	b29b      	uxth	r3, r3
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	6a3b      	ldr	r3, [r7, #32]
 8012ede:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8012ee0:	6a3b      	ldr	r3, [r7, #32]
 8012ee2:	f103 021c 	add.w	r2, r3, #28
 8012ee6:	7ffb      	ldrb	r3, [r7, #31]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	bf14      	ite	ne
 8012eec:	2301      	movne	r3, #1
 8012eee:	2300      	moveq	r3, #0
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	f083 0301 	eor.w	r3, r3, #1
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	f003 0301 	and.w	r3, r3, #1
 8012efc:	b2db      	uxtb	r3, r3
 8012efe:	4619      	mov	r1, r3
 8012f00:	4610      	mov	r0, r2
 8012f02:	f002 f8ce 	bl	80150a2 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8012f06:	4b1b      	ldr	r3, [pc, #108]	; (8012f74 <cdcd_control_xfer_cb+0x1d4>)
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d026      	beq.n	8012f5a <cdcd_control_xfer_cb+0x1ba>
 8012f0c:	7fba      	ldrb	r2, [r7, #30]
 8012f0e:	7ff9      	ldrb	r1, [r7, #31]
 8012f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f14:	4618      	mov	r0, r3
 8012f16:	f3af 8000 	nop.w
    break;
 8012f1a:	e01e      	b.n	8012f5a <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8012f1c:	79bb      	ldrb	r3, [r7, #6]
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	d105      	bne.n	8012f2e <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 8012f22:	79fb      	ldrb	r3, [r7, #7]
 8012f24:	6839      	ldr	r1, [r7, #0]
 8012f26:	4618      	mov	r0, r3
 8012f28:	f003 fc76 	bl	8016818 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8012f2c:	e017      	b.n	8012f5e <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 8012f2e:	79bb      	ldrb	r3, [r7, #6]
 8012f30:	2b03      	cmp	r3, #3
 8012f32:	d114      	bne.n	8012f5e <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8012f34:	4b10      	ldr	r3, [pc, #64]	; (8012f78 <cdcd_control_xfer_cb+0x1d8>)
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d011      	beq.n	8012f5e <cdcd_control_xfer_cb+0x1be>
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	885b      	ldrh	r3, [r3, #2]
 8012f3e:	b29a      	uxth	r2, r3
 8012f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f44:	4611      	mov	r1, r2
 8012f46:	4618      	mov	r0, r3
 8012f48:	f3af 8000 	nop.w
    break;
 8012f4c:	e007      	b.n	8012f5e <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 8012f4e:	2300      	movs	r3, #0
 8012f50:	e007      	b.n	8012f62 <cdcd_control_xfer_cb+0x1c2>
    break;
 8012f52:	bf00      	nop
 8012f54:	e004      	b.n	8012f60 <cdcd_control_xfer_cb+0x1c0>
    break;
 8012f56:	bf00      	nop
 8012f58:	e002      	b.n	8012f60 <cdcd_control_xfer_cb+0x1c0>
    break;
 8012f5a:	bf00      	nop
 8012f5c:	e000      	b.n	8012f60 <cdcd_control_xfer_cb+0x1c0>
    break;
 8012f5e:	bf00      	nop
  }

  return true;
 8012f60:	2301      	movs	r3, #1
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3728      	adds	r7, #40	; 0x28
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	240009b8 	.word	0x240009b8
	...

08012f7c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b086      	sub	sp, #24
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	603b      	str	r3, [r7, #0]
 8012f84:	4603      	mov	r3, r0
 8012f86:	71fb      	strb	r3, [r7, #7]
 8012f88:	460b      	mov	r3, r1
 8012f8a:	71bb      	strb	r3, [r7, #6]
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8012f90:	2300      	movs	r3, #0
 8012f92:	75fb      	strb	r3, [r7, #23]
 8012f94:	e014      	b.n	8012fc0 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8012f96:	7dfb      	ldrb	r3, [r7, #23]
 8012f98:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012f9c:	fb02 f303 	mul.w	r3, r2, r3
 8012fa0:	4a54      	ldr	r2, [pc, #336]	; (80130f4 <cdcd_xfer_cb+0x178>)
 8012fa2:	4413      	add	r3, r2
 8012fa4:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	78db      	ldrb	r3, [r3, #3]
 8012faa:	79ba      	ldrb	r2, [r7, #6]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d00a      	beq.n	8012fc6 <cdcd_xfer_cb+0x4a>
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	789b      	ldrb	r3, [r3, #2]
 8012fb4:	79ba      	ldrb	r2, [r7, #6]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d005      	beq.n	8012fc6 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8012fba:	7dfb      	ldrb	r3, [r7, #23]
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	75fb      	strb	r3, [r7, #23]
 8012fc0:	7dfb      	ldrb	r3, [r7, #23]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d0e7      	beq.n	8012f96 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8012fc6:	7dfb      	ldrb	r3, [r7, #23]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00a      	beq.n	8012fe2 <cdcd_xfer_cb+0x66>
 8012fcc:	4b4a      	ldr	r3, [pc, #296]	; (80130f8 <cdcd_xfer_cb+0x17c>)
 8012fce:	60bb      	str	r3, [r7, #8]
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f003 0301 	and.w	r3, r3, #1
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d000      	beq.n	8012fde <cdcd_xfer_cb+0x62>
 8012fdc:	be00      	bkpt	0x0000
 8012fde:	2300      	movs	r3, #0
 8012fe0:	e084      	b.n	80130ec <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	78db      	ldrb	r3, [r3, #3]
 8012fe6:	79ba      	ldrb	r2, [r7, #6]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d14a      	bne.n	8013082 <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	f103 0010 	add.w	r0, r3, #16
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	33a8      	adds	r3, #168	; 0xa8
 8012ff6:	683a      	ldr	r2, [r7, #0]
 8012ff8:	b292      	uxth	r2, r2
 8012ffa:	4619      	mov	r1, r3
 8012ffc:	f002 f81c 	bl	8015038 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8013000:	4b3e      	ldr	r3, [pc, #248]	; (80130fc <cdcd_xfer_cb+0x180>)
 8013002:	2b00      	cmp	r3, #0
 8013004:	d028      	beq.n	8013058 <cdcd_xfer_cb+0xdc>
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	795b      	ldrb	r3, [r3, #5]
 801300a:	2bff      	cmp	r3, #255	; 0xff
 801300c:	d024      	beq.n	8013058 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 801300e:	2300      	movs	r3, #0
 8013010:	60fb      	str	r3, [r7, #12]
 8013012:	e01d      	b.n	8013050 <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	795a      	ldrb	r2, [r3, #5]
 8013018:	6939      	ldr	r1, [r7, #16]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	440b      	add	r3, r1
 801301e:	33a8      	adds	r3, #168	; 0xa8
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	429a      	cmp	r2, r3
 8013024:	d111      	bne.n	801304a <cdcd_xfer_cb+0xce>
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	3310      	adds	r3, #16
 801302a:	4618      	mov	r0, r3
 801302c:	f001 fefe 	bl	8014e2c <tu_fifo_empty>
 8013030:	4603      	mov	r3, r0
 8013032:	f083 0301 	eor.w	r3, r3, #1
 8013036:	b2db      	uxtb	r3, r3
 8013038:	2b00      	cmp	r3, #0
 801303a:	d006      	beq.n	801304a <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	795a      	ldrb	r2, [r3, #5]
 8013040:	7dfb      	ldrb	r3, [r7, #23]
 8013042:	4611      	mov	r1, r2
 8013044:	4618      	mov	r0, r3
 8013046:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	3301      	adds	r3, #1
 801304e:	60fb      	str	r3, [r7, #12]
 8013050:	68fa      	ldr	r2, [r7, #12]
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	429a      	cmp	r2, r3
 8013056:	d3dd      	bcc.n	8013014 <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8013058:	4b29      	ldr	r3, [pc, #164]	; (8013100 <cdcd_xfer_cb+0x184>)
 801305a:	2b00      	cmp	r3, #0
 801305c:	d00e      	beq.n	801307c <cdcd_xfer_cb+0x100>
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	3310      	adds	r3, #16
 8013062:	4618      	mov	r0, r3
 8013064:	f001 fee2 	bl	8014e2c <tu_fifo_empty>
 8013068:	4603      	mov	r3, r0
 801306a:	f083 0301 	eor.w	r3, r3, #1
 801306e:	b2db      	uxtb	r3, r3
 8013070:	2b00      	cmp	r3, #0
 8013072:	d003      	beq.n	801307c <cdcd_xfer_cb+0x100>
 8013074:	7dfb      	ldrb	r3, [r7, #23]
 8013076:	4618      	mov	r0, r3
 8013078:	f3af 8000 	nop.w

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 801307c:	6938      	ldr	r0, [r7, #16]
 801307e:	f7ff fbf1 	bl	8012864 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	789b      	ldrb	r3, [r3, #2]
 8013086:	79ba      	ldrb	r2, [r7, #6]
 8013088:	429a      	cmp	r2, r3
 801308a:	d12e      	bne.n	80130ea <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 801308c:	4b1d      	ldr	r3, [pc, #116]	; (8013104 <cdcd_xfer_cb+0x188>)
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <cdcd_xfer_cb+0x11e>
 8013092:	7dfb      	ldrb	r3, [r7, #23]
 8013094:	4618      	mov	r0, r3
 8013096:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 801309a:	7dfb      	ldrb	r3, [r7, #23]
 801309c:	4618      	mov	r0, r3
 801309e:	f7ff fc8b 	bl	80129b8 <tud_cdc_n_write_flush>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d120      	bne.n	80130ea <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	331c      	adds	r3, #28
 80130ac:	4618      	mov	r0, r3
 80130ae:	f001 fe8b 	bl	8014dc8 <tu_fifo_count>
 80130b2:	4603      	mov	r3, r0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d118      	bne.n	80130ea <cdcd_xfer_cb+0x16e>
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d015      	beq.n	80130ea <cdcd_xfer_cb+0x16e>
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d110      	bne.n	80130ea <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	789a      	ldrb	r2, [r3, #2]
 80130cc:	79fb      	ldrb	r3, [r7, #7]
 80130ce:	4611      	mov	r1, r2
 80130d0:	4618      	mov	r0, r3
 80130d2:	f003 f9c7 	bl	8016464 <usbd_edpt_claim>
 80130d6:	4603      	mov	r3, r0
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d006      	beq.n	80130ea <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	7899      	ldrb	r1, [r3, #2]
 80130e0:	79f8      	ldrb	r0, [r7, #7]
 80130e2:	2300      	movs	r3, #0
 80130e4:	2200      	movs	r2, #0
 80130e6:	f003 fa11 	bl	801650c <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80130ea:	2301      	movs	r3, #1
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3718      	adds	r7, #24
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	240009b8 	.word	0x240009b8
 80130f8:	e000edf0 	.word	0xe000edf0
	...

08013108 <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b082      	sub	sp, #8
 801310c:	af00      	add	r7, sp, #0
 801310e:	4603      	mov	r3, r0
 8013110:	6039      	str	r1, [r7, #0]
 8013112:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	689a      	ldr	r2, [r3, #8]
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801311c:	1ad2      	subs	r2, r2, r3
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	629a      	str	r2, [r3, #40]	; 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	2203      	movs	r2, #3
 8013126:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	f103 0220 	add.w	r2, r3, #32
 8013136:	79f8      	ldrb	r0, [r7, #7]
 8013138:	230d      	movs	r3, #13
 801313a:	f003 f9e7 	bl	801650c <usbd_edpt_xfer>
 801313e:	4603      	mov	r3, r0
}
 8013140:	4618      	mov	r0, r3
 8013142:	3708      	adds	r7, #8
 8013144:	46bd      	mov	sp, r7
 8013146:	bd80      	pop	{r7, pc}

08013148 <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
 801314e:	4603      	mov	r3, r0
 8013150:	6039      	str	r1, [r7, #0]
 8013152:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	2200      	movs	r2, #0
 8013158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8013162:	683a      	ldr	r2, [r7, #0]
 8013164:	79f8      	ldrb	r0, [r7, #7]
 8013166:	231f      	movs	r3, #31
 8013168:	f003 f9d0 	bl	801650c <usbd_edpt_xfer>
 801316c:	4603      	mov	r3, r0
}
 801316e:	4618      	mov	r0, r3
 8013170:	3708      	adds	r7, #8
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}

08013176 <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 8013176:	b580      	push	{r7, lr}
 8013178:	b088      	sub	sp, #32
 801317a:	af00      	add	r7, sp, #0
 801317c:	4603      	mov	r3, r0
 801317e:	6039      	str	r1, [r7, #0]
 8013180:	71fb      	strb	r3, [r7, #7]
 8013182:	4613      	mov	r3, r2
 8013184:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	3320      	adds	r3, #32
 801318e:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 8013190:	69bb      	ldr	r3, [r7, #24]
 8013192:	79ba      	ldrb	r2, [r7, #6]
 8013194:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	689a      	ldr	r2, [r3, #8]
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801319e:	1ad2      	subs	r2, r2, r3
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	2202      	movs	r2, #2
 80131a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d106      	bne.n	80131c4 <fail_scsi_op+0x4e>
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	7b58      	ldrb	r0, [r3, #13]
 80131ba:	2300      	movs	r3, #0
 80131bc:	2220      	movs	r2, #32
 80131be:	2105      	movs	r1, #5
 80131c0:	f000 f8d0 	bl	8013364 <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	689b      	ldr	r3, [r3, #8]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d028      	beq.n	801321e <fail_scsi_op+0xa8>
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d024      	beq.n	801321e <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	7b1b      	ldrb	r3, [r3, #12]
 80131d8:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 80131da:	7dfb      	ldrb	r3, [r7, #23]
 80131dc:	613b      	str	r3, [r7, #16]
 80131de:	2307      	movs	r3, #7
 80131e0:	73fb      	strb	r3, [r7, #15]
 80131e2:	7bfb      	ldrb	r3, [r7, #15]
 80131e4:	693a      	ldr	r2, [r7, #16]
 80131e6:	fa22 f303 	lsr.w	r3, r2, r3
 80131ea:	f003 0301 	and.w	r3, r3, #1
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	bf14      	ite	ne
 80131f2:	2301      	movne	r3, #1
 80131f4:	2300      	moveq	r3, #0
 80131f6:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d008      	beq.n	801320e <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013202:	79fb      	ldrb	r3, [r7, #7]
 8013204:	4611      	mov	r1, r2
 8013206:	4618      	mov	r0, r3
 8013208:	f003 fa24 	bl	8016654 <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 801320c:	e007      	b.n	801321e <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013214:	79fb      	ldrb	r3, [r7, #7]
 8013216:	4611      	mov	r1, r2
 8013218:	4618      	mov	r0, r3
 801321a:	f003 fa1b 	bl	8016654 <usbd_edpt_stall>
}
 801321e:	bf00      	nop
 8013220:	3720      	adds	r7, #32
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 8013226:	b480      	push	{r7}
 8013228:	b085      	sub	sp, #20
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	3302      	adds	r3, #2
 8013232:	60bb      	str	r3, [r7, #8]


#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	ba1b      	rev	r3, r3
}
 801323e:	4618      	mov	r0, r3
 8013240:	3714      	adds	r7, #20
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr

0801324a <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 801324a:	b480      	push	{r7}
 801324c:	b085      	sub	sp, #20
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	330f      	adds	r3, #15
 8013256:	3307      	adds	r3, #7
 8013258:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	881b      	ldrh	r3, [r3, #0]
 801325e:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 8013260:	89fb      	ldrh	r3, [r7, #14]
 8013262:	ba5b      	rev16	r3, r3
 8013264:	b29b      	uxth	r3, r3
}
 8013266:	4618      	mov	r0, r3
 8013268:	3714      	adds	r7, #20
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr

08013272 <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 8013272:	b580      	push	{r7, lr}
 8013274:	b084      	sub	sp, #16
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f7ff ffe5 	bl	801324a <rdwr10_get_blockcount>
 8013280:	4603      	mov	r3, r0
 8013282:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 8013284:	89fb      	ldrh	r3, [r7, #14]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d101      	bne.n	801328e <rdwr10_get_blocksize+0x1c>
 801328a:	2300      	movs	r3, #0
 801328c:	e005      	b.n	801329a <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	689a      	ldr	r2, [r3, #8]
 8013292:	89fb      	ldrh	r3, [r7, #14]
 8013294:	fbb2 f3f3 	udiv	r3, r2, r3
 8013298:	b29b      	uxth	r3, r3
}
 801329a:	4618      	mov	r0, r3
 801329c:	3710      	adds	r7, #16
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b088      	sub	sp, #32
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 80132aa:	2300      	movs	r3, #0
 80132ac:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f7ff ffcb 	bl	801324a <rdwr10_get_blockcount>
 80132b4:	4603      	mov	r3, r0
 80132b6:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d105      	bne.n	80132cc <rdwr10_validate_cmd+0x2a>
  {
    if ( block_count )
 80132c0:	8bbb      	ldrh	r3, [r7, #28]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d048      	beq.n	8013358 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80132c6:	2302      	movs	r3, #2
 80132c8:	77fb      	strb	r3, [r7, #31]
 80132ca:	e045      	b.n	8013358 <rdwr10_validate_cmd+0xb6>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	7bdb      	ldrb	r3, [r3, #15]
 80132d0:	2b28      	cmp	r3, #40	; 0x28
 80132d2:	d119      	bne.n	8013308 <rdwr10_validate_cmd+0x66>
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	7b1b      	ldrb	r3, [r3, #12]
 80132d8:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 80132da:	7efb      	ldrb	r3, [r7, #27]
 80132dc:	617b      	str	r3, [r7, #20]
 80132de:	2307      	movs	r3, #7
 80132e0:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80132e2:	7cfb      	ldrb	r3, [r7, #19]
 80132e4:	697a      	ldr	r2, [r7, #20]
 80132e6:	fa22 f303 	lsr.w	r3, r2, r3
 80132ea:	f003 0301 	and.w	r3, r3, #1
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	bf14      	ite	ne
 80132f2:	2301      	movne	r3, #1
 80132f4:	2300      	moveq	r3, #0
 80132f6:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80132f8:	f083 0301 	eor.w	r3, r3, #1
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d002      	beq.n	8013308 <rdwr10_validate_cmd+0x66>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 10 (Ho <> Di)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8013302:	2302      	movs	r3, #2
 8013304:	77fb      	strb	r3, [r7, #31]
 8013306:	e027      	b.n	8013358 <rdwr10_validate_cmd+0xb6>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	7bdb      	ldrb	r3, [r3, #15]
 801330c:	2b2a      	cmp	r3, #42	; 0x2a
 801330e:	d116      	bne.n	801333e <rdwr10_validate_cmd+0x9c>
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	7b1b      	ldrb	r3, [r3, #12]
 8013314:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 8013316:	7cbb      	ldrb	r3, [r7, #18]
 8013318:	60fb      	str	r3, [r7, #12]
 801331a:	2307      	movs	r3, #7
 801331c:	72fb      	strb	r3, [r7, #11]
 801331e:	7afb      	ldrb	r3, [r7, #11]
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	fa22 f303 	lsr.w	r3, r2, r3
 8013326:	f003 0301 	and.w	r3, r3, #1
 801332a:	2b00      	cmp	r3, #0
 801332c:	bf14      	ite	ne
 801332e:	2301      	movne	r3, #1
 8013330:	2300      	moveq	r3, #0
 8013332:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <rdwr10_validate_cmd+0x9c>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 8 (Hi <> Do)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8013338:	2302      	movs	r3, #2
 801333a:	77fb      	strb	r3, [r7, #31]
 801333c:	e00c      	b.n	8013358 <rdwr10_validate_cmd+0xb6>
    }
    else if ( 0 == block_count )
 801333e:	8bbb      	ldrh	r3, [r7, #28]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d102      	bne.n	801334a <rdwr10_validate_cmd+0xa8>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
      status =  MSC_CSW_STATUS_FAILED;
 8013344:	2301      	movs	r3, #1
 8013346:	77fb      	strb	r3, [r7, #31]
 8013348:	e006      	b.n	8013358 <rdwr10_validate_cmd+0xb6>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	689a      	ldr	r2, [r3, #8]
 801334e:	8bbb      	ldrh	r3, [r7, #28]
 8013350:	429a      	cmp	r2, r3
 8013352:	d201      	bcs.n	8013358 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, " Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8013354:	2302      	movs	r3, #2
 8013356:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8013358:	7ffb      	ldrb	r3, [r7, #31]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3720      	adds	r7, #32
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
	...

08013364 <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 8013364:	b490      	push	{r4, r7}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	4604      	mov	r4, r0
 801336c:	4608      	mov	r0, r1
 801336e:	4611      	mov	r1, r2
 8013370:	461a      	mov	r2, r3
 8013372:	4623      	mov	r3, r4
 8013374:	71fb      	strb	r3, [r7, #7]
 8013376:	4603      	mov	r3, r0
 8013378:	71bb      	strb	r3, [r7, #6]
 801337a:	460b      	mov	r3, r1
 801337c:	717b      	strb	r3, [r7, #5]
 801337e:	4613      	mov	r3, r2
 8013380:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 8013382:	4a09      	ldr	r2, [pc, #36]	; (80133a8 <tud_msc_set_sense+0x44>)
 8013384:	79bb      	ldrb	r3, [r7, #6]
 8013386:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 801338a:	4a07      	ldr	r2, [pc, #28]	; (80133a8 <tud_msc_set_sense+0x44>)
 801338c:	797b      	ldrb	r3, [r7, #5]
 801338e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8013392:	4a05      	ldr	r2, [pc, #20]	; (80133a8 <tud_msc_set_sense+0x44>)
 8013394:	793b      	ldrb	r3, [r7, #4]
 8013396:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 801339a:	2301      	movs	r3, #1
}
 801339c:	4618      	mov	r0, r3
 801339e:	3708      	adds	r7, #8
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bc90      	pop	{r4, r7}
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	24000ae0 	.word	0x24000ae0

080133ac <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	4603      	mov	r3, r0
 80133b4:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 80133b6:	79f8      	ldrb	r0, [r7, #7]
 80133b8:	2300      	movs	r3, #0
 80133ba:	223a      	movs	r2, #58	; 0x3a
 80133bc:	2102      	movs	r1, #2
 80133be:	f7ff ffd1 	bl	8013364 <tud_msc_set_sense>
}
 80133c2:	bf00      	nop
 80133c4:	3708      	adds	r7, #8
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
	...

080133cc <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80133d0:	2240      	movs	r2, #64	; 0x40
 80133d2:	2100      	movs	r1, #0
 80133d4:	4802      	ldr	r0, [pc, #8]	; (80133e0 <mscd_init+0x14>)
 80133d6:	f005 fb70 	bl	8018aba <memset>
}
 80133da:	bf00      	nop
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	24000ae0 	.word	0x24000ae0

080133e4 <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	4603      	mov	r3, r0
 80133ec:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80133ee:	2240      	movs	r2, #64	; 0x40
 80133f0:	2100      	movs	r1, #0
 80133f2:	4803      	ldr	r0, [pc, #12]	; (8013400 <mscd_reset+0x1c>)
 80133f4:	f005 fb61 	bl	8018aba <memset>
}
 80133f8:	bf00      	nop
 80133fa:	3708      	adds	r7, #8
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}
 8013400:	24000ae0 	.word	0x24000ae0

08013404 <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b08c      	sub	sp, #48	; 0x30
 8013408:	af02      	add	r7, sp, #8
 801340a:	4603      	mov	r3, r0
 801340c:	6039      	str	r1, [r7, #0]
 801340e:	71fb      	strb	r3, [r7, #7]
 8013410:	4613      	mov	r3, r2
 8013412:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	795b      	ldrb	r3, [r3, #5]
 8013418:	2b08      	cmp	r3, #8
 801341a:	d107      	bne.n	801342c <mscd_open+0x28>
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	799b      	ldrb	r3, [r3, #6]
 8013420:	2b06      	cmp	r3, #6
 8013422:	d103      	bne.n	801342c <mscd_open+0x28>
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	79db      	ldrb	r3, [r3, #7]
 8013428:	2b50      	cmp	r3, #80	; 0x50
 801342a:	d001      	beq.n	8013430 <mscd_open+0x2c>
 801342c:	2300      	movs	r3, #0
 801342e:	e053      	b.n	80134d8 <mscd_open+0xd4>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 8013430:	2317      	movs	r3, #23
 8013432:	84fb      	strh	r3, [r7, #38]	; 0x26

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 8013434:	88ba      	ldrh	r2, [r7, #4]
 8013436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013438:	429a      	cmp	r2, r3
 801343a:	d20a      	bcs.n	8013452 <mscd_open+0x4e>
 801343c:	4b28      	ldr	r3, [pc, #160]	; (80134e0 <mscd_open+0xdc>)
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	f003 0301 	and.w	r3, r3, #1
 8013448:	2b00      	cmp	r3, #0
 801344a:	d000      	beq.n	801344e <mscd_open+0x4a>
 801344c:	be00      	bkpt	0x0000
 801344e:	2300      	movs	r3, #0
 8013450:	e042      	b.n	80134d8 <mscd_open+0xd4>

  mscd_interface_t * p_msc = &_mscd_itf;
 8013452:	4b24      	ldr	r3, [pc, #144]	; (80134e4 <mscd_open+0xe0>)
 8013454:	623b      	str	r3, [r7, #32]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	789a      	ldrb	r2, [r3, #2]
 801345a:	6a3b      	ldr	r3, [r7, #32]
 801345c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	461a      	mov	r2, r3
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	1899      	adds	r1, r3, r2

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 8013472:	6a3b      	ldr	r3, [r7, #32]
 8013474:	332f      	adds	r3, #47	; 0x2f
 8013476:	6a3a      	ldr	r2, [r7, #32]
 8013478:	322e      	adds	r2, #46	; 0x2e
 801347a:	79f8      	ldrb	r0, [r7, #7]
 801347c:	9201      	str	r2, [sp, #4]
 801347e:	9300      	str	r3, [sp, #0]
 8013480:	2302      	movs	r3, #2
 8013482:	2202      	movs	r2, #2
 8013484:	f002 ff42 	bl	801630c <usbd_open_edpt_pair>
 8013488:	4603      	mov	r3, r0
 801348a:	f083 0301 	eor.w	r3, r3, #1
 801348e:	b2db      	uxtb	r3, r3
 8013490:	2b00      	cmp	r3, #0
 8013492:	d00a      	beq.n	80134aa <mscd_open+0xa6>
 8013494:	4b12      	ldr	r3, [pc, #72]	; (80134e0 <mscd_open+0xdc>)
 8013496:	61bb      	str	r3, [r7, #24]
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f003 0301 	and.w	r3, r3, #1
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d000      	beq.n	80134a6 <mscd_open+0xa2>
 80134a4:	be00      	bkpt	0x0000
 80134a6:	2300      	movs	r3, #0
 80134a8:	e016      	b.n	80134d8 <mscd_open+0xd4>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 80134aa:	79fb      	ldrb	r3, [r7, #7]
 80134ac:	6a39      	ldr	r1, [r7, #32]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7ff fe4a 	bl	8013148 <prepare_cbw>
 80134b4:	4603      	mov	r3, r0
 80134b6:	f083 0301 	eor.w	r3, r3, #1
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d00a      	beq.n	80134d6 <mscd_open+0xd2>
 80134c0:	4b07      	ldr	r3, [pc, #28]	; (80134e0 <mscd_open+0xdc>)
 80134c2:	61fb      	str	r3, [r7, #28]
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	f003 0301 	and.w	r3, r3, #1
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d000      	beq.n	80134d2 <mscd_open+0xce>
 80134d0:	be00      	bkpt	0x0000
 80134d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80134d4:	e000      	b.n	80134d8 <mscd_open+0xd4>

  return drv_len;
 80134d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3728      	adds	r7, #40	; 0x28
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	e000edf0 	.word	0xe000edf0
 80134e4:	24000ae0 	.word	0x24000ae0

080134e8 <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 80134e8:	b480      	push	{r7}
 80134ea:	b083      	sub	sp, #12
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2200      	movs	r2, #0
 80134f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->total_len   = 0;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2200      	movs	r2, #0
 80134fc:	635a      	str	r2, [r3, #52]	; 0x34
  p_msc->xferred_len = 0;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2200      	movs	r2, #0
 8013502:	639a      	str	r2, [r3, #56]	; 0x38

  p_msc->sense_key           = 0;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2200      	movs	r2, #0
 8013508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  p_msc->add_sense_code      = 0;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  p_msc->add_sense_qualifier = 0;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2200      	movs	r2, #0
 8013518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 801351c:	bf00      	nop
 801351e:	370c      	adds	r7, #12
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b088      	sub	sp, #32
 801352c:	af00      	add	r7, sp, #0
 801352e:	4603      	mov	r3, r0
 8013530:	603a      	str	r2, [r7, #0]
 8013532:	71fb      	strb	r3, [r7, #7]
 8013534:	460b      	mov	r3, r1
 8013536:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 8013538:	79bb      	ldrb	r3, [r7, #6]
 801353a:	2b01      	cmp	r3, #1
 801353c:	d001      	beq.n	8013542 <mscd_control_xfer_cb+0x1a>
 801353e:	2301      	movs	r3, #1
 8013540:	e0e6      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>

  mscd_interface_t* p_msc = &_mscd_itf;
 8013542:	4b75      	ldr	r3, [pc, #468]	; (8013718 <mscd_control_xfer_cb+0x1f0>)
 8013544:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801354e:	b2db      	uxtb	r3, r3
 8013550:	2b00      	cmp	r3, #0
 8013552:	f040 8090 	bne.w	8013676 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	f003 031f 	and.w	r3, r3, #31
 801355e:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8013560:	2b02      	cmp	r3, #2
 8013562:	f040 8088 	bne.w	8013676 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 801356a:	2b01      	cmp	r3, #1
 801356c:	f040 8083 	bne.w	8013676 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	885b      	ldrh	r3, [r3, #2]
 8013574:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8013576:	2b00      	cmp	r3, #0
 8013578:	d17d      	bne.n	8013676 <mscd_control_xfer_cb+0x14e>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	889b      	ldrh	r3, [r3, #4]
 801357e:	b29b      	uxth	r3, r3
 8013580:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8013582:	89fb      	ldrh	r3, [r7, #14]
 8013584:	b2db      	uxtb	r3, r3
 8013586:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 8013588:	69fb      	ldr	r3, [r7, #28]
 801358a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801358e:	2b04      	cmp	r3, #4
 8013590:	d106      	bne.n	80135a0 <mscd_control_xfer_cb+0x78>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 8013592:	7efa      	ldrb	r2, [r7, #27]
 8013594:	79fb      	ldrb	r3, [r7, #7]
 8013596:	4611      	mov	r1, r2
 8013598:	4618      	mov	r0, r3
 801359a:	f003 f85b 	bl	8016654 <usbd_edpt_stall>
 801359e:	e068      	b.n	8013672 <mscd_control_xfer_cb+0x14a>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80135a6:	7efa      	ldrb	r2, [r7, #27]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d11a      	bne.n	80135e2 <mscd_control_xfer_cb+0xba>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 80135ac:	69fb      	ldr	r3, [r7, #28]
 80135ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80135b2:	2b02      	cmp	r3, #2
 80135b4:	d15d      	bne.n	8013672 <mscd_control_xfer_cb+0x14a>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 80135b6:	79fb      	ldrb	r3, [r7, #7]
 80135b8:	69f9      	ldr	r1, [r7, #28]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7ff fda4 	bl	8013108 <send_csw>
 80135c0:	4603      	mov	r3, r0
 80135c2:	f083 0301 	eor.w	r3, r3, #1
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d052      	beq.n	8013672 <mscd_control_xfer_cb+0x14a>
 80135cc:	4b53      	ldr	r3, [pc, #332]	; (801371c <mscd_control_xfer_cb+0x1f4>)
 80135ce:	613b      	str	r3, [r7, #16]
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	f003 0301 	and.w	r3, r3, #1
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d000      	beq.n	80135de <mscd_control_xfer_cb+0xb6>
 80135dc:	be00      	bkpt	0x0000
 80135de:	2300      	movs	r3, #0
 80135e0:	e096      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80135e8:	7efa      	ldrb	r2, [r7, #27]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d141      	bne.n	8013672 <mscd_control_xfer_cb+0x14a>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d13c      	bne.n	8013672 <mscd_control_xfer_cb+0x14a>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	737b      	strb	r3, [r7, #13]
 8013602:	4613      	mov	r3, r2
 8013604:	733b      	strb	r3, [r7, #12]

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8013606:	7b3a      	ldrb	r2, [r7, #12]
 8013608:	7b7b      	ldrb	r3, [r7, #13]
 801360a:	4611      	mov	r1, r2
 801360c:	4618      	mov	r0, r3
 801360e:	f002 fff3 	bl	80165f8 <usbd_edpt_busy>
 8013612:	4603      	mov	r3, r0
 8013614:	f083 0301 	eor.w	r3, r3, #1
 8013618:	b2db      	uxtb	r3, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	d00d      	beq.n	801363a <mscd_control_xfer_cb+0x112>
 801361e:	7b3a      	ldrb	r2, [r7, #12]
 8013620:	7b7b      	ldrb	r3, [r7, #13]
 8013622:	4611      	mov	r1, r2
 8013624:	4618      	mov	r0, r3
 8013626:	f003 f8ad 	bl	8016784 <usbd_edpt_stalled>
 801362a:	4603      	mov	r3, r0
 801362c:	f083 0301 	eor.w	r3, r3, #1
 8013630:	b2db      	uxtb	r3, r3
 8013632:	2b00      	cmp	r3, #0
 8013634:	d001      	beq.n	801363a <mscd_control_xfer_cb+0x112>
 8013636:	2301      	movs	r3, #1
 8013638:	e000      	b.n	801363c <mscd_control_xfer_cb+0x114>
 801363a:	2300      	movs	r3, #0
 801363c:	f003 0301 	and.w	r3, r3, #1
 8013640:	b2db      	uxtb	r3, r3
 8013642:	2b00      	cmp	r3, #0
 8013644:	d015      	beq.n	8013672 <mscd_control_xfer_cb+0x14a>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8013646:	79fb      	ldrb	r3, [r7, #7]
 8013648:	69f9      	ldr	r1, [r7, #28]
 801364a:	4618      	mov	r0, r3
 801364c:	f7ff fd7c 	bl	8013148 <prepare_cbw>
 8013650:	4603      	mov	r3, r0
 8013652:	f083 0301 	eor.w	r3, r3, #1
 8013656:	b2db      	uxtb	r3, r3
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00a      	beq.n	8013672 <mscd_control_xfer_cb+0x14a>
 801365c:	4b2f      	ldr	r3, [pc, #188]	; (801371c <mscd_control_xfer_cb+0x1f4>)
 801365e:	617b      	str	r3, [r7, #20]
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f003 0301 	and.w	r3, r3, #1
 8013668:	2b00      	cmp	r3, #0
 801366a:	d000      	beq.n	801366e <mscd_control_xfer_cb+0x146>
 801366c:	be00      	bkpt	0x0000
 801366e:	2300      	movs	r3, #0
 8013670:	e04e      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>
          }
        }
      }
    }

    return true;
 8013672:	2301      	movs	r3, #1
 8013674:	e04c      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801367e:	b2db      	uxtb	r3, r3
 8013680:	2b20      	cmp	r3, #32
 8013682:	d001      	beq.n	8013688 <mscd_control_xfer_cb+0x160>
 8013684:	2300      	movs	r3, #0
 8013686:	e043      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>

  switch ( request->bRequest )
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	785b      	ldrb	r3, [r3, #1]
 801368c:	2bfe      	cmp	r3, #254	; 0xfe
 801368e:	d016      	beq.n	80136be <mscd_control_xfer_cb+0x196>
 8013690:	2bff      	cmp	r3, #255	; 0xff
 8013692:	d13a      	bne.n	801370a <mscd_control_xfer_cb+0x1e2>
  {
    case MSC_REQ_RESET:
      TU_LOG(MSC_DEBUG, "  MSC BOT Reset\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	885b      	ldrh	r3, [r3, #2]
 8013698:	b29b      	uxth	r3, r3
 801369a:	2b00      	cmp	r3, #0
 801369c:	d104      	bne.n	80136a8 <mscd_control_xfer_cb+0x180>
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	88db      	ldrh	r3, [r3, #6]
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d001      	beq.n	80136ac <mscd_control_xfer_cb+0x184>
 80136a8:	2300      	movs	r3, #0
 80136aa:	e031      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>

      // driver state reset
      proc_bot_reset(p_msc);
 80136ac:	69f8      	ldr	r0, [r7, #28]
 80136ae:	f7ff ff1b 	bl	80134e8 <proc_bot_reset>

      tud_control_status(rhport, request);
 80136b2:	79fb      	ldrb	r3, [r7, #7]
 80136b4:	6839      	ldr	r1, [r7, #0]
 80136b6:	4618      	mov	r0, r3
 80136b8:	f003 f8ae 	bl	8016818 <tud_control_status>
    break;
 80136bc:	e027      	b.n	801370e <mscd_control_xfer_cb+0x1e6>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG(MSC_DEBUG, "  MSC Get Max Lun\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	885b      	ldrh	r3, [r3, #2]
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d104      	bne.n	80136d2 <mscd_control_xfer_cb+0x1aa>
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	88db      	ldrh	r3, [r3, #6]
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d001      	beq.n	80136d6 <mscd_control_xfer_cb+0x1ae>
 80136d2:	2300      	movs	r3, #0
 80136d4:	e01c      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>

      uint8_t maxlun = 1;
 80136d6:	2301      	movs	r3, #1
 80136d8:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 80136da:	4b11      	ldr	r3, [pc, #68]	; (8013720 <mscd_control_xfer_cb+0x1f8>)
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d003      	beq.n	80136e8 <mscd_control_xfer_cb+0x1c0>
 80136e0:	f3af 8000 	nop.w
 80136e4:	4603      	mov	r3, r0
 80136e6:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 80136e8:	7afb      	ldrb	r3, [r7, #11]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d101      	bne.n	80136f2 <mscd_control_xfer_cb+0x1ca>
 80136ee:	2300      	movs	r3, #0
 80136f0:	e00e      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>

      // MAX LUN is minus 1 by specs
      maxlun--;
 80136f2:	7afb      	ldrb	r3, [r7, #11]
 80136f4:	3b01      	subs	r3, #1
 80136f6:	b2db      	uxtb	r3, r3
 80136f8:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 80136fa:	f107 020b 	add.w	r2, r7, #11
 80136fe:	79f8      	ldrb	r0, [r7, #7]
 8013700:	2301      	movs	r3, #1
 8013702:	6839      	ldr	r1, [r7, #0]
 8013704:	f003 f8fa 	bl	80168fc <tud_control_xfer>
    }
    break;
 8013708:	e001      	b.n	801370e <mscd_control_xfer_cb+0x1e6>

    default: return false; // stall unsupported request
 801370a:	2300      	movs	r3, #0
 801370c:	e000      	b.n	8013710 <mscd_control_xfer_cb+0x1e8>
  }

  return true;
 801370e:	2301      	movs	r3, #1
}
 8013710:	4618      	mov	r0, r3
 8013712:	3720      	adds	r7, #32
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}
 8013718:	24000ae0 	.word	0x24000ae0
 801371c:	e000edf0 	.word	0xe000edf0
 8013720:	00000000 	.word	0x00000000

08013724 <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b098      	sub	sp, #96	; 0x60
 8013728:	af00      	add	r7, sp, #0
 801372a:	603b      	str	r3, [r7, #0]
 801372c:	4603      	mov	r3, r0
 801372e:	71fb      	strb	r3, [r7, #7]
 8013730:	460b      	mov	r3, r1
 8013732:	71bb      	strb	r3, [r7, #6]
 8013734:	4613      	mov	r3, r2
 8013736:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 8013738:	4b95      	ldr	r3, [pc, #596]	; (8013990 <mscd_xfer_cb+0x26c>)
 801373a:	65bb      	str	r3, [r7, #88]	; 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 801373c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801373e:	657b      	str	r3, [r7, #84]	; 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 8013740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013742:	3320      	adds	r3, #32
 8013744:	653b      	str	r3, [r7, #80]	; 0x50

  switch (p_msc->stage)
 8013746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801374c:	2b03      	cmp	r3, #3
 801374e:	f200 8207 	bhi.w	8013b60 <mscd_xfer_cb+0x43c>
 8013752:	a201      	add	r2, pc, #4	; (adr r2, 8013758 <mscd_xfer_cb+0x34>)
 8013754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013758:	08013769 	.word	0x08013769
 801375c:	080139f5 	.word	0x080139f5
 8013760:	08013b61 	.word	0x08013b61
 8013764:	08013acf 	.word	0x08013acf
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 8013768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801376a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801376e:	79ba      	ldrb	r2, [r7, #6]
 8013770:	429a      	cmp	r2, r3
 8013772:	d001      	beq.n	8013778 <mscd_xfer_cb+0x54>
 8013774:	2301      	movs	r3, #1
 8013776:	e247      	b.n	8013c08 <mscd_xfer_cb+0x4e4>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	2b1f      	cmp	r3, #31
 801377c:	d104      	bne.n	8013788 <mscd_xfer_cb+0x64>
 801377e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	4a84      	ldr	r2, [pc, #528]	; (8013994 <mscd_xfer_cb+0x270>)
 8013784:	4293      	cmp	r3, r2
 8013786:	d015      	beq.n	80137b4 <mscd_xfer_cb+0x90>
      {
        TU_LOG(MSC_DEBUG, "  SCSI CBW is not valid\r\n");

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8013788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801378a:	2204      	movs	r2, #4
 801378c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8013790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013792:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013796:	79fb      	ldrb	r3, [r7, #7]
 8013798:	4611      	mov	r1, r2
 801379a:	4618      	mov	r0, r3
 801379c:	f002 ff5a 	bl	8016654 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 80137a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137a2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80137a6:	79fb      	ldrb	r3, [r7, #7]
 80137a8:	4611      	mov	r1, r2
 80137aa:	4618      	mov	r0, r3
 80137ac:	f002 ff52 	bl	8016654 <usbd_edpt_stall>

        return false;
 80137b0:	2300      	movs	r3, #0
 80137b2:	e229      	b.n	8013c08 <mscd_xfer_cb+0x4e4>
      }

      TU_LOG(MSC_DEBUG, "  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 80137b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137b6:	2200      	movs	r2, #0
 80137b8:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80137bc:	701a      	strb	r2, [r3, #0]
 80137be:	2200      	movs	r2, #0
 80137c0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80137c4:	705a      	strb	r2, [r3, #1]
 80137c6:	2200      	movs	r2, #0
 80137c8:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 80137cc:	709a      	strb	r2, [r3, #2]
 80137ce:	2200      	movs	r2, #0
 80137d0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80137d4:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 80137d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137d8:	685a      	ldr	r2, [r3, #4]
 80137da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137dc:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 80137de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137e0:	2200      	movs	r2, #0
 80137e2:	721a      	strb	r2, [r3, #8]
 80137e4:	2200      	movs	r2, #0
 80137e6:	725a      	strb	r2, [r3, #9]
 80137e8:	2200      	movs	r2, #0
 80137ea:	729a      	strb	r2, [r3, #10]
 80137ec:	2200      	movs	r2, #0
 80137ee:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 80137f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f2:	2200      	movs	r2, #0
 80137f4:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 80137f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137f8:	2201      	movs	r2, #1
 80137fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 80137fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013800:	689a      	ldr	r2, [r3, #8]
 8013802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013804:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 8013806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013808:	2200      	movs	r2, #0
 801380a:	639a      	str	r2, [r3, #56]	; 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 801380c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801380e:	7bdb      	ldrb	r3, [r3, #15]
 8013810:	2b28      	cmp	r3, #40	; 0x28
 8013812:	d003      	beq.n	801381c <mscd_xfer_cb+0xf8>
 8013814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013816:	7bdb      	ldrb	r3, [r3, #15]
 8013818:	2b2a      	cmp	r3, #42	; 0x2a
 801381a:	d12a      	bne.n	8013872 <mscd_xfer_cb+0x14e>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 801381c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801381e:	f7ff fd40 	bl	80132a2 <rdwr10_validate_cmd>
 8013822:	4603      	mov	r3, r0
 8013824:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 8013828:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801382c:	2b00      	cmp	r3, #0
 801382e:	d007      	beq.n	8013840 <mscd_xfer_cb+0x11c>
        {
          fail_scsi_op(rhport, p_msc, status);
 8013830:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8013834:	79fb      	ldrb	r3, [r7, #7]
 8013836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013838:	4618      	mov	r0, r3
 801383a:	f7ff fc9c 	bl	8013176 <fail_scsi_op>
      {
 801383e:	e0d8      	b.n	80139f2 <mscd_xfer_cb+0x2ce>
        }else if ( p_cbw->total_bytes )
 8013840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013842:	689b      	ldr	r3, [r3, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d00f      	beq.n	8013868 <mscd_xfer_cb+0x144>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8013848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801384a:	7bdb      	ldrb	r3, [r3, #15]
 801384c:	2b28      	cmp	r3, #40	; 0x28
 801384e:	d105      	bne.n	801385c <mscd_xfer_cb+0x138>
          {
            proc_read10_cmd(rhport, p_msc);
 8013850:	79fb      	ldrb	r3, [r7, #7]
 8013852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013854:	4618      	mov	r0, r3
 8013856:	f000 fc95 	bl	8014184 <proc_read10_cmd>
      {
 801385a:	e0ca      	b.n	80139f2 <mscd_xfer_cb+0x2ce>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 801385c:	79fb      	ldrb	r3, [r7, #7]
 801385e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013860:	4618      	mov	r0, r3
 8013862:	f000 fd23 	bl	80142ac <proc_write10_cmd>
      {
 8013866:	e0c4      	b.n	80139f2 <mscd_xfer_cb+0x2ce>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 8013868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801386a:	2202      	movs	r2, #2
 801386c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      {
 8013870:	e0bf      	b.n	80139f2 <mscd_xfer_cb+0x2ce>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8013872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013874:	689b      	ldr	r3, [r3, #8]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d042      	beq.n	8013900 <mscd_xfer_cb+0x1dc>
 801387a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801387c:	7b1b      	ldrb	r3, [r3, #12]
 801387e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  return tu_bit_test(dir, 7);
 8013882:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013888:	2307      	movs	r3, #7
 801388a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 801388e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013894:	fa22 f303 	lsr.w	r3, r2, r3
 8013898:	f003 0301 	and.w	r3, r3, #1
 801389c:	2b00      	cmp	r3, #0
 801389e:	bf14      	ite	ne
 80138a0:	2301      	movne	r3, #1
 80138a2:	2300      	moveq	r3, #0
 80138a4:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 80138a6:	f083 0301 	eor.w	r3, r3, #1
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d027      	beq.n	8013900 <mscd_xfer_cb+0x1dc>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 80138b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138b2:	689b      	ldr	r3, [r3, #8]
 80138b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80138b8:	d906      	bls.n	80138c8 <mscd_xfer_cb+0x1a4>
          {
            TU_LOG(MSC_DEBUG, "  SCSI reject non READ10/WRITE10 with large data\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80138ba:	79fb      	ldrb	r3, [r7, #7]
 80138bc:	2201      	movs	r2, #1
 80138be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff fc58 	bl	8013176 <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 80138c6:	e093      	b.n	80139f0 <mscd_xfer_cb+0x2cc>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 80138c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138ca:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80138ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	79f8      	ldrb	r0, [r7, #7]
 80138d6:	4a30      	ldr	r2, [pc, #192]	; (8013998 <mscd_xfer_cb+0x274>)
 80138d8:	f002 fe18 	bl	801650c <usbd_edpt_xfer>
 80138dc:	4603      	mov	r3, r0
 80138de:	f083 0301 	eor.w	r3, r3, #1
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	f000 8083 	beq.w	80139f0 <mscd_xfer_cb+0x2cc>
 80138ea:	4b2c      	ldr	r3, [pc, #176]	; (801399c <mscd_xfer_cb+0x278>)
 80138ec:	643b      	str	r3, [r7, #64]	; 0x40
 80138ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f003 0301 	and.w	r3, r3, #1
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d000      	beq.n	80138fc <mscd_xfer_cb+0x1d8>
 80138fa:	be00      	bkpt	0x0000
 80138fc:	2300      	movs	r3, #0
 80138fe:	e183      	b.n	8013c08 <mscd_xfer_cb+0x4e4>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 8013900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013902:	7b58      	ldrb	r0, [r3, #13]
 8013904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013906:	f103 010f 	add.w	r1, r3, #15
 801390a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801390e:	4a22      	ldr	r2, [pc, #136]	; (8013998 <mscd_xfer_cb+0x274>)
 8013910:	f000 f988 	bl	8013c24 <proc_builtin_scsi>
 8013914:	65f8      	str	r0, [r7, #92]	; 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8013916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013918:	2b00      	cmp	r3, #0
 801391a:	da10      	bge.n	801393e <mscd_xfer_cb+0x21a>
 801391c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801391e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013922:	2b00      	cmp	r3, #0
 8013924:	d10b      	bne.n	801393e <mscd_xfer_cb+0x21a>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8013926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013928:	7b58      	ldrb	r0, [r3, #13]
 801392a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801392c:	f103 010f 	add.w	r1, r3, #15
 8013930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013934:	b29b      	uxth	r3, r3
 8013936:	4a18      	ldr	r2, [pc, #96]	; (8013998 <mscd_xfer_cb+0x274>)
 8013938:	f7f2 ff8e 	bl	8006858 <tud_msc_scsi_cb>
 801393c:	65f8      	str	r0, [r7, #92]	; 0x5c
          }

          if ( resplen < 0 )
 801393e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013940:	2b00      	cmp	r3, #0
 8013942:	da06      	bge.n	8013952 <mscd_xfer_cb+0x22e>
          {
            // unsupported command
            TU_LOG(MSC_DEBUG, "  SCSI unsupported or failed command\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8013944:	79fb      	ldrb	r3, [r7, #7]
 8013946:	2201      	movs	r2, #1
 8013948:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801394a:	4618      	mov	r0, r3
 801394c:	f7ff fc13 	bl	8013176 <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
            }
          }
        }
      }
    break;
 8013950:	e108      	b.n	8013b64 <mscd_xfer_cb+0x440>
          else if (resplen == 0)
 8013952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013954:	2b00      	cmp	r3, #0
 8013956:	d10f      	bne.n	8013978 <mscd_xfer_cb+0x254>
            if (p_cbw->total_bytes)
 8013958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801395a:	689b      	ldr	r3, [r3, #8]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d006      	beq.n	801396e <mscd_xfer_cb+0x24a>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8013960:	79fb      	ldrb	r3, [r7, #7]
 8013962:	2201      	movs	r2, #1
 8013964:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013966:	4618      	mov	r0, r3
 8013968:	f7ff fc05 	bl	8013176 <fail_scsi_op>
    break;
 801396c:	e0fa      	b.n	8013b64 <mscd_xfer_cb+0x440>
              p_msc->stage = MSC_STAGE_STATUS;
 801396e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013970:	2202      	movs	r2, #2
 8013972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8013976:	e0f5      	b.n	8013b64 <mscd_xfer_cb+0x440>
            if ( p_cbw->total_bytes == 0 )
 8013978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801397a:	689b      	ldr	r3, [r3, #8]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d10f      	bne.n	80139a0 <mscd_xfer_cb+0x27c>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8013980:	79fb      	ldrb	r3, [r7, #7]
 8013982:	2201      	movs	r2, #1
 8013984:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013986:	4618      	mov	r0, r3
 8013988:	f7ff fbf5 	bl	8013176 <fail_scsi_op>
    break;
 801398c:	e0ea      	b.n	8013b64 <mscd_xfer_cb+0x440>
 801398e:	bf00      	nop
 8013990:	24000ae0 	.word	0x24000ae0
 8013994:	43425355 	.word	0x43425355
 8013998:	24000b20 	.word	0x24000b20
 801399c:	e000edf0 	.word	0xe000edf0
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 80139a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80139a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139a4:	689b      	ldr	r3, [r3, #8]
 80139a6:	627a      	str	r2, [r7, #36]	; 0x24
 80139a8:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 80139aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139ac:	6a3b      	ldr	r3, [r7, #32]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	bf28      	it	cs
 80139b2:	461a      	movcs	r2, r3
 80139b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139b6:	635a      	str	r2, [r3, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 80139b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139ba:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 80139be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	79f8      	ldrb	r0, [r7, #7]
 80139c6:	4a92      	ldr	r2, [pc, #584]	; (8013c10 <mscd_xfer_cb+0x4ec>)
 80139c8:	f002 fda0 	bl	801650c <usbd_edpt_xfer>
 80139cc:	4603      	mov	r3, r0
 80139ce:	f083 0301 	eor.w	r3, r3, #1
 80139d2:	b2db      	uxtb	r3, r3
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	f000 80c5 	beq.w	8013b64 <mscd_xfer_cb+0x440>
 80139da:	4b8e      	ldr	r3, [pc, #568]	; (8013c14 <mscd_xfer_cb+0x4f0>)
 80139dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f003 0301 	and.w	r3, r3, #1
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d000      	beq.n	80139ec <mscd_xfer_cb+0x2c8>
 80139ea:	be00      	bkpt	0x0000
 80139ec:	2300      	movs	r3, #0
 80139ee:	e10b      	b.n	8013c08 <mscd_xfer_cb+0x4e4>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 80139f0:	bf00      	nop
    break;
 80139f2:	e0b7      	b.n	8013b64 <mscd_xfer_cb+0x440>

    case MSC_STAGE_DATA:
      TU_LOG(MSC_DEBUG, "  SCSI Data [Lun%u]\r\n", p_cbw->lun);
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 80139f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139f6:	7bdb      	ldrb	r3, [r3, #15]
 80139f8:	2b28      	cmp	r3, #40	; 0x28
 80139fa:	d116      	bne.n	8013a2a <mscd_xfer_cb+0x306>
      {
        p_msc->xferred_len += xferred_bytes;
 80139fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	441a      	add	r2, r3
 8013a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a06:	639a      	str	r2, [r3, #56]	; 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 8013a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d304      	bcc.n	8013a1e <mscd_xfer_cb+0x2fa>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 8013a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a16:	2202      	movs	r2, #2
 8013a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 8013a1c:	e0a4      	b.n	8013b68 <mscd_xfer_cb+0x444>
          proc_read10_cmd(rhport, p_msc);
 8013a1e:	79fb      	ldrb	r3, [r7, #7]
 8013a20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a22:	4618      	mov	r0, r3
 8013a24:	f000 fbae 	bl	8014184 <proc_read10_cmd>
    break;
 8013a28:	e09e      	b.n	8013b68 <mscd_xfer_cb+0x444>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8013a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a2c:	7bdb      	ldrb	r3, [r3, #15]
 8013a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8013a30:	d106      	bne.n	8013a40 <mscd_xfer_cb+0x31c>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 8013a32:	79fb      	ldrb	r3, [r7, #7]
 8013a34:	683a      	ldr	r2, [r7, #0]
 8013a36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f000 fc8f 	bl	801435c <proc_write10_new_data>
    break;
 8013a3e:	e093      	b.n	8013b68 <mscd_xfer_cb+0x444>
        p_msc->xferred_len += xferred_bytes;
 8013a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	441a      	add	r2, r3
 8013a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a4a:	639a      	str	r2, [r3, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 8013a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a4e:	7b1b      	ldrb	r3, [r3, #12]
 8013a50:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 8013a52:	7ffb      	ldrb	r3, [r7, #31]
 8013a54:	61bb      	str	r3, [r7, #24]
 8013a56:	2307      	movs	r3, #7
 8013a58:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8013a5a:	7dfb      	ldrb	r3, [r7, #23]
 8013a5c:	69ba      	ldr	r2, [r7, #24]
 8013a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8013a62:	f003 0301 	and.w	r3, r3, #1
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	bf14      	ite	ne
 8013a6a:	2301      	movne	r3, #1
 8013a6c:	2300      	moveq	r3, #0
 8013a6e:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 8013a70:	f083 0301 	eor.w	r3, r3, #1
 8013a74:	b2db      	uxtb	r3, r3
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d014      	beq.n	8013aa4 <mscd_xfer_cb+0x380>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8013a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a7c:	7b58      	ldrb	r0, [r3, #13]
 8013a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a80:	f103 010f 	add.w	r1, r3, #15
 8013a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	4a61      	ldr	r2, [pc, #388]	; (8013c10 <mscd_xfer_cb+0x4ec>)
 8013a8c:	f7f2 fee4 	bl	8006858 <tud_msc_scsi_cb>
 8013a90:	64b8      	str	r0, [r7, #72]	; 0x48
          if ( cb_result < 0 )
 8013a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	da05      	bge.n	8013aa4 <mscd_xfer_cb+0x380>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8013a98:	79fb      	ldrb	r3, [r7, #7]
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7ff fb69 	bl	8013176 <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 8013aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d304      	bcc.n	8013aba <mscd_xfer_cb+0x396>
          p_msc->stage = MSC_STAGE_STATUS;
 8013ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ab2:	2202      	movs	r2, #2
 8013ab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8013ab8:	e056      	b.n	8013b68 <mscd_xfer_cb+0x444>
          TU_BREAKPOINT();
 8013aba:	4b56      	ldr	r3, [pc, #344]	; (8013c14 <mscd_xfer_cb+0x4f0>)
 8013abc:	647b      	str	r3, [r7, #68]	; 0x44
 8013abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	f003 0301 	and.w	r3, r3, #1
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d04e      	beq.n	8013b68 <mscd_xfer_cb+0x444>
 8013aca:	be00      	bkpt	0x0000
    break;
 8013acc:	e04c      	b.n	8013b68 <mscd_xfer_cb+0x444>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 8013ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ad0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013ad4:	79ba      	ldrb	r2, [r7, #6]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d148      	bne.n	8013b6c <mscd_xfer_cb+0x448>
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	2b0d      	cmp	r3, #13
 8013ade:	d145      	bne.n	8013b6c <mscd_xfer_cb+0x448>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 8013ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ae2:	7bdb      	ldrb	r3, [r3, #15]
 8013ae4:	2b28      	cmp	r3, #40	; 0x28
 8013ae6:	d002      	beq.n	8013aee <mscd_xfer_cb+0x3ca>
 8013ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8013aea:	d009      	beq.n	8013b00 <mscd_xfer_cb+0x3dc>
 8013aec:	e011      	b.n	8013b12 <mscd_xfer_cb+0x3ee>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 8013aee:	4b4a      	ldr	r3, [pc, #296]	; (8013c18 <mscd_xfer_cb+0x4f4>)
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d01a      	beq.n	8013b2a <mscd_xfer_cb+0x406>
 8013af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013af6:	7b5b      	ldrb	r3, [r3, #13]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f3af 8000 	nop.w
          break;
 8013afe:	e014      	b.n	8013b2a <mscd_xfer_cb+0x406>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 8013b00:	4b46      	ldr	r3, [pc, #280]	; (8013c1c <mscd_xfer_cb+0x4f8>)
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d013      	beq.n	8013b2e <mscd_xfer_cb+0x40a>
 8013b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b08:	7b5b      	ldrb	r3, [r3, #13]
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f3af 8000 	nop.w
          break;
 8013b10:	e00d      	b.n	8013b2e <mscd_xfer_cb+0x40a>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8013b12:	4b43      	ldr	r3, [pc, #268]	; (8013c20 <mscd_xfer_cb+0x4fc>)
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d00c      	beq.n	8013b32 <mscd_xfer_cb+0x40e>
 8013b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b1a:	7b5a      	ldrb	r2, [r3, #13]
 8013b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b1e:	330f      	adds	r3, #15
 8013b20:	4619      	mov	r1, r3
 8013b22:	4610      	mov	r0, r2
 8013b24:	f3af 8000 	nop.w
          break;
 8013b28:	e003      	b.n	8013b32 <mscd_xfer_cb+0x40e>
          break;
 8013b2a:	bf00      	nop
 8013b2c:	e002      	b.n	8013b34 <mscd_xfer_cb+0x410>
          break;
 8013b2e:	bf00      	nop
 8013b30:	e000      	b.n	8013b34 <mscd_xfer_cb+0x410>
          break;
 8013b32:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8013b34:	79fb      	ldrb	r3, [r7, #7]
 8013b36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7ff fb05 	bl	8013148 <prepare_cbw>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	f083 0301 	eor.w	r3, r3, #1
 8013b44:	b2db      	uxtb	r3, r3
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d010      	beq.n	8013b6c <mscd_xfer_cb+0x448>
 8013b4a:	4b32      	ldr	r3, [pc, #200]	; (8013c14 <mscd_xfer_cb+0x4f0>)
 8013b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	f003 0301 	and.w	r3, r3, #1
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d000      	beq.n	8013b5c <mscd_xfer_cb+0x438>
 8013b5a:	be00      	bkpt	0x0000
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	e053      	b.n	8013c08 <mscd_xfer_cb+0x4e4>
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
      }
    break;

    default : break;
 8013b60:	bf00      	nop
 8013b62:	e004      	b.n	8013b6e <mscd_xfer_cb+0x44a>
    break;
 8013b64:	bf00      	nop
 8013b66:	e002      	b.n	8013b6e <mscd_xfer_cb+0x44a>
    break;
 8013b68:	bf00      	nop
 8013b6a:	e000      	b.n	8013b6e <mscd_xfer_cb+0x44a>
    break;
 8013b6c:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 8013b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b74:	2b02      	cmp	r3, #2
 8013b76:	d146      	bne.n	8013c06 <mscd_xfer_cb+0x4e2>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 8013b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b7a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013b7e:	79fb      	ldrb	r3, [r7, #7]
 8013b80:	4611      	mov	r1, r2
 8013b82:	4618      	mov	r0, r3
 8013b84:	f002 fdfe 	bl	8016784 <usbd_edpt_stalled>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	f083 0301 	eor.w	r3, r3, #1
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d038      	beq.n	8013c06 <mscd_xfer_cb+0x4e2>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8013b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b96:	689a      	ldr	r2, [r3, #8]
 8013b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d91c      	bls.n	8013bda <mscd_xfer_cb+0x4b6>
 8013ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ba2:	7b1b      	ldrb	r3, [r3, #12]
 8013ba4:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 8013ba6:	7dbb      	ldrb	r3, [r7, #22]
 8013ba8:	613b      	str	r3, [r7, #16]
 8013baa:	2307      	movs	r3, #7
 8013bac:	73fb      	strb	r3, [r7, #15]
 8013bae:	7bfb      	ldrb	r3, [r7, #15]
 8013bb0:	693a      	ldr	r2, [r7, #16]
 8013bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8013bb6:	f003 0301 	and.w	r3, r3, #1
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	bf14      	ite	ne
 8013bbe:	2301      	movne	r3, #1
 8013bc0:	2300      	moveq	r3, #0
 8013bc2:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d008      	beq.n	8013bda <mscd_xfer_cb+0x4b6>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8013bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bca:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013bce:	79fb      	ldrb	r3, [r7, #7]
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f002 fd3e 	bl	8016654 <usbd_edpt_stall>
 8013bd8:	e015      	b.n	8013c06 <mscd_xfer_cb+0x4e2>
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 8013bda:	79fb      	ldrb	r3, [r7, #7]
 8013bdc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7ff fa92 	bl	8013108 <send_csw>
 8013be4:	4603      	mov	r3, r0
 8013be6:	f083 0301 	eor.w	r3, r3, #1
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d00a      	beq.n	8013c06 <mscd_xfer_cb+0x4e2>
 8013bf0:	4b08      	ldr	r3, [pc, #32]	; (8013c14 <mscd_xfer_cb+0x4f0>)
 8013bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8013bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	f003 0301 	and.w	r3, r3, #1
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d000      	beq.n	8013c02 <mscd_xfer_cb+0x4de>
 8013c00:	be00      	bkpt	0x0000
 8013c02:	2300      	movs	r3, #0
 8013c04:	e000      	b.n	8013c08 <mscd_xfer_cb+0x4e4>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 8013c06:	2301      	movs	r3, #1
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3760      	adds	r7, #96	; 0x60
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	24000b20 	.word	0x24000b20
 8013c14:	e000edf0 	.word	0xe000edf0
	...

08013c24 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 8013c24:	b590      	push	{r4, r7, lr}
 8013c26:	b0b7      	sub	sp, #220	; 0xdc
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	60b9      	str	r1, [r7, #8]
 8013c2c:	607a      	str	r2, [r7, #4]
 8013c2e:	603b      	str	r3, [r7, #0]
 8013c30:	4603      	mov	r3, r0
 8013c32:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 8013c34:	4bb2      	ldr	r3, [pc, #712]	; (8013f00 <proc_builtin_scsi+0x2dc>)
 8013c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  switch ( scsi_cmd[0] )
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	2b25      	cmp	r3, #37	; 0x25
 8013c40:	f200 8286 	bhi.w	8014150 <proc_builtin_scsi+0x52c>
 8013c44:	a201      	add	r2, pc, #4	; (adr r2, 8013c4c <proc_builtin_scsi+0x28>)
 8013c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c4a:	bf00      	nop
 8013c4c:	08013ce5 	.word	0x08013ce5
 8013c50:	08014151 	.word	0x08014151
 8013c54:	08014151 	.word	0x08014151
 8013c58:	08014089 	.word	0x08014089
 8013c5c:	08014151 	.word	0x08014151
 8013c60:	08014151 	.word	0x08014151
 8013c64:	08014151 	.word	0x08014151
 8013c68:	08014151 	.word	0x08014151
 8013c6c:	08014151 	.word	0x08014151
 8013c70:	08014151 	.word	0x08014151
 8013c74:	08014151 	.word	0x08014151
 8013c78:	08014151 	.word	0x08014151
 8013c7c:	08014151 	.word	0x08014151
 8013c80:	08014151 	.word	0x08014151
 8013c84:	08014151 	.word	0x08014151
 8013c88:	08014151 	.word	0x08014151
 8013c8c:	08014151 	.word	0x08014151
 8013c90:	08014151 	.word	0x08014151
 8013c94:	08013f09 	.word	0x08013f09
 8013c98:	08014151 	.word	0x08014151
 8013c9c:	08014151 	.word	0x08014151
 8013ca0:	08014151 	.word	0x08014151
 8013ca4:	08014151 	.word	0x08014151
 8013ca8:	08014151 	.word	0x08014151
 8013cac:	08014151 	.word	0x08014151
 8013cb0:	08014151 	.word	0x08014151
 8013cb4:	08013fd1 	.word	0x08013fd1
 8013cb8:	08013d21 	.word	0x08013d21
 8013cbc:	08014151 	.word	0x08014151
 8013cc0:	08014151 	.word	0x08014151
 8013cc4:	08014151 	.word	0x08014151
 8013cc8:	08014151 	.word	0x08014151
 8013ccc:	08014151 	.word	0x08014151
 8013cd0:	08014151 	.word	0x08014151
 8013cd4:	08014151 	.word	0x08014151
 8013cd8:	08013e49 	.word	0x08013e49
 8013cdc:	08014151 	.word	0x08014151
 8013ce0:	08013da3 	.word	0x08013da3
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ( !tud_msc_test_unit_ready_cb(lun) )
 8013cea:	7bfb      	ldrb	r3, [r7, #15]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f2 fd91 	bl	8006814 <tud_msc_test_unit_ready_cb>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	f083 0301 	eor.w	r3, r3, #1
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f000 822d 	beq.w	801415a <proc_builtin_scsi+0x536>
      {
        // Failed status response
        resplen = - 1;
 8013d00:	f04f 33ff 	mov.w	r3, #4294967295
 8013d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8013d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f040 8222 	bne.w	801415a <proc_builtin_scsi+0x536>
 8013d16:	7bfb      	ldrb	r3, [r7, #15]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7ff fb47 	bl	80133ac <set_sense_medium_not_present>
      }
    break;
 8013d1e:	e21c      	b.n	801415a <proc_builtin_scsi+0x536>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 8013d20:	2300      	movs	r3, #0
 8013d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if (tud_msc_start_stop_cb)
 8013d26:	4b77      	ldr	r3, [pc, #476]	; (8013f04 <proc_builtin_scsi+0x2e0>)
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f000 8218 	beq.w	801415e <proc_builtin_scsi+0x53a>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8013d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013d38:	791b      	ldrb	r3, [r3, #4]
 8013d3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8013d3e:	b2db      	uxtb	r3, r3
 8013d40:	4619      	mov	r1, r3
 8013d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013d46:	791b      	ldrb	r3, [r3, #4]
 8013d48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013d4c:	b2db      	uxtb	r3, r3
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	bf14      	ite	ne
 8013d52:	2301      	movne	r3, #1
 8013d54:	2300      	moveq	r3, #0
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013d5c:	791b      	ldrb	r3, [r3, #4]
 8013d5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	bf14      	ite	ne
 8013d68:	2301      	movne	r3, #1
 8013d6a:	2300      	moveq	r3, #0
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	7bf8      	ldrb	r0, [r7, #15]
 8013d70:	f7f2 fda6 	bl	80068c0 <tud_msc_start_stop_cb>
 8013d74:	4603      	mov	r3, r0
 8013d76:	f083 0301 	eor.w	r3, r3, #1
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f000 81ee 	beq.w	801415e <proc_builtin_scsi+0x53a>
        {
          // Failed status response
          resplen = - 1;
 8013d82:	f04f 33ff 	mov.w	r3, #4294967295
 8013d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8013d8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	f040 81e3 	bne.w	801415e <proc_builtin_scsi+0x53a>
 8013d98:	7bfb      	ldrb	r3, [r7, #15]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7ff fb06 	bl	80133ac <set_sense_medium_not_present>
        }
      }
    break;
 8013da0:	e1dd      	b.n	801415e <proc_builtin_scsi+0x53a>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 8013da2:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8013da6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013daa:	7bfb      	ldrb	r3, [r7, #15]
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7f2 fd3d 	bl	800682c <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 8013db2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8013dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d003      	beq.n	8013dc8 <proc_builtin_scsi+0x1a4>
 8013dc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10e      	bne.n	8013de6 <proc_builtin_scsi+0x1c2>
      {
        resplen = -1;
 8013dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8013dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d134      	bne.n	8013e46 <proc_builtin_scsi+0x222>
 8013ddc:	7bfb      	ldrb	r3, [r7, #15]
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7ff fae4 	bl	80133ac <set_sense_medium_not_present>
 8013de4:	e02f      	b.n	8013e46 <proc_builtin_scsi+0x222>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 8013de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013de8:	3b01      	subs	r3, #1
 8013dea:	ba1b      	rev	r3, r3
 8013dec:	667b      	str	r3, [r7, #100]	; 0x64
        read_capa10.block_size = tu_htonl(block_size);
 8013dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013df2:	ba1b      	rev	r3, r3
 8013df4:	66bb      	str	r3, [r7, #104]	; 0x68

        resplen = sizeof(read_capa10);
 8013df6:	2308      	movs	r3, #8
 8013df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &read_capa10, (size_t) resplen));
 8013dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013e00:	687a      	ldr	r2, [r7, #4]
 8013e02:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8013e06:	683a      	ldr	r2, [r7, #0]
 8013e08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8013e0c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013e10:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8013e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (count > destsz) {
 8013e18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8013e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d202      	bcs.n	8013e2a <proc_builtin_scsi+0x206>
    return -1;
 8013e24:	f04f 33ff 	mov.w	r3, #4294967295
 8013e28:	e008      	b.n	8013e3c <proc_builtin_scsi+0x218>
  memcpy(dest, src, count);
 8013e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013e2e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013e32:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8013e36:	f004 fe79 	bl	8018b2c <memcpy>
  return 0;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	f000 8190 	beq.w	8014162 <proc_builtin_scsi+0x53e>
 8013e42:	2300      	movs	r3, #0
 8013e44:	e196      	b.n	8014174 <proc_builtin_scsi+0x550>
      }
    }
    break;
 8013e46:	e18c      	b.n	8014162 <proc_builtin_scsi+0x53e>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 8013e48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	601a      	str	r2, [r3, #0]
 8013e50:	605a      	str	r2, [r3, #4]
 8013e52:	609a      	str	r2, [r3, #8]
 8013e54:	2308      	movs	r3, #8
 8013e56:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8013e5a:	2302      	movs	r3, #2
 8013e5c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8013e60:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8013e64:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8013e68:	7bfb      	ldrb	r3, [r7, #15]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7f2 fcde 	bl	800682c <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8013e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d003      	beq.n	8013e7e <proc_builtin_scsi+0x25a>
 8013e76:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d10e      	bne.n	8013e9c <proc_builtin_scsi+0x278>
      {
        resplen = -1;
 8013e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8013e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d135      	bne.n	8013efe <proc_builtin_scsi+0x2da>
 8013e92:	7bfb      	ldrb	r3, [r7, #15]
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7ff fa89 	bl	80133ac <set_sense_medium_not_present>
 8013e9a:	e030      	b.n	8013efe <proc_builtin_scsi+0x2da>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 8013e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e9e:	ba1b      	rev	r3, r3
 8013ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8013ea2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013ea6:	ba5b      	rev16	r3, r3
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        resplen = sizeof(read_fmt_capa);
 8013eae:	230c      	movs	r3, #12
 8013eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &read_fmt_capa, (size_t) resplen));
 8013eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013eb8:	687a      	ldr	r2, [r7, #4]
 8013eba:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8013ebe:	683a      	ldr	r2, [r7, #0]
 8013ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013ec4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013ec8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (count > destsz) {
 8013ed0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013ed4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	d202      	bcs.n	8013ee2 <proc_builtin_scsi+0x2be>
    return -1;
 8013edc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ee0:	e008      	b.n	8013ef4 <proc_builtin_scsi+0x2d0>
  memcpy(dest, src, count);
 8013ee2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013ee6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013eea:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8013eee:	f004 fe1d 	bl	8018b2c <memcpy>
  return 0;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	f000 8136 	beq.w	8014166 <proc_builtin_scsi+0x542>
 8013efa:	2300      	movs	r3, #0
 8013efc:	e13a      	b.n	8014174 <proc_builtin_scsi+0x550>
      }
    }
    break;
 8013efe:	e132      	b.n	8014166 <proc_builtin_scsi+0x542>
 8013f00:	24000ae0 	.word	0x24000ae0
 8013f04:	080068c1 	.word	0x080068c1

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 8013f08:	f107 0314 	add.w	r3, r7, #20
 8013f0c:	2224      	movs	r2, #36	; 0x24
 8013f0e:	2100      	movs	r1, #0
 8013f10:	4618      	mov	r0, r3
 8013f12:	f004 fdd2 	bl	8018aba <memset>
 8013f16:	7d7b      	ldrb	r3, [r7, #21]
 8013f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f1c:	757b      	strb	r3, [r7, #21]
 8013f1e:	2302      	movs	r3, #2
 8013f20:	75bb      	strb	r3, [r7, #22]
 8013f22:	7dfb      	ldrb	r3, [r7, #23]
 8013f24:	2202      	movs	r2, #2
 8013f26:	f362 0303 	bfi	r3, r2, #0, #4
 8013f2a:	75fb      	strb	r3, [r7, #23]
 8013f2c:	231f      	movs	r3, #31
 8013f2e:	763b      	strb	r3, [r7, #24]
          .response_data_format = 2,
          .additional_length    = sizeof(scsi_inquiry_resp_t) - 5,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 8013f30:	f107 0314 	add.w	r3, r7, #20
 8013f34:	3308      	adds	r3, #8
 8013f36:	2208      	movs	r2, #8
 8013f38:	2120      	movs	r1, #32
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f004 fdbd 	bl	8018aba <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 8013f40:	f107 0314 	add.w	r3, r7, #20
 8013f44:	3310      	adds	r3, #16
 8013f46:	2210      	movs	r2, #16
 8013f48:	2120      	movs	r1, #32
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f004 fdb5 	bl	8018aba <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 8013f50:	f107 0314 	add.w	r3, r7, #20
 8013f54:	3320      	adds	r3, #32
 8013f56:	2204      	movs	r2, #4
 8013f58:	2120      	movs	r1, #32
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f004 fdad 	bl	8018aba <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 8013f60:	f107 0314 	add.w	r3, r7, #20
 8013f64:	f103 0420 	add.w	r4, r3, #32
 8013f68:	f107 0314 	add.w	r3, r7, #20
 8013f6c:	f103 0210 	add.w	r2, r3, #16
 8013f70:	f107 0314 	add.w	r3, r7, #20
 8013f74:	f103 0108 	add.w	r1, r3, #8
 8013f78:	7bf8      	ldrb	r0, [r7, #15]
 8013f7a:	4623      	mov	r3, r4
 8013f7c:	f7f2 fc12 	bl	80067a4 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 8013f80:	2324      	movs	r3, #36	; 0x24
 8013f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &inquiry_rsp, (size_t) resplen));
 8013f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8013f90:	683a      	ldr	r2, [r7, #0]
 8013f92:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8013f96:	f107 0214 	add.w	r2, r7, #20
 8013f9a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8013f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (count > destsz) {
 8013fa2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d202      	bcs.n	8013fb4 <proc_builtin_scsi+0x390>
    return -1;
 8013fae:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb2:	e008      	b.n	8013fc6 <proc_builtin_scsi+0x3a2>
  memcpy(dest, src, count);
 8013fb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013fb8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013fbc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8013fc0:	f004 fdb4 	bl	8018b2c <memcpy>
  return 0;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	f000 80cf 	beq.w	801416a <proc_builtin_scsi+0x546>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	e0d1      	b.n	8014174 <proc_builtin_scsi+0x550>
    }
    break;

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 8013fd0:	2303      	movs	r3, #3
 8013fd2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8013fdc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8013fe0:	f36f 0306 	bfc	r3, #0, #7
 8013fe4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8013fe8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8013fec:	f36f 13c7 	bfc	r3, #7, #1
 8013ff0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
      if ( tud_msc_is_writable_cb )
 8014000:	4b5e      	ldr	r3, [pc, #376]	; (801417c <proc_builtin_scsi+0x558>)
 8014002:	2b00      	cmp	r3, #0
 8014004:	d006      	beq.n	8014014 <proc_builtin_scsi+0x3f0>
      {
        writable = tud_msc_is_writable_cb(lun);
 8014006:	7bfb      	ldrb	r3, [r7, #15]
 8014008:	4618      	mov	r0, r3
 801400a:	f7f2 fc7d 	bl	8006908 <tud_msc_is_writable_cb>
 801400e:	4603      	mov	r3, r0
 8014010:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
      }

      mode_resp.write_protected = !writable;
 8014014:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8014018:	2b00      	cmp	r3, #0
 801401a:	bf14      	ite	ne
 801401c:	2301      	movne	r3, #1
 801401e:	2300      	moveq	r3, #0
 8014020:	b2db      	uxtb	r3, r3
 8014022:	f083 0301 	eor.w	r3, r3, #1
 8014026:	b2db      	uxtb	r3, r3
 8014028:	f003 0301 	and.w	r3, r3, #1
 801402c:	b2da      	uxtb	r2, r3
 801402e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8014032:	f362 13c7 	bfi	r3, r2, #7, #1
 8014036:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

      resplen = sizeof(mode_resp);
 801403a:	2304      	movs	r3, #4
 801403c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &mode_resp, (size_t) resplen));
 8014040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014044:	687a      	ldr	r2, [r7, #4]
 8014046:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801404a:	683a      	ldr	r2, [r7, #0]
 801404c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014050:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014054:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (count > destsz) {
 801405c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014064:	429a      	cmp	r2, r3
 8014066:	d202      	bcs.n	801406e <proc_builtin_scsi+0x44a>
    return -1;
 8014068:	f04f 33ff 	mov.w	r3, #4294967295
 801406c:	e008      	b.n	8014080 <proc_builtin_scsi+0x45c>
  memcpy(dest, src, count);
 801406e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014072:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014076:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801407a:	f004 fd57 	bl	8018b2c <memcpy>
  return 0;
 801407e:	2300      	movs	r3, #0
 8014080:	2b00      	cmp	r3, #0
 8014082:	d074      	beq.n	801416e <proc_builtin_scsi+0x54a>
 8014084:	2300      	movs	r3, #0
 8014086:	e075      	b.n	8014174 <proc_builtin_scsi+0x550>
    }
    break;

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 8014088:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801408c:	2200      	movs	r2, #0
 801408e:	601a      	str	r2, [r3, #0]
 8014090:	605a      	str	r2, [r3, #4]
 8014092:	609a      	str	r2, [r3, #8]
 8014094:	60da      	str	r2, [r3, #12]
 8014096:	821a      	strh	r2, [r3, #16]
 8014098:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801409c:	2270      	movs	r2, #112	; 0x70
 801409e:	f362 0306 	bfi	r3, r2, #0, #7
 80140a2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80140a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80140aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140ae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 80140b2:	230a      	movs	r3, #10
 80140b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 80140b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80140bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80140c0:	f003 030f 	and.w	r3, r3, #15
 80140c4:	b2da      	uxtb	r2, r3
 80140c6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80140ca:	f362 0303 	bfi	r3, r2, #0, #4
 80140ce:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 80140d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80140d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 80140de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80140e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80140e6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

      resplen = sizeof(sense_rsp);
 80140ea:	2312      	movs	r3, #18
 80140ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &sense_rsp, (size_t) resplen));
 80140f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80140f4:	687a      	ldr	r2, [r7, #4]
 80140f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80140fa:	683a      	ldr	r2, [r7, #0]
 80140fc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80140fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014102:	67ba      	str	r2, [r7, #120]	; 0x78
 8014104:	677b      	str	r3, [r7, #116]	; 0x74
  if (count > destsz) {
 8014106:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801410a:	429a      	cmp	r2, r3
 801410c:	d202      	bcs.n	8014114 <proc_builtin_scsi+0x4f0>
    return -1;
 801410e:	f04f 33ff 	mov.w	r3, #4294967295
 8014112:	e006      	b.n	8014122 <proc_builtin_scsi+0x4fe>
  memcpy(dest, src, count);
 8014114:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014116:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014118:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801411c:	f004 fd06 	bl	8018b2c <memcpy>
  return 0;
 8014120:	2300      	movs	r3, #0
 8014122:	2b00      	cmp	r3, #0
 8014124:	d001      	beq.n	801412a <proc_builtin_scsi+0x506>
 8014126:	2300      	movs	r3, #0
 8014128:	e024      	b.n	8014174 <proc_builtin_scsi+0x550>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 801412a:	4b15      	ldr	r3, [pc, #84]	; (8014180 <proc_builtin_scsi+0x55c>)
 801412c:	2b00      	cmp	r3, #0
 801412e:	d008      	beq.n	8014142 <proc_builtin_scsi+0x51e>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	b29a      	uxth	r2, r3
 8014134:	7bfb      	ldrb	r3, [r7, #15]
 8014136:	6879      	ldr	r1, [r7, #4]
 8014138:	4618      	mov	r0, r3
 801413a:	f7f2 fbd6 	bl	80068ea <tud_msc_request_sense_cb>
 801413e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 8014142:	7bf8      	ldrb	r0, [r7, #15]
 8014144:	2300      	movs	r3, #0
 8014146:	2200      	movs	r2, #0
 8014148:	2100      	movs	r1, #0
 801414a:	f7ff f90b 	bl	8013364 <tud_msc_set_sense>
    }
    break;
 801414e:	e00f      	b.n	8014170 <proc_builtin_scsi+0x54c>

    default: resplen = -1; break;
 8014150:	f04f 33ff 	mov.w	r3, #4294967295
 8014154:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014158:	e00a      	b.n	8014170 <proc_builtin_scsi+0x54c>
    break;
 801415a:	bf00      	nop
 801415c:	e008      	b.n	8014170 <proc_builtin_scsi+0x54c>
    break;
 801415e:	bf00      	nop
 8014160:	e006      	b.n	8014170 <proc_builtin_scsi+0x54c>
    break;
 8014162:	bf00      	nop
 8014164:	e004      	b.n	8014170 <proc_builtin_scsi+0x54c>
    break;
 8014166:	bf00      	nop
 8014168:	e002      	b.n	8014170 <proc_builtin_scsi+0x54c>
    break;
 801416a:	bf00      	nop
 801416c:	e000      	b.n	8014170 <proc_builtin_scsi+0x54c>
    break;
 801416e:	bf00      	nop
  }

  return resplen;
 8014170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 8014174:	4618      	mov	r0, r3
 8014176:	37dc      	adds	r7, #220	; 0xdc
 8014178:	46bd      	mov	sp, r7
 801417a:	bd90      	pop	{r4, r7, pc}
 801417c:	08006909 	.word	0x08006909
 8014180:	080068eb 	.word	0x080068eb

08014184 <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b092      	sub	sp, #72	; 0x48
 8014188:	af02      	add	r7, sp, #8
 801418a:	4603      	mov	r3, r0
 801418c:	6039      	str	r1, [r7, #0]
 801418e:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8014194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014196:	f7ff f86c 	bl	8013272 <rdwr10_get_blocksize>
 801419a:	4603      	mov	r3, r0
 801419c:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 801419e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141a0:	330f      	adds	r3, #15
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7ff f83f 	bl	8013226 <rdwr10_get_lba>
 80141a8:	4601      	mov	r1, r0
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80141ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80141b4:	440b      	add	r3, r1
 80141b6:	637b      	str	r3, [r7, #52]	; 0x34

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80141b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ba:	689a      	ldr	r2, [r3, #8]
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141c0:	1ad3      	subs	r3, r2, r3
 80141c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80141c6:	627a      	str	r2, [r7, #36]	; 0x24
 80141c8:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 80141ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141cc:	6a3b      	ldr	r3, [r7, #32]
 80141ce:	4293      	cmp	r3, r2
 80141d0:	bf28      	it	cs
 80141d2:	4613      	movcs	r3, r2
 80141d4:	633b      	str	r3, [r7, #48]	; 0x30

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80141dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80141e0:	fb01 f202 	mul.w	r2, r1, r2
 80141e4:	1a9b      	subs	r3, r3, r2
 80141e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 80141e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ea:	7b58      	ldrb	r0, [r3, #13]
 80141ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ee:	9300      	str	r3, [sp, #0]
 80141f0:	4b2c      	ldr	r3, [pc, #176]	; (80142a4 <proc_read10_cmd+0x120>)
 80141f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80141f6:	f7f2 fa9f 	bl	8006738 <tud_msc_read10_cb>
 80141fa:	6338      	str	r0, [r7, #48]	; 0x30

  if ( nbytes < 0 )
 80141fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fe:	2b00      	cmp	r3, #0
 8014200:	da0b      	bge.n	801421a <proc_read10_cmd+0x96>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG(MSC_DEBUG, "  tud_msc_read10_cb() return -1\r\n");

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 8014202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014204:	7b5b      	ldrb	r3, [r3, #13]
 8014206:	4618      	mov	r0, r3
 8014208:	f7ff f8d0 	bl	80133ac <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 801420c:	79fb      	ldrb	r3, [r7, #7]
 801420e:	2201      	movs	r2, #1
 8014210:	6839      	ldr	r1, [r7, #0]
 8014212:	4618      	mov	r0, r3
 8014214:	f7fe ffaf 	bl	8013176 <fail_scsi_op>
 8014218:	e040      	b.n	801429c <proc_read10_cmd+0x118>
  }
  else if ( nbytes == 0 )
 801421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801421c:	2b00      	cmp	r3, #0
 801421e:	d124      	bne.n	801426a <proc_read10_cmd+0xe6>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8014226:	79fb      	ldrb	r3, [r7, #7]
 8014228:	77fb      	strb	r3, [r7, #31]
 801422a:	4613      	mov	r3, r2
 801422c:	77bb      	strb	r3, [r7, #30]
 801422e:	2300      	movs	r3, #0
 8014230:	61bb      	str	r3, [r7, #24]
 8014232:	2300      	movs	r3, #0
 8014234:	75fb      	strb	r3, [r7, #23]
 8014236:	2300      	movs	r3, #0
 8014238:	75bb      	strb	r3, [r7, #22]
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 801423a:	f107 0308 	add.w	r3, r7, #8
 801423e:	2200      	movs	r2, #0
 8014240:	601a      	str	r2, [r3, #0]
 8014242:	605a      	str	r2, [r3, #4]
 8014244:	609a      	str	r2, [r3, #8]
 8014246:	7ffb      	ldrb	r3, [r7, #31]
 8014248:	723b      	strb	r3, [r7, #8]
 801424a:	2307      	movs	r3, #7
 801424c:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 801424e:	7fbb      	ldrb	r3, [r7, #30]
 8014250:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8014252:	69bb      	ldr	r3, [r7, #24]
 8014254:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8014256:	7dfb      	ldrb	r3, [r7, #23]
 8014258:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 801425a:	7dba      	ldrb	r2, [r7, #22]
 801425c:	f107 0308 	add.w	r3, r7, #8
 8014260:	4611      	mov	r1, r2
 8014262:	4618      	mov	r0, r3
 8014264:	f001 fe42 	bl	8015eec <dcd_event_handler>
}
 8014268:	e018      	b.n	801429c <proc_read10_cmd+0x118>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8014270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014272:	b29b      	uxth	r3, r3
 8014274:	79f8      	ldrb	r0, [r7, #7]
 8014276:	4a0b      	ldr	r2, [pc, #44]	; (80142a4 <proc_read10_cmd+0x120>)
 8014278:	f002 f948 	bl	801650c <usbd_edpt_xfer>
 801427c:	4603      	mov	r3, r0
 801427e:	f083 0301 	eor.w	r3, r3, #1
 8014282:	b2db      	uxtb	r3, r3
 8014284:	2b00      	cmp	r3, #0
 8014286:	d009      	beq.n	801429c <proc_read10_cmd+0x118>
 8014288:	4b07      	ldr	r3, [pc, #28]	; (80142a8 <proc_read10_cmd+0x124>)
 801428a:	62bb      	str	r3, [r7, #40]	; 0x28
 801428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	f003 0301 	and.w	r3, r3, #1
 8014294:	2b00      	cmp	r3, #0
 8014296:	d000      	beq.n	801429a <proc_read10_cmd+0x116>
 8014298:	be00      	bkpt	0x0000
 801429a:	bf00      	nop
  }
}
 801429c:	3740      	adds	r7, #64	; 0x40
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
 80142a2:	bf00      	nop
 80142a4:	24000b20 	.word	0x24000b20
 80142a8:	e000edf0 	.word	0xe000edf0

080142ac <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b088      	sub	sp, #32
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	4603      	mov	r3, r0
 80142b4:	6039      	str	r1, [r7, #0]
 80142b6:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 80142bc:	2301      	movs	r3, #1
 80142be:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 80142c0:	4b23      	ldr	r3, [pc, #140]	; (8014350 <proc_write10_cmd+0xa4>)
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d006      	beq.n	80142d4 <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 80142c6:	69bb      	ldr	r3, [r7, #24]
 80142c8:	7b5b      	ldrb	r3, [r3, #13]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7f2 fb1c 	bl	8006908 <tud_msc_is_writable_cb>
 80142d0:	4603      	mov	r3, r0
 80142d2:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 80142d4:	7ffb      	ldrb	r3, [r7, #31]
 80142d6:	f083 0301 	eor.w	r3, r3, #1
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d00d      	beq.n	80142fc <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 80142e0:	69bb      	ldr	r3, [r7, #24]
 80142e2:	7b58      	ldrb	r0, [r3, #13]
 80142e4:	2300      	movs	r3, #0
 80142e6:	2227      	movs	r2, #39	; 0x27
 80142e8:	2107      	movs	r1, #7
 80142ea:	f7ff f83b 	bl	8013364 <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80142ee:	79fb      	ldrb	r3, [r7, #7]
 80142f0:	2201      	movs	r2, #1
 80142f2:	6839      	ldr	r1, [r7, #0]
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fe ff3e 	bl	8013176 <fail_scsi_op>
    return;
 80142fa:	e026      	b.n	801434a <proc_write10_cmd+0x9e>
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	689a      	ldr	r2, [r3, #8]
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014304:	1ad3      	subs	r3, r2, r3
 8014306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801430a:	60fa      	str	r2, [r7, #12]
 801430c:	60bb      	str	r3, [r7, #8]
 801430e:	68fa      	ldr	r2, [r7, #12]
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	4293      	cmp	r3, r2
 8014314:	bf28      	it	cs
 8014316:	4613      	movcs	r3, r2
 8014318:	82fb      	strh	r3, [r7, #22]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8014320:	8afb      	ldrh	r3, [r7, #22]
 8014322:	79f8      	ldrb	r0, [r7, #7]
 8014324:	4a0b      	ldr	r2, [pc, #44]	; (8014354 <proc_write10_cmd+0xa8>)
 8014326:	f002 f8f1 	bl	801650c <usbd_edpt_xfer>
 801432a:	4603      	mov	r3, r0
 801432c:	f083 0301 	eor.w	r3, r3, #1
 8014330:	b2db      	uxtb	r3, r3
 8014332:	2b00      	cmp	r3, #0
 8014334:	d009      	beq.n	801434a <proc_write10_cmd+0x9e>
 8014336:	4b08      	ldr	r3, [pc, #32]	; (8014358 <proc_write10_cmd+0xac>)
 8014338:	613b      	str	r3, [r7, #16]
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	f003 0301 	and.w	r3, r3, #1
 8014342:	2b00      	cmp	r3, #0
 8014344:	d000      	beq.n	8014348 <proc_write10_cmd+0x9c>
 8014346:	be00      	bkpt	0x0000
 8014348:	bf00      	nop
}
 801434a:	3720      	adds	r7, #32
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	08006909 	.word	0x08006909
 8014354:	24000b20 	.word	0x24000b20
 8014358:	e000edf0 	.word	0xe000edf0

0801435c <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b092      	sub	sp, #72	; 0x48
 8014360:	af02      	add	r7, sp, #8
 8014362:	4603      	mov	r3, r0
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	607a      	str	r2, [r7, #4]
 8014368:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 801436e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014370:	f7fe ff7f 	bl	8013272 <rdwr10_get_blocksize>
 8014374:	4603      	mov	r3, r0
 8014376:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8014378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801437a:	330f      	adds	r3, #15
 801437c:	4618      	mov	r0, r3
 801437e:	f7fe ff52 	bl	8013226 <rdwr10_get_lba>
 8014382:	4601      	mov	r1, r0
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014388:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801438a:	fbb2 f3f3 	udiv	r3, r2, r3
 801438e:	440b      	add	r3, r1
 8014390:	637b      	str	r3, [r7, #52]	; 0x34

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014396:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014398:	fbb3 f1f2 	udiv	r1, r3, r2
 801439c:	fb01 f202 	mul.w	r2, r1, r2
 80143a0:	1a9b      	subs	r3, r3, r2
 80143a2:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 80143a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143a6:	7b58      	ldrb	r0, [r3, #13]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	9300      	str	r3, [sp, #0]
 80143ac:	4b3c      	ldr	r3, [pc, #240]	; (80144a0 <proc_write10_new_data+0x144>)
 80143ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80143b2:	f7f2 f9dc 	bl	800676e <tud_msc_write10_cb>
 80143b6:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ( nbytes < 0 )
 80143b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	da11      	bge.n	80143e2 <proc_write10_new_data+0x86>
  {
    // negative means error -> failed this scsi op
    TU_LOG(MSC_DEBUG, "  tud_msc_write10_cb() return -1\r\n");

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	441a      	add	r2, r3
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	639a      	str	r2, [r3, #56]	; 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 80143ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143cc:	7b5b      	ldrb	r3, [r3, #13]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7fe ffec 	bl	80133ac <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80143d4:	7bfb      	ldrb	r3, [r7, #15]
 80143d6:	2201      	movs	r2, #1
 80143d8:	68b9      	ldr	r1, [r7, #8]
 80143da:	4618      	mov	r0, r3
 80143dc:	f7fe fecb 	bl	8013176 <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 80143e0:	e059      	b.n	8014496 <proc_write10_new_data+0x13a>
    if ( (uint32_t) nbytes < xferred_bytes )
 80143e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d93f      	bls.n	801446a <proc_write10_new_data+0x10e>
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 80143ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	1ad3      	subs	r3, r2, r3
 80143f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ( nbytes > 0 )
 80143f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	dd0e      	ble.n	8014416 <proc_write10_new_data+0xba>
        p_msc->xferred_len += (uint16_t) nbytes;
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143fe:	b292      	uxth	r2, r2
 8014400:	441a      	add	r2, r3
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	639a      	str	r2, [r3, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 8014406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014408:	4a25      	ldr	r2, [pc, #148]	; (80144a0 <proc_write10_new_data+0x144>)
 801440a:	4413      	add	r3, r2
 801440c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801440e:	4619      	mov	r1, r3
 8014410:	4823      	ldr	r0, [pc, #140]	; (80144a0 <proc_write10_new_data+0x144>)
 8014412:	f004 fb38 	bl	8018a86 <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801441c:	7bfb      	ldrb	r3, [r7, #15]
 801441e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014422:	4613      	mov	r3, r2
 8014424:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442a:	623b      	str	r3, [r7, #32]
 801442c:	2300      	movs	r3, #0
 801442e:	77fb      	strb	r3, [r7, #31]
 8014430:	2300      	movs	r3, #0
 8014432:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8014434:	f107 0310 	add.w	r3, r7, #16
 8014438:	2200      	movs	r2, #0
 801443a:	601a      	str	r2, [r3, #0]
 801443c:	605a      	str	r2, [r3, #4]
 801443e:	609a      	str	r2, [r3, #8]
 8014440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014444:	743b      	strb	r3, [r7, #16]
 8014446:	2307      	movs	r3, #7
 8014448:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 801444a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801444e:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8014450:	6a3b      	ldr	r3, [r7, #32]
 8014452:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8014454:	7ffb      	ldrb	r3, [r7, #31]
 8014456:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8014458:	7fba      	ldrb	r2, [r7, #30]
 801445a:	f107 0310 	add.w	r3, r7, #16
 801445e:	4611      	mov	r1, r2
 8014460:	4618      	mov	r0, r3
 8014462:	f001 fd43 	bl	8015eec <dcd_event_handler>
}
 8014466:	bf00      	nop
}
 8014468:	e015      	b.n	8014496 <proc_write10_new_data+0x13a>
      p_msc->xferred_len += xferred_bytes;
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	441a      	add	r2, r3
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	639a      	str	r2, [r3, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801447e:	429a      	cmp	r2, r3
 8014480:	d304      	bcc.n	801448c <proc_write10_new_data+0x130>
        p_msc->stage = MSC_STAGE_STATUS;
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	2202      	movs	r2, #2
 8014486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 801448a:	e004      	b.n	8014496 <proc_write10_new_data+0x13a>
        proc_write10_cmd(rhport, p_msc);
 801448c:	7bfb      	ldrb	r3, [r7, #15]
 801448e:	68b9      	ldr	r1, [r7, #8]
 8014490:	4618      	mov	r0, r3
 8014492:	f7ff ff0b 	bl	80142ac <proc_write10_cmd>
}
 8014496:	bf00      	nop
 8014498:	3740      	adds	r7, #64	; 0x40
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
 801449e:	bf00      	nop
 80144a0:	24000b20 	.word	0x24000b20

080144a4 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 80144a4:	b480      	push	{r7}
 80144a6:	b085      	sub	sp, #20
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	4611      	mov	r1, r2
 80144b0:	461a      	mov	r2, r3
 80144b2:	460b      	mov	r3, r1
 80144b4:	80fb      	strh	r3, [r7, #6]
 80144b6:	4613      	mov	r3, r2
 80144b8:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 80144ba:	88fb      	ldrh	r3, [r7, #6]
 80144bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80144c0:	d901      	bls.n	80144c6 <tu_fifo_config+0x22>
 80144c2:	2300      	movs	r3, #0
 80144c4:	e01b      	b.n	80144fe <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	68ba      	ldr	r2, [r7, #8]
 80144ca:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	88fa      	ldrh	r2, [r7, #6]
 80144d0:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 80144d2:	88bb      	ldrh	r3, [r7, #4]
 80144d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80144d8:	b299      	uxth	r1, r3
 80144da:	68fa      	ldr	r2, [r7, #12]
 80144dc:	88d3      	ldrh	r3, [r2, #6]
 80144de:	f361 030e 	bfi	r3, r1, #0, #15
 80144e2:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 80144e4:	68fa      	ldr	r2, [r7, #12]
 80144e6:	79d3      	ldrb	r3, [r2, #7]
 80144e8:	7e39      	ldrb	r1, [r7, #24]
 80144ea:	f361 13c7 	bfi	r3, r1, #7, #1
 80144ee:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2200      	movs	r2, #0
 80144f4:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2200      	movs	r2, #0
 80144fa:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80144fc:	2301      	movs	r3, #1
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3714      	adds	r7, #20
 8014502:	46bd      	mov	sp, r7
 8014504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014508:	4770      	bx	lr

0801450a <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 801450a:	b580      	push	{r7, lr}
 801450c:	b08a      	sub	sp, #40	; 0x28
 801450e:	af00      	add	r7, sp, #0
 8014510:	60f8      	str	r0, [r7, #12]
 8014512:	60b9      	str	r1, [r7, #8]
 8014514:	4613      	mov	r3, r2
 8014516:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 801451c:	88fb      	ldrh	r3, [r7, #6]
 801451e:	089b      	lsrs	r3, r3, #2
 8014520:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8014522:	e00b      	b.n	801453c <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8014524:	6a3b      	ldr	r3, [r7, #32]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	68fa      	ldr	r2, [r7, #12]
 801452a:	61ba      	str	r2, [r7, #24]
 801452c:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	697a      	ldr	r2, [r7, #20]
 8014532:	601a      	str	r2, [r3, #0]
 8014534:	bf00      	nop
    ff_buf += 4;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	3304      	adds	r3, #4
 801453a:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 801453c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801453e:	1e5a      	subs	r2, r3, #1
 8014540:	84fa      	strh	r2, [r7, #38]	; 0x26
 8014542:	2b00      	cmp	r3, #0
 8014544:	d1ee      	bne.n	8014524 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8014546:	88fb      	ldrh	r3, [r7, #6]
 8014548:	b2db      	uxtb	r3, r3
 801454a:	f003 0303 	and.w	r3, r3, #3
 801454e:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8014550:	7ffb      	ldrb	r3, [r7, #31]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d009      	beq.n	801456a <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8014556:	6a3b      	ldr	r3, [r7, #32]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 801455c:	7ffa      	ldrb	r2, [r7, #31]
 801455e:	f107 0310 	add.w	r3, r7, #16
 8014562:	4619      	mov	r1, r3
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f004 fae1 	bl	8018b2c <memcpy>
  }
}
 801456a:	bf00      	nop
 801456c:	3728      	adds	r7, #40	; 0x28
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}

08014572 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8014572:	b580      	push	{r7, lr}
 8014574:	b08a      	sub	sp, #40	; 0x28
 8014576:	af00      	add	r7, sp, #0
 8014578:	60f8      	str	r0, [r7, #12]
 801457a:	60b9      	str	r1, [r7, #8]
 801457c:	4613      	mov	r3, r2
 801457e:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8014584:	88fb      	ldrh	r3, [r7, #6]
 8014586:	089b      	lsrs	r3, r3, #2
 8014588:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 801458a:	e008      	b.n	801459e <_ff_pull_const_addr+0x2c>
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8014594:	6a3b      	ldr	r3, [r7, #32]
 8014596:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	3304      	adds	r3, #4
 801459c:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 801459e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80145a0:	1e5a      	subs	r2, r3, #1
 80145a2:	84fa      	strh	r2, [r7, #38]	; 0x26
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d1f1      	bne.n	801458c <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 80145a8:	88fb      	ldrh	r3, [r7, #6]
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	f003 0303 	and.w	r3, r3, #3
 80145b0:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80145b2:	7ffb      	ldrb	r3, [r7, #31]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d00b      	beq.n	80145d0 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80145b8:	2300      	movs	r3, #0
 80145ba:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80145bc:	7ffa      	ldrb	r2, [r7, #31]
 80145be:	f107 0314 	add.w	r3, r7, #20
 80145c2:	68b9      	ldr	r1, [r7, #8]
 80145c4:	4618      	mov	r0, r3
 80145c6:	f004 fab1 	bl	8018b2c <memcpy>

    *reg_tx = tmp32;
 80145ca:	697a      	ldr	r2, [r7, #20]
 80145cc:	6a3b      	ldr	r3, [r7, #32]
 80145ce:	601a      	str	r2, [r3, #0]
  }
}
 80145d0:	bf00      	nop
 80145d2:	3728      	adds	r7, #40	; 0x28
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b084      	sub	sp, #16
 80145dc:	af00      	add	r7, sp, #0
 80145de:	60f8      	str	r0, [r7, #12]
 80145e0:	60b9      	str	r1, [r7, #8]
 80145e2:	4613      	mov	r3, r2
 80145e4:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	88fa      	ldrh	r2, [r7, #6]
 80145ec:	68f9      	ldr	r1, [r7, #12]
 80145ee:	88c9      	ldrh	r1, [r1, #6]
 80145f0:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80145f4:	b289      	uxth	r1, r1
 80145f6:	fb01 f202 	mul.w	r2, r1, r2
 80145fa:	1898      	adds	r0, r3, r2
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	88db      	ldrh	r3, [r3, #6]
 8014600:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014604:	b29b      	uxth	r3, r3
 8014606:	461a      	mov	r2, r3
 8014608:	68b9      	ldr	r1, [r7, #8]
 801460a:	f004 fa8f 	bl	8018b2c <memcpy>
}
 801460e:	bf00      	nop
 8014610:	3710      	adds	r7, #16
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}

08014616 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8014616:	b580      	push	{r7, lr}
 8014618:	b08e      	sub	sp, #56	; 0x38
 801461a:	af00      	add	r7, sp, #0
 801461c:	60f8      	str	r0, [r7, #12]
 801461e:	60b9      	str	r1, [r7, #8]
 8014620:	4611      	mov	r1, r2
 8014622:	461a      	mov	r2, r3
 8014624:	460b      	mov	r3, r1
 8014626:	80fb      	strh	r3, [r7, #6]
 8014628:	4613      	mov	r3, r2
 801462a:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	889a      	ldrh	r2, [r3, #4]
 8014630:	88bb      	ldrh	r3, [r7, #4]
 8014632:	1ad3      	subs	r3, r2, r3
 8014634:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 8014636:	88fa      	ldrh	r2, [r7, #6]
 8014638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801463a:	1ad3      	subs	r3, r2, r3
 801463c:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	88db      	ldrh	r3, [r3, #6]
 8014642:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014646:	b29b      	uxth	r3, r3
 8014648:	461a      	mov	r2, r3
 801464a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801464c:	fb13 f302 	smulbb	r3, r3, r2
 8014650:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	88db      	ldrh	r3, [r3, #6]
 8014656:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801465a:	b29b      	uxth	r3, r3
 801465c:	461a      	mov	r2, r3
 801465e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014660:	fb13 f302 	smulbb	r3, r3, r2
 8014664:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	88ba      	ldrh	r2, [r7, #4]
 801466c:	68f9      	ldr	r1, [r7, #12]
 801466e:	88c9      	ldrh	r1, [r1, #6]
 8014670:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8014674:	b289      	uxth	r1, r1
 8014676:	fb01 f202 	mul.w	r2, r1, r2
 801467a:	4413      	add	r3, r2
 801467c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 801467e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014682:	2b00      	cmp	r3, #0
 8014684:	d002      	beq.n	801468c <_ff_push_n+0x76>
 8014686:	2b01      	cmp	r3, #1
 8014688:	d022      	beq.n	80146d0 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 801468a:	e09e      	b.n	80147ca <_ff_push_n+0x1b4>
      if(n <= lin_count)
 801468c:	88fa      	ldrh	r2, [r7, #6]
 801468e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014690:	429a      	cmp	r2, r3
 8014692:	d80d      	bhi.n	80146b0 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8014694:	88fb      	ldrh	r3, [r7, #6]
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	88d2      	ldrh	r2, [r2, #6]
 801469a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801469e:	b292      	uxth	r2, r2
 80146a0:	fb02 f303 	mul.w	r3, r2, r3
 80146a4:	461a      	mov	r2, r3
 80146a6:	68b9      	ldr	r1, [r7, #8]
 80146a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146aa:	f004 fa3f 	bl	8018b2c <memcpy>
      break;
 80146ae:	e08c      	b.n	80147ca <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 80146b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146b2:	461a      	mov	r2, r3
 80146b4:	68b9      	ldr	r1, [r7, #8]
 80146b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146b8:	f004 fa38 	bl	8018b2c <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	6818      	ldr	r0, [r3, #0]
 80146c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146c2:	68ba      	ldr	r2, [r7, #8]
 80146c4:	4413      	add	r3, r2
 80146c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80146c8:	4619      	mov	r1, r3
 80146ca:	f004 fa2f 	bl	8018b2c <memcpy>
      break;
 80146ce:	e07c      	b.n	80147ca <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80146d0:	88fa      	ldrh	r2, [r7, #6]
 80146d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d80f      	bhi.n	80146f8 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	88db      	ldrh	r3, [r3, #6]
 80146dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	461a      	mov	r2, r3
 80146e4:	88fb      	ldrh	r3, [r7, #6]
 80146e6:	fb13 f302 	smulbb	r3, r3, r2
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	461a      	mov	r2, r3
 80146ee:	68b9      	ldr	r1, [r7, #8]
 80146f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146f2:	f7ff ff0a 	bl	801450a <_ff_push_const_addr>
      break;
 80146f6:	e067      	b.n	80147c8 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80146f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146fa:	f023 0303 	bic.w	r3, r3, #3
 80146fe:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8014700:	8c3b      	ldrh	r3, [r7, #32]
 8014702:	461a      	mov	r2, r3
 8014704:	68b9      	ldr	r1, [r7, #8]
 8014706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014708:	f7ff feff 	bl	801450a <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 801470c:	8c3b      	ldrh	r3, [r7, #32]
 801470e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014710:	4413      	add	r3, r2
 8014712:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8014714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014716:	b2db      	uxtb	r3, r3
 8014718:	f003 0303 	and.w	r3, r3, #3
 801471c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8014720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014724:	2b00      	cmp	r3, #0
 8014726:	d043      	beq.n	80147b0 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 801472c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014730:	b29b      	uxth	r3, r3
 8014732:	f1c3 0304 	rsb	r3, r3, #4
 8014736:	b29a      	uxth	r2, r3
 8014738:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801473a:	837b      	strh	r3, [r7, #26]
 801473c:	4613      	mov	r3, r2
 801473e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8014740:	8b7a      	ldrh	r2, [r7, #26]
 8014742:	8b3b      	ldrh	r3, [r7, #24]
 8014744:	4293      	cmp	r3, r2
 8014746:	bf28      	it	cs
 8014748:	4613      	movcs	r3, r2
 801474a:	b29b      	uxth	r3, r3
 801474c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8014750:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014754:	b29b      	uxth	r3, r3
 8014756:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014758:	1ad3      	subs	r3, r2, r3
 801475a:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8014762:	f107 0314 	add.w	r3, r7, #20
 8014766:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8014768:	e007      	b.n	801477a <_ff_push_n+0x164>
 801476a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801476c:	1c53      	adds	r3, r2, #1
 801476e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014772:	1c59      	adds	r1, r3, #1
 8014774:	6339      	str	r1, [r7, #48]	; 0x30
 8014776:	7812      	ldrb	r2, [r2, #0]
 8014778:	701a      	strb	r2, [r3, #0]
 801477a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801477e:	1e5a      	subs	r2, r3, #1
 8014780:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8014784:	2b00      	cmp	r3, #0
 8014786:	d1f0      	bne.n	801476a <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 801478e:	e007      	b.n	80147a0 <_ff_push_n+0x18a>
 8014790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014792:	1c53      	adds	r3, r2, #1
 8014794:	62bb      	str	r3, [r7, #40]	; 0x28
 8014796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014798:	1c59      	adds	r1, r3, #1
 801479a:	6339      	str	r1, [r7, #48]	; 0x30
 801479c:	7812      	ldrb	r2, [r2, #0]
 801479e:	701a      	strb	r2, [r3, #0]
 80147a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80147a4:	1e5a      	subs	r2, r3, #1
 80147a6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d1f0      	bne.n	8014790 <_ff_push_n+0x17a>
 80147ae:	e002      	b.n	80147b6 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80147b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d005      	beq.n	80147c8 <_ff_push_n+0x1b2>
 80147bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80147be:	461a      	mov	r2, r3
 80147c0:	68b9      	ldr	r1, [r7, #8]
 80147c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147c4:	f7ff fea1 	bl	801450a <_ff_push_const_addr>
      break;
 80147c8:	bf00      	nop
}
 80147ca:	bf00      	nop
 80147cc:	3738      	adds	r7, #56	; 0x38
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b084      	sub	sp, #16
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	60f8      	str	r0, [r7, #12]
 80147da:	60b9      	str	r1, [r7, #8]
 80147dc:	4613      	mov	r3, r2
 80147de:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	88fa      	ldrh	r2, [r7, #6]
 80147e6:	68f9      	ldr	r1, [r7, #12]
 80147e8:	88c9      	ldrh	r1, [r1, #6]
 80147ea:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80147ee:	b289      	uxth	r1, r1
 80147f0:	fb01 f202 	mul.w	r2, r1, r2
 80147f4:	1899      	adds	r1, r3, r2
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	88db      	ldrh	r3, [r3, #6]
 80147fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80147fe:	b29b      	uxth	r3, r3
 8014800:	461a      	mov	r2, r3
 8014802:	68b8      	ldr	r0, [r7, #8]
 8014804:	f004 f992 	bl	8018b2c <memcpy>
}
 8014808:	bf00      	nop
 801480a:	3710      	adds	r7, #16
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}

08014810 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b08e      	sub	sp, #56	; 0x38
 8014814:	af00      	add	r7, sp, #0
 8014816:	60f8      	str	r0, [r7, #12]
 8014818:	60b9      	str	r1, [r7, #8]
 801481a:	4611      	mov	r1, r2
 801481c:	461a      	mov	r2, r3
 801481e:	460b      	mov	r3, r1
 8014820:	80fb      	strh	r3, [r7, #6]
 8014822:	4613      	mov	r3, r2
 8014824:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	889a      	ldrh	r2, [r3, #4]
 801482a:	88bb      	ldrh	r3, [r7, #4]
 801482c:	1ad3      	subs	r3, r2, r3
 801482e:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8014830:	88fa      	ldrh	r2, [r7, #6]
 8014832:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014834:	1ad3      	subs	r3, r2, r3
 8014836:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	88db      	ldrh	r3, [r3, #6]
 801483c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014840:	b29b      	uxth	r3, r3
 8014842:	461a      	mov	r2, r3
 8014844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014846:	fb13 f302 	smulbb	r3, r3, r2
 801484a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	88db      	ldrh	r3, [r3, #6]
 8014850:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014854:	b29b      	uxth	r3, r3
 8014856:	461a      	mov	r2, r3
 8014858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801485a:	fb13 f302 	smulbb	r3, r3, r2
 801485e:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	88ba      	ldrh	r2, [r7, #4]
 8014866:	68f9      	ldr	r1, [r7, #12]
 8014868:	88c9      	ldrh	r1, [r1, #6]
 801486a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 801486e:	b289      	uxth	r1, r1
 8014870:	fb01 f202 	mul.w	r2, r1, r2
 8014874:	4413      	add	r3, r2
 8014876:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8014878:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801487c:	2b00      	cmp	r3, #0
 801487e:	d002      	beq.n	8014886 <_ff_pull_n+0x76>
 8014880:	2b01      	cmp	r3, #1
 8014882:	d022      	beq.n	80148ca <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8014884:	e0a0      	b.n	80149c8 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8014886:	88fa      	ldrh	r2, [r7, #6]
 8014888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801488a:	429a      	cmp	r2, r3
 801488c:	d80d      	bhi.n	80148aa <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 801488e:	88fb      	ldrh	r3, [r7, #6]
 8014890:	68fa      	ldr	r2, [r7, #12]
 8014892:	88d2      	ldrh	r2, [r2, #6]
 8014894:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014898:	b292      	uxth	r2, r2
 801489a:	fb02 f303 	mul.w	r3, r2, r3
 801489e:	461a      	mov	r2, r3
 80148a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80148a2:	68b8      	ldr	r0, [r7, #8]
 80148a4:	f004 f942 	bl	8018b2c <memcpy>
    break;
 80148a8:	e08e      	b.n	80149c8 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 80148aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80148ac:	461a      	mov	r2, r3
 80148ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80148b0:	68b8      	ldr	r0, [r7, #8]
 80148b2:	f004 f93b 	bl	8018b2c <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80148b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80148b8:	68ba      	ldr	r2, [r7, #8]
 80148ba:	18d0      	adds	r0, r2, r3
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80148c2:	4619      	mov	r1, r3
 80148c4:	f004 f932 	bl	8018b2c <memcpy>
    break;
 80148c8:	e07e      	b.n	80149c8 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80148ca:	88fa      	ldrh	r2, [r7, #6]
 80148cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148ce:	429a      	cmp	r2, r3
 80148d0:	d80f      	bhi.n	80148f2 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	88db      	ldrh	r3, [r3, #6]
 80148d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80148da:	b29b      	uxth	r3, r3
 80148dc:	461a      	mov	r2, r3
 80148de:	88fb      	ldrh	r3, [r7, #6]
 80148e0:	fb13 f302 	smulbb	r3, r3, r2
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	461a      	mov	r2, r3
 80148e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80148ea:	68b8      	ldr	r0, [r7, #8]
 80148ec:	f7ff fe41 	bl	8014572 <_ff_pull_const_addr>
    break;
 80148f0:	e069      	b.n	80149c6 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80148f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80148f4:	f023 0303 	bic.w	r3, r3, #3
 80148f8:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80148fa:	8c3b      	ldrh	r3, [r7, #32]
 80148fc:	461a      	mov	r2, r3
 80148fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014900:	68b8      	ldr	r0, [r7, #8]
 8014902:	f7ff fe36 	bl	8014572 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8014906:	8c3b      	ldrh	r3, [r7, #32]
 8014908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801490a:	4413      	add	r3, r2
 801490c:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 801490e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014910:	b2db      	uxtb	r3, r3
 8014912:	f003 0303 	and.w	r3, r3, #3
 8014916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 801491a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801491e:	2b00      	cmp	r3, #0
 8014920:	d045      	beq.n	80149ae <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8014926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801492a:	b29b      	uxth	r3, r3
 801492c:	f1c3 0304 	rsb	r3, r3, #4
 8014930:	b29a      	uxth	r2, r3
 8014932:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014934:	837b      	strh	r3, [r7, #26]
 8014936:	4613      	mov	r3, r2
 8014938:	833b      	strh	r3, [r7, #24]
 801493a:	8b7a      	ldrh	r2, [r7, #26]
 801493c:	8b3b      	ldrh	r3, [r7, #24]
 801493e:	4293      	cmp	r3, r2
 8014940:	bf28      	it	cs
 8014942:	4613      	movcs	r3, r2
 8014944:	b29b      	uxth	r3, r3
 8014946:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 801494a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801494e:	b29b      	uxth	r3, r3
 8014950:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014952:	1ad3      	subs	r3, r2, r3
 8014954:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8014956:	2300      	movs	r3, #0
 8014958:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 801495a:	f107 0314 	add.w	r3, r7, #20
 801495e:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8014960:	e007      	b.n	8014972 <_ff_pull_n+0x162>
 8014962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014964:	1c53      	adds	r3, r2, #1
 8014966:	633b      	str	r3, [r7, #48]	; 0x30
 8014968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496a:	1c59      	adds	r1, r3, #1
 801496c:	62b9      	str	r1, [r7, #40]	; 0x28
 801496e:	7812      	ldrb	r2, [r2, #0]
 8014970:	701a      	strb	r2, [r3, #0]
 8014972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014976:	1e5a      	subs	r2, r3, #1
 8014978:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 801497c:	2b00      	cmp	r3, #0
 801497e:	d1f0      	bne.n	8014962 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8014986:	e007      	b.n	8014998 <_ff_pull_n+0x188>
 8014988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801498a:	1c53      	adds	r3, r2, #1
 801498c:	633b      	str	r3, [r7, #48]	; 0x30
 801498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014990:	1c59      	adds	r1, r3, #1
 8014992:	62b9      	str	r1, [r7, #40]	; 0x28
 8014994:	7812      	ldrb	r2, [r2, #0]
 8014996:	701a      	strb	r2, [r3, #0]
 8014998:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801499c:	1e5a      	subs	r2, r3, #1
 801499e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d1f0      	bne.n	8014988 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80149a6:	697a      	ldr	r2, [r7, #20]
 80149a8:	69fb      	ldr	r3, [r7, #28]
 80149aa:	601a      	str	r2, [r3, #0]
 80149ac:	e002      	b.n	80149b4 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80149b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d005      	beq.n	80149c6 <_ff_pull_n+0x1b6>
 80149ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80149bc:	461a      	mov	r2, r3
 80149be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80149c0:	68b8      	ldr	r0, [r7, #8]
 80149c2:	f7ff fdd6 	bl	8014572 <_ff_pull_const_addr>
    break;
 80149c6:	bf00      	nop
  }
}
 80149c8:	bf00      	nop
 80149ca:	3738      	adds	r7, #56	; 0x38
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b085      	sub	sp, #20
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	4603      	mov	r3, r0
 80149d8:	80fb      	strh	r3, [r7, #6]
 80149da:	460b      	mov	r3, r1
 80149dc:	80bb      	strh	r3, [r7, #4]
 80149de:	4613      	mov	r3, r2
 80149e0:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80149e2:	88ba      	ldrh	r2, [r7, #4]
 80149e4:	887b      	ldrh	r3, [r7, #2]
 80149e6:	4413      	add	r3, r2
 80149e8:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80149ea:	88ba      	ldrh	r2, [r7, #4]
 80149ec:	89fb      	ldrh	r3, [r7, #14]
 80149ee:	429a      	cmp	r2, r3
 80149f0:	d804      	bhi.n	80149fc <advance_index+0x2c>
 80149f2:	89fa      	ldrh	r2, [r7, #14]
 80149f4:	88fb      	ldrh	r3, [r7, #6]
 80149f6:	005b      	lsls	r3, r3, #1
 80149f8:	429a      	cmp	r2, r3
 80149fa:	db08      	blt.n	8014a0e <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80149fc:	88fb      	ldrh	r3, [r7, #6]
 80149fe:	005b      	lsls	r3, r3, #1
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	425b      	negs	r3, r3
 8014a04:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8014a06:	89fa      	ldrh	r2, [r7, #14]
 8014a08:	89bb      	ldrh	r3, [r7, #12]
 8014a0a:	4413      	add	r3, r2
 8014a0c:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8014a0e:	89fb      	ldrh	r3, [r7, #14]
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3714      	adds	r7, #20
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr

08014a1c <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b08a      	sub	sp, #40	; 0x28
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	60f8      	str	r0, [r7, #12]
 8014a24:	60b9      	str	r1, [r7, #8]
 8014a26:	4611      	mov	r1, r2
 8014a28:	461a      	mov	r2, r3
 8014a2a:	460b      	mov	r3, r1
 8014a2c:	80fb      	strh	r3, [r7, #6]
 8014a2e:	4613      	mov	r3, r2
 8014a30:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	889b      	ldrh	r3, [r3, #4]
 8014a36:	847b      	strh	r3, [r7, #34]	; 0x22
 8014a38:	88fb      	ldrh	r3, [r7, #6]
 8014a3a:	843b      	strh	r3, [r7, #32]
 8014a3c:	88bb      	ldrh	r3, [r7, #4]
 8014a3e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8014a40:	8c3a      	ldrh	r2, [r7, #32]
 8014a42:	8bfb      	ldrh	r3, [r7, #30]
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d304      	bcc.n	8014a52 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8014a48:	8c3a      	ldrh	r2, [r7, #32]
 8014a4a:	8bfb      	ldrh	r3, [r7, #30]
 8014a4c:	1ad3      	subs	r3, r2, r3
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	e008      	b.n	8014a64 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8014a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a54:	005b      	lsls	r3, r3, #1
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	8c39      	ldrh	r1, [r7, #32]
 8014a5a:	8bfb      	ldrh	r3, [r7, #30]
 8014a5c:	1acb      	subs	r3, r1, r3
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	4413      	add	r3, r2
 8014a62:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8014a64:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8014a66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d101      	bne.n	8014a70 <_tu_fifo_peek+0x54>
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	e037      	b.n	8014ae0 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	889b      	ldrh	r3, [r3, #4]
 8014a74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d91b      	bls.n	8014ab2 <_tu_fifo_peek+0x96>
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	61bb      	str	r3, [r7, #24]
 8014a7e:	88fb      	ldrh	r3, [r7, #6]
 8014a80:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8014a82:	69bb      	ldr	r3, [r7, #24]
 8014a84:	889b      	ldrh	r3, [r3, #4]
 8014a86:	8afa      	ldrh	r2, [r7, #22]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d305      	bcc.n	8014a98 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8014a8c:	69bb      	ldr	r3, [r7, #24]
 8014a8e:	889b      	ldrh	r3, [r3, #4]
 8014a90:	8afa      	ldrh	r2, [r7, #22]
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	82bb      	strh	r3, [r7, #20]
 8014a96:	e004      	b.n	8014aa2 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	889a      	ldrh	r2, [r3, #4]
 8014a9c:	8afb      	ldrh	r3, [r7, #22]
 8014a9e:	4413      	add	r3, r2
 8014aa0:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	8aba      	ldrh	r2, [r7, #20]
 8014aa6:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8014aa8:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8014aaa:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	889b      	ldrh	r3, [r3, #4]
 8014ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	889b      	ldrh	r3, [r3, #4]
 8014ab6:	827b      	strh	r3, [r7, #18]
 8014ab8:	88bb      	ldrh	r3, [r7, #4]
 8014aba:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8014abc:	e003      	b.n	8014ac6 <_tu_fifo_peek+0xaa>
 8014abe:	8a3a      	ldrh	r2, [r7, #16]
 8014ac0:	8a7b      	ldrh	r3, [r7, #18]
 8014ac2:	1ad3      	subs	r3, r2, r3
 8014ac4:	823b      	strh	r3, [r7, #16]
 8014ac6:	8a7a      	ldrh	r2, [r7, #18]
 8014ac8:	8a3b      	ldrh	r3, [r7, #16]
 8014aca:	429a      	cmp	r2, r3
 8014acc:	d9f7      	bls.n	8014abe <_tu_fifo_peek+0xa2>
  return idx;
 8014ace:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8014ad0:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8014ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	68b9      	ldr	r1, [r7, #8]
 8014ad8:	68f8      	ldr	r0, [r7, #12]
 8014ada:	f7ff fe7a 	bl	80147d2 <_ff_pull>

  return true;
 8014ade:	2301      	movs	r3, #1
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3728      	adds	r7, #40	; 0x28
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b08c      	sub	sp, #48	; 0x30
 8014aec:	af02      	add	r7, sp, #8
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	60b9      	str	r1, [r7, #8]
 8014af2:	4611      	mov	r1, r2
 8014af4:	461a      	mov	r2, r3
 8014af6:	460b      	mov	r3, r1
 8014af8:	80fb      	strh	r3, [r7, #6]
 8014afa:	4613      	mov	r3, r2
 8014afc:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	889b      	ldrh	r3, [r3, #4]
 8014b02:	847b      	strh	r3, [r7, #34]	; 0x22
 8014b04:	88bb      	ldrh	r3, [r7, #4]
 8014b06:	843b      	strh	r3, [r7, #32]
 8014b08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014b0a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8014b0c:	8c3a      	ldrh	r2, [r7, #32]
 8014b0e:	8bfb      	ldrh	r3, [r7, #30]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d304      	bcc.n	8014b1e <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8014b14:	8c3a      	ldrh	r2, [r7, #32]
 8014b16:	8bfb      	ldrh	r3, [r7, #30]
 8014b18:	1ad3      	subs	r3, r2, r3
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	e008      	b.n	8014b30 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8014b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b20:	005b      	lsls	r3, r3, #1
 8014b22:	b29a      	uxth	r2, r3
 8014b24:	8c39      	ldrh	r1, [r7, #32]
 8014b26:	8bfb      	ldrh	r3, [r7, #30]
 8014b28:	1acb      	subs	r3, r1, r3
 8014b2a:	b29b      	uxth	r3, r3
 8014b2c:	4413      	add	r3, r2
 8014b2e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8014b30:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8014b32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d101      	bne.n	8014b3c <_tu_fifo_peek_n+0x54>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	e041      	b.n	8014bc0 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	889b      	ldrh	r3, [r3, #4]
 8014b40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014b42:	429a      	cmp	r2, r3
 8014b44:	d91b      	bls.n	8014b7e <_tu_fifo_peek_n+0x96>
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	61bb      	str	r3, [r7, #24]
 8014b4a:	88bb      	ldrh	r3, [r7, #4]
 8014b4c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8014b4e:	69bb      	ldr	r3, [r7, #24]
 8014b50:	889b      	ldrh	r3, [r3, #4]
 8014b52:	8afa      	ldrh	r2, [r7, #22]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d305      	bcc.n	8014b64 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	889b      	ldrh	r3, [r3, #4]
 8014b5c:	8afa      	ldrh	r2, [r7, #22]
 8014b5e:	1ad3      	subs	r3, r2, r3
 8014b60:	82bb      	strh	r3, [r7, #20]
 8014b62:	e004      	b.n	8014b6e <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8014b64:	69bb      	ldr	r3, [r7, #24]
 8014b66:	889a      	ldrh	r2, [r3, #4]
 8014b68:	8afb      	ldrh	r3, [r7, #22]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	8aba      	ldrh	r2, [r7, #20]
 8014b72:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8014b74:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8014b76:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	889b      	ldrh	r3, [r3, #4]
 8014b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8014b7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014b80:	88fb      	ldrh	r3, [r7, #6]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d201      	bcs.n	8014b8a <_tu_fifo_peek_n+0xa2>
 8014b86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014b88:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	889b      	ldrh	r3, [r3, #4]
 8014b8e:	827b      	strh	r3, [r7, #18]
 8014b90:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014b92:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8014b94:	e003      	b.n	8014b9e <_tu_fifo_peek_n+0xb6>
 8014b96:	8a3a      	ldrh	r2, [r7, #16]
 8014b98:	8a7b      	ldrh	r3, [r7, #18]
 8014b9a:	1ad3      	subs	r3, r2, r3
 8014b9c:	823b      	strh	r3, [r7, #16]
 8014b9e:	8a7a      	ldrh	r2, [r7, #18]
 8014ba0:	8a3b      	ldrh	r3, [r7, #16]
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d9f7      	bls.n	8014b96 <_tu_fifo_peek_n+0xae>
  return idx;
 8014ba6:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8014ba8:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8014baa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8014bac:	88fa      	ldrh	r2, [r7, #6]
 8014bae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014bb2:	9300      	str	r3, [sp, #0]
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	68b9      	ldr	r1, [r7, #8]
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f7ff fe29 	bl	8014810 <_ff_pull_n>

  return n;
 8014bbe:	88fb      	ldrh	r3, [r7, #6]
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3728      	adds	r7, #40	; 0x28
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b092      	sub	sp, #72	; 0x48
 8014bcc:	af02      	add	r7, sp, #8
 8014bce:	60f8      	str	r0, [r7, #12]
 8014bd0:	60b9      	str	r1, [r7, #8]
 8014bd2:	4611      	mov	r1, r2
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	460b      	mov	r3, r1
 8014bd8:	80fb      	strh	r3, [r7, #6]
 8014bda:	4613      	mov	r3, r2
 8014bdc:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8014bde:	88fb      	ldrh	r3, [r7, #6]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d101      	bne.n	8014be8 <_tu_fifo_write_n+0x20>
 8014be4:	2300      	movs	r3, #0
 8014be6:	e0bc      	b.n	8014d62 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	891b      	ldrh	r3, [r3, #8]
 8014bec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	895b      	ldrh	r3, [r3, #10]
 8014bf2:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	79db      	ldrb	r3, [r3, #7]
 8014bfc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	f083 0301 	eor.w	r3, r3, #1
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d036      	beq.n	8014c7a <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	889b      	ldrh	r3, [r3, #4]
 8014c10:	857b      	strh	r3, [r7, #42]	; 0x2a
 8014c12:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c14:	853b      	strh	r3, [r7, #40]	; 0x28
 8014c16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014c18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014c1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014c1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014c20:	847b      	strh	r3, [r7, #34]	; 0x22
 8014c22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014c24:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8014c26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014c28:	8c3b      	ldrh	r3, [r7, #32]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d304      	bcc.n	8014c38 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8014c2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014c30:	8c3b      	ldrh	r3, [r7, #32]
 8014c32:	1ad3      	subs	r3, r2, r3
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	e008      	b.n	8014c4a <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8014c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c3a:	005b      	lsls	r3, r3, #1
 8014c3c:	b29a      	uxth	r2, r3
 8014c3e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8014c40:	8c3b      	ldrh	r3, [r7, #32]
 8014c42:	1acb      	subs	r3, r1, r3
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	4413      	add	r3, r2
 8014c48:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8014c4a:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8014c4c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8014c4e:	8bfb      	ldrh	r3, [r7, #30]
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d904      	bls.n	8014c5e <_tu_fifo_write_n+0x96>
 8014c54:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8014c56:	8bfb      	ldrh	r3, [r7, #30]
 8014c58:	1ad3      	subs	r3, r2, r3
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	e000      	b.n	8014c60 <_tu_fifo_write_n+0x98>
 8014c5e:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8014c60:	867b      	strh	r3, [r7, #50]	; 0x32
 8014c62:	88fb      	ldrh	r3, [r7, #6]
 8014c64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014c66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014c68:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014c6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	bf28      	it	cs
 8014c72:	4613      	movcs	r3, r2
 8014c74:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8014c76:	80fb      	strh	r3, [r7, #6]
 8014c78:	e04b      	b.n	8014d12 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	889b      	ldrh	r3, [r3, #4]
 8014c7e:	88fa      	ldrh	r2, [r7, #6]
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d317      	bcc.n	8014cb4 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8014c84:	797b      	ldrb	r3, [r7, #5]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d10e      	bne.n	8014ca8 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8014c8a:	88fb      	ldrh	r3, [r7, #6]
 8014c8c:	68fa      	ldr	r2, [r7, #12]
 8014c8e:	8892      	ldrh	r2, [r2, #4]
 8014c90:	1a9b      	subs	r3, r3, r2
 8014c92:	68fa      	ldr	r2, [r7, #12]
 8014c94:	88d2      	ldrh	r2, [r2, #6]
 8014c96:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014c9a:	b292      	uxth	r2, r2
 8014c9c:	fb02 f303 	mul.w	r3, r2, r3
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca4:	4413      	add	r3, r2
 8014ca6:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	889b      	ldrh	r3, [r3, #4]
 8014cac:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8014cae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014cb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014cb2:	e02e      	b.n	8014d12 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	889b      	ldrh	r3, [r3, #4]
 8014cb8:	83bb      	strh	r3, [r7, #28]
 8014cba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014cbc:	837b      	strh	r3, [r7, #26]
 8014cbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014cc0:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8014cc2:	8b7a      	ldrh	r2, [r7, #26]
 8014cc4:	8b3b      	ldrh	r3, [r7, #24]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d304      	bcc.n	8014cd4 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8014cca:	8b7a      	ldrh	r2, [r7, #26]
 8014ccc:	8b3b      	ldrh	r3, [r7, #24]
 8014cce:	1ad3      	subs	r3, r2, r3
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	e008      	b.n	8014ce6 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8014cd4:	8bbb      	ldrh	r3, [r7, #28]
 8014cd6:	005b      	lsls	r3, r3, #1
 8014cd8:	b29a      	uxth	r2, r3
 8014cda:	8b79      	ldrh	r1, [r7, #26]
 8014cdc:	8b3b      	ldrh	r3, [r7, #24]
 8014cde:	1acb      	subs	r3, r1, r3
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	4413      	add	r3, r2
 8014ce4:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8014ce6:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 8014ce8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014cea:	88fb      	ldrh	r3, [r7, #6]
 8014cec:	441a      	add	r2, r3
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	889b      	ldrh	r3, [r3, #4]
 8014cf2:	005b      	lsls	r3, r3, #1
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	db0c      	blt.n	8014d12 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	8898      	ldrh	r0, [r3, #4]
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	889a      	ldrh	r2, [r3, #4]
 8014d00:	88fb      	ldrh	r3, [r7, #6]
 8014d02:	1ad3      	subs	r3, r2, r3
 8014d04:	b29a      	uxth	r2, r3
 8014d06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d08:	4619      	mov	r1, r3
 8014d0a:	f7ff fe61 	bl	80149d0 <advance_index>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8014d12:	88fb      	ldrh	r3, [r7, #6]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d023      	beq.n	8014d60 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	889b      	ldrh	r3, [r3, #4]
 8014d1c:	82fb      	strh	r3, [r7, #22]
 8014d1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014d20:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8014d22:	e003      	b.n	8014d2c <_tu_fifo_write_n+0x164>
 8014d24:	8aba      	ldrh	r2, [r7, #20]
 8014d26:	8afb      	ldrh	r3, [r7, #22]
 8014d28:	1ad3      	subs	r3, r2, r3
 8014d2a:	82bb      	strh	r3, [r7, #20]
 8014d2c:	8afa      	ldrh	r2, [r7, #22]
 8014d2e:	8abb      	ldrh	r3, [r7, #20]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d9f7      	bls.n	8014d24 <_tu_fifo_write_n+0x15c>
  return idx;
 8014d34:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8014d36:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8014d38:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8014d3a:	88fa      	ldrh	r2, [r7, #6]
 8014d3c:	797b      	ldrb	r3, [r7, #5]
 8014d3e:	9300      	str	r3, [sp, #0]
 8014d40:	460b      	mov	r3, r1
 8014d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014d44:	68f8      	ldr	r0, [r7, #12]
 8014d46:	f7ff fc66 	bl	8014616 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	889b      	ldrh	r3, [r3, #4]
 8014d4e:	88fa      	ldrh	r2, [r7, #6]
 8014d50:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7ff fe3c 	bl	80149d0 <advance_index>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8014d60:	88fb      	ldrh	r3, [r7, #6]
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3740      	adds	r7, #64	; 0x40
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}

08014d6a <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8014d6a:	b580      	push	{r7, lr}
 8014d6c:	b086      	sub	sp, #24
 8014d6e:	af02      	add	r7, sp, #8
 8014d70:	60f8      	str	r0, [r7, #12]
 8014d72:	60b9      	str	r1, [r7, #8]
 8014d74:	4611      	mov	r1, r2
 8014d76:	461a      	mov	r2, r3
 8014d78:	460b      	mov	r3, r1
 8014d7a:	80fb      	strh	r3, [r7, #6]
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	891b      	ldrh	r3, [r3, #8]
 8014d84:	b298      	uxth	r0, r3
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	895b      	ldrh	r3, [r3, #10]
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	88f9      	ldrh	r1, [r7, #6]
 8014d8e:	797a      	ldrb	r2, [r7, #5]
 8014d90:	9201      	str	r2, [sp, #4]
 8014d92:	9300      	str	r3, [sp, #0]
 8014d94:	4603      	mov	r3, r0
 8014d96:	460a      	mov	r2, r1
 8014d98:	68b9      	ldr	r1, [r7, #8]
 8014d9a:	68f8      	ldr	r0, [r7, #12]
 8014d9c:	f7ff fea4 	bl	8014ae8 <_tu_fifo_peek_n>
 8014da0:	4603      	mov	r3, r0
 8014da2:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	8898      	ldrh	r0, [r3, #4]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	895b      	ldrh	r3, [r3, #10]
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	88fa      	ldrh	r2, [r7, #6]
 8014db0:	4619      	mov	r1, r3
 8014db2:	f7ff fe0d 	bl	80149d0 <advance_index>
 8014db6:	4603      	mov	r3, r0
 8014db8:	461a      	mov	r2, r3
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8014dbe:	88fb      	ldrh	r3, [r7, #6]
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3710      	adds	r7, #16
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b087      	sub	sp, #28
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	8899      	ldrh	r1, [r3, #4]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	891b      	ldrh	r3, [r3, #8]
 8014dd8:	b29a      	uxth	r2, r3
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	895b      	ldrh	r3, [r3, #10]
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	8279      	strh	r1, [r7, #18]
 8014de2:	823a      	strh	r2, [r7, #16]
 8014de4:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8014de6:	8a3a      	ldrh	r2, [r7, #16]
 8014de8:	89fb      	ldrh	r3, [r7, #14]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d304      	bcc.n	8014df8 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8014dee:	8a3a      	ldrh	r2, [r7, #16]
 8014df0:	89fb      	ldrh	r3, [r7, #14]
 8014df2:	1ad3      	subs	r3, r2, r3
 8014df4:	b29b      	uxth	r3, r3
 8014df6:	e008      	b.n	8014e0a <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8014df8:	8a7b      	ldrh	r3, [r7, #18]
 8014dfa:	005b      	lsls	r3, r3, #1
 8014dfc:	b29a      	uxth	r2, r3
 8014dfe:	8a39      	ldrh	r1, [r7, #16]
 8014e00:	89fb      	ldrh	r3, [r7, #14]
 8014e02:	1acb      	subs	r3, r1, r3
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	4413      	add	r3, r2
 8014e08:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	8892      	ldrh	r2, [r2, #4]
 8014e0e:	82fb      	strh	r3, [r7, #22]
 8014e10:	4613      	mov	r3, r2
 8014e12:	82bb      	strh	r3, [r7, #20]
 8014e14:	8afa      	ldrh	r2, [r7, #22]
 8014e16:	8abb      	ldrh	r3, [r7, #20]
 8014e18:	4293      	cmp	r3, r2
 8014e1a:	bf28      	it	cs
 8014e1c:	4613      	movcs	r3, r2
 8014e1e:	b29b      	uxth	r3, r3
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	371c      	adds	r7, #28
 8014e24:	46bd      	mov	sp, r7
 8014e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2a:	4770      	bx	lr

08014e2c <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	b083      	sub	sp, #12
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	891b      	ldrh	r3, [r3, #8]
 8014e38:	b29a      	uxth	r2, r3
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	895b      	ldrh	r3, [r3, #10]
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	429a      	cmp	r2, r3
 8014e42:	bf0c      	ite	eq
 8014e44:	2301      	moveq	r3, #1
 8014e46:	2300      	movne	r3, #0
 8014e48:	b2db      	uxtb	r3, r3
}
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	370c      	adds	r7, #12
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e54:	4770      	bx	lr

08014e56 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8014e56:	b480      	push	{r7}
 8014e58:	b085      	sub	sp, #20
 8014e5a:	af00      	add	r7, sp, #0
 8014e5c:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	8899      	ldrh	r1, [r3, #4]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	891b      	ldrh	r3, [r3, #8]
 8014e66:	b29a      	uxth	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	895b      	ldrh	r3, [r3, #10]
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	81f9      	strh	r1, [r7, #14]
 8014e70:	81ba      	strh	r2, [r7, #12]
 8014e72:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8014e74:	89ba      	ldrh	r2, [r7, #12]
 8014e76:	897b      	ldrh	r3, [r7, #10]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d304      	bcc.n	8014e86 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8014e7c:	89ba      	ldrh	r2, [r7, #12]
 8014e7e:	897b      	ldrh	r3, [r7, #10]
 8014e80:	1ad3      	subs	r3, r2, r3
 8014e82:	b29b      	uxth	r3, r3
 8014e84:	e008      	b.n	8014e98 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8014e86:	89fb      	ldrh	r3, [r7, #14]
 8014e88:	005b      	lsls	r3, r3, #1
 8014e8a:	b29a      	uxth	r2, r3
 8014e8c:	89b9      	ldrh	r1, [r7, #12]
 8014e8e:	897b      	ldrh	r3, [r7, #10]
 8014e90:	1acb      	subs	r3, r1, r3
 8014e92:	b29b      	uxth	r3, r3
 8014e94:	4413      	add	r3, r2
 8014e96:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	8892      	ldrh	r2, [r2, #4]
 8014e9c:	4293      	cmp	r3, r2
 8014e9e:	bf2c      	ite	cs
 8014ea0:	2301      	movcs	r3, #1
 8014ea2:	2300      	movcc	r3, #0
 8014ea4:	b2db      	uxtb	r3, r3
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3714      	adds	r7, #20
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr

08014eb2 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8014eb2:	b480      	push	{r7}
 8014eb4:	b087      	sub	sp, #28
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	8899      	ldrh	r1, [r3, #4]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	891b      	ldrh	r3, [r3, #8]
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	895b      	ldrh	r3, [r3, #10]
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	82f9      	strh	r1, [r7, #22]
 8014ecc:	82ba      	strh	r2, [r7, #20]
 8014ece:	827b      	strh	r3, [r7, #18]
 8014ed0:	8afb      	ldrh	r3, [r7, #22]
 8014ed2:	823b      	strh	r3, [r7, #16]
 8014ed4:	8abb      	ldrh	r3, [r7, #20]
 8014ed6:	81fb      	strh	r3, [r7, #14]
 8014ed8:	8a7b      	ldrh	r3, [r7, #18]
 8014eda:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8014edc:	89fa      	ldrh	r2, [r7, #14]
 8014ede:	89bb      	ldrh	r3, [r7, #12]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d304      	bcc.n	8014eee <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8014ee4:	89fa      	ldrh	r2, [r7, #14]
 8014ee6:	89bb      	ldrh	r3, [r7, #12]
 8014ee8:	1ad3      	subs	r3, r2, r3
 8014eea:	b29b      	uxth	r3, r3
 8014eec:	e008      	b.n	8014f00 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8014eee:	8a3b      	ldrh	r3, [r7, #16]
 8014ef0:	005b      	lsls	r3, r3, #1
 8014ef2:	b29a      	uxth	r2, r3
 8014ef4:	89f9      	ldrh	r1, [r7, #14]
 8014ef6:	89bb      	ldrh	r3, [r7, #12]
 8014ef8:	1acb      	subs	r3, r1, r3
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	4413      	add	r3, r2
 8014efe:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8014f00:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8014f02:	8afa      	ldrh	r2, [r7, #22]
 8014f04:	897b      	ldrh	r3, [r7, #10]
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d904      	bls.n	8014f14 <tu_fifo_remaining+0x62>
 8014f0a:	8afa      	ldrh	r2, [r7, #22]
 8014f0c:	897b      	ldrh	r3, [r7, #10]
 8014f0e:	1ad3      	subs	r3, r2, r3
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	e000      	b.n	8014f16 <tu_fifo_remaining+0x64>
 8014f14:	2300      	movs	r3, #0
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	371c      	adds	r7, #28
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr

08014f22 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8014f22:	b580      	push	{r7, lr}
 8014f24:	b084      	sub	sp, #16
 8014f26:	af00      	add	r7, sp, #0
 8014f28:	6078      	str	r0, [r7, #4]
 8014f2a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	891b      	ldrh	r3, [r3, #8]
 8014f30:	b29a      	uxth	r2, r3
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	895b      	ldrh	r3, [r3, #10]
 8014f36:	b29b      	uxth	r3, r3
 8014f38:	6839      	ldr	r1, [r7, #0]
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7ff fd6e 	bl	8014a1c <_tu_fifo_peek>
 8014f40:	4603      	mov	r3, r0
 8014f42:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	8898      	ldrh	r0, [r3, #4]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	895b      	ldrh	r3, [r3, #10]
 8014f4c:	b29b      	uxth	r3, r3
 8014f4e:	7bfa      	ldrb	r2, [r7, #15]
 8014f50:	b292      	uxth	r2, r2
 8014f52:	4619      	mov	r1, r3
 8014f54:	f7ff fd3c 	bl	80149d0 <advance_index>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8014f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3710      	adds	r7, #16
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b084      	sub	sp, #16
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	60f8      	str	r0, [r7, #12]
 8014f72:	60b9      	str	r1, [r7, #8]
 8014f74:	4613      	mov	r3, r2
 8014f76:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8014f78:	88fa      	ldrh	r2, [r7, #6]
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	68b9      	ldr	r1, [r7, #8]
 8014f7e:	68f8      	ldr	r0, [r7, #12]
 8014f80:	f7ff fef3 	bl	8014d6a <_tu_fifo_read_n>
 8014f84:	4603      	mov	r3, r0
}
 8014f86:	4618      	mov	r0, r3
 8014f88:	3710      	adds	r7, #16
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}

08014f8e <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8014f8e:	b580      	push	{r7, lr}
 8014f90:	b084      	sub	sp, #16
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	60f8      	str	r0, [r7, #12]
 8014f96:	60b9      	str	r1, [r7, #8]
 8014f98:	4613      	mov	r3, r2
 8014f9a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8014f9c:	88fa      	ldrh	r2, [r7, #6]
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	68b9      	ldr	r1, [r7, #8]
 8014fa2:	68f8      	ldr	r0, [r7, #12]
 8014fa4:	f7ff fee1 	bl	8014d6a <_tu_fifo_read_n>
 8014fa8:	4603      	mov	r3, r0
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3710      	adds	r7, #16
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	b086      	sub	sp, #24
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
 8014fba:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	891b      	ldrh	r3, [r3, #8]
 8014fc0:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f7ff ff47 	bl	8014e56 <tu_fifo_full>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d00c      	beq.n	8014fe8 <tu_fifo_write+0x36>
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	79db      	ldrb	r3, [r3, #7]
 8014fd2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014fd6:	b2db      	uxtb	r3, r3
 8014fd8:	f083 0301 	eor.w	r3, r3, #1
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d002      	beq.n	8014fe8 <tu_fifo_write+0x36>
  {
    ret = false;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	75fb      	strb	r3, [r7, #23]
 8014fe6:	e022      	b.n	801502e <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	889b      	ldrh	r3, [r3, #4]
 8014fec:	823b      	strh	r3, [r7, #16]
 8014fee:	8abb      	ldrh	r3, [r7, #20]
 8014ff0:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8014ff2:	e003      	b.n	8014ffc <tu_fifo_write+0x4a>
 8014ff4:	89fa      	ldrh	r2, [r7, #14]
 8014ff6:	8a3b      	ldrh	r3, [r7, #16]
 8014ff8:	1ad3      	subs	r3, r2, r3
 8014ffa:	81fb      	strh	r3, [r7, #14]
 8014ffc:	8a3a      	ldrh	r2, [r7, #16]
 8014ffe:	89fb      	ldrh	r3, [r7, #14]
 8015000:	429a      	cmp	r2, r3
 8015002:	d9f7      	bls.n	8014ff4 <tu_fifo_write+0x42>
  return idx;
 8015004:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8015006:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8015008:	8a7b      	ldrh	r3, [r7, #18]
 801500a:	461a      	mov	r2, r3
 801500c:	6839      	ldr	r1, [r7, #0]
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f7ff fae2 	bl	80145d8 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	889b      	ldrh	r3, [r3, #4]
 8015018:	8ab9      	ldrh	r1, [r7, #20]
 801501a:	2201      	movs	r2, #1
 801501c:	4618      	mov	r0, r3
 801501e:	f7ff fcd7 	bl	80149d0 <advance_index>
 8015022:	4603      	mov	r3, r0
 8015024:	461a      	mov	r2, r3
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	811a      	strh	r2, [r3, #8]

    ret = true;
 801502a:	2301      	movs	r3, #1
 801502c:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 801502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015030:	4618      	mov	r0, r3
 8015032:	3718      	adds	r7, #24
 8015034:	46bd      	mov	sp, r7
 8015036:	bd80      	pop	{r7, pc}

08015038 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	60f8      	str	r0, [r7, #12]
 8015040:	60b9      	str	r1, [r7, #8]
 8015042:	4613      	mov	r3, r2
 8015044:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8015046:	88fa      	ldrh	r2, [r7, #6]
 8015048:	2300      	movs	r3, #0
 801504a:	68b9      	ldr	r1, [r7, #8]
 801504c:	68f8      	ldr	r0, [r7, #12]
 801504e:	f7ff fdbb 	bl	8014bc8 <_tu_fifo_write_n>
 8015052:	4603      	mov	r3, r0
}
 8015054:	4618      	mov	r0, r3
 8015056:	3710      	adds	r7, #16
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}

0801505c <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	b084      	sub	sp, #16
 8015060:	af00      	add	r7, sp, #0
 8015062:	60f8      	str	r0, [r7, #12]
 8015064:	60b9      	str	r1, [r7, #8]
 8015066:	4613      	mov	r3, r2
 8015068:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 801506a:	88fa      	ldrh	r2, [r7, #6]
 801506c:	2301      	movs	r3, #1
 801506e:	68b9      	ldr	r1, [r7, #8]
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f7ff fda9 	bl	8014bc8 <_tu_fifo_write_n>
 8015076:	4603      	mov	r3, r0
}
 8015078:	4618      	mov	r0, r3
 801507a:	3710      	adds	r7, #16
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2200      	movs	r2, #0
 801508c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2200      	movs	r2, #0
 8015092:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8015094:	2301      	movs	r3, #1
}
 8015096:	4618      	mov	r0, r3
 8015098:	370c      	adds	r7, #12
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr

080150a2 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 80150a2:	b480      	push	{r7}
 80150a4:	b083      	sub	sp, #12
 80150a6:	af00      	add	r7, sp, #0
 80150a8:	6078      	str	r0, [r7, #4]
 80150aa:	460b      	mov	r3, r1
 80150ac:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	79d3      	ldrb	r3, [r2, #7]
 80150b2:	78f9      	ldrb	r1, [r7, #3]
 80150b4:	f361 13c7 	bfi	r3, r1, #7, #1
 80150b8:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80150ba:	2301      	movs	r3, #1
}
 80150bc:	4618      	mov	r0, r3
 80150be:	370c      	adds	r7, #12
 80150c0:	46bd      	mov	sp, r7
 80150c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c6:	4770      	bx	lr

080150c8 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 80150c8:	b480      	push	{r7}
 80150ca:	b083      	sub	sp, #12
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	4603      	mov	r3, r0
 80150d0:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80150d2:	4b14      	ldr	r3, [pc, #80]	; (8015124 <get_driver+0x5c>)
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d012      	beq.n	80150fe <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80150d8:	4b13      	ldr	r3, [pc, #76]	; (8015128 <get_driver+0x60>)
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	79fa      	ldrb	r2, [r7, #7]
 80150de:	429a      	cmp	r2, r3
 80150e0:	d208      	bcs.n	80150f4 <get_driver+0x2c>
 80150e2:	4b12      	ldr	r3, [pc, #72]	; (801512c <get_driver+0x64>)
 80150e4:	6819      	ldr	r1, [r3, #0]
 80150e6:	79fa      	ldrb	r2, [r7, #7]
 80150e8:	4613      	mov	r3, r2
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	4413      	add	r3, r2
 80150ee:	00db      	lsls	r3, r3, #3
 80150f0:	440b      	add	r3, r1
 80150f2:	e010      	b.n	8015116 <get_driver+0x4e>
    drvid -= _app_driver_count;
 80150f4:	4b0c      	ldr	r3, [pc, #48]	; (8015128 <get_driver+0x60>)
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	79fa      	ldrb	r2, [r7, #7]
 80150fa:	1ad3      	subs	r3, r2, r3
 80150fc:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80150fe:	79fb      	ldrb	r3, [r7, #7]
 8015100:	2b01      	cmp	r3, #1
 8015102:	d807      	bhi.n	8015114 <get_driver+0x4c>
 8015104:	79fa      	ldrb	r2, [r7, #7]
 8015106:	4613      	mov	r3, r2
 8015108:	005b      	lsls	r3, r3, #1
 801510a:	4413      	add	r3, r2
 801510c:	00db      	lsls	r3, r3, #3
 801510e:	4a08      	ldr	r2, [pc, #32]	; (8015130 <get_driver+0x68>)
 8015110:	4413      	add	r3, r2
 8015112:	e000      	b.n	8015116 <get_driver+0x4e>

  return NULL;
 8015114:	2300      	movs	r3, #0
}
 8015116:	4618      	mov	r0, r3
 8015118:	370c      	adds	r7, #12
 801511a:	46bd      	mov	sp, r7
 801511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015120:	4770      	bx	lr
 8015122:	bf00      	nop
 8015124:	00000000 	.word	0x00000000
 8015128:	24002b5c 	.word	0x24002b5c
 801512c:	24002b58 	.word	0x24002b58
 8015130:	0801c394 	.word	0x0801c394

08015134 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8015134:	b480      	push	{r7}
 8015136:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8015138:	4b06      	ldr	r3, [pc, #24]	; (8015154 <tud_mounted+0x20>)
 801513a:	785b      	ldrb	r3, [r3, #1]
 801513c:	b2db      	uxtb	r3, r3
 801513e:	2b00      	cmp	r3, #0
 8015140:	bf14      	ite	ne
 8015142:	2301      	movne	r3, #1
 8015144:	2300      	moveq	r3, #0
 8015146:	b2db      	uxtb	r3, r3
}
 8015148:	4618      	mov	r0, r3
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop
 8015154:	24002b20 	.word	0x24002b20

08015158 <tud_suspended>:

bool tud_suspended(void)
{
 8015158:	b480      	push	{r7}
 801515a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 801515c:	4b07      	ldr	r3, [pc, #28]	; (801517c <tud_suspended+0x24>)
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015164:	b2db      	uxtb	r3, r3
 8015166:	2b00      	cmp	r3, #0
 8015168:	bf14      	ite	ne
 801516a:	2301      	movne	r3, #1
 801516c:	2300      	moveq	r3, #0
 801516e:	b2db      	uxtb	r3, r3
}
 8015170:	4618      	mov	r0, r3
 8015172:	46bd      	mov	sp, r7
 8015174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015178:	4770      	bx	lr
 801517a:	bf00      	nop
 801517c:	24002b20 	.word	0x24002b20

08015180 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8015180:	b480      	push	{r7}
 8015182:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8015184:	4b05      	ldr	r3, [pc, #20]	; (801519c <tud_inited+0x1c>)
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	2bff      	cmp	r3, #255	; 0xff
 801518a:	bf14      	ite	ne
 801518c:	2301      	movne	r3, #1
 801518e:	2300      	moveq	r3, #0
 8015190:	b2db      	uxtb	r3, r3
}
 8015192:	4618      	mov	r0, r3
 8015194:	46bd      	mov	sp, r7
 8015196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519a:	4770      	bx	lr
 801519c:	24000024 	.word	0x24000024

080151a0 <tud_init>:

bool tud_init (uint8_t rhport)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b088      	sub	sp, #32
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	4603      	mov	r3, r0
 80151a8:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 80151aa:	f7ff ffe9 	bl	8015180 <tud_inited>
 80151ae:	4603      	mov	r3, r0
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d001      	beq.n	80151b8 <tud_init+0x18>
 80151b4:	2301      	movs	r3, #1
 80151b6:	e054      	b.n	8015262 <tud_init+0xc2>
  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 80151b8:	2237      	movs	r2, #55	; 0x37
 80151ba:	2100      	movs	r1, #0
 80151bc:	482b      	ldr	r0, [pc, #172]	; (801526c <tud_init+0xcc>)
 80151be:	f003 fc7c 	bl	8018aba <memset>
 80151c2:	4b2b      	ldr	r3, [pc, #172]	; (8015270 <tud_init+0xd0>)
 80151c4:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	3304      	adds	r3, #4
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7ff ff58 	bl	8015080 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 80151d0:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80151d2:	4a28      	ldr	r2, [pc, #160]	; (8015274 <tud_init+0xd4>)
 80151d4:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 80151d6:	4b27      	ldr	r3, [pc, #156]	; (8015274 <tud_init+0xd4>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d10a      	bne.n	80151f4 <tud_init+0x54>
 80151de:	4b26      	ldr	r3, [pc, #152]	; (8015278 <tud_init+0xd8>)
 80151e0:	613b      	str	r3, [r7, #16]
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f003 0301 	and.w	r3, r3, #1
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d000      	beq.n	80151f0 <tud_init+0x50>
 80151ee:	be00      	bkpt	0x0000
 80151f0:	2300      	movs	r3, #0
 80151f2:	e036      	b.n	8015262 <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 80151f4:	4b21      	ldr	r3, [pc, #132]	; (801527c <tud_init+0xdc>)
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d005      	beq.n	8015206 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80151fa:	4821      	ldr	r0, [pc, #132]	; (8015280 <tud_init+0xe0>)
 80151fc:	f3af 8000 	nop.w
 8015200:	4603      	mov	r3, r0
 8015202:	4a20      	ldr	r2, [pc, #128]	; (8015284 <tud_init+0xe4>)
 8015204:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8015206:	2300      	movs	r3, #0
 8015208:	77fb      	strb	r3, [r7, #31]
 801520a:	e018      	b.n	801523e <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 801520c:	7ffb      	ldrb	r3, [r7, #31]
 801520e:	4618      	mov	r0, r3
 8015210:	f7ff ff5a 	bl	80150c8 <get_driver>
 8015214:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 8015216:	69bb      	ldr	r3, [r7, #24]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d10a      	bne.n	8015232 <tud_init+0x92>
 801521c:	4b16      	ldr	r3, [pc, #88]	; (8015278 <tud_init+0xd8>)
 801521e:	617b      	str	r3, [r7, #20]
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	f003 0301 	and.w	r3, r3, #1
 8015228:	2b00      	cmp	r3, #0
 801522a:	d000      	beq.n	801522e <tud_init+0x8e>
 801522c:	be00      	bkpt	0x0000
 801522e:	2300      	movs	r3, #0
 8015230:	e017      	b.n	8015262 <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8015238:	7ffb      	ldrb	r3, [r7, #31]
 801523a:	3301      	adds	r3, #1
 801523c:	77fb      	strb	r3, [r7, #31]
 801523e:	4b10      	ldr	r3, [pc, #64]	; (8015280 <tud_init+0xe0>)
 8015240:	781b      	ldrb	r3, [r3, #0]
 8015242:	1c5a      	adds	r2, r3, #1
 8015244:	7ffb      	ldrb	r3, [r7, #31]
 8015246:	429a      	cmp	r2, r3
 8015248:	dae0      	bge.n	801520c <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 801524a:	4a0f      	ldr	r2, [pc, #60]	; (8015288 <tud_init+0xe8>)
 801524c:	79fb      	ldrb	r3, [r7, #7]
 801524e:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8015250:	79fb      	ldrb	r3, [r7, #7]
 8015252:	4618      	mov	r0, r3
 8015254:	f002 f88e 	bl	8017374 <dcd_init>
  dcd_int_enable(rhport);
 8015258:	79fb      	ldrb	r3, [r7, #7]
 801525a:	4618      	mov	r0, r3
 801525c:	f002 f8fc 	bl	8017458 <dcd_int_enable>

  return true;
 8015260:	2301      	movs	r3, #1
}
 8015262:	4618      	mov	r0, r3
 8015264:	3720      	adds	r7, #32
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	24002b20 	.word	0x24002b20
 8015270:	24000028 	.word	0x24000028
 8015274:	24002c20 	.word	0x24002c20
 8015278:	e000edf0 	.word	0xe000edf0
 801527c:	00000000 	.word	0x00000000
 8015280:	24002b5c 	.word	0x24002b5c
 8015284:	24002b58 	.word	0x24002b58
 8015288:	24000024 	.word	0x24000024

0801528c <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b086      	sub	sp, #24
 8015290:	af00      	add	r7, sp, #0
 8015292:	4603      	mov	r3, r0
 8015294:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8015296:	2300      	movs	r3, #0
 8015298:	75fb      	strb	r3, [r7, #23]
 801529a:	e019      	b.n	80152d0 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 801529c:	7dfb      	ldrb	r3, [r7, #23]
 801529e:	4618      	mov	r0, r3
 80152a0:	f7ff ff12 	bl	80150c8 <get_driver>
 80152a4:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 80152a6:	693b      	ldr	r3, [r7, #16]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d109      	bne.n	80152c0 <configuration_reset+0x34>
 80152ac:	4b15      	ldr	r3, [pc, #84]	; (8015304 <configuration_reset+0x78>)
 80152ae:	60fb      	str	r3, [r7, #12]
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	f003 0301 	and.w	r3, r3, #1
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d01f      	beq.n	80152fc <configuration_reset+0x70>
 80152bc:	be00      	bkpt	0x0000
 80152be:	e01d      	b.n	80152fc <configuration_reset+0x70>
    driver->reset(rhport);
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	79fa      	ldrb	r2, [r7, #7]
 80152c6:	4610      	mov	r0, r2
 80152c8:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80152ca:	7dfb      	ldrb	r3, [r7, #23]
 80152cc:	3301      	adds	r3, #1
 80152ce:	75fb      	strb	r3, [r7, #23]
 80152d0:	4b0d      	ldr	r3, [pc, #52]	; (8015308 <configuration_reset+0x7c>)
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	1c5a      	adds	r2, r3, #1
 80152d6:	7dfb      	ldrb	r3, [r7, #23]
 80152d8:	429a      	cmp	r2, r3
 80152da:	dadf      	bge.n	801529c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80152dc:	2237      	movs	r2, #55	; 0x37
 80152de:	2100      	movs	r1, #0
 80152e0:	480a      	ldr	r0, [pc, #40]	; (801530c <configuration_reset+0x80>)
 80152e2:	f003 fbea 	bl	8018aba <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80152e6:	2210      	movs	r2, #16
 80152e8:	21ff      	movs	r1, #255	; 0xff
 80152ea:	4809      	ldr	r0, [pc, #36]	; (8015310 <configuration_reset+0x84>)
 80152ec:	f003 fbe5 	bl	8018aba <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 80152f0:	2212      	movs	r2, #18
 80152f2:	21ff      	movs	r1, #255	; 0xff
 80152f4:	4807      	ldr	r0, [pc, #28]	; (8015314 <configuration_reset+0x88>)
 80152f6:	f003 fbe0 	bl	8018aba <memset>
 80152fa:	e000      	b.n	80152fe <configuration_reset+0x72>
    TU_ASSERT(driver, );
 80152fc:	bf00      	nop
}
 80152fe:	3718      	adds	r7, #24
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}
 8015304:	e000edf0 	.word	0xe000edf0
 8015308:	24002b5c 	.word	0x24002b5c
 801530c:	24002b20 	.word	0x24002b20
 8015310:	24002b23 	.word	0x24002b23
 8015314:	24002b33 	.word	0x24002b33

08015318 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af00      	add	r7, sp, #0
 801531e:	4603      	mov	r3, r0
 8015320:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8015322:	79fb      	ldrb	r3, [r7, #7]
 8015324:	4618      	mov	r0, r3
 8015326:	f7ff ffb1 	bl	801528c <configuration_reset>
  usbd_control_reset();
 801532a:	f001 fb57 	bl	80169dc <usbd_control_reset>
}
 801532e:	bf00      	nop
 8015330:	3708      	adds	r7, #8
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
	...

08015338 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8015338:	b590      	push	{r4, r7, lr}
 801533a:	b091      	sub	sp, #68	; 0x44
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	460b      	mov	r3, r1
 8015342:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8015344:	f7ff ff1c 	bl	8015180 <tud_inited>
 8015348:	4603      	mov	r3, r0
 801534a:	f083 0301 	eor.w	r3, r3, #1
 801534e:	b2db      	uxtb	r3, r3
 8015350:	2b00      	cmp	r3, #0
 8015352:	f040 812e 	bne.w	80155b2 <tud_task_ext+0x27a>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8015356:	4b9b      	ldr	r3, [pc, #620]	; (80155c4 <tud_task_ext+0x28c>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801535c:	f107 0308 	add.w	r3, r7, #8
 8015360:	62bb      	str	r3, [r7, #40]	; 0x28
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	627b      	str	r3, [r7, #36]	; 0x24
 8015366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015368:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 801536a:	6a3b      	ldr	r3, [r7, #32]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2000      	movs	r0, #0
 8015370:	4798      	blx	r3
}
 8015372:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8015374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015376:	3304      	adds	r3, #4
 8015378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801537a:	4618      	mov	r0, r3
 801537c:	f7ff fdd1 	bl	8014f22 <tu_fifo_read>
 8015380:	4603      	mov	r3, r0
 8015382:	77fb      	strb	r3, [r7, #31]
 8015384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015386:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8015388:	69bb      	ldr	r3, [r7, #24]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	2001      	movs	r0, #1
 801538e:	4798      	blx	r3
}
 8015390:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8015392:	7ffb      	ldrb	r3, [r7, #31]
 8015394:	f083 0301 	eor.w	r3, r3, #1
 8015398:	b2db      	uxtb	r3, r3
 801539a:	2b00      	cmp	r3, #0
 801539c:	f040 810b 	bne.w	80155b6 <tud_task_ext+0x27e>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 80153a0:	7a7b      	ldrb	r3, [r7, #9]
 80153a2:	3b01      	subs	r3, #1
 80153a4:	2b07      	cmp	r3, #7
 80153a6:	f200 80ee 	bhi.w	8015586 <tud_task_ext+0x24e>
 80153aa:	a201      	add	r2, pc, #4	; (adr r2, 80153b0 <tud_task_ext+0x78>)
 80153ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153b0:	080153d1 	.word	0x080153d1
 80153b4:	080153e1 	.word	0x080153e1
 80153b8:	08015587 	.word	0x08015587
 80153bc:	0801552d 	.word	0x0801552d
 80153c0:	0801555d 	.word	0x0801555d
 80153c4:	080153f7 	.word	0x080153f7
 80153c8:	0801546d 	.word	0x0801546d
 80153cc:	08015577 	.word	0x08015577
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80153d0:	7a3b      	ldrb	r3, [r7, #8]
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7ff ffa0 	bl	8015318 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80153d8:	7b3a      	ldrb	r2, [r7, #12]
 80153da:	4b7b      	ldr	r3, [pc, #492]	; (80155c8 <tud_task_ext+0x290>)
 80153dc:	709a      	strb	r2, [r3, #2]
      break;
 80153de:	e0e7      	b.n	80155b0 <tud_task_ext+0x278>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 80153e0:	7a3b      	ldrb	r3, [r7, #8]
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7ff ff98 	bl	8015318 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 80153e8:	4b78      	ldr	r3, [pc, #480]	; (80155cc <tud_task_ext+0x294>)
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	f000 80d5 	beq.w	801559a <tud_task_ext+0x262>
 80153f0:	f7f1 f8fe 	bl	80065f0 <tud_umount_cb>
      break;
 80153f4:	e0d1      	b.n	801559a <tud_task_ext+0x262>
        TU_LOG_PTR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80153f6:	4a74      	ldr	r2, [pc, #464]	; (80155c8 <tud_task_ext+0x290>)
 80153f8:	7813      	ldrb	r3, [r2, #0]
 80153fa:	f043 0301 	orr.w	r3, r3, #1
 80153fe:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8015400:	4a71      	ldr	r2, [pc, #452]	; (80155c8 <tud_task_ext+0x290>)
 8015402:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8015406:	f36f 0300 	bfc	r3, #0, #1
 801540a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 801540e:	4a6e      	ldr	r2, [pc, #440]	; (80155c8 <tud_task_ext+0x290>)
 8015410:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8015414:	f36f 0382 	bfc	r3, #2, #1
 8015418:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 801541c:	4a6a      	ldr	r2, [pc, #424]	; (80155c8 <tud_task_ext+0x290>)
 801541e:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8015422:	f36f 0300 	bfc	r3, #0, #1
 8015426:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 801542a:	4a67      	ldr	r2, [pc, #412]	; (80155c8 <tud_task_ext+0x290>)
 801542c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8015430:	f36f 0382 	bfc	r3, #2, #1
 8015434:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8015438:	7a3a      	ldrb	r2, [r7, #8]
 801543a:	f107 0308 	add.w	r3, r7, #8
 801543e:	3304      	adds	r3, #4
 8015440:	4619      	mov	r1, r3
 8015442:	4610      	mov	r0, r2
 8015444:	f000 f8e2 	bl	801560c <process_control_request>
 8015448:	4603      	mov	r3, r0
 801544a:	f083 0301 	eor.w	r3, r3, #1
 801544e:	b2db      	uxtb	r3, r3
 8015450:	2b00      	cmp	r3, #0
 8015452:	f000 80a4 	beq.w	801559e <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8015456:	7a3b      	ldrb	r3, [r7, #8]
 8015458:	2100      	movs	r1, #0
 801545a:	4618      	mov	r0, r3
 801545c:	f002 fb76 	bl	8017b4c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8015460:	7a3b      	ldrb	r3, [r7, #8]
 8015462:	2180      	movs	r1, #128	; 0x80
 8015464:	4618      	mov	r0, r3
 8015466:	f002 fb71 	bl	8017b4c <dcd_edpt_stall>
        }
      break;
 801546a:	e098      	b.n	801559e <tud_task_ext+0x266>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 801546c:	7b3b      	ldrb	r3, [r7, #12]
 801546e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015472:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015476:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8015478:	7dbb      	ldrb	r3, [r7, #22]
 801547a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801547e:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8015480:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8015484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015488:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801548a:	7dfb      	ldrb	r3, [r7, #23]
 801548c:	09db      	lsrs	r3, r3, #7
 801548e:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8015490:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8015494:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8015498:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801549c:	494a      	ldr	r1, [pc, #296]	; (80155c8 <tud_task_ext+0x290>)
 801549e:	0052      	lsls	r2, r2, #1
 80154a0:	440a      	add	r2, r1
 80154a2:	4413      	add	r3, r2
 80154a4:	f103 0220 	add.w	r2, r3, #32
 80154a8:	7953      	ldrb	r3, [r2, #5]
 80154aa:	f36f 0300 	bfc	r3, #0, #1
 80154ae:	7153      	strb	r3, [r2, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80154b0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80154b4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80154b8:	4943      	ldr	r1, [pc, #268]	; (80155c8 <tud_task_ext+0x290>)
 80154ba:	0052      	lsls	r2, r2, #1
 80154bc:	440a      	add	r2, r1
 80154be:	4413      	add	r3, r2
 80154c0:	f103 0220 	add.w	r2, r3, #32
 80154c4:	7953      	ldrb	r3, [r2, #5]
 80154c6:	f36f 0382 	bfc	r3, #2, #1
 80154ca:	7153      	strb	r3, [r2, #5]

        if ( 0 == epnum )
 80154cc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d107      	bne.n	80154e4 <tud_task_ext+0x1ac>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80154d4:	7a38      	ldrb	r0, [r7, #8]
 80154d6:	7b7a      	ldrb	r2, [r7, #13]
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80154de:	f001 fab3 	bl	8016a48 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 80154e2:	e065      	b.n	80155b0 <tud_task_ext+0x278>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80154e4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80154e8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80154ec:	4936      	ldr	r1, [pc, #216]	; (80155c8 <tud_task_ext+0x290>)
 80154ee:	0052      	lsls	r2, r2, #1
 80154f0:	440a      	add	r2, r1
 80154f2:	4413      	add	r3, r2
 80154f4:	3313      	adds	r3, #19
 80154f6:	781b      	ldrb	r3, [r3, #0]
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7ff fde5 	bl	80150c8 <get_driver>
 80154fe:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 8015500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015502:	2b00      	cmp	r3, #0
 8015504:	d109      	bne.n	801551a <tud_task_ext+0x1e2>
 8015506:	4b32      	ldr	r3, [pc, #200]	; (80155d0 <tud_task_ext+0x298>)
 8015508:	637b      	str	r3, [r7, #52]	; 0x34
 801550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	f003 0301 	and.w	r3, r3, #1
 8015512:	2b00      	cmp	r3, #0
 8015514:	d051      	beq.n	80155ba <tud_task_ext+0x282>
 8015516:	be00      	bkpt	0x0000
 8015518:	e04f      	b.n	80155ba <tud_task_ext+0x282>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 801551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801551c:	691c      	ldr	r4, [r3, #16]
 801551e:	7a38      	ldrb	r0, [r7, #8]
 8015520:	7b7a      	ldrb	r2, [r7, #13]
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8015528:	47a0      	blx	r4
      break;
 801552a:	e041      	b.n	80155b0 <tud_task_ext+0x278>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 801552c:	4b26      	ldr	r3, [pc, #152]	; (80155c8 <tud_task_ext+0x290>)
 801552e:	781b      	ldrb	r3, [r3, #0]
 8015530:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015534:	b2db      	uxtb	r3, r3
 8015536:	2b00      	cmp	r3, #0
 8015538:	d033      	beq.n	80155a2 <tud_task_ext+0x26a>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 801553a:	4b26      	ldr	r3, [pc, #152]	; (80155d4 <tud_task_ext+0x29c>)
 801553c:	2b00      	cmp	r3, #0
 801553e:	d030      	beq.n	80155a2 <tud_task_ext+0x26a>
 8015540:	4b21      	ldr	r3, [pc, #132]	; (80155c8 <tud_task_ext+0x290>)
 8015542:	781b      	ldrb	r3, [r3, #0]
 8015544:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015548:	b2db      	uxtb	r3, r3
 801554a:	2b00      	cmp	r3, #0
 801554c:	bf14      	ite	ne
 801554e:	2301      	movne	r3, #1
 8015550:	2300      	moveq	r3, #0
 8015552:	b2db      	uxtb	r3, r3
 8015554:	4618      	mov	r0, r3
 8015556:	f7f1 f852 	bl	80065fe <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 801555a:	e022      	b.n	80155a2 <tud_task_ext+0x26a>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 801555c:	4b1a      	ldr	r3, [pc, #104]	; (80155c8 <tud_task_ext+0x290>)
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015564:	b2db      	uxtb	r3, r3
 8015566:	2b00      	cmp	r3, #0
 8015568:	d01d      	beq.n	80155a6 <tud_task_ext+0x26e>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 801556a:	4b1b      	ldr	r3, [pc, #108]	; (80155d8 <tud_task_ext+0x2a0>)
 801556c:	2b00      	cmp	r3, #0
 801556e:	d01a      	beq.n	80155a6 <tud_task_ext+0x26e>
 8015570:	f7f1 f850 	bl	8006614 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8015574:	e017      	b.n	80155a6 <tud_task_ext+0x26e>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d016      	beq.n	80155aa <tud_task_ext+0x272>
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	693a      	ldr	r2, [r7, #16]
 8015580:	4610      	mov	r0, r2
 8015582:	4798      	blx	r3
      break;
 8015584:	e011      	b.n	80155aa <tud_task_ext+0x272>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8015586:	4b12      	ldr	r3, [pc, #72]	; (80155d0 <tud_task_ext+0x298>)
 8015588:	633b      	str	r3, [r7, #48]	; 0x30
 801558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	f003 0301 	and.w	r3, r3, #1
 8015592:	2b00      	cmp	r3, #0
 8015594:	d00b      	beq.n	80155ae <tud_task_ext+0x276>
 8015596:	be00      	bkpt	0x0000
      break;
 8015598:	e009      	b.n	80155ae <tud_task_ext+0x276>
      break;
 801559a:	bf00      	nop
 801559c:	e6db      	b.n	8015356 <tud_task_ext+0x1e>
      break;
 801559e:	bf00      	nop
 80155a0:	e6d9      	b.n	8015356 <tud_task_ext+0x1e>
      break;
 80155a2:	bf00      	nop
 80155a4:	e6d7      	b.n	8015356 <tud_task_ext+0x1e>
      break;
 80155a6:	bf00      	nop
 80155a8:	e6d5      	b.n	8015356 <tud_task_ext+0x1e>
      break;
 80155aa:	bf00      	nop
 80155ac:	e6d3      	b.n	8015356 <tud_task_ext+0x1e>
      break;
 80155ae:	bf00      	nop
  {
 80155b0:	e6d1      	b.n	8015356 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 80155b2:	bf00      	nop
 80155b4:	e002      	b.n	80155bc <tud_task_ext+0x284>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 80155b6:	bf00      	nop
 80155b8:	e000      	b.n	80155bc <tud_task_ext+0x284>
          TU_ASSERT(driver, );
 80155ba:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 80155bc:	3744      	adds	r7, #68	; 0x44
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd90      	pop	{r4, r7, pc}
 80155c2:	bf00      	nop
 80155c4:	24002c20 	.word	0x24002c20
 80155c8:	24002b20 	.word	0x24002b20
 80155cc:	080065f1 	.word	0x080065f1
 80155d0:	e000edf0 	.word	0xe000edf0
 80155d4:	080065ff 	.word	0x080065ff
 80155d8:	08006615 	.word	0x08006615

080155dc <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b084      	sub	sp, #16
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	4603      	mov	r3, r0
 80155e4:	60b9      	str	r1, [r7, #8]
 80155e6:	607a      	str	r2, [r7, #4]
 80155e8:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	4618      	mov	r0, r3
 80155f0:	f001 fa00 	bl	80169f4 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	68db      	ldr	r3, [r3, #12]
 80155f8:	7bf8      	ldrb	r0, [r7, #15]
 80155fa:	687a      	ldr	r2, [r7, #4]
 80155fc:	2101      	movs	r1, #1
 80155fe:	4798      	blx	r3
 8015600:	4603      	mov	r3, r0
}
 8015602:	4618      	mov	r0, r3
 8015604:	3710      	adds	r7, #16
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}
	...

0801560c <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b094      	sub	sp, #80	; 0x50
 8015610:	af00      	add	r7, sp, #0
 8015612:	4603      	mov	r3, r0
 8015614:	6039      	str	r1, [r7, #0]
 8015616:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8015618:	2000      	movs	r0, #0
 801561a:	f001 f9eb 	bl	80169f4 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015626:	b2db      	uxtb	r3, r3
 8015628:	2b60      	cmp	r3, #96	; 0x60
 801562a:	d10a      	bne.n	8015642 <process_control_request+0x36>
 801562c:	4ba4      	ldr	r3, [pc, #656]	; (80158c0 <process_control_request+0x2b4>)
 801562e:	61bb      	str	r3, [r7, #24]
 8015630:	69bb      	ldr	r3, [r7, #24]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	f003 0301 	and.w	r3, r3, #1
 8015638:	2b00      	cmp	r3, #0
 801563a:	d000      	beq.n	801563e <process_control_request+0x32>
 801563c:	be00      	bkpt	0x0000
 801563e:	2300      	movs	r3, #0
 8015640:	e248      	b.n	8015ad4 <process_control_request+0x4c8>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801564a:	b2db      	uxtb	r3, r3
 801564c:	2b40      	cmp	r3, #64	; 0x40
 801564e:	d10f      	bne.n	8015670 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8015650:	4b9c      	ldr	r3, [pc, #624]	; (80158c4 <process_control_request+0x2b8>)
 8015652:	2b00      	cmp	r3, #0
 8015654:	d101      	bne.n	801565a <process_control_request+0x4e>
 8015656:	2300      	movs	r3, #0
 8015658:	e23c      	b.n	8015ad4 <process_control_request+0x4c8>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 801565a:	489a      	ldr	r0, [pc, #616]	; (80158c4 <process_control_request+0x2b8>)
 801565c:	f001 f9ca 	bl	80169f4 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8015660:	79fb      	ldrb	r3, [r7, #7]
 8015662:	683a      	ldr	r2, [r7, #0]
 8015664:	2101      	movs	r1, #1
 8015666:	4618      	mov	r0, r3
 8015668:	f3af 8000 	nop.w
 801566c:	4603      	mov	r3, r0
 801566e:	e231      	b.n	8015ad4 <process_control_request+0x4c8>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	781b      	ldrb	r3, [r3, #0]
 8015674:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8015678:	b2db      	uxtb	r3, r3
 801567a:	2b02      	cmp	r3, #2
 801567c:	f000 8177 	beq.w	801596e <process_control_request+0x362>
 8015680:	2b02      	cmp	r3, #2
 8015682:	f300 821a 	bgt.w	8015aba <process_control_request+0x4ae>
 8015686:	2b00      	cmp	r3, #0
 8015688:	d003      	beq.n	8015692 <process_control_request+0x86>
 801568a:	2b01      	cmp	r3, #1
 801568c:	f000 811e 	beq.w	80158cc <process_control_request+0x2c0>
 8015690:	e213      	b.n	8015aba <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	781b      	ldrb	r3, [r3, #0]
 8015696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801569a:	b2db      	uxtb	r3, r3
 801569c:	2b20      	cmp	r3, #32
 801569e:	d123      	bne.n	80156e8 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	889b      	ldrh	r3, [r3, #4]
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80156a8:	8afb      	ldrh	r3, [r7, #22]
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80156b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156b4:	2b0f      	cmp	r3, #15
 80156b6:	d901      	bls.n	80156bc <process_control_request+0xb0>
 80156b8:	2300      	movs	r3, #0
 80156ba:	e20b      	b.n	8015ad4 <process_control_request+0x4c8>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80156bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156c0:	4a81      	ldr	r2, [pc, #516]	; (80158c8 <process_control_request+0x2bc>)
 80156c2:	4413      	add	r3, r2
 80156c4:	78db      	ldrb	r3, [r3, #3]
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7ff fcfe 	bl	80150c8 <get_driver>
 80156cc:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 80156ce:	6a3b      	ldr	r3, [r7, #32]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d101      	bne.n	80156d8 <process_control_request+0xcc>
 80156d4:	2300      	movs	r3, #0
 80156d6:	e1fd      	b.n	8015ad4 <process_control_request+0x4c8>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80156d8:	79fb      	ldrb	r3, [r7, #7]
 80156da:	683a      	ldr	r2, [r7, #0]
 80156dc:	6a39      	ldr	r1, [r7, #32]
 80156de:	4618      	mov	r0, r3
 80156e0:	f7ff ff7c 	bl	80155dc <invoke_class_control>
 80156e4:	4603      	mov	r3, r0
 80156e6:	e1f5      	b.n	8015ad4 <process_control_request+0x4c8>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80156f0:	b2db      	uxtb	r3, r3
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d00a      	beq.n	801570c <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 80156f6:	4b72      	ldr	r3, [pc, #456]	; (80158c0 <process_control_request+0x2b4>)
 80156f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80156fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	f003 0301 	and.w	r3, r3, #1
 8015702:	2b00      	cmp	r3, #0
 8015704:	d000      	beq.n	8015708 <process_control_request+0xfc>
 8015706:	be00      	bkpt	0x0000
        return false;
 8015708:	2300      	movs	r3, #0
 801570a:	e1e3      	b.n	8015ad4 <process_control_request+0x4c8>
      }

      switch ( p_request->bRequest )
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	785b      	ldrb	r3, [r3, #1]
 8015710:	2b09      	cmp	r3, #9
 8015712:	f200 80c8 	bhi.w	80158a6 <process_control_request+0x29a>
 8015716:	a201      	add	r2, pc, #4	; (adr r2, 801571c <process_control_request+0x110>)
 8015718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801571c:	08015871 	.word	0x08015871
 8015720:	0801584d 	.word	0x0801584d
 8015724:	080158a7 	.word	0x080158a7
 8015728:	08015829 	.word	0x08015829
 801572c:	080158a7 	.word	0x080158a7
 8015730:	08015745 	.word	0x08015745
 8015734:	0801580f 	.word	0x0801580f
 8015738:	080158a7 	.word	0x080158a7
 801573c:	08015769 	.word	0x08015769
 8015740:	08015781 	.word	0x08015781
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8015744:	6838      	ldr	r0, [r7, #0]
 8015746:	f001 f965 	bl	8016a14 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	885b      	ldrh	r3, [r3, #2]
 801574e:	b29b      	uxth	r3, r3
 8015750:	b2da      	uxtb	r2, r3
 8015752:	79fb      	ldrb	r3, [r7, #7]
 8015754:	4611      	mov	r1, r2
 8015756:	4618      	mov	r0, r3
 8015758:	f001 feae 	bl	80174b8 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 801575c:	4a5a      	ldr	r2, [pc, #360]	; (80158c8 <process_control_request+0x2bc>)
 801575e:	7813      	ldrb	r3, [r2, #0]
 8015760:	f043 0302 	orr.w	r3, r3, #2
 8015764:	7013      	strb	r3, [r2, #0]
        break;
 8015766:	e0aa      	b.n	80158be <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8015768:	4b57      	ldr	r3, [pc, #348]	; (80158c8 <process_control_request+0x2bc>)
 801576a:	785b      	ldrb	r3, [r3, #1]
 801576c:	b2db      	uxtb	r3, r3
 801576e:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8015770:	f107 020f 	add.w	r2, r7, #15
 8015774:	79f8      	ldrb	r0, [r7, #7]
 8015776:	2301      	movs	r3, #1
 8015778:	6839      	ldr	r1, [r7, #0]
 801577a:	f001 f8bf 	bl	80168fc <tud_control_xfer>
        }
        break;
 801577e:	e09e      	b.n	80158be <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	885b      	ldrh	r3, [r3, #2]
 8015784:	b29b      	uxth	r3, r3
 8015786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 801578a:	4b4f      	ldr	r3, [pc, #316]	; (80158c8 <process_control_request+0x2bc>)
 801578c:	785b      	ldrb	r3, [r3, #1]
 801578e:	b2db      	uxtb	r3, r3
 8015790:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015794:	429a      	cmp	r2, r3
 8015796:	d030      	beq.n	80157fa <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8015798:	4b4b      	ldr	r3, [pc, #300]	; (80158c8 <process_control_request+0x2bc>)
 801579a:	785b      	ldrb	r3, [r3, #1]
 801579c:	b2db      	uxtb	r3, r3
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d00f      	beq.n	80157c2 <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80157a2:	79fb      	ldrb	r3, [r7, #7]
 80157a4:	4618      	mov	r0, r3
 80157a6:	f002 f831 	bl	801780c <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80157aa:	4b47      	ldr	r3, [pc, #284]	; (80158c8 <process_control_request+0x2bc>)
 80157ac:	789b      	ldrb	r3, [r3, #2]
 80157ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 80157b2:	79fb      	ldrb	r3, [r7, #7]
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7ff fd69 	bl	801528c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80157ba:	4a43      	ldr	r2, [pc, #268]	; (80158c8 <process_control_request+0x2bc>)
 80157bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80157c0:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 80157c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d017      	beq.n	80157fa <process_control_request+0x1ee>
 80157ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80157ce:	79fb      	ldrb	r3, [r7, #7]
 80157d0:	4611      	mov	r1, r2
 80157d2:	4618      	mov	r0, r3
 80157d4:	f000 f986 	bl	8015ae4 <process_set_config>
 80157d8:	4603      	mov	r3, r0
 80157da:	f083 0301 	eor.w	r3, r3, #1
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00a      	beq.n	80157fa <process_control_request+0x1ee>
 80157e4:	4b36      	ldr	r3, [pc, #216]	; (80158c0 <process_control_request+0x2b4>)
 80157e6:	633b      	str	r3, [r7, #48]	; 0x30
 80157e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	f003 0301 	and.w	r3, r3, #1
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d000      	beq.n	80157f6 <process_control_request+0x1ea>
 80157f4:	be00      	bkpt	0x0000
 80157f6:	2300      	movs	r3, #0
 80157f8:	e16c      	b.n	8015ad4 <process_control_request+0x4c8>
          }

          _usbd_dev.cfg_num = cfg_num;
 80157fa:	4a33      	ldr	r2, [pc, #204]	; (80158c8 <process_control_request+0x2bc>)
 80157fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015800:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 8015802:	79fb      	ldrb	r3, [r7, #7]
 8015804:	6839      	ldr	r1, [r7, #0]
 8015806:	4618      	mov	r0, r3
 8015808:	f001 f806 	bl	8016818 <tud_control_status>
        }
        break;
 801580c:	e057      	b.n	80158be <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 801580e:	79fb      	ldrb	r3, [r7, #7]
 8015810:	6839      	ldr	r1, [r7, #0]
 8015812:	4618      	mov	r0, r3
 8015814:	f000 fa82 	bl	8015d1c <process_get_descriptor>
 8015818:	4603      	mov	r3, r0
 801581a:	f083 0301 	eor.w	r3, r3, #1
 801581e:	b2db      	uxtb	r3, r3
 8015820:	2b00      	cmp	r3, #0
 8015822:	d04b      	beq.n	80158bc <process_control_request+0x2b0>
 8015824:	2300      	movs	r3, #0
 8015826:	e155      	b.n	8015ad4 <process_control_request+0x4c8>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	885b      	ldrh	r3, [r3, #2]
 801582c:	b29b      	uxth	r3, r3
 801582e:	2b01      	cmp	r3, #1
 8015830:	d001      	beq.n	8015836 <process_control_request+0x22a>
 8015832:	2300      	movs	r3, #0
 8015834:	e14e      	b.n	8015ad4 <process_control_request+0x4c8>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8015836:	4a24      	ldr	r2, [pc, #144]	; (80158c8 <process_control_request+0x2bc>)
 8015838:	7813      	ldrb	r3, [r2, #0]
 801583a:	f043 0308 	orr.w	r3, r3, #8
 801583e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8015840:	79fb      	ldrb	r3, [r7, #7]
 8015842:	6839      	ldr	r1, [r7, #0]
 8015844:	4618      	mov	r0, r3
 8015846:	f000 ffe7 	bl	8016818 <tud_control_status>
        break;
 801584a:	e038      	b.n	80158be <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	885b      	ldrh	r3, [r3, #2]
 8015850:	b29b      	uxth	r3, r3
 8015852:	2b01      	cmp	r3, #1
 8015854:	d001      	beq.n	801585a <process_control_request+0x24e>
 8015856:	2300      	movs	r3, #0
 8015858:	e13c      	b.n	8015ad4 <process_control_request+0x4c8>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 801585a:	4a1b      	ldr	r2, [pc, #108]	; (80158c8 <process_control_request+0x2bc>)
 801585c:	7813      	ldrb	r3, [r2, #0]
 801585e:	f36f 03c3 	bfc	r3, #3, #1
 8015862:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8015864:	79fb      	ldrb	r3, [r7, #7]
 8015866:	6839      	ldr	r1, [r7, #0]
 8015868:	4618      	mov	r0, r3
 801586a:	f000 ffd5 	bl	8016818 <tud_control_status>
        break;
 801586e:	e026      	b.n	80158be <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8015870:	4b15      	ldr	r3, [pc, #84]	; (80158c8 <process_control_request+0x2bc>)
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	095b      	lsrs	r3, r3, #5
 8015876:	b2db      	uxtb	r3, r3
 8015878:	b29b      	uxth	r3, r3
 801587a:	f003 0301 	and.w	r3, r3, #1
 801587e:	b29a      	uxth	r2, r3
 8015880:	4b11      	ldr	r3, [pc, #68]	; (80158c8 <process_control_request+0x2bc>)
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	089b      	lsrs	r3, r3, #2
 8015886:	b2db      	uxtb	r3, r3
 8015888:	b29b      	uxth	r3, r3
 801588a:	f003 0302 	and.w	r3, r3, #2
 801588e:	b29b      	uxth	r3, r3
 8015890:	4313      	orrs	r3, r2
 8015892:	b29b      	uxth	r3, r3
 8015894:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 8015896:	f107 020c 	add.w	r2, r7, #12
 801589a:	79f8      	ldrb	r0, [r7, #7]
 801589c:	2302      	movs	r3, #2
 801589e:	6839      	ldr	r1, [r7, #0]
 80158a0:	f001 f82c 	bl	80168fc <tud_control_xfer>
        }
        break;
 80158a4:	e00b      	b.n	80158be <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80158a6:	4b06      	ldr	r3, [pc, #24]	; (80158c0 <process_control_request+0x2b4>)
 80158a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	f003 0301 	and.w	r3, r3, #1
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d000      	beq.n	80158b8 <process_control_request+0x2ac>
 80158b6:	be00      	bkpt	0x0000
 80158b8:	2300      	movs	r3, #0
 80158ba:	e10b      	b.n	8015ad4 <process_control_request+0x4c8>
        break;
 80158bc:	bf00      	nop
      }
    break;
 80158be:	e108      	b.n	8015ad2 <process_control_request+0x4c6>
 80158c0:	e000edf0 	.word	0xe000edf0
 80158c4:	00000000 	.word	0x00000000
 80158c8:	24002b20 	.word	0x24002b20

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	889b      	ldrh	r3, [r3, #4]
 80158d0:	b29b      	uxth	r3, r3
 80158d2:	82bb      	strh	r3, [r7, #20]
 80158d4:	8abb      	ldrh	r3, [r7, #20]
 80158d6:	b2db      	uxtb	r3, r3
 80158d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80158dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80158e0:	2b0f      	cmp	r3, #15
 80158e2:	d901      	bls.n	80158e8 <process_control_request+0x2dc>
 80158e4:	2300      	movs	r3, #0
 80158e6:	e0f5      	b.n	8015ad4 <process_control_request+0x4c8>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80158e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80158ec:	4a7b      	ldr	r2, [pc, #492]	; (8015adc <process_control_request+0x4d0>)
 80158ee:	4413      	add	r3, r2
 80158f0:	78db      	ldrb	r3, [r3, #3]
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7ff fbe8 	bl	80150c8 <get_driver>
 80158f8:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 80158fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d101      	bne.n	8015904 <process_control_request+0x2f8>
 8015900:	2300      	movs	r3, #0
 8015902:	e0e7      	b.n	8015ad4 <process_control_request+0x4c8>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8015904:	79fb      	ldrb	r3, [r7, #7]
 8015906:	683a      	ldr	r2, [r7, #0]
 8015908:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801590a:	4618      	mov	r0, r3
 801590c:	f7ff fe66 	bl	80155dc <invoke_class_control>
 8015910:	4603      	mov	r3, r0
 8015912:	f083 0301 	eor.w	r3, r3, #1
 8015916:	b2db      	uxtb	r3, r3
 8015918:	2b00      	cmp	r3, #0
 801591a:	f000 80d9 	beq.w	8015ad0 <process_control_request+0x4c4>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	781b      	ldrb	r3, [r3, #0]
 8015922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015926:	b2db      	uxtb	r3, r3
 8015928:	2b00      	cmp	r3, #0
 801592a:	d001      	beq.n	8015930 <process_control_request+0x324>
 801592c:	2300      	movs	r3, #0
 801592e:	e0d1      	b.n	8015ad4 <process_control_request+0x4c8>

        switch(p_request->bRequest)
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	785b      	ldrb	r3, [r3, #1]
 8015934:	3b0a      	subs	r3, #10
 8015936:	2b01      	cmp	r3, #1
 8015938:	d816      	bhi.n	8015968 <process_control_request+0x35c>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 801593a:	2000      	movs	r0, #0
 801593c:	f001 f85a 	bl	80169f4 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	785b      	ldrb	r3, [r3, #1]
 8015944:	2b0a      	cmp	r3, #10
 8015946:	d109      	bne.n	801595c <process_control_request+0x350>
            {
              uint8_t alternate = 0;
 8015948:	2300      	movs	r3, #0
 801594a:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 801594c:	f107 020b 	add.w	r2, r7, #11
 8015950:	79f8      	ldrb	r0, [r7, #7]
 8015952:	2301      	movs	r3, #1
 8015954:	6839      	ldr	r1, [r7, #0]
 8015956:	f000 ffd1 	bl	80168fc <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 801595a:	e007      	b.n	801596c <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 801595c:	79fb      	ldrb	r3, [r7, #7]
 801595e:	6839      	ldr	r1, [r7, #0]
 8015960:	4618      	mov	r0, r3
 8015962:	f000 ff59 	bl	8016818 <tud_control_status>
          break;
 8015966:	e001      	b.n	801596c <process_control_request+0x360>

          default: return false;
 8015968:	2300      	movs	r3, #0
 801596a:	e0b3      	b.n	8015ad4 <process_control_request+0x4c8>
        }
      }
    }
    break;
 801596c:	e0b0      	b.n	8015ad0 <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	889b      	ldrh	r3, [r3, #4]
 8015972:	b29b      	uxth	r3, r3
 8015974:	823b      	strh	r3, [r7, #16]
 8015976:	8a3b      	ldrh	r3, [r7, #16]
 8015978:	b2db      	uxtb	r3, r3
 801597a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801597e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015982:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8015984:	7cbb      	ldrb	r3, [r7, #18]
 8015986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801598a:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 801598c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8015990:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015994:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8015996:	7cfb      	ldrb	r3, [r7, #19]
 8015998:	09db      	lsrs	r3, r3, #7
 801599a:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 801599c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80159a0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80159a4:	2b08      	cmp	r3, #8
 80159a6:	d90a      	bls.n	80159be <process_control_request+0x3b2>
 80159a8:	4b4d      	ldr	r3, [pc, #308]	; (8015ae0 <process_control_request+0x4d4>)
 80159aa:	643b      	str	r3, [r7, #64]	; 0x40
 80159ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	f003 0301 	and.w	r3, r3, #1
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d000      	beq.n	80159ba <process_control_request+0x3ae>
 80159b8:	be00      	bkpt	0x0000
 80159ba:	2300      	movs	r3, #0
 80159bc:	e08a      	b.n	8015ad4 <process_control_request+0x4c8>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80159be:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80159c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80159c6:	4945      	ldr	r1, [pc, #276]	; (8015adc <process_control_request+0x4d0>)
 80159c8:	0052      	lsls	r2, r2, #1
 80159ca:	440a      	add	r2, r1
 80159cc:	4413      	add	r3, r2
 80159ce:	3313      	adds	r3, #19
 80159d0:	781b      	ldrb	r3, [r3, #0]
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7ff fb78 	bl	80150c8 <get_driver>
 80159d8:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159e2:	b2db      	uxtb	r3, r3
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d00c      	beq.n	8015a02 <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 80159e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d101      	bne.n	80159f2 <process_control_request+0x3e6>
 80159ee:	2300      	movs	r3, #0
 80159f0:	e070      	b.n	8015ad4 <process_control_request+0x4c8>
        return invoke_class_control(rhport, driver, p_request);
 80159f2:	79fb      	ldrb	r3, [r7, #7]
 80159f4:	683a      	ldr	r2, [r7, #0]
 80159f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7ff fdef 	bl	80155dc <invoke_class_control>
 80159fe:	4603      	mov	r3, r0
 8015a00:	e068      	b.n	8015ad4 <process_control_request+0x4c8>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8015a02:	683b      	ldr	r3, [r7, #0]
 8015a04:	785b      	ldrb	r3, [r3, #1]
 8015a06:	2b03      	cmp	r3, #3
 8015a08:	d018      	beq.n	8015a3c <process_control_request+0x430>
 8015a0a:	2b03      	cmp	r3, #3
 8015a0c:	dc48      	bgt.n	8015aa0 <process_control_request+0x494>
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d002      	beq.n	8015a18 <process_control_request+0x40c>
 8015a12:	2b01      	cmp	r3, #1
 8015a14:	d012      	beq.n	8015a3c <process_control_request+0x430>
 8015a16:	e043      	b.n	8015aa0 <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8015a18:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8015a1c:	79fb      	ldrb	r3, [r7, #7]
 8015a1e:	4611      	mov	r1, r2
 8015a20:	4618      	mov	r0, r3
 8015a22:	f000 feaf 	bl	8016784 <usbd_edpt_stalled>
 8015a26:	4603      	mov	r3, r0
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 8015a2c:	f107 0208 	add.w	r2, r7, #8
 8015a30:	79f8      	ldrb	r0, [r7, #7]
 8015a32:	2302      	movs	r3, #2
 8015a34:	6839      	ldr	r1, [r7, #0]
 8015a36:	f000 ff61 	bl	80168fc <tud_control_xfer>
          }
          break;
 8015a3a:	e03d      	b.n	8015ab8 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	885b      	ldrh	r3, [r3, #2]
 8015a40:	b29b      	uxth	r3, r3
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d112      	bne.n	8015a6c <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	785b      	ldrb	r3, [r3, #1]
 8015a4a:	2b01      	cmp	r3, #1
 8015a4c:	d107      	bne.n	8015a5e <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8015a4e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8015a52:	79fb      	ldrb	r3, [r7, #7]
 8015a54:	4611      	mov	r1, r2
 8015a56:	4618      	mov	r0, r3
 8015a58:	f000 fe48 	bl	80166ec <usbd_edpt_clear_stall>
 8015a5c:	e006      	b.n	8015a6c <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8015a5e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8015a62:	79fb      	ldrb	r3, [r7, #7]
 8015a64:	4611      	mov	r1, r2
 8015a66:	4618      	mov	r0, r3
 8015a68:	f000 fdf4 	bl	8016654 <usbd_edpt_stall>
              }
            }

            if (driver)
 8015a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d021      	beq.n	8015ab6 <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8015a72:	79fb      	ldrb	r3, [r7, #7]
 8015a74:	683a      	ldr	r2, [r7, #0]
 8015a76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015a78:	4618      	mov	r0, r3
 8015a7a:	f7ff fdaf 	bl	80155dc <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8015a7e:	2000      	movs	r0, #0
 8015a80:	f000 ffb8 	bl	80169f4 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8015a84:	4b15      	ldr	r3, [pc, #84]	; (8015adc <process_control_request+0x4d0>)
 8015a86:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015a8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015a8e:	b2db      	uxtb	r3, r3
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d110      	bne.n	8015ab6 <process_control_request+0x4aa>
 8015a94:	79fb      	ldrb	r3, [r7, #7]
 8015a96:	6839      	ldr	r1, [r7, #0]
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f000 febd 	bl	8016818 <tud_control_status>
            }
          }
          break;
 8015a9e:	e00a      	b.n	8015ab6 <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8015aa0:	4b0f      	ldr	r3, [pc, #60]	; (8015ae0 <process_control_request+0x4d4>)
 8015aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8015aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	f003 0301 	and.w	r3, r3, #1
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d000      	beq.n	8015ab2 <process_control_request+0x4a6>
 8015ab0:	be00      	bkpt	0x0000
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	e00e      	b.n	8015ad4 <process_control_request+0x4c8>
          break;
 8015ab6:	bf00      	nop
        }
      }
    }
    break;
 8015ab8:	e00b      	b.n	8015ad2 <process_control_request+0x4c6>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8015aba:	4b09      	ldr	r3, [pc, #36]	; (8015ae0 <process_control_request+0x4d4>)
 8015abc:	61fb      	str	r3, [r7, #28]
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	f003 0301 	and.w	r3, r3, #1
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d000      	beq.n	8015acc <process_control_request+0x4c0>
 8015aca:	be00      	bkpt	0x0000
 8015acc:	2300      	movs	r3, #0
 8015ace:	e001      	b.n	8015ad4 <process_control_request+0x4c8>
    break;
 8015ad0:	bf00      	nop
  }

  return true;
 8015ad2:	2301      	movs	r3, #1
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3750      	adds	r7, #80	; 0x50
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	24002b20 	.word	0x24002b20
 8015ae0:	e000edf0 	.word	0xe000edf0

08015ae4 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b094      	sub	sp, #80	; 0x50
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	4603      	mov	r3, r0
 8015aec:	460a      	mov	r2, r1
 8015aee:	71fb      	strb	r3, [r7, #7]
 8015af0:	4613      	mov	r3, r2
 8015af2:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8015af4:	79bb      	ldrb	r3, [r7, #6]
 8015af6:	3b01      	subs	r3, #1
 8015af8:	b2db      	uxtb	r3, r3
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7f0 fdac 	bl	8006658 <tud_descriptor_configuration_cb>
 8015b00:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8015b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d003      	beq.n	8015b10 <process_set_config+0x2c>
 8015b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b0a:	785b      	ldrb	r3, [r3, #1]
 8015b0c:	2b02      	cmp	r3, #2
 8015b0e:	d00a      	beq.n	8015b26 <process_set_config+0x42>
 8015b10:	4b7c      	ldr	r3, [pc, #496]	; (8015d04 <process_set_config+0x220>)
 8015b12:	61bb      	str	r3, [r7, #24]
 8015b14:	69bb      	ldr	r3, [r7, #24]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	f003 0301 	and.w	r3, r3, #1
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d000      	beq.n	8015b22 <process_set_config+0x3e>
 8015b20:	be00      	bkpt	0x0000
 8015b22:	2300      	movs	r3, #0
 8015b24:	e0e9      	b.n	8015cfa <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8015b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b28:	79db      	ldrb	r3, [r3, #7]
 8015b2a:	115b      	asrs	r3, r3, #5
 8015b2c:	f003 0301 	and.w	r3, r3, #1
 8015b30:	b2d9      	uxtb	r1, r3
 8015b32:	4a75      	ldr	r2, [pc, #468]	; (8015d08 <process_set_config+0x224>)
 8015b34:	7813      	ldrb	r3, [r2, #0]
 8015b36:	f361 1304 	bfi	r3, r1, #4, #1
 8015b3a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8015b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b3e:	79db      	ldrb	r3, [r3, #7]
 8015b40:	119b      	asrs	r3, r3, #6
 8015b42:	f003 0301 	and.w	r3, r3, #1
 8015b46:	b2d9      	uxtb	r1, r3
 8015b48:	4a6f      	ldr	r2, [pc, #444]	; (8015d08 <process_set_config+0x224>)
 8015b4a:	7813      	ldrb	r3, [r2, #0]
 8015b4c:	f361 1345 	bfi	r3, r1, #5, #1
 8015b50:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8015b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b54:	3309      	adds	r3, #9
 8015b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8015b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b5a:	885b      	ldrh	r3, [r3, #2]
 8015b5c:	b29b      	uxth	r3, r3
 8015b5e:	461a      	mov	r2, r3
 8015b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b62:	4413      	add	r3, r2
 8015b64:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 8015b66:	e0bd      	b.n	8015ce4 <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 8015b68:	2301      	movs	r3, #1
 8015b6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8015b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b70:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	3301      	adds	r3, #1
 8015b76:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8015b78:	2b0b      	cmp	r3, #11
 8015b7a:	d10f      	bne.n	8015b9c <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8015b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8015b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b82:	78db      	ldrb	r3, [r3, #3]
 8015b84:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8015b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b8a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	781b      	ldrb	r3, [r3, #0]
 8015b94:	461a      	mov	r2, r3
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8015b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b9e:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8015ba6:	2b04      	cmp	r3, #4
 8015ba8:	d00a      	beq.n	8015bc0 <process_set_config+0xdc>
 8015baa:	4b56      	ldr	r3, [pc, #344]	; (8015d04 <process_set_config+0x220>)
 8015bac:	61fb      	str	r3, [r7, #28]
 8015bae:	69fb      	ldr	r3, [r7, #28]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	f003 0301 	and.w	r3, r3, #1
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d000      	beq.n	8015bbc <process_set_config+0xd8>
 8015bba:	be00      	bkpt	0x0000
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	e09c      	b.n	8015cfa <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8015bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bc2:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8015bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bc8:	1ad3      	subs	r3, r2, r3
 8015bca:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8015bcc:	2300      	movs	r3, #0
 8015bce:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8015bd2:	e06e      	b.n	8015cb2 <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8015bd4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7ff fa75 	bl	80150c8 <get_driver>
 8015bde:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 8015be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d10a      	bne.n	8015bfc <process_set_config+0x118>
 8015be6:	4b47      	ldr	r3, [pc, #284]	; (8015d04 <process_set_config+0x220>)
 8015be8:	627b      	str	r3, [r7, #36]	; 0x24
 8015bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	f003 0301 	and.w	r3, r3, #1
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d000      	beq.n	8015bf8 <process_set_config+0x114>
 8015bf6:	be00      	bkpt	0x0000
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	e07e      	b.n	8015cfa <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8015bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfe:	689b      	ldr	r3, [r3, #8]
 8015c00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015c02:	79f8      	ldrb	r0, [r7, #7]
 8015c04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015c06:	4798      	blx	r3
 8015c08:	4603      	mov	r3, r0
 8015c0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8015c0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015c0e:	2b08      	cmp	r3, #8
 8015c10:	d94a      	bls.n	8015ca8 <process_set_config+0x1c4>
 8015c12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015c14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d846      	bhi.n	8015ca8 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8015c1a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	d107      	bne.n	8015c32 <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8015c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	4a39      	ldr	r2, [pc, #228]	; (8015d0c <process_set_config+0x228>)
 8015c28:	4293      	cmp	r3, r2
 8015c2a:	d102      	bne.n	8015c32 <process_set_config+0x14e>
 8015c2c:	2302      	movs	r3, #2
 8015c2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8015c32:	2300      	movs	r3, #0
 8015c34:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8015c38:	e024      	b.n	8015c84 <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8015c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c3c:	789a      	ldrb	r2, [r3, #2]
 8015c3e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8015c42:	4413      	add	r3, r2
 8015c44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8015c48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015c4c:	4a2e      	ldr	r2, [pc, #184]	; (8015d08 <process_set_config+0x224>)
 8015c4e:	4413      	add	r3, r2
 8015c50:	78db      	ldrb	r3, [r3, #3]
 8015c52:	2bff      	cmp	r3, #255	; 0xff
 8015c54:	d00a      	beq.n	8015c6c <process_set_config+0x188>
 8015c56:	4b2b      	ldr	r3, [pc, #172]	; (8015d04 <process_set_config+0x220>)
 8015c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	f003 0301 	and.w	r3, r3, #1
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d000      	beq.n	8015c68 <process_set_config+0x184>
 8015c66:	be00      	bkpt	0x0000
 8015c68:	2300      	movs	r3, #0
 8015c6a:	e046      	b.n	8015cfa <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8015c6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015c70:	4a25      	ldr	r2, [pc, #148]	; (8015d08 <process_set_config+0x224>)
 8015c72:	4413      	add	r3, r2
 8015c74:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8015c78:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8015c7a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8015c7e:	3301      	adds	r3, #1
 8015c80:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8015c84:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8015c88:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d3d4      	bcc.n	8015c3a <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8015c90:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8015c94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015c98:	481d      	ldr	r0, [pc, #116]	; (8015d10 <process_set_config+0x22c>)
 8015c9a:	f002 fd7b 	bl	8018794 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8015c9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015ca2:	4413      	add	r3, r2
 8015ca4:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 8015ca6:	e00b      	b.n	8015cc0 <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8015ca8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8015cac:	3301      	adds	r3, #1
 8015cae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8015cb2:	4b18      	ldr	r3, [pc, #96]	; (8015d14 <process_set_config+0x230>)
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	1c5a      	adds	r2, r3, #1
 8015cb8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	da89      	bge.n	8015bd4 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8015cc0:	4b14      	ldr	r3, [pc, #80]	; (8015d14 <process_set_config+0x230>)
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	1c5a      	adds	r2, r3, #1
 8015cc6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	da0a      	bge.n	8015ce4 <process_set_config+0x200>
 8015cce:	4b0d      	ldr	r3, [pc, #52]	; (8015d04 <process_set_config+0x220>)
 8015cd0:	623b      	str	r3, [r7, #32]
 8015cd2:	6a3b      	ldr	r3, [r7, #32]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	f003 0301 	and.w	r3, r3, #1
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d000      	beq.n	8015ce0 <process_set_config+0x1fc>
 8015cde:	be00      	bkpt	0x0000
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	e00a      	b.n	8015cfa <process_set_config+0x216>
  while( p_desc < desc_end )
 8015ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	f4ff af3d 	bcc.w	8015b68 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 8015cee:	4b0a      	ldr	r3, [pc, #40]	; (8015d18 <process_set_config+0x234>)
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d001      	beq.n	8015cf8 <process_set_config+0x214>
 8015cf4:	f7f0 fc75 	bl	80065e2 <tud_mount_cb>

  return true;
 8015cf8:	2301      	movs	r3, #1
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3750      	adds	r7, #80	; 0x50
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	e000edf0 	.word	0xe000edf0
 8015d08:	24002b20 	.word	0x24002b20
 8015d0c:	08012ba9 	.word	0x08012ba9
 8015d10:	24002b33 	.word	0x24002b33
 8015d14:	24002b5c 	.word	0x24002b5c
 8015d18:	080065e3 	.word	0x080065e3

08015d1c <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b094      	sub	sp, #80	; 0x50
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	4603      	mov	r3, r0
 8015d24:	6039      	str	r1, [r7, #0]
 8015d26:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	885b      	ldrh	r3, [r3, #2]
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8015d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d32:	0a1b      	lsrs	r3, r3, #8
 8015d34:	b29b      	uxth	r3, r3
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	885b      	ldrh	r3, [r3, #2]
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8015d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8015d4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8015d50:	3b01      	subs	r3, #1
 8015d52:	2b0e      	cmp	r3, #14
 8015d54:	f200 80bc 	bhi.w	8015ed0 <process_get_descriptor+0x1b4>
 8015d58:	a201      	add	r2, pc, #4	; (adr r2, 8015d60 <process_get_descriptor+0x44>)
 8015d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d5e:	bf00      	nop
 8015d60:	08015d9d 	.word	0x08015d9d
 8015d64:	08015e01 	.word	0x08015e01
 8015d68:	08015e69 	.word	0x08015e69
 8015d6c:	08015ed1 	.word	0x08015ed1
 8015d70:	08015ed1 	.word	0x08015ed1
 8015d74:	08015e9f 	.word	0x08015e9f
 8015d78:	08015e01 	.word	0x08015e01
 8015d7c:	08015ed1 	.word	0x08015ed1
 8015d80:	08015ed1 	.word	0x08015ed1
 8015d84:	08015ed1 	.word	0x08015ed1
 8015d88:	08015ed1 	.word	0x08015ed1
 8015d8c:	08015ed1 	.word	0x08015ed1
 8015d90:	08015ed1 	.word	0x08015ed1
 8015d94:	08015ed1 	.word	0x08015ed1
 8015d98:	08015db3 	.word	0x08015db3
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8015d9c:	f7f0 fc42 	bl	8006624 <tud_descriptor_device_cb>
 8015da0:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8015da2:	79f8      	ldrb	r0, [r7, #7]
 8015da4:	2312      	movs	r3, #18
 8015da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015da8:	6839      	ldr	r1, [r7, #0]
 8015daa:	f000 fda7 	bl	80168fc <tud_control_xfer>
 8015dae:	4603      	mov	r3, r0
 8015db0:	e08f      	b.n	8015ed2 <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8015db2:	4b4a      	ldr	r3, [pc, #296]	; (8015edc <process_get_descriptor+0x1c0>)
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d101      	bne.n	8015dbc <process_get_descriptor+0xa0>
 8015db8:	2300      	movs	r3, #0
 8015dba:	e08a      	b.n	8015ed2 <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8015dbc:	f3af 8000 	nop.w
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8015dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d10a      	bne.n	8015de0 <process_get_descriptor+0xc4>
 8015dca:	4b45      	ldr	r3, [pc, #276]	; (8015ee0 <process_get_descriptor+0x1c4>)
 8015dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	f003 0301 	and.w	r3, r3, #1
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d000      	beq.n	8015ddc <process_get_descriptor+0xc0>
 8015dda:	be00      	bkpt	0x0000
 8015ddc:	2300      	movs	r3, #0
 8015dde:	e078      	b.n	8015ed2 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8015de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015de2:	3302      	adds	r3, #2
 8015de4:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8015de6:	6a3b      	ldr	r3, [r7, #32]
 8015de8:	881b      	ldrh	r3, [r3, #0]
 8015dea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8015dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015df0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015df4:	79f8      	ldrb	r0, [r7, #7]
 8015df6:	6839      	ldr	r1, [r7, #0]
 8015df8:	f000 fd80 	bl	80168fc <tud_control_xfer>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	e068      	b.n	8015ed2 <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8015e00:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8015e04:	2b02      	cmp	r3, #2
 8015e06:	d107      	bne.n	8015e18 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8015e08:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7f0 fc23 	bl	8006658 <tud_descriptor_configuration_cb>
 8015e12:	4603      	mov	r3, r0
 8015e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015e16:	e00b      	b.n	8015e30 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8015e18:	4b32      	ldr	r3, [pc, #200]	; (8015ee4 <process_get_descriptor+0x1c8>)
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d101      	bne.n	8015e22 <process_get_descriptor+0x106>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	e057      	b.n	8015ed2 <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8015e22:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8015e26:	4618      	mov	r0, r3
 8015e28:	f3af 8000 	nop.w
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8015e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d10a      	bne.n	8015e4c <process_get_descriptor+0x130>
 8015e36:	4b2a      	ldr	r3, [pc, #168]	; (8015ee0 <process_get_descriptor+0x1c4>)
 8015e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	f003 0301 	and.w	r3, r3, #1
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d000      	beq.n	8015e48 <process_get_descriptor+0x12c>
 8015e46:	be00      	bkpt	0x0000
 8015e48:	2300      	movs	r3, #0
 8015e4a:	e042      	b.n	8015ed2 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8015e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e4e:	3302      	adds	r3, #2
 8015e50:	61fb      	str	r3, [r7, #28]
 8015e52:	69fb      	ldr	r3, [r7, #28]
 8015e54:	881b      	ldrh	r3, [r3, #0]
 8015e56:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8015e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015e5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8015e5c:	79f8      	ldrb	r0, [r7, #7]
 8015e5e:	6839      	ldr	r1, [r7, #0]
 8015e60:	f000 fd4c 	bl	80168fc <tud_control_xfer>
 8015e64:	4603      	mov	r3, r0
 8015e66:	e034      	b.n	8015ed2 <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	889b      	ldrh	r3, [r3, #4]
 8015e6c:	b29a      	uxth	r2, r3
 8015e6e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8015e72:	4611      	mov	r1, r2
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7f0 fc0d 	bl	8006694 <tud_descriptor_string_cb>
 8015e7a:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8015e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d101      	bne.n	8015e86 <process_get_descriptor+0x16a>
 8015e82:	2300      	movs	r3, #0
 8015e84:	e025      	b.n	8015ed2 <process_get_descriptor+0x1b6>
 8015e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e88:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8015e8a:	69bb      	ldr	r3, [r7, #24]
 8015e8c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8015e8e:	b29b      	uxth	r3, r3
 8015e90:	79f8      	ldrb	r0, [r7, #7]
 8015e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e94:	6839      	ldr	r1, [r7, #0]
 8015e96:	f000 fd31 	bl	80168fc <tud_control_xfer>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	e019      	b.n	8015ed2 <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8015e9e:	4b12      	ldr	r3, [pc, #72]	; (8015ee8 <process_get_descriptor+0x1cc>)
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d101      	bne.n	8015ea8 <process_get_descriptor+0x18c>
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	e014      	b.n	8015ed2 <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8015ea8:	f3af 8000 	nop.w
 8015eac:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8015eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d101      	bne.n	8015eb8 <process_get_descriptor+0x19c>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	e00c      	b.n	8015ed2 <process_get_descriptor+0x1b6>
 8015eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eba:	617b      	str	r3, [r7, #20]
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	79f8      	ldrb	r0, [r7, #7]
 8015ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ec6:	6839      	ldr	r1, [r7, #0]
 8015ec8:	f000 fd18 	bl	80168fc <tud_control_xfer>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	e000      	b.n	8015ed2 <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8015ed0:	2300      	movs	r3, #0
  }
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3750      	adds	r7, #80	; 0x50
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	bf00      	nop
 8015edc:	00000000 	.word	0x00000000
 8015ee0:	e000edf0 	.word	0xe000edf0
	...

08015eec <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b0aa      	sub	sp, #168	; 0xa8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	785b      	ldrb	r3, [r3, #1]
 8015efc:	3b02      	subs	r3, #2
 8015efe:	2b03      	cmp	r3, #3
 8015f00:	f200 8198 	bhi.w	8016234 <dcd_event_handler+0x348>
 8015f04:	a201      	add	r2, pc, #4	; (adr r2, 8015f0c <dcd_event_handler+0x20>)
 8015f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f0a:	bf00      	nop
 8015f0c:	08015f1d 	.word	0x08015f1d
 8015f10:	08016121 	.word	0x08016121
 8015f14:	08015fdd 	.word	0x08015fdd
 8015f18:	08016083 	.word	0x08016083
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8015f1c:	4a82      	ldr	r2, [pc, #520]	; (8016128 <dcd_event_handler+0x23c>)
 8015f1e:	7813      	ldrb	r3, [r2, #0]
 8015f20:	f36f 0300 	bfc	r3, #0, #1
 8015f24:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8015f26:	4a80      	ldr	r2, [pc, #512]	; (8016128 <dcd_event_handler+0x23c>)
 8015f28:	7813      	ldrb	r3, [r2, #0]
 8015f2a:	f36f 0341 	bfc	r3, #1, #1
 8015f2e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8015f30:	4b7d      	ldr	r3, [pc, #500]	; (8016128 <dcd_event_handler+0x23c>)
 8015f32:	2200      	movs	r2, #0
 8015f34:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8015f36:	4a7c      	ldr	r2, [pc, #496]	; (8016128 <dcd_event_handler+0x23c>)
 8015f38:	7813      	ldrb	r3, [r2, #0]
 8015f3a:	f36f 0382 	bfc	r3, #2, #1
 8015f3e:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8015f40:	4b7a      	ldr	r3, [pc, #488]	; (801612c <dcd_event_handler+0x240>)
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015f4e:	78fb      	ldrb	r3, [r7, #3]
 8015f50:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8015f54:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015f58:	f083 0301 	eor.w	r3, r3, #1
 8015f5c:	b2db      	uxtb	r3, r3
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d009      	beq.n	8015f76 <dcd_event_handler+0x8a>
 8015f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 8015f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	2000      	movs	r0, #0
 8015f72:	4798      	blx	r3
}
 8015f74:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8015f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f7a:	3304      	adds	r3, #4
 8015f7c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7ff f816 	bl	8014fb2 <tu_fifo_write>
 8015f86:	4603      	mov	r3, r0
 8015f88:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8015f8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8015f90:	f083 0301 	eor.w	r3, r3, #1
 8015f94:	b2db      	uxtb	r3, r3
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d009      	beq.n	8015fae <dcd_event_handler+0xc2>
 8015f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 8015fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	2001      	movs	r0, #1
 8015faa:	4798      	blx	r3
}
 8015fac:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8015fae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8015fb2:	f083 0301 	eor.w	r3, r3, #1
 8015fb6:	b2db      	uxtb	r3, r3
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d00b      	beq.n	8015fd4 <dcd_event_handler+0xe8>
 8015fbc:	4b5c      	ldr	r3, [pc, #368]	; (8016130 <dcd_event_handler+0x244>)
 8015fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	f003 0301 	and.w	r3, r3, #1
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d003      	beq.n	8015fd8 <dcd_event_handler+0xec>
 8015fd0:	be00      	bkpt	0x0000
 8015fd2:	e001      	b.n	8015fd8 <dcd_event_handler+0xec>

  return success;
 8015fd4:	bf00      	nop
 8015fd6:	e172      	b.n	80162be <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8015fd8:	bf00      	nop
    break;
 8015fda:	e170      	b.n	80162be <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8015fdc:	4b52      	ldr	r3, [pc, #328]	; (8016128 <dcd_event_handler+0x23c>)
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015fe4:	b2db      	uxtb	r3, r3
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	f000 8164 	beq.w	80162b4 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 8015fec:	4a4e      	ldr	r2, [pc, #312]	; (8016128 <dcd_event_handler+0x23c>)
 8015fee:	7813      	ldrb	r3, [r2, #0]
 8015ff0:	f043 0304 	orr.w	r3, r3, #4
 8015ff4:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8015ff6:	4b4d      	ldr	r3, [pc, #308]	; (801612c <dcd_event_handler+0x240>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016002:	78fb      	ldrb	r3, [r7, #3]
 8016004:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 8016008:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801600c:	f083 0301 	eor.w	r3, r3, #1
 8016010:	b2db      	uxtb	r3, r3
 8016012:	2b00      	cmp	r3, #0
 8016014:	d007      	beq.n	8016026 <dcd_event_handler+0x13a>
 8016016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801601a:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 801601c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	2000      	movs	r0, #0
 8016022:	4798      	blx	r3
}
 8016024:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8016026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801602a:	3304      	adds	r3, #4
 801602c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801602e:	4618      	mov	r0, r3
 8016030:	f7fe ffbf 	bl	8014fb2 <tu_fifo_write>
 8016034:	4603      	mov	r3, r0
 8016036:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 801603a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801603e:	f083 0301 	eor.w	r3, r3, #1
 8016042:	b2db      	uxtb	r3, r3
 8016044:	2b00      	cmp	r3, #0
 8016046:	d007      	beq.n	8016058 <dcd_event_handler+0x16c>
 8016048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801604c:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 801604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	2001      	movs	r0, #1
 8016054:	4798      	blx	r3
}
 8016056:	bf00      	nop
  TU_ASSERT(success);
 8016058:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801605c:	f083 0301 	eor.w	r3, r3, #1
 8016060:	b2db      	uxtb	r3, r3
 8016062:	2b00      	cmp	r3, #0
 8016064:	d009      	beq.n	801607a <dcd_event_handler+0x18e>
 8016066:	4b32      	ldr	r3, [pc, #200]	; (8016130 <dcd_event_handler+0x244>)
 8016068:	66bb      	str	r3, [r7, #104]	; 0x68
 801606a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	f003 0301 	and.w	r3, r3, #1
 8016072:	2b00      	cmp	r3, #0
 8016074:	d003      	beq.n	801607e <dcd_event_handler+0x192>
 8016076:	be00      	bkpt	0x0000
 8016078:	e001      	b.n	801607e <dcd_event_handler+0x192>
  return success;
 801607a:	bf00      	nop
 801607c:	e11a      	b.n	80162b4 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 801607e:	bf00      	nop
      }
    break;
 8016080:	e118      	b.n	80162b4 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8016082:	4b29      	ldr	r3, [pc, #164]	; (8016128 <dcd_event_handler+0x23c>)
 8016084:	781b      	ldrb	r3, [r3, #0]
 8016086:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801608a:	b2db      	uxtb	r3, r3
 801608c:	2b00      	cmp	r3, #0
 801608e:	f000 8113 	beq.w	80162b8 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 8016092:	4a25      	ldr	r2, [pc, #148]	; (8016128 <dcd_event_handler+0x23c>)
 8016094:	7813      	ldrb	r3, [r2, #0]
 8016096:	f36f 0382 	bfc	r3, #2, #1
 801609a:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 801609c:	4b23      	ldr	r3, [pc, #140]	; (801612c <dcd_event_handler+0x240>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	667b      	str	r3, [r7, #100]	; 0x64
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	663b      	str	r3, [r7, #96]	; 0x60
 80160a6:	78fb      	ldrb	r3, [r7, #3]
 80160a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 80160ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80160b0:	f083 0301 	eor.w	r3, r3, #1
 80160b4:	b2db      	uxtb	r3, r3
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d006      	beq.n	80160c8 <dcd_event_handler+0x1dc>
 80160ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80160bc:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 80160be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	2000      	movs	r0, #0
 80160c4:	4798      	blx	r3
}
 80160c6:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80160c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80160ca:	3304      	adds	r3, #4
 80160cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7fe ff6f 	bl	8014fb2 <tu_fifo_write>
 80160d4:	4603      	mov	r3, r0
 80160d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 80160da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80160de:	f083 0301 	eor.w	r3, r3, #1
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d006      	beq.n	80160f6 <dcd_event_handler+0x20a>
 80160e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80160ea:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 80160ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	2001      	movs	r0, #1
 80160f2:	4798      	blx	r3
}
 80160f4:	bf00      	nop
  TU_ASSERT(success);
 80160f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80160fa:	f083 0301 	eor.w	r3, r3, #1
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	2b00      	cmp	r3, #0
 8016102:	d009      	beq.n	8016118 <dcd_event_handler+0x22c>
 8016104:	4b0a      	ldr	r3, [pc, #40]	; (8016130 <dcd_event_handler+0x244>)
 8016106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	f003 0301 	and.w	r3, r3, #1
 8016110:	2b00      	cmp	r3, #0
 8016112:	d003      	beq.n	801611c <dcd_event_handler+0x230>
 8016114:	be00      	bkpt	0x0000
 8016116:	e001      	b.n	801611c <dcd_event_handler+0x230>
  return success;
 8016118:	bf00      	nop
 801611a:	e0cd      	b.n	80162b8 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 801611c:	bf00      	nop
      }
    break;
 801611e:	e0cb      	b.n	80162b8 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8016120:	2300      	movs	r3, #0
 8016122:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8016126:	e023      	b.n	8016170 <dcd_event_handler+0x284>
 8016128:	24002b20 	.word	0x24002b20
 801612c:	24002c20 	.word	0x24002c20
 8016130:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 8016134:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016138:	4618      	mov	r0, r3
 801613a:	f7fe ffc5 	bl	80150c8 <get_driver>
 801613e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 8016142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016146:	2b00      	cmp	r3, #0
 8016148:	d00d      	beq.n	8016166 <dcd_event_handler+0x27a>
 801614a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801614e:	695b      	ldr	r3, [r3, #20]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d008      	beq.n	8016166 <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8016154:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016158:	695b      	ldr	r3, [r3, #20]
 801615a:	687a      	ldr	r2, [r7, #4]
 801615c:	7810      	ldrb	r0, [r2, #0]
 801615e:	687a      	ldr	r2, [r7, #4]
 8016160:	6852      	ldr	r2, [r2, #4]
 8016162:	4611      	mov	r1, r2
 8016164:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8016166:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801616a:	3301      	adds	r3, #1
 801616c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8016170:	4b55      	ldr	r3, [pc, #340]	; (80162c8 <dcd_event_handler+0x3dc>)
 8016172:	781b      	ldrb	r3, [r3, #0]
 8016174:	1c5a      	adds	r2, r3, #1
 8016176:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801617a:	429a      	cmp	r2, r3
 801617c:	dada      	bge.n	8016134 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 801617e:	4b53      	ldr	r3, [pc, #332]	; (80162cc <dcd_event_handler+0x3e0>)
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016186:	b2db      	uxtb	r3, r3
 8016188:	2b00      	cmp	r3, #0
 801618a:	f000 8097 	beq.w	80162bc <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 801618e:	4a4f      	ldr	r2, [pc, #316]	; (80162cc <dcd_event_handler+0x3e0>)
 8016190:	7813      	ldrb	r3, [r2, #0]
 8016192:	f36f 0382 	bfc	r3, #2, #1
 8016196:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8016198:	f107 0308 	add.w	r3, r7, #8
 801619c:	2200      	movs	r2, #0
 801619e:	601a      	str	r2, [r3, #0]
 80161a0:	605a      	str	r2, [r3, #4]
 80161a2:	609a      	str	r2, [r3, #8]
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	723b      	strb	r3, [r7, #8]
 80161aa:	2305      	movs	r3, #5
 80161ac:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 80161ae:	4b48      	ldr	r3, [pc, #288]	; (80162d0 <dcd_event_handler+0x3e4>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80161b4:	f107 0308 	add.w	r3, r7, #8
 80161b8:	647b      	str	r3, [r7, #68]	; 0x44
 80161ba:	78fb      	ldrb	r3, [r7, #3]
 80161bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 80161c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80161c4:	f083 0301 	eor.w	r3, r3, #1
 80161c8:	b2db      	uxtb	r3, r3
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d006      	beq.n	80161dc <dcd_event_handler+0x2f0>
 80161ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 80161d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	2000      	movs	r0, #0
 80161d8:	4798      	blx	r3
}
 80161da:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80161dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161de:	3304      	adds	r3, #4
 80161e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7fe fee5 	bl	8014fb2 <tu_fifo_write>
 80161e8:	4603      	mov	r3, r0
 80161ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 80161ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80161f2:	f083 0301 	eor.w	r3, r3, #1
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d006      	beq.n	801620a <dcd_event_handler+0x31e>
 80161fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161fe:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 8016200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	2001      	movs	r0, #1
 8016206:	4798      	blx	r3
}
 8016208:	bf00      	nop
  TU_ASSERT(success);
 801620a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801620e:	f083 0301 	eor.w	r3, r3, #1
 8016212:	b2db      	uxtb	r3, r3
 8016214:	2b00      	cmp	r3, #0
 8016216:	d009      	beq.n	801622c <dcd_event_handler+0x340>
 8016218:	4b2e      	ldr	r3, [pc, #184]	; (80162d4 <dcd_event_handler+0x3e8>)
 801621a:	633b      	str	r3, [r7, #48]	; 0x30
 801621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	f003 0301 	and.w	r3, r3, #1
 8016224:	2b00      	cmp	r3, #0
 8016226:	d003      	beq.n	8016230 <dcd_event_handler+0x344>
 8016228:	be00      	bkpt	0x0000
 801622a:	e001      	b.n	8016230 <dcd_event_handler+0x344>
  return success;
 801622c:	bf00      	nop
 801622e:	e045      	b.n	80162bc <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 8016230:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 8016232:	e043      	b.n	80162bc <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8016234:	4b26      	ldr	r3, [pc, #152]	; (80162d0 <dcd_event_handler+0x3e4>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	62fb      	str	r3, [r7, #44]	; 0x2c
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	62bb      	str	r3, [r7, #40]	; 0x28
 801623e:	78fb      	ldrb	r3, [r7, #3]
 8016240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8016244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016248:	f083 0301 	eor.w	r3, r3, #1
 801624c:	b2db      	uxtb	r3, r3
 801624e:	2b00      	cmp	r3, #0
 8016250:	d006      	beq.n	8016260 <dcd_event_handler+0x374>
 8016252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016254:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8016256:	6a3b      	ldr	r3, [r7, #32]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2000      	movs	r0, #0
 801625c:	4798      	blx	r3
}
 801625e:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8016260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016262:	3304      	adds	r3, #4
 8016264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016266:	4618      	mov	r0, r3
 8016268:	f7fe fea3 	bl	8014fb2 <tu_fifo_write>
 801626c:	4603      	mov	r3, r0
 801626e:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 8016270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016274:	f083 0301 	eor.w	r3, r3, #1
 8016278:	b2db      	uxtb	r3, r3
 801627a:	2b00      	cmp	r3, #0
 801627c:	d006      	beq.n	801628c <dcd_event_handler+0x3a0>
 801627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016280:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8016282:	69bb      	ldr	r3, [r7, #24]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	2001      	movs	r0, #1
 8016288:	4798      	blx	r3
}
 801628a:	bf00      	nop
  TU_ASSERT(success);
 801628c:	7ffb      	ldrb	r3, [r7, #31]
 801628e:	f083 0301 	eor.w	r3, r3, #1
 8016292:	b2db      	uxtb	r3, r3
 8016294:	2b00      	cmp	r3, #0
 8016296:	d009      	beq.n	80162ac <dcd_event_handler+0x3c0>
 8016298:	4b0e      	ldr	r3, [pc, #56]	; (80162d4 <dcd_event_handler+0x3e8>)
 801629a:	617b      	str	r3, [r7, #20]
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	f003 0301 	and.w	r3, r3, #1
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d003      	beq.n	80162b0 <dcd_event_handler+0x3c4>
 80162a8:	be00      	bkpt	0x0000
 80162aa:	e001      	b.n	80162b0 <dcd_event_handler+0x3c4>
  return success;
 80162ac:	bf00      	nop
 80162ae:	e006      	b.n	80162be <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 80162b0:	bf00      	nop
    break;
 80162b2:	e004      	b.n	80162be <dcd_event_handler+0x3d2>
    break;
 80162b4:	bf00      	nop
 80162b6:	e002      	b.n	80162be <dcd_event_handler+0x3d2>
    break;
 80162b8:	bf00      	nop
 80162ba:	e000      	b.n	80162be <dcd_event_handler+0x3d2>
    break;
 80162bc:	bf00      	nop
  }
}
 80162be:	bf00      	nop
 80162c0:	37a8      	adds	r7, #168	; 0xa8
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
 80162c6:	bf00      	nop
 80162c8:	24002b5c 	.word	0x24002b5c
 80162cc:	24002b20 	.word	0x24002b20
 80162d0:	24002c20 	.word	0x24002c20
 80162d4:	e000edf0 	.word	0xe000edf0

080162d8 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	4603      	mov	r3, r0
 80162e0:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80162e2:	79fb      	ldrb	r3, [r7, #7]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d005      	beq.n	80162f4 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 80162e8:	4b07      	ldr	r3, [pc, #28]	; (8016308 <usbd_int_set+0x30>)
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	4618      	mov	r0, r3
 80162ee:	f001 f8b3 	bl	8017458 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 80162f2:	e004      	b.n	80162fe <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 80162f4:	4b04      	ldr	r3, [pc, #16]	; (8016308 <usbd_int_set+0x30>)
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	4618      	mov	r0, r3
 80162fa:	f001 f8c5 	bl	8017488 <dcd_int_disable>
}
 80162fe:	bf00      	nop
 8016300:	3708      	adds	r7, #8
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	24000024 	.word	0x24000024

0801630c <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b08a      	sub	sp, #40	; 0x28
 8016310:	af00      	add	r7, sp, #0
 8016312:	6039      	str	r1, [r7, #0]
 8016314:	4611      	mov	r1, r2
 8016316:	461a      	mov	r2, r3
 8016318:	4603      	mov	r3, r0
 801631a:	71fb      	strb	r3, [r7, #7]
 801631c:	460b      	mov	r3, r1
 801631e:	71bb      	strb	r3, [r7, #6]
 8016320:	4613      	mov	r3, r2
 8016322:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8016324:	2300      	movs	r3, #0
 8016326:	627b      	str	r3, [r7, #36]	; 0x24
 8016328:	e04d      	b.n	80163c6 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 801632e:	6a3b      	ldr	r3, [r7, #32]
 8016330:	785b      	ldrb	r3, [r3, #1]
 8016332:	2b05      	cmp	r3, #5
 8016334:	d108      	bne.n	8016348 <usbd_open_edpt_pair+0x3c>
 8016336:	6a3b      	ldr	r3, [r7, #32]
 8016338:	78db      	ldrb	r3, [r3, #3]
 801633a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801633e:	b2db      	uxtb	r3, r3
 8016340:	461a      	mov	r2, r3
 8016342:	797b      	ldrb	r3, [r7, #5]
 8016344:	4293      	cmp	r3, r2
 8016346:	d00a      	beq.n	801635e <usbd_open_edpt_pair+0x52>
 8016348:	4b23      	ldr	r3, [pc, #140]	; (80163d8 <usbd_open_edpt_pair+0xcc>)
 801634a:	61bb      	str	r3, [r7, #24]
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	f003 0301 	and.w	r3, r3, #1
 8016354:	2b00      	cmp	r3, #0
 8016356:	d000      	beq.n	801635a <usbd_open_edpt_pair+0x4e>
 8016358:	be00      	bkpt	0x0000
 801635a:	2300      	movs	r3, #0
 801635c:	e038      	b.n	80163d0 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 801635e:	79fb      	ldrb	r3, [r7, #7]
 8016360:	6a39      	ldr	r1, [r7, #32]
 8016362:	4618      	mov	r0, r3
 8016364:	f000 f83a 	bl	80163dc <usbd_edpt_open>
 8016368:	4603      	mov	r3, r0
 801636a:	f083 0301 	eor.w	r3, r3, #1
 801636e:	b2db      	uxtb	r3, r3
 8016370:	2b00      	cmp	r3, #0
 8016372:	d00a      	beq.n	801638a <usbd_open_edpt_pair+0x7e>
 8016374:	4b18      	ldr	r3, [pc, #96]	; (80163d8 <usbd_open_edpt_pair+0xcc>)
 8016376:	61fb      	str	r3, [r7, #28]
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	f003 0301 	and.w	r3, r3, #1
 8016380:	2b00      	cmp	r3, #0
 8016382:	d000      	beq.n	8016386 <usbd_open_edpt_pair+0x7a>
 8016384:	be00      	bkpt	0x0000
 8016386:	2300      	movs	r3, #0
 8016388:	e022      	b.n	80163d0 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 801638a:	6a3b      	ldr	r3, [r7, #32]
 801638c:	789b      	ldrb	r3, [r3, #2]
 801638e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8016390:	7dfb      	ldrb	r3, [r7, #23]
 8016392:	09db      	lsrs	r3, r3, #7
 8016394:	b2db      	uxtb	r3, r3
 8016396:	2b01      	cmp	r3, #1
 8016398:	d104      	bne.n	80163a4 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 801639a:	6a3b      	ldr	r3, [r7, #32]
 801639c:	789a      	ldrb	r2, [r3, #2]
 801639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163a0:	701a      	strb	r2, [r3, #0]
 80163a2:	e003      	b.n	80163ac <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80163a4:	6a3b      	ldr	r3, [r7, #32]
 80163a6:	789a      	ldrb	r2, [r3, #2]
 80163a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163aa:	701a      	strb	r2, [r3, #0]
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80163b0:	693b      	ldr	r3, [r7, #16]
 80163b2:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	461a      	mov	r2, r3
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80163be:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80163c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c2:	3301      	adds	r3, #1
 80163c4:	627b      	str	r3, [r7, #36]	; 0x24
 80163c6:	79bb      	ldrb	r3, [r7, #6]
 80163c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163ca:	429a      	cmp	r2, r3
 80163cc:	dbad      	blt.n	801632a <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80163ce:	2301      	movs	r3, #1
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	3728      	adds	r7, #40	; 0x28
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	e000edf0 	.word	0xe000edf0

080163dc <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b086      	sub	sp, #24
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	4603      	mov	r3, r0
 80163e4:	6039      	str	r1, [r7, #0]
 80163e6:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80163e8:	4b1b      	ldr	r3, [pc, #108]	; (8016458 <usbd_edpt_open+0x7c>)
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	789b      	ldrb	r3, [r3, #2]
 80163f2:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80163f4:	7bfb      	ldrb	r3, [r7, #15]
 80163f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	2b08      	cmp	r3, #8
 80163fe:	d90a      	bls.n	8016416 <usbd_edpt_open+0x3a>
 8016400:	4b16      	ldr	r3, [pc, #88]	; (801645c <usbd_edpt_open+0x80>)
 8016402:	613b      	str	r3, [r7, #16]
 8016404:	693b      	ldr	r3, [r7, #16]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	f003 0301 	and.w	r3, r3, #1
 801640c:	2b00      	cmp	r3, #0
 801640e:	d000      	beq.n	8016412 <usbd_edpt_open+0x36>
 8016410:	be00      	bkpt	0x0000
 8016412:	2300      	movs	r3, #0
 8016414:	e01c      	b.n	8016450 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8016416:	4b12      	ldr	r3, [pc, #72]	; (8016460 <usbd_edpt_open+0x84>)
 8016418:	789b      	ldrb	r3, [r3, #2]
 801641a:	4619      	mov	r1, r3
 801641c:	6838      	ldr	r0, [r7, #0]
 801641e:	f002 f93d 	bl	801869c <tu_edpt_validate>
 8016422:	4603      	mov	r3, r0
 8016424:	f083 0301 	eor.w	r3, r3, #1
 8016428:	b2db      	uxtb	r3, r3
 801642a:	2b00      	cmp	r3, #0
 801642c:	d00a      	beq.n	8016444 <usbd_edpt_open+0x68>
 801642e:	4b0b      	ldr	r3, [pc, #44]	; (801645c <usbd_edpt_open+0x80>)
 8016430:	617b      	str	r3, [r7, #20]
 8016432:	697b      	ldr	r3, [r7, #20]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	f003 0301 	and.w	r3, r3, #1
 801643a:	2b00      	cmp	r3, #0
 801643c:	d000      	beq.n	8016440 <usbd_edpt_open+0x64>
 801643e:	be00      	bkpt	0x0000
 8016440:	2300      	movs	r3, #0
 8016442:	e005      	b.n	8016450 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8016444:	79fb      	ldrb	r3, [r7, #7]
 8016446:	6839      	ldr	r1, [r7, #0]
 8016448:	4618      	mov	r0, r3
 801644a:	f001 f8a1 	bl	8017590 <dcd_edpt_open>
 801644e:	4603      	mov	r3, r0
}
 8016450:	4618      	mov	r0, r3
 8016452:	3718      	adds	r7, #24
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}
 8016458:	24000024 	.word	0x24000024
 801645c:	e000edf0 	.word	0xe000edf0
 8016460:	24002b20 	.word	0x24002b20

08016464 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b086      	sub	sp, #24
 8016468:	af00      	add	r7, sp, #0
 801646a:	4603      	mov	r3, r0
 801646c:	460a      	mov	r2, r1
 801646e:	71fb      	strb	r3, [r7, #7]
 8016470:	4613      	mov	r3, r2
 8016472:	71bb      	strb	r3, [r7, #6]
 8016474:	79bb      	ldrb	r3, [r7, #6]
 8016476:	73bb      	strb	r3, [r7, #14]
 8016478:	7bbb      	ldrb	r3, [r7, #14]
 801647a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801647e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8016480:	75fb      	strb	r3, [r7, #23]
 8016482:	79bb      	ldrb	r3, [r7, #6]
 8016484:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8016486:	7bfb      	ldrb	r3, [r7, #15]
 8016488:	09db      	lsrs	r3, r3, #7
 801648a:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 801648c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 801648e:	7dfa      	ldrb	r2, [r7, #23]
 8016490:	7dbb      	ldrb	r3, [r7, #22]
 8016492:	0052      	lsls	r2, r2, #1
 8016494:	4413      	add	r3, r2
 8016496:	3320      	adds	r3, #32
 8016498:	4a06      	ldr	r2, [pc, #24]	; (80164b4 <usbd_edpt_claim+0x50>)
 801649a:	4413      	add	r3, r2
 801649c:	3305      	adds	r3, #5
 801649e:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80164a0:	2100      	movs	r1, #0
 80164a2:	6938      	ldr	r0, [r7, #16]
 80164a4:	f002 f896 	bl	80185d4 <tu_edpt_claim>
 80164a8:	4603      	mov	r3, r0
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3718      	adds	r7, #24
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}
 80164b2:	bf00      	nop
 80164b4:	24002b20 	.word	0x24002b20

080164b8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b086      	sub	sp, #24
 80164bc:	af00      	add	r7, sp, #0
 80164be:	4603      	mov	r3, r0
 80164c0:	460a      	mov	r2, r1
 80164c2:	71fb      	strb	r3, [r7, #7]
 80164c4:	4613      	mov	r3, r2
 80164c6:	71bb      	strb	r3, [r7, #6]
 80164c8:	79bb      	ldrb	r3, [r7, #6]
 80164ca:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80164cc:	7bbb      	ldrb	r3, [r7, #14]
 80164ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164d2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 80164d4:	75fb      	strb	r3, [r7, #23]
 80164d6:	79bb      	ldrb	r3, [r7, #6]
 80164d8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80164da:	7bfb      	ldrb	r3, [r7, #15]
 80164dc:	09db      	lsrs	r3, r3, #7
 80164de:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 80164e0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80164e2:	7dfa      	ldrb	r2, [r7, #23]
 80164e4:	7dbb      	ldrb	r3, [r7, #22]
 80164e6:	0052      	lsls	r2, r2, #1
 80164e8:	4413      	add	r3, r2
 80164ea:	3320      	adds	r3, #32
 80164ec:	4a06      	ldr	r2, [pc, #24]	; (8016508 <usbd_edpt_release+0x50>)
 80164ee:	4413      	add	r3, r2
 80164f0:	3305      	adds	r3, #5
 80164f2:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80164f4:	2100      	movs	r1, #0
 80164f6:	6938      	ldr	r0, [r7, #16]
 80164f8:	f002 f8a6 	bl	8018648 <tu_edpt_release>
 80164fc:	4603      	mov	r3, r0
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3718      	adds	r7, #24
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	24002b20 	.word	0x24002b20

0801650c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b086      	sub	sp, #24
 8016510:	af00      	add	r7, sp, #0
 8016512:	603a      	str	r2, [r7, #0]
 8016514:	461a      	mov	r2, r3
 8016516:	4603      	mov	r3, r0
 8016518:	71fb      	strb	r3, [r7, #7]
 801651a:	460b      	mov	r3, r1
 801651c:	71bb      	strb	r3, [r7, #6]
 801651e:	4613      	mov	r3, r2
 8016520:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8016522:	4b32      	ldr	r3, [pc, #200]	; (80165ec <usbd_edpt_xfer+0xe0>)
 8016524:	781b      	ldrb	r3, [r3, #0]
 8016526:	71fb      	strb	r3, [r7, #7]
 8016528:	79bb      	ldrb	r3, [r7, #6]
 801652a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801652c:	7abb      	ldrb	r3, [r7, #10]
 801652e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016532:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016534:	75fb      	strb	r3, [r7, #23]
 8016536:	79bb      	ldrb	r3, [r7, #6]
 8016538:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801653a:	7afb      	ldrb	r3, [r7, #11]
 801653c:	09db      	lsrs	r3, r3, #7
 801653e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8016540:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8016542:	7dfa      	ldrb	r2, [r7, #23]
 8016544:	7dbb      	ldrb	r3, [r7, #22]
 8016546:	492a      	ldr	r1, [pc, #168]	; (80165f0 <usbd_edpt_xfer+0xe4>)
 8016548:	0052      	lsls	r2, r2, #1
 801654a:	440a      	add	r2, r1
 801654c:	4413      	add	r3, r2
 801654e:	3320      	adds	r3, #32
 8016550:	795b      	ldrb	r3, [r3, #5]
 8016552:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016556:	b2db      	uxtb	r3, r3
 8016558:	2b00      	cmp	r3, #0
 801655a:	d00a      	beq.n	8016572 <usbd_edpt_xfer+0x66>
 801655c:	4b25      	ldr	r3, [pc, #148]	; (80165f4 <usbd_edpt_xfer+0xe8>)
 801655e:	60fb      	str	r3, [r7, #12]
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	f003 0301 	and.w	r3, r3, #1
 8016568:	2b00      	cmp	r3, #0
 801656a:	d000      	beq.n	801656e <usbd_edpt_xfer+0x62>
 801656c:	be00      	bkpt	0x0000
 801656e:	2300      	movs	r3, #0
 8016570:	e038      	b.n	80165e4 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8016572:	7dfa      	ldrb	r2, [r7, #23]
 8016574:	7dbb      	ldrb	r3, [r7, #22]
 8016576:	491e      	ldr	r1, [pc, #120]	; (80165f0 <usbd_edpt_xfer+0xe4>)
 8016578:	0052      	lsls	r2, r2, #1
 801657a:	440a      	add	r2, r1
 801657c:	4413      	add	r3, r2
 801657e:	f103 0220 	add.w	r2, r3, #32
 8016582:	7953      	ldrb	r3, [r2, #5]
 8016584:	f043 0301 	orr.w	r3, r3, #1
 8016588:	7153      	strb	r3, [r2, #5]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 801658a:	88bb      	ldrh	r3, [r7, #4]
 801658c:	79b9      	ldrb	r1, [r7, #6]
 801658e:	79f8      	ldrb	r0, [r7, #7]
 8016590:	683a      	ldr	r2, [r7, #0]
 8016592:	f001 f987 	bl	80178a4 <dcd_edpt_xfer>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <usbd_edpt_xfer+0x94>
  {
    return true;
 801659c:	2301      	movs	r3, #1
 801659e:	e021      	b.n	80165e4 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 80165a0:	7dfa      	ldrb	r2, [r7, #23]
 80165a2:	7dbb      	ldrb	r3, [r7, #22]
 80165a4:	4912      	ldr	r1, [pc, #72]	; (80165f0 <usbd_edpt_xfer+0xe4>)
 80165a6:	0052      	lsls	r2, r2, #1
 80165a8:	440a      	add	r2, r1
 80165aa:	4413      	add	r3, r2
 80165ac:	f103 0220 	add.w	r2, r3, #32
 80165b0:	7953      	ldrb	r3, [r2, #5]
 80165b2:	f36f 0300 	bfc	r3, #0, #1
 80165b6:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80165b8:	7dfa      	ldrb	r2, [r7, #23]
 80165ba:	7dbb      	ldrb	r3, [r7, #22]
 80165bc:	490c      	ldr	r1, [pc, #48]	; (80165f0 <usbd_edpt_xfer+0xe4>)
 80165be:	0052      	lsls	r2, r2, #1
 80165c0:	440a      	add	r2, r1
 80165c2:	4413      	add	r3, r2
 80165c4:	f103 0220 	add.w	r2, r3, #32
 80165c8:	7953      	ldrb	r3, [r2, #5]
 80165ca:	f36f 0382 	bfc	r3, #2, #1
 80165ce:	7153      	strb	r3, [r2, #5]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 80165d0:	4b08      	ldr	r3, [pc, #32]	; (80165f4 <usbd_edpt_xfer+0xe8>)
 80165d2:	613b      	str	r3, [r7, #16]
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	f003 0301 	and.w	r3, r3, #1
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d000      	beq.n	80165e2 <usbd_edpt_xfer+0xd6>
 80165e0:	be00      	bkpt	0x0000
    return false;
 80165e2:	2300      	movs	r3, #0
  }
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	3718      	adds	r7, #24
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	24000024 	.word	0x24000024
 80165f0:	24002b20 	.word	0x24002b20
 80165f4:	e000edf0 	.word	0xe000edf0

080165f8 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 80165f8:	b480      	push	{r7}
 80165fa:	b085      	sub	sp, #20
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	4603      	mov	r3, r0
 8016600:	460a      	mov	r2, r1
 8016602:	71fb      	strb	r3, [r7, #7]
 8016604:	4613      	mov	r3, r2
 8016606:	71bb      	strb	r3, [r7, #6]
 8016608:	79bb      	ldrb	r3, [r7, #6]
 801660a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801660c:	7b3b      	ldrb	r3, [r7, #12]
 801660e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016612:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016614:	73fb      	strb	r3, [r7, #15]
 8016616:	79bb      	ldrb	r3, [r7, #6]
 8016618:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801661a:	7b7b      	ldrb	r3, [r7, #13]
 801661c:	09db      	lsrs	r3, r3, #7
 801661e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8016620:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8016622:	7bfa      	ldrb	r2, [r7, #15]
 8016624:	7bbb      	ldrb	r3, [r7, #14]
 8016626:	490a      	ldr	r1, [pc, #40]	; (8016650 <usbd_edpt_busy+0x58>)
 8016628:	0052      	lsls	r2, r2, #1
 801662a:	440a      	add	r2, r1
 801662c:	4413      	add	r3, r2
 801662e:	3320      	adds	r3, #32
 8016630:	795b      	ldrb	r3, [r3, #5]
 8016632:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016636:	b2db      	uxtb	r3, r3
 8016638:	2b00      	cmp	r3, #0
 801663a:	bf14      	ite	ne
 801663c:	2301      	movne	r3, #1
 801663e:	2300      	moveq	r3, #0
 8016640:	b2db      	uxtb	r3, r3
}
 8016642:	4618      	mov	r0, r3
 8016644:	3714      	adds	r7, #20
 8016646:	46bd      	mov	sp, r7
 8016648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664c:	4770      	bx	lr
 801664e:	bf00      	nop
 8016650:	24002b20 	.word	0x24002b20

08016654 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b084      	sub	sp, #16
 8016658:	af00      	add	r7, sp, #0
 801665a:	4603      	mov	r3, r0
 801665c:	460a      	mov	r2, r1
 801665e:	71fb      	strb	r3, [r7, #7]
 8016660:	4613      	mov	r3, r2
 8016662:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8016664:	4b1f      	ldr	r3, [pc, #124]	; (80166e4 <usbd_edpt_stall+0x90>)
 8016666:	781b      	ldrb	r3, [r3, #0]
 8016668:	71fb      	strb	r3, [r7, #7]
 801666a:	79bb      	ldrb	r3, [r7, #6]
 801666c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801666e:	7b3b      	ldrb	r3, [r7, #12]
 8016670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016674:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016676:	73fb      	strb	r3, [r7, #15]
 8016678:	79bb      	ldrb	r3, [r7, #6]
 801667a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801667c:	7b7b      	ldrb	r3, [r7, #13]
 801667e:	09db      	lsrs	r3, r3, #7
 8016680:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8016682:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8016684:	7bfa      	ldrb	r2, [r7, #15]
 8016686:	7bbb      	ldrb	r3, [r7, #14]
 8016688:	4917      	ldr	r1, [pc, #92]	; (80166e8 <usbd_edpt_stall+0x94>)
 801668a:	0052      	lsls	r2, r2, #1
 801668c:	440a      	add	r2, r1
 801668e:	4413      	add	r3, r2
 8016690:	3320      	adds	r3, #32
 8016692:	795b      	ldrb	r3, [r3, #5]
 8016694:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016698:	b2db      	uxtb	r3, r3
 801669a:	2b00      	cmp	r3, #0
 801669c:	d11d      	bne.n	80166da <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 801669e:	79ba      	ldrb	r2, [r7, #6]
 80166a0:	79fb      	ldrb	r3, [r7, #7]
 80166a2:	4611      	mov	r1, r2
 80166a4:	4618      	mov	r0, r3
 80166a6:	f001 fa51 	bl	8017b4c <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 80166aa:	7bfa      	ldrb	r2, [r7, #15]
 80166ac:	7bbb      	ldrb	r3, [r7, #14]
 80166ae:	490e      	ldr	r1, [pc, #56]	; (80166e8 <usbd_edpt_stall+0x94>)
 80166b0:	0052      	lsls	r2, r2, #1
 80166b2:	440a      	add	r2, r1
 80166b4:	4413      	add	r3, r2
 80166b6:	f103 0220 	add.w	r2, r3, #32
 80166ba:	7953      	ldrb	r3, [r2, #5]
 80166bc:	f043 0302 	orr.w	r3, r3, #2
 80166c0:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 80166c2:	7bfa      	ldrb	r2, [r7, #15]
 80166c4:	7bbb      	ldrb	r3, [r7, #14]
 80166c6:	4908      	ldr	r1, [pc, #32]	; (80166e8 <usbd_edpt_stall+0x94>)
 80166c8:	0052      	lsls	r2, r2, #1
 80166ca:	440a      	add	r2, r1
 80166cc:	4413      	add	r3, r2
 80166ce:	f103 0220 	add.w	r2, r3, #32
 80166d2:	7953      	ldrb	r3, [r2, #5]
 80166d4:	f043 0301 	orr.w	r3, r3, #1
 80166d8:	7153      	strb	r3, [r2, #5]
  }
}
 80166da:	bf00      	nop
 80166dc:	3710      	adds	r7, #16
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop
 80166e4:	24000024 	.word	0x24000024
 80166e8:	24002b20 	.word	0x24002b20

080166ec <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b084      	sub	sp, #16
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	4603      	mov	r3, r0
 80166f4:	460a      	mov	r2, r1
 80166f6:	71fb      	strb	r3, [r7, #7]
 80166f8:	4613      	mov	r3, r2
 80166fa:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80166fc:	4b1f      	ldr	r3, [pc, #124]	; (801677c <usbd_edpt_clear_stall+0x90>)
 80166fe:	781b      	ldrb	r3, [r3, #0]
 8016700:	71fb      	strb	r3, [r7, #7]
 8016702:	79bb      	ldrb	r3, [r7, #6]
 8016704:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8016706:	7b3b      	ldrb	r3, [r7, #12]
 8016708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801670c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 801670e:	73fb      	strb	r3, [r7, #15]
 8016710:	79bb      	ldrb	r3, [r7, #6]
 8016712:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8016714:	7b7b      	ldrb	r3, [r7, #13]
 8016716:	09db      	lsrs	r3, r3, #7
 8016718:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 801671a:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 801671c:	7bfa      	ldrb	r2, [r7, #15]
 801671e:	7bbb      	ldrb	r3, [r7, #14]
 8016720:	4917      	ldr	r1, [pc, #92]	; (8016780 <usbd_edpt_clear_stall+0x94>)
 8016722:	0052      	lsls	r2, r2, #1
 8016724:	440a      	add	r2, r1
 8016726:	4413      	add	r3, r2
 8016728:	3320      	adds	r3, #32
 801672a:	795b      	ldrb	r3, [r3, #5]
 801672c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016730:	b2db      	uxtb	r3, r3
 8016732:	2b00      	cmp	r3, #0
 8016734:	d01d      	beq.n	8016772 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8016736:	79ba      	ldrb	r2, [r7, #6]
 8016738:	79fb      	ldrb	r3, [r7, #7]
 801673a:	4611      	mov	r1, r2
 801673c:	4618      	mov	r0, r3
 801673e:	f001 fa17 	bl	8017b70 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8016742:	7bfa      	ldrb	r2, [r7, #15]
 8016744:	7bbb      	ldrb	r3, [r7, #14]
 8016746:	490e      	ldr	r1, [pc, #56]	; (8016780 <usbd_edpt_clear_stall+0x94>)
 8016748:	0052      	lsls	r2, r2, #1
 801674a:	440a      	add	r2, r1
 801674c:	4413      	add	r3, r2
 801674e:	f103 0220 	add.w	r2, r3, #32
 8016752:	7953      	ldrb	r3, [r2, #5]
 8016754:	f36f 0341 	bfc	r3, #1, #1
 8016758:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 801675a:	7bfa      	ldrb	r2, [r7, #15]
 801675c:	7bbb      	ldrb	r3, [r7, #14]
 801675e:	4908      	ldr	r1, [pc, #32]	; (8016780 <usbd_edpt_clear_stall+0x94>)
 8016760:	0052      	lsls	r2, r2, #1
 8016762:	440a      	add	r2, r1
 8016764:	4413      	add	r3, r2
 8016766:	f103 0220 	add.w	r2, r3, #32
 801676a:	7953      	ldrb	r3, [r2, #5]
 801676c:	f36f 0300 	bfc	r3, #0, #1
 8016770:	7153      	strb	r3, [r2, #5]
  }
}
 8016772:	bf00      	nop
 8016774:	3710      	adds	r7, #16
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
 801677a:	bf00      	nop
 801677c:	24000024 	.word	0x24000024
 8016780:	24002b20 	.word	0x24002b20

08016784 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8016784:	b480      	push	{r7}
 8016786:	b085      	sub	sp, #20
 8016788:	af00      	add	r7, sp, #0
 801678a:	4603      	mov	r3, r0
 801678c:	460a      	mov	r2, r1
 801678e:	71fb      	strb	r3, [r7, #7]
 8016790:	4613      	mov	r3, r2
 8016792:	71bb      	strb	r3, [r7, #6]
 8016794:	79bb      	ldrb	r3, [r7, #6]
 8016796:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8016798:	7b3b      	ldrb	r3, [r7, #12]
 801679a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801679e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80167a0:	73fb      	strb	r3, [r7, #15]
 80167a2:	79bb      	ldrb	r3, [r7, #6]
 80167a4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80167a6:	7b7b      	ldrb	r3, [r7, #13]
 80167a8:	09db      	lsrs	r3, r3, #7
 80167aa:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80167ac:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80167ae:	7bfa      	ldrb	r2, [r7, #15]
 80167b0:	7bbb      	ldrb	r3, [r7, #14]
 80167b2:	490a      	ldr	r1, [pc, #40]	; (80167dc <usbd_edpt_stalled+0x58>)
 80167b4:	0052      	lsls	r2, r2, #1
 80167b6:	440a      	add	r2, r1
 80167b8:	4413      	add	r3, r2
 80167ba:	3320      	adds	r3, #32
 80167bc:	795b      	ldrb	r3, [r3, #5]
 80167be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	bf14      	ite	ne
 80167c8:	2301      	movne	r3, #1
 80167ca:	2300      	moveq	r3, #0
 80167cc:	b2db      	uxtb	r3, r3
}
 80167ce:	4618      	mov	r0, r3
 80167d0:	3714      	adds	r7, #20
 80167d2:	46bd      	mov	sp, r7
 80167d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d8:	4770      	bx	lr
 80167da:	bf00      	nop
 80167dc:	24002b20 	.word	0x24002b20

080167e0 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b084      	sub	sp, #16
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	4603      	mov	r3, r0
 80167e8:	6039      	str	r1, [r7, #0]
 80167ea:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	781b      	ldrb	r3, [r3, #0]
 80167f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80167f4:	b2db      	uxtb	r3, r3
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d001      	beq.n	80167fe <_status_stage_xact+0x1e>
 80167fa:	2300      	movs	r3, #0
 80167fc:	e000      	b.n	8016800 <_status_stage_xact+0x20>
 80167fe:	2380      	movs	r3, #128	; 0x80
 8016800:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8016802:	7bf9      	ldrb	r1, [r7, #15]
 8016804:	79f8      	ldrb	r0, [r7, #7]
 8016806:	2300      	movs	r3, #0
 8016808:	2200      	movs	r2, #0
 801680a:	f7ff fe7f 	bl	801650c <usbd_edpt_xfer>
 801680e:	4603      	mov	r3, r0
}
 8016810:	4618      	mov	r0, r3
 8016812:	3710      	adds	r7, #16
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}

08016818 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b082      	sub	sp, #8
 801681c:	af00      	add	r7, sp, #0
 801681e:	4603      	mov	r3, r0
 8016820:	6039      	str	r1, [r7, #0]
 8016822:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8016824:	4b0b      	ldr	r3, [pc, #44]	; (8016854 <tud_control_status+0x3c>)
 8016826:	683a      	ldr	r2, [r7, #0]
 8016828:	6810      	ldr	r0, [r2, #0]
 801682a:	6851      	ldr	r1, [r2, #4]
 801682c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 801682e:	4b09      	ldr	r3, [pc, #36]	; (8016854 <tud_control_status+0x3c>)
 8016830:	2200      	movs	r2, #0
 8016832:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8016834:	4b07      	ldr	r3, [pc, #28]	; (8016854 <tud_control_status+0x3c>)
 8016836:	2200      	movs	r2, #0
 8016838:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 801683a:	4b06      	ldr	r3, [pc, #24]	; (8016854 <tud_control_status+0x3c>)
 801683c:	2200      	movs	r2, #0
 801683e:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8016840:	79fb      	ldrb	r3, [r7, #7]
 8016842:	6839      	ldr	r1, [r7, #0]
 8016844:	4618      	mov	r0, r3
 8016846:	f7ff ffcb 	bl	80167e0 <_status_stage_xact>
 801684a:	4603      	mov	r3, r0
}
 801684c:	4618      	mov	r0, r3
 801684e:	3708      	adds	r7, #8
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}
 8016854:	24002c24 	.word	0x24002c24

08016858 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b088      	sub	sp, #32
 801685c:	af00      	add	r7, sp, #0
 801685e:	4603      	mov	r3, r0
 8016860:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8016862:	4b24      	ldr	r3, [pc, #144]	; (80168f4 <_data_stage_xact+0x9c>)
 8016864:	899a      	ldrh	r2, [r3, #12]
 8016866:	4b23      	ldr	r3, [pc, #140]	; (80168f4 <_data_stage_xact+0x9c>)
 8016868:	89db      	ldrh	r3, [r3, #14]
 801686a:	1ad3      	subs	r3, r2, r3
 801686c:	b29b      	uxth	r3, r3
 801686e:	837b      	strh	r3, [r7, #26]
 8016870:	2340      	movs	r3, #64	; 0x40
 8016872:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8016874:	8b7a      	ldrh	r2, [r7, #26]
 8016876:	8b3b      	ldrh	r3, [r7, #24]
 8016878:	4293      	cmp	r3, r2
 801687a:	bf28      	it	cs
 801687c:	4613      	movcs	r3, r2
 801687e:	b29b      	uxth	r3, r3
 8016880:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8016882:	2300      	movs	r3, #0
 8016884:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8016886:	4b1b      	ldr	r3, [pc, #108]	; (80168f4 <_data_stage_xact+0x9c>)
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801688e:	b2db      	uxtb	r3, r3
 8016890:	2b00      	cmp	r3, #0
 8016892:	d01e      	beq.n	80168d2 <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 8016894:	2380      	movs	r3, #128	; 0x80
 8016896:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 8016898:	8bbb      	ldrh	r3, [r7, #28]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d019      	beq.n	80168d2 <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 801689e:	4b15      	ldr	r3, [pc, #84]	; (80168f4 <_data_stage_xact+0x9c>)
 80168a0:	689a      	ldr	r2, [r3, #8]
 80168a2:	8bbb      	ldrh	r3, [r7, #28]
 80168a4:	4914      	ldr	r1, [pc, #80]	; (80168f8 <_data_stage_xact+0xa0>)
 80168a6:	6179      	str	r1, [r7, #20]
 80168a8:	2140      	movs	r1, #64	; 0x40
 80168aa:	6139      	str	r1, [r7, #16]
 80168ac:	60fa      	str	r2, [r7, #12]
 80168ae:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 80168b0:	693a      	ldr	r2, [r7, #16]
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d202      	bcs.n	80168be <_data_stage_xact+0x66>
    return -1;
 80168b8:	f04f 33ff 	mov.w	r3, #4294967295
 80168bc:	e005      	b.n	80168ca <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 80168be:	68ba      	ldr	r2, [r7, #8]
 80168c0:	68f9      	ldr	r1, [r7, #12]
 80168c2:	6978      	ldr	r0, [r7, #20]
 80168c4:	f002 f932 	bl	8018b2c <memcpy>
  return 0;
 80168c8:	2300      	movs	r3, #0
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d001      	beq.n	80168d2 <_data_stage_xact+0x7a>
 80168ce:	2300      	movs	r3, #0
 80168d0:	e00b      	b.n	80168ea <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80168d2:	8bbb      	ldrh	r3, [r7, #28]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d001      	beq.n	80168dc <_data_stage_xact+0x84>
 80168d8:	4a07      	ldr	r2, [pc, #28]	; (80168f8 <_data_stage_xact+0xa0>)
 80168da:	e000      	b.n	80168de <_data_stage_xact+0x86>
 80168dc:	2200      	movs	r2, #0
 80168de:	8bbb      	ldrh	r3, [r7, #28]
 80168e0:	7ff9      	ldrb	r1, [r7, #31]
 80168e2:	79f8      	ldrb	r0, [r7, #7]
 80168e4:	f7ff fe12 	bl	801650c <usbd_edpt_xfer>
 80168e8:	4603      	mov	r3, r0
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3720      	adds	r7, #32
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	24002c24 	.word	0x24002c24
 80168f8:	24002c38 	.word	0x24002c38

080168fc <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b088      	sub	sp, #32
 8016900:	af00      	add	r7, sp, #0
 8016902:	60b9      	str	r1, [r7, #8]
 8016904:	607a      	str	r2, [r7, #4]
 8016906:	461a      	mov	r2, r3
 8016908:	4603      	mov	r3, r0
 801690a:	73fb      	strb	r3, [r7, #15]
 801690c:	4613      	mov	r3, r2
 801690e:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8016910:	4b30      	ldr	r3, [pc, #192]	; (80169d4 <tud_control_xfer+0xd8>)
 8016912:	68ba      	ldr	r2, [r7, #8]
 8016914:	6810      	ldr	r0, [r2, #0]
 8016916:	6851      	ldr	r1, [r2, #4]
 8016918:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 801691a:	4a2e      	ldr	r2, [pc, #184]	; (80169d4 <tud_control_xfer+0xd8>)
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8016920:	4b2c      	ldr	r3, [pc, #176]	; (80169d4 <tud_control_xfer+0xd8>)
 8016922:	2200      	movs	r2, #0
 8016924:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8016926:	68bb      	ldr	r3, [r7, #8]
 8016928:	88db      	ldrh	r3, [r3, #6]
 801692a:	b29a      	uxth	r2, r3
 801692c:	89bb      	ldrh	r3, [r7, #12]
 801692e:	827b      	strh	r3, [r7, #18]
 8016930:	4613      	mov	r3, r2
 8016932:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8016934:	8a7a      	ldrh	r2, [r7, #18]
 8016936:	8a3b      	ldrh	r3, [r7, #16]
 8016938:	4293      	cmp	r3, r2
 801693a:	bf28      	it	cs
 801693c:	4613      	movcs	r3, r2
 801693e:	b29a      	uxth	r2, r3
 8016940:	4b24      	ldr	r3, [pc, #144]	; (80169d4 <tud_control_xfer+0xd8>)
 8016942:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	88db      	ldrh	r3, [r3, #6]
 8016948:	b29b      	uxth	r3, r3
 801694a:	2b00      	cmp	r3, #0
 801694c:	d026      	beq.n	801699c <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 801694e:	4b21      	ldr	r3, [pc, #132]	; (80169d4 <tud_control_xfer+0xd8>)
 8016950:	899b      	ldrh	r3, [r3, #12]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d00d      	beq.n	8016972 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d10a      	bne.n	8016972 <tud_control_xfer+0x76>
 801695c:	4b1e      	ldr	r3, [pc, #120]	; (80169d8 <tud_control_xfer+0xdc>)
 801695e:	61bb      	str	r3, [r7, #24]
 8016960:	69bb      	ldr	r3, [r7, #24]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	f003 0301 	and.w	r3, r3, #1
 8016968:	2b00      	cmp	r3, #0
 801696a:	d000      	beq.n	801696e <tud_control_xfer+0x72>
 801696c:	be00      	bkpt	0x0000
 801696e:	2300      	movs	r3, #0
 8016970:	e02b      	b.n	80169ca <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8016972:	7bfb      	ldrb	r3, [r7, #15]
 8016974:	4618      	mov	r0, r3
 8016976:	f7ff ff6f 	bl	8016858 <_data_stage_xact>
 801697a:	4603      	mov	r3, r0
 801697c:	f083 0301 	eor.w	r3, r3, #1
 8016980:	b2db      	uxtb	r3, r3
 8016982:	2b00      	cmp	r3, #0
 8016984:	d020      	beq.n	80169c8 <tud_control_xfer+0xcc>
 8016986:	4b14      	ldr	r3, [pc, #80]	; (80169d8 <tud_control_xfer+0xdc>)
 8016988:	617b      	str	r3, [r7, #20]
 801698a:	697b      	ldr	r3, [r7, #20]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	f003 0301 	and.w	r3, r3, #1
 8016992:	2b00      	cmp	r3, #0
 8016994:	d000      	beq.n	8016998 <tud_control_xfer+0x9c>
 8016996:	be00      	bkpt	0x0000
 8016998:	2300      	movs	r3, #0
 801699a:	e016      	b.n	80169ca <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 801699c:	7bfb      	ldrb	r3, [r7, #15]
 801699e:	68b9      	ldr	r1, [r7, #8]
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7ff ff1d 	bl	80167e0 <_status_stage_xact>
 80169a6:	4603      	mov	r3, r0
 80169a8:	f083 0301 	eor.w	r3, r3, #1
 80169ac:	b2db      	uxtb	r3, r3
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d00a      	beq.n	80169c8 <tud_control_xfer+0xcc>
 80169b2:	4b09      	ldr	r3, [pc, #36]	; (80169d8 <tud_control_xfer+0xdc>)
 80169b4:	61fb      	str	r3, [r7, #28]
 80169b6:	69fb      	ldr	r3, [r7, #28]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	f003 0301 	and.w	r3, r3, #1
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d000      	beq.n	80169c4 <tud_control_xfer+0xc8>
 80169c2:	be00      	bkpt	0x0000
 80169c4:	2300      	movs	r3, #0
 80169c6:	e000      	b.n	80169ca <tud_control_xfer+0xce>
  }

  return true;
 80169c8:	2301      	movs	r3, #1
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3720      	adds	r7, #32
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	bf00      	nop
 80169d4:	24002c24 	.word	0x24002c24
 80169d8:	e000edf0 	.word	0xe000edf0

080169dc <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 80169e0:	2214      	movs	r2, #20
 80169e2:	2100      	movs	r1, #0
 80169e4:	4802      	ldr	r0, [pc, #8]	; (80169f0 <usbd_control_reset+0x14>)
 80169e6:	f002 f868 	bl	8018aba <memset>
}
 80169ea:	bf00      	nop
 80169ec:	bd80      	pop	{r7, pc}
 80169ee:	bf00      	nop
 80169f0:	24002c24 	.word	0x24002c24

080169f4 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 80169f4:	b480      	push	{r7}
 80169f6:	b083      	sub	sp, #12
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80169fc:	4a04      	ldr	r2, [pc, #16]	; (8016a10 <usbd_control_set_complete_callback+0x1c>)
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	6113      	str	r3, [r2, #16]
}
 8016a02:	bf00      	nop
 8016a04:	370c      	adds	r7, #12
 8016a06:	46bd      	mov	sp, r7
 8016a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0c:	4770      	bx	lr
 8016a0e:	bf00      	nop
 8016a10:	24002c24 	.word	0x24002c24

08016a14 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8016a14:	b480      	push	{r7}
 8016a16:	b083      	sub	sp, #12
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8016a1c:	4b09      	ldr	r3, [pc, #36]	; (8016a44 <usbd_control_set_request+0x30>)
 8016a1e:	687a      	ldr	r2, [r7, #4]
 8016a20:	6810      	ldr	r0, [r2, #0]
 8016a22:	6851      	ldr	r1, [r2, #4]
 8016a24:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8016a26:	4b07      	ldr	r3, [pc, #28]	; (8016a44 <usbd_control_set_request+0x30>)
 8016a28:	2200      	movs	r2, #0
 8016a2a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8016a2c:	4b05      	ldr	r3, [pc, #20]	; (8016a44 <usbd_control_set_request+0x30>)
 8016a2e:	2200      	movs	r2, #0
 8016a30:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8016a32:	4b04      	ldr	r3, [pc, #16]	; (8016a44 <usbd_control_set_request+0x30>)
 8016a34:	2200      	movs	r2, #0
 8016a36:	819a      	strh	r2, [r3, #12]
}
 8016a38:	bf00      	nop
 8016a3a:	370c      	adds	r7, #12
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a42:	4770      	bx	lr
 8016a44:	24002c24 	.word	0x24002c24

08016a48 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b088      	sub	sp, #32
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	603b      	str	r3, [r7, #0]
 8016a50:	4603      	mov	r3, r0
 8016a52:	71fb      	strb	r3, [r7, #7]
 8016a54:	460b      	mov	r3, r1
 8016a56:	71bb      	strb	r3, [r7, #6]
 8016a58:	4613      	mov	r3, r2
 8016a5a:	717b      	strb	r3, [r7, #5]
 8016a5c:	79bb      	ldrb	r3, [r7, #6]
 8016a5e:	73fb      	strb	r3, [r7, #15]
 8016a60:	7bfb      	ldrb	r3, [r7, #15]
 8016a62:	09db      	lsrs	r3, r3, #7
 8016a64:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8016a66:	4a50      	ldr	r2, [pc, #320]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016a68:	7812      	ldrb	r2, [r2, #0]
 8016a6a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8016a6e:	b2d2      	uxtb	r2, r2
 8016a70:	4293      	cmp	r3, r2
 8016a72:	d021      	beq.n	8016ab8 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d00a      	beq.n	8016a90 <usbd_control_xfer_cb+0x48>
 8016a7a:	4b4c      	ldr	r3, [pc, #304]	; (8016bac <usbd_control_xfer_cb+0x164>)
 8016a7c:	613b      	str	r3, [r7, #16]
 8016a7e:	693b      	ldr	r3, [r7, #16]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	f003 0301 	and.w	r3, r3, #1
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d000      	beq.n	8016a8c <usbd_control_xfer_cb+0x44>
 8016a8a:	be00      	bkpt	0x0000
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	e087      	b.n	8016ba0 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8016a90:	4b47      	ldr	r3, [pc, #284]	; (8016bb0 <usbd_control_xfer_cb+0x168>)
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d004      	beq.n	8016aa0 <usbd_control_xfer_cb+0x58>
 8016a96:	79fb      	ldrb	r3, [r7, #7]
 8016a98:	4943      	ldr	r1, [pc, #268]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8016aa0:	4b41      	ldr	r3, [pc, #260]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016aa2:	691b      	ldr	r3, [r3, #16]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d005      	beq.n	8016ab4 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8016aa8:	4b3f      	ldr	r3, [pc, #252]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016aaa:	691b      	ldr	r3, [r3, #16]
 8016aac:	79f8      	ldrb	r0, [r7, #7]
 8016aae:	4a3e      	ldr	r2, [pc, #248]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016ab0:	2103      	movs	r1, #3
 8016ab2:	4798      	blx	r3
    }

    return true;
 8016ab4:	2301      	movs	r3, #1
 8016ab6:	e073      	b.n	8016ba0 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8016ab8:	4b3b      	ldr	r3, [pc, #236]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016aba:	781b      	ldrb	r3, [r3, #0]
 8016abc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016ac0:	b2db      	uxtb	r3, r3
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d10c      	bne.n	8016ae0 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8016ac6:	4b38      	ldr	r3, [pc, #224]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016ac8:	689b      	ldr	r3, [r3, #8]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d101      	bne.n	8016ad2 <usbd_control_xfer_cb+0x8a>
 8016ace:	2300      	movs	r3, #0
 8016ad0:	e066      	b.n	8016ba0 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8016ad2:	4b35      	ldr	r3, [pc, #212]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016ad4:	689b      	ldr	r3, [r3, #8]
 8016ad6:	683a      	ldr	r2, [r7, #0]
 8016ad8:	4936      	ldr	r1, [pc, #216]	; (8016bb4 <usbd_control_xfer_cb+0x16c>)
 8016ada:	4618      	mov	r0, r3
 8016adc:	f002 f826 	bl	8018b2c <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8016ae0:	4b31      	ldr	r3, [pc, #196]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016ae2:	89da      	ldrh	r2, [r3, #14]
 8016ae4:	683b      	ldr	r3, [r7, #0]
 8016ae6:	b29b      	uxth	r3, r3
 8016ae8:	4413      	add	r3, r2
 8016aea:	b29a      	uxth	r2, r3
 8016aec:	4b2e      	ldr	r3, [pc, #184]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016aee:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8016af0:	4b2d      	ldr	r3, [pc, #180]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016af2:	689a      	ldr	r2, [r3, #8]
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	4413      	add	r3, r2
 8016af8:	4a2b      	ldr	r2, [pc, #172]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016afa:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8016afc:	4b2a      	ldr	r3, [pc, #168]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016afe:	88da      	ldrh	r2, [r3, #6]
 8016b00:	4b29      	ldr	r3, [pc, #164]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016b02:	89db      	ldrh	r3, [r3, #14]
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d002      	beq.n	8016b0e <usbd_control_xfer_cb+0xc6>
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	2b3f      	cmp	r3, #63	; 0x3f
 8016b0c:	d831      	bhi.n	8016b72 <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8016b0e:	2301      	movs	r3, #1
 8016b10:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8016b12:	4b25      	ldr	r3, [pc, #148]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016b14:	691b      	ldr	r3, [r3, #16]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d007      	beq.n	8016b2a <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8016b1a:	4b23      	ldr	r3, [pc, #140]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016b1c:	691b      	ldr	r3, [r3, #16]
 8016b1e:	79f8      	ldrb	r0, [r7, #7]
 8016b20:	4a21      	ldr	r2, [pc, #132]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016b22:	2102      	movs	r1, #2
 8016b24:	4798      	blx	r3
 8016b26:	4603      	mov	r3, r0
 8016b28:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8016b2a:	7ffb      	ldrb	r3, [r7, #31]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d015      	beq.n	8016b5c <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8016b30:	79fb      	ldrb	r3, [r7, #7]
 8016b32:	491d      	ldr	r1, [pc, #116]	; (8016ba8 <usbd_control_xfer_cb+0x160>)
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7ff fe53 	bl	80167e0 <_status_stage_xact>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	f083 0301 	eor.w	r3, r3, #1
 8016b40:	b2db      	uxtb	r3, r3
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d02a      	beq.n	8016b9c <usbd_control_xfer_cb+0x154>
 8016b46:	4b19      	ldr	r3, [pc, #100]	; (8016bac <usbd_control_xfer_cb+0x164>)
 8016b48:	617b      	str	r3, [r7, #20]
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	f003 0301 	and.w	r3, r3, #1
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d000      	beq.n	8016b58 <usbd_control_xfer_cb+0x110>
 8016b56:	be00      	bkpt	0x0000
 8016b58:	2300      	movs	r3, #0
 8016b5a:	e021      	b.n	8016ba0 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8016b5c:	79fb      	ldrb	r3, [r7, #7]
 8016b5e:	2100      	movs	r1, #0
 8016b60:	4618      	mov	r0, r3
 8016b62:	f000 fff3 	bl	8017b4c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8016b66:	79fb      	ldrb	r3, [r7, #7]
 8016b68:	2180      	movs	r1, #128	; 0x80
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f000 ffee 	bl	8017b4c <dcd_edpt_stall>
  {
 8016b70:	e014      	b.n	8016b9c <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8016b72:	79fb      	ldrb	r3, [r7, #7]
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7ff fe6f 	bl	8016858 <_data_stage_xact>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	f083 0301 	eor.w	r3, r3, #1
 8016b80:	b2db      	uxtb	r3, r3
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d00b      	beq.n	8016b9e <usbd_control_xfer_cb+0x156>
 8016b86:	4b09      	ldr	r3, [pc, #36]	; (8016bac <usbd_control_xfer_cb+0x164>)
 8016b88:	61bb      	str	r3, [r7, #24]
 8016b8a:	69bb      	ldr	r3, [r7, #24]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	f003 0301 	and.w	r3, r3, #1
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d000      	beq.n	8016b98 <usbd_control_xfer_cb+0x150>
 8016b96:	be00      	bkpt	0x0000
 8016b98:	2300      	movs	r3, #0
 8016b9a:	e001      	b.n	8016ba0 <usbd_control_xfer_cb+0x158>
  {
 8016b9c:	bf00      	nop
  }

  return true;
 8016b9e:	2301      	movs	r3, #1
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3720      	adds	r7, #32
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}
 8016ba8:	24002c24 	.word	0x24002c24
 8016bac:	e000edf0 	.word	0xe000edf0
 8016bb0:	00000000 	.word	0x00000000
 8016bb4:	24002c38 	.word	0x24002c38

08016bb8 <dcd_event_sof>:

static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b086      	sub	sp, #24
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	6039      	str	r1, [r7, #0]
 8016bc2:	71fb      	strb	r3, [r7, #7]
 8016bc4:	4613      	mov	r3, r2
 8016bc6:	71bb      	strb	r3, [r7, #6]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8016bc8:	f107 030c 	add.w	r3, r7, #12
 8016bcc:	2200      	movs	r2, #0
 8016bce:	601a      	str	r2, [r3, #0]
 8016bd0:	605a      	str	r2, [r3, #4]
 8016bd2:	609a      	str	r2, [r3, #8]
 8016bd4:	79fb      	ldrb	r3, [r7, #7]
 8016bd6:	733b      	strb	r3, [r7, #12]
 8016bd8:	2303      	movs	r3, #3
 8016bda:	737b      	strb	r3, [r7, #13]
  event.sof.frame_count = frame_count;
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	613b      	str	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8016be0:	79ba      	ldrb	r2, [r7, #6]
 8016be2:	f107 030c 	add.w	r3, r7, #12
 8016be6:	4611      	mov	r1, r2
 8016be8:	4618      	mov	r0, r3
 8016bea:	f7ff f97f 	bl	8015eec <dcd_event_handler>
}
 8016bee:	bf00      	nop
 8016bf0:	3718      	adds	r7, #24
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
	...

08016bf8 <__NVIC_EnableIRQ>:
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	b083      	sub	sp, #12
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	4603      	mov	r3, r0
 8016c00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	db0b      	blt.n	8016c22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016c0a:	88fb      	ldrh	r3, [r7, #6]
 8016c0c:	f003 021f 	and.w	r2, r3, #31
 8016c10:	4907      	ldr	r1, [pc, #28]	; (8016c30 <__NVIC_EnableIRQ+0x38>)
 8016c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c16:	095b      	lsrs	r3, r3, #5
 8016c18:	2001      	movs	r0, #1
 8016c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8016c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016c22:	bf00      	nop
 8016c24:	370c      	adds	r7, #12
 8016c26:	46bd      	mov	sp, r7
 8016c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2c:	4770      	bx	lr
 8016c2e:	bf00      	nop
 8016c30:	e000e100 	.word	0xe000e100

08016c34 <__NVIC_DisableIRQ>:
{
 8016c34:	b480      	push	{r7}
 8016c36:	b083      	sub	sp, #12
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	db12      	blt.n	8016c6c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016c46:	88fb      	ldrh	r3, [r7, #6]
 8016c48:	f003 021f 	and.w	r2, r3, #31
 8016c4c:	490a      	ldr	r1, [pc, #40]	; (8016c78 <__NVIC_DisableIRQ+0x44>)
 8016c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c52:	095b      	lsrs	r3, r3, #5
 8016c54:	2001      	movs	r0, #1
 8016c56:	fa00 f202 	lsl.w	r2, r0, r2
 8016c5a:	3320      	adds	r3, #32
 8016c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016c60:	f3bf 8f4f 	dsb	sy
}
 8016c64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016c66:	f3bf 8f6f 	isb	sy
}
 8016c6a:	bf00      	nop
}
 8016c6c:	bf00      	nop
 8016c6e:	370c      	adds	r7, #12
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr
 8016c78:	e000e100 	.word	0xe000e100

08016c7c <dwc2_phy_init>:
  while ( count-- ) __NOP();
}

// MCU specific PHY init, called BEFORE core reset
static inline void dwc2_phy_init(dwc2_regs_t * dwc2, uint8_t hs_phy_type)
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b083      	sub	sp, #12
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
 8016c84:	460b      	mov	r3, r1
 8016c86:	70fb      	strb	r3, [r7, #3]
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
 8016c88:	78fb      	ldrb	r3, [r7, #3]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d106      	bne.n	8016c9c <dwc2_phy_init+0x20>
  {
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	639a      	str	r2, [r3, #56]	; 0x38
      // Enable PLL internal PHY
      USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
#endif
    }
  }
}
 8016c9a:	e005      	b.n	8016ca8 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8016ca8:	bf00      	nop
 8016caa:	370c      	adds	r7, #12
 8016cac:	46bd      	mov	sp, r7
 8016cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb2:	4770      	bx	lr

08016cb4 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t * dwc2, uint8_t hs_phy_type)
{
 8016cb4:	b480      	push	{r7}
 8016cb6:	b085      	sub	sp, #20
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
 8016cbc:	460b      	mov	r3, r1
 8016cbe:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
 8016cc0:	78fb      	ldrb	r3, [r7, #3]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d152      	bne.n	8016d6c <dwc2_phy_update+0xb8>
  {
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if ( SystemCoreClock >= 32000000u )
 8016cc6:	4b2c      	ldr	r3, [pc, #176]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	4a2c      	ldr	r2, [pc, #176]	; (8016d7c <dwc2_phy_update+0xc8>)
 8016ccc:	4293      	cmp	r3, r2
 8016cce:	d302      	bcc.n	8016cd6 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8016cd0:	2306      	movs	r3, #6
 8016cd2:	60fb      	str	r3, [r7, #12]
 8016cd4:	e041      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 27500000u )
 8016cd6:	4b28      	ldr	r3, [pc, #160]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	4a29      	ldr	r2, [pc, #164]	; (8016d80 <dwc2_phy_update+0xcc>)
 8016cdc:	4293      	cmp	r3, r2
 8016cde:	d902      	bls.n	8016ce6 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8016ce0:	2307      	movs	r3, #7
 8016ce2:	60fb      	str	r3, [r7, #12]
 8016ce4:	e039      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 24000000u )
 8016ce6:	4b24      	ldr	r3, [pc, #144]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	4a26      	ldr	r2, [pc, #152]	; (8016d84 <dwc2_phy_update+0xd0>)
 8016cec:	4293      	cmp	r3, r2
 8016cee:	d302      	bcc.n	8016cf6 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8016cf0:	2308      	movs	r3, #8
 8016cf2:	60fb      	str	r3, [r7, #12]
 8016cf4:	e031      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 21800000u )
 8016cf6:	4b20      	ldr	r3, [pc, #128]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	4a23      	ldr	r2, [pc, #140]	; (8016d88 <dwc2_phy_update+0xd4>)
 8016cfc:	4293      	cmp	r3, r2
 8016cfe:	d902      	bls.n	8016d06 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8016d00:	2309      	movs	r3, #9
 8016d02:	60fb      	str	r3, [r7, #12]
 8016d04:	e029      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 20000000u )
 8016d06:	4b1c      	ldr	r3, [pc, #112]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	4a20      	ldr	r2, [pc, #128]	; (8016d8c <dwc2_phy_update+0xd8>)
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	d902      	bls.n	8016d16 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8016d10:	230a      	movs	r3, #10
 8016d12:	60fb      	str	r3, [r7, #12]
 8016d14:	e021      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 18500000u )
 8016d16:	4b18      	ldr	r3, [pc, #96]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4a1d      	ldr	r2, [pc, #116]	; (8016d90 <dwc2_phy_update+0xdc>)
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	d902      	bls.n	8016d26 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8016d20:	230b      	movs	r3, #11
 8016d22:	60fb      	str	r3, [r7, #12]
 8016d24:	e019      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 17200000u )
 8016d26:	4b14      	ldr	r3, [pc, #80]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	4a1a      	ldr	r2, [pc, #104]	; (8016d94 <dwc2_phy_update+0xe0>)
 8016d2c:	4293      	cmp	r3, r2
 8016d2e:	d302      	bcc.n	8016d36 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8016d30:	230c      	movs	r3, #12
 8016d32:	60fb      	str	r3, [r7, #12]
 8016d34:	e011      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 16000000u )
 8016d36:	4b10      	ldr	r3, [pc, #64]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	4a17      	ldr	r2, [pc, #92]	; (8016d98 <dwc2_phy_update+0xe4>)
 8016d3c:	4293      	cmp	r3, r2
 8016d3e:	d302      	bcc.n	8016d46 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8016d40:	230d      	movs	r3, #13
 8016d42:	60fb      	str	r3, [r7, #12]
 8016d44:	e009      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 15000000u )
 8016d46:	4b0c      	ldr	r3, [pc, #48]	; (8016d78 <dwc2_phy_update+0xc4>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	4a14      	ldr	r2, [pc, #80]	; (8016d9c <dwc2_phy_update+0xe8>)
 8016d4c:	4293      	cmp	r3, r2
 8016d4e:	d302      	bcc.n	8016d56 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8016d50:	230e      	movs	r3, #14
 8016d52:	60fb      	str	r3, [r7, #12]
 8016d54:	e001      	b.n	8016d5a <dwc2_phy_update+0xa6>
    else
      turnaround = 0xFu;
 8016d56:	230f      	movs	r3, #15
 8016d58:	60fb      	str	r3, [r7, #12]

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	68db      	ldr	r3, [r3, #12]
 8016d5e:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	029b      	lsls	r3, r3, #10
 8016d66:	431a      	orrs	r2, r3
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	60da      	str	r2, [r3, #12]
  }
}
 8016d6c:	bf00      	nop
 8016d6e:	3714      	adds	r7, #20
 8016d70:	46bd      	mov	sp, r7
 8016d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d76:	4770      	bx	lr
 8016d78:	2400001c 	.word	0x2400001c
 8016d7c:	01e84800 	.word	0x01e84800
 8016d80:	01a39ddf 	.word	0x01a39ddf
 8016d84:	016e3600 	.word	0x016e3600
 8016d88:	014ca43f 	.word	0x014ca43f
 8016d8c:	01312cff 	.word	0x01312cff
 8016d90:	011a499f 	.word	0x011a499f
 8016d94:	01067380 	.word	0x01067380
 8016d98:	00f42400 	.word	0x00f42400
 8016d9c:	00e4e1c0 	.word	0x00e4e1c0

08016da0 <calc_grxfsiz>:
// SOF enabling flag - required for SOF to not get disabled in ISR when SOF was enabled by
static bool _sof_en;

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_grxfsiz(uint16_t max_ep_size, uint8_t ep_count)
{
 8016da0:	b480      	push	{r7}
 8016da2:	b083      	sub	sp, #12
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	4603      	mov	r3, r0
 8016da8:	460a      	mov	r2, r1
 8016daa:	80fb      	strh	r3, [r7, #6]
 8016dac:	4613      	mov	r3, r2
 8016dae:	717b      	strb	r3, [r7, #5]
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8016db0:	88fb      	ldrh	r3, [r7, #6]
 8016db2:	089b      	lsrs	r3, r3, #2
 8016db4:	b29a      	uxth	r2, r3
 8016db6:	797b      	ldrb	r3, [r7, #5]
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	4413      	add	r3, r2
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	005b      	lsls	r3, r3, #1
 8016dc0:	b29b      	uxth	r3, r3
 8016dc2:	330f      	adds	r3, #15
 8016dc4:	b29b      	uxth	r3, r3
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	370c      	adds	r7, #12
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd0:	4770      	bx	lr
	...

08016dd4 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b086      	sub	sp, #24
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	4603      	mov	r3, r0
 8016ddc:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8016dde:	79fb      	ldrb	r3, [r7, #7]
 8016de0:	4a1b      	ldr	r2, [pc, #108]	; (8016e50 <update_grxfsiz+0x7c>)
 8016de2:	011b      	lsls	r3, r3, #4
 8016de4:	4413      	add	r3, r2
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8016dea:	79fb      	ldrb	r3, [r7, #7]
 8016dec:	4a18      	ldr	r2, [pc, #96]	; (8016e50 <update_grxfsiz+0x7c>)
 8016dee:	011b      	lsls	r3, r3, #4
 8016df0:	4413      	add	r3, r2
 8016df2:	3308      	adds	r3, #8
 8016df4:	781b      	ldrb	r3, [r3, #0]
 8016df6:	73fb      	strb	r3, [r7, #15]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	757b      	strb	r3, [r7, #21]
 8016e00:	e013      	b.n	8016e2a <update_grxfsiz+0x56>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8016e02:	7d7b      	ldrb	r3, [r7, #21]
 8016e04:	4a13      	ldr	r2, [pc, #76]	; (8016e54 <update_grxfsiz+0x80>)
 8016e06:	015b      	lsls	r3, r3, #5
 8016e08:	4413      	add	r3, r2
 8016e0a:	330a      	adds	r3, #10
 8016e0c:	881a      	ldrh	r2, [r3, #0]
 8016e0e:	8afb      	ldrh	r3, [r7, #22]
 8016e10:	81bb      	strh	r3, [r7, #12]
 8016e12:	4613      	mov	r3, r2
 8016e14:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8016e16:	89ba      	ldrh	r2, [r7, #12]
 8016e18:	897b      	ldrh	r3, [r7, #10]
 8016e1a:	4293      	cmp	r3, r2
 8016e1c:	bf38      	it	cc
 8016e1e:	4613      	movcc	r3, r2
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 8016e24:	7d7b      	ldrb	r3, [r7, #21]
 8016e26:	3301      	adds	r3, #1
 8016e28:	757b      	strb	r3, [r7, #21]
 8016e2a:	7d7a      	ldrb	r2, [r7, #21]
 8016e2c:	7bfb      	ldrb	r3, [r7, #15]
 8016e2e:	429a      	cmp	r2, r3
 8016e30:	d3e7      	bcc.n	8016e02 <update_grxfsiz+0x2e>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 8016e32:	7bfa      	ldrb	r2, [r7, #15]
 8016e34:	8afb      	ldrh	r3, [r7, #22]
 8016e36:	4611      	mov	r1, r2
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f7ff ffb1 	bl	8016da0 <calc_grxfsiz>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	461a      	mov	r2, r3
 8016e42:	693b      	ldr	r3, [r7, #16]
 8016e44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016e46:	bf00      	nop
 8016e48:	3718      	adds	r7, #24
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}
 8016e4e:	bf00      	nop
 8016e50:	0801c3c4 	.word	0x0801c3c4
 8016e54:	24002c80 	.word	0x24002c80

08016e58 <bus_reset>:

// Start of Bus Reset
static void bus_reset(uint8_t rhport)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b086      	sub	sp, #24
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	4603      	mov	r3, r0
 8016e60:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8016e62:	79fb      	ldrb	r3, [r7, #7]
 8016e64:	4a3f      	ldr	r2, [pc, #252]	; (8016f64 <bus_reset+0x10c>)
 8016e66:	011b      	lsls	r3, r3, #4
 8016e68:	4413      	add	r3, r2
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8016e6e:	79fb      	ldrb	r3, [r7, #7]
 8016e70:	4a3c      	ldr	r2, [pc, #240]	; (8016f64 <bus_reset+0x10c>)
 8016e72:	011b      	lsls	r3, r3, #4
 8016e74:	4413      	add	r3, r2
 8016e76:	3308      	adds	r3, #8
 8016e78:	781b      	ldrb	r3, [r3, #0]
 8016e7a:	73fb      	strb	r3, [r7, #15]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8016e7c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8016e80:	2100      	movs	r1, #0
 8016e82:	4839      	ldr	r0, [pc, #228]	; (8016f68 <bus_reset+0x110>)
 8016e84:	f001 fe19 	bl	8018aba <memset>
  _out_ep_closed = false;
 8016e88:	4b38      	ldr	r3, [pc, #224]	; (8016f6c <bus_reset+0x114>)
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	701a      	strb	r2, [r3, #0]

  _sof_en = false;
 8016e8e:	4b38      	ldr	r3, [pc, #224]	; (8016f70 <bus_reset+0x118>)
 8016e90:	2200      	movs	r2, #0
 8016e92:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8016e9a:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for ( uint8_t n = 0; n < ep_count; n++ )
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	75fb      	strb	r3, [r7, #23]
 8016ea8:	e010      	b.n	8016ecc <bus_reset+0x74>
  {
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8016eaa:	7dfb      	ldrb	r3, [r7, #23]
 8016eac:	693a      	ldr	r2, [r7, #16]
 8016eae:	3358      	adds	r3, #88	; 0x58
 8016eb0:	015b      	lsls	r3, r3, #5
 8016eb2:	4413      	add	r3, r2
 8016eb4:	681a      	ldr	r2, [r3, #0]
 8016eb6:	7dfb      	ldrb	r3, [r7, #23]
 8016eb8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8016ebc:	6939      	ldr	r1, [r7, #16]
 8016ebe:	3358      	adds	r3, #88	; 0x58
 8016ec0:	015b      	lsls	r3, r3, #5
 8016ec2:	440b      	add	r3, r1
 8016ec4:	601a      	str	r2, [r3, #0]
  for ( uint8_t n = 0; n < ep_count; n++ )
 8016ec6:	7dfb      	ldrb	r3, [r7, #23]
 8016ec8:	3301      	adds	r3, #1
 8016eca:	75fb      	strb	r3, [r7, #23]
 8016ecc:	7dfa      	ldrb	r2, [r7, #23]
 8016ece:	7bfb      	ldrb	r3, [r7, #15]
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d3ea      	bcc.n	8016eaa <bus_reset+0x52>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8016ed4:	693b      	ldr	r3, [r7, #16]
 8016ed6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8016eda:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk  = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	2209      	movs	r2, #9
 8016ee2:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk  = DIEPMSK_TOM   | DIEPMSK_XFRCM;
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	2209      	movs	r2, #9
 8016eea:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  // EP0 out max is 64
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8016eee:	7bfb      	ldrb	r3, [r7, #15]
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	2040      	movs	r0, #64	; 0x40
 8016ef4:	f7ff ff54 	bl	8016da0 <calc_grxfsiz>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	461a      	mov	r2, r3
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	625a      	str	r2, [r3, #36]	; 0x24

  // Setup the control endpoint 0
  _allocated_fifo_words_tx = 16;
 8016f00:	4b1c      	ldr	r3, [pc, #112]	; (8016f74 <bus_reset+0x11c>)
 8016f02:	2210      	movs	r2, #16
 8016f04:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8016f06:	79fb      	ldrb	r3, [r7, #7]
 8016f08:	4a16      	ldr	r2, [pc, #88]	; (8016f64 <bus_reset+0x10c>)
 8016f0a:	011b      	lsls	r3, r3, #4
 8016f0c:	4413      	add	r3, r2
 8016f0e:	330c      	adds	r3, #12
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	089b      	lsrs	r3, r3, #2
 8016f14:	4a17      	ldr	r2, [pc, #92]	; (8016f74 <bus_reset+0x11c>)
 8016f16:	8812      	ldrh	r2, [r2, #0]
 8016f18:	1a9b      	subs	r3, r3, r2
 8016f1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8016f22:	693b      	ldr	r3, [r7, #16]
 8016f24:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8016f28:	f023 0203 	bic.w	r2, r3, #3
 8016f2c:	693b      	ldr	r3, [r7, #16]
 8016f2e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8016f32:	4b0d      	ldr	r3, [pc, #52]	; (8016f68 <bus_reset+0x110>)
 8016f34:	2240      	movs	r2, #64	; 0x40
 8016f36:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN ].max_size = 64;
 8016f38:	4b0b      	ldr	r3, [pc, #44]	; (8016f68 <bus_reset+0x110>)
 8016f3a:	2240      	movs	r2, #64	; 0x40
 8016f3c:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8016f3e:	693b      	ldr	r3, [r7, #16]
 8016f40:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 8016f44:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8016f48:	693b      	ldr	r3, [r7, #16]
 8016f4a:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8016f4e:	693b      	ldr	r3, [r7, #16]
 8016f50:	699b      	ldr	r3, [r3, #24]
 8016f52:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8016f56:	693b      	ldr	r3, [r7, #16]
 8016f58:	619a      	str	r2, [r3, #24]
}
 8016f5a:	bf00      	nop
 8016f5c:	3718      	adds	r7, #24
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bd80      	pop	{r7, pc}
 8016f62:	bf00      	nop
 8016f64:	0801c3c4 	.word	0x0801c3c4
 8016f68:	24002c80 	.word	0x24002c80
 8016f6c:	24002da6 	.word	0x24002da6
 8016f70:	24002da7 	.word	0x24002da7
 8016f74:	24002da4 	.word	0x24002da4

08016f78 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8016f78:	b490      	push	{r4, r7}
 8016f7a:	b08a      	sub	sp, #40	; 0x28
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	4604      	mov	r4, r0
 8016f80:	4608      	mov	r0, r1
 8016f82:	4611      	mov	r1, r2
 8016f84:	461a      	mov	r2, r3
 8016f86:	4623      	mov	r3, r4
 8016f88:	71fb      	strb	r3, [r7, #7]
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	71bb      	strb	r3, [r7, #6]
 8016f8e:	460b      	mov	r3, r1
 8016f90:	717b      	strb	r3, [r7, #5]
 8016f92:	4613      	mov	r3, r2
 8016f94:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8016f96:	79fb      	ldrb	r3, [r7, #7]
 8016f98:	4a71      	ldr	r2, [pc, #452]	; (8017160 <edpt_schedule_packets+0x1e8>)
 8016f9a:	011b      	lsls	r3, r3, #4
 8016f9c:	4413      	add	r3, r2
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if ( epnum == 0 )
 8016fa2:	79bb      	ldrb	r3, [r7, #6]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d121      	bne.n	8016fec <edpt_schedule_packets+0x74>
  {
    xfer_ctl_t *const xfer = XFER_CTL_BASE(epnum, dir);
 8016fa8:	79ba      	ldrb	r2, [r7, #6]
 8016faa:	797b      	ldrb	r3, [r7, #5]
 8016fac:	0052      	lsls	r2, r2, #1
 8016fae:	4413      	add	r3, r2
 8016fb0:	011b      	lsls	r3, r3, #4
 8016fb2:	4a6c      	ldr	r2, [pc, #432]	; (8017164 <edpt_schedule_packets+0x1ec>)
 8016fb4:	4413      	add	r3, r2
 8016fb6:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8016fb8:	797b      	ldrb	r3, [r7, #5]
 8016fba:	4a6b      	ldr	r2, [pc, #428]	; (8017168 <edpt_schedule_packets+0x1f0>)
 8016fbc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8016fc0:	6a3b      	ldr	r3, [r7, #32]
 8016fc2:	895b      	ldrh	r3, [r3, #10]
 8016fc4:	81fa      	strh	r2, [r7, #14]
 8016fc6:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8016fc8:	89fa      	ldrh	r2, [r7, #14]
 8016fca:	89bb      	ldrh	r3, [r7, #12]
 8016fcc:	4293      	cmp	r3, r2
 8016fce:	bf28      	it	cs
 8016fd0:	4613      	movcs	r3, r2
 8016fd2:	b29b      	uxth	r3, r3
 8016fd4:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8016fd6:	797b      	ldrb	r3, [r7, #5]
 8016fd8:	4a63      	ldr	r2, [pc, #396]	; (8017168 <edpt_schedule_packets+0x1f0>)
 8016fda:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8016fde:	797b      	ldrb	r3, [r7, #5]
 8016fe0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016fe2:	1a8a      	subs	r2, r1, r2
 8016fe4:	b291      	uxth	r1, r2
 8016fe6:	4a60      	ldr	r2, [pc, #384]	; (8017168 <edpt_schedule_packets+0x1f0>)
 8016fe8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if ( dir == TUSB_DIR_IN )
 8016fec:	797b      	ldrb	r3, [r7, #5]
 8016fee:	2b01      	cmp	r3, #1
 8016ff0:	d156      	bne.n	80170a0 <edpt_schedule_packets+0x128>
  {
    dwc2_epin_t* epin = dwc2->epin;
 8016ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ff8:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8016ffa:	887b      	ldrh	r3, [r7, #2]
 8016ffc:	04db      	lsls	r3, r3, #19
 8016ffe:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 8017000:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8017002:	79bb      	ldrb	r3, [r7, #6]
 8017004:	015b      	lsls	r3, r3, #5
 8017006:	6979      	ldr	r1, [r7, #20]
 8017008:	440b      	add	r3, r1
 801700a:	4302      	orrs	r2, r0
 801700c:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 801700e:	79bb      	ldrb	r3, [r7, #6]
 8017010:	015b      	lsls	r3, r3, #5
 8017012:	697a      	ldr	r2, [r7, #20]
 8017014:	4413      	add	r3, r2
 8017016:	681a      	ldr	r2, [r3, #0]
 8017018:	79bb      	ldrb	r3, [r7, #6]
 801701a:	015b      	lsls	r3, r3, #5
 801701c:	6979      	ldr	r1, [r7, #20]
 801701e:	440b      	add	r3, r1
 8017020:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8017024:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8017026:	79bb      	ldrb	r3, [r7, #6]
 8017028:	015b      	lsls	r3, r3, #5
 801702a:	697a      	ldr	r2, [r7, #20]
 801702c:	4413      	add	r3, r2
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8017034:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017038:	d123      	bne.n	8017082 <edpt_schedule_packets+0x10a>
 801703a:	79ba      	ldrb	r2, [r7, #6]
 801703c:	797b      	ldrb	r3, [r7, #5]
 801703e:	4949      	ldr	r1, [pc, #292]	; (8017164 <edpt_schedule_packets+0x1ec>)
 8017040:	0052      	lsls	r2, r2, #1
 8017042:	4413      	add	r3, r2
 8017044:	011b      	lsls	r3, r3, #4
 8017046:	440b      	add	r3, r1
 8017048:	330c      	adds	r3, #12
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	2b01      	cmp	r3, #1
 801704e:	d118      	bne.n	8017082 <edpt_schedule_packets+0x10a>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8017050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017052:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8017056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801705a:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 801705c:	79bb      	ldrb	r3, [r7, #6]
 801705e:	015b      	lsls	r3, r3, #5
 8017060:	697a      	ldr	r2, [r7, #20]
 8017062:	4413      	add	r3, r2
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	693b      	ldr	r3, [r7, #16]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d002      	beq.n	8017072 <edpt_schedule_packets+0xfa>
 801706c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8017070:	e001      	b.n	8017076 <edpt_schedule_packets+0xfe>
 8017072:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8017076:	79bb      	ldrb	r3, [r7, #6]
 8017078:	015b      	lsls	r3, r3, #5
 801707a:	6978      	ldr	r0, [r7, #20]
 801707c:	4403      	add	r3, r0
 801707e:	430a      	orrs	r2, r1
 8017080:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if ( total_bytes != 0 )
 8017082:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017084:	2b00      	cmp	r3, #0
 8017086:	d065      	beq.n	8017154 <edpt_schedule_packets+0x1dc>
    {
      dwc2->diepempmsk |= (1 << epnum);
 8017088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 801708e:	79ba      	ldrb	r2, [r7, #6]
 8017090:	2101      	movs	r1, #1
 8017092:	fa01 f202 	lsl.w	r2, r1, r2
 8017096:	431a      	orrs	r2, r3
 8017098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709a:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 801709e:	e059      	b.n	8017154 <edpt_schedule_packets+0x1dc>
    dwc2_epout_t* epout = dwc2->epout;
 80170a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80170a6:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 80170a8:	79bb      	ldrb	r3, [r7, #6]
 80170aa:	015b      	lsls	r3, r3, #5
 80170ac:	69fa      	ldr	r2, [r7, #28]
 80170ae:	4413      	add	r3, r2
 80170b0:	691a      	ldr	r2, [r3, #16]
 80170b2:	79bb      	ldrb	r3, [r7, #6]
 80170b4:	015b      	lsls	r3, r3, #5
 80170b6:	69f9      	ldr	r1, [r7, #28]
 80170b8:	440b      	add	r3, r1
 80170ba:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 80170be:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 80170c0:	79bb      	ldrb	r3, [r7, #6]
 80170c2:	015b      	lsls	r3, r3, #5
 80170c4:	69fa      	ldr	r2, [r7, #28]
 80170c6:	4413      	add	r3, r2
 80170c8:	6919      	ldr	r1, [r3, #16]
 80170ca:	887b      	ldrh	r3, [r7, #2]
 80170cc:	04db      	lsls	r3, r3, #19
 80170ce:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 80170d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 80170d2:	431a      	orrs	r2, r3
 80170d4:	79bb      	ldrb	r3, [r7, #6]
 80170d6:	015b      	lsls	r3, r3, #5
 80170d8:	69f8      	ldr	r0, [r7, #28]
 80170da:	4403      	add	r3, r0
 80170dc:	430a      	orrs	r2, r1
 80170de:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80170e0:	79bb      	ldrb	r3, [r7, #6]
 80170e2:	015b      	lsls	r3, r3, #5
 80170e4:	69fa      	ldr	r2, [r7, #28]
 80170e6:	4413      	add	r3, r2
 80170e8:	681a      	ldr	r2, [r3, #0]
 80170ea:	79bb      	ldrb	r3, [r7, #6]
 80170ec:	015b      	lsls	r3, r3, #5
 80170ee:	69f9      	ldr	r1, [r7, #28]
 80170f0:	440b      	add	r3, r1
 80170f2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80170f6:	601a      	str	r2, [r3, #0]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 80170f8:	79bb      	ldrb	r3, [r7, #6]
 80170fa:	015b      	lsls	r3, r3, #5
 80170fc:	69fa      	ldr	r2, [r7, #28]
 80170fe:	4413      	add	r3, r2
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8017106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801710a:	d123      	bne.n	8017154 <edpt_schedule_packets+0x1dc>
         XFER_CTL_BASE(epnum, dir)->interval == 1 )
 801710c:	79ba      	ldrb	r2, [r7, #6]
 801710e:	797b      	ldrb	r3, [r7, #5]
 8017110:	4914      	ldr	r1, [pc, #80]	; (8017164 <edpt_schedule_packets+0x1ec>)
 8017112:	0052      	lsls	r2, r2, #1
 8017114:	4413      	add	r3, r2
 8017116:	011b      	lsls	r3, r3, #4
 8017118:	440b      	add	r3, r1
 801711a:	330c      	adds	r3, #12
 801711c:	781b      	ldrb	r3, [r3, #0]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 801711e:	2b01      	cmp	r3, #1
 8017120:	d118      	bne.n	8017154 <edpt_schedule_packets+0x1dc>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8017122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017124:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8017128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801712c:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 801712e:	79bb      	ldrb	r3, [r7, #6]
 8017130:	015b      	lsls	r3, r3, #5
 8017132:	69fa      	ldr	r2, [r7, #28]
 8017134:	4413      	add	r3, r2
 8017136:	681a      	ldr	r2, [r3, #0]
 8017138:	69bb      	ldr	r3, [r7, #24]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d002      	beq.n	8017144 <edpt_schedule_packets+0x1cc>
 801713e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8017142:	e001      	b.n	8017148 <edpt_schedule_packets+0x1d0>
 8017144:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8017148:	79bb      	ldrb	r3, [r7, #6]
 801714a:	015b      	lsls	r3, r3, #5
 801714c:	69f8      	ldr	r0, [r7, #28]
 801714e:	4403      	add	r3, r0
 8017150:	430a      	orrs	r2, r1
 8017152:	601a      	str	r2, [r3, #0]
}
 8017154:	bf00      	nop
 8017156:	3728      	adds	r7, #40	; 0x28
 8017158:	46bd      	mov	sp, r7
 801715a:	bc90      	pop	{r4, r7}
 801715c:	4770      	bx	lr
 801715e:	bf00      	nop
 8017160:	0801c3c4 	.word	0x0801c3c4
 8017164:	24002c80 	.word	0x24002c80
 8017168:	24002da0 	.word	0x24002da0

0801716c <reset_core>:
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dma_dynamic               );
}
#endif

static void reset_core(dwc2_regs_t * dwc2)
{
 801716c:	b480      	push	{r7}
 801716e:	b083      	sub	sp, #12
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
	// wait for AHB master IDLE
	while ( !(dwc2->grstctl & GRSTCTL_AHBIDL) ) { }
 8017174:	bf00      	nop
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	691b      	ldr	r3, [r3, #16]
 801717a:	2b00      	cmp	r3, #0
 801717c:	dafb      	bge.n	8017176 <reset_core+0xa>

	// reset core
	dwc2->grstctl |= GRSTCTL_CSRST;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	691b      	ldr	r3, [r3, #16]
 8017182:	f043 0201 	orr.w	r2, r3, #1
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	611a      	str	r2, [r3, #16]

	// wait for reset bit is cleared
	// TODO version 4.20a should wait for RESET DONE mask
	while (dwc2->grstctl & GRSTCTL_CSRST) { }
 801718a:	bf00      	nop
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	691b      	ldr	r3, [r3, #16]
 8017190:	f003 0301 	and.w	r3, r3, #1
 8017194:	2b00      	cmp	r3, #0
 8017196:	d1f9      	bne.n	801718c <reset_core+0x20>

	// wait for AHB master IDLE
//	while ( !(dwc2->grstctl & GRSTCTL_AHBIDL) ) { }

	// wait for device mode ?
}
 8017198:	bf00      	nop
 801719a:	bf00      	nop
 801719c:	370c      	adds	r7, #12
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr

080171a6 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t * dwc2)
{
 80171a6:	b480      	push	{r7}
 80171a8:	b083      	sub	sp, #12
 80171aa:	af00      	add	r7, sp, #0
 80171ac:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
#if TU_CHECK_MCU(OPT_MCU_ESP32S2, OPT_MCU_ESP32S3)
  return false;
#else
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 80171ae:	2300      	movs	r3, #0
#endif
}
 80171b0:	4618      	mov	r0, r3
 80171b2:	370c      	adds	r7, #12
 80171b4:	46bd      	mov	sp, r7
 80171b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ba:	4770      	bx	lr

080171bc <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t * dwc2)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b082      	sub	sp, #8
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 80171d0:	2100      	movs	r1, #0
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f7ff fd52 	bl	8016c7c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f7ff ffc7 	bl	801716c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	68db      	ldr	r3, [r3, #12]
 80171e2:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80171e6:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 80171ee:	2100      	movs	r1, #0
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f7ff fd5f 	bl	8016cb4 <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80171fc:	f043 0203 	orr.w	r2, r3, #3
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8017206:	bf00      	nop
 8017208:	3708      	adds	r7, #8
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}

0801720e <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t * dwc2)
{
 801720e:	b580      	push	{r7, lr}
 8017210:	b084      	sub	sp, #16
 8017212:	af00      	add	r7, sp, #0
 8017214:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	68db      	ldr	r3, [r3, #12]
 801721a:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017222:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801722a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801722e:	b2db      	uxtb	r3, r3
 8017230:	2b80      	cmp	r3, #128	; 0x80
 8017232:	d110      	bne.n	8017256 <phy_hs_init+0x48>
  {
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	f043 0310 	orr.w	r3, r3, #16
 801723a:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8017242:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801724a:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	f423 2320 	bic.w	r3, r3, #655360	; 0xa0000
 8017252:	60fb      	str	r3, [r7, #12]
 8017254:	e00f      	b.n	8017276 <phy_hs_init+0x68>
  }else
  {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	f023 0318 	bic.w	r3, r3, #24
 801725c:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017268:	b2db      	uxtb	r3, r3
 801726a:	2b00      	cmp	r3, #0
 801726c:	d003      	beq.n	8017276 <phy_hs_init+0x68>
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	f043 0308 	orr.w	r3, r3, #8
 8017274:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	68fa      	ldr	r2, [r7, #12]
 801727a:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017282:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017286:	b2db      	uxtb	r3, r3
 8017288:	4619      	mov	r1, r3
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f7ff fcf6 	bl	8016c7c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f7ff ff6b 	bl	801716c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 801729c:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80172a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80172a8:	b2db      	uxtb	r3, r3
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d002      	beq.n	80172b4 <phy_hs_init+0xa6>
 80172ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80172b2:	e001      	b.n	80172b8 <phy_hs_init+0xaa>
 80172b4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80172b8:	68fa      	ldr	r2, [r7, #12]
 80172ba:	4313      	orrs	r3, r2
 80172bc:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	68fa      	ldr	r2, [r7, #12]
 80172c2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80172ca:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	4619      	mov	r1, r3
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f7ff fcee 	bl	8016cb4 <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80172de:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	f023 0303 	bic.w	r3, r3, #3
 80172e6:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80172ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80172f2:	b2db      	uxtb	r3, r3
 80172f4:	2b80      	cmp	r3, #128	; 0x80
 80172f6:	d103      	bne.n	8017300 <phy_hs_init+0xf2>
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80172fe:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	68ba      	ldr	r2, [r7, #8]
 8017304:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8017308:	bf00      	nop
 801730a:	3710      	adds	r7, #16
 801730c:	46bd      	mov	sp, r7
 801730e:	bd80      	pop	{r7, pc}

08017310 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t * dwc2)
{
 8017310:	b480      	push	{r7}
 8017312:	b085      	sub	sp, #20
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
#endif

  // For some reasons: GD32VF103 snpsid and all hwcfg register are always zero (skip it)
  (void) dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801731c:	4b10      	ldr	r3, [pc, #64]	; (8017360 <check_dwc2+0x50>)
 801731e:	4013      	ands	r3, r2
 8017320:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	4a0f      	ldr	r2, [pc, #60]	; (8017364 <check_dwc2+0x54>)
 8017326:	4293      	cmp	r3, r2
 8017328:	d012      	beq.n	8017350 <check_dwc2+0x40>
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	4a0e      	ldr	r2, [pc, #56]	; (8017368 <check_dwc2+0x58>)
 801732e:	4293      	cmp	r3, r2
 8017330:	d00e      	beq.n	8017350 <check_dwc2+0x40>
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	4a0d      	ldr	r2, [pc, #52]	; (801736c <check_dwc2+0x5c>)
 8017336:	4293      	cmp	r3, r2
 8017338:	d00a      	beq.n	8017350 <check_dwc2+0x40>
 801733a:	4b0d      	ldr	r3, [pc, #52]	; (8017370 <check_dwc2+0x60>)
 801733c:	60bb      	str	r3, [r7, #8]
 801733e:	68bb      	ldr	r3, [r7, #8]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	f003 0301 	and.w	r3, r3, #1
 8017346:	2b00      	cmp	r3, #0
 8017348:	d000      	beq.n	801734c <check_dwc2+0x3c>
 801734a:	be00      	bkpt	0x0000
 801734c:	2300      	movs	r3, #0
 801734e:	e000      	b.n	8017352 <check_dwc2+0x42>
#endif

  return true;
 8017350:	2301      	movs	r3, #1
}
 8017352:	4618      	mov	r0, r3
 8017354:	3714      	adds	r7, #20
 8017356:	46bd      	mov	sp, r7
 8017358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop
 8017360:	ffff0000 	.word	0xffff0000
 8017364:	4f540000 	.word	0x4f540000
 8017368:	55310000 	.word	0x55310000
 801736c:	55320000 	.word	0x55320000
 8017370:	e000edf0 	.word	0xe000edf0

08017374 <dcd_init>:

void dcd_init (uint8_t rhport)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b084      	sub	sp, #16
 8017378:	af00      	add	r7, sp, #0
 801737a:	4603      	mov	r3, r0
 801737c:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801737e:	79fb      	ldrb	r3, [r7, #7]
 8017380:	4a33      	ldr	r2, [pc, #204]	; (8017450 <dcd_init+0xdc>)
 8017382:	011b      	lsls	r3, r3, #4
 8017384:	4413      	add	r3, r2
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_VERIFY(check_dwc2(dwc2), );
 801738a:	68f8      	ldr	r0, [r7, #12]
 801738c:	f7ff ffc0 	bl	8017310 <check_dwc2>
 8017390:	4603      	mov	r3, r0
 8017392:	f083 0301 	eor.w	r3, r3, #1
 8017396:	b2db      	uxtb	r3, r3
 8017398:	2b00      	cmp	r3, #0
 801739a:	d155      	bne.n	8017448 <dcd_init+0xd4>

  dcd_disconnect(rhport);
 801739c:	79fb      	ldrb	r3, [r7, #7]
 801739e:	4618      	mov	r0, r3
 80173a0:	f000 f8da 	bl	8017558 <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if( phy_hs_supported(dwc2) )
 80173a4:	68f8      	ldr	r0, [r7, #12]
 80173a6:	f7ff fefe 	bl	80171a6 <phy_hs_supported>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d003      	beq.n	80173b8 <dcd_init+0x44>
  {
    // Highspeed
    phy_hs_init(dwc2);
 80173b0:	68f8      	ldr	r0, [r7, #12]
 80173b2:	f7ff ff2c 	bl	801720e <phy_hs_init>
 80173b6:	e002      	b.n	80173be <dcd_init+0x4a>
  }else
  {
    // core does not support highspeed or hs-phy is not present
    phy_fs_init(dwc2);
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	f7ff feff 	bl	80171bc <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80173c4:	f023 020f 	bic.w	r2, r3, #15
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	 * duration in the core to account for any additional delays
	 * introduced by the PHY. This can be required, because the delay
	 * introduced by the PHY in generating the linestate condition
	 * can vary from one PHY to another.
	 */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	68db      	ldr	r3, [r3, #12]
 80173d2:	f043 0207 	orr.w	r2, r3, #7
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	68db      	ldr	r3, [r3, #12]
 80173de:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80173e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80173f2:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8017400:	f043 0204 	orr.w	r2, r3, #4
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // Clear all interrupts
  uint32_t int_mask = dwc2->gintsts;
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	695b      	ldr	r3, [r3, #20]
 801740e:	60bb      	str	r3, [r7, #8]
  dwc2->gintsts |= int_mask;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	695a      	ldr	r2, [r3, #20]
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	431a      	orrs	r2, r3
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	615a      	str	r2, [r3, #20]
  int_mask = dwc2->gotgint;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	685b      	ldr	r3, [r3, #4]
 8017420:	60bb      	str	r3, [r7, #8]
  dwc2->gotgint |= int_mask;
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	685a      	ldr	r2, [r3, #4]
 8017426:	68bb      	ldr	r3, [r7, #8]
 8017428:	431a      	orrs	r2, r3
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT   | GINTMSK_MMISM  | GINTMSK_RXFLVLM  |
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	4a08      	ldr	r2, [pc, #32]	; (8017454 <dcd_init+0xe0>)
 8017432:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	689b      	ldr	r3, [r3, #8]
 8017438:	f043 0201 	orr.w	r2, r3, #1
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 8017440:	79fb      	ldrb	r3, [r7, #7]
 8017442:	4618      	mov	r0, r3
 8017444:	f000 f86c 	bl	8017520 <dcd_connect>
}
 8017448:	3710      	adds	r7, #16
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	0801c3c4 	.word	0x0801c3c4
 8017454:	80003816 	.word	0x80003816

08017458 <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b084      	sub	sp, #16
 801745c:	af00      	add	r7, sp, #0
 801745e:	4603      	mov	r3, r0
 8017460:	71fb      	strb	r3, [r7, #7]
 8017462:	79fb      	ldrb	r3, [r7, #7]
 8017464:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ((IRQn_Type)_dwc2_controller[rhport].irqnum);
 8017466:	7bfb      	ldrb	r3, [r7, #15]
 8017468:	4a06      	ldr	r2, [pc, #24]	; (8017484 <dcd_int_enable+0x2c>)
 801746a:	011b      	lsls	r3, r3, #4
 801746c:	4413      	add	r3, r2
 801746e:	3304      	adds	r3, #4
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	b21b      	sxth	r3, r3
 8017474:	4618      	mov	r0, r3
 8017476:	f7ff fbbf 	bl	8016bf8 <__NVIC_EnableIRQ>
}
 801747a:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 801747c:	bf00      	nop
 801747e:	3710      	adds	r7, #16
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}
 8017484:	0801c3c4 	.word	0x0801c3c4

08017488 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b084      	sub	sp, #16
 801748c:	af00      	add	r7, sp, #0
 801748e:	4603      	mov	r3, r0
 8017490:	71fb      	strb	r3, [r7, #7]
 8017492:	79fb      	ldrb	r3, [r7, #7]
 8017494:	73fb      	strb	r3, [r7, #15]
  NVIC_DisableIRQ((IRQn_Type)_dwc2_controller[rhport].irqnum);
 8017496:	7bfb      	ldrb	r3, [r7, #15]
 8017498:	4a06      	ldr	r2, [pc, #24]	; (80174b4 <dcd_int_disable+0x2c>)
 801749a:	011b      	lsls	r3, r3, #4
 801749c:	4413      	add	r3, r2
 801749e:	3304      	adds	r3, #4
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	b21b      	sxth	r3, r3
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7ff fbc5 	bl	8016c34 <__NVIC_DisableIRQ>
}
 80174aa:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 80174ac:	bf00      	nop
 80174ae:	3710      	adds	r7, #16
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	0801c3c4 	.word	0x0801c3c4

080174b8 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b084      	sub	sp, #16
 80174bc:	af00      	add	r7, sp, #0
 80174be:	4603      	mov	r3, r0
 80174c0:	460a      	mov	r2, r1
 80174c2:	71fb      	strb	r3, [r7, #7]
 80174c4:	4613      	mov	r3, r2
 80174c6:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80174c8:	79fb      	ldrb	r3, [r7, #7]
 80174ca:	4a14      	ldr	r2, [pc, #80]	; (801751c <dcd_set_address+0x64>)
 80174cc:	011b      	lsls	r3, r3, #4
 80174ce:	4413      	add	r3, r2
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80174da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80174de:	79ba      	ldrb	r2, [r7, #6]
 80174e0:	0112      	lsls	r2, r2, #4
 80174e2:	431a      	orrs	r2, r3
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80174ea:	2300      	movs	r3, #0
 80174ec:	72fb      	strb	r3, [r7, #11]
 80174ee:	2301      	movs	r3, #1
 80174f0:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80174f2:	7abb      	ldrb	r3, [r7, #10]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d002      	beq.n	80174fe <dcd_set_address+0x46>
 80174f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80174fc:	e000      	b.n	8017500 <dcd_set_address+0x48>
 80174fe:	2300      	movs	r3, #0
 8017500:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8017504:	4313      	orrs	r3, r2
 8017506:	b25b      	sxtb	r3, r3
 8017508:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 801750a:	79f8      	ldrb	r0, [r7, #7]
 801750c:	2300      	movs	r3, #0
 801750e:	2200      	movs	r2, #0
 8017510:	f000 f9c8 	bl	80178a4 <dcd_edpt_xfer>
}
 8017514:	bf00      	nop
 8017516:	3710      	adds	r7, #16
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	0801c3c4 	.word	0x0801c3c4

08017520 <dcd_connect>:

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 8017520:	b480      	push	{r7}
 8017522:	b085      	sub	sp, #20
 8017524:	af00      	add	r7, sp, #0
 8017526:	4603      	mov	r3, r0
 8017528:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801752a:	79fb      	ldrb	r3, [r7, #7]
 801752c:	4a09      	ldr	r2, [pc, #36]	; (8017554 <dcd_connect+0x34>)
 801752e:	011b      	lsls	r3, r3, #4
 8017530:	4413      	add	r3, r2
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 801753c:	f023 0202 	bic.w	r2, r3, #2
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8017546:	bf00      	nop
 8017548:	3714      	adds	r7, #20
 801754a:	46bd      	mov	sp, r7
 801754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017550:	4770      	bx	lr
 8017552:	bf00      	nop
 8017554:	0801c3c4 	.word	0x0801c3c4

08017558 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport)
{
 8017558:	b480      	push	{r7}
 801755a:	b085      	sub	sp, #20
 801755c:	af00      	add	r7, sp, #0
 801755e:	4603      	mov	r3, r0
 8017560:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017562:	79fb      	ldrb	r3, [r7, #7]
 8017564:	4a09      	ldr	r2, [pc, #36]	; (801758c <dcd_disconnect+0x34>)
 8017566:	011b      	lsls	r3, r3, #4
 8017568:	4413      	add	r3, r2
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8017574:	f043 0202 	orr.w	r2, r3, #2
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 801757e:	bf00      	nop
 8017580:	3714      	adds	r7, #20
 8017582:	46bd      	mov	sp, r7
 8017584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017588:	4770      	bx	lr
 801758a:	bf00      	nop
 801758c:	0801c3c4 	.word	0x0801c3c4

08017590 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b08e      	sub	sp, #56	; 0x38
 8017594:	af00      	add	r7, sp, #0
 8017596:	4603      	mov	r3, r0
 8017598:	6039      	str	r1, [r7, #0]
 801759a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 801759c:	79fb      	ldrb	r3, [r7, #7]
 801759e:	4a97      	ldr	r2, [pc, #604]	; (80177fc <dcd_edpt_open+0x26c>)
 80175a0:	011b      	lsls	r3, r3, #4
 80175a2:	4413      	add	r3, r2
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80175a8:	79fb      	ldrb	r3, [r7, #7]
 80175aa:	4a94      	ldr	r2, [pc, #592]	; (80177fc <dcd_edpt_open+0x26c>)
 80175ac:	011b      	lsls	r3, r3, #4
 80175ae:	4413      	add	r3, r2
 80175b0:	3308      	adds	r3, #8
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 80175b8:	683b      	ldr	r3, [r7, #0]
 80175ba:	789b      	ldrb	r3, [r3, #2]
 80175bc:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80175be:	7dbb      	ldrb	r3, [r7, #22]
 80175c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175c4:	b2db      	uxtb	r3, r3
 80175c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	789b      	ldrb	r3, [r3, #2]
 80175ce:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80175d0:	7dfb      	ldrb	r3, [r7, #23]
 80175d2:	09db      	lsrs	r3, r3, #7
 80175d4:	b2db      	uxtb	r3, r3
 80175d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  TU_ASSERT(epnum < ep_count);
 80175da:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80175de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d30a      	bcc.n	80175fc <dcd_edpt_open+0x6c>
 80175e6:	4b86      	ldr	r3, [pc, #536]	; (8017800 <dcd_edpt_open+0x270>)
 80175e8:	61bb      	str	r3, [r7, #24]
 80175ea:	69bb      	ldr	r3, [r7, #24]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	f003 0301 	and.w	r3, r3, #1
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d000      	beq.n	80175f8 <dcd_edpt_open+0x68>
 80175f6:	be00      	bkpt	0x0000
 80175f8:	2300      	movs	r3, #0
 80175fa:	e0fb      	b.n	80177f4 <dcd_edpt_open+0x264>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80175fc:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8017600:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8017604:	0052      	lsls	r2, r2, #1
 8017606:	4413      	add	r3, r2
 8017608:	011b      	lsls	r3, r3, #4
 801760a:	4a7e      	ldr	r2, [pc, #504]	; (8017804 <dcd_edpt_open+0x274>)
 801760c:	4413      	add	r3, r2
 801760e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8017614:	68bb      	ldr	r3, [r7, #8]
 8017616:	889b      	ldrh	r3, [r3, #4]
 8017618:	b29b      	uxth	r3, r3
 801761a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801761e:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8017620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017622:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	799a      	ldrb	r2, [r3, #6]
 8017628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762a:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 801762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762e:	895b      	ldrh	r3, [r3, #10]
 8017630:	613b      	str	r3, [r7, #16]
 8017632:	2304      	movs	r3, #4
 8017634:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 8017636:	693a      	ldr	r2, [r7, #16]
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	4413      	add	r3, r2
 801763c:	1e5a      	subs	r2, r3, #1
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	fbb2 f3f3 	udiv	r3, r2, r3
 8017644:	857b      	strh	r3, [r7, #42]	; 0x2a

  if(dir == TUSB_DIR_OUT)
 8017646:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 801764a:	2b00      	cmp	r3, #0
 801764c:	d160      	bne.n	8017710 <dcd_edpt_open+0x180>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_grxfsiz(4*fifo_size, ep_count);
 801764e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017650:	009b      	lsls	r3, r3, #2
 8017652:	b29b      	uxth	r3, r3
 8017654:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8017658:	4611      	mov	r1, r2
 801765a:	4618      	mov	r0, r3
 801765c:	f7ff fba0 	bl	8016da0 <calc_grxfsiz>
 8017660:	4603      	mov	r3, r0
 8017662:	847b      	strh	r3, [r7, #34]	; 0x22

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz)
 8017664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017668:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801766a:	429a      	cmp	r2, r3
 801766c:	d21b      	bcs.n	80176a6 <dcd_edpt_open+0x116>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size/4);
 801766e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017670:	4a65      	ldr	r2, [pc, #404]	; (8017808 <dcd_edpt_open+0x278>)
 8017672:	8812      	ldrh	r2, [r2, #0]
 8017674:	4413      	add	r3, r2
 8017676:	4619      	mov	r1, r3
 8017678:	79fb      	ldrb	r3, [r7, #7]
 801767a:	4a60      	ldr	r2, [pc, #384]	; (80177fc <dcd_edpt_open+0x26c>)
 801767c:	011b      	lsls	r3, r3, #4
 801767e:	4413      	add	r3, r2
 8017680:	330c      	adds	r3, #12
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	089b      	lsrs	r3, r3, #2
 8017686:	4299      	cmp	r1, r3
 8017688:	d90a      	bls.n	80176a0 <dcd_edpt_open+0x110>
 801768a:	4b5d      	ldr	r3, [pc, #372]	; (8017800 <dcd_edpt_open+0x270>)
 801768c:	61fb      	str	r3, [r7, #28]
 801768e:	69fb      	ldr	r3, [r7, #28]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	f003 0301 	and.w	r3, r3, #1
 8017696:	2b00      	cmp	r3, #0
 8017698:	d000      	beq.n	801769c <dcd_edpt_open+0x10c>
 801769a:	be00      	bkpt	0x0000
 801769c:	2300      	movs	r3, #0
 801769e:	e0a9      	b.n	80177f4 <dcd_edpt_open+0x264>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 80176a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80176a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80176a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80176aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80176ac:	3358      	adds	r3, #88	; 0x58
 80176ae:	015b      	lsls	r3, r3, #5
 80176b0:	4413      	add	r3, r2
 80176b2:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 80176b4:	683b      	ldr	r3, [r7, #0]
 80176b6:	78db      	ldrb	r3, [r3, #3]
 80176b8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80176bc:	b2db      	uxtb	r3, r3
 80176be:	049b      	lsls	r3, r3, #18
 80176c0:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80176c2:	683b      	ldr	r3, [r7, #0]
 80176c4:	78db      	ldrb	r3, [r3, #3]
 80176c6:	f003 0303 	and.w	r3, r3, #3
 80176ca:	b2db      	uxtb	r3, r3
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	d002      	beq.n	80176d6 <dcd_edpt_open+0x146>
 80176d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80176d4:	e000      	b.n	80176d8 <dcd_edpt_open+0x148>
 80176d6:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 80176d8:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 80176da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80176dc:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80176de:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80176e0:	431a      	orrs	r2, r3
 80176e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80176e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80176ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80176ec:	3358      	adds	r3, #88	; 0x58
 80176ee:	015b      	lsls	r3, r3, #5
 80176f0:	440b      	add	r3, r1
 80176f2:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 80176f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176f6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80176fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80176fe:	3310      	adds	r3, #16
 8017700:	2101      	movs	r1, #1
 8017702:	fa01 f303 	lsl.w	r3, r1, r3
 8017706:	431a      	orrs	r2, r3
 8017708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801770a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 801770e:	e070      	b.n	80177f2 <dcd_edpt_open+0x262>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size/4);
 8017710:	4b3d      	ldr	r3, [pc, #244]	; (8017808 <dcd_edpt_open+0x278>)
 8017712:	881b      	ldrh	r3, [r3, #0]
 8017714:	461a      	mov	r2, r3
 8017716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017718:	4413      	add	r3, r2
 801771a:	461a      	mov	r2, r3
 801771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017720:	441a      	add	r2, r3
 8017722:	79fb      	ldrb	r3, [r7, #7]
 8017724:	4935      	ldr	r1, [pc, #212]	; (80177fc <dcd_edpt_open+0x26c>)
 8017726:	011b      	lsls	r3, r3, #4
 8017728:	440b      	add	r3, r1
 801772a:	330c      	adds	r3, #12
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	089b      	lsrs	r3, r3, #2
 8017730:	429a      	cmp	r2, r3
 8017732:	d90a      	bls.n	801774a <dcd_edpt_open+0x1ba>
 8017734:	4b32      	ldr	r3, [pc, #200]	; (8017800 <dcd_edpt_open+0x270>)
 8017736:	627b      	str	r3, [r7, #36]	; 0x24
 8017738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	f003 0301 	and.w	r3, r3, #1
 8017740:	2b00      	cmp	r3, #0
 8017742:	d000      	beq.n	8017746 <dcd_edpt_open+0x1b6>
 8017744:	be00      	bkpt	0x0000
 8017746:	2300      	movs	r3, #0
 8017748:	e054      	b.n	80177f4 <dcd_edpt_open+0x264>

    _allocated_fifo_words_tx += fifo_size;
 801774a:	4b2f      	ldr	r3, [pc, #188]	; (8017808 <dcd_edpt_open+0x278>)
 801774c:	881a      	ldrh	r2, [r3, #0]
 801774e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017750:	4413      	add	r3, r2
 8017752:	b29a      	uxth	r2, r3
 8017754:	4b2c      	ldr	r3, [pc, #176]	; (8017808 <dcd_edpt_open+0x278>)
 8017756:	801a      	strh	r2, [r3, #0]

    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %lu", fifo_size*4, _dwc2_controller[rhport].ep_fifo_size-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8017758:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801775a:	041b      	lsls	r3, r3, #16
 801775c:	4619      	mov	r1, r3
 801775e:	79fb      	ldrb	r3, [r7, #7]
 8017760:	4a26      	ldr	r2, [pc, #152]	; (80177fc <dcd_edpt_open+0x26c>)
 8017762:	011b      	lsls	r3, r3, #4
 8017764:	4413      	add	r3, r2
 8017766:	330c      	adds	r3, #12
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	089b      	lsrs	r3, r3, #2
 801776c:	4a26      	ldr	r2, [pc, #152]	; (8017808 <dcd_edpt_open+0x278>)
 801776e:	8812      	ldrh	r2, [r2, #0]
 8017770:	1a9a      	subs	r2, r3, r2
 8017772:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8017776:	3b01      	subs	r3, #1
 8017778:	430a      	orrs	r2, r1
 801777a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801777c:	3340      	adds	r3, #64	; 0x40
 801777e:	009b      	lsls	r3, r3, #2
 8017780:	440b      	add	r3, r1
 8017782:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8017784:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8017788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801778a:	3348      	adds	r3, #72	; 0x48
 801778c:	015b      	lsls	r3, r3, #5
 801778e:	4413      	add	r3, r2
 8017790:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8017792:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8017796:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8017798:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	78db      	ldrb	r3, [r3, #3]
 80177a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80177a4:	b2db      	uxtb	r3, r3
 80177a6:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 80177a8:	4313      	orrs	r3, r2
 80177aa:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	78db      	ldrb	r3, [r3, #3]
 80177b0:	f003 0303 	and.w	r3, r3, #3
 80177b4:	b2db      	uxtb	r3, r3
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	d002      	beq.n	80177c0 <dcd_edpt_open+0x230>
 80177ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80177be:	e000      	b.n	80177c2 <dcd_edpt_open+0x232>
 80177c0:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 80177c2:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 80177c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177c6:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80177c8:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80177ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80177ce:	430a      	orrs	r2, r1
 80177d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80177d2:	3348      	adds	r3, #72	; 0x48
 80177d4:	015b      	lsls	r3, r3, #5
 80177d6:	440b      	add	r3, r1
 80177d8:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80177da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177dc:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80177e0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80177e4:	2101      	movs	r1, #1
 80177e6:	fa01 f202 	lsl.w	r2, r1, r2
 80177ea:	431a      	orrs	r2, r3
 80177ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177ee:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 80177f2:	2301      	movs	r3, #1
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3738      	adds	r7, #56	; 0x38
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	0801c3c4 	.word	0x0801c3c4
 8017800:	e000edf0 	.word	0xe000edf0
 8017804:	24002c80 	.word	0x24002c80
 8017808:	24002da4 	.word	0x24002da4

0801780c <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 801780c:	b480      	push	{r7}
 801780e:	b087      	sub	sp, #28
 8017810:	af00      	add	r7, sp, #0
 8017812:	4603      	mov	r3, r0
 8017814:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8017816:	79fb      	ldrb	r3, [r7, #7]
 8017818:	4a1f      	ldr	r2, [pc, #124]	; (8017898 <dcd_edpt_close_all+0x8c>)
 801781a:	011b      	lsls	r3, r3, #4
 801781c:	4413      	add	r3, r2
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8017822:	79fb      	ldrb	r3, [r7, #7]
 8017824:	4a1c      	ldr	r2, [pc, #112]	; (8017898 <dcd_edpt_close_all+0x8c>)
 8017826:	011b      	lsls	r3, r3, #4
 8017828:	4413      	add	r3, r2
 801782a:	3308      	adds	r3, #8
 801782c:	781b      	ldrb	r3, [r3, #0]
 801782e:	73fb      	strb	r3, [r7, #15]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8017836:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  for(uint8_t n = 1; n < ep_count; n++)
 801783a:	2301      	movs	r3, #1
 801783c:	75fb      	strb	r3, [r7, #23]
 801783e:	e01e      	b.n	801787e <dcd_edpt_close_all+0x72>
  {
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 8017840:	7dfb      	ldrb	r3, [r7, #23]
 8017842:	693a      	ldr	r2, [r7, #16]
 8017844:	3358      	adds	r3, #88	; 0x58
 8017846:	015b      	lsls	r3, r3, #5
 8017848:	4413      	add	r3, r2
 801784a:	2200      	movs	r2, #0
 801784c:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801784e:	7dfb      	ldrb	r3, [r7, #23]
 8017850:	4a12      	ldr	r2, [pc, #72]	; (801789c <dcd_edpt_close_all+0x90>)
 8017852:	015b      	lsls	r3, r3, #5
 8017854:	4413      	add	r3, r2
 8017856:	330a      	adds	r3, #10
 8017858:	2200      	movs	r2, #0
 801785a:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 801785c:	7dfb      	ldrb	r3, [r7, #23]
 801785e:	693a      	ldr	r2, [r7, #16]
 8017860:	3348      	adds	r3, #72	; 0x48
 8017862:	015b      	lsls	r3, r3, #5
 8017864:	4413      	add	r3, r2
 8017866:	2200      	movs	r2, #0
 8017868:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 801786a:	7dfb      	ldrb	r3, [r7, #23]
 801786c:	4a0b      	ldr	r2, [pc, #44]	; (801789c <dcd_edpt_close_all+0x90>)
 801786e:	015b      	lsls	r3, r3, #5
 8017870:	4413      	add	r3, r2
 8017872:	331a      	adds	r3, #26
 8017874:	2200      	movs	r2, #0
 8017876:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < ep_count; n++)
 8017878:	7dfb      	ldrb	r3, [r7, #23]
 801787a:	3301      	adds	r3, #1
 801787c:	75fb      	strb	r3, [r7, #23]
 801787e:	7dfa      	ldrb	r2, [r7, #23]
 8017880:	7bfb      	ldrb	r3, [r7, #15]
 8017882:	429a      	cmp	r2, r3
 8017884:	d3dc      	bcc.n	8017840 <dcd_edpt_close_all+0x34>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8017886:	4b06      	ldr	r3, [pc, #24]	; (80178a0 <dcd_edpt_close_all+0x94>)
 8017888:	2210      	movs	r2, #16
 801788a:	801a      	strh	r2, [r3, #0]
}
 801788c:	bf00      	nop
 801788e:	371c      	adds	r7, #28
 8017890:	46bd      	mov	sp, r7
 8017892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017896:	4770      	bx	lr
 8017898:	0801c3c4 	.word	0x0801c3c4
 801789c:	24002c80 	.word	0x24002c80
 80178a0:	24002da4 	.word	0x24002da4

080178a4 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80178a4:	b590      	push	{r4, r7, lr}
 80178a6:	b089      	sub	sp, #36	; 0x24
 80178a8:	af02      	add	r7, sp, #8
 80178aa:	603a      	str	r2, [r7, #0]
 80178ac:	461a      	mov	r2, r3
 80178ae:	4603      	mov	r3, r0
 80178b0:	71fb      	strb	r3, [r7, #7]
 80178b2:	460b      	mov	r3, r1
 80178b4:	71bb      	strb	r3, [r7, #6]
 80178b6:	4613      	mov	r3, r2
 80178b8:	80bb      	strh	r3, [r7, #4]
 80178ba:	79bb      	ldrb	r3, [r7, #6]
 80178bc:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80178be:	7b3b      	ldrb	r3, [r7, #12]
 80178c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80178c4:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80178c6:	757b      	strb	r3, [r7, #21]
 80178c8:	79bb      	ldrb	r3, [r7, #6]
 80178ca:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80178cc:	7b7b      	ldrb	r3, [r7, #13]
 80178ce:	09db      	lsrs	r3, r3, #7
 80178d0:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80178d2:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80178d4:	7d7a      	ldrb	r2, [r7, #21]
 80178d6:	7d3b      	ldrb	r3, [r7, #20]
 80178d8:	0052      	lsls	r2, r2, #1
 80178da:	4413      	add	r3, r2
 80178dc:	011b      	lsls	r3, r3, #4
 80178de:	4a23      	ldr	r2, [pc, #140]	; (801796c <dcd_edpt_xfer+0xc8>)
 80178e0:	4413      	add	r3, r2
 80178e2:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 80178e4:	693b      	ldr	r3, [r7, #16]
 80178e6:	683a      	ldr	r2, [r7, #0]
 80178e8:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 80178ea:	693b      	ldr	r3, [r7, #16]
 80178ec:	2200      	movs	r2, #0
 80178ee:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80178f0:	693b      	ldr	r3, [r7, #16]
 80178f2:	88ba      	ldrh	r2, [r7, #4]
 80178f4:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0)
 80178f6:	7d7b      	ldrb	r3, [r7, #21]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d110      	bne.n	801791e <dcd_edpt_xfer+0x7a>
  {
    ep0_pending[dir] = total_bytes;
 80178fc:	7d3b      	ldrb	r3, [r7, #20]
 80178fe:	491c      	ldr	r1, [pc, #112]	; (8017970 <dcd_edpt_xfer+0xcc>)
 8017900:	88ba      	ldrh	r2, [r7, #4]
 8017902:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8017906:	7d3b      	ldrb	r3, [r7, #20]
 8017908:	4a19      	ldr	r2, [pc, #100]	; (8017970 <dcd_edpt_xfer+0xcc>)
 801790a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801790e:	7d3a      	ldrb	r2, [r7, #20]
 8017910:	7d79      	ldrb	r1, [r7, #21]
 8017912:	79f8      	ldrb	r0, [r7, #7]
 8017914:	9300      	str	r3, [sp, #0]
 8017916:	2301      	movs	r3, #1
 8017918:	f7ff fb2e 	bl	8016f78 <edpt_schedule_packets>
 801791c:	e020      	b.n	8017960 <dcd_edpt_xfer+0xbc>
  }
  else
  {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 801791e:	693b      	ldr	r3, [r7, #16]
 8017920:	895b      	ldrh	r3, [r3, #10]
 8017922:	88ba      	ldrh	r2, [r7, #4]
 8017924:	fbb2 f3f3 	udiv	r3, r2, r3
 8017928:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	895a      	ldrh	r2, [r3, #10]
 801792e:	88bb      	ldrh	r3, [r7, #4]
 8017930:	fbb3 f1f2 	udiv	r1, r3, r2
 8017934:	fb01 f202 	mul.w	r2, r1, r2
 8017938:	1a9b      	subs	r3, r3, r2
 801793a:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 801793c:	89fb      	ldrh	r3, [r7, #14]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d102      	bne.n	8017948 <dcd_edpt_xfer+0xa4>
 8017942:	88bb      	ldrh	r3, [r7, #4]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d102      	bne.n	801794e <dcd_edpt_xfer+0xaa>
 8017948:	8afb      	ldrh	r3, [r7, #22]
 801794a:	3301      	adds	r3, #1
 801794c:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 801794e:	8afc      	ldrh	r4, [r7, #22]
 8017950:	7d3a      	ldrb	r2, [r7, #20]
 8017952:	7d79      	ldrb	r1, [r7, #21]
 8017954:	79f8      	ldrb	r0, [r7, #7]
 8017956:	88bb      	ldrh	r3, [r7, #4]
 8017958:	9300      	str	r3, [sp, #0]
 801795a:	4623      	mov	r3, r4
 801795c:	f7ff fb0c 	bl	8016f78 <edpt_schedule_packets>
  }

  return true;
 8017960:	2301      	movs	r3, #1
}
 8017962:	4618      	mov	r0, r3
 8017964:	371c      	adds	r7, #28
 8017966:	46bd      	mov	sp, r7
 8017968:	bd90      	pop	{r4, r7, pc}
 801796a:	bf00      	nop
 801796c:	24002c80 	.word	0x24002c80
 8017970:	24002da0 	.word	0x24002da0

08017974 <dcd_edpt_disable>:

  return true;
}

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 8017974:	b480      	push	{r7}
 8017976:	b089      	sub	sp, #36	; 0x24
 8017978:	af00      	add	r7, sp, #0
 801797a:	4603      	mov	r3, r0
 801797c:	71fb      	strb	r3, [r7, #7]
 801797e:	460b      	mov	r3, r1
 8017980:	71bb      	strb	r3, [r7, #6]
 8017982:	4613      	mov	r3, r2
 8017984:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8017986:	79fb      	ldrb	r3, [r7, #7]
 8017988:	4a6e      	ldr	r2, [pc, #440]	; (8017b44 <dcd_edpt_disable+0x1d0>)
 801798a:	011b      	lsls	r3, r3, #4
 801798c:	4413      	add	r3, r2
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	61fb      	str	r3, [r7, #28]
 8017992:	79bb      	ldrb	r3, [r7, #6]
 8017994:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8017996:	7bbb      	ldrb	r3, [r7, #14]
 8017998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801799c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 801799e:	76fb      	strb	r3, [r7, #27]
 80179a0:	79bb      	ldrb	r3, [r7, #6]
 80179a2:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80179a4:	7bfb      	ldrb	r3, [r7, #15]
 80179a6:	09db      	lsrs	r3, r3, #7
 80179a8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80179aa:	76bb      	strb	r3, [r7, #26]

  if ( dir == TUSB_DIR_IN )
 80179ac:	7ebb      	ldrb	r3, [r7, #26]
 80179ae:	2b01      	cmp	r3, #1
 80179b0:	d167      	bne.n	8017a82 <dcd_edpt_disable+0x10e>
  {
    dwc2_epin_t* epin = dwc2->epin;
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80179b8:	613b      	str	r3, [r7, #16]

    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA) )
 80179ba:	7efb      	ldrb	r3, [r7, #27]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d006      	beq.n	80179ce <dcd_edpt_disable+0x5a>
 80179c0:	7efb      	ldrb	r3, [r7, #27]
 80179c2:	015b      	lsls	r3, r3, #5
 80179c4:	693a      	ldr	r2, [r7, #16]
 80179c6:	4413      	add	r3, r2
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	db13      	blt.n	80179f6 <dcd_edpt_disable+0x82>
    {
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 80179ce:	7efb      	ldrb	r3, [r7, #27]
 80179d0:	015b      	lsls	r3, r3, #5
 80179d2:	693a      	ldr	r2, [r7, #16]
 80179d4:	4413      	add	r3, r2
 80179d6:	681a      	ldr	r2, [r3, #0]
 80179d8:	797b      	ldrb	r3, [r7, #5]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d002      	beq.n	80179e4 <dcd_edpt_disable+0x70>
 80179de:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 80179e2:	e001      	b.n	80179e8 <dcd_edpt_disable+0x74>
 80179e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80179e8:	7efb      	ldrb	r3, [r7, #27]
 80179ea:	015b      	lsls	r3, r3, #5
 80179ec:	6938      	ldr	r0, [r7, #16]
 80179ee:	4403      	add	r3, r0
 80179f0:	430a      	orrs	r2, r1
 80179f2:	601a      	str	r2, [r3, #0]
 80179f4:	e037      	b.n	8017a66 <dcd_edpt_disable+0xf2>
    }
    else
    {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 80179f6:	7efb      	ldrb	r3, [r7, #27]
 80179f8:	015b      	lsls	r3, r3, #5
 80179fa:	693a      	ldr	r2, [r7, #16]
 80179fc:	4413      	add	r3, r2
 80179fe:	681a      	ldr	r2, [r3, #0]
 8017a00:	7efb      	ldrb	r3, [r7, #27]
 8017a02:	015b      	lsls	r3, r3, #5
 8017a04:	6939      	ldr	r1, [r7, #16]
 8017a06:	440b      	add	r3, r1
 8017a08:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8017a0c:	601a      	str	r2, [r3, #0]
      while ( (epin[epnum].diepint & DIEPINT_INEPNE) == 0 ) {}
 8017a0e:	bf00      	nop
 8017a10:	7efb      	ldrb	r3, [r7, #27]
 8017a12:	015b      	lsls	r3, r3, #5
 8017a14:	693a      	ldr	r2, [r7, #16]
 8017a16:	4413      	add	r3, r2
 8017a18:	689b      	ldr	r3, [r3, #8]
 8017a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d0f6      	beq.n	8017a10 <dcd_edpt_disable+0x9c>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8017a22:	7efb      	ldrb	r3, [r7, #27]
 8017a24:	015b      	lsls	r3, r3, #5
 8017a26:	693a      	ldr	r2, [r7, #16]
 8017a28:	4413      	add	r3, r2
 8017a2a:	681a      	ldr	r2, [r3, #0]
 8017a2c:	797b      	ldrb	r3, [r7, #5]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d001      	beq.n	8017a36 <dcd_edpt_disable+0xc2>
 8017a32:	4945      	ldr	r1, [pc, #276]	; (8017b48 <dcd_edpt_disable+0x1d4>)
 8017a34:	e001      	b.n	8017a3a <dcd_edpt_disable+0xc6>
 8017a36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017a3a:	7efb      	ldrb	r3, [r7, #27]
 8017a3c:	015b      	lsls	r3, r3, #5
 8017a3e:	6938      	ldr	r0, [r7, #16]
 8017a40:	4403      	add	r3, r0
 8017a42:	430a      	orrs	r2, r1
 8017a44:	601a      	str	r2, [r3, #0]
      while ( (epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0 ) {}
 8017a46:	bf00      	nop
 8017a48:	7efb      	ldrb	r3, [r7, #27]
 8017a4a:	015b      	lsls	r3, r3, #5
 8017a4c:	693a      	ldr	r2, [r7, #16]
 8017a4e:	4413      	add	r3, r2
 8017a50:	689b      	ldr	r3, [r3, #8]
 8017a52:	f003 0302 	and.w	r3, r3, #2
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d0f6      	beq.n	8017a48 <dcd_edpt_disable+0xd4>

      epin[epnum].diepint = DIEPINT_EPDISD;
 8017a5a:	7efb      	ldrb	r3, [r7, #27]
 8017a5c:	015b      	lsls	r3, r3, #5
 8017a5e:	693a      	ldr	r2, [r7, #16]
 8017a60:	4413      	add	r3, r2
 8017a62:	2202      	movs	r2, #2
 8017a64:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 8017a66:	7efb      	ldrb	r3, [r7, #27]
 8017a68:	019b      	lsls	r3, r3, #6
 8017a6a:	f043 0220 	orr.w	r2, r3, #32
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	611a      	str	r2, [r3, #16]
    while ( (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0 ) {}
 8017a72:	bf00      	nop
 8017a74:	69fb      	ldr	r3, [r7, #28]
 8017a76:	691b      	ldr	r3, [r3, #16]
 8017a78:	f003 0320 	and.w	r3, r3, #32
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d1f9      	bne.n	8017a74 <dcd_edpt_disable+0x100>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 8017a80:	e059      	b.n	8017b36 <dcd_edpt_disable+0x1c2>
    dwc2_epout_t* epout = dwc2->epout;
 8017a82:	69fb      	ldr	r3, [r7, #28]
 8017a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017a88:	617b      	str	r3, [r7, #20]
    if ( (epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA) )
 8017a8a:	7efb      	ldrb	r3, [r7, #27]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d006      	beq.n	8017a9e <dcd_edpt_disable+0x12a>
 8017a90:	7efb      	ldrb	r3, [r7, #27]
 8017a92:	015b      	lsls	r3, r3, #5
 8017a94:	697a      	ldr	r2, [r7, #20]
 8017a96:	4413      	add	r3, r2
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	db12      	blt.n	8017ac4 <dcd_edpt_disable+0x150>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8017a9e:	7efb      	ldrb	r3, [r7, #27]
 8017aa0:	015b      	lsls	r3, r3, #5
 8017aa2:	697a      	ldr	r2, [r7, #20]
 8017aa4:	4413      	add	r3, r2
 8017aa6:	681a      	ldr	r2, [r3, #0]
 8017aa8:	797b      	ldrb	r3, [r7, #5]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d002      	beq.n	8017ab4 <dcd_edpt_disable+0x140>
 8017aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017ab2:	e000      	b.n	8017ab6 <dcd_edpt_disable+0x142>
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	7efb      	ldrb	r3, [r7, #27]
 8017ab8:	015b      	lsls	r3, r3, #5
 8017aba:	6978      	ldr	r0, [r7, #20]
 8017abc:	4403      	add	r3, r0
 8017abe:	430a      	orrs	r2, r1
 8017ac0:	601a      	str	r2, [r3, #0]
}
 8017ac2:	e038      	b.n	8017b36 <dcd_edpt_disable+0x1c2>
      dwc2->dctl |= DCTL_SGONAK;
 8017ac4:	69fb      	ldr	r3, [r7, #28]
 8017ac6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8017aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8017ace:	69fb      	ldr	r3, [r7, #28]
 8017ad0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ( (dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0 ) {}
 8017ad4:	bf00      	nop
 8017ad6:	69fb      	ldr	r3, [r7, #28]
 8017ad8:	695b      	ldr	r3, [r3, #20]
 8017ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d0f9      	beq.n	8017ad6 <dcd_edpt_disable+0x162>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8017ae2:	7efb      	ldrb	r3, [r7, #27]
 8017ae4:	015b      	lsls	r3, r3, #5
 8017ae6:	697a      	ldr	r2, [r7, #20]
 8017ae8:	4413      	add	r3, r2
 8017aea:	681a      	ldr	r2, [r3, #0]
 8017aec:	797b      	ldrb	r3, [r7, #5]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d001      	beq.n	8017af6 <dcd_edpt_disable+0x182>
 8017af2:	4915      	ldr	r1, [pc, #84]	; (8017b48 <dcd_edpt_disable+0x1d4>)
 8017af4:	e001      	b.n	8017afa <dcd_edpt_disable+0x186>
 8017af6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017afa:	7efb      	ldrb	r3, [r7, #27]
 8017afc:	015b      	lsls	r3, r3, #5
 8017afe:	6978      	ldr	r0, [r7, #20]
 8017b00:	4403      	add	r3, r0
 8017b02:	430a      	orrs	r2, r1
 8017b04:	601a      	str	r2, [r3, #0]
      while ( (epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0 ) {}
 8017b06:	bf00      	nop
 8017b08:	7efb      	ldrb	r3, [r7, #27]
 8017b0a:	015b      	lsls	r3, r3, #5
 8017b0c:	697a      	ldr	r2, [r7, #20]
 8017b0e:	4413      	add	r3, r2
 8017b10:	689b      	ldr	r3, [r3, #8]
 8017b12:	f003 0302 	and.w	r3, r3, #2
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d0f6      	beq.n	8017b08 <dcd_edpt_disable+0x194>
      epout[epnum].doepint = DOEPINT_EPDISD;
 8017b1a:	7efb      	ldrb	r3, [r7, #27]
 8017b1c:	015b      	lsls	r3, r3, #5
 8017b1e:	697a      	ldr	r2, [r7, #20]
 8017b20:	4413      	add	r3, r2
 8017b22:	2202      	movs	r2, #2
 8017b24:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 8017b26:	69fb      	ldr	r3, [r7, #28]
 8017b28:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8017b2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017b30:	69fb      	ldr	r3, [r7, #28]
 8017b32:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8017b36:	bf00      	nop
 8017b38:	3724      	adds	r7, #36	; 0x24
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b40:	4770      	bx	lr
 8017b42:	bf00      	nop
 8017b44:	0801c3c4 	.word	0x0801c3c4
 8017b48:	40200000 	.word	0x40200000

08017b4c <dcd_edpt_stall>:
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	4603      	mov	r3, r0
 8017b54:	460a      	mov	r2, r1
 8017b56:	71fb      	strb	r3, [r7, #7]
 8017b58:	4613      	mov	r3, r2
 8017b5a:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8017b5c:	79b9      	ldrb	r1, [r7, #6]
 8017b5e:	79fb      	ldrb	r3, [r7, #7]
 8017b60:	2201      	movs	r2, #1
 8017b62:	4618      	mov	r0, r3
 8017b64:	f7ff ff06 	bl	8017974 <dcd_edpt_disable>
}
 8017b68:	bf00      	nop
 8017b6a:	3708      	adds	r7, #8
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}

08017b70 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8017b70:	b480      	push	{r7}
 8017b72:	b085      	sub	sp, #20
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	4603      	mov	r3, r0
 8017b78:	460a      	mov	r2, r1
 8017b7a:	71fb      	strb	r3, [r7, #7]
 8017b7c:	4613      	mov	r3, r2
 8017b7e:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017b80:	79fb      	ldrb	r3, [r7, #7]
 8017b82:	4a2a      	ldr	r2, [pc, #168]	; (8017c2c <dcd_edpt_clear_stall+0xbc>)
 8017b84:	011b      	lsls	r3, r3, #4
 8017b86:	4413      	add	r3, r2
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	60fb      	str	r3, [r7, #12]
 8017b8c:	79bb      	ldrb	r3, [r7, #6]
 8017b8e:	723b      	strb	r3, [r7, #8]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8017b90:	7a3b      	ldrb	r3, [r7, #8]
 8017b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b96:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8017b98:	72fb      	strb	r3, [r7, #11]
 8017b9a:	79bb      	ldrb	r3, [r7, #6]
 8017b9c:	727b      	strb	r3, [r7, #9]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8017b9e:	7a7b      	ldrb	r3, [r7, #9]
 8017ba0:	09db      	lsrs	r3, r3, #7
 8017ba2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8017ba4:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if ( dir == TUSB_DIR_IN )
 8017ba6:	7abb      	ldrb	r3, [r7, #10]
 8017ba8:	2b01      	cmp	r3, #1
 8017baa:	d11c      	bne.n	8017be6 <dcd_edpt_clear_stall+0x76>
  {
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 8017bac:	7afb      	ldrb	r3, [r7, #11]
 8017bae:	68fa      	ldr	r2, [r7, #12]
 8017bb0:	3348      	adds	r3, #72	; 0x48
 8017bb2:	015b      	lsls	r3, r3, #5
 8017bb4:	4413      	add	r3, r2
 8017bb6:	681a      	ldr	r2, [r3, #0]
 8017bb8:	7afb      	ldrb	r3, [r7, #11]
 8017bba:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8017bbe:	68f9      	ldr	r1, [r7, #12]
 8017bc0:	3348      	adds	r3, #72	; 0x48
 8017bc2:	015b      	lsls	r3, r3, #5
 8017bc4:	440b      	add	r3, r1
 8017bc6:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8017bc8:	7afb      	ldrb	r3, [r7, #11]
 8017bca:	68fa      	ldr	r2, [r7, #12]
 8017bcc:	3348      	adds	r3, #72	; 0x48
 8017bce:	015b      	lsls	r3, r3, #5
 8017bd0:	4413      	add	r3, r2
 8017bd2:	681a      	ldr	r2, [r3, #0]
 8017bd4:	7afb      	ldrb	r3, [r7, #11]
 8017bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8017bda:	68f9      	ldr	r1, [r7, #12]
 8017bdc:	3348      	adds	r3, #72	; 0x48
 8017bde:	015b      	lsls	r3, r3, #5
 8017be0:	440b      	add	r3, r1
 8017be2:	601a      	str	r2, [r3, #0]
  else
  {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8017be4:	e01b      	b.n	8017c1e <dcd_edpt_clear_stall+0xae>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 8017be6:	7afb      	ldrb	r3, [r7, #11]
 8017be8:	68fa      	ldr	r2, [r7, #12]
 8017bea:	3358      	adds	r3, #88	; 0x58
 8017bec:	015b      	lsls	r3, r3, #5
 8017bee:	4413      	add	r3, r2
 8017bf0:	681a      	ldr	r2, [r3, #0]
 8017bf2:	7afb      	ldrb	r3, [r7, #11]
 8017bf4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8017bf8:	68f9      	ldr	r1, [r7, #12]
 8017bfa:	3358      	adds	r3, #88	; 0x58
 8017bfc:	015b      	lsls	r3, r3, #5
 8017bfe:	440b      	add	r3, r1
 8017c00:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 8017c02:	7afb      	ldrb	r3, [r7, #11]
 8017c04:	68fa      	ldr	r2, [r7, #12]
 8017c06:	3358      	adds	r3, #88	; 0x58
 8017c08:	015b      	lsls	r3, r3, #5
 8017c0a:	4413      	add	r3, r2
 8017c0c:	681a      	ldr	r2, [r3, #0]
 8017c0e:	7afb      	ldrb	r3, [r7, #11]
 8017c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8017c14:	68f9      	ldr	r1, [r7, #12]
 8017c16:	3358      	adds	r3, #88	; 0x58
 8017c18:	015b      	lsls	r3, r3, #5
 8017c1a:	440b      	add	r3, r1
 8017c1c:	601a      	str	r2, [r3, #0]
}
 8017c1e:	bf00      	nop
 8017c20:	3714      	adds	r7, #20
 8017c22:	46bd      	mov	sp, r7
 8017c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c28:	4770      	bx	lr
 8017c2a:	bf00      	nop
 8017c2c:	0801c3c4 	.word	0x0801c3c4

08017c30 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8017c30:	b480      	push	{r7}
 8017c32:	b08d      	sub	sp, #52	; 0x34
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	4603      	mov	r3, r0
 8017c38:	6039      	str	r1, [r7, #0]
 8017c3a:	71fb      	strb	r3, [r7, #7]
 8017c3c:	4613      	mov	r3, r2
 8017c3e:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017c40:	79fb      	ldrb	r3, [r7, #7]
 8017c42:	4a27      	ldr	r2, [pc, #156]	; (8017ce0 <read_fifo_packet+0xb0>)
 8017c44:	011b      	lsls	r3, r3, #4
 8017c46:	4413      	add	r3, r2
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t * rx_fifo = dwc2->fifo[0];
 8017c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017c52:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8017c54:	88bb      	ldrh	r3, [r7, #4]
 8017c56:	089b      	lsrs	r3, r3, #2
 8017c58:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while(full_words--)
 8017c5a:	e00b      	b.n	8017c74 <read_fifo_packet+0x44>
  {
    tu_unaligned_write32(dst, *rx_fifo);
 8017c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	683a      	ldr	r2, [r7, #0]
 8017c62:	61ba      	str	r2, [r7, #24]
 8017c64:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8017c66:	69bb      	ldr	r3, [r7, #24]
 8017c68:	697a      	ldr	r2, [r7, #20]
 8017c6a:	601a      	str	r2, [r3, #0]
 8017c6c:	bf00      	nop
    dst += 4;
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	3304      	adds	r3, #4
 8017c72:	603b      	str	r3, [r7, #0]
  while(full_words--)
 8017c74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017c76:	1e5a      	subs	r2, r3, #1
 8017c78:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d1ee      	bne.n	8017c5c <read_fifo_packet+0x2c>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 8017c7e:	88bb      	ldrh	r3, [r7, #4]
 8017c80:	b2db      	uxtb	r3, r3
 8017c82:	f003 0303 	and.w	r3, r3, #3
 8017c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ( bytes_rem != 0 )
 8017c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d020      	beq.n	8017cd4 <read_fifo_packet+0xa4>
  {
    uint32_t const tmp = *rx_fifo;
 8017c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	61fb      	str	r3, [r7, #28]
 8017c98:	69fb      	ldr	r3, [r7, #28]
 8017c9a:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8017c9c:	693b      	ldr	r3, [r7, #16]
 8017c9e:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	701a      	strb	r2, [r3, #0]
    if ( bytes_rem > 1 ) dst[1] = tu_u32_byte1(tmp);
 8017ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017ca8:	2b01      	cmp	r3, #1
 8017caa:	d907      	bls.n	8017cbc <read_fifo_packet+0x8c>
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	3301      	adds	r3, #1
 8017cb0:	69fa      	ldr	r2, [r7, #28]
 8017cb2:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8017cb4:	68fa      	ldr	r2, [r7, #12]
 8017cb6:	0a12      	lsrs	r2, r2, #8
 8017cb8:	b2d2      	uxtb	r2, r2
 8017cba:	701a      	strb	r2, [r3, #0]
    if ( bytes_rem > 2 ) dst[2] = tu_u32_byte2(tmp);
 8017cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cc0:	2b02      	cmp	r3, #2
 8017cc2:	d907      	bls.n	8017cd4 <read_fifo_packet+0xa4>
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	3302      	adds	r3, #2
 8017cc8:	69fa      	ldr	r2, [r7, #28]
 8017cca:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8017ccc:	68ba      	ldr	r2, [r7, #8]
 8017cce:	0c12      	lsrs	r2, r2, #16
 8017cd0:	b2d2      	uxtb	r2, r2
 8017cd2:	701a      	strb	r2, [r3, #0]
  }
}
 8017cd4:	bf00      	nop
 8017cd6:	3734      	adds	r7, #52	; 0x34
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cde:	4770      	bx	lr
 8017ce0:	0801c3c4 	.word	0x0801c3c4

08017ce4 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const * src, uint16_t len)
{
 8017ce4:	b480      	push	{r7}
 8017ce6:	b089      	sub	sp, #36	; 0x24
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	603a      	str	r2, [r7, #0]
 8017cec:	461a      	mov	r2, r3
 8017cee:	4603      	mov	r3, r0
 8017cf0:	71fb      	strb	r3, [r7, #7]
 8017cf2:	460b      	mov	r3, r1
 8017cf4:	71bb      	strb	r3, [r7, #6]
 8017cf6:	4613      	mov	r3, r2
 8017cf8:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017cfa:	79fb      	ldrb	r3, [r7, #7]
 8017cfc:	4a23      	ldr	r2, [pc, #140]	; (8017d8c <write_fifo_packet+0xa8>)
 8017cfe:	011b      	lsls	r3, r3, #4
 8017d00:	4413      	add	r3, r2
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	617b      	str	r3, [r7, #20]
  volatile uint32_t * tx_fifo = dwc2->fifo[fifo_num];
 8017d06:	79bb      	ldrb	r3, [r7, #6]
 8017d08:	3301      	adds	r3, #1
 8017d0a:	031b      	lsls	r3, r3, #12
 8017d0c:	697a      	ldr	r2, [r7, #20]
 8017d0e:	4413      	add	r3, r2
 8017d10:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8017d12:	88bb      	ldrh	r3, [r7, #4]
 8017d14:	089b      	lsrs	r3, r3, #2
 8017d16:	83fb      	strh	r3, [r7, #30]
  while(full_words--)
 8017d18:	e008      	b.n	8017d2c <write_fifo_packet+0x48>
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8017d1e:	68bb      	ldr	r3, [r7, #8]
 8017d20:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(src);
 8017d22:	693b      	ldr	r3, [r7, #16]
 8017d24:	601a      	str	r2, [r3, #0]
    src += 4;
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	3304      	adds	r3, #4
 8017d2a:	603b      	str	r3, [r7, #0]
  while(full_words--)
 8017d2c:	8bfb      	ldrh	r3, [r7, #30]
 8017d2e:	1e5a      	subs	r2, r3, #1
 8017d30:	83fa      	strh	r2, [r7, #30]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d1f1      	bne.n	8017d1a <write_fifo_packet+0x36>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 8017d36:	88bb      	ldrh	r3, [r7, #4]
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	f003 0303 	and.w	r3, r3, #3
 8017d3e:	73fb      	strb	r3, [r7, #15]
  if ( bytes_rem )
 8017d40:	7bfb      	ldrb	r3, [r7, #15]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d01b      	beq.n	8017d7e <write_fifo_packet+0x9a>
  {
    uint32_t tmp_word = src[0];
 8017d46:	683b      	ldr	r3, [r7, #0]
 8017d48:	781b      	ldrb	r3, [r3, #0]
 8017d4a:	61bb      	str	r3, [r7, #24]
    if ( bytes_rem > 1 ) tmp_word |= (src[1] << 8);
 8017d4c:	7bfb      	ldrb	r3, [r7, #15]
 8017d4e:	2b01      	cmp	r3, #1
 8017d50:	d907      	bls.n	8017d62 <write_fifo_packet+0x7e>
 8017d52:	683b      	ldr	r3, [r7, #0]
 8017d54:	3301      	adds	r3, #1
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	021b      	lsls	r3, r3, #8
 8017d5a:	461a      	mov	r2, r3
 8017d5c:	69bb      	ldr	r3, [r7, #24]
 8017d5e:	4313      	orrs	r3, r2
 8017d60:	61bb      	str	r3, [r7, #24]
    if ( bytes_rem > 2 ) tmp_word |= (src[2] << 16);
 8017d62:	7bfb      	ldrb	r3, [r7, #15]
 8017d64:	2b02      	cmp	r3, #2
 8017d66:	d907      	bls.n	8017d78 <write_fifo_packet+0x94>
 8017d68:	683b      	ldr	r3, [r7, #0]
 8017d6a:	3302      	adds	r3, #2
 8017d6c:	781b      	ldrb	r3, [r3, #0]
 8017d6e:	041b      	lsls	r3, r3, #16
 8017d70:	461a      	mov	r2, r3
 8017d72:	69bb      	ldr	r3, [r7, #24]
 8017d74:	4313      	orrs	r3, r2
 8017d76:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	69ba      	ldr	r2, [r7, #24]
 8017d7c:	601a      	str	r2, [r3, #0]
  }
}
 8017d7e:	bf00      	nop
 8017d80:	3724      	adds	r7, #36	; 0x24
 8017d82:	46bd      	mov	sp, r7
 8017d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d88:	4770      	bx	lr
 8017d8a:	bf00      	nop
 8017d8c:	0801c3c4 	.word	0x0801c3c4

08017d90 <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b08c      	sub	sp, #48	; 0x30
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	4603      	mov	r3, r0
 8017d98:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017d9a:	79fb      	ldrb	r3, [r7, #7]
 8017d9c:	4a5d      	ldr	r2, [pc, #372]	; (8017f14 <handle_rxflvl_irq+0x184>)
 8017d9e:	011b      	lsls	r3, r3, #4
 8017da0:	4413      	add	r3, r2
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const * rx_fifo = dwc2->fifo[0];
 8017da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017dac:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 8017dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db0:	6a1b      	ldr	r3, [r3, #32]
 8017db2:	623b      	str	r3, [r7, #32]
  uint8_t  const pktsts   = (ctl_word & GRXSTSP_PKTSTS_Msk ) >> GRXSTSP_PKTSTS_Pos;
 8017db4:	6a3b      	ldr	r3, [r7, #32]
 8017db6:	0c5b      	lsrs	r3, r3, #17
 8017db8:	b2db      	uxtb	r3, r3
 8017dba:	f003 030f 	and.w	r3, r3, #15
 8017dbe:	77fb      	strb	r3, [r7, #31]
  uint8_t  const epnum    = (ctl_word & GRXSTSP_EPNUM_Msk  ) >> GRXSTSP_EPNUM_Pos;
 8017dc0:	6a3b      	ldr	r3, [r7, #32]
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	f003 030f 	and.w	r3, r3, #15
 8017dc8:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt     = (ctl_word & GRXSTSP_BCNT_Msk   ) >> GRXSTSP_BCNT_Pos;
 8017dca:	6a3b      	ldr	r3, [r7, #32]
 8017dcc:	091b      	lsrs	r3, r3, #4
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017dd4:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 8017dd6:	7fbb      	ldrb	r3, [r7, #30]
 8017dd8:	3358      	adds	r3, #88	; 0x58
 8017dda:	015b      	lsls	r3, r3, #5
 8017ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017dde:	4413      	add	r3, r2
 8017de0:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch ( pktsts )
 8017de2:	7ffb      	ldrb	r3, [r7, #31]
 8017de4:	3b01      	subs	r3, #1
 8017de6:	2b05      	cmp	r3, #5
 8017de8:	d87e      	bhi.n	8017ee8 <handle_rxflvl_irq+0x158>
 8017dea:	a201      	add	r2, pc, #4	; (adr r2, 8017df0 <handle_rxflvl_irq+0x60>)
 8017dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017df0:	08017efd 	.word	0x08017efd
 8017df4:	08017e29 	.word	0x08017e29
 8017df8:	08017ea3 	.word	0x08017ea3
 8017dfc:	08017e1b 	.word	0x08017e1b
 8017e00:	08017ee9 	.word	0x08017ee9
 8017e04:	08017e09 	.word	0x08017e09
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 8017e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	4a42      	ldr	r2, [pc, #264]	; (8017f18 <handle_rxflvl_irq+0x188>)
 8017e0e:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 8017e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	4a40      	ldr	r2, [pc, #256]	; (8017f18 <handle_rxflvl_irq+0x188>)
 8017e16:	6053      	str	r3, [r2, #4]
    break;
 8017e18:	e077      	b.n	8017f0a <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8017e1a:	69bb      	ldr	r3, [r7, #24]
 8017e1c:	691b      	ldr	r3, [r3, #16]
 8017e1e:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8017e22:	69bb      	ldr	r3, [r7, #24]
 8017e24:	611a      	str	r2, [r3, #16]
    break;
 8017e26:	e070      	b.n	8017f0a <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_OUTRX:
    {
      // Out packet received
      xfer_ctl_t *xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8017e28:	7fbb      	ldrb	r3, [r7, #30]
 8017e2a:	015b      	lsls	r3, r3, #5
 8017e2c:	4a3b      	ldr	r2, [pc, #236]	; (8017f1c <handle_rxflvl_irq+0x18c>)
 8017e2e:	4413      	add	r3, r2
 8017e30:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if ( xfer->ff )
 8017e32:	693b      	ldr	r3, [r7, #16]
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d007      	beq.n	8017e4a <handle_rxflvl_irq+0xba>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	685b      	ldr	r3, [r3, #4]
 8017e3e:	8bba      	ldrh	r2, [r7, #28]
 8017e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e42:	4618      	mov	r0, r3
 8017e44:	f7fd f90a 	bl	801505c <tu_fifo_write_n_const_addr_full_words>
 8017e48:	e00c      	b.n	8017e64 <handle_rxflvl_irq+0xd4>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8017e4a:	693b      	ldr	r3, [r7, #16]
 8017e4c:	6819      	ldr	r1, [r3, #0]
 8017e4e:	8bba      	ldrh	r2, [r7, #28]
 8017e50:	79fb      	ldrb	r3, [r7, #7]
 8017e52:	4618      	mov	r0, r3
 8017e54:	f7ff feec 	bl	8017c30 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8017e58:	693b      	ldr	r3, [r7, #16]
 8017e5a:	681a      	ldr	r2, [r3, #0]
 8017e5c:	8bbb      	ldrh	r3, [r7, #28]
 8017e5e:	441a      	add	r2, r3
 8017e60:	693b      	ldr	r3, [r7, #16]
 8017e62:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if ( bcnt < xfer->max_size )
 8017e64:	693b      	ldr	r3, [r7, #16]
 8017e66:	895b      	ldrh	r3, [r3, #10]
 8017e68:	8bba      	ldrh	r2, [r7, #28]
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d248      	bcs.n	8017f00 <handle_rxflvl_irq+0x170>
      {
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8017e6e:	69bb      	ldr	r3, [r7, #24]
 8017e70:	691b      	ldr	r3, [r3, #16]
 8017e72:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8017e76:	693b      	ldr	r3, [r7, #16]
 8017e78:	891a      	ldrh	r2, [r3, #8]
 8017e7a:	b28b      	uxth	r3, r1
 8017e7c:	1ad3      	subs	r3, r2, r3
 8017e7e:	b29a      	uxth	r2, r3
 8017e80:	693b      	ldr	r3, [r7, #16]
 8017e82:	811a      	strh	r2, [r3, #8]
        if ( epnum == 0 )
 8017e84:	7fbb      	ldrb	r3, [r7, #30]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d13a      	bne.n	8017f00 <handle_rxflvl_irq+0x170>
        {
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	891a      	ldrh	r2, [r3, #8]
 8017e8e:	4b24      	ldr	r3, [pc, #144]	; (8017f20 <handle_rxflvl_irq+0x190>)
 8017e90:	881b      	ldrh	r3, [r3, #0]
 8017e92:	1ad3      	subs	r3, r2, r3
 8017e94:	b29a      	uxth	r2, r3
 8017e96:	693b      	ldr	r3, [r7, #16]
 8017e98:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8017e9a:	4b21      	ldr	r3, [pc, #132]	; (8017f20 <handle_rxflvl_irq+0x190>)
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 8017ea0:	e02e      	b.n	8017f00 <handle_rxflvl_irq+0x170>
        // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
        // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
        // XFRC complete is additionally generated when
        // - setup packet is received
        // - complete the data stage of control write is complete
        if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8017ea2:	7fbb      	ldrb	r3, [r7, #30]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d12d      	bne.n	8017f04 <handle_rxflvl_irq+0x174>
 8017ea8:	8bbb      	ldrh	r3, [r7, #28]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d12a      	bne.n	8017f04 <handle_rxflvl_irq+0x174>
 8017eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eb2:	4a1c      	ldr	r2, [pc, #112]	; (8017f24 <handle_rxflvl_irq+0x194>)
 8017eb4:	4293      	cmp	r3, r2
 8017eb6:	d925      	bls.n	8017f04 <handle_rxflvl_irq+0x174>
        {
          uint32_t doepint = epout->doepint;
 8017eb8:	69bb      	ldr	r3, [r7, #24]
 8017eba:	689b      	ldr	r3, [r3, #8]
 8017ebc:	617b      	str	r3, [r7, #20]

          if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR))
 8017ebe:	697a      	ldr	r2, [r7, #20]
 8017ec0:	f248 0320 	movw	r3, #32800	; 0x8020
 8017ec4:	4013      	ands	r3, r2
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d01c      	beq.n	8017f04 <handle_rxflvl_irq+0x174>
          {
            // skip this "no-data" transfer complete event
            // Note: STPKTRX will be clear later by setup received handler
            uint32_t clear_flags = DOEPINT_XFRC;
 8017eca:	2301      	movs	r3, #1
 8017ecc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 8017ece:	697b      	ldr	r3, [r7, #20]
 8017ed0:	f003 0320 	and.w	r3, r3, #32
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d003      	beq.n	8017ee0 <handle_rxflvl_irq+0x150>
 8017ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eda:	f043 0320 	orr.w	r3, r3, #32
 8017ede:	62fb      	str	r3, [r7, #44]	; 0x2c

            epout->doepint = clear_flags;
 8017ee0:	69bb      	ldr	r3, [r7, #24]
 8017ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ee4:	609a      	str	r2, [r3, #8]

            // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
          }
        }
    break;
 8017ee6:	e00d      	b.n	8017f04 <handle_rxflvl_irq+0x174>

    default:    // Invalid
      TU_BREAKPOINT();
 8017ee8:	4b0f      	ldr	r3, [pc, #60]	; (8017f28 <handle_rxflvl_irq+0x198>)
 8017eea:	60fb      	str	r3, [r7, #12]
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f003 0301 	and.w	r3, r3, #1
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d007      	beq.n	8017f08 <handle_rxflvl_irq+0x178>
 8017ef8:	be00      	bkpt	0x0000
    break;
 8017efa:	e005      	b.n	8017f08 <handle_rxflvl_irq+0x178>
    case GRXSTS_PKTSTS_GLOBALOUTNAK: break;
 8017efc:	bf00      	nop
 8017efe:	e004      	b.n	8017f0a <handle_rxflvl_irq+0x17a>
    break;
 8017f00:	bf00      	nop
 8017f02:	e002      	b.n	8017f0a <handle_rxflvl_irq+0x17a>
    break;
 8017f04:	bf00      	nop
 8017f06:	e000      	b.n	8017f0a <handle_rxflvl_irq+0x17a>
    break;
 8017f08:	bf00      	nop
  }
}
 8017f0a:	bf00      	nop
 8017f0c:	3730      	adds	r7, #48	; 0x30
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
 8017f12:	bf00      	nop
 8017f14:	0801c3c4 	.word	0x0801c3c4
 8017f18:	24002c78 	.word	0x24002c78
 8017f1c:	24002c80 	.word	0x24002c80
 8017f20:	24002da0 	.word	0x24002da0
 8017f24:	4f543009 	.word	0x4f543009
 8017f28:	e000edf0 	.word	0xe000edf0

08017f2c <handle_epout_irq>:

static void handle_epout_irq (uint8_t rhport)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b096      	sub	sp, #88	; 0x58
 8017f30:	af02      	add	r7, sp, #8
 8017f32:	4603      	mov	r3, r0
 8017f34:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8017f36:	79fb      	ldrb	r3, [r7, #7]
 8017f38:	4a60      	ldr	r2, [pc, #384]	; (80180bc <handle_epout_irq+0x190>)
 8017f3a:	011b      	lsls	r3, r3, #4
 8017f3c:	4413      	add	r3, r2
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8017f42:	79fb      	ldrb	r3, [r7, #7]
 8017f44:	4a5d      	ldr	r2, [pc, #372]	; (80180bc <handle_epout_irq+0x190>)
 8017f46:	011b      	lsls	r3, r3, #4
 8017f48:	4413      	add	r3, r2
 8017f4a:	3308      	adds	r3, #8
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < ep_count; n++ )
 8017f52:	2300      	movs	r3, #0
 8017f54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8017f58:	e0a4      	b.n	80180a4 <handle_epout_irq+0x178>
  {
    if ( dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n) )
 8017f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f5c:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8017f60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017f64:	3310      	adds	r3, #16
 8017f66:	fa22 f303 	lsr.w	r3, r2, r3
 8017f6a:	f003 0301 	and.w	r3, r3, #1
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	f000 8093 	beq.w	801809a <handle_epout_irq+0x16e>
    {
      dwc2_epout_t* epout = &dwc2->epout[n];
 8017f74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017f78:	3358      	adds	r3, #88	; 0x58
 8017f7a:	015b      	lsls	r3, r3, #5
 8017f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f7e:	4413      	add	r3, r2
 8017f80:	63fb      	str	r3, [r7, #60]	; 0x3c

      uint32_t const doepint = epout->doepint;
 8017f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017f84:	689b      	ldr	r3, [r3, #8]
 8017f86:	63bb      	str	r3, [r7, #56]	; 0x38

      // SETUP packet Setup Phase done.
      if ( doepint & DOEPINT_STUP )
 8017f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f8a:	f003 0308 	and.w	r3, r3, #8
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d034      	beq.n	8017ffc <handle_epout_irq+0xd0>
      {
        uint32_t clear_flag = DOEPINT_STUP;
 8017f92:	2308      	movs	r3, #8
 8017f94:	64bb      	str	r3, [r7, #72]	; 0x48

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8017f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d008      	beq.n	8017fb2 <handle_epout_irq+0x86>
 8017fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fa4:	4a46      	ldr	r2, [pc, #280]	; (80180c0 <handle_epout_irq+0x194>)
 8017fa6:	4293      	cmp	r3, r2
 8017fa8:	d903      	bls.n	8017fb2 <handle_epout_irq+0x86>
        {
          clear_flag |= DOEPINT_STPKTRX;
 8017faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017fb0:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        epout->doepint = clear_flag;
 8017fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017fb6:	609a      	str	r2, [r3, #8]
 8017fb8:	79fb      	ldrb	r3, [r7, #7]
 8017fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8017fbe:	4b41      	ldr	r3, [pc, #260]	; (80180c4 <handle_epout_irq+0x198>)
 8017fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fc2:	2301      	movs	r3, #1
 8017fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8017fc8:	f107 0314 	add.w	r3, r7, #20
 8017fcc:	2200      	movs	r2, #0
 8017fce:	601a      	str	r2, [r3, #0]
 8017fd0:	605a      	str	r2, [r3, #4]
 8017fd2:	609a      	str	r2, [r3, #8]
 8017fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017fd8:	753b      	strb	r3, [r7, #20]
 8017fda:	2306      	movs	r3, #6
 8017fdc:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8017fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fe0:	f107 0318 	add.w	r3, r7, #24
 8017fe4:	6810      	ldr	r0, [r2, #0]
 8017fe6:	6851      	ldr	r1, [r2, #4]
 8017fe8:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8017fea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8017fee:	f107 0314 	add.w	r3, r7, #20
 8017ff2:	4611      	mov	r1, r2
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7fd ff79 	bl	8015eec <dcd_event_handler>
}
 8017ffa:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
      }

      // OUT XFER complete
      if ( epout->doepint & DOEPINT_XFRC )
 8017ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ffe:	689b      	ldr	r3, [r3, #8]
 8018000:	f003 0301 	and.w	r3, r3, #1
 8018004:	2b00      	cmp	r3, #0
 8018006:	d048      	beq.n	801809a <handle_epout_irq+0x16e>
      {
        epout->doepint = DOEPINT_XFRC;
 8018008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801800a:	2201      	movs	r2, #1
 801800c:	609a      	str	r2, [r3, #8]

        xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 801800e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018012:	015b      	lsls	r3, r3, #5
 8018014:	4a2c      	ldr	r2, [pc, #176]	; (80180c8 <handle_epout_irq+0x19c>)
 8018016:	4413      	add	r3, r2
 8018018:	637b      	str	r3, [r7, #52]	; 0x34

        // EP0 can only handle one packet
        if ( (n == 0) && ep0_pending[TUSB_DIR_OUT] )
 801801a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801801e:	2b00      	cmp	r3, #0
 8018020:	d10e      	bne.n	8018040 <handle_epout_irq+0x114>
 8018022:	4b2a      	ldr	r3, [pc, #168]	; (80180cc <handle_epout_irq+0x1a0>)
 8018024:	881b      	ldrh	r3, [r3, #0]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d00a      	beq.n	8018040 <handle_epout_irq+0x114>
        {
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 801802a:	4b28      	ldr	r3, [pc, #160]	; (80180cc <handle_epout_irq+0x1a0>)
 801802c:	881b      	ldrh	r3, [r3, #0]
 801802e:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8018032:	79f8      	ldrb	r0, [r7, #7]
 8018034:	9300      	str	r3, [sp, #0]
 8018036:	2301      	movs	r3, #1
 8018038:	2200      	movs	r2, #0
 801803a:	f7fe ff9d 	bl	8016f78 <edpt_schedule_packets>
 801803e:	e02c      	b.n	801809a <handle_epout_irq+0x16e>
        }
        else
        {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8018040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018042:	891b      	ldrh	r3, [r3, #8]
 8018044:	461a      	mov	r2, r3
 8018046:	79fb      	ldrb	r3, [r7, #7]
 8018048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801804c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018050:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8018054:	627a      	str	r2, [r7, #36]	; 0x24
 8018056:	2300      	movs	r3, #0
 8018058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801805c:	2301      	movs	r3, #1
 801805e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8018062:	f107 0308 	add.w	r3, r7, #8
 8018066:	2200      	movs	r2, #0
 8018068:	601a      	str	r2, [r3, #0]
 801806a:	605a      	str	r2, [r3, #4]
 801806c:	609a      	str	r2, [r3, #8]
 801806e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8018072:	723b      	strb	r3, [r7, #8]
 8018074:	2307      	movs	r3, #7
 8018076:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8018078:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801807c:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 801807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018080:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8018082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018086:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8018088:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801808c:	f107 0308 	add.w	r3, r7, #8
 8018090:	4611      	mov	r1, r2
 8018092:	4618      	mov	r0, r3
 8018094:	f7fd ff2a 	bl	8015eec <dcd_event_handler>
}
 8018098:	bf00      	nop
  for ( uint8_t n = 0; n < ep_count; n++ )
 801809a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801809e:	3301      	adds	r3, #1
 80180a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80180a4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80180a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80180ac:	429a      	cmp	r2, r3
 80180ae:	f4ff af54 	bcc.w	8017f5a <handle_epout_irq+0x2e>
        }
      }
    }
  }
}
 80180b2:	bf00      	nop
 80180b4:	bf00      	nop
 80180b6:	3750      	adds	r7, #80	; 0x50
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}
 80180bc:	0801c3c4 	.word	0x0801c3c4
 80180c0:	4f543009 	.word	0x4f543009
 80180c4:	24002c78 	.word	0x24002c78
 80180c8:	24002c80 	.word	0x24002c80
 80180cc:	24002da0 	.word	0x24002da0

080180d0 <handle_epin_irq>:

static void handle_epin_irq (uint8_t rhport)
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b094      	sub	sp, #80	; 0x50
 80180d4:	af02      	add	r7, sp, #8
 80180d6:	4603      	mov	r3, r0
 80180d8:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 80180da:	79fb      	ldrb	r3, [r7, #7]
 80180dc:	4a88      	ldr	r2, [pc, #544]	; (8018300 <handle_epin_irq+0x230>)
 80180de:	011b      	lsls	r3, r3, #4
 80180e0:	4413      	add	r3, r2
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80180e6:	79fb      	ldrb	r3, [r7, #7]
 80180e8:	4a85      	ldr	r2, [pc, #532]	; (8018300 <handle_epin_irq+0x230>)
 80180ea:	011b      	lsls	r3, r3, #4
 80180ec:	4413      	add	r3, r2
 80180ee:	3308      	adds	r3, #8
 80180f0:	781b      	ldrb	r3, [r3, #0]
 80180f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  dwc2_epin_t* epin      = dwc2->epin;
 80180f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80180fc:	63bb      	str	r3, [r7, #56]	; 0x38

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < ep_count; n++ )
 80180fe:	2300      	movs	r3, #0
 8018100:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8018104:	e0f0      	b.n	80182e8 <handle_epin_irq+0x218>
  {
    if ( dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n) )
 8018106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018108:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 801810c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018110:	fa22 f303 	lsr.w	r3, r2, r3
 8018114:	f003 0301 	and.w	r3, r3, #1
 8018118:	2b00      	cmp	r3, #0
 801811a:	f000 80e0 	beq.w	80182de <handle_epin_irq+0x20e>
    {
      // IN XFER complete (entire xfer).
      xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 801811e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018122:	015b      	lsls	r3, r3, #5
 8018124:	3310      	adds	r3, #16
 8018126:	4a77      	ldr	r2, [pc, #476]	; (8018304 <handle_epin_irq+0x234>)
 8018128:	4413      	add	r3, r2
 801812a:	637b      	str	r3, [r7, #52]	; 0x34

      if ( epin[n].diepint & DIEPINT_XFRC )
 801812c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018130:	015b      	lsls	r3, r3, #5
 8018132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018134:	4413      	add	r3, r2
 8018136:	689b      	ldr	r3, [r3, #8]
 8018138:	f003 0301 	and.w	r3, r3, #1
 801813c:	2b00      	cmp	r3, #0
 801813e:	d046      	beq.n	80181ce <handle_epin_irq+0xfe>
      {
        epin[n].diepint = DIEPINT_XFRC;
 8018140:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018144:	015b      	lsls	r3, r3, #5
 8018146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018148:	4413      	add	r3, r2
 801814a:	2201      	movs	r2, #1
 801814c:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ( (n == 0) && ep0_pending[TUSB_DIR_IN] )
 801814e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018152:	2b00      	cmp	r3, #0
 8018154:	d10e      	bne.n	8018174 <handle_epin_irq+0xa4>
 8018156:	4b6c      	ldr	r3, [pc, #432]	; (8018308 <handle_epin_irq+0x238>)
 8018158:	885b      	ldrh	r3, [r3, #2]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d00a      	beq.n	8018174 <handle_epin_irq+0xa4>
        {
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 801815e:	4b6a      	ldr	r3, [pc, #424]	; (8018308 <handle_epin_irq+0x238>)
 8018160:	885b      	ldrh	r3, [r3, #2]
 8018162:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8018166:	79f8      	ldrb	r0, [r7, #7]
 8018168:	9300      	str	r3, [sp, #0]
 801816a:	2301      	movs	r3, #1
 801816c:	2201      	movs	r2, #1
 801816e:	f7fe ff03 	bl	8016f78 <edpt_schedule_packets>
 8018172:	e02c      	b.n	80181ce <handle_epin_irq+0xfe>
        }
        else
        {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8018174:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801817c:	b2d9      	uxtb	r1, r3
 801817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018180:	891b      	ldrh	r3, [r3, #8]
 8018182:	461a      	mov	r2, r3
 8018184:	79fb      	ldrb	r3, [r7, #7]
 8018186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801818a:	460b      	mov	r3, r1
 801818c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018190:	623a      	str	r2, [r7, #32]
 8018192:	2300      	movs	r3, #0
 8018194:	77fb      	strb	r3, [r7, #31]
 8018196:	2301      	movs	r3, #1
 8018198:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 801819a:	f107 030c 	add.w	r3, r7, #12
 801819e:	2200      	movs	r2, #0
 80181a0:	601a      	str	r2, [r3, #0]
 80181a2:	605a      	str	r2, [r3, #4]
 80181a4:	609a      	str	r2, [r3, #8]
 80181a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80181aa:	733b      	strb	r3, [r7, #12]
 80181ac:	2307      	movs	r3, #7
 80181ae:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 80181b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80181b4:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 80181b6:	6a3b      	ldr	r3, [r7, #32]
 80181b8:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 80181ba:	7ffb      	ldrb	r3, [r7, #31]
 80181bc:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 80181be:	7fba      	ldrb	r2, [r7, #30]
 80181c0:	f107 030c 	add.w	r3, r7, #12
 80181c4:	4611      	mov	r1, r2
 80181c6:	4618      	mov	r0, r3
 80181c8:	f7fd fe90 	bl	8015eec <dcd_event_handler>
}
 80181cc:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n)) )
 80181ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80181d2:	015b      	lsls	r3, r3, #5
 80181d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80181d6:	4413      	add	r3, r2
 80181d8:	689b      	ldr	r3, [r3, #8]
 80181da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d07d      	beq.n	80182de <handle_epin_irq+0x20e>
 80181e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80181e4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 80181e8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80181ec:	2101      	movs	r1, #1
 80181ee:	fa01 f202 	lsl.w	r2, r1, r2
 80181f2:	4013      	ands	r3, r2
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d072      	beq.n	80182de <handle_epin_irq+0x20e>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 80181f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80181fc:	015b      	lsls	r3, r3, #5
 80181fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018200:	4413      	add	r3, r2
 8018202:	691b      	ldr	r3, [r3, #16]
 8018204:	0cdb      	lsrs	r3, r3, #19
 8018206:	b29b      	uxth	r3, r3
 8018208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801820c:	867b      	strh	r3, [r7, #50]	; 0x32

        // Process every single packet (only whole packets can be written to fifo)
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 801820e:	2300      	movs	r3, #0
 8018210:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8018214:	e045      	b.n	80182a2 <handle_epin_irq+0x1d2>
        {
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 8018216:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801821a:	015b      	lsls	r3, r3, #5
 801821c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801821e:	4413      	add	r3, r2
 8018220:	691b      	ldr	r3, [r3, #16]
 8018222:	863b      	strh	r3, [r7, #48]	; 0x30

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8018224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018226:	895a      	ldrh	r2, [r3, #10]
 8018228:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801822a:	83bb      	strh	r3, [r7, #28]
 801822c:	4613      	mov	r3, r2
 801822e:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8018230:	8bba      	ldrh	r2, [r7, #28]
 8018232:	8b7b      	ldrh	r3, [r7, #26]
 8018234:	4293      	cmp	r3, r2
 8018236:	bf28      	it	cs
 8018238:	4613      	movcs	r3, r2
 801823a:	b29b      	uxth	r3, r3
 801823c:	85fb      	strh	r3, [r7, #46]	; 0x2e

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 801823e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018244:	015b      	lsls	r3, r3, #5
 8018246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018248:	440b      	add	r3, r1
 801824a:	699b      	ldr	r3, [r3, #24]
 801824c:	0099      	lsls	r1, r3, #2
 801824e:	4b2f      	ldr	r3, [pc, #188]	; (801830c <handle_epin_irq+0x23c>)
 8018250:	400b      	ands	r3, r1
 8018252:	429a      	cmp	r2, r3
 8018254:	d82b      	bhi.n	80182ae <handle_epin_irq+0x1de>

          // Push packet to Tx-FIFO
          if ( xfer->ff )
 8018256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018258:	685b      	ldr	r3, [r3, #4]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d00e      	beq.n	801827c <handle_epin_irq+0x1ac>
          {
            volatile uint32_t *tx_fifo = dwc2->fifo[n];
 801825e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018262:	3301      	adds	r3, #1
 8018264:	031b      	lsls	r3, r3, #12
 8018266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018268:	4413      	add	r3, r2
 801826a:	62bb      	str	r3, [r7, #40]	; 0x28
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 801826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018274:	4618      	mov	r0, r3
 8018276:	f7fc fe8a 	bl	8014f8e <tu_fifo_read_n_const_addr_full_words>
 801827a:	e00d      	b.n	8018298 <handle_epin_irq+0x1c8>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 801827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801827e:	681a      	ldr	r2, [r3, #0]
 8018280:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018282:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8018286:	79f8      	ldrb	r0, [r7, #7]
 8018288:	f7ff fd2c 	bl	8017ce4 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 801828c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801828e:	681a      	ldr	r2, [r3, #0]
 8018290:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018292:	441a      	add	r2, r3
 8018294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018296:	601a      	str	r2, [r3, #0]
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 8018298:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801829c:	3301      	adds	r3, #1
 801829e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80182a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80182a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d3b4      	bcc.n	8018216 <handle_epin_irq+0x146>
 80182ac:	e000      	b.n	80182b0 <handle_epin_irq+0x1e0>
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 80182ae:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if ( ((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0 )
 80182b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80182b4:	015b      	lsls	r3, r3, #5
 80182b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80182b8:	4413      	add	r3, r2
 80182ba:	691b      	ldr	r3, [r3, #16]
 80182bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d10c      	bne.n	80182de <handle_epin_irq+0x20e>
        {
          dwc2->diepempmsk &= ~(1 << n);
 80182c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182c6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 80182ca:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80182ce:	2101      	movs	r1, #1
 80182d0:	fa01 f202 	lsl.w	r2, r1, r2
 80182d4:	43d2      	mvns	r2, r2
 80182d6:	401a      	ands	r2, r3
 80182d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182da:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for ( uint8_t n = 0; n < ep_count; n++ )
 80182de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80182e2:	3301      	adds	r3, #1
 80182e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80182e8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80182ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80182f0:	429a      	cmp	r2, r3
 80182f2:	f4ff af08 	bcc.w	8018106 <handle_epin_irq+0x36>
        }
      }
    }
  }
}
 80182f6:	bf00      	nop
 80182f8:	bf00      	nop
 80182fa:	3748      	adds	r7, #72	; 0x48
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bd80      	pop	{r7, pc}
 8018300:	0801c3c4 	.word	0x0801c3c4
 8018304:	24002c80 	.word	0x24002c80
 8018308:	24002da0 	.word	0x24002da0
 801830c:	0003fffc 	.word	0x0003fffc

08018310 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b09c      	sub	sp, #112	; 0x70
 8018314:	af00      	add	r7, sp, #0
 8018316:	4603      	mov	r3, r0
 8018318:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 801831a:	79fb      	ldrb	r3, [r7, #7]
 801831c:	4aaa      	ldr	r2, [pc, #680]	; (80185c8 <dcd_int_handler+0x2b8>)
 801831e:	011b      	lsls	r3, r3, #4
 8018320:	4413      	add	r3, r2
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	66bb      	str	r3, [r7, #104]	; 0x68

  uint32_t const int_mask = dwc2->gintmsk;
 8018326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018328:	699b      	ldr	r3, [r3, #24]
 801832a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t const int_status = dwc2->gintsts & int_mask;
 801832c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801832e:	695b      	ldr	r3, [r3, #20]
 8018330:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018332:	4013      	ands	r3, r2
 8018334:	663b      	str	r3, [r7, #96]	; 0x60

  if(int_status & GINTSTS_USBRST)
 8018336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801833c:	2b00      	cmp	r3, #0
 801833e:	d007      	beq.n	8018350 <dcd_int_handler+0x40>
  {
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8018340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018342:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018346:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8018348:	79fb      	ldrb	r3, [r7, #7]
 801834a:	4618      	mov	r0, r3
 801834c:	f7fe fd84 	bl	8016e58 <bus_reset>
  }

  if(int_status & GINTSTS_ENUMDNE)
 8018350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018356:	2b00      	cmp	r3, #0
 8018358:	d03b      	beq.n	80183d2 <dcd_int_handler+0xc2>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    dwc2->gintsts = GINTSTS_ENUMDNE;
 801835a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801835c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018360:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos)
 8018362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018364:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8018368:	085b      	lsrs	r3, r3, #1
 801836a:	f003 0303 	and.w	r3, r3, #3
 801836e:	2b00      	cmp	r3, #0
 8018370:	d002      	beq.n	8018378 <dcd_int_handler+0x68>
 8018372:	2b02      	cmp	r3, #2
 8018374:	d004      	beq.n	8018380 <dcd_int_handler+0x70>
 8018376:	e007      	b.n	8018388 <dcd_int_handler+0x78>
    {
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 8018378:	2302      	movs	r3, #2
 801837a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 801837e:	e007      	b.n	8018390 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 8018380:	2301      	movs	r3, #1
 8018382:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8018386:	e003      	b.n	8018390 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 8018388:	2300      	movs	r3, #0
 801838a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 801838e:	bf00      	nop
 8018390:	79fb      	ldrb	r3, [r7, #7]
 8018392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8018396:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801839a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 801839e:	2301      	movs	r3, #1
 80183a0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 80183a4:	f107 0318 	add.w	r3, r7, #24
 80183a8:	2200      	movs	r2, #0
 80183aa:	601a      	str	r2, [r3, #0]
 80183ac:	605a      	str	r2, [r3, #4]
 80183ae:	609a      	str	r2, [r3, #8]
 80183b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80183b4:	763b      	strb	r3, [r7, #24]
 80183b6:	2301      	movs	r3, #1
 80183b8:	767b      	strb	r3, [r7, #25]
  event.bus_reset.speed = speed;
 80183ba:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80183be:	773b      	strb	r3, [r7, #28]
  dcd_event_handler(&event, in_isr);
 80183c0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80183c4:	f107 0318 	add.w	r3, r7, #24
 80183c8:	4611      	mov	r1, r2
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7fd fd8e 	bl	8015eec <dcd_event_handler>
}
 80183d0:	bf00      	nop
    }

    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & GINTSTS_USBSUSP)
 80183d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80183d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d023      	beq.n	8018424 <dcd_int_handler+0x114>
  {
    dwc2->gintsts = GINTSTS_USBSUSP;
 80183dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80183de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80183e2:	615a      	str	r2, [r3, #20]
 80183e4:	79fb      	ldrb	r3, [r7, #7]
 80183e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80183ea:	2304      	movs	r3, #4
 80183ec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80183f0:	2301      	movs	r3, #1
 80183f2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80183f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80183fa:	2200      	movs	r2, #0
 80183fc:	601a      	str	r2, [r3, #0]
 80183fe:	605a      	str	r2, [r3, #4]
 8018400:	609a      	str	r2, [r3, #8]
 8018402:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018406:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801840a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801840e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dcd_event_handler(&event, in_isr);
 8018412:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8018416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801841a:	4611      	mov	r1, r2
 801841c:	4618      	mov	r0, r3
 801841e:	f7fd fd65 	bl	8015eec <dcd_event_handler>
}
 8018422:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & GINTSTS_WKUINT)
 8018424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018426:	2b00      	cmp	r3, #0
 8018428:	da23      	bge.n	8018472 <dcd_int_handler+0x162>
  {
    dwc2->gintsts = GINTSTS_WKUINT;
 801842a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801842c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018430:	615a      	str	r2, [r3, #20]
 8018432:	79fb      	ldrb	r3, [r7, #7]
 8018434:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8018438:	2305      	movs	r3, #5
 801843a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 801843e:	2301      	movs	r3, #1
 8018440:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8018444:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018448:	2200      	movs	r2, #0
 801844a:	601a      	str	r2, [r3, #0]
 801844c:	605a      	str	r2, [r3, #4]
 801844e:	609a      	str	r2, [r3, #8]
 8018450:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8018454:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8018458:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801845c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  dcd_event_handler(&event, in_isr);
 8018460:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8018464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018468:	4611      	mov	r1, r2
 801846a:	4618      	mov	r0, r3
 801846c:	f7fd fd3e 	bl	8015eec <dcd_event_handler>
}
 8018470:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if(int_status & GINTSTS_OTGINT)
 8018472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018474:	f003 0304 	and.w	r3, r3, #4
 8018478:	2b00      	cmp	r3, #0
 801847a:	d028      	beq.n	80184ce <dcd_int_handler+0x1be>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 801847c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801847e:	685b      	ldr	r3, [r3, #4]
 8018480:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (otg_int & GOTGINT_SEDET)
 8018482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018484:	f003 0304 	and.w	r3, r3, #4
 8018488:	2b00      	cmp	r3, #0
 801848a:	d01d      	beq.n	80184c8 <dcd_int_handler+0x1b8>
 801848c:	79fb      	ldrb	r3, [r7, #7]
 801848e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8018492:	2302      	movs	r3, #2
 8018494:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8018498:	2301      	movs	r3, #1
 801849a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 801849e:	f107 030c 	add.w	r3, r7, #12
 80184a2:	2200      	movs	r2, #0
 80184a4:	601a      	str	r2, [r3, #0]
 80184a6:	605a      	str	r2, [r3, #4]
 80184a8:	609a      	str	r2, [r3, #8]
 80184aa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80184ae:	733b      	strb	r3, [r7, #12]
 80184b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80184b4:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 80184b6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80184ba:	f107 030c 	add.w	r3, r7, #12
 80184be:	4611      	mov	r1, r2
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7fd fd13 	bl	8015eec <dcd_event_handler>
}
 80184c6:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 80184c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80184ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80184cc:	605a      	str	r2, [r3, #4]
  }

  if(int_status & GINTSTS_SOF)
 80184ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80184d0:	f003 0308 	and.w	r3, r3, #8
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d03a      	beq.n	801854e <dcd_int_handler+0x23e>
  {
    dwc2->gotgint = GINTSTS_SOF;
 80184d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80184da:	2208      	movs	r2, #8
 80184dc:	605a      	str	r2, [r3, #4]

    if (_sof_en)
 80184de:	4b3b      	ldr	r3, [pc, #236]	; (80185cc <dcd_int_handler+0x2bc>)
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d00d      	beq.n	8018502 <dcd_int_handler+0x1f2>
    {
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 80184e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80184e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80184ec:	0a1b      	lsrs	r3, r3, #8
 80184ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80184f2:	65bb      	str	r3, [r7, #88]	; 0x58
      dcd_event_sof(rhport, frame, true);
 80184f4:	79fb      	ldrb	r3, [r7, #7]
 80184f6:	2201      	movs	r2, #1
 80184f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7fe fb5c 	bl	8016bb8 <dcd_event_sof>
 8018500:	e005      	b.n	801850e <dcd_int_handler+0x1fe>
    }
    else
    {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8018502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018504:	699b      	ldr	r3, [r3, #24]
 8018506:	f023 0208 	bic.w	r2, r3, #8
 801850a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801850c:	619a      	str	r2, [r3, #24]
 801850e:	79fb      	ldrb	r3, [r7, #7]
 8018510:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8018514:	2303      	movs	r3, #3
 8018516:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 801851a:	2301      	movs	r3, #1
 801851c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8018520:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018524:	2200      	movs	r2, #0
 8018526:	601a      	str	r2, [r3, #0]
 8018528:	605a      	str	r2, [r3, #4]
 801852a:	609a      	str	r2, [r3, #8]
 801852c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8018530:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8018534:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8018538:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  dcd_event_handler(&event, in_isr);
 801853c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8018540:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018544:	4611      	mov	r1, r2
 8018546:	4618      	mov	r0, r3
 8018548:	f7fd fcd0 	bl	8015eec <dcd_event_handler>
}
 801854c:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & GINTSTS_RXFLVL)
 801854e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018550:	f003 0310 	and.w	r3, r3, #16
 8018554:	2b00      	cmp	r3, #0
 8018556:	d020      	beq.n	801859a <dcd_int_handler+0x28a>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 8018558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801855a:	699b      	ldr	r3, [r3, #24]
 801855c:	f023 0210 	bic.w	r2, r3, #16
 8018560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018562:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_irq(rhport);
 8018564:	79fb      	ldrb	r3, [r7, #7]
 8018566:	4618      	mov	r0, r3
 8018568:	f7ff fc12 	bl	8017d90 <handle_rxflvl_irq>
    } while(dwc2->gotgint & GINTSTS_RXFLVL);
 801856c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801856e:	685b      	ldr	r3, [r3, #4]
 8018570:	f003 0310 	and.w	r3, r3, #16
 8018574:	2b00      	cmp	r3, #0
 8018576:	d1f5      	bne.n	8018564 <dcd_int_handler+0x254>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8018578:	4b15      	ldr	r3, [pc, #84]	; (80185d0 <dcd_int_handler+0x2c0>)
 801857a:	781b      	ldrb	r3, [r3, #0]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d006      	beq.n	801858e <dcd_int_handler+0x27e>
    {
      update_grxfsiz(rhport);
 8018580:	79fb      	ldrb	r3, [r7, #7]
 8018582:	4618      	mov	r0, r3
 8018584:	f7fe fc26 	bl	8016dd4 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8018588:	4b11      	ldr	r3, [pc, #68]	; (80185d0 <dcd_int_handler+0x2c0>)
 801858a:	2200      	movs	r2, #0
 801858c:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 801858e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018590:	699b      	ldr	r3, [r3, #24]
 8018592:	f043 0210 	orr.w	r2, r3, #16
 8018596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018598:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & GINTSTS_OEPINT)
 801859a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801859c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d003      	beq.n	80185ac <dcd_int_handler+0x29c>
  {
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 80185a4:	79fb      	ldrb	r3, [r7, #7]
 80185a6:	4618      	mov	r0, r3
 80185a8:	f7ff fcc0 	bl	8017f2c <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if(int_status & GINTSTS_IEPINT)
 80185ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80185ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d003      	beq.n	80185be <dcd_int_handler+0x2ae>
  {
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 80185b6:	79fb      	ldrb	r3, [r7, #7]
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7ff fd89 	bl	80180d0 <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 80185be:	bf00      	nop
 80185c0:	3770      	adds	r7, #112	; 0x70
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	0801c3c4 	.word	0x0801c3c4
 80185cc:	24002da7 	.word	0x24002da7
 80185d0:	24002da6 	.word	0x24002da6

080185d4 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 80185d4:	b480      	push	{r7}
 80185d6:	b085      	sub	sp, #20
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
 80185dc:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	781b      	ldrb	r3, [r3, #0]
 80185e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80185e6:	b2db      	uxtb	r3, r3
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d106      	bne.n	80185fa <tu_edpt_claim+0x26>
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80185f4:	b2db      	uxtb	r3, r3
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d001      	beq.n	80185fe <tu_edpt_claim+0x2a>
 80185fa:	2300      	movs	r3, #0
 80185fc:	e01e      	b.n	801863c <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	781b      	ldrb	r3, [r3, #0]
 8018602:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018606:	b2db      	uxtb	r3, r3
 8018608:	2b00      	cmp	r3, #0
 801860a:	d108      	bne.n	801861e <tu_edpt_claim+0x4a>
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	781b      	ldrb	r3, [r3, #0]
 8018610:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018614:	b2db      	uxtb	r3, r3
 8018616:	2b00      	cmp	r3, #0
 8018618:	d101      	bne.n	801861e <tu_edpt_claim+0x4a>
 801861a:	2301      	movs	r3, #1
 801861c:	e000      	b.n	8018620 <tu_edpt_claim+0x4c>
 801861e:	2300      	movs	r3, #0
 8018620:	73fb      	strb	r3, [r7, #15]
 8018622:	7bfb      	ldrb	r3, [r7, #15]
 8018624:	f003 0301 	and.w	r3, r3, #1
 8018628:	73fb      	strb	r3, [r7, #15]
  if (available)
 801862a:	7bfb      	ldrb	r3, [r7, #15]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d004      	beq.n	801863a <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 8018630:	687a      	ldr	r2, [r7, #4]
 8018632:	7813      	ldrb	r3, [r2, #0]
 8018634:	f043 0304 	orr.w	r3, r3, #4
 8018638:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 801863a:	7bfb      	ldrb	r3, [r7, #15]
}
 801863c:	4618      	mov	r0, r3
 801863e:	3714      	adds	r7, #20
 8018640:	46bd      	mov	sp, r7
 8018642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018646:	4770      	bx	lr

08018648 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8018648:	b480      	push	{r7}
 801864a:	b085      	sub	sp, #20
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
 8018650:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	781b      	ldrb	r3, [r3, #0]
 8018656:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801865a:	b2db      	uxtb	r3, r3
 801865c:	2b01      	cmp	r3, #1
 801865e:	d108      	bne.n	8018672 <tu_edpt_release+0x2a>
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018668:	b2db      	uxtb	r3, r3
 801866a:	2b00      	cmp	r3, #0
 801866c:	d101      	bne.n	8018672 <tu_edpt_release+0x2a>
 801866e:	2301      	movs	r3, #1
 8018670:	e000      	b.n	8018674 <tu_edpt_release+0x2c>
 8018672:	2300      	movs	r3, #0
 8018674:	73fb      	strb	r3, [r7, #15]
 8018676:	7bfb      	ldrb	r3, [r7, #15]
 8018678:	f003 0301 	and.w	r3, r3, #1
 801867c:	73fb      	strb	r3, [r7, #15]
  if (ret)
 801867e:	7bfb      	ldrb	r3, [r7, #15]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d004      	beq.n	801868e <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8018684:	687a      	ldr	r2, [r7, #4]
 8018686:	7813      	ldrb	r3, [r2, #0]
 8018688:	f36f 0382 	bfc	r3, #2, #1
 801868c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 801868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018690:	4618      	mov	r0, r3
 8018692:	3714      	adds	r7, #20
 8018694:	46bd      	mov	sp, r7
 8018696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869a:	4770      	bx	lr

0801869c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 801869c:	b480      	push	{r7}
 801869e:	b08b      	sub	sp, #44	; 0x2c
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	6078      	str	r0, [r7, #4]
 80186a4:	460b      	mov	r3, r1
 80186a6:	70fb      	strb	r3, [r7, #3]
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	889b      	ldrh	r3, [r3, #4]
 80186b0:	b29b      	uxth	r3, r3
 80186b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80186b6:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 80186b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	78db      	ldrb	r3, [r3, #3]
 80186be:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80186c2:	b2db      	uxtb	r3, r3
 80186c4:	2b03      	cmp	r3, #3
 80186c6:	d03e      	beq.n	8018746 <tu_edpt_validate+0xaa>
 80186c8:	2b03      	cmp	r3, #3
 80186ca:	dc53      	bgt.n	8018774 <tu_edpt_validate+0xd8>
 80186cc:	2b01      	cmp	r3, #1
 80186ce:	d002      	beq.n	80186d6 <tu_edpt_validate+0x3a>
 80186d0:	2b02      	cmp	r3, #2
 80186d2:	d018      	beq.n	8018706 <tu_edpt_validate+0x6a>
 80186d4:	e04e      	b.n	8018774 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80186d6:	78fb      	ldrb	r3, [r7, #3]
 80186d8:	2b02      	cmp	r3, #2
 80186da:	d102      	bne.n	80186e2 <tu_edpt_validate+0x46>
 80186dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80186e0:	e001      	b.n	80186e6 <tu_edpt_validate+0x4a>
 80186e2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80186e6:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 80186e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80186ea:	8afb      	ldrh	r3, [r7, #22]
 80186ec:	429a      	cmp	r2, r3
 80186ee:	d943      	bls.n	8018778 <tu_edpt_validate+0xdc>
 80186f0:	4b27      	ldr	r3, [pc, #156]	; (8018790 <tu_edpt_validate+0xf4>)
 80186f2:	613b      	str	r3, [r7, #16]
 80186f4:	693b      	ldr	r3, [r7, #16]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	f003 0301 	and.w	r3, r3, #1
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d000      	beq.n	8018702 <tu_edpt_validate+0x66>
 8018700:	be00      	bkpt	0x0000
 8018702:	2300      	movs	r3, #0
 8018704:	e03e      	b.n	8018784 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8018706:	78fb      	ldrb	r3, [r7, #3]
 8018708:	2b02      	cmp	r3, #2
 801870a:	d10e      	bne.n	801872a <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 801870c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801870e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018712:	d033      	beq.n	801877c <tu_edpt_validate+0xe0>
 8018714:	4b1e      	ldr	r3, [pc, #120]	; (8018790 <tu_edpt_validate+0xf4>)
 8018716:	61bb      	str	r3, [r7, #24]
 8018718:	69bb      	ldr	r3, [r7, #24]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	f003 0301 	and.w	r3, r3, #1
 8018720:	2b00      	cmp	r3, #0
 8018722:	d000      	beq.n	8018726 <tu_edpt_validate+0x8a>
 8018724:	be00      	bkpt	0x0000
 8018726:	2300      	movs	r3, #0
 8018728:	e02c      	b.n	8018784 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 801872a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801872c:	2b40      	cmp	r3, #64	; 0x40
 801872e:	d925      	bls.n	801877c <tu_edpt_validate+0xe0>
 8018730:	4b17      	ldr	r3, [pc, #92]	; (8018790 <tu_edpt_validate+0xf4>)
 8018732:	61fb      	str	r3, [r7, #28]
 8018734:	69fb      	ldr	r3, [r7, #28]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	f003 0301 	and.w	r3, r3, #1
 801873c:	2b00      	cmp	r3, #0
 801873e:	d000      	beq.n	8018742 <tu_edpt_validate+0xa6>
 8018740:	be00      	bkpt	0x0000
 8018742:	2300      	movs	r3, #0
 8018744:	e01e      	b.n	8018784 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8018746:	78fb      	ldrb	r3, [r7, #3]
 8018748:	2b02      	cmp	r3, #2
 801874a:	d102      	bne.n	8018752 <tu_edpt_validate+0xb6>
 801874c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018750:	e000      	b.n	8018754 <tu_edpt_validate+0xb8>
 8018752:	2340      	movs	r3, #64	; 0x40
 8018754:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8018756:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801875a:	429a      	cmp	r2, r3
 801875c:	d910      	bls.n	8018780 <tu_edpt_validate+0xe4>
 801875e:	4b0c      	ldr	r3, [pc, #48]	; (8018790 <tu_edpt_validate+0xf4>)
 8018760:	623b      	str	r3, [r7, #32]
 8018762:	6a3b      	ldr	r3, [r7, #32]
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	f003 0301 	and.w	r3, r3, #1
 801876a:	2b00      	cmp	r3, #0
 801876c:	d000      	beq.n	8018770 <tu_edpt_validate+0xd4>
 801876e:	be00      	bkpt	0x0000
 8018770:	2300      	movs	r3, #0
 8018772:	e007      	b.n	8018784 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8018774:	2300      	movs	r3, #0
 8018776:	e005      	b.n	8018784 <tu_edpt_validate+0xe8>
    break;
 8018778:	bf00      	nop
 801877a:	e002      	b.n	8018782 <tu_edpt_validate+0xe6>
    break;
 801877c:	bf00      	nop
 801877e:	e000      	b.n	8018782 <tu_edpt_validate+0xe6>
    break;
 8018780:	bf00      	nop
  }

  return true;
 8018782:	2301      	movs	r3, #1
}
 8018784:	4618      	mov	r0, r3
 8018786:	372c      	adds	r7, #44	; 0x2c
 8018788:	46bd      	mov	sp, r7
 801878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878e:	4770      	bx	lr
 8018790:	e000edf0 	.word	0xe000edf0

08018794 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8018794:	b480      	push	{r7}
 8018796:	b08d      	sub	sp, #52	; 0x34
 8018798:	af00      	add	r7, sp, #0
 801879a:	60f8      	str	r0, [r7, #12]
 801879c:	60b9      	str	r1, [r7, #8]
 801879e:	4611      	mov	r1, r2
 80187a0:	461a      	mov	r2, r3
 80187a2:	460b      	mov	r3, r1
 80187a4:	80fb      	strh	r3, [r7, #6]
 80187a6:	4613      	mov	r3, r2
 80187a8:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 80187aa:	68bb      	ldr	r3, [r7, #8]
 80187ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 80187ae:	88fb      	ldrh	r3, [r7, #6]
 80187b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187b2:	4413      	add	r3, r2
 80187b4:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 80187b6:	e027      	b.n	8018808 <tu_edpt_bind_driver+0x74>
 80187b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ba:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80187bc:	6a3b      	ldr	r3, [r7, #32]
 80187be:	3301      	adds	r3, #1
 80187c0:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80187c2:	2b05      	cmp	r3, #5
 80187c4:	d116      	bne.n	80187f4 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80187c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187c8:	789b      	ldrb	r3, [r3, #2]
 80187ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80187ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187d2:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80187d4:	7fbb      	ldrb	r3, [r7, #30]
 80187d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80187da:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80187dc:	005b      	lsls	r3, r3, #1
 80187de:	68fa      	ldr	r2, [r7, #12]
 80187e0:	4413      	add	r3, r2
 80187e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80187e6:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80187e8:	7ffa      	ldrb	r2, [r7, #31]
 80187ea:	09d2      	lsrs	r2, r2, #7
 80187ec:	b2d2      	uxtb	r2, r2
 80187ee:	4611      	mov	r1, r2
 80187f0:	797a      	ldrb	r2, [r7, #5]
 80187f2:	545a      	strb	r2, [r3, r1]
 80187f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187f6:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80187f8:	69bb      	ldr	r3, [r7, #24]
 80187fa:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	461a      	mov	r2, r3
 8018802:	697b      	ldr	r3, [r7, #20]
 8018804:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8018806:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8018808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801880c:	429a      	cmp	r2, r3
 801880e:	d3d3      	bcc.n	80187b8 <tu_edpt_bind_driver+0x24>
  }
}
 8018810:	bf00      	nop
 8018812:	bf00      	nop
 8018814:	3734      	adds	r7, #52	; 0x34
 8018816:	46bd      	mov	sp, r7
 8018818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881c:	4770      	bx	lr
	...

08018820 <main>:

#include "main.h"
#include "graph2d.h"

int main(void)
{
 8018820:	b590      	push	{r4, r7, lr}
 8018822:	f5ad 5dc3 	sub.w	sp, sp, #6240	; 0x1860
 8018826:	b081      	sub	sp, #4
 8018828:	af04      	add	r7, sp, #16

	if (BSP_BOARD_Init_CM7()) BSP_Error_Handler();
 801882a:	f7e9 f8b7 	bl	800199c <BSP_BOARD_Init_CM7>
 801882e:	4603      	mov	r3, r0
 8018830:	2b00      	cmp	r3, #0
 8018832:	d001      	beq.n	8018838 <main+0x18>
 8018834:	f7e9 f9d2 	bl	8001bdc <BSP_Error_Handler>

	BSP_LCD_Init(LCD_COLOR_MODE_RGB888, LCD_BUFFER_MODE_DOUBLE, C_BLACK, NULL);
 8018838:	2300      	movs	r3, #0
 801883a:	2200      	movs	r2, #0
 801883c:	2102      	movs	r1, #2
 801883e:	2003      	movs	r0, #3
 8018840:	f7ec f888 	bl	8004954 <BSP_LCD_Init>

	// If "Menu_Button" pressed during startup than console switches into USB MSC mode (active until RESET)
	if (BSP_hinputs.buttons.btn_MENU > 0) {
 8018844:	4b6b      	ldr	r3, [pc, #428]	; (80189f4 <main+0x1d4>)
 8018846:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801884a:	2b00      	cmp	r3, #0
 801884c:	d004      	beq.n	8018858 <main+0x38>
		BSP_USB_Init_MSC();
 801884e:	f7ed fe8f 	bl	8006570 <BSP_USB_Init_MSC>
		while (1) BSP_USB_Task();
 8018852:	f7ed fe9d 	bl	8006590 <BSP_USB_Task>
 8018856:	e7fc      	b.n	8018852 <main+0x32>
	}

	// Initialize Backlight
	BSP_LCD_InitBackLight(10);
 8018858:	200a      	movs	r0, #10
 801885a:	f7ec f98d 	bl	8004b78 <BSP_LCD_InitBackLight>
	BSP_LCD_SetBackLight(80, 25);
 801885e:	2119      	movs	r1, #25
 8018860:	2050      	movs	r0, #80	; 0x50
 8018862:	f7ec f9c3 	bl	8004bec <BSP_LCD_SetBackLight>

	// Load resources
	ResCtx_TypeDef resctx = {0};
 8018866:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801886a:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 801886e:	4618      	mov	r0, r3
 8018870:	f641 0350 	movw	r3, #6224	; 0x1850
 8018874:	461a      	mov	r2, r3
 8018876:	2100      	movs	r1, #0
 8018878:	f000 f91f 	bl	8018aba <memset>
	BSP_Res_Init(&resctx, 0xC0000000, 48 * 1024 * 1024);
 801887c:	4b5e      	ldr	r3, [pc, #376]	; (80189f8 <main+0x1d8>)
 801887e:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8018882:	f103 0310 	add.w	r3, r3, #16
 8018886:	443b      	add	r3, r7
 8018888:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 801888c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8018890:	4618      	mov	r0, r3
 8018892:	f7ec fb43 	bl	8004f1c <BSP_Res_Init>
	BSP_Res_Load(&resctx, "/_/wallpaper01.jpg", 0);
 8018896:	4b58      	ldr	r3, [pc, #352]	; (80189f8 <main+0x1d8>)
 8018898:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801889c:	f103 0310 	add.w	r3, r3, #16
 80188a0:	443b      	add	r3, r7
 80188a2:	2200      	movs	r2, #0
 80188a4:	4955      	ldr	r1, [pc, #340]	; (80189fc <main+0x1dc>)
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7ec fba0 	bl	8004fec <BSP_Res_Load>

	G2D_DecodeJPEG(&BSP_hlcd, BSP_Res_GetAddr(&resctx, 0), BSP_Res_GetSize(&resctx, 0));
 80188ac:	4b52      	ldr	r3, [pc, #328]	; (80189f8 <main+0x1d8>)
 80188ae:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80188b2:	f103 0310 	add.w	r3, r3, #16
 80188b6:	443b      	add	r3, r7
 80188b8:	2100      	movs	r1, #0
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7ec fcba 	bl	8005234 <BSP_Res_GetAddr>
 80188c0:	4604      	mov	r4, r0
 80188c2:	4b4d      	ldr	r3, [pc, #308]	; (80189f8 <main+0x1d8>)
 80188c4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80188c8:	f103 0310 	add.w	r3, r3, #16
 80188cc:	443b      	add	r3, r7
 80188ce:	2100      	movs	r1, #0
 80188d0:	4618      	mov	r0, r3
 80188d2:	f7ec fcbf 	bl	8005254 <BSP_Res_GetSize>
 80188d6:	4603      	mov	r3, r0
 80188d8:	461a      	mov	r2, r3
 80188da:	4621      	mov	r1, r4
 80188dc:	4848      	ldr	r0, [pc, #288]	; (8018a00 <main+0x1e0>)
 80188de:	f7ef f8d1 	bl	8007a84 <G2D_DecodeJPEG>
	G2D_DrawLastJPEG(&BSP_hlcd, 0, 0, 0);
 80188e2:	2300      	movs	r3, #0
 80188e4:	2200      	movs	r2, #0
 80188e6:	2100      	movs	r1, #0
 80188e8:	4845      	ldr	r0, [pc, #276]	; (8018a00 <main+0x1e0>)
 80188ea:	f7ef f8b1 	bl	8007a50 <G2D_DrawLastJPEG>

	//G2D_FillFrame(&BSP_hlcd, 0, BSP_LCD_Color(C_RED, 255));

	G2D_DrawIconBlend(&BSP_hlcd, 0, (uint32_t)ICON_128_IMU, 10, 10, BSP_LCD_Color(C_WHITE, 200));
 80188ee:	4c45      	ldr	r4, [pc, #276]	; (8018a04 <main+0x1e4>)
 80188f0:	4b45      	ldr	r3, [pc, #276]	; (8018a08 <main+0x1e8>)
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	21c8      	movs	r1, #200	; 0xc8
 80188f6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80188fa:	4798      	blx	r3
 80188fc:	4603      	mov	r3, r0
 80188fe:	9301      	str	r3, [sp, #4]
 8018900:	230a      	movs	r3, #10
 8018902:	9300      	str	r3, [sp, #0]
 8018904:	230a      	movs	r3, #10
 8018906:	4622      	mov	r2, r4
 8018908:	2100      	movs	r1, #0
 801890a:	483d      	ldr	r0, [pc, #244]	; (8018a00 <main+0x1e0>)
 801890c:	f7ee ffa4 	bl	8007858 <G2D_DrawIconBlend>

	G2D_TextBlend(&BSP_hlcd, 0, 0, 180, FONT_36_verdana, "MiniConsole Test Text", BSP_LCD_Color(C_WHITE, 200));
 8018910:	4b3d      	ldr	r3, [pc, #244]	; (8018a08 <main+0x1e8>)
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	21c8      	movs	r1, #200	; 0xc8
 8018916:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801891a:	4798      	blx	r3
 801891c:	4603      	mov	r3, r0
 801891e:	9302      	str	r3, [sp, #8]
 8018920:	4b3a      	ldr	r3, [pc, #232]	; (8018a0c <main+0x1ec>)
 8018922:	9301      	str	r3, [sp, #4]
 8018924:	4b3a      	ldr	r3, [pc, #232]	; (8018a10 <main+0x1f0>)
 8018926:	9300      	str	r3, [sp, #0]
 8018928:	23b4      	movs	r3, #180	; 0xb4
 801892a:	2200      	movs	r2, #0
 801892c:	2100      	movs	r1, #0
 801892e:	4834      	ldr	r0, [pc, #208]	; (8018a00 <main+0x1e0>)
 8018930:	f7ee feb6 	bl	80076a0 <G2D_TextBlend>

	G2D_DrawFillRoundRectBlend(&BSP_hlcd, 0, 20, 300, 200, 60, 10, BSP_LCD_Color(C_RED, 200));
 8018934:	4b34      	ldr	r3, [pc, #208]	; (8018a08 <main+0x1e8>)
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	21c8      	movs	r1, #200	; 0xc8
 801893a:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 801893e:	4798      	blx	r3
 8018940:	4603      	mov	r3, r0
 8018942:	9303      	str	r3, [sp, #12]
 8018944:	230a      	movs	r3, #10
 8018946:	9302      	str	r3, [sp, #8]
 8018948:	233c      	movs	r3, #60	; 0x3c
 801894a:	9301      	str	r3, [sp, #4]
 801894c:	23c8      	movs	r3, #200	; 0xc8
 801894e:	9300      	str	r3, [sp, #0]
 8018950:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8018954:	2214      	movs	r2, #20
 8018956:	2100      	movs	r1, #0
 8018958:	4829      	ldr	r0, [pc, #164]	; (8018a00 <main+0x1e0>)
 801895a:	f7ee fdad 	bl	80074b8 <G2D_DrawFillRoundRectBlend>
	//G2D_DrawFillRoundRect(&BSP_hlcd, 0, 20, 300, 200, 60, 10, BSP_LCD_Color(C_RED, 255));
	G2D_DrawRoundRect(&BSP_hlcd, 0, 20, 300, 200, 60, 10, BSP_LCD_Color(C_WHITE, 255));
 801895e:	4b2a      	ldr	r3, [pc, #168]	; (8018a08 <main+0x1e8>)
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	21ff      	movs	r1, #255	; 0xff
 8018964:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018968:	4798      	blx	r3
 801896a:	4603      	mov	r3, r0
 801896c:	9303      	str	r3, [sp, #12]
 801896e:	230a      	movs	r3, #10
 8018970:	9302      	str	r3, [sp, #8]
 8018972:	233c      	movs	r3, #60	; 0x3c
 8018974:	9301      	str	r3, [sp, #4]
 8018976:	23c8      	movs	r3, #200	; 0xc8
 8018978:	9300      	str	r3, [sp, #0]
 801897a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801897e:	2214      	movs	r2, #20
 8018980:	2100      	movs	r1, #0
 8018982:	481f      	ldr	r0, [pc, #124]	; (8018a00 <main+0x1e0>)
 8018984:	f7ee fc28 	bl	80071d8 <G2D_DrawRoundRect>

	G2D_DrawFillRectBlend(&BSP_hlcd, 0, 200, 20, 100, 100, BSP_LCD_Color(C_GREEN, 200));
 8018988:	4b1f      	ldr	r3, [pc, #124]	; (8018a08 <main+0x1e8>)
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	21c8      	movs	r1, #200	; 0xc8
 801898e:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8018992:	4798      	blx	r3
 8018994:	4603      	mov	r3, r0
 8018996:	9302      	str	r3, [sp, #8]
 8018998:	2364      	movs	r3, #100	; 0x64
 801899a:	9301      	str	r3, [sp, #4]
 801899c:	2364      	movs	r3, #100	; 0x64
 801899e:	9300      	str	r3, [sp, #0]
 80189a0:	2314      	movs	r3, #20
 80189a2:	22c8      	movs	r2, #200	; 0xc8
 80189a4:	2100      	movs	r1, #0
 80189a6:	4816      	ldr	r0, [pc, #88]	; (8018a00 <main+0x1e0>)
 80189a8:	f7ee fa3c 	bl	8006e24 <G2D_DrawFillRectBlend>
	//G2D_DrawFillRect(&BSP_hlcd, 0, 200, 20, 100, 100, BSP_LCD_Color(C_GREEN, 255));

	G2D_DrawFillCircleBlend(&BSP_hlcd, 0, 400, 100, 80, BSP_LCD_Color(C_BLUE, 200));
 80189ac:	4b16      	ldr	r3, [pc, #88]	; (8018a08 <main+0x1e8>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	21c8      	movs	r1, #200	; 0xc8
 80189b2:	20ff      	movs	r0, #255	; 0xff
 80189b4:	4798      	blx	r3
 80189b6:	4603      	mov	r3, r0
 80189b8:	9301      	str	r3, [sp, #4]
 80189ba:	2350      	movs	r3, #80	; 0x50
 80189bc:	9300      	str	r3, [sp, #0]
 80189be:	2364      	movs	r3, #100	; 0x64
 80189c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80189c4:	2100      	movs	r1, #0
 80189c6:	480e      	ldr	r0, [pc, #56]	; (8018a00 <main+0x1e0>)
 80189c8:	f7ee fb56 	bl	8007078 <G2D_DrawFillCircleBlend>
	//G2D_DrawFillCircle(&BSP_hlcd, 0, 400, 100, 80, BSP_LCD_Color(C_BLUE, 255));
	G2D_DrawCircle(&BSP_hlcd, 0, 400, 100, 80, BSP_LCD_Color(C_WHITE, 255));
 80189cc:	4b0e      	ldr	r3, [pc, #56]	; (8018a08 <main+0x1e8>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	21ff      	movs	r1, #255	; 0xff
 80189d2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80189d6:	4798      	blx	r3
 80189d8:	4603      	mov	r3, r0
 80189da:	9301      	str	r3, [sp, #4]
 80189dc:	2350      	movs	r3, #80	; 0x50
 80189de:	9300      	str	r3, [sp, #0]
 80189e0:	2364      	movs	r3, #100	; 0x64
 80189e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80189e6:	2100      	movs	r1, #0
 80189e8:	4805      	ldr	r0, [pc, #20]	; (8018a00 <main+0x1e0>)
 80189ea:	f7ee fa67 	bl	8006ebc <G2D_DrawCircle>

	BSP_LCD_FrameReady();
 80189ee:	f7ec f877 	bl	8004ae0 <BSP_LCD_FrameReady>


    /* Loop forever */
	for(;;);
 80189f2:	e7fe      	b.n	80189f2 <main+0x1d2>
 80189f4:	38000058 	.word	0x38000058
 80189f8:	ffffe7b0 	.word	0xffffe7b0
 80189fc:	08018f80 	.word	0x08018f80
 8018a00:	24000240 	.word	0x24000240
 8018a04:	08018fac 	.word	0x08018fac
 8018a08:	240002a0 	.word	0x240002a0
 8018a0c:	08018f94 	.word	0x08018f94
 8018a10:	08019438 	.word	0x08019438

08018a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8018a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018a4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8018a18:	f7f9 fe8e 	bl	8012738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8018a1c:	480c      	ldr	r0, [pc, #48]	; (8018a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8018a1e:	490d      	ldr	r1, [pc, #52]	; (8018a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8018a20:	4a0d      	ldr	r2, [pc, #52]	; (8018a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8018a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8018a24:	e002      	b.n	8018a2c <LoopCopyDataInit>

08018a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8018a2a:	3304      	adds	r3, #4

08018a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018a30:	d3f9      	bcc.n	8018a26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018a32:	4a0a      	ldr	r2, [pc, #40]	; (8018a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8018a34:	4c0a      	ldr	r4, [pc, #40]	; (8018a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8018a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018a38:	e001      	b.n	8018a3e <LoopFillZerobss>

08018a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018a3c:	3204      	adds	r2, #4

08018a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018a40:	d3fb      	bcc.n	8018a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8018a42:	f000 f84f 	bl	8018ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018a46:	f7ff feeb 	bl	8018820 <main>
  bx  lr
 8018a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8018a4c:	24020000 	.word	0x24020000
  ldr r0, =_sdata
 8018a50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8018a54:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 8018a58:	0801c42c 	.word	0x0801c42c
  ldr r2, =_sbss
 8018a5c:	24000038 	.word	0x24000038
  ldr r4, =_ebss
 8018a60:	24002da8 	.word	0x24002da8

08018a64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018a64:	e7fe      	b.n	8018a64 <ADC3_IRQHandler>

08018a66 <memcmp>:
 8018a66:	b510      	push	{r4, lr}
 8018a68:	3901      	subs	r1, #1
 8018a6a:	4402      	add	r2, r0
 8018a6c:	4290      	cmp	r0, r2
 8018a6e:	d101      	bne.n	8018a74 <memcmp+0xe>
 8018a70:	2000      	movs	r0, #0
 8018a72:	e005      	b.n	8018a80 <memcmp+0x1a>
 8018a74:	7803      	ldrb	r3, [r0, #0]
 8018a76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018a7a:	42a3      	cmp	r3, r4
 8018a7c:	d001      	beq.n	8018a82 <memcmp+0x1c>
 8018a7e:	1b18      	subs	r0, r3, r4
 8018a80:	bd10      	pop	{r4, pc}
 8018a82:	3001      	adds	r0, #1
 8018a84:	e7f2      	b.n	8018a6c <memcmp+0x6>

08018a86 <memmove>:
 8018a86:	4288      	cmp	r0, r1
 8018a88:	b510      	push	{r4, lr}
 8018a8a:	eb01 0402 	add.w	r4, r1, r2
 8018a8e:	d902      	bls.n	8018a96 <memmove+0x10>
 8018a90:	4284      	cmp	r4, r0
 8018a92:	4623      	mov	r3, r4
 8018a94:	d807      	bhi.n	8018aa6 <memmove+0x20>
 8018a96:	1e43      	subs	r3, r0, #1
 8018a98:	42a1      	cmp	r1, r4
 8018a9a:	d008      	beq.n	8018aae <memmove+0x28>
 8018a9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018aa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018aa4:	e7f8      	b.n	8018a98 <memmove+0x12>
 8018aa6:	4402      	add	r2, r0
 8018aa8:	4601      	mov	r1, r0
 8018aaa:	428a      	cmp	r2, r1
 8018aac:	d100      	bne.n	8018ab0 <memmove+0x2a>
 8018aae:	bd10      	pop	{r4, pc}
 8018ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018ab4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018ab8:	e7f7      	b.n	8018aaa <memmove+0x24>

08018aba <memset>:
 8018aba:	4402      	add	r2, r0
 8018abc:	4603      	mov	r3, r0
 8018abe:	4293      	cmp	r3, r2
 8018ac0:	d100      	bne.n	8018ac4 <memset+0xa>
 8018ac2:	4770      	bx	lr
 8018ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8018ac8:	e7f9      	b.n	8018abe <memset+0x4>

08018aca <strchr>:
 8018aca:	b2c9      	uxtb	r1, r1
 8018acc:	4603      	mov	r3, r0
 8018ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ad2:	b11a      	cbz	r2, 8018adc <strchr+0x12>
 8018ad4:	428a      	cmp	r2, r1
 8018ad6:	d1f9      	bne.n	8018acc <strchr+0x2>
 8018ad8:	4618      	mov	r0, r3
 8018ada:	4770      	bx	lr
 8018adc:	2900      	cmp	r1, #0
 8018ade:	bf18      	it	ne
 8018ae0:	2300      	movne	r3, #0
 8018ae2:	e7f9      	b.n	8018ad8 <strchr+0xe>

08018ae4 <__libc_init_array>:
 8018ae4:	b570      	push	{r4, r5, r6, lr}
 8018ae6:	4d0d      	ldr	r5, [pc, #52]	; (8018b1c <__libc_init_array+0x38>)
 8018ae8:	4c0d      	ldr	r4, [pc, #52]	; (8018b20 <__libc_init_array+0x3c>)
 8018aea:	1b64      	subs	r4, r4, r5
 8018aec:	10a4      	asrs	r4, r4, #2
 8018aee:	2600      	movs	r6, #0
 8018af0:	42a6      	cmp	r6, r4
 8018af2:	d109      	bne.n	8018b08 <__libc_init_array+0x24>
 8018af4:	4d0b      	ldr	r5, [pc, #44]	; (8018b24 <__libc_init_array+0x40>)
 8018af6:	4c0c      	ldr	r4, [pc, #48]	; (8018b28 <__libc_init_array+0x44>)
 8018af8:	f000 f9e6 	bl	8018ec8 <_init>
 8018afc:	1b64      	subs	r4, r4, r5
 8018afe:	10a4      	asrs	r4, r4, #2
 8018b00:	2600      	movs	r6, #0
 8018b02:	42a6      	cmp	r6, r4
 8018b04:	d105      	bne.n	8018b12 <__libc_init_array+0x2e>
 8018b06:	bd70      	pop	{r4, r5, r6, pc}
 8018b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b0c:	4798      	blx	r3
 8018b0e:	3601      	adds	r6, #1
 8018b10:	e7ee      	b.n	8018af0 <__libc_init_array+0xc>
 8018b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b16:	4798      	blx	r3
 8018b18:	3601      	adds	r6, #1
 8018b1a:	e7f2      	b.n	8018b02 <__libc_init_array+0x1e>
 8018b1c:	0801c424 	.word	0x0801c424
 8018b20:	0801c424 	.word	0x0801c424
 8018b24:	0801c424 	.word	0x0801c424
 8018b28:	0801c428 	.word	0x0801c428

08018b2c <memcpy>:
 8018b2c:	440a      	add	r2, r1
 8018b2e:	4291      	cmp	r1, r2
 8018b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8018b34:	d100      	bne.n	8018b38 <memcpy+0xc>
 8018b36:	4770      	bx	lr
 8018b38:	b510      	push	{r4, lr}
 8018b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b42:	4291      	cmp	r1, r2
 8018b44:	d1f9      	bne.n	8018b3a <memcpy+0xe>
 8018b46:	bd10      	pop	{r4, pc}

08018b48 <atan2f>:
 8018b48:	f000 b844 	b.w	8018bd4 <__ieee754_atan2f>

08018b4c <round>:
 8018b4c:	ee10 1a90 	vmov	r1, s1
 8018b50:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018b54:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8018b58:	2b13      	cmp	r3, #19
 8018b5a:	b510      	push	{r4, lr}
 8018b5c:	ee10 4a10 	vmov	r4, s0
 8018b60:	dc19      	bgt.n	8018b96 <round+0x4a>
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	da09      	bge.n	8018b7a <round+0x2e>
 8018b66:	3301      	adds	r3, #1
 8018b68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018b6c:	d103      	bne.n	8018b76 <round+0x2a>
 8018b6e:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8018b72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018b76:	2000      	movs	r0, #0
 8018b78:	e025      	b.n	8018bc6 <round+0x7a>
 8018b7a:	4815      	ldr	r0, [pc, #84]	; (8018bd0 <round+0x84>)
 8018b7c:	4118      	asrs	r0, r3
 8018b7e:	ea01 0200 	and.w	r2, r1, r0
 8018b82:	4322      	orrs	r2, r4
 8018b84:	d00e      	beq.n	8018ba4 <round+0x58>
 8018b86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018b8a:	fa42 f303 	asr.w	r3, r2, r3
 8018b8e:	440b      	add	r3, r1
 8018b90:	ea23 0100 	bic.w	r1, r3, r0
 8018b94:	e7ef      	b.n	8018b76 <round+0x2a>
 8018b96:	2b33      	cmp	r3, #51	; 0x33
 8018b98:	dd05      	ble.n	8018ba6 <round+0x5a>
 8018b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b9e:	d101      	bne.n	8018ba4 <round+0x58>
 8018ba0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018ba4:	bd10      	pop	{r4, pc}
 8018ba6:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 8018baa:	f04f 32ff 	mov.w	r2, #4294967295
 8018bae:	40c2      	lsrs	r2, r0
 8018bb0:	4222      	tst	r2, r4
 8018bb2:	d0f7      	beq.n	8018ba4 <round+0x58>
 8018bb4:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8018bb8:	2001      	movs	r0, #1
 8018bba:	4098      	lsls	r0, r3
 8018bbc:	1900      	adds	r0, r0, r4
 8018bbe:	bf28      	it	cs
 8018bc0:	3101      	addcs	r1, #1
 8018bc2:	ea20 0002 	bic.w	r0, r0, r2
 8018bc6:	460b      	mov	r3, r1
 8018bc8:	4602      	mov	r2, r0
 8018bca:	ec43 2b10 	vmov	d0, r2, r3
 8018bce:	e7e9      	b.n	8018ba4 <round+0x58>
 8018bd0:	000fffff 	.word	0x000fffff

08018bd4 <__ieee754_atan2f>:
 8018bd4:	ee10 2a90 	vmov	r2, s1
 8018bd8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8018bdc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018be0:	b510      	push	{r4, lr}
 8018be2:	eef0 7a40 	vmov.f32	s15, s0
 8018be6:	dc06      	bgt.n	8018bf6 <__ieee754_atan2f+0x22>
 8018be8:	ee10 0a10 	vmov	r0, s0
 8018bec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018bf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018bf4:	dd04      	ble.n	8018c00 <__ieee754_atan2f+0x2c>
 8018bf6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8018bfe:	bd10      	pop	{r4, pc}
 8018c00:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018c04:	d103      	bne.n	8018c0e <__ieee754_atan2f+0x3a>
 8018c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c0a:	f000 b881 	b.w	8018d10 <atanf>
 8018c0e:	1794      	asrs	r4, r2, #30
 8018c10:	f004 0402 	and.w	r4, r4, #2
 8018c14:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018c18:	b93b      	cbnz	r3, 8018c2a <__ieee754_atan2f+0x56>
 8018c1a:	2c02      	cmp	r4, #2
 8018c1c:	d05c      	beq.n	8018cd8 <__ieee754_atan2f+0x104>
 8018c1e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8018cec <__ieee754_atan2f+0x118>
 8018c22:	2c03      	cmp	r4, #3
 8018c24:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8018c28:	e7e7      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018c2a:	b939      	cbnz	r1, 8018c3c <__ieee754_atan2f+0x68>
 8018c2c:	eddf 7a30 	vldr	s15, [pc, #192]	; 8018cf0 <__ieee754_atan2f+0x11c>
 8018c30:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8018cf4 <__ieee754_atan2f+0x120>
 8018c34:	2800      	cmp	r0, #0
 8018c36:	fe67 7a87 	vselge.f32	s15, s15, s14
 8018c3a:	e7de      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018c3c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018c40:	d110      	bne.n	8018c64 <__ieee754_atan2f+0x90>
 8018c42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018c46:	f104 34ff 	add.w	r4, r4, #4294967295
 8018c4a:	d107      	bne.n	8018c5c <__ieee754_atan2f+0x88>
 8018c4c:	2c02      	cmp	r4, #2
 8018c4e:	d846      	bhi.n	8018cde <__ieee754_atan2f+0x10a>
 8018c50:	4b29      	ldr	r3, [pc, #164]	; (8018cf8 <__ieee754_atan2f+0x124>)
 8018c52:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018c56:	edd3 7a00 	vldr	s15, [r3]
 8018c5a:	e7ce      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018c5c:	2c02      	cmp	r4, #2
 8018c5e:	d841      	bhi.n	8018ce4 <__ieee754_atan2f+0x110>
 8018c60:	4b26      	ldr	r3, [pc, #152]	; (8018cfc <__ieee754_atan2f+0x128>)
 8018c62:	e7f6      	b.n	8018c52 <__ieee754_atan2f+0x7e>
 8018c64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018c68:	d0e0      	beq.n	8018c2c <__ieee754_atan2f+0x58>
 8018c6a:	1a5b      	subs	r3, r3, r1
 8018c6c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8018c70:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8018c74:	da1a      	bge.n	8018cac <__ieee754_atan2f+0xd8>
 8018c76:	2a00      	cmp	r2, #0
 8018c78:	da01      	bge.n	8018c7e <__ieee754_atan2f+0xaa>
 8018c7a:	313c      	adds	r1, #60	; 0x3c
 8018c7c:	db19      	blt.n	8018cb2 <__ieee754_atan2f+0xde>
 8018c7e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8018c82:	f000 f919 	bl	8018eb8 <fabsf>
 8018c86:	f000 f843 	bl	8018d10 <atanf>
 8018c8a:	eef0 7a40 	vmov.f32	s15, s0
 8018c8e:	2c01      	cmp	r4, #1
 8018c90:	d012      	beq.n	8018cb8 <__ieee754_atan2f+0xe4>
 8018c92:	2c02      	cmp	r4, #2
 8018c94:	d017      	beq.n	8018cc6 <__ieee754_atan2f+0xf2>
 8018c96:	2c00      	cmp	r4, #0
 8018c98:	d0af      	beq.n	8018bfa <__ieee754_atan2f+0x26>
 8018c9a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8018d00 <__ieee754_atan2f+0x12c>
 8018c9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ca2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8018d04 <__ieee754_atan2f+0x130>
 8018ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018caa:	e7a6      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018cac:	eddf 7a10 	vldr	s15, [pc, #64]	; 8018cf0 <__ieee754_atan2f+0x11c>
 8018cb0:	e7ed      	b.n	8018c8e <__ieee754_atan2f+0xba>
 8018cb2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8018d08 <__ieee754_atan2f+0x134>
 8018cb6:	e7ea      	b.n	8018c8e <__ieee754_atan2f+0xba>
 8018cb8:	ee17 3a90 	vmov	r3, s15
 8018cbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018cc0:	ee07 3a90 	vmov	s15, r3
 8018cc4:	e799      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018cc6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8018d00 <__ieee754_atan2f+0x12c>
 8018cca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018cce:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8018d04 <__ieee754_atan2f+0x130>
 8018cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018cd6:	e790      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018cd8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8018d04 <__ieee754_atan2f+0x130>
 8018cdc:	e78d      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018cde:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8018d0c <__ieee754_atan2f+0x138>
 8018ce2:	e78a      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018ce4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018d08 <__ieee754_atan2f+0x134>
 8018ce8:	e787      	b.n	8018bfa <__ieee754_atan2f+0x26>
 8018cea:	bf00      	nop
 8018cec:	c0490fdb 	.word	0xc0490fdb
 8018cf0:	3fc90fdb 	.word	0x3fc90fdb
 8018cf4:	bfc90fdb 	.word	0xbfc90fdb
 8018cf8:	0801c3e4 	.word	0x0801c3e4
 8018cfc:	0801c3f0 	.word	0x0801c3f0
 8018d00:	33bbbd2e 	.word	0x33bbbd2e
 8018d04:	40490fdb 	.word	0x40490fdb
 8018d08:	00000000 	.word	0x00000000
 8018d0c:	3f490fdb 	.word	0x3f490fdb

08018d10 <atanf>:
 8018d10:	b538      	push	{r3, r4, r5, lr}
 8018d12:	ee10 5a10 	vmov	r5, s0
 8018d16:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8018d1a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8018d1e:	eef0 7a40 	vmov.f32	s15, s0
 8018d22:	db0f      	blt.n	8018d44 <atanf+0x34>
 8018d24:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018d28:	dd04      	ble.n	8018d34 <atanf+0x24>
 8018d2a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8018d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8018d32:	bd38      	pop	{r3, r4, r5, pc}
 8018d34:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8018e6c <atanf+0x15c>
 8018d38:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8018e70 <atanf+0x160>
 8018d3c:	2d00      	cmp	r5, #0
 8018d3e:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8018d42:	e7f4      	b.n	8018d2e <atanf+0x1e>
 8018d44:	4b4b      	ldr	r3, [pc, #300]	; (8018e74 <atanf+0x164>)
 8018d46:	429c      	cmp	r4, r3
 8018d48:	dc10      	bgt.n	8018d6c <atanf+0x5c>
 8018d4a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8018d4e:	da0a      	bge.n	8018d66 <atanf+0x56>
 8018d50:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8018e78 <atanf+0x168>
 8018d54:	ee30 7a07 	vadd.f32	s14, s0, s14
 8018d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018d5c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8018d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d64:	dce3      	bgt.n	8018d2e <atanf+0x1e>
 8018d66:	f04f 33ff 	mov.w	r3, #4294967295
 8018d6a:	e013      	b.n	8018d94 <atanf+0x84>
 8018d6c:	f000 f8a4 	bl	8018eb8 <fabsf>
 8018d70:	4b42      	ldr	r3, [pc, #264]	; (8018e7c <atanf+0x16c>)
 8018d72:	429c      	cmp	r4, r3
 8018d74:	dc4f      	bgt.n	8018e16 <atanf+0x106>
 8018d76:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8018d7a:	429c      	cmp	r4, r3
 8018d7c:	dc41      	bgt.n	8018e02 <atanf+0xf2>
 8018d7e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8018d82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018d86:	eea0 7a27 	vfma.f32	s14, s0, s15
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018d90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018d94:	1c5a      	adds	r2, r3, #1
 8018d96:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8018d9a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8018e80 <atanf+0x170>
 8018d9e:	eddf 5a39 	vldr	s11, [pc, #228]	; 8018e84 <atanf+0x174>
 8018da2:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8018e88 <atanf+0x178>
 8018da6:	ee66 6a06 	vmul.f32	s13, s12, s12
 8018daa:	eee6 5a87 	vfma.f32	s11, s13, s14
 8018dae:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8018e8c <atanf+0x17c>
 8018db2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8018db6:	eddf 5a36 	vldr	s11, [pc, #216]	; 8018e90 <atanf+0x180>
 8018dba:	eee7 5a26 	vfma.f32	s11, s14, s13
 8018dbe:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8018e94 <atanf+0x184>
 8018dc2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8018dc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8018e98 <atanf+0x188>
 8018dca:	eee7 5a26 	vfma.f32	s11, s14, s13
 8018dce:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8018e9c <atanf+0x18c>
 8018dd2:	eea6 5a87 	vfma.f32	s10, s13, s14
 8018dd6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8018ea0 <atanf+0x190>
 8018dda:	eea5 7a26 	vfma.f32	s14, s10, s13
 8018dde:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8018ea4 <atanf+0x194>
 8018de2:	eea7 5a26 	vfma.f32	s10, s14, s13
 8018de6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8018ea8 <atanf+0x198>
 8018dea:	eea5 7a26 	vfma.f32	s14, s10, s13
 8018dee:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018df2:	eea5 7a86 	vfma.f32	s14, s11, s12
 8018df6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8018dfa:	d121      	bne.n	8018e40 <atanf+0x130>
 8018dfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018e00:	e795      	b.n	8018d2e <atanf+0x1e>
 8018e02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018e06:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018e0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018e0e:	2301      	movs	r3, #1
 8018e10:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018e14:	e7be      	b.n	8018d94 <atanf+0x84>
 8018e16:	4b25      	ldr	r3, [pc, #148]	; (8018eac <atanf+0x19c>)
 8018e18:	429c      	cmp	r4, r3
 8018e1a:	dc0b      	bgt.n	8018e34 <atanf+0x124>
 8018e1c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8018e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018e24:	eea0 7a27 	vfma.f32	s14, s0, s15
 8018e28:	2302      	movs	r3, #2
 8018e2a:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018e32:	e7af      	b.n	8018d94 <atanf+0x84>
 8018e34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018e38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018e3c:	2303      	movs	r3, #3
 8018e3e:	e7a9      	b.n	8018d94 <atanf+0x84>
 8018e40:	4a1b      	ldr	r2, [pc, #108]	; (8018eb0 <atanf+0x1a0>)
 8018e42:	491c      	ldr	r1, [pc, #112]	; (8018eb4 <atanf+0x1a4>)
 8018e44:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018e48:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018e4c:	edd3 6a00 	vldr	s13, [r3]
 8018e50:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018e54:	2d00      	cmp	r5, #0
 8018e56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018e5a:	edd2 7a00 	vldr	s15, [r2]
 8018e5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018e62:	bfb8      	it	lt
 8018e64:	eef1 7a67 	vneglt.f32	s15, s15
 8018e68:	e761      	b.n	8018d2e <atanf+0x1e>
 8018e6a:	bf00      	nop
 8018e6c:	3fc90fdb 	.word	0x3fc90fdb
 8018e70:	bfc90fdb 	.word	0xbfc90fdb
 8018e74:	3edfffff 	.word	0x3edfffff
 8018e78:	7149f2ca 	.word	0x7149f2ca
 8018e7c:	3f97ffff 	.word	0x3f97ffff
 8018e80:	3c8569d7 	.word	0x3c8569d7
 8018e84:	3d4bda59 	.word	0x3d4bda59
 8018e88:	bd6ef16b 	.word	0xbd6ef16b
 8018e8c:	3d886b35 	.word	0x3d886b35
 8018e90:	3dba2e6e 	.word	0x3dba2e6e
 8018e94:	3e124925 	.word	0x3e124925
 8018e98:	3eaaaaab 	.word	0x3eaaaaab
 8018e9c:	bd15a221 	.word	0xbd15a221
 8018ea0:	bd9d8795 	.word	0xbd9d8795
 8018ea4:	bde38e38 	.word	0xbde38e38
 8018ea8:	be4ccccd 	.word	0xbe4ccccd
 8018eac:	401bffff 	.word	0x401bffff
 8018eb0:	0801c3fc 	.word	0x0801c3fc
 8018eb4:	0801c40c 	.word	0x0801c40c

08018eb8 <fabsf>:
 8018eb8:	ee10 3a10 	vmov	r3, s0
 8018ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ec0:	ee00 3a10 	vmov	s0, r3
 8018ec4:	4770      	bx	lr
	...

08018ec8 <_init>:
 8018ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eca:	bf00      	nop
 8018ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ece:	bc08      	pop	{r3}
 8018ed0:	469e      	mov	lr, r3
 8018ed2:	4770      	bx	lr

08018ed4 <_fini>:
 8018ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ed6:	bf00      	nop
 8018ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eda:	bc08      	pop	{r3}
 8018edc:	469e      	mov	lr, r3
 8018ede:	4770      	bx	lr
