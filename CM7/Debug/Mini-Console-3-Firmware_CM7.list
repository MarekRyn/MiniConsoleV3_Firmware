
Mini-Console-3-Firmware_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123a0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003520  08012638  08012638  00022638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b58  08015b58  000403ec  2**0
                  CONTENTS
  4 .ARM          00000008  08015b58  08015b58  00025b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b60  08015b60  000403ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b60  08015b60  00025b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b64  08015b64  00025b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  24000000  08015b68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d60  24000038  08015ba0  00030038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002d98  08015ba0  00032d98  2**0
                  ALLOC
 11 .sh0_ram      00000000  30040000  30040000  000403ec  2**0
                  CONTENTS
 12 .sh1_ram      00000000  38008000  38008000  000403ec  2**0
                  CONTENTS
 13 .buf_ram      000003ec  38000000  38000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bk_ram       00000000  38800000  38800000  000403ec  2**0
                  CONTENTS
 15 .qspi         00000000  90000000  90000000  000403ec  2**0
                  CONTENTS
 16 .ARM.attributes 0000002e  00000000  00000000  000403ec  2**0
                  CONTENTS, READONLY
 17 .comment      00000043  00000000  00000000  0004041a  2**0
                  CONTENTS, READONLY
 18 .debug_info   00043e86  00000000  00000000  0004045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00008d05  00000000  00000000  000842e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00030086  00000000  00000000  0008cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00001830  00000000  00000000  000bd070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00004c82  00000000  00000000  000be8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0004120d  00000000  00000000  000c3522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00044c07  00000000  00000000  0010472f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    0014383d  00000000  00000000  00149336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  00004c6c  00000000  00000000  0028cb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000057  00000000  00000000  002917e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08012620 	.word	0x08012620

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	08012620 	.word	0x08012620

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <BSP_DRV_QSPI_Reset>:
    return BSP_OK;
}



uint8_t	BSP_DRV_QSPI_Reset(QUADSPI_TypeDef * hqspi) {
 80005e4:	b538      	push	{r3, r4, r5, lr}
 80005e6:	4604      	mov	r4, r0

	// 1. Exit QPI mode and fallback to SPI 1-bit mode
	BSP_STM32_QSPI_CfgNewCommand();
 80005e8:	f007 fcd8 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_4_LINES, QSPI_CMD_QPIDI);
 80005ec:	21f5      	movs	r1, #245	; 0xf5
 80005ee:	f44f 7040 	mov.w	r0, #768	; 0x300
 80005f2:	f007 fcdd 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80005f6:	2200      	movs	r2, #0
 80005f8:	4611      	mov	r1, r2
 80005fa:	4610      	mov	r0, r2
 80005fc:	f007 fcf0 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_StartTransmit(hqspi);  // This function can exit with error if chip was not in QPI mode - just ignore it
 8000600:	4620      	mov	r0, r4
 8000602:	f007 fd55 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>

	// 2. Sending Reset Enable command

    BSP_STM32_QSPI_CfgNewCommand();
 8000606:	f007 fcc9 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RSTEN);
 800060a:	2166      	movs	r1, #102	; 0x66
 800060c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000610:	f007 fcce 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000614:	2200      	movs	r2, #0
 8000616:	4611      	mov	r1, r2
 8000618:	4610      	mov	r0, r2
 800061a:	f007 fce1 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800061e:	4620      	mov	r0, r4
 8000620:	f007 fd46 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>
 8000624:	b108      	cbz	r0, 800062a <BSP_DRV_QSPI_Reset+0x46>
 8000626:	2001      	movs	r0, #1
	// 4. Waiting for chip ready status
    BSP_Delay(10); // Delay so CE line can go HIGH
    if (_DRV_QSPI_CheckStatus(hqspi, QSPI_MODE_SPI, 0x01, 0x00)) return BSP_ERROR;

    return BSP_OK;
}
 8000628:	bd38      	pop	{r3, r4, r5, pc}
    BSP_STM32_QSPI_CfgNewCommand();
 800062a:	4605      	mov	r5, r0
 800062c:	f007 fcb6 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RST);
 8000630:	2199      	movs	r1, #153	; 0x99
 8000632:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000636:	f007 fcbb 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800063a:	462a      	mov	r2, r5
 800063c:	4629      	mov	r1, r5
 800063e:	4628      	mov	r0, r5
 8000640:	f007 fcce 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000644:	4620      	mov	r0, r4
 8000646:	f007 fd33 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>
 800064a:	4605      	mov	r5, r0
 800064c:	2800      	cmp	r0, #0
 800064e:	d1ea      	bne.n	8000626 <BSP_DRV_QSPI_Reset+0x42>
    BSP_Delay(10); // Delay so CE line can go HIGH
 8000650:	200a      	movs	r0, #10
 8000652:	f003 fd67 	bl	8004124 <BSP_Delay>
	BSP_STM32_QSPI_CfgNewCommand();
 8000656:	f007 fca1 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800065a:	462a      	mov	r2, r5
 800065c:	4629      	mov	r1, r5
 800065e:	4628      	mov	r0, r5
 8000660:	f007 fcbe 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_CfgAutoPooling(mask, match, 0x10, QSPI_MATCH_MODE_AND);
 8000664:	462b      	mov	r3, r5
 8000666:	2210      	movs	r2, #16
 8000668:	4629      	mov	r1, r5
 800066a:	2001      	movs	r0, #1
 800066c:	f007 fcc0 	bl	8007ff0 <BSP_STM32_QSPI_CfgAutoPooling>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 8000670:	2105      	movs	r1, #5
 8000672:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000676:	f007 fc9b 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, 0x00000000, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	4629      	mov	r1, r5
 800067e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000682:	f007 fca5 	bl	8007fd0 <BSP_STM32_QSPI_CfgData>
	if (BSP_STM32_QSPI_StartAutoPooling(hqspi)) return BSP_TIMEOUT;
 8000686:	4620      	mov	r0, r4
 8000688:	f007 fd64 	bl	8008154 <BSP_STM32_QSPI_StartAutoPooling>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800068c:	3800      	subs	r0, #0
 800068e:	bf18      	it	ne
 8000690:	2001      	movne	r0, #1
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}

08000694 <BSP_DRV_QSPI_Init>:



uint8_t BSP_DRV_QSPI_Init(QUADSPI_TypeDef * hqspi) {
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	4605      	mov	r5, r0
 8000698:	b083      	sub	sp, #12
    // For some reason memory chip is not working properly after every reset
    // Therefore operation is repeated as required (but not more than 4 times)
    do {

		// 1. Reset chip
		if (BSP_DRV_QSPI_Reset(hqspi)) continue;
 800069a:	4628      	mov	r0, r5
 800069c:	f7ff ffa2 	bl	80005e4 <BSP_DRV_QSPI_Reset>
 80006a0:	4604      	mov	r4, r0
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d1f9      	bne.n	800069a <BSP_DRV_QSPI_Init+0x6>

		// 2. Checking communication and identify chip
		BSP_STM32_QSPI_CfgNewCommand();
 80006a6:	f007 fc79 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDMDID);
 80006aa:	2190      	movs	r1, #144	; 0x90
 80006ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006b0:	f007 fc7e 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgAddress(QSPI_ADDRESS_1_LINE, QSPI_ADDRESS_24_BITS, 0x00);
 80006b4:	4622      	mov	r2, r4
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006be:	f007 fc7f 	bl	8007fc0 <BSP_STM32_QSPI_CfgAddress>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, chip_id, 2);
 80006c2:	2202      	movs	r2, #2
 80006c4:	a901      	add	r1, sp, #4
 80006c6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80006ca:	f007 fc81 	bl	8007fd0 <BSP_STM32_QSPI_CfgData>
		BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80006ce:	4622      	mov	r2, r4
 80006d0:	4621      	mov	r1, r4
 80006d2:	4620      	mov	r0, r4
 80006d4:	f007 fc84 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
		if (BSP_STM32_QSPI_StartReceive(hqspi)) continue;
 80006d8:	4628      	mov	r0, r5
 80006da:	f007 fc95 	bl	8008008 <BSP_STM32_QSPI_StartReceive>
 80006de:	4604      	mov	r4, r0
 80006e0:	2800      	cmp	r0, #0
 80006e2:	d1da      	bne.n	800069a <BSP_DRV_QSPI_Init+0x6>

		if (chip_id[0] != QSPI_CHIP_MID) continue;
 80006e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80006e8:	2b9d      	cmp	r3, #157	; 0x9d
 80006ea:	d1d6      	bne.n	800069a <BSP_DRV_QSPI_Init+0x6>

		if (chip_id[1] != QSPI_CHIP_CID) continue;
 80006ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80006f0:	2b17      	cmp	r3, #23
 80006f2:	d1d2      	bne.n	800069a <BSP_DRV_QSPI_Init+0x6>
		break;

    } while (1);

	// 3. Setup dummy cycles
    BSP_STM32_QSPI_CfgNewCommand();
 80006f4:	f007 fc52 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDRP);
 80006f8:	2161      	movs	r1, #97	; 0x61
 80006fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006fe:	f007 fc57 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &read_reg, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	f10d 0102 	add.w	r1, sp, #2
 8000708:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800070c:	f007 fc60 	bl	8007fd0 <BSP_STM32_QSPI_CfgData>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000710:	4622      	mov	r2, r4
 8000712:	4621      	mov	r1, r4
 8000714:	4620      	mov	r0, r4
 8000716:	f007 fc63 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartReceive(hqspi)) return BSP_ERROR;
 800071a:	4628      	mov	r0, r5
 800071c:	f007 fc74 	bl	8008008 <BSP_STM32_QSPI_StartReceive>
 8000720:	4604      	mov	r4, r0
 8000722:	b110      	cbz	r0, 800072a <BSP_DRV_QSPI_Init+0x96>
 8000724:	2001      	movs	r0, #1
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_QPIEN);
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;

	return BSP_OK;
}
 8000726:	b003      	add	sp, #12
 8000728:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(read_reg, 0b01111000, (QSPI_CFG_DUMMY_CLKS << 3));
 800072a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800072e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8000732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000736:	f88d 3002 	strb.w	r3, [sp, #2]
	BSP_STM32_QSPI_CfgNewCommand();
 800073a:	f007 fc2f 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800073e:	4622      	mov	r2, r4
 8000740:	4621      	mov	r1, r4
 8000742:	4620      	mov	r0, r4
 8000744:	f007 fc4c 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WREN);
 8000748:	2106      	movs	r1, #6
 800074a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800074e:	f007 fc2f 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000752:	4628      	mov	r0, r5
 8000754:	f007 fcac 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>
 8000758:	4604      	mov	r4, r0
 800075a:	2800      	cmp	r0, #0
 800075c:	d1e2      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
    BSP_STM32_QSPI_CfgNewCommand();
 800075e:	f007 fc1d 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_SRPV);
 8000762:	2163      	movs	r1, #99	; 0x63
 8000764:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000768:	f007 fc22 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &read_reg, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	f10d 0102 	add.w	r1, sp, #2
 8000772:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000776:	f007 fc2b 	bl	8007fd0 <BSP_STM32_QSPI_CfgData>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800077a:	4622      	mov	r2, r4
 800077c:	4621      	mov	r1, r4
 800077e:	4620      	mov	r0, r4
 8000780:	f007 fc2e 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000784:	4628      	mov	r0, r5
 8000786:	f007 fc93 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>
 800078a:	4604      	mov	r4, r0
 800078c:	2800      	cmp	r0, #0
 800078e:	d1c9      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
	BSP_STM32_QSPI_CfgNewCommand();
 8000790:	f007 fc04 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000794:	4622      	mov	r2, r4
 8000796:	4621      	mov	r1, r4
 8000798:	4620      	mov	r0, r4
 800079a:	f007 fc21 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_CfgAutoPooling(mask, match, 0x10, QSPI_MATCH_MODE_AND);
 800079e:	4623      	mov	r3, r4
 80007a0:	2210      	movs	r2, #16
 80007a2:	4621      	mov	r1, r4
 80007a4:	2001      	movs	r0, #1
 80007a6:	f007 fc23 	bl	8007ff0 <BSP_STM32_QSPI_CfgAutoPooling>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 80007aa:	2105      	movs	r1, #5
 80007ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007b0:	f007 fbfe 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, 0x00000000, 1);
 80007b4:	4621      	mov	r1, r4
 80007b6:	2201      	movs	r2, #1
 80007b8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80007bc:	f007 fc08 	bl	8007fd0 <BSP_STM32_QSPI_CfgData>
	if (BSP_STM32_QSPI_StartAutoPooling(hqspi)) return BSP_TIMEOUT;
 80007c0:	4628      	mov	r0, r5
 80007c2:	f007 fcc7 	bl	8008154 <BSP_STM32_QSPI_StartAutoPooling>
 80007c6:	4604      	mov	r4, r0
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d1ab      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
    BSP_STM32_QSPI_CfgNewCommand();
 80007cc:	f007 fbe6 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_EN4B);
 80007d0:	21b7      	movs	r1, #183	; 0xb7
 80007d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007d6:	f007 fbeb 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80007da:	4622      	mov	r2, r4
 80007dc:	4621      	mov	r1, r4
 80007de:	4620      	mov	r0, r4
 80007e0:	f007 fbfe 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 80007e4:	4628      	mov	r0, r5
 80007e6:	f007 fc63 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>
 80007ea:	4604      	mov	r4, r0
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d199      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
    BSP_STM32_QSPI_CfgNewCommand();
 80007f0:	f007 fbd4 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 80007f4:	2105      	movs	r1, #5
 80007f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007fa:	f007 fbd9 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &status_reg, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	f10d 0103 	add.w	r1, sp, #3
 8000804:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000808:	f007 fbe2 	bl	8007fd0 <BSP_STM32_QSPI_CfgData>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800080c:	4622      	mov	r2, r4
 800080e:	4621      	mov	r1, r4
 8000810:	4620      	mov	r0, r4
 8000812:	f007 fbe5 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartReceive(hqspi)) return BSP_ERROR;
 8000816:	4628      	mov	r0, r5
 8000818:	f007 fbf6 	bl	8008008 <BSP_STM32_QSPI_StartReceive>
 800081c:	2800      	cmp	r0, #0
 800081e:	d181      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
    if ((status_reg & (0b01000000)) == 0) {
 8000820:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000824:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 8000828:	d151      	bne.n	80008ce <BSP_DRV_QSPI_Init+0x23a>
    	MODIFY_REG(status_reg, 0b01000000, (1 << 6));
 800082a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082e:	f88d 3003 	strb.w	r3, [sp, #3]
	BSP_STM32_QSPI_CfgNewCommand();
 8000832:	f007 fbb3 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000836:	4622      	mov	r2, r4
 8000838:	4621      	mov	r1, r4
 800083a:	4620      	mov	r0, r4
 800083c:	f007 fbd0 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WREN);
 8000840:	2106      	movs	r1, #6
 8000842:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000846:	f007 fbb3 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800084a:	4628      	mov	r0, r5
 800084c:	f007 fc30 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>
 8000850:	4604      	mov	r4, r0
 8000852:	2800      	cmp	r0, #0
 8000854:	f47f af66 	bne.w	8000724 <BSP_DRV_QSPI_Init+0x90>
		BSP_STM32_QSPI_CfgNewCommand();
 8000858:	f007 fba0 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WRSR);
 800085c:	2101      	movs	r1, #1
 800085e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000862:	f007 fba5 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &status_reg, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	f10d 0103 	add.w	r1, sp, #3
 800086c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000870:	f007 fbae 	bl	8007fd0 <BSP_STM32_QSPI_CfgData>
		BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000874:	4622      	mov	r2, r4
 8000876:	4621      	mov	r1, r4
 8000878:	4620      	mov	r0, r4
 800087a:	f007 fbb1 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
		if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800087e:	4628      	mov	r0, r5
 8000880:	f007 fc16 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>
 8000884:	4604      	mov	r4, r0
 8000886:	2800      	cmp	r0, #0
 8000888:	f47f af4c 	bne.w	8000724 <BSP_DRV_QSPI_Init+0x90>
		BSP_Delay(10); // Delay so CE line can go HIGH
 800088c:	200a      	movs	r0, #10
 800088e:	f003 fc49 	bl	8004124 <BSP_Delay>
	BSP_STM32_QSPI_CfgNewCommand();
 8000892:	f007 fb83 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000896:	4622      	mov	r2, r4
 8000898:	4621      	mov	r1, r4
 800089a:	4620      	mov	r0, r4
 800089c:	f007 fba0 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_CfgAutoPooling(mask, match, 0x10, QSPI_MATCH_MODE_AND);
 80008a0:	4623      	mov	r3, r4
 80008a2:	2210      	movs	r2, #16
 80008a4:	4621      	mov	r1, r4
 80008a6:	2001      	movs	r0, #1
 80008a8:	f007 fba2 	bl	8007ff0 <BSP_STM32_QSPI_CfgAutoPooling>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 80008ac:	2105      	movs	r1, #5
 80008ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008b2:	f007 fb7d 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, 0x00000000, 1);
 80008b6:	2201      	movs	r2, #1
 80008b8:	4621      	mov	r1, r4
 80008ba:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80008be:	f007 fb87 	bl	8007fd0 <BSP_STM32_QSPI_CfgData>
	if (BSP_STM32_QSPI_StartAutoPooling(hqspi)) return BSP_TIMEOUT;
 80008c2:	4628      	mov	r0, r5
 80008c4:	f007 fc46 	bl	8008154 <BSP_STM32_QSPI_StartAutoPooling>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	f47f af2b 	bne.w	8000724 <BSP_DRV_QSPI_Init+0x90>
    BSP_STM32_QSPI_CfgNewCommand();
 80008ce:	f007 fb65 	bl	8007f9c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_QPIEN);
 80008d2:	2135      	movs	r1, #53	; 0x35
 80008d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008d8:	f007 fb6a 	bl	8007fb0 <BSP_STM32_QSPI_CfgInstruction>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80008dc:	2200      	movs	r2, #0
 80008de:	4611      	mov	r1, r2
 80008e0:	4610      	mov	r0, r2
 80008e2:	f007 fb7d 	bl	8007fe0 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 80008e6:	4628      	mov	r0, r5
 80008e8:	f007 fbe2 	bl	80080b0 <BSP_STM32_QSPI_StartTransmit>
	return BSP_OK;
 80008ec:	3800      	subs	r0, #0
 80008ee:	bf18      	it	ne
 80008f0:	2001      	movne	r0, #1
 80008f2:	e718      	b.n	8000726 <BSP_DRV_QSPI_Init+0x92>
 80008f4:	0000      	movs	r0, r0
	...

080008f8 <BSP_DRV_SDRAM_Init>:
	return val;
}


// SDRAM Configuration generator
uint8_t	BSP_DRV_SDRAM_Init(FMC_SDRAM_TypeDef *sdram, uint32_t SDBank, uint32_t SDClockPeriod, uint32_t Ck_Freq) {
 80008f8:	ee06 3a90 	vmov	s13, r3
		default:	return BSP_ERROR;
	}

	// Calculating memory timings

	float CPeriod = 1000.0 / (float)Ck_Freq; // Returns period in ns
 80008fc:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8000b10 <BSP_DRV_SDRAM_Init+0x218>
 8000900:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
	volatile uint32_t timeout = SDRAM_TIMEOUT;
 8000904:	4b83      	ldr	r3, [pc, #524]	; (8000b14 <BSP_DRV_SDRAM_Init+0x21c>)
	float CPeriod = 1000.0 / (float)Ck_Freq; // Returns period in ns
 8000906:	eef8 7a66 	vcvt.f32.u32	s15, s13
uint8_t	BSP_DRV_SDRAM_Init(FMC_SDRAM_TypeDef *sdram, uint32_t SDBank, uint32_t SDClockPeriod, uint32_t Ck_Freq) {
 800090a:	4684      	mov	ip, r0

	uint32_t param_LoadToActiveDelay = limitvalue(round(1.0 * BSP_SDRAM_TMRD / CPeriod), 1, 16);
 800090c:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
	float CPeriod = 1000.0 / (float)Ck_Freq; // Returns period in ns
 8000910:	ee87 4a27 	vdiv.f32	s8, s14, s15
uint8_t	BSP_DRV_SDRAM_Init(FMC_SDRAM_TypeDef *sdram, uint32_t SDBank, uint32_t SDClockPeriod, uint32_t Ck_Freq) {
 8000914:	b530      	push	{r4, r5, lr}
 8000916:	b083      	sub	sp, #12
	volatile uint32_t timeout = SDRAM_TIMEOUT;
 8000918:	9301      	str	r3, [sp, #4]
	uint32_t param_LoadToActiveDelay = limitvalue(round(1.0 * BSP_SDRAM_TMRD / CPeriod), 1, 16);
 800091a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 800091e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8000922:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000926:	feb8 5b45 	vrinta.f64	d5, d5
 800092a:	eebc 6bc5 	vcvt.u32.f64	s12, d5
 800092e:	ee16 ea10 	vmov	lr, s12
	if (value > max) val = max;
 8000932:	f1be 0f10 	cmp.w	lr, #16
 8000936:	f200 80d6 	bhi.w	8000ae6 <BSP_DRV_SDRAM_Init+0x1ee>


	// Configuring SDRAM timings

	if (SDBank == FMC_SDRAM_BANK1) {
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 800093a:	f1be 0f01 	cmp.w	lr, #1
 800093e:	bf38      	it	cc
 8000940:	f04f 0e01 	movcc.w	lr, #1
 8000944:	f10e 3eff 	add.w	lr, lr, #4294967295
	uint32_t param_ExitSelfRefreshDelay = limitvalue(round(1.0 * BSP_SDRAM_TXSR / CPeriod), 1, 16);
 8000948:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8000af0 <BSP_DRV_SDRAM_Init+0x1f8>
 800094c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000950:	feb8 5b45 	vrinta.f64	d5, d5
 8000954:	eebc 6bc5 	vcvt.u32.f64	s12, d5
 8000958:	ee16 3a10 	vmov	r3, s12
	if (value > max) val = max;
 800095c:	2b10      	cmp	r3, #16
 800095e:	f200 80c0 	bhi.w	8000ae2 <BSP_DRV_SDRAM_Init+0x1ea>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000962:	2b01      	cmp	r3, #1
 8000964:	bf38      	it	cc
 8000966:	2301      	movcc	r3, #1
 8000968:	1e5d      	subs	r5, r3, #1
 800096a:	012d      	lsls	r5, r5, #4
	uint32_t param_SelfRefreshTime = limitvalue(round(1.0 * BSP_SDRAM_TRAS / CPeriod), 1, 16);
 800096c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000af8 <BSP_DRV_SDRAM_Init+0x200>
 8000970:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000974:	feb8 5b45 	vrinta.f64	d5, d5
 8000978:	eebc 6bc5 	vcvt.u32.f64	s12, d5
 800097c:	ee16 3a10 	vmov	r3, s12
	if (value > max) val = max;
 8000980:	2b10      	cmp	r3, #16
 8000982:	f200 80ab 	bhi.w	8000adc <BSP_DRV_SDRAM_Init+0x1e4>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000986:	2b01      	cmp	r3, #1
 8000988:	bf38      	it	cc
 800098a:	2301      	movcc	r3, #1
 800098c:	1e5c      	subs	r4, r3, #1
 800098e:	0224      	lsls	r4, r4, #8
	uint32_t param_RowCycleDelay = limitvalue(round(1.0 * BSP_SDRAM_TRC / CPeriod), 1, 16);
 8000990:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8000b00 <BSP_DRV_SDRAM_Init+0x208>
 8000994:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000998:	feb8 7b47 	vrinta.f64	d7, d7
 800099c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a0:	ee17 0a90 	vmov	r0, s15
	if (value > max) val = max;
 80009a4:	2810      	cmp	r0, #16
 80009a6:	f200 8096 	bhi.w	8000ad6 <BSP_DRV_SDRAM_Init+0x1de>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80009aa:	2801      	cmp	r0, #1
 80009ac:	bf38      	it	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	1e43      	subs	r3, r0, #1
 80009b2:	031b      	lsls	r3, r3, #12
	if (SDBank == FMC_SDRAM_BANK1) {
 80009b4:	2900      	cmp	r1, #0
 80009b6:	d169      	bne.n	8000a8c <BSP_DRV_SDRAM_Init+0x194>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80009b8:	ea4e 0303 	orr.w	r3, lr, r3
 80009bc:	4856      	ldr	r0, [pc, #344]	; (8000b18 <BSP_DRV_SDRAM_Init+0x220>)
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], 0xFFFFFFFF,(param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber | param_CASLatency |
 80009be:	f8dc 1000 	ldr.w	r1, [ip]
	}

	// Initialize memory IC

	uint32_t CommandTarget = 0;
	if (SDBank == FMC_SDRAM_BANK1) CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK1; else CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK2;
 80009c2:	2110      	movs	r1, #16
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80009c4:	432b      	orrs	r3, r5
 80009c6:	4323      	orrs	r3, r4
 80009c8:	4318      	orrs	r0, r3
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], 0xFFFFFFFF,(param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber | param_CASLatency |
 80009ca:	f241 1369 	movw	r3, #4457	; 0x1169
 80009ce:	4313      	orrs	r3, r2
 80009d0:	f8cc 3000 	str.w	r3, [ip]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80009d4:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80009d8:	f8cc 0008 	str.w	r0, [ip, #8]

	// Little delay
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 80009dc:	4b4f      	ldr	r3, [pc, #316]	; (8000b1c <BSP_DRV_SDRAM_Init+0x224>)
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	9b01      	ldr	r3, [sp, #4]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	9201      	str	r2, [sp, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1fa      	bne.n	80009e0 <BSP_DRV_SDRAM_Init+0xe8>

	// Configure a clock configuration enable command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80009ea:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80009ee:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
				((FMC_SDRAM_CMD_CLK_ENABLE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Little delay
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 80009f2:	4a4a      	ldr	r2, [pc, #296]	; (8000b1c <BSP_DRV_SDRAM_Init+0x224>)
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80009f4:	4003      	ands	r3, r0
 80009f6:	430b      	orrs	r3, r1
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	f8cc 3010 	str.w	r3, [ip, #16]
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9801      	ldr	r0, [sp, #4]
 8000a04:	1e43      	subs	r3, r0, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d1fa      	bne.n	8000a02 <BSP_DRV_SDRAM_Init+0x10a>

	// Configure a PALL (precharge all) command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a0c:	f8dc 3010 	ldr.w	r3, [ip, #16]
				((FMC_SDRAM_CMD_LOAD_MODE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0x0230) << FMC_SDCMR_MRD_Pos)));
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
			((FMC_SDRAM_CMD_LOAD_MODE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0x0220) << FMC_SDCMR_MRD_Pos)));

	// Program Refresh Period
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a10:	eeb8 7b66 	vcvt.f64.u32	d7, s13
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a14:	4a42      	ldr	r2, [pc, #264]	; (8000b20 <BSP_DRV_SDRAM_Init+0x228>)
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a16:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8cc 3010 	str.w	r3, [ip, #16]
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a26:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	f043 03e3 	orr.w	r3, r3, #227	; 0xe3
 8000a32:	f8cc 3010 	str.w	r3, [ip, #16]
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a36:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8000a3a:	4013      	ands	r3, r2
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a3c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000b08 <BSP_DRV_SDRAM_Init+0x210>
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a40:	430b      	orrs	r3, r1
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a42:	ee27 7b05 	vmul.f64	d7, d7, d5
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a46:	f043 03e3 	orr.w	r3, r3, #227	; 0xe3
 8000a4a:	f8cc 3010 	str.w	r3, [ip, #16]
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a4e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <BSP_DRV_SDRAM_Init+0x22c>)
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a56:	feb8 7b47 	vrinta.f64	d7, d7
 8000a5a:	ee37 7b46 	vsub.f64	d7, d7, d6
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	431a      	orrs	r2, r3
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a62:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	MODIFY_REG(sdram->SDRTR, FMC_SDRTR_COUNT, (param_RefreshPeriod << FMC_SDRTR_COUNT_Pos));
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <BSP_DRV_SDRAM_Init+0x230>)
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a68:	f8cc 2010 	str.w	r2, [ip, #16]
	MODIFY_REG(sdram->SDRTR, FMC_SDRTR_COUNT, (param_RefreshPeriod << FMC_SDRTR_COUNT_Pos));
 8000a6c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8000a70:	ee17 1a10 	vmov	r1, s14
 8000a74:	4013      	ands	r3, r2

	// Enable FMC Peripheral
	__FMC_ENABLE();
 8000a76:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <BSP_DRV_SDRAM_Init+0x234>)
	MODIFY_REG(sdram->SDRTR, FMC_SDRTR_COUNT, (param_RefreshPeriod << FMC_SDRTR_COUNT_Pos));
 8000a78:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000a7c:	f8cc 3014 	str.w	r3, [ip, #20]
	__FMC_ENABLE();
 8000a80:	6813      	ldr	r3, [r2, #0]
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	6013      	str	r3, [r2, #0]

	return BSP_OK;
}
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd30      	pop	{r4, r5, pc}
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000a8c:	f8dc 0000 	ldr.w	r0, [ip]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000a90:	ea4e 0e04 	orr.w	lr, lr, r4
 8000a94:	4c26      	ldr	r4, [pc, #152]	; (8000b30 <BSP_DRV_SDRAM_Init+0x238>)
	if (SDBank == FMC_SDRAM_BANK1) CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK1; else CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK2;
 8000a96:	2108      	movs	r1, #8
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000a98:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000a9c:	ea4e 0e05 	orr.w	lr, lr, r5
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000aa0:	4302      	orrs	r2, r0
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000aa2:	ea4e 0404 	orr.w	r4, lr, r4
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000aa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000aaa:	f8cc 2000 	str.w	r2, [ip]
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK2], 0xFFFFFFFF, (param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber |
 8000aae:	f240 1269 	movw	r2, #361	; 0x169
 8000ab2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8000ab6:	f8cc 2004 	str.w	r2, [ip, #4]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], FMC_SDTRx_TRC | FMC_SDTRx_TRP, (((param_RowCycleDelay) - 1U) << FMC_SDTRx_TRC_Pos) | (((param_RPDelay) - 1U) << FMC_SDTRx_TRP_Pos));
 8000aba:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <BSP_DRV_SDRAM_Init+0x23c>)
 8000abc:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8000ac0:	4002      	ands	r2, r0
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000ac8:	f8cc 2008 	str.w	r2, [ip, #8]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000acc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8000ad0:	f8cc 400c 	str.w	r4, [ip, #12]
	if (SDBank == FMC_SDRAM_BANK1) CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK1; else CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK2;
 8000ad4:	e782      	b.n	80009dc <BSP_DRV_SDRAM_Init+0xe4>
 8000ad6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ada:	e76b      	b.n	80009b4 <BSP_DRV_SDRAM_Init+0xbc>
 8000adc:	f44f 6470 	mov.w	r4, #3840	; 0xf00
 8000ae0:	e756      	b.n	8000990 <BSP_DRV_SDRAM_Init+0x98>
 8000ae2:	25f0      	movs	r5, #240	; 0xf0
 8000ae4:	e742      	b.n	800096c <BSP_DRV_SDRAM_Init+0x74>
 8000ae6:	f04f 0e0f 	mov.w	lr, #15
 8000aea:	e72d      	b.n	8000948 <BSP_DRV_SDRAM_Init+0x50>
 8000aec:	f3af 8000 	nop.w
 8000af0:	00000000 	.word	0x00000000
 8000af4:	40518000 	.word	0x40518000
 8000af8:	00000000 	.word	0x00000000
 8000afc:	40450000 	.word	0x40450000
 8000b00:	00000000 	.word	0x00000000
 8000b04:	404e0000 	.word	0x404e0000
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	401f4000 	.word	0x401f4000
 8000b10:	447a0000 	.word	0x447a0000
 8000b14:	000fffff 	.word	0x000fffff
 8000b18:	02210000 	.word	0x02210000
 8000b1c:	00effff1 	.word	0x00effff1
 8000b20:	ffc00000 	.word	0xffc00000
 8000b24:	00044004 	.word	0x00044004
 8000b28:	ffffc001 	.word	0xffffc001
 8000b2c:	52004000 	.word	0x52004000
 8000b30:	02010000 	.word	0x02010000
 8000b34:	ff0f0fff 	.word	0xff0f0fff

08000b38 <BSP_DRV_IMU_Init>:
KALMAN_HandleTypeDef KALMAN_pitch = {0};
KALMAN_HandleTypeDef KALMAN_roll = {0};
KALMAN_HandleTypeDef KALMAN_yaw = {0};


uint8_t	BSP_DRV_IMU_Init(IMU_HandleTypeDef *himu, I2C_TypeDef *hi2c) {
 8000b38:	b530      	push	{r4, r5, lr}
	// Resetting IMU global variable
	himu->cal.c_ox = 0;
 8000b3a:	2200      	movs	r2, #0
uint8_t	BSP_DRV_IMU_Init(IMU_HandleTypeDef *himu, I2C_TypeDef *hi2c) {
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	460c      	mov	r4, r1
	himu->cal.c_y = 0;
	himu->cal.c_z = 0;
	himu->cal.progress = 0;

	// Reseting MPU
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x80, 100)) return BSP_ERROR;
 8000b40:	2564      	movs	r5, #100	; 0x64
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	21d0      	movs	r1, #208	; 0xd0
 8000b46:	9500      	str	r5, [sp, #0]
	himu->cal.progress = 0;
 8000b48:	6282      	str	r2, [r0, #40]	; 0x28
	himu->cal.c_oy = 0;
 8000b4a:	e9c0 2204 	strd	r2, r2, [r0, #16]
	himu->cal.c_x = 0;
 8000b4e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	himu->cal.c_z = 0;
 8000b52:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x80, 100)) return BSP_ERROR;
 8000b56:	226b      	movs	r2, #107	; 0x6b
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f006 fcb7 	bl	80074cc <BSP_STM32_I2C_RegWrite>
 8000b5e:	b118      	cbz	r0, 8000b68 <BSP_DRV_IMU_Init+0x30>
 8000b60:	2401      	movs	r4, #1
	KALMAN_Init(&KALMAN_pitch);
	KALMAN_Init(&KALMAN_roll);
	KALMAN_Init(&KALMAN_yaw);

	return BSP_OK;
}
 8000b62:	4620      	mov	r0, r4
 8000b64:	b003      	add	sp, #12
 8000b66:	bd30      	pop	{r4, r5, pc}
	BSP_Delay(100);
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f003 fadb 	bl	8004124 <BSP_Delay>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x03, 100)) return BSP_ERROR;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	226b      	movs	r2, #107	; 0x6b
 8000b72:	21d0      	movs	r1, #208	; 0xd0
 8000b74:	4620      	mov	r0, r4
 8000b76:	9500      	str	r5, [sp, #0]
 8000b78:	f006 fca8 	bl	80074cc <BSP_STM32_I2C_RegWrite>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d1ef      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_GYRO_CFG, 0x08, 100)) return BSP_ERROR;
 8000b80:	2308      	movs	r3, #8
 8000b82:	221b      	movs	r2, #27
 8000b84:	21d0      	movs	r1, #208	; 0xd0
 8000b86:	4620      	mov	r0, r4
 8000b88:	9500      	str	r5, [sp, #0]
 8000b8a:	f006 fc9f 	bl	80074cc <BSP_STM32_I2C_RegWrite>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d1e6      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_ACCEL_CFG, 0x00, 100)) return BSP_ERROR;
 8000b92:	4603      	mov	r3, r0
 8000b94:	221c      	movs	r2, #28
 8000b96:	21d0      	movs	r1, #208	; 0xd0
 8000b98:	4620      	mov	r0, r4
 8000b9a:	9500      	str	r5, [sp, #0]
 8000b9c:	f006 fc96 	bl	80074cc <BSP_STM32_I2C_RegWrite>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d1dd      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_CONFIG, 0x02, 100)) return BSP_ERROR;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	221a      	movs	r2, #26
 8000ba8:	21d0      	movs	r1, #208	; 0xd0
 8000baa:	4620      	mov	r0, r4
 8000bac:	9500      	str	r5, [sp, #0]
 8000bae:	f006 fc8d 	bl	80074cc <BSP_STM32_I2C_RegWrite>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d1d4      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_SMPLRT_DIV, 39, 100)) return BSP_ERROR;
 8000bb6:	2327      	movs	r3, #39	; 0x27
 8000bb8:	2219      	movs	r2, #25
 8000bba:	21d0      	movs	r1, #208	; 0xd0
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	9500      	str	r5, [sp, #0]
 8000bc0:	f006 fc84 	bl	80074cc <BSP_STM32_I2C_RegWrite>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d1cb      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_INT_CFG, 0x10, 100)) return BSP_ERROR;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	2237      	movs	r2, #55	; 0x37
 8000bcc:	21d0      	movs	r1, #208	; 0xd0
 8000bce:	4620      	mov	r0, r4
 8000bd0:	9500      	str	r5, [sp, #0]
 8000bd2:	f006 fc7b 	bl	80074cc <BSP_STM32_I2C_RegWrite>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d1c2      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_INT_EN, 0x01, 100)) return BSP_ERROR;
 8000bda:	4620      	mov	r0, r4
 8000bdc:	2301      	movs	r3, #1
 8000bde:	2238      	movs	r2, #56	; 0x38
 8000be0:	21d0      	movs	r1, #208	; 0xd0
 8000be2:	9500      	str	r5, [sp, #0]
 8000be4:	f006 fc72 	bl	80074cc <BSP_STM32_I2C_RegWrite>
 8000be8:	4604      	mov	r4, r0
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d1b8      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	KALMAN_Init(&KALMAN_pitch);
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <BSP_DRV_IMU_Init+0xcc>)
 8000bf0:	f004 fb64 	bl	80052bc <KALMAN_Init>
	KALMAN_Init(&KALMAN_roll);
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <BSP_DRV_IMU_Init+0xd0>)
 8000bf6:	f004 fb61 	bl	80052bc <KALMAN_Init>
	KALMAN_Init(&KALMAN_yaw);
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <BSP_DRV_IMU_Init+0xd4>)
 8000bfc:	f004 fb5e 	bl	80052bc <KALMAN_Init>
	return BSP_OK;
 8000c00:	e7af      	b.n	8000b62 <BSP_DRV_IMU_Init+0x2a>
 8000c02:	bf00      	nop
 8000c04:	24000054 	.word	0x24000054
 8000c08:	24000090 	.word	0x24000090
 8000c0c:	240000cc 	.word	0x240000cc

08000c10 <BSP_DRV_IMU_Parse>:
	himu->cal.progress = 128;
	return BSP_OK;
}


void BSP_DRV_IMU_Parse(IMU_HandleTypeDef *himu) {
 8000c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c14:	4604      	mov	r4, r0
 8000c16:	ed2d 8b04 	vpush	{d8-d9}

	// Parsing data received from IMU - integer calculations

	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000c1a:	7903      	ldrb	r3, [r0, #4]
void BSP_DRV_IMU_Parse(IMU_HandleTypeDef *himu) {
 8000c1c:	b083      	sub	sp, #12
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000c1e:	7946      	ldrb	r6, [r0, #5]
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000c20:	f894 c003 	ldrb.w	ip, [r4, #3]
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000c24:	eb06 2603 	add.w	r6, r6, r3, lsl #8
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000c28:	78a3      	ldrb	r3, [r4, #2]
	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000c2a:	7802      	ldrb	r2, [r0, #0]
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000c2c:	eb0c 2c03 	add.w	ip, ip, r3, lsl #8
	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000c30:	7840      	ldrb	r0, [r0, #1]
	z = -z;

	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c32:	7a23      	ldrb	r3, [r4, #8]
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000c34:	b236      	sxth	r6, r6
	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c36:	7a61      	ldrb	r1, [r4, #9]
	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000c38:	eb00 2002 	add.w	r0, r0, r2, lsl #8
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c3c:	7ae2      	ldrb	r2, [r4, #11]
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000c3e:	fa0f fc8c 	sxth.w	ip, ip
	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c42:	eb01 2103 	add.w	r1, r1, r3, lsl #8
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c46:	7aa3      	ldrb	r3, [r4, #10]
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c48:	7b25      	ldrb	r5, [r4, #12]
	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000c4a:	b200      	sxth	r0, r0
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c4c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c50:	7b63      	ldrb	r3, [r4, #13]

	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c52:	f894 e007 	ldrb.w	lr, [r4, #7]
	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c56:	b209      	sxth	r1, r1
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c58:	eb03 2305 	add.w	r3, r3, r5, lsl #8
	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c5c:	79a5      	ldrb	r5, [r4, #6]
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c5e:	b212      	sxth	r2, r2
	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c60:	eb0e 2e05 	add.w	lr, lr, r5, lsl #8
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c64:	b21b      	sxth	r3, r3
	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c66:	fa0f f58e 	sxth.w	r5, lr
	z = -z;
 8000c6a:	f1c6 0e00 	rsb	lr, r6, #0
	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c6e:	ee06 5a10 	vmov	s12, r5

	if (himu->cal.progress > 0) {
 8000c72:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	f000 80da 	beq.w	8000e2e <BSP_DRV_IMU_Parse+0x21e>
		// If calibration enabled, collecting data for calibration
		himu->cal.c_y += y;
		himu->cal.c_x += x;
		himu->cal.c_z += (z - 16384);
 8000c7a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8000e80 <BSP_DRV_IMU_Parse+0x270>
		himu->cal.c_oy += oy;
		himu->cal.c_ox += ox;
		himu->cal.c_oz += oz;
		himu->cal.progress -= 1;
 8000c7e:	3d01      	subs	r5, #1
		himu->cal.c_x += x;
 8000c80:	69e7      	ldr	r7, [r4, #28]
		himu->cal.c_z += (z - 16384);
 8000c82:	eba8 0806 	sub.w	r8, r8, r6
		himu->cal.c_y += y;
 8000c86:	6a26      	ldr	r6, [r4, #32]
		himu->cal.c_x += x;
 8000c88:	4467      	add	r7, ip
		himu->cal.progress -= 1;
 8000c8a:	62a5      	str	r5, [r4, #40]	; 0x28
		himu->cal.c_y += y;
 8000c8c:	4406      	add	r6, r0
		himu->cal.c_x += x;
 8000c8e:	61e7      	str	r7, [r4, #28]
		himu->cal.c_y += y;
 8000c90:	9601      	str	r6, [sp, #4]
 8000c92:	6226      	str	r6, [r4, #32]
		himu->cal.c_z += (z - 16384);
 8000c94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000c96:	44b0      	add	r8, r6
		himu->cal.c_oy += oy;
 8000c98:	6966      	ldr	r6, [r4, #20]
 8000c9a:	eb01 0906 	add.w	r9, r1, r6
		himu->cal.c_ox += ox;
 8000c9e:	6926      	ldr	r6, [r4, #16]
		himu->cal.c_z += (z - 16384);
 8000ca0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		himu->cal.c_ox += ox;
 8000ca4:	eb02 0a06 	add.w	sl, r2, r6
		himu->cal.c_oz += oz;
 8000ca8:	69a6      	ldr	r6, [r4, #24]
		himu->cal.c_oy += oy;
 8000caa:	f8c4 9014 	str.w	r9, [r4, #20]
		himu->cal.c_oz += oz;
 8000cae:	eb03 0b06 	add.w	fp, r3, r6
		himu->cal.c_ox += ox;
 8000cb2:	f8c4 a010 	str.w	sl, [r4, #16]
		himu->cal.c_oz += oz;
 8000cb6:	f8c4 b018 	str.w	fp, [r4, #24]
		if (himu->cal.progress == 0) {
 8000cba:	bb65      	cbnz	r5, 8000d16 <BSP_DRV_IMU_Parse+0x106>
			himu->cal.c_y = himu->cal.c_y / 128;
 8000cbc:	9e01      	ldr	r6, [sp, #4]
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	bfb8      	it	lt
 8000cc2:	367f      	addlt	r6, #127	; 0x7f
			himu->cal.c_x = himu->cal.c_x / 128;
 8000cc4:	2f00      	cmp	r7, #0
 8000cc6:	bfb8      	it	lt
 8000cc8:	377f      	addlt	r7, #127	; 0x7f
			himu->cal.c_z = himu->cal.c_z / 128;
 8000cca:	f1b8 0f00 	cmp.w	r8, #0
			himu->cal.c_y = himu->cal.c_y / 128;
 8000cce:	ea4f 16e6 	mov.w	r6, r6, asr #7
			himu->cal.c_z = himu->cal.c_z / 128;
 8000cd2:	bfb8      	it	lt
 8000cd4:	f108 087f 	addlt.w	r8, r8, #127	; 0x7f
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000cd8:	f1b9 0f00 	cmp.w	r9, #0
			himu->cal.c_x = himu->cal.c_x / 128;
 8000cdc:	ea4f 17e7 	mov.w	r7, r7, asr #7
			himu->cal.c_y = himu->cal.c_y / 128;
 8000ce0:	6226      	str	r6, [r4, #32]
			himu->cal.c_z = himu->cal.c_z / 128;
 8000ce2:	ea4f 15e8 	mov.w	r5, r8, asr #7
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000ce6:	bfb8      	it	lt
 8000ce8:	f109 097f 	addlt.w	r9, r9, #127	; 0x7f
			himu->cal.c_ox = himu->cal.c_ox / 128;
 8000cec:	f1ba 0f00 	cmp.w	sl, #0
			himu->cal.c_x = himu->cal.c_x / 128;
 8000cf0:	61e7      	str	r7, [r4, #28]
			himu->cal.c_z = himu->cal.c_z / 128;
 8000cf2:	6265      	str	r5, [r4, #36]	; 0x24
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000cf4:	ea4f 15e9 	mov.w	r5, r9, asr #7
			himu->cal.c_ox = himu->cal.c_ox / 128;
 8000cf8:	bfb8      	it	lt
 8000cfa:	f10a 0a7f 	addlt.w	sl, sl, #127	; 0x7f
			himu->cal.c_oz = himu->cal.c_oz / 128;
 8000cfe:	f1bb 0f00 	cmp.w	fp, #0
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000d02:	6165      	str	r5, [r4, #20]
			himu->cal.c_oz = himu->cal.c_oz / 128;
 8000d04:	bfb8      	it	lt
 8000d06:	f10b 0b7f 	addlt.w	fp, fp, #127	; 0x7f
			himu->cal.c_ox = himu->cal.c_ox / 128;
 8000d0a:	ea4f 15ea 	mov.w	r5, sl, asr #7
 8000d0e:	6125      	str	r5, [r4, #16]
			himu->cal.c_oz = himu->cal.c_oz / 128;
 8000d10:	ea4f 15eb 	mov.w	r5, fp, asr #7
 8000d14:	61a5      	str	r5, [r4, #24]
	// Calculating floats
	himu->data.y = (float)y / 16384.0;
	himu->data.x = (float)x / 16384.0;
	himu->data.z = (float)z / 16384.0;

	himu->data.oy = (float)oy / 65.5;
 8000d16:	ee07 1a90 	vmov	s15, r1
	himu->data.ox = (float)ox / 65.5;
	himu->data.oz = (float)oz / 65.5;

	himu->data.t = (float)t / 340.0 + 36.53;
 8000d1a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
	himu->data.oy = (float)oy / 65.5;
 8000d1e:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
	himu->data.ox = (float)ox / 65.5;
 8000d22:	ee07 2a90 	vmov	s15, r2
 8000d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	himu->data.y = (float)y / 16384.0;
 8000d2a:	ee07 0a90 	vmov	s15, r0
	himu->data.oy = (float)oy / 65.5;
 8000d2e:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
	himu->data.y = (float)y / 16384.0;
 8000d32:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	himu->data.oz = (float)oz / 65.5;
 8000d36:	ee07 3a90 	vmov	s15, r3
	himu->data.t = (float)t / 340.0 + 36.53;
 8000d3a:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8000e50 <BSP_DRV_IMU_Parse+0x240>
 8000d3e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8000e58 <BSP_DRV_IMU_Parse+0x248>
	himu->data.oz = (float)oz / 65.5;
 8000d42:	eef8 3ae7 	vcvt.f32.s32	s7, s15
	himu->data.ox = (float)ox / 65.5;
 8000d46:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	himu->data.t = (float)t / 340.0 + 36.53;
 8000d4a:	eea6 5b01 	vfma.f64	d5, d6, d1
	himu->data.z = (float)z / 16384.0;
 8000d4e:	ee06 ea10 	vmov	s12, lr
	himu->data.x = (float)x / 16384.0;
 8000d52:	ee06 ca90 	vmov	s13, ip
	himu->data.oz = (float)oz / 65.5;
 8000d56:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
	himu->data.z = (float)z / 16384.0;
 8000d5a:	eef8 0ac6 	vcvt.f32.s32	s1, s12
	himu->data.y = (float)y / 16384.0;
 8000d5e:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8000e70 <BSP_DRV_IMU_Parse+0x260>
	himu->data.x = (float)x / 16384.0;
 8000d62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	himu->data.y = (float)y / 16384.0;
 8000d66:	ee20 0a06 	vmul.f32	s0, s0, s12
	himu->data.z = (float)z / 16384.0;
 8000d6a:	ee60 0a86 	vmul.f32	s1, s1, s12
	himu->data.x = (float)x / 16384.0;
 8000d6e:	ee66 6a86 	vmul.f32	s13, s13, s12
	himu->data.t = (float)t / 340.0 + 36.53;
 8000d72:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
	himu->data.y = (float)y / 16384.0;
 8000d76:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
	himu->data.z = (float)z / 16384.0;
 8000d7a:	edc4 0a11 	vstr	s1, [r4, #68]	; 0x44
	himu->data.x = (float)x / 16384.0;
 8000d7e:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
	himu->data.t = (float)t / 340.0 + 36.53;
 8000d82:	ed84 5a12 	vstr	s10, [r4, #72]	; 0x48
	himu->data.oy = (float)oy / 65.5;
 8000d86:	ed9f 2b36 	vldr	d2, [pc, #216]	; 8000e60 <BSP_DRV_IMU_Parse+0x250>

	// Calculating pitch, roll, yaw
	float acc_pitch = 57.29577951 * atan2f(himu->data.y, himu->data.z);
 8000d8a:	ed9f 8b37 	vldr	d8, [pc, #220]	; 8000e68 <BSP_DRV_IMU_Parse+0x258>
	himu->data.ox = (float)ox / 65.5;
 8000d8e:	ee27 7b02 	vmul.f64	d7, d7, d2
	himu->data.oy = (float)oy / 65.5;
 8000d92:	ee24 4b02 	vmul.f64	d4, d4, d2
	himu->data.oz = (float)oz / 65.5;
 8000d96:	ee23 3b02 	vmul.f64	d3, d3, d2
	himu->data.oy = (float)oy / 65.5;
 8000d9a:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
	himu->data.ox = (float)ox / 65.5;
 8000d9e:	eeb7 9bc7 	vcvt.f32.f64	s18, d7
	himu->data.oz = (float)oz / 65.5;
 8000da2:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
	himu->data.oy = (float)oy / 65.5;
 8000da6:	ed84 4a0d 	vstr	s8, [r4, #52]	; 0x34
	himu->data.ox = (float)ox / 65.5;
 8000daa:	ed84 9a0c 	vstr	s18, [r4, #48]	; 0x30
	himu->data.oz = (float)oz / 65.5;
 8000dae:	ed84 3a0e 	vstr	s6, [r4, #56]	; 0x38
	float acc_pitch = 57.29577951 * atan2f(himu->data.y, himu->data.z);
 8000db2:	f011 fab9 	bl	8012328 <atan2f>
 8000db6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	himu->pos.pitch = KALMAN_Update(&KALMAN_pitch, acc_pitch, himu->data.ox);
 8000dba:	eef0 0a49 	vmov.f32	s1, s18
 8000dbe:	482d      	ldr	r0, [pc, #180]	; (8000e74 <BSP_DRV_IMU_Parse+0x264>)
	float acc_pitch = 57.29577951 * atan2f(himu->data.y, himu->data.z);
 8000dc0:	ee27 7b08 	vmul.f64	d7, d7, d8
	himu->pos.pitch = KALMAN_Update(&KALMAN_pitch, acc_pitch, himu->data.ox);
 8000dc4:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8000dc8:	f004 fa94 	bl	80052f4 <KALMAN_Update>

	float acc_roll = 57.29577951 * atan2f(-himu->data.x, himu->data.z);
 8000dcc:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8000dd0:	edd4 0a11 	vldr	s1, [r4, #68]	; 0x44
	himu->pos.pitch = KALMAN_Update(&KALMAN_pitch, acc_pitch, himu->data.ox);
 8000dd4:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
	float acc_roll = 57.29577951 * atan2f(-himu->data.x, himu->data.z);
 8000dd8:	eeb1 0a67 	vneg.f32	s0, s15
 8000ddc:	f011 faa4 	bl	8012328 <atan2f>
 8000de0:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	himu->pos.roll = KALMAN_Update(&KALMAN_roll, acc_roll, himu->data.oy);
 8000de4:	4824      	ldr	r0, [pc, #144]	; (8000e78 <BSP_DRV_IMU_Parse+0x268>)
 8000de6:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	float acc_roll = 57.29577951 * atan2f(-himu->data.x, himu->data.z);
 8000dea:	ee27 7b08 	vmul.f64	d7, d7, d8
	himu->pos.roll = KALMAN_Update(&KALMAN_roll, acc_roll, himu->data.oy);
 8000dee:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8000df2:	f004 fa7f 	bl	80052f4 <KALMAN_Update>

	float acc_yaw = 57.29577951 * atan2f(-himu->data.x, himu->data.y);
 8000df6:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8000dfa:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
	himu->pos.roll = KALMAN_Update(&KALMAN_roll, acc_roll, himu->data.oy);
 8000dfe:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
	float acc_yaw = 57.29577951 * atan2f(-himu->data.x, himu->data.y);
 8000e02:	eeb1 0a67 	vneg.f32	s0, s15
 8000e06:	f011 fa8f 	bl	8012328 <atan2f>
 8000e0a:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	himu->pos.yaw = KALMAN_Update(&KALMAN_yaw, acc_yaw, himu->data.oz);
 8000e0e:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8000e12:	481a      	ldr	r0, [pc, #104]	; (8000e7c <BSP_DRV_IMU_Parse+0x26c>)
	float acc_yaw = 57.29577951 * atan2f(-himu->data.x, himu->data.y);
 8000e14:	ee27 7b08 	vmul.f64	d7, d7, d8
	himu->pos.yaw = KALMAN_Update(&KALMAN_yaw, acc_yaw, himu->data.oz);
 8000e18:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8000e1c:	f004 fa6a 	bl	80052f4 <KALMAN_Update>
 8000e20:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54

}
 8000e24:	b003      	add	sp, #12
 8000e26:	ecbd 8b04 	vpop	{d8-d9}
 8000e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		y -= himu->cal.c_y;
 8000e2e:	6a25      	ldr	r5, [r4, #32]
 8000e30:	1b40      	subs	r0, r0, r5
		x -= himu->cal.c_x;
 8000e32:	69e5      	ldr	r5, [r4, #28]
 8000e34:	ebac 0c05 	sub.w	ip, ip, r5
		z -= himu->cal.c_z;
 8000e38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000e3a:	ebae 0e05 	sub.w	lr, lr, r5
		oy -= himu->cal.c_oy;
 8000e3e:	6965      	ldr	r5, [r4, #20]
 8000e40:	1b49      	subs	r1, r1, r5
		ox -= himu->cal.c_ox;
 8000e42:	6925      	ldr	r5, [r4, #16]
 8000e44:	1b52      	subs	r2, r2, r5
		oz -= himu->cal.c_oz;
 8000e46:	69a5      	ldr	r5, [r4, #24]
 8000e48:	1b5b      	subs	r3, r3, r5
 8000e4a:	e764      	b.n	8000d16 <BSP_DRV_IMU_Parse+0x106>
 8000e4c:	f3af 8000 	nop.w
 8000e50:	18181818 	.word	0x18181818
 8000e54:	3f681818 	.word	0x3f681818
 8000e58:	0a3d70a4 	.word	0x0a3d70a4
 8000e5c:	404243d7 	.word	0x404243d7
 8000e60:	9e4a4271 	.word	0x9e4a4271
 8000e64:	3f8f4465 	.word	0x3f8f4465
 8000e68:	1a5d2372 	.word	0x1a5d2372
 8000e6c:	404ca5dc 	.word	0x404ca5dc
 8000e70:	38800000 	.word	0x38800000
 8000e74:	24000054 	.word	0x24000054
 8000e78:	24000090 	.word	0x24000090
 8000e7c:	240000cc 	.word	0x240000cc
 8000e80:	ffffc000 	.word	0xffffc000

08000e84 <BSP_DRV_LCD_TP_Init>:

#include "RVT50AQTNWC00.h"

uint8_t BSP_DRV_LCD_TP_Init(I2C_TypeDef *hi2c) {
	return BSP_OK;
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	4770      	bx	lr

08000e88 <BSP_DRV_LCD_TP_Parse>:

void BSP_DRV_LCD_TP_Parse(LCD_TP_HandleTypeDef *hlcdtp) {
 8000e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;

	// Parsing Individual Touch Points
	for (uint8_t i=0; i<5; i++) {
		uint8_t ii = 3 + i * 6;
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000e8c:	78c3      	ldrb	r3, [r0, #3]
void BSP_DRV_LCD_TP_Parse(LCD_TP_HandleTypeDef *hlcdtp) {
 8000e8e:	4604      	mov	r4, r0
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;
 8000e90:	7885      	ldrb	r5, [r0, #2]
void BSP_DRV_LCD_TP_Parse(LCD_TP_HandleTypeDef *hlcdtp) {
 8000e92:	b083      	sub	sp, #12
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000e94:	ea4f 1a93 	mov.w	sl, r3, lsr #6
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000e98:	f890 9004 	ldrb.w	r9, [r0, #4]
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;
 8000e9c:	f005 050f 	and.w	r5, r5, #15
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000ea0:	021b      	lsls	r3, r3, #8
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000ea2:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;
 8000ea6:	77c5      	strb	r5, [r0, #31]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000ea8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000eac:	7a40      	ldrb	r0, [r0, #9]
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
	}

	// Detecting gestures
	switch (hlcdtp->touch_count) {
 8000eae:	2d01      	cmp	r5, #1
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000eb0:	f894 b005 	ldrb.w	fp, [r4, #5]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000eb4:	ea4f 2100 	mov.w	r1, r0, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000eb8:	7ae2      	ldrb	r2, [r4, #11]
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000eba:	ea4f 1090 	mov.w	r0, r0, lsr #6
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000ebe:	f894 800a 	ldrb.w	r8, [r4, #10]
 8000ec2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000ec6:	7be7      	ldrb	r7, [r4, #15]
 8000ec8:	9000      	str	r0, [sp, #0]
 8000eca:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ece:	ea4f 200b 	mov.w	r0, fp, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000ed2:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 8000ed6:	7c66      	ldrb	r6, [r4, #17]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ed8:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000edc:	f894 e015 	ldrb.w	lr, [r4, #21]
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000ee0:	f884 b026 	strb.w	fp, [r4, #38]	; 0x26
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ee4:	ea4f 2b02 	mov.w	fp, r2, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000ee8:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8000eec:	f894 c017 	ldrb.w	ip, [r4, #23]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ef0:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000ef4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ef8:	79a2      	ldrb	r2, [r4, #6]
 8000efa:	ea40 0002 	orr.w	r0, r0, r2
 8000efe:	7b22      	ldrb	r2, [r4, #12]
 8000f00:	ea42 020b 	orr.w	r2, r2, fp
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f04:	ea49 0b03 	orr.w	fp, r9, r3
 8000f08:	ea48 0901 	orr.w	r9, r8, r1
 8000f0c:	f04f 0100 	mov.w	r1, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f8cd b004 	str.w	fp, [sp, #4]
 8000f18:	f369 010f 	bfi	r1, r9, #0, #16
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	ea4f 2907 	mov.w	r9, r7, lsl #8
 8000f22:	f36b 030f 	bfi	r3, fp, #0, #16
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f26:	ea4f 1797 	mov.w	r7, r7, lsr #6
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f2a:	f362 411f 	bfi	r1, r2, #16, #16
 8000f2e:	f360 431f 	bfi	r3, r0, #16, #16
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f32:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f36:	f409 6770 	and.w	r7, r9, #3840	; 0xf00
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f3a:	ea4f 2906 	mov.w	r9, r6, lsl #8
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f3e:	6223      	str	r3, [r4, #32]
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f40:	ea4f 1616 	mov.w	r6, r6, lsr #4
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f44:	62a1      	str	r1, [r4, #40]	; 0x28
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f46:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f4a:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f4e:	ea4f 260e 	mov.w	r6, lr, lsl #8
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f52:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 8000f56:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f5a:	f406 6e70 	and.w	lr, r6, #3840	; 0xf00
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f5e:	ea4f 260c 	mov.w	r6, ip, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f62:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f66:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f6a:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f6e:	f894 c010 	ldrb.w	ip, [r4, #16]
 8000f72:	ea4c 0c07 	orr.w	ip, ip, r7
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f76:	7ca7      	ldrb	r7, [r4, #18]
 8000f78:	ea47 0709 	orr.w	r7, r7, r9
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f7c:	f8a4 c030 	strh.w	ip, [r4, #48]	; 0x30
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f80:	8667      	strh	r7, [r4, #50]	; 0x32
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f82:	7da7      	ldrb	r7, [r4, #22]
 8000f84:	ea47 070e 	orr.w	r7, r7, lr
 8000f88:	8727      	strh	r7, [r4, #56]	; 0x38
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f8a:	7e27      	ldrb	r7, [r4, #24]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f8c:	f894 c01c 	ldrb.w	ip, [r4, #28]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f90:	ea46 0607 	orr.w	r6, r6, r7
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f94:	7ee7      	ldrb	r7, [r4, #27]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f96:	8766      	strh	r6, [r4, #58]	; 0x3a
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f98:	ea4f 2e07 	mov.w	lr, r7, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f9c:	7f66      	ldrb	r6, [r4, #29]
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f9e:	ea4f 1797 	mov.w	r7, r7, lsr #6
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000fa2:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000fa6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000faa:	ea4f 2706 	mov.w	r7, r6, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000fae:	ea4f 1616 	mov.w	r6, r6, lsr #4
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000fb2:	ea4c 0c0e 	orr.w	ip, ip, lr
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000fb6:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000fba:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000fbe:	7fa6      	ldrb	r6, [r4, #30]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000fc0:	f8a4 c040 	strh.w	ip, [r4, #64]	; 0x40
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000fc4:	ea46 0607 	orr.w	r6, r6, r7
 8000fc8:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
	switch (hlcdtp->touch_count) {
 8000fcc:	d00a      	beq.n	8000fe4 <BSP_DRV_LCD_TP_Parse+0x15c>
 8000fce:	2d02      	cmp	r5, #2
 8000fd0:	f000 8098 	beq.w	8001104 <BSP_DRV_LCD_TP_Parse+0x27c>
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d041      	beq.n	800105c <BSP_DRV_LCD_TP_Parse+0x1d4>
				}
			}
			break;

		default:
			hlcdtp->gest_data.gest = LCD_TP_GEST_NONE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
		}
}
 8000fde:	b003      	add	sp, #12
 8000fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (hlcdtp->touch_data[0].status == 2) {
 8000fe4:	f1ba 0f02 	cmp.w	sl, #2
 8000fe8:	d1f9      	bne.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				if ((hlcdtp->gest_data.gest != LCD_TP_GEST_CLICK_DOWN) && (hlcdtp->gest_data.gest != LCD_TP_GEST_DRAG)) {
 8000fea:	f8d4 224c 	ldr.w	r2, [r4, #588]	; 0x24c
 8000fee:	2a01      	cmp	r2, #1
 8000ff0:	f000 812c 	beq.w	800124c <BSP_DRV_LCD_TP_Parse+0x3c4>
 8000ff4:	2a40      	cmp	r2, #64	; 0x40
 8000ff6:	f000 8129 	beq.w	800124c <BSP_DRV_LCD_TP_Parse+0x3c4>
					hlcdtp->gest_data.start_x = hlcdtp->touch_data[0].x;
 8000ffa:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
					hlcdtp->gest_data.start_t = BSP_GetTick();
 8000ffe:	f003 f88b 	bl	8004118 <BSP_GetTick>
					hlcdtp->gest_data.area = 255;
 8001002:	21ff      	movs	r1, #255	; 0xff
 8001004:	4623      	mov	r3, r4
 8001006:	2200      	movs	r2, #0
					hlcdtp->gest_data.start_t = BSP_GetTick();
 8001008:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
					hlcdtp->gest_data.gest = LCD_TP_GEST_CLICK_DOWN;
 800100c:	f8c4 524c 	str.w	r5, [r4, #588]	; 0x24c
					hlcdtp->gest_data.area = 255;
 8001010:	f884 1248 	strb.w	r1, [r4, #584]	; 0x248
						if (hlcdtp->touch_areas[i].active == 0) continue;
 8001014:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8001018:	b2d6      	uxtb	r6, r2
					for (uint8_t i=0;i<LCD_TP_AREA_NO;i++) {
 800101a:	3201      	adds	r2, #1
						if (hlcdtp->touch_areas[i].active == 0) continue;
 800101c:	2900      	cmp	r1, #0
 800101e:	f000 8132 	beq.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 8001022:	f9b3 5048 	ldrsh.w	r5, [r3, #72]	; 0x48
 8001026:	f8b4 0250 	ldrh.w	r0, [r4, #592]	; 0x250
 800102a:	42a8      	cmp	r0, r5
 800102c:	f2c0 812b 	blt.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001030:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8001034:	4429      	add	r1, r5
 8001036:	4288      	cmp	r0, r1
 8001038:	f300 8125 	bgt.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 800103c:	f9b3 504a 	ldrsh.w	r5, [r3, #74]	; 0x4a
 8001040:	f8b4 0252 	ldrh.w	r0, [r4, #594]	; 0x252
 8001044:	42a8      	cmp	r0, r5
 8001046:	f2c0 811e 	blt.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 800104a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800104e:	4429      	add	r1, r5
 8001050:	4288      	cmp	r0, r1
 8001052:	f300 8118 	bgt.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						hlcdtp->gest_data.area = i;
 8001056:	f884 6248 	strb.w	r6, [r4, #584]	; 0x248
						break;
 800105a:	e7c0      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 800105c:	f9b4 1260 	ldrsh.w	r1, [r4, #608]	; 0x260
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 8001060:	f9b4 2262 	ldrsh.w	r2, [r4, #610]	; 0x262
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001064:	ee06 1a90 	vmov	s13, r1
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 8001068:	1d0b      	adds	r3, r1, #4
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 800106a:	ee05 2a90 	vmov	s11, r2
			hlcdtp->gest_data.gest = LCD_TP_GEST_NONE;
 800106e:	f8c4 524c 	str.w	r5, [r4, #588]	; 0x24c
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001072:	eeb8 6be6 	vcvt.f64.s32	d6, s13
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 8001076:	b29b      	uxth	r3, r3
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 8001078:	eeb8 4be5 	vcvt.f64.s32	d4, s11
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 800107c:	edd4 5a99 	vldr	s11, [r4, #612]	; 0x264
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 8001080:	2b08      	cmp	r3, #8
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001082:	eeb8 5b65 	vcvt.f64.u32	d5, s11
 8001086:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80012e8 <BSP_DRV_LCD_TP_Parse+0x460>
 800108a:	ee26 6b07 	vmul.f64	d6, d6, d7
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 800108e:	ee24 4b07 	vmul.f64	d4, d4, d7
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001092:	ee86 7b05 	vdiv.f64	d7, d6, d5
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 8001096:	ee84 6b05 	vdiv.f64	d6, d4, d5
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 800109a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800109e:	ed84 7a9a 	vstr	s14, [r4, #616]	; 0x268
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 80010a2:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 80010a6:	ed84 6a9b 	vstr	s12, [r4, #620]	; 0x26c
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 80010aa:	f200 8083 	bhi.w	80011b4 <BSP_DRV_LCD_TP_Parse+0x32c>
					&& (hlcdtp->gest_data.delta_y > -5) && (hlcdtp->gest_data.delta_y < 5)) {
 80010ae:	1d13      	adds	r3, r2, #4
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	f240 80ed 	bls.w	8001292 <BSP_DRV_LCD_TP_Parse+0x40a>
			if ((hlcdtp->gest_data.delta_y < -100) && (hlcdtp->gest_data.speed_y < -800)
 80010b8:	f112 0f64 	cmn.w	r2, #100	; 0x64
 80010bc:	f280 809f 	bge.w	80011fe <BSP_DRV_LCD_TP_Parse+0x376>
 80010c0:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80012f0 <BSP_DRV_LCD_TP_Parse+0x468>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80010c4:	eddf 7a8b 	vldr	s15, [pc, #556]	; 80012f4 <BSP_DRV_LCD_TP_Parse+0x46c>
			if ((hlcdtp->gest_data.delta_y < -100) && (hlcdtp->gest_data.speed_y < -800)
 80010c8:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80010d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
			if ((hlcdtp->gest_data.delta_y < -100) && (hlcdtp->gest_data.speed_y < -800)
 80010d4:	bf4c      	ite	mi
 80010d6:	2301      	movmi	r3, #1
 80010d8:	2300      	movpl	r3, #0
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	bfd8      	it	le
 80010e4:	2300      	movle	r3, #0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f43f af79 	beq.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
 80010ec:	eddf 7a82 	vldr	s15, [pc, #520]	; 80012f8 <BSP_DRV_LCD_TP_Parse+0x470>
 80010f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	f57f af71 	bpl.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_UP;
 80010fc:	2304      	movs	r3, #4
 80010fe:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
				break;
 8001102:	e76c      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
			if ((hlcdtp->touch_data[0].status == 2) && (hlcdtp->touch_data[1].status == 2)) {
 8001104:	f1ba 0f02 	cmp.w	sl, #2
 8001108:	f47f af69 	bne.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
 800110c:	9d00      	ldr	r5, [sp, #0]
 800110e:	2d02      	cmp	r5, #2
 8001110:	f47f af65 	bne.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				hlcdtp->gest_data.start_y = hlcdtp->touch_data[0].y;
 8001114:	b280      	uxth	r0, r0
				hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001116:	9d01      	ldr	r5, [sp, #4]
 8001118:	b292      	uxth	r2, r2
				hlcdtp->gest_data.start_x = hlcdtp->touch_data[0].x;
 800111a:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
				hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 800111e:	eba8 0805 	sub.w	r8, r8, r5
				hlcdtp->gest_data.stop_x = hlcdtp->touch_data[1].x;
 8001122:	f8c4 1258 	str.w	r1, [r4, #600]	; 0x258
				hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 8001126:	1a12      	subs	r2, r2, r0
				hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001128:	f8a4 8260 	strh.w	r8, [r4, #608]	; 0x260
				hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 800112c:	f8a4 2262 	strh.w	r2, [r4, #610]	; 0x262
				hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001130:	f002 fff2 	bl	8004118 <BSP_GetTick>
				if (hlcdtp->gest_data.gest != LCD_TP_GEST_ZOOM) {
 8001134:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
				hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001138:	f8c4 025c 	str.w	r0, [r4, #604]	; 0x25c
				if (hlcdtp->gest_data.gest != LCD_TP_GEST_ZOOM) {
 800113c:	2b80      	cmp	r3, #128	; 0x80
 800113e:	f43f af4e 	beq.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
					hlcdtp->gest_data.start_t = BSP_GetTick();
 8001142:	f002 ffe9 	bl	8004118 <BSP_GetTick>
					hlcdtp->gest_data.area = 255;
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	4623      	mov	r3, r4
 800114a:	2200      	movs	r2, #0
					hlcdtp->gest_data.start_t = BSP_GetTick();
 800114c:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
					hlcdtp->gest_data.area = 255;
 8001150:	f884 1248 	strb.w	r1, [r4, #584]	; 0x248
						if (hlcdtp->touch_areas[i].active == 0) continue;
 8001154:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8001158:	b2d6      	uxtb	r6, r2
 800115a:	b319      	cbz	r1, 80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 800115c:	f8b4 5250 	ldrh.w	r5, [r4, #592]	; 0x250
 8001160:	f9b3 0048 	ldrsh.w	r0, [r3, #72]	; 0x48
 8001164:	4285      	cmp	r5, r0
 8001166:	db1d      	blt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001168:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 800116c:	4401      	add	r1, r0
 800116e:	428d      	cmp	r5, r1
 8001170:	dc18      	bgt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.stop_x < hlcdtp->touch_areas[i].x) continue;
 8001172:	f8b4 5258 	ldrh.w	r5, [r4, #600]	; 0x258
						if (hlcdtp->gest_data.stop_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001176:	42a9      	cmp	r1, r5
 8001178:	db14      	blt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
 800117a:	42a8      	cmp	r0, r5
 800117c:	dc12      	bgt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 800117e:	f8b4 5252 	ldrh.w	r5, [r4, #594]	; 0x252
 8001182:	f9b3 004a 	ldrsh.w	r0, [r3, #74]	; 0x4a
 8001186:	4285      	cmp	r5, r0
 8001188:	db0c      	blt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 800118a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800118e:	4401      	add	r1, r0
 8001190:	428d      	cmp	r5, r1
 8001192:	dc07      	bgt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.stop_y < hlcdtp->touch_areas[i].y) continue;
 8001194:	f8b4 525a 	ldrh.w	r5, [r4, #602]	; 0x25a
						if (hlcdtp->gest_data.stop_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 8001198:	42a8      	cmp	r0, r5
 800119a:	dc03      	bgt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
 800119c:	42a9      	cmp	r1, r5
						hlcdtp->gest_data.area = i;
 800119e:	bfa8      	it	ge
 80011a0:	f884 6248 	strbge.w	r6, [r4, #584]	; 0x248
					for (uint8_t i=0;i<LCD_TP_AREA_NO;i++) {
 80011a4:	3201      	adds	r2, #1
 80011a6:	3310      	adds	r3, #16
 80011a8:	2a20      	cmp	r2, #32
 80011aa:	d1d3      	bne.n	8001154 <BSP_DRV_LCD_TP_Parse+0x2cc>
					hlcdtp->gest_data.gest = LCD_TP_GEST_ZOOM;
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
 80011b2:	e714      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 80011b4:	f111 0f64 	cmn.w	r1, #100	; 0x64
 80011b8:	da6f      	bge.n	800129a <BSP_DRV_LCD_TP_Parse+0x412>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80011ba:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80012f4 <BSP_DRV_LCD_TP_Parse+0x46c>
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 80011be:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80012f0 <BSP_DRV_LCD_TP_Parse+0x468>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80011c2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 80011ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80011ce:	bfcc      	ite	gt
 80011d0:	2301      	movgt	r3, #1
 80011d2:	2300      	movle	r3, #0
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	bf58      	it	pl
 80011de:	2300      	movpl	r3, #0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f43f af69 	beq.w	80010b8 <BSP_DRV_LCD_TP_Parse+0x230>
 80011e6:	eddf 7a44 	vldr	s15, [pc, #272]	; 80012f8 <BSP_DRV_LCD_TP_Parse+0x470>
 80011ea:	eeb4 6a67 	vcmp.f32	s12, s15
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	f57f af61 	bpl.w	80010b8 <BSP_DRV_LCD_TP_Parse+0x230>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_LEFT;
 80011f6:	2310      	movs	r3, #16
 80011f8:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
				break;
 80011fc:	e6ef      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80011fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80012f4 <BSP_DRV_LCD_TP_Parse+0x46c>
			if ((hlcdtp->gest_data.delta_y > 100) && (hlcdtp->gest_data.speed_y > 800)
 8001202:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80012fc <BSP_DRV_LCD_TP_Parse+0x474>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 8001206:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if ((hlcdtp->gest_data.delta_y > 100) && (hlcdtp->gest_data.speed_y > 800)
 800120e:	eeb4 6ae7 	vcmpe.f32	s12, s15
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 8001212:	bfcc      	ite	gt
 8001214:	2301      	movgt	r3, #1
 8001216:	2300      	movle	r3, #0
			if ((hlcdtp->gest_data.delta_y > 100) && (hlcdtp->gest_data.speed_y > 800)
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	bfd8      	it	le
 8001222:	2300      	movle	r3, #0
 8001224:	2a64      	cmp	r2, #100	; 0x64
 8001226:	bfd4      	ite	le
 8001228:	2300      	movle	r3, #0
 800122a:	f003 0301 	andgt.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	f43f aed5 	beq.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
 8001234:	eddf 7a30 	vldr	s15, [pc, #192]	; 80012f8 <BSP_DRV_LCD_TP_Parse+0x470>
 8001238:	eeb4 7a67 	vcmp.f32	s14, s15
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	f57f aecd 	bpl.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_DOWN;
 8001244:	2308      	movs	r3, #8
 8001246:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
				break;
 800124a:	e6c8      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
					hlcdtp->gest_data.stop_x = hlcdtp->touch_data[0].x;
 800124c:	f8c4 3258 	str.w	r3, [r4, #600]	; 0x258
					hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001250:	f002 ff62 	bl	8004118 <BSP_GetTick>
					hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001254:	f8b4 1250 	ldrh.w	r1, [r4, #592]	; 0x250
 8001258:	f8b4 2258 	ldrh.w	r2, [r4, #600]	; 0x258
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 800125c:	f8b4 325a 	ldrh.w	r3, [r4, #602]	; 0x25a
					hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001260:	1a52      	subs	r2, r2, r1
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 8001262:	f8b4 1252 	ldrh.w	r1, [r4, #594]	; 0x252
					hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001266:	f8c4 025c 	str.w	r0, [r4, #604]	; 0x25c
					hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 800126a:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 800126e:	1a5b      	subs	r3, r3, r1
					hlcdtp->gest_data.delta_t = hlcdtp->gest_data.stop_t - hlcdtp->gest_data.start_t;
 8001270:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 8001274:	f8a4 3262 	strh.w	r3, [r4, #610]	; 0x262
					hlcdtp->gest_data.delta_t = hlcdtp->gest_data.stop_t - hlcdtp->gest_data.start_t;
 8001278:	1a80      	subs	r0, r0, r2
					hlcdtp->gest_data.gest = LCD_TP_GEST_DRAG;
 800127a:	2240      	movs	r2, #64	; 0x40
					hlcdtp->gest_data.delta_t = hlcdtp->gest_data.stop_t - hlcdtp->gest_data.start_t;
 800127c:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
					hlcdtp->gest_data.gest = LCD_TP_GEST_DRAG;
 8001280:	f8c4 224c 	str.w	r2, [r4, #588]	; 0x24c
 8001284:	e6ab      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
					for (uint8_t i=0;i<LCD_TP_AREA_NO;i++) {
 8001286:	2a20      	cmp	r2, #32
 8001288:	f103 0310 	add.w	r3, r3, #16
 800128c:	f47f aec2 	bne.w	8001014 <BSP_DRV_LCD_TP_Parse+0x18c>
 8001290:	e6a5      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				hlcdtp->gest_data.gest = LCD_TP_GEST_CLICK_UP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
				break;
 8001298:	e6a1      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
			if ((hlcdtp->gest_data.delta_x > 100) && (hlcdtp->gest_data.speed_x > 800)
 800129a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80012fc <BSP_DRV_LCD_TP_Parse+0x474>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 800129e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80012f4 <BSP_DRV_LCD_TP_Parse+0x46c>
			if ((hlcdtp->gest_data.delta_x > 100) && (hlcdtp->gest_data.speed_x > 800)
 80012a2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80012aa:	eeb4 6ae7 	vcmpe.f32	s12, s15
			if ((hlcdtp->gest_data.delta_x > 100) && (hlcdtp->gest_data.speed_x > 800)
 80012ae:	bfcc      	ite	gt
 80012b0:	2301      	movgt	r3, #1
 80012b2:	2300      	movle	r3, #0
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	bfd8      	it	le
 80012be:	2300      	movle	r3, #0
 80012c0:	2964      	cmp	r1, #100	; 0x64
 80012c2:	bfd4      	ite	le
 80012c4:	2300      	movle	r3, #0
 80012c6:	f003 0301 	andgt.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f43f aef4 	beq.w	80010b8 <BSP_DRV_LCD_TP_Parse+0x230>
 80012d0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80012f8 <BSP_DRV_LCD_TP_Parse+0x470>
 80012d4:	eeb4 6a67 	vcmp.f32	s12, s15
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	f57f aeec 	bpl.w	80010b8 <BSP_DRV_LCD_TP_Parse+0x230>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_RIGHT;
 80012e0:	2320      	movs	r3, #32
 80012e2:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
				break;
 80012e6:	e67a      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
 80012e8:	00000000 	.word	0x00000000
 80012ec:	408f4000 	.word	0x408f4000
 80012f0:	c4480000 	.word	0xc4480000
 80012f4:	c3c80000 	.word	0xc3c80000
 80012f8:	43c80000 	.word	0x43c80000
 80012fc:	44480000 	.word	0x44480000

08001300 <BSP_DRV_LCD_TP_Reset>:


void BSP_DRV_LCD_TP_Reset(void) {
 8001300:	b510      	push	{r4, lr}
	BSP_STM32_GPIO_WritePin(LCD_TP_RESET_PORT, LCD_TP_RESET_PIN, GPIO_PIN_RESET);
 8001302:	4c0a      	ldr	r4, [pc, #40]	; (800132c <BSP_DRV_LCD_TP_Reset+0x2c>)
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800130a:	4620      	mov	r0, r4
 800130c:	f006 f826 	bl	800735c <BSP_STM32_GPIO_WritePin>
	BSP_Delay(5);
 8001310:	2005      	movs	r0, #5
 8001312:	f002 ff07 	bl	8004124 <BSP_Delay>
	BSP_STM32_GPIO_WritePin(LCD_TP_RESET_PORT, LCD_TP_RESET_PIN, GPIO_PIN_SET);
 8001316:	4620      	mov	r0, r4
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131e:	f006 f81d 	bl	800735c <BSP_STM32_GPIO_WritePin>
	BSP_Delay(5);
 8001322:	2005      	movs	r0, #5
}
 8001324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_Delay(5);
 8001328:	f002 befc 	b.w	8004124 <BSP_Delay>
 800132c:	58021800 	.word	0x58021800

08001330 <BSP_BOARD_Init_CM7>:

#include "BSP.h"

#define HSEM_ID_0 (0U) // HW semaphore 0

uint8_t BSP_BOARD_Init_CM7() {
 8001330:	b530      	push	{r4, r5, lr}
 8001332:	b083      	sub	sp, #12
	uint32_t timeout;

	// Config MPU
	BSP_STM32_MPU_Init();
 8001334:	f002 f950 	bl	80035d8 <BSP_STM32_MPU_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001338:	4a4d      	ldr	r2, [pc, #308]	; (8001470 <BSP_BOARD_Init_CM7+0x140>)
 800133a:	6953      	ldr	r3, [r2, #20]
 800133c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8001340:	d111      	bne.n	8001366 <BSP_BOARD_Init_CM7+0x36>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001342:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001346:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800134a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001352:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001356:	6953      	ldr	r3, [r2, #20]
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800135e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001362:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001366:	4842      	ldr	r0, [pc, #264]	; (8001470 <BSP_BOARD_Init_CM7+0x140>)
 8001368:	6943      	ldr	r3, [r0, #20]
 800136a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800136e:	d126      	bne.n	80013be <BSP_BOARD_Init_CM7+0x8e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001370:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001374:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001378:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800137c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001380:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001384:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8001388:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800138c:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001390:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001392:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001396:	3b01      	subs	r3, #1
 8001398:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800139a:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800139e:	d1f8      	bne.n	8001392 <BSP_BOARD_Init_CM7+0x62>
    } while(sets-- != 0U);
 80013a0:	f1ac 0c20 	sub.w	ip, ip, #32
 80013a4:	f11c 0f20 	cmn.w	ip, #32
 80013a8:	d1f0      	bne.n	800138c <BSP_BOARD_Init_CM7+0x5c>
 80013aa:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80013ae:	6943      	ldr	r3, [r0, #20]
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6143      	str	r3, [r0, #20]
 80013b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013ba:	f3bf 8f6f 	isb	sy
	// Enable D-Cache
	SCB_EnableDCache();

	// Wait until CPU2 boots and enters in stop mode or timeout
	timeout = 0xFFFF;
	while (((RCC->CR & RCC_CR_D2CKRDY) != RESET) && (timeout-- > 0));
 80013be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c2:	492c      	ldr	r1, [pc, #176]	; (8001474 <BSP_BOARD_Init_CM7+0x144>)
 80013c4:	e001      	b.n	80013ca <BSP_BOARD_Init_CM7+0x9a>
 80013c6:	3b01      	subs	r3, #1
 80013c8:	d002      	beq.n	80013d0 <BSP_BOARD_Init_CM7+0xa0>
 80013ca:	680a      	ldr	r2, [r1, #0]
 80013cc:	0410      	lsls	r0, r2, #16
 80013ce:	d4fa      	bmi.n	80013c6 <BSP_BOARD_Init_CM7+0x96>
	if ( timeout < 0 ) return BSP_ERROR;

	// Setting NVIC grouping
	BSP_STM32_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f004 fb71 	bl	8005ab8 <BSP_STM32_NVIC_SetPriorityGrouping>

	// STM32 Initialization - System Clocks
	if (BSP_STM32_Init_SysClocks()) return BSP_ERROR;
 80013d6:	f002 f9dd 	bl	8003794 <BSP_STM32_Init_SysClocks>
 80013da:	4605      	mov	r5, r0
 80013dc:	b110      	cbz	r0, 80013e4 <BSP_BOARD_Init_CM7+0xb4>
 80013de:	2001      	movs	r0, #1

	// Audio Initialization
//	if (BSP_Audio_Init()) return BSP_ERROR;

	return BSP_OK;
}
 80013e0:	b003      	add	sp, #12
 80013e2:	bd30      	pop	{r4, r5, pc}
	__BSP_RCC_HSEM_CLK_ENABLE();			// HW semaphore Clock enable
 80013e4:	4c23      	ldr	r4, [pc, #140]	; (8001474 <BSP_BOARD_Init_CM7+0x144>)
 80013e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80013ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80013f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	9b01      	ldr	r3, [sp, #4]
	BSP_STM32_HSEM_FastTake(HSEM_ID_0); 	// Take HSEM
 80013fe:	f005 ffb3 	bl	8007368 <BSP_STM32_HSEM_FastTake>
	BSP_STM32_HSEM_FastRelease(HSEM_ID_0);	// Release HSEM in order to notify the CPU2(CM4)
 8001402:	4628      	mov	r0, r5
 8001404:	f005 ffc2 	bl	800738c <BSP_STM32_HSEM_FastRelease>
	while(((RCC->CR & RCC_CR_D2CKRDY) == RESET) && (timeout-- > 0));
 8001408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140c:	e001      	b.n	8001412 <BSP_BOARD_Init_CM7+0xe2>
 800140e:	3b01      	subs	r3, #1
 8001410:	d002      	beq.n	8001418 <BSP_BOARD_Init_CM7+0xe8>
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	d5fa      	bpl.n	800140e <BSP_BOARD_Init_CM7+0xde>
	if (BSP_STM32_Init_PeriphClocks()) return BSP_ERROR;
 8001418:	f002 fa80 	bl	800391c <BSP_STM32_Init_PeriphClocks>
 800141c:	2800      	cmp	r0, #0
 800141e:	d1de      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_STM32_Init_GPIO()) return BSP_ERROR;
 8001420:	f002 fc6c 	bl	8003cfc <BSP_STM32_Init_GPIO>
 8001424:	2800      	cmp	r0, #0
 8001426:	d1da      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_STM32_Init_NVIC()) return BSP_ERROR;
 8001428:	f002 fc04 	bl	8003c34 <BSP_STM32_Init_NVIC>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1d6      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_SDRAM_Init(120)) return BSP_ERROR;
 8001430:	2078      	movs	r0, #120	; 0x78
 8001432:	f002 f8c3 	bl	80035bc <BSP_SDRAM_Init>
 8001436:	2800      	cmp	r0, #0
 8001438:	d1d1      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_QSPI_Init()) return BSP_ERROR;
 800143a:	f001 ffb1 	bl	80033a0 <BSP_QSPI_Init>
 800143e:	2800      	cmp	r0, #0
 8001440:	d1cd      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_LCD_TP_Init()) return BSP_ERROR;
 8001442:	f001 ff37 	bl	80032b4 <BSP_LCD_TP_Init>
 8001446:	2800      	cmp	r0, #0
 8001448:	d1c9      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_IMU_Init()) return BSP_ERROR;
 800144a:	f000 f863 	bl	8001514 <BSP_IMU_Init>
 800144e:	2800      	cmp	r0, #0
 8001450:	d1c5      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_Inputs_Init()) return BSP_ERROR;
 8001452:	f000 f8b9 	bl	80015c8 <BSP_Inputs_Init>
 8001456:	2800      	cmp	r0, #0
 8001458:	d1c1      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_SDCARD_Init()) return BSP_ERROR;
 800145a:	f002 f847 	bl	80034ec <BSP_SDCARD_Init>
 800145e:	2800      	cmp	r0, #0
 8001460:	d1bd      	bne.n	80013de <BSP_BOARD_Init_CM7+0xae>
	if (BSP_Serial_Init()) return BSP_ERROR;
 8001462:	f002 fe6d 	bl	8004140 <BSP_Serial_Init>
	return BSP_OK;
 8001466:	3800      	subs	r0, #0
 8001468:	bf18      	it	ne
 800146a:	2001      	movne	r0, #1
 800146c:	e7b8      	b.n	80013e0 <BSP_BOARD_Init_CM7+0xb0>
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	58024400 	.word	0x58024400

08001478 <NMI_Handler>:


// Configuring Basic Interrupts
void NMI_Handler(void) {

	while (1) {}
 8001478:	e7fe      	b.n	8001478 <NMI_Handler>
 800147a:	bf00      	nop

0800147c <HardFault_Handler>:

}

void HardFault_Handler(void) {

	while (1) {}
 800147c:	e7fe      	b.n	800147c <HardFault_Handler>
 800147e:	bf00      	nop

08001480 <MemManage_Handler>:

}

void MemManage_Handler(void) {

	while (1) {}
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler>
 8001482:	bf00      	nop

08001484 <BusFault_Handler>:

}

void BusFault_Handler(void) {

	while (1) {}
 8001484:	e7fe      	b.n	8001484 <BusFault_Handler>
 8001486:	bf00      	nop

08001488 <UsageFault_Handler>:

}

void UsageFault_Handler(void) {

	while (1) {}
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler>
 800148a:	bf00      	nop

0800148c <SVC_Handler>:

}

void SVC_Handler(void) {

}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <DebugMon_Handler>:
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <PendSV_Handler>:
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <SysTick_Handler>:

}

void SysTick_Handler(void) {

  BSP_IncTick();
 8001498:	f002 be32 	b.w	8004100 <BSP_IncTick>

0800149c <BSP_Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}

void BSP_Error_Handler(void) {

  __disable_irq();
  while (1) {}
 800149e:	e7fe      	b.n	800149e <BSP_Error_Handler+0x2>

080014a0 <EXTI15_10_IRQHandler>:
__weak void EXTI11_IRQHandler(void) {
	return;
}


void EXTI15_10_IRQHandler(void) {
 80014a0:	b508      	push	{r3, lr}
	if (EXTI->PR1 & GPIO_PIN_13) {
 80014a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014aa:	0491      	lsls	r1, r2, #18
 80014ac:	d40f      	bmi.n	80014ce <EXTI15_10_IRQHandler+0x2e>
		EXTI->PR1 |= ~(GPIO_PIN_13);
		// Call to Touch Panel INT handler
		EXTI13_IRQHandler();
	}

	if (EXTI->PR1 & GPIO_PIN_11) {
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014b6:	0512      	lsls	r2, r2, #20
 80014b8:	d400      	bmi.n	80014bc <EXTI15_10_IRQHandler+0x1c>
		EXTI->PR1 |= ~(GPIO_PIN_11);
		// Call to IMU INT handler
		EXTI11_IRQHandler();
	}
}
 80014ba:	bd08      	pop	{r3, pc}
		EXTI->PR1 |= ~(GPIO_PIN_11);
 80014bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014c0:	f462 6200 	orn	r2, r2, #2048	; 0x800
 80014c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		EXTI11_IRQHandler();
 80014c8:	f000 f858 	bl	800157c <EXTI11_IRQHandler>
}
 80014cc:	bd08      	pop	{r3, pc}
		EXTI->PR1 |= ~(GPIO_PIN_13);
 80014ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014d2:	f462 5200 	orn	r2, r2, #8192	; 0x2000
 80014d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		EXTI13_IRQHandler();
 80014da:	f001 ff25 	bl	8003328 <EXTI13_IRQHandler>
 80014de:	e7e6      	b.n	80014ae <EXTI15_10_IRQHandler+0xe>

080014e0 <EXTI9_5_IRQHandler>:

// INT Handler for BLE Module

void EXTI9_5_IRQHandler(void)
{
 80014e0:	b508      	push	{r3, lr}
	if (EXTI->PR1 & GPIO_PIN_6) {
 80014e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014ea:	0652      	lsls	r2, r2, #25
 80014ec:	d400      	bmi.n	80014f0 <EXTI9_5_IRQHandler+0x10>
		EXTI->PR1 |= ~(GPIO_PIN_6);
		// Call to BLE module INT handler
		BSP_BLE_INTHandler();
	}
}
 80014ee:	bd08      	pop	{r3, pc}
		EXTI->PR1 |= ~(GPIO_PIN_6);
 80014f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014f4:	f062 0240 	orn	r2, r2, #64	; 0x40
 80014f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		BSP_BLE_INTHandler();
 80014fc:	f3af 8000 	nop.w
}
 8001500:	bd08      	pop	{r3, pc}
 8001502:	bf00      	nop

08001504 <SPI3_IRQHandler>:
uint8_t BSP_Audio_Resume() {
	return BSP_STM32_I2S_Resume(SPI3, &BSP_haudio_ctx);
}

void SPI3_IRQHandler(void) {
	BSP_STM32_I2S_IRQHandler(SPI3, &BSP_haudio_ctx);
 8001504:	4901      	ldr	r1, [pc, #4]	; (800150c <SPI3_IRQHandler+0x8>)
 8001506:	4802      	ldr	r0, [pc, #8]	; (8001510 <SPI3_IRQHandler+0xc>)
 8001508:	f006 b91a 	b.w	8007740 <BSP_STM32_I2S_IRQHandler>
 800150c:	24000108 	.word	0x24000108
 8001510:	40003c00 	.word	0x40003c00

08001514 <BSP_IMU_Init>:
#include "BSP_IMU.h"

BUF_RAM	IMU_HandleTypeDef		BSP_himu = {0};
		TxRxContext_TypeDef		BSP_himu_ctx = {0};

uint8_t BSP_IMU_Init(void) {
 8001514:	b500      	push	{lr}
	// Configuring I2C interface
	if (BSP_STM32_I2C_Init(I2C4)) return BSP_ERROR;
 8001516:	4815      	ldr	r0, [pc, #84]	; (800156c <BSP_IMU_Init+0x58>)
uint8_t BSP_IMU_Init(void) {
 8001518:	b085      	sub	sp, #20
	if (BSP_STM32_I2C_Init(I2C4)) return BSP_ERROR;
 800151a:	f005 ff45 	bl	80073a8 <BSP_STM32_I2C_Init>
 800151e:	b118      	cbz	r0, 8001528 <BSP_IMU_Init+0x14>
 8001520:	2001      	movs	r0, #1

	// Initialization of IMU IC
	if (BSP_DRV_IMU_Init(&BSP_himu, I2C4)) return BSP_ERROR;

	return BSP_OK;
}
 8001522:	b005      	add	sp, #20
 8001524:	f85d fb04 	ldr.w	pc, [sp], #4
	BSP_BDMA_Init(BDMA_Channel0, BDMA_PERIPH_TO_MEMORY, BDMA_PINC_DISABLE, BDMA_MINC_ENABLE, BDMA_PDATAALIGN_BYTE, BDMA_MDATAALIGN_BYTE, BDMA_NORMAL, BDMA_PRIORITY_LOW);
 8001528:	4602      	mov	r2, r0
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	4601      	mov	r1, r0
 800152e:	4810      	ldr	r0, [pc, #64]	; (8001570 <BSP_IMU_Init+0x5c>)
 8001530:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001534:	e9cd 2200 	strd	r2, r2, [sp]
 8001538:	f004 f814 	bl	8005564 <BSP_BDMA_Init>
	BSP_BDMA_CtxLink(BDMA_Channel0, &BSP_himu_ctx, BDMA_REQUEST_I2C4_RX);
 800153c:	220d      	movs	r2, #13
 800153e:	490d      	ldr	r1, [pc, #52]	; (8001574 <BSP_IMU_Init+0x60>)
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <BSP_IMU_Init+0x5c>)
 8001542:	f004 f83f 	bl	80055c4 <BSP_BDMA_CtxLink>
	if (BSP_STM32_I2C_IsDeviceReady(I2C4, (IMU_I2C_ADDR) << 1, 4, 1000)) return BSP_ERROR;
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	2204      	movs	r2, #4
 800154c:	21d0      	movs	r1, #208	; 0xd0
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <BSP_IMU_Init+0x58>)
 8001550:	f005 ff52 	bl	80073f8 <BSP_STM32_I2C_IsDeviceReady>
 8001554:	2800      	cmp	r0, #0
 8001556:	d1e3      	bne.n	8001520 <BSP_IMU_Init+0xc>
	if (BSP_DRV_IMU_Init(&BSP_himu, I2C4)) return BSP_ERROR;
 8001558:	4904      	ldr	r1, [pc, #16]	; (800156c <BSP_IMU_Init+0x58>)
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <BSP_IMU_Init+0x64>)
 800155c:	f7ff faec 	bl	8000b38 <BSP_DRV_IMU_Init>
	if (BSP_STM32_I2C_Init(I2C4)) return BSP_ERROR;
 8001560:	3800      	subs	r0, #0
 8001562:	bf18      	it	ne
 8001564:	2001      	movne	r0, #1
}
 8001566:	b005      	add	sp, #20
 8001568:	f85d fb04 	ldr.w	pc, [sp], #4
 800156c:	58001c00 	.word	0x58001c00
 8001570:	58025408 	.word	0x58025408
 8001574:	24000170 	.word	0x24000170
 8001578:	38000000 	.word	0x38000000

0800157c <EXTI11_IRQHandler>:
}


// ******* IRQ Handlers **********

void EXTI11_IRQHandler(void) {
 800157c:	b510      	push	{r4, lr}
	// New data available from IMU, start receiving
	BSP_STM32_I2C_MemRead(I2C4, &BSP_himu_ctx, IMU_I2C_ADDR << 1, IMU_DATA_ADDR, BSP_himu.raw_data, IMU_DATA_LEN);
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <EXTI11_IRQHandler+0x1c>)
void EXTI11_IRQHandler(void) {
 8001580:	b082      	sub	sp, #8
	BSP_STM32_I2C_MemRead(I2C4, &BSP_himu_ctx, IMU_I2C_ADDR << 1, IMU_DATA_ADDR, BSP_himu.raw_data, IMU_DATA_LEN);
 8001582:	240e      	movs	r4, #14
 8001584:	233b      	movs	r3, #59	; 0x3b
 8001586:	22d0      	movs	r2, #208	; 0xd0
 8001588:	4904      	ldr	r1, [pc, #16]	; (800159c <EXTI11_IRQHandler+0x20>)
 800158a:	e9cd 0400 	strd	r0, r4, [sp]
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <EXTI11_IRQHandler+0x24>)
 8001590:	f005 ffea 	bl	8007568 <BSP_STM32_I2C_MemRead>
}
 8001594:	b002      	add	sp, #8
 8001596:	bd10      	pop	{r4, pc}
 8001598:	38000000 	.word	0x38000000
 800159c:	24000170 	.word	0x24000170
 80015a0:	58001c00 	.word	0x58001c00

080015a4 <I2C4_EV_IRQHandler>:

void I2C4_EV_IRQHandler(void) {
 80015a4:	b508      	push	{r3, lr}
	// Receiving and parsing data from IMU
	if (BSP_STM32_I2C_IRQHandler(I2C4, &BSP_himu_ctx) == BSP_OK) BSP_DRV_IMU_Parse(&BSP_himu);
 80015a6:	4905      	ldr	r1, [pc, #20]	; (80015bc <I2C4_EV_IRQHandler+0x18>)
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <I2C4_EV_IRQHandler+0x1c>)
 80015aa:	f006 f829 	bl	8007600 <BSP_STM32_I2C_IRQHandler>
 80015ae:	b100      	cbz	r0, 80015b2 <I2C4_EV_IRQHandler+0xe>
}
 80015b0:	bd08      	pop	{r3, pc}
	if (BSP_STM32_I2C_IRQHandler(I2C4, &BSP_himu_ctx) == BSP_OK) BSP_DRV_IMU_Parse(&BSP_himu);
 80015b2:	4804      	ldr	r0, [pc, #16]	; (80015c4 <I2C4_EV_IRQHandler+0x20>)
}
 80015b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (BSP_STM32_I2C_IRQHandler(I2C4, &BSP_himu_ctx) == BSP_OK) BSP_DRV_IMU_Parse(&BSP_himu);
 80015b8:	f7ff bb2a 	b.w	8000c10 <BSP_DRV_IMU_Parse>
 80015bc:	24000170 	.word	0x24000170
 80015c0:	58001c00 	.word	0x58001c00
 80015c4:	38000000 	.word	0x38000000

080015c8 <BSP_Inputs_Init>:
#include "BSP_Inputs.h"

BUF_RAM  INPUTS_HandleTypeDef	BSP_hinputs = {0};
		TxRxContext_TypeDef		BSP_hinputs_ctx = {0};

uint8_t BSP_Inputs_Init() {
 80015c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initializing ADC1 for Joystick
	BSP_ADC_Init(ADC1, ADC_RESOLUTION_16B, 2);
 80015cc:	4e24      	ldr	r6, [pc, #144]	; (8001660 <BSP_Inputs_Init+0x98>)
 80015ce:	2100      	movs	r1, #0
uint8_t BSP_Inputs_Init() {
 80015d0:	b084      	sub	sp, #16
	BSP_ADC_Init(ADC1, ADC_RESOLUTION_16B, 2);
 80015d2:	2202      	movs	r2, #2
 80015d4:	4630      	mov	r0, r6
	BSP_ADC_ConfigChannel(ADC1, 4, 1);
	BSP_ADC_ConfigChannel(ADC1, 8, 2);
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 80015d6:	460c      	mov	r4, r1
	BSP_ADC_Init(ADC1, ADC_RESOLUTION_16B, 2);
 80015d8:	f003 fefa 	bl	80053d0 <BSP_ADC_Init>
	BSP_ADC_ConfigChannel(ADC1, 4, 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	2104      	movs	r1, #4
 80015e0:	4630      	mov	r0, r6
 80015e2:	f003 ff67 	bl	80054b4 <BSP_ADC_ConfigChannel>
	BSP_ADC_ConfigChannel(ADC1, 8, 2);
 80015e6:	2202      	movs	r2, #2
 80015e8:	2108      	movs	r1, #8
 80015ea:	4630      	mov	r0, r6
 80015ec:	f003 ff62 	bl	80054b4 <BSP_ADC_ConfigChannel>
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 80015f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800167c <BSP_Inputs_Init+0xb4>
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	BSP_STM32_DMA_CtxLink(DMA1_Stream1, &BSP_hinputs_ctx, DMA_REQUEST_ADC1);
 80015fc:	4f19      	ldr	r7, [pc, #100]	; (8001664 <BSP_Inputs_Init+0x9c>)
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 80015fe:	4621      	mov	r1, r4
	BSP_ADC_StartDMA(ADC1, &BSP_hinputs_ctx, (uint32_t *)BSP_hinputs.raw_data_joy, 2);
 8001600:	4d19      	ldr	r5, [pc, #100]	; (8001668 <BSP_Inputs_Init+0xa0>)
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 8001602:	4640      	mov	r0, r8
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160a:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800160e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	4622      	mov	r2, r4
 8001616:	f004 fab9 	bl	8005b8c <BSP_STM32_DMA_Init>
	BSP_STM32_DMA_CtxLink(DMA1_Stream1, &BSP_hinputs_ctx, DMA_REQUEST_ADC1);
 800161a:	4639      	mov	r1, r7
 800161c:	4640      	mov	r0, r8
 800161e:	2209      	movs	r2, #9
 8001620:	f004 fae8 	bl	8005bf4 <BSP_STM32_DMA_CtxLink>
	BSP_ADC_StartDMA(ADC1, &BSP_hinputs_ctx, (uint32_t *)BSP_hinputs.raw_data_joy, 2);
 8001624:	4639      	mov	r1, r7
 8001626:	462a      	mov	r2, r5
 8001628:	2302      	movs	r3, #2
 800162a:	4630      	mov	r0, r6
 800162c:	f003 ff88 	bl	8005540 <BSP_ADC_StartDMA>
	BSP_hinputs.joy_cal.x_min = 7600;
	BSP_hinputs.joy_cal.y_max = 58000;
	BSP_hinputs.joy_cal.y_min = 12300;

	BSP_hinputs.joy_cal.x_centre_max = 33000;
	BSP_hinputs.joy_cal.x_centre_min = 30000;
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <BSP_Inputs_Init+0xa4>)
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <BSP_Inputs_Init+0xa8>)

	// Configuring TIM2 for parsing joystick and keyboard data
	// Option 1: PWM Frequency = 200MHz Input clock / Prescaler (199+1) / Reload value (9999+1) = 100Hz
	// Option 2: PWM Frequency = 240MHz Input clock / Prescaler (239+1) / Reload value (9999+1) = 100Hz

	BSP_STM32_TIM_Init(TIM2, TIM_CLOCKDIVISION_DIV1, 239, 9999);
 8001634:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	BSP_hinputs.joy_cal.x_centre_min = 30000;
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <BSP_Inputs_Init+0xac>)
 800163a:	e9c5 2301 	strd	r2, r3, [r5, #4]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <BSP_Inputs_Init+0xb0>)
	BSP_STM32_TIM_Init(TIM2, TIM_CLOCKDIVISION_DIV1, 239, 9999);
 8001640:	f242 730f 	movw	r3, #9999	; 0x270f
	BSP_hinputs.joy_cal.x_centre_min = 30000;
 8001644:	e9c5 1203 	strd	r1, r2, [r5, #12]
	BSP_STM32_TIM_Init(TIM2, TIM_CLOCKDIVISION_DIV1, 239, 9999);
 8001648:	22ef      	movs	r2, #239	; 0xef
 800164a:	4621      	mov	r1, r4
 800164c:	f009 f94e 	bl	800a8ec <BSP_STM32_TIM_Init>
	BSP_STM32_TIM_Start(TIM2);
 8001650:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001654:	f009 f9be 	bl	800a9d4 <BSP_STM32_TIM_Start>
	return BSP_OK;
}
 8001658:	4620      	mov	r0, r4
 800165a:	b004      	add	sp, #16
 800165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001660:	40022000 	.word	0x40022000
 8001664:	240001d8 	.word	0x240001d8
 8001668:	38000058 	.word	0x38000058
 800166c:	80e87530 	.word	0x80e87530
 8001670:	8aac7b0c 	.word	0x8aac7b0c
 8001674:	c1c01db0 	.word	0xc1c01db0
 8001678:	e290300c 	.word	0xe290300c
 800167c:	40020028 	.word	0x40020028

08001680 <BSP_Inputs_ParseData>:


uint8_t BSP_Inputs_ParseData() {
 8001680:	b510      	push	{r4, lr}
	// Button A - PD4
	BSP_hinputs.buttons.btn_A = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0);
 8001682:	2110      	movs	r1, #16
 8001684:	484e      	ldr	r0, [pc, #312]	; (80017c0 <BSP_Inputs_ParseData+0x140>)
 8001686:	f005 fe63 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 800168a:	fab0 f380 	clz	r3, r0
 800168e:	4c4d      	ldr	r4, [pc, #308]	; (80017c4 <BSP_Inputs_ParseData+0x144>)

	// Button B - PD2
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 8001690:	2104      	movs	r1, #4
	BSP_hinputs.buttons.btn_A = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0);
 8001692:	095b      	lsrs	r3, r3, #5
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 8001694:	484a      	ldr	r0, [pc, #296]	; (80017c0 <BSP_Inputs_ParseData+0x140>)
	BSP_hinputs.buttons.btn_A = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0);
 8001696:	7623      	strb	r3, [r4, #24]
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 8001698:	f005 fe5a 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0

	// Button C - PI8
	BSP_hinputs.buttons.btn_C = (BSP_STM32_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == 0);
 800169e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a2:	4849      	ldr	r0, [pc, #292]	; (80017c8 <BSP_Inputs_ParseData+0x148>)
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	7663      	strb	r3, [r4, #25]
	BSP_hinputs.buttons.btn_C = (BSP_STM32_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == 0);
 80016ac:	f005 fe50 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0

	// Button D - PC13
	BSP_hinputs.buttons.btn_D = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 80016b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b6:	4845      	ldr	r0, [pc, #276]	; (80017cc <BSP_Inputs_ParseData+0x14c>)
	BSP_hinputs.buttons.btn_C = (BSP_STM32_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == 0);
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	76a3      	strb	r3, [r4, #26]
	BSP_hinputs.buttons.btn_D = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 80016c0:	f005 fe46 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0

	// Button XU - PC11
	BSP_hinputs.buttons.btn_X_U = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0);
 80016c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ca:	4840      	ldr	r0, [pc, #256]	; (80017cc <BSP_Inputs_ParseData+0x14c>)
	BSP_hinputs.buttons.btn_D = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	76e3      	strb	r3, [r4, #27]
	BSP_hinputs.buttons.btn_X_U = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0);
 80016d4:	f005 fe3c 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 80016d8:	4603      	mov	r3, r0

	// Button XD - PG3
	BSP_hinputs.buttons.btn_X_D = (BSP_STM32_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 0);
 80016da:	2108      	movs	r1, #8
 80016dc:	483c      	ldr	r0, [pc, #240]	; (80017d0 <BSP_Inputs_ParseData+0x150>)
	BSP_hinputs.buttons.btn_X_U = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0);
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	7723      	strb	r3, [r4, #28]
	BSP_hinputs.buttons.btn_X_D = (BSP_STM32_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 0);
 80016e6:	f005 fe33 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0

	// Button XL - PA9
	BSP_hinputs.buttons.btn_X_L = (BSP_STM32_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);
 80016ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f0:	4838      	ldr	r0, [pc, #224]	; (80017d4 <BSP_Inputs_ParseData+0x154>)
	BSP_hinputs.buttons.btn_X_D = (BSP_STM32_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 0);
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	7763      	strb	r3, [r4, #29]
	BSP_hinputs.buttons.btn_X_L = (BSP_STM32_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);
 80016fa:	f005 fe29 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 80016fe:	4603      	mov	r3, r0

	// Button XR - PC7
	BSP_hinputs.buttons.btn_X_R = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0);
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	4832      	ldr	r0, [pc, #200]	; (80017cc <BSP_Inputs_ParseData+0x14c>)
	BSP_hinputs.buttons.btn_X_L = (BSP_STM32_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	095b      	lsrs	r3, r3, #5
 800170a:	77a3      	strb	r3, [r4, #30]
	BSP_hinputs.buttons.btn_X_R = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0);
 800170c:	f005 fe20 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0

	// Button MENU - PE3
	BSP_hinputs.buttons.btn_MENU = (BSP_STM32_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0);
 8001712:	2108      	movs	r1, #8
 8001714:	4830      	ldr	r0, [pc, #192]	; (80017d8 <BSP_Inputs_ParseData+0x158>)
	BSP_hinputs.buttons.btn_X_R = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0);
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	77e3      	strb	r3, [r4, #31]
	BSP_hinputs.buttons.btn_MENU = (BSP_STM32_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0);
 800171e:	f005 fe17 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0

	// Button PWR - PB5
	BSP_hinputs.buttons.btn_PWR = (BSP_STM32_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0);
 8001724:	2120      	movs	r1, #32
 8001726:	482d      	ldr	r0, [pc, #180]	; (80017dc <BSP_Inputs_ParseData+0x15c>)
	BSP_hinputs.buttons.btn_MENU = (BSP_STM32_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0);
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	BSP_hinputs.buttons.btn_PWR = (BSP_STM32_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0);
 8001732:	f005 fe0d 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0

	// Button JOY - PH5
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 8001738:	2120      	movs	r1, #32
 800173a:	4829      	ldr	r0, [pc, #164]	; (80017e0 <BSP_Inputs_ParseData+0x160>)
	BSP_hinputs.buttons.btn_PWR = (BSP_STM32_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0);
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	095b      	lsrs	r3, r3, #5
 8001742:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 8001746:	f005 fe03 	bl	8007350 <BSP_STM32_GPIO_ReadPin>
	// Parsing joystick XY axis
	int16_t joy_X = 0;
	int16_t joy_Y = 0;


	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 800174a:	8862      	ldrh	r2, [r4, #2]
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 800174c:	fab0 f080 	clz	r0, r0
	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 8001750:	88e1      	ldrh	r1, [r4, #6]
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 8001752:	0940      	lsrs	r0, r0, #5
	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 8001754:	428a      	cmp	r2, r1
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 8001756:	f884 0020 	strb.w	r0, [r4, #32]
	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 800175a:	d92e      	bls.n	80017ba <BSP_Inputs_ParseData+0x13a>
		joy_X = ((BSP_hinputs.raw_data_joy[1] - BSP_hinputs.joy_cal.x_centre_max) * 128)/ (BSP_hinputs.joy_cal.x_max - BSP_hinputs.joy_cal.x_centre_max);
 800175c:	1a53      	subs	r3, r2, r1
 800175e:	89e0      	ldrh	r0, [r4, #14]
 8001760:	01db      	lsls	r3, r3, #7
 8001762:	1a41      	subs	r1, r0, r1
 8001764:	fb93 f3f1 	sdiv	r3, r3, r1
 8001768:	b21b      	sxth	r3, r3
	}

	if (BSP_hinputs.raw_data_joy[1] < BSP_hinputs.joy_cal.x_centre_min) {
 800176a:	88a1      	ldrh	r1, [r4, #4]
 800176c:	428a      	cmp	r2, r1
 800176e:	d206      	bcs.n	800177e <BSP_Inputs_ParseData+0xfe>
		joy_X = ((BSP_hinputs.raw_data_joy[1] - BSP_hinputs.joy_cal.x_centre_min) * 128)/ (BSP_hinputs.joy_cal.x_centre_min - BSP_hinputs.joy_cal.x_min);
 8001770:	1a52      	subs	r2, r2, r1
 8001772:	89a3      	ldrh	r3, [r4, #12]
 8001774:	01d2      	lsls	r2, r2, #7
 8001776:	1ac9      	subs	r1, r1, r3
 8001778:	fb92 f2f1 	sdiv	r2, r2, r1
 800177c:	b213      	sxth	r3, r2
	}

	if (BSP_hinputs.raw_data_joy[0] > BSP_hinputs.joy_cal.y_centre_max) {
 800177e:	8822      	ldrh	r2, [r4, #0]
 8001780:	8960      	ldrh	r0, [r4, #10]
 8001782:	4282      	cmp	r2, r0
 8001784:	d917      	bls.n	80017b6 <BSP_Inputs_ParseData+0x136>
		joy_Y = ((BSP_hinputs.raw_data_joy[0] - BSP_hinputs.joy_cal.y_centre_max) * 128)/ (BSP_hinputs.joy_cal.y_max - BSP_hinputs.joy_cal.y_centre_max);
 8001786:	1a11      	subs	r1, r2, r0
 8001788:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800178c:	01c9      	lsls	r1, r1, #7
 800178e:	ebac 0000 	sub.w	r0, ip, r0
 8001792:	fb91 f1f0 	sdiv	r1, r1, r0
 8001796:	b209      	sxth	r1, r1
	}

	if (BSP_hinputs.raw_data_joy[0] < BSP_hinputs.joy_cal.y_centre_min) {
 8001798:	8920      	ldrh	r0, [r4, #8]
 800179a:	4282      	cmp	r2, r0
 800179c:	d206      	bcs.n	80017ac <BSP_Inputs_ParseData+0x12c>
		joy_Y = ((BSP_hinputs.raw_data_joy[0] - BSP_hinputs.joy_cal.y_centre_min) * 128)/ (BSP_hinputs.joy_cal.y_centre_min - BSP_hinputs.joy_cal.y_min);
 800179e:	1a12      	subs	r2, r2, r0
 80017a0:	8a21      	ldrh	r1, [r4, #16]
 80017a2:	01d2      	lsls	r2, r2, #7
 80017a4:	1a40      	subs	r0, r0, r1
 80017a6:	fb92 f2f0 	sdiv	r2, r2, r0
 80017aa:	b211      	sxth	r1, r2
	}

	BSP_hinputs.joy.joy_X = -joy_X;
 80017ac:	425b      	negs	r3, r3
	BSP_hinputs.joy.joy_Y = joy_Y;

	return BSP_OK;
}
 80017ae:	2000      	movs	r0, #0
	BSP_hinputs.joy.joy_Y = joy_Y;
 80017b0:	82e1      	strh	r1, [r4, #22]
	BSP_hinputs.joy.joy_X = -joy_X;
 80017b2:	82a3      	strh	r3, [r4, #20]
}
 80017b4:	bd10      	pop	{r4, pc}
	int16_t joy_Y = 0;
 80017b6:	2100      	movs	r1, #0
 80017b8:	e7ee      	b.n	8001798 <BSP_Inputs_ParseData+0x118>
	int16_t joy_X = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e7d5      	b.n	800176a <BSP_Inputs_ParseData+0xea>
 80017be:	bf00      	nop
 80017c0:	58020c00 	.word	0x58020c00
 80017c4:	38000058 	.word	0x38000058
 80017c8:	58022000 	.word	0x58022000
 80017cc:	58020800 	.word	0x58020800
 80017d0:	58021800 	.word	0x58021800
 80017d4:	58020000 	.word	0x58020000
 80017d8:	58021000 	.word	0x58021000
 80017dc:	58020400 	.word	0x58020400
 80017e0:	58021c00 	.word	0x58021c00

080017e4 <TIM2_IRQHandler>:


void TIM2_IRQHandler() {
	// Update event interrupt
	if (TIM2->SR & TIM_SR_UIF) {
 80017e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	07d2      	lsls	r2, r2, #31
 80017ec:	d400      	bmi.n	80017f0 <TIM2_IRQHandler+0xc>
		// Reseting interrupt
		TIM2->SR &= ~(TIM_SR_UIF);

		BSP_Inputs_ParseData();
	}
}
 80017ee:	4770      	bx	lr
		TIM2->SR &= ~(TIM_SR_UIF);
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	611a      	str	r2, [r3, #16]
		BSP_Inputs_ParseData();
 80017f8:	f7ff bf42 	b.w	8001680 <BSP_Inputs_ParseData>

080017fc <_ARGB8888_color>:

/* ARGB8888 ------------------------------------------------------------------*/

static uint32_t _ARGB8888_color(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	return (color & 0x00FFFFFF) | ((uint32_t)alpha << 24);
 80017fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
}
 8001800:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <_ARGB8888_dma2dwait>:
}


static void _ARGB8888_dma2dwait(void) {
	// Status: Function Completed
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001808:	4a02      	ldr	r2, [pc, #8]	; (8001814 <_ARGB8888_dma2dwait+0xc>)
 800180a:	6853      	ldr	r3, [r2, #4]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d0fc      	beq.n	800180a <_ARGB8888_dma2dwait+0x2>
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2400026c 	.word	0x2400026c

08001818 <_ARGB1555_color>:
static uint32_t _ARGB1555_color(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	uint32_t r = ((color & 0x000000FF) >> 3 ) << 0;
	uint32_t g = ((color & 0x0000FF00) >> 11) << 5;
	uint32_t b = ((color & 0x00FF0000) >> 19) << 10;
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 8001818:	3900      	subs	r1, #0
	uint32_t r = ((color & 0x000000FF) >> 3 ) << 0;
 800181a:	f3c0 03c4 	ubfx	r3, r0, #3, #5
	uint32_t g = ((color & 0x0000FF00) >> 11) << 5;
 800181e:	ea4f 1290 	mov.w	r2, r0, lsr #6
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 8001822:	bf18      	it	ne
 8001824:	2101      	movne	r1, #1
	uint32_t b = ((color & 0x00FF0000) >> 19) << 10;
 8001826:	0a40      	lsrs	r0, r0, #9
	uint32_t g = ((color & 0x0000FF00) >> 11) << 5;
 8001828:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
	return r | g | b | a;
 800182c:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
	uint32_t b = ((color & 0x00FF0000) >> 19) << 10;
 8001830:	f400 40f8 	and.w	r0, r0, #31744	; 0x7c00
	return r | g | b | a;
 8001834:	4313      	orrs	r3, r2
}
 8001836:	4318      	orrs	r0, r3
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop

0800183c <_ARGB1555_alpha>:


static uint32_t _ARGB1555_alpha(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	uint32_t c = color & 0x0007FFF;
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 800183c:	3900      	subs	r1, #0
	uint32_t c = color & 0x0007FFF;
 800183e:	f3c0 000e 	ubfx	r0, r0, #0, #15
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 8001842:	bf18      	it	ne
 8001844:	2101      	movne	r1, #1
	return c | a;
}
 8001846:	ea40 30c1 	orr.w	r0, r0, r1, lsl #15
 800184a:	4770      	bx	lr

0800184c <_ARGB4444_color>:
static uint32_t _ARGB4444_color(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	uint32_t b = ((color & 0x000000FF) >> 4 ) << 0;
	uint32_t g = ((color & 0x0000FF00) >> 12) << 4;
	uint32_t r = ((color & 0x00FF0000) >> 20) << 8;
	uint32_t a = ((uint32_t)alpha >> 4) << 12;
 800184c:	0909      	lsrs	r1, r1, #4
	uint32_t b = ((color & 0x000000FF) >> 4 ) << 0;
 800184e:	f3c0 1303 	ubfx	r3, r0, #4, #4
	uint32_t g = ((color & 0x0000FF00) >> 12) << 4;
 8001852:	0a02      	lsrs	r2, r0, #8
	uint32_t c = r | g | b | a;
 8001854:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
	uint32_t g = ((color & 0x0000FF00) >> 12) << 4;
 8001858:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	uint32_t r = ((color & 0x00FF0000) >> 20) << 8;
 800185c:	0b00      	lsrs	r0, r0, #12
	uint32_t c = r | g | b | a;
 800185e:	4313      	orrs	r3, r2
	uint32_t r = ((color & 0x00FF0000) >> 20) << 8;
 8001860:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
	return c;
}
 8001864:	4318      	orrs	r0, r3
 8001866:	4770      	bx	lr

08001868 <_ARGB4444_alpha>:


static uint32_t _ARGB4444_alpha(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	uint32_t c = color & 0x0000FFF;
	uint32_t a = ((uint32_t)alpha >> 4) << 12;
 8001868:	0909      	lsrs	r1, r1, #4
	uint32_t c = color & 0x0000FFF;
 800186a:	f3c0 000b 	ubfx	r0, r0, #0, #12
	return c | a;
}
 800186e:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 8001872:	4770      	bx	lr

08001874 <_RGB888_updatepixel>:
	// Status: Function Completed
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
}


static void _RGB888_updatepixel(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8001874:	b082      	sub	sp, #8
 8001876:	9301      	str	r3, [sp, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
	if (x < 0) return;
 8001878:	b28b      	uxth	r3, r1
	if (y >= LCD_HEIGHT) return;
	if (y < 0) return;
 800187a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800187e:	d203      	bcs.n	8001888 <_RGB888_updatepixel+0x14>
	if (y >= LCD_HEIGHT) return;
 8001880:	b293      	uxth	r3, r2
	if (y < 0) return;
 8001882:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001886:	d301      	bcc.n	800188c <_RGB888_updatepixel+0x18>
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);

	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
	*(uint8_t *)(addr  ) = *(uint8_t *)(pvalue  );
}
 8001888:	b002      	add	sp, #8
 800188a:	4770      	bx	lr
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 800188c:	f44f 7c48 	mov.w	ip, #800	; 0x320
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 8001890:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8001894:	fb12 110c 	smlabb	r1, r2, ip, r1
 8001898:	eb01 0241 	add.w	r2, r1, r1, lsl #1
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 800189c:	5413      	strb	r3, [r2, r0]
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 800189e:	4410      	add	r0, r2
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 80018a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018a4:	7043      	strb	r3, [r0, #1]
	*(uint8_t *)(addr  ) = *(uint8_t *)(pvalue  );
 80018a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80018aa:	7083      	strb	r3, [r0, #2]
}
 80018ac:	b002      	add	sp, #8
 80018ae:	4770      	bx	lr

080018b0 <_AL88_alpha>:
}


static uint32_t _AL88_alpha(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	return (color & 0x00FF00FF) | ((uint32_t)alpha << 8) | ((uint32_t)alpha << 24);
 80018b0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80018b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
 80018b8:	ea43 6001 	orr.w	r0, r3, r1, lsl #24
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <_L8_color>:
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
}

/* L8 ------------------------------------------------------------------------*/

static uint32_t _L8_color(uint32_t color, uint8_t alpha) {
 80018c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 80018c4:	2100      	movs	r1, #0
	int16_t av_r = (c1_r + c2_r) >> 1;
 80018c6:	f3c0 4707 	ubfx	r7, r0, #16, #8
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 80018ca:	f3c0 2507 	ubfx	r5, r0, #8, #8
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 80018ce:	fa5f fe80 	uxtb.w	lr, r0
	int16_t	dr = (int16_t)c1_r - (int16_t)c2_r;
 80018d2:	463e      	mov	r6, r7
 80018d4:	481c      	ldr	r0, [pc, #112]	; (8001948 <_L8_color+0x88>)
	// Status: Function Completed
	// Alpha is ignored in this color mode

	uint32_t match_c = 0;
	uint32_t min_dist = 0xffffffff;
 80018d6:	f04f 3cff 	mov.w	ip, #4294967295
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 80018da:	f240 24ff 	movw	r4, #767	; 0x2ff
	uint32_t match_c = 0;
 80018de:	4688      	mov	r8, r1
	uint32_t dist;

	for (uint16_t m=0; m<256; m++) {
		dist = _color_dist(color, C_LUT_COLOR[m]);
 80018e0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	int16_t av_r = (c1_r + c2_r) >> 1;
 80018e4:	f3c2 4a07 	ubfx	sl, r2, #16, #8
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 80018e8:	f3c2 2307 	ubfx	r3, r2, #8, #8
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 80018ec:	fa5f f982 	uxtb.w	r9, r2
	int16_t av_r = (c1_r + c2_r) >> 1;
 80018f0:	eb0a 0207 	add.w	r2, sl, r7
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 80018f4:	1aeb      	subs	r3, r5, r3
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 80018f6:	eba6 0a0a 	sub.w	sl, r6, sl
 80018fa:	ebae 0909 	sub.w	r9, lr, r9
	int16_t av_r = (c1_r + c2_r) >> 1;
 80018fe:	1052      	asrs	r2, r2, #1
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 8001900:	fb03 f303 	mul.w	r3, r3, r3
 8001904:	f502 7b00 	add.w	fp, r2, #512	; 0x200
 8001908:	1aa2      	subs	r2, r4, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fb0a fb0b 	mul.w	fp, sl, fp
 8001910:	fb09 f202 	mul.w	r2, r9, r2
 8001914:	fb0a fb0b 	mul.w	fp, sl, fp
 8001918:	fb09 f202 	mul.w	r2, r9, r2
 800191c:	eb03 232b 	add.w	r3, r3, fp, asr #8
 8001920:	eb03 2322 	add.w	r3, r3, r2, asr #8
		if (dist < min_dist) {
 8001924:	4563      	cmp	r3, ip
 8001926:	d201      	bcs.n	800192c <_L8_color+0x6c>
			min_dist = dist;
			match_c = m;
 8001928:	4688      	mov	r8, r1
		if (dist < min_dist) {
 800192a:	469c      	mov	ip, r3
	for (uint16_t m=0; m<256; m++) {
 800192c:	3101      	adds	r1, #1
 800192e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001932:	d1d5      	bne.n	80018e0 <_L8_color+0x20>
		}
	}

	return (match_c) | (match_c << 8) | (match_c << 16) | (match_c << 24);
 8001934:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8001938:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 800193c:	ea40 0008 	orr.w	r0, r0, r8
}
 8001940:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
 8001944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001948:	08015118 	.word	0x08015118

0800194c <_L8_alpha>:
static uint32_t _L8_alpha(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	// Alpha is ignored in this color mode

	return color;
}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <_ARGB8888_copybufJPEG>:
static void _ARGB8888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001954:	4c34      	ldr	r4, [pc, #208]	; (8001a28 <_ARGB8888_copybufJPEG+0xd8>)
static void _ARGB8888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001956:	b087      	sub	sp, #28
 8001958:	4605      	mov	r5, r0
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 800195a:	4834      	ldr	r0, [pc, #208]	; (8001a2c <_ARGB8888_copybufJPEG+0xdc>)
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800195c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
static void _ARGB8888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001960:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001962:	330a      	adds	r3, #10
 8001964:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001968:	f006 f842 	bl	80079f0 <BSP_STM32_JPEG_GetColorSpace>
 800196c:	2810      	cmp	r0, #16
 800196e:	d002      	beq.n	8001976 <_ARGB8888_copybufJPEG+0x26>
}
 8001970:	b007      	add	sp, #28
 8001972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8001976:	482d      	ldr	r0, [pc, #180]	; (8001a2c <_ARGB8888_copybufJPEG+0xdc>)
 8001978:	f006 f828 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 800197c:	4607      	mov	r7, r0
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 800197e:	482b      	ldr	r0, [pc, #172]	; (8001a2c <_ARGB8888_copybufJPEG+0xdc>)
 8001980:	f006 f824 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001984:	f5c0 7948 	rsb	r9, r0, #800	; 0x320
	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8001988:	4828      	ldr	r0, [pc, #160]	; (8001a2c <_ARGB8888_copybufJPEG+0xdc>)
 800198a:	f006 f82b 	bl	80079e4 <BSP_STM32_JPEG_GetCSS>
 800198e:	2801      	cmp	r0, #1
 8001990:	d014      	beq.n	80019bc <_ARGB8888_copybufJPEG+0x6c>
 8001992:	2802      	cmp	r0, #2
 8001994:	d009      	beq.n	80019aa <_ARGB8888_copybufJPEG+0x5a>
 8001996:	2800      	cmp	r0, #0
 8001998:	d1ea      	bne.n	8001970 <_ARGB8888_copybufJPEG+0x20>
		if (width % 8) offsline_src = 8 - (width % 8);
 800199a:	f017 0b07 	ands.w	fp, r7, #7
 800199e:	d040      	beq.n	8001a22 <_ARGB8888_copybufJPEG+0xd2>
 80019a0:	f1cb 0708 	rsb	r7, fp, #8
		chroma = DMA2D_CSS_444;
 80019a4:	4683      	mov	fp, r0
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 80019a6:	b2bf      	uxth	r7, r7
 80019a8:	e00d      	b.n	80019c6 <_ARGB8888_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 80019aa:	f017 070f 	ands.w	r7, r7, #15
 80019ae:	d035      	beq.n	8001a1c <_ARGB8888_copybufJPEG+0xcc>
 80019b0:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_422;
 80019b4:	f04f 0b01 	mov.w	fp, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 80019b8:	b2bf      	uxth	r7, r7
 80019ba:	e004      	b.n	80019c6 <_ARGB8888_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 80019bc:	f017 070f 	ands.w	r7, r7, #15
 80019c0:	d126      	bne.n	8001a10 <_ARGB8888_copybufJPEG+0xc0>
		chroma = DMA2D_CSS_420;
 80019c2:	f04f 0b02 	mov.w	fp, #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80019c6:	6863      	ldr	r3, [r4, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d0fc      	beq.n	80019c6 <_ARGB8888_copybufJPEG+0x76>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80019cc:	2301      	movs	r3, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 80019ce:	4817      	ldr	r0, [pc, #92]	; (8001a2c <_ARGB8888_copybufJPEG+0xdc>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80019d0:	6063      	str	r3, [r4, #4]
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 80019d2:	f005 fffb 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 80019d6:	4682      	mov	sl, r0
 80019d8:	4814      	ldr	r0, [pc, #80]	; (8001a2c <_ARGB8888_copybufJPEG+0xdc>)
 80019da:	f005 fffd 	bl	80079d8 <BSP_STM32_JPEG_GetHeight>
 80019de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019e0:	fa1f f189 	uxth.w	r1, r9
 80019e4:	f8cd b010 	str.w	fp, [sp, #16]
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	fa1f f28a 	uxth.w	r2, sl
 80019ee:	9102      	str	r1, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 80019f0:	f44f 7148 	mov.w	r1, #800	; 0x320
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 80019f4:	b283      	uxth	r3, r0
 80019f6:	9700      	str	r7, [sp, #0]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 80019f8:	fb01 5506 	mla	r5, r1, r6, r5
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 80019fc:	2100      	movs	r1, #0
 80019fe:	480c      	ldr	r0, [pc, #48]	; (8001a30 <_ARGB8888_copybufJPEG+0xe0>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001a00:	eb08 0585 	add.w	r5, r8, r5, lsl #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a04:	9503      	str	r5, [sp, #12]
 8001a06:	f005 fa93 	bl	8006f30 <BSP_STM32_DMA2D_CopyBufJPEG>
}
 8001a0a:	b007      	add	sp, #28
 8001a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (width % 16) offsline_src = 16 - (width % 16);
 8001a10:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_420;
 8001a14:	f04f 0b02 	mov.w	fp, #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a18:	b2bf      	uxth	r7, r7
 8001a1a:	e7d4      	b.n	80019c6 <_ARGB8888_copybufJPEG+0x76>
		chroma = DMA2D_CSS_422;
 8001a1c:	f04f 0b01 	mov.w	fp, #1
 8001a20:	e7d1      	b.n	80019c6 <_ARGB8888_copybufJPEG+0x76>
 8001a22:	465f      	mov	r7, fp
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001a24:	e7cf      	b.n	80019c6 <_ARGB8888_copybufJPEG+0x76>
 8001a26:	bf00      	nop
 8001a28:	2400026c 	.word	0x2400026c
 8001a2c:	52003000 	.word	0x52003000
 8001a30:	52001000 	.word	0x52001000

08001a34 <_ARGB1555_copybufJPEG>:
static void _ARGB1555_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001a38:	4c34      	ldr	r4, [pc, #208]	; (8001b0c <_ARGB1555_copybufJPEG+0xd8>)
static void _ARGB1555_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	4605      	mov	r5, r0
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001a3e:	4834      	ldr	r0, [pc, #208]	; (8001b10 <_ARGB1555_copybufJPEG+0xdc>)
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001a40:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
static void _ARGB1555_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001a44:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001a46:	330a      	adds	r3, #10
 8001a48:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001a4c:	f005 ffd0 	bl	80079f0 <BSP_STM32_JPEG_GetColorSpace>
 8001a50:	2810      	cmp	r0, #16
 8001a52:	d002      	beq.n	8001a5a <_ARGB1555_copybufJPEG+0x26>
}
 8001a54:	b007      	add	sp, #28
 8001a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8001a5a:	482d      	ldr	r0, [pc, #180]	; (8001b10 <_ARGB1555_copybufJPEG+0xdc>)
 8001a5c:	f005 ffb6 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001a60:	4607      	mov	r7, r0
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8001a62:	482b      	ldr	r0, [pc, #172]	; (8001b10 <_ARGB1555_copybufJPEG+0xdc>)
 8001a64:	f005 ffb2 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001a68:	f5c0 7948 	rsb	r9, r0, #800	; 0x320
	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8001a6c:	4828      	ldr	r0, [pc, #160]	; (8001b10 <_ARGB1555_copybufJPEG+0xdc>)
 8001a6e:	f005 ffb9 	bl	80079e4 <BSP_STM32_JPEG_GetCSS>
 8001a72:	2801      	cmp	r0, #1
 8001a74:	d014      	beq.n	8001aa0 <_ARGB1555_copybufJPEG+0x6c>
 8001a76:	2802      	cmp	r0, #2
 8001a78:	d009      	beq.n	8001a8e <_ARGB1555_copybufJPEG+0x5a>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1ea      	bne.n	8001a54 <_ARGB1555_copybufJPEG+0x20>
		if (width % 8) offsline_src = 8 - (width % 8);
 8001a7e:	f017 0b07 	ands.w	fp, r7, #7
 8001a82:	d040      	beq.n	8001b06 <_ARGB1555_copybufJPEG+0xd2>
 8001a84:	f1cb 0708 	rsb	r7, fp, #8
		chroma = DMA2D_CSS_444;
 8001a88:	4683      	mov	fp, r0
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a8a:	b2bf      	uxth	r7, r7
 8001a8c:	e00d      	b.n	8001aaa <_ARGB1555_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001a8e:	f017 070f 	ands.w	r7, r7, #15
 8001a92:	d035      	beq.n	8001b00 <_ARGB1555_copybufJPEG+0xcc>
 8001a94:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_422;
 8001a98:	f04f 0b01 	mov.w	fp, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a9c:	b2bf      	uxth	r7, r7
 8001a9e:	e004      	b.n	8001aaa <_ARGB1555_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001aa0:	f017 070f 	ands.w	r7, r7, #15
 8001aa4:	d126      	bne.n	8001af4 <_ARGB1555_copybufJPEG+0xc0>
		chroma = DMA2D_CSS_420;
 8001aa6:	f04f 0b02 	mov.w	fp, #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001aaa:	6863      	ldr	r3, [r4, #4]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d0fc      	beq.n	8001aaa <_ARGB1555_copybufJPEG+0x76>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001ab0:	2301      	movs	r3, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001ab2:	4817      	ldr	r0, [pc, #92]	; (8001b10 <_ARGB1555_copybufJPEG+0xdc>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001ab4:	6063      	str	r3, [r4, #4]
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001ab6:	f005 ff89 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001aba:	4682      	mov	sl, r0
 8001abc:	4814      	ldr	r0, [pc, #80]	; (8001b10 <_ARGB1555_copybufJPEG+0xdc>)
 8001abe:	f005 ff8b 	bl	80079d8 <BSP_STM32_JPEG_GetHeight>
 8001ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac4:	fa1f f189 	uxth.w	r1, r9
 8001ac8:	f8cd b010 	str.w	fp, [sp, #16]
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	fa1f f28a 	uxth.w	r2, sl
 8001ad2:	9102      	str	r1, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001ad4:	f44f 7148 	mov.w	r1, #800	; 0x320
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001ad8:	b283      	uxth	r3, r0
 8001ada:	9700      	str	r7, [sp, #0]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001adc:	fb01 5506 	mla	r5, r1, r6, r5
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <_ARGB1555_copybufJPEG+0xe0>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001ae4:	eb08 0545 	add.w	r5, r8, r5, lsl #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001ae8:	9503      	str	r5, [sp, #12]
 8001aea:	f005 fa21 	bl	8006f30 <BSP_STM32_DMA2D_CopyBufJPEG>
}
 8001aee:	b007      	add	sp, #28
 8001af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (width % 16) offsline_src = 16 - (width % 16);
 8001af4:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_420;
 8001af8:	f04f 0b02 	mov.w	fp, #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001afc:	b2bf      	uxth	r7, r7
 8001afe:	e7d4      	b.n	8001aaa <_ARGB1555_copybufJPEG+0x76>
		chroma = DMA2D_CSS_422;
 8001b00:	f04f 0b01 	mov.w	fp, #1
 8001b04:	e7d1      	b.n	8001aaa <_ARGB1555_copybufJPEG+0x76>
 8001b06:	465f      	mov	r7, fp
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001b08:	e7cf      	b.n	8001aaa <_ARGB1555_copybufJPEG+0x76>
 8001b0a:	bf00      	nop
 8001b0c:	2400026c 	.word	0x2400026c
 8001b10:	52003000 	.word	0x52003000
 8001b14:	52001000 	.word	0x52001000

08001b18 <_ARGB4444_copybufJPEG>:
static void _ARGB4444_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001b1c:	4c34      	ldr	r4, [pc, #208]	; (8001bf0 <_ARGB4444_copybufJPEG+0xd8>)
static void _ARGB4444_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001b1e:	b087      	sub	sp, #28
 8001b20:	4605      	mov	r5, r0
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001b22:	4834      	ldr	r0, [pc, #208]	; (8001bf4 <_ARGB4444_copybufJPEG+0xdc>)
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001b24:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
static void _ARGB4444_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001b28:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001b2a:	330a      	adds	r3, #10
 8001b2c:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001b30:	f005 ff5e 	bl	80079f0 <BSP_STM32_JPEG_GetColorSpace>
 8001b34:	2810      	cmp	r0, #16
 8001b36:	d002      	beq.n	8001b3e <_ARGB4444_copybufJPEG+0x26>
}
 8001b38:	b007      	add	sp, #28
 8001b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8001b3e:	482d      	ldr	r0, [pc, #180]	; (8001bf4 <_ARGB4444_copybufJPEG+0xdc>)
 8001b40:	f005 ff44 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001b44:	4607      	mov	r7, r0
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8001b46:	482b      	ldr	r0, [pc, #172]	; (8001bf4 <_ARGB4444_copybufJPEG+0xdc>)
 8001b48:	f005 ff40 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001b4c:	f5c0 7948 	rsb	r9, r0, #800	; 0x320
	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8001b50:	4828      	ldr	r0, [pc, #160]	; (8001bf4 <_ARGB4444_copybufJPEG+0xdc>)
 8001b52:	f005 ff47 	bl	80079e4 <BSP_STM32_JPEG_GetCSS>
 8001b56:	2801      	cmp	r0, #1
 8001b58:	d014      	beq.n	8001b84 <_ARGB4444_copybufJPEG+0x6c>
 8001b5a:	2802      	cmp	r0, #2
 8001b5c:	d009      	beq.n	8001b72 <_ARGB4444_copybufJPEG+0x5a>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d1ea      	bne.n	8001b38 <_ARGB4444_copybufJPEG+0x20>
		if (width % 8) offsline_src = 8 - (width % 8);
 8001b62:	f017 0b07 	ands.w	fp, r7, #7
 8001b66:	d040      	beq.n	8001bea <_ARGB4444_copybufJPEG+0xd2>
 8001b68:	f1cb 0708 	rsb	r7, fp, #8
		chroma = DMA2D_CSS_444;
 8001b6c:	4683      	mov	fp, r0
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b6e:	b2bf      	uxth	r7, r7
 8001b70:	e00d      	b.n	8001b8e <_ARGB4444_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001b72:	f017 070f 	ands.w	r7, r7, #15
 8001b76:	d035      	beq.n	8001be4 <_ARGB4444_copybufJPEG+0xcc>
 8001b78:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_422;
 8001b7c:	f04f 0b01 	mov.w	fp, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b80:	b2bf      	uxth	r7, r7
 8001b82:	e004      	b.n	8001b8e <_ARGB4444_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001b84:	f017 070f 	ands.w	r7, r7, #15
 8001b88:	d126      	bne.n	8001bd8 <_ARGB4444_copybufJPEG+0xc0>
		chroma = DMA2D_CSS_420;
 8001b8a:	f04f 0b02 	mov.w	fp, #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001b8e:	6863      	ldr	r3, [r4, #4]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d0fc      	beq.n	8001b8e <_ARGB4444_copybufJPEG+0x76>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001b94:	2301      	movs	r3, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b96:	4817      	ldr	r0, [pc, #92]	; (8001bf4 <_ARGB4444_copybufJPEG+0xdc>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001b98:	6063      	str	r3, [r4, #4]
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b9a:	f005 ff17 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001b9e:	4682      	mov	sl, r0
 8001ba0:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <_ARGB4444_copybufJPEG+0xdc>)
 8001ba2:	f005 ff19 	bl	80079d8 <BSP_STM32_JPEG_GetHeight>
 8001ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ba8:	fa1f f189 	uxth.w	r1, r9
 8001bac:	f8cd b010 	str.w	fp, [sp, #16]
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	fa1f f28a 	uxth.w	r2, sl
 8001bb6:	9102      	str	r1, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001bb8:	f44f 7148 	mov.w	r1, #800	; 0x320
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001bbc:	b283      	uxth	r3, r0
 8001bbe:	9700      	str	r7, [sp, #0]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001bc0:	fb01 5506 	mla	r5, r1, r6, r5
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <_ARGB4444_copybufJPEG+0xe0>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001bc8:	eb08 0545 	add.w	r5, r8, r5, lsl #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001bcc:	9503      	str	r5, [sp, #12]
 8001bce:	f005 f9af 	bl	8006f30 <BSP_STM32_DMA2D_CopyBufJPEG>
}
 8001bd2:	b007      	add	sp, #28
 8001bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (width % 16) offsline_src = 16 - (width % 16);
 8001bd8:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_420;
 8001bdc:	f04f 0b02 	mov.w	fp, #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001be0:	b2bf      	uxth	r7, r7
 8001be2:	e7d4      	b.n	8001b8e <_ARGB4444_copybufJPEG+0x76>
		chroma = DMA2D_CSS_422;
 8001be4:	f04f 0b01 	mov.w	fp, #1
 8001be8:	e7d1      	b.n	8001b8e <_ARGB4444_copybufJPEG+0x76>
 8001bea:	465f      	mov	r7, fp
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001bec:	e7cf      	b.n	8001b8e <_ARGB4444_copybufJPEG+0x76>
 8001bee:	bf00      	nop
 8001bf0:	2400026c 	.word	0x2400026c
 8001bf4:	52003000 	.word	0x52003000
 8001bf8:	52001000 	.word	0x52001000

08001bfc <_RGB888_copybufJPEG>:
static void _RGB888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001c00:	4c34      	ldr	r4, [pc, #208]	; (8001cd4 <_RGB888_copybufJPEG+0xd8>)
static void _RGB888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	4605      	mov	r5, r0
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001c06:	4834      	ldr	r0, [pc, #208]	; (8001cd8 <_RGB888_copybufJPEG+0xdc>)
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001c08:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
static void _RGB888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001c0c:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001c0e:	330a      	adds	r3, #10
 8001c10:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001c14:	f005 feec 	bl	80079f0 <BSP_STM32_JPEG_GetColorSpace>
 8001c18:	2810      	cmp	r0, #16
 8001c1a:	d002      	beq.n	8001c22 <_RGB888_copybufJPEG+0x26>
}
 8001c1c:	b009      	add	sp, #36	; 0x24
 8001c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8001c22:	482d      	ldr	r0, [pc, #180]	; (8001cd8 <_RGB888_copybufJPEG+0xdc>)
 8001c24:	f005 fed2 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001c28:	4607      	mov	r7, r0
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8001c2a:	482b      	ldr	r0, [pc, #172]	; (8001cd8 <_RGB888_copybufJPEG+0xdc>)
 8001c2c:	f005 fece 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001c30:	f5c0 7948 	rsb	r9, r0, #800	; 0x320
	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8001c34:	4828      	ldr	r0, [pc, #160]	; (8001cd8 <_RGB888_copybufJPEG+0xdc>)
 8001c36:	f005 fed5 	bl	80079e4 <BSP_STM32_JPEG_GetCSS>
 8001c3a:	2801      	cmp	r0, #1
 8001c3c:	d013      	beq.n	8001c66 <_RGB888_copybufJPEG+0x6a>
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	d009      	beq.n	8001c56 <_RGB888_copybufJPEG+0x5a>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d1ea      	bne.n	8001c1c <_RGB888_copybufJPEG+0x20>
		if (width % 8) offsline_src = 8 - (width % 8);
 8001c46:	f017 0207 	ands.w	r2, r7, #7
 8001c4a:	d040      	beq.n	8001cce <_RGB888_copybufJPEG+0xd2>
 8001c4c:	f1c2 0708 	rsb	r7, r2, #8
		chroma = DMA2D_CSS_444;
 8001c50:	4602      	mov	r2, r0
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c52:	b2bf      	uxth	r7, r7
 8001c54:	e00b      	b.n	8001c6e <_RGB888_copybufJPEG+0x72>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001c56:	f017 070f 	ands.w	r7, r7, #15
 8001c5a:	d036      	beq.n	8001cca <_RGB888_copybufJPEG+0xce>
 8001c5c:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_422;
 8001c60:	2201      	movs	r2, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c62:	b2bf      	uxth	r7, r7
 8001c64:	e003      	b.n	8001c6e <_RGB888_copybufJPEG+0x72>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001c66:	f017 070f 	ands.w	r7, r7, #15
 8001c6a:	d129      	bne.n	8001cc0 <_RGB888_copybufJPEG+0xc4>
		chroma = DMA2D_CSS_420;
 8001c6c:	2202      	movs	r2, #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001c6e:	6863      	ldr	r3, [r4, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d0fc      	beq.n	8001c6e <_RGB888_copybufJPEG+0x72>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001c74:	f04f 0b01 	mov.w	fp, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c78:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <_RGB888_copybufJPEG+0xdc>)
 8001c7a:	9207      	str	r2, [sp, #28]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001c7c:	f8c4 b004 	str.w	fp, [r4, #4]
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c80:	f005 fea4 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8001c84:	4682      	mov	sl, r0
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <_RGB888_copybufJPEG+0xdc>)
 8001c88:	f005 fea6 	bl	80079d8 <BSP_STM32_JPEG_GetHeight>
 8001c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c8e:	9a07      	ldr	r2, [sp, #28]
 8001c90:	4659      	mov	r1, fp
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	b283      	uxth	r3, r0
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001c96:	f44f 7048 	mov.w	r0, #800	; 0x320
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c9a:	9700      	str	r7, [sp, #0]
 8001c9c:	fa1f f789 	uxth.w	r7, r9
 8001ca0:	9204      	str	r2, [sp, #16]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001ca2:	fb00 5506 	mla	r5, r0, r6, r5
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001ca6:	fa1f f28a 	uxth.w	r2, sl
 8001caa:	9702      	str	r7, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001cb0:	480a      	ldr	r0, [pc, #40]	; (8001cdc <_RGB888_copybufJPEG+0xe0>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001cb2:	4445      	add	r5, r8
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001cb4:	9503      	str	r5, [sp, #12]
 8001cb6:	f005 f93b 	bl	8006f30 <BSP_STM32_DMA2D_CopyBufJPEG>
}
 8001cba:	b009      	add	sp, #36	; 0x24
 8001cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (width % 16) offsline_src = 16 - (width % 16);
 8001cc0:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_420;
 8001cc4:	2202      	movs	r2, #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001cc6:	b2bf      	uxth	r7, r7
 8001cc8:	e7d1      	b.n	8001c6e <_RGB888_copybufJPEG+0x72>
		chroma = DMA2D_CSS_422;
 8001cca:	2201      	movs	r2, #1
 8001ccc:	e7cf      	b.n	8001c6e <_RGB888_copybufJPEG+0x72>
 8001cce:	4617      	mov	r7, r2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001cd0:	e7cd      	b.n	8001c6e <_RGB888_copybufJPEG+0x72>
 8001cd2:	bf00      	nop
 8001cd4:	2400026c 	.word	0x2400026c
 8001cd8:	52003000 	.word	0x52003000
 8001cdc:	52001000 	.word	0x52001000

08001ce0 <_ARGB8888_copybufblend>:
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001ce2:	4d13      	ldr	r5, [pc, #76]	; (8001d30 <_ARGB8888_copybufblend+0x50>)
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001ce4:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001ce6:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cea:	b087      	sub	sp, #28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001cec:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001cf0:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cf4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001cf8:	320a      	adds	r2, #10
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cfa:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001cfe:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d02:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001d06:	eb01 0183 	add.w	r1, r1, r3, lsl #2
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d0a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001d0e:	686c      	ldr	r4, [r5, #4]
 8001d10:	2c01      	cmp	r4, #1
 8001d12:	d0fc      	beq.n	8001d0e <_ARGB8888_copybufblend+0x2e>
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d14:	9600      	str	r6, [sp, #0]
 8001d16:	e9cd 0701 	strd	r0, r7, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001d1a:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d1c:	e9cd 1c03 	strd	r1, ip, [sp, #12]
 8001d20:	2100      	movs	r1, #0
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001d22:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d24:	4803      	ldr	r0, [pc, #12]	; (8001d34 <_ARGB8888_copybufblend+0x54>)
 8001d26:	f005 f951 	bl	8006fcc <BSP_STM32_DMA2D_CopyBufBlend>
}
 8001d2a:	b007      	add	sp, #28
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2400026c 	.word	0x2400026c
 8001d34:	52001000 	.word	0x52001000

08001d38 <_ARGB1555_copybufblend>:
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001d3a:	4d13      	ldr	r5, [pc, #76]	; (8001d88 <_ARGB1555_copybufblend+0x50>)
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d3c:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d3e:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d42:	b087      	sub	sp, #28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d44:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001d48:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d4c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d50:	320a      	adds	r2, #10
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d52:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d56:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d5a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d5e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d62:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001d66:	686c      	ldr	r4, [r5, #4]
 8001d68:	2c01      	cmp	r4, #1
 8001d6a:	d0fc      	beq.n	8001d66 <_ARGB1555_copybufblend+0x2e>
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d6c:	9600      	str	r6, [sp, #0]
 8001d6e:	e9cd 0701 	strd	r0, r7, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001d72:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d74:	e9cd 1c03 	strd	r1, ip, [sp, #12]
 8001d78:	2103      	movs	r1, #3
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001d7a:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <_ARGB1555_copybufblend+0x54>)
 8001d7e:	f005 f925 	bl	8006fcc <BSP_STM32_DMA2D_CopyBufBlend>
}
 8001d82:	b007      	add	sp, #28
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2400026c 	.word	0x2400026c
 8001d8c:	52001000 	.word	0x52001000

08001d90 <_ARGB4444_copybufblend>:
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001d92:	4d13      	ldr	r5, [pc, #76]	; (8001de0 <_ARGB4444_copybufblend+0x50>)
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d94:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d96:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d9a:	b087      	sub	sp, #28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d9c:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001da0:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001da4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001da8:	320a      	adds	r2, #10
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001daa:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001dae:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001db2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001db6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001dba:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001dbe:	686c      	ldr	r4, [r5, #4]
 8001dc0:	2c01      	cmp	r4, #1
 8001dc2:	d0fc      	beq.n	8001dbe <_ARGB4444_copybufblend+0x2e>
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001dc4:	9600      	str	r6, [sp, #0]
 8001dc6:	e9cd 0701 	strd	r0, r7, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001dca:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001dcc:	e9cd 1c03 	strd	r1, ip, [sp, #12]
 8001dd0:	2104      	movs	r1, #4
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001dd2:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <_ARGB4444_copybufblend+0x54>)
 8001dd6:	f005 f8f9 	bl	8006fcc <BSP_STM32_DMA2D_CopyBufBlend>
}
 8001dda:	b007      	add	sp, #28
 8001ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2400026c 	.word	0x2400026c
 8001de4:	52001000 	.word	0x52001000

08001de8 <_RGB888_copybufblend>:
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001dea:	4d12      	ldr	r5, [pc, #72]	; (8001e34 <_RGB888_copybufblend+0x4c>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001dec:	f44f 7448 	mov.w	r4, #800	; 0x320
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001df0:	b087      	sub	sp, #28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001df2:	fb04 2203 	mla	r2, r4, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001df6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001dfa:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001dfe:	330a      	adds	r3, #10
 8001e00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001e04:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001e08:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001e0c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001e10:	4416      	add	r6, r2
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001e12:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001e16:	686c      	ldr	r4, [r5, #4]
 8001e18:	2c01      	cmp	r4, #1
 8001e1a:	d0fc      	beq.n	8001e16 <_RGB888_copybufblend+0x2e>
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001e1c:	9100      	str	r1, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001e1e:	2101      	movs	r1, #1
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001e20:	e9cd 0701 	strd	r0, r7, [sp, #4]
 8001e24:	e9cd 6c03 	strd	r6, ip, [sp, #12]
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <_RGB888_copybufblend+0x50>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001e2a:	6069      	str	r1, [r5, #4]
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001e2c:	f005 f8ce 	bl	8006fcc <BSP_STM32_DMA2D_CopyBufBlend>
}
 8001e30:	b007      	add	sp, #28
 8001e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e34:	2400026c 	.word	0x2400026c
 8001e38:	52001000 	.word	0x52001000

08001e3c <_ARGB8888_copybuf>:
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001e3e:	4d11      	ldr	r5, [pc, #68]	; (8001e84 <_ARGB8888_copybuf+0x48>)
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e40:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001e42:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e46:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001e48:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001e4c:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e50:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001e54:	320a      	adds	r2, #10
 8001e56:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e5a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001e5e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e62:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001e66:	686c      	ldr	r4, [r5, #4]
 8001e68:	2c01      	cmp	r4, #1
 8001e6a:	d0fc      	beq.n	8001e66 <_ARGB8888_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e6c:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001e6e:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e70:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001e72:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <_ARGB8888_copybuf+0x4c>)
 8001e76:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	f005 f812 	bl	8006ea4 <BSP_STM32_DMA2D_CopyBuf>
}
 8001e80:	b005      	add	sp, #20
 8001e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e84:	2400026c 	.word	0x2400026c
 8001e88:	52001000 	.word	0x52001000

08001e8c <_ARGB1555_copybuf>:
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001e8e:	4d11      	ldr	r5, [pc, #68]	; (8001ed4 <_ARGB1555_copybuf+0x48>)
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e90:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e92:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e96:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e98:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001e9c:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ea0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001ea4:	320a      	adds	r2, #10
 8001ea6:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001eaa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001eae:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001eb2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001eb6:	686c      	ldr	r4, [r5, #4]
 8001eb8:	2c01      	cmp	r4, #1
 8001eba:	d0fc      	beq.n	8001eb6 <_ARGB1555_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001ebc:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001ebe:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001ec0:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001ec2:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <_ARGB1555_copybuf+0x4c>)
 8001ec6:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8001eca:	2103      	movs	r1, #3
 8001ecc:	f004 ffea 	bl	8006ea4 <BSP_STM32_DMA2D_CopyBuf>
}
 8001ed0:	b005      	add	sp, #20
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	2400026c 	.word	0x2400026c
 8001ed8:	52001000 	.word	0x52001000

08001edc <_ARGB4444_copybuf>:
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001ede:	4d11      	ldr	r5, [pc, #68]	; (8001f24 <_ARGB4444_copybuf+0x48>)
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ee0:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001ee2:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ee6:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001ee8:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001eec:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ef0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001ef4:	320a      	adds	r2, #10
 8001ef6:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001efa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001efe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f02:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001f06:	686c      	ldr	r4, [r5, #4]
 8001f08:	2c01      	cmp	r4, #1
 8001f0a:	d0fc      	beq.n	8001f06 <_ARGB4444_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001f0c:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001f0e:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001f10:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001f12:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <_ARGB4444_copybuf+0x4c>)
 8001f16:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	f004 ffc2 	bl	8006ea4 <BSP_STM32_DMA2D_CopyBuf>
}
 8001f20:	b005      	add	sp, #20
 8001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f24:	2400026c 	.word	0x2400026c
 8001f28:	52001000 	.word	0x52001000

08001f2c <_RGB888_copybuf>:
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001f2e:	4d11      	ldr	r5, [pc, #68]	; (8001f74 <_RGB888_copybuf+0x48>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001f30:	f44f 7448 	mov.w	r4, #800	; 0x320
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f34:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001f36:	fb04 2203 	mla	r2, r4, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001f3a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f3e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001f42:	330a      	adds	r3, #10
 8001f44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f48:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f4c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001f50:	4416      	add	r6, r2
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f52:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001f56:	686c      	ldr	r4, [r5, #4]
 8001f58:	2c01      	cmp	r4, #1
 8001f5a:	d0fc      	beq.n	8001f56 <_RGB888_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001f5c:	9100      	str	r1, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001f5e:	2101      	movs	r1, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001f60:	9001      	str	r0, [sp, #4]
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <_RGB888_copybuf+0x4c>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001f64:	6069      	str	r1, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001f66:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8001f6a:	f004 ff9b 	bl	8006ea4 <BSP_STM32_DMA2D_CopyBuf>
}
 8001f6e:	b005      	add	sp, #20
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2400026c 	.word	0x2400026c
 8001f78:	52001000 	.word	0x52001000

08001f7c <_AL88_copybuf>:
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001f7e:	4d11      	ldr	r5, [pc, #68]	; (8001fc4 <_AL88_copybuf+0x48>)
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f80:	460e      	mov	r6, r1
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8001f82:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f86:	b085      	sub	sp, #20
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8001f88:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001f8c:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f90:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8001f94:	320a      	adds	r2, #10
 8001f96:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f9a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8001f9e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001fa2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001fa6:	686c      	ldr	r4, [r5, #4]
 8001fa8:	2c01      	cmp	r4, #1
 8001faa:	d0fc      	beq.n	8001fa6 <_AL88_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8001fac:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001fae:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8001fb0:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001fb2:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <_AL88_copybuf+0x4c>)
 8001fb6:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8001fba:	2102      	movs	r1, #2
 8001fbc:	f004 ff72 	bl	8006ea4 <BSP_STM32_DMA2D_CopyBuf>
}
 8001fc0:	b005      	add	sp, #20
 8001fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc4:	2400026c 	.word	0x2400026c
 8001fc8:	52001000 	.word	0x52001000

08001fcc <_L8_copybuf>:
	// Function not available in color modes with CLUT tables
	_L8_fillbuf(x, y, width, height, offsetline, color);
}


static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	// Because DMA2D cannot handle 8bit formats, below workaround was required

	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001fd0:	4d3e      	ldr	r5, [pc, #248]	; (80020cc <_L8_copybuf+0x100>)

	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001fd2:	f44f 7448 	mov.w	r4, #800	; 0x320
static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001fd6:	b084      	sub	sp, #16
	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001fd8:	fb04 2303 	mla	r3, r4, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001fdc:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001fe0:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint8_t *s_addr = (uint8_t *)src_addr;
 8001fe4:	4604      	mov	r4, r0
	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001fe6:	320a      	adds	r2, #10
static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001fe8:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001fec:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 8001ff0:	441e      	add	r6, r3
static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ff2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001ff6:	46b6      	mov	lr, r6
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001ff8:	686a      	ldr	r2, [r5, #4]
 8001ffa:	2a01      	cmp	r2, #1
 8001ffc:	d0fc      	beq.n	8001ff8 <_L8_copybuf+0x2c>
	uint32_t size = 0;

	_L8_dma2dwait();

	if (((uint32_t)s_addr % 2) || ((uint32_t)d_addr % 2)>0) {
 8001ffe:	ea46 0200 	orr.w	r2, r6, r0
 8002002:	f012 0201 	ands.w	r2, r2, #1
 8002006:	d01e      	beq.n	8002046 <_L8_copybuf+0x7a>
		// Cannot use DMA2D
		while (size<(width * height)) {
 8002008:	fb03 f50c 	mul.w	r5, r3, ip
 800200c:	b17d      	cbz	r5, 800202e <_L8_copybuf+0x62>
			size++;
			if (!(size % width)) {
				d_addr+=offsline_dest;
				s_addr+=offsline_src;
			}
			d_addr++;
 800200e:	3701      	adds	r7, #1
			s_addr++;
 8002010:	3101      	adds	r1, #1
			if (!(size % width)) {
 8002012:	2300      	movs	r3, #0
			size++;
 8002014:	3301      	adds	r3, #1
			*d_addr = *s_addr;
 8002016:	7820      	ldrb	r0, [r4, #0]
			if (!(size % width)) {
 8002018:	fbb3 f2fc 	udiv	r2, r3, ip
 800201c:	fb0c 3212 	mls	r2, ip, r2, r3
			*d_addr = *s_addr;
 8002020:	f88e 0000 	strb.w	r0, [lr]
			if (!(size % width)) {
 8002024:	b932      	cbnz	r2, 8002034 <_L8_copybuf+0x68>
		while (size<(width * height)) {
 8002026:	429d      	cmp	r5, r3
			d_addr++;
 8002028:	44be      	add	lr, r7
			s_addr++;
 800202a:	440c      	add	r4, r1
		while (size<(width * height)) {
 800202c:	d1f2      	bne.n	8002014 <_L8_copybuf+0x48>
		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);

	}


}
 800202e:	b004      	add	sp, #16
 8002030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		while (size<(width * height)) {
 8002034:	429d      	cmp	r5, r3
			d_addr++;
 8002036:	f10e 0e01 	add.w	lr, lr, #1
			s_addr++;
 800203a:	f104 0401 	add.w	r4, r4, #1
		while (size<(width * height)) {
 800203e:	d1e9      	bne.n	8002014 <_L8_copybuf+0x48>
}
 8002040:	b004      	add	sp, #16
 8002042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t w = width & 0xFFFE;
 8002046:	f02c 0401 	bic.w	r4, ip, #1
		uint16_t os = offsline_src + width - w;
 800204a:	eb0c 0e01 	add.w	lr, ip, r1
		uint16_t od = offsline_dest + width - w;
 800204e:	eb0c 0907 	add.w	r9, ip, r7
		uint16_t os = offsline_src + width - w;
 8002052:	ebae 0e04 	sub.w	lr, lr, r4
		if (w < width) {
 8002056:	45a4      	cmp	ip, r4
		uint16_t od = offsline_dest + width - w;
 8002058:	eba9 0904 	sub.w	r9, r9, r4
		uint16_t w = width & 0xFFFE;
 800205c:	fa1f f884 	uxth.w	r8, r4
		uint16_t os = offsline_src + width - w;
 8002060:	fa1f fe8e 	uxth.w	lr, lr
		uint16_t od = offsline_dest + width - w;
 8002064:	fa1f f989 	uxth.w	r9, r9
		if (w < width) {
 8002068:	d911      	bls.n	800208e <_L8_copybuf+0xc2>
			uint8_t *dd_addr = d_addr + width - 1;
 800206a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800206e:	eb06 040c 	add.w	r4, r6, ip
			uint8_t *ss_addr = s_addr + width - 1;
 8002072:	4484      	add	ip, r0
			for (uint16_t yy = 0; yy< height; yy++) {
 8002074:	b15b      	cbz	r3, 800208e <_L8_copybuf+0xc2>
 8002076:	2901      	cmp	r1, #1
 8002078:	d11c      	bne.n	80020b4 <_L8_copybuf+0xe8>
 800207a:	2f01      	cmp	r7, #1
 800207c:	d11a      	bne.n	80020b4 <_L8_copybuf+0xe8>
				*dd_addr = *ss_addr;
 800207e:	f81c 1b01 	ldrb.w	r1, [ip], #1
			for (uint16_t yy = 0; yy< height; yy++) {
 8002082:	3201      	adds	r2, #1
				*dd_addr = *ss_addr;
 8002084:	f804 1b01 	strb.w	r1, [r4], #1
			for (uint16_t yy = 0; yy< height; yy++) {
 8002088:	b291      	uxth	r1, r2
 800208a:	428b      	cmp	r3, r1
 800208c:	d8f7      	bhi.n	800207e <_L8_copybuf+0xb2>
		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);
 800208e:	9001      	str	r0, [sp, #4]
 8002090:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8002094:	ea4f 0259 	mov.w	r2, r9, lsr #1
 8002098:	2102      	movs	r1, #2
 800209a:	9000      	str	r0, [sp, #0]
		BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800209c:	2001      	movs	r0, #1
		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);
 800209e:	9202      	str	r2, [sp, #8]
 80020a0:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80020a4:	9603      	str	r6, [sp, #12]
		BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80020a6:	6068      	str	r0, [r5, #4]
		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);
 80020a8:	4809      	ldr	r0, [pc, #36]	; (80020d0 <_L8_copybuf+0x104>)
 80020aa:	f004 fefb 	bl	8006ea4 <BSP_STM32_DMA2D_CopyBuf>
}
 80020ae:	b004      	add	sp, #16
 80020b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				*dd_addr = *ss_addr;
 80020b4:	f89c a000 	ldrb.w	sl, [ip]
			for (uint16_t yy = 0; yy< height; yy++) {
 80020b8:	3201      	adds	r2, #1
				ss_addr+=offsline_src;
 80020ba:	448c      	add	ip, r1
				*dd_addr = *ss_addr;
 80020bc:	f884 a000 	strb.w	sl, [r4]
			for (uint16_t yy = 0; yy< height; yy++) {
 80020c0:	fa1f fa82 	uxth.w	sl, r2
				dd_addr+=offsline_dest;
 80020c4:	443c      	add	r4, r7
			for (uint16_t yy = 0; yy< height; yy++) {
 80020c6:	459a      	cmp	sl, r3
 80020c8:	d3f4      	bcc.n	80020b4 <_L8_copybuf+0xe8>
 80020ca:	e7e0      	b.n	800208e <_L8_copybuf+0xc2>
 80020cc:	2400026c 	.word	0x2400026c
 80020d0:	52001000 	.word	0x52001000

080020d4 <_L8_copybufblend>:


static void _L8_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80020d4:	b410      	push	{r4}
 80020d6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	// Status: Function Completed
	// Effective and fast blending is not possible with CLUT mode
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 80020da:	9401      	str	r4, [sp, #4]
static void _L8_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80020dc:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 80020e0:	9402      	str	r4, [sp, #8]
static void _L8_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80020e2:	f8bd 400c 	ldrh.w	r4, [sp, #12]
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 80020e6:	9403      	str	r4, [sp, #12]
}
 80020e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 80020ec:	f7ff bf6e 	b.w	8001fcc <_L8_copybuf>

080020f0 <_ARGB8888_fillbufblend>:
static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80020f2:	4c10      	ldr	r4, [pc, #64]	; (8002134 <_ARGB8888_fillbufblend+0x44>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 80020f4:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80020f8:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 80020fa:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80020fe:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002102:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002104:	300a      	adds	r0, #10
static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002106:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	uint8_t alpha  = color >> 24;
 800210a:	0e2f      	lsrs	r7, r5, #24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 800210c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8002110:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002114:	6861      	ldr	r1, [r4, #4]
 8002116:	2901      	cmp	r1, #1
 8002118:	d0fc      	beq.n	8002114 <_ARGB8888_fillbufblend+0x24>
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color, alpha);
 800211a:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800211c:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color, alpha);
 800211e:	2100      	movs	r1, #0
 8002120:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002122:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color, alpha);
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <_ARGB8888_fillbufblend+0x48>)
 8002126:	e9cd 5702 	strd	r5, r7, [sp, #8]
 800212a:	f004 fe49 	bl	8006dc0 <BSP_STM32_DMA2D_FillBuffBlend>
}
 800212e:	b005      	add	sp, #20
 8002130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002132:	bf00      	nop
 8002134:	2400026c 	.word	0x2400026c
 8002138:	52001000 	.word	0x52001000

0800213c <_ARGB1555_fillbufblend>:
static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800213e:	4c11      	ldr	r4, [pc, #68]	; (8002184 <_ARGB1555_fillbufblend+0x48>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002140:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002144:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002146:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800214a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800214e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002150:	300a      	adds	r0, #10
static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002152:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	uint8_t alpha  = ((color & 0x8000) >> 15)?255:0;
 8002156:	f347 35c0 	sbfx	r5, r7, #15, #1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800215a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
	uint8_t alpha  = ((color & 0x8000) >> 15)?255:0;
 800215e:	b2ed      	uxtb	r5, r5
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002160:	eb00 0041 	add.w	r0, r0, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002164:	6861      	ldr	r1, [r4, #4]
 8002166:	2901      	cmp	r1, #1
 8002168:	d0fc      	beq.n	8002164 <_ARGB1555_fillbufblend+0x28>
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color, alpha);
 800216a:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800216c:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color, alpha);
 800216e:	2103      	movs	r1, #3
 8002170:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002172:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color, alpha);
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <_ARGB1555_fillbufblend+0x4c>)
 8002176:	e9cd 7502 	strd	r7, r5, [sp, #8]
 800217a:	f004 fe21 	bl	8006dc0 <BSP_STM32_DMA2D_FillBuffBlend>
}
 800217e:	b005      	add	sp, #20
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002182:	bf00      	nop
 8002184:	2400026c 	.word	0x2400026c
 8002188:	52001000 	.word	0x52001000

0800218c <_ARGB4444_fillbufblend>:
static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800218e:	4c11      	ldr	r4, [pc, #68]	; (80021d4 <_ARGB4444_fillbufblend+0x48>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002190:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002194:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002196:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800219a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800219e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80021a0:	300a      	adds	r0, #10
static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021a2:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	uint8_t alpha  = ((color & 0xF000) >> 12) << 4;
 80021a6:	0a3d      	lsrs	r5, r7, #8
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80021a8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
	uint8_t alpha  = ((color & 0xF000) >> 12) << 4;
 80021ac:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80021b0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80021b4:	6861      	ldr	r1, [r4, #4]
 80021b6:	2901      	cmp	r1, #1
 80021b8:	d0fc      	beq.n	80021b4 <_ARGB4444_fillbufblend+0x28>
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color, alpha);
 80021ba:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80021bc:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color, alpha);
 80021be:	2104      	movs	r1, #4
 80021c0:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80021c2:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color, alpha);
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <_ARGB4444_fillbufblend+0x4c>)
 80021c6:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80021ca:	f004 fdf9 	bl	8006dc0 <BSP_STM32_DMA2D_FillBuffBlend>
}
 80021ce:	b005      	add	sp, #20
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2400026c 	.word	0x2400026c
 80021d8:	52001000 	.word	0x52001000

080021dc <_RGB888_fillbufblend>:
static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80021de:	4c10      	ldr	r4, [pc, #64]	; (8002220 <_RGB888_fillbufblend+0x44>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 80021e0:	f44f 7648 	mov.w	r6, #800	; 0x320
static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021e4:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 80021e6:	fb06 0001 	mla	r0, r6, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80021ea:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 80021f0:	310a      	adds	r1, #10
 80021f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021f6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	uint8_t alpha  = color >> 24;
 80021fa:	0e37      	lsrs	r7, r6, #24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 80021fc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8002200:	4408      	add	r0, r1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002202:	6861      	ldr	r1, [r4, #4]
 8002204:	2901      	cmp	r1, #1
 8002206:	d0fc      	beq.n	8002202 <_RGB888_fillbufblend+0x26>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002208:	2101      	movs	r1, #1
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color, alpha);
 800220a:	9001      	str	r0, [sp, #4]
 800220c:	9500      	str	r5, [sp, #0]
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <_RGB888_fillbufblend+0x48>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002210:	6061      	str	r1, [r4, #4]
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color, alpha);
 8002212:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002216:	f004 fdd3 	bl	8006dc0 <BSP_STM32_DMA2D_FillBuffBlend>
}
 800221a:	b005      	add	sp, #20
 800221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800221e:	bf00      	nop
 8002220:	2400026c 	.word	0x2400026c
 8002224:	52001000 	.word	0x52001000

08002228 <_ARGB8888_fillbuf>:
static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002228:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800222a:	4c0f      	ldr	r4, [pc, #60]	; (8002268 <_ARGB8888_fillbuf+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 800222c:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002230:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002232:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002236:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800223a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 800223e:	300a      	adds	r0, #10
 8002240:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002244:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002246:	eb05 0581 	add.w	r5, r5, r1, lsl #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 800224a:	6861      	ldr	r1, [r4, #4]
 800224c:	2901      	cmp	r1, #1
 800224e:	d0fc      	beq.n	800224a <_ARGB8888_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color);
 8002250:	2100      	movs	r1, #0
 8002252:	9600      	str	r6, [sp, #0]
 8002254:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002258:	2001      	movs	r0, #1
 800225a:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color);
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <_ARGB8888_fillbuf+0x44>)
 800225e:	f004 fd75 	bl	8006d4c <BSP_STM32_DMA2D_FillBuff>
}
 8002262:	b004      	add	sp, #16
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	bf00      	nop
 8002268:	2400026c 	.word	0x2400026c
 800226c:	52001000 	.word	0x52001000

08002270 <_ARGB1555_fillbuf>:
static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002270:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002272:	4c0f      	ldr	r4, [pc, #60]	; (80022b0 <_ARGB1555_fillbuf+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002274:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002278:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800227a:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800227e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002282:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002286:	300a      	adds	r0, #10
 8002288:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800228c:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800228e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002292:	6861      	ldr	r1, [r4, #4]
 8002294:	2901      	cmp	r1, #1
 8002296:	d0fc      	beq.n	8002292 <_ARGB1555_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color);
 8002298:	2103      	movs	r1, #3
 800229a:	9600      	str	r6, [sp, #0]
 800229c:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80022a0:	2001      	movs	r0, #1
 80022a2:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color);
 80022a4:	4803      	ldr	r0, [pc, #12]	; (80022b4 <_ARGB1555_fillbuf+0x44>)
 80022a6:	f004 fd51 	bl	8006d4c <BSP_STM32_DMA2D_FillBuff>
}
 80022aa:	b004      	add	sp, #16
 80022ac:	bd70      	pop	{r4, r5, r6, pc}
 80022ae:	bf00      	nop
 80022b0:	2400026c 	.word	0x2400026c
 80022b4:	52001000 	.word	0x52001000

080022b8 <_ARGB4444_fillbuf>:
static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022b8:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80022ba:	4c0f      	ldr	r4, [pc, #60]	; (80022f8 <_ARGB4444_fillbuf+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80022bc:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022c0:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80022c2:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80022c6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022ca:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80022ce:	300a      	adds	r0, #10
 80022d0:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022d4:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80022d6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80022da:	6861      	ldr	r1, [r4, #4]
 80022dc:	2901      	cmp	r1, #1
 80022de:	d0fc      	beq.n	80022da <_ARGB4444_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color);
 80022e0:	2104      	movs	r1, #4
 80022e2:	9600      	str	r6, [sp, #0]
 80022e4:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80022e8:	2001      	movs	r0, #1
 80022ea:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color);
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <_ARGB4444_fillbuf+0x44>)
 80022ee:	f004 fd2d 	bl	8006d4c <BSP_STM32_DMA2D_FillBuff>
}
 80022f2:	b004      	add	sp, #16
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	bf00      	nop
 80022f8:	2400026c 	.word	0x2400026c
 80022fc:	52001000 	.word	0x52001000

08002300 <_RGB888_fillbuf>:
static void _RGB888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002300:	b530      	push	{r4, r5, lr}
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 8002302:	f44f 7c48 	mov.w	ip, #800	; 0x320
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002306:	4c0e      	ldr	r4, [pc, #56]	; (8002340 <_RGB888_fillbuf+0x40>)
static void _RGB888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002308:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 800230a:	fb0c 0001 	mla	r0, ip, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800230e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
static void _RGB888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002312:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 8002316:	310a      	adds	r1, #10
 8002318:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800231c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8002320:	4408      	add	r0, r1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002322:	6861      	ldr	r1, [r4, #4]
 8002324:	2901      	cmp	r1, #1
 8002326:	d0fc      	beq.n	8002322 <_RGB888_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color);
 8002328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800232a:	9500      	str	r5, [sp, #0]
 800232c:	e9cd 0101 	strd	r0, r1, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002330:	2101      	movs	r1, #1
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color);
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <_RGB888_fillbuf+0x44>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002334:	6061      	str	r1, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color);
 8002336:	f004 fd09 	bl	8006d4c <BSP_STM32_DMA2D_FillBuff>
}
 800233a:	b005      	add	sp, #20
 800233c:	bd30      	pop	{r4, r5, pc}
 800233e:	bf00      	nop
 8002340:	2400026c 	.word	0x2400026c
 8002344:	52001000 	.word	0x52001000

08002348 <_AL88_fillbuf>:
static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002348:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800234a:	4c0f      	ldr	r4, [pc, #60]	; (8002388 <_AL88_fillbuf+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800234c:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002350:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002352:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002356:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800235a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800235e:	300a      	adds	r0, #10
 8002360:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002364:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002366:	eb05 0541 	add.w	r5, r5, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 800236a:	6861      	ldr	r1, [r4, #4]
 800236c:	2901      	cmp	r1, #1
 800236e:	d0fc      	beq.n	800236a <_AL88_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 8002370:	2102      	movs	r1, #2
 8002372:	9600      	str	r6, [sp, #0]
 8002374:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002378:	2001      	movs	r0, #1
 800237a:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <_AL88_fillbuf+0x44>)
 800237e:	f004 fce5 	bl	8006d4c <BSP_STM32_DMA2D_FillBuff>
}
 8002382:	b004      	add	sp, #16
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	bf00      	nop
 8002388:	2400026c 	.word	0x2400026c
 800238c:	52001000 	.word	0x52001000

08002390 <_L8_fillbuf>:
static void _L8_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002394:	b08b      	sub	sp, #44	; 0x2c
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002396:	4c39      	ldr	r4, [pc, #228]	; (800247c <_L8_fillbuf+0xec>)
static void _L8_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002398:	9307      	str	r3, [sp, #28]
 800239a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800239e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80023a0:	9309      	str	r3, [sp, #36]	; 0x24
	uint16_t x0 = x & 0xFFFC;
 80023a2:	f020 0303 	bic.w	r3, r0, #3
static void _L8_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80023a6:	e9cd 1205 	strd	r1, r2, [sp, #20]
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80023aa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	if (x0 < x) x0 += 4;
 80023ae:	4298      	cmp	r0, r3
	uint16_t x0 = x & 0xFFFC;
 80023b0:	fa1f f983 	uxth.w	r9, r3
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	9208      	str	r2, [sp, #32]
	if (x0 < x) x0 += 4;
 80023b8:	d903      	bls.n	80023c2 <_L8_fillbuf+0x32>
 80023ba:	f109 0904 	add.w	r9, r9, #4
 80023be:	fa1f f989 	uxth.w	r9, r9
	uint16_t x1 = (x + width) & 0xFFFC;
 80023c2:	9b06      	ldr	r3, [sp, #24]
 80023c4:	18c6      	adds	r6, r0, r3
 80023c6:	f026 0a03 	bic.w	sl, r6, #3
 80023ca:	fa1f fa8a 	uxth.w	sl, sl
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80023ce:	6863      	ldr	r3, [r4, #4]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d0fc      	beq.n	80023ce <_L8_fillbuf+0x3e>
	for (uint32_t yy=y; yy<(y+height); yy++) {
 80023d4:	9b05      	ldr	r3, [sp, #20]
 80023d6:	9a07      	ldr	r2, [sp, #28]
 80023d8:	461f      	mov	r7, r3
 80023da:	eb02 0b03 	add.w	fp, r2, r3
 80023de:	455b      	cmp	r3, fp
 80023e0:	d21b      	bcs.n	800241a <_L8_fillbuf+0x8a>
 80023e2:	45b1      	cmp	r9, r6
 80023e4:	9b08      	ldr	r3, [sp, #32]
 80023e6:	46ce      	mov	lr, r9
			*addr = *color8;
 80023e8:	fa5f f885 	uxtb.w	r8, r5
 80023ec:	bfa8      	it	ge
 80023ee:	46b6      	movge	lr, r6
 80023f0:	f103 0c0a 	add.w	ip, r3, #10
		for (uint32_t xx=x; xx<MIN(x0, x+width); xx++) {
 80023f4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80023f8:	4570      	cmp	r0, lr
 80023fa:	fb03 f107 	mul.w	r1, r3, r7
 80023fe:	d207      	bcs.n	8002410 <_L8_fillbuf+0x80>
 8002400:	4603      	mov	r3, r0
			addr = (uint8_t *)(BSP_hlcd.layer.Frames[eframe]) + (xx + yy*LCD_WIDTH);
 8002402:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
			*addr = *color8;
 8002406:	440a      	add	r2, r1
 8002408:	54d5      	strb	r5, [r2, r3]
		for (uint32_t xx=x; xx<MIN(x0, x+width); xx++) {
 800240a:	3301      	adds	r3, #1
 800240c:	459e      	cmp	lr, r3
 800240e:	d1f8      	bne.n	8002402 <_L8_fillbuf+0x72>
		if (x1<x0) continue;
 8002410:	45d1      	cmp	r9, sl
 8002412:	d927      	bls.n	8002464 <_L8_fillbuf+0xd4>
	for (uint32_t yy=y; yy<(y+height); yy++) {
 8002414:	3701      	adds	r7, #1
 8002416:	455f      	cmp	r7, fp
 8002418:	d1ec      	bne.n	80023f4 <_L8_fillbuf+0x64>
	if (x1<=x0) return;
 800241a:	45d1      	cmp	r9, sl
 800241c:	d21f      	bcs.n	800245e <_L8_fillbuf+0xce>
	uint16_t ol = offsetline + width - w;
 800241e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002420:	9a06      	ldr	r2, [sp, #24]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 8002422:	9808      	ldr	r0, [sp, #32]
	uint16_t ol = offsetline + width - w;
 8002424:	441a      	add	r2, r3
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 8002426:	9502      	str	r5, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 8002428:	300a      	adds	r0, #10
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 800242a:	9b07      	ldr	r3, [sp, #28]
	uint16_t ol = offsetline + width - w;
 800242c:	eba2 010a 	sub.w	r1, r2, sl
	uint16_t w = x1-x0;
 8002430:	ebaa 0209 	sub.w	r2, sl, r9
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 8002434:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
	uint16_t ol = offsetline + width - w;
 8002438:	4449      	add	r1, r9
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 800243a:	9805      	ldr	r0, [sp, #20]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 800243c:	f3c2 028d 	ubfx	r2, r2, #2, #14
 8002440:	f3c1 018d 	ubfx	r1, r1, #2, #14
 8002444:	9100      	str	r1, [sp, #0]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 8002446:	f44f 7148 	mov.w	r1, #800	; 0x320
 800244a:	fb01 9000 	mla	r0, r1, r0, r9
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 800244e:	2100      	movs	r1, #0
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 8002450:	4428      	add	r0, r5
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 8002452:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002454:	2001      	movs	r0, #1
 8002456:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 8002458:	4809      	ldr	r0, [pc, #36]	; (8002480 <_L8_fillbuf+0xf0>)
 800245a:	f004 fc77 	bl	8006d4c <BSP_STM32_DMA2D_FillBuff>
}
 800245e:	b00b      	add	sp, #44	; 0x2c
 8002460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (uint32_t xx=x1; xx<(x+width); xx++) {
 8002464:	4556      	cmp	r6, sl
 8002466:	d9d5      	bls.n	8002414 <_L8_fillbuf+0x84>
			*addr = *color8;
 8002468:	4653      	mov	r3, sl
			addr = (uint8_t *)(BSP_hlcd.layer.Frames[eframe]) + (xx + yy*LCD_WIDTH);
 800246a:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
			*addr = *color8;
 800246e:	440a      	add	r2, r1
 8002470:	f802 8003 	strb.w	r8, [r2, r3]
		for (uint32_t xx=x1; xx<(x+width); xx++) {
 8002474:	3301      	adds	r3, #1
 8002476:	429e      	cmp	r6, r3
 8002478:	d1f7      	bne.n	800246a <_L8_fillbuf+0xda>
 800247a:	e7cb      	b.n	8002414 <_L8_fillbuf+0x84>
 800247c:	2400026c 	.word	0x2400026c
 8002480:	52001000 	.word	0x52001000

08002484 <_L8_copybufJPEG>:


static void _L8_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8002484:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Function not available in AL color mode. Instead area is filled with black color.
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002486:	4f10      	ldr	r7, [pc, #64]	; (80024c8 <_L8_copybufJPEG+0x44>)
static void _L8_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8002488:	b083      	sub	sp, #12
 800248a:	4605      	mov	r5, r0
 800248c:	460e      	mov	r6, r1
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 800248e:	4638      	mov	r0, r7
 8002490:	f005 fa9c 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8002494:	4604      	mov	r4, r0
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 8002496:	4638      	mov	r0, r7
 8002498:	f005 fa9e 	bl	80079d8 <BSP_STM32_JPEG_GetHeight>

	_L8_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <_L8_copybufJPEG+0x48>)
 800249e:	b2a4      	uxth	r4, r4
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 80024a0:	4607      	mov	r7, r0
	_L8_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	21ff      	movs	r1, #255	; 0xff
 80024a6:	2000      	movs	r0, #0
 80024a8:	4798      	blx	r3
 80024aa:	f5c4 7c48 	rsb	ip, r4, #800	; 0x320
 80024ae:	4602      	mov	r2, r0
 80024b0:	b2bb      	uxth	r3, r7
 80024b2:	4631      	mov	r1, r6
 80024b4:	4628      	mov	r0, r5
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	4622      	mov	r2, r4
 80024ba:	fa1f f48c 	uxth.w	r4, ip
 80024be:	9400      	str	r4, [sp, #0]
 80024c0:	f7ff ff66 	bl	8002390 <_L8_fillbuf>
}
 80024c4:	b003      	add	sp, #12
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c8:	52003000 	.word	0x52003000
 80024cc:	24000244 	.word	0x24000244

080024d0 <_L8_fillbufblend>:
static void _L8_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80024d0:	b410      	push	{r4}
 80024d2:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	_L8_fillbuf(x, y, width, height, offsetline, color);
 80024d6:	9401      	str	r4, [sp, #4]
}
 80024d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	_L8_fillbuf(x, y, width, height, offsetline, color);
 80024dc:	f7ff bf58 	b.w	8002390 <_L8_fillbuf>

080024e0 <_ARGB8888_updatepixel>:
	if (x < 0) return;
 80024e0:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 80024e4:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80024e8:	d204      	bcs.n	80024f4 <_ARGB8888_updatepixel+0x14>
	if (y >= LCD_HEIGHT) return;
 80024ea:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 80024ee:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 80024f2:	d300      	bcc.n	80024f6 <_ARGB8888_updatepixel+0x16>
}
 80024f4:	4770      	bx	lr
	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 80024f6:	f44f 7c48 	mov.w	ip, #800	; 0x320
 80024fa:	fb12 110c 	smlabb	r1, r2, ip, r1
	*addr = value;
 80024fe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8002502:	4770      	bx	lr

08002504 <_ARGB8888_updatepixelblend>:
	if (y >= LCD_HEIGHT) return;
 8002504:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 8002508:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 800250c:	d204      	bcs.n	8002518 <_ARGB8888_updatepixelblend+0x14>
	if (x < 0) return;
 800250e:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 8002512:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002516:	d300      	bcc.n	800251a <_ARGB8888_updatepixelblend+0x16>
 8002518:	4770      	bx	lr
static void _ARGB8888_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 800251a:	b570      	push	{r4, r5, r6, lr}
	if (a1 == 0) return;
 800251c:	ea5f 6e13 	movs.w	lr, r3, lsr #24
 8002520:	d02e      	beq.n	8002580 <_ARGB8888_updatepixelblend+0x7c>
	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 8002522:	f44f 7448 	mov.w	r4, #800	; 0x320
	if (a1 < 255) {
 8002526:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 800252a:	fb12 1104 	smlabb	r1, r2, r4, r1
	if (a1 < 255) {
 800252e:	d025      	beq.n	800257c <_ARGB8888_updatepixelblend+0x78>
		uint32_t bgvalue = *addr;
 8002530:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
		uint32_t a1n = 255 - a1;
 8002534:	f1ce 06ff 	rsb	r6, lr, #255	; 0xff
		uint32_t b1 = (value << 24) >> 24;
 8002538:	b2da      	uxtb	r2, r3
		uint32_t g1 = (value << 16) >> 24;
 800253a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
		uint32_t b0 = (bgvalue << 24) >> 24;
 800253e:	b2e5      	uxtb	r5, r4
		uint32_t r1 = (value << 8) >> 24;
 8002540:	f3c3 4307 	ubfx	r3, r3, #16, #8
		b1 = ((a1 * b1) + (a1n * b0)) >> 8;
 8002544:	fb06 f505 	mul.w	r5, r6, r5
 8002548:	fb0e 5502 	mla	r5, lr, r2, r5
		uint32_t g0 = (bgvalue << 16) >> 24;
 800254c:	f3c4 2207 	ubfx	r2, r4, #8, #8
		g1 = ((a1 * g1) + (a1n * g0)) >> 8;
 8002550:	fb06 f202 	mul.w	r2, r6, r2
 8002554:	fb0e 220c 	mla	r2, lr, ip, r2
		uint32_t r0 = (bgvalue << 8) >> 24;
 8002558:	f3c4 4c07 	ubfx	ip, r4, #16, #8
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 800255c:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
		r1 = ((a1 * r1) + (a1n * r0)) >> 8;
 8002560:	fb06 fc0c 	mul.w	ip, r6, ip
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 8002564:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002568:	ea44 2415 	orr.w	r4, r4, r5, lsr #8
		r1 = ((a1 * r1) + (a1n * r0)) >> 8;
 800256c:	fb0e cc03 	mla	ip, lr, r3, ip
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 8002570:	ea42 0304 	orr.w	r3, r2, r4
		r1 = ((a1 * r1) + (a1n * r0)) >> 8;
 8002574:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 8002578:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
	*addr = value;
 800257c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	bf00      	nop

08002584 <_ARGB8888_getpixel>:
	if (x < 0) return 0x00000000;
 8002584:	b28b      	uxth	r3, r1
	if (y < 0) return 0x00000000;
 8002586:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800258a:	d203      	bcs.n	8002594 <_ARGB8888_getpixel+0x10>
	if (y >= LCD_HEIGHT) return 0x00000000;
 800258c:	b293      	uxth	r3, r2
	if (y < 0) return 0x00000000;
 800258e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002592:	d301      	bcc.n	8002598 <_ARGB8888_getpixel+0x14>
 8002594:	2000      	movs	r0, #0
}
 8002596:	4770      	bx	lr
	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 8002598:	f44f 7348 	mov.w	r3, #800	; 0x320
 800259c:	fb12 1103 	smlabb	r1, r2, r3, r1
	return *addr;
 80025a0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop

080025a8 <_ARGB1555_updatepixel>:
	if (x < 0) return;
 80025a8:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 80025ac:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80025b0:	d204      	bcs.n	80025bc <_ARGB1555_updatepixel+0x14>
	if (y >= LCD_HEIGHT) return;
 80025b2:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 80025b6:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 80025ba:	d300      	bcc.n	80025be <_ARGB1555_updatepixel+0x16>
}
 80025bc:	4770      	bx	lr
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80025be:	f44f 7c48 	mov.w	ip, #800	; 0x320
 80025c2:	fb12 110c 	smlabb	r1, r2, ip, r1
	*addr = (uint16_t)value;
 80025c6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 80025ca:	4770      	bx	lr

080025cc <_ARGB1555_updatepixelblend>:
	if (x < 0) return;
 80025cc:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 80025d0:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80025d4:	d204      	bcs.n	80025e0 <_ARGB1555_updatepixelblend+0x14>
	if (y >= LCD_HEIGHT) return;
 80025d6:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 80025da:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 80025de:	d300      	bcc.n	80025e2 <_ARGB1555_updatepixelblend+0x16>
}
 80025e0:	4770      	bx	lr
	if (!(value & 0x8000)) return;
 80025e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80025e6:	d0fb      	beq.n	80025e0 <_ARGB1555_updatepixelblend+0x14>
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80025e8:	f44f 7c48 	mov.w	ip, #800	; 0x320
 80025ec:	fb12 120c 	smlabb	r2, r2, ip, r1
	*addr = (uint16_t)value;
 80025f0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <_ARGB1555_getpixel>:
	if (x < 0) return 0x00000000;
 80025f8:	b28b      	uxth	r3, r1
	if (y < 0) return 0x00000000;
 80025fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80025fe:	d203      	bcs.n	8002608 <_ARGB1555_getpixel+0x10>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8002600:	b293      	uxth	r3, r2
	if (y < 0) return 0x00000000;
 8002602:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002606:	d301      	bcc.n	800260c <_ARGB1555_getpixel+0x14>
 8002608:	2000      	movs	r0, #0
}
 800260a:	4770      	bx	lr
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 800260c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002610:	fb12 1103 	smlabb	r1, r2, r3, r1
	return *addr;
 8002614:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop

0800261c <_ARGB4444_updatepixelblend>:
	if (x < 0) return;
 800261c:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 8002620:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002624:	d204      	bcs.n	8002630 <_ARGB4444_updatepixelblend+0x14>
	if (y >= LCD_HEIGHT) return;
 8002626:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 800262a:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 800262e:	d300      	bcc.n	8002632 <_ARGB4444_updatepixelblend+0x16>
 8002630:	4770      	bx	lr
	if (a1 == 0) return;
 8002632:	f413 4f70 	tst.w	r3, #61440	; 0xf000
static void _ARGB4444_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002636:	b570      	push	{r4, r5, r6, lr}
	uint32_t a1 = (value & 0xF000) >> 12;
 8002638:	f3c3 3403 	ubfx	r4, r3, #12, #4
	if (a1 == 0) return;
 800263c:	d02f      	beq.n	800269e <_ARGB4444_updatepixelblend+0x82>
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 800263e:	f44f 7548 	mov.w	r5, #800	; 0x320
	if (a1 < 15) {
 8002642:	2c0f      	cmp	r4, #15
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8002644:	fb12 1205 	smlabb	r2, r2, r5, r1
	if (a1 < 15) {
 8002648:	d027      	beq.n	800269a <_ARGB4444_updatepixelblend+0x7e>
		uint32_t bgvalue = *addr;
 800264a:	f830 c012 	ldrh.w	ip, [r0, r2, lsl #1]
		uint32_t a1n = 15 - a1;
 800264e:	f1c4 060f 	rsb	r6, r4, #15
		uint32_t b1 = (value & 0x000F) >> 0;
 8002652:	f003 010f 	and.w	r1, r3, #15
		uint32_t g1 = (value & 0x00F0) >> 4;
 8002656:	f3c3 1e03 	ubfx	lr, r3, #4, #4
		uint32_t b0 = (bgvalue & 0x000F) >> 0;
 800265a:	f00c 050f 	and.w	r5, ip, #15
		uint32_t r1 = (value & 0x0F00) >> 8;
 800265e:	f3c3 2303 	ubfx	r3, r3, #8, #4
		b1 = ((a1 * b1) + (a1n * b0)) >> 4;
 8002662:	fb06 f505 	mul.w	r5, r6, r5
 8002666:	fb04 5501 	mla	r5, r4, r1, r5
		uint32_t g0 = (bgvalue & 0x00F0) >> 4;
 800266a:	f3cc 1103 	ubfx	r1, ip, #4, #4
		g1 = ((a1 * g1) + (a1n * g0)) >> 4;
 800266e:	fb06 f101 	mul.w	r1, r6, r1
 8002672:	fb04 110e 	mla	r1, r4, lr, r1
		uint32_t r0 = (bgvalue & 0x0F00) >> 8;
 8002676:	f3cc 2e03 	ubfx	lr, ip, #8, #4
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 800267a:	f40c 4c70 	and.w	ip, ip, #61440	; 0xf000
		r1 = ((a1 * r1) + (a1n * r0)) >> 4;
 800267e:	fb06 fe0e 	mul.w	lr, r6, lr
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 8002682:	f021 010f 	bic.w	r1, r1, #15
 8002686:	ea4c 1c15 	orr.w	ip, ip, r5, lsr #4
		r1 = ((a1 * r1) + (a1n * r0)) >> 4;
 800268a:	fb04 ee03 	mla	lr, r4, r3, lr
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 800268e:	ea41 030c 	orr.w	r3, r1, ip
		r1 = ((a1 * r1) + (a1n * r0)) >> 4;
 8002692:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 8002696:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	*addr = (uint16_t)value;
 800269a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800269e:	bd70      	pop	{r4, r5, r6, pc}

080026a0 <_RGB888_updatepixelblend>:
	if (x < 0) return;
 80026a0:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 80026a4:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80026a8:	d22f      	bcs.n	800270a <_RGB888_updatepixelblend+0x6a>
static void _RGB888_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 80026aa:	b530      	push	{r4, r5, lr}
	if (y >= LCD_HEIGHT) return;
 80026ac:	b294      	uxth	r4, r2
	if (y < 0) return;
 80026ae:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80026b2:	d300      	bcc.n	80026b6 <_RGB888_updatepixelblend+0x16>
}
 80026b4:	bd30      	pop	{r4, r5, pc}
	if (a1 == 0) return;
 80026b6:	ea5f 6c13 	movs.w	ip, r3, lsr #24
 80026ba:	d0fb      	beq.n	80026b4 <_RGB888_updatepixelblend+0x14>
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 80026bc:	f44f 7448 	mov.w	r4, #800	; 0x320
	uint32_t r1 = (value & 0x00FF0000) >> 16;
 80026c0:	f3c3 4507 	ubfx	r5, r3, #16, #8
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 80026c4:	fb12 1104 	smlabb	r1, r2, r4, r1
	uint32_t a1n = 255 - a1;
 80026c8:	f1cc 04ff 	rsb	r4, ip, #255	; 0xff
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 80026cc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
	*addr_r = ((a1 * r1) + (a1n * (*addr_r))) >> 8;
 80026d0:	f812 e000 	ldrb.w	lr, [r2, r0]
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 80026d4:	1811      	adds	r1, r2, r0
	*addr_r = ((a1 * r1) + (a1n * (*addr_r))) >> 8;
 80026d6:	fb04 fe0e 	mul.w	lr, r4, lr
 80026da:	fb0c ee05 	mla	lr, ip, r5, lr
 80026de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80026e2:	f802 e000 	strb.w	lr, [r2, r0]
	uint32_t g1 = (value & 0x0000FF00) >> 8;
 80026e6:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*addr_g = ((a1 * g1) + (a1n * (*addr_g))) >> 8;
 80026ea:	784a      	ldrb	r2, [r1, #1]
	uint32_t b1 = (value & 0x000000FF) >> 0;
 80026ec:	b2db      	uxtb	r3, r3
	*addr_g = ((a1 * g1) + (a1n * (*addr_g))) >> 8;
 80026ee:	fb04 f202 	mul.w	r2, r4, r2
 80026f2:	fb0c 2200 	mla	r2, ip, r0, r2
 80026f6:	0a12      	lsrs	r2, r2, #8
 80026f8:	704a      	strb	r2, [r1, #1]
	*addr_b = ((a1 * b1) + (a1n * (*addr_b))) >> 8;
 80026fa:	788a      	ldrb	r2, [r1, #2]
 80026fc:	fb04 f202 	mul.w	r2, r4, r2
 8002700:	fb0c 2303 	mla	r3, ip, r3, r2
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	708b      	strb	r3, [r1, #2]
}
 8002708:	bd30      	pop	{r4, r5, pc}
 800270a:	4770      	bx	lr

0800270c <_RGB888_getpixel>:
	if (x < 0) return 0x00000000;
 800270c:	b28b      	uxth	r3, r1
	if (y < 0) return 0x00000000;
 800270e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002712:	d203      	bcs.n	800271c <_RGB888_getpixel+0x10>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8002714:	b293      	uxth	r3, r2
	if (y < 0) return 0x00000000;
 8002716:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800271a:	d301      	bcc.n	8002720 <_RGB888_getpixel+0x14>
 800271c:	2000      	movs	r0, #0
}
 800271e:	4770      	bx	lr
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8002720:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002724:	fb12 1103 	smlabb	r1, r2, r3, r1
 8002728:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800272c:	1813      	adds	r3, r2, r0
	if (addr & 1) return (*(uint8_t *)(addr + 1)) | (*(uint16_t *)(addr) << 8);
 800272e:	07d9      	lsls	r1, r3, #31
 8002730:	d405      	bmi.n	800273e <_RGB888_getpixel+0x32>
	return (*(uint16_t *)(addr + 1)) | (*(uint8_t *)(addr) << 16);
 8002732:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002736:	5c12      	ldrb	r2, [r2, r0]
 8002738:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 800273c:	4770      	bx	lr
	if (addr & 1) return (*(uint8_t *)(addr + 1)) | (*(uint16_t *)(addr) << 8);
 800273e:	785b      	ldrb	r3, [r3, #1]
 8002740:	5a12      	ldrh	r2, [r2, r0]
 8002742:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
 8002746:	4770      	bx	lr

08002748 <_AL88_updatepixelblend>:
	if (x < 0) return;
 8002748:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 800274c:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002750:	d204      	bcs.n	800275c <_AL88_updatepixelblend+0x14>
	if (y >= LCD_HEIGHT) return;
 8002752:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 8002756:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 800275a:	d300      	bcc.n	800275e <_AL88_updatepixelblend+0x16>
}
 800275c:	4770      	bx	lr
	if (!(value & 0xFF00)) return;
 800275e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8002762:	d0fb      	beq.n	800275c <_AL88_updatepixelblend+0x14>
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8002764:	f44f 7c48 	mov.w	ip, #800	; 0x320
 8002768:	fb12 120c 	smlabb	r2, r2, ip, r1
	*addr = (uint16_t)value;
 800276c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop

08002774 <_L8_updatepixel>:
	if (x < 0) return;
 8002774:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 8002778:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 800277c:	d204      	bcs.n	8002788 <_L8_updatepixel+0x14>
	if (y >= LCD_HEIGHT) return;
 800277e:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 8002782:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 8002786:	d300      	bcc.n	800278a <_L8_updatepixel+0x16>
}
 8002788:	4770      	bx	lr
	uint8_t *addr = (uint8_t *)offset + ((x + y * LCD_WIDTH));
 800278a:	f44f 7c48 	mov.w	ip, #800	; 0x320
 800278e:	fb12 110c 	smlabb	r1, r2, ip, r1
	*addr = (uint8_t)value;
 8002792:	540b      	strb	r3, [r1, r0]
}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop

08002798 <_L8_updatepixelblend>:
	if (y >= LCD_HEIGHT) return;
 8002798:	fa1f fc82 	uxth.w	ip, r2
	if (value == 0) return;
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf18      	it	ne
 80027a0:	f5bc 7ff0 	cmpne.w	ip, #480	; 0x1e0
 80027a4:	d204      	bcs.n	80027b0 <_L8_updatepixelblend+0x18>
	if (x < 0) return;
 80027a6:	fa1f fc81 	uxth.w	ip, r1
	if (value == 0) return;
 80027aa:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80027ae:	d300      	bcc.n	80027b2 <_L8_updatepixelblend+0x1a>
}
 80027b0:	4770      	bx	lr
	uint8_t *addr = (uint8_t *)offset + (x + y * LCD_WIDTH);
 80027b2:	f44f 7c48 	mov.w	ip, #800	; 0x320
 80027b6:	fb12 110c 	smlabb	r1, r2, ip, r1
	*addr = (uint8_t)value;
 80027ba:	540b      	strb	r3, [r1, r0]
}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <_L8_getpixel>:
	if (x < 0) return 0x00000000;
 80027c0:	b28b      	uxth	r3, r1
	if (y < 0) return 0x00000000;
 80027c2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80027c6:	d203      	bcs.n	80027d0 <_L8_getpixel+0x10>
	if (y >= LCD_HEIGHT) return 0x00000000;
 80027c8:	b293      	uxth	r3, r2
	if (y < 0) return 0x00000000;
 80027ca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80027ce:	d301      	bcc.n	80027d4 <_L8_getpixel+0x14>
 80027d0:	2000      	movs	r0, #0
}
 80027d2:	4770      	bx	lr
	uint8_t *addr = (uint8_t *)offset + ((x + y * LCD_WIDTH));
 80027d4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80027d8:	fb12 1103 	smlabb	r1, r2, r3, r1
	return *addr;
 80027dc:	5c08      	ldrb	r0, [r1, r0]
 80027de:	4770      	bx	lr

080027e0 <_RGB888_alpha>:
 80027e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80027e4:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop

080027ec <_ARGB8888_alpha>:
 80027ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80027f0:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <_RGB888_color>:
 80027f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80027fc:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop

08002804 <_AL88_color>:
static uint32_t _AL88_color(uint32_t color, uint8_t alpha) {
 8002804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t av_r = (c1_r + c2_r) >> 1;
 8002808:	f3c0 4a07 	ubfx	sl, r0, #16, #8
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 800280c:	f3c0 2807 	ubfx	r8, r0, #8, #8
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 8002810:	b2c6      	uxtb	r6, r0
 8002812:	2000      	movs	r0, #0
static uint32_t _AL88_color(uint32_t color, uint8_t alpha) {
 8002814:	b083      	sub	sp, #12
	int16_t	dr = (int16_t)c1_r - (int16_t)c2_r;
 8002816:	46d1      	mov	r9, sl
 8002818:	4c1d      	ldr	r4, [pc, #116]	; (8002890 <_AL88_color+0x8c>)
	uint32_t min_dist = 0xffffffff;
 800281a:	f04f 35ff 	mov.w	r5, #4294967295
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 800281e:	f240 27ff 	movw	r7, #767	; 0x2ff
	uint32_t match_c = 0;
 8002822:	4683      	mov	fp, r0
static uint32_t _AL88_color(uint32_t color, uint8_t alpha) {
 8002824:	9101      	str	r1, [sp, #4]
		dist = _color_dist(color, C_LUT_COLOR[m]);
 8002826:	f854 1f04 	ldr.w	r1, [r4, #4]!
	int16_t av_r = (c1_r + c2_r) >> 1;
 800282a:	f3c1 4c07 	ubfx	ip, r1, #16, #8
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 800282e:	f3c1 2307 	ubfx	r3, r1, #8, #8
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 8002832:	b2c9      	uxtb	r1, r1
	int16_t av_r = (c1_r + c2_r) >> 1;
 8002834:	eb0c 020a 	add.w	r2, ip, sl
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 8002838:	eba8 0303 	sub.w	r3, r8, r3
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 800283c:	eba9 0c0c 	sub.w	ip, r9, ip
 8002840:	1a71      	subs	r1, r6, r1
	int16_t av_r = (c1_r + c2_r) >> 1;
 8002842:	1052      	asrs	r2, r2, #1
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 8002844:	fb03 f303 	mul.w	r3, r3, r3
 8002848:	f502 7e00 	add.w	lr, r2, #512	; 0x200
 800284c:	1aba      	subs	r2, r7, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fb0c fe0e 	mul.w	lr, ip, lr
 8002854:	fb01 f202 	mul.w	r2, r1, r2
 8002858:	fb0c fe0e 	mul.w	lr, ip, lr
 800285c:	fb01 f202 	mul.w	r2, r1, r2
 8002860:	eb03 232e 	add.w	r3, r3, lr, asr #8
 8002864:	eb03 2322 	add.w	r3, r3, r2, asr #8
		if (dist < min_dist) {
 8002868:	42ab      	cmp	r3, r5
 800286a:	d201      	bcs.n	8002870 <_AL88_color+0x6c>
			match_c = m;
 800286c:	4683      	mov	fp, r0
		if (dist < min_dist) {
 800286e:	461d      	mov	r5, r3
	for (uint16_t m=0; m<256; m++) {
 8002870:	3001      	adds	r0, #1
 8002872:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002876:	d1d6      	bne.n	8002826 <_AL88_color+0x22>
	return (match_c) | ((uint32_t)alpha << 8) | (match_c << 16) | ((uint32_t)alpha << 24);
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	0618      	lsls	r0, r3, #24
 800287c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002880:	ea40 000b 	orr.w	r0, r0, fp
}
 8002884:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 8002888:	b003      	add	sp, #12
 800288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288e:	bf00      	nop
 8002890:	08015118 	.word	0x08015118

08002894 <_AL88_dma2dwait>:
 8002894:	4a02      	ldr	r2, [pc, #8]	; (80028a0 <_AL88_dma2dwait+0xc>)
 8002896:	6853      	ldr	r3, [r2, #4]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d0fc      	beq.n	8002896 <_AL88_dma2dwait+0x2>
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	2400026c 	.word	0x2400026c

080028a4 <_L8_dma2dwait>:
 80028a4:	4a02      	ldr	r2, [pc, #8]	; (80028b0 <_L8_dma2dwait+0xc>)
 80028a6:	6853      	ldr	r3, [r2, #4]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d0fc      	beq.n	80028a6 <_L8_dma2dwait+0x2>
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	2400026c 	.word	0x2400026c

080028b4 <_ARGB1555_dma2dwait>:
 80028b4:	4a02      	ldr	r2, [pc, #8]	; (80028c0 <_ARGB1555_dma2dwait+0xc>)
 80028b6:	6853      	ldr	r3, [r2, #4]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d0fc      	beq.n	80028b6 <_ARGB1555_dma2dwait+0x2>
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2400026c 	.word	0x2400026c

080028c4 <_RGB888_dma2dwait>:
 80028c4:	4a02      	ldr	r2, [pc, #8]	; (80028d0 <_RGB888_dma2dwait+0xc>)
 80028c6:	6853      	ldr	r3, [r2, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d0fc      	beq.n	80028c6 <_RGB888_dma2dwait+0x2>
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2400026c 	.word	0x2400026c

080028d4 <_ARGB4444_dma2dwait>:
 80028d4:	4a02      	ldr	r2, [pc, #8]	; (80028e0 <_ARGB4444_dma2dwait+0xc>)
 80028d6:	6853      	ldr	r3, [r2, #4]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d0fc      	beq.n	80028d6 <_ARGB4444_dma2dwait+0x2>
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	2400026c 	.word	0x2400026c

080028e4 <_AL88_getpixel>:
 80028e4:	b28b      	uxth	r3, r1
 80028e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80028ea:	d203      	bcs.n	80028f4 <_AL88_getpixel+0x10>
 80028ec:	b293      	uxth	r3, r2
 80028ee:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80028f2:	d301      	bcc.n	80028f8 <_AL88_getpixel+0x14>
 80028f4:	2000      	movs	r0, #0
 80028f6:	4770      	bx	lr
 80028f8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80028fc:	fb12 1103 	smlabb	r1, r2, r3, r1
 8002900:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <_ARGB4444_getpixel>:
 8002908:	b28b      	uxth	r3, r1
 800290a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800290e:	d203      	bcs.n	8002918 <_ARGB4444_getpixel+0x10>
 8002910:	b293      	uxth	r3, r2
 8002912:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002916:	d301      	bcc.n	800291c <_ARGB4444_getpixel+0x14>
 8002918:	2000      	movs	r0, #0
 800291a:	4770      	bx	lr
 800291c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002920:	fb12 1103 	smlabb	r1, r2, r3, r1
 8002924:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <_AL88_updatepixel>:
 800292c:	fa1f fc81 	uxth.w	ip, r1
 8002930:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002934:	d204      	bcs.n	8002940 <_AL88_updatepixel+0x14>
 8002936:	fa1f fc82 	uxth.w	ip, r2
 800293a:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 800293e:	d300      	bcc.n	8002942 <_AL88_updatepixel+0x16>
 8002940:	4770      	bx	lr
 8002942:	f44f 7c48 	mov.w	ip, #800	; 0x320
 8002946:	fb12 110c 	smlabb	r1, r2, ip, r1
 800294a:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800294e:	4770      	bx	lr

08002950 <_ARGB4444_updatepixel>:
 8002950:	fa1f fc81 	uxth.w	ip, r1
 8002954:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002958:	d204      	bcs.n	8002964 <_ARGB4444_updatepixel+0x14>
 800295a:	fa1f fc82 	uxth.w	ip, r2
 800295e:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 8002962:	d300      	bcc.n	8002966 <_ARGB4444_updatepixel+0x16>
 8002964:	4770      	bx	lr
 8002966:	f44f 7c48 	mov.w	ip, #800	; 0x320
 800296a:	fb12 110c 	smlabb	r1, r2, ip, r1
 800296e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8002972:	4770      	bx	lr

08002974 <_AL88_copybufblend>:
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002974:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002976:	4d10      	ldr	r5, [pc, #64]	; (80029b8 <_AL88_copybufblend+0x44>)
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002978:	460e      	mov	r6, r1
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 800297a:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 800297e:	f8bd 7010 	ldrh.w	r7, [sp, #16]
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8002982:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002986:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 800298a:	320a      	adds	r2, #10
 800298c:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002990:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8002994:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002998:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 800299c:	686c      	ldr	r4, [r5, #4]
 800299e:	2c01      	cmp	r4, #1
 80029a0:	d0fc      	beq.n	800299c <_AL88_copybufblend+0x28>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 80029a2:	9005      	str	r0, [sp, #20]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80029a4:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 80029a6:	9604      	str	r6, [sp, #16]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80029a8:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 80029aa:	4804      	ldr	r0, [pc, #16]	; (80029bc <_AL88_copybufblend+0x48>)
 80029ac:	e9cd 7106 	strd	r7, r1, [sp, #24]
 80029b0:	2102      	movs	r1, #2
}
 80029b2:	bcf0      	pop	{r4, r5, r6, r7}
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 80029b4:	f004 ba76 	b.w	8006ea4 <BSP_STM32_DMA2D_CopyBuf>
 80029b8:	2400026c 	.word	0x2400026c
 80029bc:	52001000 	.word	0x52001000

080029c0 <_AL88_fillbufblend>:
static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80029c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80029c2:	4c0f      	ldr	r4, [pc, #60]	; (8002a00 <_AL88_fillbufblend+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80029c4:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80029c8:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80029ca:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80029ce:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80029d2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80029d6:	300a      	adds	r0, #10
 80029d8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80029dc:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80029de:	eb05 0541 	add.w	r5, r5, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80029e2:	6861      	ldr	r1, [r4, #4]
 80029e4:	2901      	cmp	r1, #1
 80029e6:	d0fc      	beq.n	80029e2 <_AL88_fillbufblend+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 80029e8:	2102      	movs	r1, #2
 80029ea:	9600      	str	r6, [sp, #0]
 80029ec:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80029f0:	2001      	movs	r0, #1
 80029f2:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <_AL88_fillbufblend+0x44>)
 80029f6:	f004 f9a9 	bl	8006d4c <BSP_STM32_DMA2D_FillBuff>
}
 80029fa:	b004      	add	sp, #16
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
 80029fe:	bf00      	nop
 8002a00:	2400026c 	.word	0x2400026c
 8002a04:	52001000 	.word	0x52001000

08002a08 <_AL88_copybufJPEG>:
static void _AL88_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8002a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	b086      	sub	sp, #24
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002a10:	4817      	ldr	r0, [pc, #92]	; (8002a70 <_AL88_copybufJPEG+0x68>)
static void _AL88_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8002a12:	4688      	mov	r8, r1
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002a14:	f004 ffda 	bl	80079cc <BSP_STM32_JPEG_GetWidth>
 8002a18:	4606      	mov	r6, r0
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 8002a1a:	4815      	ldr	r0, [pc, #84]	; (8002a70 <_AL88_copybufJPEG+0x68>)
 8002a1c:	f004 ffdc 	bl	80079d8 <BSP_STM32_JPEG_GetHeight>
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <_AL88_copybufJPEG+0x6c>)
 8002a22:	b283      	uxth	r3, r0
 8002a24:	21ff      	movs	r1, #255	; 0xff
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	2000      	movs	r0, #0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002a2a:	4d13      	ldr	r5, [pc, #76]	; (8002a78 <_AL88_copybufJPEG+0x70>)
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 8002a2c:	b2b6      	uxth	r6, r6
 8002a2e:	9305      	str	r3, [sp, #20]
 8002a30:	4790      	blx	r2
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002a32:	f44f 7248 	mov.w	r2, #800	; 0x320
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 8002a36:	f5c6 7748 	rsb	r7, r6, #800	; 0x320
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002a3a:	9b05      	ldr	r3, [sp, #20]
 8002a3c:	fb02 4108 	mla	r1, r2, r8, r4
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002a40:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 8002a44:	b2bf      	uxth	r7, r7
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002a46:	320a      	adds	r2, #10
 8002a48:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8002a4c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002a50:	686c      	ldr	r4, [r5, #4]
 8002a52:	2c01      	cmp	r4, #1
 8002a54:	d0fc      	beq.n	8002a50 <_AL88_copybufJPEG+0x48>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 8002a56:	9002      	str	r0, [sp, #8]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002a58:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 8002a5a:	9101      	str	r1, [sp, #4]
 8002a5c:	4632      	mov	r2, r6
 8002a5e:	2102      	movs	r1, #2
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002a60:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 8002a62:	9700      	str	r7, [sp, #0]
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <_AL88_copybufJPEG+0x74>)
 8002a66:	f004 f971 	bl	8006d4c <BSP_STM32_DMA2D_FillBuff>
}
 8002a6a:	b006      	add	sp, #24
 8002a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a70:	52003000 	.word	0x52003000
 8002a74:	24000244 	.word	0x24000244
 8002a78:	2400026c 	.word	0x2400026c
 8002a7c:	52001000 	.word	0x52001000

08002a80 <BSP_LCD_Init>:
/******************************************************************************
 * Public functions
 ******************************************************************************/


void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 8002a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// CLUT parameter is ignored in ARGB and RGB modes

	// Setting up config variables
	BSP_hlcd.frametime = 0;
 8002a84:	4cad      	ldr	r4, [pc, #692]	; (8002d3c <BSP_LCD_Init+0x2bc>)
void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 8002a86:	461f      	mov	r7, r3
	BSP_hlcd.frametime = 0;
 8002a88:	2300      	movs	r3, #0
void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 8002a8a:	b08f      	sub	sp, #60	; 0x3c
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_READY;
	BSP_hlcd.priv.l_timestamp = 0;
	BSP_hlcd.config.colormode = color_mode;
 8002a8c:	7720      	strb	r0, [r4, #28]
	BSP_hlcd.config.buffermode = buffer_mode;
	BSP_hlcd.config.bgcolor = bgcolor;
	BSP_hlcd.config.framesize = LCD_WIDTH * LCD_HEIGHT;

	// Configuring color mode
	switch (BSP_hlcd.config.colormode) {
 8002a8e:	3801      	subs	r0, #1
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_READY;
 8002a90:	6063      	str	r3, [r4, #4]
void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 8002a92:	460d      	mov	r5, r1
	BSP_hlcd.frametime = 0;
 8002a94:	63e3      	str	r3, [r4, #60]	; 0x3c
void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 8002a96:	4616      	mov	r6, r2
	BSP_hlcd.priv.l_timestamp = 0;
 8002a98:	6023      	str	r3, [r4, #0]
	BSP_hlcd.config.framesize = LCD_WIDTH * LCD_HEIGHT;
 8002a9a:	4ba9      	ldr	r3, [pc, #676]	; (8002d40 <BSP_LCD_Init+0x2c0>)
	BSP_hlcd.config.buffermode = buffer_mode;
 8002a9c:	7761      	strb	r1, [r4, #29]
	BSP_hlcd.config.bgcolor = bgcolor;
 8002a9e:	6222      	str	r2, [r4, #32]
	BSP_hlcd.config.framesize = LCD_WIDTH * LCD_HEIGHT;
 8002aa0:	6163      	str	r3, [r4, #20]
	switch (BSP_hlcd.config.colormode) {
 8002aa2:	2805      	cmp	r0, #5
 8002aa4:	f200 827d 	bhi.w	8002fa2 <BSP_LCD_Init+0x522>
 8002aa8:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002aac:	01aa00b5 	.word	0x01aa00b5
 8002ab0:	021201de 	.word	0x021201de
 8002ab4:	0006023b 	.word	0x0006023b
	BSP_hlcd.config.bytesperpixel = 4;
 8002ab8:	2304      	movs	r3, #4
	BSP_hlcd.config.framesize *=4;
 8002aba:	4aa2      	ldr	r2, [pc, #648]	; (8002d44 <BSP_LCD_Init+0x2c4>)
}
 8002abc:	f8df b320 	ldr.w	fp, [pc, #800]	; 8002de0 <BSP_LCD_Init+0x360>
	BSP_hlcd.config.bytesperpixel = 4;
 8002ac0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=4;
 8002ac4:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _ARGB8888_color;
 8002ac6:	4ba0      	ldr	r3, [pc, #640]	; (8002d48 <BSP_LCD_Init+0x2c8>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002ac8:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _ARGB8888_color;
 8002acc:	499f      	ldr	r1, [pc, #636]	; (8002d4c <BSP_LCD_Init+0x2cc>)
}
 8002ace:	f8df a314 	ldr.w	sl, [pc, #788]	; 8002de4 <BSP_LCD_Init+0x364>
	BSP_LCD_Color = _ARGB8888_color;
 8002ad2:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _ARGB8888_alpha;
 8002ad4:	4b9e      	ldr	r3, [pc, #632]	; (8002d50 <BSP_LCD_Init+0x2d0>)
 8002ad6:	499f      	ldr	r1, [pc, #636]	; (8002d54 <BSP_LCD_Init+0x2d4>)
}
 8002ad8:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8002de8 <BSP_LCD_Init+0x368>
	BSP_LCD_Alpha = _ARGB8888_alpha;
 8002adc:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB8888_dma2dwait;
 8002ade:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <BSP_LCD_Init+0x2d8>)
 8002ae0:	499e      	ldr	r1, [pc, #632]	; (8002d5c <BSP_LCD_Init+0x2dc>)
}
 8002ae2:	f8df 9308 	ldr.w	r9, [pc, #776]	; 8002dec <BSP_LCD_Init+0x36c>
	BSP_LCD_DMA2D_Wait = _ARGB8888_dma2dwait;
 8002ae6:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB8888_updatepixel;
 8002ae8:	4b9d      	ldr	r3, [pc, #628]	; (8002d60 <BSP_LCD_Init+0x2e0>)
 8002aea:	499e      	ldr	r1, [pc, #632]	; (8002d64 <BSP_LCD_Init+0x2e4>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002aec:	61a2      	str	r2, [r4, #24]
	BSP_LCD_UpdatePixel = _ARGB8888_updatepixel;
 8002aee:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB8888_updatepixelblend;
 8002af0:	4b9d      	ldr	r3, [pc, #628]	; (8002d68 <BSP_LCD_Init+0x2e8>)
 8002af2:	499e      	ldr	r1, [pc, #632]	; (8002d6c <BSP_LCD_Init+0x2ec>)
 8002af4:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _ARGB8888_getpixel;
 8002af6:	4b9e      	ldr	r3, [pc, #632]	; (8002d70 <BSP_LCD_Init+0x2f0>)
 8002af8:	499e      	ldr	r1, [pc, #632]	; (8002d74 <BSP_LCD_Init+0x2f4>)
 8002afa:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _ARGB8888_fillbuf;
 8002afc:	4b9e      	ldr	r3, [pc, #632]	; (8002d78 <BSP_LCD_Init+0x2f8>)
 8002afe:	499f      	ldr	r1, [pc, #636]	; (8002d7c <BSP_LCD_Init+0x2fc>)
 8002b00:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB8888_fillbufblend;
 8002b02:	4b9f      	ldr	r3, [pc, #636]	; (8002d80 <BSP_LCD_Init+0x300>)
 8002b04:	499f      	ldr	r1, [pc, #636]	; (8002d84 <BSP_LCD_Init+0x304>)
 8002b06:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB8888_copybuf;
 8002b08:	4b9f      	ldr	r3, [pc, #636]	; (8002d88 <BSP_LCD_Init+0x308>)
 8002b0a:	49a0      	ldr	r1, [pc, #640]	; (8002d8c <BSP_LCD_Init+0x30c>)
 8002b0c:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB8888_copybufblend;
 8002b0e:	4ba0      	ldr	r3, [pc, #640]	; (8002d90 <BSP_LCD_Init+0x310>)
 8002b10:	49a0      	ldr	r1, [pc, #640]	; (8002d94 <BSP_LCD_Init+0x314>)
 8002b12:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB8888_copybufJPEG;
 8002b14:	4ba0      	ldr	r3, [pc, #640]	; (8002d98 <BSP_LCD_Init+0x318>)
 8002b16:	49a1      	ldr	r1, [pc, #644]	; (8002d9c <BSP_LCD_Init+0x31c>)
 8002b18:	6019      	str	r1, [r3, #0]
}
 8002b1a:	4ba1      	ldr	r3, [pc, #644]	; (8002da0 <BSP_LCD_Init+0x320>)
 8002b1c:	930d      	str	r3, [sp, #52]	; 0x34
		_L8_config();
		break;
	}

	// Clearing memory for frame buffer
	memset((void *)(LCD_FRAMEBUFFER_END_ADDR - BSP_hlcd.config.framebuffersize - LCD_JPEGBUF_SIZE),0x00, (BSP_hlcd.config.framebuffersize + LCD_JPEGBUF_SIZE));
 8002b1e:	48a1      	ldr	r0, [pc, #644]	; (8002da4 <BSP_LCD_Init+0x324>)
 8002b20:	2100      	movs	r1, #0
 8002b22:	1a80      	subs	r0, r0, r2
 8002b24:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8002b28:	f00f fbb7 	bl	801229a <memset>

	// Configuring frame buffer parameters
	switch (BSP_hlcd.config.buffermode) {
 8002b2c:	2d02      	cmp	r5, #2
 8002b2e:	f000 8221 	beq.w	8002f74 <BSP_LCD_Init+0x4f4>
 8002b32:	2d03      	cmp	r5, #3
 8002b34:	d117      	bne.n	8002b66 <BSP_LCD_Init+0xe6>
	BSP_hlcd.layer.Frame_IDLE = 2;
 8002b36:	2102      	movs	r1, #2
	BSP_hlcd.layer.Frame_READY = 255;
 8002b38:	22ff      	movs	r2, #255	; 0xff
	BSP_hlcd.layer.Frame_ACTIVE = 0;
 8002b3a:	2300      	movs	r3, #0
	BSP_hlcd.JPEGbuf = LCD_FRAMEBUFFER_END_ADDR - (3 * BSP_hlcd.config.framesize) - LCD_JPEGBUF_SIZE;
 8002b3c:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
	BSP_hlcd.layer.Frame_IDLE = 2;
 8002b40:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	BSP_hlcd.layer.Frame_EDIT = 1;
 8002b44:	2101      	movs	r1, #1
 8002b46:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
	BSP_hlcd.layer.Frame_READY = 255;
 8002b4a:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	BSP_hlcd.layer.Frame_ACTIVE = 0;
 8002b4e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	BSP_hlcd.layer.Frame_NOUSE = 255;
 8002b52:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	BSP_hlcd.layer.Frame_PREV = 0;
 8002b56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	BSP_hlcd.layer.Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 1 * BSP_hlcd.config.framesize;
 8002b5a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	BSP_hlcd.layer.Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 2 * BSP_hlcd.config.framesize;
 8002b5e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
	BSP_hlcd.layer.Frames[2] = LCD_FRAMEBUFFER_END_ADDR - 3 * BSP_hlcd.config.framesize;
 8002b62:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
		_config_doublebuf();
		break;
	}

	// Configuring LTDC controller
	BSP_STM32_LTDC_Init(LTDC, LCD_H_SYNC, LCD_V_SYNC, LCD_ACC_H_BACK_PORCH_WIDTH, LCD_ACC_V_BACK_PORCH_HEIGHT,
 8002b66:	f240 2343 	movw	r3, #579	; 0x243
 8002b6a:	f240 325d 	movw	r2, #861	; 0x35d
 8002b6e:	f240 314d 	movw	r1, #845	; 0x34d
 8002b72:	488d      	ldr	r0, [pc, #564]	; (8002da8 <BSP_LCD_Init+0x328>)
 8002b74:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8002b78:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8002b7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002b80:	2216      	movs	r2, #22
 8002b82:	232d      	movs	r3, #45	; 0x2d
 8002b84:	e9cd 2100 	strd	r2, r1, [sp]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	2119      	movs	r1, #25
 8002b8c:	f004 ff36 	bl	80079fc <BSP_STM32_LTDC_Init>
			LCD_ACC_ACTIVE_WIDTH, LCD_ACC_ACTIVE_HEIGHT, LCD_TOTAL_WIDTH, LCD_TOTAL_HEIGHT, bgcolor);

	// Configuring JPEG hardware codec
	BSP_STM32_JPEG_Init(JPEG);
 8002b90:	4886      	ldr	r0, [pc, #536]	; (8002dac <BSP_LCD_Init+0x32c>)
 8002b92:	f004 fe2b 	bl	80077ec <BSP_STM32_JPEG_Init>

	// Disabling both layers
	BSP_STM32_LTDC_DisableLayer(LTDC, 0);
 8002b96:	2100      	movs	r1, #0
 8002b98:	4883      	ldr	r0, [pc, #524]	; (8002da8 <BSP_LCD_Init+0x328>)
 8002b9a:	f004 ff7f 	bl	8007a9c <BSP_STM32_LTDC_DisableLayer>

	// Configuring LTDC Layers
	switch (BSP_hlcd.config.colormode) {
 8002b9e:	7f23      	ldrb	r3, [r4, #28]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d81d      	bhi.n	8002be2 <BSP_LCD_Init+0x162>
 8002ba6:	e8df f003 	tbb	[pc, r3]
 8002baa:	92b2      	.short	0x92b2
 8002bac:	03286971 	.word	0x03286971
			BSP_hlcd.layer.Frames[0],
 8002bb0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002bb8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002bbc:	2407      	movs	r4, #7
 8002bbe:	9306      	str	r3, [sp, #24]
 8002bc0:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8002bc4:	e9cd 3107 	strd	r3, r1, [sp, #28]
	BSP_STM32_LTDC_ConfigLayer(
 8002bc8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002bcc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8002bd0:	e9cd 3000 	strd	r3, r0, [sp]
 8002bd4:	22ff      	movs	r2, #255	; 0xff
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4873      	ldr	r0, [pc, #460]	; (8002da8 <BSP_LCD_Init+0x328>)
 8002bda:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002bde:	f004 ff8b 	bl	8007af8 <BSP_STM32_LTDC_ConfigLayer>
		_L8_config_layer(clut);
		break;
	}

	// Enabling required layers
	BSP_STM32_LTDC_EnableLayer(LTDC, 0);
 8002be2:	2100      	movs	r1, #0
 8002be4:	4870      	ldr	r0, [pc, #448]	; (8002da8 <BSP_LCD_Init+0x328>)
 8002be6:	f004 ff71 	bl	8007acc <BSP_STM32_LTDC_EnableLayer>

	// Programming LTDC line interrupt
	BSP_STM32_LTDC_SetLineInt(LTDC, (uint32_t)LCD_HEIGHT);
 8002bea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002bee:	486e      	ldr	r0, [pc, #440]	; (8002da8 <BSP_LCD_Init+0x328>)
}
 8002bf0:	b00f      	add	sp, #60	; 0x3c
 8002bf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BSP_STM32_LTDC_SetLineInt(LTDC, (uint32_t)LCD_HEIGHT);
 8002bf6:	f005 b843 	b.w	8007c80 <BSP_STM32_LTDC_SetLineInt>
	BSP_STM32_LTDC_ConfigLayer(
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c00:	f44f 7148 	mov.w	r1, #800	; 0x320
			BSP_hlcd.layer.Frames[0],
 8002c04:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002c06:	2004      	movs	r0, #4
	BSP_STM32_LTDC_ConfigLayer(
 8002c08:	2407      	movs	r4, #7
 8002c0a:	9006      	str	r0, [sp, #24]
 8002c0c:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8002c10:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8002c14:	e7d8      	b.n	8002bc8 <BSP_LCD_Init+0x148>
	BSP_hlcd.config.bytesperpixel = 1;
 8002c16:	2301      	movs	r3, #1
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002c18:	4a49      	ldr	r2, [pc, #292]	; (8002d40 <BSP_LCD_Init+0x2c0>)
	BSP_hlcd.config.bytesperpixel = 1;
 8002c1a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002c1e:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _L8_color;
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <BSP_LCD_Init+0x2c8>)
 8002c24:	4962      	ldr	r1, [pc, #392]	; (8002db0 <BSP_LCD_Init+0x330>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002c26:	61a2      	str	r2, [r4, #24]
	BSP_LCD_Color = _L8_color;
 8002c28:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _L8_alpha;
 8002c2a:	4b49      	ldr	r3, [pc, #292]	; (8002d50 <BSP_LCD_Init+0x2d0>)
 8002c2c:	4961      	ldr	r1, [pc, #388]	; (8002db4 <BSP_LCD_Init+0x334>)
 8002c2e:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _L8_dma2dwait;
 8002c30:	4b49      	ldr	r3, [pc, #292]	; (8002d58 <BSP_LCD_Init+0x2d8>)
 8002c32:	4961      	ldr	r1, [pc, #388]	; (8002db8 <BSP_LCD_Init+0x338>)
 8002c34:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _L8_updatepixel;
 8002c36:	4b4a      	ldr	r3, [pc, #296]	; (8002d60 <BSP_LCD_Init+0x2e0>)
 8002c38:	4960      	ldr	r1, [pc, #384]	; (8002dbc <BSP_LCD_Init+0x33c>)
 8002c3a:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _L8_updatepixelblend;
 8002c3c:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <BSP_LCD_Init+0x2e8>)
 8002c3e:	4960      	ldr	r1, [pc, #384]	; (8002dc0 <BSP_LCD_Init+0x340>)
 8002c40:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _L8_getpixel;
 8002c42:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <BSP_LCD_Init+0x2f0>)
 8002c44:	495f      	ldr	r1, [pc, #380]	; (8002dc4 <BSP_LCD_Init+0x344>)
 8002c46:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _L8_fillbuf;
 8002c48:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <BSP_LCD_Init+0x2f8>)
 8002c4a:	495f      	ldr	r1, [pc, #380]	; (8002dc8 <BSP_LCD_Init+0x348>)
 8002c4c:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _L8_fillbufblend;
 8002c4e:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <BSP_LCD_Init+0x300>)
 8002c50:	495e      	ldr	r1, [pc, #376]	; (8002dcc <BSP_LCD_Init+0x34c>)
 8002c52:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _L8_copybuf;
 8002c54:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <BSP_LCD_Init+0x308>)
 8002c56:	495e      	ldr	r1, [pc, #376]	; (8002dd0 <BSP_LCD_Init+0x350>)
 8002c58:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _L8_copybufblend;
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <BSP_LCD_Init+0x310>)
 8002c5c:	495d      	ldr	r1, [pc, #372]	; (8002dd4 <BSP_LCD_Init+0x354>)
 8002c5e:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _L8_copybufJPEG;
 8002c60:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <BSP_LCD_Init+0x318>)
 8002c62:	495d      	ldr	r1, [pc, #372]	; (8002dd8 <BSP_LCD_Init+0x358>)
 8002c64:	6019      	str	r1, [r3, #0]
}
 8002c66:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <BSP_LCD_Init+0x35c>)
 8002c68:	f8df b184 	ldr.w	fp, [pc, #388]	; 8002df0 <BSP_LCD_Init+0x370>
 8002c6c:	f8df a184 	ldr.w	sl, [pc, #388]	; 8002df4 <BSP_LCD_Init+0x374>
 8002c70:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8002df8 <BSP_LCD_Init+0x378>
 8002c74:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8002dfc <BSP_LCD_Init+0x37c>
 8002c78:	930d      	str	r3, [sp, #52]	; 0x34
 8002c7a:	e750      	b.n	8002b1e <BSP_LCD_Init+0x9e>
	BSP_STM32_LTDC_ConfigLayer(
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c82:	f44f 7148 	mov.w	r1, #800	; 0x320
			BSP_hlcd.layer.Frames[0],
 8002c86:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002c88:	2003      	movs	r0, #3
 8002c8a:	e7bd      	b.n	8002c08 <BSP_LCD_Init+0x188>
	BSP_STM32_LTDC_ConfigLayer(
 8002c8c:	2500      	movs	r5, #0
 8002c8e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c92:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002c96:	2101      	movs	r1, #1
			BSP_hlcd.layer.Frames[0],
 8002c98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002c9a:	9106      	str	r1, [sp, #24]
 8002c9c:	2105      	movs	r1, #5
 8002c9e:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8002ca2:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8002ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002caa:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8002cae:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	483c      	ldr	r0, [pc, #240]	; (8002da8 <BSP_LCD_Init+0x328>)
 8002cb8:	e9cd 5200 	strd	r5, r2, [sp]
 8002cbc:	22ff      	movs	r2, #255	; 0xff
 8002cbe:	f004 ff1b 	bl	8007af8 <BSP_STM32_LTDC_ConfigLayer>
	BSP_STM32_LTDC_SetTransparentColor(LTDC, 0, 0x00000000);
 8002cc2:	462a      	mov	r2, r5
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	4838      	ldr	r0, [pc, #224]	; (8002da8 <BSP_LCD_Init+0x328>)
 8002cc8:	f004 ffc6 	bl	8007c58 <BSP_STM32_LTDC_SetTransparentColor>
}
 8002ccc:	e789      	b.n	8002be2 <BSP_LCD_Init+0x162>
			BSP_hlcd.layer.Frames[0],
 8002cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002cd0:	2500      	movs	r5, #0
 8002cd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002cd6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002cda:	9303      	str	r3, [sp, #12]
 8002cdc:	2307      	movs	r3, #7
 8002cde:	9204      	str	r2, [sp, #16]
 8002ce0:	9302      	str	r3, [sp, #8]
 8002ce2:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8002ce6:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 8002cea:	e9cd 5107 	strd	r5, r1, [sp, #28]
 8002cee:	462b      	mov	r3, r5
 8002cf0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002cf4:	22ff      	movs	r2, #255	; 0xff
 8002cf6:	e9cd 5100 	strd	r5, r1, [sp]
	BSP_STM32_LTDC_ConfigLayer(
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	482a      	ldr	r0, [pc, #168]	; (8002da8 <BSP_LCD_Init+0x328>)
 8002cfe:	f004 fefb 	bl	8007af8 <BSP_STM32_LTDC_ConfigLayer>
	BSP_STM32_LTDC_ConfigCLUT(LTDC, 0, clut);
 8002d02:	463a      	mov	r2, r7
 8002d04:	4629      	mov	r1, r5
 8002d06:	4828      	ldr	r0, [pc, #160]	; (8002da8 <BSP_LCD_Init+0x328>)
 8002d08:	f004 ff78 	bl	8007bfc <BSP_STM32_LTDC_ConfigCLUT>
}
 8002d0c:	e769      	b.n	8002be2 <BSP_LCD_Init+0x162>
			BSP_hlcd.layer.Frames[0],
 8002d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002d10:	2500      	movs	r5, #0
 8002d12:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002d16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d1a:	9303      	str	r3, [sp, #12]
 8002d1c:	2305      	movs	r3, #5
 8002d1e:	9204      	str	r2, [sp, #16]
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8002d26:	e9cd 5107 	strd	r5, r1, [sp, #28]
 8002d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d2e:	462b      	mov	r3, r5
 8002d30:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 8002d34:	e9cd 5100 	strd	r5, r1, [sp]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	e7de      	b.n	8002cfa <BSP_LCD_Init+0x27a>
 8002d3c:	2400026c 	.word	0x2400026c
 8002d40:	0005dc00 	.word	0x0005dc00
 8002d44:	00177000 	.word	0x00177000
 8002d48:	24000244 	.word	0x24000244
 8002d4c:	080017fd 	.word	0x080017fd
 8002d50:	24000240 	.word	0x24000240
 8002d54:	080027ed 	.word	0x080027ed
 8002d58:	24000254 	.word	0x24000254
 8002d5c:	08001809 	.word	0x08001809
 8002d60:	24000264 	.word	0x24000264
 8002d64:	080024e1 	.word	0x080024e1
 8002d68:	24000268 	.word	0x24000268
 8002d6c:	08002505 	.word	0x08002505
 8002d70:	24000260 	.word	0x24000260
 8002d74:	08002585 	.word	0x08002585
 8002d78:	24000258 	.word	0x24000258
 8002d7c:	08002229 	.word	0x08002229
 8002d80:	2400025c 	.word	0x2400025c
 8002d84:	080020f1 	.word	0x080020f1
 8002d88:	24000248 	.word	0x24000248
 8002d8c:	08001e3d 	.word	0x08001e3d
 8002d90:	2400024c 	.word	0x2400024c
 8002d94:	08001ce1 	.word	0x08001ce1
 8002d98:	24000250 	.word	0x24000250
 8002d9c:	08001951 	.word	0x08001951
 8002da0:	c3b12000 	.word	0xc3b12000
 8002da4:	c3e00000 	.word	0xc3e00000
 8002da8:	50001000 	.word	0x50001000
 8002dac:	52003000 	.word	0x52003000
 8002db0:	080018c1 	.word	0x080018c1
 8002db4:	0800194d 	.word	0x0800194d
 8002db8:	080028a5 	.word	0x080028a5
 8002dbc:	08002775 	.word	0x08002775
 8002dc0:	08002799 	.word	0x08002799
 8002dc4:	080027c1 	.word	0x080027c1
 8002dc8:	08002391 	.word	0x08002391
 8002dcc:	080024d1 	.word	0x080024d1
 8002dd0:	08001fcd 	.word	0x08001fcd
 8002dd4:	080020d5 	.word	0x080020d5
 8002dd8:	08002485 	.word	0x08002485
 8002ddc:	c3d44800 	.word	0xc3d44800
 8002de0:	c399b000 	.word	0xc399b000
 8002de4:	c3b9b000 	.word	0xc3b9b000
 8002de8:	c3d12000 	.word	0xc3d12000
 8002dec:	c3e89000 	.word	0xc3e89000
 8002df0:	c3ce6c00 	.word	0xc3ce6c00
 8002df4:	c3ee6c00 	.word	0xc3ee6c00
 8002df8:	c3f44800 	.word	0xc3f44800
 8002dfc:	c3fa2400 	.word	0xc3fa2400
	BSP_hlcd.config.bytesperpixel = 2;
 8002e00:	2302      	movs	r3, #2
	BSP_hlcd.config.framesize *=2;
 8002e02:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <BSP_LCD_Init+0x528>)
	BSP_hlcd.config.bytesperpixel = 2;
 8002e04:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=2;
 8002e08:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _AL88_color;
 8002e0a:	4b68      	ldr	r3, [pc, #416]	; (8002fac <BSP_LCD_Init+0x52c>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002e0c:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _AL88_color;
 8002e10:	4967      	ldr	r1, [pc, #412]	; (8002fb0 <BSP_LCD_Init+0x530>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002e12:	61a2      	str	r2, [r4, #24]
	BSP_LCD_Color = _AL88_color;
 8002e14:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _AL88_alpha;
 8002e16:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <BSP_LCD_Init+0x534>)
 8002e18:	4967      	ldr	r1, [pc, #412]	; (8002fb8 <BSP_LCD_Init+0x538>)
 8002e1a:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _AL88_dma2dwait;
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <BSP_LCD_Init+0x53c>)
 8002e1e:	4968      	ldr	r1, [pc, #416]	; (8002fc0 <BSP_LCD_Init+0x540>)
 8002e20:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _AL88_updatepixel;
 8002e22:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <BSP_LCD_Init+0x544>)
 8002e24:	4968      	ldr	r1, [pc, #416]	; (8002fc8 <BSP_LCD_Init+0x548>)
 8002e26:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _AL88_updatepixelblend;
 8002e28:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <BSP_LCD_Init+0x54c>)
 8002e2a:	4969      	ldr	r1, [pc, #420]	; (8002fd0 <BSP_LCD_Init+0x550>)
 8002e2c:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _AL88_getpixel;
 8002e2e:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <BSP_LCD_Init+0x554>)
 8002e30:	4969      	ldr	r1, [pc, #420]	; (8002fd8 <BSP_LCD_Init+0x558>)
 8002e32:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _AL88_fillbuf;
 8002e34:	4b69      	ldr	r3, [pc, #420]	; (8002fdc <BSP_LCD_Init+0x55c>)
 8002e36:	496a      	ldr	r1, [pc, #424]	; (8002fe0 <BSP_LCD_Init+0x560>)
 8002e38:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _AL88_fillbufblend;
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <BSP_LCD_Init+0x564>)
 8002e3c:	496a      	ldr	r1, [pc, #424]	; (8002fe8 <BSP_LCD_Init+0x568>)
 8002e3e:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _AL88_copybuf;
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <BSP_LCD_Init+0x56c>)
 8002e42:	496b      	ldr	r1, [pc, #428]	; (8002ff0 <BSP_LCD_Init+0x570>)
 8002e44:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _AL88_copybufblend;
 8002e46:	4b6b      	ldr	r3, [pc, #428]	; (8002ff4 <BSP_LCD_Init+0x574>)
 8002e48:	496b      	ldr	r1, [pc, #428]	; (8002ff8 <BSP_LCD_Init+0x578>)
 8002e4a:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _AL88_copybufJPEG;
 8002e4c:	4b6b      	ldr	r3, [pc, #428]	; (8002ffc <BSP_LCD_Init+0x57c>)
 8002e4e:	496c      	ldr	r1, [pc, #432]	; (8003000 <BSP_LCD_Init+0x580>)
 8002e50:	6019      	str	r1, [r3, #0]
}
 8002e52:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <BSP_LCD_Init+0x584>)
 8002e54:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 8003038 <BSP_LCD_Init+0x5b8>
 8002e58:	f8df a238 	ldr.w	sl, [pc, #568]	; 8003094 <BSP_LCD_Init+0x614>
 8002e5c:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8003098 <BSP_LCD_Init+0x618>
 8002e60:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800309c <BSP_LCD_Init+0x61c>
 8002e64:	930d      	str	r3, [sp, #52]	; 0x34
 8002e66:	e65a      	b.n	8002b1e <BSP_LCD_Init+0x9e>
	BSP_hlcd.config.bytesperpixel = 3;
 8002e68:	2303      	movs	r3, #3
	BSP_hlcd.config.framesize *=3;
 8002e6a:	4a67      	ldr	r2, [pc, #412]	; (8003008 <BSP_LCD_Init+0x588>)
}
 8002e6c:	f8df b230 	ldr.w	fp, [pc, #560]	; 80030a0 <BSP_LCD_Init+0x620>
	BSP_hlcd.config.bytesperpixel = 3;
 8002e70:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=3;
 8002e74:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _RGB888_color;
 8002e76:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <BSP_LCD_Init+0x52c>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002e78:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _RGB888_color;
 8002e7c:	4963      	ldr	r1, [pc, #396]	; (800300c <BSP_LCD_Init+0x58c>)
}
 8002e7e:	f8df a224 	ldr.w	sl, [pc, #548]	; 80030a4 <BSP_LCD_Init+0x624>
	BSP_LCD_Color = _RGB888_color;
 8002e82:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _RGB888_alpha;
 8002e84:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <BSP_LCD_Init+0x534>)
 8002e86:	4962      	ldr	r1, [pc, #392]	; (8003010 <BSP_LCD_Init+0x590>)
}
 8002e88:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8003094 <BSP_LCD_Init+0x614>
	BSP_LCD_Alpha = _RGB888_alpha;
 8002e8c:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _RGB888_dma2dwait;
 8002e8e:	4b4b      	ldr	r3, [pc, #300]	; (8002fbc <BSP_LCD_Init+0x53c>)
 8002e90:	4960      	ldr	r1, [pc, #384]	; (8003014 <BSP_LCD_Init+0x594>)
}
 8002e92:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80030a8 <BSP_LCD_Init+0x628>
	BSP_LCD_DMA2D_Wait = _RGB888_dma2dwait;
 8002e96:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _RGB888_updatepixel;
 8002e98:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <BSP_LCD_Init+0x544>)
 8002e9a:	495f      	ldr	r1, [pc, #380]	; (8003018 <BSP_LCD_Init+0x598>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002e9c:	61a2      	str	r2, [r4, #24]
	BSP_LCD_UpdatePixel = _RGB888_updatepixel;
 8002e9e:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _RGB888_updatepixelblend;
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <BSP_LCD_Init+0x54c>)
 8002ea2:	495e      	ldr	r1, [pc, #376]	; (800301c <BSP_LCD_Init+0x59c>)
 8002ea4:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _RGB888_getpixel;
 8002ea6:	4b4b      	ldr	r3, [pc, #300]	; (8002fd4 <BSP_LCD_Init+0x554>)
 8002ea8:	495d      	ldr	r1, [pc, #372]	; (8003020 <BSP_LCD_Init+0x5a0>)
 8002eaa:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _RGB888_fillbuf;
 8002eac:	4b4b      	ldr	r3, [pc, #300]	; (8002fdc <BSP_LCD_Init+0x55c>)
 8002eae:	495d      	ldr	r1, [pc, #372]	; (8003024 <BSP_LCD_Init+0x5a4>)
 8002eb0:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _RGB888_fillbufblend;
 8002eb2:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <BSP_LCD_Init+0x564>)
 8002eb4:	495c      	ldr	r1, [pc, #368]	; (8003028 <BSP_LCD_Init+0x5a8>)
 8002eb6:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _RGB888_copybuf;
 8002eb8:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <BSP_LCD_Init+0x56c>)
 8002eba:	495c      	ldr	r1, [pc, #368]	; (800302c <BSP_LCD_Init+0x5ac>)
 8002ebc:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _RGB888_copybufblend;
 8002ebe:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <BSP_LCD_Init+0x574>)
 8002ec0:	495b      	ldr	r1, [pc, #364]	; (8003030 <BSP_LCD_Init+0x5b0>)
 8002ec2:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _RGB888_copybufJPEG;
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <BSP_LCD_Init+0x57c>)
 8002ec6:	495b      	ldr	r1, [pc, #364]	; (8003034 <BSP_LCD_Init+0x5b4>)
 8002ec8:	6019      	str	r1, [r3, #0]
}
 8002eca:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <BSP_LCD_Init+0x5b8>)
 8002ecc:	930d      	str	r3, [sp, #52]	; 0x34
 8002ece:	e626      	b.n	8002b1e <BSP_LCD_Init+0x9e>
	BSP_hlcd.config.bytesperpixel = 2;
 8002ed0:	2302      	movs	r3, #2
	BSP_hlcd.config.framesize *=2;
 8002ed2:	4a35      	ldr	r2, [pc, #212]	; (8002fa8 <BSP_LCD_Init+0x528>)
	BSP_hlcd.config.bytesperpixel = 2;
 8002ed4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=2;
 8002ed8:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _ARGB1555_color;
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <BSP_LCD_Init+0x52c>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002edc:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _ARGB1555_color;
 8002ee0:	4956      	ldr	r1, [pc, #344]	; (800303c <BSP_LCD_Init+0x5bc>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002ee2:	61a2      	str	r2, [r4, #24]
	BSP_LCD_Color = _ARGB1555_color;
 8002ee4:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _ARGB1555_alpha;
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <BSP_LCD_Init+0x534>)
 8002ee8:	4955      	ldr	r1, [pc, #340]	; (8003040 <BSP_LCD_Init+0x5c0>)
 8002eea:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB1555_dma2dwait;
 8002eec:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <BSP_LCD_Init+0x53c>)
 8002eee:	4955      	ldr	r1, [pc, #340]	; (8003044 <BSP_LCD_Init+0x5c4>)
 8002ef0:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB1555_updatepixel;
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <BSP_LCD_Init+0x544>)
 8002ef4:	4954      	ldr	r1, [pc, #336]	; (8003048 <BSP_LCD_Init+0x5c8>)
 8002ef6:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB1555_updatepixelblend;
 8002ef8:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <BSP_LCD_Init+0x54c>)
 8002efa:	4954      	ldr	r1, [pc, #336]	; (800304c <BSP_LCD_Init+0x5cc>)
 8002efc:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _ARGB1555_getpixel;
 8002efe:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <BSP_LCD_Init+0x554>)
 8002f00:	4953      	ldr	r1, [pc, #332]	; (8003050 <BSP_LCD_Init+0x5d0>)
 8002f02:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _ARGB1555_fillbuf;
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <BSP_LCD_Init+0x55c>)
 8002f06:	4953      	ldr	r1, [pc, #332]	; (8003054 <BSP_LCD_Init+0x5d4>)
 8002f08:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB1555_fillbufblend;
 8002f0a:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <BSP_LCD_Init+0x564>)
 8002f0c:	4952      	ldr	r1, [pc, #328]	; (8003058 <BSP_LCD_Init+0x5d8>)
 8002f0e:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB1555_copybuf;
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <BSP_LCD_Init+0x56c>)
 8002f12:	4952      	ldr	r1, [pc, #328]	; (800305c <BSP_LCD_Init+0x5dc>)
 8002f14:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB1555_copybufblend;
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <BSP_LCD_Init+0x574>)
 8002f18:	4951      	ldr	r1, [pc, #324]	; (8003060 <BSP_LCD_Init+0x5e0>)
 8002f1a:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB1555_copybufJPEG;
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <BSP_LCD_Init+0x57c>)
 8002f1e:	4951      	ldr	r1, [pc, #324]	; (8003064 <BSP_LCD_Init+0x5e4>)
 8002f20:	e796      	b.n	8002e50 <BSP_LCD_Init+0x3d0>
	BSP_hlcd.config.bytesperpixel = 2;
 8002f22:	2302      	movs	r3, #2
	BSP_hlcd.config.framesize *=2;
 8002f24:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <BSP_LCD_Init+0x528>)
	BSP_hlcd.config.bytesperpixel = 2;
 8002f26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=2;
 8002f2a:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _ARGB4444_color;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <BSP_LCD_Init+0x52c>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002f2e:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _ARGB4444_color;
 8002f32:	494d      	ldr	r1, [pc, #308]	; (8003068 <BSP_LCD_Init+0x5e8>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002f34:	61a2      	str	r2, [r4, #24]
	BSP_LCD_Color = _ARGB4444_color;
 8002f36:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _ARGB4444_alpha;
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <BSP_LCD_Init+0x534>)
 8002f3a:	494c      	ldr	r1, [pc, #304]	; (800306c <BSP_LCD_Init+0x5ec>)
 8002f3c:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB4444_dma2dwait;
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <BSP_LCD_Init+0x53c>)
 8002f40:	494b      	ldr	r1, [pc, #300]	; (8003070 <BSP_LCD_Init+0x5f0>)
 8002f42:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB4444_updatepixel;
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <BSP_LCD_Init+0x544>)
 8002f46:	494b      	ldr	r1, [pc, #300]	; (8003074 <BSP_LCD_Init+0x5f4>)
 8002f48:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB4444_updatepixelblend;
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <BSP_LCD_Init+0x54c>)
 8002f4c:	494a      	ldr	r1, [pc, #296]	; (8003078 <BSP_LCD_Init+0x5f8>)
 8002f4e:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _ARGB4444_getpixel;
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <BSP_LCD_Init+0x554>)
 8002f52:	494a      	ldr	r1, [pc, #296]	; (800307c <BSP_LCD_Init+0x5fc>)
 8002f54:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _ARGB4444_fillbuf;
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <BSP_LCD_Init+0x55c>)
 8002f58:	4949      	ldr	r1, [pc, #292]	; (8003080 <BSP_LCD_Init+0x600>)
 8002f5a:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB4444_fillbufblend;
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <BSP_LCD_Init+0x564>)
 8002f5e:	4949      	ldr	r1, [pc, #292]	; (8003084 <BSP_LCD_Init+0x604>)
 8002f60:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB4444_copybuf;
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <BSP_LCD_Init+0x56c>)
 8002f64:	4948      	ldr	r1, [pc, #288]	; (8003088 <BSP_LCD_Init+0x608>)
 8002f66:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB4444_copybufblend;
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <BSP_LCD_Init+0x574>)
 8002f6a:	4948      	ldr	r1, [pc, #288]	; (800308c <BSP_LCD_Init+0x60c>)
 8002f6c:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB4444_copybufJPEG;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <BSP_LCD_Init+0x57c>)
 8002f70:	4947      	ldr	r1, [pc, #284]	; (8003090 <BSP_LCD_Init+0x610>)
 8002f72:	e76d      	b.n	8002e50 <BSP_LCD_Init+0x3d0>
	BSP_hlcd.JPEGbuf = LCD_FRAMEBUFFER_END_ADDR - (2 * BSP_hlcd.config.framesize) - LCD_JPEGBUF_SIZE;
 8002f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	BSP_hlcd.layer.Frame_IDLE = 255;
 8002f76:	22ff      	movs	r2, #255	; 0xff
	BSP_hlcd.layer.Frame_EDIT = 1;
 8002f78:	2101      	movs	r1, #1
	BSP_hlcd.JPEGbuf = LCD_FRAMEBUFFER_END_ADDR - (2 * BSP_hlcd.config.framesize) - LCD_JPEGBUF_SIZE;
 8002f7a:	6423      	str	r3, [r4, #64]	; 0x40
	BSP_hlcd.layer.Frame_ACTIVE = 0;
 8002f7c:	2300      	movs	r3, #0
	BSP_hlcd.layer.Frame_IDLE = 255;
 8002f7e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
	BSP_hlcd.layer.Frame_EDIT = 1;
 8002f82:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
	BSP_hlcd.layer.Frame_READY = 255;
 8002f86:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	BSP_hlcd.layer.Frame_ACTIVE = 0;
 8002f8a:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	BSP_hlcd.layer.Frame_NOUSE = 2;
 8002f8e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	BSP_hlcd.layer.Frame_PREV = 0;
 8002f92:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	BSP_hlcd.layer.Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 1 * BSP_hlcd.config.framesize;
 8002f96:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	BSP_hlcd.layer.Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 2 * BSP_hlcd.config.framesize;
 8002f9a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
	BSP_hlcd.layer.Frames[2] = 0;
 8002f9e:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002fa0:	e5e1      	b.n	8002b66 <BSP_LCD_Init+0xe6>
	memset((void *)(LCD_FRAMEBUFFER_END_ADDR - BSP_hlcd.config.framebuffersize - LCD_JPEGBUF_SIZE),0x00, (BSP_hlcd.config.framebuffersize + LCD_JPEGBUF_SIZE));
 8002fa2:	69a2      	ldr	r2, [r4, #24]
 8002fa4:	e65f      	b.n	8002c66 <BSP_LCD_Init+0x1e6>
 8002fa6:	bf00      	nop
 8002fa8:	000bb800 	.word	0x000bb800
 8002fac:	24000244 	.word	0x24000244
 8002fb0:	08002805 	.word	0x08002805
 8002fb4:	24000240 	.word	0x24000240
 8002fb8:	080018b1 	.word	0x080018b1
 8002fbc:	24000254 	.word	0x24000254
 8002fc0:	08002895 	.word	0x08002895
 8002fc4:	24000264 	.word	0x24000264
 8002fc8:	0800292d 	.word	0x0800292d
 8002fcc:	24000268 	.word	0x24000268
 8002fd0:	08002749 	.word	0x08002749
 8002fd4:	24000260 	.word	0x24000260
 8002fd8:	080028e5 	.word	0x080028e5
 8002fdc:	24000258 	.word	0x24000258
 8002fe0:	08002349 	.word	0x08002349
 8002fe4:	2400025c 	.word	0x2400025c
 8002fe8:	080029c1 	.word	0x080029c1
 8002fec:	24000248 	.word	0x24000248
 8002ff0:	08001f7d 	.word	0x08001f7d
 8002ff4:	2400024c 	.word	0x2400024c
 8002ff8:	08002975 	.word	0x08002975
 8002ffc:	24000250 	.word	0x24000250
 8003000:	08002a09 	.word	0x08002a09
 8003004:	c3c89000 	.word	0xc3c89000
 8003008:	00119400 	.word	0x00119400
 800300c:	080027f9 	.word	0x080027f9
 8003010:	080027e1 	.word	0x080027e1
 8003014:	080028c5 	.word	0x080028c5
 8003018:	08001875 	.word	0x08001875
 800301c:	080026a1 	.word	0x080026a1
 8003020:	0800270d 	.word	0x0800270d
 8003024:	08002301 	.word	0x08002301
 8003028:	080021dd 	.word	0x080021dd
 800302c:	08001f2d 	.word	0x08001f2d
 8003030:	08001de9 	.word	0x08001de9
 8003034:	08001bfd 	.word	0x08001bfd
 8003038:	c3bcd800 	.word	0xc3bcd800
 800303c:	08001819 	.word	0x08001819
 8003040:	0800183d 	.word	0x0800183d
 8003044:	080028b5 	.word	0x080028b5
 8003048:	080025a9 	.word	0x080025a9
 800304c:	080025cd 	.word	0x080025cd
 8003050:	080025f9 	.word	0x080025f9
 8003054:	08002271 	.word	0x08002271
 8003058:	0800213d 	.word	0x0800213d
 800305c:	08001e8d 	.word	0x08001e8d
 8003060:	08001d39 	.word	0x08001d39
 8003064:	08001a35 	.word	0x08001a35
 8003068:	0800184d 	.word	0x0800184d
 800306c:	08001869 	.word	0x08001869
 8003070:	080028d5 	.word	0x080028d5
 8003074:	08002951 	.word	0x08002951
 8003078:	0800261d 	.word	0x0800261d
 800307c:	08002909 	.word	0x08002909
 8003080:	080022b9 	.word	0x080022b9
 8003084:	0800218d 	.word	0x0800218d
 8003088:	08001edd 	.word	0x08001edd
 800308c:	08001d91 	.word	0x08001d91
 8003090:	08001b19 	.word	0x08001b19
 8003094:	c3dcd800 	.word	0xc3dcd800
 8003098:	c3e89000 	.word	0xc3e89000
 800309c:	c3f44800 	.word	0xc3f44800
 80030a0:	c3ab4400 	.word	0xc3ab4400
 80030a4:	c3cb4400 	.word	0xc3cb4400
 80030a8:	c3ee6c00 	.word	0xc3ee6c00

080030ac <BSP_LCD_FrameReady>:
void BSP_LCD_FrameReady(void) {
	// Marking EDIT frame as READY for display
	// Marking previous READY frame (if exists) as EDIT, else IDLE becoming EDIT

	// Waiting for any DMA2D in progress
	BSP_LCD_DMA2D_Wait();
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <BSP_LCD_FrameReady+0x58>)
void BSP_LCD_FrameReady(void) {
 80030ae:	b510      	push	{r4, lr}

	uint8_t t = BSP_hlcd.layer.Frame_READY;
 80030b0:	4c15      	ldr	r4, [pc, #84]	; (8003108 <BSP_LCD_FrameReady+0x5c>)
	BSP_LCD_DMA2D_Wait();
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4798      	blx	r3
	uint8_t t = BSP_hlcd.layer.Frame_READY;
 80030b6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
	BSP_hlcd.layer.Frame_READY = BSP_hlcd.layer.Frame_EDIT;
 80030ba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	BSP_hlcd.layer.Frame_PREV = BSP_hlcd.layer.Frame_EDIT;
	if (t<255) BSP_hlcd.layer.Frame_EDIT = t;
 80030be:	2aff      	cmp	r2, #255	; 0xff
	uint8_t t = BSP_hlcd.layer.Frame_READY;
 80030c0:	b2d1      	uxtb	r1, r2
	BSP_hlcd.layer.Frame_READY = BSP_hlcd.layer.Frame_EDIT;
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	BSP_hlcd.layer.Frame_PREV = BSP_hlcd.layer.Frame_EDIT;
 80030c8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	if (t<255) BSP_hlcd.layer.Frame_EDIT = t;
 80030d2:	d00e      	beq.n	80030f2 <BSP_LCD_FrameReady+0x46>
 80030d4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
			BSP_hlcd.layer.Frame_EDIT = BSP_hlcd.layer.Frame_IDLE;
			BSP_hlcd.layer.Frame_IDLE = t;
		}

	// Calculating frame time [ms]. FPS = 1000 / frametime.
	uint32_t timestamp = BSP_GetTick();
 80030d8:	f001 f81e 	bl	8004118 <BSP_GetTick>
	uint32_t dt = timestamp - BSP_hlcd.priv.l_timestamp;
 80030dc:	6822      	ldr	r2, [r4, #0]
	BSP_hlcd.priv.l_timestamp = timestamp;
	BSP_hlcd.frametime = (BSP_hlcd.frametime * 768 + (dt << 8)) >> 10; // Moving average
 80030de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uint32_t dt = timestamp - BSP_hlcd.priv.l_timestamp;
 80030e0:	1a82      	subs	r2, r0, r2
	BSP_hlcd.priv.l_timestamp = timestamp;
 80030e2:	6020      	str	r0, [r4, #0]
	BSP_hlcd.frametime = (BSP_hlcd.frametime * 768 + (dt << 8)) >> 10; // Moving average
 80030e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80030e8:	4413      	add	r3, r2
 80030ea:	f3c3 0395 	ubfx	r3, r3, #2, #22
 80030ee:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80030f0:	bd10      	pop	{r4, pc}
			BSP_hlcd.layer.Frame_EDIT = BSP_hlcd.layer.Frame_IDLE;
 80030f2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			BSP_hlcd.layer.Frame_IDLE = t;
 80030fc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8003100:	e7ea      	b.n	80030d8 <BSP_LCD_FrameReady+0x2c>
 8003102:	bf00      	nop
 8003104:	24000254 	.word	0x24000254
 8003108:	2400026c 	.word	0x2400026c

0800310c <BSP_LCD_InitBackLight>:
void BSP_LCD_InitBackLight(uint8_t value) {
	// PWM Timer - base configration
	// Option 1: PWM Frequency = 200MHz Input clock / Prescaler (7+1) / Reload value (999+1) = 25kHz
	// Option 2: PWM Frequency = 240MHz Input clock / Prescaler (7+1) / Reload value (999+1) = 30kHz

	BSP_hlcd.priv.bklt_setting = (int32_t)value << 6;
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <BSP_LCD_InitBackLight+0x4c>)
 800310e:	0180      	lsls	r0, r0, #6
	BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
	BSP_hlcd.priv.bklt_dimspeed = 0;
 8003110:	2100      	movs	r1, #0
void BSP_LCD_InitBackLight(uint8_t value) {
 8003112:	b538      	push	{r3, r4, r5, lr}
	BSP_hlcd.priv.bklt_setting = (int32_t)value << 6;
 8003114:	60d0      	str	r0, [r2, #12]

	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;

	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 8003116:	f240 33e7 	movw	r3, #999	; 0x3e7
	BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
 800311a:	68d0      	ldr	r0, [r2, #12]
	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 800311c:	4d0f      	ldr	r5, [pc, #60]	; (800315c <BSP_LCD_InitBackLight+0x50>)
	BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
 800311e:	6090      	str	r0, [r2, #8]
	BSP_hlcd.priv.bklt_dimspeed = 0;
 8003120:	6111      	str	r1, [r2, #16]
	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 8003122:	4628      	mov	r0, r5
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003124:	6894      	ldr	r4, [r2, #8]
	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 8003126:	2207      	movs	r2, #7
 8003128:	f007 fbe0 	bl	800a8ec <BSP_STM32_TIM_Init>
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 800312c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003130:	11a3      	asrs	r3, r4, #6
 8003132:	490b      	ldr	r1, [pc, #44]	; (8003160 <BSP_LCD_InitBackLight+0x54>)
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 8003134:	2206      	movs	r2, #6
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003136:	fb00 f303 	mul.w	r3, r0, r3
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 800313a:	4628      	mov	r0, r5
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 800313c:	fba1 1303 	umull	r1, r3, r1, r3
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 8003140:	2103      	movs	r1, #3
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	33c8      	adds	r3, #200	; 0xc8
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 8003146:	b29b      	uxth	r3, r3
 8003148:	f007 fbec 	bl	800a924 <BSP_STM32_TIM_ConfigChannel>
	BSP_STM32_TIM_Start(LCD_BKL_TIM);
 800314c:	4628      	mov	r0, r5
}
 800314e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	BSP_STM32_TIM_Start(LCD_BKL_TIM);
 8003152:	f007 bc3f 	b.w	800a9d4 <BSP_STM32_TIM_Start>
 8003156:	bf00      	nop
 8003158:	2400026c 	.word	0x2400026c
 800315c:	40000400 	.word	0x40000400
 8003160:	51eb851f 	.word	0x51eb851f

08003164 <BSP_LCD_SetBackLight>:


void BSP_LCD_SetBackLight(uint8_t value, uint8_t dimspeed) {
	// Sets backlight value 0 - 100%

	BSP_hlcd.priv.bklt_setting = (int32_t)value << 6;
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <BSP_LCD_SetBackLight+0xc>)
 8003166:	0180      	lsls	r0, r0, #6
 8003168:	60d8      	str	r0, [r3, #12]
	BSP_hlcd.priv.bklt_dimspeed = (int32_t)dimspeed;
 800316a:	6119      	str	r1, [r3, #16]

}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	2400026c 	.word	0x2400026c

08003174 <BSP_LCD_DecodeJPEG>:
}


void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
	// Decode JPEG into intermediate buffer (organized in YCbCr MCU blocks)
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGbuf, LCD_JPEGBUF_SIZE);
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <BSP_LCD_DecodeJPEG+0x1c>)
void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
 8003176:	460a      	mov	r2, r1
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGbuf, LCD_JPEGBUF_SIZE);
 8003178:	4601      	mov	r1, r0
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <BSP_LCD_DecodeJPEG+0x20>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
 800317e:	b510      	push	{r4, lr}
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGbuf, LCD_JPEGBUF_SIZE);
 8003180:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
 8003184:	b082      	sub	sp, #8
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGbuf, LCD_JPEGBUF_SIZE);
 8003186:	9400      	str	r4, [sp, #0]
 8003188:	f004 fb50 	bl	800782c <BSP_STM32_JPEG_Decode>
}
 800318c:	b002      	add	sp, #8
 800318e:	bd10      	pop	{r4, pc}
 8003190:	2400026c 	.word	0x2400026c
 8003194:	52003000 	.word	0x52003000

08003198 <BSP_LCD_GetEditFrameAddr>:


uint32_t BSP_LCD_GetEditFrameAddr(void) {
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8003198:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <BSP_LCD_GetEditFrameAddr+0x10>)
 800319a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
	return BSP_hlcd.layer.Frames[eframe];
 800319e:	330a      	adds	r3, #10
 80031a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2400026c 	.word	0x2400026c

080031ac <BSP_LCD_GetColorMode>:
	uint8_t pframe = BSP_hlcd.layer.Frame_PREV;
	return BSP_hlcd.layer.Frames[pframe];
}

uint32_t BSP_LCD_GetColorMode(void) {
	return BSP_hlcd.config.colormode;
 80031ac:	4b01      	ldr	r3, [pc, #4]	; (80031b4 <BSP_LCD_GetColorMode+0x8>)
}
 80031ae:	7f18      	ldrb	r0, [r3, #28]
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	2400026c 	.word	0x2400026c

080031b8 <LTDC_IRQHandler>:
 * IRQ handlers
 ******************************************************************************/

// INT Handler for LTDC controller
void LTDC_IRQHandler(void)
{
 80031b8:	b510      	push	{r4, lr}
	if (BSP_STM32_LTDC_IRQHandler(LTDC)==BSP_OK) {
 80031ba:	4834      	ldr	r0, [pc, #208]	; (800328c <LTDC_IRQHandler+0xd4>)
 80031bc:	f004 fd70 	bl	8007ca0 <BSP_STM32_LTDC_IRQHandler>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d139      	bne.n	8003238 <LTDC_IRQHandler+0x80>

		// Updating backlight brightness
		if (BSP_hlcd.priv.bklt_value != BSP_hlcd.priv.bklt_setting) {
 80031c4:	4c32      	ldr	r4, [pc, #200]	; (8003290 <LTDC_IRQHandler+0xd8>)
 80031c6:	68a2      	ldr	r2, [r4, #8]
 80031c8:	68e3      	ldr	r3, [r4, #12]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d02b      	beq.n	8003226 <LTDC_IRQHandler+0x6e>
			if (BSP_hlcd.priv.bklt_value < BSP_hlcd.priv.bklt_setting) {
 80031ce:	68a2      	ldr	r2, [r4, #8]
 80031d0:	68e3      	ldr	r3, [r4, #12]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	da09      	bge.n	80031ea <LTDC_IRQHandler+0x32>
				BSP_hlcd.priv.bklt_value += BSP_hlcd.priv.bklt_dimspeed;
 80031d6:	6922      	ldr	r2, [r4, #16]
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	4413      	add	r3, r2
 80031dc:	60a3      	str	r3, [r4, #8]
				if (BSP_hlcd.priv.bklt_value > BSP_hlcd.priv.bklt_setting) BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
 80031de:	68a2      	ldr	r2, [r4, #8]
 80031e0:	68e3      	ldr	r3, [r4, #12]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	dd01      	ble.n	80031ea <LTDC_IRQHandler+0x32>
 80031e6:	68e3      	ldr	r3, [r4, #12]
 80031e8:	60a3      	str	r3, [r4, #8]
			}

			if (BSP_hlcd.priv.bklt_value > BSP_hlcd.priv.bklt_setting) {
 80031ea:	68a2      	ldr	r2, [r4, #8]
 80031ec:	68e3      	ldr	r3, [r4, #12]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	dd09      	ble.n	8003206 <LTDC_IRQHandler+0x4e>
				BSP_hlcd.priv.bklt_value -= BSP_hlcd.priv.bklt_dimspeed;
 80031f2:	6922      	ldr	r2, [r4, #16]
 80031f4:	68a3      	ldr	r3, [r4, #8]
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	60a3      	str	r3, [r4, #8]
				if (BSP_hlcd.priv.bklt_value < BSP_hlcd.priv.bklt_setting) BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
 80031fa:	68a2      	ldr	r2, [r4, #8]
 80031fc:	68e3      	ldr	r3, [r4, #12]
 80031fe:	429a      	cmp	r2, r3
 8003200:	da01      	bge.n	8003206 <LTDC_IRQHandler+0x4e>
 8003202:	68e3      	ldr	r3, [r4, #12]
 8003204:	60a3      	str	r3, [r4, #8]
			}

			uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003206:	68a2      	ldr	r2, [r4, #8]
 8003208:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <LTDC_IRQHandler+0xdc>)
			BSP_STM32_TIM_SetChannelValue(LCD_BKL_TIM, 3, val);
 800320e:	2103      	movs	r1, #3
			uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003210:	1192      	asrs	r2, r2, #6
 8003212:	fb00 f202 	mul.w	r2, r0, r2
			BSP_STM32_TIM_SetChannelValue(LCD_BKL_TIM, 3, val);
 8003216:	4820      	ldr	r0, [pc, #128]	; (8003298 <LTDC_IRQHandler+0xe0>)
			uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003218:	fba3 3202 	umull	r3, r2, r3, r2
 800321c:	0952      	lsrs	r2, r2, #5
 800321e:	32c8      	adds	r2, #200	; 0xc8
			BSP_STM32_TIM_SetChannelValue(LCD_BKL_TIM, 3, val);
 8003220:	b292      	uxth	r2, r2
 8003222:	f007 fbdf 	bl	800a9e4 <BSP_STM32_TIM_SetChannelValue>
		}

		// Switching frames
		switch (BSP_hlcd.config.buffermode) {
 8003226:	7f63      	ldrb	r3, [r4, #29]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d01e      	beq.n	800326a <LTDC_IRQHandler+0xb2>
 800322c:	2b03      	cmp	r3, #3
 800322e:	d103      	bne.n	8003238 <LTDC_IRQHandler+0x80>
		case LCD_BUFFER_MODE_TRIPLE:

			if (BSP_hlcd.layer.Frame_READY < 255) {
 8003230:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003234:	2bff      	cmp	r3, #255	; 0xff
 8003236:	d100      	bne.n	800323a <LTDC_IRQHandler+0x82>

		}

	}

}
 8003238:	bd10      	pop	{r4, pc}
				uint8_t t = BSP_hlcd.layer.Frame_ACTIVE;
 800323a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
				BSP_hlcd.layer.Frame_READY = 255;
 800323e:	20ff      	movs	r0, #255	; 0xff
				BSP_hlcd.layer.Frame_ACTIVE = BSP_hlcd.layer.Frame_READY;
 8003240:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.layer.Frames[BSP_hlcd.layer.Frame_ACTIVE]);
 8003244:	2100      	movs	r1, #0
				uint8_t t = BSP_hlcd.layer.Frame_ACTIVE;
 8003246:	b2db      	uxtb	r3, r3
				BSP_hlcd.layer.Frame_ACTIVE = BSP_hlcd.layer.Frame_READY;
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
				BSP_hlcd.layer.Frame_IDLE = t;
 800324e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				BSP_hlcd.layer.Frame_READY = 255;
 8003252:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.layer.Frames[BSP_hlcd.layer.Frame_ACTIVE]);
 8003256:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800325a:	480c      	ldr	r0, [pc, #48]	; (800328c <LTDC_IRQHandler+0xd4>)
 800325c:	330a      	adds	r3, #10
 800325e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
}
 8003262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.layer.Frames[BSP_hlcd.layer.Frame_ACTIVE]);
 8003266:	f004 bcb7 	b.w	8007bd8 <BSP_STM32_LTDC_UpdateFrameBufAddr>
			if (BSP_hlcd.layer.Frame_READY < 255) {
 800326a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800326e:	2bff      	cmp	r3, #255	; 0xff
 8003270:	d0e2      	beq.n	8003238 <LTDC_IRQHandler+0x80>
				uint8_t t = BSP_hlcd.layer.Frame_ACTIVE;
 8003272:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
				BSP_hlcd.layer.Frame_READY = 255;
 8003276:	20ff      	movs	r0, #255	; 0xff
				BSP_hlcd.layer.Frame_ACTIVE = BSP_hlcd.layer.Frame_READY;
 8003278:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.layer.Frames[BSP_hlcd.layer.Frame_ACTIVE]);
 800327c:	2100      	movs	r1, #0
				uint8_t t = BSP_hlcd.layer.Frame_ACTIVE;
 800327e:	b2db      	uxtb	r3, r3
				BSP_hlcd.layer.Frame_ACTIVE = BSP_hlcd.layer.Frame_READY;
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
				BSP_hlcd.layer.Frame_EDIT = t;
 8003286:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800328a:	e7e2      	b.n	8003252 <LTDC_IRQHandler+0x9a>
 800328c:	50001000 	.word	0x50001000
 8003290:	2400026c 	.word	0x2400026c
 8003294:	51eb851f 	.word	0x51eb851f
 8003298:	40000400 	.word	0x40000400

0800329c <DMA2D_IRQHandler>:

// INT Handler for DMA2D
void DMA2D_IRQHandler(void) {
 800329c:	b508      	push	{r3, lr}

	// Update state flag
	if (BSP_STM32_DMA2D_IRQHandler(DMA2D) == BSP_OK) BSP_hlcd.priv.dma2d_state = LCD_DMA2D_READY;
 800329e:	4803      	ldr	r0, [pc, #12]	; (80032ac <DMA2D_IRQHandler+0x10>)
 80032a0:	f003 fee8 	bl	8007074 <BSP_STM32_DMA2D_IRQHandler>
 80032a4:	b908      	cbnz	r0, 80032aa <DMA2D_IRQHandler+0xe>
 80032a6:	4b02      	ldr	r3, [pc, #8]	; (80032b0 <DMA2D_IRQHandler+0x14>)
 80032a8:	6058      	str	r0, [r3, #4]
}
 80032aa:	bd08      	pop	{r3, pc}
 80032ac:	52001000 	.word	0x52001000
 80032b0:	2400026c 	.word	0x2400026c

080032b4 <BSP_LCD_TP_Init>:
BUF_RAM	LCD_TP_HandleTypeDef	BSP_hlcdtp = {0};
static	TxRxContext_TypeDef		BSP_hlcdtp_ctx = {0};
static 	uint8_t					active_flag = 0;


uint8_t BSP_LCD_TP_Init(void) {
 80032b4:	b510      	push	{r4, lr}
	active_flag = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	4c17      	ldr	r4, [pc, #92]	; (8003318 <BSP_LCD_TP_Init+0x64>)
uint8_t BSP_LCD_TP_Init(void) {
 80032ba:	b084      	sub	sp, #16

	// Configuring I2C interface
	if (BSP_STM32_I2C_Init(I2C1)) return BSP_ERROR;
 80032bc:	4817      	ldr	r0, [pc, #92]	; (800331c <BSP_LCD_TP_Init+0x68>)
	active_flag = 0;
 80032be:	7023      	strb	r3, [r4, #0]
	if (BSP_STM32_I2C_Init(I2C1)) return BSP_ERROR;
 80032c0:	f004 f872 	bl	80073a8 <BSP_STM32_I2C_Init>
 80032c4:	b110      	cbz	r0, 80032cc <BSP_LCD_TP_Init+0x18>
 80032c6:	2001      	movs	r0, #1

	// Activating interrupts
	active_flag = 1;

	return BSP_OK;
}
 80032c8:	b004      	add	sp, #16
 80032ca:	bd10      	pop	{r4, pc}
	BSP_STM32_DMA_Init(DMA1_Stream2, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_BYTE, DMA_MDATAALIGN_BYTE, DMA_NORMAL, DMA_PRIORITY_LOW);
 80032cc:	4602      	mov	r2, r0
 80032ce:	4601      	mov	r1, r0
 80032d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d4:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80032d8:	e9cd 0000 	strd	r0, r0, [sp]
 80032dc:	4810      	ldr	r0, [pc, #64]	; (8003320 <BSP_LCD_TP_Init+0x6c>)
 80032de:	f002 fc55 	bl	8005b8c <BSP_STM32_DMA_Init>
	if (BSP_STM32_DMA_CtxLink(DMA1_Stream2, &BSP_hlcdtp_ctx, DMA_REQUEST_I2C1_RX)) return BSP_ERROR;
 80032e2:	2221      	movs	r2, #33	; 0x21
 80032e4:	490f      	ldr	r1, [pc, #60]	; (8003324 <BSP_LCD_TP_Init+0x70>)
 80032e6:	480e      	ldr	r0, [pc, #56]	; (8003320 <BSP_LCD_TP_Init+0x6c>)
 80032e8:	f002 fc84 	bl	8005bf4 <BSP_STM32_DMA_CtxLink>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d1ea      	bne.n	80032c6 <BSP_LCD_TP_Init+0x12>
	BSP_DRV_LCD_TP_Reset();
 80032f0:	f7fe f806 	bl	8001300 <BSP_DRV_LCD_TP_Reset>
	if (BSP_STM32_I2C_IsDeviceReady(I2C1, (LCD_TP_I2C_ADDR) << 1, 4, 1000)) return BSP_ERROR;
 80032f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f8:	2204      	movs	r2, #4
 80032fa:	2170      	movs	r1, #112	; 0x70
 80032fc:	4807      	ldr	r0, [pc, #28]	; (800331c <BSP_LCD_TP_Init+0x68>)
 80032fe:	f004 f87b 	bl	80073f8 <BSP_STM32_I2C_IsDeviceReady>
 8003302:	2800      	cmp	r0, #0
 8003304:	d1df      	bne.n	80032c6 <BSP_LCD_TP_Init+0x12>
	if (BSP_DRV_LCD_TP_Init(I2C1)) return BSP_ERROR;
 8003306:	4805      	ldr	r0, [pc, #20]	; (800331c <BSP_LCD_TP_Init+0x68>)
 8003308:	f7fd fdbc 	bl	8000e84 <BSP_DRV_LCD_TP_Init>
 800330c:	2800      	cmp	r0, #0
 800330e:	d1da      	bne.n	80032c6 <BSP_LCD_TP_Init+0x12>
	active_flag = 1;
 8003310:	2301      	movs	r3, #1
 8003312:	7023      	strb	r3, [r4, #0]
	return BSP_OK;
 8003314:	e7d8      	b.n	80032c8 <BSP_LCD_TP_Init+0x14>
 8003316:	bf00      	nop
 8003318:	24000318 	.word	0x24000318
 800331c:	40005400 	.word	0x40005400
 8003320:	40020040 	.word	0x40020040
 8003324:	240002b0 	.word	0x240002b0

08003328 <EXTI13_IRQHandler>:
}

// ************ IRQ Handlers ***************

void EXTI13_IRQHandler(void) {
	if (!active_flag) return;
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <EXTI13_IRQHandler+0x24>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b903      	cbnz	r3, 8003330 <EXTI13_IRQHandler+0x8>
 800332e:	4770      	bx	lr
void EXTI13_IRQHandler(void) {
 8003330:	b510      	push	{r4, lr}
	// New data available in touch panel, start receiving by I2C
	BSP_STM32_I2C_MemRead(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
 8003332:	4807      	ldr	r0, [pc, #28]	; (8003350 <EXTI13_IRQHandler+0x28>)
void EXTI13_IRQHandler(void) {
 8003334:	b082      	sub	sp, #8
	BSP_STM32_I2C_MemRead(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
 8003336:	241f      	movs	r4, #31
 8003338:	2300      	movs	r3, #0
 800333a:	2270      	movs	r2, #112	; 0x70
 800333c:	4905      	ldr	r1, [pc, #20]	; (8003354 <EXTI13_IRQHandler+0x2c>)
 800333e:	e9cd 0400 	strd	r0, r4, [sp]
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <EXTI13_IRQHandler+0x30>)
 8003344:	f004 f910 	bl	8007568 <BSP_STM32_I2C_MemRead>
}
 8003348:	b002      	add	sp, #8
 800334a:	bd10      	pop	{r4, pc}
 800334c:	24000318 	.word	0x24000318
 8003350:	3800007c 	.word	0x3800007c
 8003354:	240002b0 	.word	0x240002b0
 8003358:	40005400 	.word	0x40005400

0800335c <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void) {
	if (!active_flag) return;
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <I2C1_EV_IRQHandler+0x34>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b903      	cbnz	r3, 8003364 <I2C1_EV_IRQHandler+0x8>
 8003362:	4770      	bx	lr
void I2C1_EV_IRQHandler(void) {
 8003364:	b510      	push	{r4, lr}
	// Receiving from I2C completed.
	if (BSP_STM32_I2C_IRQHandler(I2C1, &BSP_hlcdtp_ctx) == BSP_OK) {
 8003366:	490b      	ldr	r1, [pc, #44]	; (8003394 <I2C1_EV_IRQHandler+0x38>)
 8003368:	480b      	ldr	r0, [pc, #44]	; (8003398 <I2C1_EV_IRQHandler+0x3c>)
 800336a:	f004 f949 	bl	8007600 <BSP_STM32_I2C_IRQHandler>
 800336e:	b100      	cbz	r0, 8003372 <I2C1_EV_IRQHandler+0x16>
		// Parsing data from touch panel
		BSP_DRV_LCD_TP_Parse(&BSP_hlcdtp);
		// Calling callback for active touch area (if defined)
		if (BSP_hlcdtp.touch_areas[BSP_hlcdtp.gest_data.area].callback != NULL) ((void(*)())BSP_hlcdtp.touch_areas[BSP_hlcdtp.gest_data.area].callback)();
	}
}
 8003370:	bd10      	pop	{r4, pc}
		BSP_DRV_LCD_TP_Parse(&BSP_hlcdtp);
 8003372:	4c0a      	ldr	r4, [pc, #40]	; (800339c <I2C1_EV_IRQHandler+0x40>)
 8003374:	4620      	mov	r0, r4
 8003376:	f7fd fd87 	bl	8000e88 <BSP_DRV_LCD_TP_Parse>
		if (BSP_hlcdtp.touch_areas[BSP_hlcdtp.gest_data.area].callback != NULL) ((void(*)())BSP_hlcdtp.touch_areas[BSP_hlcdtp.gest_data.area].callback)();
 800337a:	f894 3248 	ldrb.w	r3, [r4, #584]	; 0x248
 800337e:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8003382:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f3      	beq.n	8003370 <I2C1_EV_IRQHandler+0x14>
}
 8003388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (BSP_hlcdtp.touch_areas[BSP_hlcdtp.gest_data.area].callback != NULL) ((void(*)())BSP_hlcdtp.touch_areas[BSP_hlcdtp.gest_data.area].callback)();
 800338c:	4718      	bx	r3
 800338e:	bf00      	nop
 8003390:	24000318 	.word	0x24000318
 8003394:	240002b0 	.word	0x240002b0
 8003398:	40005400 	.word	0x40005400
 800339c:	3800007c 	.word	0x3800007c

080033a0 <BSP_QSPI_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_QSPI.h"

uint8_t BSP_QSPI_Init() {
 80033a0:	b510      	push	{r4, lr}
	if (BSP_STM32_QSPI_Init(BSP_QSPI, BSP_QSPI_PRESCALER, BSP_QSPI_CLOCKMODE, 1, BSP_QSPI_MEMSIZE)) return BSP_ERROR;
 80033a2:	2301      	movs	r3, #1
uint8_t BSP_QSPI_Init() {
 80033a4:	b082      	sub	sp, #8
	if (BSP_STM32_QSPI_Init(BSP_QSPI, BSP_QSPI_PRESCALER, BSP_QSPI_CLOCKMODE, 1, BSP_QSPI_MEMSIZE)) return BSP_ERROR;
 80033a6:	2417      	movs	r4, #23
 80033a8:	2102      	movs	r1, #2
 80033aa:	4808      	ldr	r0, [pc, #32]	; (80033cc <BSP_QSPI_Init+0x2c>)
 80033ac:	461a      	mov	r2, r3
 80033ae:	9400      	str	r4, [sp, #0]
 80033b0:	f004 fdbc 	bl	8007f2c <BSP_STM32_QSPI_Init>
 80033b4:	b110      	cbz	r0, 80033bc <BSP_QSPI_Init+0x1c>
 80033b6:	2001      	movs	r0, #1
	if (BSP_DRV_QSPI_Init(QUADSPI)) return BSP_ERROR;

	return BSP_OK;
}
 80033b8:	b002      	add	sp, #8
 80033ba:	bd10      	pop	{r4, pc}
	if (BSP_DRV_QSPI_Init(QUADSPI)) return BSP_ERROR;
 80033bc:	4803      	ldr	r0, [pc, #12]	; (80033cc <BSP_QSPI_Init+0x2c>)
 80033be:	f7fd f969 	bl	8000694 <BSP_DRV_QSPI_Init>
	if (BSP_STM32_QSPI_Init(BSP_QSPI, BSP_QSPI_PRESCALER, BSP_QSPI_CLOCKMODE, 1, BSP_QSPI_MEMSIZE)) return BSP_ERROR;
 80033c2:	3800      	subs	r0, #0
 80033c4:	bf18      	it	ne
 80033c6:	2001      	movne	r0, #1
}
 80033c8:	b002      	add	sp, #8
 80033ca:	bd10      	pop	{r4, pc}
 80033cc:	52005000 	.word	0x52005000

080033d0 <BSP_Res_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_Resources.h"

uint8_t BSP_Res_Init(ResCtx_TypeDef *resctx, uint32_t resAddr, uint32_t resSize) {
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	4604      	mov	r4, r0
 80033d4:	4608      	mov	r0, r1

	FRESULT res;

	// Initiating variables

	resctx->resAddr = resAddr;
 80033d6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80033da:	f8c3 1840 	str.w	r1, [r3, #2112]	; 0x840
	resctx->resSize = resSize;
	resctx->resFree = resSize;
	resctx->resIndex = (resAddr % 4)?(4 - (resAddr % 4)):0;
 80033de:	f011 0103 	ands.w	r1, r1, #3
	resctx->resSize = resSize;
 80033e2:	f8c3 2844 	str.w	r2, [r3, #2116]	; 0x844
	resctx->resIndex = (resAddr % 4)?(4 - (resAddr % 4)):0;
 80033e6:	bf18      	it	ne
 80033e8:	f1c1 0104 	rsbne	r1, r1, #4
	resctx->resFree = resSize;
 80033ec:	f8c3 2848 	str.w	r2, [r3, #2120]	; 0x848
	resctx->resIndex = (resAddr % 4)?(4 - (resAddr % 4)):0;
 80033f0:	f8c3 184c 	str.w	r1, [r3, #2124]	; 0x84c

	// Cleaning reserved resource space

	memset((uint8_t *)resctx->resAddr, 0, resctx->resSize);
 80033f4:	2100      	movs	r1, #0
 80033f6:	f00e ff50 	bl	801229a <memset>

	// Cleaning item list
	for (uint16_t id=0; id<RES_ITEM_NUM; id++) {
 80033fa:	0763      	lsls	r3, r4, #29
 80033fc:	d111      	bne.n	8003422 <BSP_Res_Init+0x52>
 80033fe:	f504 6500 	add.w	r5, r4, #2048	; 0x800
	memset((uint8_t *)resctx->resAddr, 0, resctx->resSize);
 8003402:	4623      	mov	r3, r4
		resctx->items[id].addr = 0;
 8003404:	2000      	movs	r0, #0
 8003406:	2100      	movs	r1, #0
 8003408:	e8e3 0102 	strd	r0, r1, [r3], #8
	for (uint16_t id=0; id<RES_ITEM_NUM; id++) {
 800340c:	42ab      	cmp	r3, r5
 800340e:	d1fb      	bne.n	8003408 <BSP_Res_Init+0x38>
		resctx->items[id].size = 0;
	}

	// Mounting File System
	f_init();
 8003410:	f007 fc18 	bl	800ac44 <f_init>
	res = f_mount(&resctx->fs, "0:/", 1);
 8003414:	4628      	mov	r0, r5
 8003416:	2201      	movs	r2, #1
 8003418:	4907      	ldr	r1, [pc, #28]	; (8003438 <BSP_Res_Init+0x68>)
	if (res) return res;

	return FR_OK;
}
 800341a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	res = f_mount(&resctx->fs, "0:/", 1);
 800341e:	f00a bcbf 	b.w	800dda0 <f_mount>
 8003422:	4623      	mov	r3, r4
		resctx->items[id].addr = 0;
 8003424:	2200      	movs	r2, #0
 8003426:	f504 6500 	add.w	r5, r4, #2048	; 0x800
		resctx->items[id].size = 0;
 800342a:	e9c3 2200 	strd	r2, r2, [r3]
	for (uint16_t id=0; id<RES_ITEM_NUM; id++) {
 800342e:	3308      	adds	r3, #8
 8003430:	429d      	cmp	r5, r3
 8003432:	d1fa      	bne.n	800342a <BSP_Res_Init+0x5a>
 8003434:	e7ec      	b.n	8003410 <BSP_Res_Init+0x40>
 8003436:	bf00      	nop
 8003438:	0801551c 	.word	0x0801551c

0800343c <BSP_Res_Load>:

uint8_t BSP_Res_Load(ResCtx_TypeDef *resctx, char *filename, uint16_t id) {
 800343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8003444:	4691      	mov	r9, r2
 8003446:	4680      	mov	r8, r0
	FIL	file;
	FRESULT res;

	// Opening file

	res = f_open(&file, filename, FA_READ);
 8003448:	2201      	movs	r2, #1
 800344a:	a802      	add	r0, sp, #8
 800344c:	f00a fce8 	bl	800de20 <f_open>
	if (res) return res;
 8003450:	4606      	mov	r6, r0
 8003452:	b9e8      	cbnz	r0, 8003490 <BSP_Res_Load+0x54>

	uint32_t fsize = f_size(&file);
	uint32_t findex = 0;
	uint32_t fread = 0;

	if (fsize > resctx->resFree) return FR_DENIED;
 8003454:	f508 5a80 	add.w	sl, r8, #4096	; 0x1000
	uint32_t fsize = f_size(&file);
 8003458:	9d06      	ldr	r5, [sp, #24]
	uint32_t fread = 0;
 800345a:	9001      	str	r0, [sp, #4]
	if (fsize > resctx->resFree) return FR_DENIED;
 800345c:	f8da 3848 	ldr.w	r3, [sl, #2120]	; 0x848
 8003460:	42ab      	cmp	r3, r5
 8003462:	d335      	bcc.n	80034d0 <BSP_Res_Load+0x94>

	// Calculating start address
	uint32_t startaddress = resctx->resAddr + resctx->resIndex;
 8003464:	f8da 384c 	ldr.w	r3, [sl, #2124]	; 0x84c
 8003468:	f8da 7840 	ldr.w	r7, [sl, #2112]	; 0x840
 800346c:	441f      	add	r7, r3

	// Reading file into SDRAM
	while (findex < fsize) {
 800346e:	b1b5      	cbz	r5, 800349e <BSP_Res_Load+0x62>
	uint32_t findex = 0;
 8003470:	4604      	mov	r4, r0
 8003472:	e003      	b.n	800347c <BSP_Res_Load+0x40>
		res = f_read(&file, (uint8_t *)(startaddress + findex), 4096, (UINT *)&fread);
		if (res) return res;
		findex += fread;
 8003474:	9b01      	ldr	r3, [sp, #4]
 8003476:	441c      	add	r4, r3
	while (findex < fsize) {
 8003478:	42a5      	cmp	r5, r4
 800347a:	d90e      	bls.n	800349a <BSP_Res_Load+0x5e>
		res = f_read(&file, (uint8_t *)(startaddress + findex), 4096, (UINT *)&fread);
 800347c:	19e1      	adds	r1, r4, r7
 800347e:	ab01      	add	r3, sp, #4
 8003480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003484:	a802      	add	r0, sp, #8
 8003486:	f00a fed1 	bl	800e22c <f_read>
		if (res) return res;
 800348a:	2800      	cmp	r0, #0
 800348c:	d0f2      	beq.n	8003474 <BSP_Res_Load+0x38>
 800348e:	4606      	mov	r6, r0

	// Closing file
	f_close(&file);

	return FR_OK;
}
 8003490:	4630      	mov	r0, r6
 8003492:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
 8003496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	resctx->resIndex += fsize;
 800349a:	f8da 384c 	ldr.w	r3, [sl, #2124]	; 0x84c
 800349e:	442b      	add	r3, r5
	resctx->items[id].addr = startaddress;
 80034a0:	f848 7039 	str.w	r7, [r8, r9, lsl #3]
	resctx->items[id].size = fsize;
 80034a4:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
	f_close(&file);
 80034a8:	a802      	add	r0, sp, #8
	resctx->resIndex &= 0xFFFFFFFC;
 80034aa:	f023 0303 	bic.w	r3, r3, #3
	resctx->items[id].size = fsize;
 80034ae:	f8c8 5004 	str.w	r5, [r8, #4]
	resctx->resIndex += 4;
 80034b2:	3304      	adds	r3, #4
	resctx->resFree = resctx->resSize - resctx->resIndex;
 80034b4:	f8da 2844 	ldr.w	r2, [sl, #2116]	; 0x844
 80034b8:	1ad2      	subs	r2, r2, r3
	resctx->resIndex += 4;
 80034ba:	f8ca 384c 	str.w	r3, [sl, #2124]	; 0x84c
	resctx->resFree = resctx->resSize - resctx->resIndex;
 80034be:	f8ca 2848 	str.w	r2, [sl, #2120]	; 0x848
	f_close(&file);
 80034c2:	f00b f8e3 	bl	800e68c <f_close>
}
 80034c6:	4630      	mov	r0, r6
 80034c8:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
 80034cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fsize > resctx->resFree) return FR_DENIED;
 80034d0:	2607      	movs	r6, #7
}
 80034d2:	4630      	mov	r0, r6
 80034d4:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
 80034d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080034dc <BSP_Res_GetAddr>:


uint32_t BSP_Res_GetAddr(ResCtx_TypeDef *resctx, uint16_t id) {
	return resctx->items[id].addr;
}
 80034dc:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop

080034e4 <BSP_Res_GetSize>:

uint32_t BSP_Res_GetSize(ResCtx_TypeDef *resctx, uint16_t id) {
	return resctx->items[id].size;
 80034e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80034e8:	6848      	ldr	r0, [r1, #4]
 80034ea:	4770      	bx	lr

080034ec <BSP_SDCARD_Init>:
TxRxContext_TypeDef	hsdcardctx = {0};



uint8_t BSP_SDCARD_Init() {
	if (BSP_STM32_SDMMC_Init(SDMMC2, &hsdcardctx)) return BSP_ERROR;
 80034ec:	4904      	ldr	r1, [pc, #16]	; (8003500 <BSP_SDCARD_Init+0x14>)
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <BSP_SDCARD_Init+0x18>)
uint8_t BSP_SDCARD_Init() {
 80034f0:	b508      	push	{r3, lr}
	if (BSP_STM32_SDMMC_Init(SDMMC2, &hsdcardctx)) return BSP_ERROR;
 80034f2:	f005 fba3 	bl	8008c3c <BSP_STM32_SDMMC_Init>
	return BSP_OK;
}
 80034f6:	3800      	subs	r0, #0
 80034f8:	bf18      	it	ne
 80034fa:	2001      	movne	r0, #1
 80034fc:	bd08      	pop	{r3, pc}
 80034fe:	bf00      	nop
 8003500:	2400031c 	.word	0x2400031c
 8003504:	48022400 	.word	0x48022400

08003508 <BSP_SDCARD_ReadBlocks>:

uint8_t BSP_SDCARD_ReadBlocks(uint8_t * pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4614      	mov	r4, r2
 800350c:	b082      	sub	sp, #8
 800350e:	460b      	mov	r3, r1
	if (BSP_STM32_SDMMC_ReadBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 8003510:	4602      	mov	r2, r0
 8003512:	490b      	ldr	r1, [pc, #44]	; (8003540 <BSP_SDCARD_ReadBlocks+0x38>)
 8003514:	480b      	ldr	r0, [pc, #44]	; (8003544 <BSP_SDCARD_ReadBlocks+0x3c>)
 8003516:	9400      	str	r4, [sp, #0]
 8003518:	f005 fe9c 	bl	8009254 <BSP_STM32_SDMMC_ReadBlocks>
 800351c:	b958      	cbnz	r0, 8003536 <BSP_SDCARD_ReadBlocks+0x2e>
 800351e:	4606      	mov	r6, r0
	//Wait until operation finish
	while(!(BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER)) {}
 8003520:	4d07      	ldr	r5, [pc, #28]	; (8003540 <BSP_SDCARD_ReadBlocks+0x38>)
 8003522:	4c08      	ldr	r4, [pc, #32]	; (8003544 <BSP_SDCARD_ReadBlocks+0x3c>)
 8003524:	4629      	mov	r1, r5
 8003526:	4620      	mov	r0, r4
 8003528:	f005 fb7a 	bl	8008c20 <BSP_STM32_SDMMC_GetCardState>
 800352c:	2804      	cmp	r0, #4
 800352e:	d1f9      	bne.n	8003524 <BSP_SDCARD_ReadBlocks+0x1c>
	return BSP_OK;
}
 8003530:	4630      	mov	r0, r6
 8003532:	b002      	add	sp, #8
 8003534:	bd70      	pop	{r4, r5, r6, pc}
	if (BSP_STM32_SDMMC_ReadBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 8003536:	2601      	movs	r6, #1
}
 8003538:	4630      	mov	r0, r6
 800353a:	b002      	add	sp, #8
 800353c:	bd70      	pop	{r4, r5, r6, pc}
 800353e:	bf00      	nop
 8003540:	2400031c 	.word	0x2400031c
 8003544:	48022400 	.word	0x48022400

08003548 <BSP_SDCARD_WriteBlocks>:

uint8_t BSP_SDCARD_WriteBlocks(uint8_t * pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	4614      	mov	r4, r2
 800354c:	b082      	sub	sp, #8
 800354e:	460b      	mov	r3, r1
	if (BSP_STM32_SDMMC_WriteBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 8003550:	4602      	mov	r2, r0
 8003552:	490b      	ldr	r1, [pc, #44]	; (8003580 <BSP_SDCARD_WriteBlocks+0x38>)
 8003554:	480b      	ldr	r0, [pc, #44]	; (8003584 <BSP_SDCARD_WriteBlocks+0x3c>)
 8003556:	9400      	str	r4, [sp, #0]
 8003558:	f005 fefe 	bl	8009358 <BSP_STM32_SDMMC_WriteBlocks>
 800355c:	b958      	cbnz	r0, 8003576 <BSP_SDCARD_WriteBlocks+0x2e>
 800355e:	4606      	mov	r6, r0
	//Wait until operation finish
	while(!(BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER)) {}
 8003560:	4d07      	ldr	r5, [pc, #28]	; (8003580 <BSP_SDCARD_WriteBlocks+0x38>)
 8003562:	4c08      	ldr	r4, [pc, #32]	; (8003584 <BSP_SDCARD_WriteBlocks+0x3c>)
 8003564:	4629      	mov	r1, r5
 8003566:	4620      	mov	r0, r4
 8003568:	f005 fb5a 	bl	8008c20 <BSP_STM32_SDMMC_GetCardState>
 800356c:	2804      	cmp	r0, #4
 800356e:	d1f9      	bne.n	8003564 <BSP_SDCARD_WriteBlocks+0x1c>
	return BSP_OK;
}
 8003570:	4630      	mov	r0, r6
 8003572:	b002      	add	sp, #8
 8003574:	bd70      	pop	{r4, r5, r6, pc}
	if (BSP_STM32_SDMMC_WriteBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 8003576:	2601      	movs	r6, #1
}
 8003578:	4630      	mov	r0, r6
 800357a:	b002      	add	sp, #8
 800357c:	bd70      	pop	{r4, r5, r6, pc}
 800357e:	bf00      	nop
 8003580:	2400031c 	.word	0x2400031c
 8003584:	48022400 	.word	0x48022400

08003588 <BSP_SDCARD_GetBlockNo>:

uint32_t BSP_SDCARD_GetBlockNo() {
	SDMMCContext_TypeDef * sdcardctx = (SDMMCContext_TypeDef *)hsdcardctx.ctxmem;
	return sdcardctx->SDCardLogBlockNbr;
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <BSP_SDCARD_GetBlockNo+0x8>)
}
 800358a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2400031c 	.word	0x2400031c

08003594 <BSP_SDCARD_GetBlockSize>:

uint16_t BSP_SDCARD_GetBlockSize() {
	SDMMCContext_TypeDef * sdcardctx = (SDMMCContext_TypeDef *)hsdcardctx.ctxmem;
	return (uint16_t)sdcardctx->SDCardLogBlockSize;
 8003594:	4b01      	ldr	r3, [pc, #4]	; (800359c <BSP_SDCARD_GetBlockSize+0x8>)
}
 8003596:	f8b3 0064 	ldrh.w	r0, [r3, #100]	; 0x64
 800359a:	4770      	bx	lr
 800359c:	2400031c 	.word	0x2400031c

080035a0 <BSP_SDCARD_GetCardState>:

uint8_t BSP_SDCARD_GetCardState() {
	if (BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER) return BSP_OK;
 80035a0:	4904      	ldr	r1, [pc, #16]	; (80035b4 <BSP_SDCARD_GetCardState+0x14>)
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <BSP_SDCARD_GetCardState+0x18>)
uint8_t BSP_SDCARD_GetCardState() {
 80035a4:	b508      	push	{r3, lr}
	if (BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER) return BSP_OK;
 80035a6:	f005 fb3b 	bl	8008c20 <BSP_STM32_SDMMC_GetCardState>
	return BSP_ERROR;
}
 80035aa:	3804      	subs	r0, #4
 80035ac:	bf18      	it	ne
 80035ae:	2001      	movne	r0, #1
 80035b0:	bd08      	pop	{r3, pc}
 80035b2:	bf00      	nop
 80035b4:	2400031c 	.word	0x2400031c
 80035b8:	48022400 	.word	0x48022400

080035bc <BSP_SDRAM_Init>:
 *******************************************************************/

#include "BSP_SDRAM.h"

// Configuring SDRAM on the board
uint8_t	BSP_SDRAM_Init(uint32_t Freq) {
 80035bc:	b508      	push	{r3, lr}
	// Freq in MHz

	// Init SDRAM
	if (BSP_DRV_SDRAM_Init(FMC_SDRAM_DEVICE, FMC_SDRAM_BANK1, FMC_SDRAM_CLOCK_PERIOD_2, Freq)) return BSP_ERROR;
 80035be:	f44f 6200 	mov.w	r2, #2048	; 0x800
uint8_t	BSP_SDRAM_Init(uint32_t Freq) {
 80035c2:	4603      	mov	r3, r0
	if (BSP_DRV_SDRAM_Init(FMC_SDRAM_DEVICE, FMC_SDRAM_BANK1, FMC_SDRAM_CLOCK_PERIOD_2, Freq)) return BSP_ERROR;
 80035c4:	2100      	movs	r1, #0
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <BSP_SDRAM_Init+0x18>)
 80035c8:	f7fd f996 	bl	80008f8 <BSP_DRV_SDRAM_Init>

	return BSP_OK;
}
 80035cc:	3800      	subs	r0, #0
 80035ce:	bf18      	it	ne
 80035d0:	2001      	movne	r0, #1
 80035d2:	bd08      	pop	{r3, pc}
 80035d4:	52004140 	.word	0x52004140

080035d8 <BSP_STM32_MPU_Init>:

__IO static uint32_t tickvalue = 0;
__IO static uint32_t tickfrequency = 1;


uint8_t BSP_STM32_MPU_Init(void) {
 80035d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	MPU_Region_TypeDef MPU_InitStruct = {0};
 80035dc:	2400      	movs	r4, #0
uint8_t BSP_STM32_MPU_Init(void) {
 80035de:	b084      	sub	sp, #16

	// 0x00: CONFIGURING MPU FOR ALL ADDRESS SPACE (4GB) TO AVOID INCORRECT SPECULATIVE READ
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
	MPU_InitStruct.BaseAddress = 0x00000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80035e0:	f240 1501 	movw	r5, #257	; 0x101

	// 0x01: CONFIGURING MPU FOR ITCMRAM (0x00000000, 64kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
	MPU_InitStruct.BaseAddress = 0x00000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80035e4:	4f5f      	ldr	r7, [pc, #380]	; (8003764 <BSP_STM32_MPU_Init+0x18c>)

	// 0x02: CONFIGURING MPU FOR FLASH (0x08000000, 512kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
	MPU_InitStruct.BaseAddress = 0x08000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80035e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800378c <BSP_STM32_MPU_Init+0x1b4>

	// 0x03: CONFIGURING MPU FOR DTCMRAM (0x20000000, 128kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
	MPU_InitStruct.BaseAddress = 0x20000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80035ea:	f04f 3601 	mov.w	r6, #16843009	; 0x1010101
 80035ee:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8003790 <BSP_STM32_MPU_Init+0x1b8>

	// 0x04: CONFIGURING MPU FOR OS_RAM + APP_RAM (0x24000000, 512kB)
	// 0x05: CONFIGURING MPU FOR OS_RAM (0x24000000, 128kB) - Restricting access to first 128kB
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
	MPU_InitStruct.BaseAddress = 0x24000000;
 80035f2:	f04f 5a10 	mov.w	sl, #603979776	; 0x24000000
	MPU_Region_TypeDef MPU_InitStruct = {0};
 80035f6:	e9cd 4400 	strd	r4, r4, [sp]
 80035fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
	BSP_STM32_MPU_Disable();
 80035fe:	f002 fa83 	bl	8005b08 <BSP_STM32_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003602:	2301      	movs	r3, #1
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003604:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003606:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003608:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800360c:	f248 731f 	movw	r3, #34591	; 0x871f
	MPU_InitStruct.BaseAddress = 0x00000000;
 8003610:	9401      	str	r4, [sp, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003612:	9302      	str	r3, [sp, #8]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003614:	f002 fa86 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8003618:	4b53      	ldr	r3, [pc, #332]	; (8003768 <BSP_STM32_MPU_Init+0x190>)
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800361a:	4668      	mov	r0, sp
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800361c:	f8ad 5000 	strh.w	r5, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8003620:	9703      	str	r7, [sp, #12]
 8003622:	e9cd 4301 	strd	r4, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003626:	f002 fa7d 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800362a:	f240 2301 	movw	r3, #513	; 0x201
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800362e:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003630:	9703      	str	r7, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003632:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003636:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800363a:	e9cd 3801 	strd	r3, r8, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800363e:	f002 fa71 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003642:	f240 3301 	movw	r3, #769	; 0x301
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003646:	4668      	mov	r0, sp
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003648:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.BaseAddress = 0x20000000;
 800364c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8003650:	e9cd 9602 	strd	r9, r6, [sp, #8]
	MPU_InitStruct.BaseAddress = 0x20000000;
 8003654:	9301      	str	r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003656:	f002 fa65 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800365a:	f240 4301 	movw	r3, #1025	; 0x401
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800365e:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003660:	9603      	str	r6, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003662:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <BSP_STM32_MPU_Init+0x194>)
	MPU_InitStruct.BaseAddress = 0x24000000;
 8003668:	f8cd a004 	str.w	sl, [sp, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800366c:	9302      	str	r3, [sp, #8]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800366e:	f002 fa59 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003672:	f240 5301 	movw	r3, #1281	; 0x501
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003676:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8003678:	9603      	str	r6, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800367a:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800367e:	e9cd a901 	strd	sl, r9, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003682:	f002 fa4f 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>

	// 0x06: CONFIGURING MPU FOR SND_RAM (0x30040000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003686:	f240 6301 	movw	r3, #1537	; 0x601
	MPU_InitStruct.Number = MPU_REGION_NUMBER6;
	MPU_InitStruct.BaseAddress = 0x30040000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800368a:	9603      	str	r6, [sp, #12]
 800368c:	3ef3      	subs	r6, #243	; 0xf3
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800368e:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003692:	4668      	mov	r0, sp
	MPU_InitStruct.BaseAddress = 0x30040000;
 8003694:	4b36      	ldr	r3, [pc, #216]	; (8003770 <BSP_STM32_MPU_Init+0x198>)
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8003696:	9602      	str	r6, [sp, #8]
	MPU_InitStruct.BaseAddress = 0x30040000;
 8003698:	9301      	str	r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800369a:	f002 fa43 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>

	// 0x07: CONFIGURING MPU FOR BUF_RAM (0x38000000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800369e:	f240 7301 	movw	r3, #1793	; 0x701
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80036a2:	4668      	mov	r0, sp
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036a4:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.BaseAddress = 0x38000000;
 80036a8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80036ac:	e9cd 6502 	strd	r6, r5, [sp, #8]
	MPU_InitStruct.BaseAddress = 0x38000000;
 80036b0:	9301      	str	r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80036b2:	f002 fa37 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>

	// 0x08: CONFIGURING MPU FOR SH_RAM (0x38008000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036b6:	f640 0301 	movw	r3, #2049	; 0x801
	MPU_InitStruct.Number = MPU_REGION_NUMBER8;
	MPU_InitStruct.BaseAddress = 0x38008000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80036ba:	4a2e      	ldr	r2, [pc, #184]	; (8003774 <BSP_STM32_MPU_Init+0x19c>)
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80036bc:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80036be:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036c0:	f8ad 3000 	strh.w	r3, [sp]

	// 0x0B: CONFIGURING MPU FOR APP_FLASH (0x90000000, 16MB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER11;
	MPU_InitStruct.BaseAddress = 0x90000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80036c4:	f04f 4610 	mov.w	r6, #2415919104	; 0x90000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80036c8:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <BSP_STM32_MPU_Init+0x1a0>)
 80036ca:	e9cd 2301 	strd	r2, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80036ce:	f002 fa29 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036d2:	f640 1301 	movw	r3, #2305	; 0x901
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 80036d6:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80036da:	4668      	mov	r0, sp
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036dc:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 80036e0:	4b26      	ldr	r3, [pc, #152]	; (800377c <BSP_STM32_MPU_Init+0x1a4>)
 80036e2:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80036e4:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 80036e8:	e9cd 1301 	strd	r1, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80036ec:	f002 fa1a 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036f0:	f640 2301 	movw	r3, #2561	; 0xa01
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80036f4:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80036f6:	f8cd 8008 	str.w	r8, [sp, #8]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036fa:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.BaseAddress = 0x40000000;
 80036fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003702:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.BaseAddress = 0x40000000;
 8003704:	9301      	str	r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003706:	f002 fa0d 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800370a:	f640 3301 	movw	r3, #2817	; 0xb01
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800370e:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003710:	9703      	str	r7, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003712:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <BSP_STM32_MPU_Init+0x1a8>)
 8003718:	e9cd 6301 	strd	r6, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800371c:	f002 fa02 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>

	// 0x0C: CONFIGURING MPU FOR APP_SDRAM + VIDEO_SDRAM (0xC0000000, 64MB) - General use memory
	// 0x0D: CONFIGURING MPU FOR VIDEO_SDRAM (0xC3000000, 16MB) - restricting access to last 16MB for Video Memory
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER12;
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8003720:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003724:	f640 4201 	movw	r2, #3073	; 0xc01
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003728:	4668      	mov	r0, sp
	MPU_InitStruct.BaseAddress = 0xC0000000;
 800372a:	9301      	str	r3, [sp, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800372c:	4b15      	ldr	r3, [pc, #84]	; (8003784 <BSP_STM32_MPU_Init+0x1ac>)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800372e:	f8ad 2000 	strh.w	r2, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003732:	9302      	str	r3, [sp, #8]
 8003734:	9503      	str	r5, [sp, #12]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003736:	f002 f9f5 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800373a:	f640 5301 	movw	r3, #3329	; 0xd01
	MPU_InitStruct.Number = MPU_REGION_NUMBER13;
	MPU_InitStruct.BaseAddress = 0xC3000000;
 800373e:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003742:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003744:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003746:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <BSP_STM32_MPU_Init+0x1b0>)
 800374c:	e9cd 2301 	strd	r2, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003750:	f002 f9e8 	bl	8005b24 <BSP_STM32_MPU_ConfigRegion>

	// Enables the MPU
	BSP_STM32_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003754:	2004      	movs	r0, #4
 8003756:	f002 f9c5 	bl	8005ae4 <BSP_STM32_MPU_Enable>

	return BSP_OK;
}
 800375a:	4620      	mov	r0, r4
 800375c:	b004      	add	sp, #16
 800375e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003762:	bf00      	nop
 8003764:	00010100 	.word	0x00010100
 8003768:	0100000f 	.word	0x0100000f
 800376c:	03010012 	.word	0x03010012
 8003770:	30040000 	.word	0x30040000
 8003774:	38008000 	.word	0x38008000
 8003778:	0201000e 	.word	0x0201000e
 800377c:	0101000b 	.word	0x0101000b
 8003780:	02000017 	.word	0x02000017
 8003784:	03000019 	.word	0x03000019
 8003788:	01000017 	.word	0x01000017
 800378c:	01000012 	.word	0x01000012
 8003790:	01010010 	.word	0x01010010

08003794 <BSP_STM32_Init_SysClocks>:


uint8_t BSP_STM32_Init_SysClocks(void) {
 8003794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003798:	b089      	sub	sp, #36	; 0x24

	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800379a:	4f59      	ldr	r7, [pc, #356]	; (8003900 <BSP_STM32_Init_SysClocks+0x16c>)
 800379c:	f005 f938 	bl	8008a10 <BSP_STM32_RCC_GetSysClockFreq>
 80037a0:	4b58      	ldr	r3, [pc, #352]	; (8003904 <BSP_STM32_Init_SysClocks+0x170>)
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a2:	4c59      	ldr	r4, [pc, #356]	; (8003908 <BSP_STM32_Init_SysClocks+0x174>)
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037a4:	699a      	ldr	r2, [r3, #24]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a6:	699b      	ldr	r3, [r3, #24]
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037a8:	f3c2 2203 	ubfx	r2, r2, #8, #4
	SystemCoreClock = common_system_clock;
 80037ac:	4e57      	ldr	r6, [pc, #348]	; (800390c <BSP_STM32_Init_SysClocks+0x178>)
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ae:	f003 030f 	and.w	r3, r3, #15
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037b2:	5cba      	ldrb	r2, [r7, r2]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037b4:	5cfb      	ldrb	r3, [r7, r3]
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037b6:	f002 021f 	and.w	r2, r2, #31
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ba:	f003 031f 	and.w	r3, r3, #31
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037be:	40d0      	lsrs	r0, r2
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037c0:	fa20 f303 	lsr.w	r3, r0, r3
	SystemCoreClock = common_system_clock;
 80037c4:	6030      	str	r0, [r6, #0]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037c6:	6023      	str	r3, [r4, #0]
uint8_t BSP_TickInit(uint32_t CoreClock, uint32_t TickFreq, uint32_t TickPriority) {

	if (TickFreq == 0) return BSP_ERROR;

	// Set SysTick frequency
	if (SysTick_Config(CoreClock / (1000UL / TickFreq))) return BSP_ERROR;
 80037c8:	4b51      	ldr	r3, [pc, #324]	; (8003910 <BSP_STM32_Init_SysClocks+0x17c>)
 80037ca:	fba3 2300 	umull	r2, r3, r3, r0
 80037ce:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	3b01      	subs	r3, #1
 80037d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d6:	d212      	bcs.n	80037fe <BSP_STM32_Init_SysClocks+0x6a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037dc:	20f0      	movs	r0, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037de:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e0:	614b      	str	r3, [r1, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <BSP_STM32_Init_SysClocks+0x180>)
 80037e4:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e8:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ea:	618a      	str	r2, [r1, #24]
	tickfrequency = TickFreq;

	// Set SysTick priority
	if (TickPriority > (1UL << __NVIC_PRIO_BITS)) return BSP_ERROR;
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ec:	f04f 30ff 	mov.w	r0, #4294967295
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f0:	610b      	str	r3, [r1, #16]
	tickfrequency = TickFreq;
 80037f2:	2101      	movs	r1, #1
 80037f4:	4b48      	ldr	r3, [pc, #288]	; (8003918 <BSP_STM32_Init_SysClocks+0x184>)
 80037f6:	6019      	str	r1, [r3, #0]
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037f8:	2110      	movs	r1, #16
 80037fa:	f002 f91d 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 80037fe:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8003904 <BSP_STM32_Init_SysClocks+0x170>
	BSP_STM32_PWR_ConfigSupply(PWR_SMPS_1V8_SUPPLIES_LDO);
 8003802:	2016      	movs	r0, #22
	BSP_STM32_RCC_ConfigPLL1(RCC_PLL_ON, RCC_PLLSOURCE_HSE, RCC_PLL1VCIRANGE_2, RCC_PLL1VCOWIDE, 5, 192, 2, 16, 2);
 8003804:	f04f 0902 	mov.w	r9, #2
 8003808:	2510      	movs	r5, #16
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 800380a:	f8d8 30f4 	ldr.w	r3, [r8, #244]	; 0xf4
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	f8c8 30f4 	str.w	r3, [r8, #244]	; 0xf4
 8003816:	f8d8 30f4 	ldr.w	r3, [r8, #244]	; 0xf4
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	9307      	str	r3, [sp, #28]
 8003820:	9b07      	ldr	r3, [sp, #28]
	BSP_STM32_PWR_ConfigSupply(PWR_SMPS_1V8_SUPPLIES_LDO);
 8003822:	f004 fa85 	bl	8007d30 <BSP_STM32_PWR_ConfigSupply>
	BSP_STM32_PWR_VoltageScalingConfig(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003826:	2000      	movs	r0, #0
 8003828:	f004 fad6 	bl	8007dd8 <BSP_STM32_PWR_VoltageScalingConfig>
	BSP_STM32_PWR_WaitForVOSRDY();
 800382c:	f004 fb14 	bl	8007e58 <BSP_STM32_PWR_WaitForVOSRDY>
	BSP_STM32_PWR_EnableBkUpAccess();
 8003830:	f004 fb28 	bl	8007e84 <BSP_STM32_PWR_EnableBkUpAccess>
	BSP_STM32_RCC_LSEConfigDrive(RCC_LSEDRIVE_MEDIUMHIGH);
 8003834:	2010      	movs	r0, #16
 8003836:	f004 fd7b 	bl	8008330 <BSP_STM32_RCC_LSEConfigDrive>
	BSP_STM32_RCC_PLLClockSource(RCC_PLLSOURCE_HSE);
 800383a:	2002      	movs	r0, #2
 800383c:	f004 fd6c 	bl	8008318 <BSP_STM32_RCC_PLLClockSource>
	BSP_STM32_RCC_ConfigHSE(RCC_HSE_BYPASS);
 8003840:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 8003844:	f004 fd80 	bl	8008348 <BSP_STM32_RCC_ConfigHSE>
	BSP_STM32_RCC_ConfigHSI(RCC_HSI_DIV1, RCC_HSICALIBRATION_DEFAULT);
 8003848:	2140      	movs	r1, #64	; 0x40
 800384a:	2001      	movs	r0, #1
 800384c:	f004 fddc 	bl	8008408 <BSP_STM32_RCC_ConfigHSI>
	BSP_STM32_RCC_ConfigLSE(RCC_LSE_ON);
 8003850:	2001      	movs	r0, #1
 8003852:	f004 fe31 	bl	80084b8 <BSP_STM32_RCC_ConfigLSE>
	BSP_STM32_RCC_ConfigHSI48(RCC_HSI48_ON);
 8003856:	2001      	movs	r0, #1
 8003858:	f004 fe90 	bl	800857c <BSP_STM32_RCC_ConfigHSI48>
	BSP_STM32_RCC_ConfigPLL1(RCC_PLL_ON, RCC_PLLSOURCE_HSE, RCC_PLL1VCIRANGE_2, RCC_PLL1VCOWIDE, 5, 192, 2, 16, 2);
 800385c:	2305      	movs	r3, #5
 800385e:	22c0      	movs	r2, #192	; 0xc0
 8003860:	4649      	mov	r1, r9
 8003862:	4648      	mov	r0, r9
 8003864:	f8cd 9010 	str.w	r9, [sp, #16]
 8003868:	f8cd 9008 	str.w	r9, [sp, #8]
 800386c:	9503      	str	r5, [sp, #12]
 800386e:	e9cd 3200 	strd	r3, r2, [sp]
 8003872:	2300      	movs	r3, #0
 8003874:	2208      	movs	r2, #8
 8003876:	f004 feab 	bl	80085d0 <BSP_STM32_RCC_ConfigPLL1>
	BSP_STM32_RCC_ClockConfig(clocktype, RCC_SYSCLKSOURCE_PLLCLK, RCC_SYSCLK_DIV1, RCC_HCLK_DIV2, RCC_APB1_DIV2, RCC_APB2_DIV2, RCC_APB3_DIV2, RCC_APB4_DIV2, FLASH_LATENCY_2);
 800387a:	2340      	movs	r3, #64	; 0x40
 800387c:	2200      	movs	r2, #0
 800387e:	2103      	movs	r1, #3
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	203f      	movs	r0, #63	; 0x3f
 8003884:	f8cd 9010 	str.w	r9, [sp, #16]
 8003888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800388c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2308      	movs	r3, #8
 8003894:	f004 ffaa 	bl	80087ec <BSP_STM32_RCC_ClockConfig>
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003898:	f005 f8ba 	bl	8008a10 <BSP_STM32_RCC_GetSysClockFreq>
 800389c:	f8d8 3018 	ldr.w	r3, [r8, #24]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038a0:	f8d8 2018 	ldr.w	r2, [r8, #24]
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038a4:	f3c3 2303 	ubfx	r3, r3, #8, #4
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038a8:	f002 020f 	and.w	r2, r2, #15
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038ac:	5cfb      	ldrb	r3, [r7, r3]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038ae:	5cba      	ldrb	r2, [r7, r2]
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038b0:	f003 031f 	and.w	r3, r3, #31
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038b4:	f002 021f 	and.w	r2, r2, #31
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038b8:	40d8      	lsrs	r0, r3
	if (SysTick_Config(CoreClock / (1000UL / TickFreq))) return BSP_ERROR;
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <BSP_STM32_Init_SysClocks+0x17c>)
 80038bc:	fba3 1300 	umull	r1, r3, r3, r0
	SystemCoreClock = common_system_clock;
 80038c0:	6030      	str	r0, [r6, #0]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038c2:	40d0      	lsrs	r0, r2
	if (SysTick_Config(CoreClock / (1000UL / TickFreq))) return BSP_ERROR;
 80038c4:	099b      	lsrs	r3, r3, #6
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038c6:	6020      	str	r0, [r4, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c8:	3b01      	subs	r3, #1
 80038ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ce:	d212      	bcs.n	80038f6 <BSP_STM32_Init_SysClocks+0x162>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d4:	4c0f      	ldr	r4, [pc, #60]	; (8003914 <BSP_STM32_Init_SysClocks+0x180>)
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d6:	2200      	movs	r2, #0
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d8:	4629      	mov	r1, r5
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038da:	6143      	str	r3, [r0, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038dc:	23f0      	movs	r3, #240	; 0xf0
 80038de:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e2:	2407      	movs	r4, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e4:	6182      	str	r2, [r0, #24]
	tickfrequency = TickFreq;
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <BSP_STM32_Init_SysClocks+0x184>)
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e8:	6104      	str	r4, [r0, #16]
 80038ea:	2401      	movs	r4, #1
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
	tickfrequency = TickFreq;
 80038f0:	601c      	str	r4, [r3, #0]
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f2:	f002 f8a1 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
}
 80038f6:	2000      	movs	r0, #0
 80038f8:	b009      	add	sp, #36	; 0x24
 80038fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038fe:	bf00      	nop
 8003900:	08015a94 	.word	0x08015a94
 8003904:	58024400 	.word	0x58024400
 8003908:	24000020 	.word	0x24000020
 800390c:	2400001c 	.word	0x2400001c
 8003910:	10624dd3 	.word	0x10624dd3
 8003914:	e000ed00 	.word	0xe000ed00
 8003918:	24000000 	.word	0x24000000

0800391c <BSP_STM32_Init_PeriphClocks>:
uint8_t BSP_STM32_Init_PeriphClocks(void) {
 800391c:	b510      	push	{r4, lr}
	BSP_STM32_RCC_ConfigPLL3(RCC_PLL3VCIRANGE_2, RCC_PLL3VCOMEDIUM, 5, 30, 2, 2, 10, 0);
 800391e:	2000      	movs	r0, #0
uint8_t BSP_STM32_Init_PeriphClocks(void) {
 8003920:	b09e      	sub	sp, #120	; 0x78
	BSP_STM32_RCC_ConfigPLL3(RCC_PLL3VCIRANGE_2, RCC_PLL3VCOMEDIUM, 5, 30, 2, 2, 10, 0);
 8003922:	210a      	movs	r1, #10
 8003924:	2402      	movs	r4, #2
 8003926:	231e      	movs	r3, #30
 8003928:	2205      	movs	r2, #5
 800392a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800392e:	e9cd 4400 	strd	r4, r4, [sp]
 8003932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003936:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800393a:	f004 fed9 	bl	80086f0 <BSP_STM32_RCC_ConfigPLL3>
	BSP_STM32_RCC_CLKConfig_ADC();
 800393e:	f004 fcdd 	bl	80082fc <BSP_STM32_RCC_CLKConfig_ADC>
	BSP_STM32_RCC_CLKConfig_LTDC();
 8003942:	f004 fce7 	bl	8008314 <BSP_STM32_RCC_CLKConfig_LTDC>
    if (BSP_STM32_RCC_CLKConfig_RTC()) return BSP_ERROR;
 8003946:	f004 fc49 	bl	80081dc <BSP_STM32_RCC_CLKConfig_RTC>
 800394a:	b110      	cbz	r0, 8003952 <BSP_STM32_Init_PeriphClocks+0x36>
 800394c:	2001      	movs	r0, #1
}
 800394e:	b01e      	add	sp, #120	; 0x78
 8003950:	bd10      	pop	{r4, pc}
    __BSP_RCC_RTC_ENABLE();
 8003952:	4cb6      	ldr	r4, [pc, #728]	; (8003c2c <BSP_STM32_Init_PeriphClocks+0x310>)
    if (BSP_STM32_RTC_Init(RTC, 127, 255)) return BSP_ERROR;
 8003954:	22ff      	movs	r2, #255	; 0xff
 8003956:	217f      	movs	r1, #127	; 0x7f
 8003958:	48b5      	ldr	r0, [pc, #724]	; (8003c30 <BSP_STM32_Init_PeriphClocks+0x314>)
    __BSP_RCC_RTC_ENABLE();
 800395a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800395c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003960:	6723      	str	r3, [r4, #112]	; 0x70
    if (BSP_STM32_RTC_Init(RTC, 127, 255)) return BSP_ERROR;
 8003962:	f005 f8f9 	bl	8008b58 <BSP_STM32_RTC_Init>
 8003966:	2800      	cmp	r0, #0
 8003968:	d1f0      	bne.n	800394c <BSP_STM32_Init_PeriphClocks+0x30>
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 800396a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800396e:	f043 0302 	orr.w	r3, r3, #2
 8003972:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003976:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	9b04      	ldr	r3, [sp, #16]
	__BSP_RCC_GPIOA_CLK_ENABLE();
 8003982:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800398e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	9305      	str	r3, [sp, #20]
 8003998:	9b05      	ldr	r3, [sp, #20]
	__BSP_RCC_GPIOB_CLK_ENABLE();
 800399a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800399e:	f043 0302 	orr.w	r3, r3, #2
 80039a2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80039a6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	9306      	str	r3, [sp, #24]
 80039b0:	9b06      	ldr	r3, [sp, #24]
	__BSP_RCC_GPIOC_CLK_ENABLE();
 80039b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80039be:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	9307      	str	r3, [sp, #28]
 80039c8:	9b07      	ldr	r3, [sp, #28]
	__BSP_RCC_GPIOD_CLK_ENABLE();
 80039ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039ce:	f043 0308 	orr.w	r3, r3, #8
 80039d2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80039d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	9308      	str	r3, [sp, #32]
 80039e0:	9b08      	ldr	r3, [sp, #32]
	__BSP_RCC_GPIOE_CLK_ENABLE();
 80039e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039e6:	f043 0310 	orr.w	r3, r3, #16
 80039ea:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80039ee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	9309      	str	r3, [sp, #36]	; 0x24
 80039f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__BSP_RCC_GPIOF_CLK_ENABLE();
 80039fa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039fe:	f043 0320 	orr.w	r3, r3, #32
 8003a02:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003a06:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8003a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__BSP_RCC_GPIOG_CLK_ENABLE();
 8003a12:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003a1e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__BSP_RCC_GPIOH_CLK_ENABLE();
 8003a2a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a32:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003a36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8003a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__BSP_RCC_GPIOI_CLK_ENABLE();
 8003a42:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003a4e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	930d      	str	r3, [sp, #52]	; 0x34
 8003a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	if (BSP_STM32_RCC_CLKConfig_FMC()) return BSP_ERROR;
 8003a5a:	f004 fc03 	bl	8008264 <BSP_STM32_RCC_CLKConfig_FMC>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	f47f af74 	bne.w	800394c <BSP_STM32_Init_PeriphClocks+0x30>
	__BSP_RCC_FMC_CLK_ENABLE();
 8003a64:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a6c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8003a70:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a78:	930e      	str	r3, [sp, #56]	; 0x38
 8003a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	__BSP_RCC_LTDC_CLK_ENABLE();
 8003a7c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8003a80:	f043 0308 	orr.w	r3, r3, #8
 8003a84:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8003a88:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    __BSP_RCC_DMA2D_CLK_ENABLE();
 8003a94:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003a98:	f043 0310 	orr.w	r3, r3, #16
 8003a9c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8003aa0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	9310      	str	r3, [sp, #64]	; 0x40
 8003aaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    __BSP_RCC_JPGDECEN_CLK_ENABLE();
 8003aac:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003ab0:	f043 0320 	orr.w	r3, r3, #32
 8003ab4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8003ab8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8003ac2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    __BSP_RCC_DMA1_CLK_ENABLE();
 8003ac4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8003ad0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	9312      	str	r3, [sp, #72]	; 0x48
 8003ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
    __BSP_RCC_BDMA_CLK_ENABLE();
 8003adc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ae4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003ae8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af0:	9313      	str	r3, [sp, #76]	; 0x4c
 8003af2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    __BSP_RCC_ADC12_CLK_ENABLE();
 8003af4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003af8:	f043 0320 	orr.w	r3, r3, #32
 8003afc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8003b00:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	9314      	str	r3, [sp, #80]	; 0x50
 8003b0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    if (BSP_STM32_RCC_CLKConfig_I2C1()) return BSP_ERROR;
 8003b0c:	f004 fbac 	bl	8008268 <BSP_STM32_RCC_CLKConfig_I2C1>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	f47f af1b 	bne.w	800394c <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_I2C1_CLK_ENABLE();
 8003b16:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b1e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003b22:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2a:	9315      	str	r3, [sp, #84]	; 0x54
 8003b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    if (BSP_STM32_RCC_CLKConfig_I2C4()) return BSP_ERROR;
 8003b2e:	f004 fba5 	bl	800827c <BSP_STM32_RCC_CLKConfig_I2C4>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	f47f af0a 	bne.w	800394c <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_I2C4_CLK_ENABLE();
 8003b38:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b40:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003b44:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	9316      	str	r3, [sp, #88]	; 0x58
 8003b4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    if (BSP_STM32_RCC_CLKConfig_QSPI()) return BSP_ERROR;
 8003b50:	f004 fb9e 	bl	8008290 <BSP_STM32_RCC_CLKConfig_QSPI>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	f47f aef9 	bne.w	800394c <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_QSPI_CLK_ENABLE();
 8003b5a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b62:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8003b66:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003b70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    if (BSP_STM32_RCC_CLKConfig_SDMMC2()) return BSP_ERROR;
 8003b72:	f004 fb97 	bl	80082a4 <BSP_STM32_RCC_CLKConfig_SDMMC2>
 8003b76:	2800      	cmp	r0, #0
 8003b78:	f47f aee8 	bne.w	800394c <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_SDMMC2_CLK_ENABLE();
 8003b7c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8003b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b84:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8003b88:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8003b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b90:	9318      	str	r3, [sp, #96]	; 0x60
 8003b92:	9b18      	ldr	r3, [sp, #96]	; 0x60
    __BSP_RCC_TIM2_CLK_ENABLE();
 8003b94:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003ba0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	9319      	str	r3, [sp, #100]	; 0x64
 8003baa:	9b19      	ldr	r3, [sp, #100]	; 0x64
    __BSP_RCC_TIM3_CLK_ENABLE();
 8003bac:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003bb8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	931a      	str	r3, [sp, #104]	; 0x68
 8003bc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    if (BSP_STM32_RCC_CLKConfig_UART5()) return BSP_ERROR;
 8003bc4:	f004 fb7c 	bl	80082c0 <BSP_STM32_RCC_CLKConfig_UART5>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	f47f aebf 	bne.w	800394c <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_UART5_CLK_ENABLE();
 8003bce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003bda:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be2:	931b      	str	r3, [sp, #108]	; 0x6c
 8003be4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    if (BSP_STM32_RCC_CLKConfig_USART2()) return BSP_ERROR;
 8003be6:	f004 fb75 	bl	80082d4 <BSP_STM32_RCC_CLKConfig_USART2>
 8003bea:	2800      	cmp	r0, #0
 8003bec:	f47f aeae 	bne.w	800394c <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_USART2_CLK_ENABLE();
 8003bf0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003bfc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	931c      	str	r3, [sp, #112]	; 0x70
 8003c06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    if (BSP_STM32_RCC_CLKConfig_USBFS()) return BSP_ERROR;
 8003c08:	f004 fb6e 	bl	80082e8 <BSP_STM32_RCC_CLKConfig_USBFS>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f47f ae9d 	bne.w	800394c <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_USB2_FS_CLK_ENABLE();
 8003c12:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8003c16:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003c1a:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 8003c1e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c26:	931d      	str	r3, [sp, #116]	; 0x74
 8003c28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
	return BSP_OK;
 8003c2a:	e690      	b.n	800394e <BSP_STM32_Init_PeriphClocks+0x32>
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58004000 	.word	0x58004000

08003c34 <BSP_STM32_Init_NVIC>:
	BSP_STM32_NVIC_SetPriority(LTDC_IRQn, pp, sp);
 8003c34:	2200      	movs	r2, #0
 8003c36:	2058      	movs	r0, #88	; 0x58
uint8_t BSP_STM32_Init_NVIC(void) {
 8003c38:	b508      	push	{r3, lr}
	BSP_STM32_NVIC_SetPriority(LTDC_IRQn, pp, sp);
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	f001 fefc 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(LTDC_IRQn);
 8003c40:	2058      	movs	r0, #88	; 0x58
 8003c42:	f001 feeb 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(DMA2D_IRQn, pp, sp);
 8003c46:	2200      	movs	r2, #0
 8003c48:	205a      	movs	r0, #90	; 0x5a
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	f001 fef4 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA2D_IRQn);
 8003c50:	205a      	movs	r0, #90	; 0x5a
 8003c52:	f001 fee3 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(DMA1_Stream1_IRQn, pp, sp);
 8003c56:	2200      	movs	r2, #0
 8003c58:	200c      	movs	r0, #12
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	f001 feec 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003c60:	200c      	movs	r0, #12
 8003c62:	f001 fedb 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(DMA1_Stream2_IRQn, pp, sp);
 8003c66:	2200      	movs	r2, #0
 8003c68:	200d      	movs	r0, #13
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	f001 fee4 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003c70:	200d      	movs	r0, #13
 8003c72:	f001 fed3 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(BDMA_Channel0_IRQn, pp, sp);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2081      	movs	r0, #129	; 0x81
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	f001 fedc 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8003c80:	2081      	movs	r0, #129	; 0x81
 8003c82:	f001 fecb 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(OTG_FS_IRQn, pp, sp);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2065      	movs	r0, #101	; 0x65
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	f001 fed4 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003c90:	2065      	movs	r0, #101	; 0x65
 8003c92:	f001 fec3 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(I2C1_EV_IRQn, pp, sp);
 8003c96:	2200      	movs	r2, #0
 8003c98:	2103      	movs	r1, #3
 8003c9a:	201f      	movs	r0, #31
 8003c9c:	f001 fecc 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003ca0:	201f      	movs	r0, #31
 8003ca2:	f001 febb 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(I2C4_EV_IRQn, pp, sp);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2103      	movs	r1, #3
 8003caa:	205f      	movs	r0, #95	; 0x5f
 8003cac:	f001 fec4 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8003cb0:	205f      	movs	r0, #95	; 0x5f
 8003cb2:	f001 feb3 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(USART2_IRQn, pp, sp);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2103      	movs	r1, #3
 8003cba:	2026      	movs	r0, #38	; 0x26
 8003cbc:	f001 febc 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(USART2_IRQn);
 8003cc0:	2026      	movs	r0, #38	; 0x26
 8003cc2:	f001 feab 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(EXTI15_10_IRQn, pp, sp); // Touch panel and MPU6050
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2104      	movs	r1, #4
 8003cca:	2028      	movs	r0, #40	; 0x28
 8003ccc:	f001 feb4 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cd0:	2028      	movs	r0, #40	; 0x28
 8003cd2:	f001 fea3 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(EXTI9_5_IRQn, pp, sp); // BT Module
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2104      	movs	r1, #4
 8003cda:	2017      	movs	r0, #23
 8003cdc:	f001 feac 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ce0:	2017      	movs	r0, #23
 8003ce2:	f001 fe9b 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(TIM2_IRQn, pp, sp); // Timer for sampling joystick and keyboard
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2104      	movs	r1, #4
 8003cea:	201c      	movs	r0, #28
 8003cec:	f001 fea4 	bl	8005a38 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(TIM2_IRQn);
 8003cf0:	201c      	movs	r0, #28
 8003cf2:	f001 fe93 	bl	8005a1c <BSP_STM32_NVIC_EnableIRQ>
}
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	bd08      	pop	{r3, pc}
 8003cfa:	bf00      	nop

08003cfc <BSP_STM32_Init_GPIO>:
uint8_t BSP_STM32_Init_GPIO(void) {
 8003cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d00:	f04f 0a03 	mov.w	sl, #3
uint8_t BSP_STM32_Init_GPIO(void) {
 8003d04:	b083      	sub	sp, #12
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d06:	250c      	movs	r5, #12
	BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d08:	4ff2      	ldr	r7, [pc, #968]	; (80040d4 <BSP_STM32_Init_GPIO+0x3d8>)
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8003d12:	48f1      	ldr	r0, [pc, #964]	; (80040d8 <BSP_STM32_Init_GPIO+0x3dc>)
	BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d14:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 80040ec <BSP_STM32_Init_GPIO+0x3f0>
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003d18:	2400      	movs	r4, #0
	BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d1a:	4ef0      	ldr	r6, [pc, #960]	; (80040dc <BSP_STM32_Init_GPIO+0x3e0>)
	BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d1c:	f8df b3d0 	ldr.w	fp, [pc, #976]	; 80040f0 <BSP_STM32_Init_GPIO+0x3f4>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8003d20:	f8df 83d0 	ldr.w	r8, [pc, #976]	; 80040f4 <BSP_STM32_Init_GPIO+0x3f8>
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d24:	e9cd a500 	strd	sl, r5, [sp]
 8003d28:	f003 f9d2 	bl	80070d0 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8003d34:	48ea      	ldr	r0, [pc, #936]	; (80040e0 <BSP_STM32_Init_GPIO+0x3e4>)
 8003d36:	e9cd a500 	strd	sl, r5, [sp]
 8003d3a:	f003 f9c9 	bl	80070d0 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d3e:	4629      	mov	r1, r5
 8003d40:	2300      	movs	r3, #0
 8003d42:	2202      	movs	r2, #2
 8003d44:	4638      	mov	r0, r7
 8003d46:	e9cd a500 	strd	sl, r5, [sp]
 8003d4a:	f003 f9c1 	bl	80070d0 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2202      	movs	r2, #2
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	4648      	mov	r0, r9
 8003d56:	e9cd a500 	strd	sl, r5, [sp]
 8003d5a:	f003 f9b9 	bl	80070d0 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2202      	movs	r2, #2
 8003d62:	f248 1137 	movw	r1, #33079	; 0x8137
 8003d66:	4630      	mov	r0, r6
 8003d68:	e9cd a500 	strd	sl, r5, [sp]
 8003d6c:	f003 f9b0 	bl	80070d0 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d70:	2300      	movs	r3, #0
 8003d72:	2202      	movs	r2, #2
 8003d74:	f64f 7183 	movw	r1, #65411	; 0xff83
 8003d78:	48da      	ldr	r0, [pc, #872]	; (80040e4 <BSP_STM32_Init_GPIO+0x3e8>)
 8003d7a:	e9cd a500 	strd	sl, r5, [sp]
 8003d7e:	f003 f9a7 	bl	80070d0 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d82:	4623      	mov	r3, r4
 8003d84:	2202      	movs	r2, #2
 8003d86:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8003d8a:	4658      	mov	r0, fp
 8003d8c:	e9cd a500 	strd	sl, r5, [sp]
 8003d90:	f003 f99e 	bl	80070d0 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003d94:	4623      	mov	r3, r4
 8003d96:	2202      	movs	r2, #2
 8003d98:	f24c 7103 	movw	r1, #50947	; 0xc703
 8003d9c:	48d2      	ldr	r0, [pc, #840]	; (80040e8 <BSP_STM32_Init_GPIO+0x3ec>)
 8003d9e:	e9cd a500 	strd	sl, r5, [sp]
 8003da2:	f003 f995 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003da6:	230e      	movs	r3, #14
 8003da8:	2202      	movs	r2, #2
 8003daa:	2170      	movs	r1, #112	; 0x70
 8003dac:	48cd      	ldr	r0, [pc, #820]	; (80040e4 <BSP_STM32_Init_GPIO+0x3e8>)
 8003dae:	e9cd 4300 	strd	r4, r3, [sp]
 8003db2:	4623      	mov	r3, r4
 8003db4:	f003 f98c 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8003db8:	2309      	movs	r3, #9
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003dc0:	48c5      	ldr	r0, [pc, #788]	; (80040d8 <BSP_STM32_Init_GPIO+0x3dc>)
 8003dc2:	e9cd 4300 	strd	r4, r3, [sp]
 8003dc6:	4623      	mov	r3, r4
 8003dc8:	f003 f982 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003dcc:	230e      	movs	r3, #14
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dd4:	48c2      	ldr	r0, [pc, #776]	; (80040e0 <BSP_STM32_Init_GPIO+0x3e4>)
 8003dd6:	e9cd 4300 	strd	r4, r3, [sp]
 8003dda:	4623      	mov	r3, r4
 8003ddc:	f003 f978 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003de0:	230e      	movs	r3, #14
 8003de2:	2202      	movs	r2, #2
 8003de4:	2141      	movs	r1, #65	; 0x41
 8003de6:	4638      	mov	r0, r7
 8003de8:	e9cd 4300 	strd	r4, r3, [sp]
 8003dec:	4623      	mov	r3, r4
 8003dee:	f003 f96f 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003df2:	230e      	movs	r3, #14
 8003df4:	2202      	movs	r2, #2
 8003df6:	217e      	movs	r1, #126	; 0x7e
 8003df8:	4648      	mov	r0, r9
 8003dfa:	e9cd 4300 	strd	r4, r3, [sp]
 8003dfe:	4623      	mov	r3, r4
 8003e00:	f003 f966 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003e04:	230e      	movs	r3, #14
 8003e06:	2202      	movs	r2, #2
 8003e08:	2110      	movs	r1, #16
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	e9cd 4300 	strd	r4, r3, [sp]
 8003e10:	4623      	mov	r3, r4
 8003e12:	f003 f95d 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8003e16:	2309      	movs	r3, #9
 8003e18:	4651      	mov	r1, sl
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	e9cd 4300 	strd	r4, r3, [sp]
 8003e22:	4623      	mov	r3, r4
 8003e24:	f003 f954 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003e28:	230e      	movs	r3, #14
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e30:	48a9      	ldr	r0, [pc, #676]	; (80040d8 <BSP_STM32_Init_GPIO+0x3dc>)
 8003e32:	e9cd 4300 	strd	r4, r3, [sp]
 8003e36:	4623      	mov	r3, r4
 8003e38:	f003 f94a 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003e3c:	230e      	movs	r3, #14
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8003e44:	4640      	mov	r0, r8
 8003e46:	e9cd 4300 	strd	r4, r3, [sp]
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	f003 f940 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003e50:	230e      	movs	r3, #14
 8003e52:	2202      	movs	r2, #2
 8003e54:	f44f 51a6 	mov.w	r1, #5312	; 0x14c0
 8003e58:	4630      	mov	r0, r6
 8003e5a:	e9cd 4300 	strd	r4, r3, [sp]
 8003e5e:	4623      	mov	r3, r4
 8003e60:	f003 f936 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF10_LTDC);
 8003e64:	230a      	movs	r3, #10
 8003e66:	2202      	movs	r2, #2
 8003e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	e9cd 4300 	strd	r4, r3, [sp]
 8003e72:	4623      	mov	r3, r4
 8003e74:	f003 f92c 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF13_LTDC);
 8003e78:	230d      	movs	r3, #13
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	4648      	mov	r0, r9
 8003e84:	4623      	mov	r3, r4
 8003e86:	9400      	str	r4, [sp, #0]
 8003e88:	f003 f922 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF12_LTDC);
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e94:	4648      	mov	r0, r9
 8003e96:	e9cd 4500 	strd	r4, r5, [sp]
 8003e9a:	f003 f919 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003e9e:	230e      	movs	r3, #14
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	2108      	movs	r1, #8
 8003ea4:	4890      	ldr	r0, [pc, #576]	; (80040e8 <BSP_STM32_Init_GPIO+0x3ec>)
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 8003ea6:	2502      	movs	r5, #2
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003ea8:	e9cd 4300 	strd	r4, r3, [sp]
 8003eac:	4623      	mov	r3, r4
 8003eae:	f003 f90f 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_ANALOG, GPIO_NOPULL, 0, 0);
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	4652      	mov	r2, sl
 8003eb6:	2130      	movs	r1, #48	; 0x30
 8003eb8:	4638      	mov	r0, r7
 8003eba:	e9cd 4400 	strd	r4, r4, [sp]
 8003ebe:	f003 f907 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_I2C1);
 8003ec2:	2304      	movs	r3, #4
 8003ec4:	2212      	movs	r2, #18
 8003ec6:	21c0      	movs	r1, #192	; 0xc0
 8003ec8:	4640      	mov	r0, r8
 8003eca:	e9cd 4300 	strd	r4, r3, [sp]
 8003ece:	4623      	mov	r3, r4
 8003ed0:	f003 f8fe 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_I2C4);
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	2212      	movs	r2, #18
 8003ed8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003edc:	4882      	ldr	r0, [pc, #520]	; (80040e8 <BSP_STM32_Init_GPIO+0x3ec>)
 8003ede:	e9cd 4300 	strd	r4, r3, [sp]
 8003ee2:	4623      	mov	r3, r4
 8003ee4:	f003 f8f4 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 8003ee8:	2309      	movs	r3, #9
 8003eea:	462a      	mov	r2, r5
 8003eec:	21c0      	movs	r1, #192	; 0xc0
 8003eee:	487c      	ldr	r0, [pc, #496]	; (80040e0 <BSP_STM32_Init_GPIO+0x3e4>)
 8003ef0:	e9cd 5300 	strd	r5, r3, [sp]
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	f003 f8eb 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF10_QUADSPI);
 8003efa:	230a      	movs	r3, #10
 8003efc:	462a      	mov	r2, r5
 8003efe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003f02:	4877      	ldr	r0, [pc, #476]	; (80040e0 <BSP_STM32_Init_GPIO+0x3e4>)
 8003f04:	e9cd 5300 	strd	r5, r3, [sp]
 8003f08:	4623      	mov	r3, r4
 8003f0a:	f003 f8e1 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 8003f0e:	2309      	movs	r3, #9
 8003f10:	462a      	mov	r2, r5
 8003f12:	f240 4104 	movw	r1, #1028	; 0x404
 8003f16:	4640      	mov	r0, r8
 8003f18:	e9cd 5300 	strd	r5, r3, [sp]
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	f003 f8d7 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 8003f22:	2309      	movs	r3, #9
 8003f24:	462a      	mov	r2, r5
 8003f26:	4629      	mov	r1, r5
 8003f28:	4638      	mov	r0, r7
 8003f2a:	e9cd a300 	strd	sl, r3, [sp]
 8003f2e:	4623      	mov	r3, r4
 8003f30:	f003 f8ce 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 8003f34:	2309      	movs	r3, #9
 8003f36:	462a      	mov	r2, r5
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4648      	mov	r0, r9
 8003f3c:	e9cd a300 	strd	sl, r3, [sp]
 8003f40:	4623      	mov	r3, r4
 8003f42:	f003 f8c5 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 8003f46:	2309      	movs	r3, #9
 8003f48:	462a      	mov	r2, r5
 8003f4a:	f24c 0110 	movw	r1, #49168	; 0xc010
 8003f4e:	4640      	mov	r0, r8
 8003f50:	e9cd a300 	strd	sl, r3, [sp]
 8003f54:	4623      	mov	r3, r4
 8003f56:	f003 f8bb 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF10_SDIO2);
 8003f5a:	230a      	movs	r3, #10
 8003f5c:	462a      	mov	r2, r5
 8003f5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	4630      	mov	r0, r6
 8003f66:	4623      	mov	r3, r4
 8003f68:	f8cd a000 	str.w	sl, [sp]
 8003f6c:	f003 f8b0 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF2_TIM3);
 8003f70:	4623      	mov	r3, r4
 8003f72:	462a      	mov	r2, r5
 8003f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f78:	4638      	mov	r0, r7
 8003f7a:	e9cd 4500 	strd	r4, r5, [sp]
 8003f7e:	f003 f8a7 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_UART5);
 8003f82:	230e      	movs	r3, #14
 8003f84:	462a      	mov	r2, r5
 8003f86:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	e9cd 4300 	strd	r4, r3, [sp]
 8003f90:	4623      	mov	r3, r4
 8003f92:	f003 f89d 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF7_USART2);
 8003f96:	2307      	movs	r3, #7
 8003f98:	462a      	mov	r2, r5
 8003f9a:	2160      	movs	r1, #96	; 0x60
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	9400      	str	r4, [sp, #0]
 8003fa2:	4851      	ldr	r0, [pc, #324]	; (80040e8 <BSP_STM32_Init_GPIO+0x3ec>)
 8003fa4:	f003 f894 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF10_OTG1_FS);
 8003fa8:	230a      	movs	r3, #10
 8003faa:	462a      	mov	r2, r5
 8003fac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fb0:	4648      	mov	r0, r9
 8003fb2:	e9cd 5300 	strd	r5, r3, [sp]
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	f003 f88a 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_WritePin(GPIOH, GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	2188      	movs	r1, #136	; 0x88
 8003fc0:	4658      	mov	r0, fp
 8003fc2:	f003 f9cb 	bl	800735c <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8003fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f003 f9c5 	bl	800735c <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f003 f9bf 	bl	800735c <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003fde:	4623      	mov	r3, r4
 8003fe0:	4622      	mov	r2, r4
 8003fe2:	2108      	movs	r1, #8
 8003fe4:	483f      	ldr	r0, [pc, #252]	; (80040e4 <BSP_STM32_Init_GPIO+0x3e8>)
 8003fe6:	e9cd 4400 	strd	r4, r4, [sp]
 8003fea:	f003 f871 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003fee:	4623      	mov	r3, r4
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ff6:	4838      	ldr	r0, [pc, #224]	; (80040d8 <BSP_STM32_Init_GPIO+0x3dc>)
 8003ff8:	e9cd 4400 	strd	r4, r4, [sp]
 8003ffc:	f003 f868 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8004000:	4623      	mov	r3, r4
 8004002:	4622      	mov	r2, r4
 8004004:	4638      	mov	r0, r7
 8004006:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 800400a:	e9cd 4400 	strd	r4, r4, [sp]
 800400e:	f003 f85f 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8004012:	4623      	mov	r3, r4
 8004014:	4622      	mov	r2, r4
 8004016:	2104      	movs	r1, #4
 8004018:	4658      	mov	r0, fp
 800401a:	e9cd 4400 	strd	r4, r4, [sp]
 800401e:	f003 f857 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);
 8004022:	4623      	mov	r3, r4
 8004024:	2201      	movs	r2, #1
 8004026:	2188      	movs	r1, #136	; 0x88
 8004028:	4658      	mov	r0, fp
 800402a:	e9cd 4400 	strd	r4, r4, [sp]
 800402e:	f003 f84f 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8004032:	4623      	mov	r3, r4
 8004034:	4622      	mov	r2, r4
 8004036:	2120      	movs	r1, #32
 8004038:	4658      	mov	r0, fp
 800403a:	e9cd 4400 	strd	r4, r4, [sp]
 800403e:	f003 f847 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 8004042:	4623      	mov	r3, r4
 8004044:	4658      	mov	r0, fp
 8004046:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800404a:	2140      	movs	r1, #64	; 0x40
 800404c:	e9cd 4400 	strd	r4, r4, [sp]
 8004050:	f003 f83e 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 8004054:	4623      	mov	r3, r4
 8004056:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800405a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800405e:	4822      	ldr	r0, [pc, #136]	; (80040e8 <BSP_STM32_Init_GPIO+0x3ec>)
 8004060:	e9cd 4400 	strd	r4, r4, [sp]
 8004064:	f003 f834 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8004068:	4623      	mov	r3, r4
 800406a:	4622      	mov	r2, r4
 800406c:	2108      	movs	r1, #8
 800406e:	4630      	mov	r0, r6
 8004070:	e9cd 4400 	strd	r4, r4, [sp]
 8004074:	f003 f82c 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8004078:	4623      	mov	r3, r4
 800407a:	4622      	mov	r2, r4
 800407c:	4648      	mov	r0, r9
 800407e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004082:	e9cd 4400 	strd	r4, r4, [sp]
 8004086:	f003 f823 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 800408a:	4623      	mov	r3, r4
 800408c:	4622      	mov	r2, r4
 800408e:	2194      	movs	r1, #148	; 0x94
 8004090:	4815      	ldr	r0, [pc, #84]	; (80040e8 <BSP_STM32_Init_GPIO+0x3ec>)
 8004092:	e9cd 4400 	strd	r4, r4, [sp]
 8004096:	f003 f81b 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);
 800409a:	4623      	mov	r3, r4
 800409c:	2201      	movs	r2, #1
 800409e:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80040a2:	4630      	mov	r0, r6
 80040a4:	e9cd 4400 	strd	r4, r4, [sp]
 80040a8:	f003 f812 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 80040ac:	4623      	mov	r3, r4
 80040ae:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 80040b2:	4630      	mov	r0, r6
 80040b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040b8:	e9cd 4400 	strd	r4, r4, [sp]
 80040bc:	f003 f808 	bl	80070d0 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 80040c0:	4623      	mov	r3, r4
 80040c2:	4622      	mov	r2, r4
 80040c4:	2120      	movs	r1, #32
 80040c6:	4640      	mov	r0, r8
 80040c8:	e9cd 4400 	strd	r4, r4, [sp]
 80040cc:	f003 f800 	bl	80070d0 <BSP_STM32_GPIO_Init>
 80040d0:	e012      	b.n	80040f8 <BSP_STM32_Init_GPIO+0x3fc>
 80040d2:	bf00      	nop
 80040d4:	58020800 	.word	0x58020800
 80040d8:	58022000 	.word	0x58022000
 80040dc:	58021800 	.word	0x58021800
 80040e0:	58021400 	.word	0x58021400
 80040e4:	58021000 	.word	0x58021000
 80040e8:	58020c00 	.word	0x58020c00
 80040ec:	58020000 	.word	0x58020000
 80040f0:	58021c00 	.word	0x58021c00
 80040f4:	58020400 	.word	0x58020400
}
 80040f8:	4620      	mov	r0, r4
 80040fa:	b003      	add	sp, #12
 80040fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004100 <BSP_IncTick>:
}


void BSP_IncTick(void) {

	tickvalue += tickfrequency;
 8004100:	4a03      	ldr	r2, [pc, #12]	; (8004110 <BSP_IncTick+0x10>)
 8004102:	4b04      	ldr	r3, [pc, #16]	; (8004114 <BSP_IncTick+0x14>)
 8004104:	6819      	ldr	r1, [r3, #0]
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	440b      	add	r3, r1
 800410a:	6013      	str	r3, [r2, #0]

}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	24000384 	.word	0x24000384
 8004114:	24000000 	.word	0x24000000

08004118 <BSP_GetTick>:

uint32_t BSP_GetTick(void) {

	return tickvalue;
 8004118:	4b01      	ldr	r3, [pc, #4]	; (8004120 <BSP_GetTick+0x8>)
 800411a:	6818      	ldr	r0, [r3, #0]
}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	24000384 	.word	0x24000384

08004124 <BSP_Delay>:

void BSP_Delay(uint32_t delay) {

	uint32_t wait = delay + tickfrequency;
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <BSP_Delay+0x14>)
	return tickvalue;
 8004126:	4a05      	ldr	r2, [pc, #20]	; (800413c <BSP_Delay+0x18>)
	uint32_t wait = delay + tickfrequency;
 8004128:	681b      	ldr	r3, [r3, #0]
	return tickvalue;
 800412a:	6811      	ldr	r1, [r2, #0]
	uint32_t wait = delay + tickfrequency;
 800412c:	4418      	add	r0, r3
	return tickvalue;
 800412e:	6813      	ldr	r3, [r2, #0]
	uint32_t tickstart = BSP_GetTick();

	while ((BSP_GetTick() - tickstart) < wait) {}
 8004130:	1a5b      	subs	r3, r3, r1
 8004132:	4283      	cmp	r3, r0
 8004134:	d3fb      	bcc.n	800412e <BSP_Delay+0xa>

}
 8004136:	4770      	bx	lr
 8004138:	24000000 	.word	0x24000000
 800413c:	24000384 	.word	0x24000384

08004140 <BSP_Serial_Init>:
	BSP_STM32_UART_Transmit(USART2, pData, 1);
	return ch;
}


uint8_t BSP_Serial_Init(void) {
 8004140:	b530      	push	{r4, r5, lr}
	// Configure USART2 interface
	if (BSP_STM32_UART_Init(USART2, 115200, UART_WORDLENGTH_8B, UART_STOPBITS_1, UART_PARITY_NONE)) return BSP_ERROR;
 8004142:	2300      	movs	r3, #0
uint8_t BSP_Serial_Init(void) {
 8004144:	b085      	sub	sp, #20
	if (BSP_STM32_UART_Init(USART2, 115200, UART_WORDLENGTH_8B, UART_STOPBITS_1, UART_PARITY_NONE)) return BSP_ERROR;
 8004146:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800414a:	4815      	ldr	r0, [pc, #84]	; (80041a0 <BSP_Serial_Init+0x60>)
 800414c:	461a      	mov	r2, r3
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	f006 fc68 	bl	800aa24 <BSP_STM32_UART_Init>
 8004154:	b118      	cbz	r0, 800415e <BSP_Serial_Init+0x1e>
 8004156:	2401      	movs	r4, #1

	// Start listening on USART2 port
	BSP_STM32_UART_StartListen(USART2, &BSP_hserial_ctx, BSP_hserial.data_rx, SERIAL_BUF_SIZE);

	return BSP_OK;
}
 8004158:	4620      	mov	r0, r4
 800415a:	b005      	add	sp, #20
 800415c:	bd30      	pop	{r4, r5, pc}
	if (BSP_STM32_DMA_Init(DMA1_Stream3, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_BYTE, DMA_MDATAALIGN_BYTE, DMA_CIRCULAR, DMA_PRIORITY_LOW)) return BSP_ERROR;
 800415e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8004162:	4602      	mov	r2, r0
 8004164:	4601      	mov	r1, r0
 8004166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416a:	e9cd 5002 	strd	r5, r0, [sp, #8]
 800416e:	e9cd 0000 	strd	r0, r0, [sp]
 8004172:	480c      	ldr	r0, [pc, #48]	; (80041a4 <BSP_Serial_Init+0x64>)
 8004174:	f001 fd0a 	bl	8005b8c <BSP_STM32_DMA_Init>
 8004178:	2800      	cmp	r0, #0
 800417a:	d1ec      	bne.n	8004156 <BSP_Serial_Init+0x16>
	if (BSP_STM32_DMA_CtxLink(DMA1_Stream3, &BSP_hserial_ctx, DMA_REQUEST_USART2_RX)) return BSP_ERROR;
 800417c:	222b      	movs	r2, #43	; 0x2b
 800417e:	490a      	ldr	r1, [pc, #40]	; (80041a8 <BSP_Serial_Init+0x68>)
 8004180:	4808      	ldr	r0, [pc, #32]	; (80041a4 <BSP_Serial_Init+0x64>)
 8004182:	f001 fd37 	bl	8005bf4 <BSP_STM32_DMA_CtxLink>
 8004186:	4604      	mov	r4, r0
 8004188:	2800      	cmp	r0, #0
 800418a:	d1e4      	bne.n	8004156 <BSP_Serial_Init+0x16>
	BSP_STM32_UART_StartListen(USART2, &BSP_hserial_ctx, BSP_hserial.data_rx, SERIAL_BUF_SIZE);
 800418c:	462b      	mov	r3, r5
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <BSP_Serial_Init+0x6c>)
 8004190:	4905      	ldr	r1, [pc, #20]	; (80041a8 <BSP_Serial_Init+0x68>)
 8004192:	4803      	ldr	r0, [pc, #12]	; (80041a0 <BSP_Serial_Init+0x60>)
 8004194:	f006 fc9c 	bl	800aad0 <BSP_STM32_UART_StartListen>
}
 8004198:	4620      	mov	r0, r4
 800419a:	b005      	add	sp, #20
 800419c:	bd30      	pop	{r4, r5, pc}
 800419e:	bf00      	nop
 80041a0:	40004400 	.word	0x40004400
 80041a4:	40020058 	.word	0x40020058
 80041a8:	24000388 	.word	0x24000388
 80041ac:	380002ec 	.word	0x380002ec

080041b0 <USART2_IRQHandler>:
	return BSP_OK;
}


void USART2_IRQHandler(void) {
	BSP_STM32_UART_IRQHandler(USART2, &BSP_hserial_ctx);
 80041b0:	4901      	ldr	r1, [pc, #4]	; (80041b8 <USART2_IRQHandler+0x8>)
 80041b2:	4802      	ldr	r0, [pc, #8]	; (80041bc <USART2_IRQHandler+0xc>)
 80041b4:	f006 bcaa 	b.w	800ab0c <BSP_STM32_UART_IRQHandler>
 80041b8:	24000388 	.word	0x24000388
 80041bc:	40004400 	.word	0x40004400

080041c0 <BSP_USB_Init_MSC>:

//--------------------------------------------------------------------+
// BSP USB functions
//--------------------------------------------------------------------+

uint8_t BSP_USB_Init_MSC() {
 80041c0:	b508      	push	{r3, lr}
	usb_mode = USB_MODE_MSC;
 80041c2:	2201      	movs	r2, #1
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <BSP_USB_Init_MSC+0x18>)
 80041c6:	701a      	strb	r2, [r3, #0]
	BSP_STM32_PCD_EnableUSBVoltageDetector();
 80041c8:	f003 fda8 	bl	8007d1c <BSP_STM32_PCD_EnableUSBVoltageDetector>
	tud_init(TUD_OPT_RHPORT);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f00b ff4f 	bl	8010070 <tud_init>
	return BSP_OK;
}
 80041d2:	2000      	movs	r0, #0
 80041d4:	bd08      	pop	{r3, pc}
 80041d6:	bf00      	nop
 80041d8:	24000430 	.word	0x24000430

080041dc <BSP_USB_Task>:
	tud_disconnect();
	BSP_STM32_PCD_DisableUSBVoltageDetector();
	return BSP_OK;
}

void BSP_USB_Task() {
 80041dc:	b510      	push	{r4, lr}
	if (usb_mode == USB_MODE_NONE) return;
 80041de:	4c10      	ldr	r4, [pc, #64]	; (8004220 <BSP_USB_Task+0x44>)
void BSP_USB_Task() {
 80041e0:	b090      	sub	sp, #64	; 0x40
	if (usb_mode == USB_MODE_NONE) return;
 80041e2:	7823      	ldrb	r3, [r4, #0]
 80041e4:	b90b      	cbnz	r3, 80041ea <BSP_USB_Task+0xe>
		break;
	case USB_MODE_HID:
		// hid_task();
		break;
	}
}
 80041e6:	b010      	add	sp, #64	; 0x40
 80041e8:	bd10      	pop	{r4, pc}

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 80041ea:	2100      	movs	r1, #0
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	f00b ffae 	bl	8010150 <tud_task_ext>
	switch (usb_mode) {
 80041f4:	7823      	ldrb	r3, [r4, #0]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d1f5      	bne.n	80041e6 <BSP_USB_Task+0xa>
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
 80041fa:	2000      	movs	r0, #0
 80041fc:	f00a fb72 	bl	800e8e4 <tud_cdc_n_available>
  // connected() check for DTR bit
  // Most but not all terminal client set this when making connection
  // if ( tud_cdc_connected() )
  {
    // connected and there are data available
    if ( tud_cdc_available() )
 8004200:	2800      	cmp	r0, #0
 8004202:	d0f0      	beq.n	80041e6 <BSP_USB_Task+0xa>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
 8004204:	4669      	mov	r1, sp
 8004206:	2240      	movs	r2, #64	; 0x40
 8004208:	2000      	movs	r0, #0
 800420a:	f00a fb77 	bl	800e8fc <tud_cdc_n_read>
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
 800420e:	4669      	mov	r1, sp
  return tud_cdc_n_read(0, buffer, bufsize);
 8004210:	4602      	mov	r2, r0
  return tud_cdc_n_write(0, buffer, bufsize);
 8004212:	2000      	movs	r0, #0
 8004214:	f00a fbf2 	bl	800e9fc <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
 8004218:	2000      	movs	r0, #0
 800421a:	f00a fbab 	bl	800e974 <tud_cdc_n_write_flush>
      //    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
      tud_cdc_write(buf, count);
      tud_cdc_write_flush();
    }
  }
}
 800421e:	e7e2      	b.n	80041e6 <BSP_USB_Task+0xa>
 8004220:	24000430 	.word	0x24000430

08004224 <OTG_FS_IRQHandler>:
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8004224:	2000      	movs	r0, #0
 8004226:	f00d ba99 	b.w	801175c <dcd_int_handler>
 800422a:	bf00      	nop

0800422c <tud_mount_cb>:
void tud_mount_cb(void) {}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop

08004230 <tud_umount_cb>:
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop

08004234 <tud_suspend_cb>:
}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop

08004238 <tud_resume_cb>:
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop

0800423c <tud_descriptor_device_cb>:
	switch (usb_mode) {
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <tud_descriptor_device_cb+0x18>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d004      	beq.n	800424e <tud_descriptor_device_cb+0x12>
 8004244:	2b02      	cmp	r3, #2
 8004246:	4804      	ldr	r0, [pc, #16]	; (8004258 <tud_descriptor_device_cb+0x1c>)
 8004248:	bf18      	it	ne
 800424a:	2000      	movne	r0, #0
 800424c:	4770      	bx	lr
		return (uint8_t const *) &desc_device_msc;
 800424e:	4803      	ldr	r0, [pc, #12]	; (800425c <tud_descriptor_device_cb+0x20>)
}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	24000430 	.word	0x24000430
 8004258:	0801555c 	.word	0x0801555c
 800425c:	08015570 	.word	0x08015570

08004260 <tud_descriptor_configuration_cb>:
	switch (usb_mode) {
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <tud_descriptor_configuration_cb+0x18>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d004      	beq.n	8004272 <tud_descriptor_configuration_cb+0x12>
 8004268:	2b02      	cmp	r3, #2
 800426a:	4804      	ldr	r0, [pc, #16]	; (800427c <tud_descriptor_configuration_cb+0x1c>)
 800426c:	bf18      	it	ne
 800426e:	2000      	movne	r0, #0
 8004270:	4770      	bx	lr
		return desc_fs_conf_msc;
 8004272:	4803      	ldr	r0, [pc, #12]	; (8004280 <tud_descriptor_configuration_cb+0x20>)
}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	24000430 	.word	0x24000430
 800427c:	08015584 	.word	0x08015584
 8004280:	080155d0 	.word	0x080155d0

08004284 <tud_descriptor_string_cb>:
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8004284:	b538      	push	{r3, r4, r5, lr}
	if (index == 0) {
 8004286:	b948      	cbnz	r0, 800429c <tud_descriptor_string_cb+0x18>
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <tud_descriptor_string_cb+0x68>)
 800428a:	f44f 7341 	mov.w	r3, #772	; 0x304
 800428e:	4d18      	ldr	r5, [pc, #96]	; (80042f0 <tud_descriptor_string_cb+0x6c>)
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	8812      	ldrh	r2, [r2, #0]
 8004294:	806a      	strh	r2, [r5, #2]
	return _desc_str;
 8004296:	4816      	ldr	r0, [pc, #88]	; (80042f0 <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8004298:	802b      	strh	r3, [r5, #0]
}
 800429a:	bd38      	pop	{r3, r4, r5, pc}
		if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 800429c:	2804      	cmp	r0, #4
 800429e:	d81f      	bhi.n	80042e0 <tud_descriptor_string_cb+0x5c>
		const char* str = string_desc_arr[index];
 80042a0:	4b12      	ldr	r3, [pc, #72]	; (80042ec <tud_descriptor_string_cb+0x68>)
 80042a2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
		chr_count = (uint8_t) strlen(str);
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7fc f816 	bl	80002d8 <strlen>
 80042ac:	b2c0      	uxtb	r0, r0
		if ( chr_count > 31 ) chr_count = 31;
 80042ae:	281f      	cmp	r0, #31
 80042b0:	4602      	mov	r2, r0
 80042b2:	bf28      	it	cs
 80042b4:	221f      	movcs	r2, #31
		for(uint8_t i=0; i<chr_count; i++) _desc_str[1+i] = str[i];
 80042b6:	b1a8      	cbz	r0, 80042e4 <tud_descriptor_string_cb+0x60>
 80042b8:	4d0d      	ldr	r5, [pc, #52]	; (80042f0 <tud_descriptor_string_cb+0x6c>)
 80042ba:	1e60      	subs	r0, r4, #1
 80042bc:	2300      	movs	r3, #0
 80042be:	4629      	mov	r1, r5
 80042c0:	3301      	adds	r3, #1
 80042c2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f821 4f02 	strh.w	r4, [r1, #2]!
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d8f7      	bhi.n	80042c0 <tud_descriptor_string_cb+0x3c>
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 80042d0:	1c53      	adds	r3, r2, #1
	return _desc_str;
 80042d2:	4807      	ldr	r0, [pc, #28]	; (80042f0 <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80042dc:	802b      	strh	r3, [r5, #0]
	return _desc_str;
 80042de:	e7dc      	b.n	800429a <tud_descriptor_string_cb+0x16>
		if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 80042e0:	2000      	movs	r0, #0
}
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
		for(uint8_t i=0; i<chr_count; i++) _desc_str[1+i] = str[i];
 80042e4:	f240 3302 	movw	r3, #770	; 0x302
 80042e8:	4d01      	ldr	r5, [pc, #4]	; (80042f0 <tud_descriptor_string_cb+0x6c>)
 80042ea:	e7d4      	b.n	8004296 <tud_descriptor_string_cb+0x12>
 80042ec:	24000004 	.word	0x24000004
 80042f0:	240003f0 	.word	0x240003f0

080042f4 <tud_msc_read10_cb>:
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize) {
 80042f4:	b510      	push	{r4, lr}
 80042f6:	9c02      	ldr	r4, [sp, #8]
	if (BSP_SDCARD_ReadBlocks(buffer, lba, bn)) return -1;
 80042f8:	4618      	mov	r0, r3
 80042fa:	0a62      	lsrs	r2, r4, #9
 80042fc:	f7ff f904 	bl	8003508 <BSP_SDCARD_ReadBlocks>
	return (int32_t) bufsize;
 8004300:	2800      	cmp	r0, #0
}
 8004302:	bf0c      	ite	eq
 8004304:	4620      	moveq	r0, r4
 8004306:	f04f 30ff 	movne.w	r0, #4294967295
 800430a:	bd10      	pop	{r4, pc}

0800430c <tud_msc_write10_cb>:
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize) {
 800430c:	b510      	push	{r4, lr}
 800430e:	9c02      	ldr	r4, [sp, #8]
	if (BSP_SDCARD_WriteBlocks(buffer, lba, bn)) return -1;
 8004310:	4618      	mov	r0, r3
 8004312:	0a62      	lsrs	r2, r4, #9
 8004314:	f7ff f918 	bl	8003548 <BSP_SDCARD_WriteBlocks>
	return (int32_t) bufsize;
 8004318:	2800      	cmp	r0, #0
}
 800431a:	bf0c      	ite	eq
 800431c:	4620      	moveq	r0, r4
 800431e:	f04f 30ff 	movne.w	r0, #4294967295
 8004322:	bd10      	pop	{r4, pc}

08004324 <tud_msc_inquiry_cb>:
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4]) {
 8004324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const char vid[] = USB_MANUFACTURER;
 8004328:	4810      	ldr	r0, [pc, #64]	; (800436c <tud_msc_inquiry_cb+0x48>)
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4]) {
 800432a:	b088      	sub	sp, #32
 800432c:	4694      	mov	ip, r2
 800432e:	460d      	mov	r5, r1
 8004330:	461f      	mov	r7, r3
	const char vid[] = USB_MANUFACTURER;
 8004332:	ac01      	add	r4, sp, #4
	const char pid[] = USB_PRODUCT;
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <tud_msc_inquiry_cb+0x4c>)
	memcpy(vendor_id  , vid, strlen(vid));
 8004336:	ae01      	add	r6, sp, #4
	memcpy(product_rev, rev, strlen(rev));
 8004338:	f243 3856 	movw	r8, #13142	; 0x3356
	const char vid[] = USB_MANUFACTURER;
 800433c:	c807      	ldmia	r0, {r0, r1, r2}
 800433e:	c403      	stmia	r4!, {r0, r1}
	const char pid[] = USB_PRODUCT;
 8004340:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004342:	ac04      	add	r4, sp, #16
	memcpy(product_id , pid, strlen(pid));
 8004344:	46a6      	mov	lr, r4
	const char pid[] = USB_PRODUCT;
 8004346:	c407      	stmia	r4!, {r0, r1, r2}
	memcpy(vendor_id  , vid, strlen(vid));
 8004348:	ce03      	ldmia	r6!, {r0, r1}
 800434a:	6028      	str	r0, [r5, #0]
 800434c:	6069      	str	r1, [r5, #4]
	memcpy(product_id , pid, strlen(pid));
 800434e:	f88c 300c 	strb.w	r3, [ip, #12]
 8004352:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8004356:	f8cc 0000 	str.w	r0, [ip]
 800435a:	f8cc 1004 	str.w	r1, [ip, #4]
 800435e:	f8cc 2008 	str.w	r2, [ip, #8]
	memcpy(product_rev, rev, strlen(rev));
 8004362:	f8a7 8000 	strh.w	r8, [r7]
}
 8004366:	b008      	add	sp, #32
 8004368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800436c:	08015520 	.word	0x08015520
 8004370:	0801552c 	.word	0x0801552c

08004374 <tud_msc_test_unit_ready_cb>:
}
 8004374:	2001      	movs	r0, #1
 8004376:	4770      	bx	lr

08004378 <tud_msc_capacity_cb>:
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size) {
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	460d      	mov	r5, r1
 800437c:	4614      	mov	r4, r2
	*block_count  = BSP_SDCARD_GetBlockNo();
 800437e:	f7ff f903 	bl	8003588 <BSP_SDCARD_GetBlockNo>
 8004382:	6028      	str	r0, [r5, #0]
	*block_size = BSP_SDCARD_GetBlockSize();
 8004384:	f7ff f906 	bl	8003594 <BSP_SDCARD_GetBlockSize>
 8004388:	8020      	strh	r0, [r4, #0]
}
 800438a:	bd38      	pop	{r3, r4, r5, pc}

0800438c <tud_msc_scsi_cb>:
int32_t tud_msc_scsi_cb(uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize) {
 800438c:	b508      	push	{r3, lr}
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800438e:	2220      	movs	r2, #32
 8004390:	2300      	movs	r3, #0
 8004392:	2105      	movs	r1, #5
 8004394:	f00a fdd6 	bl	800ef44 <tud_msc_set_sense>
}
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	bd08      	pop	{r3, pc}
 800439e:	bf00      	nop

080043a0 <tud_msc_start_stop_cb>:
}
 80043a0:	2001      	movs	r0, #1
 80043a2:	4770      	bx	lr

080043a4 <tud_msc_request_sense_cb>:
}
 80043a4:	2000      	movs	r0, #0
 80043a6:	4770      	bx	lr

080043a8 <tud_msc_is_writable_cb>:
}
 80043a8:	2001      	movs	r0, #1
 80043aa:	4770      	bx	lr

080043ac <G2D_DrawFillRectBlend>:
	uint16_t ol = LCD_WIDTH - w;

	BSP_LCD_FillBuf(x1, y1, w, h, ol, color);
}

void G2D_DrawFillRectBlend(int16_t x, int16_t y, uint16_t width, uint16_t height, uint32_t color) {
 80043ac:	b510      	push	{r4, lr}
 80043ae:	b082      	sub	sp, #8
	uint16_t x1 = MAX(0, x);
	uint16_t y1 = MAX(0, y);
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 80043b0:	4402      	add	r2, r0
	uint16_t x1 = MAX(0, x);
 80043b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 80043b6:	440b      	add	r3, r1
void G2D_DrawFillRectBlend(int16_t x, int16_t y, uint16_t width, uint16_t height, uint32_t color) {
 80043b8:	9c04      	ldr	r4, [sp, #16]
	uint16_t y1 = MAX(0, y);
 80043ba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	uint16_t x1 = MAX(0, x);
 80043be:	b280      	uxth	r0, r0
	uint16_t w = x2 - x1;
	uint16_t h = y2 - y1;
	uint16_t ol = LCD_WIDTH - w;

	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 80043c0:	9401      	str	r4, [sp, #4]
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 80043c2:	f240 341f 	movw	r4, #799	; 0x31f
	uint16_t ol = LCD_WIDTH - w;
 80043c6:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t y1 = MAX(0, y);
 80043ca:	b289      	uxth	r1, r1
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 80043cc:	42a2      	cmp	r2, r4
 80043ce:	bfa8      	it	ge
 80043d0:	4622      	movge	r2, r4
 80043d2:	b292      	uxth	r2, r2
	uint16_t ol = LCD_WIDTH - w;
 80043d4:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t w = x2 - x1;
 80043d8:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 80043da:	fa1f f48c 	uxth.w	r4, ip
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 80043de:	f240 1cdf 	movw	ip, #479	; 0x1df
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 80043e2:	b292      	uxth	r2, r2
 80043e4:	9400      	str	r4, [sp, #0]
	uint16_t h = y2 - y1;
 80043e6:	4563      	cmp	r3, ip
 80043e8:	bfd4      	ite	le
 80043ea:	ebc1 0403 	rsble	r4, r1, r3
 80043ee:	ebc1 040c 	rsbgt	r4, r1, ip
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 80043f2:	b2a3      	uxth	r3, r4
 80043f4:	4c02      	ldr	r4, [pc, #8]	; (8004400 <G2D_DrawFillRectBlend+0x54>)
 80043f6:	6824      	ldr	r4, [r4, #0]
 80043f8:	47a0      	blx	r4
}
 80043fa:	b002      	add	sp, #8
 80043fc:	bd10      	pop	{r4, pc}
 80043fe:	bf00      	nop
 8004400:	2400025c 	.word	0x2400025c

08004404 <G2D_DrawCircle>:

void G2D_DrawCircle(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	ed2d 8b02 	vpush	{d8}
 800440c:	b089      	sub	sp, #36	; 0x24
	int32_t d;			/* Decision Variable */
	int32_t curx;		/* Current X Value */
	int32_t cury;		/* Current Y Value */

	d = 3 - (r << 1);
 800440e:	4614      	mov	r4, r2
	curx = 0;
 8004410:	f04f 0a00 	mov.w	sl, #0
 8004414:	f8df 9144 	ldr.w	r9, [pc, #324]	; 800455c <G2D_DrawCircle+0x158>
void G2D_DrawCircle(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8004418:	9306      	str	r3, [sp, #24]
	uint32_t offset = BSP_LCD_GetEditFrameAddr();

	BSP_LCD_DMA2D_Wait();

	while (curx <= cury) {
		BSP_LCD_UpdatePixel(offset, (x + curx), (y - cury), color);
 800441a:	b28b      	uxth	r3, r1
	d = 3 - (r << 1);
 800441c:	9204      	str	r2, [sp, #16]
 800441e:	0052      	lsls	r2, r2, #1
		BSP_LCD_UpdatePixel(offset, (x + curx), (y - cury), color);
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	b283      	uxth	r3, r0
 8004424:	fa1f fb84 	uxth.w	fp, r4
 8004428:	9303      	str	r3, [sp, #12]
	d = 3 - (r << 1);
 800442a:	f1c2 0303 	rsb	r3, r2, #3
 800442e:	9305      	str	r3, [sp, #20]
	uint32_t offset = BSP_LCD_GetEditFrameAddr();
 8004430:	f7fe feb2 	bl	8003198 <BSP_LCD_GetEditFrameAddr>
	BSP_LCD_DMA2D_Wait();
 8004434:	4a48      	ldr	r2, [pc, #288]	; (8004558 <G2D_DrawCircle+0x154>)
	uint32_t offset = BSP_LCD_GetEditFrameAddr();
 8004436:	9002      	str	r0, [sp, #8]
	BSP_LCD_DMA2D_Wait();
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	4790      	blx	r2
	while (curx <= cury) {
 800443c:	9802      	ldr	r0, [sp, #8]
 800443e:	9b06      	ldr	r3, [sp, #24]
 8004440:	4606      	mov	r6, r0
		BSP_LCD_UpdatePixel(offset, (x + curx), (y - cury), color);
 8004442:	9f03      	ldr	r7, [sp, #12]
 8004444:	fa1f f18a 	uxth.w	r1, sl
 8004448:	9d01      	ldr	r5, [sp, #4]
 800444a:	4630      	mov	r0, r6
 800444c:	eb07 0801 	add.w	r8, r7, r1
 8004450:	f8d9 4000 	ldr.w	r4, [r9]
 8004454:	eba5 020b 	sub.w	r2, r5, fp
 8004458:	9102      	str	r1, [sp, #8]
 800445a:	fa0f f888 	sxth.w	r8, r8
 800445e:	9306      	str	r3, [sp, #24]
 8004460:	b212      	sxth	r2, r2
 8004462:	4641      	mov	r1, r8
 8004464:	9201      	str	r2, [sp, #4]
 8004466:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x - curx), (y - cury), color);
 8004468:	9902      	ldr	r1, [sp, #8]
 800446a:	4630      	mov	r0, r6
 800446c:	9703      	str	r7, [sp, #12]
 800446e:	1a7f      	subs	r7, r7, r1
 8004470:	9a01      	ldr	r2, [sp, #4]
 8004472:	f8d9 4000 	ldr.w	r4, [r9]
 8004476:	b23b      	sxth	r3, r7
 8004478:	ee08 3a10 	vmov	s16, r3
 800447c:	9b06      	ldr	r3, [sp, #24]
 800447e:	ee18 1a10 	vmov	r1, s16
 8004482:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x + cury), (y - curx), color);
 8004484:	9f03      	ldr	r7, [sp, #12]
 8004486:	9902      	ldr	r1, [sp, #8]
 8004488:	4630      	mov	r0, r6
 800448a:	eb0b 0407 	add.w	r4, fp, r7
 800448e:	9b06      	ldr	r3, [sp, #24]
 8004490:	1a6a      	subs	r2, r5, r1
 8004492:	9501      	str	r5, [sp, #4]
 8004494:	b224      	sxth	r4, r4
 8004496:	f8d9 5000 	ldr.w	r5, [r9]
 800449a:	b212      	sxth	r2, r2
 800449c:	9307      	str	r3, [sp, #28]
 800449e:	4621      	mov	r1, r4
 80044a0:	9206      	str	r2, [sp, #24]
 80044a2:	47a8      	blx	r5
		BSP_LCD_UpdatePixel(offset, (x - cury), (y - curx), color);
 80044a4:	eba7 050b 	sub.w	r5, r7, fp
 80044a8:	9b07      	ldr	r3, [sp, #28]
 80044aa:	9a06      	ldr	r2, [sp, #24]
 80044ac:	4630      	mov	r0, r6
 80044ae:	b22d      	sxth	r5, r5
 80044b0:	f8d9 7000 	ldr.w	r7, [r9]
 80044b4:	9306      	str	r3, [sp, #24]
 80044b6:	4629      	mov	r1, r5
 80044b8:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x + curx), (y + cury), color);
 80044ba:	9b01      	ldr	r3, [sp, #4]
 80044bc:	4641      	mov	r1, r8
 80044be:	4630      	mov	r0, r6
 80044c0:	eb0b 0203 	add.w	r2, fp, r3
 80044c4:	9b06      	ldr	r3, [sp, #24]
 80044c6:	f8d9 7000 	ldr.w	r7, [r9]
 80044ca:	b212      	sxth	r2, r2
 80044cc:	9307      	str	r3, [sp, #28]
 80044ce:	9206      	str	r2, [sp, #24]
 80044d0:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x - curx), (y + cury), color);
 80044d2:	9b07      	ldr	r3, [sp, #28]
 80044d4:	ee18 1a10 	vmov	r1, s16
 80044d8:	9a06      	ldr	r2, [sp, #24]
 80044da:	4630      	mov	r0, r6
 80044dc:	f8d9 7000 	ldr.w	r7, [r9]
 80044e0:	9306      	str	r3, [sp, #24]
 80044e2:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x + cury), (y + curx), color);
 80044e4:	4630      	mov	r0, r6
 80044e6:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 80044ea:	185a      	adds	r2, r3, r1
 80044ec:	9b06      	ldr	r3, [sp, #24]
 80044ee:	4621      	mov	r1, r4
 80044f0:	f8d9 4000 	ldr.w	r4, [r9]
 80044f4:	b212      	sxth	r2, r2
 80044f6:	9302      	str	r3, [sp, #8]
 80044f8:	9206      	str	r2, [sp, #24]
 80044fa:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x - cury), (y + curx), color);
 80044fc:	9b02      	ldr	r3, [sp, #8]
 80044fe:	4629      	mov	r1, r5
 8004500:	9a06      	ldr	r2, [sp, #24]
 8004502:	4630      	mov	r0, r6
 8004504:	f8d9 4000 	ldr.w	r4, [r9]
 8004508:	47a0      	blx	r4

		if (d < 0) {
			d += (curx << 2) + 6;
 800450a:	9b05      	ldr	r3, [sp, #20]
		} else {
			d += ((curx - cury) << 2) + 10;
 800450c:	9804      	ldr	r0, [sp, #16]
		if (d < 0) {
 800450e:	2b00      	cmp	r3, #0
			d += (curx << 2) + 6;
 8004510:	eb03 018a 	add.w	r1, r3, sl, lsl #2
			d += ((curx - cury) << 2) + 10;
 8004514:	ebaa 0200 	sub.w	r2, sl, r0
 8004518:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		if (d < 0) {
 800451c:	9b02      	ldr	r3, [sp, #8]
 800451e:	db0e      	blt.n	800453e <G2D_DrawCircle+0x13a>
			cury--;
 8004520:	1e41      	subs	r1, r0, #1
		}
		curx++;
 8004522:	f10a 0a01 	add.w	sl, sl, #1
			d += ((curx - cury) << 2) + 10;
 8004526:	320a      	adds	r2, #10
	while (curx <= cury) {
 8004528:	4551      	cmp	r1, sl
 800452a:	fa1f fb81 	uxth.w	fp, r1
			cury--;
 800452e:	9104      	str	r1, [sp, #16]
			d += ((curx - cury) << 2) + 10;
 8004530:	9205      	str	r2, [sp, #20]
	while (curx <= cury) {
 8004532:	da86      	bge.n	8004442 <G2D_DrawCircle+0x3e>
	}
}
 8004534:	b009      	add	sp, #36	; 0x24
 8004536:	ecbd 8b02 	vpop	{d8}
 800453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curx++;
 800453e:	f10a 0a01 	add.w	sl, sl, #1
			d += (curx << 2) + 6;
 8004542:	1d8a      	adds	r2, r1, #6
	while (curx <= cury) {
 8004544:	4582      	cmp	sl, r0
			d += (curx << 2) + 6;
 8004546:	9205      	str	r2, [sp, #20]
	while (curx <= cury) {
 8004548:	f77f af7b 	ble.w	8004442 <G2D_DrawCircle+0x3e>
}
 800454c:	b009      	add	sp, #36	; 0x24
 800454e:	ecbd 8b02 	vpop	{d8}
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	24000254 	.word	0x24000254
 800455c:	24000264 	.word	0x24000264

08004560 <G2D_DrawFillCircleBlend>:
		curx++;
	}
}


void G2D_DrawFillCircleBlend(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8004560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t  d;    	/* Decision Variable */
	int32_t  curx;	/* Current X Value */
	int32_t  cury;	/* Current Y Value */

	d = 3 - (r << 1);
 8004564:	4616      	mov	r6, r2
 8004566:	b282      	uxth	r2, r0
void G2D_DrawFillCircleBlend(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8004568:	b087      	sub	sp, #28
	curx = 0;
	cury = r;

	while (curx <= cury) {
		if(cury > 0) {
			G2D_DrawHLineBlend(x - cury, y + curx, 2 * cury + 1, color);
 800456a:	fa1f fb81 	uxth.w	fp, r1
	d = 3 - (r << 1);
 800456e:	0074      	lsls	r4, r6, #1
 8004570:	1e97      	subs	r7, r2, #2
void G2D_DrawFillCircleBlend(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8004572:	9305      	str	r3, [sp, #20]
	curx = 0;
 8004574:	2500      	movs	r5, #0
 8004576:	b2bf      	uxth	r7, r7
	if (y >= LCD_HEIGHT) return;
 8004578:	f10b 33ff 	add.w	r3, fp, #4294967295
	d = 3 - (r << 1);
 800457c:	f1c4 0403 	rsb	r4, r4, #3
	while (curx <= cury) {
 8004580:	9203      	str	r2, [sp, #12]
	if (y >= LCD_HEIGHT) return;
 8004582:	9304      	str	r3, [sp, #16]
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004584:	9702      	str	r7, [sp, #8]
		if(cury > 0) {
 8004586:	b9a6      	cbnz	r6, 80045b2 <G2D_DrawFillCircleBlend+0x52>
			G2D_DrawHLineBlend(x - cury, y - curx, 2 * cury + 1, color);
		}

		if(curx > 0) {
 8004588:	2d00      	cmp	r5, #0
 800458a:	d17d      	bne.n	8004688 <G2D_DrawFillCircleBlend+0x128>
			G2D_DrawHLineBlend(x - curx, y - cury, 2 * curx + 1, color);
			G2D_DrawHLineBlend(x - curx, y + cury, 2 * curx + 1, color);
		}
		if (d < 0) {
 800458c:	2c00      	cmp	r4, #0
 800458e:	f2c0 80e5 	blt.w	800475c <G2D_DrawFillCircleBlend+0x1fc>
	while (curx <= cury) {
 8004592:	9a02      	ldr	r2, [sp, #8]
			d += (curx << 2) + 6;
		} else {
			d += ((curx - cury) << 2) + 10;
 8004594:	1bab      	subs	r3, r5, r6
			cury--;
 8004596:	3e01      	subs	r6, #1
		}
		curx++;
 8004598:	3501      	adds	r5, #1
	while (curx <= cury) {
 800459a:	1ed7      	subs	r7, r2, #3
			d += ((curx - cury) << 2) + 10;
 800459c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	while (curx <= cury) {
 80045a0:	42ae      	cmp	r6, r5
 80045a2:	b2ba      	uxth	r2, r7
			d += ((curx - cury) << 2) + 10;
 80045a4:	f103 040a 	add.w	r4, r3, #10
	while (curx <= cury) {
 80045a8:	9202      	str	r2, [sp, #8]
 80045aa:	daec      	bge.n	8004586 <G2D_DrawFillCircleBlend+0x26>
	}
}
 80045ac:	b007      	add	sp, #28
 80045ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			G2D_DrawHLineBlend(x - cury, y + curx, 2 * cury + 1, color);
 80045b2:	b2b3      	uxth	r3, r6
 80045b4:	9a03      	ldr	r2, [sp, #12]
 80045b6:	fa1f f985 	uxth.w	r9, r5
 80045ba:	eba2 0803 	sub.w	r8, r2, r3
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	eb0b 0109 	add.w	r1, fp, r9
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	fa1f f888 	uxth.w	r8, r8
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	b289      	uxth	r1, r1
 80045ce:	fa0f fa82 	sxth.w	sl, r2
 80045d2:	b292      	uxth	r2, r2
	if (length < 0) {x -= length + 1; length = -length;}
 80045d4:	f1ba 0f00 	cmp.w	sl, #0
 80045d8:	f2c0 80d7 	blt.w	800478a <G2D_DrawFillCircleBlend+0x22a>
 80045dc:	b20b      	sxth	r3, r1
			G2D_DrawHLineBlend(x - cury, y + curx, 2 * cury + 1, color);
 80045de:	fa0f f888 	sxth.w	r8, r8
	if (y < 1) return;
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	dd23      	ble.n	800462e <G2D_DrawFillCircleBlend+0xce>
	if (y >= LCD_HEIGHT) return;
 80045e6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80045ea:	da20      	bge.n	800462e <G2D_DrawFillCircleBlend+0xce>
	if (x >= LCD_WIDTH) return;
 80045ec:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
	if ((x + length) < 1) return;
 80045f0:	eb08 030a 	add.w	r3, r8, sl
	if (x >= LCD_WIDTH) return;
 80045f4:	da1b      	bge.n	800462e <G2D_DrawFillCircleBlend+0xce>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	dd19      	ble.n	800462e <G2D_DrawFillCircleBlend+0xce>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80045fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 80045fe:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004602:	9a05      	ldr	r2, [sp, #20]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004604:	bfa8      	it	ge
 8004606:	f44f 7348 	movge.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 800460a:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 800460c:	9201      	str	r2, [sp, #4]
	uint16_t lo = LCD_WIDTH - l;
 800460e:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004612:	b29a      	uxth	r2, r3
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004614:	4b64      	ldr	r3, [pc, #400]	; (80047a8 <G2D_DrawFillCircleBlend+0x248>)
	uint16_t lo = LCD_WIDTH - l;
 8004616:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 800461a:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	fa1f fc8c 	uxth.w	ip, ip
 8004622:	461f      	mov	r7, r3
 8004624:	b292      	uxth	r2, r2
 8004626:	2301      	movs	r3, #1
 8004628:	f8cd c000 	str.w	ip, [sp]
 800462c:	47b8      	blx	r7
	if (y >= LCD_HEIGHT) return;
 800462e:	9b04      	ldr	r3, [sp, #16]
			G2D_DrawHLineBlend(x - cury, y - curx, 2 * cury + 1, color);
 8004630:	ebab 0109 	sub.w	r1, fp, r9
	if (y >= LCD_HEIGHT) return;
 8004634:	eba3 0909 	sub.w	r9, r3, r9
			G2D_DrawHLineBlend(x - cury, y - curx, 2 * cury + 1, color);
 8004638:	b289      	uxth	r1, r1
	if (y >= LCD_HEIGHT) return;
 800463a:	fa1f f989 	uxth.w	r9, r9
 800463e:	f5b9 7fef 	cmp.w	r9, #478	; 0x1de
 8004642:	d8a1      	bhi.n	8004588 <G2D_DrawFillCircleBlend+0x28>
	if (x >= LCD_WIDTH) return;
 8004644:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
	if ((x + length) < 1) return;
 8004648:	eb08 020a 	add.w	r2, r8, sl
	if (x >= LCD_WIDTH) return;
 800464c:	da9c      	bge.n	8004588 <G2D_DrawFillCircleBlend+0x28>
 800464e:	2a00      	cmp	r2, #0
 8004650:	dd9a      	ble.n	8004588 <G2D_DrawFillCircleBlend+0x28>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004652:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004656:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 800465a:	9b05      	ldr	r3, [sp, #20]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 800465c:	bfa8      	it	ge
 800465e:	f44f 7248 	movge.w	r2, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004662:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004664:	9301      	str	r3, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004666:	b292      	uxth	r2, r2
	uint16_t lo = LCD_WIDTH - l;
 8004668:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 800466c:	4b4e      	ldr	r3, [pc, #312]	; (80047a8 <G2D_DrawFillCircleBlend+0x248>)
	uint16_t lo = LCD_WIDTH - l;
 800466e:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 8004672:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004674:	681f      	ldr	r7, [r3, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	fa1f fc8c 	uxth.w	ip, ip
 800467c:	b292      	uxth	r2, r2
 800467e:	f8cd c000 	str.w	ip, [sp]
 8004682:	47b8      	blx	r7
		if(curx > 0) {
 8004684:	2d00      	cmp	r5, #0
 8004686:	d081      	beq.n	800458c <G2D_DrawFillCircleBlend+0x2c>
			G2D_DrawHLineBlend(x - curx, y - cury, 2 * curx + 1, color);
 8004688:	fa1f f885 	uxth.w	r8, r5
 800468c:	fa1f fa86 	uxth.w	sl, r6
 8004690:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8004694:	ebab 020a 	sub.w	r2, fp, sl
 8004698:	b29b      	uxth	r3, r3
 800469a:	b291      	uxth	r1, r2
 800469c:	f103 0901 	add.w	r9, r3, #1
 80046a0:	b212      	sxth	r2, r2
 80046a2:	fa0f f989 	sxth.w	r9, r9
	if (length < 0) {x -= length + 1; length = -length;}
 80046a6:	f1b9 0f00 	cmp.w	r9, #0
 80046aa:	db66      	blt.n	800477a <G2D_DrawFillCircleBlend+0x21a>
 80046ac:	9b03      	ldr	r3, [sp, #12]
	if (y < 1) return;
 80046ae:	2a00      	cmp	r2, #0
 80046b0:	eba3 0808 	sub.w	r8, r3, r8
 80046b4:	fa0f f888 	sxth.w	r8, r8
 80046b8:	dd22      	ble.n	8004700 <G2D_DrawFillCircleBlend+0x1a0>
	if (y >= LCD_HEIGHT) return;
 80046ba:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 80046be:	da1f      	bge.n	8004700 <G2D_DrawFillCircleBlend+0x1a0>
	if (x >= LCD_WIDTH) return;
 80046c0:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
	if ((x + length) < 1) return;
 80046c4:	eb08 0309 	add.w	r3, r8, r9
	if (x >= LCD_WIDTH) return;
 80046c8:	da1a      	bge.n	8004700 <G2D_DrawFillCircleBlend+0x1a0>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	dd18      	ble.n	8004700 <G2D_DrawFillCircleBlend+0x1a0>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80046ce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 80046d2:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046d6:	9a05      	ldr	r2, [sp, #20]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80046d8:	bfa8      	it	ge
 80046da:	f44f 7348 	movge.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 80046de:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046e0:	9201      	str	r2, [sp, #4]
	uint16_t lo = LCD_WIDTH - l;
 80046e2:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80046e6:	b29a      	uxth	r2, r3
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046e8:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <G2D_DrawFillCircleBlend+0x248>)
	uint16_t lo = LCD_WIDTH - l;
 80046ea:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 80046ee:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046f0:	681f      	ldr	r7, [r3, #0]
 80046f2:	2301      	movs	r3, #1
 80046f4:	fa1f fc8c 	uxth.w	ip, ip
 80046f8:	b292      	uxth	r2, r2
 80046fa:	f8cd c000 	str.w	ip, [sp]
 80046fe:	47b8      	blx	r7
			G2D_DrawHLineBlend(x - curx, y + cury, 2 * curx + 1, color);
 8004700:	eb0b 010a 	add.w	r1, fp, sl
 8004704:	b289      	uxth	r1, r1
	if (y >= LCD_HEIGHT) return;
 8004706:	1e4b      	subs	r3, r1, #1
 8004708:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 800470c:	f63f af3e 	bhi.w	800458c <G2D_DrawFillCircleBlend+0x2c>
	if (x >= LCD_WIDTH) return;
 8004710:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
	if ((x + length) < 1) return;
 8004714:	44c1      	add	r9, r8
	if (x >= LCD_WIDTH) return;
 8004716:	f6bf af39 	bge.w	800458c <G2D_DrawFillCircleBlend+0x2c>
 800471a:	f1b9 0f00 	cmp.w	r9, #0
 800471e:	f77f af35 	ble.w	800458c <G2D_DrawFillCircleBlend+0x2c>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004722:	f5b9 7f48 	cmp.w	r9, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004726:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 800472a:	9b05      	ldr	r3, [sp, #20]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 800472c:	bfa8      	it	ge
 800472e:	f44f 7948 	movge.w	r9, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004732:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004734:	9301      	str	r3, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004736:	fa1f f989 	uxth.w	r9, r9
	uint16_t lo = LCD_WIDTH - l;
 800473a:	f500 7248 	add.w	r2, r0, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 800473e:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <G2D_DrawFillCircleBlend+0x248>)
	uint16_t lo = LCD_WIDTH - l;
 8004740:	eba2 0209 	sub.w	r2, r2, r9
	uint16_t l = x1 - x0;
 8004744:	eba9 0900 	sub.w	r9, r9, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004748:	681f      	ldr	r7, [r3, #0]
 800474a:	2301      	movs	r3, #1
 800474c:	b292      	uxth	r2, r2
 800474e:	9200      	str	r2, [sp, #0]
 8004750:	fa1f f289 	uxth.w	r2, r9
 8004754:	47b8      	blx	r7
		if (d < 0) {
 8004756:	2c00      	cmp	r4, #0
 8004758:	f6bf af1b 	bge.w	8004592 <G2D_DrawFillCircleBlend+0x32>
	while (curx <= cury) {
 800475c:	9b02      	ldr	r3, [sp, #8]
			d += (curx << 2) + 6;
 800475e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
		curx++;
 8004762:	3501      	adds	r5, #1
	while (curx <= cury) {
 8004764:	1edf      	subs	r7, r3, #3
			d += (curx << 2) + 6;
 8004766:	3406      	adds	r4, #6
	while (curx <= cury) {
 8004768:	42b5      	cmp	r5, r6
 800476a:	b2bb      	uxth	r3, r7
 800476c:	9302      	str	r3, [sp, #8]
 800476e:	f73f af1d 	bgt.w	80045ac <G2D_DrawFillCircleBlend+0x4c>
		if(cury > 0) {
 8004772:	2e00      	cmp	r6, #0
 8004774:	f43f af08 	beq.w	8004588 <G2D_DrawFillCircleBlend+0x28>
 8004778:	e71b      	b.n	80045b2 <G2D_DrawFillCircleBlend+0x52>
	if (length < 0) {x -= length + 1; length = -length;}
 800477a:	43db      	mvns	r3, r3
	if (y < 1) return;
 800477c:	2a00      	cmp	r2, #0
	if (length < 0) {x -= length + 1; length = -length;}
 800477e:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8004782:	fa0f f983 	sxth.w	r9, r3
	if (y < 1) return;
 8004786:	dc98      	bgt.n	80046ba <G2D_DrawFillCircleBlend+0x15a>
 8004788:	e7ba      	b.n	8004700 <G2D_DrawFillCircleBlend+0x1a0>
	if (length < 0) {x -= length + 1; length = -length;}
 800478a:	43db      	mvns	r3, r3
 800478c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004790:	fa0f fa83 	sxth.w	sl, r3
 8004794:	eba8 0802 	sub.w	r8, r8, r2
 8004798:	b20b      	sxth	r3, r1
 800479a:	fa0f f888 	sxth.w	r8, r8
	if (y < 1) return;
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f73f af21 	bgt.w	80045e6 <G2D_DrawFillCircleBlend+0x86>
 80047a4:	e743      	b.n	800462e <G2D_DrawFillCircleBlend+0xce>
 80047a6:	bf00      	nop
 80047a8:	2400025c 	.word	0x2400025c

080047ac <G2D_DrawRoundRect>:


void G2D_DrawRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	b08d      	sub	sp, #52	; 0x34
 80047b2:	461f      	mov	r7, r3
 80047b4:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	int32_t  cury;	/* Current Y Value */

	uint16_t radius2 = radius << 1;

	if (height < radius2) return;
	if (width < radius2) return;
 80047b8:	4297      	cmp	r7, r2
void G2D_DrawRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 80047ba:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
	uint16_t radius2 = radius << 1;
 80047be:	ea4f 0345 	mov.w	r3, r5, lsl #1
 80047c2:	b29e      	uxth	r6, r3
	if (width < radius2) return;
 80047c4:	463b      	mov	r3, r7
 80047c6:	bf28      	it	cs
 80047c8:	4613      	movcs	r3, r2
 80047ca:	429e      	cmp	r6, r3
 80047cc:	d902      	bls.n	80047d4 <G2D_DrawRoundRect+0x28>
			cury--;
		}
		curx++;
	}

}
 80047ce:	b00d      	add	sp, #52	; 0x34
 80047d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int16_t x0 = x + radius;
 80047d4:	b280      	uxth	r0, r0
 80047d6:	460c      	mov	r4, r1
 80047d8:	9203      	str	r2, [sp, #12]
 80047da:	9002      	str	r0, [sp, #8]
	uint32_t offset = BSP_LCD_GetEditFrameAddr();
 80047dc:	f7fe fcdc 	bl	8003198 <BSP_LCD_GetEditFrameAddr>
 80047e0:	4682      	mov	sl, r0
	int16_t y0 = y + radius;
 80047e2:	b2a1      	uxth	r1, r4
	int16_t x1 = x + width - radius;
 80047e4:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
	cury = radius;
 80047e8:	9503      	str	r5, [sp, #12]
	int16_t x1 = x + width - radius;
 80047ea:	1883      	adds	r3, r0, r2
	if (width > radius2) {
 80047ec:	4296      	cmp	r6, r2
	int16_t x1 = x + width - radius;
 80047ee:	b29c      	uxth	r4, r3
	int16_t y1 = y + height - radius;
 80047f0:	eb01 0307 	add.w	r3, r1, r7
 80047f4:	fa1f f883 	uxth.w	r8, r3
	int16_t x0 = x + radius;
 80047f8:	eb00 0305 	add.w	r3, r0, r5
	int16_t x1 = x + width - radius;
 80047fc:	9409      	str	r4, [sp, #36]	; 0x24
	int16_t x0 = x + radius;
 80047fe:	b298      	uxth	r0, r3
	int16_t y0 = y + radius;
 8004800:	eb01 0305 	add.w	r3, r1, r5
 8004804:	b29b      	uxth	r3, r3
	int16_t x0 = x + radius;
 8004806:	9005      	str	r0, [sp, #20]
	int16_t y0 = y + radius;
 8004808:	9304      	str	r3, [sp, #16]
	int16_t x1 = x + width - radius;
 800480a:	eba4 0305 	sub.w	r3, r4, r5
 800480e:	b29b      	uxth	r3, r3
 8004810:	9306      	str	r3, [sp, #24]
	int16_t y1 = y + height - radius;
 8004812:	eba8 0305 	sub.w	r3, r8, r5
 8004816:	b29b      	uxth	r3, r3
 8004818:	9307      	str	r3, [sp, #28]
	d = 3 - radius2;
 800481a:	f1c6 0303 	rsb	r3, r6, #3
 800481e:	9308      	str	r3, [sp, #32]
	if (width > radius2) {
 8004820:	f0c0 8088 	bcc.w	8004934 <G2D_DrawRoundRect+0x188>
	if (height > radius2) {
 8004824:	42be      	cmp	r6, r7
 8004826:	f0c0 80bd 	bcc.w	80049a4 <G2D_DrawRoundRect+0x1f8>
	BSP_LCD_DMA2D_Wait();
 800482a:	b2ab      	uxth	r3, r5
 800482c:	4daf      	ldr	r5, [pc, #700]	; (8004aec <G2D_DrawRoundRect+0x340>)
 800482e:	9302      	str	r3, [sp, #8]
 8004830:	4baf      	ldr	r3, [pc, #700]	; (8004af0 <G2D_DrawRoundRect+0x344>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4798      	blx	r3
	curx = 0;
 8004836:	2200      	movs	r2, #0
 8004838:	465b      	mov	r3, fp
 800483a:	4650      	mov	r0, sl
 800483c:	4693      	mov	fp, r2
		BSP_LCD_UpdatePixel(offset, (x0 - curx), (y0 - cury), color);
 800483e:	fa1f f48b 	uxth.w	r4, fp
 8004842:	9904      	ldr	r1, [sp, #16]
 8004844:	9a02      	ldr	r2, [sp, #8]
 8004846:	9e05      	ldr	r6, [sp, #20]
 8004848:	1a8f      	subs	r7, r1, r2
 800484a:	9317      	str	r3, [sp, #92]	; 0x5c
 800484c:	eba6 0904 	sub.w	r9, r6, r4
 8004850:	682e      	ldr	r6, [r5, #0]
 8004852:	b23f      	sxth	r7, r7
 8004854:	9009      	str	r0, [sp, #36]	; 0x24
 8004856:	fa0f f989 	sxth.w	r9, r9
 800485a:	463a      	mov	r2, r7
 800485c:	4649      	mov	r1, r9
 800485e:	47b0      	blx	r6
		BSP_LCD_UpdatePixel(offset, (x0 - cury), (y0 - curx), color);
 8004860:	9805      	ldr	r0, [sp, #20]
 8004862:	9a02      	ldr	r2, [sp, #8]
 8004864:	9904      	ldr	r1, [sp, #16]
 8004866:	eba0 0802 	sub.w	r8, r0, r2
 800486a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800486c:	eba1 0a04 	sub.w	sl, r1, r4
 8004870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004872:	fa0f f888 	sxth.w	r8, r8
 8004876:	682e      	ldr	r6, [r5, #0]
 8004878:	fa0f fa8a 	sxth.w	sl, sl
 800487c:	4641      	mov	r1, r8
 800487e:	4652      	mov	r2, sl
 8004880:	47b0      	blx	r6
		BSP_LCD_UpdatePixel(offset, (x1 + curx), (y0 - cury), color);
 8004882:	9906      	ldr	r1, [sp, #24]
 8004884:	463a      	mov	r2, r7
 8004886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004888:	190e      	adds	r6, r1, r4
 800488a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800488c:	682f      	ldr	r7, [r5, #0]
 800488e:	b236      	sxth	r6, r6
 8004890:	4631      	mov	r1, r6
 8004892:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x1 + cury), (y0 - curx), color);
 8004894:	9906      	ldr	r1, [sp, #24]
 8004896:	9b02      	ldr	r3, [sp, #8]
 8004898:	4652      	mov	r2, sl
 800489a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800489c:	eb01 0a03 	add.w	sl, r1, r3
 80048a0:	682f      	ldr	r7, [r5, #0]
 80048a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048a4:	fa0f fa8a 	sxth.w	sl, sl
 80048a8:	4651      	mov	r1, sl
 80048aa:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x0 - curx), (y1 + cury), color);
 80048ac:	9807      	ldr	r0, [sp, #28]
 80048ae:	9b02      	ldr	r3, [sp, #8]
 80048b0:	4649      	mov	r1, r9
 80048b2:	682f      	ldr	r7, [r5, #0]
 80048b4:	eb00 0903 	add.w	r9, r0, r3
 80048b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048bc:	fa0f f989 	sxth.w	r9, r9
 80048c0:	464a      	mov	r2, r9
 80048c2:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x0 - cury), (y1 + curx), color);
 80048c4:	9807      	ldr	r0, [sp, #28]
 80048c6:	4641      	mov	r1, r8
 80048c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048ca:	1902      	adds	r2, r0, r4
 80048cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ce:	682f      	ldr	r7, [r5, #0]
 80048d0:	b212      	sxth	r2, r2
 80048d2:	900a      	str	r0, [sp, #40]	; 0x28
 80048d4:	9209      	str	r2, [sp, #36]	; 0x24
 80048d6:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x1 + cury), (y1 + curx), color);
 80048d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80048da:	4651      	mov	r1, sl
 80048dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048e0:	682c      	ldr	r4, [r5, #0]
 80048e2:	9009      	str	r0, [sp, #36]	; 0x24
 80048e4:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x1 + curx), (y1 + cury), color);
 80048e6:	464a      	mov	r2, r9
 80048e8:	4631      	mov	r1, r6
 80048ea:	682c      	ldr	r4, [r5, #0]
 80048ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048f0:	47a0      	blx	r4
		if (d < 0) {
 80048f2:	9b08      	ldr	r3, [sp, #32]
			d += ((curx - cury) << 2) + 10;
 80048f4:	9c03      	ldr	r4, [sp, #12]
		if (d < 0) {
 80048f6:	2b00      	cmp	r3, #0
			d += (curx << 2) + 6;
 80048f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
			d += ((curx - cury) << 2) + 10;
 80048fc:	ebab 0204 	sub.w	r2, fp, r4
		if (d < 0) {
 8004900:	9809      	ldr	r0, [sp, #36]	; 0x24
			d += ((curx - cury) << 2) + 10;
 8004902:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		if (d < 0) {
 8004906:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004908:	db0b      	blt.n	8004922 <G2D_DrawRoundRect+0x176>
			cury--;
 800490a:	1e61      	subs	r1, r4, #1
		curx++;
 800490c:	f10b 0b01 	add.w	fp, fp, #1
			d += ((curx - cury) << 2) + 10;
 8004910:	320a      	adds	r2, #10
	while (curx <= cury) {
 8004912:	4559      	cmp	r1, fp
			cury--;
 8004914:	9103      	str	r1, [sp, #12]
			d += ((curx - cury) << 2) + 10;
 8004916:	9208      	str	r2, [sp, #32]
	while (curx <= cury) {
 8004918:	f6ff af59 	blt.w	80047ce <G2D_DrawRoundRect+0x22>
 800491c:	b28a      	uxth	r2, r1
 800491e:	9202      	str	r2, [sp, #8]
 8004920:	e78d      	b.n	800483e <G2D_DrawRoundRect+0x92>
		curx++;
 8004922:	f10b 0b01 	add.w	fp, fp, #1
			d += (curx << 2) + 6;
 8004926:	1d8a      	adds	r2, r1, #6
	while (curx <= cury) {
 8004928:	45a3      	cmp	fp, r4
			d += (curx << 2) + 6;
 800492a:	9208      	str	r2, [sp, #32]
	while (curx <= cury) {
 800492c:	dd87      	ble.n	800483e <G2D_DrawRoundRect+0x92>
}
 800492e:	b00d      	add	sp, #52	; 0x34
 8004930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		G2D_DrawHLine(x0, y, width - radius2, color);
 8004934:	1b93      	subs	r3, r2, r6
 8004936:	fa0f f983 	sxth.w	r9, r3
	int16_t x0 = x + radius;
 800493a:	b203      	sxth	r3, r0
	if (length < 0) {x -= length + 1; length = -length;}
 800493c:	f1b9 0f00 	cmp.w	r9, #0
	int16_t x0 = x + radius;
 8004940:	930a      	str	r3, [sp, #40]	; 0x28
	if (length < 0) {x -= length + 1; length = -length;}
 8004942:	f2c0 80d9 	blt.w	8004af8 <G2D_DrawRoundRect+0x34c>
	if (y >= LCD_HEIGHT) return;
 8004946:	1e4b      	subs	r3, r1, #1
 8004948:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 800494c:	d965      	bls.n	8004a1a <G2D_DrawRoundRect+0x26e>
		G2D_DrawHLine(x0, y + height, width - radius2, color);
 800494e:	fa0f f388 	sxth.w	r3, r8
	if (y >= LCD_HEIGHT) return;
 8004952:	3b01      	subs	r3, #1
 8004954:	b29b      	uxth	r3, r3
 8004956:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 800495a:	f63f af63 	bhi.w	8004824 <G2D_DrawRoundRect+0x78>
	if ((x + length) < 1) return;
 800495e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004960:	eb02 0309 	add.w	r3, r2, r9
	if (x >= LCD_WIDTH) return;
 8004964:	2b00      	cmp	r3, #0
 8004966:	f77f af5d 	ble.w	8004824 <G2D_DrawRoundRect+0x78>
 800496a:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 800496e:	f6bf af59 	bge.w	8004824 <G2D_DrawRoundRect+0x78>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004972:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004976:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 800497a:	4a5e      	ldr	r2, [pc, #376]	; (8004af4 <G2D_DrawRoundRect+0x348>)
 800497c:	4641      	mov	r1, r8
	uint16_t x0 = MAX(0, x);
 800497e:	b280      	uxth	r0, r0
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004980:	bfa8      	it	ge
 8004982:	f44f 7348 	movge.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004986:	f8cd b004 	str.w	fp, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 800498a:	b29b      	uxth	r3, r3
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 800498c:	f8d2 8000 	ldr.w	r8, [r2]
	uint16_t lo = LCD_WIDTH - l;
 8004990:	f500 7248 	add.w	r2, r0, #800	; 0x320
 8004994:	1ad2      	subs	r2, r2, r3
	uint16_t l = x1 - x0;
 8004996:	1a1b      	subs	r3, r3, r0
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004998:	b292      	uxth	r2, r2
 800499a:	9200      	str	r2, [sp, #0]
 800499c:	b29a      	uxth	r2, r3
 800499e:	2301      	movs	r3, #1
 80049a0:	47c0      	blx	r8
 80049a2:	e73f      	b.n	8004824 <G2D_DrawRoundRect+0x78>
		G2D_DrawVLine(x, y0, height - radius2, color);
 80049a4:	1bbb      	subs	r3, r7, r6
	int16_t y0 = y + radius;
 80049a6:	f9bd 9010 	ldrsh.w	r9, [sp, #16]
		G2D_DrawVLine(x, y0, height - radius2, color);
 80049aa:	fa0f f883 	sxth.w	r8, r3
	if (length < 0) {y -= length + 1; length = -length;}
 80049ae:	f1b8 0f00 	cmp.w	r8, #0
 80049b2:	f2c0 8085 	blt.w	8004ac0 <G2D_DrawRoundRect+0x314>
	if (x >= LCD_WIDTH) return;
 80049b6:	9b02      	ldr	r3, [sp, #8]
 80049b8:	f240 321e 	movw	r2, #798	; 0x31e
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d94d      	bls.n	8004a60 <G2D_DrawRoundRect+0x2b4>
		G2D_DrawVLine(x + width, y0, height - radius2, color);
 80049c4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	if (x >= LCD_WIDTH) return;
 80049c8:	3b01      	subs	r3, #1
 80049ca:	f240 321e 	movw	r2, #798	; 0x31e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	4293      	cmp	r3, r2
 80049d2:	f63f af2a 	bhi.w	800482a <G2D_DrawRoundRect+0x7e>
	if (y >= LCD_HEIGHT) return;
 80049d6:	f5b9 7ff0 	cmp.w	r9, #480	; 0x1e0
	if ((y + length) < 1) return;
 80049da:	eb09 0308 	add.w	r3, r9, r8
	if (y >= LCD_HEIGHT) return;
 80049de:	f6bf af24 	bge.w	800482a <G2D_DrawRoundRect+0x7e>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f77f af21 	ble.w	800482a <G2D_DrawRoundRect+0x7e>
	uint16_t y0 = MAX(0, y);
 80049e8:	ea29 71e9 	bic.w	r1, r9, r9, asr #31
 80049ec:	b289      	uxth	r1, r1
	uint16_t l = y1 - y0;
 80049ee:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80049f2:	bfd4      	ite	le
 80049f4:	ebc1 0203 	rsble	r2, r1, r3
 80049f8:	f5c1 72f0 	rsbgt	r2, r1, #480	; 0x1e0
 80049fc:	b293      	uxth	r3, r2
	if (l == 0) return;
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f43f af13 	beq.w	800482a <G2D_DrawRoundRect+0x7e>
	BSP_LCD_FillBuf(x, y0, 1, l, lo, color);
 8004a04:	4a3b      	ldr	r2, [pc, #236]	; (8004af4 <G2D_DrawRoundRect+0x348>)
 8004a06:	f8cd b004 	str.w	fp, [sp, #4]
 8004a0a:	6814      	ldr	r4, [r2, #0]
 8004a0c:	f240 321f 	movw	r2, #799	; 0x31f
 8004a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a12:	9200      	str	r2, [sp, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	47a0      	blx	r4
 8004a18:	e707      	b.n	800482a <G2D_DrawRoundRect+0x7e>
	if ((x + length) < 1) return;
 8004a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a1c:	eb09 0302 	add.w	r3, r9, r2
	if (x >= LCD_WIDTH) return;
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dd94      	ble.n	800494e <G2D_DrawRoundRect+0x1a2>
 8004a24:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8004a28:	da91      	bge.n	800494e <G2D_DrawRoundRect+0x1a2>
	uint16_t x0 = MAX(0, x);
 8004a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004a2c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004a30:	f8cd b004 	str.w	fp, [sp, #4]
	uint16_t x0 = MAX(0, x);
 8004a34:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004a38:	bfa8      	it	ge
 8004a3a:	f44f 7348 	movge.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004a3e:	4a2d      	ldr	r2, [pc, #180]	; (8004af4 <G2D_DrawRoundRect+0x348>)
	uint16_t x0 = MAX(0, x);
 8004a40:	b280      	uxth	r0, r0
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004a42:	b29b      	uxth	r3, r3
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004a44:	6814      	ldr	r4, [r2, #0]
	uint16_t lo = LCD_WIDTH - l;
 8004a46:	f500 7c48 	add.w	ip, r0, #800	; 0x320
 8004a4a:	ebac 0c03 	sub.w	ip, ip, r3
	uint16_t l = x1 - x0;
 8004a4e:	1a1b      	subs	r3, r3, r0
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004a50:	fa1f fc8c 	uxth.w	ip, ip
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	2301      	movs	r3, #1
 8004a58:	f8cd c000 	str.w	ip, [sp]
 8004a5c:	47a0      	blx	r4
 8004a5e:	e776      	b.n	800494e <G2D_DrawRoundRect+0x1a2>
	if ((y + length) < 1) return;
 8004a60:	eb08 0209 	add.w	r2, r8, r9
	if (y >= LCD_HEIGHT) return;
 8004a64:	2a00      	cmp	r2, #0
 8004a66:	ddad      	ble.n	80049c4 <G2D_DrawRoundRect+0x218>
 8004a68:	f5b9 7ff0 	cmp.w	r9, #480	; 0x1e0
 8004a6c:	daaa      	bge.n	80049c4 <G2D_DrawRoundRect+0x218>
	uint16_t y0 = MAX(0, y);
 8004a6e:	ea29 71e9 	bic.w	r1, r9, r9, asr #31
 8004a72:	b289      	uxth	r1, r1
	uint16_t l = y1 - y0;
 8004a74:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004a78:	bfd4      	ite	le
 8004a7a:	ebc1 0302 	rsble	r3, r1, r2
 8004a7e:	f5c1 73f0 	rsbgt	r3, r1, #480	; 0x1e0
 8004a82:	b29b      	uxth	r3, r3
	if (l == 0) return;
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d09d      	beq.n	80049c4 <G2D_DrawRoundRect+0x218>
	BSP_LCD_FillBuf(x, y0, 1, l, lo, color);
 8004a88:	4a1a      	ldr	r2, [pc, #104]	; (8004af4 <G2D_DrawRoundRect+0x348>)
 8004a8a:	f8cd b004 	str.w	fp, [sp, #4]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	9802      	ldr	r0, [sp, #8]
 8004a92:	4614      	mov	r4, r2
 8004a94:	f240 321f 	movw	r2, #799	; 0x31f
 8004a98:	9200      	str	r2, [sp, #0]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	47a0      	blx	r4
	if (length < 0) {y -= length + 1; length = -length;}
 8004a9e:	f1b8 0f00 	cmp.w	r8, #0
		G2D_DrawVLine(x + width, y0, height - radius2, color);
 8004aa2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	if (length < 0) {y -= length + 1; length = -length;}
 8004aa6:	da8f      	bge.n	80049c8 <G2D_DrawRoundRect+0x21c>
 8004aa8:	9a04      	ldr	r2, [sp, #16]
 8004aaa:	1bf0      	subs	r0, r6, r7
 8004aac:	f102 3eff 	add.w	lr, r2, #4294967295
 8004ab0:	b280      	uxth	r0, r0
 8004ab2:	eb00 020e 	add.w	r2, r0, lr
 8004ab6:	fa0f f880 	sxth.w	r8, r0
 8004aba:	fa0f f982 	sxth.w	r9, r2
 8004abe:	e783      	b.n	80049c8 <G2D_DrawRoundRect+0x21c>
 8004ac0:	9b04      	ldr	r3, [sp, #16]
 8004ac2:	1bf0      	subs	r0, r6, r7
	if (x >= LCD_WIDTH) return;
 8004ac4:	f240 3c1e 	movw	ip, #798	; 0x31e
	if (length < 0) {y -= length + 1; length = -length;}
 8004ac8:	f103 3eff 	add.w	lr, r3, #4294967295
	if (x >= LCD_WIDTH) return;
 8004acc:	9b02      	ldr	r3, [sp, #8]
 8004ace:	b282      	uxth	r2, r0
 8004ad0:	1e59      	subs	r1, r3, #1
	if (length < 0) {y -= length + 1; length = -length;}
 8004ad2:	eb02 030e 	add.w	r3, r2, lr
 8004ad6:	b212      	sxth	r2, r2
	if (x >= LCD_WIDTH) return;
 8004ad8:	b289      	uxth	r1, r1
	if (length < 0) {y -= length + 1; length = -length;}
 8004ada:	b21b      	sxth	r3, r3
	if (x >= LCD_WIDTH) return;
 8004adc:	4561      	cmp	r1, ip
 8004ade:	d92c      	bls.n	8004b3a <G2D_DrawRoundRect+0x38e>
		G2D_DrawVLine(x + width, y0, height - radius2, color);
 8004ae0:	4699      	mov	r9, r3
 8004ae2:	4690      	mov	r8, r2
 8004ae4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	if (length < 0) {y -= length + 1; length = -length;}
 8004ae8:	e76e      	b.n	80049c8 <G2D_DrawRoundRect+0x21c>
 8004aea:	bf00      	nop
 8004aec:	24000264 	.word	0x24000264
 8004af0:	24000254 	.word	0x24000254
 8004af4:	24000258 	.word	0x24000258
	if (length < 0) {x -= length + 1; length = -length;}
 8004af8:	1ab2      	subs	r2, r6, r2
 8004afa:	3801      	subs	r0, #1
	if (y >= LCD_HEIGHT) return;
 8004afc:	1e4b      	subs	r3, r1, #1
 8004afe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b00:	b292      	uxth	r2, r2
	if (length < 0) {x -= length + 1; length = -length;}
 8004b02:	4604      	mov	r4, r0
	if (y >= LCD_HEIGHT) return;
 8004b04:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
	if (length < 0) {x -= length + 1; length = -length;}
 8004b08:	4410      	add	r0, r2
 8004b0a:	fa0f f982 	sxth.w	r9, r2
 8004b0e:	b202      	sxth	r2, r0
 8004b10:	920a      	str	r2, [sp, #40]	; 0x28
	if (y >= LCD_HEIGHT) return;
 8004b12:	f63f af1c 	bhi.w	800494e <G2D_DrawRoundRect+0x1a2>
	if ((x + length) < 1) return;
 8004b16:	eb09 0302 	add.w	r3, r9, r2
	if (x >= LCD_WIDTH) return;
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	dd02      	ble.n	8004b24 <G2D_DrawRoundRect+0x378>
 8004b1e:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8004b22:	db20      	blt.n	8004b66 <G2D_DrawRoundRect+0x3ba>
		G2D_DrawHLine(x0, y + height, width - radius2, color);
 8004b24:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	if (length < 0) {x -= length + 1; length = -length;}
 8004b28:	4621      	mov	r1, r4
		G2D_DrawHLine(x0, y + height, width - radius2, color);
 8004b2a:	fa0f f388 	sxth.w	r3, r8
	if (length < 0) {x -= length + 1; length = -length;}
 8004b2e:	4411      	add	r1, r2
 8004b30:	fa0f f982 	sxth.w	r9, r2
 8004b34:	b20a      	sxth	r2, r1
 8004b36:	920a      	str	r2, [sp, #40]	; 0x28
 8004b38:	e70b      	b.n	8004952 <G2D_DrawRoundRect+0x1a6>
	if (y >= LCD_HEIGHT) return;
 8004b3a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
	if ((y + length) < 1) return;
 8004b3e:	441a      	add	r2, r3
	if (y >= LCD_HEIGHT) return;
 8004b40:	da0e      	bge.n	8004b60 <G2D_DrawRoundRect+0x3b4>
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	dd0c      	ble.n	8004b60 <G2D_DrawRoundRect+0x3b4>
	uint16_t y0 = MAX(0, y);
 8004b46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004b4a:	b299      	uxth	r1, r3
	uint16_t l = y1 - y0;
 8004b4c:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004b50:	bfd4      	ite	le
 8004b52:	ebc1 0302 	rsble	r3, r1, r2
 8004b56:	f5c1 73f0 	rsbgt	r3, r1, #480	; 0x1e0
 8004b5a:	b29b      	uxth	r3, r3
	if (l == 0) return;
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d193      	bne.n	8004a88 <G2D_DrawRoundRect+0x2dc>
		G2D_DrawVLine(x + width, y0, height - radius2, color);
 8004b60:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	if (length < 0) {y -= length + 1; length = -length;}
 8004b64:	e7a4      	b.n	8004ab0 <G2D_DrawRoundRect+0x304>
	uint16_t x0 = MAX(0, x);
 8004b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004b68:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004b6c:	f8cd b004 	str.w	fp, [sp, #4]
	uint16_t x0 = MAX(0, x);
 8004b70:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004b74:	bfa8      	it	ge
 8004b76:	f44f 7348 	movge.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004b7a:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <G2D_DrawRoundRect+0x3ec>)
	uint16_t x0 = MAX(0, x);
 8004b7c:	b280      	uxth	r0, r0
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004b7e:	f8d2 9000 	ldr.w	r9, [r2]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004b82:	b29b      	uxth	r3, r3
	uint16_t lo = LCD_WIDTH - l;
 8004b84:	f500 7248 	add.w	r2, r0, #800	; 0x320
 8004b88:	1ad2      	subs	r2, r2, r3
	uint16_t l = x1 - x0;
 8004b8a:	1a1b      	subs	r3, r3, r0
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004b8c:	b292      	uxth	r2, r2
 8004b8e:	9200      	str	r2, [sp, #0]
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	2301      	movs	r3, #1
 8004b94:	47c8      	blx	r9
 8004b96:	e7c5      	b.n	8004b24 <G2D_DrawRoundRect+0x378>
 8004b98:	24000258 	.word	0x24000258

08004b9c <G2D_DrawFillRoundRectBlend>:
	}

}


void G2D_DrawFillRoundRectBlend(int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 8004b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba0:	b08f      	sub	sp, #60	; 0x3c
 8004ba2:	4615      	mov	r5, r2
	int32_t  cury;	/* Current Y Value */

	uint16_t radius2 = radius << 1;

	if (height < radius2) return;
	if (width < radius2) return;
 8004ba4:	461a      	mov	r2, r3
void G2D_DrawFillRoundRectBlend(int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 8004ba6:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
	if (width < radius2) return;
 8004baa:	42ab      	cmp	r3, r5
	uint16_t radius2 = radius << 1;
 8004bac:	ea4f 0644 	mov.w	r6, r4, lsl #1
	if (width < radius2) return;
 8004bb0:	bf28      	it	cs
 8004bb2:	462a      	movcs	r2, r5
	uint16_t radius2 = radius << 1;
 8004bb4:	b2b6      	uxth	r6, r6
	if (width < radius2) return;
 8004bb6:	4296      	cmp	r6, r2
 8004bb8:	d902      	bls.n	8004bc0 <G2D_DrawFillRoundRectBlend+0x24>
			cury--;
		}
		curx++;
	}

}
 8004bba:	b00f      	add	sp, #60	; 0x3c
 8004bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004bc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
	int16_t y0 = y + radius;
 8004bc2:	b289      	uxth	r1, r1
	cury = radius;
 8004bc4:	46a3      	mov	fp, r4
	uint16_t x1 = MAX(0, x);
 8004bc6:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004bca:	9201      	str	r2, [sp, #4]
	int16_t y0 = y + radius;
 8004bcc:	190a      	adds	r2, r1, r4
	int16_t y1 = y + height - radius;
 8004bce:	4419      	add	r1, r3
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004bd0:	1e5c      	subs	r4, r3, #1
	int16_t y0 = y + radius;
 8004bd2:	b292      	uxth	r2, r2
	d = 3 - radius2;
 8004bd4:	f1c6 0903 	rsb	r9, r6, #3
	int16_t y1 = y + height - radius;
 8004bd8:	eba1 010b 	sub.w	r1, r1, fp
	uint16_t x1 = MAX(0, x);
 8004bdc:	b2bf      	uxth	r7, r7
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004bde:	1ba4      	subs	r4, r4, r6
	int16_t y1 = y + height - radius;
 8004be0:	b28b      	uxth	r3, r1
	uint16_t ol = LCD_WIDTH - w;
 8004be2:	f507 7c48 	add.w	ip, r7, #800	; 0x320
	int16_t y1 = y + height - radius;
 8004be6:	9307      	str	r3, [sp, #28]
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004be8:	1943      	adds	r3, r0, r5
	int16_t x0 = x + radius;
 8004bea:	4458      	add	r0, fp
 8004bec:	b281      	uxth	r1, r0
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004bee:	f240 301f 	movw	r0, #799	; 0x31f
 8004bf2:	4283      	cmp	r3, r0
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004bf4:	e9cd 1205 	strd	r1, r2, [sp, #20]
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004bf8:	bfa8      	it	ge
 8004bfa:	4603      	movge	r3, r0
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004bfc:	1c51      	adds	r1, r2, #1
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004bfe:	4638      	mov	r0, r7
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004c00:	b209      	sxth	r1, r1
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004c02:	b29b      	uxth	r3, r3
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 8004c04:	fa11 f484 	uxtah	r4, r1, r4
	uint16_t y1 = MAX(0, y);
 8004c08:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	uint16_t ol = LCD_WIDTH - w;
 8004c0c:	ebac 0c03 	sub.w	ip, ip, r3
	uint16_t w = x2 - x1;
 8004c10:	1bdb      	subs	r3, r3, r7
	uint16_t y1 = MAX(0, y);
 8004c12:	b289      	uxth	r1, r1
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 8004c14:	f240 17df 	movw	r7, #479	; 0x1df
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004c18:	fa1f f28c 	uxth.w	r2, ip
 8004c1c:	9200      	str	r2, [sp, #0]
 8004c1e:	b29a      	uxth	r2, r3
	uint16_t h = y2 - y1;
 8004c20:	42bc      	cmp	r4, r7
 8004c22:	bfd4      	ite	le
 8004c24:	ebc1 0304 	rsble	r3, r1, r4
 8004c28:	ebc1 0307 	rsbgt	r3, r1, r7
	uint16_t wr = width - radius2;
 8004c2c:	1bac      	subs	r4, r5, r6
 8004c2e:	1b75      	subs	r5, r6, r5
 8004c30:	b2a7      	uxth	r7, r4
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004c32:	4ca2      	ldr	r4, [pc, #648]	; (8004ebc <G2D_DrawFillRoundRectBlend+0x320>)
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	6824      	ldr	r4, [r4, #0]
 8004c38:	46ba      	mov	sl, r7
	uint16_t wr = width - radius2;
 8004c3a:	9709      	str	r7, [sp, #36]	; 0x24
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004c3c:	47a0      	blx	r4
	while (curx <= cury) {
 8004c3e:	9905      	ldr	r1, [sp, #20]
	curx = 0;
 8004c40:	2400      	movs	r4, #0
	if (y >= LCD_HEIGHT) return;
 8004c42:	9a06      	ldr	r2, [sp, #24]
 8004c44:	1e4b      	subs	r3, r1, #1
 8004c46:	b2a9      	uxth	r1, r5
 8004c48:	442b      	add	r3, r5
 8004c4a:	910d      	str	r1, [sp, #52]	; 0x34
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004c4c:	9102      	str	r1, [sp, #8]
 8004c4e:	b298      	uxth	r0, r3
 8004c50:	9b07      	ldr	r3, [sp, #28]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	9003      	str	r0, [sp, #12]
 8004c56:	b29d      	uxth	r5, r3
	if (y >= LCD_HEIGHT) return;
 8004c58:	1e53      	subs	r3, r2, #1
 8004c5a:	930b      	str	r3, [sp, #44]	; 0x2c
		if(cury > 0) {
 8004c5c:	f1bb 0f00 	cmp.w	fp, #0
 8004c60:	d050      	beq.n	8004d04 <G2D_DrawFillRoundRectBlend+0x168>
			G2D_DrawHLineBlend(x0 - cury, y1 + curx, 2 * cury + wr, color);
 8004c62:	fa1f f38b 	uxth.w	r3, fp
 8004c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c68:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004c6c:	fa1f f888 	uxth.w	r8, r8
 8004c70:	4442      	add	r2, r8
 8004c72:	b217      	sxth	r7, r2
 8004c74:	b290      	uxth	r0, r2
	if (length == 0) return;
 8004c76:	2f00      	cmp	r7, #0
			G2D_DrawHLineBlend(x0 - cury, y1 + curx, 2 * cury + wr, color);
 8004c78:	900a      	str	r0, [sp, #40]	; 0x28
	if (length == 0) return;
 8004c7a:	d043      	beq.n	8004d04 <G2D_DrawFillRoundRectBlend+0x168>
			G2D_DrawHLineBlend(x0 - cury, y1 + curx, 2 * cury + wr, color);
 8004c7c:	9a05      	ldr	r2, [sp, #20]
 8004c7e:	b2a1      	uxth	r1, r4
 8004c80:	eba2 0303 	sub.w	r3, r2, r3
 8004c84:	9a07      	ldr	r2, [sp, #28]
 8004c86:	9104      	str	r1, [sp, #16]
 8004c88:	4411      	add	r1, r2
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	b21b      	sxth	r3, r3
 8004c8e:	b289      	uxth	r1, r1
 8004c90:	920c      	str	r2, [sp, #48]	; 0x30
 8004c92:	9308      	str	r3, [sp, #32]
	if (length < 0) {x -= length + 1; length = -length;}
 8004c94:	f2c0 80af 	blt.w	8004df6 <G2D_DrawFillRoundRectBlend+0x25a>
	if (y >= LCD_HEIGHT) return;
 8004c98:	f5b5 7fef 	cmp.w	r5, #478	; 0x1de
 8004c9c:	d809      	bhi.n	8004cb2 <G2D_DrawFillRoundRectBlend+0x116>
	if ((x + length) < 1) return;
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	18fb      	adds	r3, r7, r3
	if (x >= LCD_WIDTH) return;
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	dd05      	ble.n	8004cb2 <G2D_DrawFillRoundRectBlend+0x116>
 8004ca6:	f240 301f 	movw	r0, #799	; 0x31f
 8004caa:	4282      	cmp	r2, r0
 8004cac:	dc01      	bgt.n	8004cb2 <G2D_DrawFillRoundRectBlend+0x116>
 8004cae:	4610      	mov	r0, r2
 8004cb0:	e0d5      	b.n	8004e5e <G2D_DrawFillRoundRectBlend+0x2c2>
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004cb2:	9b06      	ldr	r3, [sp, #24]
 8004cb4:	9a04      	ldr	r2, [sp, #16]
 8004cb6:	1a99      	subs	r1, r3, r2
 8004cb8:	b289      	uxth	r1, r1
	if (y >= LCD_HEIGHT) return;
 8004cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cbc:	9a04      	ldr	r2, [sp, #16]
 8004cbe:	1a9e      	subs	r6, r3, r2
 8004cc0:	b2b6      	uxth	r6, r6
 8004cc2:	f5b6 7fef 	cmp.w	r6, #478	; 0x1de
 8004cc6:	d81d      	bhi.n	8004d04 <G2D_DrawFillRoundRectBlend+0x168>
	if ((x + length) < 1) return;
 8004cc8:	9b08      	ldr	r3, [sp, #32]
 8004cca:	441f      	add	r7, r3
	if (x >= LCD_WIDTH) return;
 8004ccc:	2f00      	cmp	r7, #0
 8004cce:	dd19      	ble.n	8004d04 <G2D_DrawFillRoundRectBlend+0x168>
 8004cd0:	f240 321f 	movw	r2, #799	; 0x31f
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	dc15      	bgt.n	8004d04 <G2D_DrawFillRoundRectBlend+0x168>
	uint16_t x0 = MAX(0, x);
 8004cd8:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004cdc:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004ce0:	9b19      	ldr	r3, [sp, #100]	; 0x64
	uint16_t x0 = MAX(0, x);
 8004ce2:	b280      	uxth	r0, r0
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004ce4:	bfa8      	it	ge
 8004ce6:	f44f 7748 	movge.w	r7, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004cea:	9301      	str	r3, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004cec:	b2bf      	uxth	r7, r7
	uint16_t lo = LCD_WIDTH - l;
 8004cee:	f500 7248 	add.w	r2, r0, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004cf2:	4b72      	ldr	r3, [pc, #456]	; (8004ebc <G2D_DrawFillRoundRectBlend+0x320>)
	uint16_t lo = LCD_WIDTH - l;
 8004cf4:	1bd2      	subs	r2, r2, r7
	uint16_t l = x1 - x0;
 8004cf6:	1a3f      	subs	r7, r7, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004cf8:	681e      	ldr	r6, [r3, #0]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	9200      	str	r2, [sp, #0]
 8004d00:	b2ba      	uxth	r2, r7
 8004d02:	47b0      	blx	r6
		if(curx > 0) {
 8004d04:	2c00      	cmp	r4, #0
 8004d06:	d03b      	beq.n	8004d80 <G2D_DrawFillRoundRectBlend+0x1e4>
			G2D_DrawHLineBlend(x0 - curx, y0 - cury, 2 * curx + wr, color);
 8004d08:	fa0f f68a 	sxth.w	r6, sl
	if (length == 0) return;
 8004d0c:	2e00      	cmp	r6, #0
 8004d0e:	d037      	beq.n	8004d80 <G2D_DrawFillRoundRectBlend+0x1e4>
 8004d10:	9b05      	ldr	r3, [sp, #20]
			G2D_DrawHLineBlend(x0 - curx, y0 - cury, 2 * curx + wr, color);
 8004d12:	fa1f f28b 	uxth.w	r2, fp
 8004d16:	eba3 0804 	sub.w	r8, r3, r4
 8004d1a:	9b06      	ldr	r3, [sp, #24]
 8004d1c:	9204      	str	r2, [sp, #16]
 8004d1e:	eba3 0102 	sub.w	r1, r3, r2
 8004d22:	fa0f f888 	sxth.w	r8, r8
 8004d26:	b289      	uxth	r1, r1
	if (length < 0) {x -= length + 1; length = -length;}
 8004d28:	db78      	blt.n	8004e1c <G2D_DrawFillRoundRectBlend+0x280>
	if (y >= LCD_HEIGHT) return;
 8004d2a:	1e4b      	subs	r3, r1, #1
 8004d2c:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8004d30:	f240 8084 	bls.w	8004e3c <G2D_DrawFillRoundRectBlend+0x2a0>
 8004d34:	4617      	mov	r7, r2
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004d36:	9b07      	ldr	r3, [sp, #28]
 8004d38:	441f      	add	r7, r3
 8004d3a:	b2b9      	uxth	r1, r7
	if (y >= LCD_HEIGHT) return;
 8004d3c:	1e4b      	subs	r3, r1, #1
 8004d3e:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8004d42:	d81d      	bhi.n	8004d80 <G2D_DrawFillRoundRectBlend+0x1e4>
	if ((x + length) < 1) return;
 8004d44:	4446      	add	r6, r8
	if (x >= LCD_WIDTH) return;
 8004d46:	2e00      	cmp	r6, #0
 8004d48:	dd1a      	ble.n	8004d80 <G2D_DrawFillRoundRectBlend+0x1e4>
 8004d4a:	f240 331f 	movw	r3, #799	; 0x31f
 8004d4e:	4598      	cmp	r8, r3
 8004d50:	dc16      	bgt.n	8004d80 <G2D_DrawFillRoundRectBlend+0x1e4>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004d52:	f5b6 7f48 	cmp.w	r6, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004d56:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004d5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
	uint16_t x0 = MAX(0, x);
 8004d5c:	fa1f f088 	uxth.w	r0, r8
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004d60:	bfa8      	it	ge
 8004d62:	f44f 7648 	movge.w	r6, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004d66:	9301      	str	r3, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004d68:	b2b6      	uxth	r6, r6
	uint16_t lo = LCD_WIDTH - l;
 8004d6a:	f500 7248 	add.w	r2, r0, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004d6e:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <G2D_DrawFillRoundRectBlend+0x320>)
	uint16_t lo = LCD_WIDTH - l;
 8004d70:	1b92      	subs	r2, r2, r6
	uint16_t l = x1 - x0;
 8004d72:	1a36      	subs	r6, r6, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004d74:	681f      	ldr	r7, [r3, #0]
 8004d76:	2301      	movs	r3, #1
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	9200      	str	r2, [sp, #0]
 8004d7c:	b2b2      	uxth	r2, r6
 8004d7e:	47b8      	blx	r7
		if (d < 0) {
 8004d80:	f1b9 0f00 	cmp.w	r9, #0
 8004d84:	db1c      	blt.n	8004dc0 <G2D_DrawFillRoundRectBlend+0x224>
	while (curx <= cury) {
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	f10a 0a02 	add.w	sl, sl, #2
 8004d8c:	1ed9      	subs	r1, r3, #3
 8004d8e:	9b02      	ldr	r3, [sp, #8]
 8004d90:	fa1f fa8a 	uxth.w	sl, sl
 8004d94:	1e9a      	subs	r2, r3, #2
 8004d96:	1c6b      	adds	r3, r5, #1
 8004d98:	b289      	uxth	r1, r1
 8004d9a:	b29d      	uxth	r5, r3
			d += ((curx - cury) << 2) + 10;
 8004d9c:	eba4 030b 	sub.w	r3, r4, fp
			cury--;
 8004da0:	f10b 3bff 	add.w	fp, fp, #4294967295
		curx++;
 8004da4:	3401      	adds	r4, #1
	while (curx <= cury) {
 8004da6:	b292      	uxth	r2, r2
 8004da8:	9103      	str	r1, [sp, #12]
			d += ((curx - cury) << 2) + 10;
 8004daa:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	while (curx <= cury) {
 8004dae:	45a3      	cmp	fp, r4
 8004db0:	9202      	str	r2, [sp, #8]
			d += ((curx - cury) << 2) + 10;
 8004db2:	f103 090a 	add.w	r9, r3, #10
	while (curx <= cury) {
 8004db6:	f6bf af51 	bge.w	8004c5c <G2D_DrawFillRoundRectBlend+0xc0>
}
 8004dba:	b00f      	add	sp, #60	; 0x3c
 8004dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (curx <= cury) {
 8004dc0:	9b03      	ldr	r3, [sp, #12]
			d += (curx << 2) + 6;
 8004dc2:	eb09 0984 	add.w	r9, r9, r4, lsl #2
		curx++;
 8004dc6:	3401      	adds	r4, #1
	while (curx <= cury) {
 8004dc8:	f10a 0a02 	add.w	sl, sl, #2
 8004dcc:	1ed9      	subs	r1, r3, #3
 8004dce:	9b02      	ldr	r3, [sp, #8]
 8004dd0:	45a3      	cmp	fp, r4
			d += (curx << 2) + 6;
 8004dd2:	f109 0906 	add.w	r9, r9, #6
	while (curx <= cury) {
 8004dd6:	f1a3 0202 	sub.w	r2, r3, #2
 8004dda:	b289      	uxth	r1, r1
 8004ddc:	f105 0301 	add.w	r3, r5, #1
 8004de0:	fa1f fa8a 	uxth.w	sl, sl
 8004de4:	b292      	uxth	r2, r2
 8004de6:	9103      	str	r1, [sp, #12]
 8004de8:	b29d      	uxth	r5, r3
 8004dea:	9202      	str	r2, [sp, #8]
 8004dec:	f6bf af36 	bge.w	8004c5c <G2D_DrawFillRoundRectBlend+0xc0>
}
 8004df0:	b00f      	add	sp, #60	; 0x3c
 8004df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 0) {x -= length + 1; length = -length;}
 8004df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df8:	3a01      	subs	r2, #1
	if (y >= LCD_HEIGHT) return;
 8004dfa:	f5b5 7fef 	cmp.w	r5, #478	; 0x1de
	if (length < 0) {x -= length + 1; length = -length;}
 8004dfe:	eba3 0c08 	sub.w	ip, r3, r8
 8004e02:	eba2 0000 	sub.w	r0, r2, r0
 8004e06:	fa0f f38c 	sxth.w	r3, ip
 8004e0a:	b200      	sxth	r0, r0
	if (y >= LCD_HEIGHT) return;
 8004e0c:	d920      	bls.n	8004e50 <G2D_DrawFillRoundRectBlend+0x2b4>
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004e0e:	461f      	mov	r7, r3
 8004e10:	9a04      	ldr	r2, [sp, #16]
 8004e12:	9b06      	ldr	r3, [sp, #24]
 8004e14:	9008      	str	r0, [sp, #32]
 8004e16:	1a99      	subs	r1, r3, r2
 8004e18:	b289      	uxth	r1, r1
	if (length < 0) {x -= length + 1; length = -length;}
 8004e1a:	e74e      	b.n	8004cba <G2D_DrawFillRoundRectBlend+0x11e>
	if (y >= LCD_HEIGHT) return;
 8004e1c:	1e4b      	subs	r3, r1, #1
	if (length < 0) {x -= length + 1; length = -length;}
 8004e1e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8004e22:	f9bd c008 	ldrsh.w	ip, [sp, #8]
	if (y >= LCD_HEIGHT) return;
 8004e26:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
	if (length < 0) {x -= length + 1; length = -length;}
 8004e2a:	4610      	mov	r0, r2
	if (y >= LCD_HEIGHT) return;
 8004e2c:	d948      	bls.n	8004ec0 <G2D_DrawFillRoundRectBlend+0x324>
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004e2e:	9b07      	ldr	r3, [sp, #28]
 8004e30:	4666      	mov	r6, ip
 8004e32:	9f04      	ldr	r7, [sp, #16]
 8004e34:	4690      	mov	r8, r2
 8004e36:	441f      	add	r7, r3
 8004e38:	b2b9      	uxth	r1, r7
	if (length < 0) {x -= length + 1; length = -length;}
 8004e3a:	e77f      	b.n	8004d3c <G2D_DrawFillRoundRectBlend+0x1a0>
	if (x >= LCD_WIDTH) return;
 8004e3c:	f240 321f 	movw	r2, #799	; 0x31f
	if ((x + length) < 1) return;
 8004e40:	eb08 0306 	add.w	r3, r8, r6
	if (x >= LCD_WIDTH) return;
 8004e44:	4590      	cmp	r8, r2
 8004e46:	dc6b      	bgt.n	8004f20 <G2D_DrawFillRoundRectBlend+0x384>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	dd69      	ble.n	8004f20 <G2D_DrawFillRoundRectBlend+0x384>
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	e03f      	b.n	8004ed0 <G2D_DrawFillRoundRectBlend+0x334>
	if ((x + length) < 1) return;
 8004e50:	4403      	add	r3, r0
	if (x >= LCD_WIDTH) return;
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	dd6e      	ble.n	8004f34 <G2D_DrawFillRoundRectBlend+0x398>
 8004e56:	f240 361f 	movw	r6, #799	; 0x31f
 8004e5a:	42b0      	cmp	r0, r6
 8004e5c:	dc6a      	bgt.n	8004f34 <G2D_DrawFillRoundRectBlend+0x398>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004e5e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e66:	9a19      	ldr	r2, [sp, #100]	; 0x64
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004e68:	bfa8      	it	ge
 8004e6a:	f44f 7348 	movge.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004e6e:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e70:	9201      	str	r2, [sp, #4]
	uint16_t lo = LCD_WIDTH - l;
 8004e72:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004e76:	b29a      	uxth	r2, r3
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e78:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <G2D_DrawFillRoundRectBlend+0x320>)
	uint16_t lo = LCD_WIDTH - l;
 8004e7a:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 8004e7e:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	fa1f fc8c 	uxth.w	ip, ip
 8004e86:	461e      	mov	r6, r3
 8004e88:	b292      	uxth	r2, r2
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f8cd c000 	str.w	ip, [sp]
 8004e90:	47b0      	blx	r6
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004e92:	9b06      	ldr	r3, [sp, #24]
 8004e94:	9a04      	ldr	r2, [sp, #16]
	if (length < 0) {x -= length + 1; length = -length;}
 8004e96:	2f00      	cmp	r7, #0
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004e98:	eba3 0102 	sub.w	r1, r3, r2
 8004e9c:	b289      	uxth	r1, r1
	if (length < 0) {x -= length + 1; length = -length;}
 8004e9e:	f6bf af0c 	bge.w	8004cba <G2D_DrawFillRoundRectBlend+0x11e>
 8004ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea4:	1e5a      	subs	r2, r3, #1
 8004ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ea8:	eba3 0c08 	sub.w	ip, r3, r8
 8004eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eae:	fa0f f78c 	sxth.w	r7, ip
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	b213      	sxth	r3, r2
 8004eb6:	9308      	str	r3, [sp, #32]
 8004eb8:	e6ff      	b.n	8004cba <G2D_DrawFillRoundRectBlend+0x11e>
 8004eba:	bf00      	nop
 8004ebc:	2400025c 	.word	0x2400025c
	if (x >= LCD_WIDTH) return;
 8004ec0:	f240 371f 	movw	r7, #799	; 0x31f
	if ((x + length) < 1) return;
 8004ec4:	eb02 030c 	add.w	r3, r2, ip
	if (x >= LCD_WIDTH) return;
 8004ec8:	42ba      	cmp	r2, r7
 8004eca:	dc2e      	bgt.n	8004f2a <G2D_DrawFillRoundRectBlend+0x38e>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dd2c      	ble.n	8004f2a <G2D_DrawFillRoundRectBlend+0x38e>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004ed0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004ed4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004ed8:	9a19      	ldr	r2, [sp, #100]	; 0x64
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004eda:	bfa8      	it	ge
 8004edc:	f44f 7348 	movge.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004ee0:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004ee2:	9201      	str	r2, [sp, #4]
	uint16_t lo = LCD_WIDTH - l;
 8004ee4:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004ee8:	b29a      	uxth	r2, r3
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004eea:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <G2D_DrawFillRoundRectBlend+0x3a4>)
	uint16_t lo = LCD_WIDTH - l;
 8004eec:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 8004ef0:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fa1f fc8c 	uxth.w	ip, ip
 8004ef8:	461f      	mov	r7, r3
 8004efa:	b292      	uxth	r2, r2
 8004efc:	2301      	movs	r3, #1
 8004efe:	f8cd c000 	str.w	ip, [sp]
 8004f02:	47b8      	blx	r7
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004f04:	9b07      	ldr	r3, [sp, #28]
 8004f06:	9f04      	ldr	r7, [sp, #16]
	if (length < 0) {x -= length + 1; length = -length;}
 8004f08:	2e00      	cmp	r6, #0
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004f0a:	441f      	add	r7, r3
 8004f0c:	b2b9      	uxth	r1, r7
	if (length < 0) {x -= length + 1; length = -length;}
 8004f0e:	f6bf af15 	bge.w	8004d3c <G2D_DrawFillRoundRectBlend+0x1a0>
 8004f12:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8004f16:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8004f1a:	4690      	mov	r8, r2
 8004f1c:	4666      	mov	r6, ip
 8004f1e:	e70d      	b.n	8004d3c <G2D_DrawFillRoundRectBlend+0x1a0>
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004f20:	9b07      	ldr	r3, [sp, #28]
 8004f22:	9f04      	ldr	r7, [sp, #16]
 8004f24:	441f      	add	r7, r3
 8004f26:	b2b9      	uxth	r1, r7
	if (length < 0) {x -= length + 1; length = -length;}
 8004f28:	e708      	b.n	8004d3c <G2D_DrawFillRoundRectBlend+0x1a0>
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004f2a:	9b07      	ldr	r3, [sp, #28]
 8004f2c:	9f04      	ldr	r7, [sp, #16]
 8004f2e:	441f      	add	r7, r3
 8004f30:	b2b9      	uxth	r1, r7
	if (length < 0) {x -= length + 1; length = -length;}
 8004f32:	e7f2      	b.n	8004f1a <G2D_DrawFillRoundRectBlend+0x37e>
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004f34:	9b06      	ldr	r3, [sp, #24]
 8004f36:	9904      	ldr	r1, [sp, #16]
 8004f38:	1a59      	subs	r1, r3, r1
 8004f3a:	b289      	uxth	r1, r1
	if (length < 0) {x -= length + 1; length = -length;}
 8004f3c:	e7b6      	b.n	8004eac <G2D_DrawFillRoundRectBlend+0x310>
 8004f3e:	bf00      	nop
 8004f40:	2400025c 	.word	0x2400025c

08004f44 <G2D_TextBlend>:
	}
	return x + w;
}


uint16_t G2D_TextBlend(int16_t x, int16_t y, const uint8_t *font, char *str, uint32_t color) {
 8004f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f48:	b091      	sub	sp, #68	; 0x44
 8004f4a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8004f4c:	9004      	str	r0, [sp, #16]
 8004f4e:	910a      	str	r1, [sp, #40]	; 0x28
 8004f50:	e9cd 3205 	strd	r3, r2, [sp, #20]
	// Calculating color array for anty-aliasing
	uint32_t text_clut[4];
	uint32_t a1 = 0;

	switch (BSP_LCD_GetColorMode()) {
 8004f54:	f7fe f92a 	bl	80031ac <BSP_LCD_GetColorMode>
 8004f58:	3801      	subs	r0, #1
 8004f5a:	2805      	cmp	r0, #5
 8004f5c:	d80d      	bhi.n	8004f7a <G2D_TextBlend+0x36>
 8004f5e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004f62:	0006      	.short	0x0006
 8004f64:	00e40006 	.word	0x00e40006
 8004f68:	00fa0006 	.word	0x00fa0006
 8004f6c:	00e4      	.short	0x00e4
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
		text_clut[3] = color;
		break;
	case LCD_COLOR_MODE_ARGB1555:
		text_clut[0] = 0;
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2300      	movs	r3, #0
		text_clut[1] = 0;
		text_clut[2] = color;
 8004f72:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
		text_clut[0] = 0;
 8004f76:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		text_clut[3] = color;
		break;
	}


	uint8_t h = *(font);	// Font height
 8004f7a:	9b06      	ldr	r3, [sp, #24]
 8004f7c:	781c      	ldrb	r4, [r3, #0]
	uint8_t w = 0;			// Character width
	uint8_t flag = 0;		// Flag -> character pointer not to beupdated in first loop

	// Waiting for DMA2D to stop
	BSP_LCD_DMA2D_Wait();
 8004f7e:	4b82      	ldr	r3, [pc, #520]	; (8005188 <G2D_TextBlend+0x244>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4798      	blx	r3

	while (*str > 0) {
 8004f84:	9b05      	ldr	r3, [sp, #20]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80fb 	beq.w	8005184 <G2D_TextBlend+0x240>

		// Getting character width
		w = _charw(font, *str);

		// Is character within screen area?
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 8004f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 8004f90:	9906      	ldr	r1, [sp, #24]
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 8004f92:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004f96:	4414      	add	r4, r2
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 8004f98:	784e      	ldrb	r6, [r1, #1]
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 8004f9a:	bfb4      	ite	lt
 8004f9c:	2200      	movlt	r2, #0
 8004f9e:	2201      	movge	r2, #1
		x += w;
 8004fa0:	f8bd 9010 	ldrh.w	r9, [sp, #16]
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	ea42 72d4 	orr.w	r2, r2, r4, lsr #31
 8004faa:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 800518c <G2D_TextBlend+0x248>
 8004fae:	464f      	mov	r7, r9
 8004fb0:	46b6      	mov	lr, r6
 8004fb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fb4:	e01d      	b.n	8004ff2 <G2D_TextBlend+0xae>
	uint16_t a = (ch - 33) * 2;
 8004fb6:	0064      	lsls	r4, r4, #1
	if (*adr0 == *adr1) return swidth;
 8004fb8:	9b06      	ldr	r3, [sp, #24]
	adr0 = (uint16_t*)(font + a + 2);
 8004fba:	b2a4      	uxth	r4, r4
 8004fbc:	1ca5      	adds	r5, r4, #2
	adr1 = (uint16_t*)(font + a + 4);
 8004fbe:	3404      	adds	r4, #4
	if (*adr0 == *adr1) return swidth;
 8004fc0:	5b5a      	ldrh	r2, [r3, r5]
	adr1 = (uint16_t*)(font + a + 4);
 8004fc2:	191e      	adds	r6, r3, r4
	if (*adr0 == *adr1) return swidth;
 8004fc4:	5b19      	ldrh	r1, [r3, r4]
	adr1 = (uint16_t*)(font + a + 4);
 8004fc6:	9609      	str	r6, [sp, #36]	; 0x24
	if (*adr0 == *adr1) return swidth;
 8004fc8:	428a      	cmp	r2, r1
 8004fca:	f000 80a8 	beq.w	800511e <G2D_TextBlend+0x1da>
	return *(font + *adr0);
 8004fce:	5c9b      	ldrb	r3, [r3, r2]
 8004fd0:	461e      	mov	r6, r3
 8004fd2:	9308      	str	r3, [sp, #32]
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 8004fd4:	9b04      	ldr	r3, [sp, #16]
 8004fd6:	199b      	adds	r3, r3, r6
 8004fd8:	d404      	bmi.n	8004fe4 <G2D_TextBlend+0xa0>
 8004fda:	9e04      	ldr	r6, [sp, #16]
 8004fdc:	f240 3c1f 	movw	ip, #799	; 0x31f
 8004fe0:	4566      	cmp	r6, ip
 8004fe2:	dd15      	ble.n	8005010 <G2D_TextBlend+0xcc>
		w = _charw(font, *str);
 8004fe4:	9a05      	ldr	r2, [sp, #20]
		x += w;
 8004fe6:	b29f      	uxth	r7, r3
 8004fe8:	b21b      	sxth	r3, r3
 8004fea:	9304      	str	r3, [sp, #16]
		w = _charw(font, *str);
 8004fec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004ff0:	9205      	str	r2, [sp, #20]
	if ((ch < 33) || (ch > 126)) return swidth;
 8004ff2:	f1a3 0421 	sub.w	r4, r3, #33	; 0x21
 8004ff6:	b2e2      	uxtb	r2, r4
 8004ff8:	2a5d      	cmp	r2, #93	; 0x5d
 8004ffa:	d9dc      	bls.n	8004fb6 <G2D_TextBlend+0x72>
	while (*str > 0) {
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d05c      	beq.n	80050ba <G2D_TextBlend+0x176>
 8005000:	9b06      	ldr	r3, [sp, #24]
 8005002:	f893 e001 	ldrb.w	lr, [r3, #1]
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 8005006:	4603      	mov	r3, r0
 8005008:	9a04      	ldr	r2, [sp, #16]
 800500a:	4670      	mov	r0, lr
 800500c:	4413      	add	r3, r2
 800500e:	e7e9      	b.n	8004fe4 <G2D_TextBlend+0xa0>
	if ((ch < 33) || (ch > 126)) return swidth;
 8005010:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005012:	2e00      	cmp	r6, #0
 8005014:	f040 8087 	bne.w	8005126 <G2D_TextBlend+0x1e2>
	if (*adr0 == *adr1) return swidth;
 8005018:	428a      	cmp	r2, r1
 800501a:	d0e3      	beq.n	8004fe4 <G2D_TextBlend+0xa0>
	uint8_t width = *(font + *adr0);
 800501c:	9e06      	ldr	r6, [sp, #24]
 800501e:	5cb3      	ldrb	r3, [r6, r2]
 8005020:	9302      	str	r3, [sp, #8]
	uint32_t offset = BSP_LCD_GetEditFrameAddr();
 8005022:	f7fe f8b9 	bl	8003198 <BSP_LCD_GetEditFrameAddr>
	for (uint16_t j = *adr0 + 1; j < *adr1; j++) {
 8005026:	5b73      	ldrh	r3, [r6, r5]
 8005028:	5b32      	ldrh	r2, [r6, r4]
 800502a:	3301      	adds	r3, #1
 800502c:	b29b      	uxth	r3, r3
 800502e:	4293      	cmp	r3, r2
 8005030:	9307      	str	r3, [sp, #28]
 8005032:	d23d      	bcs.n	80050b0 <G2D_TextBlend+0x16c>
	int16_t fy = 0;
 8005034:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	int16_t fx = 0;
 8005036:	463e      	mov	r6, r7
	int16_t fy = 0;
 8005038:	46a0      	mov	r8, r4
		m = *(font + j);
 800503a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 800503e:	f813 9001 	ldrb.w	r9, [r3, r1]
		switch (m >> 6) {
 8005042:	ea4f 1399 	mov.w	r3, r9, lsr #6
 8005046:	1e59      	subs	r1, r3, #1
 8005048:	2901      	cmp	r1, #1
 800504a:	d93d      	bls.n	80050c8 <G2D_TextBlend+0x184>
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 800504c:	f019 093f 	ands.w	r9, r9, #63	; 0x3f
 8005050:	d028      	beq.n	80050a4 <G2D_TextBlend+0x160>
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 8005052:	aa10      	add	r2, sp, #64	; 0x40
 8005054:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
				if (fx==width) { fx = 0; fy++; }
 8005058:	2700      	movs	r7, #0
 800505a:	9603      	str	r6, [sp, #12]
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 800505c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005060:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8005064:	b2a4      	uxth	r4, r4
 8005066:	9903      	ldr	r1, [sp, #12]
 8005068:	fa1f f588 	uxth.w	r5, r8
 800506c:	f8db 6000 	ldr.w	r6, [fp]
 8005070:	1861      	adds	r1, r4, r1
				fx++;
 8005072:	3401      	adds	r4, #1
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 8005074:	eb05 020a 	add.w	r2, r5, sl
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	b209      	sxth	r1, r1
 800507c:	9000      	str	r0, [sp, #0]
 800507e:	b212      	sxth	r2, r2
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 8005080:	3701      	adds	r7, #1
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 8005082:	47b0      	blx	r6
				if (fx==width) { fx = 0; fy++; }
 8005084:	9b02      	ldr	r3, [sp, #8]
				fx++;
 8005086:	b224      	sxth	r4, r4
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 8005088:	b2fa      	uxtb	r2, r7
				if (fx==width) { fx = 0; fy++; }
 800508a:	429c      	cmp	r4, r3
 800508c:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005090:	d103      	bne.n	800509a <G2D_TextBlend+0x156>
 8005092:	3501      	adds	r5, #1
 8005094:	2400      	movs	r4, #0
 8005096:	fa0f f885 	sxth.w	r8, r5
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 800509a:	4591      	cmp	r9, r2
 800509c:	d8e2      	bhi.n	8005064 <G2D_TextBlend+0x120>
	for (uint16_t j = *adr0 + 1; j < *adr1; j++) {
 800509e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a0:	9e03      	ldr	r6, [sp, #12]
 80050a2:	881a      	ldrh	r2, [r3, #0]
 80050a4:	9b07      	ldr	r3, [sp, #28]
 80050a6:	3301      	adds	r3, #1
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4293      	cmp	r3, r2
 80050ac:	9307      	str	r3, [sp, #28]
 80050ae:	d3c4      	bcc.n	800503a <G2D_TextBlend+0xf6>
	while (*str > 0) {
 80050b0:	9b05      	ldr	r3, [sp, #20]
 80050b2:	9808      	ldr	r0, [sp, #32]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1a2      	bne.n	8005000 <G2D_TextBlend+0xbc>

		// Character rendering
		_charblend(x, y, font, *str, text_clut);

	}
	return x + w;
 80050ba:	b280      	uxth	r0, r0
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	4418      	add	r0, r3
 80050c0:	b280      	uxth	r0, r0
}
 80050c2:	b011      	add	sp, #68	; 0x44
 80050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 80050c8:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[(m >> i) & 0x03]);
 80050cc:	2706      	movs	r7, #6
 80050ce:	9601      	str	r6, [sp, #4]
 80050d0:	fa49 f307 	asr.w	r3, r9, r7
 80050d4:	9a01      	ldr	r2, [sp, #4]
 80050d6:	b2a4      	uxth	r4, r4
 80050d8:	ae10      	add	r6, sp, #64	; 0x40
 80050da:	fa1f f588 	uxth.w	r5, r8
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	18a1      	adds	r1, r4, r2
				fx++;
 80050e4:	3401      	adds	r4, #1
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[(m >> i) & 0x03]);
 80050e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80050ea:	eb05 020a 	add.w	r2, r5, sl
 80050ee:	b209      	sxth	r1, r1
 80050f0:	f8db 6000 	ldr.w	r6, [fp]
 80050f4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80050f8:	b212      	sxth	r2, r2
 80050fa:	9000      	str	r0, [sp, #0]
				fx++;
 80050fc:	b224      	sxth	r4, r4
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[(m >> i) & 0x03]);
 80050fe:	47b0      	blx	r6
				if (fx==width) { fx = 0; fy++; }
 8005100:	9b02      	ldr	r3, [sp, #8]
			for (int8_t i = 6; i >= 0; i-=2) {
 8005102:	3f02      	subs	r7, #2
				if (fx==width) { fx = 0; fy++; }
 8005104:	9800      	ldr	r0, [sp, #0]
 8005106:	429c      	cmp	r4, r3
 8005108:	d103      	bne.n	8005112 <G2D_TextBlend+0x1ce>
 800510a:	3501      	adds	r5, #1
 800510c:	2400      	movs	r4, #0
 800510e:	fa0f f885 	sxth.w	r8, r5
			for (int8_t i = 6; i >= 0; i-=2) {
 8005112:	1cbb      	adds	r3, r7, #2
 8005114:	d1dc      	bne.n	80050d0 <G2D_TextBlend+0x18c>
	for (uint16_t j = *adr0 + 1; j < *adr1; j++) {
 8005116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005118:	9e01      	ldr	r6, [sp, #4]
 800511a:	881a      	ldrh	r2, [r3, #0]
 800511c:	e7c2      	b.n	80050a4 <G2D_TextBlend+0x160>
 800511e:	4676      	mov	r6, lr
	if (*adr0 == *adr1) return swidth;
 8005120:	f8cd e020 	str.w	lr, [sp, #32]
 8005124:	e756      	b.n	8004fd4 <G2D_TextBlend+0x90>
 8005126:	9808      	ldr	r0, [sp, #32]
 8005128:	e76d      	b.n	8005006 <G2D_TextBlend+0xc2>
		a1 = (color & 0xFF000000) >> 24;
 800512a:	0e23      	lsrs	r3, r4, #24
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 800512c:	22ab      	movs	r2, #171	; 0xab
		text_clut[3] = color;
 800512e:	940f      	str	r4, [sp, #60]	; 0x3c
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005130:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005134:	fb03 f202 	mul.w	r2, r3, r2
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005138:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800513c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005140:	0a12      	lsrs	r2, r2, #8
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005142:	0a1b      	lsrs	r3, r3, #8
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005144:	ea44 6202 	orr.w	r2, r4, r2, lsl #24
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005148:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
		text_clut[0] = 0;
 800514c:	2300      	movs	r3, #0
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 800514e:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
		text_clut[0] = 0;
 8005152:	930c      	str	r3, [sp, #48]	; 0x30
		break;
 8005154:	e711      	b.n	8004f7a <G2D_TextBlend+0x36>
		a1 = (color & 0xF000) >> 12;
 8005156:	f3c4 3303 	ubfx	r3, r4, #12, #4
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800515a:	22ab      	movs	r2, #171	; 0xab
		text_clut[3] = color;
 800515c:	940f      	str	r4, [sp, #60]	; 0x3c
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 800515e:	f3c4 040b 	ubfx	r4, r4, #0, #12
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 8005162:	fb03 f202 	mul.w	r2, r3, r2
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005166:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800516a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800516e:	0a12      	lsrs	r2, r2, #8
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005170:	0a1b      	lsrs	r3, r3, #8
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 8005172:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005176:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
		text_clut[0] = 0;
 800517a:	2300      	movs	r3, #0
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 800517c:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
		text_clut[0] = 0;
 8005180:	930c      	str	r3, [sp, #48]	; 0x30
		break;
 8005182:	e6fa      	b.n	8004f7a <G2D_TextBlend+0x36>
	while (*str > 0) {
 8005184:	4618      	mov	r0, r3
 8005186:	e799      	b.n	80050bc <G2D_TextBlend+0x178>
 8005188:	24000254 	.word	0x24000254
 800518c:	24000268 	.word	0x24000268

08005190 <G2D_DrawIconBlend>:
	y -= height >> 1;
	G2D_DrawIcon(iconsource, x, y, color, bgcolor);
}


void G2D_DrawIconBlend(uint32_t iconsource, int16_t x, int16_t y, uint32_t color) {
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	b08b      	sub	sp, #44	; 0x2c
 8005196:	4605      	mov	r5, r0
 8005198:	4691      	mov	r9, r2
 800519a:	461c      	mov	r4, r3
 800519c:	9102      	str	r1, [sp, #8]
	// Calculating color array for anty-aliasing
	uint32_t icon_clut[4];
	uint32_t a1 = 0;

	switch (BSP_LCD_GetColorMode()) {
 800519e:	f7fe f805 	bl	80031ac <BSP_LCD_GetColorMode>
 80051a2:	3801      	subs	r0, #1
 80051a4:	2805      	cmp	r0, #5
 80051a6:	d80a      	bhi.n	80051be <G2D_DrawIconBlend+0x2e>
 80051a8:	e8df f000 	tbb	[pc, r0]
 80051ac:	034d0303 	.word	0x034d0303
 80051b0:	4d63      	.short	0x4d63
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
		icon_clut[3] = color;
		break;
	case LCD_COLOR_MODE_ARGB1555:
		icon_clut[0] = 0;
 80051b2:	2000      	movs	r0, #0
 80051b4:	2100      	movs	r1, #0
		icon_clut[1] = 0;
		icon_clut[2] = color;
 80051b6:	e9cd 4408 	strd	r4, r4, [sp, #32]
		icon_clut[0] = 0;
 80051ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
		icon_clut[3] = color;
		break;
	}

	// Calculating destination address
	uint32_t faddr = BSP_LCD_GetEditFrameAddr();
 80051be:	f7fd ffeb 	bl	8003198 <BSP_LCD_GetEditFrameAddr>

	// Decoding compressed icon data
	uint8_t *pdata;
	pdata = (uint8_t *)iconsource;

	uint16_t width = *(uint16_t *)(pdata++);
 80051c2:	882b      	ldrh	r3, [r5, #0]
	pdata++;
	uint16_t height = *(uint16_t *)(pdata++);
	pdata++;
 80051c4:	1d2a      	adds	r2, r5, #4
	uint32_t faddr = BSP_LCD_GetEditFrameAddr();
 80051c6:	4682      	mov	sl, r0
	uint16_t width = *(uint16_t *)(pdata++);
 80051c8:	9305      	str	r3, [sp, #20]
	uint16_t height = *(uint16_t *)(pdata++);
 80051ca:	886b      	ldrh	r3, [r5, #2]
	pdata++;
 80051cc:	9203      	str	r2, [sp, #12]
	int16_t yy = y;

	// Waiting for DMA2D to stop
	BSP_LCD_DMA2D_Wait();

	while (yy < (y+height)) {
 80051ce:	eb03 0409 	add.w	r4, r3, r9
	BSP_LCD_DMA2D_Wait();
 80051d2:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <G2D_DrawIconBlend+0x110>)
 80051d4:	681b      	ldr	r3, [r3, #0]
	while (yy < (y+height)) {
 80051d6:	9404      	str	r4, [sp, #16]
	BSP_LCD_DMA2D_Wait();
 80051d8:	4798      	blx	r3
	while (yy < (y+height)) {
 80051da:	45a1      	cmp	r9, r4
 80051dc:	da30      	bge.n	8005240 <G2D_DrawIconBlend+0xb0>
	int16_t xx = x;
 80051de:	f8dd b008 	ldr.w	fp, [sp, #8]
 80051e2:	4655      	mov	r5, sl
 80051e4:	4f2f      	ldr	r7, [pc, #188]	; (80052a4 <G2D_DrawIconBlend+0x114>)
		uint8_t j = *(pdata++);
 80051e6:	9a03      	ldr	r2, [sp, #12]
 80051e8:	4613      	mov	r3, r2
 80051ea:	7816      	ldrb	r6, [r2, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	9303      	str	r3, [sp, #12]
		uint8_t m = j >> 6;
 80051f0:	09b3      	lsrs	r3, r6, #6
		uint8_t r = j & 0x3F;
		for (uint32_t z = 0; z<r; z++) {
 80051f2:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 80051f6:	d020      	beq.n	800523a <G2D_DrawIconBlend+0xaa>
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051f8:	aa0a      	add	r2, sp, #40	; 0x28
			xx++;
			if (xx == (x+width)) {
 80051fa:	9905      	ldr	r1, [sp, #20]
		for (uint32_t z = 0; z<r; z++) {
 80051fc:	2400      	movs	r4, #0
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051fe:	9601      	str	r6, [sp, #4]
 8005200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			if (xx == (x+width)) {
 8005204:	9a02      	ldr	r2, [sp, #8]
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 8005206:	f853 8c10 	ldr.w	r8, [r3, #-16]
			if (xx == (x+width)) {
 800520a:	eb02 0a01 	add.w	sl, r2, r1
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 800520e:	4659      	mov	r1, fp
			xx++;
 8005210:	f10b 0b01 	add.w	fp, fp, #1
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 8005214:	464a      	mov	r2, r9
 8005216:	4643      	mov	r3, r8
			xx++;
 8005218:	fa0f fb8b 	sxth.w	fp, fp
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 800521c:	4628      	mov	r0, r5
 800521e:	683e      	ldr	r6, [r7, #0]
		for (uint32_t z = 0; z<r; z++) {
 8005220:	3401      	adds	r4, #1
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 8005222:	47b0      	blx	r6
			if (xx == (x+width)) {
 8005224:	45d3      	cmp	fp, sl
 8005226:	d105      	bne.n	8005234 <G2D_DrawIconBlend+0xa4>
				xx = x;
				yy++;
 8005228:	f109 0901 	add.w	r9, r9, #1
				xx = x;
 800522c:	f8dd b008 	ldr.w	fp, [sp, #8]
				yy++;
 8005230:	fa0f f989 	sxth.w	r9, r9
		for (uint32_t z = 0; z<r; z++) {
 8005234:	9b01      	ldr	r3, [sp, #4]
 8005236:	429c      	cmp	r4, r3
 8005238:	d1e9      	bne.n	800520e <G2D_DrawIconBlend+0x7e>
	while (yy < (y+height)) {
 800523a:	9b04      	ldr	r3, [sp, #16]
 800523c:	4599      	cmp	r9, r3
 800523e:	dbd2      	blt.n	80051e6 <G2D_DrawIconBlend+0x56>
			}
		}
	}
}
 8005240:	b00b      	add	sp, #44	; 0x2c
 8005242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		a1 = (color & 0xFF000000) >> 24;
 8005246:	0e23      	lsrs	r3, r4, #24
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005248:	21ab      	movs	r1, #171	; 0xab
		icon_clut[3] = color;
 800524a:	9409      	str	r4, [sp, #36]	; 0x24
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 800524c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005250:	fb03 f101 	mul.w	r1, r3, r1
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005254:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005258:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 800525c:	0a09      	lsrs	r1, r1, #8
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 800525e:	0a1b      	lsrs	r3, r3, #8
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005260:	ea44 6101 	orr.w	r1, r4, r1, lsl #24
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005264:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
		icon_clut[0] = 0;
 8005268:	2300      	movs	r3, #0
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 800526a:	e9cd 4107 	strd	r4, r1, [sp, #28]
		icon_clut[0] = 0;
 800526e:	9306      	str	r3, [sp, #24]
		break;
 8005270:	e7a5      	b.n	80051be <G2D_DrawIconBlend+0x2e>
		a1 = (color & 0xF000) >> 12;
 8005272:	f3c4 3303 	ubfx	r3, r4, #12, #4
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 8005276:	21ab      	movs	r1, #171	; 0xab
		icon_clut[3] = color;
 8005278:	9409      	str	r4, [sp, #36]	; 0x24
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 800527a:	f3c4 040b 	ubfx	r4, r4, #0, #12
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800527e:	fb03 f101 	mul.w	r1, r3, r1
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005286:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800528a:	0a09      	lsrs	r1, r1, #8
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 800528c:	0a1b      	lsrs	r3, r3, #8
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800528e:	ea44 3101 	orr.w	r1, r4, r1, lsl #12
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005292:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
		icon_clut[0] = 0;
 8005296:	2300      	movs	r3, #0
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005298:	e9cd 4107 	strd	r4, r1, [sp, #28]
		icon_clut[0] = 0;
 800529c:	9306      	str	r3, [sp, #24]
		break;
 800529e:	e78e      	b.n	80051be <G2D_DrawIconBlend+0x2e>
 80052a0:	24000254 	.word	0x24000254
 80052a4:	24000268 	.word	0x24000268

080052a8 <G2D_DrawLastJPEG>:
	BSP_LCD_CopyBufJPEG((uint16_t)x, (uint16_t)y);
}

void G2D_DrawLastJPEG(int16_t x, int16_t y) {
	// TODO: Checking if JPEG is within borders of screen
	BSP_LCD_CopyBufJPEG((uint16_t)x, (uint16_t)y);
 80052a8:	4b02      	ldr	r3, [pc, #8]	; (80052b4 <G2D_DrawLastJPEG+0xc>)
 80052aa:	b289      	uxth	r1, r1
 80052ac:	b280      	uxth	r0, r0
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4718      	bx	r3
 80052b2:	bf00      	nop
 80052b4:	24000250 	.word	0x24000250

080052b8 <G2D_DecodeJPEG>:
}


void G2D_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {

	BSP_LCD_DecodeJPEG(jpeg_addr, jpeg_size);
 80052b8:	f7fd bf5c 	b.w	8003174 <BSP_LCD_DecodeJPEG>

080052bc <KALMAN_Init>:
    // We will set the variables like so, these can also be tuned by the user
    kalman->Q_angle   = 0.001;
    kalman->Q_bias    = 0.003;
    kalman->R_measure = 0.03;

    kalman->angle = 0.0; // Reset the angle
 80052bc:	2300      	movs	r3, #0
    kalman->Q_angle   = 0.001;
 80052be:	f8df c030 	ldr.w	ip, [pc, #48]	; 80052f0 <KALMAN_Init+0x34>
    kalman->Q_bias    = 0.003;
 80052c2:	4909      	ldr	r1, [pc, #36]	; (80052e8 <KALMAN_Init+0x2c>)
    kalman->R_measure = 0.03;
 80052c4:	4a09      	ldr	r2, [pc, #36]	; (80052ec <KALMAN_Init+0x30>)
void KALMAN_Init(KALMAN_HandleTypeDef *kalman) {
 80052c6:	b510      	push	{r4, lr}
 80052c8:	4604      	mov	r4, r0
    kalman->Q_angle   = 0.001;
 80052ca:	f8c0 c000 	str.w	ip, [r0]
    kalman->Q_bias    = 0.003;
 80052ce:	6041      	str	r1, [r0, #4]
    kalman->R_measure = 0.03;
 80052d0:	6082      	str	r2, [r0, #8]
    kalman->angle = 0.0; // Reset the angle
 80052d2:	60c3      	str	r3, [r0, #12]
    kalman->bias  = 0.0; // Reset bias
 80052d4:	6103      	str	r3, [r0, #16]

    // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so
    // see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
    kalman->P[0][0] = 0.0;
 80052d6:	6183      	str	r3, [r0, #24]
    kalman->P[0][1] = 0.0;
 80052d8:	61c3      	str	r3, [r0, #28]
    kalman->P[1][0] = 0.0;
 80052da:	6203      	str	r3, [r0, #32]
    kalman->P[1][1] = 0.0;
 80052dc:	6243      	str	r3, [r0, #36]	; 0x24

    kalman->tick = BSP_GetTick();
 80052de:	f7fe ff1b 	bl	8004118 <BSP_GetTick>
 80052e2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80052e4:	bd10      	pop	{r4, pc}
 80052e6:	bf00      	nop
 80052e8:	3b449ba6 	.word	0x3b449ba6
 80052ec:	3cf5c28f 	.word	0x3cf5c28f
 80052f0:	3a83126f 	.word	0x3a83126f

080052f4 <KALMAN_Update>:

float KALMAN_Update(KALMAN_HandleTypeDef *kalman, float newAngle, float newRate) {
 80052f4:	b510      	push	{r4, lr}
 80052f6:	4604      	mov	r4, r0
 80052f8:	ed2d 8b02 	vpush	{d8}
 80052fc:	eeb0 8a40 	vmov.f32	s16, s0
 8005300:	eef0 8a60 	vmov.f32	s17, s1
	// newAngle - last calculated angle from accelerometer [deg]
	// newRate - last rate of turn from gyro [deg/sec]


    // Step 1
	uint32_t tick = BSP_GetTick();
 8005304:	f7fe ff08 	bl	8004118 <BSP_GetTick>
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 8005308:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    kalman->angle += kalman->K[0] * kalman->y;
    kalman->bias += kalman->K[1] * kalman->y;

    // Step 7
    // Calculate estimation error covariance - Update the error covariance
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 800530a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 800530e:	ed94 5a07 	vldr	s10, [r4, #28]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 8005312:	1ac3      	subs	r3, r0, r3
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8005314:	ed94 6a08 	vldr	s12, [r4, #32]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 8005318:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 80053cc <KALMAN_Update+0xd8>
 800531c:	ee07 3a90 	vmov	s15, r3
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8005320:	ee75 5a06 	vadd.f32	s11, s10, s12
 8005324:	ed94 4a00 	vldr	s8, [r4]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 8005328:	eef8 7a67 	vcvt.f32.u32	s15, s15
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 800532c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8005330:	ee34 4a65 	vsub.f32	s8, s8, s11
 8005334:	edd4 6a06 	vldr	s13, [r4, #24]
    kalman->S = kalman->P[0][0] + kalman->R_measure;
 8005338:	edd4 4a02 	vldr	s9, [r4, #8]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 800533c:	ee67 7a82 	vmul.f32	s15, s15, s4
    kalman->P[1][1] += kalman->Q_bias * dt;
 8005340:	edd4 2a01 	vldr	s5, [r4, #4]
    kalman->rate = newRate - kalman->bias;
 8005344:	edd4 3a04 	vldr	s7, [r4, #16]
    kalman->angle += dt * kalman->rate;
 8005348:	edd4 5a03 	vldr	s11, [r4, #12]
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 800534c:	eea7 4a27 	vfma.f32	s8, s14, s15
	kalman->tick = tick;
 8005350:	63a0      	str	r0, [r4, #56]	; 0x38
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8005352:	eea7 6a67 	vfms.f32	s12, s14, s15
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8005356:	eea7 5a67 	vfms.f32	s10, s14, s15
    kalman->P[1][1] += kalman->Q_bias * dt;
 800535a:	eea2 7aa7 	vfma.f32	s14, s5, s15
    kalman->rate = newRate - kalman->bias;
 800535e:	ee78 0ae3 	vsub.f32	s1, s17, s7
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8005362:	eee4 6a27 	vfma.f32	s13, s8, s15
    kalman->angle += dt * kalman->rate;
 8005366:	eee0 5aa7 	vfma.f32	s11, s1, s15
    kalman->rate = newRate - kalman->bias;
 800536a:	edc4 0a05 	vstr	s1, [r4, #20]
    kalman->S = kalman->P[0][0] + kalman->R_measure;
 800536e:	ee76 4aa4 	vadd.f32	s9, s13, s9
    kalman->y = newAngle - kalman->angle;
 8005372:	ee78 7a65 	vsub.f32	s15, s16, s11
    kalman->K[0] = kalman->P[0][0] / kalman->S;
 8005376:	eec6 2aa4 	vdiv.f32	s5, s13, s9
    kalman->S = kalman->P[0][0] + kalman->R_measure;
 800537a:	edc4 4a0d 	vstr	s9, [r4, #52]	; 0x34
    kalman->y = newAngle - kalman->angle;
 800537e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    kalman->K[1] = kalman->P[1][0] / kalman->S;
 8005382:	ee86 4a24 	vdiv.f32	s8, s12, s9
    kalman->P[0][1] -= kalman->K[0] * kalman->P[0][1];
    kalman->P[1][0] -= kalman->K[1] * kalman->P[0][0];
    kalman->P[1][1] -= kalman->K[1] * kalman->P[0][1];

    return kalman->angle;
}
 8005386:	ecbd 8b02 	vpop	{d8}
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 800538a:	ee73 4a62 	vsub.f32	s9, s6, s5
    kalman->K[0] = kalman->P[0][0] / kalman->S;
 800538e:	edc4 2a0a 	vstr	s5, [r4, #40]	; 0x28
    kalman->angle += kalman->K[0] * kalman->y;
 8005392:	eee2 5aa7 	vfma.f32	s11, s5, s15
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 8005396:	ee66 6aa4 	vmul.f32	s13, s13, s9
    kalman->bias += kalman->K[1] * kalman->y;
 800539a:	eee4 3a27 	vfma.f32	s7, s8, s15
    kalman->K[1] = kalman->P[1][0] / kalman->S;
 800539e:	ed84 4a0b 	vstr	s8, [r4, #44]	; 0x2c
    kalman->P[0][1] -= kalman->K[0] * kalman->P[0][1];
 80053a2:	ee65 7a24 	vmul.f32	s15, s10, s9
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 80053a6:	edc4 6a06 	vstr	s13, [r4, #24]
    kalman->P[1][0] -= kalman->K[1] * kalman->P[0][0];
 80053aa:	eea4 6a66 	vfms.f32	s12, s8, s13
    kalman->angle += kalman->K[0] * kalman->y;
 80053ae:	edc4 5a03 	vstr	s11, [r4, #12]
 80053b2:	eeb0 0a65 	vmov.f32	s0, s11
    kalman->P[1][1] -= kalman->K[1] * kalman->P[0][1];
 80053b6:	eea4 7a67 	vfms.f32	s14, s8, s15
    kalman->P[0][1] -= kalman->K[0] * kalman->P[0][1];
 80053ba:	edc4 7a07 	vstr	s15, [r4, #28]
    kalman->bias += kalman->K[1] * kalman->y;
 80053be:	edc4 3a04 	vstr	s7, [r4, #16]
    kalman->P[1][0] -= kalman->K[1] * kalman->P[0][0];
 80053c2:	ed84 6a08 	vstr	s12, [r4, #32]
    kalman->P[1][1] -= kalman->K[1] * kalman->P[0][1];
 80053c6:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 80053ca:	bd10      	pop	{r4, pc}
 80053cc:	3a83126f 	.word	0x3a83126f

080053d0 <BSP_ADC_Init>:

/*******************************************************************
* I2C Functions
 *******************************************************************/

uint8_t BSP_ADC_Init(ADC_TypeDef * hadc, uint32_t resolution, uint32_t nb_conversions) {
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	4604      	mov	r4, r0
 80053d4:	460f      	mov	r7, r1
 80053d6:	4616      	mov	r6, r2

	uint32_t t_start = BSP_GetTick();
 80053d8:	f7fe fe9e 	bl	8004118 <BSP_GetTick>
	uint32_t tmpCFGR;

	// Exiting from deep power-down
	if (hadc->CR & ADC_CR_DEEPPWD) hadc->CR &= ~(ADC_CR_DEEPPWD);
 80053dc:	68a3      	ldr	r3, [r4, #8]
	uint32_t t_start = BSP_GetTick();
 80053de:	4605      	mov	r5, r0
	if (hadc->CR & ADC_CR_DEEPPWD) hadc->CR &= ~(ADC_CR_DEEPPWD);
 80053e0:	0099      	lsls	r1, r3, #2
 80053e2:	d503      	bpl.n	80053ec <BSP_ADC_Init+0x1c>
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053ea:	60a3      	str	r3, [r4, #8]

	// Starting internal voltage regulator
	hadc->CR |= ADC_CR_ADVREGEN;
 80053ec:	68a3      	ldr	r3, [r4, #8]
 80053ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f2:	60a3      	str	r3, [r4, #8]

	// Waiting for voltage regulator to start
	while ((hadc->ISR & ADC_ISR_LDORDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 80053f4:	e004      	b.n	8005400 <BSP_ADC_Init+0x30>
 80053f6:	f7fe fe8f 	bl	8004118 <BSP_GetTick>
 80053fa:	1b43      	subs	r3, r0, r5
 80053fc:	2b64      	cmp	r3, #100	; 0x64
 80053fe:	d84e      	bhi.n	800549e <BSP_ADC_Init+0xce>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	04da      	lsls	r2, r3, #19
 8005404:	d5f7      	bpl.n	80053f6 <BSP_ADC_Init+0x26>

	// Setting ADC clock prescaler
	ADC_Common_TypeDef * ADCxy_common;
	if ((hadc == ADC1) || (hadc == ADC2)) ADCxy_common = ADC12_COMMON; else ADCxy_common = ADC3_COMMON;
 8005406:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <BSP_ADC_Init+0xd8>)
 8005408:	429c      	cmp	r4, r3
 800540a:	d04a      	beq.n	80054a2 <BSP_ADC_Init+0xd2>
 800540c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005410:	429c      	cmp	r4, r3
 8005412:	d046      	beq.n	80054a2 <BSP_ADC_Init+0xd2>
 8005414:	4a25      	ldr	r2, [pc, #148]	; (80054ac <BSP_ADC_Init+0xdc>)
	MODIFY_REG(ADCxy_common->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, ADC_CLOCK_ASYNC_DIV1);
 8005416:	6893      	ldr	r3, [r2, #8]
	// 10: used when 12.5 MHz < ADC clock ≤ 25.0 MHz <<<<<<<<< SELECTED (Clock for ADC is 15MHz)
	// 11: used when 25.0 MHz < ADC clock ≤ 50.0 MHz
	MODIFY_REG(hadc->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);

	// Set number of ranks in regular group sequencer
	MODIFY_REG(hadc->SQR1, ADC_SQR1_L, (nb_conversions - (uint8_t)1));
 8005418:	3e01      	subs	r6, #1
	MODIFY_REG(ADCxy_common->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, ADC_CLOCK_ASYNC_DIV1);
 800541a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800541e:	6093      	str	r3, [r2, #8]
	tmpCFGR |= ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8005420:	f243 0303 	movw	r3, #12291	; 0x3003
 8005424:	433b      	orrs	r3, r7
	hadc->CFGR = tmpCFGR;
 8005426:	60e3      	str	r3, [r4, #12]
	CLEAR_BIT(hadc->CFGR2, ADC_CFGR2_ROVSE);
 8005428:	6923      	ldr	r3, [r4, #16]
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	6123      	str	r3, [r4, #16]
	MODIFY_REG(hadc->CFGR2, ADC_CFGR2_LSHIFT, ADC_LEFTBITSHIFT_NONE);
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005436:	6123      	str	r3, [r4, #16]
	MODIFY_REG(hadc->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005438:	68a3      	ldr	r3, [r4, #8]
 800543a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005442:	60a3      	str	r3, [r4, #8]
	MODIFY_REG(hadc->SQR1, ADC_SQR1_L, (nb_conversions - (uint8_t)1));
 8005444:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005446:	f023 030f 	bic.w	r3, r3, #15
 800544a:	4333      	orrs	r3, r6
 800544c:	6323      	str	r3, [r4, #48]	; 0x30

	// Auto-calibration - requesting single-ended calibration
	hadc->CR &= ~(ADC_CR_ADCALDIF);
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005454:	60a3      	str	r3, [r4, #8]

	// Auto-calibration - requesting calibration of offset and linearity
	hadc->CR |= ADC_CR_ADCALLIN;
 8005456:	68a3      	ldr	r3, [r4, #8]
 8005458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545c:	60a3      	str	r3, [r4, #8]

	// Starting calibration
	hadc->CR |= ADC_CR_ADCAL;
 800545e:	68a3      	ldr	r3, [r4, #8]
 8005460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005464:	60a3      	str	r3, [r4, #8]

	// Waiting for completion of calibration
	while (hadc->CR & ADC_CR_ADCAL) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 8005466:	e004      	b.n	8005472 <BSP_ADC_Init+0xa2>
 8005468:	f7fe fe56 	bl	8004118 <BSP_GetTick>
 800546c:	1b40      	subs	r0, r0, r5
 800546e:	2864      	cmp	r0, #100	; 0x64
 8005470:	d815      	bhi.n	800549e <BSP_ADC_Init+0xce>
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	dbf7      	blt.n	8005468 <BSP_ADC_Init+0x98>

	// Enabling ADC
	hadc->CR |= ADC_CR_ADEN;
 8005478:	68a3      	ldr	r3, [r4, #8]
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	60a3      	str	r3, [r4, #8]

	// Waiting until ADC started
	while ((hadc->ISR & ADC_ISR_ADRDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 8005480:	e004      	b.n	800548c <BSP_ADC_Init+0xbc>
 8005482:	f7fe fe49 	bl	8004118 <BSP_GetTick>
 8005486:	1b40      	subs	r0, r0, r5
 8005488:	2864      	cmp	r0, #100	; 0x64
 800548a:	d808      	bhi.n	800549e <BSP_ADC_Init+0xce>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	07db      	lsls	r3, r3, #31
 8005490:	d5f7      	bpl.n	8005482 <BSP_ADC_Init+0xb2>
	// Clearing ADRDY flag
	hadc->ISR &= ~(ADC_ISR_ADRDY);
 8005492:	6823      	ldr	r3, [r4, #0]

	return BSP_OK;
 8005494:	2000      	movs	r0, #0
	hadc->ISR &= ~(ADC_ISR_ADRDY);
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	6023      	str	r3, [r4, #0]
}
 800549c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((hadc->ISR & ADC_ISR_LDORDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 800549e:	2001      	movs	r0, #1
}
 80054a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((hadc == ADC1) || (hadc == ADC2)) ADCxy_common = ADC12_COMMON; else ADCxy_common = ADC3_COMMON;
 80054a2:	4a03      	ldr	r2, [pc, #12]	; (80054b0 <BSP_ADC_Init+0xe0>)
 80054a4:	e7b7      	b.n	8005416 <BSP_ADC_Init+0x46>
 80054a6:	bf00      	nop
 80054a8:	40022000 	.word	0x40022000
 80054ac:	58026300 	.word	0x58026300
 80054b0:	40022300 	.word	0x40022300

080054b4 <BSP_ADC_ConfigChannel>:


uint8_t BSP_ADC_ConfigChannel(ADC_TypeDef * hadc, uint32_t channel, uint32_t sequence) {

	if (channel>19) return BSP_ERROR;
	if (sequence == 0) return BSP_ERROR;
 80054b4:	2913      	cmp	r1, #19
 80054b6:	d83c      	bhi.n	8005532 <BSP_ADC_ConfigChannel+0x7e>
 80054b8:	4603      	mov	r3, r0
 80054ba:	fab2 f082 	clz	r0, r2
 80054be:	0940      	lsrs	r0, r0, #5
 80054c0:	b3ba      	cbz	r2, 8005532 <BSP_ADC_ConfigChannel+0x7e>
uint8_t BSP_ADC_ConfigChannel(ADC_TypeDef * hadc, uint32_t channel, uint32_t sequence) {
 80054c2:	b570      	push	{r4, r5, r6, lr}
	if (sequence > ((hadc->SQR1) & 0x0F)+1) return BSP_ERROR;
 80054c4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80054c6:	f004 0c0f 	and.w	ip, r4, #15
 80054ca:	f10c 0c01 	add.w	ip, ip, #1
 80054ce:	4594      	cmp	ip, r2
 80054d0:	d331      	bcc.n	8005536 <BSP_ADC_ConfigChannel+0x82>

	// ADC channels preselection
	hadc->PCSEL |= (1UL << channel);
 80054d2:	2401      	movs	r4, #1
 80054d4:	69de      	ldr	r6, [r3, #28]

	// Set ADC group regular sequence: channel on the selected scan sequence rank
	uint8_t sqr_shift = (sequence % 5) * 6;
	uint32_t * sqr_reg = &hadc->SQR1;
	sqr_reg += (sequence / 5);
 80054d6:	4d19      	ldr	r5, [pc, #100]	; (800553c <BSP_ADC_ConfigChannel+0x88>)
	uint32_t * sqr_reg = &hadc->SQR1;
 80054d8:	f103 0e30 	add.w	lr, r3, #48	; 0x30
	hadc->PCSEL |= (1UL << channel);
 80054dc:	408c      	lsls	r4, r1
	*sqr_reg |= (channel << sqr_shift);

	// Set sampling time of the selected ADC channel
	uint8_t smpr_shift = (channel % 10) * 3;
	uint32_t * smpr_reg = &hadc->SMPR1;
 80054de:	3314      	adds	r3, #20
	hadc->PCSEL |= (1UL << channel);
 80054e0:	4334      	orrs	r4, r6
 80054e2:	609c      	str	r4, [r3, #8]
	sqr_reg += (sequence / 5);
 80054e4:	fba5 4c02 	umull	r4, ip, r5, r2
	smpr_reg += (channel / 10);
 80054e8:	fba5 5401 	umull	r5, r4, r5, r1
	sqr_reg += (sequence / 5);
 80054ec:	f02c 0503 	bic.w	r5, ip, #3
	smpr_reg += (channel / 10);
 80054f0:	08e4      	lsrs	r4, r4, #3
	uint8_t sqr_shift = (sequence % 5) * 6;
 80054f2:	eb05 059c 	add.w	r5, r5, ip, lsr #2
	sqr_reg += (sequence / 5);
 80054f6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
	uint8_t sqr_shift = (sequence % 5) * 6;
 80054fa:	1b52      	subs	r2, r2, r5
	uint8_t smpr_shift = (channel % 10) * 3;
 80054fc:	eb04 0584 	add.w	r5, r4, r4, lsl #2
	uint8_t sqr_shift = (sequence % 5) * 6;
 8005500:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005504:	0052      	lsls	r2, r2, #1
	*sqr_reg |= (channel << sqr_shift);
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	fa01 f202 	lsl.w	r2, r1, r2
	uint8_t smpr_shift = (channel % 10) * 3;
 800550c:	eba1 0145 	sub.w	r1, r1, r5, lsl #1
	*smpr_reg |= (ADC_SAMPLINGTIME_64CYCLES_5 << smpr_shift);
 8005510:	2505      	movs	r5, #5
	uint8_t smpr_shift = (channel % 10) * 3;
 8005512:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	*smpr_reg |= (ADC_SAMPLINGTIME_64CYCLES_5 << smpr_shift);
 8005516:	b2c9      	uxtb	r1, r1
 8005518:	fa05 f101 	lsl.w	r1, r5, r1
	*sqr_reg |= (channel << sqr_shift);
 800551c:	f85e 502c 	ldr.w	r5, [lr, ip, lsl #2]
 8005520:	4315      	orrs	r5, r2
 8005522:	f84e 502c 	str.w	r5, [lr, ip, lsl #2]
	*smpr_reg |= (ADC_SAMPLINGTIME_64CYCLES_5 << smpr_shift);
 8005526:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800552a:	430a      	orrs	r2, r1
 800552c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	// For this application all other parameters remains default

	return BSP_OK;
}
 8005530:	bd70      	pop	{r4, r5, r6, pc}
	if (sequence == 0) return BSP_ERROR;
 8005532:	2001      	movs	r0, #1
}
 8005534:	4770      	bx	lr
	if (sequence == 0) return BSP_ERROR;
 8005536:	2001      	movs	r0, #1
}
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	bf00      	nop
 800553c:	cccccccd 	.word	0xcccccccd

08005540 <BSP_ADC_StartDMA>:


uint8_t BSP_ADC_StartDMA(ADC_TypeDef * hadc, TxRxContext_TypeDef *ctx, uint32_t *pData, uint32_t Length) {
 8005540:	b510      	push	{r4, lr}
 8005542:	4604      	mov	r4, r0

	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&hadc->DR, (uint32_t)pData, Length);
 8005544:	4608      	mov	r0, r1
 8005546:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800554a:	f000 fb95 	bl	8005c78 <BSP_STM32_DMA_StartIT>
	MODIFY_REG(hadc->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800554e:	68a2      	ldr	r2, [r4, #8]
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <BSP_ADC_StartDMA+0x20>)
	return BSP_OK;
}
 8005552:	2000      	movs	r0, #0
	MODIFY_REG(hadc->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8005554:	4013      	ands	r3, r2
 8005556:	f043 0304 	orr.w	r3, r3, #4
 800555a:	60a3      	str	r3, [r4, #8]
}
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	7fffffc0 	.word	0x7fffffc0

08005564 <BSP_BDMA_Init>:
  __IO uint32_t IFCR;  // BDMA interrupt flag clear register
} BDMA_Base_Registers;

uint32_t BDMACTXvectors[8] = {0};

uint8_t BSP_BDMA_Init(BDMA_Channel_TypeDef *hbdma, uint32_t dir, uint32_t pinc, uint32_t minc, uint32_t pdatalign, uint32_t mdatalign, uint32_t mode, uint32_t priority) {
 8005564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005568:	4605      	mov	r5, r0
 800556a:	4698      	mov	r8, r3
 800556c:	460e      	mov	r6, r1
 800556e:	4617      	mov	r7, r2

	uint32_t tickstart = BSP_GetTick();
 8005570:	f7fe fdd2 	bl	8004118 <BSP_GetTick>

    // Disable the peripheral
    hbdma->CCR &= ~BDMA_CCR_EN;
 8005574:	682b      	ldr	r3, [r5, #0]
	uint32_t tickstart = BSP_GetTick();
 8005576:	4681      	mov	r9, r0
    hbdma->CCR &= ~BDMA_CCR_EN;
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	602b      	str	r3, [r5, #0]

    // Check if the BDMA Channel is effectively disabled
    while ((hbdma->CCR & BDMA_CCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 800557e:	e005      	b.n	800558c <BSP_BDMA_Init+0x28>
 8005580:	f7fe fdca 	bl	8004118 <BSP_GetTick>
 8005584:	eba0 0409 	sub.w	r4, r0, r9
 8005588:	2c02      	cmp	r4, #2
 800558a:	d816      	bhi.n	80055ba <BSP_BDMA_Init+0x56>
 800558c:	682c      	ldr	r4, [r5, #0]
 800558e:	f014 0401 	ands.w	r4, r4, #1
 8005592:	d1f5      	bne.n	8005580 <BSP_BDMA_Init+0x1c>

	// Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits
	registerValue &= ((uint32_t)~(BDMA_CCR_PL | BDMA_CCR_MSIZE | BDMA_CCR_PSIZE | BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC | BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM | BDMA_CCR_CT));

	// Prepare the BDMA Channel configuration */
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005594:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
	uint32_t registerValue = hbdma->CCR;
 8005598:	6829      	ldr	r1, [r5, #0]

	// Write to BDMA Channel CR register
	hbdma->CCR = registerValue;

	return BSP_OK;
 800559a:	4620      	mov	r0, r4
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 800559c:	4313      	orrs	r3, r2
 800559e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a0:	4313      	orrs	r3, r2
 80055a2:	9a08      	ldr	r2, [sp, #32]
 80055a4:	4313      	orrs	r3, r2
	registerValue &= ((uint32_t)~(BDMA_CCR_PL | BDMA_CCR_MSIZE | BDMA_CCR_PSIZE | BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC | BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM | BDMA_CCR_CT));
 80055a6:	4a06      	ldr	r2, [pc, #24]	; (80055c0 <BSP_BDMA_Init+0x5c>)
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 80055a8:	ea43 0308 	orr.w	r3, r3, r8
	registerValue &= ((uint32_t)~(BDMA_CCR_PL | BDMA_CCR_MSIZE | BDMA_CCR_PSIZE | BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC | BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM | BDMA_CCR_CT));
 80055ac:	400a      	ands	r2, r1
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 80055ae:	433b      	orrs	r3, r7
 80055b0:	4333      	orrs	r3, r6
 80055b2:	4313      	orrs	r3, r2
	hbdma->CCR = registerValue;
 80055b4:	602b      	str	r3, [r5, #0]
}
 80055b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while ((hbdma->CCR & BDMA_CCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 80055ba:	2001      	movs	r0, #1
}
 80055bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c0:	fffe000f 	.word	0xfffe000f

080055c4 <BSP_BDMA_CtxLink>:

	ctx->dma_stream = (uint32_t)hbdma;
	ctx->dma_mode = TXRX_CTX_MODE_BDMA;

	// Initialize BaseAddress and Index parameters
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 80055c4:	4b16      	ldr	r3, [pc, #88]	; (8005620 <BSP_BDMA_CtxLink+0x5c>)
	ctx->dma_index = channel_number << 2U;
	BDMA_Base_Registers * dma_baseregs = (BDMA_Base_Registers *)((uint32_t)(hbdma) & (uint32_t)(~0xFFU));
	ctx->dma_baseregs = (uint32_t)dma_baseregs;

	// Clear all interrupt flags
	dma_baseregs->IFCR = ((BDMA_IFCR_CGIF0) << (ctx->dma_index & 0x1FU));
 80055c6:	f04f 0c01 	mov.w	ip, #1
	ctx->dma_stream = (uint32_t)hbdma;
 80055ca:	6048      	str	r0, [r1, #4]
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
	ctx->dma_muxchannelstatus = DMAMUX2_ChannelStatus_BASE;
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);

	DMAMUX_Channel_TypeDef * dma_muxchannel = (DMAMUX_Channel_TypeDef *)ctx->dma_muxchannel;
	dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 80055cc:	b2d2      	uxtb	r2, r2
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 80055ce:	4403      	add	r3, r0
	BDMA_Base_Registers * dma_baseregs = (BDMA_Base_Registers *)((uint32_t)(hbdma) & (uint32_t)(~0xFFU));
 80055d0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
uint8_t BSP_BDMA_CtxLink(BDMA_Channel_TypeDef *hbdma, TxRxContext_TypeDef *ctx, uint32_t request) {
 80055d4:	b430      	push	{r4, r5}
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 80055d6:	4c13      	ldr	r4, [pc, #76]	; (8005624 <BSP_BDMA_CtxLink+0x60>)
	ctx->dma_mode = TXRX_CTX_MODE_BDMA;
 80055d8:	2502      	movs	r5, #2
	ctx->dma_baseregs = (uint32_t)dma_baseregs;
 80055da:	60c8      	str	r0, [r1, #12]
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 80055dc:	fba4 4303 	umull	r4, r3, r4, r3
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 80055e0:	4c11      	ldr	r4, [pc, #68]	; (8005628 <BSP_BDMA_CtxLink+0x64>)
	ctx->dma_mode = TXRX_CTX_MODE_BDMA;
 80055e2:	600d      	str	r5, [r1, #0]
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 80055e4:	091b      	lsrs	r3, r3, #4
	ctx->dma_index = channel_number << 2U;
 80055e6:	fa03 f505 	lsl.w	r5, r3, r5
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 80055ea:	441c      	add	r4, r3
	ctx->dma_index = channel_number << 2U;
 80055ec:	608d      	str	r5, [r1, #8]
	dma_baseregs->IFCR = ((BDMA_IFCR_CGIF0) << (ctx->dma_index & 0x1FU));
 80055ee:	f005 051f 	and.w	r5, r5, #31
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 80055f2:	00a4      	lsls	r4, r4, #2
	dma_baseregs->IFCR = ((BDMA_IFCR_CGIF0) << (ctx->dma_index & 0x1FU));
 80055f4:	fa0c f505 	lsl.w	r5, ip, r5
 80055f8:	6045      	str	r5, [r0, #4]
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);
 80055fa:	f003 001f 	and.w	r0, r3, #31
	ctx->dma_muxchannelstatus = DMAMUX2_ChannelStatus_BASE;
 80055fe:	4d0b      	ldr	r5, [pc, #44]	; (800562c <BSP_BDMA_CtxLink+0x68>)
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);
 8005600:	fa0c f000 	lsl.w	r0, ip, r0
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 8005604:	610c      	str	r4, [r1, #16]
	ctx->dma_muxchannelstatus = DMAMUX2_ChannelStatus_BASE;
 8005606:	614d      	str	r5, [r1, #20]
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);
 8005608:	6188      	str	r0, [r1, #24]
	dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 800560a:	6022      	str	r2, [r4, #0]

	// Clear the DMAMUX synchro overrun flag
	DMAMUX_ChannelStatus_TypeDef * dma_muxchannelstatus = (DMAMUX_ChannelStatus_TypeDef *)ctx->dma_muxchannelstatus;
	dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 800560c:	4c08      	ldr	r4, [pc, #32]	; (8005630 <BSP_BDMA_CtxLink+0x6c>)

	// Assigning TxRx Context to BDMA channel
	BDMACTXvectors[channel_number] = (uint32_t)ctx;
 800560e:	4a09      	ldr	r2, [pc, #36]	; (8005634 <BSP_BDMA_CtxLink+0x70>)
	dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 8005610:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84

	return BSP_OK;
}
 8005614:	2000      	movs	r0, #0
	BDMACTXvectors[channel_number] = (uint32_t)ctx;
 8005616:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800561a:	bc30      	pop	{r4, r5}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	a7fdabf8 	.word	0xa7fdabf8
 8005624:	cccccccd 	.word	0xcccccccd
 8005628:	16009600 	.word	0x16009600
 800562c:	58025880 	.word	0x58025880
 8005630:	58025800 	.word	0x58025800
 8005634:	24000434 	.word	0x24000434

08005638 <BSP_BDMA_StartIT>:


uint8_t BSP_BDMA_StartIT(TxRxContext_TypeDef *ctx, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 8005638:	b470      	push	{r4, r5, r6}

	// Disable the peripheral
	hbdma->CCR &= ~BDMA_CCR_EN;

	// Clear all flags
	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800563a:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
	BDMA_Base_Registers * regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 800563e:	68c6      	ldr	r6, [r0, #12]
	hbdma->CCR &= ~BDMA_CCR_EN;
 8005640:	6820      	ldr	r0, [r4, #0]
	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005642:	f005 0c1f 	and.w	ip, r5, #31
	hbdma->CCR &= ~BDMA_CCR_EN;
 8005646:	f020 0001 	bic.w	r0, r0, #1
 800564a:	6020      	str	r0, [r4, #0]
	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800564c:	2001      	movs	r0, #1
 800564e:	fa00 f00c 	lsl.w	r0, r0, ip
 8005652:	6070      	str	r0, [r6, #4]

	// Configure DMA Stream data length
	hbdma->CNDTR = DataLength;
 8005654:	6063      	str	r3, [r4, #4]

	if((hbdma->CCR & BDMA_CCR_DIR) == BDMA_MEMORY_TO_PERIPH) {
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	06db      	lsls	r3, r3, #27
 800565a:	d50c      	bpl.n	8005676 <BSP_BDMA_StartIT+0x3e>
			// Memory to Peripheral
			// Configure DMA Stream source address
			hbdma->CPAR = DstAddress;
 800565c:	60a2      	str	r2, [r4, #8]

			// Configure DMA Stream destination address
			hbdma->CM0AR = SrcAddress;
 800565e:	60e1      	str	r1, [r4, #12]
		    // Configure DMA Stream source address
		    hbdma->CM0AR = DstAddress;
		}

	// Enable Common interrupts
	MODIFY_REG(hbdma->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE));
 8005660:	6823      	ldr	r3, [r4, #0]

	// Enable BDMA
	hbdma->CCR |=  BDMA_CCR_EN;

	return BSP_OK;
}
 8005662:	2000      	movs	r0, #0
	MODIFY_REG(hbdma->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE));
 8005664:	f043 030e 	orr.w	r3, r3, #14
 8005668:	6023      	str	r3, [r4, #0]
	hbdma->CCR |=  BDMA_CCR_EN;
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	6023      	str	r3, [r4, #0]
}
 8005672:	bc70      	pop	{r4, r5, r6}
 8005674:	4770      	bx	lr
		    hbdma->CPAR = SrcAddress;
 8005676:	60a1      	str	r1, [r4, #8]
		    hbdma->CM0AR = DstAddress;
 8005678:	60e2      	str	r2, [r4, #12]
 800567a:	e7f1      	b.n	8005660 <BSP_BDMA_StartIT+0x28>

0800567c <BDMA_Channel0_IRQHandler>:

}


void BDMA_Channel0_IRQHandler() {
	if (BDMACTXvectors[0x00]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x00]));
 800567c:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <BDMA_Channel0_IRQHandler+0x70>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	b903      	cbnz	r3, 8005684 <BDMA_Channel0_IRQHandler+0x8>
 8005682:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 8005684:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005686:	2104      	movs	r1, #4
void BDMA_Channel0_IRQHandler() {
 8005688:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800568a:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 800568e:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 8005692:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005694:	6815      	ldr	r5, [r2, #0]
 8005696:	4099      	lsls	r1, r3
 8005698:	420d      	tst	r5, r1
 800569a:	d008      	beq.n	80056ae <BDMA_Channel0_IRQHandler+0x32>
 800569c:	0745      	lsls	r5, r0, #29
 800569e:	d506      	bpl.n	80056ae <BDMA_Channel0_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 80056a0:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 80056a2:	0681      	lsls	r1, r0, #26
 80056a4:	d403      	bmi.n	80056ae <BDMA_Channel0_IRQHandler+0x32>
 80056a6:	6821      	ldr	r1, [r4, #0]
 80056a8:	f021 0104 	bic.w	r1, r1, #4
 80056ac:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80056ae:	2102      	movs	r1, #2
 80056b0:	6815      	ldr	r5, [r2, #0]
 80056b2:	4099      	lsls	r1, r3
 80056b4:	420d      	tst	r5, r1
 80056b6:	d008      	beq.n	80056ca <BDMA_Channel0_IRQHandler+0x4e>
 80056b8:	0785      	lsls	r5, r0, #30
 80056ba:	d506      	bpl.n	80056ca <BDMA_Channel0_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80056bc:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 80056be:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80056c0:	d403      	bmi.n	80056ca <BDMA_Channel0_IRQHandler+0x4e>
 80056c2:	6821      	ldr	r1, [r4, #0]
 80056c4:	f021 0102 	bic.w	r1, r1, #2
 80056c8:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 80056ca:	2108      	movs	r1, #8
 80056cc:	6815      	ldr	r5, [r2, #0]
 80056ce:	4099      	lsls	r1, r3
 80056d0:	4229      	tst	r1, r5
 80056d2:	d009      	beq.n	80056e8 <BDMA_Channel0_IRQHandler+0x6c>
 80056d4:	0701      	lsls	r1, r0, #28
 80056d6:	d507      	bpl.n	80056e8 <BDMA_Channel0_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80056d8:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80056da:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80056dc:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80056e4:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80056e6:	6053      	str	r3, [r2, #4]
}
 80056e8:	bc30      	pop	{r4, r5}
 80056ea:	4770      	bx	lr
 80056ec:	24000434 	.word	0x24000434

080056f0 <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler() { if (BDMACTXvectors[0x01]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x01])); }
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <BDMA_Channel1_IRQHandler+0x70>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	b903      	cbnz	r3, 80056f8 <BDMA_Channel1_IRQHandler+0x8>
 80056f6:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80056f8:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80056fa:	2104      	movs	r1, #4
void BDMA_Channel1_IRQHandler() { if (BDMACTXvectors[0x01]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x01])); }
 80056fc:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80056fe:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 8005702:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 8005706:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005708:	6815      	ldr	r5, [r2, #0]
 800570a:	4099      	lsls	r1, r3
 800570c:	420d      	tst	r5, r1
 800570e:	d008      	beq.n	8005722 <BDMA_Channel1_IRQHandler+0x32>
 8005710:	0745      	lsls	r5, r0, #29
 8005712:	d506      	bpl.n	8005722 <BDMA_Channel1_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8005714:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 8005716:	0681      	lsls	r1, r0, #26
 8005718:	d403      	bmi.n	8005722 <BDMA_Channel1_IRQHandler+0x32>
 800571a:	6821      	ldr	r1, [r4, #0]
 800571c:	f021 0104 	bic.w	r1, r1, #4
 8005720:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 8005722:	2102      	movs	r1, #2
 8005724:	6815      	ldr	r5, [r2, #0]
 8005726:	4099      	lsls	r1, r3
 8005728:	420d      	tst	r5, r1
 800572a:	d008      	beq.n	800573e <BDMA_Channel1_IRQHandler+0x4e>
 800572c:	0785      	lsls	r5, r0, #30
 800572e:	d506      	bpl.n	800573e <BDMA_Channel1_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005730:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 8005732:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005734:	d403      	bmi.n	800573e <BDMA_Channel1_IRQHandler+0x4e>
 8005736:	6821      	ldr	r1, [r4, #0]
 8005738:	f021 0102 	bic.w	r1, r1, #2
 800573c:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 800573e:	2108      	movs	r1, #8
 8005740:	6815      	ldr	r5, [r2, #0]
 8005742:	4099      	lsls	r1, r3
 8005744:	4229      	tst	r1, r5
 8005746:	d009      	beq.n	800575c <BDMA_Channel1_IRQHandler+0x6c>
 8005748:	0701      	lsls	r1, r0, #28
 800574a:	d507      	bpl.n	800575c <BDMA_Channel1_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800574c:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800574e:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005750:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005758:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800575a:	6053      	str	r3, [r2, #4]
void BDMA_Channel1_IRQHandler() { if (BDMACTXvectors[0x01]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x01])); }
 800575c:	bc30      	pop	{r4, r5}
 800575e:	4770      	bx	lr
 8005760:	24000434 	.word	0x24000434

08005764 <BDMA_Channel2_IRQHandler>:
void BDMA_Channel2_IRQHandler() { if (BDMACTXvectors[0x02]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x02])); }
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <BDMA_Channel2_IRQHandler+0x70>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	b903      	cbnz	r3, 800576c <BDMA_Channel2_IRQHandler+0x8>
 800576a:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 800576c:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800576e:	2104      	movs	r1, #4
void BDMA_Channel2_IRQHandler() { if (BDMACTXvectors[0x02]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x02])); }
 8005770:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005772:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 8005776:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 800577a:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800577c:	6815      	ldr	r5, [r2, #0]
 800577e:	4099      	lsls	r1, r3
 8005780:	420d      	tst	r5, r1
 8005782:	d008      	beq.n	8005796 <BDMA_Channel2_IRQHandler+0x32>
 8005784:	0745      	lsls	r5, r0, #29
 8005786:	d506      	bpl.n	8005796 <BDMA_Channel2_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8005788:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 800578a:	0681      	lsls	r1, r0, #26
 800578c:	d403      	bmi.n	8005796 <BDMA_Channel2_IRQHandler+0x32>
 800578e:	6821      	ldr	r1, [r4, #0]
 8005790:	f021 0104 	bic.w	r1, r1, #4
 8005794:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 8005796:	2102      	movs	r1, #2
 8005798:	6815      	ldr	r5, [r2, #0]
 800579a:	4099      	lsls	r1, r3
 800579c:	420d      	tst	r5, r1
 800579e:	d008      	beq.n	80057b2 <BDMA_Channel2_IRQHandler+0x4e>
 80057a0:	0785      	lsls	r5, r0, #30
 80057a2:	d506      	bpl.n	80057b2 <BDMA_Channel2_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80057a4:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 80057a6:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80057a8:	d403      	bmi.n	80057b2 <BDMA_Channel2_IRQHandler+0x4e>
 80057aa:	6821      	ldr	r1, [r4, #0]
 80057ac:	f021 0102 	bic.w	r1, r1, #2
 80057b0:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 80057b2:	2108      	movs	r1, #8
 80057b4:	6815      	ldr	r5, [r2, #0]
 80057b6:	4099      	lsls	r1, r3
 80057b8:	4229      	tst	r1, r5
 80057ba:	d009      	beq.n	80057d0 <BDMA_Channel2_IRQHandler+0x6c>
 80057bc:	0701      	lsls	r1, r0, #28
 80057be:	d507      	bpl.n	80057d0 <BDMA_Channel2_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80057c0:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80057c2:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80057c4:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80057cc:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80057ce:	6053      	str	r3, [r2, #4]
void BDMA_Channel2_IRQHandler() { if (BDMACTXvectors[0x02]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x02])); }
 80057d0:	bc30      	pop	{r4, r5}
 80057d2:	4770      	bx	lr
 80057d4:	24000434 	.word	0x24000434

080057d8 <BDMA_Channel3_IRQHandler>:
void BDMA_Channel3_IRQHandler() { if (BDMACTXvectors[0x03]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x03])); }
 80057d8:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <BDMA_Channel3_IRQHandler+0x70>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	b903      	cbnz	r3, 80057e0 <BDMA_Channel3_IRQHandler+0x8>
 80057de:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80057e0:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80057e2:	2104      	movs	r1, #4
void BDMA_Channel3_IRQHandler() { if (BDMACTXvectors[0x03]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x03])); }
 80057e4:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80057e6:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 80057ea:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 80057ee:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80057f0:	6815      	ldr	r5, [r2, #0]
 80057f2:	4099      	lsls	r1, r3
 80057f4:	420d      	tst	r5, r1
 80057f6:	d008      	beq.n	800580a <BDMA_Channel3_IRQHandler+0x32>
 80057f8:	0745      	lsls	r5, r0, #29
 80057fa:	d506      	bpl.n	800580a <BDMA_Channel3_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 80057fc:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 80057fe:	0681      	lsls	r1, r0, #26
 8005800:	d403      	bmi.n	800580a <BDMA_Channel3_IRQHandler+0x32>
 8005802:	6821      	ldr	r1, [r4, #0]
 8005804:	f021 0104 	bic.w	r1, r1, #4
 8005808:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 800580a:	2102      	movs	r1, #2
 800580c:	6815      	ldr	r5, [r2, #0]
 800580e:	4099      	lsls	r1, r3
 8005810:	420d      	tst	r5, r1
 8005812:	d008      	beq.n	8005826 <BDMA_Channel3_IRQHandler+0x4e>
 8005814:	0785      	lsls	r5, r0, #30
 8005816:	d506      	bpl.n	8005826 <BDMA_Channel3_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005818:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 800581a:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 800581c:	d403      	bmi.n	8005826 <BDMA_Channel3_IRQHandler+0x4e>
 800581e:	6821      	ldr	r1, [r4, #0]
 8005820:	f021 0102 	bic.w	r1, r1, #2
 8005824:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 8005826:	2108      	movs	r1, #8
 8005828:	6815      	ldr	r5, [r2, #0]
 800582a:	4099      	lsls	r1, r3
 800582c:	4229      	tst	r1, r5
 800582e:	d009      	beq.n	8005844 <BDMA_Channel3_IRQHandler+0x6c>
 8005830:	0701      	lsls	r1, r0, #28
 8005832:	d507      	bpl.n	8005844 <BDMA_Channel3_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005834:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005836:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005838:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005840:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005842:	6053      	str	r3, [r2, #4]
void BDMA_Channel3_IRQHandler() { if (BDMACTXvectors[0x03]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x03])); }
 8005844:	bc30      	pop	{r4, r5}
 8005846:	4770      	bx	lr
 8005848:	24000434 	.word	0x24000434

0800584c <BDMA_Channel4_IRQHandler>:
void BDMA_Channel4_IRQHandler() { if (BDMACTXvectors[0x04]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x04])); }
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <BDMA_Channel4_IRQHandler+0x70>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	b903      	cbnz	r3, 8005854 <BDMA_Channel4_IRQHandler+0x8>
 8005852:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 8005854:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005856:	2104      	movs	r1, #4
void BDMA_Channel4_IRQHandler() { if (BDMACTXvectors[0x04]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x04])); }
 8005858:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800585a:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 800585e:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 8005862:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005864:	6815      	ldr	r5, [r2, #0]
 8005866:	4099      	lsls	r1, r3
 8005868:	420d      	tst	r5, r1
 800586a:	d008      	beq.n	800587e <BDMA_Channel4_IRQHandler+0x32>
 800586c:	0745      	lsls	r5, r0, #29
 800586e:	d506      	bpl.n	800587e <BDMA_Channel4_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8005870:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 8005872:	0681      	lsls	r1, r0, #26
 8005874:	d403      	bmi.n	800587e <BDMA_Channel4_IRQHandler+0x32>
 8005876:	6821      	ldr	r1, [r4, #0]
 8005878:	f021 0104 	bic.w	r1, r1, #4
 800587c:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 800587e:	2102      	movs	r1, #2
 8005880:	6815      	ldr	r5, [r2, #0]
 8005882:	4099      	lsls	r1, r3
 8005884:	420d      	tst	r5, r1
 8005886:	d008      	beq.n	800589a <BDMA_Channel4_IRQHandler+0x4e>
 8005888:	0785      	lsls	r5, r0, #30
 800588a:	d506      	bpl.n	800589a <BDMA_Channel4_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 800588c:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 800588e:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005890:	d403      	bmi.n	800589a <BDMA_Channel4_IRQHandler+0x4e>
 8005892:	6821      	ldr	r1, [r4, #0]
 8005894:	f021 0102 	bic.w	r1, r1, #2
 8005898:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 800589a:	2108      	movs	r1, #8
 800589c:	6815      	ldr	r5, [r2, #0]
 800589e:	4099      	lsls	r1, r3
 80058a0:	4229      	tst	r1, r5
 80058a2:	d009      	beq.n	80058b8 <BDMA_Channel4_IRQHandler+0x6c>
 80058a4:	0701      	lsls	r1, r0, #28
 80058a6:	d507      	bpl.n	80058b8 <BDMA_Channel4_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80058a8:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80058aa:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80058ac:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80058b0:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80058b4:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80058b6:	6053      	str	r3, [r2, #4]
void BDMA_Channel4_IRQHandler() { if (BDMACTXvectors[0x04]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x04])); }
 80058b8:	bc30      	pop	{r4, r5}
 80058ba:	4770      	bx	lr
 80058bc:	24000434 	.word	0x24000434

080058c0 <BDMA_Channel5_IRQHandler>:
void BDMA_Channel5_IRQHandler() { if (BDMACTXvectors[0x05]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x05])); }
 80058c0:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <BDMA_Channel5_IRQHandler+0x70>)
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	b903      	cbnz	r3, 80058c8 <BDMA_Channel5_IRQHandler+0x8>
 80058c6:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80058c8:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80058ca:	2104      	movs	r1, #4
void BDMA_Channel5_IRQHandler() { if (BDMACTXvectors[0x05]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x05])); }
 80058cc:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80058ce:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 80058d2:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 80058d6:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80058d8:	6815      	ldr	r5, [r2, #0]
 80058da:	4099      	lsls	r1, r3
 80058dc:	420d      	tst	r5, r1
 80058de:	d008      	beq.n	80058f2 <BDMA_Channel5_IRQHandler+0x32>
 80058e0:	0745      	lsls	r5, r0, #29
 80058e2:	d506      	bpl.n	80058f2 <BDMA_Channel5_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 80058e4:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 80058e6:	0681      	lsls	r1, r0, #26
 80058e8:	d403      	bmi.n	80058f2 <BDMA_Channel5_IRQHandler+0x32>
 80058ea:	6821      	ldr	r1, [r4, #0]
 80058ec:	f021 0104 	bic.w	r1, r1, #4
 80058f0:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80058f2:	2102      	movs	r1, #2
 80058f4:	6815      	ldr	r5, [r2, #0]
 80058f6:	4099      	lsls	r1, r3
 80058f8:	420d      	tst	r5, r1
 80058fa:	d008      	beq.n	800590e <BDMA_Channel5_IRQHandler+0x4e>
 80058fc:	0785      	lsls	r5, r0, #30
 80058fe:	d506      	bpl.n	800590e <BDMA_Channel5_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005900:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 8005902:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005904:	d403      	bmi.n	800590e <BDMA_Channel5_IRQHandler+0x4e>
 8005906:	6821      	ldr	r1, [r4, #0]
 8005908:	f021 0102 	bic.w	r1, r1, #2
 800590c:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 800590e:	2108      	movs	r1, #8
 8005910:	6815      	ldr	r5, [r2, #0]
 8005912:	4099      	lsls	r1, r3
 8005914:	4229      	tst	r1, r5
 8005916:	d009      	beq.n	800592c <BDMA_Channel5_IRQHandler+0x6c>
 8005918:	0701      	lsls	r1, r0, #28
 800591a:	d507      	bpl.n	800592c <BDMA_Channel5_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800591c:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800591e:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005920:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005928:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800592a:	6053      	str	r3, [r2, #4]
void BDMA_Channel5_IRQHandler() { if (BDMACTXvectors[0x05]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x05])); }
 800592c:	bc30      	pop	{r4, r5}
 800592e:	4770      	bx	lr
 8005930:	24000434 	.word	0x24000434

08005934 <BDMA_Channel6_IRQHandler>:
void BDMA_Channel6_IRQHandler() { if (BDMACTXvectors[0x06]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x06])); }
 8005934:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <BDMA_Channel6_IRQHandler+0x70>)
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	b903      	cbnz	r3, 800593c <BDMA_Channel6_IRQHandler+0x8>
 800593a:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 800593c:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800593e:	2104      	movs	r1, #4
void BDMA_Channel6_IRQHandler() { if (BDMACTXvectors[0x06]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x06])); }
 8005940:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005942:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 8005946:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 800594a:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800594c:	6815      	ldr	r5, [r2, #0]
 800594e:	4099      	lsls	r1, r3
 8005950:	420d      	tst	r5, r1
 8005952:	d008      	beq.n	8005966 <BDMA_Channel6_IRQHandler+0x32>
 8005954:	0745      	lsls	r5, r0, #29
 8005956:	d506      	bpl.n	8005966 <BDMA_Channel6_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8005958:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 800595a:	0681      	lsls	r1, r0, #26
 800595c:	d403      	bmi.n	8005966 <BDMA_Channel6_IRQHandler+0x32>
 800595e:	6821      	ldr	r1, [r4, #0]
 8005960:	f021 0104 	bic.w	r1, r1, #4
 8005964:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 8005966:	2102      	movs	r1, #2
 8005968:	6815      	ldr	r5, [r2, #0]
 800596a:	4099      	lsls	r1, r3
 800596c:	420d      	tst	r5, r1
 800596e:	d008      	beq.n	8005982 <BDMA_Channel6_IRQHandler+0x4e>
 8005970:	0785      	lsls	r5, r0, #30
 8005972:	d506      	bpl.n	8005982 <BDMA_Channel6_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005974:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 8005976:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005978:	d403      	bmi.n	8005982 <BDMA_Channel6_IRQHandler+0x4e>
 800597a:	6821      	ldr	r1, [r4, #0]
 800597c:	f021 0102 	bic.w	r1, r1, #2
 8005980:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 8005982:	2108      	movs	r1, #8
 8005984:	6815      	ldr	r5, [r2, #0]
 8005986:	4099      	lsls	r1, r3
 8005988:	4229      	tst	r1, r5
 800598a:	d009      	beq.n	80059a0 <BDMA_Channel6_IRQHandler+0x6c>
 800598c:	0701      	lsls	r1, r0, #28
 800598e:	d507      	bpl.n	80059a0 <BDMA_Channel6_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005990:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005992:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005994:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800599c:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800599e:	6053      	str	r3, [r2, #4]
void BDMA_Channel6_IRQHandler() { if (BDMACTXvectors[0x06]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x06])); }
 80059a0:	bc30      	pop	{r4, r5}
 80059a2:	4770      	bx	lr
 80059a4:	24000434 	.word	0x24000434

080059a8 <BDMA_Channel7_IRQHandler>:
void BDMA_Channel7_IRQHandler() { if (BDMACTXvectors[0x07]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x07])); }
 80059a8:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <BDMA_Channel7_IRQHandler+0x70>)
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	b903      	cbnz	r3, 80059b0 <BDMA_Channel7_IRQHandler+0x8>
 80059ae:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80059b0:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80059b2:	2104      	movs	r1, #4
void BDMA_Channel7_IRQHandler() { if (BDMACTXvectors[0x07]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x07])); }
 80059b4:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80059b6:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 80059ba:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 80059be:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80059c0:	6815      	ldr	r5, [r2, #0]
 80059c2:	4099      	lsls	r1, r3
 80059c4:	420d      	tst	r5, r1
 80059c6:	d008      	beq.n	80059da <BDMA_Channel7_IRQHandler+0x32>
 80059c8:	0745      	lsls	r5, r0, #29
 80059ca:	d506      	bpl.n	80059da <BDMA_Channel7_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 80059cc:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 80059ce:	0681      	lsls	r1, r0, #26
 80059d0:	d403      	bmi.n	80059da <BDMA_Channel7_IRQHandler+0x32>
 80059d2:	6821      	ldr	r1, [r4, #0]
 80059d4:	f021 0104 	bic.w	r1, r1, #4
 80059d8:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80059da:	2102      	movs	r1, #2
 80059dc:	6815      	ldr	r5, [r2, #0]
 80059de:	4099      	lsls	r1, r3
 80059e0:	420d      	tst	r5, r1
 80059e2:	d008      	beq.n	80059f6 <BDMA_Channel7_IRQHandler+0x4e>
 80059e4:	0785      	lsls	r5, r0, #30
 80059e6:	d506      	bpl.n	80059f6 <BDMA_Channel7_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80059e8:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 80059ea:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80059ec:	d403      	bmi.n	80059f6 <BDMA_Channel7_IRQHandler+0x4e>
 80059ee:	6821      	ldr	r1, [r4, #0]
 80059f0:	f021 0102 	bic.w	r1, r1, #2
 80059f4:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 80059f6:	2108      	movs	r1, #8
 80059f8:	6815      	ldr	r5, [r2, #0]
 80059fa:	4099      	lsls	r1, r3
 80059fc:	4229      	tst	r1, r5
 80059fe:	d009      	beq.n	8005a14 <BDMA_Channel7_IRQHandler+0x6c>
 8005a00:	0701      	lsls	r1, r0, #28
 8005a02:	d507      	bpl.n	8005a14 <BDMA_Channel7_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005a04:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005a06:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005a08:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005a10:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005a12:	6053      	str	r3, [r2, #4]
void BDMA_Channel7_IRQHandler() { if (BDMACTXvectors[0x07]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x07])); }
 8005a14:	bc30      	pop	{r4, r5}
 8005a16:	4770      	bx	lr
 8005a18:	24000434 	.word	0x24000434

08005a1c <BSP_STM32_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	db07      	blt.n	8005a30 <BSP_STM32_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a20:	2301      	movs	r3, #1
 8005a22:	f000 011f 	and.w	r1, r0, #31
 8005a26:	4a03      	ldr	r2, [pc, #12]	; (8005a34 <BSP_STM32_NVIC_EnableIRQ+0x18>)
 8005a28:	0940      	lsrs	r0, r0, #5
 8005a2a:	408b      	lsls	r3, r1
 8005a2c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]


uint8_t BSP_STM32_NVIC_EnableIRQ(IRQn_Type IRQn) {
	NVIC_EnableIRQ(IRQn);
	return BSP_OK;
}
 8005a30:	2000      	movs	r0, #0
 8005a32:	4770      	bx	lr
 8005a34:	e000e100 	.word	0xe000e100

08005a38 <BSP_STM32_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a38:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <BSP_STM32_NVIC_SetPriority+0x74>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f3c3 2302 	ubfx	r3, r3, #8, #3


uint8_t BSP_STM32_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8005a40:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a42:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a46:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a4a:	f1be 0f04 	cmp.w	lr, #4
 8005a4e:	bf28      	it	cs
 8005a50:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a54:	f1bc 0f06 	cmp.w	ip, #6
 8005a58:	d91b      	bls.n	8005a92 <BSP_STM32_NVIC_SetPriority+0x5a>
 8005a5a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8005a60:	fa0c fc03 	lsl.w	ip, ip, r3
 8005a64:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a68:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8005a6c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a6e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005a72:	ea21 010c 	bic.w	r1, r1, ip
 8005a76:	fa01 f103 	lsl.w	r1, r1, r3
 8005a7a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005a7e:	db0b      	blt.n	8005a98 <BSP_STM32_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a80:	0109      	lsls	r1, r1, #4
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <BSP_STM32_NVIC_SetPriority+0x78>)
 8005a84:	b2c9      	uxtb	r1, r1
 8005a86:	4403      	add	r3, r0
	uint32_t prioritygroup = NVIC_GetPriorityGrouping();
	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
	return BSP_OK;
}
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8005a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a92:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a94:	4613      	mov	r3, r2
 8005a96:	e7e7      	b.n	8005a68 <BSP_STM32_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a98:	f000 000f 	and.w	r0, r0, #15
 8005a9c:	0109      	lsls	r1, r1, #4
 8005a9e:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <BSP_STM32_NVIC_SetPriority+0x7c>)
 8005aa0:	b2c9      	uxtb	r1, r1
 8005aa2:	4403      	add	r3, r0
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	7619      	strb	r1, [r3, #24]
 8005aa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aac:	e000ed00 	.word	0xe000ed00
 8005ab0:	e000e100 	.word	0xe000e100
 8005ab4:	e000ecfc 	.word	0xe000ecfc

08005ab8 <BSP_STM32_NVIC_SetPriorityGrouping>:

uint8_t BSP_STM32_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8005ab8:	b410      	push	{r4}
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aba:	4c08      	ldr	r4, [pc, #32]	; (8005adc <BSP_STM32_NVIC_SetPriorityGrouping+0x24>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005abc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005abe:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8005ac2:	4a07      	ldr	r2, [pc, #28]	; (8005ae0 <BSP_STM32_NVIC_SetPriorityGrouping+0x28>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ac4:	68e1      	ldr	r1, [r4, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	// Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value
	NVIC_SetPriorityGrouping(PriorityGroup);
	return BSP_OK;
}
 8005aca:	2000      	movs	r0, #0
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005acc:	ea01 010c 	and.w	r1, r1, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ad0:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8005ad2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8005ad4:	60e2      	str	r2, [r4, #12]
 8005ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	e000ed00 	.word	0xe000ed00
 8005ae0:	05fa0000 	.word	0x05fa0000

08005ae4 <BSP_STM32_MPU_Enable>:

uint8_t BSP_STM32_MPU_Enable(uint32_t MPU_Control) {
	// Enable the MPU
	MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005ae4:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <BSP_STM32_MPU_Enable+0x20>)
 8005ae6:	f040 0001 	orr.w	r0, r0, #1
 8005aea:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	// Enable fault exceptions
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005af0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005afa:	f3bf 8f6f 	isb	sy
	// Ensure MPU setting take effects
	  __DSB();
	  __ISB();
	return BSP_OK;
}
 8005afe:	2000      	movs	r0, #0
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	e000ed00 	.word	0xe000ed00

08005b08 <BSP_STM32_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005b08:	f3bf 8f5f 	dmb	sy

uint8_t BSP_STM32_MPU_Disable() {
	// Make sure outstanding transfers are done
	__DMB();
	// Disable fault exceptions
	SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <BSP_STM32_MPU_Disable+0x18>)
	// Disable the MPU and clear the control register
	MPU->CTRL = 0;
 8005b0e:	2000      	movs	r0, #0
	SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b16:	625a      	str	r2, [r3, #36]	; 0x24
	MPU->CTRL = 0;
 8005b18:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	return BSP_OK;
}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000ed00 	.word	0xe000ed00

08005b24 <BSP_STM32_MPU_ConfigRegion>:

uint8_t BSP_STM32_MPU_ConfigRegion(MPU_Region_TypeDef *MPU_Init) {
	// Set the Region number
	MPU->RNR = MPU_Init->Number;
 8005b24:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <BSP_STM32_MPU_ConfigRegion+0x64>)
 8005b26:	7843      	ldrb	r3, [r0, #1]
 8005b28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	if (MPU_Init->Enable == MPU_REGION_DISABLE) { MPU->RBAR = 0; MPU->RASR = 0; return BSP_OK; }
 8005b2c:	7801      	ldrb	r1, [r0, #0]
 8005b2e:	b329      	cbz	r1, 8005b7c <BSP_STM32_MPU_ConfigRegion+0x58>

	MPU->RBAR = MPU_Init->BaseAddress;
 8005b30:	6843      	ldr	r3, [r0, #4]
uint8_t BSP_STM32_MPU_ConfigRegion(MPU_Region_TypeDef *MPU_Init) {
 8005b32:	b500      	push	{lr}
	MPU->RBAR = MPU_Init->BaseAddress;
 8005b34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
	            ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005b38:	7ac3      	ldrb	r3, [r0, #11]
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b3a:	f890 c00c 	ldrb.w	ip, [r0, #12]
	            ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005b3e:	061b      	lsls	r3, r3, #24
	            ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
	            ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
	            ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
	            ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005b40:	f890 e00f 	ldrb.w	lr, [r0, #15]
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b44:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
	            ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005b48:	f890 c00a 	ldrb.w	ip, [r0, #10]
	            ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b4c:	430b      	orrs	r3, r1
	            ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005b4e:	7b81      	ldrb	r1, [r0, #14]
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b50:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
	            ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005b54:	f890 c00d 	ldrb.w	ip, [r0, #13]
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b58:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
	            ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005b5c:	f890 c009 	ldrb.w	ip, [r0, #9]
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b60:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005b64:	7a01      	ldrb	r1, [r0, #8]
	            ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);

	return BSP_OK;
}
 8005b66:	2000      	movs	r0, #0
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b68:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8005b6c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8005b70:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b74:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 8005b78:	f85d fb04 	ldr.w	pc, [sp], #4
	if (MPU_Init->Enable == MPU_REGION_DISABLE) { MPU->RBAR = 0; MPU->RASR = 0; return BSP_OK; }
 8005b7c:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
}
 8005b80:	2000      	movs	r0, #0
	if (MPU_Init->Enable == MPU_REGION_DISABLE) { MPU->RBAR = 0; MPU->RASR = 0; return BSP_OK; }
 8005b82:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8005b86:	4770      	bx	lr
 8005b88:	e000ed00 	.word	0xe000ed00

08005b8c <BSP_STM32_DMA_Init>:


uint32_t DMACTXvectors[16] = {0};


uint8_t BSP_STM32_DMA_Init(DMA_Stream_TypeDef *hdma, uint32_t dir, uint32_t pinc, uint32_t minc, uint32_t pdatalign, uint32_t mdatalign, uint32_t mode, uint32_t priority) {
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	4605      	mov	r5, r0
 8005b92:	4698      	mov	r8, r3
 8005b94:	460e      	mov	r6, r1
 8005b96:	4617      	mov	r7, r2

	uint32_t tickstart = BSP_GetTick();
 8005b98:	f7fe fabe 	bl	8004118 <BSP_GetTick>

    // Disable the peripheral
    hdma->CR &= ~DMA_SxCR_EN;
 8005b9c:	682b      	ldr	r3, [r5, #0]
	uint32_t tickstart = BSP_GetTick();
 8005b9e:	4681      	mov	r9, r0
    hdma->CR &= ~DMA_SxCR_EN;
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	602b      	str	r3, [r5, #0]

    // Check if the DMA Stream is effectively disabled
    while ((hdma->CR & DMA_SxCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 8005ba6:	e005      	b.n	8005bb4 <BSP_STM32_DMA_Init+0x28>
 8005ba8:	f7fe fab6 	bl	8004118 <BSP_GetTick>
 8005bac:	eba0 0409 	sub.w	r4, r0, r9
 8005bb0:	2c02      	cmp	r4, #2
 8005bb2:	d81a      	bhi.n	8005bea <BSP_STM32_DMA_Init+0x5e>
 8005bb4:	682c      	ldr	r4, [r5, #0]
 8005bb6:	f014 0401 	ands.w	r4, r4, #1
 8005bba:	d1f5      	bne.n	8005ba8 <BSP_STM32_DMA_Init+0x1c>

    // Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));

    // Prepare the DMA Stream configuration
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005bbc:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    uint32_t registerValue = hdma->CR;
 8005bc0:	6829      	ldr	r1, [r5, #0]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

    // Write to DMA Stream FCR
    hdma->FCR = registerValue;

	return BSP_OK;
 8005bc2:	4620      	mov	r0, r4
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	9a08      	ldr	r2, [sp, #32]
 8005bcc:	4313      	orrs	r3, r2
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 8005bce:	4a08      	ldr	r2, [pc, #32]	; (8005bf0 <BSP_STM32_DMA_Init+0x64>)
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005bd0:	ea43 0308 	orr.w	r3, r3, r8
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 8005bd4:	400a      	ands	r2, r1
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005bd6:	433b      	orrs	r3, r7
 8005bd8:	4333      	orrs	r3, r6
 8005bda:	4313      	orrs	r3, r2
    hdma->CR = registerValue;
 8005bdc:	602b      	str	r3, [r5, #0]
    registerValue = hdma->FCR;
 8005bde:	696b      	ldr	r3, [r5, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005be0:	f023 0307 	bic.w	r3, r3, #7
    hdma->FCR = registerValue;
 8005be4:	616b      	str	r3, [r5, #20]
}
 8005be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while ((hdma->CR & DMA_SxCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 8005bea:	2001      	movs	r0, #1
}
 8005bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf0:	fe10803f 	.word	0xfe10803f

08005bf4 <BSP_STM32_DMA_CtxLink>:


uint8_t BSP_STM32_DMA_CtxLink(DMA_Stream_TypeDef *hdma, TxRxContext_TypeDef *ctx, uint32_t request) {
 8005bf4:	b470      	push	{r4, r5, r6}

	ctx->dma_stream = (uint32_t)hdma;
	ctx->dma_mode = TXRX_CTX_MODE_DMA;
 8005bf6:	2401      	movs	r4, #1

    // Initialize StreamBaseAddress and StreamIndex parameters
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma) & 0xFFU) - 16U) / 24U;
 8005bf8:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <BSP_STM32_DMA_CtxLink+0x68>)
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8005bfa:	4e19      	ldr	r6, [pc, #100]	; (8005c60 <BSP_STM32_DMA_CtxLink+0x6c>)
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
    	else ctx->dma_baseregs = ((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU));

    //Clear all interrupt flags
    DMA_Base_Registers * regs_dma = (DMA_Base_Registers * )ctx->dma_baseregs;
    regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005bfc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    ctx->dma_muxchannelstatus = DMAMUX1_ChannelStatus_BASE;
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);

    // Set peripheral request  to DMAMUX channel
    DMAMUX_Channel_TypeDef * dma_muxchannel = (DMAMUX_Channel_TypeDef *)ctx->dma_muxchannel;
    dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 8005c00:	b2d2      	uxtb	r2, r2
	ctx->dma_mode = TXRX_CTX_MODE_DMA;
 8005c02:	e9c1 4000 	strd	r4, r0, [r1]
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma) & 0xFFU) - 16U) / 24U;
 8005c06:	b2c4      	uxtb	r4, r0
 8005c08:	3c10      	subs	r4, #16
 8005c0a:	fba3 5304 	umull	r5, r3, r3, r4
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
 8005c0e:	2c5f      	cmp	r4, #95	; 0x5f
 8005c10:	4c14      	ldr	r4, [pc, #80]	; (8005c64 <BSP_STM32_DMA_CtxLink+0x70>)
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8005c12:	f3c3 1502 	ubfx	r5, r3, #4, #3
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma) & 0xFFU) - 16U) / 24U;
 8005c16:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
 8005c1a:	ea04 0400 	and.w	r4, r4, r0
    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c1e:	4812      	ldr	r0, [pc, #72]	; (8005c68 <BSP_STM32_DMA_CtxLink+0x74>)
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8005c20:	5d75      	ldrb	r5, [r6, r5]
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
 8005c22:	bf88      	it	hi
 8005c24:	3404      	addhi	r4, #4
    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c26:	4418      	add	r0, r3
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8005c28:	608d      	str	r5, [r1, #8]
    regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005c2a:	f005 051f 	and.w	r5, r5, #31
 8005c2e:	60cc      	str	r4, [r1, #12]
    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c30:	0080      	lsls	r0, r0, #2
    regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005c32:	fa0c f505 	lsl.w	r5, ip, r5
 8005c36:	60a5      	str	r5, [r4, #8]
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);
 8005c38:	f003 051f 	and.w	r5, r3, #31
 8005c3c:	2401      	movs	r4, #1
    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c3e:	6108      	str	r0, [r1, #16]
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);
 8005c40:	40ac      	lsls	r4, r5
    ctx->dma_muxchannelstatus = DMAMUX1_ChannelStatus_BASE;
 8005c42:	4d0a      	ldr	r5, [pc, #40]	; (8005c6c <BSP_STM32_DMA_CtxLink+0x78>)
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);
 8005c44:	618c      	str	r4, [r1, #24]
    ctx->dma_muxchannelstatus = DMAMUX1_ChannelStatus_BASE;
 8005c46:	614d      	str	r5, [r1, #20]
    dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 8005c48:	6002      	str	r2, [r0, #0]

    // Clear the DMAMUX synchro overrun flag
    DMAMUX_ChannelStatus_TypeDef * dma_muxchannelstatus = (DMAMUX_ChannelStatus_TypeDef *)ctx->dma_muxchannelstatus;
    dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 8005c4a:	4809      	ldr	r0, [pc, #36]	; (8005c70 <BSP_STM32_DMA_CtxLink+0x7c>)

    // Assigning TxRx Context to DMA stream
    DMACTXvectors[stream_number] = (uint32_t)ctx;
 8005c4c:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <BSP_STM32_DMA_CtxLink+0x80>)
    dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 8005c4e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84

	return BSP_OK;
}
 8005c52:	2000      	movs	r0, #0
    DMACTXvectors[stream_number] = (uint32_t)ctx;
 8005c54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005c58:	bc70      	pop	{r4, r5, r6}
 8005c5a:	4770      	bx	lr
 8005c5c:	aaaaaaab 	.word	0xaaaaaaab
 8005c60:	080155f0 	.word	0x080155f0
 8005c64:	fffffc00 	.word	0xfffffc00
 8005c68:	10008200 	.word	0x10008200
 8005c6c:	40020880 	.word	0x40020880
 8005c70:	40020800 	.word	0x40020800
 8005c74:	24000454 	.word	0x24000454

08005c78 <BSP_STM32_DMA_StartIT>:


uint8_t BSP_STM32_DMA_StartIT(TxRxContext_TypeDef *ctx, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 8005c78:	b470      	push	{r4, r5, r6}

	// Disable the peripheral
	hdma->CR &= ~DMA_SxCR_EN;

	// Clear all interrupt flags at correct offset within the register
	regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005c7a:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
	DMA_Base_Registers * regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005c7e:	68c6      	ldr	r6, [r0, #12]
	hdma->CR &= ~DMA_SxCR_EN;
 8005c80:	6820      	ldr	r0, [r4, #0]
	regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005c82:	f005 0c1f 	and.w	ip, r5, #31
	hdma->CR &= ~DMA_SxCR_EN;
 8005c86:	f020 0001 	bic.w	r0, r0, #1
 8005c8a:	6020      	str	r0, [r4, #0]
	regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005c8c:	203f      	movs	r0, #63	; 0x3f
 8005c8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8005c92:	60b0      	str	r0, [r6, #8]

	// Clear DBM bit
	hdma->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8005c9a:	6020      	str	r0, [r4, #0]

	// Configure DMA Stream data length
	hdma->NDTR = DataLength;
 8005c9c:	6063      	str	r3, [r4, #4]

	if((hdma->CR & DMA_SxCR_DIR) == DMA_MEMORY_TO_PERIPH) {
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d00c      	beq.n	8005cc2 <BSP_STM32_DMA_StartIT+0x4a>
		// Configure DMA Stream destination address
		hdma->M0AR = SrcAddress;
	} else {
		// Peripheral to Memory
		// Configure DMA Stream destination address
	    hdma->PAR = SrcAddress;
 8005ca8:	60a1      	str	r1, [r4, #8]

	    // Configure DMA Stream source address
	    hdma->M0AR = DstAddress;
 8005caa:	60e2      	str	r2, [r4, #12]
	}

	// Enable Common interrupts
	MODIFY_REG(hdma->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT));
 8005cac:	6823      	ldr	r3, [r4, #0]

	// Enable DMA
	hdma->CR |=  DMA_SxCR_EN;

	return BSP_OK;
}
 8005cae:	2000      	movs	r0, #0
	MODIFY_REG(hdma->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT));
 8005cb0:	f043 031e 	orr.w	r3, r3, #30
 8005cb4:	6023      	str	r3, [r4, #0]
	hdma->CR |=  DMA_SxCR_EN;
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	6023      	str	r3, [r4, #0]
}
 8005cbe:	bc70      	pop	{r4, r5, r6}
 8005cc0:	4770      	bx	lr
		hdma->PAR = DstAddress;
 8005cc2:	60a2      	str	r2, [r4, #8]
		hdma->M0AR = SrcAddress;
 8005cc4:	60e1      	str	r1, [r4, #12]
 8005cc6:	e7f1      	b.n	8005cac <BSP_STM32_DMA_StartIT+0x34>

08005cc8 <BSP_STM32_DMA_GetCounter>:

	return BSP_OK;
}

uint32_t BSP_STM32_DMA_GetCounter(DMA_Stream_TypeDef *hdma) {
	return hdma->NDTR;
 8005cc8:	6840      	ldr	r0, [r0, #4]
}
 8005cca:	4770      	bx	lr

08005ccc <DMA1_Stream0_IRQHandler>:
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
	}

}

void DMA1_Stream0_IRQHandler() { if (DMACTXvectors[0x00]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x00])); }
 8005ccc:	4b40      	ldr	r3, [pc, #256]	; (8005dd0 <DMA1_Stream0_IRQHandler+0x104>)
 8005cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd2:	681c      	ldr	r4, [r3, #0]
 8005cd4:	b90c      	cbnz	r4, 8005cda <DMA1_Stream0_IRQHandler+0xe>
 8005cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8005cda:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8005cdc:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ce0:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005ce2:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ce4:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8005ce6:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005cea:	d515      	bpl.n	8005d18 <DMA1_Stream0_IRQHandler+0x4c>
 8005cec:	68a3      	ldr	r3, [r4, #8]
 8005cee:	f003 021f 	and.w	r2, r3, #31
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	4093      	lsls	r3, r2
 8005cf6:	6832      	ldr	r2, [r6, #0]
 8005cf8:	421a      	tst	r2, r3
 8005cfa:	d00d      	beq.n	8005d18 <DMA1_Stream0_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8005cfc:	682a      	ldr	r2, [r5, #0]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8005d04:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005d06:	682b      	ldr	r3, [r5, #0]
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005d0e:	f1b9 0f00 	cmp.w	r9, #0
 8005d12:	d001      	beq.n	8005d18 <DMA1_Stream0_IRQHandler+0x4c>
 8005d14:	4620      	mov	r0, r4
 8005d16:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005d18:	696b      	ldr	r3, [r5, #20]
 8005d1a:	0619      	lsls	r1, r3, #24
 8005d1c:	d516      	bpl.n	8005d4c <DMA1_Stream0_IRQHandler+0x80>
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	6832      	ldr	r2, [r6, #0]
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	40da      	lsrs	r2, r3
 8005d28:	07d2      	lsls	r2, r2, #31
 8005d2a:	d50f      	bpl.n	8005d4c <DMA1_Stream0_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8005d2c:	696a      	ldr	r2, [r5, #20]
 8005d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d32:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8005d34:	2201      	movs	r2, #1
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d46:	b10b      	cbz	r3, 8005d4c <DMA1_Stream0_IRQHandler+0x80>
 8005d48:	4620      	mov	r0, r4
 8005d4a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	079b      	lsls	r3, r3, #30
 8005d50:	d50c      	bpl.n	8005d6c <DMA1_Stream0_IRQHandler+0xa0>
 8005d52:	68a3      	ldr	r3, [r4, #8]
 8005d54:	f003 021f 	and.w	r2, r3, #31
 8005d58:	2304      	movs	r3, #4
 8005d5a:	4093      	lsls	r3, r2
 8005d5c:	6832      	ldr	r2, [r6, #0]
 8005d5e:	421a      	tst	r2, r3
 8005d60:	d004      	beq.n	8005d6c <DMA1_Stream0_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8005d62:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d66:	b10b      	cbz	r3, 8005d6c <DMA1_Stream0_IRQHandler+0xa0>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	0718      	lsls	r0, r3, #28
 8005d70:	d513      	bpl.n	8005d9a <DMA1_Stream0_IRQHandler+0xce>
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	f003 021f 	and.w	r2, r3, #31
 8005d78:	2310      	movs	r3, #16
 8005d7a:	4093      	lsls	r3, r2
 8005d7c:	6832      	ldr	r2, [r6, #0]
 8005d7e:	421a      	tst	r2, r3
 8005d80:	d00b      	beq.n	8005d9a <DMA1_Stream0_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8005d82:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	05d9      	lsls	r1, r3, #23
 8005d88:	d403      	bmi.n	8005d92 <DMA1_Stream0_IRQHandler+0xc6>
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	f023 0308 	bic.w	r3, r3, #8
 8005d90:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8005d92:	69e3      	ldr	r3, [r4, #28]
 8005d94:	b10b      	cbz	r3, 8005d9a <DMA1_Stream0_IRQHandler+0xce>
 8005d96:	4620      	mov	r0, r4
 8005d98:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	06da      	lsls	r2, r3, #27
 8005d9e:	d59a      	bpl.n	8005cd6 <DMA1_Stream0_IRQHandler+0xa>
 8005da0:	68a3      	ldr	r3, [r4, #8]
 8005da2:	6831      	ldr	r1, [r6, #0]
 8005da4:	f003 021f 	and.w	r2, r3, #31
 8005da8:	2320      	movs	r3, #32
 8005daa:	4093      	lsls	r3, r2
 8005dac:	4219      	tst	r1, r3
 8005dae:	d092      	beq.n	8005cd6 <DMA1_Stream0_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8005db0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8005db2:	682b      	ldr	r3, [r5, #0]
 8005db4:	05db      	lsls	r3, r3, #23
 8005db6:	d403      	bmi.n	8005dc0 <DMA1_Stream0_IRQHandler+0xf4>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	f023 0310 	bic.w	r3, r3, #16
 8005dbe:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005dc0:	6a23      	ldr	r3, [r4, #32]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d087      	beq.n	8005cd6 <DMA1_Stream0_IRQHandler+0xa>
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	463b      	mov	r3, r7
void DMA1_Stream0_IRQHandler() { if (DMACTXvectors[0x00]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x00])); }
 8005dca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005dce:	4718      	bx	r3
 8005dd0:	24000454 	.word	0x24000454

08005dd4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler() { if (DMACTXvectors[0x01]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x01])); }
 8005dd4:	4b40      	ldr	r3, [pc, #256]	; (8005ed8 <DMA1_Stream1_IRQHandler+0x104>)
 8005dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dda:	685c      	ldr	r4, [r3, #4]
 8005ddc:	b90c      	cbnz	r4, 8005de2 <DMA1_Stream1_IRQHandler+0xe>
 8005dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8005de2:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8005de4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005de8:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005dea:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005dec:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8005dee:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005df2:	d515      	bpl.n	8005e20 <DMA1_Stream1_IRQHandler+0x4c>
 8005df4:	68a3      	ldr	r3, [r4, #8]
 8005df6:	f003 021f 	and.w	r2, r3, #31
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	4093      	lsls	r3, r2
 8005dfe:	6832      	ldr	r2, [r6, #0]
 8005e00:	421a      	tst	r2, r3
 8005e02:	d00d      	beq.n	8005e20 <DMA1_Stream1_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8005e04:	682a      	ldr	r2, [r5, #0]
 8005e06:	f022 0204 	bic.w	r2, r2, #4
 8005e0a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8005e0c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005e0e:	682b      	ldr	r3, [r5, #0]
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005e16:	f1b9 0f00 	cmp.w	r9, #0
 8005e1a:	d001      	beq.n	8005e20 <DMA1_Stream1_IRQHandler+0x4c>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005e20:	696b      	ldr	r3, [r5, #20]
 8005e22:	0619      	lsls	r1, r3, #24
 8005e24:	d516      	bpl.n	8005e54 <DMA1_Stream1_IRQHandler+0x80>
 8005e26:	68a3      	ldr	r3, [r4, #8]
 8005e28:	6832      	ldr	r2, [r6, #0]
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	40da      	lsrs	r2, r3
 8005e30:	07d2      	lsls	r2, r2, #31
 8005e32:	d50f      	bpl.n	8005e54 <DMA1_Stream1_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8005e34:	696a      	ldr	r2, [r5, #20]
 8005e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e3a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	f023 0301 	bic.w	r3, r3, #1
 8005e4a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e4e:	b10b      	cbz	r3, 8005e54 <DMA1_Stream1_IRQHandler+0x80>
 8005e50:	4620      	mov	r0, r4
 8005e52:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	079b      	lsls	r3, r3, #30
 8005e58:	d50c      	bpl.n	8005e74 <DMA1_Stream1_IRQHandler+0xa0>
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	f003 021f 	and.w	r2, r3, #31
 8005e60:	2304      	movs	r3, #4
 8005e62:	4093      	lsls	r3, r2
 8005e64:	6832      	ldr	r2, [r6, #0]
 8005e66:	421a      	tst	r2, r3
 8005e68:	d004      	beq.n	8005e74 <DMA1_Stream1_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8005e6a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e6e:	b10b      	cbz	r3, 8005e74 <DMA1_Stream1_IRQHandler+0xa0>
 8005e70:	4620      	mov	r0, r4
 8005e72:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	0718      	lsls	r0, r3, #28
 8005e78:	d513      	bpl.n	8005ea2 <DMA1_Stream1_IRQHandler+0xce>
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	f003 021f 	and.w	r2, r3, #31
 8005e80:	2310      	movs	r3, #16
 8005e82:	4093      	lsls	r3, r2
 8005e84:	6832      	ldr	r2, [r6, #0]
 8005e86:	421a      	tst	r2, r3
 8005e88:	d00b      	beq.n	8005ea2 <DMA1_Stream1_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8005e8a:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	05d9      	lsls	r1, r3, #23
 8005e90:	d403      	bmi.n	8005e9a <DMA1_Stream1_IRQHandler+0xc6>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	f023 0308 	bic.w	r3, r3, #8
 8005e98:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8005e9a:	69e3      	ldr	r3, [r4, #28]
 8005e9c:	b10b      	cbz	r3, 8005ea2 <DMA1_Stream1_IRQHandler+0xce>
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	06da      	lsls	r2, r3, #27
 8005ea6:	d59a      	bpl.n	8005dde <DMA1_Stream1_IRQHandler+0xa>
 8005ea8:	68a3      	ldr	r3, [r4, #8]
 8005eaa:	6831      	ldr	r1, [r6, #0]
 8005eac:	f003 021f 	and.w	r2, r3, #31
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	4093      	lsls	r3, r2
 8005eb4:	4219      	tst	r1, r3
 8005eb6:	d092      	beq.n	8005dde <DMA1_Stream1_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8005eb8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	05db      	lsls	r3, r3, #23
 8005ebe:	d403      	bmi.n	8005ec8 <DMA1_Stream1_IRQHandler+0xf4>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005ec8:	6a23      	ldr	r3, [r4, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d087      	beq.n	8005dde <DMA1_Stream1_IRQHandler+0xa>
 8005ece:	4620      	mov	r0, r4
 8005ed0:	463b      	mov	r3, r7
void DMA1_Stream1_IRQHandler() { if (DMACTXvectors[0x01]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x01])); }
 8005ed2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005ed6:	4718      	bx	r3
 8005ed8:	24000454 	.word	0x24000454

08005edc <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler() { if (DMACTXvectors[0x02]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x02])); }
 8005edc:	4b40      	ldr	r3, [pc, #256]	; (8005fe0 <DMA1_Stream2_IRQHandler+0x104>)
 8005ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee2:	689c      	ldr	r4, [r3, #8]
 8005ee4:	b90c      	cbnz	r4, 8005eea <DMA1_Stream2_IRQHandler+0xe>
 8005ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8005eea:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8005eec:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ef0:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005ef2:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ef4:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8005ef6:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005efa:	d515      	bpl.n	8005f28 <DMA1_Stream2_IRQHandler+0x4c>
 8005efc:	68a3      	ldr	r3, [r4, #8]
 8005efe:	f003 021f 	and.w	r2, r3, #31
 8005f02:	2308      	movs	r3, #8
 8005f04:	4093      	lsls	r3, r2
 8005f06:	6832      	ldr	r2, [r6, #0]
 8005f08:	421a      	tst	r2, r3
 8005f0a:	d00d      	beq.n	8005f28 <DMA1_Stream2_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8005f0c:	682a      	ldr	r2, [r5, #0]
 8005f0e:	f022 0204 	bic.w	r2, r2, #4
 8005f12:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8005f14:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005f1e:	f1b9 0f00 	cmp.w	r9, #0
 8005f22:	d001      	beq.n	8005f28 <DMA1_Stream2_IRQHandler+0x4c>
 8005f24:	4620      	mov	r0, r4
 8005f26:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005f28:	696b      	ldr	r3, [r5, #20]
 8005f2a:	0619      	lsls	r1, r3, #24
 8005f2c:	d516      	bpl.n	8005f5c <DMA1_Stream2_IRQHandler+0x80>
 8005f2e:	68a3      	ldr	r3, [r4, #8]
 8005f30:	6832      	ldr	r2, [r6, #0]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	40da      	lsrs	r2, r3
 8005f38:	07d2      	lsls	r2, r2, #31
 8005f3a:	d50f      	bpl.n	8005f5c <DMA1_Stream2_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8005f3c:	696a      	ldr	r2, [r5, #20]
 8005f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f42:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8005f44:	2201      	movs	r2, #1
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f56:	b10b      	cbz	r3, 8005f5c <DMA1_Stream2_IRQHandler+0x80>
 8005f58:	4620      	mov	r0, r4
 8005f5a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	079b      	lsls	r3, r3, #30
 8005f60:	d50c      	bpl.n	8005f7c <DMA1_Stream2_IRQHandler+0xa0>
 8005f62:	68a3      	ldr	r3, [r4, #8]
 8005f64:	f003 021f 	and.w	r2, r3, #31
 8005f68:	2304      	movs	r3, #4
 8005f6a:	4093      	lsls	r3, r2
 8005f6c:	6832      	ldr	r2, [r6, #0]
 8005f6e:	421a      	tst	r2, r3
 8005f70:	d004      	beq.n	8005f7c <DMA1_Stream2_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8005f72:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f76:	b10b      	cbz	r3, 8005f7c <DMA1_Stream2_IRQHandler+0xa0>
 8005f78:	4620      	mov	r0, r4
 8005f7a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	0718      	lsls	r0, r3, #28
 8005f80:	d513      	bpl.n	8005faa <DMA1_Stream2_IRQHandler+0xce>
 8005f82:	68a3      	ldr	r3, [r4, #8]
 8005f84:	f003 021f 	and.w	r2, r3, #31
 8005f88:	2310      	movs	r3, #16
 8005f8a:	4093      	lsls	r3, r2
 8005f8c:	6832      	ldr	r2, [r6, #0]
 8005f8e:	421a      	tst	r2, r3
 8005f90:	d00b      	beq.n	8005faa <DMA1_Stream2_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8005f92:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	05d9      	lsls	r1, r3, #23
 8005f98:	d403      	bmi.n	8005fa2 <DMA1_Stream2_IRQHandler+0xc6>
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	f023 0308 	bic.w	r3, r3, #8
 8005fa0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8005fa2:	69e3      	ldr	r3, [r4, #28]
 8005fa4:	b10b      	cbz	r3, 8005faa <DMA1_Stream2_IRQHandler+0xce>
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005faa:	682b      	ldr	r3, [r5, #0]
 8005fac:	06da      	lsls	r2, r3, #27
 8005fae:	d59a      	bpl.n	8005ee6 <DMA1_Stream2_IRQHandler+0xa>
 8005fb0:	68a3      	ldr	r3, [r4, #8]
 8005fb2:	6831      	ldr	r1, [r6, #0]
 8005fb4:	f003 021f 	and.w	r2, r3, #31
 8005fb8:	2320      	movs	r3, #32
 8005fba:	4093      	lsls	r3, r2
 8005fbc:	4219      	tst	r1, r3
 8005fbe:	d092      	beq.n	8005ee6 <DMA1_Stream2_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8005fc0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	05db      	lsls	r3, r3, #23
 8005fc6:	d403      	bmi.n	8005fd0 <DMA1_Stream2_IRQHandler+0xf4>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	f023 0310 	bic.w	r3, r3, #16
 8005fce:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005fd0:	6a23      	ldr	r3, [r4, #32]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d087      	beq.n	8005ee6 <DMA1_Stream2_IRQHandler+0xa>
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	463b      	mov	r3, r7
void DMA1_Stream2_IRQHandler() { if (DMACTXvectors[0x02]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x02])); }
 8005fda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005fde:	4718      	bx	r3
 8005fe0:	24000454 	.word	0x24000454

08005fe4 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler() { if (DMACTXvectors[0x03]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x03])); }
 8005fe4:	4b40      	ldr	r3, [pc, #256]	; (80060e8 <DMA1_Stream3_IRQHandler+0x104>)
 8005fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fea:	68dc      	ldr	r4, [r3, #12]
 8005fec:	b90c      	cbnz	r4, 8005ff2 <DMA1_Stream3_IRQHandler+0xe>
 8005fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8005ff2:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8005ff4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ff8:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005ffa:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ffc:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8005ffe:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006002:	d515      	bpl.n	8006030 <DMA1_Stream3_IRQHandler+0x4c>
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	f003 021f 	and.w	r2, r3, #31
 800600a:	2308      	movs	r3, #8
 800600c:	4093      	lsls	r3, r2
 800600e:	6832      	ldr	r2, [r6, #0]
 8006010:	421a      	tst	r2, r3
 8006012:	d00d      	beq.n	8006030 <DMA1_Stream3_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006014:	682a      	ldr	r2, [r5, #0]
 8006016:	f022 0204 	bic.w	r2, r2, #4
 800601a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 800601c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006026:	f1b9 0f00 	cmp.w	r9, #0
 800602a:	d001      	beq.n	8006030 <DMA1_Stream3_IRQHandler+0x4c>
 800602c:	4620      	mov	r0, r4
 800602e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006030:	696b      	ldr	r3, [r5, #20]
 8006032:	0619      	lsls	r1, r3, #24
 8006034:	d516      	bpl.n	8006064 <DMA1_Stream3_IRQHandler+0x80>
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	40da      	lsrs	r2, r3
 8006040:	07d2      	lsls	r2, r2, #31
 8006042:	d50f      	bpl.n	8006064 <DMA1_Stream3_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006044:	696a      	ldr	r2, [r5, #20]
 8006046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800604a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800604c:	2201      	movs	r2, #1
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800605c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800605e:	b10b      	cbz	r3, 8006064 <DMA1_Stream3_IRQHandler+0x80>
 8006060:	4620      	mov	r0, r4
 8006062:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	079b      	lsls	r3, r3, #30
 8006068:	d50c      	bpl.n	8006084 <DMA1_Stream3_IRQHandler+0xa0>
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	f003 021f 	and.w	r2, r3, #31
 8006070:	2304      	movs	r3, #4
 8006072:	4093      	lsls	r3, r2
 8006074:	6832      	ldr	r2, [r6, #0]
 8006076:	421a      	tst	r2, r3
 8006078:	d004      	beq.n	8006084 <DMA1_Stream3_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 800607a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800607c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800607e:	b10b      	cbz	r3, 8006084 <DMA1_Stream3_IRQHandler+0xa0>
 8006080:	4620      	mov	r0, r4
 8006082:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	0718      	lsls	r0, r3, #28
 8006088:	d513      	bpl.n	80060b2 <DMA1_Stream3_IRQHandler+0xce>
 800608a:	68a3      	ldr	r3, [r4, #8]
 800608c:	f003 021f 	and.w	r2, r3, #31
 8006090:	2310      	movs	r3, #16
 8006092:	4093      	lsls	r3, r2
 8006094:	6832      	ldr	r2, [r6, #0]
 8006096:	421a      	tst	r2, r3
 8006098:	d00b      	beq.n	80060b2 <DMA1_Stream3_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 800609a:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	05d9      	lsls	r1, r3, #23
 80060a0:	d403      	bmi.n	80060aa <DMA1_Stream3_IRQHandler+0xc6>
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	f023 0308 	bic.w	r3, r3, #8
 80060a8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80060aa:	69e3      	ldr	r3, [r4, #28]
 80060ac:	b10b      	cbz	r3, 80060b2 <DMA1_Stream3_IRQHandler+0xce>
 80060ae:	4620      	mov	r0, r4
 80060b0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	06da      	lsls	r2, r3, #27
 80060b6:	d59a      	bpl.n	8005fee <DMA1_Stream3_IRQHandler+0xa>
 80060b8:	68a3      	ldr	r3, [r4, #8]
 80060ba:	6831      	ldr	r1, [r6, #0]
 80060bc:	f003 021f 	and.w	r2, r3, #31
 80060c0:	2320      	movs	r3, #32
 80060c2:	4093      	lsls	r3, r2
 80060c4:	4219      	tst	r1, r3
 80060c6:	d092      	beq.n	8005fee <DMA1_Stream3_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80060c8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	05db      	lsls	r3, r3, #23
 80060ce:	d403      	bmi.n	80060d8 <DMA1_Stream3_IRQHandler+0xf4>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80060d8:	6a23      	ldr	r3, [r4, #32]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d087      	beq.n	8005fee <DMA1_Stream3_IRQHandler+0xa>
 80060de:	4620      	mov	r0, r4
 80060e0:	463b      	mov	r3, r7
void DMA1_Stream3_IRQHandler() { if (DMACTXvectors[0x03]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x03])); }
 80060e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80060e6:	4718      	bx	r3
 80060e8:	24000454 	.word	0x24000454

080060ec <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler() { if (DMACTXvectors[0x04]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x04])); }
 80060ec:	4b40      	ldr	r3, [pc, #256]	; (80061f0 <DMA1_Stream4_IRQHandler+0x104>)
 80060ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f2:	691c      	ldr	r4, [r3, #16]
 80060f4:	b90c      	cbnz	r4, 80060fa <DMA1_Stream4_IRQHandler+0xe>
 80060f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80060fa:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80060fc:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006100:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006102:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006104:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006106:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800610a:	d515      	bpl.n	8006138 <DMA1_Stream4_IRQHandler+0x4c>
 800610c:	68a3      	ldr	r3, [r4, #8]
 800610e:	f003 021f 	and.w	r2, r3, #31
 8006112:	2308      	movs	r3, #8
 8006114:	4093      	lsls	r3, r2
 8006116:	6832      	ldr	r2, [r6, #0]
 8006118:	421a      	tst	r2, r3
 800611a:	d00d      	beq.n	8006138 <DMA1_Stream4_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 800611c:	682a      	ldr	r2, [r5, #0]
 800611e:	f022 0204 	bic.w	r2, r2, #4
 8006122:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006124:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800612e:	f1b9 0f00 	cmp.w	r9, #0
 8006132:	d001      	beq.n	8006138 <DMA1_Stream4_IRQHandler+0x4c>
 8006134:	4620      	mov	r0, r4
 8006136:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006138:	696b      	ldr	r3, [r5, #20]
 800613a:	0619      	lsls	r1, r3, #24
 800613c:	d516      	bpl.n	800616c <DMA1_Stream4_IRQHandler+0x80>
 800613e:	68a3      	ldr	r3, [r4, #8]
 8006140:	6832      	ldr	r2, [r6, #0]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	40da      	lsrs	r2, r3
 8006148:	07d2      	lsls	r2, r2, #31
 800614a:	d50f      	bpl.n	800616c <DMA1_Stream4_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800614c:	696a      	ldr	r2, [r5, #20]
 800614e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006152:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006154:	2201      	movs	r2, #1
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	f023 0301 	bic.w	r3, r3, #1
 8006162:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006166:	b10b      	cbz	r3, 800616c <DMA1_Stream4_IRQHandler+0x80>
 8006168:	4620      	mov	r0, r4
 800616a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	079b      	lsls	r3, r3, #30
 8006170:	d50c      	bpl.n	800618c <DMA1_Stream4_IRQHandler+0xa0>
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	f003 021f 	and.w	r2, r3, #31
 8006178:	2304      	movs	r3, #4
 800617a:	4093      	lsls	r3, r2
 800617c:	6832      	ldr	r2, [r6, #0]
 800617e:	421a      	tst	r2, r3
 8006180:	d004      	beq.n	800618c <DMA1_Stream4_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006182:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006186:	b10b      	cbz	r3, 800618c <DMA1_Stream4_IRQHandler+0xa0>
 8006188:	4620      	mov	r0, r4
 800618a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	0718      	lsls	r0, r3, #28
 8006190:	d513      	bpl.n	80061ba <DMA1_Stream4_IRQHandler+0xce>
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	f003 021f 	and.w	r2, r3, #31
 8006198:	2310      	movs	r3, #16
 800619a:	4093      	lsls	r3, r2
 800619c:	6832      	ldr	r2, [r6, #0]
 800619e:	421a      	tst	r2, r3
 80061a0:	d00b      	beq.n	80061ba <DMA1_Stream4_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80061a2:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	05d9      	lsls	r1, r3, #23
 80061a8:	d403      	bmi.n	80061b2 <DMA1_Stream4_IRQHandler+0xc6>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	f023 0308 	bic.w	r3, r3, #8
 80061b0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80061b2:	69e3      	ldr	r3, [r4, #28]
 80061b4:	b10b      	cbz	r3, 80061ba <DMA1_Stream4_IRQHandler+0xce>
 80061b6:	4620      	mov	r0, r4
 80061b8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	06da      	lsls	r2, r3, #27
 80061be:	d59a      	bpl.n	80060f6 <DMA1_Stream4_IRQHandler+0xa>
 80061c0:	68a3      	ldr	r3, [r4, #8]
 80061c2:	6831      	ldr	r1, [r6, #0]
 80061c4:	f003 021f 	and.w	r2, r3, #31
 80061c8:	2320      	movs	r3, #32
 80061ca:	4093      	lsls	r3, r2
 80061cc:	4219      	tst	r1, r3
 80061ce:	d092      	beq.n	80060f6 <DMA1_Stream4_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80061d0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	05db      	lsls	r3, r3, #23
 80061d6:	d403      	bmi.n	80061e0 <DMA1_Stream4_IRQHandler+0xf4>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	f023 0310 	bic.w	r3, r3, #16
 80061de:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80061e0:	6a23      	ldr	r3, [r4, #32]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d087      	beq.n	80060f6 <DMA1_Stream4_IRQHandler+0xa>
 80061e6:	4620      	mov	r0, r4
 80061e8:	463b      	mov	r3, r7
void DMA1_Stream4_IRQHandler() { if (DMACTXvectors[0x04]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x04])); }
 80061ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80061ee:	4718      	bx	r3
 80061f0:	24000454 	.word	0x24000454

080061f4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler() { if (DMACTXvectors[0x05]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x05])); }
 80061f4:	4b40      	ldr	r3, [pc, #256]	; (80062f8 <DMA1_Stream5_IRQHandler+0x104>)
 80061f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fa:	695c      	ldr	r4, [r3, #20]
 80061fc:	b90c      	cbnz	r4, 8006202 <DMA1_Stream5_IRQHandler+0xe>
 80061fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006202:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006204:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006208:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 800620a:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800620c:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 800620e:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006212:	d515      	bpl.n	8006240 <DMA1_Stream5_IRQHandler+0x4c>
 8006214:	68a3      	ldr	r3, [r4, #8]
 8006216:	f003 021f 	and.w	r2, r3, #31
 800621a:	2308      	movs	r3, #8
 800621c:	4093      	lsls	r3, r2
 800621e:	6832      	ldr	r2, [r6, #0]
 8006220:	421a      	tst	r2, r3
 8006222:	d00d      	beq.n	8006240 <DMA1_Stream5_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006224:	682a      	ldr	r2, [r5, #0]
 8006226:	f022 0204 	bic.w	r2, r2, #4
 800622a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 800622c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800622e:	682b      	ldr	r3, [r5, #0]
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006236:	f1b9 0f00 	cmp.w	r9, #0
 800623a:	d001      	beq.n	8006240 <DMA1_Stream5_IRQHandler+0x4c>
 800623c:	4620      	mov	r0, r4
 800623e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006240:	696b      	ldr	r3, [r5, #20]
 8006242:	0619      	lsls	r1, r3, #24
 8006244:	d516      	bpl.n	8006274 <DMA1_Stream5_IRQHandler+0x80>
 8006246:	68a3      	ldr	r3, [r4, #8]
 8006248:	6832      	ldr	r2, [r6, #0]
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	40da      	lsrs	r2, r3
 8006250:	07d2      	lsls	r2, r2, #31
 8006252:	d50f      	bpl.n	8006274 <DMA1_Stream5_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006254:	696a      	ldr	r2, [r5, #20]
 8006256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800625a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800625c:	2201      	movs	r2, #1
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	f023 0301 	bic.w	r3, r3, #1
 800626a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800626c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800626e:	b10b      	cbz	r3, 8006274 <DMA1_Stream5_IRQHandler+0x80>
 8006270:	4620      	mov	r0, r4
 8006272:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	d50c      	bpl.n	8006294 <DMA1_Stream5_IRQHandler+0xa0>
 800627a:	68a3      	ldr	r3, [r4, #8]
 800627c:	f003 021f 	and.w	r2, r3, #31
 8006280:	2304      	movs	r3, #4
 8006282:	4093      	lsls	r3, r2
 8006284:	6832      	ldr	r2, [r6, #0]
 8006286:	421a      	tst	r2, r3
 8006288:	d004      	beq.n	8006294 <DMA1_Stream5_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 800628a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800628c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800628e:	b10b      	cbz	r3, 8006294 <DMA1_Stream5_IRQHandler+0xa0>
 8006290:	4620      	mov	r0, r4
 8006292:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	0718      	lsls	r0, r3, #28
 8006298:	d513      	bpl.n	80062c2 <DMA1_Stream5_IRQHandler+0xce>
 800629a:	68a3      	ldr	r3, [r4, #8]
 800629c:	f003 021f 	and.w	r2, r3, #31
 80062a0:	2310      	movs	r3, #16
 80062a2:	4093      	lsls	r3, r2
 80062a4:	6832      	ldr	r2, [r6, #0]
 80062a6:	421a      	tst	r2, r3
 80062a8:	d00b      	beq.n	80062c2 <DMA1_Stream5_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80062aa:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	05d9      	lsls	r1, r3, #23
 80062b0:	d403      	bmi.n	80062ba <DMA1_Stream5_IRQHandler+0xc6>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	f023 0308 	bic.w	r3, r3, #8
 80062b8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80062ba:	69e3      	ldr	r3, [r4, #28]
 80062bc:	b10b      	cbz	r3, 80062c2 <DMA1_Stream5_IRQHandler+0xce>
 80062be:	4620      	mov	r0, r4
 80062c0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	06da      	lsls	r2, r3, #27
 80062c6:	d59a      	bpl.n	80061fe <DMA1_Stream5_IRQHandler+0xa>
 80062c8:	68a3      	ldr	r3, [r4, #8]
 80062ca:	6831      	ldr	r1, [r6, #0]
 80062cc:	f003 021f 	and.w	r2, r3, #31
 80062d0:	2320      	movs	r3, #32
 80062d2:	4093      	lsls	r3, r2
 80062d4:	4219      	tst	r1, r3
 80062d6:	d092      	beq.n	80061fe <DMA1_Stream5_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80062d8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	05db      	lsls	r3, r3, #23
 80062de:	d403      	bmi.n	80062e8 <DMA1_Stream5_IRQHandler+0xf4>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	f023 0310 	bic.w	r3, r3, #16
 80062e6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80062e8:	6a23      	ldr	r3, [r4, #32]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d087      	beq.n	80061fe <DMA1_Stream5_IRQHandler+0xa>
 80062ee:	4620      	mov	r0, r4
 80062f0:	463b      	mov	r3, r7
void DMA1_Stream5_IRQHandler() { if (DMACTXvectors[0x05]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x05])); }
 80062f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80062f6:	4718      	bx	r3
 80062f8:	24000454 	.word	0x24000454

080062fc <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler() { if (DMACTXvectors[0x06]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x06])); }
 80062fc:	4b40      	ldr	r3, [pc, #256]	; (8006400 <DMA1_Stream6_IRQHandler+0x104>)
 80062fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006302:	699c      	ldr	r4, [r3, #24]
 8006304:	b90c      	cbnz	r4, 800630a <DMA1_Stream6_IRQHandler+0xe>
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 800630a:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 800630c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006310:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006312:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006314:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006316:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800631a:	d515      	bpl.n	8006348 <DMA1_Stream6_IRQHandler+0x4c>
 800631c:	68a3      	ldr	r3, [r4, #8]
 800631e:	f003 021f 	and.w	r2, r3, #31
 8006322:	2308      	movs	r3, #8
 8006324:	4093      	lsls	r3, r2
 8006326:	6832      	ldr	r2, [r6, #0]
 8006328:	421a      	tst	r2, r3
 800632a:	d00d      	beq.n	8006348 <DMA1_Stream6_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 800632c:	682a      	ldr	r2, [r5, #0]
 800632e:	f022 0204 	bic.w	r2, r2, #4
 8006332:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006334:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800633e:	f1b9 0f00 	cmp.w	r9, #0
 8006342:	d001      	beq.n	8006348 <DMA1_Stream6_IRQHandler+0x4c>
 8006344:	4620      	mov	r0, r4
 8006346:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006348:	696b      	ldr	r3, [r5, #20]
 800634a:	0619      	lsls	r1, r3, #24
 800634c:	d516      	bpl.n	800637c <DMA1_Stream6_IRQHandler+0x80>
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	6832      	ldr	r2, [r6, #0]
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	40da      	lsrs	r2, r3
 8006358:	07d2      	lsls	r2, r2, #31
 800635a:	d50f      	bpl.n	800637c <DMA1_Stream6_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800635c:	696a      	ldr	r2, [r5, #20]
 800635e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006362:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006364:	2201      	movs	r2, #1
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006376:	b10b      	cbz	r3, 800637c <DMA1_Stream6_IRQHandler+0x80>
 8006378:	4620      	mov	r0, r4
 800637a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	079b      	lsls	r3, r3, #30
 8006380:	d50c      	bpl.n	800639c <DMA1_Stream6_IRQHandler+0xa0>
 8006382:	68a3      	ldr	r3, [r4, #8]
 8006384:	f003 021f 	and.w	r2, r3, #31
 8006388:	2304      	movs	r3, #4
 800638a:	4093      	lsls	r3, r2
 800638c:	6832      	ldr	r2, [r6, #0]
 800638e:	421a      	tst	r2, r3
 8006390:	d004      	beq.n	800639c <DMA1_Stream6_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006392:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006396:	b10b      	cbz	r3, 800639c <DMA1_Stream6_IRQHandler+0xa0>
 8006398:	4620      	mov	r0, r4
 800639a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	0718      	lsls	r0, r3, #28
 80063a0:	d513      	bpl.n	80063ca <DMA1_Stream6_IRQHandler+0xce>
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	f003 021f 	and.w	r2, r3, #31
 80063a8:	2310      	movs	r3, #16
 80063aa:	4093      	lsls	r3, r2
 80063ac:	6832      	ldr	r2, [r6, #0]
 80063ae:	421a      	tst	r2, r3
 80063b0:	d00b      	beq.n	80063ca <DMA1_Stream6_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80063b2:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	05d9      	lsls	r1, r3, #23
 80063b8:	d403      	bmi.n	80063c2 <DMA1_Stream6_IRQHandler+0xc6>
 80063ba:	682b      	ldr	r3, [r5, #0]
 80063bc:	f023 0308 	bic.w	r3, r3, #8
 80063c0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80063c2:	69e3      	ldr	r3, [r4, #28]
 80063c4:	b10b      	cbz	r3, 80063ca <DMA1_Stream6_IRQHandler+0xce>
 80063c6:	4620      	mov	r0, r4
 80063c8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	06da      	lsls	r2, r3, #27
 80063ce:	d59a      	bpl.n	8006306 <DMA1_Stream6_IRQHandler+0xa>
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	6831      	ldr	r1, [r6, #0]
 80063d4:	f003 021f 	and.w	r2, r3, #31
 80063d8:	2320      	movs	r3, #32
 80063da:	4093      	lsls	r3, r2
 80063dc:	4219      	tst	r1, r3
 80063de:	d092      	beq.n	8006306 <DMA1_Stream6_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80063e0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	05db      	lsls	r3, r3, #23
 80063e6:	d403      	bmi.n	80063f0 <DMA1_Stream6_IRQHandler+0xf4>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	f023 0310 	bic.w	r3, r3, #16
 80063ee:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80063f0:	6a23      	ldr	r3, [r4, #32]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d087      	beq.n	8006306 <DMA1_Stream6_IRQHandler+0xa>
 80063f6:	4620      	mov	r0, r4
 80063f8:	463b      	mov	r3, r7
void DMA1_Stream6_IRQHandler() { if (DMACTXvectors[0x06]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x06])); }
 80063fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80063fe:	4718      	bx	r3
 8006400:	24000454 	.word	0x24000454

08006404 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler() { if (DMACTXvectors[0x07]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x07])); }
 8006404:	4b40      	ldr	r3, [pc, #256]	; (8006508 <DMA1_Stream7_IRQHandler+0x104>)
 8006406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800640a:	69dc      	ldr	r4, [r3, #28]
 800640c:	b90c      	cbnz	r4, 8006412 <DMA1_Stream7_IRQHandler+0xe>
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006412:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006414:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006418:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 800641a:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800641c:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 800641e:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006422:	d515      	bpl.n	8006450 <DMA1_Stream7_IRQHandler+0x4c>
 8006424:	68a3      	ldr	r3, [r4, #8]
 8006426:	f003 021f 	and.w	r2, r3, #31
 800642a:	2308      	movs	r3, #8
 800642c:	4093      	lsls	r3, r2
 800642e:	6832      	ldr	r2, [r6, #0]
 8006430:	421a      	tst	r2, r3
 8006432:	d00d      	beq.n	8006450 <DMA1_Stream7_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006434:	682a      	ldr	r2, [r5, #0]
 8006436:	f022 0204 	bic.w	r2, r2, #4
 800643a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 800643c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800643e:	682b      	ldr	r3, [r5, #0]
 8006440:	f023 0301 	bic.w	r3, r3, #1
 8006444:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006446:	f1b9 0f00 	cmp.w	r9, #0
 800644a:	d001      	beq.n	8006450 <DMA1_Stream7_IRQHandler+0x4c>
 800644c:	4620      	mov	r0, r4
 800644e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006450:	696b      	ldr	r3, [r5, #20]
 8006452:	0619      	lsls	r1, r3, #24
 8006454:	d516      	bpl.n	8006484 <DMA1_Stream7_IRQHandler+0x80>
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	6832      	ldr	r2, [r6, #0]
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	40da      	lsrs	r2, r3
 8006460:	07d2      	lsls	r2, r2, #31
 8006462:	d50f      	bpl.n	8006484 <DMA1_Stream7_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006464:	696a      	ldr	r2, [r5, #20]
 8006466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800646a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800646c:	2201      	movs	r2, #1
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800647c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800647e:	b10b      	cbz	r3, 8006484 <DMA1_Stream7_IRQHandler+0x80>
 8006480:	4620      	mov	r0, r4
 8006482:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	079b      	lsls	r3, r3, #30
 8006488:	d50c      	bpl.n	80064a4 <DMA1_Stream7_IRQHandler+0xa0>
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	f003 021f 	and.w	r2, r3, #31
 8006490:	2304      	movs	r3, #4
 8006492:	4093      	lsls	r3, r2
 8006494:	6832      	ldr	r2, [r6, #0]
 8006496:	421a      	tst	r2, r3
 8006498:	d004      	beq.n	80064a4 <DMA1_Stream7_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 800649a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800649c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800649e:	b10b      	cbz	r3, 80064a4 <DMA1_Stream7_IRQHandler+0xa0>
 80064a0:	4620      	mov	r0, r4
 80064a2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	0718      	lsls	r0, r3, #28
 80064a8:	d513      	bpl.n	80064d2 <DMA1_Stream7_IRQHandler+0xce>
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	f003 021f 	and.w	r2, r3, #31
 80064b0:	2310      	movs	r3, #16
 80064b2:	4093      	lsls	r3, r2
 80064b4:	6832      	ldr	r2, [r6, #0]
 80064b6:	421a      	tst	r2, r3
 80064b8:	d00b      	beq.n	80064d2 <DMA1_Stream7_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80064ba:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	05d9      	lsls	r1, r3, #23
 80064c0:	d403      	bmi.n	80064ca <DMA1_Stream7_IRQHandler+0xc6>
 80064c2:	682b      	ldr	r3, [r5, #0]
 80064c4:	f023 0308 	bic.w	r3, r3, #8
 80064c8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80064ca:	69e3      	ldr	r3, [r4, #28]
 80064cc:	b10b      	cbz	r3, 80064d2 <DMA1_Stream7_IRQHandler+0xce>
 80064ce:	4620      	mov	r0, r4
 80064d0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	06da      	lsls	r2, r3, #27
 80064d6:	d59a      	bpl.n	800640e <DMA1_Stream7_IRQHandler+0xa>
 80064d8:	68a3      	ldr	r3, [r4, #8]
 80064da:	6831      	ldr	r1, [r6, #0]
 80064dc:	f003 021f 	and.w	r2, r3, #31
 80064e0:	2320      	movs	r3, #32
 80064e2:	4093      	lsls	r3, r2
 80064e4:	4219      	tst	r1, r3
 80064e6:	d092      	beq.n	800640e <DMA1_Stream7_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80064e8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	05db      	lsls	r3, r3, #23
 80064ee:	d403      	bmi.n	80064f8 <DMA1_Stream7_IRQHandler+0xf4>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	f023 0310 	bic.w	r3, r3, #16
 80064f6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80064f8:	6a23      	ldr	r3, [r4, #32]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d087      	beq.n	800640e <DMA1_Stream7_IRQHandler+0xa>
 80064fe:	4620      	mov	r0, r4
 8006500:	463b      	mov	r3, r7
void DMA1_Stream7_IRQHandler() { if (DMACTXvectors[0x07]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x07])); }
 8006502:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006506:	4718      	bx	r3
 8006508:	24000454 	.word	0x24000454

0800650c <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler() { if (DMACTXvectors[0x08]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x08])); }
 800650c:	4b40      	ldr	r3, [pc, #256]	; (8006610 <DMA2_Stream0_IRQHandler+0x104>)
 800650e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006512:	6a1c      	ldr	r4, [r3, #32]
 8006514:	b90c      	cbnz	r4, 800651a <DMA2_Stream0_IRQHandler+0xe>
 8006516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 800651a:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 800651c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006520:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006522:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006524:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006526:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800652a:	d515      	bpl.n	8006558 <DMA2_Stream0_IRQHandler+0x4c>
 800652c:	68a3      	ldr	r3, [r4, #8]
 800652e:	f003 021f 	and.w	r2, r3, #31
 8006532:	2308      	movs	r3, #8
 8006534:	4093      	lsls	r3, r2
 8006536:	6832      	ldr	r2, [r6, #0]
 8006538:	421a      	tst	r2, r3
 800653a:	d00d      	beq.n	8006558 <DMA2_Stream0_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 800653c:	682a      	ldr	r2, [r5, #0]
 800653e:	f022 0204 	bic.w	r2, r2, #4
 8006542:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006544:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800654e:	f1b9 0f00 	cmp.w	r9, #0
 8006552:	d001      	beq.n	8006558 <DMA2_Stream0_IRQHandler+0x4c>
 8006554:	4620      	mov	r0, r4
 8006556:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006558:	696b      	ldr	r3, [r5, #20]
 800655a:	0619      	lsls	r1, r3, #24
 800655c:	d516      	bpl.n	800658c <DMA2_Stream0_IRQHandler+0x80>
 800655e:	68a3      	ldr	r3, [r4, #8]
 8006560:	6832      	ldr	r2, [r6, #0]
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	40da      	lsrs	r2, r3
 8006568:	07d2      	lsls	r2, r2, #31
 800656a:	d50f      	bpl.n	800658c <DMA2_Stream0_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800656c:	696a      	ldr	r2, [r5, #20]
 800656e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006572:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006574:	2201      	movs	r2, #1
 8006576:	fa02 f303 	lsl.w	r3, r2, r3
 800657a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006586:	b10b      	cbz	r3, 800658c <DMA2_Stream0_IRQHandler+0x80>
 8006588:	4620      	mov	r0, r4
 800658a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	079b      	lsls	r3, r3, #30
 8006590:	d50c      	bpl.n	80065ac <DMA2_Stream0_IRQHandler+0xa0>
 8006592:	68a3      	ldr	r3, [r4, #8]
 8006594:	f003 021f 	and.w	r2, r3, #31
 8006598:	2304      	movs	r3, #4
 800659a:	4093      	lsls	r3, r2
 800659c:	6832      	ldr	r2, [r6, #0]
 800659e:	421a      	tst	r2, r3
 80065a0:	d004      	beq.n	80065ac <DMA2_Stream0_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 80065a2:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80065a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a6:	b10b      	cbz	r3, 80065ac <DMA2_Stream0_IRQHandler+0xa0>
 80065a8:	4620      	mov	r0, r4
 80065aa:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	0718      	lsls	r0, r3, #28
 80065b0:	d513      	bpl.n	80065da <DMA2_Stream0_IRQHandler+0xce>
 80065b2:	68a3      	ldr	r3, [r4, #8]
 80065b4:	f003 021f 	and.w	r2, r3, #31
 80065b8:	2310      	movs	r3, #16
 80065ba:	4093      	lsls	r3, r2
 80065bc:	6832      	ldr	r2, [r6, #0]
 80065be:	421a      	tst	r2, r3
 80065c0:	d00b      	beq.n	80065da <DMA2_Stream0_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80065c2:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	05d9      	lsls	r1, r3, #23
 80065c8:	d403      	bmi.n	80065d2 <DMA2_Stream0_IRQHandler+0xc6>
 80065ca:	682b      	ldr	r3, [r5, #0]
 80065cc:	f023 0308 	bic.w	r3, r3, #8
 80065d0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80065d2:	69e3      	ldr	r3, [r4, #28]
 80065d4:	b10b      	cbz	r3, 80065da <DMA2_Stream0_IRQHandler+0xce>
 80065d6:	4620      	mov	r0, r4
 80065d8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	06da      	lsls	r2, r3, #27
 80065de:	d59a      	bpl.n	8006516 <DMA2_Stream0_IRQHandler+0xa>
 80065e0:	68a3      	ldr	r3, [r4, #8]
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	f003 021f 	and.w	r2, r3, #31
 80065e8:	2320      	movs	r3, #32
 80065ea:	4093      	lsls	r3, r2
 80065ec:	4219      	tst	r1, r3
 80065ee:	d092      	beq.n	8006516 <DMA2_Stream0_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80065f0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80065f2:	682b      	ldr	r3, [r5, #0]
 80065f4:	05db      	lsls	r3, r3, #23
 80065f6:	d403      	bmi.n	8006600 <DMA2_Stream0_IRQHandler+0xf4>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	f023 0310 	bic.w	r3, r3, #16
 80065fe:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006600:	6a23      	ldr	r3, [r4, #32]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d087      	beq.n	8006516 <DMA2_Stream0_IRQHandler+0xa>
 8006606:	4620      	mov	r0, r4
 8006608:	463b      	mov	r3, r7
void DMA2_Stream0_IRQHandler() { if (DMACTXvectors[0x08]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x08])); }
 800660a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 800660e:	4718      	bx	r3
 8006610:	24000454 	.word	0x24000454

08006614 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler() { if (DMACTXvectors[0x09]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x09])); }
 8006614:	4b40      	ldr	r3, [pc, #256]	; (8006718 <DMA2_Stream1_IRQHandler+0x104>)
 8006616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800661a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800661c:	b90c      	cbnz	r4, 8006622 <DMA2_Stream1_IRQHandler+0xe>
 800661e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006622:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006624:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006628:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 800662a:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800662c:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 800662e:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006632:	d515      	bpl.n	8006660 <DMA2_Stream1_IRQHandler+0x4c>
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	f003 021f 	and.w	r2, r3, #31
 800663a:	2308      	movs	r3, #8
 800663c:	4093      	lsls	r3, r2
 800663e:	6832      	ldr	r2, [r6, #0]
 8006640:	421a      	tst	r2, r3
 8006642:	d00d      	beq.n	8006660 <DMA2_Stream1_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006644:	682a      	ldr	r2, [r5, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 800664c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006656:	f1b9 0f00 	cmp.w	r9, #0
 800665a:	d001      	beq.n	8006660 <DMA2_Stream1_IRQHandler+0x4c>
 800665c:	4620      	mov	r0, r4
 800665e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006660:	696b      	ldr	r3, [r5, #20]
 8006662:	0619      	lsls	r1, r3, #24
 8006664:	d516      	bpl.n	8006694 <DMA2_Stream1_IRQHandler+0x80>
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	6832      	ldr	r2, [r6, #0]
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	40da      	lsrs	r2, r3
 8006670:	07d2      	lsls	r2, r2, #31
 8006672:	d50f      	bpl.n	8006694 <DMA2_Stream1_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006674:	696a      	ldr	r2, [r5, #20]
 8006676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800667a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800667c:	2201      	movs	r2, #1
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800668c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800668e:	b10b      	cbz	r3, 8006694 <DMA2_Stream1_IRQHandler+0x80>
 8006690:	4620      	mov	r0, r4
 8006692:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	079b      	lsls	r3, r3, #30
 8006698:	d50c      	bpl.n	80066b4 <DMA2_Stream1_IRQHandler+0xa0>
 800669a:	68a3      	ldr	r3, [r4, #8]
 800669c:	f003 021f 	and.w	r2, r3, #31
 80066a0:	2304      	movs	r3, #4
 80066a2:	4093      	lsls	r3, r2
 80066a4:	6832      	ldr	r2, [r6, #0]
 80066a6:	421a      	tst	r2, r3
 80066a8:	d004      	beq.n	80066b4 <DMA2_Stream1_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 80066aa:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80066ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ae:	b10b      	cbz	r3, 80066b4 <DMA2_Stream1_IRQHandler+0xa0>
 80066b0:	4620      	mov	r0, r4
 80066b2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	0718      	lsls	r0, r3, #28
 80066b8:	d513      	bpl.n	80066e2 <DMA2_Stream1_IRQHandler+0xce>
 80066ba:	68a3      	ldr	r3, [r4, #8]
 80066bc:	f003 021f 	and.w	r2, r3, #31
 80066c0:	2310      	movs	r3, #16
 80066c2:	4093      	lsls	r3, r2
 80066c4:	6832      	ldr	r2, [r6, #0]
 80066c6:	421a      	tst	r2, r3
 80066c8:	d00b      	beq.n	80066e2 <DMA2_Stream1_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80066ca:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	05d9      	lsls	r1, r3, #23
 80066d0:	d403      	bmi.n	80066da <DMA2_Stream1_IRQHandler+0xc6>
 80066d2:	682b      	ldr	r3, [r5, #0]
 80066d4:	f023 0308 	bic.w	r3, r3, #8
 80066d8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80066da:	69e3      	ldr	r3, [r4, #28]
 80066dc:	b10b      	cbz	r3, 80066e2 <DMA2_Stream1_IRQHandler+0xce>
 80066de:	4620      	mov	r0, r4
 80066e0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80066e2:	682b      	ldr	r3, [r5, #0]
 80066e4:	06da      	lsls	r2, r3, #27
 80066e6:	d59a      	bpl.n	800661e <DMA2_Stream1_IRQHandler+0xa>
 80066e8:	68a3      	ldr	r3, [r4, #8]
 80066ea:	6831      	ldr	r1, [r6, #0]
 80066ec:	f003 021f 	and.w	r2, r3, #31
 80066f0:	2320      	movs	r3, #32
 80066f2:	4093      	lsls	r3, r2
 80066f4:	4219      	tst	r1, r3
 80066f6:	d092      	beq.n	800661e <DMA2_Stream1_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80066f8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80066fa:	682b      	ldr	r3, [r5, #0]
 80066fc:	05db      	lsls	r3, r3, #23
 80066fe:	d403      	bmi.n	8006708 <DMA2_Stream1_IRQHandler+0xf4>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	f023 0310 	bic.w	r3, r3, #16
 8006706:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006708:	6a23      	ldr	r3, [r4, #32]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d087      	beq.n	800661e <DMA2_Stream1_IRQHandler+0xa>
 800670e:	4620      	mov	r0, r4
 8006710:	463b      	mov	r3, r7
void DMA2_Stream1_IRQHandler() { if (DMACTXvectors[0x09]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x09])); }
 8006712:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006716:	4718      	bx	r3
 8006718:	24000454 	.word	0x24000454

0800671c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler() { if (DMACTXvectors[0x0A]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0A])); }
 800671c:	4b40      	ldr	r3, [pc, #256]	; (8006820 <DMA2_Stream2_IRQHandler+0x104>)
 800671e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006722:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006724:	b90c      	cbnz	r4, 800672a <DMA2_Stream2_IRQHandler+0xe>
 8006726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 800672a:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 800672c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006730:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006732:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006734:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006736:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800673a:	d515      	bpl.n	8006768 <DMA2_Stream2_IRQHandler+0x4c>
 800673c:	68a3      	ldr	r3, [r4, #8]
 800673e:	f003 021f 	and.w	r2, r3, #31
 8006742:	2308      	movs	r3, #8
 8006744:	4093      	lsls	r3, r2
 8006746:	6832      	ldr	r2, [r6, #0]
 8006748:	421a      	tst	r2, r3
 800674a:	d00d      	beq.n	8006768 <DMA2_Stream2_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 800674c:	682a      	ldr	r2, [r5, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006754:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006756:	682b      	ldr	r3, [r5, #0]
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800675e:	f1b9 0f00 	cmp.w	r9, #0
 8006762:	d001      	beq.n	8006768 <DMA2_Stream2_IRQHandler+0x4c>
 8006764:	4620      	mov	r0, r4
 8006766:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006768:	696b      	ldr	r3, [r5, #20]
 800676a:	0619      	lsls	r1, r3, #24
 800676c:	d516      	bpl.n	800679c <DMA2_Stream2_IRQHandler+0x80>
 800676e:	68a3      	ldr	r3, [r4, #8]
 8006770:	6832      	ldr	r2, [r6, #0]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	40da      	lsrs	r2, r3
 8006778:	07d2      	lsls	r2, r2, #31
 800677a:	d50f      	bpl.n	800679c <DMA2_Stream2_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800677c:	696a      	ldr	r2, [r5, #20]
 800677e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006782:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006784:	2201      	movs	r2, #1
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006796:	b10b      	cbz	r3, 800679c <DMA2_Stream2_IRQHandler+0x80>
 8006798:	4620      	mov	r0, r4
 800679a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	079b      	lsls	r3, r3, #30
 80067a0:	d50c      	bpl.n	80067bc <DMA2_Stream2_IRQHandler+0xa0>
 80067a2:	68a3      	ldr	r3, [r4, #8]
 80067a4:	f003 021f 	and.w	r2, r3, #31
 80067a8:	2304      	movs	r3, #4
 80067aa:	4093      	lsls	r3, r2
 80067ac:	6832      	ldr	r2, [r6, #0]
 80067ae:	421a      	tst	r2, r3
 80067b0:	d004      	beq.n	80067bc <DMA2_Stream2_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 80067b2:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80067b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b6:	b10b      	cbz	r3, 80067bc <DMA2_Stream2_IRQHandler+0xa0>
 80067b8:	4620      	mov	r0, r4
 80067ba:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	0718      	lsls	r0, r3, #28
 80067c0:	d513      	bpl.n	80067ea <DMA2_Stream2_IRQHandler+0xce>
 80067c2:	68a3      	ldr	r3, [r4, #8]
 80067c4:	f003 021f 	and.w	r2, r3, #31
 80067c8:	2310      	movs	r3, #16
 80067ca:	4093      	lsls	r3, r2
 80067cc:	6832      	ldr	r2, [r6, #0]
 80067ce:	421a      	tst	r2, r3
 80067d0:	d00b      	beq.n	80067ea <DMA2_Stream2_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80067d2:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	05d9      	lsls	r1, r3, #23
 80067d8:	d403      	bmi.n	80067e2 <DMA2_Stream2_IRQHandler+0xc6>
 80067da:	682b      	ldr	r3, [r5, #0]
 80067dc:	f023 0308 	bic.w	r3, r3, #8
 80067e0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80067e2:	69e3      	ldr	r3, [r4, #28]
 80067e4:	b10b      	cbz	r3, 80067ea <DMA2_Stream2_IRQHandler+0xce>
 80067e6:	4620      	mov	r0, r4
 80067e8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	06da      	lsls	r2, r3, #27
 80067ee:	d59a      	bpl.n	8006726 <DMA2_Stream2_IRQHandler+0xa>
 80067f0:	68a3      	ldr	r3, [r4, #8]
 80067f2:	6831      	ldr	r1, [r6, #0]
 80067f4:	f003 021f 	and.w	r2, r3, #31
 80067f8:	2320      	movs	r3, #32
 80067fa:	4093      	lsls	r3, r2
 80067fc:	4219      	tst	r1, r3
 80067fe:	d092      	beq.n	8006726 <DMA2_Stream2_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006800:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	05db      	lsls	r3, r3, #23
 8006806:	d403      	bmi.n	8006810 <DMA2_Stream2_IRQHandler+0xf4>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	f023 0310 	bic.w	r3, r3, #16
 800680e:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006810:	6a23      	ldr	r3, [r4, #32]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d087      	beq.n	8006726 <DMA2_Stream2_IRQHandler+0xa>
 8006816:	4620      	mov	r0, r4
 8006818:	463b      	mov	r3, r7
void DMA2_Stream2_IRQHandler() { if (DMACTXvectors[0x0A]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0A])); }
 800681a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 800681e:	4718      	bx	r3
 8006820:	24000454 	.word	0x24000454

08006824 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler() { if (DMACTXvectors[0x0B]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0B])); }
 8006824:	4b40      	ldr	r3, [pc, #256]	; (8006928 <DMA2_Stream3_IRQHandler+0x104>)
 8006826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800682a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800682c:	b90c      	cbnz	r4, 8006832 <DMA2_Stream3_IRQHandler+0xe>
 800682e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006832:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006834:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006838:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 800683a:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800683c:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 800683e:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006842:	d515      	bpl.n	8006870 <DMA2_Stream3_IRQHandler+0x4c>
 8006844:	68a3      	ldr	r3, [r4, #8]
 8006846:	f003 021f 	and.w	r2, r3, #31
 800684a:	2308      	movs	r3, #8
 800684c:	4093      	lsls	r3, r2
 800684e:	6832      	ldr	r2, [r6, #0]
 8006850:	421a      	tst	r2, r3
 8006852:	d00d      	beq.n	8006870 <DMA2_Stream3_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006854:	682a      	ldr	r2, [r5, #0]
 8006856:	f022 0204 	bic.w	r2, r2, #4
 800685a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 800685c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006866:	f1b9 0f00 	cmp.w	r9, #0
 800686a:	d001      	beq.n	8006870 <DMA2_Stream3_IRQHandler+0x4c>
 800686c:	4620      	mov	r0, r4
 800686e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006870:	696b      	ldr	r3, [r5, #20]
 8006872:	0619      	lsls	r1, r3, #24
 8006874:	d516      	bpl.n	80068a4 <DMA2_Stream3_IRQHandler+0x80>
 8006876:	68a3      	ldr	r3, [r4, #8]
 8006878:	6832      	ldr	r2, [r6, #0]
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	40da      	lsrs	r2, r3
 8006880:	07d2      	lsls	r2, r2, #31
 8006882:	d50f      	bpl.n	80068a4 <DMA2_Stream3_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006884:	696a      	ldr	r2, [r5, #20]
 8006886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800688a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800688c:	2201      	movs	r2, #1
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	f023 0301 	bic.w	r3, r3, #1
 800689a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800689c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800689e:	b10b      	cbz	r3, 80068a4 <DMA2_Stream3_IRQHandler+0x80>
 80068a0:	4620      	mov	r0, r4
 80068a2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	079b      	lsls	r3, r3, #30
 80068a8:	d50c      	bpl.n	80068c4 <DMA2_Stream3_IRQHandler+0xa0>
 80068aa:	68a3      	ldr	r3, [r4, #8]
 80068ac:	f003 021f 	and.w	r2, r3, #31
 80068b0:	2304      	movs	r3, #4
 80068b2:	4093      	lsls	r3, r2
 80068b4:	6832      	ldr	r2, [r6, #0]
 80068b6:	421a      	tst	r2, r3
 80068b8:	d004      	beq.n	80068c4 <DMA2_Stream3_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 80068ba:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80068bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068be:	b10b      	cbz	r3, 80068c4 <DMA2_Stream3_IRQHandler+0xa0>
 80068c0:	4620      	mov	r0, r4
 80068c2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	0718      	lsls	r0, r3, #28
 80068c8:	d513      	bpl.n	80068f2 <DMA2_Stream3_IRQHandler+0xce>
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	f003 021f 	and.w	r2, r3, #31
 80068d0:	2310      	movs	r3, #16
 80068d2:	4093      	lsls	r3, r2
 80068d4:	6832      	ldr	r2, [r6, #0]
 80068d6:	421a      	tst	r2, r3
 80068d8:	d00b      	beq.n	80068f2 <DMA2_Stream3_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80068da:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	05d9      	lsls	r1, r3, #23
 80068e0:	d403      	bmi.n	80068ea <DMA2_Stream3_IRQHandler+0xc6>
 80068e2:	682b      	ldr	r3, [r5, #0]
 80068e4:	f023 0308 	bic.w	r3, r3, #8
 80068e8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80068ea:	69e3      	ldr	r3, [r4, #28]
 80068ec:	b10b      	cbz	r3, 80068f2 <DMA2_Stream3_IRQHandler+0xce>
 80068ee:	4620      	mov	r0, r4
 80068f0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	06da      	lsls	r2, r3, #27
 80068f6:	d59a      	bpl.n	800682e <DMA2_Stream3_IRQHandler+0xa>
 80068f8:	68a3      	ldr	r3, [r4, #8]
 80068fa:	6831      	ldr	r1, [r6, #0]
 80068fc:	f003 021f 	and.w	r2, r3, #31
 8006900:	2320      	movs	r3, #32
 8006902:	4093      	lsls	r3, r2
 8006904:	4219      	tst	r1, r3
 8006906:	d092      	beq.n	800682e <DMA2_Stream3_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006908:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 800690a:	682b      	ldr	r3, [r5, #0]
 800690c:	05db      	lsls	r3, r3, #23
 800690e:	d403      	bmi.n	8006918 <DMA2_Stream3_IRQHandler+0xf4>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	f023 0310 	bic.w	r3, r3, #16
 8006916:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006918:	6a23      	ldr	r3, [r4, #32]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d087      	beq.n	800682e <DMA2_Stream3_IRQHandler+0xa>
 800691e:	4620      	mov	r0, r4
 8006920:	463b      	mov	r3, r7
void DMA2_Stream3_IRQHandler() { if (DMACTXvectors[0x0B]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0B])); }
 8006922:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006926:	4718      	bx	r3
 8006928:	24000454 	.word	0x24000454

0800692c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler() { if (DMACTXvectors[0x0C]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0C])); }
 800692c:	4b40      	ldr	r3, [pc, #256]	; (8006a30 <DMA2_Stream4_IRQHandler+0x104>)
 800692e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006932:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006934:	b90c      	cbnz	r4, 800693a <DMA2_Stream4_IRQHandler+0xe>
 8006936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 800693a:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 800693c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006940:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006942:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006944:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006946:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800694a:	d515      	bpl.n	8006978 <DMA2_Stream4_IRQHandler+0x4c>
 800694c:	68a3      	ldr	r3, [r4, #8]
 800694e:	f003 021f 	and.w	r2, r3, #31
 8006952:	2308      	movs	r3, #8
 8006954:	4093      	lsls	r3, r2
 8006956:	6832      	ldr	r2, [r6, #0]
 8006958:	421a      	tst	r2, r3
 800695a:	d00d      	beq.n	8006978 <DMA2_Stream4_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 800695c:	682a      	ldr	r2, [r5, #0]
 800695e:	f022 0204 	bic.w	r2, r2, #4
 8006962:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006964:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006966:	682b      	ldr	r3, [r5, #0]
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800696e:	f1b9 0f00 	cmp.w	r9, #0
 8006972:	d001      	beq.n	8006978 <DMA2_Stream4_IRQHandler+0x4c>
 8006974:	4620      	mov	r0, r4
 8006976:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006978:	696b      	ldr	r3, [r5, #20]
 800697a:	0619      	lsls	r1, r3, #24
 800697c:	d516      	bpl.n	80069ac <DMA2_Stream4_IRQHandler+0x80>
 800697e:	68a3      	ldr	r3, [r4, #8]
 8006980:	6832      	ldr	r2, [r6, #0]
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	40da      	lsrs	r2, r3
 8006988:	07d2      	lsls	r2, r2, #31
 800698a:	d50f      	bpl.n	80069ac <DMA2_Stream4_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800698c:	696a      	ldr	r2, [r5, #20]
 800698e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006992:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006994:	2201      	movs	r2, #1
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	f023 0301 	bic.w	r3, r3, #1
 80069a2:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80069a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a6:	b10b      	cbz	r3, 80069ac <DMA2_Stream4_IRQHandler+0x80>
 80069a8:	4620      	mov	r0, r4
 80069aa:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	079b      	lsls	r3, r3, #30
 80069b0:	d50c      	bpl.n	80069cc <DMA2_Stream4_IRQHandler+0xa0>
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	f003 021f 	and.w	r2, r3, #31
 80069b8:	2304      	movs	r3, #4
 80069ba:	4093      	lsls	r3, r2
 80069bc:	6832      	ldr	r2, [r6, #0]
 80069be:	421a      	tst	r2, r3
 80069c0:	d004      	beq.n	80069cc <DMA2_Stream4_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 80069c2:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80069c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c6:	b10b      	cbz	r3, 80069cc <DMA2_Stream4_IRQHandler+0xa0>
 80069c8:	4620      	mov	r0, r4
 80069ca:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	0718      	lsls	r0, r3, #28
 80069d0:	d513      	bpl.n	80069fa <DMA2_Stream4_IRQHandler+0xce>
 80069d2:	68a3      	ldr	r3, [r4, #8]
 80069d4:	f003 021f 	and.w	r2, r3, #31
 80069d8:	2310      	movs	r3, #16
 80069da:	4093      	lsls	r3, r2
 80069dc:	6832      	ldr	r2, [r6, #0]
 80069de:	421a      	tst	r2, r3
 80069e0:	d00b      	beq.n	80069fa <DMA2_Stream4_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80069e2:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	05d9      	lsls	r1, r3, #23
 80069e8:	d403      	bmi.n	80069f2 <DMA2_Stream4_IRQHandler+0xc6>
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	f023 0308 	bic.w	r3, r3, #8
 80069f0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80069f2:	69e3      	ldr	r3, [r4, #28]
 80069f4:	b10b      	cbz	r3, 80069fa <DMA2_Stream4_IRQHandler+0xce>
 80069f6:	4620      	mov	r0, r4
 80069f8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	06da      	lsls	r2, r3, #27
 80069fe:	d59a      	bpl.n	8006936 <DMA2_Stream4_IRQHandler+0xa>
 8006a00:	68a3      	ldr	r3, [r4, #8]
 8006a02:	6831      	ldr	r1, [r6, #0]
 8006a04:	f003 021f 	and.w	r2, r3, #31
 8006a08:	2320      	movs	r3, #32
 8006a0a:	4093      	lsls	r3, r2
 8006a0c:	4219      	tst	r1, r3
 8006a0e:	d092      	beq.n	8006936 <DMA2_Stream4_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006a10:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	05db      	lsls	r3, r3, #23
 8006a16:	d403      	bmi.n	8006a20 <DMA2_Stream4_IRQHandler+0xf4>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006a20:	6a23      	ldr	r3, [r4, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d087      	beq.n	8006936 <DMA2_Stream4_IRQHandler+0xa>
 8006a26:	4620      	mov	r0, r4
 8006a28:	463b      	mov	r3, r7
void DMA2_Stream4_IRQHandler() { if (DMACTXvectors[0x0C]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0C])); }
 8006a2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006a2e:	4718      	bx	r3
 8006a30:	24000454 	.word	0x24000454

08006a34 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler() { if (DMACTXvectors[0x0D]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0D])); }
 8006a34:	4b40      	ldr	r3, [pc, #256]	; (8006b38 <DMA2_Stream5_IRQHandler+0x104>)
 8006a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006a3c:	b90c      	cbnz	r4, 8006a42 <DMA2_Stream5_IRQHandler+0xe>
 8006a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006a42:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006a44:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a48:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006a4a:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a4c:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006a4e:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a52:	d515      	bpl.n	8006a80 <DMA2_Stream5_IRQHandler+0x4c>
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	f003 021f 	and.w	r2, r3, #31
 8006a5a:	2308      	movs	r3, #8
 8006a5c:	4093      	lsls	r3, r2
 8006a5e:	6832      	ldr	r2, [r6, #0]
 8006a60:	421a      	tst	r2, r3
 8006a62:	d00d      	beq.n	8006a80 <DMA2_Stream5_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006a64:	682a      	ldr	r2, [r5, #0]
 8006a66:	f022 0204 	bic.w	r2, r2, #4
 8006a6a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006a6c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006a6e:	682b      	ldr	r3, [r5, #0]
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006a76:	f1b9 0f00 	cmp.w	r9, #0
 8006a7a:	d001      	beq.n	8006a80 <DMA2_Stream5_IRQHandler+0x4c>
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a80:	696b      	ldr	r3, [r5, #20]
 8006a82:	0619      	lsls	r1, r3, #24
 8006a84:	d516      	bpl.n	8006ab4 <DMA2_Stream5_IRQHandler+0x80>
 8006a86:	68a3      	ldr	r3, [r4, #8]
 8006a88:	6832      	ldr	r2, [r6, #0]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	40da      	lsrs	r2, r3
 8006a90:	07d2      	lsls	r2, r2, #31
 8006a92:	d50f      	bpl.n	8006ab4 <DMA2_Stream5_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006a94:	696a      	ldr	r2, [r5, #20]
 8006a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a9a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aae:	b10b      	cbz	r3, 8006ab4 <DMA2_Stream5_IRQHandler+0x80>
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	d50c      	bpl.n	8006ad4 <DMA2_Stream5_IRQHandler+0xa0>
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	f003 021f 	and.w	r2, r3, #31
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	4093      	lsls	r3, r2
 8006ac4:	6832      	ldr	r2, [r6, #0]
 8006ac6:	421a      	tst	r2, r3
 8006ac8:	d004      	beq.n	8006ad4 <DMA2_Stream5_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006aca:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ace:	b10b      	cbz	r3, 8006ad4 <DMA2_Stream5_IRQHandler+0xa0>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	0718      	lsls	r0, r3, #28
 8006ad8:	d513      	bpl.n	8006b02 <DMA2_Stream5_IRQHandler+0xce>
 8006ada:	68a3      	ldr	r3, [r4, #8]
 8006adc:	f003 021f 	and.w	r2, r3, #31
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	4093      	lsls	r3, r2
 8006ae4:	6832      	ldr	r2, [r6, #0]
 8006ae6:	421a      	tst	r2, r3
 8006ae8:	d00b      	beq.n	8006b02 <DMA2_Stream5_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006aea:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	05d9      	lsls	r1, r3, #23
 8006af0:	d403      	bmi.n	8006afa <DMA2_Stream5_IRQHandler+0xc6>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	f023 0308 	bic.w	r3, r3, #8
 8006af8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006afa:	69e3      	ldr	r3, [r4, #28]
 8006afc:	b10b      	cbz	r3, 8006b02 <DMA2_Stream5_IRQHandler+0xce>
 8006afe:	4620      	mov	r0, r4
 8006b00:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	06da      	lsls	r2, r3, #27
 8006b06:	d59a      	bpl.n	8006a3e <DMA2_Stream5_IRQHandler+0xa>
 8006b08:	68a3      	ldr	r3, [r4, #8]
 8006b0a:	6831      	ldr	r1, [r6, #0]
 8006b0c:	f003 021f 	and.w	r2, r3, #31
 8006b10:	2320      	movs	r3, #32
 8006b12:	4093      	lsls	r3, r2
 8006b14:	4219      	tst	r1, r3
 8006b16:	d092      	beq.n	8006a3e <DMA2_Stream5_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006b18:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	05db      	lsls	r3, r3, #23
 8006b1e:	d403      	bmi.n	8006b28 <DMA2_Stream5_IRQHandler+0xf4>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006b28:	6a23      	ldr	r3, [r4, #32]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d087      	beq.n	8006a3e <DMA2_Stream5_IRQHandler+0xa>
 8006b2e:	4620      	mov	r0, r4
 8006b30:	463b      	mov	r3, r7
void DMA2_Stream5_IRQHandler() { if (DMACTXvectors[0x0D]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0D])); }
 8006b32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006b36:	4718      	bx	r3
 8006b38:	24000454 	.word	0x24000454

08006b3c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler() { if (DMACTXvectors[0x0E]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0E])); }
 8006b3c:	4b40      	ldr	r3, [pc, #256]	; (8006c40 <DMA2_Stream6_IRQHandler+0x104>)
 8006b3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b42:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006b44:	b90c      	cbnz	r4, 8006b4a <DMA2_Stream6_IRQHandler+0xe>
 8006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006b4a:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006b4c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b50:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006b52:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b54:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006b56:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b5a:	d515      	bpl.n	8006b88 <DMA2_Stream6_IRQHandler+0x4c>
 8006b5c:	68a3      	ldr	r3, [r4, #8]
 8006b5e:	f003 021f 	and.w	r2, r3, #31
 8006b62:	2308      	movs	r3, #8
 8006b64:	4093      	lsls	r3, r2
 8006b66:	6832      	ldr	r2, [r6, #0]
 8006b68:	421a      	tst	r2, r3
 8006b6a:	d00d      	beq.n	8006b88 <DMA2_Stream6_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006b6c:	682a      	ldr	r2, [r5, #0]
 8006b6e:	f022 0204 	bic.w	r2, r2, #4
 8006b72:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006b74:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006b7e:	f1b9 0f00 	cmp.w	r9, #0
 8006b82:	d001      	beq.n	8006b88 <DMA2_Stream6_IRQHandler+0x4c>
 8006b84:	4620      	mov	r0, r4
 8006b86:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b88:	696b      	ldr	r3, [r5, #20]
 8006b8a:	0619      	lsls	r1, r3, #24
 8006b8c:	d516      	bpl.n	8006bbc <DMA2_Stream6_IRQHandler+0x80>
 8006b8e:	68a3      	ldr	r3, [r4, #8]
 8006b90:	6832      	ldr	r2, [r6, #0]
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	40da      	lsrs	r2, r3
 8006b98:	07d2      	lsls	r2, r2, #31
 8006b9a:	d50f      	bpl.n	8006bbc <DMA2_Stream6_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006b9c:	696a      	ldr	r2, [r5, #20]
 8006b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ba2:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb6:	b10b      	cbz	r3, 8006bbc <DMA2_Stream6_IRQHandler+0x80>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	079b      	lsls	r3, r3, #30
 8006bc0:	d50c      	bpl.n	8006bdc <DMA2_Stream6_IRQHandler+0xa0>
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	f003 021f 	and.w	r2, r3, #31
 8006bc8:	2304      	movs	r3, #4
 8006bca:	4093      	lsls	r3, r2
 8006bcc:	6832      	ldr	r2, [r6, #0]
 8006bce:	421a      	tst	r2, r3
 8006bd0:	d004      	beq.n	8006bdc <DMA2_Stream6_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006bd2:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd6:	b10b      	cbz	r3, 8006bdc <DMA2_Stream6_IRQHandler+0xa0>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	0718      	lsls	r0, r3, #28
 8006be0:	d513      	bpl.n	8006c0a <DMA2_Stream6_IRQHandler+0xce>
 8006be2:	68a3      	ldr	r3, [r4, #8]
 8006be4:	f003 021f 	and.w	r2, r3, #31
 8006be8:	2310      	movs	r3, #16
 8006bea:	4093      	lsls	r3, r2
 8006bec:	6832      	ldr	r2, [r6, #0]
 8006bee:	421a      	tst	r2, r3
 8006bf0:	d00b      	beq.n	8006c0a <DMA2_Stream6_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006bf2:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	05d9      	lsls	r1, r3, #23
 8006bf8:	d403      	bmi.n	8006c02 <DMA2_Stream6_IRQHandler+0xc6>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	f023 0308 	bic.w	r3, r3, #8
 8006c00:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006c02:	69e3      	ldr	r3, [r4, #28]
 8006c04:	b10b      	cbz	r3, 8006c0a <DMA2_Stream6_IRQHandler+0xce>
 8006c06:	4620      	mov	r0, r4
 8006c08:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	06da      	lsls	r2, r3, #27
 8006c0e:	d59a      	bpl.n	8006b46 <DMA2_Stream6_IRQHandler+0xa>
 8006c10:	68a3      	ldr	r3, [r4, #8]
 8006c12:	6831      	ldr	r1, [r6, #0]
 8006c14:	f003 021f 	and.w	r2, r3, #31
 8006c18:	2320      	movs	r3, #32
 8006c1a:	4093      	lsls	r3, r2
 8006c1c:	4219      	tst	r1, r3
 8006c1e:	d092      	beq.n	8006b46 <DMA2_Stream6_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006c20:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	05db      	lsls	r3, r3, #23
 8006c26:	d403      	bmi.n	8006c30 <DMA2_Stream6_IRQHandler+0xf4>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	f023 0310 	bic.w	r3, r3, #16
 8006c2e:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006c30:	6a23      	ldr	r3, [r4, #32]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d087      	beq.n	8006b46 <DMA2_Stream6_IRQHandler+0xa>
 8006c36:	4620      	mov	r0, r4
 8006c38:	463b      	mov	r3, r7
void DMA2_Stream6_IRQHandler() { if (DMACTXvectors[0x0E]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0E])); }
 8006c3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006c3e:	4718      	bx	r3
 8006c40:	24000454 	.word	0x24000454

08006c44 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler() { if (DMACTXvectors[0x0F]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0F])); }
 8006c44:	4b40      	ldr	r3, [pc, #256]	; (8006d48 <DMA2_Stream7_IRQHandler+0x104>)
 8006c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8006c4c:	b90c      	cbnz	r4, 8006c52 <DMA2_Stream7_IRQHandler+0xe>
 8006c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006c52:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006c54:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c58:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006c5a:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c5c:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006c5e:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c62:	d515      	bpl.n	8006c90 <DMA2_Stream7_IRQHandler+0x4c>
 8006c64:	68a3      	ldr	r3, [r4, #8]
 8006c66:	f003 021f 	and.w	r2, r3, #31
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	4093      	lsls	r3, r2
 8006c6e:	6832      	ldr	r2, [r6, #0]
 8006c70:	421a      	tst	r2, r3
 8006c72:	d00d      	beq.n	8006c90 <DMA2_Stream7_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006c74:	682a      	ldr	r2, [r5, #0]
 8006c76:	f022 0204 	bic.w	r2, r2, #4
 8006c7a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006c7c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006c7e:	682b      	ldr	r3, [r5, #0]
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006c86:	f1b9 0f00 	cmp.w	r9, #0
 8006c8a:	d001      	beq.n	8006c90 <DMA2_Stream7_IRQHandler+0x4c>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c90:	696b      	ldr	r3, [r5, #20]
 8006c92:	0619      	lsls	r1, r3, #24
 8006c94:	d516      	bpl.n	8006cc4 <DMA2_Stream7_IRQHandler+0x80>
 8006c96:	68a3      	ldr	r3, [r4, #8]
 8006c98:	6832      	ldr	r2, [r6, #0]
 8006c9a:	f003 031f 	and.w	r3, r3, #31
 8006c9e:	40da      	lsrs	r2, r3
 8006ca0:	07d2      	lsls	r2, r2, #31
 8006ca2:	d50f      	bpl.n	8006cc4 <DMA2_Stream7_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006ca4:	696a      	ldr	r2, [r5, #20]
 8006ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006caa:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006cac:	2201      	movs	r2, #1
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cbe:	b10b      	cbz	r3, 8006cc4 <DMA2_Stream7_IRQHandler+0x80>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	079b      	lsls	r3, r3, #30
 8006cc8:	d50c      	bpl.n	8006ce4 <DMA2_Stream7_IRQHandler+0xa0>
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	f003 021f 	and.w	r2, r3, #31
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	4093      	lsls	r3, r2
 8006cd4:	6832      	ldr	r2, [r6, #0]
 8006cd6:	421a      	tst	r2, r3
 8006cd8:	d004      	beq.n	8006ce4 <DMA2_Stream7_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006cda:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cde:	b10b      	cbz	r3, 8006ce4 <DMA2_Stream7_IRQHandler+0xa0>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	0718      	lsls	r0, r3, #28
 8006ce8:	d513      	bpl.n	8006d12 <DMA2_Stream7_IRQHandler+0xce>
 8006cea:	68a3      	ldr	r3, [r4, #8]
 8006cec:	f003 021f 	and.w	r2, r3, #31
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	4093      	lsls	r3, r2
 8006cf4:	6832      	ldr	r2, [r6, #0]
 8006cf6:	421a      	tst	r2, r3
 8006cf8:	d00b      	beq.n	8006d12 <DMA2_Stream7_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006cfa:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	05d9      	lsls	r1, r3, #23
 8006d00:	d403      	bmi.n	8006d0a <DMA2_Stream7_IRQHandler+0xc6>
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	f023 0308 	bic.w	r3, r3, #8
 8006d08:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006d0a:	69e3      	ldr	r3, [r4, #28]
 8006d0c:	b10b      	cbz	r3, 8006d12 <DMA2_Stream7_IRQHandler+0xce>
 8006d0e:	4620      	mov	r0, r4
 8006d10:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006d12:	682b      	ldr	r3, [r5, #0]
 8006d14:	06da      	lsls	r2, r3, #27
 8006d16:	d59a      	bpl.n	8006c4e <DMA2_Stream7_IRQHandler+0xa>
 8006d18:	68a3      	ldr	r3, [r4, #8]
 8006d1a:	6831      	ldr	r1, [r6, #0]
 8006d1c:	f003 021f 	and.w	r2, r3, #31
 8006d20:	2320      	movs	r3, #32
 8006d22:	4093      	lsls	r3, r2
 8006d24:	4219      	tst	r1, r3
 8006d26:	d092      	beq.n	8006c4e <DMA2_Stream7_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006d28:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006d2a:	682b      	ldr	r3, [r5, #0]
 8006d2c:	05db      	lsls	r3, r3, #23
 8006d2e:	d403      	bmi.n	8006d38 <DMA2_Stream7_IRQHandler+0xf4>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	f023 0310 	bic.w	r3, r3, #16
 8006d36:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006d38:	6a23      	ldr	r3, [r4, #32]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d087      	beq.n	8006c4e <DMA2_Stream7_IRQHandler+0xa>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	463b      	mov	r3, r7
void DMA2_Stream7_IRQHandler() { if (DMACTXvectors[0x0F]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0F])); }
 8006d42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006d46:	4718      	bx	r3
 8006d48:	24000454 	.word	0x24000454

08006d4c <BSP_STM32_DMA2D_FillBuff>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_STM32_DMA2D.h"

uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006d4c:	4684      	mov	ip, r0

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_R2M);
 8006d4e:	6800      	ldr	r0, [r0, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, (uint32_t)offsetline);
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), ((uint32_t)height | ((uint32_t)width << DMA2D_NLR_PL_Pos)));
 8006d50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_R2M);
 8006d54:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8006d58:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006d5c:	b510      	push	{r4, lr}
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_R2M);
 8006d5e:	f8cc 0000 	str.w	r0, [ip]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006d62:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, (uint32_t)offsetline);
 8006d66:	4c15      	ldr	r4, [pc, #84]	; (8006dbc <BSP_STM32_DMA2D_FillBuff+0x70>)
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006d68:	f020 0007 	bic.w	r0, r0, #7
uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006d6c:	f8bd e008 	ldrh.w	lr, [sp, #8]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006d70:	4301      	orrs	r1, r0

	// Enable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006d72:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006d74:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, (uint32_t)offsetline);
 8006d78:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
 8006d7c:	4014      	ands	r4, r2
 8006d7e:	ea44 040e 	orr.w	r4, r4, lr
 8006d82:	f8cc 4040 	str.w	r4, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), ((uint32_t)height | ((uint32_t)width << DMA2D_NLR_PL_Pos)));
 8006d86:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006d8a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006d94:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006d98:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
	WRITE_REG(hdma2d->OCOLR, color);
 8006d9c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006da0:	f8dc 3000 	ldr.w	r3, [ip]
 8006da4:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8006da8:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 8006dac:	f8dc 3000 	ldr.w	r3, [ip]
 8006db0:	f043 0301 	orr.w	r3, r3, #1
 8006db4:	f8cc 3000 	str.w	r3, [ip]
}
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	bf00      	nop
 8006dbc:	ffff0000 	.word	0xffff0000

08006dc0 <BSP_STM32_DMA2D_FillBuffBlend>:


uint8_t BSP_STM32_DMA2D_FillBuffBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color, uint8_t alpha) {
	// Recalculating color for ARGB4444 and ARGB1555
	switch (colormode) {
 8006dc0:	2903      	cmp	r1, #3
uint8_t BSP_STM32_DMA2D_FillBuffBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color, uint8_t alpha) {
 8006dc2:	4684      	mov	ip, r0
 8006dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc6:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8006dca:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8006dce:	e9dd 5006 	ldrd	r5, r0, [sp, #24]
	switch (colormode) {
 8006dd2:	d055      	beq.n	8006e80 <BSP_STM32_DMA2D_FillBuffBlend+0xc0>
 8006dd4:	2904      	cmp	r1, #4
 8006dd6:	d10b      	bne.n	8006df0 <BSP_STM32_DMA2D_FillBuffBlend+0x30>
	case DMA2D_ARGB4444:
		color = ((color & 0x0F00) << 12) | ((color & 0x00F0) << 8) | ((color & 0x000F) << 4);
 8006dd8:	0307      	lsls	r7, r0, #12
 8006dda:	ea4f 2e00 	mov.w	lr, r0, lsl #8
 8006dde:	f407 0770 	and.w	r7, r7, #15728640	; 0xf00000
 8006de2:	0100      	lsls	r0, r0, #4
 8006de4:	f40e 4e70 	and.w	lr, lr, #61440	; 0xf000
 8006de8:	b2c0      	uxtb	r0, r0
 8006dea:	ea47 070e 	orr.w	r7, r7, lr
 8006dee:	4338      	orrs	r0, r7
	uint32_t regMask0  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA);
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
	WRITE_REG(hdma2d->BGOR, offsetline);

	WRITE_REG(hdma2d->BGMAR, dest_addr);
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	uint32_t regValue1 = colormode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos);
 8006df4:	ea41 6204 	orr.w	r2, r1, r4, lsl #24
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND_FG);
 8006df8:	f8dc 4000 	ldr.w	r4, [ip]
 8006dfc:	f424 24e0 	bic.w	r4, r4, #458752	; 0x70000
 8006e00:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8006e04:	f8cc 4000 	str.w	r4, [ip]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006e08:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 8006e0c:	f024 0407 	bic.w	r4, r4, #7
 8006e10:	430c      	orrs	r4, r1
 8006e12:	f8cc 4034 	str.w	r4, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, offsetline);
 8006e16:	4c21      	ldr	r4, [pc, #132]	; (8006e9c <BSP_STM32_DMA2D_FillBuffBlend+0xdc>)
 8006e18:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 8006e1c:	403c      	ands	r4, r7
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8006e1e:	4f20      	ldr	r7, [pc, #128]	; (8006ea0 <BSP_STM32_DMA2D_FillBuffBlend+0xe0>)
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, offsetline);
 8006e20:	4334      	orrs	r4, r6
 8006e22:	f8cc 4040 	str.w	r4, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8006e26:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8006e2a:	403c      	ands	r4, r7
 8006e2c:	4322      	orrs	r2, r4
 8006e2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e32:	f8cc 201c 	str.w	r2, [ip, #28]
	WRITE_REG(hdma2d->FGCOLR, color);
 8006e36:	f8cc 0020 	str.w	r0, [ip, #32]
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006e3a:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 8006e3c:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8006e40:	403a      	ands	r2, r7
 8006e42:	4311      	orrs	r1, r2
 8006e44:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 8006e48:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
	WRITE_REG(hdma2d->BGOR, offsetline);
 8006e4c:	f8cc 6018 	str.w	r6, [ip, #24]
	WRITE_REG(hdma2d->BGMAR, dest_addr);
 8006e50:	f8cc 5014 	str.w	r5, [ip, #20]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006e54:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006e58:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006e62:	f8cc 503c 	str.w	r5, [ip, #60]	; 0x3c
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006e66:	f8dc 3000 	ldr.w	r3, [ip]
 8006e6a:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8006e6e:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 8006e72:	f8dc 3000 	ldr.w	r3, [ip]
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	f8cc 3000 	str.w	r3, [ip]
}
 8006e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		color = ((color & 0x7C00) << 9) | ((color & 0x03E0) << 6) | ((color & 0x001F) << 3);
 8006e80:	0247      	lsls	r7, r0, #9
 8006e82:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8006e86:	f407 0778 	and.w	r7, r7, #16252928	; 0xf80000
 8006e8a:	00c0      	lsls	r0, r0, #3
 8006e8c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8006e90:	b2c0      	uxtb	r0, r0
 8006e92:	ea47 070e 	orr.w	r7, r7, lr
 8006e96:	4338      	orrs	r0, r7
		break;
 8006e98:	e7aa      	b.n	8006df0 <BSP_STM32_DMA2D_FillBuffBlend+0x30>
 8006e9a:	bf00      	nop
 8006e9c:	ffff0000 	.word	0xffff0000
 8006ea0:	00fcfff0 	.word	0x00fcfff0

08006ea4 <BSP_STM32_DMA2D_CopyBuf>:
	uint32_t regValue = colormode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFF << DMA2D_FGPFCCR_ALPHA_Pos);
	uint32_t regMask  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA);
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
	WRITE_REG(hdma2d->FGOR, src_offsetline);

	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M);
 8006ea8:	6802      	ldr	r2, [r0, #0]
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006eaa:	4684      	mov	ip, r0
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M);
 8006eac:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006eb0:	b410      	push	{r4}
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M);
 8006eb2:	6002      	str	r2, [r0, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006eb4:	6b40      	ldr	r0, [r0, #52]	; 0x34
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006eb6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006eba:	f020 0007 	bic.w	r0, r0, #7
 8006ebe:	4308      	orrs	r0, r1
 8006ec0:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006ec4:	4818      	ldr	r0, [pc, #96]	; (8006f28 <BSP_STM32_DMA2D_CopyBuf+0x84>)
 8006ec6:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
 8006eca:	4010      	ands	r0, r2
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006ecc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006ed0:	4310      	orrs	r0, r2
 8006ed2:	f8cc 0040 	str.w	r0, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006ed6:	4815      	ldr	r0, [pc, #84]	; (8006f2c <BSP_STM32_DMA2D_CopyBuf+0x88>)
 8006ed8:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8006edc:	4010      	ands	r0, r2
 8006ede:	4301      	orrs	r1, r0
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006ee0:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006ee2:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 8006ee6:	f8cc 101c 	str.w	r1, [ip, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8006eea:	f8cc 4010 	str.w	r4, [ip, #16]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006eee:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006ef2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006ef6:	4313      	orrs	r3, r2
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006ef8:	9a04      	ldr	r2, [sp, #16]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006efa:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006efe:	9b02      	ldr	r3, [sp, #8]
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006f00:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 8006f04:	f8cc 300c 	str.w	r3, [ip, #12]
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006f08:	f8dc 3000 	ldr.w	r3, [ip]
}
 8006f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006f10:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8006f14:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 8006f18:	f8dc 3000 	ldr.w	r3, [ip]
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	f8cc 3000 	str.w	r3, [ip]
}
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	ffff0000 	.word	0xffff0000
 8006f2c:	00fcfff0 	.word	0x00fcfff0

08006f30 <BSP_STM32_DMA2D_CopyBufJPEG>:

uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f30:	4684      	mov	ip, r0

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_PFC);
 8006f32:	6800      	ldr	r0, [r0, #0]
	uint32_t regValue = DMA2D_YCBCR | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFF << DMA2D_FGPFCCR_ALPHA_Pos) | (chroma << DMA2D_FGPFCCR_CSS_Pos);
	uint32_t regMask  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_CSS);
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
	WRITE_REG(hdma2d->FGOR, src_offsetline);

	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_PFC);
 8006f38:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8006f3c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f40:	b410      	push	{r4}
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_PFC);
 8006f42:	f8cc 0000 	str.w	r0, [ip]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006f46:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f4a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006f4e:	f020 0007 	bic.w	r0, r0, #7
 8006f52:	4301      	orrs	r1, r0
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006f54:	481a      	ldr	r0, [pc, #104]	; (8006fc0 <BSP_STM32_DMA2D_CopyBufJPEG+0x90>)
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006f56:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006f5a:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006f5e:	4919      	ldr	r1, [pc, #100]	; (8006fc4 <BSP_STM32_DMA2D_CopyBufJPEG+0x94>)
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006f60:	4010      	ands	r0, r2
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f62:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006f66:	4310      	orrs	r0, r2
 8006f68:	f8cc 0040 	str.w	r0, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006f6c:	f8dc 201c 	ldr.w	r2, [ip, #28]
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f70:	9805      	ldr	r0, [sp, #20]
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006f72:	4011      	ands	r1, r2
 8006f74:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <BSP_STM32_DMA2D_CopyBufJPEG+0x98>)
 8006f76:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006f7a:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	f8cc 201c 	str.w	r2, [ip, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8006f82:	f8cc 4010 	str.w	r4, [ip, #16]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006f86:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006f8a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006f8e:	4313      	orrs	r3, r2
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f90:	9a04      	ldr	r2, [sp, #16]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006f92:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f96:	9b02      	ldr	r3, [sp, #8]
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006f98:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 8006f9c:	f8cc 300c 	str.w	r3, [ip, #12]
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006fa0:	f8dc 3000 	ldr.w	r3, [ip]
}
 8006fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006fa8:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8006fac:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 8006fb0:	f8dc 3000 	ldr.w	r3, [ip]
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	f8cc 3000 	str.w	r3, [ip]
}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	ffff0000 	.word	0xffff0000
 8006fc4:	00f0fff0 	.word	0x00f0fff0
 8006fc8:	ff01000b 	.word	0xff01000b

08006fcc <BSP_STM32_DMA2D_CopyBufBlend>:
	uint32_t regMask0  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA);
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
	WRITE_REG(hdma2d->BGOR, dest_offsetline);

	WRITE_REG(hdma2d->BGMAR, dest_addr);
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND);
 8006fd0:	6802      	ldr	r2, [r0, #0]
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006fd2:	4684      	mov	ip, r0
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND);
 8006fd4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006fd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006fdc:	b530      	push	{r4, r5, lr}
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND);
 8006fde:	6002      	str	r2, [r0, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006fe0:	6b42      	ldr	r2, [r0, #52]	; 0x34
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8006fe2:	4d22      	ldr	r5, [pc, #136]	; (800706c <BSP_STM32_DMA2D_CopyBufBlend+0xa0>)
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006fe4:	f022 0207 	bic.w	r2, r2, #7
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006fe8:	f89d e01c 	ldrb.w	lr, [sp, #28]
 8006fec:	f8bd 400c 	ldrh.w	r4, [sp, #12]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	6342      	str	r2, [r0, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006ff4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006ff6:	481e      	ldr	r0, [pc, #120]	; (8007070 <BSP_STM32_DMA2D_CopyBufBlend+0xa4>)
 8006ff8:	4010      	ands	r0, r2
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006ffa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006ffe:	4310      	orrs	r0, r2
 8007000:	f8cc 0040 	str.w	r0, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8007004:	f8dc 001c 	ldr.w	r0, [ip, #28]
 8007008:	4028      	ands	r0, r5
 800700a:	4308      	orrs	r0, r1
 800700c:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
 8007010:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8007014:	f8cc 001c 	str.w	r0, [ip, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8007018:	f8cc 4010 	str.w	r4, [ip, #16]
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 800701c:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 8007020:	4028      	ands	r0, r5
 8007022:	4301      	orrs	r1, r0
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8007024:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 8007026:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 800702a:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 800702e:	9906      	ldr	r1, [sp, #24]
	WRITE_REG(hdma2d->BGOR, dest_offsetline);
 8007030:	f8cc 2018 	str.w	r2, [ip, #24]
	WRITE_REG(hdma2d->BGMAR, dest_addr);
 8007034:	f8cc 1014 	str.w	r1, [ip, #20]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8007038:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 800703c:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007040:	4313      	orrs	r3, r2
 8007042:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8007046:	9b04      	ldr	r3, [sp, #16]
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8007048:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 800704c:	f8cc 300c 	str.w	r3, [ip, #12]
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8007050:	f8dc 3000 	ldr.w	r3, [ip]
 8007054:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8007058:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 800705c:	f8dc 3000 	ldr.w	r3, [ip]
 8007060:	f043 0301 	orr.w	r3, r3, #1
 8007064:	f8cc 3000 	str.w	r3, [ip]
}
 8007068:	bd30      	pop	{r4, r5, pc}
 800706a:	bf00      	nop
 800706c:	00fcfff0 	.word	0x00fcfff0
 8007070:	ffff0000 	.word	0xffff0000

08007074 <BSP_STM32_DMA2D_IRQHandler>:


uint8_t BSP_STM32_DMA2D_IRQHandler(DMA2D_TypeDef * hdma2d) {
	if (((hdma2d->ISR & DMA2D_ISR_TCIF) > 0) &&  ((hdma2d->CR & DMA2D_CR_TCIE) > 0)) {
 8007074:	6842      	ldr	r2, [r0, #4]
uint8_t BSP_STM32_DMA2D_IRQHandler(DMA2D_TypeDef * hdma2d) {
 8007076:	4603      	mov	r3, r0
	if (((hdma2d->ISR & DMA2D_ISR_TCIF) > 0) &&  ((hdma2d->CR & DMA2D_CR_TCIE) > 0)) {
 8007078:	0790      	lsls	r0, r2, #30
 800707a:	d502      	bpl.n	8007082 <BSP_STM32_DMA2D_IRQHandler+0xe>
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	0591      	lsls	r1, r2, #22
 8007080:	d40d      	bmi.n	800709e <BSP_STM32_DMA2D_IRQHandler+0x2a>
		hdma2d->IFCR = DMA2D_IFCR_CTCIF;

		return BSP_OK;
	}

	if (((hdma2d->ISR & DMA2D_ISR_TEIF) > 0) && ((hdma2d->CR & DMA2D_CR_TEIE) > 0)) {
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	07d2      	lsls	r2, r2, #31
 8007086:	d502      	bpl.n	800708e <BSP_STM32_DMA2D_IRQHandler+0x1a>
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	05d0      	lsls	r0, r2, #23
 800708c:	d40f      	bmi.n	80070ae <BSP_STM32_DMA2D_IRQHandler+0x3a>
		hdma2d->IFCR = DMA2D_IFCR_CTEIF;

		return BSP_ERROR;
	}

	if (((hdma2d->ISR & DMA2D_ISR_CEIF) > 0) && ((hdma2d->CR & DMA2D_CR_CEIE) > 0)) {
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	0691      	lsls	r1, r2, #26
 8007092:	d502      	bpl.n	800709a <BSP_STM32_DMA2D_IRQHandler+0x26>
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	0492      	lsls	r2, r2, #18
 8007098:	d411      	bmi.n	80070be <BSP_STM32_DMA2D_IRQHandler+0x4a>
		// Clear the configuration error flag
		hdma2d->IFCR = DMA2D_IFCR_CCEIF;

		return BSP_ERROR;
	}
	return BSP_ERROR;
 800709a:	2001      	movs	r0, #1
}
 800709c:	4770      	bx	lr
		hdma2d->CR &= ~(DMA2D_CR_TCIE);
 800709e:	681a      	ldr	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CTCIF;
 80070a0:	2102      	movs	r1, #2
		return BSP_OK;
 80070a2:	2000      	movs	r0, #0
		hdma2d->CR &= ~(DMA2D_CR_TCIE);
 80070a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070a8:	601a      	str	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CTCIF;
 80070aa:	6099      	str	r1, [r3, #8]
		return BSP_OK;
 80070ac:	4770      	bx	lr
		hdma2d->CR &= ~(DMA2D_CR_TEIE);
 80070ae:	681a      	ldr	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CTEIF;
 80070b0:	2101      	movs	r1, #1
		hdma2d->CR &= ~(DMA2D_CR_TEIE);
 80070b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
		return BSP_ERROR;
 80070b6:	4608      	mov	r0, r1
		hdma2d->CR &= ~(DMA2D_CR_TEIE);
 80070b8:	601a      	str	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CTEIF;
 80070ba:	6099      	str	r1, [r3, #8]
		return BSP_ERROR;
 80070bc:	4770      	bx	lr
		hdma2d->CR &= ~(DMA2D_CR_CEIE);
 80070be:	681a      	ldr	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CCEIF;
 80070c0:	2120      	movs	r1, #32
		return BSP_ERROR;
 80070c2:	2001      	movs	r0, #1
		hdma2d->CR &= ~(DMA2D_CR_CEIE);
 80070c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070c8:	601a      	str	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CCEIF;
 80070ca:	6099      	str	r1, [r3, #8]
		return BSP_ERROR;
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop

080070d0 <BSP_STM32_GPIO_Init>:
	#else
		EXTI_CurrentCPU = EXTI_D1; // EXTI for CM7 CPU
	#endif

	// Configure the port pins
	while (((Pins) >> position) != 0x00U) {
 80070d0:	2900      	cmp	r1, #0
 80070d2:	f000 8113 	beq.w	80072fc <BSP_STM32_GPIO_Init+0x22c>
uint8_t BSP_STM32_GPIO_Init(GPIO_TypeDef  *GPIOx, uint32_t Pins, uint32_t Mode, uint32_t Pull, uint32_t Speed, uint32_t Alternate) {
 80070d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    	  GPIOx->OSPEEDR = temp;

	    	  // Configure the IO Output Type
	    	  temp = GPIOx->OTYPER;
	    	  temp &= ~(GPIO_OTYPER_OT0 << position) ;
	    	  temp |= (((Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070da:	f3c2 1400 	ubfx	r4, r2, #4, #1
uint8_t BSP_STM32_GPIO_Init(GPIO_TypeDef  *GPIOx, uint32_t Pins, uint32_t Mode, uint32_t Pull, uint32_t Speed, uint32_t Alternate) {
 80070de:	b087      	sub	sp, #28
	      if (((Mode & GPIO_MODE) == MODE_OUTPUT) || ((Mode & GPIO_MODE) == MODE_AF)) {
 80070e0:	f002 0603 	and.w	r6, r2, #3
	      GPIOx->MODER = temp;

	      //--------------------- EXTI Mode Configuration ------------------------
	      // Configure the External Interrupt or event for the current IO

	      if ((Mode & EXTI_MODE) != 0x00U) {
 80070e4:	f402 3b40 	and.w	fp, r2, #196608	; 0x30000
	    	  temp |= (((Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070e8:	9405      	str	r4, [sp, #20]
	        SYSCFG->EXTICR[position >> 2U] = temp;

	        // Clear Rising Falling edge configuration
	        temp = EXTI->RTSR1;
	        temp &= ~(iocurrent);
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 80070ea:	f402 1480 	and.w	r4, r2, #1048576	; 0x100000
	      if (((Mode & GPIO_MODE) == MODE_OUTPUT) || ((Mode & GPIO_MODE) == MODE_AF)) {
 80070ee:	f106 3aff 	add.w	sl, r6, #4294967295
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070f2:	4699      	mov	r9, r3
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 80070f4:	9401      	str	r4, [sp, #4]
	        EXTI->RTSR1 = temp;

	        temp = EXTI->FTSR1;
	        temp &= ~(iocurrent);
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 80070f6:	f402 1400 	and.w	r4, r2, #2097152	; 0x200000
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070fa:	9600      	str	r6, [sp, #0]
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 80070fc:	9402      	str	r4, [sp, #8]
	        EXTI->FTSR1 = temp;

	        temp = EXTI_CurrentCPU->EMR1;
	        temp &= ~(iocurrent);
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 80070fe:	f402 3400 	and.w	r4, r2, #131072	; 0x20000
	        EXTI_CurrentCPU->EMR1 = temp;

	        // Clear EXTI line configuration
	        temp = EXTI_CurrentCPU->IMR1;
	        temp &= ~(iocurrent);
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 8007102:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 8007106:	9403      	str	r4, [sp, #12]
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 8007108:	9204      	str	r2, [sp, #16]
	uint32_t position = 0x00U;
 800710a:	2200      	movs	r2, #0
	    iocurrent = (Pins) & (1UL << position);
 800710c:	2301      	movs	r3, #1
 800710e:	4093      	lsls	r3, r2
	    if (iocurrent != 0x00U) {
 8007110:	ea13 0701 	ands.w	r7, r3, r1
 8007114:	d07c      	beq.n	8007210 <BSP_STM32_GPIO_Init+0x140>
	      if (((Mode & GPIO_MODE) == MODE_OUTPUT) || ((Mode & GPIO_MODE) == MODE_AF)) {
 8007116:	f1ba 0f01 	cmp.w	sl, #1
 800711a:	f240 8082 	bls.w	8007222 <BSP_STM32_GPIO_Init+0x152>
	      if ((Mode & GPIO_MODE) != MODE_ANALOG) {
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	0054      	lsls	r4, r2, #1
 8007122:	2b03      	cmp	r3, #3
 8007124:	f040 80bb 	bne.w	800729e <BSP_STM32_GPIO_Init+0x1ce>
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007128:	fa03 f404 	lsl.w	r4, r3, r4
 800712c:	43e5      	mvns	r5, r4
	      temp = GPIOx->MODER;
 800712e:	6803      	ldr	r3, [r0, #0]
	      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007130:	402b      	ands	r3, r5
	      temp |= ((Mode & GPIO_MODE) << (position * 2U));
 8007132:	431c      	orrs	r4, r3
	      GPIOx->MODER = temp;
 8007134:	6004      	str	r4, [r0, #0]
	      if ((Mode & EXTI_MODE) != 0x00U) {
 8007136:	f1bb 0f00 	cmp.w	fp, #0
 800713a:	d069      	beq.n	8007210 <BSP_STM32_GPIO_Init+0x140>
	        temp = SYSCFG->EXTICR[position >> 2U];
 800713c:	f022 0403 	bic.w	r4, r2, #3
	        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007140:	f002 0503 	and.w	r5, r2, #3
 8007144:	f04f 0c0f 	mov.w	ip, #15
 8007148:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
 800714c:	00ad      	lsls	r5, r5, #2
	        temp = SYSCFG->EXTICR[position >> 2U];
 800714e:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
	        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007152:	fa0c fc05 	lsl.w	ip, ip, r5
 8007156:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800715a:	ea23 060c 	bic.w	r6, r3, ip
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800715e:	4b73      	ldr	r3, [pc, #460]	; (800732c <BSP_STM32_GPIO_Init+0x25c>)
 8007160:	4298      	cmp	r0, r3
 8007162:	d02d      	beq.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
 8007164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007168:	4298      	cmp	r0, r3
 800716a:	f000 80ab 	beq.w	80072c4 <BSP_STM32_GPIO_Init+0x1f4>
 800716e:	4b70      	ldr	r3, [pc, #448]	; (8007330 <BSP_STM32_GPIO_Init+0x260>)
 8007170:	4298      	cmp	r0, r3
 8007172:	f000 80ae 	beq.w	80072d2 <BSP_STM32_GPIO_Init+0x202>
 8007176:	4b6f      	ldr	r3, [pc, #444]	; (8007334 <BSP_STM32_GPIO_Init+0x264>)
 8007178:	4298      	cmp	r0, r3
 800717a:	f000 809c 	beq.w	80072b6 <BSP_STM32_GPIO_Init+0x1e6>
 800717e:	4b6e      	ldr	r3, [pc, #440]	; (8007338 <BSP_STM32_GPIO_Init+0x268>)
 8007180:	4298      	cmp	r0, r3
 8007182:	f000 80b4 	beq.w	80072ee <BSP_STM32_GPIO_Init+0x21e>
 8007186:	4b6d      	ldr	r3, [pc, #436]	; (800733c <BSP_STM32_GPIO_Init+0x26c>)
 8007188:	4298      	cmp	r0, r3
 800718a:	f000 80b9 	beq.w	8007300 <BSP_STM32_GPIO_Init+0x230>
 800718e:	4b6c      	ldr	r3, [pc, #432]	; (8007340 <BSP_STM32_GPIO_Init+0x270>)
 8007190:	4298      	cmp	r0, r3
 8007192:	f000 80a5 	beq.w	80072e0 <BSP_STM32_GPIO_Init+0x210>
 8007196:	4b6b      	ldr	r3, [pc, #428]	; (8007344 <BSP_STM32_GPIO_Init+0x274>)
 8007198:	4298      	cmp	r0, r3
 800719a:	f000 80b8 	beq.w	800730e <BSP_STM32_GPIO_Init+0x23e>
 800719e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8007348 <BSP_STM32_GPIO_Init+0x278>
 80071a2:	4560      	cmp	r0, ip
 80071a4:	f000 80ba 	beq.w	800731c <BSP_STM32_GPIO_Init+0x24c>
 80071a8:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800734c <BSP_STM32_GPIO_Init+0x27c>
 80071ac:	4560      	cmp	r0, ip
 80071ae:	bf0c      	ite	eq
 80071b0:	f04f 0c09 	moveq.w	ip, #9
 80071b4:	f04f 0c0a 	movne.w	ip, #10
 80071b8:	fa0c fc05 	lsl.w	ip, ip, r5
 80071bc:	ea46 060c 	orr.w	r6, r6, ip
	        temp = EXTI->RTSR1;
 80071c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 80071c4:	9d01      	ldr	r5, [sp, #4]
	        SYSCFG->EXTICR[position >> 2U] = temp;
 80071c6:	60a6      	str	r6, [r4, #8]
	        temp &= ~(iocurrent);
 80071c8:	43fc      	mvns	r4, r7
	        temp = EXTI->RTSR1;
 80071ca:	681b      	ldr	r3, [r3, #0]
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 80071cc:	2d00      	cmp	r5, #0
 80071ce:	d170      	bne.n	80072b2 <BSP_STM32_GPIO_Init+0x1e2>
	        temp &= ~(iocurrent);
 80071d0:	4023      	ands	r3, r4
	        EXTI->RTSR1 = temp;
 80071d2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80071d6:	602b      	str	r3, [r5, #0]
	        temp = EXTI->FTSR1;
 80071d8:	686b      	ldr	r3, [r5, #4]
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 80071da:	9d02      	ldr	r5, [sp, #8]
 80071dc:	2d00      	cmp	r5, #0
 80071de:	d166      	bne.n	80072ae <BSP_STM32_GPIO_Init+0x1de>
	        temp &= ~(iocurrent);
 80071e0:	4023      	ands	r3, r4
	        EXTI->FTSR1 = temp;
 80071e2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80071e6:	606b      	str	r3, [r5, #4]
	        temp = EXTI_CurrentCPU->EMR1;
 80071e8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 80071ec:	9d03      	ldr	r5, [sp, #12]
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	d15b      	bne.n	80072aa <BSP_STM32_GPIO_Init+0x1da>
	        temp &= ~(iocurrent);
 80071f2:	4023      	ands	r3, r4
	        EXTI_CurrentCPU->EMR1 = temp;
 80071f4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80071f8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	        temp = EXTI_CurrentCPU->IMR1;
 80071fc:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 8007200:	9d04      	ldr	r5, [sp, #16]
 8007202:	2d00      	cmp	r5, #0
 8007204:	d14f      	bne.n	80072a6 <BSP_STM32_GPIO_Init+0x1d6>
	        temp &= ~(iocurrent);
 8007206:	4023      	ands	r3, r4
	        EXTI_CurrentCPU->IMR1 = temp;
 8007208:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800720c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	      }
	    }

	    position++;
 8007210:	3201      	adds	r2, #1
	while (((Pins) >> position) != 0x00U) {
 8007212:	fa31 f302 	lsrs.w	r3, r1, r2
 8007216:	f47f af79 	bne.w	800710c <BSP_STM32_GPIO_Init+0x3c>
	  }

	return BSP_OK;
}
 800721a:	2000      	movs	r0, #0
 800721c:	b007      	add	sp, #28
 800721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    	  temp = GPIOx->OSPEEDR;
 8007222:	0054      	lsls	r4, r2, #1
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007224:	2503      	movs	r5, #3
	    	  temp = GPIOx->OSPEEDR;
 8007226:	f8d0 e008 	ldr.w	lr, [r0, #8]
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800722a:	40a5      	lsls	r5, r4
	    	  temp |= (Speed << (position * 2U));
 800722c:	9e10      	ldr	r6, [sp, #64]	; 0x40
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800722e:	ea2e 0e05 	bic.w	lr, lr, r5
	    	  temp |= (Speed << (position * 2U));
 8007232:	fa06 fc04 	lsl.w	ip, r6, r4
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007236:	43ed      	mvns	r5, r5
	    	  temp |= (Speed << (position * 2U));
 8007238:	ea4c 0c0e 	orr.w	ip, ip, lr
	    	  GPIOx->OSPEEDR = temp;
 800723c:	f8c0 c008 	str.w	ip, [r0, #8]
	    	  temp = GPIOx->OTYPER;
 8007240:	f8d0 c004 	ldr.w	ip, [r0, #4]
	    	  temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007244:	ea2c 0c03 	bic.w	ip, ip, r3
	    	  temp |= (((Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007248:	9b05      	ldr	r3, [sp, #20]
 800724a:	4093      	lsls	r3, r2
 800724c:	ea43 030c 	orr.w	r3, r3, ip
	    	  GPIOx->OTYPER = temp;
 8007250:	6043      	str	r3, [r0, #4]
	    	  temp = GPIOx->PUPDR;
 8007252:	68c3      	ldr	r3, [r0, #12]
	    	  temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007254:	ea03 0c05 	and.w	ip, r3, r5
	    	  temp |= ((Pull) << (position * 2U));
 8007258:	fa09 f304 	lsl.w	r3, r9, r4
 800725c:	ea43 030c 	orr.w	r3, r3, ip
	    	  GPIOx->PUPDR = temp;
 8007260:	60c3      	str	r3, [r0, #12]
	      if ((Mode & GPIO_MODE) == MODE_AF) {
 8007262:	9b00      	ldr	r3, [sp, #0]
 8007264:	2b02      	cmp	r3, #2
 8007266:	fa03 f404 	lsl.w	r4, r3, r4
 800726a:	f47f af60 	bne.w	800712e <BSP_STM32_GPIO_Init+0x5e>
	    	  temp = GPIOx->AFR[position >> 3U];
 800726e:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
	    	  temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007272:	f002 0c07 	and.w	ip, r2, #7
	    	  temp |= ((Alternate) << ((position & 0x07U) * 4U));
 8007276:	9b11      	ldr	r3, [sp, #68]	; 0x44
	    	  temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007278:	f04f 080f 	mov.w	r8, #15
 800727c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007280:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007284:	fa08 f80c 	lsl.w	r8, r8, ip
	    	  temp |= ((Alternate) << ((position & 0x07U) * 4U));
 8007288:	fa03 fc0c 	lsl.w	ip, r3, ip
	    	  temp = GPIOx->AFR[position >> 3U];
 800728c:	f8de 3020 	ldr.w	r3, [lr, #32]
	    	  temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007290:	ea23 0308 	bic.w	r3, r3, r8
	    	  temp |= ((Alternate) << ((position & 0x07U) * 4U));
 8007294:	ea4c 0303 	orr.w	r3, ip, r3
	    	  GPIOx->AFR[position >> 3U] = temp;
 8007298:	f8ce 3020 	str.w	r3, [lr, #32]
 800729c:	e747      	b.n	800712e <BSP_STM32_GPIO_Init+0x5e>
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800729e:	2503      	movs	r5, #3
 80072a0:	40a5      	lsls	r5, r4
 80072a2:	43ed      	mvns	r5, r5
 80072a4:	e7d5      	b.n	8007252 <BSP_STM32_GPIO_Init+0x182>
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 80072a6:	433b      	orrs	r3, r7
 80072a8:	e7ae      	b.n	8007208 <BSP_STM32_GPIO_Init+0x138>
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 80072aa:	433b      	orrs	r3, r7
 80072ac:	e7a2      	b.n	80071f4 <BSP_STM32_GPIO_Init+0x124>
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 80072ae:	433b      	orrs	r3, r7
 80072b0:	e797      	b.n	80071e2 <BSP_STM32_GPIO_Init+0x112>
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 80072b2:	433b      	orrs	r3, r7
 80072b4:	e78d      	b.n	80071d2 <BSP_STM32_GPIO_Init+0x102>
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80072b6:	f04f 0c03 	mov.w	ip, #3
 80072ba:	fa0c fc05 	lsl.w	ip, ip, r5
 80072be:	ea46 060c 	orr.w	r6, r6, ip
 80072c2:	e77d      	b.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
 80072c4:	f04f 0c01 	mov.w	ip, #1
 80072c8:	fa0c fc05 	lsl.w	ip, ip, r5
 80072cc:	ea46 060c 	orr.w	r6, r6, ip
 80072d0:	e776      	b.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
 80072d2:	f04f 0c02 	mov.w	ip, #2
 80072d6:	fa0c fc05 	lsl.w	ip, ip, r5
 80072da:	ea46 060c 	orr.w	r6, r6, ip
 80072de:	e76f      	b.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
 80072e0:	f04f 0c06 	mov.w	ip, #6
 80072e4:	fa0c fc05 	lsl.w	ip, ip, r5
 80072e8:	ea46 060c 	orr.w	r6, r6, ip
 80072ec:	e768      	b.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
 80072ee:	f04f 0c04 	mov.w	ip, #4
 80072f2:	fa0c fc05 	lsl.w	ip, ip, r5
 80072f6:	ea46 060c 	orr.w	r6, r6, ip
 80072fa:	e761      	b.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
}
 80072fc:	2000      	movs	r0, #0
 80072fe:	4770      	bx	lr
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007300:	f04f 0c05 	mov.w	ip, #5
 8007304:	fa0c fc05 	lsl.w	ip, ip, r5
 8007308:	ea46 060c 	orr.w	r6, r6, ip
 800730c:	e758      	b.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
 800730e:	f04f 0c07 	mov.w	ip, #7
 8007312:	fa0c fc05 	lsl.w	ip, ip, r5
 8007316:	ea46 060c 	orr.w	r6, r6, ip
 800731a:	e751      	b.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
 800731c:	f04f 0c08 	mov.w	ip, #8
 8007320:	fa0c fc05 	lsl.w	ip, ip, r5
 8007324:	ea46 060c 	orr.w	r6, r6, ip
 8007328:	e74a      	b.n	80071c0 <BSP_STM32_GPIO_Init+0xf0>
 800732a:	bf00      	nop
 800732c:	58020000 	.word	0x58020000
 8007330:	58020800 	.word	0x58020800
 8007334:	58020c00 	.word	0x58020c00
 8007338:	58021000 	.word	0x58021000
 800733c:	58021400 	.word	0x58021400
 8007340:	58021800 	.word	0x58021800
 8007344:	58021c00 	.word	0x58021c00
 8007348:	58022000 	.word	0x58022000
 800734c:	58022400 	.word	0x58022400

08007350 <BSP_STM32_GPIO_ReadPin>:


uint32_t BSP_STM32_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin) {
	return ((GPIOx->IDR & GPIO_Pin) > 0)?GPIO_PIN_SET:GPIO_PIN_RESET;
 8007350:	6903      	ldr	r3, [r0, #16]
 8007352:	420b      	tst	r3, r1
}
 8007354:	bf14      	ite	ne
 8007356:	2001      	movne	r0, #1
 8007358:	2000      	moveq	r0, #0
 800735a:	4770      	bx	lr

0800735c <BSP_STM32_GPIO_WritePin>:

uint8_t BSP_STM32_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin, uint32_t PinState) {
	GPIOx->BSRR=((PinState==GPIO_PIN_SET)?GPIO_Pin:GPIO_Pin << GPIO_NUMBER);
 800735c:	2a01      	cmp	r2, #1
 800735e:	bf18      	it	ne
 8007360:	0409      	lslne	r1, r1, #16
 8007362:	6181      	str	r1, [r0, #24]
	return BSP_OK;
}
 8007364:	2000      	movs	r0, #0
 8007366:	4770      	bx	lr

08007368 <BSP_STM32_HSEM_FastTake>:
}


uint8_t BSP_STM32_HSEM_FastTake(uint32_t SemID) {
	// Validate input parameters
	if (SemID > 31) return BSP_ERROR;
 8007368:	281f      	cmp	r0, #31
 800736a:	d809      	bhi.n	8007380 <BSP_STM32_HSEM_FastTake+0x18>

	// Read the RLR register to take the semaphore
	if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK)) return BSP_OK;
 800736c:	4905      	ldr	r1, [pc, #20]	; (8007384 <BSP_STM32_HSEM_FastTake+0x1c>)
 800736e:	f100 0320 	add.w	r3, r0, #32
 8007372:	4a05      	ldr	r2, [pc, #20]	; (8007388 <BSP_STM32_HSEM_FastTake+0x20>)
 8007374:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (SemID > 31) return BSP_ERROR;
 8007378:	1a80      	subs	r0, r0, r2
 800737a:	bf18      	it	ne
 800737c:	2001      	movne	r0, #1
 800737e:	4770      	bx	lr
 8007380:	2001      	movs	r0, #1
	return BSP_ERROR;
}
 8007382:	4770      	bx	lr
 8007384:	58026400 	.word	0x58026400
 8007388:	80000300 	.word	0x80000300

0800738c <BSP_STM32_HSEM_FastRelease>:
	return BSP_OK;
}

uint8_t BSP_STM32_HSEM_FastRelease(uint32_t SemID) {
	// Validate input parameters
	if (SemID > 31) return BSP_ERROR;
 800738c:	281f      	cmp	r0, #31
uint8_t BSP_STM32_HSEM_FastRelease(uint32_t SemID) {
 800738e:	4603      	mov	r3, r0
	if (SemID > 31) return BSP_ERROR;
 8007390:	d806      	bhi.n	80073a0 <BSP_STM32_HSEM_FastRelease+0x14>

	// Clear the semaphore by writing to the R register: the MasterID, the ProcessID = 0 and take bit = 0
	HSEM->R[SemID] = (HSEM_CR_COREID_CURRENT);
 8007392:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <BSP_STM32_HSEM_FastRelease+0x18>)
 8007394:	f44f 7140 	mov.w	r1, #768	; 0x300
	return BSP_OK;
 8007398:	2000      	movs	r0, #0
	HSEM->R[SemID] = (HSEM_CR_COREID_CURRENT);
 800739a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return BSP_OK;
 800739e:	4770      	bx	lr
	if (SemID > 31) return BSP_ERROR;
 80073a0:	2001      	movs	r0, #1
}
 80073a2:	4770      	bx	lr
 80073a4:	58026400 	.word	0x58026400

080073a8 <BSP_STM32_I2C_Init>:

uint8_t BSP_STM32_I2C_Init(I2C_TypeDef *hi2c) {
	#define TIMING_CLEAR_MASK   (0xF0FFFFFFU)

	// Disable I2C periph
	CLEAR_BIT(hi2c->CR1, I2C_CR1_PE);
 80073a8:	6801      	ldr	r1, [r0, #0]
uint8_t BSP_STM32_I2C_Init(I2C_TypeDef *hi2c) {
 80073aa:	4603      	mov	r3, r0

	// Disable Own Address2
	hi2c->OAR2 &= ~I2C_OAR2_OA2EN;

	// Enable the AUTOEND and NACK
	hi2c->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073ac:	4a10      	ldr	r2, [pc, #64]	; (80073f0 <BSP_STM32_I2C_Init+0x48>)
	CLEAR_BIT(hi2c->CR1, I2C_CR1_PE);
 80073ae:	f021 0101 	bic.w	r1, r1, #1
uint8_t BSP_STM32_I2C_Init(I2C_TypeDef *hi2c) {
 80073b2:	b430      	push	{r4, r5}
	hi2c->TIMINGR = 0x009034B6 & TIMING_CLEAR_MASK; // 400kHz - High Speed I2C
 80073b4:	4d0f      	ldr	r5, [pc, #60]	; (80073f4 <BSP_STM32_I2C_Init+0x4c>)

	// Configure I2C Generalcall and NoStretch mode
	hi2c->CR1 = (I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE);
 80073b6:	2400      	movs	r4, #0
	CLEAR_BIT(hi2c->CR1, I2C_CR1_PE);
 80073b8:	6001      	str	r1, [r0, #0]
	hi2c->TIMINGR = 0x009034B6 & TIMING_CLEAR_MASK; // 400kHz - High Speed I2C
 80073ba:	6105      	str	r5, [r0, #16]
	hi2c->OAR1 &= ~I2C_OAR1_OA1EN;
 80073bc:	6881      	ldr	r1, [r0, #8]

	// Enable I2C periph
	SET_BIT(hi2c->CR1, I2C_CR1_PE);

	return BSP_OK;
}
 80073be:	4620      	mov	r0, r4
	hi2c->OAR1 &= ~I2C_OAR1_OA1EN;
 80073c0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80073c4:	6099      	str	r1, [r3, #8]
	hi2c->OAR2 &= ~I2C_OAR2_OA2EN;
 80073c6:	68d9      	ldr	r1, [r3, #12]
 80073c8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80073cc:	60d9      	str	r1, [r3, #12]
	hi2c->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073ce:	6859      	ldr	r1, [r3, #4]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	605a      	str	r2, [r3, #4]
	hi2c->CR1 = (I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE);
 80073d4:	601c      	str	r4, [r3, #0]
	hi2c->CR1 &= ~(I2C_CR1_ANFOFF);
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073dc:	601a      	str	r2, [r3, #0]
	hi2c->CR1 |= I2C_ANALOGFILTER_ENABLE;
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	601a      	str	r2, [r3, #0]
	SET_BIT(hi2c->CR1, I2C_CR1_PE);
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	f042 0201 	orr.w	r2, r2, #1
}
 80073e8:	bc30      	pop	{r4, r5}
	SET_BIT(hi2c->CR1, I2C_CR1_PE);
 80073ea:	601a      	str	r2, [r3, #0]
}
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	02008000 	.word	0x02008000
 80073f4:	009034b6 	.word	0x009034b6

080073f8 <BSP_STM32_I2C_IsDeviceReady>:


uint8_t BSP_STM32_I2C_IsDeviceReady(I2C_TypeDef *hi2c, uint32_t device_address, uint32_t maxtrials, uint32_t timeout) {
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	uint32_t tickstart;

	__IO uint32_t trials = 0UL;
 80073fc:	2500      	movs	r5, #0
uint8_t BSP_STM32_I2C_IsDeviceReady(I2C_TypeDef *hi2c, uint32_t device_address, uint32_t maxtrials, uint32_t timeout) {
 80073fe:	b082      	sub	sp, #8
 8007400:	4617      	mov	r7, r2
 8007402:	461e      	mov	r6, r3
	__IO uint32_t trials = 0UL;
 8007404:	9501      	str	r5, [sp, #4]
uint8_t BSP_STM32_I2C_IsDeviceReady(I2C_TypeDef *hi2c, uint32_t device_address, uint32_t maxtrials, uint32_t timeout) {
 8007406:	4604      	mov	r4, r0
 8007408:	4688      	mov	r8, r1

	uint8_t tmp1;
	uint8_t tmp2;

	// No need to Check TC flag, with AUTOEND mode the stop is automatically generated. Wait until STOPF flag is set or a NACK flag is set.
	tickstart = BSP_GetTick();
 800740a:	f7fc fe85 	bl	8004118 <BSP_GetTick>

    while (trials < maxtrials) {
 800740e:	9b01      	ldr	r3, [sp, #4]
	tickstart = BSP_GetTick();
 8007410:	4605      	mov	r5, r0
    while (trials < maxtrials) {
 8007412:	429f      	cmp	r7, r3
 8007414:	d93b      	bls.n	800748e <BSP_STM32_I2C_IsDeviceReady+0x96>
		// Generate Start
		hi2c->CR2 = ((((uint32_t)(device_address) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN));
 8007416:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800741a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80074c8 <BSP_STM32_I2C_IsDeviceReady+0xd0>

	    	// Wait until STOPF flag is reset
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;

	        // Clear NACK Flag
	    	hi2c->ICR = I2C_ICR_NACKCF;
 800741e:	f04f 0a10 	mov.w	sl, #16

	        // Clear STOP Flag, auto generated with autoend
	    	hi2c->ICR = I2C_ICR_STOPCF;
 8007422:	f04f 0920 	mov.w	r9, #32
		hi2c->CR2 = ((((uint32_t)(device_address) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN));
 8007426:	ea43 0808 	orr.w	r8, r3, r8
 800742a:	f8c4 8004 	str.w	r8, [r4, #4]
		tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 800742e:	69a3      	ldr	r3, [r4, #24]
		tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8007430:	69a2      	ldr	r2, [r4, #24]
		tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8007432:	f003 0320 	and.w	r3, r3, #32
		tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8007436:	f002 0210 	and.w	r2, r2, #16
		while ((tmp1 == 0) && (tmp2 == 0)) {
 800743a:	4313      	orrs	r3, r2
 800743c:	d008      	beq.n	8007450 <BSP_STM32_I2C_IsDeviceReady+0x58>
 800743e:	e010      	b.n	8007462 <BSP_STM32_I2C_IsDeviceReady+0x6a>
			tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8007440:	69a1      	ldr	r1, [r4, #24]
			tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8007442:	69a3      	ldr	r3, [r4, #24]
			tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8007444:	f001 0120 	and.w	r1, r1, #32
			tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8007448:	f003 0310 	and.w	r3, r3, #16
		while ((tmp1 == 0) && (tmp2 == 0)) {
 800744c:	4319      	orrs	r1, r3
 800744e:	d108      	bne.n	8007462 <BSP_STM32_I2C_IsDeviceReady+0x6a>
			if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007450:	f7fc fe62 	bl	8004118 <BSP_GetTick>
 8007454:	1b40      	subs	r0, r0, r5
 8007456:	42b0      	cmp	r0, r6
 8007458:	d9f2      	bls.n	8007440 <BSP_STM32_I2C_IsDeviceReady+0x48>
 800745a:	2001      	movs	r0, #1

    // Clear STOP Flag
    hi2c->ICR = I2C_ICR_STOPCF;

    return BSP_ERROR;
}
 800745c:	b002      	add	sp, #8
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    if ((hi2c->ISR & I2C_ISR_NACKF) == 0) {
 8007462:	69a3      	ldr	r3, [r4, #24]
 8007464:	06d8      	lsls	r0, r3, #27
 8007466:	d405      	bmi.n	8007474 <BSP_STM32_I2C_IsDeviceReady+0x7c>
 8007468:	e027      	b.n	80074ba <BSP_STM32_I2C_IsDeviceReady+0xc2>
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 800746a:	f7fc fe55 	bl	8004118 <BSP_GetTick>
 800746e:	1b40      	subs	r0, r0, r5
 8007470:	42b0      	cmp	r0, r6
 8007472:	d8f2      	bhi.n	800745a <BSP_STM32_I2C_IsDeviceReady+0x62>
 8007474:	69a3      	ldr	r3, [r4, #24]
 8007476:	069a      	lsls	r2, r3, #26
 8007478:	d5f7      	bpl.n	800746a <BSP_STM32_I2C_IsDeviceReady+0x72>
	    	hi2c->ICR = I2C_ICR_NACKCF;
 800747a:	f8c4 a01c 	str.w	sl, [r4, #28]
	    	hi2c->ICR = I2C_ICR_STOPCF;
 800747e:	f8c4 901c 	str.w	r9, [r4, #28]
	    trials++;
 8007482:	9b01      	ldr	r3, [sp, #4]
 8007484:	3301      	adds	r3, #1
 8007486:	9301      	str	r3, [sp, #4]
    while (trials < maxtrials) {
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	42bb      	cmp	r3, r7
 800748c:	d3cd      	bcc.n	800742a <BSP_STM32_I2C_IsDeviceReady+0x32>
    hi2c->CR2 |= I2C_CR2_STOP;
 800748e:	6863      	ldr	r3, [r4, #4]
 8007490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007494:	6063      	str	r3, [r4, #4]
    while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007496:	e004      	b.n	80074a2 <BSP_STM32_I2C_IsDeviceReady+0xaa>
 8007498:	f7fc fe3e 	bl	8004118 <BSP_GetTick>
 800749c:	1b40      	subs	r0, r0, r5
 800749e:	42b0      	cmp	r0, r6
 80074a0:	d8db      	bhi.n	800745a <BSP_STM32_I2C_IsDeviceReady+0x62>
 80074a2:	69a3      	ldr	r3, [r4, #24]
 80074a4:	069b      	lsls	r3, r3, #26
 80074a6:	d5f7      	bpl.n	8007498 <BSP_STM32_I2C_IsDeviceReady+0xa0>
    hi2c->ICR = I2C_ICR_STOPCF;
 80074a8:	2320      	movs	r3, #32
    return BSP_ERROR;
 80074aa:	2001      	movs	r0, #1
    hi2c->ICR = I2C_ICR_STOPCF;
 80074ac:	61e3      	str	r3, [r4, #28]
    return BSP_ERROR;
 80074ae:	e7d5      	b.n	800745c <BSP_STM32_I2C_IsDeviceReady+0x64>
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 80074b0:	f7fc fe32 	bl	8004118 <BSP_GetTick>
 80074b4:	1b40      	subs	r0, r0, r5
 80074b6:	42b0      	cmp	r0, r6
 80074b8:	d8cf      	bhi.n	800745a <BSP_STM32_I2C_IsDeviceReady+0x62>
 80074ba:	69a3      	ldr	r3, [r4, #24]
 80074bc:	0699      	lsls	r1, r3, #26
 80074be:	d5f7      	bpl.n	80074b0 <BSP_STM32_I2C_IsDeviceReady+0xb8>
	        hi2c->ICR = I2C_ICR_STOPCF;
 80074c0:	2320      	movs	r3, #32
	        return BSP_OK;
 80074c2:	2000      	movs	r0, #0
	        hi2c->ICR = I2C_ICR_STOPCF;
 80074c4:	61e3      	str	r3, [r4, #28]
	        return BSP_OK;
 80074c6:	e7c9      	b.n	800745c <BSP_STM32_I2C_IsDeviceReady+0x64>
 80074c8:	02002000 	.word	0x02002000

080074cc <BSP_STM32_I2C_RegWrite>:


uint8_t BSP_STM32_I2C_RegWrite(I2C_TypeDef *hi2c, uint16_t DevAddress, uint8_t RegAddress, uint8_t RegValue, uint32_t Timeout) {
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	9e08      	ldr	r6, [sp, #32]
 80074d2:	4604      	mov	r4, r0
 80074d4:	460f      	mov	r7, r1
 80074d6:	4690      	mov	r8, r2
 80074d8:	4699      	mov	r9, r3

	uint32_t tickstart = BSP_GetTick();
 80074da:	f7fc fe1d 	bl	8004118 <BSP_GetTick>
 80074de:	4605      	mov	r5, r0
	uint32_t tmp;

	// Wait for BUSY flag to reset
	while ((hi2c->ISR & I2C_ISR_BUSY) > 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 80074e0:	e005      	b.n	80074ee <BSP_STM32_I2C_RegWrite+0x22>
 80074e2:	f7fc fe19 	bl	8004118 <BSP_GetTick>
 80074e6:	eba0 0c05 	sub.w	ip, r0, r5
 80074ea:	45b4      	cmp	ip, r6
 80074ec:	d832      	bhi.n	8007554 <BSP_STM32_I2C_RegWrite+0x88>
 80074ee:	69a3      	ldr	r3, [r4, #24]
 80074f0:	0418      	lsls	r0, r3, #16
 80074f2:	d4f6      	bmi.n	80074e2 <BSP_STM32_I2C_RegWrite+0x16>

	// Config transfer
	tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)2 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)I2C_GENERATE_START_WRITE) & (~0x80000000U));
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80074f4:	6863      	ldr	r3, [r4, #4]
	tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)2 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)I2C_GENERATE_START_WRITE) & (~0x80000000U));
 80074f6:	f3c7 0709 	ubfx	r7, r7, #0, #10
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80074fa:	4a18      	ldr	r2, [pc, #96]	; (800755c <BSP_STM32_I2C_RegWrite+0x90>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	431f      	orrs	r7, r3
 8007500:	4b17      	ldr	r3, [pc, #92]	; (8007560 <BSP_STM32_I2C_RegWrite+0x94>)
 8007502:	433b      	orrs	r3, r7
 8007504:	6063      	str	r3, [r4, #4]

	while ((hi2c->ISR & I2C_ISR_TXIS) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8007506:	e004      	b.n	8007512 <BSP_STM32_I2C_RegWrite+0x46>
 8007508:	f7fc fe06 	bl	8004118 <BSP_GetTick>
 800750c:	1b40      	subs	r0, r0, r5
 800750e:	42b0      	cmp	r0, r6
 8007510:	d820      	bhi.n	8007554 <BSP_STM32_I2C_RegWrite+0x88>
 8007512:	69a3      	ldr	r3, [r4, #24]
 8007514:	0799      	lsls	r1, r3, #30
 8007516:	d5f7      	bpl.n	8007508 <BSP_STM32_I2C_RegWrite+0x3c>

	hi2c->TXDR = RegAddress;
 8007518:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28

	while ((hi2c->ISR & I2C_ISR_TXIS) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 800751c:	e004      	b.n	8007528 <BSP_STM32_I2C_RegWrite+0x5c>
 800751e:	f7fc fdfb 	bl	8004118 <BSP_GetTick>
 8007522:	1b40      	subs	r0, r0, r5
 8007524:	42b0      	cmp	r0, r6
 8007526:	d815      	bhi.n	8007554 <BSP_STM32_I2C_RegWrite+0x88>
 8007528:	69a3      	ldr	r3, [r4, #24]
 800752a:	079a      	lsls	r2, r3, #30
 800752c:	d5f7      	bpl.n	800751e <BSP_STM32_I2C_RegWrite+0x52>

	hi2c->TXDR = RegValue;
 800752e:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28

	//while ((hi2c->ISR & I2C_FLAG_TCR) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;

	// Wait for Stop flag
	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8007532:	e004      	b.n	800753e <BSP_STM32_I2C_RegWrite+0x72>
 8007534:	f7fc fdf0 	bl	8004118 <BSP_GetTick>
 8007538:	1b40      	subs	r0, r0, r5
 800753a:	42b0      	cmp	r0, r6
 800753c:	d80a      	bhi.n	8007554 <BSP_STM32_I2C_RegWrite+0x88>
 800753e:	69a3      	ldr	r3, [r4, #24]
 8007540:	069b      	lsls	r3, r3, #26
 8007542:	d5f7      	bpl.n	8007534 <BSP_STM32_I2C_RegWrite+0x68>

	// Clear Stop Flag
	hi2c->ICR = I2C_ICR_STOPCF;
 8007544:	2320      	movs	r3, #32

	hi2c->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD  | I2C_CR2_RD_WRN));
 8007546:	4a07      	ldr	r2, [pc, #28]	; (8007564 <BSP_STM32_I2C_RegWrite+0x98>)


	return BSP_OK;
 8007548:	2000      	movs	r0, #0
	hi2c->ICR = I2C_ICR_STOPCF;
 800754a:	61e3      	str	r3, [r4, #28]
	hi2c->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD  | I2C_CR2_RD_WRN));
 800754c:	6863      	ldr	r3, [r4, #4]
 800754e:	4013      	ands	r3, r2
 8007550:	6063      	str	r3, [r4, #4]
	return BSP_OK;
 8007552:	e000      	b.n	8007556 <BSP_STM32_I2C_RegWrite+0x8a>
	while ((hi2c->ISR & I2C_ISR_BUSY) > 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8007554:	2001      	movs	r0, #1
}
 8007556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755a:	bf00      	nop
 800755c:	fc009800 	.word	0xfc009800
 8007560:	02022000 	.word	0x02022000
 8007564:	fe00e800 	.word	0xfe00e800

08007568 <BSP_STM32_I2C_MemRead>:


uint8_t BSP_STM32_I2C_MemRead(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	4605      	mov	r5, r0
	switch (ctx->dma_mode) {
 800756c:	6808      	ldr	r0, [r1, #0]
uint8_t BSP_STM32_I2C_MemRead(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 800756e:	4614      	mov	r4, r2
 8007570:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8007574:	9a06      	ldr	r2, [sp, #24]
	switch (ctx->dma_mode) {
 8007576:	b320      	cbz	r0, 80075c2 <BSP_STM32_I2C_MemRead+0x5a>
 8007578:	f100 3cff 	add.w	ip, r0, #4294967295
 800757c:	f1bc 0f01 	cmp.w	ip, #1
 8007580:	d81f      	bhi.n	80075c2 <BSP_STM32_I2C_MemRead+0x5a>
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 8007582:	f04f 3cff 	mov.w	ip, #4294967295
 8007586:	4f1c      	ldr	r7, [pc, #112]	; (80075f8 <BSP_STM32_I2C_MemRead+0x90>)
	switch (ctx->dma_mode) {
 8007588:	2802      	cmp	r0, #2
	i2c_ctx->devaddr = DevAddress;
 800758a:	638c      	str	r4, [r1, #56]	; 0x38
		BSP_BDMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 800758c:	4608      	mov	r0, r1
	i2c_ctx->size = Size;
 800758e:	e9c1 260a 	strd	r2, r6, [r1, #40]	; 0x28
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 8007592:	e9c1 c70c 	strd	ip, r7, [r1, #48]	; 0x30
	hi2c->TXDR = MemAddress;
 8007596:	62ab      	str	r3, [r5, #40]	; 0x28
		BSP_BDMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 8007598:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800759c:	4633      	mov	r3, r6
	switch (ctx->dma_mode) {
 800759e:	d028      	beq.n	80075f2 <BSP_STM32_I2C_MemRead+0x8a>
		BSP_STM32_DMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 80075a0:	f7fe fb6a 	bl	8005c78 <BSP_STM32_DMA_StartIT>
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80075a4:	686b      	ldr	r3, [r5, #4]
	uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | ((1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE) & (~0x80000000U));
 80075a6:	f3c4 0409 	ubfx	r4, r4, #0, #10
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80075aa:	4a14      	ldr	r2, [pc, #80]	; (80075fc <BSP_STM32_I2C_MemRead+0x94>)
	case TXRX_CTX_MODE_DMA:
	case TXRX_CTX_MODE_BDMA:
		return _I2C_MemReadDMA(hi2c, ctx, DevAddress, MemAddress, pData, Size);
	}
	return _I2C_MemReadIT(hi2c, ctx, DevAddress, MemAddress, pData, Size);
}
 80075ac:	2000      	movs	r0, #0
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80075ae:	4013      	ands	r3, r2
 80075b0:	431c      	orrs	r4, r3
 80075b2:	f444 3490 	orr.w	r4, r4, #73728	; 0x12000
 80075b6:	606c      	str	r4, [r5, #4]
	hi2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_TCIE | I2C_CR1_STOPIE | I2C_CR1_NACKIE | I2C_CR1_TXIE;
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80075be:	602b      	str	r3, [r5, #0]
}
 80075c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	i2c_ctx->size = Size;
 80075c2:	e9c1 260a 	strd	r2, r6, [r1, #40]	; 0x28
	i2c_ctx->index = 0xFFFFFFFFU;
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
	i2c_ctx->devaddr = DevAddress;
 80075ca:	638c      	str	r4, [r1, #56]	; 0x38
	uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | ((1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE) & (~0x80000000U));
 80075cc:	f3c4 0409 	ubfx	r4, r4, #0, #10
}
 80075d0:	2000      	movs	r0, #0
	i2c_ctx->index = 0xFFFFFFFFU;
 80075d2:	630a      	str	r2, [r1, #48]	; 0x30
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 80075d4:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <BSP_STM32_I2C_MemRead+0x90>)
 80075d6:	634a      	str	r2, [r1, #52]	; 0x34
	hi2c->TXDR = MemAddress;
 80075d8:	62ab      	str	r3, [r5, #40]	; 0x28
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80075da:	4a08      	ldr	r2, [pc, #32]	; (80075fc <BSP_STM32_I2C_MemRead+0x94>)
 80075dc:	686b      	ldr	r3, [r5, #4]
 80075de:	4013      	ands	r3, r2
 80075e0:	431c      	orrs	r4, r3
 80075e2:	f444 3490 	orr.w	r4, r4, #73728	; 0x12000
 80075e6:	606c      	str	r4, [r5, #4]
	hi2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_TCIE | I2C_CR1_STOPIE | I2C_CR1_NACKIE | I2C_CR1_TXIE | I2C_CR1_RXIE;
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	f043 03f6 	orr.w	r3, r3, #246	; 0xf6
 80075ee:	602b      	str	r3, [r5, #0]
}
 80075f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BSP_BDMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 80075f2:	f7fe f821 	bl	8005638 <BSP_BDMA_StartIT>
		break;
 80075f6:	e7d5      	b.n	80075a4 <BSP_STM32_I2C_MemRead+0x3c>
 80075f8:	ffff0000 	.word	0xffff0000
 80075fc:	fc009800 	.word	0xfc009800

08007600 <BSP_STM32_I2C_IRQHandler>:


uint8_t BSP_STM32_I2C_IRQHandler(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
	switch (ctx->dma_mode) {
 8007600:	680a      	ldr	r2, [r1, #0]
uint8_t BSP_STM32_I2C_IRQHandler(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
 8007602:	4603      	mov	r3, r0
 8007604:	b470      	push	{r4, r5, r6}
	switch (ctx->dma_mode) {
 8007606:	b332      	cbz	r2, 8007656 <BSP_STM32_I2C_IRQHandler+0x56>
 8007608:	3a01      	subs	r2, #1
 800760a:	2a01      	cmp	r2, #1
 800760c:	d834      	bhi.n	8007678 <BSP_STM32_I2C_IRQHandler+0x78>
	uint32_t itflags   = hi2c->ISR;
 800760e:	6982      	ldr	r2, [r0, #24]
	uint32_t itsources = hi2c->CR1;
 8007610:	6800      	ldr	r0, [r0, #0]
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 8007612:	06d5      	lsls	r5, r2, #27
 8007614:	d501      	bpl.n	800761a <BSP_STM32_I2C_IRQHandler+0x1a>
 8007616:	06c4      	lsls	r4, r0, #27
 8007618:	d434      	bmi.n	8007684 <BSP_STM32_I2C_IRQHandler+0x84>
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 800761a:	0656      	lsls	r6, r2, #25
 800761c:	d514      	bpl.n	8007648 <BSP_STM32_I2C_IRQHandler+0x48>
 800761e:	0645      	lsls	r5, r0, #25
 8007620:	d512      	bpl.n	8007648 <BSP_STM32_I2C_IRQHandler+0x48>
		uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007622:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8007624:	6acc      	ldr	r4, [r1, #44]	; 0x2c
		MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007626:	685e      	ldr	r6, [r3, #4]
		uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007628:	0421      	lsls	r1, r4, #16
 800762a:	f3c5 0409 	ubfx	r4, r5, #0, #10
		MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800762e:	4d42      	ldr	r5, [pc, #264]	; (8007738 <BSP_STM32_I2C_IRQHandler+0x138>)
		uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007630:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007634:	4035      	ands	r5, r6
 8007636:	4329      	orrs	r1, r5
 8007638:	4321      	orrs	r1, r4
 800763a:	4c40      	ldr	r4, [pc, #256]	; (800773c <BSP_STM32_I2C_IRQHandler+0x13c>)
 800763c:	430c      	orrs	r4, r1
 800763e:	605c      	str	r4, [r3, #4]
		hi2c->CR1 |= I2C_CR1_RXDMAEN;
 8007640:	6819      	ldr	r1, [r3, #0]
 8007642:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007646:	6019      	str	r1, [r3, #0]
	if (((itflags & I2C_ISR_STOPF) > 0) && ((itsources & I2C_CR1_STOPIE) > 0)) {
 8007648:	0691      	lsls	r1, r2, #26
 800764a:	d501      	bpl.n	8007650 <BSP_STM32_I2C_IRQHandler+0x50>
 800764c:	0682      	lsls	r2, r0, #26
 800764e:	d40e      	bmi.n	800766e <BSP_STM32_I2C_IRQHandler+0x6e>
	return BSP_BUSY;
 8007650:	2002      	movs	r0, #2
	case TXRX_CTX_MODE_DMA:
	case TXRX_CTX_MODE_BDMA:
		return _I2C_IRQHandler_DMA(hi2c, ctx);
	}
	return _I2C_IRQHandler_IT(hi2c, ctx);
}
 8007652:	bc70      	pop	{r4, r5, r6}
 8007654:	4770      	bx	lr
	uint32_t itflags   = hi2c->ISR;
 8007656:	6980      	ldr	r0, [r0, #24]
	uint32_t itsources = hi2c->CR1;
 8007658:	681c      	ldr	r4, [r3, #0]
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 800765a:	06c6      	lsls	r6, r0, #27
 800765c:	d43f      	bmi.n	80076de <BSP_STM32_I2C_IRQHandler+0xde>
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 800765e:	0645      	lsls	r5, r0, #25
 8007660:	d452      	bmi.n	8007708 <BSP_STM32_I2C_IRQHandler+0x108>
	if (((itflags & I2C_ISR_RXNE) > 0) && ((itsources & I2C_CR1_RXIE) > 0)) {
 8007662:	0746      	lsls	r6, r0, #29
 8007664:	d444      	bmi.n	80076f0 <BSP_STM32_I2C_IRQHandler+0xf0>
	if (((itflags & I2C_ISR_STOPF) > 0) && ((itsources & I2C_CR1_STOPIE) > 0)) {
 8007666:	0682      	lsls	r2, r0, #26
 8007668:	d5f2      	bpl.n	8007650 <BSP_STM32_I2C_IRQHandler+0x50>
 800766a:	06a6      	lsls	r6, r4, #26
 800766c:	d5f0      	bpl.n	8007650 <BSP_STM32_I2C_IRQHandler+0x50>
		hi2c->ICR = I2C_ICR_STOPCF;
 800766e:	2220      	movs	r2, #32
		return BSP_OK;
 8007670:	2000      	movs	r0, #0
}
 8007672:	bc70      	pop	{r4, r5, r6}
		hi2c->ICR = I2C_ICR_STOPCF;
 8007674:	61da      	str	r2, [r3, #28]
}
 8007676:	4770      	bx	lr
	uint32_t itflags   = hi2c->ISR;
 8007678:	6982      	ldr	r2, [r0, #24]
	uint32_t itsources = hi2c->CR1;
 800767a:	6800      	ldr	r0, [r0, #0]
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 800767c:	06d4      	lsls	r4, r2, #27
 800767e:	d50d      	bpl.n	800769c <BSP_STM32_I2C_IRQHandler+0x9c>
 8007680:	06c6      	lsls	r6, r0, #27
 8007682:	d50b      	bpl.n	800769c <BSP_STM32_I2C_IRQHandler+0x9c>
	    hi2c->ICR = I2C_ICR_NACKCF;
 8007684:	2210      	movs	r2, #16
 8007686:	61da      	str	r2, [r3, #28]
	    if ((hi2c->ISR & I2C_ISR_TXIS) > 0) hi2c->TXDR = 0x00U;
 8007688:	699a      	ldr	r2, [r3, #24]
 800768a:	0795      	lsls	r5, r2, #30
 800768c:	d501      	bpl.n	8007692 <BSP_STM32_I2C_IRQHandler+0x92>
 800768e:	2200      	movs	r2, #0
 8007690:	629a      	str	r2, [r3, #40]	; 0x28
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 8007692:	699a      	ldr	r2, [r3, #24]
 8007694:	07d6      	lsls	r6, r2, #31
 8007696:	d549      	bpl.n	800772c <BSP_STM32_I2C_IRQHandler+0x12c>
	    return BSP_ERROR;
 8007698:	2001      	movs	r0, #1
 800769a:	e7da      	b.n	8007652 <BSP_STM32_I2C_IRQHandler+0x52>
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 800769c:	0654      	lsls	r4, r2, #25
 800769e:	d510      	bpl.n	80076c2 <BSP_STM32_I2C_IRQHandler+0xc2>
 80076a0:	0646      	lsls	r6, r0, #25
 80076a2:	d50e      	bpl.n	80076c2 <BSP_STM32_I2C_IRQHandler+0xc2>
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80076a4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076a6:	685d      	ldr	r5, [r3, #4]
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80076a8:	0424      	lsls	r4, r4, #16
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076aa:	4e23      	ldr	r6, [pc, #140]	; (8007738 <BSP_STM32_I2C_IRQHandler+0x138>)
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80076ac:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076b0:	4035      	ands	r5, r6
 80076b2:	432c      	orrs	r4, r5
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80076b4:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80076b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076ba:	432c      	orrs	r4, r5
 80076bc:	4d1f      	ldr	r5, [pc, #124]	; (800773c <BSP_STM32_I2C_IRQHandler+0x13c>)
 80076be:	4325      	orrs	r5, r4
 80076c0:	605d      	str	r5, [r3, #4]
	if (((itflags & I2C_ISR_RXNE) > 0) && ((itsources & I2C_CR1_RXIE) > 0)) {
 80076c2:	0755      	lsls	r5, r2, #29
 80076c4:	d5c0      	bpl.n	8007648 <BSP_STM32_I2C_IRQHandler+0x48>
 80076c6:	0744      	lsls	r4, r0, #29
 80076c8:	d5be      	bpl.n	8007648 <BSP_STM32_I2C_IRQHandler+0x48>
	    *i2c_ctx->pData = (uint8_t)hi2c->RXDR;
 80076ca:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80076cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80076ce:	7025      	strb	r5, [r4, #0]
	    i2c_ctx->pData++;
 80076d0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80076d2:	3401      	adds	r4, #1
 80076d4:	628c      	str	r4, [r1, #40]	; 0x28
	    i2c_ctx->size--;
 80076d6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80076d8:	3c01      	subs	r4, #1
 80076da:	62cc      	str	r4, [r1, #44]	; 0x2c
 80076dc:	e7b4      	b.n	8007648 <BSP_STM32_I2C_IRQHandler+0x48>
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 80076de:	06e5      	lsls	r5, r4, #27
 80076e0:	d5bd      	bpl.n	800765e <BSP_STM32_I2C_IRQHandler+0x5e>
	    hi2c->ICR = I2C_ICR_NACKCF;
 80076e2:	2110      	movs	r1, #16
 80076e4:	61d9      	str	r1, [r3, #28]
	    if ((hi2c->ISR & I2C_ISR_TXIS) > 0) hi2c->TXDR = 0x00U;
 80076e6:	6999      	ldr	r1, [r3, #24]
 80076e8:	0789      	lsls	r1, r1, #30
 80076ea:	d5d2      	bpl.n	8007692 <BSP_STM32_I2C_IRQHandler+0x92>
 80076ec:	629a      	str	r2, [r3, #40]	; 0x28
 80076ee:	e7d0      	b.n	8007692 <BSP_STM32_I2C_IRQHandler+0x92>
	if (((itflags & I2C_ISR_RXNE) > 0) && ((itsources & I2C_CR1_RXIE) > 0)) {
 80076f0:	0765      	lsls	r5, r4, #29
 80076f2:	d5b8      	bpl.n	8007666 <BSP_STM32_I2C_IRQHandler+0x66>
	    *i2c_ctx->pData = (uint8_t)hi2c->RXDR;
 80076f4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80076f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80076f8:	7015      	strb	r5, [r2, #0]
	    i2c_ctx->pData++;
 80076fa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80076fc:	3201      	adds	r2, #1
 80076fe:	628a      	str	r2, [r1, #40]	; 0x28
	    i2c_ctx->size--;
 8007700:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007702:	3a01      	subs	r2, #1
 8007704:	62ca      	str	r2, [r1, #44]	; 0x2c
 8007706:	e7ae      	b.n	8007666 <BSP_STM32_I2C_IRQHandler+0x66>
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 8007708:	0662      	lsls	r2, r4, #25
 800770a:	d5aa      	bpl.n	8007662 <BSP_STM32_I2C_IRQHandler+0x62>
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 800770c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800770e:	685d      	ldr	r5, [r3, #4]
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007710:	0412      	lsls	r2, r2, #16
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007712:	4e09      	ldr	r6, [pc, #36]	; (8007738 <BSP_STM32_I2C_IRQHandler+0x138>)
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007714:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007718:	4035      	ands	r5, r6
 800771a:	432a      	orrs	r2, r5
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 800771c:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800771e:	f3c5 0509 	ubfx	r5, r5, #0, #10
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007722:	432a      	orrs	r2, r5
 8007724:	4d05      	ldr	r5, [pc, #20]	; (800773c <BSP_STM32_I2C_IRQHandler+0x13c>)
 8007726:	4315      	orrs	r5, r2
 8007728:	605d      	str	r5, [r3, #4]
 800772a:	e79a      	b.n	8007662 <BSP_STM32_I2C_IRQHandler+0x62>
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 800772c:	699a      	ldr	r2, [r3, #24]
	    return BSP_ERROR;
 800772e:	2001      	movs	r0, #1
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 8007730:	4302      	orrs	r2, r0
 8007732:	619a      	str	r2, [r3, #24]
 8007734:	e78d      	b.n	8007652 <BSP_STM32_I2C_IRQHandler+0x52>
 8007736:	bf00      	nop
 8007738:	fc009800 	.word	0xfc009800
 800773c:	02002400 	.word	0x02002400

08007740 <BSP_STM32_I2S_IRQHandler>:
	return BSP_OK;
}



uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 8007740:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}

	I2SContext_TypeDef * i2s_ctx = (I2SContext_TypeDef *)ctx->ctxmem;

	uint32_t	reg_ier = hi2s->IER;
 8007744:	6904      	ldr	r4, [r0, #16]
uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 8007746:	4689      	mov	r9, r1
	uint32_t	reg_sr = hi2s->SR;
 8007748:	6943      	ldr	r3, [r0, #20]
uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 800774a:	b082      	sub	sp, #8
	// Callback management
	void (* pCallback_TE)(TxRxContext_TypeDef * ctx);
	void (* pCallback_HT)(TxRxContext_TypeDef * ctx);
	void (* pCallback_TC)(TxRxContext_TypeDef * ctx);

	pCallback_TE = (void *)ctx->callback_TE;
 800774c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 800774e:	4605      	mov	r5, r0
	uint32_t	trigger = reg_ier & reg_sr;
 8007750:	401c      	ands	r4, r3
	pCallback_TC = (void *)ctx->callback_TC;

	__IO int16_t *ptxdr = (__IO int16_t *)(&(hi2s->TXDR));

	// TX Mode
	if (((trigger & I2S_FLAG_TXP) == I2S_FLAG_TXP) && ((trigger & I2S_FLAG_UDR)== 0)) {
 8007752:	f004 0322 	and.w	r3, r4, #34	; 0x22
 8007756:	2b02      	cmp	r3, #2
	pCallback_TC = (void *)ctx->callback_TC;
 8007758:	e9d1 7107 	ldrd	r7, r1, [r1, #28]
	if (((trigger & I2S_FLAG_TXP) == I2S_FLAG_TXP) && ((trigger & I2S_FLAG_UDR)== 0)) {
 800775c:	d006      	beq.n	800776c <BSP_STM32_I2S_IRQHandler+0x2c>
			if (ctx->callback_TC > 0) pCallback_TC(ctx);
		}
	}

	// Underrun error
	if ((trigger & I2S_FLAG_UDR) == I2S_FLAG_UDR) {
 800775e:	f014 0420 	ands.w	r4, r4, #32
 8007762:	d12b      	bne.n	80077bc <BSP_STM32_I2S_IRQHandler+0x7c>
		// Execute error callback if set
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
		return BSP_ERROR;
	}

	return BSP_OK;
 8007764:	4620      	mov	r0, r4
}
 8007766:	b002      	add	sp, #8
 8007768:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
		*ptxdr = *i2s_ctx->pData;
 800776c:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
		i2s_ctx->index+=2;
 8007770:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
		*ptxdr = *i2s_ctx->pData;
 8007774:	f932 0b02 	ldrsh.w	r0, [r2], #2
		i2s_ctx->index+=2;
 8007778:	3302      	adds	r3, #2
		*ptxdr = *i2s_ctx->pData;
 800777a:	8428      	strh	r0, [r5, #32]
		i2s_ctx->pData++;
 800777c:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
		if (i2s_ctx->index == (i2s_ctx->size >> 1)) {
 8007780:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
		i2s_ctx->index+=2;
 8007784:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
			 if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8007788:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800778c:	d106      	bne.n	800779c <BSP_STM32_I2S_IRQHandler+0x5c>
 800778e:	b12f      	cbz	r7, 800779c <BSP_STM32_I2S_IRQHandler+0x5c>
 8007790:	4648      	mov	r0, r9
 8007792:	9101      	str	r1, [sp, #4]
 8007794:	47b8      	blx	r7
		if (i2s_ctx->index >= i2s_ctx->size) {
 8007796:	9901      	ldr	r1, [sp, #4]
 8007798:	e9d9 230b 	ldrd	r2, r3, [r9, #44]	; 0x2c
 800779c:	429a      	cmp	r2, r3
 800779e:	d8de      	bhi.n	800775e <BSP_STM32_I2S_IRQHandler+0x1e>
			hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 80077a0:	692b      	ldr	r3, [r5, #16]
 80077a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077a6:	612b      	str	r3, [r5, #16]
			i2s_ctx->status = I2S_STATUS_READY;
 80077a8:	2300      	movs	r3, #0
 80077aa:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
			if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80077ae:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0d3      	beq.n	800775e <BSP_STM32_I2S_IRQHandler+0x1e>
 80077b6:	4648      	mov	r0, r9
 80077b8:	4788      	blx	r1
 80077ba:	e7d0      	b.n	800775e <BSP_STM32_I2S_IRQHandler+0x1e>
		hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 80077bc:	692b      	ldr	r3, [r5, #16]
		i2s_ctx->status = I2S_STATUS_READY;
 80077be:	2200      	movs	r2, #0
		hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 80077c0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077c4:	612b      	str	r3, [r5, #16]
		hi2s->IFCR |= I2S_FLAG_UDR;
 80077c6:	69ab      	ldr	r3, [r5, #24]
 80077c8:	f043 0320 	orr.w	r3, r3, #32
 80077cc:	61ab      	str	r3, [r5, #24]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80077ce:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
		i2s_ctx->status = I2S_STATUS_READY;
 80077d2:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80077d6:	b12b      	cbz	r3, 80077e4 <BSP_STM32_I2S_IRQHandler+0xa4>
 80077d8:	4648      	mov	r0, r9
 80077da:	47b0      	blx	r6
		return BSP_ERROR;
 80077dc:	2001      	movs	r0, #1
}
 80077de:	b002      	add	sp, #8
 80077e0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
		return BSP_ERROR;
 80077e4:	2001      	movs	r0, #1
}
 80077e6:	b002      	add	sp, #8
 80077e8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

080077ec <BSP_STM32_JPEG_Init>:

	return BSP_BUSY;
}


uint8_t BSP_STM32_JPEG_Init(JPEG_TypeDef * _hjpeg) {
 80077ec:	4603      	mov	r3, r0

	// Enable header processing
	_hjpeg->CONFR1 |= JPEG_CONFR1_HDR;

	return BSP_OK;
}
 80077ee:	2000      	movs	r0, #0
	_hjpeg->CR |=  JPEG_CR_JCEN;
 80077f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	f022 0201 	bic.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]
	MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 8007800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007802:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_IFF;
 8007808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800780e:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_OFF;
 8007810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 8007818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800781a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
	_hjpeg->CONFR1 |= JPEG_CONFR1_HDR;
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007826:	605a      	str	r2, [r3, #4]
}
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop

0800782c <BSP_STM32_JPEG_Decode>:

uint8_t BSP_STM32_JPEG_Decode(JPEG_TypeDef * _hjpeg, uint32_t JPEG_Addr, uint32_t JPEG_Size, uint32_t OutputBuf_Addr, uint32_t OutputBuf_Size) {
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_hjpeg->CONFR1 |= JPEG_CONFR1_DE;
 8007830:	6845      	ldr	r5, [r0, #4]
	JPEGctx.CSSType = 0;
 8007832:	2700      	movs	r7, #0
uint8_t BSP_STM32_JPEG_Decode(JPEG_TypeDef * _hjpeg, uint32_t JPEG_Addr, uint32_t JPEG_Size, uint32_t OutputBuf_Addr, uint32_t OutputBuf_Size) {
 8007834:	9c06      	ldr	r4, [sp, #24]
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007836:	f04f 0e01 	mov.w	lr, #1
	_hjpeg->CONFR1 |= JPEG_CONFR1_DE;
 800783a:	f045 0508 	orr.w	r5, r5, #8
	return BSP_OK;
 800783e:	463e      	mov	r6, r7
 8007840:	46bc      	mov	ip, r7
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 8007842:	46b8      	mov	r8, r7
	_hjpeg->CONFR1 |= JPEG_CONFR1_DE;
 8007844:	6045      	str	r5, [r0, #4]
	_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 8007846:	6805      	ldr	r5, [r0, #0]
 8007848:	f025 0501 	bic.w	r5, r5, #1
 800784c:	6005      	str	r5, [r0, #0]
	MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 800784e:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8007850:	f025 057e 	bic.w	r5, r5, #126	; 0x7e
 8007854:	6305      	str	r5, [r0, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_IFF;
 8007856:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8007858:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 800785c:	6305      	str	r5, [r0, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_OFF;
 800785e:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8007860:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8007864:	6305      	str	r5, [r0, #48]	; 0x30
	_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 8007866:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8007868:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 800786c:	6385      	str	r5, [r0, #56]	; 0x38
	_hjpeg->CONFR0 |=  JPEG_CONFR0_START;
 800786e:	6805      	ldr	r5, [r0, #0]
 8007870:	f045 0501 	orr.w	r5, r5, #1
 8007874:	6005      	str	r5, [r0, #0]
	JPEGctx.CSSType = 0;
 8007876:	4d54      	ldr	r5, [pc, #336]	; (80079c8 <BSP_STM32_JPEG_Decode+0x19c>)
 8007878:	e9c5 4704 	strd	r4, r7, [r5, #16]
	JPEGctx.JPEGEnd = JPEG_Addr + JPEG_Size;
 800787c:	188c      	adds	r4, r1, r2
	JPEGctx.ColorSpace = 0;
 800787e:	61af      	str	r7, [r5, #24]
	JPEGctx.ImageWidth = 0;
 8007880:	e9c5 7707 	strd	r7, r7, [r5, #28]
	JPEGctx.JPEGSize = JPEG_Size;
 8007884:	e9c5 1200 	strd	r1, r2, [r5]
	JPEGctx.JPEGEnd = JPEG_Addr + JPEG_Size;
 8007888:	e9c5 4302 	strd	r4, r3, [r5, #8]
	if ((_hjpeg->SR) & JPEG_FLAG_HPDF) {
 800788c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800788e:	0652      	lsls	r2, r2, #25
 8007890:	d516      	bpl.n	80078c0 <BSP_STM32_JPEG_Decode+0x94>
		switch ((_hjpeg->CONFR1 & JPEG_CONFR1_NF)) {
 8007892:	6842      	ldr	r2, [r0, #4]
 8007894:	f002 0203 	and.w	r2, r2, #3
 8007898:	2a02      	cmp	r2, #2
 800789a:	d05a      	beq.n	8007952 <BSP_STM32_JPEG_Decode+0x126>
 800789c:	2a03      	cmp	r2, #3
 800789e:	d040      	beq.n	8007922 <BSP_STM32_JPEG_Decode+0xf6>
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	d033      	beq.n	800790c <BSP_STM32_JPEG_Decode+0xe0>

	// Decode process
	while (_JPEG_DecProcess(_hjpeg) == BSP_BUSY) {};

	return BSP_OK;
}
 80078a4:	2000      	movs	r0, #0
 80078a6:	f8c5 c018 	str.w	ip, [r5, #24]
 80078aa:	6029      	str	r1, [r5, #0]
 80078ac:	60eb      	str	r3, [r5, #12]
	return BSP_OK;
 80078ae:	e9c5 6707 	strd	r6, r7, [r5, #28]
}
 80078b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while ((((_hjpeg->SR) & JPEG_FLAG_IFNFF) > 0) && (JPEGctx.JPEGAddr < JPEGctx.JPEGEnd)) {
 80078b6:	42a1      	cmp	r1, r4
 80078b8:	d20b      	bcs.n	80078d2 <BSP_STM32_JPEG_Decode+0xa6>
		_hjpeg->DIR = *((uint32_t *)JPEGctx.JPEGAddr);
 80078ba:	f851 2b04 	ldr.w	r2, [r1], #4
 80078be:	6402      	str	r2, [r0, #64]	; 0x40
	while ((((_hjpeg->SR) & JPEG_FLAG_IFNFF) > 0) && (JPEGctx.JPEGAddr < JPEGctx.JPEGEnd)) {
 80078c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80078c2:	0752      	lsls	r2, r2, #29
 80078c4:	d4f7      	bmi.n	80078b6 <BSP_STM32_JPEG_Decode+0x8a>
	while ((_hjpeg->SR) & JPEG_FLAG_OFNEF) {
 80078c6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80078c8:	06d2      	lsls	r2, r2, #27
 80078ca:	d505      	bpl.n	80078d8 <BSP_STM32_JPEG_Decode+0xac>
		*((uint32_t *)JPEGctx.OutputBufAddr) = _hjpeg->DOR;
 80078cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078ce:	f843 2b04 	str.w	r2, [r3], #4
	while ((_hjpeg->SR) & JPEG_FLAG_OFNEF) {
 80078d2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80078d4:	06d2      	lsls	r2, r2, #27
 80078d6:	d4f9      	bmi.n	80078cc <BSP_STM32_JPEG_Decode+0xa0>
	if (((_hjpeg->SR) & (JPEG_FLAG_EOCF | JPEG_FLAG_OFNEF | JPEG_FLAG_OFTF)) == JPEG_FLAG_EOCF) {
 80078d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80078da:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80078de:	2a20      	cmp	r2, #32
 80078e0:	d1d4      	bne.n	800788c <BSP_STM32_JPEG_Decode+0x60>
		_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 80078e2:	6802      	ldr	r2, [r0, #0]
 80078e4:	60eb      	str	r3, [r5, #12]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	f8c5 c018 	str.w	ip, [r5, #24]
 80078ee:	6029      	str	r1, [r5, #0]
 80078f0:	6002      	str	r2, [r0, #0]
		MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 80078f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80078f4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80078f8:	6303      	str	r3, [r0, #48]	; 0x30
		_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 80078fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80078fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007900:	e9c5 6707 	strd	r6, r7, [r5, #28]
 8007904:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007906:	2000      	movs	r0, #0
 8007908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			JPEGctx.ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800790c:	4694      	mov	ip, r2
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 800790e:	616a      	str	r2, [r5, #20]
		JPEGctx.ImageHeight = (_hjpeg->CONFR1 & 0xFFFF0000UL) >> 16;
 8007910:	6847      	ldr	r7, [r0, #4]
		JPEGctx.ImageWidth  = (_hjpeg->CONFR3 & 0xFFFF0000UL) >> 16;
 8007912:	68c6      	ldr	r6, [r0, #12]
		_hjpeg->CFR |= JPEG_FLAG_HPDF;
 8007914:	6b82      	ldr	r2, [r0, #56]	; 0x38
		JPEGctx.ImageHeight = (_hjpeg->CONFR1 & 0xFFFF0000UL) >> 16;
 8007916:	0c3f      	lsrs	r7, r7, #16
		JPEGctx.ImageWidth  = (_hjpeg->CONFR3 & 0xFFFF0000UL) >> 16;
 8007918:	0c36      	lsrs	r6, r6, #16
		_hjpeg->CFR |= JPEG_FLAG_HPDF;
 800791a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791e:	6382      	str	r2, [r0, #56]	; 0x38
 8007920:	e7ce      	b.n	80078c0 <BSP_STM32_JPEG_Decode+0x94>
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007922:	6902      	ldr	r2, [r0, #16]
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007924:	6947      	ldr	r7, [r0, #20]
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007926:	6986      	ldr	r6, [r0, #24]
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007928:	f3c2 1203 	ubfx	r2, r2, #4, #4
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 800792c:	f017 0ff0 	tst.w	r7, #240	; 0xf0
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007930:	ea4f 1c17 	mov.w	ip, r7, lsr #4
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007934:	ea4f 1616 	mov.w	r6, r6, lsr #4
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8007938:	d123      	bne.n	8007982 <BSP_STM32_JPEG_Decode+0x156>
 800793a:	2a01      	cmp	r2, #1
 800793c:	d121      	bne.n	8007982 <BSP_STM32_JPEG_Decode+0x156>
 800793e:	f016 0f0f 	tst.w	r6, #15
			JPEGctx.ColorSpace = JPEG_CMYK_COLORSPACE;
 8007942:	f04f 0c30 	mov.w	ip, #48	; 0x30
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8007946:	bf0c      	ite	eq
 8007948:	2201      	moveq	r2, #1
 800794a:	2200      	movne	r2, #0
 800794c:	0052      	lsls	r2, r2, #1
 800794e:	616a      	str	r2, [r5, #20]
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007950:	e7de      	b.n	8007910 <BSP_STM32_JPEG_Decode+0xe4>
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007952:	6902      	ldr	r2, [r0, #16]
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007954:	6947      	ldr	r7, [r0, #20]
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007956:	6986      	ldr	r6, [r0, #24]
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007958:	f3c2 1203 	ubfx	r2, r2, #4, #4
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 800795c:	f017 0ff0 	tst.w	r7, #240	; 0xf0
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007960:	ea4f 1c17 	mov.w	ip, r7, lsr #4
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007964:	ea4f 1616 	mov.w	r6, r6, lsr #4
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8007968:	d117      	bne.n	800799a <BSP_STM32_JPEG_Decode+0x16e>
 800796a:	2a01      	cmp	r2, #1
 800796c:	d115      	bne.n	800799a <BSP_STM32_JPEG_Decode+0x16e>
 800796e:	f016 0f0f 	tst.w	r6, #15
			JPEGctx.ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007972:	f04f 0c10 	mov.w	ip, #16
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8007976:	bf0c      	ite	eq
 8007978:	2201      	moveq	r2, #1
 800797a:	2200      	movne	r2, #0
 800797c:	0052      	lsls	r2, r2, #1
 800797e:	616a      	str	r2, [r5, #20]
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007980:	e7c6      	b.n	8007910 <BSP_STM32_JPEG_Decode+0xe4>
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007982:	ea4c 0c06 	orr.w	ip, ip, r6
 8007986:	f01c 0f0f 	tst.w	ip, #15
 800798a:	d117      	bne.n	80079bc <BSP_STM32_JPEG_Decode+0x190>
 800798c:	2a03      	cmp	r2, #3
 800798e:	d115      	bne.n	80079bc <BSP_STM32_JPEG_Decode+0x190>
			JPEGctx.ColorSpace = JPEG_CMYK_COLORSPACE;
 8007990:	f04f 0c30 	mov.w	ip, #48	; 0x30
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007994:	f8c5 e014 	str.w	lr, [r5, #20]
 8007998:	e7ba      	b.n	8007910 <BSP_STM32_JPEG_Decode+0xe4>
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 800799a:	ea4c 0c06 	orr.w	ip, ip, r6
 800799e:	f01c 0f0f 	tst.w	ip, #15
 80079a2:	d106      	bne.n	80079b2 <BSP_STM32_JPEG_Decode+0x186>
 80079a4:	2a03      	cmp	r2, #3
 80079a6:	d104      	bne.n	80079b2 <BSP_STM32_JPEG_Decode+0x186>
			JPEGctx.ColorSpace = JPEG_YCBCR_COLORSPACE;
 80079a8:	f04f 0c10 	mov.w	ip, #16
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 80079ac:	f8c5 e014 	str.w	lr, [r5, #20]
 80079b0:	e7ae      	b.n	8007910 <BSP_STM32_JPEG_Decode+0xe4>
			JPEGctx.ColorSpace = JPEG_YCBCR_COLORSPACE;
 80079b2:	f04f 0c10 	mov.w	ip, #16
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 80079b6:	f8c5 8014 	str.w	r8, [r5, #20]
 80079ba:	e7a9      	b.n	8007910 <BSP_STM32_JPEG_Decode+0xe4>
			JPEGctx.ColorSpace = JPEG_CMYK_COLORSPACE;
 80079bc:	f04f 0c30 	mov.w	ip, #48	; 0x30
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 80079c0:	f8c5 8014 	str.w	r8, [r5, #20]
 80079c4:	e7a4      	b.n	8007910 <BSP_STM32_JPEG_Decode+0xe4>
 80079c6:	bf00      	nop
 80079c8:	24000494 	.word	0x24000494

080079cc <BSP_STM32_JPEG_GetWidth>:

uint32_t BSP_STM32_JPEG_GetWidth(JPEG_TypeDef * _hjpeg) {
	UNUSED(_hjpeg);

	return JPEGctx.ImageWidth;
 80079cc:	4b01      	ldr	r3, [pc, #4]	; (80079d4 <BSP_STM32_JPEG_GetWidth+0x8>)
}
 80079ce:	69d8      	ldr	r0, [r3, #28]
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	24000494 	.word	0x24000494

080079d8 <BSP_STM32_JPEG_GetHeight>:

uint32_t BSP_STM32_JPEG_GetHeight(JPEG_TypeDef * _hjpeg) {
	UNUSED(_hjpeg);

	return JPEGctx.ImageHeight;
 80079d8:	4b01      	ldr	r3, [pc, #4]	; (80079e0 <BSP_STM32_JPEG_GetHeight+0x8>)
}
 80079da:	6a18      	ldr	r0, [r3, #32]
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	24000494 	.word	0x24000494

080079e4 <BSP_STM32_JPEG_GetCSS>:

uint32_t BSP_STM32_JPEG_GetCSS(JPEG_TypeDef * _hjpeg) {
	UNUSED(_hjpeg);

	return JPEGctx.CSSType;
 80079e4:	4b01      	ldr	r3, [pc, #4]	; (80079ec <BSP_STM32_JPEG_GetCSS+0x8>)
}
 80079e6:	6958      	ldr	r0, [r3, #20]
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	24000494 	.word	0x24000494

080079f0 <BSP_STM32_JPEG_GetColorSpace>:

uint32_t BSP_STM32_JPEG_GetColorSpace(JPEG_TypeDef * _hjpeg) {
	UNUSED(_hjpeg);

	return JPEGctx.ColorSpace;
 80079f0:	4b01      	ldr	r3, [pc, #4]	; (80079f8 <BSP_STM32_JPEG_GetColorSpace+0x8>)
}
 80079f2:	6998      	ldr	r0, [r3, #24]
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	24000494 	.word	0x24000494

080079fc <BSP_STM32_LTDC_Init>:


uint8_t BSP_STM32_LTDC_Init(LTDC_TypeDef *hltdc, uint32_t lcd_h_sync, uint32_t lcd_v_sync,
		uint32_t lcd_acc_h_back_porch_width, uint32_t lcd_acc_v_back_porch_height,
		uint32_t lcd_acc_active_width, uint32_t lcd_acc_active_height,
		uint32_t lcd_total_width, uint32_t lcd_total_height, uint32_t bgcolor) {
 80079fc:	b430      	push	{r4, r5}

	// Checking if LTDC already initialized
	if (hltdc->GCR & LTDC_GCR_LTDCEN) return BSP_OK;
 80079fe:	6984      	ldr	r4, [r0, #24]
 8007a00:	07e4      	lsls	r4, r4, #31
 8007a02:	d444      	bmi.n	8007a8e <BSP_STM32_LTDC_Init+0x92>
//	BSP_Delay(1);
//	RCC->APB3RSTR &= ~RCC_APB3RSTR_LTDCRST;
//	BSP_Delay(1);

	// Setting AXI QOS to higher priority for LTDC peripheral
	GPV->AXI_INI6_READ_QOS = 1UL;
 8007a04:	2401      	movs	r4, #1
	hltdc->GCR |= (uint32_t)(LTDC_HSPOLARITY_AL | LTDC_VSPOLARITY_AL | LTDC_DEPOLARITY_AL | LTDC_PCPOLARITY_IPC);

	// Set Synchronization size
	hltdc->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
	tmp = ((lcd_h_sync) << 16U);
	hltdc->SSCR |= (tmp | (lcd_v_sync));
 8007a06:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
	GPV->AXI_INI6_READ_QOS = 1UL;
 8007a0a:	4a22      	ldr	r2, [pc, #136]	; (8007a94 <BSP_STM32_LTDC_Init+0x98>)

	// Set Accumulated Back porch
	hltdc->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
	tmp = ((lcd_acc_h_back_porch_width) << 16U);
	hltdc->BPCR |= (tmp | (lcd_acc_v_back_porch_height));
 8007a0c:	9d02      	ldr	r5, [sp, #8]
	GPV->AXI_INI6_READ_QOS = 1UL;
 8007a0e:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
	GPV->AXI_INI6_WRITE_QOS = 1UL;
 8007a12:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
	hltdc->BPCR |= (tmp | (lcd_acc_v_back_porch_height));
 8007a16:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
	hltdc->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007a1a:	6982      	ldr	r2, [r0, #24]
	hltdc->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007a1c:	4c1e      	ldr	r4, [pc, #120]	; (8007a98 <BSP_STM32_LTDC_Init+0x9c>)
	hltdc->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007a1e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007a22:	6182      	str	r2, [r0, #24]
	hltdc->GCR |= (uint32_t)(LTDC_HSPOLARITY_AL | LTDC_VSPOLARITY_AL | LTDC_DEPOLARITY_AL | LTDC_PCPOLARITY_IPC);
 8007a24:	6982      	ldr	r2, [r0, #24]
 8007a26:	6182      	str	r2, [r0, #24]
	hltdc->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007a28:	6882      	ldr	r2, [r0, #8]
 8007a2a:	4022      	ands	r2, r4
 8007a2c:	6082      	str	r2, [r0, #8]
	hltdc->SSCR |= (tmp | (lcd_v_sync));
 8007a2e:	6882      	ldr	r2, [r0, #8]
 8007a30:	4311      	orrs	r1, r2

	// Set Accumulated Active Width
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
	tmp = ((lcd_acc_active_width) << 16U);
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007a32:	e9dd 5203 	ldrd	r5, r2, [sp, #12]
	hltdc->SSCR |= (tmp | (lcd_v_sync));
 8007a36:	6081      	str	r1, [r0, #8]
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007a38:	ea42 4c05 	orr.w	ip, r2, r5, lsl #16
	hltdc->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007a3c:	68c2      	ldr	r2, [r0, #12]
 8007a3e:	4022      	ands	r2, r4
 8007a40:	60c2      	str	r2, [r0, #12]
	hltdc->BPCR |= (tmp | (lcd_acc_v_back_porch_height));
 8007a42:	68c2      	ldr	r2, [r0, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60c3      	str	r3, [r0, #12]
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a48:	6903      	ldr	r3, [r0, #16]

	// Set Total Width
	hltdc->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
	tmp = ((lcd_total_width) << 16U);
	hltdc->TWCR |= (tmp | (lcd_total_height));
 8007a4a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a4e:	4023      	ands	r3, r4
	hltdc->TWCR |= (tmp | (lcd_total_height));
 8007a50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a54:	6103      	str	r3, [r0, #16]
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007a56:	6901      	ldr	r1, [r0, #16]

	// Set the background color value
	hltdc->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
	hltdc->BCCR |= (bgcolor & 0x00FFFFFF);
 8007a58:	9b07      	ldr	r3, [sp, #28]
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007a5a:	ea4c 0101 	orr.w	r1, ip, r1
	hltdc->BCCR |= (bgcolor & 0x00FFFFFF);
 8007a5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007a62:	6101      	str	r1, [r0, #16]
	hltdc->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007a64:	6941      	ldr	r1, [r0, #20]
 8007a66:	4021      	ands	r1, r4
 8007a68:	6141      	str	r1, [r0, #20]
	hltdc->TWCR |= (tmp | (lcd_total_height));
 8007a6a:	6941      	ldr	r1, [r0, #20]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	6142      	str	r2, [r0, #20]
	hltdc->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007a70:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007a72:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007a76:	62c2      	str	r2, [r0, #44]	; 0x2c
	hltdc->BCCR |= (bgcolor & 0x00FFFFFF);
 8007a78:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	62c3      	str	r3, [r0, #44]	; 0x2c

	// Enable the Transfer Error and FIFO underrun interrupts */
	hltdc->IER |= LTDC_IER_TERRIE | LTDC_IER_FUIE;
 8007a7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a80:	f043 0306 	orr.w	r3, r3, #6
 8007a84:	6343      	str	r3, [r0, #52]	; 0x34

	// Enable LTDC by setting LTDCEN bit
	hltdc->GCR |= LTDC_GCR_LTDCEN;
 8007a86:	6983      	ldr	r3, [r0, #24]
 8007a88:	f043 0301 	orr.w	r3, r3, #1
 8007a8c:	6183      	str	r3, [r0, #24]

	return BSP_OK;
}
 8007a8e:	2000      	movs	r0, #0
 8007a90:	bc30      	pop	{r4, r5}
 8007a92:	4770      	bx	lr
 8007a94:	51047000 	.word	0x51047000
 8007a98:	f000f800 	.word	0xf000f800

08007a9c <BSP_STM32_LTDC_DisableLayer>:

uint8_t BSP_STM32_LTDC_DisableLayer(LTDC_TypeDef *hltdc, uint32_t layer) {
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007a9c:	f100 0384 	add.w	r3, r0, #132	; 0x84
 8007aa0:	ea4f 1cc1 	mov.w	ip, r1, lsl #7

	// Disable Layer
	l->CR &= ~(LTDC_LxCR_LEN | LTDC_LxCR_CLUTEN | LTDC_LxCR_COLKEN);
 8007aa4:	f853 200c 	ldr.w	r2, [r3, ip]
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007aa8:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
	l->CR &= ~(LTDC_LxCR_LEN | LTDC_LxCR_CLUTEN | LTDC_LxCR_COLKEN);
 8007aac:	f022 0213 	bic.w	r2, r2, #19
 8007ab0:	f843 200c 	str.w	r2, [r3, ip]
	l->CKCR = 0x00000000;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60cb      	str	r3, [r1, #12]

	// Set the Reload on Vertical Blank
	hltdc->SRCR |= LTDC_SRCR_VBR;
 8007ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007aba:	f043 0302 	orr.w	r3, r3, #2
 8007abe:	6243      	str	r3, [r0, #36]	; 0x24

	// Wait for layer to disable
	while (l->CR & LTDC_LxCR_LEN) {};
 8007ac0:	6808      	ldr	r0, [r1, #0]
 8007ac2:	f010 0001 	ands.w	r0, r0, #1
 8007ac6:	d1fb      	bne.n	8007ac0 <BSP_STM32_LTDC_DisableLayer+0x24>

	return BSP_OK;
}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop

08007acc <BSP_STM32_LTDC_EnableLayer>:

uint8_t BSP_STM32_LTDC_EnableLayer(LTDC_TypeDef *hltdc, uint32_t layer) {
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007acc:	f100 0384 	add.w	r3, r0, #132	; 0x84
 8007ad0:	ea4f 1cc1 	mov.w	ip, r1, lsl #7

	// Enable layer
	l->CR |= LTDC_LxCR_LEN;
 8007ad4:	f853 200c 	ldr.w	r2, [r3, ip]
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007ad8:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
	l->CR |= LTDC_LxCR_LEN;
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	f843 200c 	str.w	r2, [r3, ip]

	// Set the Reload on Vertical Blank
	hltdc->SRCR |= LTDC_SRCR_VBR;
 8007ae4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ae6:	f043 0302 	orr.w	r3, r3, #2
 8007aea:	6243      	str	r3, [r0, #36]	; 0x24

	// Wait for layer to enable
	while (!(l->CR & LTDC_LxCR_LEN)) {};
 8007aec:	680b      	ldr	r3, [r1, #0]
 8007aee:	07db      	lsls	r3, r3, #31
 8007af0:	d5fc      	bpl.n	8007aec <BSP_STM32_LTDC_EnableLayer+0x20>

	return BSP_OK;
}
 8007af2:	2000      	movs	r0, #0
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop

08007af8 <BSP_STM32_LTDC_ConfigLayer>:

uint8_t BSP_STM32_LTDC_ConfigLayer(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t alpha, uint32_t alpha0, uint32_t bgcolor,
		uint32_t blendingfactor1, uint32_t blendingfactor2, uint32_t fbstartaddress, uint32_t imgheight, uint32_t imgwidth,
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007af8:	f100 0384 	add.w	r3, r0, #132	; 0x84
 8007afc:	eb03 11c1 	add.w	r1, r3, r1, lsl #7

	// Disable Layer
	// BSP_STM32_LTDC_DisableLayer(hltdc, layer);

	// Configure the horizontal start and stop position
	tmp = ((x1 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b00:	68c3      	ldr	r3, [r0, #12]
 8007b02:	f3c3 4c0b 	ubfx	ip, r3, #16, #12
	l->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b06:	684b      	ldr	r3, [r1, #4]
 8007b08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 8007b0c:	b4f0      	push	{r4, r5, r6, r7}
 8007b0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	l->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b10:	604b      	str	r3, [r1, #4]
	l->WHPCR = ((x0 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b12:	68c4      	ldr	r4, [r0, #12]
 8007b14:	1c6e      	adds	r6, r5, #1
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 8007b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	l->WHPCR = ((x0 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b18:	f3c4 440b 	ubfx	r4, r4, #16, #12
	tmp = ((x1 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b1c:	449c      	add	ip, r3
	l->WHPCR = ((x0 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b1e:	4434      	add	r4, r6
 8007b20:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8007b24:	604c      	str	r4, [r1, #4]

	// Configure the vertical start and stop position
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b26:	68c4      	ldr	r4, [r0, #12]
	l->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b28:	688e      	ldr	r6, [r1, #8]
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b2a:	f3c4 040a 	ubfx	r4, r4, #0, #11
	l->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b2e:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 8007b32:	608e      	str	r6, [r1, #8]
	l->WVPCR  = ((y0 + (hltdc->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b34:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007b36:	68c0      	ldr	r0, [r0, #12]
 8007b38:	f106 0c01 	add.w	ip, r6, #1
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	l->WVPCR  = ((y0 + (hltdc->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b3e:	f3c0 000a 	ubfx	r0, r0, #0, #11
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b42:	4434      	add	r4, r6
	// Specifies the pixel format
	l->PFCR &= ~(LTDC_LxPFCR_PF);
	l->PFCR = pixelformat;

	// Configure the default color values
	l->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b44:	2600      	movs	r6, #0
	l->WVPCR  = ((y0 + (hltdc->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b46:	4460      	add	r0, ip
 8007b48:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8007b4c:	6088      	str	r0, [r1, #8]
	l->PFCR &= ~(LTDC_LxPFCR_PF);
 8007b4e:	6908      	ldr	r0, [r1, #16]
 8007b50:	f020 0007 	bic.w	r0, r0, #7
 8007b54:	6108      	str	r0, [r1, #16]
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 8007b56:	980a      	ldr	r0, [sp, #40]	; 0x28
	l->PFCR = pixelformat;
 8007b58:	6108      	str	r0, [r1, #16]
	l->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b5a:	698c      	ldr	r4, [r1, #24]
	l->DCCR = bgcolor;
 8007b5c:	9c04      	ldr	r4, [sp, #16]
	l->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b5e:	618e      	str	r6, [r1, #24]
	l->DCCR = bgcolor;
 8007b60:	618c      	str	r4, [r1, #24]

	// Specifies the constant alpha value
	l->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007b62:	694c      	ldr	r4, [r1, #20]
 8007b64:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 8007b68:	614c      	str	r4, [r1, #20]
	l->CACR = alpha;
 8007b6a:	614a      	str	r2, [r1, #20]

	// Specifies the blending factors
	l->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007b6c:	69cf      	ldr	r7, [r1, #28]
	l->BFCR = (blendingfactor1 | blendingfactor2);
 8007b6e:	e9dd 4205 	ldrd	r4, r2, [sp, #20]
 8007b72:	4314      	orrs	r4, r2
	l->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007b74:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <BSP_STM32_LTDC_ConfigLayer+0xd4>)
 8007b76:	403a      	ands	r2, r7
 8007b78:	61ca      	str	r2, [r1, #28]
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 8007b7a:	e9dd 2708 	ldrd	r2, r7, [sp, #32]
	l->BFCR = (blendingfactor1 | blendingfactor2);
 8007b7e:	61cc      	str	r4, [r1, #28]

	// Configure the color frame buffer start address
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007b80:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 8007b82:	9c07      	ldr	r4, [sp, #28]
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007b84:	628e      	str	r6, [r1, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 8007b86:	628c      	str	r4, [r1, #40]	; 0x28

	if (pixelformat == LTDC_PIXEL_FORMAT_ARGB8888) { tmp = 4U; }
 8007b88:	b9a0      	cbnz	r0, 8007bb4 <BSP_STM32_LTDC_ConfigLayer+0xbc>
	else if ((pixelformat == LTDC_PIXEL_FORMAT_ARGB4444) || (pixelformat == LTDC_PIXEL_FORMAT_RGB565) || (pixelformat == LTDC_PIXEL_FORMAT_ARGB1555) || (pixelformat == LTDC_PIXEL_FORMAT_AL88)) { tmp = 2U; }
	else { tmp = 1U; }

	// Configure the color frame buffer pitch in byte
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b8a:	00bf      	lsls	r7, r7, #2
	if (pixelformat == LTDC_PIXEL_FORMAT_ARGB8888) { tmp = 4U; }
 8007b8c:	2004      	movs	r0, #4
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b8e:	1b5b      	subs	r3, r3, r5

	// Configure the frame buffer line number
	l->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007b90:	4c0f      	ldr	r4, [pc, #60]	; (8007bd0 <BSP_STM32_LTDC_ConfigLayer+0xd8>)
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b92:	fb00 f303 	mul.w	r3, r0, r3
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007b96:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b98:	3307      	adds	r3, #7
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007b9a:	f000 20e0 	and.w	r0, r0, #3758153728	; 0xe000e000
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b9e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007ba2:	62c8      	str	r0, [r1, #44]	; 0x2c

	// Enable Layer
	// BSP_STM32_LTDC_EnableLayer(hltdc, layer);

	return BSP_OK;
}
 8007ba4:	2000      	movs	r0, #0
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007ba6:	62cb      	str	r3, [r1, #44]	; 0x2c
	l->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007ba8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007baa:	401c      	ands	r4, r3
 8007bac:	630c      	str	r4, [r1, #48]	; 0x30
	l->CFBLNR  = (imgheight);
 8007bae:	630a      	str	r2, [r1, #48]	; 0x30
}
 8007bb0:	bcf0      	pop	{r4, r5, r6, r7}
 8007bb2:	4770      	bx	lr
	else if (pixelformat == LTDC_PIXEL_FORMAT_RGB888) { tmp = 3U; }
 8007bb4:	3801      	subs	r0, #1
 8007bb6:	2806      	cmp	r0, #6
 8007bb8:	d901      	bls.n	8007bbe <BSP_STM32_LTDC_ConfigLayer+0xc6>
	if (pixelformat == LTDC_PIXEL_FORMAT_ARGB8888) { tmp = 4U; }
 8007bba:	2001      	movs	r0, #1
 8007bbc:	e7e7      	b.n	8007b8e <BSP_STM32_LTDC_ConfigLayer+0x96>
 8007bbe:	4c05      	ldr	r4, [pc, #20]	; (8007bd4 <BSP_STM32_LTDC_ConfigLayer+0xdc>)
 8007bc0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007bc4:	fb00 f707 	mul.w	r7, r0, r7
 8007bc8:	e7e1      	b.n	8007b8e <BSP_STM32_LTDC_ConfigLayer+0x96>
 8007bca:	bf00      	nop
 8007bcc:	fffff8f8 	.word	0xfffff8f8
 8007bd0:	fffff800 	.word	0xfffff800
 8007bd4:	080155f8 	.word	0x080155f8

08007bd8 <BSP_STM32_LTDC_UpdateFrameBufAddr>:


uint8_t BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t fbstartaddress) {

	// Updating Framebuffer address
	LTDC_Layer_TypeDef *l = ((LTDC_Layer_TypeDef *)((uint32_t)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)))));
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <BSP_STM32_LTDC_UpdateFrameBufAddr+0x20>)
uint8_t BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t fbstartaddress) {
 8007bda:	4684      	mov	ip, r0
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007bdc:	2000      	movs	r0, #0
	LTDC_Layer_TypeDef *l = ((LTDC_Layer_TypeDef *)((uint32_t)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)))));
 8007bde:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007be2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007be4:	6288      	str	r0, [r1, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 8007be6:	628a      	str	r2, [r1, #40]	; 0x28
	hltdc->SRCR |= LTDC_SRCR_VBR;
 8007be8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8007bec:	f043 0302 	orr.w	r3, r3, #2
 8007bf0:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24

	return BSP_OK;
}
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	50001084 	.word	0x50001084

08007bfc <BSP_STM32_LTDC_ConfigCLUT>:


uint8_t BSP_STM32_LTDC_ConfigCLUT(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t *clut) {
 8007bfc:	b570      	push	{r4, r5, r6, lr}

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 8007bfe:	4d15      	ldr	r5, [pc, #84]	; (8007c54 <BSP_STM32_LTDC_ConfigCLUT+0x58>)
 8007c00:	01ce      	lsls	r6, r1, #7
uint8_t BSP_STM32_LTDC_ConfigCLUT(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t *clut) {
 8007c02:	4604      	mov	r4, r0
 8007c04:	f502 6e80 	add.w	lr, r2, #1024	; 0x400
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 8007c08:	eb05 1cc1 	add.w	ip, r5, r1, lsl #7
 8007c0c:	2100      	movs	r1, #0
	uint32_t counter;
	uint32_t tmp;

	// Configure CLUT
	for (counter = 0U; (counter < 256); counter++) {
		tmp  = (counter << 24U) | ((uint32_t)(*pcolorlut) & 0x00FFFFFF);
 8007c0e:	f852 3b04 	ldr.w	r3, [r2], #4
 8007c12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	for (counter = 0U; (counter < 256); counter++) {
 8007c16:	4596      	cmp	lr, r2
		tmp  = (counter << 24U) | ((uint32_t)(*pcolorlut) & 0x00FFFFFF);
 8007c18:	ea43 0301 	orr.w	r3, r3, r1
	    pcolorlut++;
	    l->CLUTWR  = tmp;
 8007c1c:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 8007c20:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
	for (counter = 0U; (counter < 256); counter++) {
 8007c24:	d1f3      	bne.n	8007c0e <BSP_STM32_LTDC_ConfigCLUT+0x12>
	}
	// Enable CLUT
	l->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8007c26:	5973      	ldr	r3, [r6, r5]
	hltdc->SRCR = LTDC_SRCR_IMR;

	// Configure color keying
	l->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
	l->CKCR  = 0x00000000;
 8007c28:	2000      	movs	r0, #0
	l->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8007c2a:	f043 0310 	orr.w	r3, r3, #16
 8007c2e:	5173      	str	r3, [r6, r5]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	6263      	str	r3, [r4, #36]	; 0x24
	l->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007c34:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007c38:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007c3c:	f8cc 200c 	str.w	r2, [ip, #12]
	l->CKCR  = 0x00000000;
 8007c40:	f8cc 000c 	str.w	r0, [ip, #12]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c44:	6263      	str	r3, [r4, #36]	; 0x24
	// Enable color keying
	l->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007c46:	5972      	ldr	r2, [r6, r5]
 8007c48:	f042 0202 	orr.w	r2, r2, #2
 8007c4c:	5172      	str	r2, [r6, r5]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c4e:	6263      	str	r3, [r4, #36]	; 0x24

	return BSP_OK;
}
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	bf00      	nop
 8007c54:	50001084 	.word	0x50001084

08007c58 <BSP_STM32_LTDC_SetTransparentColor>:

uint8_t BSP_STM32_LTDC_SetTransparentColor(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t color) {
 8007c58:	b410      	push	{r4}

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 8007c5a:	4c08      	ldr	r4, [pc, #32]	; (8007c7c <BSP_STM32_LTDC_SetTransparentColor+0x24>)
uint8_t BSP_STM32_LTDC_SetTransparentColor(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t color) {
 8007c5c:	4603      	mov	r3, r0
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 8007c5e:	01c8      	lsls	r0, r1, #7
 8007c60:	eb04 11c1 	add.w	r1, r4, r1, lsl #7

	// Setting transparent color
	l->CKCR  = color;
 8007c64:	60ca      	str	r2, [r1, #12]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c66:	2101      	movs	r1, #1
 8007c68:	6259      	str	r1, [r3, #36]	; 0x24
	// Enable color keying
	l->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007c6a:	5902      	ldr	r2, [r0, r4]
 8007c6c:	f042 0202 	orr.w	r2, r2, #2
 8007c70:	5102      	str	r2, [r0, r4]
	hltdc->SRCR = LTDC_SRCR_IMR;

	return BSP_OK;
}
 8007c72:	2000      	movs	r0, #0
 8007c74:	f85d 4b04 	ldr.w	r4, [sp], #4
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c78:	6259      	str	r1, [r3, #36]	; 0x24
}
 8007c7a:	4770      	bx	lr
 8007c7c:	50001084 	.word	0x50001084

08007c80 <BSP_STM32_LTDC_SetLineInt>:

uint8_t BSP_STM32_LTDC_SetLineInt(LTDC_TypeDef *hltdc, uint32_t line) {
 8007c80:	4603      	mov	r3, r0
	hltdc->LIPCR = line;
	hltdc->IER |= LTDC_IER_LIE;
	hltdc->SRCR = LTDC_SRCR_IMR;

	return BSP_OK;
}
 8007c82:	2000      	movs	r0, #0
	hltdc->IER &= ~(LTDC_IER_LIE);
 8007c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c86:	f022 0201 	bic.w	r2, r2, #1
uint8_t BSP_STM32_LTDC_SetLineInt(LTDC_TypeDef *hltdc, uint32_t line) {
 8007c8a:	b410      	push	{r4}
	hltdc->IER &= ~(LTDC_IER_LIE);
 8007c8c:	635a      	str	r2, [r3, #52]	; 0x34
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c8e:	2401      	movs	r4, #1
	hltdc->LIPCR = line;
 8007c90:	6419      	str	r1, [r3, #64]	; 0x40
	hltdc->IER |= LTDC_IER_LIE;
 8007c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c94:	4322      	orrs	r2, r4
 8007c96:	635a      	str	r2, [r3, #52]	; 0x34
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c98:	625c      	str	r4, [r3, #36]	; 0x24
}
 8007c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <BSP_STM32_LTDC_IRQHandler>:

uint8_t BSP_STM32_LTDC_IRQHandler(LTDC_TypeDef *hltdc) {
	if (((hltdc->ISR & LTDC_ISR_LIF) != 0U) && ((hltdc->IER & LTDC_IER_LIE) != 0U)) {
 8007ca0:	6b82      	ldr	r2, [r0, #56]	; 0x38
uint8_t BSP_STM32_LTDC_IRQHandler(LTDC_TypeDef *hltdc) {
 8007ca2:	4603      	mov	r3, r0
	if (((hltdc->ISR & LTDC_ISR_LIF) != 0U) && ((hltdc->IER & LTDC_IER_LIE) != 0U)) {
 8007ca4:	07d1      	lsls	r1, r2, #31
 8007ca6:	d502      	bpl.n	8007cae <BSP_STM32_LTDC_IRQHandler+0xe>
 8007ca8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007caa:	07d2      	lsls	r2, r2, #31
 8007cac:	d430      	bmi.n	8007d10 <BSP_STM32_LTDC_IRQHandler+0x70>
	    // Enable the Line interrupt
		hltdc->IER |= (LTDC_IER_LIE);
		return BSP_OK;
	}

	if (((hltdc->ISR & LTDC_ISR_FUIF) != 0U) && ((hltdc->IER & LTDC_IER_FUIE) != 0U)) {
 8007cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cb0:	0790      	lsls	r0, r2, #30
 8007cb2:	d50b      	bpl.n	8007ccc <BSP_STM32_LTDC_IRQHandler+0x2c>
 8007cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb6:	0791      	lsls	r1, r2, #30
 8007cb8:	d508      	bpl.n	8007ccc <BSP_STM32_LTDC_IRQHandler+0x2c>
		// Disable the interrupt FIFO Underrun
		hltdc->IER &= ~(LTDC_IER_FUIE);
 8007cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CFUIF;
 8007cbc:	2102      	movs	r1, #2
		hltdc->IER &= ~(LTDC_IER_FUIE);
 8007cbe:	f022 0202 	bic.w	r2, r2, #2
 8007cc2:	635a      	str	r2, [r3, #52]	; 0x34
		hltdc->ICR = LTDC_ICR_CFUIF;
 8007cc4:	63d9      	str	r1, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_FUIE);
 8007cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (((hltdc->ISR & LTDC_ISR_RRIF) != 0U) && ((hltdc->IER & LTDC_IER_RRIE) != 0U)) {
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cce:	0712      	lsls	r2, r2, #28
 8007cd0:	d50b      	bpl.n	8007cea <BSP_STM32_LTDC_IRQHandler+0x4a>
 8007cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd4:	0710      	lsls	r0, r2, #28
 8007cd6:	d508      	bpl.n	8007cea <BSP_STM32_LTDC_IRQHandler+0x4a>
		// Disable the interrupt Register Reload
		hltdc->IER &= ~(LTDC_IER_RRIE);
 8007cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CRRIF;
 8007cda:	2108      	movs	r1, #8
		hltdc->IER &= ~(LTDC_IER_RRIE);
 8007cdc:	f022 0208 	bic.w	r2, r2, #8
 8007ce0:	635a      	str	r2, [r3, #52]	; 0x34
		hltdc->ICR = LTDC_ICR_CRRIF;
 8007ce2:	63d9      	str	r1, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_RRIE);
 8007ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (((hltdc->ISR & LTDC_ISR_TERRIF) != 0U) && ((hltdc->IER & LTDC_IER_TERRIE) != 0U)) {
 8007cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cec:	0751      	lsls	r1, r2, #29
 8007cee:	d50d      	bpl.n	8007d0c <BSP_STM32_LTDC_IRQHandler+0x6c>
 8007cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cf2:	0752      	lsls	r2, r2, #29
 8007cf4:	d50a      	bpl.n	8007d0c <BSP_STM32_LTDC_IRQHandler+0x6c>
		// Disable the interrupt Transfer Error
		hltdc->IER &= ~(LTDC_IER_TERRIE);
 8007cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CTERRIF;
 8007cf8:	2104      	movs	r1, #4
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_TERRIE);
	}

	return BSP_ERROR;
 8007cfa:	2001      	movs	r0, #1
		hltdc->IER &= ~(LTDC_IER_TERRIE);
 8007cfc:	f022 0204 	bic.w	r2, r2, #4
 8007d00:	635a      	str	r2, [r3, #52]	; 0x34
		hltdc->ICR = LTDC_ICR_CTERRIF;
 8007d02:	63d9      	str	r1, [r3, #60]	; 0x3c
		hltdc->IER |= (LTDC_IER_TERRIE);
 8007d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d06:	430a      	orrs	r2, r1
 8007d08:	635a      	str	r2, [r3, #52]	; 0x34
 8007d0a:	4770      	bx	lr
	return BSP_ERROR;
 8007d0c:	2001      	movs	r0, #1
}
 8007d0e:	4770      	bx	lr
		hltdc->IER &= ~(LTDC_IER_LIE);
 8007d10:	6b42      	ldr	r2, [r0, #52]	; 0x34
		hltdc->ICR = LTDC_ICR_CLIF;
 8007d12:	2101      	movs	r1, #1
		return BSP_OK;
 8007d14:	2000      	movs	r0, #0
		hltdc->IER &= ~(LTDC_IER_LIE);
 8007d16:	f022 0201 	bic.w	r2, r2, #1
 8007d1a:	e7f1      	b.n	8007d00 <BSP_STM32_LTDC_IRQHandler+0x60>

08007d1c <BSP_STM32_PCD_EnableUSBVoltageDetector>:

#include "BSP_STM32_PCD.h"

uint8_t BSP_STM32_PCD_EnableUSBVoltageDetector() {
  // Enable the USB voltage detector
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007d1c:	4a03      	ldr	r2, [pc, #12]	; (8007d2c <BSP_STM32_PCD_EnableUSBVoltageDetector+0x10>)
  return BSP_OK;
}
 8007d1e:	2000      	movs	r0, #0
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007d20:	68d3      	ldr	r3, [r2, #12]
 8007d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d26:	60d3      	str	r3, [r2, #12]
}
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	58024800 	.word	0x58024800

08007d30 <BSP_STM32_PWR_ConfigSupply>:

uint8_t BSP_STM32_PWR_ConfigSupply(uint32_t SupplySource) {
	uint32_t tick;

	// Validate input parameters
	switch (SupplySource) {
 8007d30:	282e      	cmp	r0, #46	; 0x2e
 8007d32:	d839      	bhi.n	8007da8 <BSP_STM32_PWR_ConfigSupply+0x78>
 8007d34:	2815      	cmp	r0, #21
uint8_t BSP_STM32_PWR_ConfigSupply(uint32_t SupplySource) {
 8007d36:	b570      	push	{r4, r5, r6, lr}
 8007d38:	4604      	mov	r4, r0
	switch (SupplySource) {
 8007d3a:	d813      	bhi.n	8007d64 <BSP_STM32_PWR_ConfigSupply+0x34>
 8007d3c:	2802      	cmp	r0, #2
 8007d3e:	d802      	bhi.n	8007d46 <BSP_STM32_PWR_ConfigSupply+0x16>
 8007d40:	b918      	cbnz	r0, 8007d4a <BSP_STM32_PWR_ConfigSupply+0x1a>
 8007d42:	2001      	movs	r0, #1
	// Wait for SMPS readiness
	tick = BSP_GetTick();
	while ((PWR->CR3 & PWR_CR3_SMPSEXTRDY) != PWR_CR3_SMPSEXTRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;

	return BSP_OK;
}
 8007d44:	bd70      	pop	{r4, r5, r6, pc}
	switch (SupplySource) {
 8007d46:	2804      	cmp	r0, #4
 8007d48:	d1fb      	bne.n	8007d42 <BSP_STM32_PWR_ConfigSupply+0x12>
	if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN)) {
 8007d4a:	4d21      	ldr	r5, [pc, #132]	; (8007dd0 <BSP_STM32_PWR_ConfigSupply+0xa0>)
 8007d4c:	68eb      	ldr	r3, [r5, #12]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	2b06      	cmp	r3, #6
 8007d54:	d012      	beq.n	8007d7c <BSP_STM32_PWR_ConfigSupply+0x4c>
		if ((PWR->CR3 & pwr_config_mask) == SupplySource) return BSP_OK;
 8007d56:	68e8      	ldr	r0, [r5, #12]
 8007d58:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		return BSP_ERROR;
 8007d5c:	1b00      	subs	r0, r0, r4
 8007d5e:	bf18      	it	ne
 8007d60:	2001      	movne	r0, #1
}
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
	switch (SupplySource) {
 8007d64:	f1a0 0216 	sub.w	r2, r0, #22
 8007d68:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <BSP_STM32_PWR_ConfigSupply+0xa4>)
 8007d6a:	40d3      	lsrs	r3, r2
 8007d6c:	07d8      	lsls	r0, r3, #31
 8007d6e:	d5e8      	bpl.n	8007d42 <BSP_STM32_PWR_ConfigSupply+0x12>
	if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN)) {
 8007d70:	4d17      	ldr	r5, [pc, #92]	; (8007dd0 <BSP_STM32_PWR_ConfigSupply+0xa0>)
 8007d72:	68eb      	ldr	r3, [r5, #12]
 8007d74:	f003 0307 	and.w	r3, r3, #7
 8007d78:	2b06      	cmp	r3, #6
 8007d7a:	d1ec      	bne.n	8007d56 <BSP_STM32_PWR_ConfigSupply+0x26>
	MODIFY_REG(PWR->CR3, pwr_config_mask, SupplySource);
 8007d7c:	68eb      	ldr	r3, [r5, #12]
 8007d7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d82:	4323      	orrs	r3, r4
 8007d84:	60eb      	str	r3, [r5, #12]
	tick = BSP_GetTick();
 8007d86:	f7fc f9c7 	bl	8004118 <BSP_GetTick>
 8007d8a:	4606      	mov	r6, r0
	while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) != PWR_CSR1_ACTVOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8007d8c:	e005      	b.n	8007d9a <BSP_STM32_PWR_ConfigSupply+0x6a>
 8007d8e:	f7fc f9c3 	bl	8004118 <BSP_GetTick>
 8007d92:	1b80      	subs	r0, r0, r6
 8007d94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007d98:	d808      	bhi.n	8007dac <BSP_STM32_PWR_ConfigSupply+0x7c>
 8007d9a:	686b      	ldr	r3, [r5, #4]
 8007d9c:	0499      	lsls	r1, r3, #18
 8007d9e:	d5f6      	bpl.n	8007d8e <BSP_STM32_PWR_ConfigSupply+0x5e>
	if ((SupplySource & PWR_CR3_SMPSEN) == 0) return BSP_OK;
 8007da0:	0762      	lsls	r2, r4, #29
 8007da2:	d405      	bmi.n	8007db0 <BSP_STM32_PWR_ConfigSupply+0x80>
 8007da4:	2000      	movs	r0, #0
}
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
	switch (SupplySource) {
 8007da8:	2001      	movs	r0, #1
}
 8007daa:	4770      	bx	lr
	while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) != PWR_CSR1_ACTVOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8007dac:	2003      	movs	r0, #3
}
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
	tick = BSP_GetTick();
 8007db0:	f7fc f9b2 	bl	8004118 <BSP_GetTick>
	while ((PWR->CR3 & PWR_CR3_SMPSEXTRDY) != PWR_CR3_SMPSEXTRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8007db4:	4d06      	ldr	r5, [pc, #24]	; (8007dd0 <BSP_STM32_PWR_ConfigSupply+0xa0>)
	tick = BSP_GetTick();
 8007db6:	4604      	mov	r4, r0
	while ((PWR->CR3 & PWR_CR3_SMPSEXTRDY) != PWR_CR3_SMPSEXTRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8007db8:	e005      	b.n	8007dc6 <BSP_STM32_PWR_ConfigSupply+0x96>
 8007dba:	f7fc f9ad 	bl	8004118 <BSP_GetTick>
 8007dbe:	1b00      	subs	r0, r0, r4
 8007dc0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007dc4:	d8f2      	bhi.n	8007dac <BSP_STM32_PWR_ConfigSupply+0x7c>
 8007dc6:	68eb      	ldr	r3, [r5, #12]
 8007dc8:	03db      	lsls	r3, r3, #15
 8007dca:	d5f6      	bpl.n	8007dba <BSP_STM32_PWR_ConfigSupply+0x8a>
 8007dcc:	e7ea      	b.n	8007da4 <BSP_STM32_PWR_ConfigSupply+0x74>
 8007dce:	bf00      	nop
 8007dd0:	58024800 	.word	0x58024800
 8007dd4:	01810181 	.word	0x01810181

08007dd8 <BSP_STM32_PWR_VoltageScalingConfig>:


uint8_t BSP_STM32_PWR_VoltageScalingConfig(uint32_t Regulator) {
 8007dd8:	b082      	sub	sp, #8
	// For STM32H74xxx and STM32H75xxx lines
	__IO uint32_t tmpreg = 0x00;
 8007dda:	2300      	movs	r3, #0

	// Validating input parameters
	switch (Regulator) {
 8007ddc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	__IO uint32_t tmpreg = 0x00;
 8007de0:	9301      	str	r3, [sp, #4]
	switch (Regulator) {
 8007de2:	d009      	beq.n	8007df8 <BSP_STM32_PWR_VoltageScalingConfig+0x20>
 8007de4:	d805      	bhi.n	8007df2 <BSP_STM32_PWR_VoltageScalingConfig+0x1a>
 8007de6:	f430 4380 	bics.w	r3, r0, #16384	; 0x4000
 8007dea:	d01c      	beq.n	8007e26 <BSP_STM32_PWR_VoltageScalingConfig+0x4e>
 8007dec:	2001      	movs	r0, #1
		// Delay after setting the voltage scaling
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
	}
	UNUSED(tmpreg);
	return BSP_OK;
}
 8007dee:	b002      	add	sp, #8
 8007df0:	4770      	bx	lr
	switch (Regulator) {
 8007df2:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8007df6:	d1f9      	bne.n	8007dec <BSP_STM32_PWR_VoltageScalingConfig+0x14>
		CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <BSP_STM32_PWR_VoltageScalingConfig+0x78>)
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, Regulator);
 8007dfa:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <BSP_STM32_PWR_VoltageScalingConfig+0x7c>)
		CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007dfe:	f021 0101 	bic.w	r1, r1, #1
 8007e02:	62d9      	str	r1, [r3, #44]	; 0x2c
		tmpreg = READ_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	9301      	str	r3, [sp, #4]
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, Regulator);
 8007e0c:	6993      	ldr	r3, [r2, #24]
 8007e0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007e12:	4303      	orrs	r3, r0
 8007e14:	6193      	str	r3, [r2, #24]
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
 8007e16:	6993      	ldr	r3, [r2, #24]
 8007e18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e1c:	9301      	str	r3, [sp, #4]
	return BSP_OK;
 8007e1e:	2000      	movs	r0, #0
	UNUSED(tmpreg);
 8007e20:	9b01      	ldr	r3, [sp, #4]
}
 8007e22:	b002      	add	sp, #8
 8007e24:	4770      	bx	lr
	if (Regulator == PWR_REGULATOR_VOLTAGE_SCALE0) {
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d1e6      	bne.n	8007df8 <BSP_STM32_PWR_VoltageScalingConfig+0x20>
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e2a:	4a0a      	ldr	r2, [pc, #40]	; (8007e54 <BSP_STM32_PWR_VoltageScalingConfig+0x7c>)
		SET_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <BSP_STM32_PWR_VoltageScalingConfig+0x78>)
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e2e:	6991      	ldr	r1, [r2, #24]
 8007e30:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8007e34:	6191      	str	r1, [r2, #24]
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
 8007e36:	6992      	ldr	r2, [r2, #24]
 8007e38:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8007e3c:	9201      	str	r2, [sp, #4]
		SET_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e40:	f042 0201 	orr.w	r2, r2, #1
 8007e44:	62da      	str	r2, [r3, #44]	; 0x2c
		tmpreg = READ_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	e7e6      	b.n	8007e1e <BSP_STM32_PWR_VoltageScalingConfig+0x46>
 8007e50:	58000400 	.word	0x58000400
 8007e54:	58024800 	.word	0x58024800

08007e58 <BSP_STM32_PWR_WaitForVOSRDY>:

uint8_t BSP_STM32_PWR_WaitForVOSRDY(void) {
 8007e58:	b538      	push	{r3, r4, r5, lr}
	uint32_t tick = BSP_GetTick();
 8007e5a:	f7fc f95d 	bl	8004118 <BSP_GetTick>
	while ((PWR->D3CR & PWR_D3CR_VOSRDY) != PWR_D3CR_VOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_ERROR;
 8007e5e:	4d08      	ldr	r5, [pc, #32]	; (8007e80 <BSP_STM32_PWR_WaitForVOSRDY+0x28>)
	uint32_t tick = BSP_GetTick();
 8007e60:	4604      	mov	r4, r0
	while ((PWR->D3CR & PWR_D3CR_VOSRDY) != PWR_D3CR_VOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_ERROR;
 8007e62:	e005      	b.n	8007e70 <BSP_STM32_PWR_WaitForVOSRDY+0x18>
 8007e64:	f7fc f958 	bl	8004118 <BSP_GetTick>
 8007e68:	1b00      	subs	r0, r0, r4
 8007e6a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007e6e:	d804      	bhi.n	8007e7a <BSP_STM32_PWR_WaitForVOSRDY+0x22>
 8007e70:	69ab      	ldr	r3, [r5, #24]
 8007e72:	049b      	lsls	r3, r3, #18
 8007e74:	d5f6      	bpl.n	8007e64 <BSP_STM32_PWR_WaitForVOSRDY+0xc>
	return BSP_OK;
 8007e76:	2000      	movs	r0, #0
}
 8007e78:	bd38      	pop	{r3, r4, r5, pc}
	while ((PWR->D3CR & PWR_D3CR_VOSRDY) != PWR_D3CR_VOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_ERROR;
 8007e7a:	2001      	movs	r0, #1
}
 8007e7c:	bd38      	pop	{r3, r4, r5, pc}
 8007e7e:	bf00      	nop
 8007e80:	58024800 	.word	0x58024800

08007e84 <BSP_STM32_PWR_EnableBkUpAccess>:

uint8_t BSP_STM32_PWR_EnableBkUpAccess(void) {
  // Enable access to RTC and backup registers
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007e84:	4a03      	ldr	r2, [pc, #12]	; (8007e94 <BSP_STM32_PWR_EnableBkUpAccess+0x10>)
  return BSP_OK;
}
 8007e86:	2000      	movs	r0, #0
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007e88:	6813      	ldr	r3, [r2, #0]
 8007e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e8e:	6013      	str	r3, [r2, #0]
}
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	58024800 	.word	0x58024800

08007e98 <_QSPI_GetConfigCCR>:
static uint32_t _QSPI_GetConfigCCR(QUADSPI_TypeDef * hqspi, uint32_t FMode) {

	uint32_t reg_ccr = 0x00;

	// Program Instruction Block
	if (qspictx.InstructionMode != QSPI_INSTRUCTION_NONE) {
 8007e98:	4b23      	ldr	r3, [pc, #140]	; (8007f28 <_QSPI_GetConfigCCR+0x90>)
static uint32_t _QSPI_GetConfigCCR(QUADSPI_TypeDef * hqspi, uint32_t FMode) {
 8007e9a:	b430      	push	{r4, r5}
	if (qspictx.InstructionMode != QSPI_INSTRUCTION_NONE) {
 8007e9c:	681c      	ldr	r4, [r3, #0]
 8007e9e:	b11c      	cbz	r4, 8007ea8 <_QSPI_GetConfigCCR+0x10>
		reg_ccr |= (qspictx.Instruction & QUADSPI_CCR_INSTRUCTION_Msk);
 8007ea0:	791a      	ldrb	r2, [r3, #4]
		reg_ccr |= (qspictx.InstructionMode & QUADSPI_CCR_IMODE_Msk);
 8007ea2:	f404 7440 	and.w	r4, r4, #768	; 0x300
 8007ea6:	4314      	orrs	r4, r2
	}

	// Program Address Block
	if (qspictx.AddressMode !=QSPI_ADDRESS_NONE) {
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	b16a      	cbz	r2, 8007ec8 <_QSPI_GetConfigCCR+0x30>
		reg_ccr |= (qspictx.AddressMode & QUADSPI_CCR_ADMODE_Msk);
		reg_ccr |= (qspictx.AddressSize & QUADSPI_CCR_ADSIZE_Msk);
 8007eac:	68dd      	ldr	r5, [r3, #12]
		reg_ccr |= (qspictx.AddressMode & QUADSPI_CCR_ADMODE_Msk);
 8007eae:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->AR = qspictx.Address;
 8007eb2:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
		reg_ccr |= (qspictx.AddressSize & QUADSPI_CCR_ADSIZE_Msk);
 8007eb6:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
 8007eba:	ea45 0502 	orr.w	r5, r5, r2
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->AR = qspictx.Address;
 8007ebe:	bf14      	ite	ne
 8007ec0:	691a      	ldrne	r2, [r3, #16]
			else hqspi->AR = 0;
 8007ec2:	2200      	moveq	r2, #0
		reg_ccr |= (qspictx.AddressSize & QUADSPI_CCR_ADSIZE_Msk);
 8007ec4:	432c      	orrs	r4, r5
			else hqspi->AR = 0;
 8007ec6:	6182      	str	r2, [r0, #24]
	}

	// Program Alternate Bytes
	if (qspictx.AlternateMode != QSPI_ALTERNATE_BYTES_NONE) {
 8007ec8:	695a      	ldr	r2, [r3, #20]
 8007eca:	b142      	cbz	r2, 8007ede <_QSPI_GetConfigCCR+0x46>
		reg_ccr |= (qspictx.AlternateMode & QUADSPI_CCR_ABMODE_Msk);
		reg_ccr |= (qspictx.AlternateSize & QUADSPI_CCR_ABSIZE_Msk);
 8007ecc:	699d      	ldr	r5, [r3, #24]
		reg_ccr |= (qspictx.AlternateMode & QUADSPI_CCR_ABMODE_Msk);
 8007ece:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
		reg_ccr |= (qspictx.AlternateSize & QUADSPI_CCR_ABSIZE_Msk);
 8007ed2:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
 8007ed6:	4315      	orrs	r5, r2
		hqspi->ABR = qspictx.AlternateBytes;
 8007ed8:	69da      	ldr	r2, [r3, #28]
		reg_ccr |= (qspictx.AlternateSize & QUADSPI_CCR_ABSIZE_Msk);
 8007eda:	432c      	orrs	r4, r5
		hqspi->ABR = qspictx.AlternateBytes;
 8007edc:	61c2      	str	r2, [r0, #28]
	}

	// Program Dummy Cycles
	if (qspictx.DummyCycles > 0) {
 8007ede:	6a1a      	ldr	r2, [r3, #32]
 8007ee0:	b10a      	cbz	r2, 8007ee6 <_QSPI_GetConfigCCR+0x4e>
		reg_ccr |= (qspictx.DummyCycles << QUADSPI_CCR_DCYC_Pos);
 8007ee2:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
	}

	// Program Data Block
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 8007ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ee8:	b14a      	cbz	r2, 8007efe <_QSPI_GetConfigCCR+0x66>
		reg_ccr |= (qspictx.DataMode & QUADSPI_CCR_DMODE_Msk);
 8007eea:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->DLR = qspictx.DataLenth - 1U;
 8007eee:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
		reg_ccr |= (qspictx.DataMode & QUADSPI_CCR_DMODE_Msk);
 8007ef2:	ea44 0402 	orr.w	r4, r4, r2
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->DLR = qspictx.DataLenth - 1U;
 8007ef6:	d013      	beq.n	8007f20 <_QSPI_GetConfigCCR+0x88>
 8007ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007efa:	3a01      	subs	r2, #1
 8007efc:	6102      	str	r2, [r0, #16]
	}

	// Program Additional Options
	reg_ccr |= (qspictx.DDRMode & QUADSPI_CCR_DDRM_Msk); 		// DDR Configuration
	reg_ccr |= (qspictx.SignalDelay & QUADSPI_CCR_DHHC_Msk); 	// Signal Shift
	reg_ccr |= (qspictx.SIOOMode & QUADSPI_CCR_SIOO_Msk);		// SIOO Mode
 8007efe:	6b98      	ldr	r0, [r3, #56]	; 0x38
	reg_ccr |= (qspictx.SignalDelay & QUADSPI_CCR_DHHC_Msk); 	// Signal Shift
 8007f00:	e9d3 250c 	ldrd	r2, r5, [r3, #48]	; 0x30
	reg_ccr |= (qspictx.DDRMode & QUADSPI_CCR_DDRM_Msk); 		// DDR Configuration
 8007f04:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
	reg_ccr |= (qspictx.SignalDelay & QUADSPI_CCR_DHHC_Msk); 	// Signal Shift
 8007f08:	f005 4c80 	and.w	ip, r5, #1073741824	; 0x40000000
	reg_ccr |= (qspictx.SIOOMode & QUADSPI_CCR_SIOO_Msk);		// SIOO Mode
 8007f0c:	f000 5280 	and.w	r2, r0, #268435456	; 0x10000000
	reg_ccr |= (FMode & QUADSPI_CCR_FMODE_Msk);					// Functional Mode
 8007f10:	ea43 030c 	orr.w	r3, r3, ip
 8007f14:	4313      	orrs	r3, r2
 8007f16:	4319      	orrs	r1, r3

	return reg_ccr;
}
 8007f18:	ea41 0004 	orr.w	r0, r1, r4
 8007f1c:	bc30      	pop	{r4, r5}
 8007f1e:	4770      	bx	lr
			else hqspi->DLR = 0;
 8007f20:	2200      	movs	r2, #0
 8007f22:	6102      	str	r2, [r0, #16]
 8007f24:	e7eb      	b.n	8007efe <_QSPI_GetConfigCCR+0x66>
 8007f26:	bf00      	nop
 8007f28:	240004b8 	.word	0x240004b8

08007f2c <BSP_STM32_QSPI_Init>:


uint8_t BSP_STM32_QSPI_Init(QUADSPI_TypeDef * hqspi, uint32_t ClockPrescaler, uint32_t ClockMode, uint32_t FifoThreshold, uint32_t FlashSize) {
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	4690      	mov	r8, r2

	// Configure QSPI FIFO Threshold
	MODIFY_REG(hqspi->CR, QUADSPI_CR_FTHRES, ((FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
 8007f32:	6802      	ldr	r2, [r0, #0]
 8007f34:	3b01      	subs	r3, #1
uint8_t BSP_STM32_QSPI_Init(QUADSPI_TypeDef * hqspi, uint32_t ClockPrescaler, uint32_t ClockMode, uint32_t FifoThreshold, uint32_t FlashSize) {
 8007f36:	4604      	mov	r4, r0
	MODIFY_REG(hqspi->CR, QUADSPI_CR_FTHRES, ((FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
 8007f38:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
uint8_t BSP_STM32_QSPI_Init(QUADSPI_TypeDef * hqspi, uint32_t ClockPrescaler, uint32_t ClockMode, uint32_t FifoThreshold, uint32_t FlashSize) {
 8007f3c:	460f      	mov	r7, r1
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8007f3e:	f241 3688 	movw	r6, #5000	; 0x1388
	MODIFY_REG(hqspi->CR, QUADSPI_CR_FTHRES, ((FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
 8007f42:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007f46:	6003      	str	r3, [r0, #0]
	uint32_t tick = BSP_GetTick();
 8007f48:	f7fc f8e6 	bl	8004118 <BSP_GetTick>
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	e004      	b.n	8007f5a <BSP_STM32_QSPI_Init+0x2e>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8007f50:	f7fc f8e2 	bl	8004118 <BSP_GetTick>
 8007f54:	1b43      	subs	r3, r0, r5
 8007f56:	42b3      	cmp	r3, r6
 8007f58:	d819      	bhi.n	8007f8e <BSP_STM32_QSPI_Init+0x62>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8007f5a:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8007f5c:	f013 0320 	ands.w	r3, r3, #32
 8007f60:	d1f6      	bne.n	8007f50 <BSP_STM32_QSPI_Init+0x24>
	// Configure QSPI Clock Prescaler and Sample Shift
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
			((ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) | QSPI_SAMPLE_SHIFTING_NONE  | QSPI_FLASH_ID_1 | QSPI_DUALFLASH_DISABLE));

	// Configure QSPI Flash Size, CS High Time and Clock Mode
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f62:	9a06      	ldr	r2, [sp, #24]
			((FlashSize << QUADSPI_DCR_FSIZE_Pos) | QSPI_CS_HIGH_TIME_1_CYCLE | ClockMode));

	// Enable the QSPI peripheral
	hqspi->CR |= QUADSPI_CR_EN;

    return BSP_OK;
 8007f64:	4618      	mov	r0, r3
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007f66:	6821      	ldr	r1, [r4, #0]
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f68:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007f6c:	4a09      	ldr	r2, [pc, #36]	; (8007f94 <BSP_STM32_QSPI_Init+0x68>)
 8007f6e:	400a      	ands	r2, r1
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f70:	4909      	ldr	r1, [pc, #36]	; (8007f98 <BSP_STM32_QSPI_Init+0x6c>)
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007f72:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8007f76:	6022      	str	r2, [r4, #0]
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f78:	6862      	ldr	r2, [r4, #4]
 8007f7a:	4011      	ands	r1, r2
 8007f7c:	ea48 0101 	orr.w	r1, r8, r1
 8007f80:	6061      	str	r1, [r4, #4]
	hqspi->CR |= QUADSPI_CR_EN;
 8007f82:	6822      	ldr	r2, [r4, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	6022      	str	r2, [r4, #0]
}
 8007f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8007f8e:	2003      	movs	r0, #3
}
 8007f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f94:	00ffff2f 	.word	0x00ffff2f
 8007f98:	ffe0f8fe 	.word	0xffe0f8fe

08007f9c <BSP_STM32_QSPI_CfgNewCommand>:


uint8_t BSP_STM32_QSPI_CfgNewCommand() {

	memset(&qspictx, 0x00, sizeof(qspictx));
 8007f9c:	224c      	movs	r2, #76	; 0x4c
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4802      	ldr	r0, [pc, #8]	; (8007fac <BSP_STM32_QSPI_CfgNewCommand+0x10>)
uint8_t BSP_STM32_QSPI_CfgNewCommand() {
 8007fa2:	b508      	push	{r3, lr}
	memset(&qspictx, 0x00, sizeof(qspictx));
 8007fa4:	f00a f979 	bl	801229a <memset>

	return BSP_OK;
}
 8007fa8:	2000      	movs	r0, #0
 8007faa:	bd08      	pop	{r3, pc}
 8007fac:	240004b8 	.word	0x240004b8

08007fb0 <BSP_STM32_QSPI_CfgInstruction>:

uint8_t BSP_STM32_QSPI_CfgInstruction(uint32_t Mode, uint8_t Instruction) {
 8007fb0:	4602      	mov	r2, r0

	qspictx.InstructionMode = Mode;
 8007fb2:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <BSP_STM32_QSPI_CfgInstruction+0xc>)
	qspictx.Instruction = Instruction;

	return BSP_OK;
}
 8007fb4:	2000      	movs	r0, #0
	qspictx.Instruction = Instruction;
 8007fb6:	e9c3 2100 	strd	r2, r1, [r3]
}
 8007fba:	4770      	bx	lr
 8007fbc:	240004b8 	.word	0x240004b8

08007fc0 <BSP_STM32_QSPI_CfgAddress>:

uint8_t BSP_STM32_QSPI_CfgAddress(uint32_t Mode, uint32_t Size, uint32_t Address) {

	qspictx.AddressMode = Mode;
 8007fc0:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <BSP_STM32_QSPI_CfgAddress+0xc>)
 8007fc2:	6098      	str	r0, [r3, #8]
	qspictx.AddressSize = Size;
	qspictx.Address = Address;

	return BSP_OK;
}
 8007fc4:	2000      	movs	r0, #0
	qspictx.Address = Address;
 8007fc6:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 8007fca:	4770      	bx	lr
 8007fcc:	240004b8 	.word	0x240004b8

08007fd0 <BSP_STM32_QSPI_CfgData>:
	return BSP_OK;
}

uint8_t BSP_STM32_QSPI_CfgData(uint32_t Mode, uint8_t * pData, uint32_t Length) {

	qspictx.DataMode = Mode;
 8007fd0:	4b02      	ldr	r3, [pc, #8]	; (8007fdc <BSP_STM32_QSPI_CfgData+0xc>)
 8007fd2:	6258      	str	r0, [r3, #36]	; 0x24
	qspictx.DataLenth = Length;
	qspictx.pData = pData;

	return BSP_OK;
}
 8007fd4:	2000      	movs	r0, #0
	qspictx.pData = pData;
 8007fd6:	e9c3 210a 	strd	r2, r1, [r3, #40]	; 0x28
}
 8007fda:	4770      	bx	lr
 8007fdc:	240004b8 	.word	0x240004b8

08007fe0 <BSP_STM32_QSPI_CfgOptions>:

uint8_t	BSP_STM32_QSPI_CfgOptions(uint32_t DDRMode, uint32_t SignalDelay, uint32_t SIOOMode) {
	qspictx.DDRMode = DDRMode;
 8007fe0:	4b02      	ldr	r3, [pc, #8]	; (8007fec <BSP_STM32_QSPI_CfgOptions+0xc>)
 8007fe2:	6318      	str	r0, [r3, #48]	; 0x30
	qspictx.SignalDelay = SignalDelay;
	qspictx.SIOOMode = SIOOMode;

	return BSP_OK;
}
 8007fe4:	2000      	movs	r0, #0
	qspictx.SIOOMode = SIOOMode;
 8007fe6:	e9c3 120d 	strd	r1, r2, [r3, #52]	; 0x34
}
 8007fea:	4770      	bx	lr
 8007fec:	240004b8 	.word	0x240004b8

08007ff0 <BSP_STM32_QSPI_CfgAutoPooling>:

uint8_t BSP_STM32_QSPI_CfgAutoPooling(uint32_t mask, uint32_t match, uint32_t interval, uint32_t matchmode) {
 8007ff0:	b410      	push	{r4}
	qspictx.AutoPoolingMask = mask;
 8007ff2:	4c04      	ldr	r4, [pc, #16]	; (8008004 <BSP_STM32_QSPI_CfgAutoPooling+0x14>)
	qspictx.AutoPoolingMatch = match;
 8007ff4:	e9c4 100f 	strd	r1, r0, [r4, #60]	; 0x3c
	qspictx.AutoPoolingInterval = interval;
	qspictx.AutoPoolingMode = matchmode;
 8007ff8:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44

	return BSP_OK;
}
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	240004b8 	.word	0x240004b8

08008008 <BSP_STM32_QSPI_StartReceive>:


uint8_t BSP_STM32_QSPI_StartReceive(QUADSPI_TypeDef * hqspi) {
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	4604      	mov	r4, r0
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800800e:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 8008012:	f7fc f881 	bl	8004118 <BSP_GetTick>
 8008016:	4605      	mov	r5, r0
 8008018:	e004      	b.n	8008024 <BSP_STM32_QSPI_StartReceive+0x1c>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800801a:	f7fc f87d 	bl	8004118 <BSP_GetTick>
 800801e:	1b40      	subs	r0, r0, r5
 8008020:	42b0      	cmp	r0, r6
 8008022:	d83f      	bhi.n	80080a4 <BSP_STM32_QSPI_StartReceive+0x9c>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8008024:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008026:	069a      	lsls	r2, r3, #26
 8008028:	d4f7      	bmi.n	800801a <BSP_STM32_QSPI_StartReceive+0x12>

	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;

	// 2. Set CCR configuration register
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800802a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800802e:	4620      	mov	r0, r4
 8008030:	f7ff ff32 	bl	8007e98 <_QSPI_GetConfigCCR>

	// 3. Initiate transmit of data by rewriting Address Register
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 8008034:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <BSP_STM32_QSPI_StartReceive+0xa4>)
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008036:	6160      	str	r0, [r4, #20]
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	b10a      	cbz	r2, 8008040 <BSP_STM32_QSPI_StartReceive+0x38>
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	61a2      	str	r2, [r4, #24]

	// 4. If Data block defined than receive data
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 8008040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008042:	b1d2      	cbz	r2, 800807a <BSP_STM32_QSPI_StartReceive+0x72>
		uint32_t xFerCount = qspictx.DataLenth;
		__IO uint8_t * pData = qspictx.pData;
 8008044:	e9d3 270a 	ldrd	r2, r7, [r3, #40]	; 0x28
		__IO uint8_t * pRegDR = (uint8_t *)&hqspi->DR;

		while (xFerCount > 0) {
 8008048:	b1ba      	cbz	r2, 800807a <BSP_STM32_QSPI_StartReceive+0x72>
 800804a:	eb07 0802 	add.w	r8, r7, r2
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800804e:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 8008052:	f7fc f861 	bl	8004118 <BSP_GetTick>
 8008056:	4605      	mov	r5, r0
 8008058:	e004      	b.n	8008064 <BSP_STM32_QSPI_StartReceive+0x5c>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800805a:	f7fc f85d 	bl	8004118 <BSP_GetTick>
 800805e:	1b43      	subs	r3, r0, r5
 8008060:	42b3      	cmp	r3, r6
 8008062:	d81f      	bhi.n	80080a4 <BSP_STM32_QSPI_StartReceive+0x9c>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8008064:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008066:	f013 0f06 	tst.w	r3, #6
 800806a:	d0f6      	beq.n	800805a <BSP_STM32_QSPI_StartReceive+0x52>

			//Wait until FT or TC flag is set to read received data
			if (_QSPI_WaitForFlag(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, 5000)) return BSP_TIMEOUT;

			// Copy data from DR register
			*pData = *pRegDR;
 800806c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f807 3b01 	strb.w	r3, [r7], #1
		while (xFerCount > 0) {
 8008076:	45b8      	cmp	r8, r7
 8008078:	d1eb      	bne.n	8008052 <BSP_STM32_QSPI_StartReceive+0x4a>
	uint32_t tick = BSP_GetTick();
 800807a:	f7fc f84d 	bl	8004118 <BSP_GetTick>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800807e:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 8008082:	4605      	mov	r5, r0
 8008084:	e004      	b.n	8008090 <BSP_STM32_QSPI_StartReceive+0x88>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008086:	f7fc f847 	bl	8004118 <BSP_GetTick>
 800808a:	1b40      	subs	r0, r0, r5
 800808c:	42b0      	cmp	r0, r6
 800808e:	d809      	bhi.n	80080a4 <BSP_STM32_QSPI_StartReceive+0x9c>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8008090:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008092:	079b      	lsls	r3, r3, #30
 8008094:	d5f7      	bpl.n	8008086 <BSP_STM32_QSPI_StartReceive+0x7e>

	// 5. Wait for TC flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_TC, SET, 5000)) return BSP_TIMEOUT;

	// 6. Reset TC flag
	hqspi->FCR |= QSPI_FLAG_TC;
 8008096:	68e3      	ldr	r3, [r4, #12]


	return BSP_OK;
 8008098:	2000      	movs	r0, #0
	hqspi->FCR |= QSPI_FLAG_TC;
 800809a:	f043 0302 	orr.w	r3, r3, #2
 800809e:	60e3      	str	r3, [r4, #12]
}
 80080a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 80080a4:	2003      	movs	r0, #3
}
 80080a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080aa:	bf00      	nop
 80080ac:	240004b8 	.word	0x240004b8

080080b0 <BSP_STM32_QSPI_StartTransmit>:


uint8_t BSP_STM32_QSPI_StartTransmit(QUADSPI_TypeDef * hqspi) {
 80080b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b4:	4604      	mov	r4, r0
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80080b6:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 80080ba:	f7fc f82d 	bl	8004118 <BSP_GetTick>
 80080be:	4605      	mov	r5, r0
 80080c0:	e004      	b.n	80080cc <BSP_STM32_QSPI_StartTransmit+0x1c>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80080c2:	f7fc f829 	bl	8004118 <BSP_GetTick>
 80080c6:	1b40      	subs	r0, r0, r5
 80080c8:	42b0      	cmp	r0, r6
 80080ca:	d83d      	bhi.n	8008148 <BSP_STM32_QSPI_StartTransmit+0x98>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 80080cc:	68a1      	ldr	r1, [r4, #8]
		if (reg == state) break;
 80080ce:	f011 0120 	ands.w	r1, r1, #32
 80080d2:	d1f6      	bne.n	80080c2 <BSP_STM32_QSPI_StartTransmit+0x12>

	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;

	// 2. Set CCR configuration register
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80080d4:	4620      	mov	r0, r4
 80080d6:	f7ff fedf 	bl	8007e98 <_QSPI_GetConfigCCR>

	// 3. Initiate transmit of data by rewriting Address Register
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 80080da:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <BSP_STM32_QSPI_StartTransmit+0xa0>)
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80080dc:	6160      	str	r0, [r4, #20]
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	b10a      	cbz	r2, 80080e6 <BSP_STM32_QSPI_StartTransmit+0x36>
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	61a2      	str	r2, [r4, #24]

	// 4. If Data block defined than receive data
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 80080e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080e8:	b1ca      	cbz	r2, 800811e <BSP_STM32_QSPI_StartTransmit+0x6e>
		uint32_t xFerCount = qspictx.DataLenth;
		__IO uint8_t * pData = qspictx.pData;
 80080ea:	e9d3 270a 	ldrd	r2, r7, [r3, #40]	; 0x28
		__IO uint8_t * pRegDR = (uint8_t *)&hqspi->DR;

		while (xFerCount > 0) {
 80080ee:	b1b2      	cbz	r2, 800811e <BSP_STM32_QSPI_StartTransmit+0x6e>
 80080f0:	eb07 0802 	add.w	r8, r7, r2
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80080f4:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 80080f8:	f7fc f80e 	bl	8004118 <BSP_GetTick>
 80080fc:	4605      	mov	r5, r0
 80080fe:	e004      	b.n	800810a <BSP_STM32_QSPI_StartTransmit+0x5a>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008100:	f7fc f80a 	bl	8004118 <BSP_GetTick>
 8008104:	1b43      	subs	r3, r0, r5
 8008106:	42b3      	cmp	r3, r6
 8008108:	d81e      	bhi.n	8008148 <BSP_STM32_QSPI_StartTransmit+0x98>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 800810a:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 800810c:	075a      	lsls	r2, r3, #29
 800810e:	d5f7      	bpl.n	8008100 <BSP_STM32_QSPI_StartTransmit+0x50>

			//Wait until FT is set to transmit data
			if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_FT, SET, 5000)) return BSP_TIMEOUT;

			// Copy data to DR register
			 *pRegDR = *pData;
 8008110:	f817 3b01 	ldrb.w	r3, [r7], #1
 8008114:	b2db      	uxtb	r3, r3
		while (xFerCount > 0) {
 8008116:	45b8      	cmp	r8, r7
			 *pRegDR = *pData;
 8008118:	f884 3020 	strb.w	r3, [r4, #32]
		while (xFerCount > 0) {
 800811c:	d1ec      	bne.n	80080f8 <BSP_STM32_QSPI_StartTransmit+0x48>
	uint32_t tick = BSP_GetTick();
 800811e:	f7fb fffb 	bl	8004118 <BSP_GetTick>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008122:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 8008126:	4605      	mov	r5, r0
 8008128:	e004      	b.n	8008134 <BSP_STM32_QSPI_StartTransmit+0x84>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800812a:	f7fb fff5 	bl	8004118 <BSP_GetTick>
 800812e:	1b40      	subs	r0, r0, r5
 8008130:	42b0      	cmp	r0, r6
 8008132:	d809      	bhi.n	8008148 <BSP_STM32_QSPI_StartTransmit+0x98>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8008134:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008136:	079b      	lsls	r3, r3, #30
 8008138:	d5f7      	bpl.n	800812a <BSP_STM32_QSPI_StartTransmit+0x7a>

	// 5. Wait for TC flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_TC, SET, 5000)) return BSP_TIMEOUT;

	// 6. Reset TC flag
	hqspi->FCR |= QSPI_FLAG_TC;
 800813a:	68e3      	ldr	r3, [r4, #12]


	return BSP_OK;
 800813c:	2000      	movs	r0, #0
	hqspi->FCR |= QSPI_FLAG_TC;
 800813e:	f043 0302 	orr.w	r3, r3, #2
 8008142:	60e3      	str	r3, [r4, #12]
}
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8008148:	2003      	movs	r0, #3
}
 800814a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814e:	bf00      	nop
 8008150:	240004b8 	.word	0x240004b8

08008154 <BSP_STM32_QSPI_StartAutoPooling>:

	 return BSP_OK;
}


uint8_t BSP_STM32_QSPI_StartAutoPooling(QUADSPI_TypeDef * hqspi) {
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	4604      	mov	r4, r0
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008158:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 800815c:	f7fb ffdc 	bl	8004118 <BSP_GetTick>
 8008160:	4605      	mov	r5, r0
 8008162:	e004      	b.n	800816e <BSP_STM32_QSPI_StartAutoPooling+0x1a>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008164:	f7fb ffd8 	bl	8004118 <BSP_GetTick>
 8008168:	1b43      	subs	r3, r0, r5
 800816a:	42b3      	cmp	r3, r6
 800816c:	d831      	bhi.n	80081d2 <BSP_STM32_QSPI_StartAutoPooling+0x7e>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 800816e:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008170:	069a      	lsls	r2, r3, #26
 8008172:	d4f7      	bmi.n	8008164 <BSP_STM32_QSPI_StartAutoPooling+0x10>
	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;

	// 2. Configure Auto Pooling parameters
	hqspi->PSMAR = qspictx.AutoPoolingMatch;
 8008174:	4b18      	ldr	r3, [pc, #96]	; (80081d8 <BSP_STM32_QSPI_StartAutoPooling+0x84>)

	// 3. Configure CR register for Auto Pooling mode
    MODIFY_REG(hqspi->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), (qspictx.AutoPoolingMode | QSPI_AUTOMATIC_STOP_ENABLE));

    // 4. Configure CCR register
    hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008176:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800817a:	4620      	mov	r0, r4
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800817c:	f64e 2660 	movw	r6, #60000	; 0xea60
	hqspi->PSMAR = qspictx.AutoPoolingMatch;
 8008180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008182:	62a2      	str	r2, [r4, #40]	; 0x28
	hqspi->PSMKR = qspictx.AutoPoolingMask;
 8008184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008186:	6262      	str	r2, [r4, #36]	; 0x24
	hqspi->PIR = qspictx.AutoPoolingInterval;
 8008188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800818a:	62e2      	str	r2, [r4, #44]	; 0x2c
    MODIFY_REG(hqspi->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), (qspictx.AutoPoolingMode | QSPI_AUTOMATIC_STOP_ENABLE));
 800818c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008194:	4313      	orrs	r3, r2
 8008196:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800819a:	6023      	str	r3, [r4, #0]
    hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800819c:	f7ff fe7c 	bl	8007e98 <_QSPI_GetConfigCCR>
 80081a0:	6160      	str	r0, [r4, #20]
	uint32_t tick = BSP_GetTick();
 80081a2:	f7fb ffb9 	bl	8004118 <BSP_GetTick>
 80081a6:	4605      	mov	r5, r0
 80081a8:	e004      	b.n	80081b4 <BSP_STM32_QSPI_StartAutoPooling+0x60>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80081aa:	f7fb ffb5 	bl	8004118 <BSP_GetTick>
 80081ae:	1b40      	subs	r0, r0, r5
 80081b0:	42b0      	cmp	r0, r6
 80081b2:	d80e      	bhi.n	80081d2 <BSP_STM32_QSPI_StartAutoPooling+0x7e>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 80081b4:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 80081b6:	071b      	lsls	r3, r3, #28
 80081b8:	d5f7      	bpl.n	80081aa <BSP_STM32_QSPI_StartAutoPooling+0x56>

	// 5. Wait for SM flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_SM, SET, 60000)) return BSP_TIMEOUT;

	hqspi->FCR = QSPI_FLAG_SM;
 80081ba:	2308      	movs	r3, #8

	// 6. Exit autopooling mode
	SET_BIT(hqspi->CR, QUADSPI_CR_ABORT);
	CLEAR_BIT(hqspi->CCR, QUADSPI_CCR_FMODE);

	return BSP_OK;
 80081bc:	2000      	movs	r0, #0
	hqspi->FCR = QSPI_FLAG_SM;
 80081be:	60e3      	str	r3, [r4, #12]
	SET_BIT(hqspi->CR, QUADSPI_CR_ABORT);
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	f043 0302 	orr.w	r3, r3, #2
 80081c6:	6023      	str	r3, [r4, #0]
	CLEAR_BIT(hqspi->CCR, QUADSPI_CCR_FMODE);
 80081c8:	6963      	ldr	r3, [r4, #20]
 80081ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80081ce:	6163      	str	r3, [r4, #20]
}
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 80081d2:	2003      	movs	r0, #3
}
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	bf00      	nop
 80081d8:	240004b8 	.word	0x240004b8

080081dc <BSP_STM32_RCC_CLKConfig_RTC>:
 *******************************************************************/

#include "BSP_STM32_RCC.h"

// Setting RTC clock source to external LSE
uint8_t BSP_STM32_RCC_CLKConfig_RTC() {
 80081dc:	b570      	push	{r4, r5, r6, lr}

	uint32_t tickstart;
	uint32_t tmpreg;

	// Enable write access to Backup domain
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081de:	4c1f      	ldr	r4, [pc, #124]	; (800825c <BSP_STM32_RCC_CLKConfig_RTC+0x80>)
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e6:	6023      	str	r3, [r4, #0]

	// Wait for Backup domain Write protection disable
	tickstart = BSP_GetTick();
 80081e8:	f7fb ff96 	bl	8004118 <BSP_GetTick>
 80081ec:	4605      	mov	r5, r0

	while ((PWR->CR1 & PWR_CR1_DBP) == 0) if ((BSP_GetTick() - tickstart) > 100) return BSP_ERROR;
 80081ee:	e004      	b.n	80081fa <BSP_STM32_RCC_CLKConfig_RTC+0x1e>
 80081f0:	f7fb ff92 	bl	8004118 <BSP_GetTick>
 80081f4:	1b40      	subs	r0, r0, r5
 80081f6:	2864      	cmp	r0, #100	; 0x64
 80081f8:	d82e      	bhi.n	8008258 <BSP_STM32_RCC_CLKConfig_RTC+0x7c>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	05da      	lsls	r2, r3, #23
 80081fe:	d5f7      	bpl.n	80081f0 <BSP_STM32_RCC_CLKConfig_RTC+0x14>

	// Reset the Backup domain only if the RTC Clock source selection is modified
	if ((RCC->BDCR & RCC_BDCR_RTCSEL) != RCC_RTCCLKSOURCE_LSE) {
 8008200:	4b17      	ldr	r3, [pc, #92]	; (8008260 <BSP_STM32_RCC_CLKConfig_RTC+0x84>)
 8008202:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008204:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008208:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800820c:	d00b      	beq.n	8008226 <BSP_STM32_RCC_CLKConfig_RTC+0x4a>

		// Store the content of BDCR register before the reset of Backup Domain
	    tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800820e:	6f1a      	ldr	r2, [r3, #112]	; 0x70

	    // RTC Clock selection can be changed only if the Backup Domain is reset
	    __BSP_RCC_BACKUPRESET_FORCE();
 8008210:	6f19      	ldr	r1, [r3, #112]	; 0x70
	    tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008212:	f422 7240 	bic.w	r2, r2, #768	; 0x300
	    __BSP_RCC_BACKUPRESET_FORCE();
 8008216:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800821a:	6719      	str	r1, [r3, #112]	; 0x70
	    __BSP_RCC_BACKUPRESET_RELEASE();
 800821c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800821e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008222:	6719      	str	r1, [r3, #112]	; 0x70

	    // Restore the Content of BDCR register
	    RCC->BDCR = tmpreg;
 8008224:	671a      	str	r2, [r3, #112]	; 0x70
	}

	// Wait for LSE reactivation
    tickstart = BSP_GetTick();
 8008226:	f7fb ff77 	bl	8004118 <BSP_GetTick>

	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_ERROR;
 800822a:	4c0d      	ldr	r4, [pc, #52]	; (8008260 <BSP_STM32_RCC_CLKConfig_RTC+0x84>)
 800822c:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = BSP_GetTick();
 8008230:	4605      	mov	r5, r0
	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_ERROR;
 8008232:	e004      	b.n	800823e <BSP_STM32_RCC_CLKConfig_RTC+0x62>
 8008234:	f7fb ff70 	bl	8004118 <BSP_GetTick>
 8008238:	1b40      	subs	r0, r0, r5
 800823a:	42b0      	cmp	r0, r6
 800823c:	d80c      	bhi.n	8008258 <BSP_STM32_RCC_CLKConfig_RTC+0x7c>
 800823e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008240:	079b      	lsls	r3, r3, #30
 8008242:	d5f7      	bpl.n	8008234 <BSP_STM32_RCC_CLKConfig_RTC+0x58>

	__BSP_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8008244:	6923      	ldr	r3, [r4, #16]

	return BSP_OK;
 8008246:	2000      	movs	r0, #0
	__BSP_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8008248:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800824c:	6123      	str	r3, [r4, #16]
 800824e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008254:	6723      	str	r3, [r4, #112]	; 0x70
}
 8008256:	bd70      	pop	{r4, r5, r6, pc}
	while ((PWR->CR1 & PWR_CR1_DBP) == 0) if ((BSP_GetTick() - tickstart) > 100) return BSP_ERROR;
 8008258:	2001      	movs	r0, #1
}
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	58024800 	.word	0x58024800
 8008260:	58024400 	.word	0x58024400

08008264 <BSP_STM32_RCC_CLKConfig_FMC>:

// Setting FMC clock source to HCLK
uint8_t BSP_STM32_RCC_CLKConfig_FMC() {
	// This is default configuration. Nothing to change.
	return BSP_OK;
}
 8008264:	2000      	movs	r0, #0
 8008266:	4770      	bx	lr

08008268 <BSP_STM32_RCC_CLKConfig_I2C1>:

// Setting I2C1 clock source to PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_I2C1() {
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_I2C123SEL, RCC_I2C123CLKSOURCE_D2PCLK1);
 8008268:	4a03      	ldr	r2, [pc, #12]	; (8008278 <BSP_STM32_RCC_CLKConfig_I2C1+0x10>)
	return BSP_OK;
}
 800826a:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_I2C123SEL, RCC_I2C123CLKSOURCE_D2PCLK1);
 800826c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800826e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008272:	6553      	str	r3, [r2, #84]	; 0x54
}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	58024400 	.word	0x58024400

0800827c <BSP_STM32_RCC_CLKConfig_I2C4>:

// Setting I2C4 clock source to PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_I2C4() {
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_I2C4SEL, RCC_I2C4CLKSOURCE_D3PCLK1);
 800827c:	4a03      	ldr	r2, [pc, #12]	; (800828c <BSP_STM32_RCC_CLKConfig_I2C4+0x10>)
	return BSP_OK;
}
 800827e:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_I2C4SEL, RCC_I2C4CLKSOURCE_D3PCLK1);
 8008280:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008286:	6593      	str	r3, [r2, #88]	; 0x58
}
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	58024400 	.word	0x58024400

08008290 <BSP_STM32_RCC_CLKConfig_QSPI>:
}


// Setting QSPI clock source to D1HCLK
uint8_t BSP_STM32_RCC_CLKConfig_QSPI() {
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_QSPISEL, RCC_QSPICLKSOURCE_D1HCLK);
 8008290:	4a03      	ldr	r2, [pc, #12]	; (80082a0 <BSP_STM32_RCC_CLKConfig_QSPI+0x10>)
	return BSP_OK;
}
 8008292:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_QSPISEL, RCC_QSPICLKSOURCE_D1HCLK);
 8008294:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008296:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800829a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	58024400 	.word	0x58024400

080082a4 <BSP_STM32_RCC_CLKConfig_SDMMC2>:


// Setting SDMMC2 clock source to PLL
uint8_t BSP_STM32_RCC_CLKConfig_SDMMC2() {
	RCC->PLLCFGR |= RCC_PLLCFGR_DIVQ1EN;
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <BSP_STM32_RCC_CLKConfig_SDMMC2+0x18>)
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_SDMMCSEL, RCC_SDMMCCLKSOURCE_PLL);
	return BSP_OK;
}
 80082a6:	2000      	movs	r0, #0
	RCC->PLLCFGR |= RCC_PLLCFGR_DIVQ1EN;
 80082a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_SDMMCSEL, RCC_SDMMCCLKSOURCE_PLL);
 80082b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082b6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400

080082c0 <BSP_STM32_RCC_CLKConfig_UART5>:


// Setting UART5 clock source to D2PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_UART5() {
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USART28SEL, RCC_USART234578CLKSOURCE_D2PCLK1);
 80082c0:	4a03      	ldr	r2, [pc, #12]	; (80082d0 <BSP_STM32_RCC_CLKConfig_UART5+0x10>)
	return BSP_OK;
}
 80082c2:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USART28SEL, RCC_USART234578CLKSOURCE_D2PCLK1);
 80082c4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80082c6:	f023 0307 	bic.w	r3, r3, #7
 80082ca:	6553      	str	r3, [r2, #84]	; 0x54
}
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	58024400 	.word	0x58024400

080082d4 <BSP_STM32_RCC_CLKConfig_USART2>:
 80082d4:	4a03      	ldr	r2, [pc, #12]	; (80082e4 <BSP_STM32_RCC_CLKConfig_USART2+0x10>)
 80082d6:	2000      	movs	r0, #0
 80082d8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80082da:	f023 0307 	bic.w	r3, r3, #7
 80082de:	6553      	str	r3, [r2, #84]	; 0x54
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	58024400 	.word	0x58024400

080082e8 <BSP_STM32_RCC_CLKConfig_USBFS>:
	return BSP_OK;
}

// Setting USBFS clock source to_HSI48
uint8_t BSP_STM32_RCC_CLKConfig_USBFS() {
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USBSEL, RCC_USBCLKSOURCE_HSI48);
 80082e8:	4a03      	ldr	r2, [pc, #12]	; (80082f8 <BSP_STM32_RCC_CLKConfig_USBFS+0x10>)
	return BSP_OK;
}
 80082ea:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USBSEL, RCC_USBCLKSOURCE_HSI48);
 80082ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80082ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082f2:	6553      	str	r3, [r2, #84]	; 0x54
}
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	58024400 	.word	0x58024400

080082fc <BSP_STM32_RCC_CLKConfig_ADC>:

// Setting ADC clock source to PLL3
uint8_t BSP_STM32_RCC_CLKConfig_ADC() {
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, RCC_ADCCLKSOURCE_PLL3);
 80082fc:	4a04      	ldr	r2, [pc, #16]	; (8008310 <BSP_STM32_RCC_CLKConfig_ADC+0x14>)
	return BSP_OK;
}
 80082fe:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, RCC_ADCCLKSOURCE_PLL3);
 8008300:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008302:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	58024400 	.word	0x58024400

08008314 <BSP_STM32_RCC_CLKConfig_LTDC>:
 8008314:	2000      	movs	r0, #0
 8008316:	4770      	bx	lr

08008318 <BSP_STM32_RCC_PLLClockSource>:
	return BSP_OK;
}

// Setting the PLL clock source
uint8_t BSP_STM32_RCC_PLLClockSource(uint32_t pllsource) {
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, pllsource);
 8008318:	4a04      	ldr	r2, [pc, #16]	; (800832c <BSP_STM32_RCC_PLLClockSource+0x14>)
uint8_t BSP_STM32_RCC_PLLClockSource(uint32_t pllsource) {
 800831a:	4601      	mov	r1, r0
	return BSP_OK;
}
 800831c:	2000      	movs	r0, #0
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, pllsource);
 800831e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008320:	f023 0303 	bic.w	r3, r3, #3
 8008324:	430b      	orrs	r3, r1
 8008326:	6293      	str	r3, [r2, #40]	; 0x28
}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	58024400 	.word	0x58024400

08008330 <BSP_STM32_RCC_LSEConfigDrive>:

// Setting LSE drive capability
uint8_t BSP_STM32_RCC_LSEConfigDrive(uint32_t lsedrive) {
	MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, lsedrive);
 8008330:	4a04      	ldr	r2, [pc, #16]	; (8008344 <BSP_STM32_RCC_LSEConfigDrive+0x14>)
uint8_t BSP_STM32_RCC_LSEConfigDrive(uint32_t lsedrive) {
 8008332:	4601      	mov	r1, r0
	return BSP_OK;
}
 8008334:	2000      	movs	r0, #0
	MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, lsedrive);
 8008336:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008338:	f023 0318 	bic.w	r3, r3, #24
 800833c:	430b      	orrs	r3, r1
 800833e:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	58024400 	.word	0x58024400

08008348 <BSP_STM32_RCC_ConfigHSE>:
uint8_t BSP_STM32_RCC_ConfigHSE(uint32_t hsestate) {

	uint32_t tickstart;

	// Getting system clock source
    uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 8008348:	4a2e      	ldr	r2, [pc, #184]	; (8008404 <BSP_STM32_RCC_ConfigHSE+0xbc>)
uint8_t BSP_STM32_RCC_ConfigHSE(uint32_t hsestate) {
 800834a:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 800834c:	6913      	ldr	r3, [r2, #16]
    uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800834e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 8008350:	f003 0338 	and.w	r3, r3, #56	; 0x38

    // When the HSE is used as system clock or clock source for PLL in these cases HSE will not be disabled
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE))) {
 8008354:	2b10      	cmp	r3, #16
 8008356:	d024      	beq.n	80083a2 <BSP_STM32_RCC_ConfigHSE+0x5a>
 8008358:	2b18      	cmp	r3, #24
 800835a:	d01e      	beq.n	800839a <BSP_STM32_RCC_ConfigHSE+0x52>
    	if (((RCC->CR & RCC_CR_HSERDY) != 0U) && (hsestate == RCC_HSE_OFF)) return BSP_ERROR;

    } else {

    	// Set the new HSE configuration
    	switch (hsestate) {
 800835c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8008360:	d049      	beq.n	80083f6 <BSP_STM32_RCC_ConfigHSE+0xae>
 8008362:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 8008366:	d03c      	beq.n	80083e2 <BSP_STM32_RCC_ConfigHSE+0x9a>
 8008368:	b318      	cbz	r0, 80083b2 <BSP_STM32_RCC_ConfigHSE+0x6a>
    	case RCC_HSE_BYPASS:
    		SET_BIT(RCC->CR, RCC_CR_HSEBYP);
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
    		break;
    	default:
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800836a:	4b26      	ldr	r3, [pc, #152]	; (8008404 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008372:	601a      	str	r2, [r3, #0]
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800837a:	601a      	str	r2, [r3, #0]
    	}

    	// Check the HSE State

    	tickstart = BSP_GetTick();
 800837c:	f7fb fecc 	bl	8004118 <BSP_GetTick>
    	if (hsestate != RCC_HSE_OFF) {

    		// Wait till HSE is ready
    		while ((RCC->CR & RCC_CR_HSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 8008380:	4d20      	ldr	r5, [pc, #128]	; (8008404 <BSP_STM32_RCC_ConfigHSE+0xbc>)
    	tickstart = BSP_GetTick();
 8008382:	4604      	mov	r4, r0
    	if (hsestate != RCC_HSE_OFF) {
 8008384:	e004      	b.n	8008390 <BSP_STM32_RCC_ConfigHSE+0x48>
    		while ((RCC->CR & RCC_CR_HSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 8008386:	f7fb fec7 	bl	8004118 <BSP_GetTick>
 800838a:	1b00      	subs	r0, r0, r4
 800838c:	2864      	cmp	r0, #100	; 0x64
 800838e:	d826      	bhi.n	80083de <BSP_STM32_RCC_ConfigHSE+0x96>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	039a      	lsls	r2, r3, #14
 8008394:	d5f7      	bpl.n	8008386 <BSP_STM32_RCC_ConfigHSE+0x3e>
    		// Wait till HSE is disabled
    		while ((RCC->CR & RCC_CR_HSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;

        }
    }
    return BSP_OK;
 8008396:	2000      	movs	r0, #0
}
 8008398:	bd38      	pop	{r3, r4, r5, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE))) {
 800839a:	f002 0203 	and.w	r2, r2, #3
 800839e:	2a02      	cmp	r2, #2
 80083a0:	d1dc      	bne.n	800835c <BSP_STM32_RCC_ConfigHSE+0x14>
    	if (((RCC->CR & RCC_CR_HSERDY) != 0U) && (hsestate == RCC_HSE_OFF)) return BSP_ERROR;
 80083a2:	4b18      	ldr	r3, [pc, #96]	; (8008404 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 80083a4:	fab0 f080 	clz	r0, r0
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	0940      	lsrs	r0, r0, #5
 80083ac:	ea00 4053 	and.w	r0, r0, r3, lsr #17
}
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80083b2:	4c14      	ldr	r4, [pc, #80]	; (8008404 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ba:	6023      	str	r3, [r4, #0]
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083c2:	6023      	str	r3, [r4, #0]
    	tickstart = BSP_GetTick();
 80083c4:	f7fb fea8 	bl	8004118 <BSP_GetTick>
 80083c8:	4605      	mov	r5, r0
    	if (hsestate != RCC_HSE_OFF) {
 80083ca:	e004      	b.n	80083d6 <BSP_STM32_RCC_ConfigHSE+0x8e>
    		while ((RCC->CR & RCC_CR_HSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 80083cc:	f7fb fea4 	bl	8004118 <BSP_GetTick>
 80083d0:	1b40      	subs	r0, r0, r5
 80083d2:	2864      	cmp	r0, #100	; 0x64
 80083d4:	d803      	bhi.n	80083de <BSP_STM32_RCC_ConfigHSE+0x96>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	039b      	lsls	r3, r3, #14
 80083da:	d4f7      	bmi.n	80083cc <BSP_STM32_RCC_ConfigHSE+0x84>
 80083dc:	e7db      	b.n	8008396 <BSP_STM32_RCC_ConfigHSE+0x4e>
    		while ((RCC->CR & RCC_CR_HSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 80083de:	2003      	movs	r0, #3
}
 80083e0:	bd38      	pop	{r3, r4, r5, pc}
    		SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083ea:	601a      	str	r2, [r3, #0]
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083f2:	601a      	str	r2, [r3, #0]
    		break;
 80083f4:	e7c2      	b.n	800837c <BSP_STM32_RCC_ConfigHSE+0x34>
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
 80083f6:	4a03      	ldr	r2, [pc, #12]	; (8008404 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 80083f8:	6813      	ldr	r3, [r2, #0]
 80083fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083fe:	6013      	str	r3, [r2, #0]
    		break;
 8008400:	e7bc      	b.n	800837c <BSP_STM32_RCC_ConfigHSE+0x34>
 8008402:	bf00      	nop
 8008404:	58024400 	.word	0x58024400

08008408 <BSP_STM32_RCC_ConfigHSI>:
uint8_t BSP_STM32_RCC_ConfigHSI(uint32_t hsistate, uint32_t hsicalvalue) {

	uint32_t tickstart;

    // When the HSI is used as system clock it will not be disabled
    const uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 8008408:	4a2a      	ldr	r2, [pc, #168]	; (80084b4 <BSP_STM32_RCC_ConfigHSI+0xac>)
 800840a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800840c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI))) {
 800840e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
uint8_t BSP_STM32_RCC_ConfigHSI(uint32_t hsistate, uint32_t hsicalvalue) {
 8008412:	b570      	push	{r4, r5, r6, lr}
 8008414:	460d      	mov	r5, r1
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI))) {
 8008416:	d01f      	beq.n	8008458 <BSP_STM32_RCC_ConfigHSI+0x50>
 8008418:	2b18      	cmp	r3, #24
 800841a:	d01b      	beq.n	8008454 <BSP_STM32_RCC_ConfigHSI+0x4c>

    	// Check the HSI State
    	if (hsistate != RCC_HSI_OFF) {

    		// Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8)
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 800841c:	4c25      	ldr	r4, [pc, #148]	; (80084b4 <BSP_STM32_RCC_ConfigHSI+0xac>)
 800841e:	6823      	ldr	r3, [r4, #0]
    	if (hsistate != RCC_HSI_OFF) {
 8008420:	2800      	cmp	r0, #0
 8008422:	d033      	beq.n	800848c <BSP_STM32_RCC_ConfigHSI+0x84>
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 8008424:	f023 0319 	bic.w	r3, r3, #25
 8008428:	4303      	orrs	r3, r0
 800842a:	6023      	str	r3, [r4, #0]

    		// Wait till HSI is ready
    		tickstart = BSP_GetTick();
 800842c:	f7fb fe74 	bl	8004118 <BSP_GetTick>
 8008430:	4606      	mov	r6, r0
    		while ((RCC->CR & RCC_CR_HSIRDY) == 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008432:	e004      	b.n	800843e <BSP_STM32_RCC_ConfigHSI+0x36>
 8008434:	f7fb fe70 	bl	8004118 <BSP_GetTick>
 8008438:	1b80      	subs	r0, r0, r6
 800843a:	2802      	cmp	r0, #2
 800843c:	d824      	bhi.n	8008488 <BSP_STM32_RCC_ConfigHSI+0x80>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	075b      	lsls	r3, r3, #29
 8008442:	d5f7      	bpl.n	8008434 <BSP_STM32_RCC_ConfigHSI+0x2c>

    		// Adjusts the Internal High Speed oscillator (HSI) calibration value (REV_V only)
    		MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, hsicalvalue << RCC_HSICFGR_HSITRIM_Pos);
 8008444:	6863      	ldr	r3, [r4, #4]
    	  	while ((RCC->CR & RCC_CR_HSIRDY) != 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
    	}

    }

    return BSP_OK;
 8008446:	2000      	movs	r0, #0
    		MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, hsicalvalue << RCC_HSICFGR_HSITRIM_Pos);
 8008448:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800844c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8008450:	6063      	str	r3, [r4, #4]
}
 8008452:	bd70      	pop	{r4, r5, r6, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI))) {
 8008454:	0794      	lsls	r4, r2, #30
 8008456:	d1e1      	bne.n	800841c <BSP_STM32_RCC_ConfigHSI+0x14>
    	if (((RCC->CR & RCC_CR_HSIRDY) != 0U) && (hsistate == RCC_HSI_OFF)) {
 8008458:	4b16      	ldr	r3, [pc, #88]	; (80084b4 <BSP_STM32_RCC_ConfigHSI+0xac>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	0759      	lsls	r1, r3, #29
 800845e:	d500      	bpl.n	8008462 <BSP_STM32_RCC_ConfigHSI+0x5a>
 8008460:	b330      	cbz	r0, 80084b0 <BSP_STM32_RCC_ConfigHSI+0xa8>
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 8008462:	4c14      	ldr	r4, [pc, #80]	; (80084b4 <BSP_STM32_RCC_ConfigHSI+0xac>)
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	f023 0319 	bic.w	r3, r3, #25
 800846a:	4303      	orrs	r3, r0
 800846c:	6023      	str	r3, [r4, #0]
    		tickstart = BSP_GetTick();
 800846e:	f7fb fe53 	bl	8004118 <BSP_GetTick>
 8008472:	4606      	mov	r6, r0
    		while ((RCC->CR & RCC_CR_HSIRDY) == 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008474:	e004      	b.n	8008480 <BSP_STM32_RCC_ConfigHSI+0x78>
 8008476:	f7fb fe4f 	bl	8004118 <BSP_GetTick>
 800847a:	1b80      	subs	r0, r0, r6
 800847c:	2802      	cmp	r0, #2
 800847e:	d803      	bhi.n	8008488 <BSP_STM32_RCC_ConfigHSI+0x80>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	075a      	lsls	r2, r3, #29
 8008484:	d5f7      	bpl.n	8008476 <BSP_STM32_RCC_ConfigHSI+0x6e>
 8008486:	e7dd      	b.n	8008444 <BSP_STM32_RCC_ConfigHSI+0x3c>
 8008488:	2003      	movs	r0, #3
}
 800848a:	bd70      	pop	{r4, r5, r6, pc}
    		CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800848c:	f023 0301 	bic.w	r3, r3, #1
 8008490:	6023      	str	r3, [r4, #0]
    	  	tickstart = BSP_GetTick();
 8008492:	f7fb fe41 	bl	8004118 <BSP_GetTick>
 8008496:	4605      	mov	r5, r0
    	  	while ((RCC->CR & RCC_CR_HSIRDY) != 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008498:	e004      	b.n	80084a4 <BSP_STM32_RCC_ConfigHSI+0x9c>
 800849a:	f7fb fe3d 	bl	8004118 <BSP_GetTick>
 800849e:	1b40      	subs	r0, r0, r5
 80084a0:	2802      	cmp	r0, #2
 80084a2:	d8f1      	bhi.n	8008488 <BSP_STM32_RCC_ConfigHSI+0x80>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	f013 0304 	ands.w	r3, r3, #4
 80084aa:	d1f6      	bne.n	800849a <BSP_STM32_RCC_ConfigHSI+0x92>
    return BSP_OK;
 80084ac:	4618      	mov	r0, r3
}
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
    		return BSP_ERROR;
 80084b0:	2001      	movs	r0, #1
}
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	58024400 	.word	0x58024400

080084b8 <BSP_STM32_RCC_ConfigLSE>:


// Configure LSE Oscillator
uint8_t BSP_STM32_RCC_ConfigLSE(uint32_t lsestate) {
 80084b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t tickstart;

	// Enable write access to Backup domain
    PWR->CR1 |= PWR_CR1_DBP;
 80084ba:	4c2e      	ldr	r4, [pc, #184]	; (8008574 <BSP_STM32_RCC_ConfigLSE+0xbc>)
uint8_t BSP_STM32_RCC_ConfigLSE(uint32_t lsestate) {
 80084bc:	4606      	mov	r6, r0
    PWR->CR1 |= PWR_CR1_DBP;
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c4:	6023      	str	r3, [r4, #0]

    // Wait for Backup domain Write protection disable
    tickstart = BSP_GetTick();
 80084c6:	f7fb fe27 	bl	8004118 <BSP_GetTick>
 80084ca:	4605      	mov	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 80084cc:	e004      	b.n	80084d8 <BSP_STM32_RCC_ConfigLSE+0x20>
 80084ce:	f7fb fe23 	bl	8004118 <BSP_GetTick>
 80084d2:	1b43      	subs	r3, r0, r5
 80084d4:	2b64      	cmp	r3, #100	; 0x64
 80084d6:	d821      	bhi.n	800851c <BSP_STM32_RCC_ConfigLSE+0x64>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	05d9      	lsls	r1, r3, #23
 80084dc:	d5f7      	bpl.n	80084ce <BSP_STM32_RCC_ConfigLSE+0x16>

    // Set the new LSE configuration
    switch (lsestate) {
 80084de:	2e01      	cmp	r6, #1
 80084e0:	d041      	beq.n	8008566 <BSP_STM32_RCC_ConfigLSE+0xae>
 80084e2:	2e05      	cmp	r6, #5
 80084e4:	d035      	beq.n	8008552 <BSP_STM32_RCC_ConfigLSE+0x9a>
 80084e6:	b1de      	cbz	r6, 8008520 <BSP_STM32_RCC_ConfigLSE+0x68>
    case RCC_LSE_BYPASS:
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
    	break;
	default:
		CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80084e8:	4b23      	ldr	r3, [pc, #140]	; (8008578 <BSP_STM32_RCC_ConfigLSE+0xc0>)
 80084ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084ec:	f022 0201 	bic.w	r2, r2, #1
 80084f0:	671a      	str	r2, [r3, #112]	; 0x70
		CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80084f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084f4:	f022 0204 	bic.w	r2, r2, #4
 80084f8:	671a      	str	r2, [r3, #112]	; 0x70
    }


    // Check the LSE State
    tickstart = BSP_GetTick();
 80084fa:	f7fb fe0d 	bl	8004118 <BSP_GetTick>
    if (lsestate != RCC_LSE_OFF) {

    	// Wait till LSE is ready
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80084fe:	4d1e      	ldr	r5, [pc, #120]	; (8008578 <BSP_STM32_RCC_ConfigLSE+0xc0>)
 8008500:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = BSP_GetTick();
 8008504:	4604      	mov	r4, r0
    if (lsestate != RCC_LSE_OFF) {
 8008506:	e004      	b.n	8008512 <BSP_STM32_RCC_ConfigLSE+0x5a>
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 8008508:	f7fb fe06 	bl	8004118 <BSP_GetTick>
 800850c:	1b00      	subs	r0, r0, r4
 800850e:	42b0      	cmp	r0, r6
 8008510:	d804      	bhi.n	800851c <BSP_STM32_RCC_ConfigLSE+0x64>
 8008512:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008514:	079a      	lsls	r2, r3, #30
 8008516:	d5f7      	bpl.n	8008508 <BSP_STM32_RCC_ConfigLSE+0x50>

    	// Wait till LSE is disabled
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;

    }
    return BSP_OK;
 8008518:	2000      	movs	r0, #0
}
 800851a:	bd70      	pop	{r4, r5, r6, pc}
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 800851c:	2003      	movs	r0, #3
}
 800851e:	bd70      	pop	{r4, r5, r6, pc}
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008520:	4c15      	ldr	r4, [pc, #84]	; (8008578 <BSP_STM32_RCC_ConfigLSE+0xc0>)
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 8008522:	f241 3688 	movw	r6, #5000	; 0x1388
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008526:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008528:	f023 0301 	bic.w	r3, r3, #1
 800852c:	6723      	str	r3, [r4, #112]	; 0x70
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800852e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008530:	f023 0304 	bic.w	r3, r3, #4
 8008534:	6723      	str	r3, [r4, #112]	; 0x70
    tickstart = BSP_GetTick();
 8008536:	f7fb fdef 	bl	8004118 <BSP_GetTick>
 800853a:	4605      	mov	r5, r0
    if (lsestate != RCC_LSE_OFF) {
 800853c:	e004      	b.n	8008548 <BSP_STM32_RCC_ConfigLSE+0x90>
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 800853e:	f7fb fdeb 	bl	8004118 <BSP_GetTick>
 8008542:	1b40      	subs	r0, r0, r5
 8008544:	42b0      	cmp	r0, r6
 8008546:	d8e9      	bhi.n	800851c <BSP_STM32_RCC_ConfigLSE+0x64>
 8008548:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800854a:	079b      	lsls	r3, r3, #30
 800854c:	d4f7      	bmi.n	800853e <BSP_STM32_RCC_ConfigLSE+0x86>
    return BSP_OK;
 800854e:	2000      	movs	r0, #0
 8008550:	e7e3      	b.n	800851a <BSP_STM32_RCC_ConfigLSE+0x62>
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008552:	4b09      	ldr	r3, [pc, #36]	; (8008578 <BSP_STM32_RCC_ConfigLSE+0xc0>)
 8008554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008556:	f042 0204 	orr.w	r2, r2, #4
 800855a:	671a      	str	r2, [r3, #112]	; 0x70
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800855c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	671a      	str	r2, [r3, #112]	; 0x70
    	break;
 8008564:	e7c9      	b.n	80084fa <BSP_STM32_RCC_ConfigLSE+0x42>
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008566:	4a04      	ldr	r2, [pc, #16]	; (8008578 <BSP_STM32_RCC_ConfigLSE+0xc0>)
 8008568:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6713      	str	r3, [r2, #112]	; 0x70
    	break;
 8008570:	e7c3      	b.n	80084fa <BSP_STM32_RCC_ConfigLSE+0x42>
 8008572:	bf00      	nop
 8008574:	58024800 	.word	0x58024800
 8008578:	58024400 	.word	0x58024400

0800857c <BSP_STM32_RCC_ConfigHSI48>:

// Configure HSI48 Oscillator
uint8_t BSP_STM32_RCC_ConfigHSI48(uint32_t hsi48state) {
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4605      	mov	r5, r0

	uint32_t tickstart = BSP_GetTick();
 8008580:	f7fb fdca 	bl	8004118 <BSP_GetTick>
 8008584:	4604      	mov	r4, r0

    // Check the HSI48 State
    if (hsi48state != RCC_HSI48_OFF) {
 8008586:	b17d      	cbz	r5, 80085a8 <BSP_STM32_RCC_ConfigHSI48+0x2c>
    	// Enable the Internal Low Speed oscillator (HSI48)
    	SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 8008588:	4d10      	ldr	r5, [pc, #64]	; (80085cc <BSP_STM32_RCC_ConfigHSI48+0x50>)
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008590:	602b      	str	r3, [r5, #0]

    	// Wait till HSI48 is ready
    	while ((RCC->CR & RCC_CR_HSI48RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008592:	e004      	b.n	800859e <BSP_STM32_RCC_ConfigHSI48+0x22>
 8008594:	f7fb fdc0 	bl	8004118 <BSP_GetTick>
 8008598:	1b03      	subs	r3, r0, r4
 800859a:	2b02      	cmp	r3, #2
 800859c:	d813      	bhi.n	80085c6 <BSP_STM32_RCC_ConfigHSI48+0x4a>
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	049a      	lsls	r2, r3, #18
 80085a2:	d5f7      	bpl.n	8008594 <BSP_STM32_RCC_ConfigHSI48+0x18>
    	/* Wait till HSI48 is ready */
    	while ((RCC->CR & RCC_CR_HSI48RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;

    }

    return BSP_OK;
 80085a4:	2000      	movs	r0, #0
}
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
    	CLEAR_BIT(RCC->CR, RCC_CR_HSI48ON);
 80085a8:	4d08      	ldr	r5, [pc, #32]	; (80085cc <BSP_STM32_RCC_ConfigHSI48+0x50>)
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085b0:	602b      	str	r3, [r5, #0]
    	while ((RCC->CR & RCC_CR_HSI48RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80085b2:	e004      	b.n	80085be <BSP_STM32_RCC_ConfigHSI48+0x42>
 80085b4:	f7fb fdb0 	bl	8004118 <BSP_GetTick>
 80085b8:	1b03      	subs	r3, r0, r4
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d803      	bhi.n	80085c6 <BSP_STM32_RCC_ConfigHSI48+0x4a>
 80085be:	682b      	ldr	r3, [r5, #0]
 80085c0:	049b      	lsls	r3, r3, #18
 80085c2:	d4f7      	bmi.n	80085b4 <BSP_STM32_RCC_ConfigHSI48+0x38>
 80085c4:	e7ee      	b.n	80085a4 <BSP_STM32_RCC_ConfigHSI48+0x28>
    	while ((RCC->CR & RCC_CR_HSI48RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80085c6:	2003      	movs	r0, #3
}
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	58024400 	.word	0x58024400

080085d0 <BSP_STM32_RCC_ConfigPLL1>:


uint8_t BSP_STM32_RCC_ConfigPLL1(uint32_t pllstate, uint32_t pllsource, uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r) {
 80085d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	uint32_t tickstart;

	// Check if the PLL is used as system clock or not
	if ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL1) {
 80085d4:	4c43      	ldr	r4, [pc, #268]	; (80086e4 <BSP_STM32_RCC_ConfigPLL1+0x114>)
 80085d6:	6925      	ldr	r5, [r4, #16]
 80085d8:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80085dc:	2d18      	cmp	r5, #24
 80085de:	d07e      	beq.n	80086de <BSP_STM32_RCC_ConfigPLL1+0x10e>

		if (pllstate == RCC_PLL_ON) {
 80085e0:	2802      	cmp	r0, #2
 80085e2:	d015      	beq.n	8008610 <BSP_STM32_RCC_ConfigPLL1+0x40>
			while ((RCC->CR & RCC_CR_PLL1RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;

		} else {

			// Disable the main PLL
			CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ea:	6023      	str	r3, [r4, #0]

			// Wait till PLL is disabled
			tickstart = BSP_GetTick();
 80085ec:	f7fb fd94 	bl	8004118 <BSP_GetTick>
 80085f0:	4605      	mov	r5, r0
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80085f2:	e004      	b.n	80085fe <BSP_STM32_RCC_ConfigPLL1+0x2e>
 80085f4:	f7fb fd90 	bl	8004118 <BSP_GetTick>
 80085f8:	1b40      	subs	r0, r0, r5
 80085fa:	2802      	cmp	r0, #2
 80085fc:	d805      	bhi.n	800860a <BSP_STM32_RCC_ConfigPLL1+0x3a>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	019b      	lsls	r3, r3, #6
 8008602:	d4f7      	bmi.n	80085f4 <BSP_STM32_RCC_ConfigPLL1+0x24>
    	// PLL1 already used as SYSCLK source, therefore full configuration cannot be completed
    	return BSP_ERROR;

    }

	return BSP_OK;
 8008604:	2000      	movs	r0, #0

}
 8008606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800860a:	2003      	movs	r0, #3
}
 800860c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008610:	461e      	mov	r6, r3
			CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	4688      	mov	r8, r1
 8008616:	4617      	mov	r7, r2
 8008618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800861c:	6023      	str	r3, [r4, #0]
			tickstart = BSP_GetTick();
 800861e:	f7fb fd7b 	bl	8004118 <BSP_GetTick>
 8008622:	4681      	mov	r9, r0
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008624:	e005      	b.n	8008632 <BSP_STM32_RCC_ConfigPLL1+0x62>
 8008626:	f7fb fd77 	bl	8004118 <BSP_GetTick>
 800862a:	eba0 0009 	sub.w	r0, r0, r9
 800862e:	2802      	cmp	r0, #2
 8008630:	d8eb      	bhi.n	800860a <BSP_STM32_RCC_ConfigPLL1+0x3a>
 8008632:	6825      	ldr	r5, [r4, #0]
 8008634:	01a9      	lsls	r1, r5, #6
 8008636:	d4f6      	bmi.n	8008626 <BSP_STM32_RCC_ConfigPLL1+0x56>
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800863c:	3b01      	subs	r3, #1
			MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | RCC_PLLCKSELR_DIVM1) , (pllsource | ( m << 4)));
 800863e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008640:	3a01      	subs	r2, #1
			while ((RCC->CR & RCC_CR_PLL1RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008642:	4d28      	ldr	r5, [pc, #160]	; (80086e4 <BSP_STM32_RCC_ConfigPLL1+0x114>)
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008644:	041b      	lsls	r3, r3, #16
 8008646:	0612      	lsls	r2, r2, #24
 8008648:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800864c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008650:	4313      	orrs	r3, r2
			MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | RCC_PLLCKSELR_DIVM1) , (pllsource | ( m << 4)));
 8008652:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <BSP_STM32_RCC_ConfigPLL1+0x118>)
 8008654:	400a      	ands	r2, r1
 8008656:	9908      	ldr	r1, [sp, #32]
 8008658:	ea42 0208 	orr.w	r2, r2, r8
 800865c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8008660:	62a2      	str	r2, [r4, #40]	; 0x28
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008664:	3a01      	subs	r2, #1
 8008666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800866a:	4313      	orrs	r3, r2
 800866c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800866e:	3a01      	subs	r2, #1
 8008670:	0252      	lsls	r2, r2, #9
 8008672:	b292      	uxth	r2, r2
 8008674:	4313      	orrs	r3, r2
			MODIFY_REG(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1, 0 << RCC_PLL1FRACR_FRACN1_Pos);
 8008676:	4a1d      	ldr	r2, [pc, #116]	; (80086ec <BSP_STM32_RCC_ConfigPLL1+0x11c>)
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008678:	6323      	str	r3, [r4, #48]	; 0x30
			CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 800867a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800867c:	f023 0301 	bic.w	r3, r3, #1
 8008680:	62e3      	str	r3, [r4, #44]	; 0x2c
			MODIFY_REG(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1, 0 << RCC_PLL1FRACR_FRACN1_Pos);
 8008682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008684:	401a      	ands	r2, r3
 8008686:	6362      	str	r2, [r4, #52]	; 0x34
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, pllrge);
 8008688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800868a:	f023 030c 	bic.w	r3, r3, #12
 800868e:	433b      	orrs	r3, r7
 8008690:	62e3      	str	r3, [r4, #44]	; 0x2c
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, pllvcosel);
 8008692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008694:	f023 0302 	bic.w	r3, r3, #2
 8008698:	4333      	orrs	r3, r6
 800869a:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVP);
 800869c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800869e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086a2:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVQ);
 80086a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80086a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086aa:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVR);
 80086ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80086ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086b2:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 80086b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086c2:	6023      	str	r3, [r4, #0]
			tickstart = BSP_GetTick();
 80086c4:	f7fb fd28 	bl	8004118 <BSP_GetTick>
 80086c8:	4604      	mov	r4, r0
			while ((RCC->CR & RCC_CR_PLL1RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80086ca:	e004      	b.n	80086d6 <BSP_STM32_RCC_ConfigPLL1+0x106>
 80086cc:	f7fb fd24 	bl	8004118 <BSP_GetTick>
 80086d0:	1b00      	subs	r0, r0, r4
 80086d2:	2802      	cmp	r0, #2
 80086d4:	d899      	bhi.n	800860a <BSP_STM32_RCC_ConfigPLL1+0x3a>
 80086d6:	682b      	ldr	r3, [r5, #0]
 80086d8:	019a      	lsls	r2, r3, #6
 80086da:	d5f7      	bpl.n	80086cc <BSP_STM32_RCC_ConfigPLL1+0xfc>
 80086dc:	e792      	b.n	8008604 <BSP_STM32_RCC_ConfigPLL1+0x34>
    	return BSP_ERROR;
 80086de:	2001      	movs	r0, #1
}
 80086e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e4:	58024400 	.word	0x58024400
 80086e8:	fffffc0c 	.word	0xfffffc0c
 80086ec:	ffff0007 	.word	0xffff0007

080086f0 <BSP_STM32_RCC_ConfigPLL3>:


uint8_t BSP_STM32_RCC_ConfigPLL3(uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r, uint32_t frac) {
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	uint32_t tickstart;

	// Check that PLL3 OSC clock source is already set
	if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLSOURCE_NONE) return BSP_ERROR;
 80086f4:	4c3b      	ldr	r4, [pc, #236]	; (80087e4 <BSP_STM32_RCC_ConfigPLL3+0xf4>)
uint8_t BSP_STM32_RCC_ConfigPLL3(uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r, uint32_t frac) {
 80086f6:	461e      	mov	r6, r3
	if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLSOURCE_NONE) return BSP_ERROR;
 80086f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d06c      	beq.n	80087dc <BSP_STM32_RCC_ConfigPLL3+0xec>

	// Disable PLL3
	CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	4680      	mov	r8, r0
 8008706:	460f      	mov	r7, r1
 8008708:	4691      	mov	r9, r2
 800870a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800870e:	6023      	str	r3, [r4, #0]

    // Wait till PLL3 is disabled
	tickstart = BSP_GetTick();
 8008710:	f7fb fd02 	bl	8004118 <BSP_GetTick>
 8008714:	4605      	mov	r5, r0
	while ((RCC->CR & RCC_CR_PLL3RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008716:	e006      	b.n	8008726 <BSP_STM32_RCC_ConfigPLL3+0x36>
 8008718:	f7fb fcfe 	bl	8004118 <BSP_GetTick>
 800871c:	eba0 0c05 	sub.w	ip, r0, r5
 8008720:	f1bc 0f02 	cmp.w	ip, #2
 8008724:	d857      	bhi.n	80087d6 <BSP_STM32_RCC_ConfigPLL3+0xe6>
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	009a      	lsls	r2, r3, #2
 800872a:	d4f5      	bmi.n	8008718 <BSP_STM32_RCC_ConfigPLL3+0x28>

    // Configure the PLL3  multiplication and division factors
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3, (m << 20));
    WRITE_REG (RCC->PLL3DIVR, (((n - 1) & RCC_PLL3DIVR_N3) | (((p - 1) << 9U) & RCC_PLL3DIVR_P3) | (((q -1) << 16U) & RCC_PLL3DIVR_Q3) | (((r - 1) << 24U) & RCC_PLL3DIVR_R3)));
 800872c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872e:	3e01      	subs	r6, #1
 8008730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008732:	3b01      	subs	r3, #1
 8008734:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8008738:	3a01      	subs	r2, #1
	// Enable PLL3
    SET_BIT(RCC->CR, RCC_CR_PLL3ON);

    // Wait till PLL3 is enabled
	tickstart = BSP_GetTick();
	while ((RCC->CR & RCC_CR_PLL3RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800873a:	4d2a      	ldr	r5, [pc, #168]	; (80087e4 <BSP_STM32_RCC_ConfigPLL3+0xf4>)
    WRITE_REG (RCC->PLL3DIVR, (((n - 1) & RCC_PLL3DIVR_N3) | (((p - 1) << 9U) & RCC_PLL3DIVR_P3) | (((q -1) << 16U) & RCC_PLL3DIVR_Q3) | (((r - 1) << 24U) & RCC_PLL3DIVR_R3)));
 800873c:	041b      	lsls	r3, r3, #16
 800873e:	0612      	lsls	r2, r2, #24
 8008740:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008744:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008748:	4313      	orrs	r3, r2
 800874a:	9a08      	ldr	r2, [sp, #32]
 800874c:	3a01      	subs	r2, #1
 800874e:	4333      	orrs	r3, r6
 8008750:	0252      	lsls	r2, r2, #9
 8008752:	b292      	uxth	r2, r2
 8008754:	4313      	orrs	r3, r2
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3, (m << 20));
 8008756:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008758:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800875c:	ea42 5209 	orr.w	r2, r2, r9, lsl #20
 8008760:	62a2      	str	r2, [r4, #40]	; 0x28
    WRITE_REG (RCC->PLL3DIVR, (((n - 1) & RCC_PLL3DIVR_N3) | (((p - 1) << 9U) & RCC_PLL3DIVR_P3) | (((q -1) << 16U) & RCC_PLL3DIVR_Q3) | (((r - 1) << 24U) & RCC_PLL3DIVR_R3)));
 8008762:	6423      	str	r3, [r4, #64]	; 0x40
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3RGE, pllrge);
 8008764:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    MODIFY_REG(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3, frac << RCC_PLL3FRACR_FRACN3_Pos);
 8008766:	4b20      	ldr	r3, [pc, #128]	; (80087e8 <BSP_STM32_RCC_ConfigPLL3+0xf8>)
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3RGE, pllrge);
 8008768:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800876c:	ea42 0208 	orr.w	r2, r2, r8
 8008770:	62e2      	str	r2, [r4, #44]	; 0x2c
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3VCOSEL, pllvcosel);
 8008772:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008778:	433a      	orrs	r2, r7
 800877a:	62e2      	str	r2, [r4, #44]	; 0x2c
    CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN);
 800877c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800877e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008782:	62e2      	str	r2, [r4, #44]	; 0x2c
    MODIFY_REG(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3, frac << RCC_PLL3FRACR_FRACN3_Pos);
 8008784:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008786:	4013      	ands	r3, r2
 8008788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800878a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800878e:	6463      	str	r3, [r4, #68]	; 0x44
    SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN);
 8008790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008796:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVP);
 8008798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800879a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800879e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVQ);
 80087a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVR);
 80087a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(RCC->CR, RCC_CR_PLL3ON);
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b6:	6023      	str	r3, [r4, #0]
	tickstart = BSP_GetTick();
 80087b8:	f7fb fcae 	bl	8004118 <BSP_GetTick>
 80087bc:	4604      	mov	r4, r0
	while ((RCC->CR & RCC_CR_PLL3RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80087be:	e004      	b.n	80087ca <BSP_STM32_RCC_ConfigPLL3+0xda>
 80087c0:	f7fb fcaa 	bl	8004118 <BSP_GetTick>
 80087c4:	1b00      	subs	r0, r0, r4
 80087c6:	2802      	cmp	r0, #2
 80087c8:	d805      	bhi.n	80087d6 <BSP_STM32_RCC_ConfigPLL3+0xe6>
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	d5f7      	bpl.n	80087c0 <BSP_STM32_RCC_ConfigPLL3+0xd0>

	return BSP_OK;
 80087d0:	2000      	movs	r0, #0
}
 80087d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	while ((RCC->CR & RCC_CR_PLL3RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80087d6:	2003      	movs	r0, #3
}
 80087d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLSOURCE_NONE) return BSP_ERROR;
 80087dc:	2001      	movs	r0, #1
}
 80087de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087e2:	bf00      	nop
 80087e4:	58024400 	.word	0x58024400
 80087e8:	ffff0007 	.word	0xffff0007

080087ec <BSP_STM32_RCC_ClockConfig>:

uint8_t BSP_STM32_RCC_ClockConfig(uint32_t clocktype, uint32_t SYSSource, uint32_t SYSDiv, uint32_t AHBDiv, uint32_t APB1Div, uint32_t APB2Div, uint32_t APB3Div, uint32_t APB4Div, uint32_t flatency) {
 80087ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// To correctly read data from FLASH memory, the number of wait states (LATENCY) must be correctly programmed
	// according to the frequency of the CPU clock (HCLK) and the supply voltage of the device.

	// Increasing the CPU frequency
	if (flatency > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))  {
 80087f0:	4e85      	ldr	r6, [pc, #532]	; (8008a08 <BSP_STM32_RCC_ClockConfig+0x21c>)
uint8_t BSP_STM32_RCC_ClockConfig(uint32_t clocktype, uint32_t SYSSource, uint32_t SYSDiv, uint32_t AHBDiv, uint32_t APB1Div, uint32_t APB2Div, uint32_t APB3Div, uint32_t APB4Div, uint32_t flatency) {
 80087f2:	b085      	sub	sp, #20
 80087f4:	461d      	mov	r5, r3
	if (flatency > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))  {
 80087f6:	6833      	ldr	r3, [r6, #0]
uint8_t BSP_STM32_RCC_ClockConfig(uint32_t clocktype, uint32_t SYSSource, uint32_t SYSDiv, uint32_t AHBDiv, uint32_t APB1Div, uint32_t APB2Div, uint32_t APB3Div, uint32_t APB4Div, uint32_t flatency) {
 80087f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (flatency > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))  {
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	42a3      	cmp	r3, r4
 8008800:	d20d      	bcs.n	800881e <BSP_STM32_RCC_ClockConfig+0x32>

	    // Program the new number of wait states to the LATENCY bits in the FLASH_ACR register
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, flatency);
 8008802:	6833      	ldr	r3, [r6, #0]
 8008804:	f023 030f 	bic.w	r3, r3, #15
 8008808:	4323      	orrs	r3, r4
 800880a:	6033      	str	r3, [r6, #0]

	    // Check that the new number of wait states is taken into account to access the Flash memory by reading the FLASH_ACR register
	    if ((READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)) != flatency) return BSP_ERROR;
 800880c:	6833      	ldr	r3, [r6, #0]
 800880e:	f003 030f 	and.w	r3, r3, #15
 8008812:	42a3      	cmp	r3, r4
 8008814:	d003      	beq.n	800881e <BSP_STM32_RCC_ClockConfig+0x32>
 8008816:	2001      	movs	r0, #1
		if (APB4Div < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);

	}

	return BSP_OK;
}
 8008818:	b005      	add	sp, #20
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((clocktype & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1) {
 800881e:	f010 0304 	ands.w	r3, r0, #4
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	d00b      	beq.n	800883e <BSP_STM32_RCC_ClockConfig+0x52>
		if (APB3Div > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, APB3Div);
 8008826:	4e79      	ldr	r6, [pc, #484]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 8008828:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800882a:	69b3      	ldr	r3, [r6, #24]
 800882c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008830:	42bb      	cmp	r3, r7
 8008832:	d204      	bcs.n	800883e <BSP_STM32_RCC_ClockConfig+0x52>
 8008834:	69b3      	ldr	r3, [r6, #24]
 8008836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883a:	433b      	orrs	r3, r7
 800883c:	61b3      	str	r3, [r6, #24]
	if ((clocktype & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800883e:	f010 0308 	ands.w	r3, r0, #8
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	d00b      	beq.n	800885e <BSP_STM32_RCC_ClockConfig+0x72>
		if (APB1Div > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, APB1Div);
 8008846:	4e71      	ldr	r6, [pc, #452]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 8008848:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800884a:	69f3      	ldr	r3, [r6, #28]
 800884c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008850:	42bb      	cmp	r3, r7
 8008852:	d204      	bcs.n	800885e <BSP_STM32_RCC_ClockConfig+0x72>
 8008854:	69f3      	ldr	r3, [r6, #28]
 8008856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885a:	433b      	orrs	r3, r7
 800885c:	61f3      	str	r3, [r6, #28]
	if ((clocktype & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800885e:	f010 0b10 	ands.w	fp, r0, #16
 8008862:	d00b      	beq.n	800887c <BSP_STM32_RCC_ClockConfig+0x90>
		if (APB2Div > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, APB2Div);
 8008864:	4e69      	ldr	r6, [pc, #420]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 8008866:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008868:	69f3      	ldr	r3, [r6, #28]
 800886a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800886e:	42bb      	cmp	r3, r7
 8008870:	d204      	bcs.n	800887c <BSP_STM32_RCC_ClockConfig+0x90>
 8008872:	69f3      	ldr	r3, [r6, #28]
 8008874:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008878:	433b      	orrs	r3, r7
 800887a:	61f3      	str	r3, [r6, #28]
	if ((clocktype & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1) {
 800887c:	f010 0620 	ands.w	r6, r0, #32
 8008880:	d00f      	beq.n	80088a2 <BSP_STM32_RCC_ClockConfig+0xb6>
	    if (APB4Div > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 8008882:	f8df c188 	ldr.w	ip, [pc, #392]	; 8008a0c <BSP_STM32_RCC_ClockConfig+0x220>
 8008886:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008888:	f8dc 3020 	ldr.w	r3, [ip, #32]
 800888c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008890:	42bb      	cmp	r3, r7
 8008892:	d206      	bcs.n	80088a2 <BSP_STM32_RCC_ClockConfig+0xb6>
 8008894:	f8dc 3020 	ldr.w	r3, [ip, #32]
 8008898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889c:	433b      	orrs	r3, r7
 800889e:	f8cc 3020 	str.w	r3, [ip, #32]
	if ((clocktype & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 80088a2:	f010 0302 	ands.w	r3, r0, #2
 80088a6:	9303      	str	r3, [sp, #12]
 80088a8:	f000 8087 	beq.w	80089ba <BSP_STM32_RCC_ClockConfig+0x1ce>
		if (AHBDiv > (RCC->D1CFGR & RCC_D1CFGR_HPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, AHBDiv);
 80088ac:	4f57      	ldr	r7, [pc, #348]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	f003 030f 	and.w	r3, r3, #15
 80088b4:	42ab      	cmp	r3, r5
 80088b6:	d204      	bcs.n	80088c2 <BSP_STM32_RCC_ClockConfig+0xd6>
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	f023 030f 	bic.w	r3, r3, #15
 80088be:	432b      	orrs	r3, r5
 80088c0:	61bb      	str	r3, [r7, #24]
	if ((clocktype & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 80088c2:	07c0      	lsls	r0, r0, #31
 80088c4:	d57c      	bpl.n	80089c0 <BSP_STM32_RCC_ClockConfig+0x1d4>
		MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, SYSDiv);
 80088c6:	4851      	ldr	r0, [pc, #324]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
		switch (SYSSource) {
 80088c8:	2902      	cmp	r1, #2
		MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, SYSDiv);
 80088ca:	6983      	ldr	r3, [r0, #24]
 80088cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80088d0:	ea43 0302 	orr.w	r3, r3, r2
 80088d4:	6183      	str	r3, [r0, #24]
		switch (SYSSource) {
 80088d6:	f000 8087 	beq.w	80089e8 <BSP_STM32_RCC_ClockConfig+0x1fc>
 80088da:	2903      	cmp	r1, #3
 80088dc:	f000 808e 	beq.w	80089fc <BSP_STM32_RCC_ClockConfig+0x210>
 80088e0:	2901      	cmp	r1, #1
 80088e2:	f000 8086 	beq.w	80089f2 <BSP_STM32_RCC_ClockConfig+0x206>
			if ((RCC->CR & RCC_CR_HSIRDY) == 0) return BSP_ERROR;
 80088e6:	6803      	ldr	r3, [r0, #0]
 80088e8:	075f      	lsls	r7, r3, #29
 80088ea:	d594      	bpl.n	8008816 <BSP_STM32_RCC_ClockConfig+0x2a>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, SYSSource);
 80088ec:	4f47      	ldr	r7, [pc, #284]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
		while ((RCC->CFGR & RCC_CFGR_SWS) != (SYSSource << RCC_CFGR_SWS_Pos)) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80088ee:	ea4f 09c1 	mov.w	r9, r1, lsl #3
 80088f2:	f241 3a88 	movw	sl, #5000	; 0x1388
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, SYSSource);
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f023 0307 	bic.w	r3, r3, #7
 80088fc:	430b      	orrs	r3, r1
 80088fe:	613b      	str	r3, [r7, #16]
		tickstart = BSP_GetTick();
 8008900:	f7fb fc0a 	bl	8004118 <BSP_GetTick>
 8008904:	4680      	mov	r8, r0
		while ((RCC->CFGR & RCC_CFGR_SWS) != (SYSSource << RCC_CFGR_SWS_Pos)) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 8008906:	e005      	b.n	8008914 <BSP_STM32_RCC_ClockConfig+0x128>
 8008908:	f7fb fc06 	bl	8004118 <BSP_GetTick>
 800890c:	eba0 0008 	sub.w	r0, r0, r8
 8008910:	4550      	cmp	r0, sl
 8008912:	d865      	bhi.n	80089e0 <BSP_STM32_RCC_ClockConfig+0x1f4>
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800891a:	454b      	cmp	r3, r9
 800891c:	d1f4      	bne.n	8008908 <BSP_STM32_RCC_ClockConfig+0x11c>
	if ((clocktype & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d14d      	bne.n	80089c0 <BSP_STM32_RCC_ClockConfig+0x1d4>
	if (flatency < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8008924:	4a38      	ldr	r2, [pc, #224]	; (8008a08 <BSP_STM32_RCC_ClockConfig+0x21c>)
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	f003 030f 	and.w	r3, r3, #15
 800892c:	42a3      	cmp	r3, r4
 800892e:	d90a      	bls.n	8008946 <BSP_STM32_RCC_ClockConfig+0x15a>
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, flatency);
 8008930:	6813      	ldr	r3, [r2, #0]
 8008932:	f023 030f 	bic.w	r3, r3, #15
 8008936:	4323      	orrs	r3, r4
 8008938:	6013      	str	r3, [r2, #0]
		if ((READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)) != flatency) return BSP_ERROR;
 800893a:	6813      	ldr	r3, [r2, #0]
 800893c:	f003 030f 	and.w	r3, r3, #15
 8008940:	42a3      	cmp	r3, r4
 8008942:	f47f af68 	bne.w	8008816 <BSP_STM32_RCC_ClockConfig+0x2a>
	if ((clocktype & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1) {
 8008946:	9b01      	ldr	r3, [sp, #4]
 8008948:	b15b      	cbz	r3, 8008962 <BSP_STM32_RCC_ClockConfig+0x176>
	    if (APB3Div < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, APB3Div);
 800894a:	4a30      	ldr	r2, [pc, #192]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 800894c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800894e:	6993      	ldr	r3, [r2, #24]
 8008950:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008954:	428b      	cmp	r3, r1
 8008956:	d904      	bls.n	8008962 <BSP_STM32_RCC_ClockConfig+0x176>
 8008958:	6993      	ldr	r3, [r2, #24]
 800895a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895e:	430b      	orrs	r3, r1
 8008960:	6193      	str	r3, [r2, #24]
	if ((clocktype & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8008962:	9b02      	ldr	r3, [sp, #8]
 8008964:	b15b      	cbz	r3, 800897e <BSP_STM32_RCC_ClockConfig+0x192>
		if (APB1Div < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, APB1Div);
 8008966:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 8008968:	990e      	ldr	r1, [sp, #56]	; 0x38
 800896a:	69d3      	ldr	r3, [r2, #28]
 800896c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008970:	428b      	cmp	r3, r1
 8008972:	d904      	bls.n	800897e <BSP_STM32_RCC_ClockConfig+0x192>
 8008974:	69d3      	ldr	r3, [r2, #28]
 8008976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897a:	430b      	orrs	r3, r1
 800897c:	61d3      	str	r3, [r2, #28]
	if ((clocktype & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800897e:	f1bb 0f00 	cmp.w	fp, #0
 8008982:	d00b      	beq.n	800899c <BSP_STM32_RCC_ClockConfig+0x1b0>
		if (APB2Div < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, APB2Div);
 8008984:	4a21      	ldr	r2, [pc, #132]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 8008986:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008988:	69d3      	ldr	r3, [r2, #28]
 800898a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800898e:	428b      	cmp	r3, r1
 8008990:	d904      	bls.n	800899c <BSP_STM32_RCC_ClockConfig+0x1b0>
 8008992:	69d3      	ldr	r3, [r2, #28]
 8008994:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008998:	430b      	orrs	r3, r1
 800899a:	61d3      	str	r3, [r2, #28]
	if ((clocktype & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1) {
 800899c:	b1e6      	cbz	r6, 80089d8 <BSP_STM32_RCC_ClockConfig+0x1ec>
		if (APB4Div < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 800899e:	4a1b      	ldr	r2, [pc, #108]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 80089a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089a2:	6a13      	ldr	r3, [r2, #32]
 80089a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089a8:	428b      	cmp	r3, r1
 80089aa:	d915      	bls.n	80089d8 <BSP_STM32_RCC_ClockConfig+0x1ec>
 80089ac:	6a13      	ldr	r3, [r2, #32]
	return BSP_OK;
 80089ae:	2000      	movs	r0, #0
		if (APB4Div < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 80089b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b4:	430b      	orrs	r3, r1
 80089b6:	6213      	str	r3, [r2, #32]
 80089b8:	e72e      	b.n	8008818 <BSP_STM32_RCC_ClockConfig+0x2c>
	if ((clocktype & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 80089ba:	07c3      	lsls	r3, r0, #31
 80089bc:	d483      	bmi.n	80088c6 <BSP_STM32_RCC_ClockConfig+0xda>
 80089be:	e7b1      	b.n	8008924 <BSP_STM32_RCC_ClockConfig+0x138>
		if (AHBDiv < (RCC->D1CFGR & RCC_D1CFGR_HPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, AHBDiv);
 80089c0:	4a12      	ldr	r2, [pc, #72]	; (8008a0c <BSP_STM32_RCC_ClockConfig+0x220>)
 80089c2:	6993      	ldr	r3, [r2, #24]
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	d9ab      	bls.n	8008924 <BSP_STM32_RCC_ClockConfig+0x138>
 80089cc:	6993      	ldr	r3, [r2, #24]
 80089ce:	f023 030f 	bic.w	r3, r3, #15
 80089d2:	432b      	orrs	r3, r5
 80089d4:	6193      	str	r3, [r2, #24]
 80089d6:	e7a5      	b.n	8008924 <BSP_STM32_RCC_ClockConfig+0x138>
	return BSP_OK;
 80089d8:	2000      	movs	r0, #0
}
 80089da:	b005      	add	sp, #20
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while ((RCC->CFGR & RCC_CFGR_SWS) != (SYSSource << RCC_CFGR_SWS_Pos)) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80089e0:	2003      	movs	r0, #3
}
 80089e2:	b005      	add	sp, #20
 80089e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((RCC->CR & RCC_CR_HSERDY) == 0) return BSP_ERROR;
 80089e8:	6803      	ldr	r3, [r0, #0]
 80089ea:	0398      	lsls	r0, r3, #14
 80089ec:	f53f af7e 	bmi.w	80088ec <BSP_STM32_RCC_ClockConfig+0x100>
 80089f0:	e711      	b.n	8008816 <BSP_STM32_RCC_ClockConfig+0x2a>
			if ((RCC->CR & RCC_CR_CSIRDY) == 0) return BSP_ERROR;
 80089f2:	6803      	ldr	r3, [r0, #0]
 80089f4:	05db      	lsls	r3, r3, #23
 80089f6:	f53f af79 	bmi.w	80088ec <BSP_STM32_RCC_ClockConfig+0x100>
 80089fa:	e70c      	b.n	8008816 <BSP_STM32_RCC_ClockConfig+0x2a>
			if ((RCC->CR & RCC_CR_PLL1RDY) == 0) return BSP_ERROR;
 80089fc:	6803      	ldr	r3, [r0, #0]
 80089fe:	019a      	lsls	r2, r3, #6
 8008a00:	f53f af74 	bmi.w	80088ec <BSP_STM32_RCC_ClockConfig+0x100>
 8008a04:	e707      	b.n	8008816 <BSP_STM32_RCC_ClockConfig+0x2a>
 8008a06:	bf00      	nop
 8008a08:	52002000 	.word	0x52002000
 8008a0c:	58024400 	.word	0x58024400

08008a10 <BSP_STM32_RCC_GetSysClockFreq>:
    float_t fracn1, pllvco;
    uint32_t sysclockfreq;

    // Get SYSCLK source

    switch (RCC->CFGR & RCC_CFGR_SWS) {
 8008a10:	4a49      	ldr	r2, [pc, #292]	; (8008b38 <BSP_STM32_RCC_GetSysClockFreq+0x128>)
 8008a12:	6913      	ldr	r3, [r2, #16]
 8008a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	d004      	beq.n	8008a26 <BSP_STM32_RCC_GetSysClockFreq+0x16>
 8008a1c:	2b18      	cmp	r3, #24
 8008a1e:	d00e      	beq.n	8008a3e <BSP_STM32_RCC_GetSysClockFreq+0x2e>
 8008a20:	b11b      	cbz	r3, 8008a2a <BSP_STM32_RCC_GetSysClockFreq+0x1a>

    	break;

    case RCC_CFGR_SWS_CSI:  // CSI used as system clock  source

    	sysclockfreq = CSI_VALUE;
 8008a22:	4846      	ldr	r0, [pc, #280]	; (8008b3c <BSP_STM32_RCC_GetSysClockFreq+0x12c>)
 8008a24:	4770      	bx	lr
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 8008a26:	4846      	ldr	r0, [pc, #280]	; (8008b40 <BSP_STM32_RCC_GetSysClockFreq+0x130>)
 8008a28:	4770      	bx	lr
    	if ((RCC->CR & RCC_CR_HSIDIV_Msk) != 0U) {
 8008a2a:	6813      	ldr	r3, [r2, #0]
 8008a2c:	f013 0f18 	tst.w	r3, #24
 8008a30:	d04a      	beq.n	8008ac8 <BSP_STM32_RCC_GetSysClockFreq+0xb8>
    		sysclockfreq = (uint32_t)(HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	4843      	ldr	r0, [pc, #268]	; (8008b44 <BSP_STM32_RCC_GetSysClockFreq+0x134>)
 8008a36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a3a:	4118      	asrs	r0, r3
 8008a3c:	4770      	bx	lr

    case RCC_CFGR_SWS_PLL1:  // PLL1 used as system clock  source

    	// PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN      SYSCLK = PLL_VCO / PLLR

    	pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a3e:	6a93      	ldr	r3, [r2, #40]	; 0x28
uint32_t BSP_STM32_RCC_GetSysClockFreq(void) {
 8008a40:	b430      	push	{r4, r5}
    	pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a42:	6a94      	ldr	r4, [r2, #40]	; 0x28
    	pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a44:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

    	if (pllm != 0U) {
 8008a46:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a4a:	6b51      	ldr	r1, [r2, #52]	; 0x34
    	pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a4c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    	if (pllm != 0U) {
 8008a50:	d038      	beq.n	8008ac4 <BSP_STM32_RCC_GetSysClockFreq+0xb4>
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a52:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    	pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a56:	f005 0501 	and.w	r5, r5, #1
    	pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a5a:	f003 0303 	and.w	r3, r3, #3
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a5e:	fb05 f101 	mul.w	r1, r5, r1
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	ee07 1a90 	vmov	s15, r1
 8008a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    		switch (pllsource) {
 8008a6c:	d002      	beq.n	8008a74 <BSP_STM32_RCC_GetSysClockFreq+0x64>
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d02c      	beq.n	8008acc <BSP_STM32_RCC_GetSysClockFreq+0xbc>
 8008a72:	b393      	cbz	r3, 8008ada <BSP_STM32_RCC_GetSysClockFreq+0xca>
    			pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
    			break;

    		default:

    			pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a74:	ee07 0a90 	vmov	s15, r0
 8008a78:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8008b48 <BSP_STM32_RCC_GetSysClockFreq+0x138>
 8008a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008a82:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008a86:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8008b4c <BSP_STM32_RCC_GetSysClockFreq+0x13c>
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a9a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008a9e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008aa2:	ee66 6aa7 	vmul.f32	s13, s13, s15
    			break;

    		}

        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008aa6:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <BSP_STM32_RCC_GetSysClockFreq+0x128>)
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008aae:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008ab0:	ee07 3a90 	vmov	s15, r3
 8008ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac0:	ee17 0a90 	vmov	r0, s15
    	break;

    }

    return sysclockfreq;
}
 8008ac4:	bc30      	pop	{r4, r5}
 8008ac6:	4770      	bx	lr
    		sysclockfreq = (uint32_t) HSI_VALUE;
 8008ac8:	481e      	ldr	r0, [pc, #120]	; (8008b44 <BSP_STM32_RCC_GetSysClockFreq+0x134>)
}
 8008aca:	4770      	bx	lr
    			pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008acc:	ee07 0a90 	vmov	s15, r0
 8008ad0:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8008b50 <BSP_STM32_RCC_GetSysClockFreq+0x140>
 8008ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ad8:	e7d2      	b.n	8008a80 <BSP_STM32_RCC_GetSysClockFreq+0x70>
    			if ((RCC->CR & RCC_CR_HSIDIV_Msk) != 0U) {
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	f013 0f18 	tst.w	r3, #24
 8008ae0:	d022      	beq.n	8008b28 <BSP_STM32_RCC_GetSysClockFreq+0x118>
    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008ae2:	6814      	ldr	r4, [r2, #0]
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ae4:	ee07 0a90 	vmov	s15, r0
    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008ae8:	4916      	ldr	r1, [pc, #88]	; (8008b44 <BSP_STM32_RCC_GetSysClockFreq+0x134>)
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	6b13      	ldr	r3, [r2, #48]	; 0x30
    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008af0:	f3c4 04c1 	ubfx	r4, r4, #3, #2
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008af8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8008b4c <BSP_STM32_RCC_GetSysClockFreq+0x13c>
 8008afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008b00:	4121      	asrs	r1, r4
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b02:	ee06 3a10 	vmov	s12, r3
 8008b06:	ee05 1a90 	vmov	s11, r1
 8008b0a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008b0e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008b12:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008b16:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008b1a:	eef0 7a46 	vmov.f32	s15, s12
 8008b1e:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008b22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008b26:	e7be      	b.n	8008aa6 <BSP_STM32_RCC_GetSysClockFreq+0x96>
    				pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b28:	ee07 0a90 	vmov	s15, r0
 8008b2c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008b54 <BSP_STM32_RCC_GetSysClockFreq+0x144>
 8008b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b34:	e7a4      	b.n	8008a80 <BSP_STM32_RCC_GetSysClockFreq+0x70>
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	003d0900 	.word	0x003d0900
 8008b40:	017d7840 	.word	0x017d7840
 8008b44:	03d09000 	.word	0x03d09000
 8008b48:	4a742400 	.word	0x4a742400
 8008b4c:	39000000 	.word	0x39000000
 8008b50:	4bbebc20 	.word	0x4bbebc20
 8008b54:	4c742400 	.word	0x4c742400

08008b58 <BSP_STM32_RTC_Init>:

  return BSP_OK;
}


uint8_t BSP_STM32_RTC_Init(RTC_TypeDef * hrtc, uint32_t AsynchPrediv, uint32_t SynchPrediv) {
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// TODO: This code will be moved to separate part responsible for configuration of debugger interface
	// DBGMCU->APB4FZ1 |= DBGMCU_APB4FZ1_DBG_RTC;
	// DBGMCU->APB4FZ2 |= DBGMCU_APB4FZ2_DBG_RTC;

	// Check whether the calendar needs to be initialized
	if (((hrtc->ISR)  & (RTC_ISR_INITS)) == RTC_ISR_INITS) return BSP_OK;
 8008b5a:	68c3      	ldr	r3, [r0, #12]
 8008b5c:	06dc      	lsls	r4, r3, #27
 8008b5e:	d452      	bmi.n	8008c06 <BSP_STM32_RTC_Init+0xae>
	hrtc->WPR = 0x53;
 8008b60:	2353      	movs	r3, #83	; 0x53
 8008b62:	4616      	mov	r6, r2
	hrtc->WPR = 0xCA;
 8008b64:	22ca      	movs	r2, #202	; 0xca
 8008b66:	4604      	mov	r4, r0
 8008b68:	460d      	mov	r5, r1
 8008b6a:	6242      	str	r2, [r0, #36]	; 0x24
	hrtc->WPR = 0x53;
 8008b6c:	6243      	str	r3, [r0, #36]	; 0x24
	if ((hrtc->ISR & RTC_ISR_INITF) == 0U) {
 8008b6e:	68c3      	ldr	r3, [r0, #12]
 8008b70:	0658      	lsls	r0, r3, #25
 8008b72:	d537      	bpl.n	8008be4 <BSP_STM32_RTC_Init+0x8c>
	if (_RTC_EnterInitMode(hrtc)) {
		_RTC_WriteDisable(hrtc);	return BSP_ERROR;
	}

	// Clear RTC_CR FMT, OSEL and POL Bits
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008b74:	68a3      	ldr	r3, [r4, #8]

	// Set RTC_CR register
	hrtc->CR |= (RTC_HOURFORMAT_24 | RTC_OUTPUT_DISABLE | RTC_OUTPUT_POLARITY_HIGH);

	// Configure the RTC PRER
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8008b76:	042d      	lsls	r5, r5, #16
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008b78:	4a26      	ldr	r2, [pc, #152]	; (8008c14 <BSP_STM32_RTC_Init+0xbc>)
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8008b7a:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8008b7e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008b82:	401a      	ands	r2, r3
	CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008b84:	4b24      	ldr	r3, [pc, #144]	; (8008c18 <BSP_STM32_RTC_Init+0xc0>)
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8008b86:	4335      	orrs	r5, r6
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008b88:	60a2      	str	r2, [r4, #8]
	hrtc->CR |= (RTC_HOURFORMAT_24 | RTC_OUTPUT_DISABLE | RTC_OUTPUT_POLARITY_HIGH);
 8008b8a:	68a1      	ldr	r1, [r4, #8]
 8008b8c:	60a1      	str	r1, [r4, #8]
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8008b8e:	6125      	str	r5, [r4, #16]
	CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b96:	60da      	str	r2, [r3, #12]
	if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD)) {
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	0691      	lsls	r1, r2, #26
 8008b9c:	d41d      	bmi.n	8008bda <BSP_STM32_RTC_Init+0x82>
	uint32_t tickstart = BSP_GetTick();
 8008b9e:	f7fb fabb 	bl	8004118 <BSP_GetTick>
	hrtc->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008ba2:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <BSP_STM32_RTC_Init+0xc4>)
	uint32_t tickstart = BSP_GetTick();
 8008ba4:	4605      	mov	r5, r0
	hrtc->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008ba6:	60e3      	str	r3, [r4, #12]
    while ((hrtc->ISR & RTC_ISR_RSF) == 0U)
 8008ba8:	e005      	b.n	8008bb6 <BSP_STM32_RTC_Init+0x5e>
    	if ((BSP_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) return BSP_TIMEOUT;
 8008baa:	f7fb fab5 	bl	8004118 <BSP_GetTick>
 8008bae:	1b43      	subs	r3, r0, r5
 8008bb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008bb4:	d829      	bhi.n	8008c0a <BSP_STM32_RTC_Init+0xb2>
    while ((hrtc->ISR & RTC_ISR_RSF) == 0U)
 8008bb6:	68e3      	ldr	r3, [r4, #12]
 8008bb8:	069b      	lsls	r3, r3, #26
 8008bba:	d5f6      	bpl.n	8008baa <BSP_STM32_RTC_Init+0x52>
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008bbc:	4a16      	ldr	r2, [pc, #88]	; (8008c18 <BSP_STM32_RTC_Init+0xc0>)
	hrtc->WPR = 0xFF;
 8008bbe:	21ff      	movs	r1, #255	; 0xff
	hrtc->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
	hrtc->OR |= (RTC_OUTPUT_TYPE_OPENDRAIN | RTC_OUTPUT_REMAP_NONE);

	// Enable the write protection for RTC registers
	_RTC_WriteDisable(hrtc);
	return BSP_OK;
 8008bc0:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008bc2:	6893      	ldr	r3, [r2, #8]
 8008bc4:	f043 0320 	orr.w	r3, r3, #32
 8008bc8:	6093      	str	r3, [r2, #8]
	hrtc->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008bca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008bcc:	f023 0303 	bic.w	r3, r3, #3
 8008bd0:	64e3      	str	r3, [r4, #76]	; 0x4c
	hrtc->OR |= (RTC_OUTPUT_TYPE_OPENDRAIN | RTC_OUTPUT_REMAP_NONE);
 8008bd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008bd4:	64e3      	str	r3, [r4, #76]	; 0x4c
	hrtc->WPR = 0xFF;
 8008bd6:	6261      	str	r1, [r4, #36]	; 0x24
}
 8008bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	f022 0220 	bic.w	r2, r2, #32
 8008be0:	609a      	str	r2, [r3, #8]
 8008be2:	e7dc      	b.n	8008b9e <BSP_STM32_RTC_Init+0x46>
		hrtc->ISR = (uint32_t)RTC_INIT_MASK;
 8008be4:	f04f 33ff 	mov.w	r3, #4294967295
 8008be8:	60e3      	str	r3, [r4, #12]
		tickstart = BSP_GetTick();
 8008bea:	f7fb fa95 	bl	8004118 <BSP_GetTick>
 8008bee:	4607      	mov	r7, r0
		while ((hrtc->ISR & RTC_ISR_INITF) == 0U)
 8008bf0:	e005      	b.n	8008bfe <BSP_STM32_RTC_Init+0xa6>
			if((BSP_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE) return BSP_TIMEOUT;
 8008bf2:	f7fb fa91 	bl	8004118 <BSP_GetTick>
 8008bf6:	1bc0      	subs	r0, r0, r7
 8008bf8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8008bfc:	d805      	bhi.n	8008c0a <BSP_STM32_RTC_Init+0xb2>
		while ((hrtc->ISR & RTC_ISR_INITF) == 0U)
 8008bfe:	68e3      	ldr	r3, [r4, #12]
 8008c00:	065a      	lsls	r2, r3, #25
 8008c02:	d5f6      	bpl.n	8008bf2 <BSP_STM32_RTC_Init+0x9a>
 8008c04:	e7b6      	b.n	8008b74 <BSP_STM32_RTC_Init+0x1c>
	if (((hrtc->ISR)  & (RTC_ISR_INITS)) == RTC_ISR_INITS) return BSP_OK;
 8008c06:	2000      	movs	r0, #0
}
 8008c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hrtc->WPR = 0xFF;
 8008c0a:	23ff      	movs	r3, #255	; 0xff
		_RTC_WriteDisable(hrtc);	return BSP_ERROR;
 8008c0c:	2001      	movs	r0, #1
	hrtc->WPR = 0xFF;
 8008c0e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8008c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c12:	bf00      	nop
 8008c14:	ff8fffbf 	.word	0xff8fffbf
 8008c18:	58004000 	.word	0x58004000
 8008c1c:	0003ff5f 	.word	0x0003ff5f

08008c20 <BSP_STM32_SDMMC_GetCardState>:

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;

	uint32_t resp1 = 0;

	SDMMC_CmdSendStatus(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U));
 8008c20:	6d49      	ldr	r1, [r1, #84]	; 0x54
uint32_t BSP_STM32_SDMMC_GetCardState(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8008c22:	b510      	push	{r4, lr}
 8008c24:	4604      	mov	r4, r0
	SDMMC_CmdSendStatus(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U));
 8008c26:	0409      	lsls	r1, r1, #16
 8008c28:	f001 fd0a 	bl	800a640 <SDMMC_CmdSendStatus>
	resp1 = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 fc46 	bl	80094c0 <SDMMC_GetResponse>

	return ((resp1 >> 9U) & 0x0FU);
}
 8008c34:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	bf00      	nop

08008c3c <BSP_STM32_SDMMC_Init>:



uint8_t BSP_STM32_SDMMC_Init(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	b0a1      	sub	sp, #132	; 0x84
	uint32_t unitsize;

	// 1. Initialize Card parameters

	// Starting up in 1B bus and 400kHz
	SDMMC_InitTypeDef Init = {0};
 8008c42:	2300      	movs	r3, #0
	Init.ClockEdge        		= SDMMC_CLOCK_EDGE_RISING;
	Init.ClockPowerSave   		= SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8008c44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
uint8_t BSP_STM32_SDMMC_Init(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8008c48:	4604      	mov	r4, r0
	SDMMC_InitTypeDef Init = {0};
 8008c4a:	9307      	str	r3, [sp, #28]
	Init.BusWide          		= SDMMC_BUS_WIDE_1B;
	Init.HardwareFlowControl 	= SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;

	// For freq to 400kHz div = sdmmc_clk / (2 * 400000) -> For 60MHz div = 75
	Init.ClockDiv 				= 75;
	if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 8008c4c:	af07      	add	r7, sp, #28
	SDMMC_InitTypeDef Init = {0};
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	ad04      	add	r5, sp, #16
 8008c52:	60ab      	str	r3, [r5, #8]
	Init.ClockDiv 				= 75;
 8008c54:	234b      	movs	r3, #75	; 0x4b
uint8_t BSP_STM32_SDMMC_Init(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8008c56:	460e      	mov	r6, r1
	Init.ClockPowerSave   		= SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8008c58:	9205      	str	r2, [sp, #20]
	Init.ClockDiv 				= 75;
 8008c5a:	9308      	str	r3, [sp, #32]
	if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 8008c5c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008c60:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008c64:	4620      	mov	r0, r4
 8008c66:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8008c6a:	f000 fbf7 	bl	800945c <SDMMC_Init>
 8008c6e:	b120      	cbz	r0, 8008c7a <BSP_STM32_SDMMC_Init+0x3e>

	// Identify card version, type and voltage
	if (_SD_IdentifyCard(hsdmmc, ctx)) return BSP_ERROR;

	// Card initialization
	if (_SD_InitCard(hsdmmc, ctx)) return BSP_ERROR;
 8008c70:	2501      	movs	r5, #1

    // 4. Verify that SD card is ready to use after Initialization
    while (BSP_STM32_SDMMC_GetCardState(hsdmmc, ctx) != SDMMC_CARD_TRANSFER) {};

    return BSP_OK;
}
 8008c72:	4628      	mov	r0, r5
 8008c74:	b021      	add	sp, #132	; 0x84
 8008c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (SDMMC_PowerState_ON(hsdmmc)) return BSP_ERROR;
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fc14 	bl	80094a8 <SDMMC_PowerState_ON>
 8008c80:	4680      	mov	r8, r0
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d1f4      	bne.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
	BSP_Delay(1);
 8008c86:	2001      	movs	r0, #1
 8008c88:	f7fb fa4c 	bl	8004124 <BSP_Delay>
	if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8008c8c:	4620      	mov	r0, r4
	__IO uint32_t count = 0U;
 8008c8e:	f8cd 800c 	str.w	r8, [sp, #12]
	if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8008c92:	f001 f94b 	bl	8009f2c <SDMMC_CmdGoIdleState>
 8008c96:	4682      	mov	sl, r0
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d1e9      	bne.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
	if (SDMMC_CmdOperCond(hsdmmc) == SDMMC_ERROR_TIMEOUT) {
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f001 f971 	bl	8009f84 <SDMMC_CmdOperCond>
 8008ca2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008ca6:	f000 8181 	beq.w	8008fac <BSP_STM32_SDMMC_Init+0x370>
		sdmmc_ctx->SDCardVersion = CARD_V2_X;
 8008caa:	2301      	movs	r3, #1
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8008cac:	4651      	mov	r1, sl
 8008cae:	4620      	mov	r0, r4
		sdmmc_ctx->SDCardVersion = CARD_V2_X;
 8008cb0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8008cb4:	f001 f9a6 	bl	800a004 <SDMMC_CmdAppCommand>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d1d9      	bne.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 8008cc2:	4543      	cmp	r3, r8
 8008cc4:	d81c      	bhi.n	8008d00 <BSP_STM32_SDMMC_Init+0xc4>
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8008cc6:	f8df 9588 	ldr.w	r9, [pc, #1416]	; 8009250 <BSP_STM32_SDMMC_Init+0x614>
 8008cca:	e001      	b.n	8008cd0 <BSP_STM32_SDMMC_Init+0x94>
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8008ccc:	4543      	cmp	r3, r8
 8008cce:	d816      	bhi.n	8008cfe <BSP_STM32_SDMMC_Init+0xc2>
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f001 f996 	bl	800a004 <SDMMC_CmdAppCommand>
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8008cd8:	4649      	mov	r1, r9
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d1c8      	bne.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f001 fa3e 	bl	800a160 <SDMMC_CmdAppOperCommand>
 8008ce4:	4601      	mov	r1, r0
		response = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008ce6:	4620      	mov	r0, r4
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8008ce8:	2900      	cmp	r1, #0
 8008cea:	d1c1      	bne.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
		response = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008cec:	f000 fbe8 	bl	80094c0 <SDMMC_GetResponse>
		count++;
 8008cf0:	9b03      	ldr	r3, [sp, #12]
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8008cf2:	2800      	cmp	r0, #0
		count++;
 8008cf4:	f103 0301 	add.w	r3, r3, #1
 8008cf8:	9303      	str	r3, [sp, #12]
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	dae6      	bge.n	8008ccc <BSP_STM32_SDMMC_Init+0x90>
 8008cfe:	4682      	mov	sl, r0
	if (count >= SDMMC_MAX_VOLT_TRIAL) return BSP_ERROR;
 8008d00:	9a03      	ldr	r2, [sp, #12]
 8008d02:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d8b2      	bhi.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
	sdmmc_ctx->SDCardType = ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) ? CARD_SDHC_SDXC : CARD_SDSC;
 8008d0a:	f3ca 7080 	ubfx	r0, sl, #30, #1
	uint16_t sd_rca = 0;
 8008d0e:	2300      	movs	r3, #0
	sdmmc_ctx->SDCardType = ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) ? CARD_SDHC_SDXC : CARD_SDSC;
 8008d10:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
	uint16_t sd_rca = 0;
 8008d14:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint32_t tickstart = BSP_GetTick();
 8008d18:	f7fb f9fe 	bl	8004118 <BSP_GetTick>
 8008d1c:	4680      	mov	r8, r0
	if (SDMMC_GetPowerState(hsdmmc) == 0U) return BSP_ERROR;
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 fbca 	bl	80094b8 <SDMMC_GetPowerState>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d0a3      	beq.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
	if (sdmmc_ctx->SDCardType == CARD_SECURED) return BSP_ERROR;
 8008d28:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d09f      	beq.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
    if (SDMMC_CmdSendCID(hsdmmc)) return BSP_ERROR;
 8008d30:	4620      	mov	r0, r4
 8008d32:	f001 fba7 	bl	800a484 <SDMMC_CmdSendCID>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d19a      	bne.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
    sdmmc_ctx->SDCardID[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 fbbf 	bl	80094c0 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardID[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d42:	2104      	movs	r1, #4
    sdmmc_ctx->SDCardID[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008d44:	6370      	str	r0, [r6, #52]	; 0x34
    sdmmc_ctx->SDCardID[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 fbba 	bl	80094c0 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardID[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d4c:	2108      	movs	r1, #8
    sdmmc_ctx->SDCardID[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d4e:	63b0      	str	r0, [r6, #56]	; 0x38
    sdmmc_ctx->SDCardID[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 fbb5 	bl	80094c0 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardID[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d56:	210c      	movs	r1, #12
    sdmmc_ctx->SDCardID[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d58:	63f0      	str	r0, [r6, #60]	; 0x3c
    sdmmc_ctx->SDCardID[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 fbb0 	bl	80094c0 <SDMMC_GetResponse>
    	if ((BSP_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT) return BSP_ERROR;
 8008d60:	f241 3987 	movw	r9, #4999	; 0x1387
    sdmmc_ctx->SDCardID[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d64:	6430      	str	r0, [r6, #64]	; 0x40
    while (sd_rca == 0U) {
 8008d66:	e00b      	b.n	8008d80 <BSP_STM32_SDMMC_Init+0x144>
    	if (SDMMC_CmdSetRelAdd(hsdmmc, &sd_rca)) return BSP_ERROR;
 8008d68:	f001 fc0a 	bl	800a580 <SDMMC_CmdSetRelAdd>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	f47f af7f 	bne.w	8008c70 <BSP_STM32_SDMMC_Init+0x34>
    	if ((BSP_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT) return BSP_ERROR;
 8008d72:	f7fb f9d1 	bl	8004118 <BSP_GetTick>
 8008d76:	eba0 0008 	sub.w	r0, r0, r8
 8008d7a:	4548      	cmp	r0, r9
 8008d7c:	f63f af78 	bhi.w	8008c70 <BSP_STM32_SDMMC_Init+0x34>
    while (sd_rca == 0U) {
 8008d80:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    	if (SDMMC_CmdSetRelAdd(hsdmmc, &sd_rca)) return BSP_ERROR;
 8008d84:	a90a      	add	r1, sp, #40	; 0x28
 8008d86:	4620      	mov	r0, r4
    while (sd_rca == 0U) {
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0ed      	beq.n	8008d68 <BSP_STM32_SDMMC_Init+0x12c>
    if (SDMMC_CmdSendCSD(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 8008d8c:	0419      	lsls	r1, r3, #16
    sdmmc_ctx->SDCardRelAdd = sd_rca;
 8008d8e:	6573      	str	r3, [r6, #84]	; 0x54
    if (SDMMC_CmdSendCSD(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 8008d90:	f001 fbb6 	bl	800a500 <SDMMC_CmdSendCSD>
 8008d94:	4680      	mov	r8, r0
 8008d96:	2800      	cmp	r0, #0
 8008d98:	f47f af6a 	bne.w	8008c70 <BSP_STM32_SDMMC_Init+0x34>
    sdmmc_ctx->SDCardSD[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 fb8e 	bl	80094c0 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardSD[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008da4:	2104      	movs	r1, #4
    sdmmc_ctx->SDCardSD[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008da6:	6470      	str	r0, [r6, #68]	; 0x44
    sdmmc_ctx->SDCardSD[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fb89 	bl	80094c0 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardSD[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008dae:	2108      	movs	r1, #8
    sdmmc_ctx->SDCardSD[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008db0:	64b0      	str	r0, [r6, #72]	; 0x48
    sdmmc_ctx->SDCardSD[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 fb84 	bl	80094c0 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardSD[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008db8:	210c      	movs	r1, #12
    sdmmc_ctx->SDCardSD[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008dba:	64f0      	str	r0, [r6, #76]	; 0x4c
    sdmmc_ctx->SDCardSD[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fb7f 	bl	80094c0 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 8008dc2:	2104      	movs	r1, #4
    sdmmc_ctx->SDCardSD[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008dc4:	6530      	str	r0, [r6, #80]	; 0x50
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 fb7a 	bl	80094c0 <SDMMC_GetResponse>
	switch (sdmmc_ctx->SDCardType) {
 8008dcc:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 8008dd0:	0d00      	lsrs	r0, r0, #20
	CSD->CardComdClasses = (uint16_t)((sdmmc_ctx->SDCardSD[1] & 0xFFF00000U) >> 20U);
 8008dd2:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 8008dd6:	62f0      	str	r0, [r6, #44]	; 0x2c
	CSD->CSDStruct = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0xC0000000U) >> 30U);
 8008dd8:	0f90      	lsrs	r0, r2, #30
 8008dda:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	CSD->SysSpecVersion = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x3C000000U) >> 26U);
 8008dde:	f3c2 6083 	ubfx	r0, r2, #26, #4
 8008de2:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
	CSD->Reserved1 = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x03000000U) >> 24U);
 8008de6:	f3c2 6001 	ubfx	r0, r2, #24, #2
 8008dea:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
	CSD->TAAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x00FF0000U) >> 16U);
 8008dee:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008df2:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
	CSD->NSAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x0000FF00U) >> 8U);
 8008df6:	f3c2 2007 	ubfx	r0, r2, #8, #8
	CSD->MaxBusClkFrec = (uint8_t)(sdmmc_ctx->SDCardSD[0] & 0x000000FFU);
 8008dfa:	b2d2      	uxtb	r2, r2
	CSD->NSAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x0000FF00U) >> 8U);
 8008dfc:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
	CSD->MaxBusClkFrec = (uint8_t)(sdmmc_ctx->SDCardSD[0] & 0x000000FFU);
 8008e00:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
	CSD->CardComdClasses = (uint16_t)((sdmmc_ctx->SDCardSD[1] & 0xFFF00000U) >> 20U);
 8008e04:	0d1a      	lsrs	r2, r3, #20
 8008e06:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
	CSD->RdBlockLen = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x000F0000U) >> 16U);
 8008e0a:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8008e0e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	CSD->PartBlockRead   = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00008000U) >> 15U);
 8008e12:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8008e16:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	CSD->WrBlockMisalign = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00004000U) >> 14U);
 8008e1a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8008e1e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	CSD->RdBlockMisalign = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00002000U) >> 13U);
 8008e22:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8008e26:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	CSD->DSRImpl = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00001000U) >> 12U);
 8008e2a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8008e2e:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
	CSD->Reserved2 = 0U; /*!< Reserved */
 8008e32:	f88d 804d 	strb.w	r8, [sp, #77]	; 0x4d
	switch (sdmmc_ctx->SDCardType) {
 8008e36:	2900      	cmp	r1, #0
 8008e38:	f000 80c1 	beq.w	8008fbe <BSP_STM32_SDMMC_Init+0x382>
 8008e3c:	2901      	cmp	r1, #1
 8008e3e:	f040 80b1 	bne.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
		CSD->DeviceSize = (((sdmmc_ctx->SDCardSD[1] & 0x0000003FU) << 16U) | ((sdmmc_ctx->SDCardSD[2] & 0xFFFF0000U) >> 16U));
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8008e46:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8008e4a:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8008e4e:	9314      	str	r3, [sp, #80]	; 0x50
		sdmmc_ctx->SDCardBlockSize = 512U;
 8008e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e54:	65f3      	str	r3, [r6, #92]	; 0x5c
		sdmmc_ctx->SDCardBlockNbr = ((CSD->DeviceSize + 1U) * 1024U);
 8008e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e58:	3301      	adds	r3, #1
 8008e5a:	029b      	lsls	r3, r3, #10
 8008e5c:	65b3      	str	r3, [r6, #88]	; 0x58
		sdmmc_ctx->SDCardLogBlockNbr = sdmmc_ctx->SDCardBlockNbr;
 8008e5e:	6633      	str	r3, [r6, #96]	; 0x60
	CSD->EraseGrSize = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00004000U) >> 14U);
 8008e60:	f3c0 3c80 	ubfx	ip, r0, #14, #1
		sdmmc_ctx->SDCardLogBlockSize = 512U;
 8008e64:	f44f 7300 	mov.w	r3, #512	; 0x200
	CSD->Reserved3 = 0;
 8008e68:	f04f 0b00 	mov.w	fp, #0
	CSD->EraseGrSize = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00004000U) >> 14U);
 8008e6c:	f88d c059 	strb.w	ip, [sp, #89]	; 0x59
	CSD->EraseGrMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00003F80U) >> 7U);
 8008e70:	f3c0 1cc6 	ubfx	ip, r0, #7, #7
	CSD->WrProtectGrSize = (uint8_t)(sdmmc_ctx->SDCardSD[2] & 0x0000007FU);
 8008e74:	f000 007f 	and.w	r0, r0, #127	; 0x7f
		sdmmc_ctx->SDCardLogBlockSize = 512U;
 8008e78:	6673      	str	r3, [r6, #100]	; 0x64
	CSD->EraseGrMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00003F80U) >> 7U);
 8008e7a:	f88d c05a 	strb.w	ip, [sp, #90]	; 0x5a
	CSD->WrProtectGrSize = (uint8_t)(sdmmc_ctx->SDCardSD[2] & 0x0000007FU);
 8008e7e:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 8008e82:	e9d6 2114 	ldrd	r2, r1, [r6, #80]	; 0x50
	CSD->WrProtectGrEnable = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x80000000U) >> 31U);
 8008e86:	0fd0      	lsrs	r0, r2, #31
	CSD->ECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000300U) >> 8U);
 8008e88:	f3c2 2301 	ubfx	r3, r2, #8, #2
	CSD->PermWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00002000U) >> 13U);
 8008e8c:	f3c2 3e40 	ubfx	lr, r2, #13, #1
	CSD->TempWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00001000U) >> 12U);
 8008e90:	f3c2 3c00 	ubfx	ip, r2, #12, #1
	CSD->WrProtectGrEnable = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x80000000U) >> 31U);
 8008e94:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
	CSD->ManDeflECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x60000000U) >> 29U);
 8008e98:	f3c2 7041 	ubfx	r0, r2, #29, #2
	CSD->ContentProtectAppli = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00010000U) >> 16U);
 8008e9c:	f3c2 4a00 	ubfx	sl, r2, #16, #1
	CSD->FileFormatGroup = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00008000U) >> 15U);
 8008ea0:	f3c2 39c0 	ubfx	r9, r2, #15, #1
	CSD->ManDeflECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x60000000U) >> 29U);
 8008ea4:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
	CSD->WrSpeedFact = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x1C000000U) >> 26U);
 8008ea8:	f3c2 6082 	ubfx	r0, r2, #26, #3
	CSD->CopyFlag = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00004000U) >> 14U);
 8008eac:	f3c2 3880 	ubfx	r8, r2, #14, #1
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 8008eb0:	0409      	lsls	r1, r1, #16
	CSD->WrSpeedFact = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x1C000000U) >> 26U);
 8008eb2:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
	CSD->MaxWrBlockLen = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x03C00000U) >> 22U);
 8008eb6:	f3c2 5083 	ubfx	r0, r2, #22, #4
 8008eba:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
	CSD->WriteBlockPaPartial = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00200000U) >> 21U);
 8008ebe:	f3c2 5040 	ubfx	r0, r2, #21, #1
 8008ec2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
	CSD->FileFormat = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000C00U) >> 10U);
 8008ec6:	f3c2 2081 	ubfx	r0, r2, #10, #2
	CSD->CSD_CRC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x000000FEU) >> 1U);
 8008eca:	f3c2 0246 	ubfx	r2, r2, #1, #7
	CSD->Reserved3 = 0;
 8008ece:	f88d b061 	strb.w	fp, [sp, #97]	; 0x61
	CSD->ContentProtectAppli = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00010000U) >> 16U);
 8008ed2:	f88d a062 	strb.w	sl, [sp, #98]	; 0x62
	CSD->FileFormatGroup = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00008000U) >> 15U);
 8008ed6:	f88d 9063 	strb.w	r9, [sp, #99]	; 0x63
	CSD->CopyFlag = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00004000U) >> 14U);
 8008eda:	f88d 8064 	strb.w	r8, [sp, #100]	; 0x64
	CSD->PermWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00002000U) >> 13U);
 8008ede:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
	CSD->TempWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00001000U) >> 12U);
 8008ee2:	f88d c066 	strb.w	ip, [sp, #102]	; 0x66
	CSD->FileFormat = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000C00U) >> 10U);
 8008ee6:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 8008eea:	4620      	mov	r0, r4
	CSD->ECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000300U) >> 8U);
 8008eec:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
	CSD->CSD_CRC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x000000FEU) >> 1U);
 8008ef0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
	CSD->Reserved4 = 1;
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 8008efa:	f000 ff69 	bl	8009dd0 <SDMMC_CmdSelDesel>
 8008efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f02:	2800      	cmp	r0, #0
 8008f04:	f47f aeb4 	bne.w	8008c70 <BSP_STM32_SDMMC_Init+0x34>
	if (SDMMC_CmdBlockLength(hsdmmc, 512)) return BSP_ERROR;
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 faf2 	bl	80094f4 <SDMMC_CmdBlockLength>
 8008f10:	4680      	mov	r8, r0
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f47f aeac 	bne.w	8008c70 <BSP_STM32_SDMMC_Init+0x34>
	uint32_t tickstart = BSP_GetTick();
 8008f18:	f7fb f8fe 	bl	8004118 <BSP_GetTick>
	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 8008f1c:	4641      	mov	r1, r8
	uint32_t tickstart = BSP_GetTick();
 8008f1e:	4681      	mov	r9, r0
	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 facd 	bl	80094c0 <SDMMC_GetResponse>
 8008f26:	0183      	lsls	r3, r0, #6
 8008f28:	d43c      	bmi.n	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	if (SDMMC_CmdBlockLength(hsdmmc, 64U)) return BSP_ERROR;
 8008f2a:	2140      	movs	r1, #64	; 0x40
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fae1 	bl	80094f4 <SDMMC_CmdBlockLength>
 8008f32:	bbb8      	cbnz	r0, 8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 8008f34:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8008f36:	4620      	mov	r0, r4
 8008f38:	0409      	lsls	r1, r1, #16
 8008f3a:	f001 f863 	bl	800a004 <SDMMC_CmdAppCommand>
 8008f3e:	bb88      	cbnz	r0, 8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	config.DataLength    = 64U;
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	2340      	movs	r3, #64	; 0x40
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f46:	f04f 0c60 	mov.w	ip, #96	; 0x60
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f4a:	2200      	movs	r2, #0
	(void)SDMMC_ConfigData(hsdmmc, &config);
 8008f4c:	a90a      	add	r1, sp, #40	; 0x28
	config.DataLength    = 64U;
 8008f4e:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f52:	2302      	movs	r3, #2
	(void)SDMMC_ConfigData(hsdmmc, &config);
 8008f54:	4620      	mov	r0, r4
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f56:	e9cd c30c 	strd	ip, r3, [sp, #48]	; 0x30
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	(void)SDMMC_ConfigData(hsdmmc, &config);
 8008f60:	f000 fab2 	bl	80094c8 <SDMMC_ConfigData>
	if (SDMMC_CmdStatusRegister(hsdmmc)) return BSP_ERROR;
 8008f64:	4620      	mov	r0, r4
 8008f66:	f001 fc19 	bl	800a79c <SDMMC_CmdStatusRegister>
 8008f6a:	b9d8      	cbnz	r0, 8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	uint32_t *pData = pSDstatus;
 8008f6c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8008f70:	e005      	b.n	8008f7e <BSP_STM32_SDMMC_Init+0x342>
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 8008f72:	f7fb f8d1 	bl	8004118 <BSP_GetTick>
 8008f76:	eba0 0009 	sub.w	r0, r0, r9
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d012      	beq.n	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND)) {
 8008f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f80:	f413 7f95 	tst.w	r3, #298	; 0x12a
		if (__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOHF)) {
 8008f84:	6b63      	ldr	r3, [r4, #52]	; 0x34
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND)) {
 8008f86:	d14b      	bne.n	8009020 <BSP_STM32_SDMMC_Init+0x3e4>
		if (__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOHF)) {
 8008f88:	0419      	lsls	r1, r3, #16
 8008f8a:	d5f2      	bpl.n	8008f72 <BSP_STM32_SDMMC_Init+0x336>
 8008f8c:	f108 0a20 	add.w	sl, r8, #32
				*pData = SDMMC_ReadFIFO(hsdmmc);
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fa7f 	bl	8009494 <SDMMC_ReadFIFO>
 8008f96:	f848 0b04 	str.w	r0, [r8], #4
			for (count = 0U; count < 8U; count++) {
 8008f9a:	45d0      	cmp	r8, sl
 8008f9c:	d1f8      	bne.n	8008f90 <BSP_STM32_SDMMC_Init+0x354>
 8008f9e:	e7e8      	b.n	8008f72 <BSP_STM32_SDMMC_Init+0x336>
		__SDMMC_CLEAR_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR));
 8008fa0:	232a      	movs	r3, #42	; 0x2a
 8008fa2:	63a3      	str	r3, [r4, #56]	; 0x38
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 8008fa4:	4ba8      	ldr	r3, [pc, #672]	; (8009248 <BSP_STM32_SDMMC_Init+0x60c>)
    	return BSP_ERROR;
 8008fa6:	2501      	movs	r5, #1
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 8008fa8:	63a3      	str	r3, [r4, #56]	; 0x38
    	return BSP_ERROR;
 8008faa:	e662      	b.n	8008c72 <BSP_STM32_SDMMC_Init+0x36>
		if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8008fac:	4620      	mov	r0, r4
		sdmmc_ctx->SDCardVersion = CARD_V1_X;
 8008fae:	f886 a028 	strb.w	sl, [r6, #40]	; 0x28
		if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8008fb2:	f000 ffbb 	bl	8009f2c <SDMMC_CmdGoIdleState>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f43f ae80 	beq.w	8008cbc <BSP_STM32_SDMMC_Init+0x80>
 8008fbc:	e658      	b.n	8008c70 <BSP_STM32_SDMMC_Init+0x34>
		CSD->DeviceSize = (((sdmmc_ctx->SDCardSD[1] & 0x000003FFU) << 2U) | ((sdmmc_ctx->SDCardSD[2] & 0xC0000000U) >> 30U));
 8008fbe:	f640 72fc 	movw	r2, #4092	; 0xffc
 8008fc2:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8008fc4:	ea02 0383 	and.w	r3, r2, r3, lsl #2
 8008fc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fcc:	9314      	str	r3, [sp, #80]	; 0x50
		CSD->MaxRdCurrentVDDMin = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x38000000U) >> 27U);
 8008fce:	f3c0 63c2 	ubfx	r3, r0, #27, #3
 8008fd2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		CSD->MaxRdCurrentVDDMax = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x07000000U) >> 24U);
 8008fd6:	f3c0 6302 	ubfx	r3, r0, #24, #3
 8008fda:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
		CSD->MaxWrCurrentVDDMin = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00E00000U) >> 21U);
 8008fde:	f3c0 5342 	ubfx	r3, r0, #21, #3
 8008fe2:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
		CSD->MaxWrCurrentVDDMax = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x001C0000U) >> 18U);
 8008fe6:	f3c0 4382 	ubfx	r3, r0, #18, #3
 8008fea:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
		CSD->DeviceSizeMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00038000U) >> 15U);
 8008fee:	f3c0 33c2 	ubfx	r3, r0, #15, #3
 8008ff2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		sdmmc_ctx->SDCardBlockSize = (1UL << (CSD->RdBlockLen & 0x0FU));
 8008ff6:	2301      	movs	r3, #1
		sdmmc_ctx->SDCardBlockNbr  = (CSD->DeviceSize + 1U) ;
 8008ff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
		sdmmc_ctx->SDCardBlockNbr *= (1UL << ((CSD->DeviceSizeMul & 0x07U) + 2U));
 8008ffa:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
		sdmmc_ctx->SDCardBlockNbr  = (CSD->DeviceSize + 1U) ;
 8008ffe:	441a      	add	r2, r3
		sdmmc_ctx->SDCardBlockNbr *= (1UL << ((CSD->DeviceSizeMul & 0x07U) + 2U));
 8009000:	f001 0107 	and.w	r1, r1, #7
 8009004:	3102      	adds	r1, #2
 8009006:	408a      	lsls	r2, r1
		sdmmc_ctx->SDCardBlockSize = (1UL << (CSD->RdBlockLen & 0x0FU));
 8009008:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 800900c:	f001 010f 	and.w	r1, r1, #15
		sdmmc_ctx->SDCardBlockNbr *= (1UL << ((CSD->DeviceSizeMul & 0x07U) + 2U));
 8009010:	65b2      	str	r2, [r6, #88]	; 0x58
		sdmmc_ctx->SDCardBlockSize = (1UL << (CSD->RdBlockLen & 0x0FU));
 8009012:	408b      	lsls	r3, r1
 8009014:	65f3      	str	r3, [r6, #92]	; 0x5c
		sdmmc_ctx->SDCardLogBlockNbr = (sdmmc_ctx->SDCardBlockNbr) * ((sdmmc_ctx->SDCardBlockSize) / 512U);
 8009016:	0a5b      	lsrs	r3, r3, #9
 8009018:	fb02 f303 	mul.w	r3, r2, r3
 800901c:	6633      	str	r3, [r6, #96]	; 0x60
		break;
 800901e:	e71f      	b.n	8008e60 <BSP_STM32_SDMMC_Init+0x224>
	if (__SDMMC_GET_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR))) return BSP_ERROR;
 8009020:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 8009024:	d00a      	beq.n	800903c <BSP_STM32_SDMMC_Init+0x400>
 8009026:	e7bd      	b.n	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
		*pData = SDMMC_ReadFIFO(hsdmmc);
 8009028:	f000 fa34 	bl	8009494 <SDMMC_ReadFIFO>
 800902c:	f848 0b04 	str.w	r0, [r8], #4
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 8009030:	f7fb f872 	bl	8004118 <BSP_GetTick>
 8009034:	eba0 0009 	sub.w	r0, r0, r9
 8009038:	3001      	adds	r0, #1
 800903a:	d0b3      	beq.n	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	while ((__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_DPSMACT))) {
 800903c:	6b63      	ldr	r3, [r4, #52]	; 0x34
		*pData = SDMMC_ReadFIFO(hsdmmc);
 800903e:	4620      	mov	r0, r4
	while ((__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_DPSMACT))) {
 8009040:	04da      	lsls	r2, r3, #19
 8009042:	d4f1      	bmi.n	8009028 <BSP_STM32_SDMMC_Init+0x3ec>
    status->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009044:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009046:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009048:	f3c1 1981 	ubfx	r9, r1, #6, #2
 800904c:	fa92 fc82 	rev.w	ip, r2
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009050:	0a0a      	lsrs	r2, r1, #8
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009052:	e9dd 0312 	ldrd	r0, r3, [sp, #72]	; 0x48
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800905a:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 800905e:	fa5f f883 	uxtb.w	r8, r3
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009062:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009066:	f02e 0eff 	bic.w	lr, lr, #255	; 0xff
    status->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800906a:	f3c1 1140 	ubfx	r1, r1, #5, #1
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800906e:	b292      	uxth	r2, r2
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009070:	ea4e 0e08 	orr.w	lr, lr, r8
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 8009074:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8009248 <BSP_STM32_SDMMC_Init+0x60c>
 8009078:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    status->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800907c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    status->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009080:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 8009084:	f44f 7100 	mov.w	r1, #512	; 0x200
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009088:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    status->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800908c:	b2c2      	uxtb	r2, r0
    status->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800908e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    status->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009092:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    status->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009096:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800909a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    status->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800909e:	f3c0 5203 	ubfx	r2, r0, #20, #4
    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 80090a2:	4620      	mov	r0, r4
    status->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80090a4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    status->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80090a8:	f3c3 2285 	ubfx	r2, r3, #10, #6
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80090ac:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    status->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80090b0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    status->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80090b4:	f3c3 2201 	ubfx	r2, r3, #8, #2
 80090b8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    status->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80090bc:	f3c3 1203 	ubfx	r2, r3, #4, #4
    status->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80090c0:	f003 030f 	and.w	r3, r3, #15
    status->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80090c4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    status->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80090c8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    status->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80090cc:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 80090d0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 80090d4:	f000 fa0e 	bl	80094f4 <SDMMC_CmdBlockLength>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d168      	bne.n	80091ae <BSP_STM32_SDMMC_Init+0x572>
	speedgrade = cardstatus.UhsSpeedGrade;
 80090dc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	unitsize = cardstatus.UhsAllocationUnitSize;
 80090e0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
	sdmmc_ctx->SDCardSpeed = CARD_NORMAL_SPEED;
 80090e4:	6330      	str	r0, [r6, #48]	; 0x30
	speedgrade = cardstatus.UhsSpeedGrade;
 80090e6:	b2db      	uxtb	r3, r3
	if (sdmmc_ctx->SDCardType == CARD_SDHC_SDXC) {
 80090e8:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
	unitsize = cardstatus.UhsAllocationUnitSize;
 80090ec:	b2d2      	uxtb	r2, r2
	if (sdmmc_ctx->SDCardType == CARD_SDHC_SDXC) {
 80090ee:	2901      	cmp	r1, #1
 80090f0:	d054      	beq.n	800919c <BSP_STM32_SDMMC_Init+0x560>
	if (sdmmc_ctx->SDCardType == CARD_SECURED) return BSP_ERROR;
 80090f2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	f43f adba 	beq.w	8008c70 <BSP_STM32_SDMMC_Init+0x34>
	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 80090fc:	2100      	movs	r1, #0
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 f9de 	bl	80094c0 <SDMMC_GetResponse>
 8009104:	0183      	lsls	r3, r0, #6
 8009106:	f53f af4d 	bmi.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	uint32_t tickstart = BSP_GetTick();
 800910a:	f7fb f805 	bl	8004118 <BSP_GetTick>
	if (SDMMC_CmdBlockLength(hsdmmc, 8U)) return BSP_ERROR;
 800910e:	2108      	movs	r1, #8
	uint32_t tickstart = BSP_GetTick();
 8009110:	4680      	mov	r8, r0
	if (SDMMC_CmdBlockLength(hsdmmc, 8U)) return BSP_ERROR;
 8009112:	4620      	mov	r0, r4
 8009114:	f000 f9ee 	bl	80094f4 <SDMMC_CmdBlockLength>
 8009118:	2800      	cmp	r0, #0
 800911a:	f47f af43 	bne.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)((sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 800911e:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8009120:	4620      	mov	r0, r4
 8009122:	0409      	lsls	r1, r1, #16
 8009124:	f000 ff6e 	bl	800a004 <SDMMC_CmdAppCommand>
 8009128:	2800      	cmp	r0, #0
 800912a:	f47f af3b 	bne.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	config.DataLength    = 8U;
 800912e:	f04f 32ff 	mov.w	r2, #4294967295
 8009132:	2308      	movs	r3, #8
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009134:	2030      	movs	r0, #48	; 0x30
	SDMMC_ConfigData(hsdmmc, &config);
 8009136:	a910      	add	r1, sp, #64	; 0x40
	config.DataLength    = 8U;
 8009138:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800913c:	2302      	movs	r3, #2
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800913e:	2200      	movs	r2, #0
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009140:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009144:	2301      	movs	r3, #1
	SDMMC_ConfigData(hsdmmc, &config);
 8009146:	4620      	mov	r0, r4
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009148:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	SDMMC_ConfigData(hsdmmc, &config);
 800914c:	f000 f9bc 	bl	80094c8 <SDMMC_ConfigData>
	if (SDMMC_CmdSendSCR(hsdmmc)) return BSP_ERROR;
 8009150:	4620      	mov	r0, r4
 8009152:	f001 f8ef 	bl	800a334 <SDMMC_CmdSendSCR>
 8009156:	2800      	cmp	r0, #0
 8009158:	f47f af24 	bne.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
 800915c:	4633      	mov	r3, r6
	uint32_t tempscr[2U] = {0UL, 0UL};
 800915e:	4681      	mov	r9, r0
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND)) {
 8009160:	f240 5b2a 	movw	fp, #1322	; 0x52a
 8009164:	4606      	mov	r6, r0
 8009166:	469a      	mov	sl, r3
 8009168:	e006      	b.n	8009178 <BSP_STM32_SDMMC_Init+0x53c>
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 800916a:	f7fa ffd5 	bl	8004118 <BSP_GetTick>
 800916e:	eba0 0308 	sub.w	r3, r0, r8
 8009172:	3301      	adds	r3, #1
 8009174:	f43f af16 	beq.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND)) {
 8009178:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800917a:	ea13 0f0b 	tst.w	r3, fp
 800917e:	d11a      	bne.n	80091b6 <BSP_STM32_SDMMC_Init+0x57a>
		if ((!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOE)) && (index == 0U)) {
 8009180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009182:	031b      	lsls	r3, r3, #12
 8009184:	d4f1      	bmi.n	800916a <BSP_STM32_SDMMC_Init+0x52e>
 8009186:	2e00      	cmp	r6, #0
 8009188:	d1ef      	bne.n	800916a <BSP_STM32_SDMMC_Init+0x52e>
			tempscr[0] = SDMMC_ReadFIFO(hsdmmc);
 800918a:	4620      	mov	r0, r4
			index++;
 800918c:	2601      	movs	r6, #1
			tempscr[0] = SDMMC_ReadFIFO(hsdmmc);
 800918e:	f000 f981 	bl	8009494 <SDMMC_ReadFIFO>
 8009192:	4681      	mov	r9, r0
			tempscr[1] = SDMMC_ReadFIFO(hsdmmc);
 8009194:	4620      	mov	r0, r4
 8009196:	f000 f97d 	bl	8009494 <SDMMC_ReadFIFO>
			index++;
 800919a:	e7e6      	b.n	800916a <BSP_STM32_SDMMC_Init+0x52e>
		sdmmc_ctx->SDCardSpeed = CARD_HIGH_SPEED;
 800919c:	f44f 7180 	mov.w	r1, #256	; 0x100
		if ((speedgrade != 0U) || (unitsize != 0U)) sdmmc_ctx->SDCardSpeed = CARD_ULTRA_HIGH_SPEED;
 80091a0:	4313      	orrs	r3, r2
		sdmmc_ctx->SDCardSpeed = CARD_HIGH_SPEED;
 80091a2:	6331      	str	r1, [r6, #48]	; 0x30
		if ((speedgrade != 0U) || (unitsize != 0U)) sdmmc_ctx->SDCardSpeed = CARD_ULTRA_HIGH_SPEED;
 80091a4:	d0a5      	beq.n	80090f2 <BSP_STM32_SDMMC_Init+0x4b6>
 80091a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091aa:	6333      	str	r3, [r6, #48]	; 0x30
 80091ac:	e7a1      	b.n	80090f2 <BSP_STM32_SDMMC_Init+0x4b6>
	if (_SD_GetCardStatus(hsdmmc, ctx, &cardstatus)) return BSP_ERROR;
 80091ae:	2501      	movs	r5, #1
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 80091b0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    	return BSP_ERROR;
 80091b4:	e55d      	b.n	8008c72 <BSP_STM32_SDMMC_Init+0x36>
	if (__SDMMC_GET_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR))) {
 80091b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091b8:	4656      	mov	r6, sl
 80091ba:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 80091be:	f47f aeef 	bne.w	8008fa0 <BSP_STM32_SDMMC_Init+0x364>
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_DATA_FLAGS);
 80091c2:	fa99 f989 	rev.w	r9, r9
 80091c6:	4b21      	ldr	r3, [pc, #132]	; (800924c <BSP_STM32_SDMMC_Init+0x610>)
	if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) == SDMMC_ALLZERO) return BSP_ERROR;
 80091c8:	f419 2f80 	tst.w	r9, #262144	; 0x40000
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_DATA_FLAGS);
 80091cc:	63a3      	str	r3, [r4, #56]	; 0x38
	if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) == SDMMC_ALLZERO) return BSP_ERROR;
 80091ce:	f43f aee9 	beq.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
    if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 80091d2:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
 80091d6:	4620      	mov	r0, r4
 80091d8:	0409      	lsls	r1, r1, #16
 80091da:	f000 ff13 	bl	800a004 <SDMMC_CmdAppCommand>
 80091de:	2800      	cmp	r0, #0
 80091e0:	f47f aee0 	bne.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
    if (SDMMC_CmdBusWidth(hsdmmc, 2U)) return BSP_ERROR;
 80091e4:	2102      	movs	r1, #2
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 fff6 	bl	800a1d8 <SDMMC_CmdBusWidth>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f47f aed9 	bne.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	Init.BusWide          		= SDMMC_BUS_WIDE_4B;
 80091f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80091f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
	Init.ClockDiv				= 4;
 80091fe:	2304      	movs	r3, #4
 8009200:	9308      	str	r3, [sp, #32]
    if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 8009202:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009206:	e88d 0003 	stmia.w	sp, {r0, r1}
 800920a:	4620      	mov	r0, r4
 800920c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8009210:	f000 f924 	bl	800945c <SDMMC_Init>
 8009214:	4605      	mov	r5, r0
 8009216:	2800      	cmp	r0, #0
 8009218:	f47f ad2a 	bne.w	8008c70 <BSP_STM32_SDMMC_Init+0x34>
    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 800921c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009220:	4620      	mov	r0, r4
 8009222:	f000 f967 	bl	80094f4 <SDMMC_CmdBlockLength>
 8009226:	2800      	cmp	r0, #0
 8009228:	f47f aebc 	bne.w	8008fa4 <BSP_STM32_SDMMC_Init+0x368>
	SDMMC_CmdSendStatus(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U));
 800922c:	6d71      	ldr	r1, [r6, #84]	; 0x54
 800922e:	4620      	mov	r0, r4
 8009230:	0409      	lsls	r1, r1, #16
 8009232:	f001 fa05 	bl	800a640 <SDMMC_CmdSendStatus>
	resp1 = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8009236:	2100      	movs	r1, #0
 8009238:	4620      	mov	r0, r4
 800923a:	f000 f941 	bl	80094c0 <SDMMC_GetResponse>
	return ((resp1 >> 9U) & 0x0FU);
 800923e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    while (BSP_STM32_SDMMC_GetCardState(hsdmmc, ctx) != SDMMC_CARD_TRANSFER) {};
 8009242:	2804      	cmp	r0, #4
 8009244:	d1f2      	bne.n	800922c <BSP_STM32_SDMMC_Init+0x5f0>
 8009246:	e514      	b.n	8008c72 <BSP_STM32_SDMMC_Init+0x36>
 8009248:	1fe00fff 	.word	0x1fe00fff
 800924c:	18000f3a 	.word	0x18000f3a
 8009250:	c1100000 	.word	0xc1100000

08009254 <BSP_STM32_SDMMC_ReadBlocks>:


uint8_t BSP_STM32_SDMMC_ReadBlocks(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 8009254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009258:	b087      	sub	sp, #28
 800925a:	461f      	mov	r7, r3
 800925c:	4689      	mov	r9, r1
 800925e:	4615      	mov	r5, r2
 8009260:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8009264:	4604      	mov	r4, r0

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;

	SDMMC_DataInitTypeDef config;
	uint32_t errorstate;
	uint32_t tickstart = BSP_GetTick();
 8009266:	f7fa ff57 	bl	8004118 <BSP_GetTick>
	uint32_t data;
	uint32_t dataremaining;
	uint32_t add = BlockAdd;
	uint8_t *tempbuff = pData;

	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800926a:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 800926e:	eb07 0208 	add.w	r2, r7, r8
 8009272:	429a      	cmp	r2, r3
 8009274:	d84f      	bhi.n	8009316 <BSP_STM32_SDMMC_ReadBlocks+0xc2>

	// Initialize data control register
	hsdmmc->DCTRL = 0U;
 8009276:	2300      	movs	r3, #0

	// Configure the SD DPSM (Data Path State Machine)
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
	config.DataLength    = NumberOfBlocks * 512U;
	config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009278:	2190      	movs	r1, #144	; 0x90
 800927a:	4606      	mov	r6, r0
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
	config.DPSM          = SDMMC_DPSM_DISABLE;
	SDMMC_ConfigData(hsdmmc, &config);
 800927c:	4620      	mov	r0, r4
	hsdmmc->DCTRL = 0U;
 800927e:	62e3      	str	r3, [r4, #44]	; 0x2c
	if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 8009280:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8009284:	2b01      	cmp	r3, #1
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009286:	f04f 0300 	mov.w	r3, #0
	config.DPSM          = SDMMC_DPSM_DISABLE;
 800928a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800928e:	f04f 33ff 	mov.w	r3, #4294967295
	if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 8009292:	bf18      	it	ne
 8009294:	027f      	lslne	r7, r7, #9
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009296:	9300      	str	r3, [sp, #0]
	config.DataLength    = NumberOfBlocks * 512U;
 8009298:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800929c:	9301      	str	r3, [sp, #4]
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800929e:	2302      	movs	r3, #2
 80092a0:	e9cd 1302 	strd	r1, r3, [sp, #8]
	SDMMC_ConfigData(hsdmmc, &config);
 80092a4:	4669      	mov	r1, sp
 80092a6:	f000 f90f 	bl	80094c8 <SDMMC_ConfigData>
	__SDMMC_CMDTRANS_ENABLE(hsdmmc);
 80092aa:	68e3      	ldr	r3, [r4, #12]

	// Read block(s) in polling mode
	if (NumberOfBlocks > 1U) {
 80092ac:	f1b8 0f01 	cmp.w	r8, #1
		// Read Multi Block command
		errorstate = SDMMC_CmdReadMultiBlock(hsdmmc, add);
 80092b0:	4639      	mov	r1, r7
	__SDMMC_CMDTRANS_ENABLE(hsdmmc);
 80092b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		errorstate = SDMMC_CmdReadMultiBlock(hsdmmc, add);
 80092b6:	4620      	mov	r0, r4
	__SDMMC_CMDTRANS_ENABLE(hsdmmc);
 80092b8:	60e3      	str	r3, [r4, #12]
	if (NumberOfBlocks > 1U) {
 80092ba:	d929      	bls.n	8009310 <BSP_STM32_SDMMC_ReadBlocks+0xbc>
		errorstate = SDMMC_CmdReadMultiBlock(hsdmmc, add);
 80092bc:	f000 fa76 	bl	80097ac <SDMMC_CmdReadMultiBlock>
		// Read Single Block command
		errorstate = SDMMC_CmdReadSingleBlock(hsdmmc, add);
	}

	// Handle error
	if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80092c0:	bb00      	cbnz	r0, 8009304 <BSP_STM32_SDMMC_ReadBlocks+0xb0>

	// Poll on SDMMC flags
	dataremaining = config.DataLength;
 80092c2:	9f01      	ldr	r7, [sp, #4]
	while (!(hsdmmc->STA & (SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 80092c4:	e005      	b.n	80092d2 <BSP_STM32_SDMMC_ReadBlocks+0x7e>
			}
			dataremaining -= 32U;
		}

		// Handle timeout
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80092c6:	f7fa ff27 	bl	8004118 <BSP_GetTick>
 80092ca:	1b83      	subs	r3, r0, r6
 80092cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092d0:	d218      	bcs.n	8009304 <BSP_STM32_SDMMC_ReadBlocks+0xb0>
	while (!(hsdmmc->STA & (SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 80092d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092d4:	f413 7f95 	tst.w	r3, #298	; 0x12a
 80092d8:	d121      	bne.n	800931e <BSP_STM32_SDMMC_ReadBlocks+0xca>
		if ((hsdmmc->STA & (SDMMC_FLAG_RXFIFOHF)) && (dataremaining >= 32U)) {
 80092da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092dc:	041a      	lsls	r2, r3, #16
 80092de:	d5f2      	bpl.n	80092c6 <BSP_STM32_SDMMC_ReadBlocks+0x72>
 80092e0:	2f1f      	cmp	r7, #31
 80092e2:	d9f0      	bls.n	80092c6 <BSP_STM32_SDMMC_ReadBlocks+0x72>
 80092e4:	f105 0920 	add.w	r9, r5, #32
				data = SDMMC_ReadFIFO(hsdmmc);
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 f8d3 	bl	8009494 <SDMMC_ReadFIFO>
				*tempbuff = (uint8_t)(data & 0xFFU);
 80092ee:	f845 0b04 	str.w	r0, [r5], #4
			for (count = 0U; count < 8U; count++) {
 80092f2:	45a9      	cmp	r9, r5
 80092f4:	d1f8      	bne.n	80092e8 <BSP_STM32_SDMMC_ReadBlocks+0x94>
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80092f6:	f7fa ff0f 	bl	8004118 <BSP_GetTick>
 80092fa:	1b83      	subs	r3, r0, r6
			dataremaining -= 32U;
 80092fc:	3f20      	subs	r7, #32
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80092fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009302:	d3e6      	bcc.n	80092d2 <BSP_STM32_SDMMC_ReadBlocks+0x7e>
	// Send stop transmission command in case of multiblock read
	if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
		// Send stop transmission command
		errorstate = SDMMC_CmdStopTransfer(hsdmmc);
		// Handle error
		if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 8009304:	4b13      	ldr	r3, [pc, #76]	; (8009354 <BSP_STM32_SDMMC_ReadBlocks+0x100>)
 8009306:	2001      	movs	r0, #1
 8009308:	63a3      	str	r3, [r4, #56]	; 0x38
	}

	// Clear all the static flags
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
	return BSP_OK;
}
 800930a:	b007      	add	sp, #28
 800930c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		errorstate = SDMMC_CmdReadSingleBlock(hsdmmc, add);
 8009310:	f000 f99e 	bl	8009650 <SDMMC_CmdReadSingleBlock>
 8009314:	e7d4      	b.n	80092c0 <BSP_STM32_SDMMC_ReadBlocks+0x6c>
	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 8009316:	2001      	movs	r0, #1
}
 8009318:	b007      	add	sp, #28
 800931a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__SDMMC_CMDTRANS_DISABLE(hsdmmc);
 800931e:	68e3      	ldr	r3, [r4, #12]
 8009320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009324:	60e3      	str	r3, [r4, #12]
	if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
 8009326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009328:	05db      	lsls	r3, r3, #23
 800932a:	d502      	bpl.n	8009332 <BSP_STM32_SDMMC_ReadBlocks+0xde>
 800932c:	f1b8 0f01 	cmp.w	r8, #1
 8009330:	d809      	bhi.n	8009346 <BSP_STM32_SDMMC_ReadBlocks+0xf2>
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR)) {
 8009332:	6b60      	ldr	r0, [r4, #52]	; 0x34
		hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 8009334:	4b07      	ldr	r3, [pc, #28]	; (8009354 <BSP_STM32_SDMMC_ReadBlocks+0x100>)
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR)) {
 8009336:	f010 002a 	ands.w	r0, r0, #42	; 0x2a
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800933a:	63a3      	str	r3, [r4, #56]	; 0x38
		return BSP_ERROR;
 800933c:	bf18      	it	ne
 800933e:	2001      	movne	r0, #1
}
 8009340:	b007      	add	sp, #28
 8009342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		errorstate = SDMMC_CmdStopTransfer(hsdmmc);
 8009346:	4620      	mov	r0, r4
 8009348:	f000 fc3a 	bl	8009bc0 <SDMMC_CmdStopTransfer>
		if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800934c:	2800      	cmp	r0, #0
 800934e:	d0f0      	beq.n	8009332 <BSP_STM32_SDMMC_ReadBlocks+0xde>
 8009350:	e7d8      	b.n	8009304 <BSP_STM32_SDMMC_ReadBlocks+0xb0>
 8009352:	bf00      	nop
 8009354:	1fe00fff 	.word	0x1fe00fff

08009358 <BSP_STM32_SDMMC_WriteBlocks>:


uint8_t BSP_STM32_SDMMC_WriteBlocks(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, const uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 8009358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800935c:	b089      	sub	sp, #36	; 0x24
 800935e:	461f      	mov	r7, r3
 8009360:	4689      	mov	r9, r1
 8009362:	4615      	mov	r5, r2
 8009364:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8009368:	4604      	mov	r4, r0

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;

	SDMMC_DataInitTypeDef config;
	uint32_t errorstate;
	uint32_t tickstart = BSP_GetTick();
 800936a:	f7fa fed5 	bl	8004118 <BSP_GetTick>
	uint32_t dataremaining;
	uint32_t add = BlockAdd;
	const uint8_t *tempbuff = pData;


	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800936e:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 8009372:	eb07 0208 	add.w	r2, r7, r8
 8009376:	429a      	cmp	r2, r3
 8009378:	d850      	bhi.n	800941c <BSP_STM32_SDMMC_WriteBlocks+0xc4>

    // Initialize data control register
    hsdmmc->DCTRL = 0U;
 800937a:	2300      	movs	r3, #0
    config.DataLength    = NumberOfBlocks * SDMMC_BLOCKSIZE;
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
    config.DPSM          = SDMMC_DPSM_DISABLE;
    (void)SDMMC_ConfigData(hsdmmc, &config);
 800937c:	a902      	add	r1, sp, #8
 800937e:	4606      	mov	r6, r0
 8009380:	4620      	mov	r0, r4
    hsdmmc->DCTRL = 0U;
 8009382:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 8009384:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8009388:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800938a:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800938e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009392:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009394:	f04f 33ff 	mov.w	r3, #4294967295
    if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 8009398:	bf18      	it	ne
 800939a:	027f      	lslne	r7, r7, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800939c:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * SDMMC_BLOCKSIZE;
 800939e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80093a2:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80093a4:	2390      	movs	r3, #144	; 0x90
 80093a6:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsdmmc, &config);
 80093a8:	f000 f88e 	bl	80094c8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsdmmc);
 80093ac:	68e3      	ldr	r3, [r4, #12]

    // Write Blocks in Polling mode
	if (NumberOfBlocks > 1U) {
 80093ae:	f1b8 0f01 	cmp.w	r8, #1
		// Write Multi Block command
		errorstate = SDMMC_CmdWriteMultiBlock(hsdmmc, add);
 80093b2:	4639      	mov	r1, r7
 80093b4:	4620      	mov	r0, r4
    __SDMMC_CMDTRANS_ENABLE(hsdmmc);
 80093b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ba:	60e3      	str	r3, [r4, #12]
	if (NumberOfBlocks > 1U) {
 80093bc:	d92b      	bls.n	8009416 <BSP_STM32_SDMMC_WriteBlocks+0xbe>
		errorstate = SDMMC_CmdWriteMultiBlock(hsdmmc, add);
 80093be:	f000 fb51 	bl	8009a64 <SDMMC_CmdWriteMultiBlock>
		// Read Single Block command
		errorstate = SDMMC_CmdWriteSingleBlock(hsdmmc, add);
	}

    // Handle error
    if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80093c2:	bb10      	cbnz	r0, 800940a <BSP_STM32_SDMMC_WriteBlocks+0xb2>

    // Write block(s) in polling mode
    dataremaining = config.DataLength;
 80093c4:	9f03      	ldr	r7, [sp, #12]

    while (!(hsdmmc->STA & (SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 80093c6:	e005      	b.n	80093d4 <BSP_STM32_SDMMC_WriteBlocks+0x7c>
    		}
    		dataremaining -= 32U;
    	}

		// Handle timeout
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80093c8:	f7fa fea6 	bl	8004118 <BSP_GetTick>
 80093cc:	1b83      	subs	r3, r0, r6
 80093ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093d2:	d21a      	bcs.n	800940a <BSP_STM32_SDMMC_WriteBlocks+0xb2>
    while (!(hsdmmc->STA & (SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 80093d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093d6:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 80093da:	d123      	bne.n	8009424 <BSP_STM32_SDMMC_WriteBlocks+0xcc>
    	if ((hsdmmc->STA & (SDMMC_FLAG_TXFIFOHE)) && (dataremaining >= 32U)) {
 80093dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093de:	045a      	lsls	r2, r3, #17
 80093e0:	d5f2      	bpl.n	80093c8 <BSP_STM32_SDMMC_WriteBlocks+0x70>
 80093e2:	2f1f      	cmp	r7, #31
 80093e4:	d9f0      	bls.n	80093c8 <BSP_STM32_SDMMC_WriteBlocks+0x70>
 80093e6:	f105 0920 	add.w	r9, r5, #32
    			data |= ((uint32_t)(*tempbuff) << 24U);
 80093ea:	f855 3b04 	ldr.w	r3, [r5], #4
    			(void)SDMMC_WriteFIFO(hsdmmc, &data);
 80093ee:	a901      	add	r1, sp, #4
 80093f0:	4620      	mov	r0, r4
    			data |= ((uint32_t)(*tempbuff) << 24U);
 80093f2:	9301      	str	r3, [sp, #4]
    			(void)SDMMC_WriteFIFO(hsdmmc, &data);
 80093f4:	f000 f852 	bl	800949c <SDMMC_WriteFIFO>
    		for (count = 0U; count < 8U; count++) {
 80093f8:	454d      	cmp	r5, r9
 80093fa:	d1f6      	bne.n	80093ea <BSP_STM32_SDMMC_WriteBlocks+0x92>
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80093fc:	f7fa fe8c 	bl	8004118 <BSP_GetTick>
 8009400:	1b83      	subs	r3, r0, r6
    		dataremaining -= 32U;
 8009402:	3f20      	subs	r7, #32
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 8009404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009408:	d3e4      	bcc.n	80093d4 <BSP_STM32_SDMMC_WriteBlocks+0x7c>
    // Send stop transmission command in case of multiblock write
    if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
        // Send stop transmission command
        errorstate = SDMMC_CmdStopTransfer(hsdmmc);
        // Handle error
        if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800940a:	4b13      	ldr	r3, [pc, #76]	; (8009458 <BSP_STM32_SDMMC_WriteBlocks+0x100>)
 800940c:	2001      	movs	r0, #1
 800940e:	63a3      	str	r3, [r4, #56]	; 0x38
	}

	// Clear all the static flags
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
	return BSP_OK;
}
 8009410:	b009      	add	sp, #36	; 0x24
 8009412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		errorstate = SDMMC_CmdWriteSingleBlock(hsdmmc, add);
 8009416:	f000 fa77 	bl	8009908 <SDMMC_CmdWriteSingleBlock>
 800941a:	e7d2      	b.n	80093c2 <BSP_STM32_SDMMC_WriteBlocks+0x6a>
	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800941c:	2001      	movs	r0, #1
}
 800941e:	b009      	add	sp, #36	; 0x24
 8009420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __SDMMC_CMDTRANS_DISABLE(hsdmmc);
 8009424:	68e3      	ldr	r3, [r4, #12]
 8009426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800942a:	60e3      	str	r3, [r4, #12]
    if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
 800942c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800942e:	05db      	lsls	r3, r3, #23
 8009430:	d502      	bpl.n	8009438 <BSP_STM32_SDMMC_WriteBlocks+0xe0>
 8009432:	f1b8 0f01 	cmp.w	r8, #1
 8009436:	d809      	bhi.n	800944c <BSP_STM32_SDMMC_WriteBlocks+0xf4>
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_TXUNDERR)) {
 8009438:	6b60      	ldr	r0, [r4, #52]	; 0x34
		hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 800943a:	4b07      	ldr	r3, [pc, #28]	; (8009458 <BSP_STM32_SDMMC_WriteBlocks+0x100>)
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_TXUNDERR)) {
 800943c:	f010 001a 	ands.w	r0, r0, #26
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 8009440:	63a3      	str	r3, [r4, #56]	; 0x38
		return BSP_ERROR;
 8009442:	bf18      	it	ne
 8009444:	2001      	movne	r0, #1
}
 8009446:	b009      	add	sp, #36	; 0x24
 8009448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        errorstate = SDMMC_CmdStopTransfer(hsdmmc);
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fbb7 	bl	8009bc0 <SDMMC_CmdStopTransfer>
        if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 8009452:	2800      	cmp	r0, #0
 8009454:	d0f0      	beq.n	8009438 <BSP_STM32_SDMMC_WriteBlocks+0xe0>
 8009456:	e7d8      	b.n	800940a <BSP_STM32_SDMMC_WriteBlocks+0xb2>
 8009458:	1fe00fff 	.word	0x1fe00fff

0800945c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800945c:	b084      	sub	sp, #16
 800945e:	b410      	push	{r4}
 8009460:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009464:	4614      	mov	r4, r2
{
 8009466:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800946a:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800946c:	9904      	ldr	r1, [sp, #16]
{
 800946e:	4602      	mov	r2, r0
             Init.BusWide             | \
 8009470:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 8009472:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009474:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 8009476:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 8009478:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800947a:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800947c:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800947e:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009480:	4903      	ldr	r1, [pc, #12]	; (8009490 <SDMMC_Init+0x34>)
 8009482:	4021      	ands	r1, r4
}
 8009484:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009488:	430b      	orrs	r3, r1
}
 800948a:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800948c:	6053      	str	r3, [r2, #4]
}
 800948e:	4770      	bx	lr
 8009490:	ffc02c00 	.word	0xffc02c00

08009494 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009494:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop

0800949c <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800949c:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800949e:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 80094a0:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80094a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80094a6:	4770      	bx	lr

080094a8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80094a8:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 80094aa:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	f042 0203 	orr.w	r2, r2, #3
 80094b2:	601a      	str	r2, [r3, #0]
}
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop

080094b8 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80094b8:	6800      	ldr	r0, [r0, #0]
}
 80094ba:	f000 0003 	and.w	r0, r0, #3
 80094be:	4770      	bx	lr

080094c0 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80094c0:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 80094c2:	5840      	ldr	r0, [r0, r1]
}
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop

080094c8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80094c8:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80094ca:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 80094ce:	690d      	ldr	r5, [r1, #16]
{
 80094d0:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80094d2:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 80094d4:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 80094d6:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 80094d8:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   | \
 80094da:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 80094dc:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 80094de:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80094e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  | \
 80094e2:	4303      	orrs	r3, r0

  return HAL_OK;

}
 80094e4:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80094e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80094ea:	430b      	orrs	r3, r1
}
 80094ec:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80094ee:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop

080094f4 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094f4:	4a50      	ldr	r2, [pc, #320]	; (8009638 <SDMMC_CmdBlockLength+0x144>)
{
 80094f6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094f8:	4b50      	ldr	r3, [pc, #320]	; (800963c <SDMMC_CmdBlockLength+0x148>)
 80094fa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80094fc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009500:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009504:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009508:	484d      	ldr	r0, [pc, #308]	; (8009640 <SDMMC_CmdBlockLength+0x14c>)
 800950a:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800950e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009510:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009512:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009516:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009518:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800951c:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 8009520:	1e53      	subs	r3, r2, #1
 8009522:	b14a      	cbz	r2, 8009538 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009524:	4947      	ldr	r1, [pc, #284]	; (8009644 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
 8009526:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800952a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800952c:	420a      	tst	r2, r1
 800952e:	d001      	beq.n	8009534 <SDMMC_CmdBlockLength+0x40>
 8009530:	0492      	lsls	r2, r2, #18
 8009532:	d504      	bpl.n	800953e <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 8009534:	1c58      	adds	r0, r3, #1
 8009536:	d1f6      	bne.n	8009526 <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009538:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800953c:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800953e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8009542:	0758      	lsls	r0, r3, #29
 8009544:	d445      	bmi.n	80095d2 <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009546:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800954a:	f010 0001 	ands.w	r0, r0, #1
 800954e:	d137      	bne.n	80095c0 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009550:	4b3d      	ldr	r3, [pc, #244]	; (8009648 <SDMMC_CmdBlockLength+0x154>)
 8009552:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009556:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b10      	cmp	r3, #16
 800955e:	d136      	bne.n	80095ce <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
 8009560:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009564:	4839      	ldr	r0, [pc, #228]	; (800964c <SDMMC_CmdBlockLength+0x158>)
 8009566:	4018      	ands	r0, r3
 8009568:	2800      	cmp	r0, #0
 800956a:	d02f      	beq.n	80095cc <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800956c:	2b00      	cmp	r3, #0
 800956e:	db35      	blt.n	80095dc <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009570:	0059      	lsls	r1, r3, #1
 8009572:	d436      	bmi.n	80095e2 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009574:	009a      	lsls	r2, r3, #2
 8009576:	d436      	bmi.n	80095e6 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009578:	00d9      	lsls	r1, r3, #3
 800957a:	d436      	bmi.n	80095ea <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800957c:	011a      	lsls	r2, r3, #4
 800957e:	d437      	bmi.n	80095f0 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009580:	0159      	lsls	r1, r3, #5
 8009582:	d438      	bmi.n	80095f6 <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009584:	01da      	lsls	r2, r3, #7
 8009586:	d439      	bmi.n	80095fc <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009588:	0219      	lsls	r1, r3, #8
 800958a:	d43a      	bmi.n	8009602 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800958c:	025a      	lsls	r2, r3, #9
 800958e:	d43b      	bmi.n	8009608 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009590:	0299      	lsls	r1, r3, #10
 8009592:	d445      	bmi.n	8009620 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009594:	02da      	lsls	r2, r3, #11
 8009596:	d440      	bmi.n	800961a <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009598:	0359      	lsls	r1, r3, #13
 800959a:	d43b      	bmi.n	8009614 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800959c:	039a      	lsls	r2, r3, #14
 800959e:	d436      	bmi.n	800960e <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80095a0:	03d9      	lsls	r1, r3, #15
 80095a2:	d446      	bmi.n	8009632 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80095a4:	041a      	lsls	r2, r3, #16
 80095a6:	d441      	bmi.n	800962c <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80095a8:	0459      	lsls	r1, r3, #17
 80095aa:	d43c      	bmi.n	8009626 <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80095ac:	049a      	lsls	r2, r3, #18
 80095ae:	d40b      	bmi.n	80095c8 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095b0:	f013 0f08 	tst.w	r3, #8
 80095b4:	bf14      	ite	ne
 80095b6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80095ba:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80095be:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80095c0:	2301      	movs	r3, #1
 80095c2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095c6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80095c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80095cc:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095ce:	2001      	movs	r0, #1
 80095d0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095d2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095d4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095d6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095da:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095dc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80095e0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095e2:	2040      	movs	r0, #64	; 0x40
 80095e4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095e6:	2080      	movs	r0, #128	; 0x80
 80095e8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80095ee:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80095f4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80095f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80095fa:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009600:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009602:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009606:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009608:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800960c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800960e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009612:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009614:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009618:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800961a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800961e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009620:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009624:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009626:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800962a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800962c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009630:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009632:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009636:	4770      	bx	lr
 8009638:	2400001c 	.word	0x2400001c
 800963c:	10624dd3 	.word	0x10624dd3
 8009640:	fffee0c0 	.word	0xfffee0c0
 8009644:	00200045 	.word	0x00200045
 8009648:	002000c5 	.word	0x002000c5
 800964c:	fdffe008 	.word	0xfdffe008

08009650 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009650:	4a50      	ldr	r2, [pc, #320]	; (8009794 <SDMMC_CmdReadSingleBlock+0x144>)
{
 8009652:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009654:	4b50      	ldr	r3, [pc, #320]	; (8009798 <SDMMC_CmdReadSingleBlock+0x148>)
 8009656:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009658:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800965c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009660:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009664:	484d      	ldr	r0, [pc, #308]	; (800979c <SDMMC_CmdReadSingleBlock+0x14c>)
 8009666:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800966a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800966c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800966e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009672:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009674:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009678:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800967c:	1e53      	subs	r3, r2, #1
 800967e:	b14a      	cbz	r2, 8009694 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009680:	4947      	ldr	r1, [pc, #284]	; (80097a0 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 8009682:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8009686:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009688:	420a      	tst	r2, r1
 800968a:	d001      	beq.n	8009690 <SDMMC_CmdReadSingleBlock+0x40>
 800968c:	0492      	lsls	r2, r2, #18
 800968e:	d504      	bpl.n	800969a <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 8009690:	1c58      	adds	r0, r3, #1
 8009692:	d1f6      	bne.n	8009682 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009694:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009698:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800969a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800969e:	0758      	lsls	r0, r3, #29
 80096a0:	d445      	bmi.n	800972e <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096a2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 80096a6:	f010 0001 	ands.w	r0, r0, #1
 80096aa:	d137      	bne.n	800971c <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096ac:	4b3d      	ldr	r3, [pc, #244]	; (80097a4 <SDMMC_CmdReadSingleBlock+0x154>)
 80096ae:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80096b2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b11      	cmp	r3, #17
 80096ba:	d136      	bne.n	800972a <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 80096bc:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80096c0:	4839      	ldr	r0, [pc, #228]	; (80097a8 <SDMMC_CmdReadSingleBlock+0x158>)
 80096c2:	4018      	ands	r0, r3
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d02f      	beq.n	8009728 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	db35      	blt.n	8009738 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80096cc:	0059      	lsls	r1, r3, #1
 80096ce:	d436      	bmi.n	800973e <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80096d0:	009a      	lsls	r2, r3, #2
 80096d2:	d436      	bmi.n	8009742 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80096d4:	00d9      	lsls	r1, r3, #3
 80096d6:	d436      	bmi.n	8009746 <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80096d8:	011a      	lsls	r2, r3, #4
 80096da:	d437      	bmi.n	800974c <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80096dc:	0159      	lsls	r1, r3, #5
 80096de:	d438      	bmi.n	8009752 <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80096e0:	01da      	lsls	r2, r3, #7
 80096e2:	d439      	bmi.n	8009758 <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096e4:	0219      	lsls	r1, r3, #8
 80096e6:	d43a      	bmi.n	800975e <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096e8:	025a      	lsls	r2, r3, #9
 80096ea:	d43b      	bmi.n	8009764 <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80096ec:	0299      	lsls	r1, r3, #10
 80096ee:	d445      	bmi.n	800977c <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80096f0:	02da      	lsls	r2, r3, #11
 80096f2:	d440      	bmi.n	8009776 <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80096f4:	0359      	lsls	r1, r3, #13
 80096f6:	d43b      	bmi.n	8009770 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80096f8:	039a      	lsls	r2, r3, #14
 80096fa:	d436      	bmi.n	800976a <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80096fc:	03d9      	lsls	r1, r3, #15
 80096fe:	d446      	bmi.n	800978e <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009700:	041a      	lsls	r2, r3, #16
 8009702:	d441      	bmi.n	8009788 <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009704:	0459      	lsls	r1, r3, #17
 8009706:	d43c      	bmi.n	8009782 <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009708:	049a      	lsls	r2, r3, #18
 800970a:	d40b      	bmi.n	8009724 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800970c:	f013 0f08 	tst.w	r3, #8
 8009710:	bf14      	ite	ne
 8009712:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8009716:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800971a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800971c:	2301      	movs	r3, #1
 800971e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009722:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009724:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8009728:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800972a:	2001      	movs	r0, #1
 800972c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800972e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009730:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009732:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009736:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009738:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800973c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800973e:	2040      	movs	r0, #64	; 0x40
 8009740:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009742:	2080      	movs	r0, #128	; 0x80
 8009744:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009746:	f44f 7080 	mov.w	r0, #256	; 0x100
 800974a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800974c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009750:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009752:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009756:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009758:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800975c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800975e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009762:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009764:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009768:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800976a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800976e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009770:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009774:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009776:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800977a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800977c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009780:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009782:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009786:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009788:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800978c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800978e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009792:	4770      	bx	lr
 8009794:	2400001c 	.word	0x2400001c
 8009798:	10624dd3 	.word	0x10624dd3
 800979c:	fffee0c0 	.word	0xfffee0c0
 80097a0:	00200045 	.word	0x00200045
 80097a4:	002000c5 	.word	0x002000c5
 80097a8:	fdffe008 	.word	0xfdffe008

080097ac <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097ac:	4a50      	ldr	r2, [pc, #320]	; (80098f0 <SDMMC_CmdReadMultiBlock+0x144>)
{
 80097ae:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097b0:	4b50      	ldr	r3, [pc, #320]	; (80098f4 <SDMMC_CmdReadMultiBlock+0x148>)
 80097b2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80097b4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097b8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097bc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80097c0:	484d      	ldr	r0, [pc, #308]	; (80098f8 <SDMMC_CmdReadMultiBlock+0x14c>)
 80097c2:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097c6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097c8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097ca:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097ce:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097d0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097d4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80097d8:	1e53      	subs	r3, r2, #1
 80097da:	b14a      	cbz	r2, 80097f0 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80097dc:	4947      	ldr	r1, [pc, #284]	; (80098fc <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 80097de:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 80097e2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80097e4:	420a      	tst	r2, r1
 80097e6:	d001      	beq.n	80097ec <SDMMC_CmdReadMultiBlock+0x40>
 80097e8:	0492      	lsls	r2, r2, #18
 80097ea:	d504      	bpl.n	80097f6 <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 80097ec:	1c58      	adds	r0, r3, #1
 80097ee:	d1f6      	bne.n	80097de <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80097f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80097f4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097f6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 80097fa:	0758      	lsls	r0, r3, #29
 80097fc:	d445      	bmi.n	800988a <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097fe:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8009802:	f010 0001 	ands.w	r0, r0, #1
 8009806:	d137      	bne.n	8009878 <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009808:	4b3d      	ldr	r3, [pc, #244]	; (8009900 <SDMMC_CmdReadMultiBlock+0x154>)
 800980a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800980e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b12      	cmp	r3, #18
 8009816:	d136      	bne.n	8009886 <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 8009818:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800981c:	4839      	ldr	r0, [pc, #228]	; (8009904 <SDMMC_CmdReadMultiBlock+0x158>)
 800981e:	4018      	ands	r0, r3
 8009820:	2800      	cmp	r0, #0
 8009822:	d02f      	beq.n	8009884 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009824:	2b00      	cmp	r3, #0
 8009826:	db35      	blt.n	8009894 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009828:	0059      	lsls	r1, r3, #1
 800982a:	d436      	bmi.n	800989a <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800982c:	009a      	lsls	r2, r3, #2
 800982e:	d436      	bmi.n	800989e <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009830:	00d9      	lsls	r1, r3, #3
 8009832:	d436      	bmi.n	80098a2 <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009834:	011a      	lsls	r2, r3, #4
 8009836:	d437      	bmi.n	80098a8 <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009838:	0159      	lsls	r1, r3, #5
 800983a:	d438      	bmi.n	80098ae <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800983c:	01da      	lsls	r2, r3, #7
 800983e:	d439      	bmi.n	80098b4 <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009840:	0219      	lsls	r1, r3, #8
 8009842:	d43a      	bmi.n	80098ba <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009844:	025a      	lsls	r2, r3, #9
 8009846:	d43b      	bmi.n	80098c0 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009848:	0299      	lsls	r1, r3, #10
 800984a:	d445      	bmi.n	80098d8 <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800984c:	02da      	lsls	r2, r3, #11
 800984e:	d440      	bmi.n	80098d2 <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009850:	0359      	lsls	r1, r3, #13
 8009852:	d43b      	bmi.n	80098cc <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009854:	039a      	lsls	r2, r3, #14
 8009856:	d436      	bmi.n	80098c6 <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009858:	03d9      	lsls	r1, r3, #15
 800985a:	d446      	bmi.n	80098ea <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800985c:	041a      	lsls	r2, r3, #16
 800985e:	d441      	bmi.n	80098e4 <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009860:	0459      	lsls	r1, r3, #17
 8009862:	d43c      	bmi.n	80098de <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009864:	049a      	lsls	r2, r3, #18
 8009866:	d40b      	bmi.n	8009880 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009868:	f013 0f08 	tst.w	r3, #8
 800986c:	bf14      	ite	ne
 800986e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8009872:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009876:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009878:	2301      	movs	r3, #1
 800987a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800987e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009880:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8009884:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009886:	2001      	movs	r0, #1
 8009888:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800988a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800988c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800988e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009892:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009894:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009898:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800989a:	2040      	movs	r0, #64	; 0x40
 800989c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800989e:	2080      	movs	r0, #128	; 0x80
 80098a0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80098a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80098a6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80098a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80098ac:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80098ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80098b2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80098b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80098b8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80098be:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80098c4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80098c6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80098ca:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80098cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80098d0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80098d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80098d6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80098d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80098dc:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80098de:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80098e2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80098e4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80098e8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80098ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80098ee:	4770      	bx	lr
 80098f0:	2400001c 	.word	0x2400001c
 80098f4:	10624dd3 	.word	0x10624dd3
 80098f8:	fffee0c0 	.word	0xfffee0c0
 80098fc:	00200045 	.word	0x00200045
 8009900:	002000c5 	.word	0x002000c5
 8009904:	fdffe008 	.word	0xfdffe008

08009908 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009908:	4a50      	ldr	r2, [pc, #320]	; (8009a4c <SDMMC_CmdWriteSingleBlock+0x144>)
{
 800990a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800990c:	4b50      	ldr	r3, [pc, #320]	; (8009a50 <SDMMC_CmdWriteSingleBlock+0x148>)
 800990e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009910:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009914:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009918:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800991c:	484d      	ldr	r0, [pc, #308]	; (8009a54 <SDMMC_CmdWriteSingleBlock+0x14c>)
 800991e:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009922:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009924:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009926:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800992a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800992c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009930:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009934:	1e53      	subs	r3, r2, #1
 8009936:	b14a      	cbz	r2, 800994c <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009938:	4947      	ldr	r1, [pc, #284]	; (8009a58 <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800993a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800993e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009940:	420a      	tst	r2, r1
 8009942:	d001      	beq.n	8009948 <SDMMC_CmdWriteSingleBlock+0x40>
 8009944:	0492      	lsls	r2, r2, #18
 8009946:	d504      	bpl.n	8009952 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 8009948:	1c58      	adds	r0, r3, #1
 800994a:	d1f6      	bne.n	800993a <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800994c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009950:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009952:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8009956:	0758      	lsls	r0, r3, #29
 8009958:	d445      	bmi.n	80099e6 <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800995a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800995e:	f010 0001 	ands.w	r0, r0, #1
 8009962:	d137      	bne.n	80099d4 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009964:	4b3d      	ldr	r3, [pc, #244]	; (8009a5c <SDMMC_CmdWriteSingleBlock+0x154>)
 8009966:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800996a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b18      	cmp	r3, #24
 8009972:	d136      	bne.n	80099e2 <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 8009974:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009978:	4839      	ldr	r0, [pc, #228]	; (8009a60 <SDMMC_CmdWriteSingleBlock+0x158>)
 800997a:	4018      	ands	r0, r3
 800997c:	2800      	cmp	r0, #0
 800997e:	d02f      	beq.n	80099e0 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009980:	2b00      	cmp	r3, #0
 8009982:	db35      	blt.n	80099f0 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009984:	0059      	lsls	r1, r3, #1
 8009986:	d436      	bmi.n	80099f6 <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009988:	009a      	lsls	r2, r3, #2
 800998a:	d436      	bmi.n	80099fa <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800998c:	00d9      	lsls	r1, r3, #3
 800998e:	d436      	bmi.n	80099fe <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009990:	011a      	lsls	r2, r3, #4
 8009992:	d437      	bmi.n	8009a04 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009994:	0159      	lsls	r1, r3, #5
 8009996:	d438      	bmi.n	8009a0a <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009998:	01da      	lsls	r2, r3, #7
 800999a:	d439      	bmi.n	8009a10 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800999c:	0219      	lsls	r1, r3, #8
 800999e:	d43a      	bmi.n	8009a16 <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80099a0:	025a      	lsls	r2, r3, #9
 80099a2:	d43b      	bmi.n	8009a1c <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80099a4:	0299      	lsls	r1, r3, #10
 80099a6:	d445      	bmi.n	8009a34 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80099a8:	02da      	lsls	r2, r3, #11
 80099aa:	d440      	bmi.n	8009a2e <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80099ac:	0359      	lsls	r1, r3, #13
 80099ae:	d43b      	bmi.n	8009a28 <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80099b0:	039a      	lsls	r2, r3, #14
 80099b2:	d436      	bmi.n	8009a22 <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80099b4:	03d9      	lsls	r1, r3, #15
 80099b6:	d446      	bmi.n	8009a46 <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80099b8:	041a      	lsls	r2, r3, #16
 80099ba:	d441      	bmi.n	8009a40 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80099bc:	0459      	lsls	r1, r3, #17
 80099be:	d43c      	bmi.n	8009a3a <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80099c0:	049a      	lsls	r2, r3, #18
 80099c2:	d40b      	bmi.n	80099dc <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80099c4:	f013 0f08 	tst.w	r3, #8
 80099c8:	bf14      	ite	ne
 80099ca:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80099ce:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80099d2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80099d4:	2301      	movs	r3, #1
 80099d6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099da:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80099dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80099e0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099e2:	2001      	movs	r0, #1
 80099e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099e6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099e8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099ea:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099ee:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80099f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80099f4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80099f6:	2040      	movs	r0, #64	; 0x40
 80099f8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80099fa:	2080      	movs	r0, #128	; 0x80
 80099fc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80099fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009a02:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009a04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009a08:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009a0a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009a0e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009a10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009a14:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009a1a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009a20:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009a22:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009a26:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009a28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009a2c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009a2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009a32:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009a34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009a38:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009a3a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009a3e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009a44:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009a4a:	4770      	bx	lr
 8009a4c:	2400001c 	.word	0x2400001c
 8009a50:	10624dd3 	.word	0x10624dd3
 8009a54:	fffee0c0 	.word	0xfffee0c0
 8009a58:	00200045 	.word	0x00200045
 8009a5c:	002000c5 	.word	0x002000c5
 8009a60:	fdffe008 	.word	0xfdffe008

08009a64 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a64:	4a50      	ldr	r2, [pc, #320]	; (8009ba8 <SDMMC_CmdWriteMultiBlock+0x144>)
{
 8009a66:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a68:	4b50      	ldr	r3, [pc, #320]	; (8009bac <SDMMC_CmdWriteMultiBlock+0x148>)
 8009a6a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009a6c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a70:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a74:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009a78:	484d      	ldr	r0, [pc, #308]	; (8009bb0 <SDMMC_CmdWriteMultiBlock+0x14c>)
 8009a7a:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a7e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a80:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a82:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a86:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a88:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a8c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009a90:	1e53      	subs	r3, r2, #1
 8009a92:	b14a      	cbz	r2, 8009aa8 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009a94:	4947      	ldr	r1, [pc, #284]	; (8009bb4 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 8009a96:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8009a9a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a9c:	420a      	tst	r2, r1
 8009a9e:	d001      	beq.n	8009aa4 <SDMMC_CmdWriteMultiBlock+0x40>
 8009aa0:	0492      	lsls	r2, r2, #18
 8009aa2:	d504      	bpl.n	8009aae <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 8009aa4:	1c58      	adds	r0, r3, #1
 8009aa6:	d1f6      	bne.n	8009a96 <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009aa8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009aac:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009aae:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8009ab2:	0758      	lsls	r0, r3, #29
 8009ab4:	d445      	bmi.n	8009b42 <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ab6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8009aba:	f010 0001 	ands.w	r0, r0, #1
 8009abe:	d137      	bne.n	8009b30 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ac0:	4b3d      	ldr	r3, [pc, #244]	; (8009bb8 <SDMMC_CmdWriteMultiBlock+0x154>)
 8009ac2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009ac6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b19      	cmp	r3, #25
 8009ace:	d136      	bne.n	8009b3e <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 8009ad0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009ad4:	4839      	ldr	r0, [pc, #228]	; (8009bbc <SDMMC_CmdWriteMultiBlock+0x158>)
 8009ad6:	4018      	ands	r0, r3
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d02f      	beq.n	8009b3c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	db35      	blt.n	8009b4c <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009ae0:	0059      	lsls	r1, r3, #1
 8009ae2:	d436      	bmi.n	8009b52 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ae4:	009a      	lsls	r2, r3, #2
 8009ae6:	d436      	bmi.n	8009b56 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009ae8:	00d9      	lsls	r1, r3, #3
 8009aea:	d436      	bmi.n	8009b5a <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009aec:	011a      	lsls	r2, r3, #4
 8009aee:	d437      	bmi.n	8009b60 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009af0:	0159      	lsls	r1, r3, #5
 8009af2:	d438      	bmi.n	8009b66 <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009af4:	01da      	lsls	r2, r3, #7
 8009af6:	d439      	bmi.n	8009b6c <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009af8:	0219      	lsls	r1, r3, #8
 8009afa:	d43a      	bmi.n	8009b72 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009afc:	025a      	lsls	r2, r3, #9
 8009afe:	d43b      	bmi.n	8009b78 <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009b00:	0299      	lsls	r1, r3, #10
 8009b02:	d445      	bmi.n	8009b90 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009b04:	02da      	lsls	r2, r3, #11
 8009b06:	d440      	bmi.n	8009b8a <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009b08:	0359      	lsls	r1, r3, #13
 8009b0a:	d43b      	bmi.n	8009b84 <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009b0c:	039a      	lsls	r2, r3, #14
 8009b0e:	d436      	bmi.n	8009b7e <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009b10:	03d9      	lsls	r1, r3, #15
 8009b12:	d446      	bmi.n	8009ba2 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009b14:	041a      	lsls	r2, r3, #16
 8009b16:	d441      	bmi.n	8009b9c <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009b18:	0459      	lsls	r1, r3, #17
 8009b1a:	d43c      	bmi.n	8009b96 <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009b1c:	049a      	lsls	r2, r3, #18
 8009b1e:	d40b      	bmi.n	8009b38 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b20:	f013 0f08 	tst.w	r3, #8
 8009b24:	bf14      	ite	ne
 8009b26:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8009b2a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009b2e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b30:	2301      	movs	r3, #1
 8009b32:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b36:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009b38:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8009b3c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b3e:	2001      	movs	r0, #1
 8009b40:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b42:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b44:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b46:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b4a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009b4c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009b50:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009b52:	2040      	movs	r0, #64	; 0x40
 8009b54:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009b56:	2080      	movs	r0, #128	; 0x80
 8009b58:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009b5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b5e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009b60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b64:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009b66:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009b6a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009b6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009b70:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009b76:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009b7c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009b7e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009b82:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009b84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009b88:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009b8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b8e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009b90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009b94:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009b96:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009b9a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009b9c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009ba0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009ba2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009ba6:	4770      	bx	lr
 8009ba8:	2400001c 	.word	0x2400001c
 8009bac:	10624dd3 	.word	0x10624dd3
 8009bb0:	fffee0c0 	.word	0xfffee0c0
 8009bb4:	00200045 	.word	0x00200045
 8009bb8:	002000c5 	.word	0x002000c5
 8009bbc:	fdffe008 	.word	0xfdffe008

08009bc0 <SDMMC_CmdStopTransfer>:
{
 8009bc0:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bc2:	4b7c      	ldr	r3, [pc, #496]	; (8009db4 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009bc4:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bc6:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009bc8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009bcc:	4b7a      	ldr	r3, [pc, #488]	; (8009db8 <SDMMC_CmdStopTransfer+0x1f8>)
{
 8009bce:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bd0:	4c7a      	ldr	r4, [pc, #488]	; (8009dbc <SDMMC_CmdStopTransfer+0x1fc>)
  SDMMCx->ARG = Command->Argument;
 8009bd2:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009bd4:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bd6:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009bda:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bdc:	4c78      	ldr	r4, [pc, #480]	; (8009dc0 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009bde:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009be2:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009be4:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009be6:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 8009bea:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bec:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009bf0:	68cc      	ldr	r4, [r1, #12]
 8009bf2:	4023      	ands	r3, r4
 8009bf4:	4318      	orrs	r0, r3
 8009bf6:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8009bf8:	b14a      	cbz	r2, 8009c0e <SDMMC_CmdStopTransfer+0x4e>
 8009bfa:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009bfc:	4871      	ldr	r0, [pc, #452]	; (8009dc4 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
 8009bfe:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8009c00:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009c02:	4202      	tst	r2, r0
 8009c04:	d001      	beq.n	8009c0a <SDMMC_CmdStopTransfer+0x4a>
 8009c06:	0492      	lsls	r2, r2, #18
 8009c08:	d509      	bpl.n	8009c1e <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8009c0a:	1c5c      	adds	r4, r3, #1
 8009c0c:	d1f7      	bne.n	8009bfe <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c0e:	68cb      	ldr	r3, [r1, #12]
 8009c10:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c18:	60cb      	str	r3, [r1, #12]
}
 8009c1a:	bc30      	pop	{r4, r5}
 8009c1c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c1e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009c20:	075b      	lsls	r3, r3, #29
 8009c22:	d452      	bmi.n	8009cca <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c24:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8009c26:	f010 0001 	ands.w	r0, r0, #1
 8009c2a:	d13b      	bne.n	8009ca4 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c2c:	4b66      	ldr	r3, [pc, #408]	; (8009dc8 <SDMMC_CmdStopTransfer+0x208>)
 8009c2e:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009c30:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b0c      	cmp	r3, #12
 8009c36:	d142      	bne.n	8009cbe <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
 8009c38:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009c3a:	4a64      	ldr	r2, [pc, #400]	; (8009dcc <SDMMC_CmdStopTransfer+0x20c>)
 8009c3c:	401a      	ands	r2, r3
 8009c3e:	2a00      	cmp	r2, #0
 8009c40:	d037      	beq.n	8009cb2 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	db35      	blt.n	8009cb2 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c46:	005d      	lsls	r5, r3, #1
 8009c48:	d446      	bmi.n	8009cd8 <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c4a:	009c      	lsls	r4, r3, #2
 8009c4c:	d44a      	bmi.n	8009ce4 <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c4e:	00d8      	lsls	r0, r3, #3
 8009c50:	d44e      	bmi.n	8009cf0 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c52:	011a      	lsls	r2, r3, #4
 8009c54:	d453      	bmi.n	8009cfe <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c56:	015d      	lsls	r5, r3, #5
 8009c58:	d458      	bmi.n	8009d0c <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c5a:	01dc      	lsls	r4, r3, #7
 8009c5c:	d464      	bmi.n	8009d28 <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c5e:	0218      	lsls	r0, r3, #8
 8009c60:	d45b      	bmi.n	8009d1a <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c62:	025a      	lsls	r2, r3, #9
 8009c64:	d46e      	bmi.n	8009d44 <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c66:	029d      	lsls	r5, r3, #10
 8009c68:	d465      	bmi.n	8009d36 <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c6a:	02dc      	lsls	r4, r3, #11
 8009c6c:	d47f      	bmi.n	8009d6e <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c6e:	0358      	lsls	r0, r3, #13
 8009c70:	d476      	bmi.n	8009d60 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c72:	039a      	lsls	r2, r3, #14
 8009c74:	d46d      	bmi.n	8009d52 <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c76:	03dd      	lsls	r5, r3, #15
 8009c78:	f100 8095 	bmi.w	8009da6 <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c7c:	041c      	lsls	r4, r3, #16
 8009c7e:	f100 8084 	bmi.w	8009d8a <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c82:	0458      	lsls	r0, r3, #17
 8009c84:	d47a      	bmi.n	8009d7c <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c86:	049a      	lsls	r2, r3, #18
 8009c88:	f100 8086 	bmi.w	8009d98 <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009c8c:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c90:	68cb      	ldr	r3, [r1, #12]
 8009c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c96:	bf14      	ite	ne
 8009c98:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c9c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ca0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ca2:	e7ba      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ca8:	68cb      	ldr	r3, [r1, #12]
 8009caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cae:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cb0:	e7b3      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cb2:	68cb      	ldr	r3, [r1, #12]
 8009cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 8009cb8:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cba:	60cb      	str	r3, [r1, #12]
}
 8009cbc:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cbe:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cc0:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cc6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cc8:	e7a7      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009cca:	2004      	movs	r0, #4
 8009ccc:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cce:	68cb      	ldr	r3, [r1, #12]
 8009cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cd4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cd6:	e7a0      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cd8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009cda:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ce0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ce2:	e79a      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ce4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ce6:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cec:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cee:	e794      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cf0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009cf2:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cfa:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cfc:	e78d      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cfe:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d00:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d08:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d0a:	e786      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d0c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d0e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d16:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d18:	e77f      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d1a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d24:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d26:	e778      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d28:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d32:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d34:	e771      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d36:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d40:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d42:	e76a      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d44:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d46:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d4e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d50:	e763      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d52:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d5c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d5e:	e75c      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d60:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d62:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d6a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d6c:	e755      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d6e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 8009d70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d78:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d7a:	e74e      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d7c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009d7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d86:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d88:	e747      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d8a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009d8c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d94:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d96:	e740      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d98:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 8009d9a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009da2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009da4:	e739      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009da6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009da8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009db0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009db2:	e732      	b.n	8009c1a <SDMMC_CmdStopTransfer+0x5a>
 8009db4:	2400001c 	.word	0x2400001c
 8009db8:	fffee0c0 	.word	0xfffee0c0
 8009dbc:	10624dd3 	.word	0x10624dd3
 8009dc0:	05f5e100 	.word	0x05f5e100
 8009dc4:	00200045 	.word	0x00200045
 8009dc8:	002000c5 	.word	0x002000c5
 8009dcc:	fdffe008 	.word	0xfdffe008

08009dd0 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dd0:	4a50      	ldr	r2, [pc, #320]	; (8009f14 <SDMMC_CmdSelDesel+0x144>)
{
 8009dd2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dd4:	4b50      	ldr	r3, [pc, #320]	; (8009f18 <SDMMC_CmdSelDesel+0x148>)
 8009dd6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009dd8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ddc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009de0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009de4:	484d      	ldr	r0, [pc, #308]	; (8009f1c <SDMMC_CmdSelDesel+0x14c>)
 8009de6:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009dec:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dee:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009df2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009df4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009df8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009dfc:	1e53      	subs	r3, r2, #1
 8009dfe:	b14a      	cbz	r2, 8009e14 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009e00:	4947      	ldr	r1, [pc, #284]	; (8009f20 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
 8009e02:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8009e06:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e08:	420a      	tst	r2, r1
 8009e0a:	d001      	beq.n	8009e10 <SDMMC_CmdSelDesel+0x40>
 8009e0c:	0492      	lsls	r2, r2, #18
 8009e0e:	d504      	bpl.n	8009e1a <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 8009e10:	1c58      	adds	r0, r3, #1
 8009e12:	d1f6      	bne.n	8009e02 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009e14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009e18:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e1a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8009e1e:	0758      	lsls	r0, r3, #29
 8009e20:	d445      	bmi.n	8009eae <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e22:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8009e26:	f010 0001 	ands.w	r0, r0, #1
 8009e2a:	d137      	bne.n	8009e9c <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e2c:	4b3d      	ldr	r3, [pc, #244]	; (8009f24 <SDMMC_CmdSelDesel+0x154>)
 8009e2e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009e32:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b07      	cmp	r3, #7
 8009e3a:	d136      	bne.n	8009eaa <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
 8009e3c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e40:	4839      	ldr	r0, [pc, #228]	; (8009f28 <SDMMC_CmdSelDesel+0x158>)
 8009e42:	4018      	ands	r0, r3
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d02f      	beq.n	8009ea8 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	db35      	blt.n	8009eb8 <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e4c:	0059      	lsls	r1, r3, #1
 8009e4e:	d436      	bmi.n	8009ebe <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e50:	009a      	lsls	r2, r3, #2
 8009e52:	d436      	bmi.n	8009ec2 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e54:	00d9      	lsls	r1, r3, #3
 8009e56:	d436      	bmi.n	8009ec6 <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e58:	011a      	lsls	r2, r3, #4
 8009e5a:	d437      	bmi.n	8009ecc <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e5c:	0159      	lsls	r1, r3, #5
 8009e5e:	d438      	bmi.n	8009ed2 <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009e60:	01da      	lsls	r2, r3, #7
 8009e62:	d439      	bmi.n	8009ed8 <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009e64:	0219      	lsls	r1, r3, #8
 8009e66:	d43a      	bmi.n	8009ede <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009e68:	025a      	lsls	r2, r3, #9
 8009e6a:	d43b      	bmi.n	8009ee4 <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009e6c:	0299      	lsls	r1, r3, #10
 8009e6e:	d445      	bmi.n	8009efc <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009e70:	02da      	lsls	r2, r3, #11
 8009e72:	d440      	bmi.n	8009ef6 <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e74:	0359      	lsls	r1, r3, #13
 8009e76:	d43b      	bmi.n	8009ef0 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e78:	039a      	lsls	r2, r3, #14
 8009e7a:	d436      	bmi.n	8009eea <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e7c:	03d9      	lsls	r1, r3, #15
 8009e7e:	d446      	bmi.n	8009f0e <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e80:	041a      	lsls	r2, r3, #16
 8009e82:	d441      	bmi.n	8009f08 <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e84:	0459      	lsls	r1, r3, #17
 8009e86:	d43c      	bmi.n	8009f02 <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e88:	049a      	lsls	r2, r3, #18
 8009e8a:	d40b      	bmi.n	8009ea4 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e8c:	f013 0f08 	tst.w	r3, #8
 8009e90:	bf14      	ite	ne
 8009e92:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8009e96:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009e9a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ea2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009ea4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8009ea8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009eaa:	2001      	movs	r0, #1
 8009eac:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009eae:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eb0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009eb2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eb6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009eb8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009ebc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ebe:	2040      	movs	r0, #64	; 0x40
 8009ec0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ec2:	2080      	movs	r0, #128	; 0x80
 8009ec4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ec6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009eca:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009ecc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009ed0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ed2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009ed6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ed8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009edc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ede:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009ee2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ee4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009ee8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009eea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009eee:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009ef0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009ef4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009ef6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009efa:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009efc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009f00:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f02:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009f06:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f08:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009f0c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009f12:	4770      	bx	lr
 8009f14:	2400001c 	.word	0x2400001c
 8009f18:	10624dd3 	.word	0x10624dd3
 8009f1c:	fffee0c0 	.word	0xfffee0c0
 8009f20:	00200045 	.word	0x00200045
 8009f24:	002000c5 	.word	0x002000c5
 8009f28:	fdffe008 	.word	0xfdffe008

08009f2c <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f2c:	4b11      	ldr	r3, [pc, #68]	; (8009f74 <SDMMC_CmdGoIdleState+0x48>)
{
 8009f2e:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f30:	4a11      	ldr	r2, [pc, #68]	; (8009f78 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f32:	681b      	ldr	r3, [r3, #0]
{
 8009f34:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f36:	4c11      	ldr	r4, [pc, #68]	; (8009f7c <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8009f38:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f3a:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 8009f3e:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f40:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f42:	0a5b      	lsrs	r3, r3, #9
 8009f44:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f48:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f4a:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f52:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f54:	e002      	b.n	8009f5c <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009f56:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8009f58:	0612      	lsls	r2, r2, #24
 8009f5a:	d405      	bmi.n	8009f68 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	d2fa      	bcs.n	8009f56 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8009f60:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009f64:	bc30      	pop	{r4, r5}
 8009f66:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f68:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 8009f6a:	2000      	movs	r0, #0
}
 8009f6c:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f6e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	2400001c 	.word	0x2400001c
 8009f78:	fffee0c0 	.word	0xfffee0c0
 8009f7c:	10624dd3 	.word	0x10624dd3
 8009f80:	002000c5 	.word	0x002000c5

08009f84 <SDMMC_CmdOperCond>:
{
 8009f84:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f86:	4a1c      	ldr	r2, [pc, #112]	; (8009ff8 <SDMMC_CmdOperCond+0x74>)
 8009f88:	4b1c      	ldr	r3, [pc, #112]	; (8009ffc <SDMMC_CmdOperCond+0x78>)
 8009f8a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f8c:	481c      	ldr	r0, [pc, #112]	; (800a000 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f8e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f92:	f241 1308 	movw	r3, #4360	; 0x1108
{
 8009f96:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8009f98:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f9c:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 8009f9e:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fa0:	68cc      	ldr	r4, [r1, #12]
 8009fa2:	4020      	ands	r0, r4
 8009fa4:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009fa6:	f241 3088 	movw	r0, #5000	; 0x1388
 8009faa:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fae:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8009fb0:	b14a      	cbz	r2, 8009fc6 <SDMMC_CmdOperCond+0x42>
 8009fb2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8009fb4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8009fb6:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fb8:	f012 0f45 	tst.w	r2, #69	; 0x45
 8009fbc:	d001      	beq.n	8009fc2 <SDMMC_CmdOperCond+0x3e>
 8009fbe:	0490      	lsls	r0, r2, #18
 8009fc0:	d506      	bpl.n	8009fd0 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 8009fc2:	1c5c      	adds	r4, r3, #1
 8009fc4:	d1f6      	bne.n	8009fb4 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009fc6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fce:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fd0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009fd2:	075a      	lsls	r2, r3, #29
 8009fd4:	d40c      	bmi.n	8009ff0 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fd6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8009fd8:	f010 0001 	ands.w	r0, r0, #1
 8009fdc:	d105      	bne.n	8009fea <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009fde:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009fe0:	065b      	lsls	r3, r3, #25
 8009fe2:	d5f2      	bpl.n	8009fca <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009fe4:	2340      	movs	r3, #64	; 0x40
 8009fe6:	638b      	str	r3, [r1, #56]	; 0x38
 8009fe8:	e7ef      	b.n	8009fca <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009fea:	2301      	movs	r3, #1
 8009fec:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fee:	e7ec      	b.n	8009fca <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ff0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ff2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ff4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ff6:	e7e8      	b.n	8009fca <SDMMC_CmdOperCond+0x46>
 8009ff8:	2400001c 	.word	0x2400001c
 8009ffc:	10624dd3 	.word	0x10624dd3
 800a000:	fffee0c0 	.word	0xfffee0c0

0800a004 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a004:	4a50      	ldr	r2, [pc, #320]	; (800a148 <SDMMC_CmdAppCommand+0x144>)
{
 800a006:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a008:	4b50      	ldr	r3, [pc, #320]	; (800a14c <SDMMC_CmdAppCommand+0x148>)
 800a00a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a00c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a010:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a014:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a018:	484d      	ldr	r0, [pc, #308]	; (800a150 <SDMMC_CmdAppCommand+0x14c>)
 800a01a:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a01e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a020:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a022:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a026:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a028:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a02c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a030:	1e53      	subs	r3, r2, #1
 800a032:	b14a      	cbz	r2, 800a048 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a034:	4947      	ldr	r1, [pc, #284]	; (800a154 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
 800a036:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a03a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a03c:	420a      	tst	r2, r1
 800a03e:	d001      	beq.n	800a044 <SDMMC_CmdAppCommand+0x40>
 800a040:	0492      	lsls	r2, r2, #18
 800a042:	d504      	bpl.n	800a04e <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800a044:	1c58      	adds	r0, r3, #1
 800a046:	d1f6      	bne.n	800a036 <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a048:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a04c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a04e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a052:	0758      	lsls	r0, r3, #29
 800a054:	d445      	bmi.n	800a0e2 <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a056:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a05a:	f010 0001 	ands.w	r0, r0, #1
 800a05e:	d137      	bne.n	800a0d0 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a060:	4b3d      	ldr	r3, [pc, #244]	; (800a158 <SDMMC_CmdAppCommand+0x154>)
 800a062:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a066:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b37      	cmp	r3, #55	; 0x37
 800a06e:	d136      	bne.n	800a0de <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 800a070:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a074:	4839      	ldr	r0, [pc, #228]	; (800a15c <SDMMC_CmdAppCommand+0x158>)
 800a076:	4018      	ands	r0, r3
 800a078:	2800      	cmp	r0, #0
 800a07a:	d02f      	beq.n	800a0dc <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	db35      	blt.n	800a0ec <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a080:	0059      	lsls	r1, r3, #1
 800a082:	d436      	bmi.n	800a0f2 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a084:	009a      	lsls	r2, r3, #2
 800a086:	d436      	bmi.n	800a0f6 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a088:	00d9      	lsls	r1, r3, #3
 800a08a:	d436      	bmi.n	800a0fa <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a08c:	011a      	lsls	r2, r3, #4
 800a08e:	d437      	bmi.n	800a100 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a090:	0159      	lsls	r1, r3, #5
 800a092:	d438      	bmi.n	800a106 <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a094:	01da      	lsls	r2, r3, #7
 800a096:	d439      	bmi.n	800a10c <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a098:	0219      	lsls	r1, r3, #8
 800a09a:	d43a      	bmi.n	800a112 <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a09c:	025a      	lsls	r2, r3, #9
 800a09e:	d43b      	bmi.n	800a118 <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a0a0:	0299      	lsls	r1, r3, #10
 800a0a2:	d445      	bmi.n	800a130 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a0a4:	02da      	lsls	r2, r3, #11
 800a0a6:	d440      	bmi.n	800a12a <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a0a8:	0359      	lsls	r1, r3, #13
 800a0aa:	d43b      	bmi.n	800a124 <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a0ac:	039a      	lsls	r2, r3, #14
 800a0ae:	d436      	bmi.n	800a11e <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a0b0:	03d9      	lsls	r1, r3, #15
 800a0b2:	d446      	bmi.n	800a142 <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a0b4:	041a      	lsls	r2, r3, #16
 800a0b6:	d441      	bmi.n	800a13c <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a0b8:	0459      	lsls	r1, r3, #17
 800a0ba:	d43c      	bmi.n	800a136 <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a0bc:	049a      	lsls	r2, r3, #18
 800a0be:	d40b      	bmi.n	800a0d8 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0c0:	f013 0f08 	tst.w	r3, #8
 800a0c4:	bf14      	ite	ne
 800a0c6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a0ca:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a0ce:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0d6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a0d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800a0dc:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0de:	2001      	movs	r0, #1
 800a0e0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0e2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0e4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0e6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0ea:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0ec:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a0f0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0f2:	2040      	movs	r0, #64	; 0x40
 800a0f4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0f6:	2080      	movs	r0, #128	; 0x80
 800a0f8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a0fe:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a100:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a104:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a106:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a10a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a10c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a110:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a112:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a116:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a118:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a11c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a11e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a122:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a124:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a128:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a12a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a12e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a130:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a134:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a136:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a13a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a13c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a140:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a142:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a146:	4770      	bx	lr
 800a148:	2400001c 	.word	0x2400001c
 800a14c:	10624dd3 	.word	0x10624dd3
 800a150:	fffee0c0 	.word	0xfffee0c0
 800a154:	00200045 	.word	0x00200045
 800a158:	002000c5 	.word	0x002000c5
 800a15c:	fdffe008 	.word	0xfdffe008

0800a160 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a160:	4a19      	ldr	r2, [pc, #100]	; (800a1c8 <SDMMC_CmdAppOperCommand+0x68>)
{
 800a162:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a164:	4b19      	ldr	r3, [pc, #100]	; (800a1cc <SDMMC_CmdAppOperCommand+0x6c>)
 800a166:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a168:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a16c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a170:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a174:	4816      	ldr	r0, [pc, #88]	; (800a1d0 <SDMMC_CmdAppOperCommand+0x70>)
 800a176:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a17a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a17c:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a17e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a182:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a184:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a188:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a18c:	1e53      	subs	r3, r2, #1
 800a18e:	b14a      	cbz	r2, 800a1a4 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800a190:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a194:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a196:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a19a:	d001      	beq.n	800a1a0 <SDMMC_CmdAppOperCommand+0x40>
 800a19c:	0492      	lsls	r2, r2, #18
 800a19e:	d504      	bpl.n	800a1aa <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800a1a0:	1c59      	adds	r1, r3, #1
 800a1a2:	d1f5      	bne.n	800a190 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a1a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a1a8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1aa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a1ae:	f010 0004 	ands.w	r0, r0, #4
 800a1b2:	d103      	bne.n	800a1bc <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1b4:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <SDMMC_CmdAppOperCommand+0x74>)
 800a1b6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800a1ba:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1bc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1be:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1c0:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	2400001c 	.word	0x2400001c
 800a1cc:	10624dd3 	.word	0x10624dd3
 800a1d0:	fffee0c0 	.word	0xfffee0c0
 800a1d4:	002000c5 	.word	0x002000c5

0800a1d8 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1d8:	4a50      	ldr	r2, [pc, #320]	; (800a31c <SDMMC_CmdBusWidth+0x144>)
{
 800a1da:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1dc:	4b50      	ldr	r3, [pc, #320]	; (800a320 <SDMMC_CmdBusWidth+0x148>)
 800a1de:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a1e0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1e4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1e8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a1ec:	484d      	ldr	r0, [pc, #308]	; (800a324 <SDMMC_CmdBusWidth+0x14c>)
 800a1ee:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1f2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1f4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1f6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1fa:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1fc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a200:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a204:	1e53      	subs	r3, r2, #1
 800a206:	b14a      	cbz	r2, 800a21c <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a208:	4947      	ldr	r1, [pc, #284]	; (800a328 <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
 800a20a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a20e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a210:	420a      	tst	r2, r1
 800a212:	d001      	beq.n	800a218 <SDMMC_CmdBusWidth+0x40>
 800a214:	0492      	lsls	r2, r2, #18
 800a216:	d504      	bpl.n	800a222 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800a218:	1c58      	adds	r0, r3, #1
 800a21a:	d1f6      	bne.n	800a20a <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a21c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a220:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a222:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a226:	0758      	lsls	r0, r3, #29
 800a228:	d445      	bmi.n	800a2b6 <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a22a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a22e:	f010 0001 	ands.w	r0, r0, #1
 800a232:	d137      	bne.n	800a2a4 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a234:	4b3d      	ldr	r3, [pc, #244]	; (800a32c <SDMMC_CmdBusWidth+0x154>)
 800a236:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a23a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b06      	cmp	r3, #6
 800a242:	d136      	bne.n	800a2b2 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 800a244:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a248:	4839      	ldr	r0, [pc, #228]	; (800a330 <SDMMC_CmdBusWidth+0x158>)
 800a24a:	4018      	ands	r0, r3
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d02f      	beq.n	800a2b0 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a250:	2b00      	cmp	r3, #0
 800a252:	db35      	blt.n	800a2c0 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a254:	0059      	lsls	r1, r3, #1
 800a256:	d436      	bmi.n	800a2c6 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a258:	009a      	lsls	r2, r3, #2
 800a25a:	d436      	bmi.n	800a2ca <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a25c:	00d9      	lsls	r1, r3, #3
 800a25e:	d436      	bmi.n	800a2ce <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a260:	011a      	lsls	r2, r3, #4
 800a262:	d437      	bmi.n	800a2d4 <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a264:	0159      	lsls	r1, r3, #5
 800a266:	d438      	bmi.n	800a2da <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a268:	01da      	lsls	r2, r3, #7
 800a26a:	d439      	bmi.n	800a2e0 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a26c:	0219      	lsls	r1, r3, #8
 800a26e:	d43a      	bmi.n	800a2e6 <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a270:	025a      	lsls	r2, r3, #9
 800a272:	d43b      	bmi.n	800a2ec <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a274:	0299      	lsls	r1, r3, #10
 800a276:	d445      	bmi.n	800a304 <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a278:	02da      	lsls	r2, r3, #11
 800a27a:	d440      	bmi.n	800a2fe <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a27c:	0359      	lsls	r1, r3, #13
 800a27e:	d43b      	bmi.n	800a2f8 <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a280:	039a      	lsls	r2, r3, #14
 800a282:	d436      	bmi.n	800a2f2 <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a284:	03d9      	lsls	r1, r3, #15
 800a286:	d446      	bmi.n	800a316 <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a288:	041a      	lsls	r2, r3, #16
 800a28a:	d441      	bmi.n	800a310 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a28c:	0459      	lsls	r1, r3, #17
 800a28e:	d43c      	bmi.n	800a30a <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a290:	049a      	lsls	r2, r3, #18
 800a292:	d40b      	bmi.n	800a2ac <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a294:	f013 0f08 	tst.w	r3, #8
 800a298:	bf14      	ite	ne
 800a29a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a29e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a2a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2aa:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a2ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800a2b0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2b6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2b8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2ba:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2be:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a2c0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a2c4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a2c6:	2040      	movs	r0, #64	; 0x40
 800a2c8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a2ca:	2080      	movs	r0, #128	; 0x80
 800a2cc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a2ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a2d2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a2d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a2d8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a2da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a2de:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a2e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a2e4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a2ea:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a2f0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a2f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a2f6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a2f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a2fc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a2fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a302:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a304:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a308:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a30a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a30e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a310:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a314:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a316:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a31a:	4770      	bx	lr
 800a31c:	2400001c 	.word	0x2400001c
 800a320:	10624dd3 	.word	0x10624dd3
 800a324:	fffee0c0 	.word	0xfffee0c0
 800a328:	00200045 	.word	0x00200045
 800a32c:	002000c5 	.word	0x002000c5
 800a330:	fdffe008 	.word	0xfdffe008

0800a334 <SDMMC_CmdSendSCR>:
{
 800a334:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a336:	4a4d      	ldr	r2, [pc, #308]	; (800a46c <SDMMC_CmdSendSCR+0x138>)
 800a338:	4b4d      	ldr	r3, [pc, #308]	; (800a470 <SDMMC_CmdSendSCR+0x13c>)
 800a33a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a33c:	484d      	ldr	r0, [pc, #308]	; (800a474 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a33e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a342:	f241 1333 	movw	r3, #4403	; 0x1133
{
 800a346:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a348:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a34a:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a34c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a34e:	68cc      	ldr	r4, [r1, #12]
 800a350:	4020      	ands	r0, r4
 800a352:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a354:	f241 3088 	movw	r0, #5000	; 0x1388
 800a358:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a35c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a35e:	b14a      	cbz	r2, 800a374 <SDMMC_CmdSendSCR+0x40>
 800a360:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a362:	4845      	ldr	r0, [pc, #276]	; (800a478 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800a364:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800a366:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a368:	4202      	tst	r2, r0
 800a36a:	d001      	beq.n	800a370 <SDMMC_CmdSendSCR+0x3c>
 800a36c:	0494      	lsls	r4, r2, #18
 800a36e:	d506      	bpl.n	800a37e <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	d1f7      	bne.n	800a364 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a374:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a37c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a37e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a380:	0758      	lsls	r0, r3, #29
 800a382:	d43d      	bmi.n	800a400 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a384:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800a386:	f010 0001 	ands.w	r0, r0, #1
 800a38a:	d134      	bne.n	800a3f6 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a38c:	4b3b      	ldr	r3, [pc, #236]	; (800a47c <SDMMC_CmdSendSCR+0x148>)
 800a38e:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a390:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b33      	cmp	r3, #51	; 0x33
 800a396:	d131      	bne.n	800a3fc <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800a398:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a39a:	4839      	ldr	r0, [pc, #228]	; (800a480 <SDMMC_CmdSendSCR+0x14c>)
 800a39c:	4018      	ands	r0, r3
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d0ea      	beq.n	800a378 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	db30      	blt.n	800a408 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a3a6:	005a      	lsls	r2, r3, #1
 800a3a8:	d431      	bmi.n	800a40e <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a3aa:	009c      	lsls	r4, r3, #2
 800a3ac:	d431      	bmi.n	800a412 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a3ae:	00d9      	lsls	r1, r3, #3
 800a3b0:	d431      	bmi.n	800a416 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a3b2:	011a      	lsls	r2, r3, #4
 800a3b4:	d432      	bmi.n	800a41c <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a3b6:	015c      	lsls	r4, r3, #5
 800a3b8:	d433      	bmi.n	800a422 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a3ba:	01d9      	lsls	r1, r3, #7
 800a3bc:	d434      	bmi.n	800a428 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a3be:	021a      	lsls	r2, r3, #8
 800a3c0:	d435      	bmi.n	800a42e <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a3c2:	025c      	lsls	r4, r3, #9
 800a3c4:	d436      	bmi.n	800a434 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a3c6:	0299      	lsls	r1, r3, #10
 800a3c8:	d440      	bmi.n	800a44c <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a3ca:	02da      	lsls	r2, r3, #11
 800a3cc:	d43b      	bmi.n	800a446 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a3ce:	035c      	lsls	r4, r3, #13
 800a3d0:	d436      	bmi.n	800a440 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a3d2:	0399      	lsls	r1, r3, #14
 800a3d4:	d431      	bmi.n	800a43a <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a3d6:	03da      	lsls	r2, r3, #15
 800a3d8:	d444      	bmi.n	800a464 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a3da:	041c      	lsls	r4, r3, #16
 800a3dc:	d43f      	bmi.n	800a45e <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a3de:	0459      	lsls	r1, r3, #17
 800a3e0:	d43a      	bmi.n	800a458 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a3e2:	049a      	lsls	r2, r3, #18
 800a3e4:	d435      	bmi.n	800a452 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3e6:	f013 0f08 	tst.w	r3, #8
 800a3ea:	bf14      	ite	ne
 800a3ec:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a3f0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a3f4:	e7c0      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3fa:	e7bd      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3fc:	2001      	movs	r0, #1
 800a3fe:	e7bb      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a400:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a402:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a404:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a406:	e7b7      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a408:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a40c:	e7b4      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a40e:	2040      	movs	r0, #64	; 0x40
 800a410:	e7b2      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a412:	2080      	movs	r0, #128	; 0x80
 800a414:	e7b0      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a416:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a41a:	e7ad      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a41c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a420:	e7aa      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a422:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a426:	e7a7      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a428:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a42c:	e7a4      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a42e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a432:	e7a1      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a434:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a438:	e79e      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a43a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a43e:	e79b      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a440:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a444:	e798      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800a446:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a44a:	e795      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a44c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a450:	e792      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800a452:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a456:	e78f      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a458:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a45c:	e78c      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a45e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a462:	e789      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a464:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a468:	e786      	b.n	800a378 <SDMMC_CmdSendSCR+0x44>
 800a46a:	bf00      	nop
 800a46c:	2400001c 	.word	0x2400001c
 800a470:	10624dd3 	.word	0x10624dd3
 800a474:	fffee0c0 	.word	0xfffee0c0
 800a478:	00200045 	.word	0x00200045
 800a47c:	002000c5 	.word	0x002000c5
 800a480:	fdffe008 	.word	0xfdffe008

0800a484 <SDMMC_CmdSendCID>:
{
 800a484:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a486:	4a1a      	ldr	r2, [pc, #104]	; (800a4f0 <SDMMC_CmdSendCID+0x6c>)
 800a488:	4b1a      	ldr	r3, [pc, #104]	; (800a4f4 <SDMMC_CmdSendCID+0x70>)
 800a48a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a48c:	481a      	ldr	r0, [pc, #104]	; (800a4f8 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a48e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a492:	f241 3302 	movw	r3, #4866	; 0x1302
{
 800a496:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a498:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a49a:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a49c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a49e:	68cc      	ldr	r4, [r1, #12]
 800a4a0:	4020      	ands	r0, r4
 800a4a2:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4a4:	f241 3088 	movw	r0, #5000	; 0x1388
 800a4a8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a4ac:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a4ae:	b14a      	cbz	r2, 800a4c4 <SDMMC_CmdSendCID+0x40>
 800a4b0:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a4b2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800a4b4:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4b6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a4ba:	d001      	beq.n	800a4c0 <SDMMC_CmdSendCID+0x3c>
 800a4bc:	0492      	lsls	r2, r2, #18
 800a4be:	d506      	bpl.n	800a4ce <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800a4c0:	1c58      	adds	r0, r3, #1
 800a4c2:	d1f6      	bne.n	800a4b2 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800a4c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4cc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a4ce:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a4d0:	075b      	lsls	r3, r3, #29
 800a4d2:	d409      	bmi.n	800a4e8 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a4d4:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 800a4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a4da:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4de:	bf14      	ite	ne
 800a4e0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4e2:	4b06      	ldreq	r3, [pc, #24]	; (800a4fc <SDMMC_CmdSendCID+0x78>)
 800a4e4:	638b      	str	r3, [r1, #56]	; 0x38
}
 800a4e6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4e8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4ea:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4ec:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4ee:	e7eb      	b.n	800a4c8 <SDMMC_CmdSendCID+0x44>
 800a4f0:	2400001c 	.word	0x2400001c
 800a4f4:	10624dd3 	.word	0x10624dd3
 800a4f8:	fffee0c0 	.word	0xfffee0c0
 800a4fc:	002000c5 	.word	0x002000c5

0800a500 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a500:	4a1b      	ldr	r2, [pc, #108]	; (800a570 <SDMMC_CmdSendCSD+0x70>)
{
 800a502:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a504:	4b1b      	ldr	r3, [pc, #108]	; (800a574 <SDMMC_CmdSendCSD+0x74>)
 800a506:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a508:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a50c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a510:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a514:	4818      	ldr	r0, [pc, #96]	; (800a578 <SDMMC_CmdSendCSD+0x78>)
 800a516:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a51a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a51c:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a51e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a522:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a524:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a528:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a52c:	1e53      	subs	r3, r2, #1
 800a52e:	b14a      	cbz	r2, 800a544 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800a530:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a534:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a536:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a53a:	d001      	beq.n	800a540 <SDMMC_CmdSendCSD+0x40>
 800a53c:	0492      	lsls	r2, r2, #18
 800a53e:	d504      	bpl.n	800a54a <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800a540:	1c59      	adds	r1, r3, #1
 800a542:	d1f5      	bne.n	800a530 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a544:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a548:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a54a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a54e:	075b      	lsls	r3, r3, #29
 800a550:	d409      	bmi.n	800a566 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a552:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a556:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a55a:	bf14      	ite	ne
 800a55c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a55e:	4b07      	ldreq	r3, [pc, #28]	; (800a57c <SDMMC_CmdSendCSD+0x7c>)
 800a560:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800a564:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a566:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a568:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a56a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a56e:	4770      	bx	lr
 800a570:	2400001c 	.word	0x2400001c
 800a574:	10624dd3 	.word	0x10624dd3
 800a578:	fffee0c0 	.word	0xfffee0c0
 800a57c:	002000c5 	.word	0x002000c5

0800a580 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800a580:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a582:	4a2b      	ldr	r2, [pc, #172]	; (800a630 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800a584:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a586:	6812      	ldr	r2, [r2, #0]
{
 800a588:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a58a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a58c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a58e:	4829      	ldr	r0, [pc, #164]	; (800a634 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a590:	4c29      	ldr	r4, [pc, #164]	; (800a638 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a592:	fba0 0202 	umull	r0, r2, r0, r2
 800a596:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a59a:	401c      	ands	r4, r3
 800a59c:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a5a0:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a5a2:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a5a4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a5a8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a5ac:	b152      	cbz	r2, 800a5c4 <SDMMC_CmdSetRelAdd+0x44>
 800a5ae:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a5b0:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a5b4:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5b6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a5ba:	d001      	beq.n	800a5c0 <SDMMC_CmdSetRelAdd+0x40>
 800a5bc:	0494      	lsls	r4, r2, #18
 800a5be:	d506      	bpl.n	800a5ce <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	d1f5      	bne.n	800a5b0 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a5c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5cc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5ce:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a5d2:	0758      	lsls	r0, r3, #29
 800a5d4:	d421      	bmi.n	800a61a <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5d6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a5da:	f010 0001 	ands.w	r0, r0, #1
 800a5de:	d116      	bne.n	800a60e <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5e0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d115      	bne.n	800a616 <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5ea:	4b14      	ldr	r3, [pc, #80]	; (800a63c <SDMMC_CmdSetRelAdd+0xbc>)
 800a5ec:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800a5f0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a5f4:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800a5f8:	d017      	beq.n	800a62a <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a5fa:	045a      	lsls	r2, r3, #17
 800a5fc:	d412      	bmi.n	800a624 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5fe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a602:	bf14      	ite	ne
 800a604:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800a608:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a60c:	e7dc      	b.n	800a5c8 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a60e:	2301      	movs	r3, #1
 800a610:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a614:	e7d8      	b.n	800a5c8 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a616:	2001      	movs	r0, #1
 800a618:	e7d6      	b.n	800a5c8 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a61a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a61c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a61e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a622:	e7d1      	b.n	800a5c8 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a624:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a628:	e7ce      	b.n	800a5c8 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800a62e:	e7cb      	b.n	800a5c8 <SDMMC_CmdSetRelAdd+0x48>
 800a630:	2400001c 	.word	0x2400001c
 800a634:	10624dd3 	.word	0x10624dd3
 800a638:	fffee0c0 	.word	0xfffee0c0
 800a63c:	002000c5 	.word	0x002000c5

0800a640 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a640:	4a50      	ldr	r2, [pc, #320]	; (800a784 <SDMMC_CmdSendStatus+0x144>)
{
 800a642:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a644:	4b50      	ldr	r3, [pc, #320]	; (800a788 <SDMMC_CmdSendStatus+0x148>)
 800a646:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a648:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a64c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a650:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a654:	484d      	ldr	r0, [pc, #308]	; (800a78c <SDMMC_CmdSendStatus+0x14c>)
 800a656:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a65a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a65c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a65e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a662:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a664:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a668:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a66c:	1e53      	subs	r3, r2, #1
 800a66e:	b14a      	cbz	r2, 800a684 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a670:	4947      	ldr	r1, [pc, #284]	; (800a790 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
 800a672:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a676:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a678:	420a      	tst	r2, r1
 800a67a:	d001      	beq.n	800a680 <SDMMC_CmdSendStatus+0x40>
 800a67c:	0492      	lsls	r2, r2, #18
 800a67e:	d504      	bpl.n	800a68a <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800a680:	1c58      	adds	r0, r3, #1
 800a682:	d1f6      	bne.n	800a672 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a684:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a688:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a68a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a68e:	0758      	lsls	r0, r3, #29
 800a690:	d445      	bmi.n	800a71e <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a692:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a696:	f010 0001 	ands.w	r0, r0, #1
 800a69a:	d137      	bne.n	800a70c <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a69c:	4b3d      	ldr	r3, [pc, #244]	; (800a794 <SDMMC_CmdSendStatus+0x154>)
 800a69e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a6a2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b0d      	cmp	r3, #13
 800a6aa:	d136      	bne.n	800a71a <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 800a6ac:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a6b0:	4839      	ldr	r0, [pc, #228]	; (800a798 <SDMMC_CmdSendStatus+0x158>)
 800a6b2:	4018      	ands	r0, r3
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d02f      	beq.n	800a718 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	db35      	blt.n	800a728 <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a6bc:	0059      	lsls	r1, r3, #1
 800a6be:	d436      	bmi.n	800a72e <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a6c0:	009a      	lsls	r2, r3, #2
 800a6c2:	d436      	bmi.n	800a732 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a6c4:	00d9      	lsls	r1, r3, #3
 800a6c6:	d436      	bmi.n	800a736 <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a6c8:	011a      	lsls	r2, r3, #4
 800a6ca:	d437      	bmi.n	800a73c <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a6cc:	0159      	lsls	r1, r3, #5
 800a6ce:	d438      	bmi.n	800a742 <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a6d0:	01da      	lsls	r2, r3, #7
 800a6d2:	d439      	bmi.n	800a748 <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a6d4:	0219      	lsls	r1, r3, #8
 800a6d6:	d43a      	bmi.n	800a74e <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a6d8:	025a      	lsls	r2, r3, #9
 800a6da:	d43b      	bmi.n	800a754 <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a6dc:	0299      	lsls	r1, r3, #10
 800a6de:	d445      	bmi.n	800a76c <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a6e0:	02da      	lsls	r2, r3, #11
 800a6e2:	d440      	bmi.n	800a766 <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a6e4:	0359      	lsls	r1, r3, #13
 800a6e6:	d43b      	bmi.n	800a760 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a6e8:	039a      	lsls	r2, r3, #14
 800a6ea:	d436      	bmi.n	800a75a <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a6ec:	03d9      	lsls	r1, r3, #15
 800a6ee:	d446      	bmi.n	800a77e <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a6f0:	041a      	lsls	r2, r3, #16
 800a6f2:	d441      	bmi.n	800a778 <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6f4:	0459      	lsls	r1, r3, #17
 800a6f6:	d43c      	bmi.n	800a772 <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6f8:	049a      	lsls	r2, r3, #18
 800a6fa:	d40b      	bmi.n	800a714 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6fc:	f013 0f08 	tst.w	r3, #8
 800a700:	bf14      	ite	ne
 800a702:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a706:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a70a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a70c:	2301      	movs	r3, #1
 800a70e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a712:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a714:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800a718:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a71a:	2001      	movs	r0, #1
 800a71c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a71e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a720:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a722:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a726:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a728:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a72c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a72e:	2040      	movs	r0, #64	; 0x40
 800a730:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a732:	2080      	movs	r0, #128	; 0x80
 800a734:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a736:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a73a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a73c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a740:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a742:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a746:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a748:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a74c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a74e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a752:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a754:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a758:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a75a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a75e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a760:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a764:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a766:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a76a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a76c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a770:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a772:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a776:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a778:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a77c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a77e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a782:	4770      	bx	lr
 800a784:	2400001c 	.word	0x2400001c
 800a788:	10624dd3 	.word	0x10624dd3
 800a78c:	fffee0c0 	.word	0xfffee0c0
 800a790:	00200045 	.word	0x00200045
 800a794:	002000c5 	.word	0x002000c5
 800a798:	fdffe008 	.word	0xfdffe008

0800a79c <SDMMC_CmdStatusRegister>:
{
 800a79c:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a79e:	4a4d      	ldr	r2, [pc, #308]	; (800a8d4 <SDMMC_CmdStatusRegister+0x138>)
 800a7a0:	4b4d      	ldr	r3, [pc, #308]	; (800a8d8 <SDMMC_CmdStatusRegister+0x13c>)
 800a7a2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a7a4:	484d      	ldr	r0, [pc, #308]	; (800a8dc <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a7a6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a7aa:	f241 130d 	movw	r3, #4365	; 0x110d
{
 800a7ae:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a7b0:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a7b2:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a7b4:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a7b6:	68cc      	ldr	r4, [r1, #12]
 800a7b8:	4020      	ands	r0, r4
 800a7ba:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a7bc:	f241 3088 	movw	r0, #5000	; 0x1388
 800a7c0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a7c4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a7c6:	b14a      	cbz	r2, 800a7dc <SDMMC_CmdStatusRegister+0x40>
 800a7c8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a7ca:	4845      	ldr	r0, [pc, #276]	; (800a8e0 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800a7cc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800a7ce:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a7d0:	4202      	tst	r2, r0
 800a7d2:	d001      	beq.n	800a7d8 <SDMMC_CmdStatusRegister+0x3c>
 800a7d4:	0494      	lsls	r4, r2, #18
 800a7d6:	d506      	bpl.n	800a7e6 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	d1f7      	bne.n	800a7cc <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a7dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7e6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a7e8:	0758      	lsls	r0, r3, #29
 800a7ea:	d43d      	bmi.n	800a868 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7ec:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800a7ee:	f010 0001 	ands.w	r0, r0, #1
 800a7f2:	d134      	bne.n	800a85e <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7f4:	4b3b      	ldr	r3, [pc, #236]	; (800a8e4 <SDMMC_CmdStatusRegister+0x148>)
 800a7f6:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a7f8:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b0d      	cmp	r3, #13
 800a7fe:	d131      	bne.n	800a864 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800a800:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a802:	4839      	ldr	r0, [pc, #228]	; (800a8e8 <SDMMC_CmdStatusRegister+0x14c>)
 800a804:	4018      	ands	r0, r3
 800a806:	2800      	cmp	r0, #0
 800a808:	d0ea      	beq.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	db30      	blt.n	800a870 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a80e:	005a      	lsls	r2, r3, #1
 800a810:	d431      	bmi.n	800a876 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a812:	009c      	lsls	r4, r3, #2
 800a814:	d431      	bmi.n	800a87a <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a816:	00d9      	lsls	r1, r3, #3
 800a818:	d431      	bmi.n	800a87e <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a81a:	011a      	lsls	r2, r3, #4
 800a81c:	d432      	bmi.n	800a884 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a81e:	015c      	lsls	r4, r3, #5
 800a820:	d433      	bmi.n	800a88a <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a822:	01d9      	lsls	r1, r3, #7
 800a824:	d434      	bmi.n	800a890 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a826:	021a      	lsls	r2, r3, #8
 800a828:	d435      	bmi.n	800a896 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a82a:	025c      	lsls	r4, r3, #9
 800a82c:	d436      	bmi.n	800a89c <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a82e:	0299      	lsls	r1, r3, #10
 800a830:	d440      	bmi.n	800a8b4 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a832:	02da      	lsls	r2, r3, #11
 800a834:	d43b      	bmi.n	800a8ae <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a836:	035c      	lsls	r4, r3, #13
 800a838:	d436      	bmi.n	800a8a8 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a83a:	0399      	lsls	r1, r3, #14
 800a83c:	d431      	bmi.n	800a8a2 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a83e:	03da      	lsls	r2, r3, #15
 800a840:	d444      	bmi.n	800a8cc <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a842:	041c      	lsls	r4, r3, #16
 800a844:	d43f      	bmi.n	800a8c6 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a846:	0459      	lsls	r1, r3, #17
 800a848:	d43a      	bmi.n	800a8c0 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a84a:	049a      	lsls	r2, r3, #18
 800a84c:	d435      	bmi.n	800a8ba <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a84e:	f013 0f08 	tst.w	r3, #8
 800a852:	bf14      	ite	ne
 800a854:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a858:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a85c:	e7c0      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a85e:	2301      	movs	r3, #1
 800a860:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a862:	e7bd      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a864:	2001      	movs	r0, #1
 800a866:	e7bb      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a868:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a86a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a86c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a86e:	e7b7      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a870:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a874:	e7b4      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a876:	2040      	movs	r0, #64	; 0x40
 800a878:	e7b2      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a87a:	2080      	movs	r0, #128	; 0x80
 800a87c:	e7b0      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a87e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a882:	e7ad      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a884:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a888:	e7aa      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a88a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a88e:	e7a7      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a890:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a894:	e7a4      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a896:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a89a:	e7a1      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a89c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a8a0:	e79e      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a8a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a8a6:	e79b      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a8a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a8ac:	e798      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800a8ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a8b2:	e795      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a8b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a8b8:	e792      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800a8ba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a8be:	e78f      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a8c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a8c4:	e78c      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a8c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a8ca:	e789      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a8cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a8d0:	e786      	b.n	800a7e0 <SDMMC_CmdStatusRegister+0x44>
 800a8d2:	bf00      	nop
 800a8d4:	2400001c 	.word	0x2400001c
 800a8d8:	10624dd3 	.word	0x10624dd3
 800a8dc:	fffee0c0 	.word	0xfffee0c0
 800a8e0:	00200045 	.word	0x00200045
 800a8e4:	002000c5 	.word	0x002000c5
 800a8e8:	fdffe008 	.word	0xfdffe008

0800a8ec <BSP_STM32_TIM_Init>:
 *******************************************************************/

uint8_t BSP_STM32_TIM_Init(TIM_TypeDef *htim, uint8_t clk_division, uint16_t prescaler, uint16_t counter_limit) {
	uint32_t tmp;

	if (clk_division > 3) return BSP_ERROR;
 800a8ec:	2903      	cmp	r1, #3
uint8_t BSP_STM32_TIM_Init(TIM_TypeDef *htim, uint8_t clk_division, uint16_t prescaler, uint16_t counter_limit) {
 800a8ee:	4684      	mov	ip, r0
	if (clk_division > 3) return BSP_ERROR;
 800a8f0:	d816      	bhi.n	800a920 <BSP_STM32_TIM_Init+0x34>

	htim->CR1 = tmp;

	// Setting CR2 register
	tmp = 0;	// Reset value
	htim->CR2 = tmp;
 800a8f2:	2000      	movs	r0, #0
	tmp	|= clk_division << TIM_CR1_CKD_Pos;		// Configuring clock division factor
 800a8f4:	0209      	lsls	r1, r1, #8
	htim->CR1 = tmp;
 800a8f6:	f8cc 1000 	str.w	r1, [ip]
	htim->CR2 = tmp;
 800a8fa:	f8cc 0004 	str.w	r0, [ip, #4]

	// Setting SMCR register
	tmp = 0;	// Reset value
	htim->SMCR = tmp;
 800a8fe:	f8cc 0008 	str.w	r0, [ip, #8]

	// Setting PSC register (prescaler)
	htim->PSC = prescaler;
 800a902:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28

	// Resetting CNT register (counter)
	htim->CNT = 0;

	// Generating update event to reload registers
	htim->EGR = 1 << TIM_EGR_UG_Pos;
 800a906:	2201      	movs	r2, #1
	htim->ARR = counter_limit;
 800a908:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
	htim->CNT = 0;
 800a90c:	f8cc 0024 	str.w	r0, [ip, #36]	; 0x24
	htim->EGR = 1 << TIM_EGR_UG_Pos;
 800a910:	f8cc 2014 	str.w	r2, [ip, #20]

	// Enabling update event interrupt
	htim->DIER |= (1 << TIM_DIER_UIE_Pos);
 800a914:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800a918:	4313      	orrs	r3, r2
 800a91a:	f8cc 300c 	str.w	r3, [ip, #12]

	return BSP_OK;
 800a91e:	4770      	bx	lr
	if (clk_division > 3) return BSP_ERROR;
 800a920:	2001      	movs	r0, #1
}
 800a922:	4770      	bx	lr

0800a924 <BSP_STM32_TIM_ConfigChannel>:
	// Mode 0b111 - PWM mode 2

	channel--;

	if (channel > 3) return BSP_ERROR;
	if (mode > 7) return BSP_ERROR;
 800a924:	2a07      	cmp	r2, #7
 800a926:	d836      	bhi.n	800a996 <BSP_STM32_TIM_ConfigChannel+0x72>
 800a928:	3901      	subs	r1, #1
 800a92a:	4684      	mov	ip, r0
 800a92c:	b2c9      	uxtb	r1, r1
 800a92e:	2903      	cmp	r1, #3
 800a930:	bf94      	ite	ls
 800a932:	2000      	movls	r0, #0
 800a934:	2001      	movhi	r0, #1
 800a936:	bb70      	cbnz	r0, 800a996 <BSP_STM32_TIM_ConfigChannel+0x72>
uint8_t BSP_STM32_TIM_ConfigChannel(TIM_TypeDef *htim, uint8_t channel, uint8_t mode, uint16_t init_value) {
 800a938:	b530      	push	{r4, r5, lr}

	uint8_t ch_shift;
	uint16_t tmp;

	ch_shift = channel << 2;
 800a93a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
	tmp = htim->CCER;
	tmp &= ~(0b1011 << ch_shift);	// Resetting channel settings
 800a93e:	250b      	movs	r5, #11
	tmp = htim->CCER;
 800a940:	f8dc 4020 	ldr.w	r4, [ip, #32]
	tmp &= ~(0b1011 << ch_shift);	// Resetting channel settings
 800a944:	fa5f fe8e 	uxtb.w	lr, lr
 800a948:	fa05 f50e 	lsl.w	r5, r5, lr
 800a94c:	ea24 0405 	bic.w	r4, r4, r5
	tmp |= (0 << (ch_shift + 1));	// Setting positive polarity
	tmp |= (1 << (ch_shift + 0));	// Enable selected channel as output
 800a950:	2501      	movs	r5, #1
 800a952:	fa05 fe0e 	lsl.w	lr, r5, lr
	htim->CCER = tmp;


	ch_shift = (channel % 2) << 3;
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800a956:	42a9      	cmp	r1, r5
	tmp |= (1 << (ch_shift + 0));	// Enable selected channel as output
 800a958:	ea44 040e 	orr.w	r4, r4, lr
	ch_shift = (channel % 2) << 3;
 800a95c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
	htim->CCER = tmp;
 800a960:	b2a4      	uxth	r4, r4
	ch_shift = (channel % 2) << 3;
 800a962:	f00e 0e08 	and.w	lr, lr, #8
	htim->CCER = tmp;
 800a966:	f8cc 4020 	str.w	r4, [ip, #32]
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800a96a:	d916      	bls.n	800a99a <BSP_STM32_TIM_ConfigChannel+0x76>
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a96c:	25ff      	movs	r5, #255	; 0xff
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800a96e:	f8dc 401c 	ldr.w	r4, [ip, #28]
	if (channel < 2) htim->CCMR1 = tmp; else htim->CCMR2 = tmp;

	// Setting value for selected channel
	if (channel == 0) htim->CCR1 = init_value;
	if (channel == 1) htim->CCR2 = init_value;
	if (channel == 2) htim->CCR3 = init_value;
 800a972:	2902      	cmp	r1, #2
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a974:	fa05 f50e 	lsl.w	r5, r5, lr
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800a978:	f10e 0e04 	add.w	lr, lr, #4
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a97c:	ea24 0405 	bic.w	r4, r4, r5
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800a980:	fa02 f20e 	lsl.w	r2, r2, lr
 800a984:	ea42 0204 	orr.w	r2, r2, r4
	if (channel < 2) htim->CCMR1 = tmp; else htim->CCMR2 = tmp;
 800a988:	b292      	uxth	r2, r2
 800a98a:	f8cc 201c 	str.w	r2, [ip, #28]
	if (channel == 2) htim->CCR3 = init_value;
 800a98e:	d119      	bne.n	800a9c4 <BSP_STM32_TIM_ConfigChannel+0xa0>
 800a990:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
	if (channel == 3) htim->CCR4 = init_value;


	return BSP_OK;
}
 800a994:	bd30      	pop	{r4, r5, pc}
	if (mode > 7) return BSP_ERROR;
 800a996:	2001      	movs	r0, #1
}
 800a998:	4770      	bx	lr
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a99a:	24ff      	movs	r4, #255	; 0xff
 800a99c:	fa04 f40e 	lsl.w	r4, r4, lr
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800a9a0:	f10e 0e04 	add.w	lr, lr, #4
 800a9a4:	fa02 fe0e 	lsl.w	lr, r2, lr
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800a9a8:	f8dc 2018 	ldr.w	r2, [ip, #24]
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a9ac:	ea22 0204 	bic.w	r2, r2, r4
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800a9b0:	ea42 020e 	orr.w	r2, r2, lr
	if (channel < 2) htim->CCMR1 = tmp; else htim->CCMR2 = tmp;
 800a9b4:	b292      	uxth	r2, r2
 800a9b6:	f8cc 2018 	str.w	r2, [ip, #24]
	if (channel == 0) htim->CCR1 = init_value;
 800a9ba:	b941      	cbnz	r1, 800a9ce <BSP_STM32_TIM_ConfigChannel+0xaa>
 800a9bc:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
	return BSP_OK;
 800a9c0:	2000      	movs	r0, #0
}
 800a9c2:	bd30      	pop	{r4, r5, pc}
	if (channel == 3) htim->CCR4 = init_value;
 800a9c4:	2903      	cmp	r1, #3
 800a9c6:	d1fb      	bne.n	800a9c0 <BSP_STM32_TIM_ConfigChannel+0x9c>
 800a9c8:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
}
 800a9cc:	bd30      	pop	{r4, r5, pc}
	if (channel == 1) htim->CCR2 = init_value;
 800a9ce:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 800a9d2:	bd30      	pop	{r4, r5, pc}

0800a9d4 <BSP_STM32_TIM_Start>:

uint8_t BSP_STM32_TIM_Start(TIM_TypeDef *htim) {
 800a9d4:	4603      	mov	r3, r0
	htim->CR1 |= 1 << TIM_CR1_CEN_Pos;
	return BSP_OK;
}
 800a9d6:	2000      	movs	r0, #0
	htim->CR1 |= 1 << TIM_CR1_CEN_Pos;
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	f042 0201 	orr.w	r2, r2, #1
 800a9de:	601a      	str	r2, [r3, #0]
}
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop

0800a9e4 <BSP_STM32_TIM_SetChannelValue>:
	htim->CR1 &= ~(1 << TIM_CR1_CEN_Pos);
	return BSP_OK;
}

uint8_t BSP_STM32_TIM_SetChannelValue(TIM_TypeDef *htim, uint8_t channel, uint16_t value) {
	channel --;
 800a9e4:	3901      	subs	r1, #1
 800a9e6:	b2c9      	uxtb	r1, r1
	if (channel > 3) return BSP_ERROR;
 800a9e8:	2903      	cmp	r1, #3
 800a9ea:	d809      	bhi.n	800aa00 <BSP_STM32_TIM_SetChannelValue+0x1c>

	// Setting value for selected channel
	if (channel == 0) htim->CCR1 = value;
 800a9ec:	b129      	cbz	r1, 800a9fa <BSP_STM32_TIM_SetChannelValue+0x16>
	if (channel == 1) htim->CCR2 = value;
 800a9ee:	2901      	cmp	r1, #1
 800a9f0:	d109      	bne.n	800aa06 <BSP_STM32_TIM_SetChannelValue+0x22>
	if (channel == 2) htim->CCR3 = value;
	if (channel == 3) htim->CCR4 = value;

	return BSP_OK;
 800a9f2:	2300      	movs	r3, #0
	if (channel == 1) htim->CCR2 = value;
 800a9f4:	6382      	str	r2, [r0, #56]	; 0x38
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	4770      	bx	lr
	if (channel == 0) htim->CCR1 = value;
 800a9fa:	6342      	str	r2, [r0, #52]	; 0x34
	return BSP_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e7fa      	b.n	800a9f6 <BSP_STM32_TIM_SetChannelValue+0x12>
	if (channel > 3) return BSP_ERROR;
 800aa00:	2301      	movs	r3, #1
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	4770      	bx	lr
	if (channel == 2) htim->CCR3 = value;
 800aa06:	2902      	cmp	r1, #2
 800aa08:	d103      	bne.n	800aa12 <BSP_STM32_TIM_SetChannelValue+0x2e>
	return BSP_OK;
 800aa0a:	2300      	movs	r3, #0
	if (channel == 2) htim->CCR3 = value;
 800aa0c:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	4770      	bx	lr
	if (channel == 3) htim->CCR4 = value;
 800aa12:	2903      	cmp	r1, #3
 800aa14:	d1f2      	bne.n	800a9fc <BSP_STM32_TIM_SetChannelValue+0x18>
	return BSP_OK;
 800aa16:	2300      	movs	r3, #0
	if (channel == 3) htim->CCR4 = value;
 800aa18:	6402      	str	r2, [r0, #64]	; 0x40
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop

0800aa20 <_UART_DMA_Callback_TC>:

const uint16_t UARTPrescTable[12] = {1U, 2U, 4U, 6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};

static void _UART_DMA_Callback_TC(void) {

}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop

0800aa24 <BSP_STM32_UART_Init>:



uint8_t BSP_STM32_UART_Init(USART_TypeDef *huart, uint32_t BaudRate, uint32_t WordLength, uint32_t StopBits, uint32_t Parity) {
 800aa24:	4684      	mov	ip, r0
	uint32_t tmpreg = 0;

	// Disable UART
	huart->CR1 &= ~USART_CR1_UE;
 800aa26:	6800      	ldr	r0, [r0, #0]
 800aa28:	f020 0001 	bic.w	r0, r0, #1
uint8_t BSP_STM32_UART_Init(USART_TypeDef *huart, uint32_t BaudRate, uint32_t WordLength, uint32_t StopBits, uint32_t Parity) {
 800aa2c:	b410      	push	{r4}
	huart->CR1 &= ~USART_CR1_UE;
 800aa2e:	f8cc 0000 	str.w	r0, [ip]

	// USART CR1 Configuration
	tmpreg = (uint32_t)WordLength | Parity | UART_MODE_TX_RX | UART_OVERSAMPLING_16 | UART_FIFOMODE_ENABLE;
	MODIFY_REG(huart->CR1, USART_CR1_FIELDS, tmpreg);
 800aa32:	4823      	ldr	r0, [pc, #140]	; (800aac0 <BSP_STM32_UART_Init+0x9c>)
 800aa34:	f8dc 4000 	ldr.w	r4, [ip]
 800aa38:	4020      	ands	r0, r4
 800aa3a:	9c01      	ldr	r4, [sp, #4]
 800aa3c:	4320      	orrs	r0, r4
 800aa3e:	4310      	orrs	r0, r2
 800aa40:	4a20      	ldr	r2, [pc, #128]	; (800aac4 <BSP_STM32_UART_Init+0xa0>)
 800aa42:	4302      	orrs	r2, r0
	// USART CR2 Configuration
	MODIFY_REG(huart->CR2, USART_CR2_STOP, StopBits);

	// USART CR3 Configuration
	tmpreg = UART_HWCONTROL_NONE | UART_ONE_BIT_SAMPLE_DISABLE | UART_RXFIFO_THRESHOLD_1_2 | UART_TXFIFO_THRESHOLD_1_2;
	MODIFY_REG(huart->CR3, USART_CR3_FIELDS, tmpreg);
 800aa44:	4820      	ldr	r0, [pc, #128]	; (800aac8 <BSP_STM32_UART_Init+0xa4>)
	MODIFY_REG(huart->CR1, USART_CR1_FIELDS, tmpreg);
 800aa46:	f8cc 2000 	str.w	r2, [ip]
	MODIFY_REG(huart->CR2, USART_CR2_STOP, StopBits);
 800aa4a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800aa4e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800aa52:	4313      	orrs	r3, r2
	// Configuring prescaler
	MODIFY_REG(huart->PRESC, USART_PRESC_PRESCALER, UART_PRESCALER_DIV1);

	// USART BRR Configuration
	uint32_t pclk = 120000000; // 120MHz from PCLK1
	uint32_t usartdiv = ((pclk/UARTPrescTable[UART_PRESCALER_DIV1]) + (BaudRate/2U)) / (BaudRate);
 800aa54:	4a1d      	ldr	r2, [pc, #116]	; (800aacc <BSP_STM32_UART_Init+0xa8>)
	MODIFY_REG(huart->CR2, USART_CR2_STOP, StopBits);
 800aa56:	f8cc 3004 	str.w	r3, [ip, #4]
	uint32_t usartdiv = ((pclk/UARTPrescTable[UART_PRESCALER_DIV1]) + (BaudRate/2U)) / (BaudRate);
 800aa5a:	eb02 0351 	add.w	r3, r2, r1, lsr #1
	MODIFY_REG(huart->CR3, USART_CR3_FIELDS, tmpreg);
 800aa5e:	f8dc 4008 	ldr.w	r4, [ip, #8]

	if (usartdiv < UART_BRR_MIN) return BSP_ERROR;
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800aa62:	f64f 72ef 	movw	r2, #65519	; 0xffef
	uint32_t usartdiv = ((pclk/UARTPrescTable[UART_PRESCALER_DIV1]) + (BaudRate/2U)) / (BaudRate);
 800aa66:	fbb3 f1f1 	udiv	r1, r3, r1
	MODIFY_REG(huart->CR3, USART_CR3_FIELDS, tmpreg);
 800aa6a:	4020      	ands	r0, r4
 800aa6c:	f040 4088 	orr.w	r0, r0, #1140850688	; 0x44000000
 800aa70:	f8cc 0008 	str.w	r0, [ip, #8]
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800aa74:	f1a1 0010 	sub.w	r0, r1, #16
	MODIFY_REG(huart->PRESC, USART_PRESC_PRESCALER, UART_PRESCALER_DIV1);
 800aa78:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800aa7c:	4290      	cmp	r0, r2
	MODIFY_REG(huart->PRESC, USART_PRESC_PRESCALER, UART_PRESCALER_DIV1);
 800aa7e:	f023 030f 	bic.w	r3, r3, #15
 800aa82:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800aa86:	d903      	bls.n	800aa90 <BSP_STM32_UART_Init+0x6c>
 800aa88:	2001      	movs	r0, #1

	// Enable UART
	huart->CR1 |= USART_CR1_UE;

	return BSP_OK;
}
 800aa8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa8e:	4770      	bx	lr
	huart->BRR = (uint16_t)usartdiv;
 800aa90:	f8cc 100c 	str.w	r1, [ip, #12]
	return BSP_OK;
 800aa94:	2000      	movs	r0, #0
	CLEAR_BIT(huart->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa96:	f8dc 3004 	ldr.w	r3, [ip, #4]
}
 800aa9a:	f85d 4b04 	ldr.w	r4, [sp], #4
	CLEAR_BIT(huart->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa9e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800aaa2:	f8cc 3004 	str.w	r3, [ip, #4]
	CLEAR_BIT(huart->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaa6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800aaaa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800aaae:	f8cc 3008 	str.w	r3, [ip, #8]
	huart->CR1 |= USART_CR1_UE;
 800aab2:	f8dc 3000 	ldr.w	r3, [ip]
 800aab6:	f043 0301 	orr.w	r3, r3, #1
 800aaba:	f8cc 3000 	str.w	r3, [ip]
}
 800aabe:	4770      	bx	lr
 800aac0:	cfff69f3 	.word	0xcfff69f3
 800aac4:	2000000c 	.word	0x2000000c
 800aac8:	11fff4ff 	.word	0x11fff4ff
 800aacc:	07270e00 	.word	0x07270e00

0800aad0 <BSP_STM32_UART_StartListen>:

uint8_t BSP_STM32_UART_StartListen(USART_TypeDef *huart, TxRxContext_TypeDef * ctx, uint8_t * pBuf, uint32_t bufSize) {
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4604      	mov	r4, r0

	UARTContext_TypeDef * uart_ctx = (UARTContext_TypeDef *)ctx->ctxmem;

	// Configuring context
	uart_ctx->indexRX0 = 0;
	uart_ctx->pDataRX = pBuf;
 800aad4:	628a      	str	r2, [r1, #40]	; 0x28
uint8_t BSP_STM32_UART_StartListen(USART_TypeDef *huart, TxRxContext_TypeDef * ctx, uint8_t * pBuf, uint32_t bufSize) {
 800aad6:	4608      	mov	r0, r1
	uart_ctx->indexRX0 = 0;
 800aad8:	2500      	movs	r5, #0
	uart_ctx->sizeRX = bufSize;

	// Start DMA
	ctx->callback_TC = (uint32_t)_UART_DMA_Callback_TC;
 800aada:	490b      	ldr	r1, [pc, #44]	; (800ab08 <BSP_STM32_UART_StartListen+0x38>)
	uart_ctx->sizeRX = bufSize;
 800aadc:	6343      	str	r3, [r0, #52]	; 0x34
	ctx->callback_TC = (uint32_t)_UART_DMA_Callback_TC;
 800aade:	6201      	str	r1, [r0, #32]
	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&huart->RDR, (uint32_t)pBuf, bufSize);
 800aae0:	f104 0124 	add.w	r1, r4, #36	; 0x24
	uart_ctx->indexRX0 = 0;
 800aae4:	63c5      	str	r5, [r0, #60]	; 0x3c
	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&huart->RDR, (uint32_t)pBuf, bufSize);
 800aae6:	f7fb f8c7 	bl	8005c78 <BSP_STM32_DMA_StartIT>

	// Enabling IDLE interrupt
	SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800aaea:	6a23      	ldr	r3, [r4, #32]

	// Start DMA receiving
	SET_BIT(huart->CR3, USART_CR3_DMAR);

	return BSP_OK;
}
 800aaec:	4628      	mov	r0, r5
	SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800aaee:	f043 0310 	orr.w	r3, r3, #16
 800aaf2:	6223      	str	r3, [r4, #32]
	SET_BIT(huart->CR1, USART_CR1_IDLEIE);
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	f043 0310 	orr.w	r3, r3, #16
 800aafa:	6023      	str	r3, [r4, #0]
	SET_BIT(huart->CR3, USART_CR3_DMAR);
 800aafc:	68a3      	ldr	r3, [r4, #8]
 800aafe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab02:	60a3      	str	r3, [r4, #8]
}
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	bf00      	nop
 800ab08:	0800aa21 	.word	0x0800aa21

0800ab0c <BSP_STM32_UART_IRQHandler>:
uint8_t BSP_STM32_UART_IRQHandler(USART_TypeDef *huart, TxRxContext_TypeDef *ctx) {

	UARTContext_TypeDef * uart_ctx = (UARTContext_TypeDef *)ctx->ctxmem;

	// Handling TXFTIE interrupt (FIFO buffer not full)
	if (huart->CR3 & USART_CR3_TXFTIE) {
 800ab0c:	6883      	ldr	r3, [r0, #8]
uint8_t BSP_STM32_UART_IRQHandler(USART_TypeDef *huart, TxRxContext_TypeDef *ctx) {
 800ab0e:	4602      	mov	r2, r0
	if (huart->CR3 & USART_CR3_TXFTIE) {
 800ab10:	0218      	lsls	r0, r3, #8
uint8_t BSP_STM32_UART_IRQHandler(USART_TypeDef *huart, TxRxContext_TypeDef *ctx) {
 800ab12:	b570      	push	{r4, r5, r6, lr}
 800ab14:	460e      	mov	r6, r1
	if (huart->CR3 & USART_CR3_TXFTIE) {
 800ab16:	d507      	bpl.n	800ab28 <BSP_STM32_UART_IRQHandler+0x1c>

		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ab18:	69d3      	ldr	r3, [r2, #28]
 800ab1a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800ab1c:	f013 0f80 	tst.w	r3, #128	; 0x80
			uart_ctx->pDataTX++;
			uart_ctx->indexTX++;
		}

		// Switch off TXFTIE interrupt when no more data is available
		if (uart_ctx->indexTX == uart_ctx->sizeTX) {
 800ab20:	6b8b      	ldr	r3, [r1, #56]	; 0x38
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ab22:	d119      	bne.n	800ab58 <BSP_STM32_UART_IRQHandler+0x4c>
		if (uart_ctx->indexTX == uart_ctx->sizeTX) {
 800ab24:	42ab      	cmp	r3, r5
 800ab26:	d025      	beq.n	800ab74 <BSP_STM32_UART_IRQHandler+0x68>
		}

	}

	// Handling TCIE interrupt
	if ((huart->CR1 & USART_CR1_TCIE) && (huart->ISR & USART_ISR_TC)) {
 800ab28:	6813      	ldr	r3, [r2, #0]
 800ab2a:	065c      	lsls	r4, r3, #25
 800ab2c:	d502      	bpl.n	800ab34 <BSP_STM32_UART_IRQHandler+0x28>
 800ab2e:	69d3      	ldr	r3, [r2, #28]
 800ab30:	0658      	lsls	r0, r3, #25
 800ab32:	d416      	bmi.n	800ab62 <BSP_STM32_UART_IRQHandler+0x56>
		CLEAR_BIT(huart->CR1, USART_CR1_TCIE);
		SET_BIT(huart->ICR, USART_ICR_TCCF);
	}

	// Handling IDLE interrupt
	if ((huart->CR1 & USART_CR1_IDLEIE) && (huart->ISR & USART_ISR_IDLE)) {
 800ab34:	6813      	ldr	r3, [r2, #0]
 800ab36:	06d9      	lsls	r1, r3, #27
 800ab38:	d502      	bpl.n	800ab40 <BSP_STM32_UART_IRQHandler+0x34>
 800ab3a:	69d3      	ldr	r3, [r2, #28]
 800ab3c:	06db      	lsls	r3, r3, #27
 800ab3e:	d422      	bmi.n	800ab86 <BSP_STM32_UART_IRQHandler+0x7a>
			uart_ctx->sizeRX = (uart_ctx->indexRX1 + SERIAL_BUF_SIZE) - uart_ctx->indexRX0;
		}
	}

	return BSP_OK;
}
 800ab40:	2000      	movs	r0, #0
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
			huart->TDR = *uart_ctx->pDataTX;
 800ab44:	6af0      	ldr	r0, [r6, #44]	; 0x2c
			uart_ctx->indexTX++;
 800ab46:	3301      	adds	r3, #1
			huart->TDR = *uart_ctx->pDataTX;
 800ab48:	f810 4b01 	ldrb.w	r4, [r0], #1
 800ab4c:	6294      	str	r4, [r2, #40]	; 0x28
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ab4e:	69d4      	ldr	r4, [r2, #28]
			uart_ctx->pDataTX++;
 800ab50:	62f0      	str	r0, [r6, #44]	; 0x2c
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ab52:	0621      	lsls	r1, r4, #24
			uart_ctx->indexTX++;
 800ab54:	63b3      	str	r3, [r6, #56]	; 0x38
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ab56:	d5e5      	bpl.n	800ab24 <BSP_STM32_UART_IRQHandler+0x18>
 800ab58:	429d      	cmp	r5, r3
 800ab5a:	d8f3      	bhi.n	800ab44 <BSP_STM32_UART_IRQHandler+0x38>
		if (uart_ctx->indexTX == uart_ctx->sizeTX) {
 800ab5c:	42ab      	cmp	r3, r5
 800ab5e:	d1e3      	bne.n	800ab28 <BSP_STM32_UART_IRQHandler+0x1c>
 800ab60:	e008      	b.n	800ab74 <BSP_STM32_UART_IRQHandler+0x68>
		CLEAR_BIT(huart->CR1, USART_CR1_TCIE);
 800ab62:	6813      	ldr	r3, [r2, #0]
 800ab64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab68:	6013      	str	r3, [r2, #0]
		SET_BIT(huart->ICR, USART_ICR_TCCF);
 800ab6a:	6a13      	ldr	r3, [r2, #32]
 800ab6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab70:	6213      	str	r3, [r2, #32]
 800ab72:	e7df      	b.n	800ab34 <BSP_STM32_UART_IRQHandler+0x28>
			CLEAR_BIT(huart->CR3, USART_CR3_TXFTIE);
 800ab74:	6893      	ldr	r3, [r2, #8]
 800ab76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ab7a:	6093      	str	r3, [r2, #8]
			SET_BIT(huart->CR1, USART_CR1_TCIE); // Enabling TCIE interrupt
 800ab7c:	6813      	ldr	r3, [r2, #0]
 800ab7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	e7d0      	b.n	800ab28 <BSP_STM32_UART_IRQHandler+0x1c>
		SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800ab86:	6a13      	ldr	r3, [r2, #32]
		uart_ctx->indexRX0 = uart_ctx->indexRX1;
 800ab88:	6c31      	ldr	r1, [r6, #64]	; 0x40
		SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800ab8a:	f043 0310 	orr.w	r3, r3, #16
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800ab8e:	6870      	ldr	r0, [r6, #4]
		SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800ab90:	6213      	str	r3, [r2, #32]
		uart_ctx->indexRX0 = uart_ctx->indexRX1;
 800ab92:	63f1      	str	r1, [r6, #60]	; 0x3c
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800ab94:	f7fb f898 	bl	8005cc8 <BSP_STM32_DMA_GetCounter>
		if (uart_ctx->indexRX1 >= uart_ctx->indexRX0) {
 800ab98:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800ab9a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
		if (uart_ctx->indexRX1 >= uart_ctx->indexRX0) {
 800ab9e:	4298      	cmp	r0, r3
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800aba0:	6430      	str	r0, [r6, #64]	; 0x40
		if (uart_ctx->indexRX1 >= uart_ctx->indexRX0) {
 800aba2:	d302      	bcc.n	800abaa <BSP_STM32_UART_IRQHandler+0x9e>
			uart_ctx->sizeRX = uart_ctx->indexRX1 - uart_ctx->indexRX0;
 800aba4:	1ac0      	subs	r0, r0, r3
 800aba6:	6370      	str	r0, [r6, #52]	; 0x34
 800aba8:	e7ca      	b.n	800ab40 <BSP_STM32_UART_IRQHandler+0x34>
			uart_ctx->sizeRX = (uart_ctx->indexRX1 + SERIAL_BUF_SIZE) - uart_ctx->indexRX0;
 800abaa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800abae:	4403      	add	r3, r0
 800abb0:	6373      	str	r3, [r6, #52]	; 0x34
 800abb2:	e7c5      	b.n	800ab40 <BSP_STM32_UART_IRQHandler+0x34>

0800abb4 <disk_status>:
extern Disk_drvTypeDef  disk;

DSTATUS disk_status (BYTE pdrv) {
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800abb4:	4b03      	ldr	r3, [pc, #12]	; (800abc4 <disk_status+0x10>)
 800abb6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800abba:	4418      	add	r0, r3
 800abbc:	6853      	ldr	r3, [r2, #4]
 800abbe:	7a00      	ldrb	r0, [r0, #8]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4718      	bx	r3
 800abc4:	2400050c 	.word	0x2400050c

0800abc8 <disk_initialize>:


DSTATUS disk_initialize (BYTE pdrv) {
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <disk_initialize+0x20>)
 800abca:	5c1a      	ldrb	r2, [r3, r0]
 800abcc:	b952      	cbnz	r2, 800abe4 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800abce:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800abd2:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800abd4:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800abd8:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800abda:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800abde:	7a08      	ldrb	r0, [r1, #8]
 800abe0:	6813      	ldr	r3, [r2, #0]
 800abe2:	4718      	bx	r3
  }
  return stat;
}
 800abe4:	2000      	movs	r0, #0
 800abe6:	4770      	bx	lr
 800abe8:	2400050c 	.word	0x2400050c

0800abec <disk_read>:


DRESULT disk_read (BYTE pdrv, BYTE *buff, DWORD sector,	UINT count) {
 800abec:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abee:	4c06      	ldr	r4, [pc, #24]	; (800ac08 <disk_read+0x1c>)
 800abf0:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800abf4:	4420      	add	r0, r4
 800abf6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800abfa:	7a00      	ldrb	r0, [r0, #8]
 800abfc:	68a4      	ldr	r4, [r4, #8]
 800abfe:	46a4      	mov	ip, r4
  return res;
}
 800ac00:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ac04:	4760      	bx	ip
 800ac06:	bf00      	nop
 800ac08:	2400050c 	.word	0x2400050c

0800ac0c <disk_write>:


#if FF_FS_READONLY == 0

DRESULT disk_write (BYTE pdrv, const BYTE *buff, DWORD sector, UINT count) {
 800ac0c:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac0e:	4c06      	ldr	r4, [pc, #24]	; (800ac28 <disk_write+0x1c>)
 800ac10:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800ac14:	4420      	add	r0, r4
 800ac16:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800ac1a:	7a00      	ldrb	r0, [r0, #8]
 800ac1c:	68e4      	ldr	r4, [r4, #12]
 800ac1e:	46a4      	mov	ip, r4
  return res;
}
 800ac20:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac24:	4760      	bx	ip
 800ac26:	bf00      	nop
 800ac28:	2400050c 	.word	0x2400050c

0800ac2c <disk_ioctl>:


DRESULT disk_ioctl (BYTE pdrv, BYTE cmd, void *buff) {
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac2c:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <disk_ioctl+0x14>)
 800ac2e:	eb03 0c00 	add.w	ip, r3, r0
 800ac32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac36:	6843      	ldr	r3, [r0, #4]
 800ac38:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	4718      	bx	r3
 800ac40:	2400050c 	.word	0x2400050c

0800ac44 <f_init>:
char SDPath[4];
FATFS SDFatFS;
FIL SDFile;

void f_init(void)
{
 800ac44:	b508      	push	{r3, lr}
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac46:	4903      	ldr	r1, [pc, #12]	; (800ac54 <f_init+0x10>)
 800ac48:	4803      	ldr	r0, [pc, #12]	; (800ac58 <f_init+0x14>)
 800ac4a:	f000 f80b 	bl	800ac64 <FATFS_LinkDriver>
 800ac4e:	4b03      	ldr	r3, [pc, #12]	; (800ac5c <f_init+0x18>)
 800ac50:	7018      	strb	r0, [r3, #0]
}
 800ac52:	bd08      	pop	{r3, pc}
 800ac54:	24000504 	.word	0x24000504
 800ac58:	08015614 	.word	0x08015614
 800ac5c:	24000508 	.word	0x24000508

0800ac60 <get_fattime>:


DWORD get_fattime(void)
{
  return 0;
}
 800ac60:	2000      	movs	r0, #0
 800ac62:	4770      	bx	lr

0800ac64 <FATFS_LinkDriver>:

uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun) {
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < FF_VOLUMES) {
 800ac64:	4b11      	ldr	r3, [pc, #68]	; (800acac <FATFS_LinkDriver+0x48>)

  return ret;
}


uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path) {
 800ac66:	b410      	push	{r4}
  if(disk.nbr < FF_VOLUMES) {
 800ac68:	7a5c      	ldrb	r4, [r3, #9]
 800ac6a:	b9cc      	cbnz	r4, 800aca0 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 800ac6c:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800ac70:	7a5c      	ldrb	r4, [r3, #9]
 800ac72:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800ac74:	7a5c      	ldrb	r4, [r3, #9]
 800ac76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac7a:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800ac7c:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800ac7e:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800ac80:	441c      	add	r4, r3
 800ac82:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800ac84:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 800ac86:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800ac88:	b2e4      	uxtb	r4, r4
 800ac8a:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800ac8c:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800ac8e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800ac90:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800ac92:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800ac94:	4610      	mov	r0, r2
 800ac96:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 800ac9a:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800ac9c:	708b      	strb	r3, [r1, #2]
}
 800ac9e:	4770      	bx	lr
  uint8_t ret = 1;
 800aca0:	2201      	movs	r2, #1
}
 800aca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aca6:	4610      	mov	r0, r2
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	2400050c 	.word	0x2400050c

0800acb0 <SD_initialize>:
	}

	return Stat;
}

DSTATUS SD_initialize(BYTE lun) {
 800acb0:	b510      	push	{r4, lr}
	Stat = STA_NOINIT;
 800acb2:	2301      	movs	r3, #1
 800acb4:	4c07      	ldr	r4, [pc, #28]	; (800acd4 <SD_initialize+0x24>)
 800acb6:	7023      	strb	r3, [r4, #0]
	if (!BSP_SDCARD_GetCardState()) {
 800acb8:	f7f8 fc72 	bl	80035a0 <BSP_SDCARD_GetCardState>
 800acbc:	b918      	cbnz	r0, 800acc6 <SD_initialize+0x16>
		Stat &= ~STA_NOINIT;
 800acbe:	7823      	ldrb	r3, [r4, #0]
 800acc0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800acc4:	7023      	strb	r3, [r4, #0]
	return Stat;
 800acc6:	7823      	ldrb	r3, [r4, #0]
	// NOTE: SDCard initialized separately!!!
	return SD_CheckStatus(lun)?STA_NOINIT:~STA_NOINIT;
 800acc8:	2b00      	cmp	r3, #0
}
 800acca:	bf14      	ite	ne
 800accc:	2001      	movne	r0, #1
 800acce:	20fe      	moveq	r0, #254	; 0xfe
 800acd0:	bd10      	pop	{r4, pc}
 800acd2:	bf00      	nop
 800acd4:	24000018 	.word	0x24000018

0800acd8 <SD_status>:


DSTATUS SD_status(BYTE lun) {
 800acd8:	b510      	push	{r4, lr}
	Stat = STA_NOINIT;
 800acda:	2301      	movs	r3, #1
 800acdc:	4c05      	ldr	r4, [pc, #20]	; (800acf4 <SD_status+0x1c>)
 800acde:	7023      	strb	r3, [r4, #0]
	if (!BSP_SDCARD_GetCardState()) {
 800ace0:	f7f8 fc5e 	bl	80035a0 <BSP_SDCARD_GetCardState>
 800ace4:	b918      	cbnz	r0, 800acee <SD_status+0x16>
		Stat &= ~STA_NOINIT;
 800ace6:	7823      	ldrb	r3, [r4, #0]
 800ace8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800acec:	7023      	strb	r3, [r4, #0]
	return Stat;
 800acee:	7820      	ldrb	r0, [r4, #0]
	return SD_CheckStatus(lun);
}
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	bf00      	nop
 800acf4:	24000018 	.word	0x24000018

0800acf8 <SD_read>:


DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800acf8:	4608      	mov	r0, r1
	if(BSP_SDCARD_ReadBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800acfa:	4611      	mov	r1, r2
 800acfc:	461a      	mov	r2, r3
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800acfe:	b508      	push	{r3, lr}
	if(BSP_SDCARD_ReadBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800ad00:	f7f8 fc02 	bl	8003508 <BSP_SDCARD_ReadBlocks>
	return RES_OK;
}
 800ad04:	3800      	subs	r0, #0
 800ad06:	bf18      	it	ne
 800ad08:	2001      	movne	r0, #1
 800ad0a:	bd08      	pop	{r3, pc}

0800ad0c <SD_write>:


#if FF_READONLY == 0

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800ad0c:	4608      	mov	r0, r1
	if(BSP_SDCARD_WriteBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800ad0e:	4611      	mov	r1, r2
 800ad10:	461a      	mov	r2, r3
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800ad12:	b508      	push	{r3, lr}
	if(BSP_SDCARD_WriteBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800ad14:	f7f8 fc18 	bl	8003548 <BSP_SDCARD_WriteBlocks>
	return RES_OK;
}
 800ad18:	3800      	subs	r0, #0
 800ad1a:	bf18      	it	ne
 800ad1c:	2001      	movne	r0, #1
 800ad1e:	bd08      	pop	{r3, pc}

0800ad20 <SD_ioctl>:

#endif /* FF_READONLY == 0 */



DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff) {
 800ad20:	b538      	push	{r3, r4, r5, lr}
  DRESULT res = RES_ERROR;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad22:	4b12      	ldr	r3, [pc, #72]	; (800ad6c <SD_ioctl+0x4c>)
 800ad24:	7818      	ldrb	r0, [r3, #0]
 800ad26:	f010 0401 	ands.w	r4, r0, #1
 800ad2a:	d106      	bne.n	800ad3a <SD_ioctl+0x1a>
 800ad2c:	4615      	mov	r5, r2

  switch (cmd) {
 800ad2e:	2903      	cmp	r1, #3
 800ad30:	d81a      	bhi.n	800ad68 <SD_ioctl+0x48>
 800ad32:	e8df f001 	tbb	[pc, r1]
 800ad36:	0805      	.short	0x0805
 800ad38:	120d      	.short	0x120d
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad3a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
    res = RES_OK;
 800ad40:	460c      	mov	r4, r1
}
 800ad42:	4620      	mov	r0, r4
 800ad44:	bd38      	pop	{r3, r4, r5, pc}
    *(DWORD*)buff = BSP_SDCARD_GetBlockNo();
 800ad46:	f7f8 fc1f 	bl	8003588 <BSP_SDCARD_GetBlockNo>
 800ad4a:	6028      	str	r0, [r5, #0]
}
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
    *(WORD*)buff = BSP_SDCARD_GetBlockSize();
 800ad50:	f7f8 fc20 	bl	8003594 <BSP_SDCARD_GetBlockSize>
 800ad54:	8028      	strh	r0, [r5, #0]
}
 800ad56:	4620      	mov	r0, r4
 800ad58:	bd38      	pop	{r3, r4, r5, pc}
    *(DWORD*)buff = BSP_SDCARD_GetBlockSize() / SD_DEFAULT_BLOCK_SIZE;
 800ad5a:	f7f8 fc1b 	bl	8003594 <BSP_SDCARD_GetBlockSize>
 800ad5e:	f3c0 204f 	ubfx	r0, r0, #9, #16
 800ad62:	6028      	str	r0, [r5, #0]
}
 800ad64:	4620      	mov	r0, r4
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
  switch (cmd) {
 800ad68:	2404      	movs	r4, #4
 800ad6a:	e7e7      	b.n	800ad3c <SD_ioctl+0x1c>
 800ad6c:	24000018 	.word	0x24000018

0800ad70 <inc_share>:
{
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs
 800ad70:	4b29      	ldr	r3, [pc, #164]	; (800ae18 <inc_share+0xa8>)
{
 800ad72:	4684      	mov	ip, r0
		if (Files[i].fs == dp->obj.fs
 800ad74:	681a      	ldr	r2, [r3, #0]
{
 800ad76:	b570      	push	{r4, r5, r6, lr}
		if (Files[i].fs == dp->obj.fs
 800ad78:	6804      	ldr	r4, [r0, #0]
 800ad7a:	4294      	cmp	r4, r2
 800ad7c:	d01e      	beq.n	800adbc <inc_share+0x4c>
 800ad7e:	6918      	ldr	r0, [r3, #16]
 800ad80:	42a0      	cmp	r0, r4
 800ad82:	d004      	beq.n	800ad8e <inc_share+0x1e>
		 && Files[i].clu == dp->obj.sclust
		 && Files[i].ofs == dp->dptr) break;
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800ad84:	b32a      	cbz	r2, 800add2 <inc_share+0x62>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d03b      	beq.n	800ae02 <inc_share+0x92>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ad8a:	2000      	movs	r0, #0
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;	/* Index number origin from 1 */
}
 800ad8c:	bd70      	pop	{r4, r5, r6, pc}
		 && Files[i].clu == dp->obj.sclust
 800ad8e:	695d      	ldr	r5, [r3, #20]
 800ad90:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800ad94:	42b5      	cmp	r5, r6
 800ad96:	d1f5      	bne.n	800ad84 <inc_share+0x14>
		 && Files[i].ofs == dp->dptr) break;
 800ad98:	699d      	ldr	r5, [r3, #24]
 800ad9a:	f8dc 6030 	ldr.w	r6, [ip, #48]	; 0x30
 800ad9e:	42b5      	cmp	r5, r6
 800ada0:	d1f0      	bne.n	800ad84 <inc_share+0x14>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800ada2:	2201      	movs	r2, #1
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ada4:	2901      	cmp	r1, #1
 800ada6:	d12f      	bne.n	800ae08 <inc_share+0x98>
 800ada8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800adac:	0111      	lsls	r1, r2, #4
 800adae:	68c0      	ldr	r0, [r0, #12]
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1ea      	bne.n	800ad8a <inc_share+0x1a>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800adb4:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800adb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adba:	e01f      	b.n	800adfc <inc_share+0x8c>
		 && Files[i].clu == dp->obj.sclust
 800adbc:	6880      	ldr	r0, [r0, #8]
 800adbe:	685d      	ldr	r5, [r3, #4]
 800adc0:	4285      	cmp	r5, r0
 800adc2:	d1dc      	bne.n	800ad7e <inc_share+0xe>
		 && Files[i].ofs == dp->dptr) break;
 800adc4:	6898      	ldr	r0, [r3, #8]
 800adc6:	f8dc 5030 	ldr.w	r5, [ip, #48]	; 0x30
 800adca:	4285      	cmp	r5, r0
 800adcc:	d1d7      	bne.n	800ad7e <inc_share+0xe>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800adce:	2200      	movs	r2, #0
 800add0:	e7e8      	b.n	800ada4 <inc_share+0x34>
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800add2:	2001      	movs	r0, #1
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800add4:	2901      	cmp	r1, #1
		Files[i].fs = dp->obj.fs;
 800add6:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800adda:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 800adde:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
		Files[i].fs = dp->obj.fs;
 800ade2:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800ade4:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800ade8:	e9ce 4201 	strd	r4, r2, [lr, #4]
		Files[i].ctr = 0;
 800adec:	f04f 0200 	mov.w	r2, #0
 800adf0:	f8ce 200c 	str.w	r2, [lr, #12]
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800adf4:	bf0c      	ite	eq
 800adf6:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800adfa:	2201      	movne	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800adfc:	440b      	add	r3, r1
 800adfe:	60da      	str	r2, [r3, #12]
}
 800ae00:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800ae02:	2002      	movs	r0, #2
 800ae04:	2201      	movs	r2, #1
 800ae06:	e7e5      	b.n	800add4 <inc_share+0x64>
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae08:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800ae0c:	1c50      	adds	r0, r2, #1
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae0e:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae10:	68e2      	ldr	r2, [r4, #12]
 800ae12:	3201      	adds	r2, #1
 800ae14:	e7f2      	b.n	800adfc <inc_share+0x8c>
 800ae16:	bf00      	nop
 800ae18:	2400077c 	.word	0x2400077c

0800ae1c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800ae1c:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800ae1e:	7903      	ldrb	r3, [r0, #4]
{
 800ae20:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800ae22:	b95b      	cbnz	r3, 800ae3c <sync_fs+0x20>
	FRESULT res;


	res = sync_window(fs);
	if (res == FR_OK) {
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800ae24:	7823      	ldrb	r3, [r4, #0]
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d023      	beq.n	800ae72 <sync_fs+0x56>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	7860      	ldrb	r0, [r4, #1]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	f7ff fefc 	bl	800ac2c <disk_ioctl>
			res = FR_DISK_ERR;
 800ae34:	3800      	subs	r0, #0
 800ae36:	bf18      	it	ne
 800ae38:	2001      	movne	r0, #1
	}

	return res;
}
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800ae3c:	f100 0540 	add.w	r5, r0, #64	; 0x40
 800ae40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ae42:	2301      	movs	r3, #1
 800ae44:	7840      	ldrb	r0, [r0, #1]
 800ae46:	4629      	mov	r1, r5
 800ae48:	f7ff fee0 	bl	800ac0c <disk_write>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d139      	bne.n	800aec4 <sync_fs+0xa8>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800ae50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ae52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ae56:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800ae58:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d2e2      	bcs.n	800ae24 <sync_fs+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800ae5e:	78e3      	ldrb	r3, [r4, #3]
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d1df      	bne.n	800ae24 <sync_fs+0x8>
 800ae64:	440a      	add	r2, r1
 800ae66:	2301      	movs	r3, #1
 800ae68:	4629      	mov	r1, r5
 800ae6a:	7860      	ldrb	r0, [r4, #1]
 800ae6c:	f7ff fece 	bl	800ac0c <disk_write>
	if (res == FR_OK) {
 800ae70:	e7d8      	b.n	800ae24 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800ae72:	7965      	ldrb	r5, [r4, #5]
 800ae74:	2d01      	cmp	r5, #1
 800ae76:	d1d8      	bne.n	800ae2a <sync_fs+0xe>
			memset(fs->win, 0, sizeof fs->win);
 800ae78:	f104 0640 	add.w	r6, r4, #64	; 0x40
 800ae7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae80:	2100      	movs	r1, #0
 800ae82:	4630      	mov	r0, r6
 800ae84:	f007 fa09 	bl	801229a <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800ae88:	480f      	ldr	r0, [pc, #60]	; (800aec8 <sync_fs+0xac>)
	*ptr++ = (BYTE)val; val >>= 8;
 800ae8a:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800ae8e:	6420      	str	r0, [r4, #64]	; 0x40
 800ae90:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800ae94:	f8a4 323e 	strh.w	r3, [r4, #574]	; 0x23e
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800ae98:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800ae9a:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800ae9e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800aea2:	3020      	adds	r0, #32
 800aea4:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800aea8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 800aeaa:	f8c4 122c 	str.w	r1, [r4, #556]	; 0x22c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800aeae:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800aeb0:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800aeb2:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800aeb6:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800aeb8:	63e2      	str	r2, [r4, #60]	; 0x3c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800aeba:	f7ff fea7 	bl	800ac0c <disk_write>
			fs->fsi_flag = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	7163      	strb	r3, [r4, #5]
 800aec2:	e7b2      	b.n	800ae2a <sync_fs+0xe>
			res = FR_DISK_ERR;
 800aec4:	2001      	movs	r0, #1
}
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	41615252 	.word	0x41615252

0800aecc <init_alloc_info.isra.0>:
	rv = rv << 8 | ptr[0];
 800aecc:	6b43      	ldr	r3, [r0, #52]	; 0x34
)
{
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
	obj->n_frag = 0;										/* No last fragment info */
 800aece:	2200      	movs	r2, #0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 800aed0:	608b      	str	r3, [r1, #8]
	rv = rv << 8 | ptr[0];
 800aed2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
static void init_alloc_info (
 800aed4:	b410      	push	{r4}
	rv = rv << 8 | ptr[0];
 800aed6:	6b84      	ldr	r4, [r0, #56]	; 0x38
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800aed8:	e9c1 4304 	strd	r4, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800aedc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
}
 800aee0:	f85d 4b04 	ldr.w	r4, [sp], #4
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800aee4:	f003 0302 	and.w	r3, r3, #2
	obj->n_frag = 0;										/* No last fragment info */
 800aee8:	61ca      	str	r2, [r1, #28]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800aeea:	71cb      	strb	r3, [r1, #7]
}
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop

0800aef0 <move_window>:
	if (sect != fs->winsect) {	/* Window offset changed? */
 800aef0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aef2:	428a      	cmp	r2, r1
 800aef4:	d02c      	beq.n	800af50 <move_window+0x60>
{
 800aef6:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800aef8:	7903      	ldrb	r3, [r0, #4]
 800aefa:	460d      	mov	r5, r1
{
 800aefc:	b082      	sub	sp, #8
 800aefe:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800af00:	f100 0140 	add.w	r1, r0, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800af04:	b963      	cbnz	r3, 800af20 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800af06:	2301      	movs	r3, #1
 800af08:	462a      	mov	r2, r5
 800af0a:	7860      	ldrb	r0, [r4, #1]
 800af0c:	f7ff fe6e 	bl	800abec <disk_read>
 800af10:	b910      	cbnz	r0, 800af18 <move_window+0x28>
			fs->winsect = sect;
 800af12:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800af14:	b002      	add	sp, #8
 800af16:	bd70      	pop	{r4, r5, r6, pc}
				res = FR_DISK_ERR;
 800af18:	2001      	movs	r0, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800af1a:	f04f 35ff 	mov.w	r5, #4294967295
 800af1e:	e7f8      	b.n	800af12 <move_window+0x22>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800af20:	2301      	movs	r3, #1
 800af22:	7840      	ldrb	r0, [r0, #1]
 800af24:	9101      	str	r1, [sp, #4]
 800af26:	f7ff fe71 	bl	800ac0c <disk_write>
 800af2a:	b998      	cbnz	r0, 800af54 <move_window+0x64>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800af2c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800af2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800af32:	1af3      	subs	r3, r6, r3
 800af34:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;	/* Clear window dirty flag */
 800af36:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800af38:	4293      	cmp	r3, r2
 800af3a:	d2e4      	bcs.n	800af06 <move_window+0x16>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800af3c:	78e3      	ldrb	r3, [r4, #3]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d1e1      	bne.n	800af06 <move_window+0x16>
 800af42:	4432      	add	r2, r6
 800af44:	2301      	movs	r3, #1
 800af46:	7860      	ldrb	r0, [r4, #1]
 800af48:	f7ff fe60 	bl	800ac0c <disk_write>
 800af4c:	9901      	ldr	r1, [sp, #4]
		if (res == FR_OK) {			/* Fill sector window with new data */
 800af4e:	e7da      	b.n	800af06 <move_window+0x16>
	FRESULT res = FR_OK;
 800af50:	2000      	movs	r0, #0
}
 800af52:	4770      	bx	lr
			res = FR_DISK_ERR;
 800af54:	2001      	movs	r0, #1
}
 800af56:	b002      	add	sp, #8
 800af58:	bd70      	pop	{r4, r5, r6, pc}
 800af5a:	bf00      	nop

0800af5c <put_fat.part.0>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800af60:	7803      	ldrb	r3, [r0, #0]
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800af62:	4604      	mov	r4, r0
 800af64:	460d      	mov	r5, r1
 800af66:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d069      	beq.n	800b040 <put_fat.part.0+0xe4>
 800af6c:	d840      	bhi.n	800aff0 <put_fat.part.0+0x94>
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d163      	bne.n	800b03a <put_fat.part.0+0xde>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800af72:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af76:	8983      	ldrh	r3, [r0, #12]
 800af78:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800af7a:	fbb7 f3f3 	udiv	r3, r7, r3
 800af7e:	4419      	add	r1, r3
 800af80:	f7ff ffb6 	bl	800aef0 <move_window>
			if (res != FR_OK) break;
 800af84:	bb90      	cbnz	r0, 800afec <put_fat.part.0+0x90>
			p = fs->win + bc++ % SS(fs);
 800af86:	89a3      	ldrh	r3, [r4, #12]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800af88:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 800af8c:	f107 0801 	add.w	r8, r7, #1
 800af90:	f104 0940 	add.w	r9, r4, #64	; 0x40
 800af94:	fbb7 f2f3 	udiv	r2, r7, r3
 800af98:	fb03 7712 	mls	r7, r3, r2, r7
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800af9c:	d06b      	beq.n	800b076 <put_fat.part.0+0x11a>
 800af9e:	f819 2007 	ldrb.w	r2, [r9, r7]
 800afa2:	0133      	lsls	r3, r6, #4
 800afa4:	f002 020f 	and.w	r2, r2, #15
 800afa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afac:	4313      	orrs	r3, r2
 800afae:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800afb2:	4620      	mov	r0, r4
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800afb8:	fbb8 f3f3 	udiv	r3, r8, r3
 800afbc:	4419      	add	r1, r3
			fs->wflag = 1;
 800afbe:	2301      	movs	r3, #1
 800afc0:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800afc2:	f7ff ff95 	bl	800aef0 <move_window>
			if (res != FR_OK) break;
 800afc6:	b988      	cbnz	r0, 800afec <put_fat.part.0+0x90>
			p = fs->win + bc % SS(fs);
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	fbb8 f2f3 	udiv	r2, r8, r3
 800afce:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800afd2:	2d00      	cmp	r5, #0
 800afd4:	d151      	bne.n	800b07a <put_fat.part.0+0x11e>
 800afd6:	f819 3008 	ldrb.w	r3, [r9, r8]
 800afda:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800afde:	f023 030f 	bic.w	r3, r3, #15
 800afe2:	4313      	orrs	r3, r2
 800afe4:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800afe8:	2301      	movs	r3, #1
 800afea:	7123      	strb	r3, [r4, #4]
}
 800afec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		switch (fs->fs_type) {
 800aff0:	3b03      	subs	r3, #3
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d821      	bhi.n	800b03a <put_fat.part.0+0xde>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aff6:	8983      	ldrh	r3, [r0, #12]
 800aff8:	089b      	lsrs	r3, r3, #2
 800affa:	fbb1 f3f3 	udiv	r3, r1, r3
 800affe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b000:	4419      	add	r1, r3
 800b002:	f7ff ff75 	bl	800aef0 <move_window>
			if (res != FR_OK) break;
 800b006:	2800      	cmp	r0, #0
 800b008:	d1f0      	bne.n	800afec <put_fat.part.0+0x90>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b00a:	7823      	ldrb	r3, [r4, #0]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b00c:	00ad      	lsls	r5, r5, #2
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b00e:	2b04      	cmp	r3, #4
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b010:	f104 0340 	add.w	r3, r4, #64	; 0x40
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b014:	d034      	beq.n	800b080 <put_fat.part.0+0x124>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b016:	89a1      	ldrh	r1, [r4, #12]
 800b018:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 800b01c:	fbb5 f6f1 	udiv	r6, r5, r1
 800b020:	fb01 5516 	mls	r5, r1, r6, r5
	rv = rv << 8 | ptr[0];
 800b024:	5959      	ldr	r1, [r3, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b026:	442b      	add	r3, r5
 800b028:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
 800b02c:	ea41 0602 	orr.w	r6, r1, r2
			fs->wflag = 1;
 800b030:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800b032:	601e      	str	r6, [r3, #0]
			fs->wflag = 1;
 800b034:	7122      	strb	r2, [r4, #4]
}
 800b036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		switch (fs->fs_type) {
 800b03a:	2002      	movs	r0, #2
}
 800b03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b040:	8983      	ldrh	r3, [r0, #12]
 800b042:	085b      	lsrs	r3, r3, #1
 800b044:	fbb1 f3f3 	udiv	r3, r1, r3
 800b048:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b04a:	4419      	add	r1, r3
 800b04c:	f7ff ff50 	bl	800aef0 <move_window>
			if (res != FR_OK) break;
 800b050:	2800      	cmp	r0, #0
 800b052:	d1cb      	bne.n	800afec <put_fat.part.0+0x90>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800b054:	89a2      	ldrh	r2, [r4, #12]
 800b056:	006d      	lsls	r5, r5, #1
 800b058:	f104 0340 	add.w	r3, r4, #64	; 0x40
	*ptr++ = (BYTE)val; val >>= 8;
 800b05c:	f3c6 2707 	ubfx	r7, r6, #8, #8
			fs->wflag = 1;
 800b060:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800b062:	fbb5 fcf2 	udiv	ip, r5, r2
 800b066:	fb02 551c 	mls	r5, r2, ip, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800b06a:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800b06c:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 800b06e:	705f      	strb	r7, [r3, #1]
			fs->wflag = 1;
 800b070:	7121      	strb	r1, [r4, #4]
}
 800b072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800b076:	b2f3      	uxtb	r3, r6
 800b078:	e799      	b.n	800afae <put_fat.part.0+0x52>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800b07a:	f3c6 1307 	ubfx	r3, r6, #4, #8
 800b07e:	e7b1      	b.n	800afe4 <put_fat.part.0+0x88>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b080:	89a2      	ldrh	r2, [r4, #12]
 800b082:	fbb5 f1f2 	udiv	r1, r5, r2
 800b086:	fb02 5511 	mls	r5, r2, r1, r5
 800b08a:	442b      	add	r3, r5
 800b08c:	e7d0      	b.n	800b030 <put_fat.part.0+0xd4>
 800b08e:	bf00      	nop

0800b090 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b090:	2901      	cmp	r1, #1
 800b092:	d90f      	bls.n	800b0b4 <get_fat+0x24>
{
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800b096:	6806      	ldr	r6, [r0, #0]
 800b098:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b09a:	6a33      	ldr	r3, [r6, #32]
 800b09c:	428b      	cmp	r3, r1
 800b09e:	d801      	bhi.n	800b0a4 <get_fat+0x14>
		val = 1;	/* Internal error */
 800b0a0:	2001      	movs	r0, #1
}
 800b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
 800b0a4:	7833      	ldrb	r3, [r6, #0]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d8f9      	bhi.n	800b0a0 <get_fat+0x10>
 800b0ac:	e8df f003 	tbb	[pc, r3]
 800b0b0:	04182d41 	.word	0x04182d41
		val = 1;	/* Internal error */
 800b0b4:	2001      	movs	r0, #1
}
 800b0b6:	4770      	bx	lr
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800b0b8:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 800b0bc:	ea53 0201 	orrs.w	r2, r3, r1
 800b0c0:	d045      	beq.n	800b14e <get_fat+0xbe>
 800b0c2:	6887      	ldr	r7, [r0, #8]
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	d042      	beq.n	800b14e <get_fat+0xbe>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b0c8:	79c5      	ldrb	r5, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b0ca:	1be7      	subs	r7, r4, r7
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b0cc:	89b2      	ldrh	r2, [r6, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b0ce:	2d02      	cmp	r5, #2
 800b0d0:	d07b      	beq.n	800b1ca <get_fat+0x13a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b0d2:	2d03      	cmp	r5, #3
 800b0d4:	d13f      	bne.n	800b156 <get_fat+0xc6>
 800b0d6:	6983      	ldr	r3, [r0, #24]
 800b0d8:	42bb      	cmp	r3, r7
 800b0da:	d93c      	bls.n	800b156 <get_fat+0xc6>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800b0dc:	1c60      	adds	r0, r4, #1
}
 800b0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0e0:	89b3      	ldrh	r3, [r6, #12]
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b0e6:	089b      	lsrs	r3, r3, #2
 800b0e8:	fbb4 f3f3 	udiv	r3, r4, r3
 800b0ec:	4419      	add	r1, r3
 800b0ee:	f7ff feff 	bl	800aef0 <move_window>
 800b0f2:	bb48      	cbnz	r0, 800b148 <get_fat+0xb8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800b0f4:	89b3      	ldrh	r3, [r6, #12]
 800b0f6:	00a4      	lsls	r4, r4, #2
 800b0f8:	fbb4 f2f3 	udiv	r2, r4, r3
 800b0fc:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 800b100:	4434      	add	r4, r6
 800b102:	6c20      	ldr	r0, [r4, #64]	; 0x40
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800b104:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800b108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b10a:	89b3      	ldrh	r3, [r6, #12]
 800b10c:	4630      	mov	r0, r6
 800b10e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b110:	085b      	lsrs	r3, r3, #1
 800b112:	fbb4 f3f3 	udiv	r3, r4, r3
 800b116:	4419      	add	r1, r3
 800b118:	f7ff feea 	bl	800aef0 <move_window>
 800b11c:	b9a0      	cbnz	r0, 800b148 <get_fat+0xb8>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800b11e:	89b3      	ldrh	r3, [r6, #12]
 800b120:	0064      	lsls	r4, r4, #1
 800b122:	fbb4 f2f3 	udiv	r2, r4, r3
 800b126:	fb03 4412 	mls	r4, r3, r2, r4
 800b12a:	4434      	add	r4, r6
 800b12c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
}
 800b130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
 800b132:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b136:	89b3      	ldrh	r3, [r6, #12]
 800b138:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b13a:	4630      	mov	r0, r6
 800b13c:	fbb5 f3f3 	udiv	r3, r5, r3
 800b140:	4419      	add	r1, r3
 800b142:	f7ff fed5 	bl	800aef0 <move_window>
 800b146:	b1f0      	cbz	r0, 800b186 <get_fat+0xf6>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b148:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800b14e:	79c3      	ldrb	r3, [r0, #7]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1a5      	bne.n	800b0a0 <get_fat+0x10>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b154:	89b2      	ldrh	r2, [r6, #12]
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b156:	69c3      	ldr	r3, [r0, #28]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d145      	bne.n	800b1e8 <get_fat+0x158>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b15c:	0893      	lsrs	r3, r2, #2
 800b15e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b160:	4630      	mov	r0, r6
 800b162:	fbb4 f3f3 	udiv	r3, r4, r3
 800b166:	4419      	add	r1, r3
 800b168:	f7ff fec2 	bl	800aef0 <move_window>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d1eb      	bne.n	800b148 <get_fat+0xb8>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b170:	89b3      	ldrh	r3, [r6, #12]
 800b172:	00a4      	lsls	r4, r4, #2
 800b174:	fbb4 f2f3 	udiv	r2, r4, r3
 800b178:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 800b17c:	1933      	adds	r3, r6, r4
 800b17e:	6c18      	ldr	r0, [r3, #64]	; 0x40
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b180:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
}
 800b184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b186:	89b3      	ldrh	r3, [r6, #12]
 800b188:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b18a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b18c:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b18e:	fbb5 f2f3 	udiv	r2, r5, r3
 800b192:	fb03 5512 	mls	r5, r3, r2, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b196:	fbb7 f3f3 	udiv	r3, r7, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b19a:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b19c:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b19e:	f895 5040 	ldrb.w	r5, [r5, #64]	; 0x40
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1a2:	f7ff fea5 	bl	800aef0 <move_window>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d1ce      	bne.n	800b148 <get_fat+0xb8>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800b1aa:	89b3      	ldrh	r3, [r6, #12]
 800b1ac:	fbb7 f2f3 	udiv	r2, r7, r3
 800b1b0:	fb03 7712 	mls	r7, r3, r2, r7
 800b1b4:	4437      	add	r7, r6
 800b1b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b1ba:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800b1be:	07e3      	lsls	r3, r4, #31
 800b1c0:	bf4c      	ite	mi
 800b1c2:	0900      	lsrmi	r0, r0, #4
 800b1c4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800b1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b1ca:	1e58      	subs	r0, r3, #1
 800b1cc:	f04f 0300 	mov.w	r3, #0
 800b1d0:	f161 0100 	sbc.w	r1, r1, #0
 800b1d4:	f7f5 f888 	bl	80002e8 <__aeabi_uldivmod>
 800b1d8:	8973      	ldrh	r3, [r6, #10]
 800b1da:	fbb0 f0f3 	udiv	r0, r0, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b1de:	4287      	cmp	r7, r0
 800b1e0:	f63f af5e 	bhi.w	800b0a0 <get_fat+0x10>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800b1e4:	f47f af7a 	bne.w	800b0dc <get_fat+0x4c>
 800b1e8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
 800b1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ee:	bf00      	nop

0800b1f0 <dir_next.constprop.0>:
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 800b1f2:	6805      	ldr	r5, [r0, #0]
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800b1f4:	4604      	mov	r4, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b1f6:	6b06      	ldr	r6, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800b1f8:	782b      	ldrb	r3, [r5, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b1fa:	3620      	adds	r6, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800b1fc:	2b04      	cmp	r3, #4
 800b1fe:	bf0c      	ite	eq
 800b200:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 800b204:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 800b208:	429e      	cmp	r6, r3
 800b20a:	d303      	bcc.n	800b214 <dir_next.constprop.0+0x24>
 800b20c:	2300      	movs	r3, #0
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800b20e:	2004      	movs	r0, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800b210:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800b214:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b216:	2b00      	cmp	r3, #0
 800b218:	d035      	beq.n	800b286 <dir_next.constprop.0+0x96>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b21a:	89aa      	ldrh	r2, [r5, #12]
 800b21c:	fbb6 fcf2 	udiv	ip, r6, r2
 800b220:	fb02 621c 	mls	r2, r2, ip, r6
 800b224:	bb02      	cbnz	r2, 800b268 <dir_next.constprop.0+0x78>
		dp->sect++;				/* Next sector */
 800b226:	3301      	adds	r3, #1
		if (dp->clust == 0) {	/* Static table */
 800b228:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800b22a:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800b22c:	b311      	cbz	r1, 800b274 <dir_next.constprop.0+0x84>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b22e:	896b      	ldrh	r3, [r5, #10]
 800b230:	3b01      	subs	r3, #1
 800b232:	ea13 070c 	ands.w	r7, r3, ip
 800b236:	d117      	bne.n	800b268 <dir_next.constprop.0+0x78>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800b238:	f7ff ff2a 	bl	800b090 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800b23c:	2801      	cmp	r0, #1
 800b23e:	d920      	bls.n	800b282 <dir_next.constprop.0+0x92>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d01c      	beq.n	800b27e <dir_next.constprop.0+0x8e>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800b244:	6a2b      	ldr	r3, [r5, #32]
 800b246:	4298      	cmp	r0, r3
 800b248:	d2e0      	bcs.n	800b20c <dir_next.constprop.0+0x1c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b24a:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800b24c:	6360      	str	r0, [r4, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800b24e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b250:	4298      	cmp	r0, r3
 800b252:	d203      	bcs.n	800b25c <dir_next.constprop.0+0x6c>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b254:	896a      	ldrh	r2, [r5, #10]
 800b256:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b258:	fb00 3702 	mla	r7, r0, r2, r3
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b25c:	89ab      	ldrh	r3, [r5, #12]
				dp->sect = clst2sect(fs, clst);
 800b25e:	63a7      	str	r7, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b260:	fbb6 f2f3 	udiv	r2, r6, r3
 800b264:	fb03 6212 	mls	r2, r3, r2, r6
 800b268:	3540      	adds	r5, #64	; 0x40
	return FR_OK;
 800b26a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800b26c:	6326      	str	r6, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b26e:	4415      	add	r5, r2
 800b270:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800b272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b274:	892b      	ldrh	r3, [r5, #8]
 800b276:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 800b27a:	d8f5      	bhi.n	800b268 <dir_next.constprop.0+0x78>
 800b27c:	e7c6      	b.n	800b20c <dir_next.constprop.0+0x1c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b27e:	2001      	movs	r0, #1
}
 800b280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800b282:	2002      	movs	r0, #2
}
 800b284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800b286:	2004      	movs	r0, #4
}
 800b288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b28a:	bf00      	nop

0800b28c <dir_clear>:
{
 800b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b28e:	7903      	ldrb	r3, [r0, #4]
{
 800b290:	4605      	mov	r5, r0
 800b292:	460c      	mov	r4, r1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b294:	f100 0740 	add.w	r7, r0, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b298:	bb23      	cbnz	r3, 800b2e4 <dir_clear+0x58>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b29a:	6a2b      	ldr	r3, [r5, #32]
	clst -= 2;		/* Cluster number is origin from 2 */
 800b29c:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b29e:	3b02      	subs	r3, #2
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	d237      	bcs.n	800b314 <dir_clear+0x88>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b2a4:	896b      	ldrh	r3, [r5, #10]
 800b2a6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800b2a8:	fb01 6603 	mla	r6, r1, r3, r6
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800b2ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4638      	mov	r0, r7
	fs->winsect = sect;				/* Set window to top of the cluster */
 800b2b4:	63ee      	str	r6, [r5, #60]	; 0x3c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800b2b6:	f006 fff0 	bl	801229a <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800b2ba:	896b      	ldrh	r3, [r5, #10]
 800b2bc:	b373      	cbz	r3, 800b31c <dir_clear+0x90>
 800b2be:	2400      	movs	r4, #0
 800b2c0:	e003      	b.n	800b2ca <dir_clear+0x3e>
 800b2c2:	3401      	adds	r4, #1
 800b2c4:	896b      	ldrh	r3, [r5, #10]
 800b2c6:	42a3      	cmp	r3, r4
 800b2c8:	d908      	bls.n	800b2dc <dir_clear+0x50>
 800b2ca:	1932      	adds	r2, r6, r4
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	7868      	ldrb	r0, [r5, #1]
 800b2d2:	f7ff fc9b 	bl	800ac0c <disk_write>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d0f3      	beq.n	800b2c2 <dir_clear+0x36>
 800b2da:	896b      	ldrh	r3, [r5, #10]
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800b2dc:	1ae0      	subs	r0, r4, r3
 800b2de:	bf18      	it	ne
 800b2e0:	2001      	movne	r0, #1
}
 800b2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b2e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	7840      	ldrb	r0, [r0, #1]
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7ff fc8e 	bl	800ac0c <disk_write>
 800b2f0:	b990      	cbnz	r0, 800b318 <dir_clear+0x8c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b2f2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800b2f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b2f8:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800b2fa:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d2cc      	bcs.n	800b29a <dir_clear+0xe>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800b300:	78eb      	ldrb	r3, [r5, #3]
 800b302:	2b02      	cmp	r3, #2
 800b304:	d1c9      	bne.n	800b29a <dir_clear+0xe>
 800b306:	440a      	add	r2, r1
 800b308:	2301      	movs	r3, #1
 800b30a:	4639      	mov	r1, r7
 800b30c:	7868      	ldrb	r0, [r5, #1]
 800b30e:	f7ff fc7d 	bl	800ac0c <disk_write>
	return res;
 800b312:	e7c2      	b.n	800b29a <dir_clear+0xe>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b314:	2600      	movs	r6, #0
 800b316:	e7c9      	b.n	800b2ac <dir_clear+0x20>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b318:	2001      	movs	r0, #1
}
 800b31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800b31c:	461c      	mov	r4, r3
 800b31e:	e7dd      	b.n	800b2dc <dir_clear+0x50>

0800b320 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800b320:	b570      	push	{r4, r5, r6, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800b322:	f04f 36ff 	mov.w	r6, #4294967295
 800b326:	2300      	movs	r3, #0
{
 800b328:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 800b32a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800b32c:	7103      	strb	r3, [r0, #4]
 800b32e:	63c6      	str	r6, [r0, #60]	; 0x3c
	if (sect != fs->winsect) {	/* Window offset changed? */
 800b330:	d00c      	beq.n	800b34c <check_fs+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800b332:	460d      	mov	r5, r1
 800b334:	460a      	mov	r2, r1
 800b336:	2301      	movs	r3, #1
 800b338:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800b33c:	7840      	ldrb	r0, [r0, #1]
 800b33e:	f7ff fc55 	bl	800abec <disk_read>
 800b342:	b110      	cbz	r0, 800b34a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800b344:	2004      	movs	r0, #4
			fs->winsect = sect;
 800b346:	63e6      	str	r6, [r4, #60]	; 0x3c
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
}
 800b348:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sect;
 800b34a:	63e5      	str	r5, [r4, #60]	; 0x3c
	sign = ld_word(fs->win + BS_55AA);
 800b34c:	f8b4 523e 	ldrh.w	r5, [r4, #574]	; 0x23e
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800b350:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b354:	429d      	cmp	r5, r3
 800b356:	d033      	beq.n	800b3c0 <check_fs+0xa0>
	b = fs->win[BS_JmpBoot];
 800b358:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800b35c:	2beb      	cmp	r3, #235	; 0xeb
 800b35e:	d005      	beq.n	800b36c <check_fs+0x4c>
 800b360:	3318      	adds	r3, #24
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b01      	cmp	r3, #1
 800b366:	d901      	bls.n	800b36c <check_fs+0x4c>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800b368:	2003      	movs	r0, #3
}
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
		w = ld_word(fs->win + BPB_BytsPerSec);
 800b36c:	f8b4 304b 	ldrh.w	r3, [r4, #75]	; 0x4b
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800b370:	1e5a      	subs	r2, r3, #1
 800b372:	421a      	tst	r2, r3
 800b374:	d1f8      	bne.n	800b368 <check_fs+0x48>
 800b376:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		b = fs->win[BPB_SecPerClus];
 800b37a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800b37e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800b382:	d8f1      	bhi.n	800b368 <check_fs+0x48>
 800b384:	2a00      	cmp	r2, #0
 800b386:	d0ef      	beq.n	800b368 <check_fs+0x48>
 800b388:	1e53      	subs	r3, r2, #1
 800b38a:	4213      	tst	r3, r2
 800b38c:	d1ec      	bne.n	800b368 <check_fs+0x48>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800b38e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800b392:	2b00      	cmp	r3, #0
 800b394:	d03b      	beq.n	800b40e <check_fs+0xee>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800b396:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800b39a:	3b01      	subs	r3, #1
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d836      	bhi.n	800b40e <check_fs+0xee>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800b3a0:	f8b4 3051 	ldrh.w	r3, [r4, #81]	; 0x51
 800b3a4:	b39b      	cbz	r3, 800b40e <check_fs+0xee>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800b3a6:	f8b4 3053 	ldrh.w	r3, [r4, #83]	; 0x53
 800b3aa:	2b7f      	cmp	r3, #127	; 0x7f
 800b3ac:	d803      	bhi.n	800b3b6 <check_fs+0x96>
	rv = rv << 8 | ptr[0];
 800b3ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800b3b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3b4:	d32b      	bcc.n	800b40e <check_fs+0xee>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800b3b6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800b3ba:	b343      	cbz	r3, 800b40e <check_fs+0xee>
			return 0;	/* It is an FAT32 VBR */
 800b3bc:	2000      	movs	r0, #0
}
 800b3be:	bd70      	pop	{r4, r5, r6, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800b3c0:	220b      	movs	r2, #11
 800b3c2:	4919      	ldr	r1, [pc, #100]	; (800b428 <check_fs+0x108>)
 800b3c4:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b3c8:	f006 ff3d 	bl	8012246 <memcmp>
 800b3cc:	b1e8      	cbz	r0, 800b40a <check_fs+0xea>
	b = fs->win[BS_JmpBoot];
 800b3ce:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800b3d2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800b3d6:	2ae9      	cmp	r2, #233	; 0xe9
 800b3d8:	d001      	beq.n	800b3de <check_fs+0xbe>
 800b3da:	2be8      	cmp	r3, #232	; 0xe8
 800b3dc:	d113      	bne.n	800b406 <check_fs+0xe6>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800b3de:	2208      	movs	r2, #8
 800b3e0:	4912      	ldr	r1, [pc, #72]	; (800b42c <check_fs+0x10c>)
 800b3e2:	f104 0092 	add.w	r0, r4, #146	; 0x92
 800b3e6:	f006 ff2e 	bl	8012246 <memcmp>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d0ac      	beq.n	800b348 <check_fs+0x28>
		w = ld_word(fs->win + BPB_BytsPerSec);
 800b3ee:	f8b4 304b 	ldrh.w	r3, [r4, #75]	; 0x4b
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800b3f2:	1e5a      	subs	r2, r3, #1
 800b3f4:	421a      	tst	r2, r3
 800b3f6:	d106      	bne.n	800b406 <check_fs+0xe6>
 800b3f8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		b = fs->win[BPB_SecPerClus];
 800b3fc:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800b400:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800b404:	d90a      	bls.n	800b41c <check_fs+0xfc>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800b406:	2002      	movs	r0, #2
}
 800b408:	bd70      	pop	{r4, r5, r6, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800b40a:	2001      	movs	r0, #1
}
 800b40c:	bd70      	pop	{r4, r5, r6, pc}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800b40e:	f64a 2055 	movw	r0, #43605	; 0xaa55
 800b412:	4285      	cmp	r5, r0
 800b414:	bf14      	ite	ne
 800b416:	2003      	movne	r0, #3
 800b418:	2002      	moveq	r0, #2
}
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800b41c:	2a00      	cmp	r2, #0
 800b41e:	d0f2      	beq.n	800b406 <check_fs+0xe6>
 800b420:	1e53      	subs	r3, r2, #1
 800b422:	4213      	tst	r3, r2
 800b424:	d0b3      	beq.n	800b38e <check_fs+0x6e>
 800b426:	e7ee      	b.n	800b406 <check_fs+0xe6>
 800b428:	08015628 	.word	0x08015628
 800b42c:	08015634 	.word	0x08015634

0800b430 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800b430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800b434:	2300      	movs	r3, #0
	tt = tp = *path;
 800b436:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800b438:	600b      	str	r3, [r1, #0]
	if (!tp) return vol;	/* Invalid path name? */
 800b43a:	b16c      	cbz	r4, 800b458 <mount_volume+0x28>
 800b43c:	4625      	mov	r5, r4
		tc = *tt++;
 800b43e:	f815 3b01 	ldrb.w	r3, [r5], #1
	} while (!IsTerminator(tc) && tc != ':');
 800b442:	2b1f      	cmp	r3, #31
 800b444:	d90c      	bls.n	800b460 <mount_volume+0x30>
 800b446:	2b3a      	cmp	r3, #58	; 0x3a
 800b448:	d1f9      	bne.n	800b43e <mount_volume+0xe>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800b44a:	7823      	ldrb	r3, [r4, #0]
 800b44c:	2b30      	cmp	r3, #48	; 0x30
 800b44e:	d103      	bne.n	800b458 <mount_volume+0x28>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800b450:	3402      	adds	r4, #2
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800b452:	42a5      	cmp	r5, r4
 800b454:	f000 8118 	beq.w	800b688 <mount_volume+0x258>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800b458:	240b      	movs	r4, #11
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
}
 800b45a:	4620      	mov	r0, r4
 800b45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800b460:	2b3a      	cmp	r3, #58	; 0x3a
 800b462:	d0f2      	beq.n	800b44a <mount_volume+0x1a>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800b464:	4b89      	ldr	r3, [pc, #548]	; (800b68c <mount_volume+0x25c>)
 800b466:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800b468:	2d00      	cmp	r5, #0
 800b46a:	d03e      	beq.n	800b4ea <mount_volume+0xba>
	*rfs = fs;							/* Return pointer to the filesystem object */
 800b46c:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b46e:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800b472:	782b      	ldrb	r3, [r5, #0]
 800b474:	b123      	cbz	r3, 800b480 <mount_volume+0x50>
		stat = disk_status(fs->pdrv);
 800b476:	7868      	ldrb	r0, [r5, #1]
 800b478:	f7ff fb9c 	bl	800abb4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b47c:	07c7      	lsls	r7, r0, #31
 800b47e:	d527      	bpl.n	800b4d0 <mount_volume+0xa0>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800b480:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800b482:	7868      	ldrb	r0, [r5, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800b484:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800b486:	f7ff fb9f 	bl	800abc8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b48a:	07c6      	lsls	r6, r0, #31
 800b48c:	d429      	bmi.n	800b4e2 <mount_volume+0xb2>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b48e:	b10c      	cbz	r4, 800b494 <mount_volume+0x64>
 800b490:	0740      	lsls	r0, r0, #29
 800b492:	d422      	bmi.n	800b4da <mount_volume+0xaa>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b494:	f105 020c 	add.w	r2, r5, #12
 800b498:	2102      	movs	r1, #2
 800b49a:	7868      	ldrb	r0, [r5, #1]
 800b49c:	f7ff fbc6 	bl	800ac2c <disk_ioctl>
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	b988      	cbnz	r0, 800b4c8 <mount_volume+0x98>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b4a4:	89ab      	ldrh	r3, [r5, #12]
 800b4a6:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800b4aa:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800b4ae:	d80b      	bhi.n	800b4c8 <mount_volume+0x98>
 800b4b0:	1e5a      	subs	r2, r3, #1
 800b4b2:	421a      	tst	r2, r3
 800b4b4:	d108      	bne.n	800b4c8 <mount_volume+0x98>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800b4b6:	4601      	mov	r1, r0
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f7ff ff31 	bl	800b320 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800b4be:	2802      	cmp	r0, #2
 800b4c0:	d015      	beq.n	800b4ee <mount_volume+0xbe>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800b4c2:	2804      	cmp	r0, #4
 800b4c4:	f040 8160 	bne.w	800b788 <mount_volume+0x358>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b4c8:	2401      	movs	r4, #1
}
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b4d0:	2c00      	cmp	r4, #0
 800b4d2:	d0fa      	beq.n	800b4ca <mount_volume+0x9a>
 800b4d4:	f010 0404 	ands.w	r4, r0, #4
 800b4d8:	d0f7      	beq.n	800b4ca <mount_volume+0x9a>
				return FR_WRITE_PROTECTED;
 800b4da:	240a      	movs	r4, #10
}
 800b4dc:	4620      	mov	r0, r4
 800b4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b4e2:	2403      	movs	r4, #3
}
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800b4ea:	240c      	movs	r4, #12
 800b4ec:	e7ed      	b.n	800b4ca <mount_volume+0x9a>
	rv = rv << 8 | ptr[0];
 800b4ee:	f8d5 1206 	ldr.w	r1, [r5, #518]	; 0x206
 800b4f2:	f8d5 7216 	ldr.w	r7, [r5, #534]	; 0x216
 800b4f6:	f8d5 6226 	ldr.w	r6, [r5, #550]	; 0x226
 800b4fa:	f8d5 8236 	ldr.w	r8, [r5, #566]	; 0x236
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b4fe:	b959      	cbnz	r1, 800b518 <mount_volume+0xe8>
 800b500:	2f00      	cmp	r7, #0
 800b502:	f040 8095 	bne.w	800b630 <mount_volume+0x200>
 800b506:	2e00      	cmp	r6, #0
 800b508:	f040 809c 	bne.w	800b644 <mount_volume+0x214>
 800b50c:	f1b8 0f00 	cmp.w	r8, #0
 800b510:	f040 80a3 	bne.w	800b65a <mount_volume+0x22a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b514:	240d      	movs	r4, #13
 800b516:	e7d8      	b.n	800b4ca <mount_volume+0x9a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b518:	4628      	mov	r0, r5
 800b51a:	f7ff ff01 	bl	800b320 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800b51e:	2801      	cmp	r0, #1
 800b520:	d8ee      	bhi.n	800b500 <mount_volume+0xd0>
	if (fmt == 1) {
 800b522:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800b524:	6be9      	ldr	r1, [r5, #60]	; 0x3c
	if (fmt == 1) {
 800b526:	f000 80a3 	beq.w	800b670 <mount_volume+0x240>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b52a:	89a8      	ldrh	r0, [r5, #12]
 800b52c:	f8b5 304b 	ldrh.w	r3, [r5, #75]	; 0x4b
 800b530:	4283      	cmp	r3, r0
 800b532:	d1ef      	bne.n	800b514 <mount_volume+0xe4>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b534:	f8b5 6056 	ldrh.w	r6, [r5, #86]	; 0x56
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b538:	b906      	cbnz	r6, 800b53c <mount_volume+0x10c>
	rv = rv << 8 | ptr[0];
 800b53a:	6e6e      	ldr	r6, [r5, #100]	; 0x64
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b53c:	f895 c050 	ldrb.w	ip, [r5, #80]	; 0x50
		fs->fsize = fasize;
 800b540:	626e      	str	r6, [r5, #36]	; 0x24
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b542:	f10c 33ff 	add.w	r3, ip, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b546:	f885 c003 	strb.w	ip, [r5, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d8e2      	bhi.n	800b514 <mount_volume+0xe4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b54e:	f895 904d 	ldrb.w	r9, [r5, #77]	; 0x4d
 800b552:	fa1f f389 	uxth.w	r3, r9
 800b556:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0db      	beq.n	800b514 <mount_volume+0xe4>
 800b55c:	f109 33ff 	add.w	r3, r9, #4294967295
 800b560:	ea13 0f09 	tst.w	r3, r9
 800b564:	d1d6      	bne.n	800b514 <mount_volume+0xe4>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b566:	f8b5 e051 	ldrh.w	lr, [r5, #81]	; 0x51
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b56a:	0943      	lsrs	r3, r0, #5
 800b56c:	fbbe f7f3 	udiv	r7, lr, r3
 800b570:	fb03 e317 	mls	r3, r3, r7, lr
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b574:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b578:	b29b      	uxth	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1ca      	bne.n	800b514 <mount_volume+0xe4>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b57e:	f8b5 3053 	ldrh.w	r3, [r5, #83]	; 0x53
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b582:	b903      	cbnz	r3, 800b586 <mount_volume+0x156>
	rv = rv << 8 | ptr[0];
 800b584:	6e2b      	ldr	r3, [r5, #96]	; 0x60
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b586:	f8b5 204e 	ldrh.w	r2, [r5, #78]	; 0x4e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b58a:	2a00      	cmp	r2, #0
 800b58c:	d0c2      	beq.n	800b514 <mount_volume+0xe4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b58e:	fb06 fc0c 	mul.w	ip, r6, ip
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b592:	4417      	add	r7, r2
 800b594:	4467      	add	r7, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b596:	42bb      	cmp	r3, r7
 800b598:	d3bc      	bcc.n	800b514 <mount_volume+0xe4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b59a:	eba3 0807 	sub.w	r8, r3, r7
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800b59e:	f8df a100 	ldr.w	sl, [pc, #256]	; 800b6a0 <mount_volume+0x270>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b5a2:	fbb8 f3f9 	udiv	r3, r8, r9
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800b5a6:	4553      	cmp	r3, sl
 800b5a8:	d8b4      	bhi.n	800b514 <mount_volume+0xe4>
 800b5aa:	45c8      	cmp	r8, r9
 800b5ac:	d3b2      	bcc.n	800b514 <mount_volume+0xe4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b5ae:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 800b5b2:	4543      	cmp	r3, r8
 800b5b4:	f200 80ee 	bhi.w	800b794 <mount_volume+0x364>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b5b8:	f640 78f5 	movw	r8, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b5bc:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
 800b5be:	440f      	add	r7, r1
		fs->volbase = bsect;							/* Volume start sector */
 800b5c0:	62a9      	str	r1, [r5, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b5c2:	4543      	cmp	r3, r8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b5c4:	f103 0302 	add.w	r3, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800b5c8:	636f      	str	r7, [r5, #52]	; 0x34
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b5ca:	622b      	str	r3, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b5cc:	62ea      	str	r2, [r5, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b5ce:	f200 8135 	bhi.w	800b83c <mount_volume+0x40c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b5d2:	f1be 0f00 	cmp.w	lr, #0
 800b5d6:	d09d      	beq.n	800b514 <mount_volume+0xe4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800b5dc:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5e0:	4462      	add	r2, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5e2:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800b5e6:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5e8:	632a      	str	r2, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5ea:	1e42      	subs	r2, r0, #1
 800b5ec:	4413      	add	r3, r2
 800b5ee:	fbb3 f3f0 	udiv	r3, r3, r0
 800b5f2:	429e      	cmp	r6, r3
 800b5f4:	d38e      	bcc.n	800b514 <mount_volume+0xe4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5f6:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b5fa:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5fc:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fs->fsi_flag = 0x80;
 800b600:	716a      	strb	r2, [r5, #5]
	fs->id = ++Fsid;		/* Volume mount ID */
 800b602:	4823      	ldr	r0, [pc, #140]	; (800b690 <mount_volume+0x260>)
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b604:	4a23      	ldr	r2, [pc, #140]	; (800b694 <mount_volume+0x264>)
	fs->id = ++Fsid;		/* Volume mount ID */
 800b606:	8803      	ldrh	r3, [r0, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b608:	612a      	str	r2, [r5, #16]
	fs->id = ++Fsid;		/* Volume mount ID */
 800b60a:	3301      	adds	r3, #1
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800b60c:	4a22      	ldr	r2, [pc, #136]	; (800b698 <mount_volume+0x268>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800b60e:	7029      	strb	r1, [r5, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800b610:	b29b      	uxth	r3, r3
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800b612:	616a      	str	r2, [r5, #20]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b614:	4a21      	ldr	r2, [pc, #132]	; (800b69c <mount_volume+0x26c>)
	fs->id = ++Fsid;		/* Volume mount ID */
 800b616:	8003      	strh	r3, [r0, #0]
 800b618:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b61a:	6813      	ldr	r3, [r2, #0]
 800b61c:	429d      	cmp	r5, r3
 800b61e:	f000 80de 	beq.w	800b7de <mount_volume+0x3ae>
 800b622:	6913      	ldr	r3, [r2, #16]
 800b624:	429d      	cmp	r5, r3
 800b626:	f47f af50 	bne.w	800b4ca <mount_volume+0x9a>
 800b62a:	2300      	movs	r3, #0
 800b62c:	6113      	str	r3, [r2, #16]
 800b62e:	e74c      	b.n	800b4ca <mount_volume+0x9a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b630:	4639      	mov	r1, r7
 800b632:	4628      	mov	r0, r5
 800b634:	f7ff fe74 	bl	800b320 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800b638:	2801      	cmp	r0, #1
 800b63a:	f67f af72 	bls.w	800b522 <mount_volume+0xf2>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b63e:	2e00      	cmp	r6, #0
 800b640:	f43f af64 	beq.w	800b50c <mount_volume+0xdc>
 800b644:	4631      	mov	r1, r6
 800b646:	4628      	mov	r0, r5
 800b648:	f7ff fe6a 	bl	800b320 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800b64c:	2801      	cmp	r0, #1
 800b64e:	f67f af68 	bls.w	800b522 <mount_volume+0xf2>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b652:	f1b8 0f00 	cmp.w	r8, #0
 800b656:	f43f af5d 	beq.w	800b514 <mount_volume+0xe4>
 800b65a:	4641      	mov	r1, r8
 800b65c:	4628      	mov	r0, r5
 800b65e:	f7ff fe5f 	bl	800b320 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800b662:	2801      	cmp	r0, #1
 800b664:	f67f af5d 	bls.w	800b522 <mount_volume+0xf2>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800b668:	2804      	cmp	r0, #4
 800b66a:	f43f af2d 	beq.w	800b4c8 <mount_volume+0x98>
 800b66e:	e751      	b.n	800b514 <mount_volume+0xe4>
 800b670:	f105 034a 	add.w	r3, r5, #74	; 0x4a
 800b674:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 800b678:	e001      	b.n	800b67e <mount_volume+0x24e>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800b67a:	4283      	cmp	r3, r0
 800b67c:	d012      	beq.n	800b6a4 <mount_volume+0x274>
 800b67e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b682:	2a00      	cmp	r2, #0
 800b684:	d0f9      	beq.n	800b67a <mount_volume+0x24a>
 800b686:	e745      	b.n	800b514 <mount_volume+0xe4>
			*path = tt;		/* Snip the drive prefix off */
 800b688:	6005      	str	r5, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b68a:	e6eb      	b.n	800b464 <mount_volume+0x34>
 800b68c:	24000778 	.word	0x24000778
 800b690:	2400079c 	.word	0x2400079c
 800b694:	240007a0 	.word	0x240007a0
 800b698:	24000518 	.word	0x24000518
 800b69c:	2400077c 	.word	0x2400077c
 800b6a0:	0ffffff5 	.word	0x0ffffff5
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800b6a4:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
 800b6a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ac:	f47f af32 	bne.w	800b514 <mount_volume+0xe4>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800b6b0:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4083      	lsls	r3, r0
 800b6b8:	89a8      	ldrh	r0, [r5, #12]
 800b6ba:	4283      	cmp	r3, r0
 800b6bc:	f47f af2a 	bne.w	800b514 <mount_volume+0xe4>
	rv = rv << 8 | ptr[0];
 800b6c0:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800b6c4:	f04f 33ff 	mov.w	r3, #4294967295
	rv = rv << 8 | ptr[0];
 800b6c8:	f8d5 708c 	ldr.w	r7, [r5, #140]	; 0x8c
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800b6cc:	1840      	adds	r0, r0, r1
 800b6ce:	f147 0700 	adc.w	r7, r7, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800b6d2:	4283      	cmp	r3, r0
 800b6d4:	eb72 0307 	sbcs.w	r3, r2, r7
 800b6d8:	f4ff af1c 	bcc.w	800b514 <mount_volume+0xe4>
	rv = rv << 8 | ptr[0];
 800b6dc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800b6e0:	626b      	str	r3, [r5, #36]	; 0x24
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800b6e2:	f895 30ae 	ldrb.w	r3, [r5, #174]	; 0xae
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800b6e6:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800b6e8:	70eb      	strb	r3, [r5, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800b6ea:	f47f af13 	bne.w	800b514 <mount_volume+0xe4>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800b6ee:	f895 60ad 	ldrb.w	r6, [r5, #173]	; 0xad
 800b6f2:	40b3      	lsls	r3, r6
 800b6f4:	b29e      	uxth	r6, r3
 800b6f6:	816e      	strh	r6, [r5, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800b6f8:	2e00      	cmp	r6, #0
 800b6fa:	f43f af0b 	beq.w	800b514 <mount_volume+0xe4>
	rv = rv << 8 | ptr[0];
 800b6fe:	f8d5 609c 	ldr.w	r6, [r5, #156]	; 0x9c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800b702:	f8df c194 	ldr.w	ip, [pc, #404]	; 800b898 <mount_volume+0x468>
 800b706:	4566      	cmp	r6, ip
 800b708:	f63f af04 	bhi.w	800b514 <mount_volume+0xe4>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b70c:	b29b      	uxth	r3, r3
		fs->volbase = bsect;
 800b70e:	62a9      	str	r1, [r5, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b710:	fb06 f303 	mul.w	r3, r6, r3
		fs->n_fatent = nclst + 2;
 800b714:	3602      	adds	r6, #2
 800b716:	622e      	str	r6, [r5, #32]
	rv = rv << 8 | ptr[0];
 800b718:	f8d5 6098 	ldr.w	r6, [r5, #152]	; 0x98
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800b71c:	440e      	add	r6, r1
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b71e:	199b      	adds	r3, r3, r6
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800b720:	636e      	str	r6, [r5, #52]	; 0x34
	rv = rv << 8 | ptr[0];
 800b722:	f8d5 6090 	ldr.w	r6, [r5, #144]	; 0x90
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800b726:	440e      	add	r6, r1
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b728:	eb42 0102 	adc.w	r1, r2, r2
 800b72c:	4298      	cmp	r0, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800b72e:	62ee      	str	r6, [r5, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b730:	eb77 0101 	sbcs.w	r1, r7, r1
 800b734:	f4ff aeee 	bcc.w	800b514 <mount_volume+0xe4>
	rv = rv << 8 | ptr[0];
 800b738:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
		so = i = 0;
 800b73c:	4616      	mov	r6, r2
 800b73e:	4617      	mov	r7, r2
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800b740:	632b      	str	r3, [r5, #48]	; 0x30
			if (i == 0) {
 800b742:	b9a6      	cbnz	r6, 800b76e <mount_volume+0x33e>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800b744:	8969      	ldrh	r1, [r5, #10]
 800b746:	42b9      	cmp	r1, r7
 800b748:	f67f aee4 	bls.w	800b514 <mount_volume+0xe4>
	clst -= 2;		/* Cluster number is origin from 2 */
 800b74c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b74e:	6a2b      	ldr	r3, [r5, #32]
	clst -= 2;		/* Cluster number is origin from 2 */
 800b750:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b752:	3b02      	subs	r3, #2
 800b754:	429a      	cmp	r2, r3
 800b756:	d21b      	bcs.n	800b790 <mount_volume+0x360>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b758:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b75a:	fb02 3301 	mla	r3, r2, r1, r3
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800b75e:	19d9      	adds	r1, r3, r7
 800b760:	4628      	mov	r0, r5
				so++;
 800b762:	3701      	adds	r7, #1
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800b764:	f7ff fbc4 	bl	800aef0 <move_window>
 800b768:	2800      	cmp	r0, #0
 800b76a:	f47f aead 	bne.w	800b4c8 <mount_volume+0x98>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800b76e:	19ab      	adds	r3, r5, r6
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800b770:	f106 0120 	add.w	r1, r6, #32
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800b774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b778:	2b81      	cmp	r3, #129	; 0x81
 800b77a:	d033      	beq.n	800b7e4 <mount_volume+0x3b4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800b77c:	89ab      	ldrh	r3, [r5, #12]
 800b77e:	fbb1 f2f3 	udiv	r2, r1, r3
 800b782:	fb03 1612 	mls	r6, r3, r2, r1
			if (i == 0) {
 800b786:	e7dc      	b.n	800b742 <mount_volume+0x312>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b788:	2801      	cmp	r0, #1
 800b78a:	f67f aeca 	bls.w	800b522 <mount_volume+0xf2>
 800b78e:	e6c1      	b.n	800b514 <mount_volume+0xe4>
 800b790:	4639      	mov	r1, r7
 800b792:	e7e5      	b.n	800b760 <mount_volume+0x330>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b794:	440a      	add	r2, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b796:	f103 0c02 	add.w	ip, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800b79a:	440f      	add	r7, r1
		fs->volbase = bsect;							/* Volume start sector */
 800b79c:	62a9      	str	r1, [r5, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b79e:	62ea      	str	r2, [r5, #44]	; 0x2c
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b7a0:	f8b5 206a 	ldrh.w	r2, [r5, #106]	; 0x6a
		fs->database = bsect + sysect;					/* Data start sector */
 800b7a4:	636f      	str	r7, [r5, #52]	; 0x34
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b7a6:	ea5e 0202 	orrs.w	r2, lr, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b7aa:	f8c5 c020 	str.w	ip, [r5, #32]
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b7ae:	f47f aeb1 	bne.w	800b514 <mount_volume+0xe4>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7b2:	1e43      	subs	r3, r0, #1
	rv = rv << 8 | ptr[0];
 800b7b4:	6eea      	ldr	r2, [r5, #108]	; 0x6c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7b6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b7ba:	632a      	str	r2, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7bc:	fbb3 f3f0 	udiv	r3, r3, r0
 800b7c0:	429e      	cmp	r6, r3
 800b7c2:	f4ff aea7 	bcc.w	800b514 <mount_volume+0xe4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b7c6:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b7ca:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b7cc:	e9c5 3306 	strd	r3, r3, [r5, #24]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b7d0:	f8b5 3070 	ldrh.w	r3, [r5, #112]	; 0x70
		fs->fsi_flag = 0x80;
 800b7d4:	716a      	strb	r2, [r5, #5]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d038      	beq.n	800b84c <mount_volume+0x41c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b7da:	2103      	movs	r1, #3
 800b7dc:	e711      	b.n	800b602 <mount_volume+0x1d2>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	e71e      	b.n	800b622 <mount_volume+0x1f2>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 800b7e4:	f105 0740 	add.w	r7, r5, #64	; 0x40
	rv = rv << 8 | ptr[0];
 800b7e8:	19ba      	adds	r2, r7, r6
 800b7ea:	6956      	ldr	r6, [r2, #20]
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800b7ec:	2e01      	cmp	r6, #1
 800b7ee:	f67f ae91 	bls.w	800b514 <mount_volume+0xe4>
 800b7f2:	6a2b      	ldr	r3, [r5, #32]
 800b7f4:	42b3      	cmp	r3, r6
 800b7f6:	f67f ae8d 	bls.w	800b514 <mount_volume+0xe4>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800b7fa:	1eb2      	subs	r2, r6, #2
 800b7fc:	8969      	ldrh	r1, [r5, #10]
 800b7fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b800:	fb02 3301 	mla	r3, r2, r1, r3
 800b804:	63ab      	str	r3, [r5, #56]	; 0x38
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800b806:	89ab      	ldrh	r3, [r5, #12]
 800b808:	089a      	lsrs	r2, r3, #2
 800b80a:	e00d      	b.n	800b828 <mount_volume+0x3f8>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800b80c:	89ab      	ldrh	r3, [r5, #12]
 800b80e:	089a      	lsrs	r2, r3, #2
 800b810:	fbb6 f1f2 	udiv	r1, r6, r2
 800b814:	fb02 6311 	mls	r3, r2, r1, r6
	rv = rv << 8 | ptr[0];
 800b818:	3601      	adds	r6, #1
 800b81a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800b81e:	1c59      	adds	r1, r3, #1
 800b820:	d034      	beq.n	800b88c <mount_volume+0x45c>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 800b822:	429e      	cmp	r6, r3
 800b824:	f47f ae76 	bne.w	800b514 <mount_volume+0xe4>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800b828:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b82a:	4628      	mov	r0, r5
 800b82c:	fbb6 f2f2 	udiv	r2, r6, r2
 800b830:	4411      	add	r1, r2
 800b832:	f7ff fb5d 	bl	800aef0 <move_window>
 800b836:	2800      	cmp	r0, #0
 800b838:	d0e8      	beq.n	800b80c <mount_volume+0x3dc>
 800b83a:	e645      	b.n	800b4c8 <mount_volume+0x98>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b83c:	f1be 0f00 	cmp.w	lr, #0
 800b840:	f43f ae68 	beq.w	800b514 <mount_volume+0xe4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b844:	4462      	add	r2, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	2102      	movs	r1, #2
 800b84a:	e6cd      	b.n	800b5e8 <mount_volume+0x1b8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b84c:	3101      	adds	r1, #1
 800b84e:	4628      	mov	r0, r5
 800b850:	f7ff fb4e 	bl	800aef0 <move_window>
 800b854:	2800      	cmp	r0, #0
 800b856:	d1c0      	bne.n	800b7da <mount_volume+0x3aa>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800b858:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b85c:	f8b5 223e 	ldrh.w	r2, [r5, #574]	; 0x23e
			fs->fsi_flag = 0;
 800b860:	7168      	strb	r0, [r5, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800b862:	429a      	cmp	r2, r3
 800b864:	d1b9      	bne.n	800b7da <mount_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 800b866:	6c2a      	ldr	r2, [r5, #64]	; 0x40
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <mount_volume+0x464>)
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d1b5      	bne.n	800b7da <mount_volume+0x3aa>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b86e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800b872:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b876:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b87a:	3320      	adds	r3, #32
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d1ac      	bne.n	800b7da <mount_volume+0x3aa>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b880:	2103      	movs	r1, #3
 800b882:	e9d5 328a 	ldrd	r3, r2, [r5, #552]	; 0x228
 800b886:	e9c5 2306 	strd	r2, r3, [r5, #24]
 800b88a:	e6ba      	b.n	800b602 <mount_volume+0x1d2>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b88c:	2104      	movs	r1, #4
 800b88e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fmt = FS_EXFAT;			/* FAT sub-type */
 800b892:	e6b6      	b.n	800b602 <mount_volume+0x1d2>
 800b894:	41615252 	.word	0x41615252
 800b898:	7ffffffd 	.word	0x7ffffffd

0800b89c <load_xdir>:
{
 800b89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800b8a0:	6805      	ldr	r5, [r0, #0]
{
 800b8a2:	b082      	sub	sp, #8
	res = move_window(dp->obj.fs, dp->sect);
 800b8a4:	6b87      	ldr	r7, [r0, #56]	; 0x38
{
 800b8a6:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 800b8a8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800b8aa:	696e      	ldr	r6, [r5, #20]
	if (sect != fs->winsect) {	/* Window offset changed? */
 800b8ac:	4297      	cmp	r7, r2
 800b8ae:	d013      	beq.n	800b8d8 <load_xdir+0x3c>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b8b0:	792b      	ldrb	r3, [r5, #4]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b8b2:	f105 0140 	add.w	r1, r5, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f040 8094 	bne.w	800b9e4 <load_xdir+0x148>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800b8bc:	2301      	movs	r3, #1
 800b8be:	463a      	mov	r2, r7
 800b8c0:	7868      	ldrb	r0, [r5, #1]
 800b8c2:	f7ff f993 	bl	800abec <disk_read>
 800b8c6:	b130      	cbz	r0, 800b8d6 <load_xdir+0x3a>
			fs->winsect = sect;
 800b8c8:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800b8cc:	2001      	movs	r0, #1
			fs->winsect = sect;
 800b8ce:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 800b8d0:	b002      	add	sp, #8
 800b8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fs->winsect = sect;
 800b8d6:	63ef      	str	r7, [r5, #60]	; 0x3c
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800b8d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	2a85      	cmp	r2, #133	; 0x85
 800b8de:	d003      	beq.n	800b8e8 <load_xdir+0x4c>
 800b8e0:	2002      	movs	r0, #2
}
 800b8e2:	b002      	add	sp, #8
 800b8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8e8:	681f      	ldr	r7, [r3, #0]
 800b8ea:	6858      	ldr	r0, [r3, #4]
 800b8ec:	6899      	ldr	r1, [r3, #8]
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	6037      	str	r7, [r6, #0]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b8f2:	7875      	ldrb	r5, [r6, #1]
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8f4:	6070      	str	r0, [r6, #4]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b8f6:	3501      	adds	r5, #1
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8f8:	60b1      	str	r1, [r6, #8]
 800b8fa:	60f2      	str	r2, [r6, #12]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b8fc:	016d      	lsls	r5, r5, #5
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8fe:	691f      	ldr	r7, [r3, #16]
 800b900:	6958      	ldr	r0, [r3, #20]
 800b902:	6999      	ldr	r1, [r3, #24]
 800b904:	69da      	ldr	r2, [r3, #28]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b906:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b90a:	6137      	str	r7, [r6, #16]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b910:	6170      	str	r0, [r6, #20]
 800b912:	61b1      	str	r1, [r6, #24]
 800b914:	61f2      	str	r2, [r6, #28]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b916:	d8e3      	bhi.n	800b8e0 <load_xdir+0x44>
	res = dir_next(dp, 0);
 800b918:	4620      	mov	r0, r4
 800b91a:	f7ff fc69 	bl	800b1f0 <dir_next.constprop.0>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800b91e:	2804      	cmp	r0, #4
 800b920:	d0de      	beq.n	800b8e0 <load_xdir+0x44>
	if (res != FR_OK) return res;
 800b922:	2800      	cmp	r0, #0
 800b924:	d1dd      	bne.n	800b8e2 <load_xdir+0x46>
	res = move_window(dp->obj.fs, dp->sect);
 800b926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b928:	6820      	ldr	r0, [r4, #0]
 800b92a:	f7ff fae1 	bl	800aef0 <move_window>
	if (res != FR_OK) return res;
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1d7      	bne.n	800b8e2 <load_xdir+0x46>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 800b932:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b934:	781a      	ldrb	r2, [r3, #0]
 800b936:	2ac0      	cmp	r2, #192	; 0xc0
 800b938:	d1d2      	bne.n	800b8e0 <load_xdir+0x44>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b93a:	f8d3 c000 	ldr.w	ip, [r3]
 800b93e:	685f      	ldr	r7, [r3, #4]
 800b940:	6898      	ldr	r0, [r3, #8]
 800b942:	68d9      	ldr	r1, [r3, #12]
 800b944:	f8c6 c020 	str.w	ip, [r6, #32]
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b948:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b94c:	62f1      	str	r1, [r6, #44]	; 0x2c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b94e:	322c      	adds	r2, #44	; 0x2c
 800b950:	4948      	ldr	r1, [pc, #288]	; (800ba74 <load_xdir+0x1d8>)
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b952:	6277      	str	r7, [r6, #36]	; 0x24
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b954:	fba1 1202 	umull	r1, r2, r1, r2
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b958:	62b0      	str	r0, [r6, #40]	; 0x28
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b95a:	08d2      	lsrs	r2, r2, #3
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b95c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800b960:	695f      	ldr	r7, [r3, #20]
 800b962:	6998      	ldr	r0, [r3, #24]
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b964:	ebb5 1f42 	cmp.w	r5, r2, lsl #5
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b968:	69d9      	ldr	r1, [r3, #28]
 800b96a:	f8c6 c030 	str.w	ip, [r6, #48]	; 0x30
 800b96e:	6377      	str	r7, [r6, #52]	; 0x34
 800b970:	63b0      	str	r0, [r6, #56]	; 0x38
 800b972:	63f1      	str	r1, [r6, #60]	; 0x3c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b974:	d3b4      	bcc.n	800b8e0 <load_xdir+0x44>
	i = 2 * SZDIRE;	/* Name offset to load */
 800b976:	2740      	movs	r7, #64	; 0x40
 800b978:	e002      	b.n	800b980 <load_xdir+0xe4>
	} while ((i += SZDIRE) < sz_ent);
 800b97a:	3720      	adds	r7, #32
 800b97c:	42bd      	cmp	r5, r7
 800b97e:	d94f      	bls.n	800ba20 <load_xdir+0x184>
		res = dir_next(dp, 0);
 800b980:	4620      	mov	r0, r4
 800b982:	f7ff fc35 	bl	800b1f0 <dir_next.constprop.0>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800b986:	2804      	cmp	r0, #4
 800b988:	d0aa      	beq.n	800b8e0 <load_xdir+0x44>
		if (res != FR_OK) return res;
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d1a9      	bne.n	800b8e2 <load_xdir+0x46>
		res = move_window(dp->obj.fs, dp->sect);
 800b98e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b990:	6820      	ldr	r0, [r4, #0]
 800b992:	f7ff faad 	bl	800aef0 <move_window>
		if (res != FR_OK) return res;
 800b996:	2800      	cmp	r0, #0
 800b998:	d1a3      	bne.n	800b8e2 <load_xdir+0x46>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 800b99a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b99c:	781a      	ldrb	r2, [r3, #0]
 800b99e:	2ac1      	cmp	r2, #193	; 0xc1
 800b9a0:	d19e      	bne.n	800b8e0 <load_xdir+0x44>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 800b9a2:	f5b7 7f18 	cmp.w	r7, #608	; 0x260
 800b9a6:	d2e8      	bcs.n	800b97a <load_xdir+0xde>
 800b9a8:	f8d3 8000 	ldr.w	r8, [r3]
 800b9ac:	19f2      	adds	r2, r6, r7
 800b9ae:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800b9b2:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800b9b6:	68d9      	ldr	r1, [r3, #12]
 800b9b8:	f846 8007 	str.w	r8, [r6, r7]
 800b9bc:	f8c2 e004 	str.w	lr, [r2, #4]
 800b9c0:	f8c2 c008 	str.w	ip, [r2, #8]
 800b9c4:	60d1      	str	r1, [r2, #12]
 800b9c6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b9ca:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800b9ce:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800b9d2:	69d9      	ldr	r1, [r3, #28]
 800b9d4:	f8c2 8010 	str.w	r8, [r2, #16]
 800b9d8:	f8c2 e014 	str.w	lr, [r2, #20]
 800b9dc:	f8c2 c018 	str.w	ip, [r2, #24]
 800b9e0:	61d1      	str	r1, [r2, #28]
 800b9e2:	e7ca      	b.n	800b97a <load_xdir+0xde>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	7868      	ldrb	r0, [r5, #1]
 800b9e8:	9101      	str	r1, [sp, #4]
 800b9ea:	f7ff f90f 	bl	800ac0c <disk_write>
 800b9ee:	b998      	cbnz	r0, 800ba18 <load_xdir+0x17c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b9f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->wflag = 0;	/* Clear window dirty flag */
 800b9f2:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b9f4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800b9f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b9f8:	1ac3      	subs	r3, r0, r3
 800b9fa:	9901      	ldr	r1, [sp, #4]
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	f4bf af5d 	bcs.w	800b8bc <load_xdir+0x20>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800ba02:	78eb      	ldrb	r3, [r5, #3]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	f47f af59 	bne.w	800b8bc <load_xdir+0x20>
 800ba0a:	4402      	add	r2, r0
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	7868      	ldrb	r0, [r5, #1]
 800ba10:	f7ff f8fc 	bl	800ac0c <disk_write>
 800ba14:	9901      	ldr	r1, [sp, #4]
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba16:	e751      	b.n	800b8bc <load_xdir+0x20>
 800ba18:	2001      	movs	r0, #1
}
 800ba1a:	b002      	add	sp, #8
 800ba1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800ba20:	f5b7 7f18 	cmp.w	r7, #608	; 0x260
 800ba24:	f63f af5d 	bhi.w	800b8e2 <load_xdir+0x46>
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800ba28:	7874      	ldrb	r4, [r6, #1]
	for (i = sum = 0; i < szblk; i++) {
 800ba2a:	2300      	movs	r3, #0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800ba2c:	3401      	adds	r4, #1
	for (i = sum = 0; i < szblk; i++) {
 800ba2e:	4619      	mov	r1, r3
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800ba30:	0164      	lsls	r4, r4, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800ba32:	2902      	cmp	r1, #2
 800ba34:	d10e      	bne.n	800ba54 <load_xdir+0x1b8>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ba36:	7932      	ldrb	r2, [r6, #4]
	for (i = sum = 0; i < szblk; i++) {
 800ba38:	2106      	movs	r1, #6
 800ba3a:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800ba3e:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ba40:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800ba44:	7973      	ldrb	r3, [r6, #5]
 800ba46:	f3c2 004e 	ubfx	r0, r2, #1, #15
 800ba4a:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800ba4e:	fa10 f383 	uxtah	r3, r0, r3
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	5c72      	ldrb	r2, [r6, r1]
	for (i = sum = 0; i < szblk; i++) {
 800ba56:	3101      	adds	r1, #1
 800ba58:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800ba5c:	428c      	cmp	r4, r1
 800ba5e:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ba60:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 800ba64:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 800ba66:	d8e4      	bhi.n	800ba32 <load_xdir+0x196>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ba68:	8870      	ldrh	r0, [r6, #2]
 800ba6a:	1ac0      	subs	r0, r0, r3
 800ba6c:	bf18      	it	ne
 800ba6e:	2001      	movne	r0, #1
 800ba70:	0040      	lsls	r0, r0, #1
 800ba72:	e736      	b.n	800b8e2 <load_xdir+0x46>
 800ba74:	88888889 	.word	0x88888889

0800ba78 <dir_read>:
{
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800ba7c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800ba7e:	b083      	sub	sp, #12
 800ba80:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800ba82:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800ba84:	2e00      	cmp	r6, #0
 800ba86:	d041      	beq.n	800bb0c <dir_read+0x94>
	BYTE ord = 0xFF, sum = 0xFF;
 800ba88:	f04f 0bff 	mov.w	fp, #255	; 0xff
 800ba8c:	4688      	mov	r8, r1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800ba8e:	f107 0a40 	add.w	sl, r7, #64	; 0x40
	BYTE ord = 0xFF, sum = 0xFF;
 800ba92:	46d9      	mov	r9, fp
	if (sect != fs->winsect) {	/* Window offset changed? */
 800ba94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba96:	4296      	cmp	r6, r2
 800ba98:	d013      	beq.n	800bac2 <dir_read+0x4a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800ba9a:	793b      	ldrb	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d15e      	bne.n	800bb5e <dir_read+0xe6>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800baa0:	2301      	movs	r3, #1
 800baa2:	4632      	mov	r2, r6
 800baa4:	4651      	mov	r1, sl
 800baa6:	7878      	ldrb	r0, [r7, #1]
 800baa8:	f7ff f8a0 	bl	800abec <disk_read>
 800baac:	b140      	cbz	r0, 800bac0 <dir_read+0x48>
			fs->winsect = sect;
 800baae:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800bab2:	2001      	movs	r0, #1
			fs->winsect = sect;
 800bab4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bab6:	2300      	movs	r3, #0
 800bab8:	63ab      	str	r3, [r5, #56]	; 0x38
}
 800baba:	b003      	add	sp, #12
 800babc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
 800bac0:	63fe      	str	r6, [r7, #60]	; 0x3c
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800bac2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800bac4:	780b      	ldrb	r3, [r1, #0]
		if (b == 0) {
 800bac6:	b30b      	cbz	r3, 800bb0c <dir_read+0x94>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bac8:	783a      	ldrb	r2, [r7, #0]
 800baca:	2a04      	cmp	r2, #4
 800bacc:	d040      	beq.n	800bb50 <dir_read+0xd8>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bace:	7aca      	ldrb	r2, [r1, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bad0:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bad2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800bad6:	71aa      	strb	r2, [r5, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bad8:	d00a      	beq.n	800baf0 <dir_read+0x78>
 800bada:	2b2e      	cmp	r3, #46	; 0x2e
 800badc:	d008      	beq.n	800baf0 <dir_read+0x78>
 800bade:	f022 0020 	bic.w	r0, r2, #32
 800bae2:	f1a0 0008 	sub.w	r0, r0, #8
 800bae6:	fab0 f080 	clz	r0, r0
 800baea:	0940      	lsrs	r0, r0, #5
 800baec:	4540      	cmp	r0, r8
 800baee:	d067      	beq.n	800bbc0 <dir_read+0x148>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800baf0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
				ord = 0xFF;
 800baf2:	f04f 09ff 	mov.w	r9, #255	; 0xff
	FATFS *fs = dp->obj.fs;
 800baf6:	682c      	ldr	r4, [r5, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800baf8:	3320      	adds	r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800bafa:	7822      	ldrb	r2, [r4, #0]
 800bafc:	2a04      	cmp	r2, #4
 800bafe:	bf0c      	ite	eq
 800bb00:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800bb04:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d301      	bcc.n	800bb10 <dir_read+0x98>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800bb0c:	2004      	movs	r0, #4
 800bb0e:	e7d2      	b.n	800bab6 <dir_read+0x3e>
 800bb10:	6bae      	ldr	r6, [r5, #56]	; 0x38
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	d0fa      	beq.n	800bb0c <dir_read+0x94>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bb16:	89a2      	ldrh	r2, [r4, #12]
 800bb18:	fbb3 fcf2 	udiv	ip, r3, r2
 800bb1c:	fb02 301c 	mls	r0, r2, ip, r3
 800bb20:	b988      	cbnz	r0, 800bb46 <dir_read+0xce>
		dp->sect++;				/* Next sector */
 800bb22:	3601      	adds	r6, #1
		if (dp->clust == 0) {	/* Static table */
 800bb24:	6b69      	ldr	r1, [r5, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800bb26:	63ae      	str	r6, [r5, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800bb28:	bb09      	cbnz	r1, 800bb6e <dir_read+0xf6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bb2a:	8922      	ldrh	r2, [r4, #8]
 800bb2c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800bb30:	d9ec      	bls.n	800bb0c <dir_read+0x94>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb32:	3440      	adds	r4, #64	; 0x40
	dp->dptr = ofs;						/* Current entry */
 800bb34:	632b      	str	r3, [r5, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb36:	440c      	add	r4, r1
 800bb38:	63ec      	str	r4, [r5, #60]	; 0x3c
	while (dp->sect) {
 800bb3a:	2e00      	cmp	r6, #0
 800bb3c:	d1aa      	bne.n	800ba94 <dir_read+0x1c>
	FRESULT res = FR_NO_FILE;
 800bb3e:	2000      	movs	r0, #0
}
 800bb40:	b003      	add	sp, #12
 800bb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb46:	3440      	adds	r4, #64	; 0x40
	dp->dptr = ofs;						/* Current entry */
 800bb48:	632b      	str	r3, [r5, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb4a:	4404      	add	r4, r0
 800bb4c:	63ec      	str	r4, [r5, #60]	; 0x3c
	while (dp->sect) {
 800bb4e:	e7a1      	b.n	800ba94 <dir_read+0x1c>
			if (FF_USE_LABEL && vol) {
 800bb50:	f1b8 0f00 	cmp.w	r8, #0
 800bb54:	d012      	beq.n	800bb7c <dir_read+0x104>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
 800bb56:	2b83      	cmp	r3, #131	; 0x83
 800bb58:	d0f1      	beq.n	800bb3e <dir_read+0xc6>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bb5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bb5c:	e7cb      	b.n	800baf6 <dir_read+0x7e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800bb5e:	2301      	movs	r3, #1
 800bb60:	4651      	mov	r1, sl
 800bb62:	7878      	ldrb	r0, [r7, #1]
 800bb64:	f7ff f852 	bl	800ac0c <disk_write>
 800bb68:	b1b8      	cbz	r0, 800bb9a <dir_read+0x122>
				res = FR_DISK_ERR;
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	e7a3      	b.n	800bab6 <dir_read+0x3e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800bb6e:	8962      	ldrh	r2, [r4, #10]
 800bb70:	3a01      	subs	r2, #1
 800bb72:	ea12 020c 	ands.w	r2, r2, ip
 800bb76:	d03a      	beq.n	800bbee <dir_read+0x176>
 800bb78:	4601      	mov	r1, r0
 800bb7a:	e7da      	b.n	800bb32 <dir_read+0xba>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800bb7c:	2b85      	cmp	r3, #133	; 0x85
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bb7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800bb80:	d1b9      	bne.n	800baf6 <dir_read+0x7e>
					res = load_xdir(dp);	/* Load the entry block */
 800bb82:	4628      	mov	r0, r5
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bb84:	64eb      	str	r3, [r5, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800bb86:	f7ff fe89 	bl	800b89c <load_xdir>
					if (res == FR_OK) {
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d193      	bne.n	800bab6 <dir_read+0x3e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	791b      	ldrb	r3, [r3, #4]
 800bb92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb96:	71ab      	strb	r3, [r5, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bb98:	e78f      	b.n	800baba <dir_read+0x42>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800bb9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba0:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800bba2:	7138      	strb	r0, [r7, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800bba4:	4293      	cmp	r3, r2
 800bba6:	f4bf af7b 	bcs.w	800baa0 <dir_read+0x28>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	f47f af77 	bne.w	800baa0 <dir_read+0x28>
 800bbb2:	440a      	add	r2, r1
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	4651      	mov	r1, sl
 800bbb8:	7878      	ldrb	r0, [r7, #1]
 800bbba:	f7ff f827 	bl	800ac0c <disk_write>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bbbe:	e76f      	b.n	800baa0 <dir_read+0x28>
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800bbc0:	2a0f      	cmp	r2, #15
 800bbc2:	f040 810f 	bne.w	800bde4 <dir_read+0x36c>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 800bbc6:	0658      	lsls	r0, r3, #25
 800bbc8:	d50b      	bpl.n	800bbe2 <dir_read+0x16a>
						b &= (BYTE)~LLEF; ord = b;
 800bbca:	f003 09bf 	and.w	r9, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800bbce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 800bbd0:	f891 b00d 	ldrb.w	fp, [r1, #13]
						dp->blk_ofs = dp->dptr;
 800bbd4:	64eb      	str	r3, [r5, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bbd6:	7b4a      	ldrb	r2, [r1, #13]
 800bbd8:	455a      	cmp	r2, fp
 800bbda:	d028      	beq.n	800bc2e <dir_read+0x1b6>
 800bbdc:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800bbe0:	e789      	b.n	800baf6 <dir_read+0x7e>
 800bbe2:	454b      	cmp	r3, r9
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bbe4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bbe6:	d0f6      	beq.n	800bbd6 <dir_read+0x15e>
 800bbe8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800bbec:	e783      	b.n	800baf6 <dir_read+0x7e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800bbee:	4628      	mov	r0, r5
 800bbf0:	e9cd 3200 	strd	r3, r2, [sp]
 800bbf4:	f7ff fa4c 	bl	800b090 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800bbf8:	2801      	cmp	r0, #1
 800bbfa:	f240 809e 	bls.w	800bd3a <dir_read+0x2c2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bbfe:	1c43      	adds	r3, r0, #1
 800bc00:	d0b3      	beq.n	800bb6a <dir_read+0xf2>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800bc02:	6a21      	ldr	r1, [r4, #32]
 800bc04:	4288      	cmp	r0, r1
 800bc06:	d281      	bcs.n	800bb0c <dir_read+0x94>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bc08:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800bc0a:	6368      	str	r0, [r5, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800bc0c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bc0e:	4288      	cmp	r0, r1
 800bc10:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc14:	f080 808f 	bcs.w	800bd36 <dir_read+0x2be>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800bc18:	8962      	ldrh	r2, [r4, #10]
 800bc1a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800bc1c:	fb00 6602 	mla	r6, r0, r2, r6
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bc20:	89a2      	ldrh	r2, [r4, #12]
				dp->sect = clst2sect(fs, clst);
 800bc22:	63ae      	str	r6, [r5, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bc24:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc28:	fb02 3111 	mls	r1, r2, r1, r3
 800bc2c:	e781      	b.n	800bb32 <dir_read+0xba>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bc2e:	8b4a      	ldrh	r2, [r1, #26]
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	d1d3      	bne.n	800bbdc <dir_read+0x164>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bc34:	780a      	ldrb	r2, [r1, #0]
 800bc36:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800bc3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc3e:	3a01      	subs	r2, #1
 800bc40:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800bc44:	eb02 0284 	add.w	r2, r2, r4, lsl #2
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc48:	2aff      	cmp	r2, #255	; 0xff
 800bc4a:	d8c7      	bhi.n	800bbdc <dir_read+0x164>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bc4c:	693c      	ldr	r4, [r7, #16]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc4e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800bc52:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
	rv = ptr[1];
 800bc56:	f8b1 e003 	ldrh.w	lr, [r1, #3]
		if (wc != 0) {
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d06f      	beq.n	800bd3e <dir_read+0x2c6>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc5e:	2aff      	cmp	r2, #255	; 0xff
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc60:	f102 0001 	add.w	r0, r2, #1
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc64:	d0ba      	beq.n	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc66:	f824 e010 	strh.w	lr, [r4, r0, lsl #1]
 800bc6a:	0040      	lsls	r0, r0, #1
 800bc6c:	f8b1 6005 	ldrh.w	r6, [r1, #5]
		if (wc != 0) {
 800bc70:	f1be 0f00 	cmp.w	lr, #0
 800bc74:	d06a      	beq.n	800bd4c <dir_read+0x2d4>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc76:	2afe      	cmp	r2, #254	; 0xfe
 800bc78:	d0b0      	beq.n	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc7a:	4420      	add	r0, r4
 800bc7c:	8046      	strh	r6, [r0, #2]
	rv = ptr[1];
 800bc7e:	f8b1 e007 	ldrh.w	lr, [r1, #7]
		if (wc != 0) {
 800bc82:	2e00      	cmp	r6, #0
 800bc84:	d069      	beq.n	800bd5a <dir_read+0x2e2>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc86:	2afd      	cmp	r2, #253	; 0xfd
 800bc88:	d0a8      	beq.n	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc8a:	f8a0 e004 	strh.w	lr, [r0, #4]
	rv = ptr[1];
 800bc8e:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc != 0) {
 800bc92:	f1be 0f00 	cmp.w	lr, #0
 800bc96:	d067      	beq.n	800bd68 <dir_read+0x2f0>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc98:	2afc      	cmp	r2, #252	; 0xfc
 800bc9a:	d09f      	beq.n	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc9c:	80c6      	strh	r6, [r0, #6]
	rv = ptr[1];
 800bc9e:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
		if (wc != 0) {
 800bca2:	2e00      	cmp	r6, #0
 800bca4:	d067      	beq.n	800bd76 <dir_read+0x2fe>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bca6:	2afb      	cmp	r2, #251	; 0xfb
 800bca8:	d098      	beq.n	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcaa:	f8a0 e008 	strh.w	lr, [r0, #8]
	rv = ptr[1];
 800bcae:	8a0e      	ldrh	r6, [r1, #16]
		if (wc != 0) {
 800bcb0:	f1be 0f00 	cmp.w	lr, #0
 800bcb4:	d065      	beq.n	800bd82 <dir_read+0x30a>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bcb6:	2afa      	cmp	r2, #250	; 0xfa
 800bcb8:	d090      	beq.n	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcba:	8146      	strh	r6, [r0, #10]
	rv = ptr[1];
 800bcbc:	f8b1 e012 	ldrh.w	lr, [r1, #18]
		if (wc != 0) {
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	d065      	beq.n	800bd90 <dir_read+0x318>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bcc4:	2af9      	cmp	r2, #249	; 0xf9
 800bcc6:	d089      	beq.n	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcc8:	f8a0 e00c 	strh.w	lr, [r0, #12]
	rv = ptr[1];
 800bccc:	8a8e      	ldrh	r6, [r1, #20]
		if (wc != 0) {
 800bcce:	f1be 0f00 	cmp.w	lr, #0
 800bcd2:	d063      	beq.n	800bd9c <dir_read+0x324>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bcd4:	2af8      	cmp	r2, #248	; 0xf8
 800bcd6:	d081      	beq.n	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcd8:	81c6      	strh	r6, [r0, #14]
	rv = ptr[1];
 800bcda:	f8b1 e016 	ldrh.w	lr, [r1, #22]
		if (wc != 0) {
 800bcde:	2e00      	cmp	r6, #0
 800bce0:	d063      	beq.n	800bdaa <dir_read+0x332>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bce2:	2af7      	cmp	r2, #247	; 0xf7
 800bce4:	f43f af7a 	beq.w	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bce8:	f8a0 e010 	strh.w	lr, [r0, #16]
	rv = ptr[1];
 800bcec:	8b0e      	ldrh	r6, [r1, #24]
		if (wc != 0) {
 800bcee:	f1be 0f00 	cmp.w	lr, #0
 800bcf2:	d060      	beq.n	800bdb6 <dir_read+0x33e>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bcf4:	2af6      	cmp	r2, #246	; 0xf6
 800bcf6:	f43f af71 	beq.w	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcfa:	8246      	strh	r6, [r0, #18]
	rv = ptr[1];
 800bcfc:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
		if (wc != 0) {
 800bd00:	2e00      	cmp	r6, #0
 800bd02:	d05f      	beq.n	800bdc4 <dir_read+0x34c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bd04:	2af5      	cmp	r2, #245	; 0xf5
 800bd06:	f43f af69 	beq.w	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bd0a:	f8a0 e014 	strh.w	lr, [r0, #20]
	rv = ptr[1];
 800bd0e:	8bce      	ldrh	r6, [r1, #30]
		if (wc != 0) {
 800bd10:	f1be 0f00 	cmp.w	lr, #0
 800bd14:	d05c      	beq.n	800bdd0 <dir_read+0x358>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bd16:	2af4      	cmp	r2, #244	; 0xf4
 800bd18:	f43f af60 	beq.w	800bbdc <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bd1c:	82c6      	strh	r6, [r0, #22]
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800bd1e:	7809      	ldrb	r1, [r1, #0]
 800bd20:	0649      	lsls	r1, r1, #25
 800bd22:	d55a      	bpl.n	800bdda <dir_read+0x362>
 800bd24:	2e00      	cmp	r6, #0
 800bd26:	d058      	beq.n	800bdda <dir_read+0x362>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bd28:	2af3      	cmp	r2, #243	; 0xf3
 800bd2a:	f43f af57 	beq.w	800bbdc <dir_read+0x164>
		lfnbuf[i] = 0;
 800bd2e:	4464      	add	r4, ip
 800bd30:	2200      	movs	r2, #0
 800bd32:	8362      	strh	r2, [r4, #26]
 800bd34:	e051      	b.n	800bdda <dir_read+0x362>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bd36:	4616      	mov	r6, r2
 800bd38:	e772      	b.n	800bc20 <dir_read+0x1a8>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800bd3a:	2002      	movs	r0, #2
 800bd3c:	e6bb      	b.n	800bab6 <dir_read+0x3e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd42:	4596      	cmp	lr, r2
 800bd44:	f47f af4a 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bd48:	f8b1 6005 	ldrh.w	r6, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd50:	4296      	cmp	r6, r2
 800bd52:	f47f af43 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bd56:	f8b1 e007 	ldrh.w	lr, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd5e:	4596      	cmp	lr, r2
 800bd60:	f47f af3c 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bd64:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd6c:	4296      	cmp	r6, r2
 800bd6e:	f47f af35 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bd72:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd7a:	4596      	cmp	lr, r2
 800bd7c:	f47f af2e 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bd80:	8a0e      	ldrh	r6, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd86:	4296      	cmp	r6, r2
 800bd88:	f47f af28 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bd8c:	f8b1 e012 	ldrh.w	lr, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd94:	4596      	cmp	lr, r2
 800bd96:	f47f af21 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bd9a:	8a8e      	ldrh	r6, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bda0:	4296      	cmp	r6, r2
 800bda2:	f47f af1b 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bda6:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bdaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdae:	4596      	cmp	lr, r2
 800bdb0:	f47f af14 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bdb4:	8b0e      	ldrh	r6, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bdb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdba:	4296      	cmp	r6, r2
 800bdbc:	f47f af0e 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bdc0:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bdc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc8:	4596      	cmp	lr, r2
 800bdca:	f47f af07 	bne.w	800bbdc <dir_read+0x164>
	rv = ptr[1];
 800bdce:	8bce      	ldrh	r6, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bdd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdd4:	4296      	cmp	r6, r2
 800bdd6:	f47f af01 	bne.w	800bbdc <dir_read+0x164>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bdda:	f109 39ff 	add.w	r9, r9, #4294967295
 800bdde:	fa5f f989 	uxtb.w	r9, r9
 800bde2:	e688      	b.n	800baf6 <dir_read+0x7e>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bde4:	f1b9 0f00 	cmp.w	r9, #0
 800bde8:	d148      	bne.n	800be7c <dir_read+0x404>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bdea:	780b      	ldrb	r3, [r1, #0]
 800bdec:	01da      	lsls	r2, r3, #7
 800bdee:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800bdf2:	784b      	ldrb	r3, [r1, #1]
 800bdf4:	441a      	add	r2, r3
 800bdf6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800bdfa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bdfe:	788a      	ldrb	r2, [r1, #2]
 800be00:	fa52 f383 	uxtab	r3, r2, r3
 800be04:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800be08:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800be0c:	78cb      	ldrb	r3, [r1, #3]
 800be0e:	fa53 f282 	uxtab	r2, r3, r2
 800be12:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800be16:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800be1a:	790a      	ldrb	r2, [r1, #4]
 800be1c:	fa52 f383 	uxtab	r3, r2, r3
 800be20:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800be24:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800be28:	794b      	ldrb	r3, [r1, #5]
 800be2a:	fa53 f282 	uxtab	r2, r3, r2
 800be2e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800be32:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800be36:	798a      	ldrb	r2, [r1, #6]
 800be38:	fa52 f383 	uxtab	r3, r2, r3
 800be3c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800be40:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800be44:	79cb      	ldrb	r3, [r1, #7]
 800be46:	fa53 f282 	uxtab	r2, r3, r2
 800be4a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800be4e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800be52:	7a0a      	ldrb	r2, [r1, #8]
 800be54:	fa52 f383 	uxtab	r3, r2, r3
 800be58:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800be5c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800be60:	7a4b      	ldrb	r3, [r1, #9]
 800be62:	7a89      	ldrb	r1, [r1, #10]
 800be64:	fa53 f282 	uxtab	r2, r3, r2
 800be68:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800be6c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800be70:	fa51 f383 	uxtab	r3, r1, r3
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800be74:	b2db      	uxtb	r3, r3
 800be76:	455b      	cmp	r3, fp
 800be78:	f43f ae61 	beq.w	800bb3e <dir_read+0xc6>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800be7c:	f04f 33ff 	mov.w	r3, #4294967295
		res = move_window(fs, dp->sect);
 800be80:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800be82:	64eb      	str	r3, [r5, #76]	; 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800be84:	e619      	b.n	800baba <dir_read+0x42>
 800be86:	bf00      	nop

0800be88 <dir_sdi>:
{
 800be88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800be8c:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800be90:	f898 3000 	ldrb.w	r3, [r8]
 800be94:	2b04      	cmp	r3, #4
 800be96:	bf0c      	ite	eq
 800be98:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800be9c:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800bea0:	428a      	cmp	r2, r1
 800bea2:	d922      	bls.n	800beea <dir_sdi+0x62>
 800bea4:	460c      	mov	r4, r1
 800bea6:	06e1      	lsls	r1, r4, #27
 800bea8:	d11f      	bne.n	800beea <dir_sdi+0x62>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800beaa:	6885      	ldr	r5, [r0, #8]
 800beac:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800beae:	6304      	str	r4, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800beb0:	b1f5      	cbz	r5, 800bef0 <dir_sdi+0x68>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800beb2:	f8b8 900a 	ldrh.w	r9, [r8, #10]
 800beb6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800beba:	fb03 f909 	mul.w	r9, r3, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800bebe:	454c      	cmp	r4, r9
 800bec0:	f0c0 80e0 	bcc.w	800c084 <dir_sdi+0x1fc>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bec4:	2d01      	cmp	r5, #1
 800bec6:	d010      	beq.n	800beea <dir_sdi+0x62>
 800bec8:	eba4 0409 	sub.w	r4, r4, r9
 800becc:	4647      	mov	r7, r8
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	429d      	cmp	r5, r3
 800bed2:	d20a      	bcs.n	800beea <dir_sdi+0x62>
		switch (fs->fs_type) {
 800bed4:	783b      	ldrb	r3, [r7, #0]
 800bed6:	3b01      	subs	r3, #1
 800bed8:	2b03      	cmp	r3, #3
 800beda:	d806      	bhi.n	800beea <dir_sdi+0x62>
 800bedc:	e8df f003 	tbb	[pc, r3]
 800bee0:	2555768b 	.word	0x2555768b
		dp->sect = fs->dirbase;
 800bee4:	2300      	movs	r3, #0
 800bee6:	e9c6 530d 	strd	r5, r3, [r6, #52]	; 0x34
		switch (fs->fs_type) {
 800beea:	2002      	movs	r0, #2
}
 800beec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	f200 80af 	bhi.w	800c054 <dir_sdi+0x1cc>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800bef6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800befa:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800befe:	d9f4      	bls.n	800beea <dir_sdi+0x62>
		dp->sect = fs->dirbase;
 800bf00:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
	dp->clust = clst;					/* Current cluster# */
 800bf04:	e9c6 520d 	strd	r5, r2, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800bf08:	2a00      	cmp	r2, #0
 800bf0a:	d0ee      	beq.n	800beea <dir_sdi+0x62>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bf0c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bf10:	f108 0840 	add.w	r8, r8, #64	; 0x40
	return FR_OK;
 800bf14:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bf16:	fbb4 f3f1 	udiv	r3, r4, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bf1a:	fb01 4413 	mls	r4, r1, r3, r4
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bf1e:	441a      	add	r2, r3
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bf20:	4444      	add	r4, r8
 800bf22:	e9c6 240e 	strd	r2, r4, [r6, #56]	; 0x38
}
 800bf26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800bf2a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 800bf2e:	ea50 0301 	orrs.w	r3, r0, r1
 800bf32:	f000 8097 	beq.w	800c064 <dir_sdi+0x1dc>
 800bf36:	68b3      	ldr	r3, [r6, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f000 8093 	beq.w	800c064 <dir_sdi+0x1dc>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800bf3e:	eba5 0a03 	sub.w	sl, r5, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800bf42:	79f3      	ldrb	r3, [r6, #7]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800bf44:	89ba      	ldrh	r2, [r7, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800bf46:	2b02      	cmp	r3, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800bf48:	f8b7 b00a 	ldrh.w	fp, [r7, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800bf4c:	f000 80a8 	beq.w	800c0a0 <dir_sdi+0x218>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800bf50:	2b03      	cmp	r3, #3
 800bf52:	f000 808d 	beq.w	800c070 <dir_sdi+0x1e8>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800bf56:	69f3      	ldr	r3, [r6, #28]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f040 80ae 	bne.w	800c0ba <dir_sdi+0x232>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf5e:	0893      	lsrs	r3, r2, #2
 800bf60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf62:	4638      	mov	r0, r7
 800bf64:	fbb5 f3f3 	udiv	r3, r5, r3
 800bf68:	4419      	add	r1, r3
 800bf6a:	f7fe ffc1 	bl	800aef0 <move_window>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f040 8085 	bne.w	800c07e <dir_sdi+0x1f6>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800bf74:	89bb      	ldrh	r3, [r7, #12]
 800bf76:	00ad      	lsls	r5, r5, #2
 800bf78:	fbb5 f2f3 	udiv	r2, r5, r3
 800bf7c:	fb03 5512 	mls	r5, r3, r2, r5
	rv = rv << 8 | ptr[0];
 800bf80:	197b      	adds	r3, r7, r5
 800bf82:	6c1d      	ldr	r5, [r3, #64]	; 0x40
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800bf84:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800bf88:	e014      	b.n	800bfb4 <dir_sdi+0x12c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf8a:	89bb      	ldrh	r3, [r7, #12]
 800bf8c:	4638      	mov	r0, r7
 800bf8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf90:	089b      	lsrs	r3, r3, #2
 800bf92:	fbb5 f3f3 	udiv	r3, r5, r3
 800bf96:	4419      	add	r1, r3
 800bf98:	f7fe ffaa 	bl	800aef0 <move_window>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d16e      	bne.n	800c07e <dir_sdi+0x1f6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800bfa0:	00ad      	lsls	r5, r5, #2
 800bfa2:	89bb      	ldrh	r3, [r7, #12]
 800bfa4:	fbb5 f2f3 	udiv	r2, r5, r3
 800bfa8:	fb03 5512 	mls	r5, r3, r2, r5
	rv = rv << 8 | ptr[0];
 800bfac:	443d      	add	r5, r7
 800bfae:	6c2d      	ldr	r5, [r5, #64]	; 0x40
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800bfb0:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bfb4:	2d01      	cmp	r5, #1
 800bfb6:	d998      	bls.n	800beea <dir_sdi+0x62>
 800bfb8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800bfbc:	42ab      	cmp	r3, r5
 800bfbe:	d994      	bls.n	800beea <dir_sdi+0x62>
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfc0:	45a1      	cmp	r9, r4
 800bfc2:	d861      	bhi.n	800c088 <dir_sdi+0x200>
	FATFS *fs = obj->fs;
 800bfc4:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bfc6:	eba4 0409 	sub.w	r4, r4, r9
 800bfca:	e780      	b.n	800bece <dir_sdi+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bfcc:	89bb      	ldrh	r3, [r7, #12]
 800bfce:	4638      	mov	r0, r7
 800bfd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfd2:	085b      	lsrs	r3, r3, #1
 800bfd4:	fbb5 f3f3 	udiv	r3, r5, r3
 800bfd8:	4419      	add	r1, r3
 800bfda:	f7fe ff89 	bl	800aef0 <move_window>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d14d      	bne.n	800c07e <dir_sdi+0x1f6>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800bfe2:	006d      	lsls	r5, r5, #1
 800bfe4:	89bb      	ldrh	r3, [r7, #12]
 800bfe6:	fbb5 f2f3 	udiv	r2, r5, r3
 800bfea:	fb03 5512 	mls	r5, r3, r2, r5
 800bfee:	443d      	add	r5, r7
 800bff0:	f8b5 5040 	ldrh.w	r5, [r5, #64]	; 0x40
			break;
 800bff4:	e7de      	b.n	800bfb4 <dir_sdi+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bff6:	89bb      	ldrh	r3, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 800bff8:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bffe:	4638      	mov	r0, r7
 800c000:	fbba f3f3 	udiv	r3, sl, r3
 800c004:	4419      	add	r1, r3
 800c006:	f7fe ff73 	bl	800aef0 <move_window>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d137      	bne.n	800c07e <dir_sdi+0x1f6>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800c00e:	89b9      	ldrh	r1, [r7, #12]
 800c010:	f10a 0b01 	add.w	fp, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c016:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800c018:	fbba f2f1 	udiv	r2, sl, r1
 800c01c:	fb01 aa12 	mls	sl, r1, r2, sl
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c020:	fbbb f1f1 	udiv	r1, fp, r1
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800c024:	44ba      	add	sl, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c026:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800c028:	f89a a040 	ldrb.w	sl, [sl, #64]	; 0x40
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c02c:	f7fe ff60 	bl	800aef0 <move_window>
 800c030:	bb28      	cbnz	r0, 800c07e <dir_sdi+0x1f6>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800c032:	89bb      	ldrh	r3, [r7, #12]
 800c034:	fbbb f2f3 	udiv	r2, fp, r3
 800c038:	fb03 bb12 	mls	fp, r3, r2, fp
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800c03c:	07ea      	lsls	r2, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800c03e:	44bb      	add	fp, r7
 800c040:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 800c044:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800c048:	bf4c      	ite	mi
 800c04a:	ea4f 151a 	movmi.w	r5, sl, lsr #4
 800c04e:	f3ca 050b 	ubfxpl	r5, sl, #0, #12
 800c052:	e7af      	b.n	800bfb4 <dir_sdi+0x12c>
		clst = (DWORD)fs->dirbase;
 800c054:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c058:	71c5      	strb	r5, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f43f af4b 	beq.w	800bef6 <dir_sdi+0x6e>
 800c060:	461d      	mov	r5, r3
 800c062:	e726      	b.n	800beb2 <dir_sdi+0x2a>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800c064:	79f3      	ldrb	r3, [r6, #7]
 800c066:	2b00      	cmp	r3, #0
 800c068:	f47f af3f 	bne.w	800beea <dir_sdi+0x62>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800c06c:	89ba      	ldrh	r2, [r7, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800c06e:	e772      	b.n	800bf56 <dir_sdi+0xce>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800c070:	69b3      	ldr	r3, [r6, #24]
 800c072:	459a      	cmp	sl, r3
 800c074:	f4bf af6f 	bcs.w	800bf56 <dir_sdi+0xce>
					val = clst + 1; 	/* Generate the value */
 800c078:	3501      	adds	r5, #1
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c07a:	1c6b      	adds	r3, r5, #1
 800c07c:	d19a      	bne.n	800bfb4 <dir_sdi+0x12c>
 800c07e:	2001      	movs	r0, #1
}
 800c080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c084:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c088:	3b02      	subs	r3, #2
	clst -= 2;		/* Cluster number is origin from 2 */
 800c08a:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c08c:	4299      	cmp	r1, r3
 800c08e:	f4bf af29 	bcs.w	800bee4 <dir_sdi+0x5c>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800c092:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c096:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800c09a:	fb01 2203 	mla	r2, r1, r3, r2
 800c09e:	e731      	b.n	800bf04 <dir_sdi+0x7c>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800c0a0:	3801      	subs	r0, #1
 800c0a2:	f04f 0300 	mov.w	r3, #0
 800c0a6:	f161 0100 	sbc.w	r1, r1, #0
 800c0aa:	f7f4 f91d 	bl	80002e8 <__aeabi_uldivmod>
 800c0ae:	fbb0 f0fb 	udiv	r0, r0, fp
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800c0b2:	4582      	cmp	sl, r0
 800c0b4:	f63f af19 	bhi.w	800beea <dir_sdi+0x62>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800c0b8:	d1de      	bne.n	800c078 <dir_sdi+0x1f0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c0ba:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f6bf af13 	bge.w	800beea <dir_sdi+0x62>
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0c4:	45a1      	cmp	r9, r4
 800c0c6:	d803      	bhi.n	800c0d0 <dir_sdi+0x248>
	FATFS *fs = obj->fs;
 800c0c8:	6837      	ldr	r7, [r6, #0]
 800c0ca:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800c0ce:	e77a      	b.n	800bfc6 <dir_sdi+0x13e>
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0d0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
	clst -= 2;		/* Cluster number is origin from 2 */
 800c0d4:	4900      	ldr	r1, [pc, #0]	; (800c0d8 <dir_sdi+0x250>)
 800c0d6:	e7dc      	b.n	800c092 <dir_sdi+0x20a>
 800c0d8:	7ffffffd 	.word	0x7ffffffd

0800c0dc <dir_find>:
{
 800c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c0e0:	2100      	movs	r1, #0
{
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800c0e6:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c0e8:	f7ff fece 	bl	800be88 <dir_sdi>
	if (res != FR_OK) return res;
 800c0ec:	4680      	mov	r8, r0
 800c0ee:	b9e8      	cbnz	r0, 800c12c <dir_find+0x50>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c0f0:	782b      	ldrb	r3, [r5, #0]
 800c0f2:	2b04      	cmp	r3, #4
 800c0f4:	f000 815d 	beq.w	800c3b2 <dir_find+0x2d6>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0f8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800c0fc:	f04f 33ff 	mov.w	r3, #4294967295
		res = move_window(fs, dp->sect);
 800c100:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c102:	46ca      	mov	sl, r9
 800c104:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (sect != fs->winsect) {	/* Window offset changed? */
 800c106:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800c108:	42ba      	cmp	r2, r7
 800c10a:	d014      	beq.n	800c136 <dir_find+0x5a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800c10c:	792b      	ldrb	r3, [r5, #4]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800c10e:	f105 0140 	add.w	r1, r5, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800c112:	2b00      	cmp	r3, #0
 800c114:	d161      	bne.n	800c1da <dir_find+0xfe>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800c116:	2301      	movs	r3, #1
 800c118:	463a      	mov	r2, r7
 800c11a:	7868      	ldrb	r0, [r5, #1]
 800c11c:	f7fe fd66 	bl	800abec <disk_read>
 800c120:	b140      	cbz	r0, 800c134 <dir_find+0x58>
			fs->winsect = sect;
 800c122:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800c126:	f04f 0801 	mov.w	r8, #1
			fs->winsect = sect;
 800c12a:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 800c12c:	4640      	mov	r0, r8
 800c12e:	b005      	add	sp, #20
 800c130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
 800c134:	63ef      	str	r7, [r5, #60]	; 0x3c
		c = dp->dir[DIR_Name];
 800c136:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800c138:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c13a:	2f00      	cmp	r7, #0
 800c13c:	f000 8136 	beq.w	800c3ac <dir_find+0x2d0>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c140:	7af3      	ldrb	r3, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c142:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c144:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c148:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c14a:	d003      	beq.n	800c154 <dir_find+0x78>
 800c14c:	0719      	lsls	r1, r3, #28
 800c14e:	d531      	bpl.n	800c1b4 <dir_find+0xd8>
 800c150:	2a0f      	cmp	r2, #15
 800c152:	d072      	beq.n	800c23a <dir_find+0x15e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c154:	f04f 33ff 	mov.w	r3, #4294967295
 800c158:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c15c:	64e3      	str	r3, [r4, #76]	; 0x4c
	FATFS *fs = dp->obj.fs;
 800c15e:	6826      	ldr	r6, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c160:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c162:	7832      	ldrb	r2, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c164:	3320      	adds	r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c166:	2a04      	cmp	r2, #4
 800c168:	bf0c      	ite	eq
 800c16a:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800c16e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800c172:	4293      	cmp	r3, r2
 800c174:	d307      	bcc.n	800c186 <dir_find+0xaa>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c176:	f04f 0804 	mov.w	r8, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4640      	mov	r0, r8
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c17e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c180:	b005      	add	sp, #20
 800c182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c186:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800c188:	2f00      	cmp	r7, #0
 800c18a:	f000 810f 	beq.w	800c3ac <dir_find+0x2d0>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c18e:	89b2      	ldrh	r2, [r6, #12]
 800c190:	fbb3 f0f2 	udiv	r0, r3, r2
 800c194:	fb02 3210 	mls	r2, r2, r0, r3
 800c198:	b93a      	cbnz	r2, 800c1aa <dir_find+0xce>
		dp->sect++;				/* Next sector */
 800c19a:	3701      	adds	r7, #1
		if (dp->clust == 0) {	/* Static table */
 800c19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800c19e:	63a7      	str	r7, [r4, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800c1a0:	bb31      	cbnz	r1, 800c1f0 <dir_find+0x114>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c1a2:	8931      	ldrh	r1, [r6, #8]
 800c1a4:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
 800c1a8:	d9e5      	bls.n	800c176 <dir_find+0x9a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1aa:	3640      	adds	r6, #64	; 0x40
	dp->dptr = ofs;						/* Current entry */
 800c1ac:	6323      	str	r3, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1ae:	4416      	add	r6, r2
 800c1b0:	63e6      	str	r6, [r4, #60]	; 0x3c
	} while (res == FR_OK);
 800c1b2:	e7a8      	b.n	800c106 <dir_find+0x2a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c1b4:	2a0f      	cmp	r2, #15
 800c1b6:	d040      	beq.n	800c23a <dir_find+0x15e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c1b8:	f1ba 0f00 	cmp.w	sl, #0
 800c1bc:	f000 80a0 	beq.w	800c300 <dir_find+0x224>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1c0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800c1c4:	07da      	lsls	r2, r3, #31
 800c1c6:	d4c5      	bmi.n	800c154 <dir_find+0x78>
 800c1c8:	220b      	movs	r2, #11
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800c1d0:	f006 f839 	bl	8012246 <memcmp>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d1bd      	bne.n	800c154 <dir_find+0x78>
 800c1d8:	e7a8      	b.n	800c12c <dir_find+0x50>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800c1da:	2301      	movs	r3, #1
 800c1dc:	7868      	ldrb	r0, [r5, #1]
 800c1de:	9100      	str	r1, [sp, #0]
 800c1e0:	f7fe fd14 	bl	800ac0c <disk_write>
 800c1e4:	9900      	ldr	r1, [sp, #0]
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d076      	beq.n	800c2d8 <dir_find+0x1fc>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c1ea:	f04f 0801 	mov.w	r8, #1
 800c1ee:	e79d      	b.n	800c12c <dir_find+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c1f0:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 800c1f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c1f8:	ea1c 0b00 	ands.w	fp, ip, r0
 800c1fc:	d1d5      	bne.n	800c1aa <dir_find+0xce>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c1fe:	4620      	mov	r0, r4
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	f7fe ff45 	bl	800b090 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c206:	2801      	cmp	r0, #1
 800c208:	f240 80cd 	bls.w	800c3a6 <dir_find+0x2ca>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d0ec      	beq.n	800c1ea <dir_find+0x10e>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c210:	6a32      	ldr	r2, [r6, #32]
 800c212:	4290      	cmp	r0, r2
 800c214:	d2af      	bcs.n	800c176 <dir_find+0x9a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c216:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800c218:	6360      	str	r0, [r4, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800c21a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c21c:	9b00      	ldr	r3, [sp, #0]
 800c21e:	4290      	cmp	r0, r2
 800c220:	f080 8116 	bcs.w	800c450 <dir_find+0x374>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800c224:	8972      	ldrh	r2, [r6, #10]
 800c226:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800c228:	fb00 7702 	mla	r7, r0, r2, r7
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c22c:	89b1      	ldrh	r1, [r6, #12]
				dp->sect = clst2sect(fs, clst);
 800c22e:	63a7      	str	r7, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c230:	fbb3 f2f1 	udiv	r2, r3, r1
 800c234:	fb01 3212 	mls	r2, r1, r2, r3
 800c238:	e7b7      	b.n	800c1aa <dir_find+0xce>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c23a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800c23e:	065b      	lsls	r3, r3, #25
 800c240:	d48d      	bmi.n	800c15e <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c242:	0678      	lsls	r0, r7, #25
 800c244:	f140 80a9 	bpl.w	800c39a <dir_find+0x2be>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c248:	6b23      	ldr	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c24a:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800c24e:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c252:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c254:	7b73      	ldrb	r3, [r6, #13]
 800c256:	454b      	cmp	r3, r9
 800c258:	f040 80a2 	bne.w	800c3a0 <dir_find+0x2c4>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c25c:	8b73      	ldrh	r3, [r6, #26]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f040 809e 	bne.w	800c3a0 <dir_find+0x2c4>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c264:	f896 a000 	ldrb.w	sl, [r6]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c268:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c26a:	692b      	ldr	r3, [r5, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c26c:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
 800c270:	f8df b208 	ldr.w	fp, [pc, #520]	; 800c47c <dir_find+0x3a0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c274:	9302      	str	r3, [sp, #8]
 800c276:	4610      	mov	r0, r2
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c278:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c27c:	9703      	str	r7, [sp, #12]
 800c27e:	9401      	str	r4, [sp, #4]
 800c280:	f10b 010d 	add.w	r1, fp, #13
 800c284:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 800c288:	4637      	mov	r7, r6
 800c28a:	9c02      	ldr	r4, [sp, #8]
 800c28c:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c290:	9500      	str	r5, [sp, #0]
 800c292:	e013      	b.n	800c2bc <dir_find+0x1e0>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c294:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800c298:	4630      	mov	r0, r6
 800c29a:	d818      	bhi.n	800c2ce <dir_find+0x1f2>
 800c29c:	f002 fa5e 	bl	800e75c <ff_wtoupper>
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 800c2a6:	f10a 0a01 	add.w	sl, sl, #1
 800c2aa:	f002 fa57 	bl	800e75c <ff_wtoupper>
 800c2ae:	4285      	cmp	r5, r0
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	d10c      	bne.n	800c2ce <dir_find+0x1f2>
 800c2b4:	4970      	ldr	r1, [pc, #448]	; (800c478 <dir_find+0x39c>)
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c2b6:	458b      	cmp	fp, r1
 800c2b8:	f000 80cc 	beq.w	800c454 <dir_find+0x378>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c2bc:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800c2c0:	5afe      	ldrh	r6, [r7, r3]
		if (wc != 0) {
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d1e6      	bne.n	800c294 <dir_find+0x1b8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c2c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2ca:	429e      	cmp	r6, r3
 800c2cc:	d0f3      	beq.n	800c2b6 <dir_find+0x1da>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c2ce:	e9dd 5400 	ldrd	r5, r4, [sp]
 800c2d2:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c2d6:	e742      	b.n	800c15e <dir_find+0x82>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800c2d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->wflag = 0;	/* Clear window dirty flag */
 800c2da:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800c2dc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800c2de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c2e0:	1ac3      	subs	r3, r0, r3
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	f4bf af17 	bcs.w	800c116 <dir_find+0x3a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800c2e8:	78eb      	ldrb	r3, [r5, #3]
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	f47f af13 	bne.w	800c116 <dir_find+0x3a>
 800c2f0:	4402      	add	r2, r0
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	7868      	ldrb	r0, [r5, #1]
 800c2f6:	9100      	str	r1, [sp, #0]
 800c2f8:	f7fe fc88 	bl	800ac0c <disk_write>
 800c2fc:	9900      	ldr	r1, [sp, #0]
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c2fe:	e70a      	b.n	800c116 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c300:	7832      	ldrb	r2, [r6, #0]
 800c302:	7871      	ldrb	r1, [r6, #1]
 800c304:	01d0      	lsls	r0, r2, #7
 800c306:	78b7      	ldrb	r7, [r6, #2]
 800c308:	78f3      	ldrb	r3, [r6, #3]
 800c30a:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
 800c30e:	7932      	ldrb	r2, [r6, #4]
 800c310:	f896 a005 	ldrb.w	sl, [r6, #5]
 800c314:	4408      	add	r0, r1
 800c316:	f896 e006 	ldrb.w	lr, [r6, #6]
 800c31a:	f896 c007 	ldrb.w	ip, [r6, #7]
 800c31e:	f3c0 0146 	ubfx	r1, r0, #1, #7
 800c322:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 800c326:	7a70      	ldrb	r0, [r6, #9]
 800c328:	fa57 f181 	uxtab	r1, r7, r1
 800c32c:	7a37      	ldrb	r7, [r6, #8]
 800c32e:	f3c1 0b46 	ubfx	fp, r1, #1, #7
 800c332:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
 800c336:	7ab1      	ldrb	r1, [r6, #10]
 800c338:	fa53 fb8b 	uxtab	fp, r3, fp
 800c33c:	f3cb 0346 	ubfx	r3, fp, #1, #7
 800c340:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
 800c344:	fa52 f383 	uxtab	r3, r2, r3
 800c348:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800c34c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800c350:	fa5a f282 	uxtab	r2, sl, r2
 800c354:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800c358:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800c35c:	fa5e f383 	uxtab	r3, lr, r3
 800c360:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800c364:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800c368:	fa5c f282 	uxtab	r2, ip, r2
 800c36c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800c370:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800c374:	fa57 f383 	uxtab	r3, r7, r3
 800c378:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800c37c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800c380:	fa50 f282 	uxtab	r2, r0, r2
 800c384:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800c388:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800c38c:	fa51 f383 	uxtab	r3, r1, r3
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c390:	b2db      	uxtb	r3, r3
 800c392:	4599      	cmp	r9, r3
 800c394:	f47f af14 	bne.w	800c1c0 <dir_find+0xe4>
 800c398:	e6c8      	b.n	800c12c <dir_find+0x50>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c39a:	45ba      	cmp	sl, r7
 800c39c:	f43f af5a 	beq.w	800c254 <dir_find+0x178>
 800c3a0:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c3a4:	e6db      	b.n	800c15e <dir_find+0x82>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c3a6:	f04f 0802 	mov.w	r8, #2
 800c3aa:	e6bf      	b.n	800c12c <dir_find+0x50>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c3ac:	f04f 0804 	mov.w	r8, #4
 800c3b0:	e6bc      	b.n	800c12c <dir_find+0x50>
	while ((chr = *name++) != 0) {
 800c3b2:	692e      	ldr	r6, [r5, #16]
	WORD sum = 0;
 800c3b4:	46c1      	mov	r9, r8
	while ((chr = *name++) != 0) {
 800c3b6:	f836 0b02 	ldrh.w	r0, [r6], #2
 800c3ba:	b1a0      	cbz	r0, 800c3e6 <dir_find+0x30a>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800c3bc:	f002 f9ce 	bl	800e75c <ff_wtoupper>
 800c3c0:	4603      	mov	r3, r0
	while ((chr = *name++) != 0) {
 800c3c2:	f836 0b02 	ldrh.w	r0, [r6], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c3c6:	b2da      	uxtb	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c3c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c3cc:	eb02 0259 	add.w	r2, r2, r9, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c3d0:	eb02 32c9 	add.w	r2, r2, r9, lsl #15
 800c3d4:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c3d6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c3da:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800c3de:	fa1f f983 	uxth.w	r9, r3
	while ((chr = *name++) != 0) {
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d1ea      	bne.n	800c3bc <dir_find+0x2e0>
 800c3e6:	f8cd 8000 	str.w	r8, [sp]
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f7ff fb43 	bl	800ba78 <dir_read>
 800c3f2:	bb58      	cbnz	r0, 800c44c <dir_find+0x370>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c3f4:	696b      	ldr	r3, [r5, #20]
 800c3f6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c3f8:	454a      	cmp	r2, r9
 800c3fa:	d1f6      	bne.n	800c3ea <dir_find+0x30e>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c3fc:	f893 a023 	ldrb.w	sl, [r3, #35]	; 0x23
 800c400:	f1ba 0f00 	cmp.w	sl, #0
 800c404:	d01a      	beq.n	800c43c <dir_find+0x360>
 800c406:	4606      	mov	r6, r0
 800c408:	2740      	movs	r7, #64	; 0x40
 800c40a:	e000      	b.n	800c40e <dir_find+0x332>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c40c:	696b      	ldr	r3, [r5, #20]
				if ((di % SZDIRE) == 0) di += 2;
 800c40e:	f017 0f1f 	tst.w	r7, #31
 800c412:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 800c416:	bf08      	it	eq
 800c418:	3702      	addeq	r7, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c41a:	5bd8      	ldrh	r0, [r3, r7]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c41c:	3702      	adds	r7, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c41e:	f002 f99d 	bl	800e75c <ff_wtoupper>
 800c422:	692a      	ldr	r2, [r5, #16]
 800c424:	4680      	mov	r8, r0
 800c426:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c42a:	3601      	adds	r6, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c42c:	f002 f996 	bl	800e75c <ff_wtoupper>
 800c430:	4580      	cmp	r8, r0
 800c432:	d1da      	bne.n	800c3ea <dir_find+0x30e>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c434:	4556      	cmp	r6, sl
 800c436:	d1e9      	bne.n	800c40c <dir_find+0x330>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c438:	f10b 0a02 	add.w	sl, fp, #2
 800c43c:	692b      	ldr	r3, [r5, #16]
 800c43e:	f833 300a 	ldrh.w	r3, [r3, sl]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1d1      	bne.n	800c3ea <dir_find+0x30e>
 800c446:	f8dd 8000 	ldr.w	r8, [sp]
 800c44a:	e66f      	b.n	800c12c <dir_find+0x50>
 800c44c:	4680      	mov	r8, r0
 800c44e:	e66d      	b.n	800c12c <dir_find+0x50>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c450:	465f      	mov	r7, fp
 800c452:	e6eb      	b.n	800c22c <dir_find+0x150>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c454:	463e      	mov	r6, r7
 800c456:	9d00      	ldr	r5, [sp, #0]
 800c458:	9f03      	ldr	r7, [sp, #12]
 800c45a:	7833      	ldrb	r3, [r6, #0]
 800c45c:	9c01      	ldr	r4, [sp, #4]
 800c45e:	0659      	lsls	r1, r3, #25
 800c460:	d500      	bpl.n	800c464 <dir_find+0x388>
 800c462:	b918      	cbnz	r0, 800c46c <dir_find+0x390>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c464:	3f01      	subs	r7, #1
 800c466:	fa5f fa87 	uxtb.w	sl, r7
 800c46a:	e678      	b.n	800c15e <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c46c:	9b02      	ldr	r3, [sp, #8]
 800c46e:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0f6      	beq.n	800c464 <dir_find+0x388>
 800c476:	e793      	b.n	800c3a0 <dir_find+0x2c4>
 800c478:	080156e1 	.word	0x080156e1
 800c47c:	080156d4 	.word	0x080156d4

0800c480 <follow_path>:
{
 800c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800c484:	780b      	ldrb	r3, [r1, #0]
{
 800c486:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800c488:	6802      	ldr	r2, [r0, #0]
{
 800c48a:	460d      	mov	r5, r1
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800c48c:	2b5c      	cmp	r3, #92	; 0x5c
{
 800c48e:	4682      	mov	sl, r0
	FATFS *fs = dp->obj.fs;
 800c490:	9200      	str	r2, [sp, #0]
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800c492:	d001      	beq.n	800c498 <follow_path+0x18>
 800c494:	2b2f      	cmp	r3, #47	; 0x2f
 800c496:	d105      	bne.n	800c4a4 <follow_path+0x24>
 800c498:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800c49c:	2b2f      	cmp	r3, #47	; 0x2f
 800c49e:	d0fb      	beq.n	800c498 <follow_path+0x18>
 800c4a0:	2b5c      	cmp	r3, #92	; 0x5c
 800c4a2:	d0f9      	beq.n	800c498 <follow_path+0x18>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	f8ca 1008 	str.w	r1, [sl, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c4aa:	f8ca 101c 	str.w	r1, [sl, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c4ae:	782b      	ldrb	r3, [r5, #0]
 800c4b0:	2b1f      	cmp	r3, #31
 800c4b2:	f240 817d 	bls.w	800c7b0 <follow_path+0x330>
	FATFS *fs = dp->obj.fs;
 800c4b6:	9b00      	ldr	r3, [sp, #0]
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c4b8:	f8df 9348 	ldr.w	r9, [pc, #840]	; 800c804 <follow_path+0x384>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800c4bc:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c4c0:	2400      	movs	r4, #0
 800c4c2:	f1ab 0702 	sub.w	r7, fp, #2
	wc = (BYTE)*p++;			/* Get a byte */
 800c4c6:	f815 0b01 	ldrb.w	r0, [r5], #1
	if (wc != 0) {
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	f040 8093 	bne.w	800c5f6 <follow_path+0x176>
		cf = NS_LAST;			/* Last segment */
 800c4d0:	2604      	movs	r6, #4
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800c4d2:	2c00      	cmp	r4, #0
 800c4d4:	f000 80eb 	beq.w	800c6ae <follow_path+0x22e>
 800c4d8:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
 800c4dc:	e002      	b.n	800c4e4 <follow_path+0x64>
 800c4de:	3c01      	subs	r4, #1
 800c4e0:	f000 80e5 	beq.w	800c6ae <follow_path+0x22e>
		wc = lfn[di - 1];
 800c4e4:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (wc != ' ' && wc != '.') break;
 800c4e8:	2b20      	cmp	r3, #32
 800c4ea:	d0f8      	beq.n	800c4de <follow_path+0x5e>
 800c4ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ee:	d0f6      	beq.n	800c4de <follow_path+0x5e>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800c4f0:	f04f 0800 	mov.w	r8, #0
 800c4f4:	f82b 8014 	strh.w	r8, [fp, r4, lsl #1]
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800c4f8:	f8bb 3000 	ldrh.w	r3, [fp]
 800c4fc:	2b20      	cmp	r3, #32
 800c4fe:	f040 810a 	bne.w	800c716 <follow_path+0x296>
 800c502:	f10b 0302 	add.w	r3, fp, #2
 800c506:	461a      	mov	r2, r3
 800c508:	f108 0801 	add.w	r8, r8, #1
 800c50c:	3302      	adds	r3, #2
 800c50e:	8811      	ldrh	r1, [r2, #0]
 800c510:	2920      	cmp	r1, #32
 800c512:	d0f8      	beq.n	800c506 <follow_path+0x86>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800c514:	f046 0603 	orr.w	r6, r6, #3
		wc = lfn[si++];					/* Get an LFN character */
 800c518:	f108 0801 	add.w	r8, r8, #1
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800c51c:	b2f6      	uxtb	r6, r6
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800c51e:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 800c522:	f833 1d02 	ldrh.w	r1, [r3, #-2]!
 800c526:	292e      	cmp	r1, #46	; 0x2e
 800c528:	d001      	beq.n	800c52e <follow_path+0xae>
 800c52a:	3c01      	subs	r4, #1
 800c52c:	d1f9      	bne.n	800c522 <follow_path+0xa2>
	memset(dp->fn, ' ', 11);
 800c52e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 800c532:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
 800c536:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
 800c53a:	f8ca 3047 	str.w	r3, [sl, #71]	; 0x47
		wc = lfn[si++];					/* Get an LFN character */
 800c53e:	8811      	ldrh	r1, [r2, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
 800c540:	b381      	cbz	r1, 800c5a4 <follow_path+0x124>
 800c542:	4650      	mov	r0, sl
	i = b = 0; ni = 8;
 800c544:	2700      	movs	r7, #0
 800c546:	2208      	movs	r2, #8
 800c548:	46da      	mov	sl, fp
 800c54a:	9501      	str	r5, [sp, #4]
 800c54c:	46a3      	mov	fp, r4
 800c54e:	4615      	mov	r5, r2
 800c550:	463c      	mov	r4, r7
 800c552:	4603      	mov	r3, r0
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800c554:	2920      	cmp	r1, #32
 800c556:	d003      	beq.n	800c560 <follow_path+0xe0>
 800c558:	292e      	cmp	r1, #46	; 0x2e
 800c55a:	d16b      	bne.n	800c634 <follow_path+0x1b4>
 800c55c:	45c3      	cmp	fp, r8
 800c55e:	d069      	beq.n	800c634 <follow_path+0x1b4>
			cf |= NS_LOSS | NS_LFN;
 800c560:	f046 0603 	orr.w	r6, r6, #3
 800c564:	b2f6      	uxtb	r6, r6
		wc = lfn[si++];					/* Get an LFN character */
 800c566:	f83a 1018 	ldrh.w	r1, [sl, r8, lsl #1]
 800c56a:	f108 0801 	add.w	r8, r8, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 800c56e:	2900      	cmp	r1, #0
 800c570:	d1f0      	bne.n	800c554 <follow_path+0xd4>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c572:	469a      	mov	sl, r3
 800c574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c578:	462a      	mov	r2, r5
 800c57a:	9d01      	ldr	r5, [sp, #4]
 800c57c:	2be5      	cmp	r3, #229	; 0xe5
 800c57e:	d102      	bne.n	800c586 <follow_path+0x106>
 800c580:	2305      	movs	r3, #5
 800c582:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800c586:	2a08      	cmp	r2, #8
 800c588:	f000 80cc 	beq.w	800c724 <follow_path+0x2a4>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800c58c:	f007 030c 	and.w	r3, r7, #12
 800c590:	2b0c      	cmp	r3, #12
 800c592:	d004      	beq.n	800c59e <follow_path+0x11e>
 800c594:	f007 0303 	and.w	r3, r7, #3
 800c598:	2b03      	cmp	r3, #3
 800c59a:	f040 80cd 	bne.w	800c738 <follow_path+0x2b8>
 800c59e:	f046 0602 	orr.w	r6, r6, #2
 800c5a2:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 800c5a4:	4650      	mov	r0, sl
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800c5a6:	f88a 604b 	strb.w	r6, [sl, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 800c5aa:	f7ff fd97 	bl	800c0dc <dir_find>
			ns = dp->fn[NSFLAG];
 800c5ae:	f89a 304b 	ldrb.w	r3, [sl, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	f040 80d8 	bne.w	800c768 <follow_path+0x2e8>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800c5b8:	075a      	lsls	r2, r3, #29
 800c5ba:	d438      	bmi.n	800c62e <follow_path+0x1ae>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c5bc:	f89a 3006 	ldrb.w	r3, [sl, #6]
 800c5c0:	06db      	lsls	r3, r3, #27
 800c5c2:	f140 8108 	bpl.w	800c7d6 <follow_path+0x356>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 800c5c6:	9b00      	ldr	r3, [sp, #0]
 800c5c8:	7819      	ldrb	r1, [r3, #0]
 800c5ca:	2904      	cmp	r1, #4
 800c5cc:	d076      	beq.n	800c6bc <follow_path+0x23c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5ce:	8998      	ldrh	r0, [r3, #12]
 800c5d0:	3340      	adds	r3, #64	; 0x40
 800c5d2:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800c5d6:	2903      	cmp	r1, #3
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5d8:	fbb2 f4f0 	udiv	r4, r2, r0
 800c5dc:	fb00 2214 	mls	r2, r0, r4, r2
 800c5e0:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800c5e2:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800c5e4:	d102      	bne.n	800c5ec <follow_path+0x16c>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c5e6:	8a9b      	ldrh	r3, [r3, #20]
 800c5e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5ec:	f8ca 2008 	str.w	r2, [sl, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800c5f0:	f8da 3000 	ldr.w	r3, [sl]
 800c5f4:	e762      	b.n	800c4bc <follow_path+0x3c>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 800c5f6:	f240 3152 	movw	r1, #850	; 0x352
 800c5fa:	f002 f89b 	bl	800e734 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800c5fe:	4606      	mov	r6, r0
 800c600:	b1a0      	cbz	r0, 800c62c <follow_path+0x1ac>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800c602:	2e1f      	cmp	r6, #31
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c604:	4648      	mov	r0, r9
 800c606:	4631      	mov	r1, r6
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800c608:	f67f af62 	bls.w	800c4d0 <follow_path+0x50>
 800c60c:	2e2f      	cmp	r6, #47	; 0x2f
 800c60e:	d03b      	beq.n	800c688 <follow_path+0x208>
 800c610:	2e5c      	cmp	r6, #92	; 0x5c
 800c612:	d039      	beq.n	800c688 <follow_path+0x208>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c614:	2e7f      	cmp	r6, #127	; 0x7f
 800c616:	d802      	bhi.n	800c61e <follow_path+0x19e>
 800c618:	f005 fe47 	bl	80122aa <strchr>
 800c61c:	b930      	cbnz	r0, 800c62c <follow_path+0x1ac>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c61e:	2cff      	cmp	r4, #255	; 0xff
		lfn[di++] = wc;				/* Store the Unicode character */
 800c620:	f104 0401 	add.w	r4, r4, #1
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c624:	d002      	beq.n	800c62c <follow_path+0x1ac>
		lfn[di++] = wc;				/* Store the Unicode character */
 800c626:	f827 6f02 	strh.w	r6, [r7, #2]!
		uc = tchar2uni(&p);			/* Get a character */
 800c62a:	e74c      	b.n	800c4c6 <follow_path+0x46>
 800c62c:	2006      	movs	r0, #6
}
 800c62e:	b005      	add	sp, #20
 800c630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (i >= ni || si == di) {		/* End of field? */
 800c634:	42ac      	cmp	r4, r5
 800c636:	d217      	bcs.n	800c668 <follow_path+0x1e8>
 800c638:	45c3      	cmp	fp, r8
 800c63a:	d015      	beq.n	800c668 <follow_path+0x1e8>
		if (wc >= 0x80) {	/* Is this an extended character? */
 800c63c:	297f      	cmp	r1, #127	; 0x7f
 800c63e:	d852      	bhi.n	800c6e6 <follow_path+0x266>
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800c640:	486e      	ldr	r0, [pc, #440]	; (800c7fc <follow_path+0x37c>)
 800c642:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800c646:	f005 fe30 	bl	80122aa <strchr>
 800c64a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800c64e:	2800      	cmp	r0, #0
 800c650:	f000 80a0 	beq.w	800c794 <follow_path+0x314>
 800c654:	4632      	mov	r2, r6
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c656:	f042 0103 	orr.w	r1, r2, #3
 800c65a:	b2ce      	uxtb	r6, r1
 800c65c:	215f      	movs	r1, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
 800c65e:	1918      	adds	r0, r3, r4
 800c660:	3401      	adds	r4, #1
 800c662:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 800c666:	e77e      	b.n	800c566 <follow_path+0xe6>
			if (ni == 11) {				/* Name extension overflow? */
 800c668:	2d0b      	cmp	r5, #11
 800c66a:	f000 80b8 	beq.w	800c7de <follow_path+0x35e>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800c66e:	45c3      	cmp	fp, r8
 800c670:	d004      	beq.n	800c67c <follow_path+0x1fc>
 800c672:	f046 0603 	orr.w	r6, r6, #3
 800c676:	b2f6      	uxtb	r6, r6
			if (si > di) break;						/* No name extension? */
 800c678:	f4ff af7b 	bcc.w	800c572 <follow_path+0xf2>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800c67c:	00bf      	lsls	r7, r7, #2
			continue;
 800c67e:	46d8      	mov	r8, fp
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800c680:	250b      	movs	r5, #11
 800c682:	2408      	movs	r4, #8
 800c684:	b2ff      	uxtb	r7, r7
			continue;
 800c686:	e76e      	b.n	800c566 <follow_path+0xe6>
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 800c688:	782e      	ldrb	r6, [r5, #0]
 800c68a:	2e5c      	cmp	r6, #92	; 0x5c
 800c68c:	d001      	beq.n	800c692 <follow_path+0x212>
 800c68e:	2e2f      	cmp	r6, #47	; 0x2f
 800c690:	d105      	bne.n	800c69e <follow_path+0x21e>
 800c692:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c696:	2e2f      	cmp	r6, #47	; 0x2f
 800c698:	d0fb      	beq.n	800c692 <follow_path+0x212>
 800c69a:	2e5c      	cmp	r6, #92	; 0x5c
 800c69c:	d0f9      	beq.n	800c692 <follow_path+0x212>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 800c69e:	2e1f      	cmp	r6, #31
 800c6a0:	bf8c      	ite	hi
 800c6a2:	2600      	movhi	r6, #0
 800c6a4:	2601      	movls	r6, #1
 800c6a6:	00b6      	lsls	r6, r6, #2
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800c6a8:	2c00      	cmp	r4, #0
 800c6aa:	f47f af15 	bne.w	800c4d8 <follow_path+0x58>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800c6ae:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800c6b0:	2006      	movs	r0, #6
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800c6b2:	f8ab 3000 	strh.w	r3, [fp]
}
 800c6b6:	b005      	add	sp, #20
 800c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800c6bc:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c6c0:	f89a 2007 	ldrb.w	r2, [sl, #7]
 800c6c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				dp->obj.c_scl = dp->obj.sclust;
 800c6c8:	f8da 1008 	ldr.w	r1, [sl, #8]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800c6cc:	4313      	orrs	r3, r2
				dp->obj.c_ofs = dp->blk_ofs;
 800c6ce:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
				dp->obj.c_scl = dp->obj.sclust;
 800c6d2:	f8ca 1020 	str.w	r1, [sl, #32]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800c6d6:	4651      	mov	r1, sl
				dp->obj.c_ofs = dp->blk_ofs;
 800c6d8:	e9ca 3209 	strd	r3, r2, [sl, #36]	; 0x24
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800c6dc:	9b00      	ldr	r3, [sp, #0]
 800c6de:	6958      	ldr	r0, [r3, #20]
 800c6e0:	f7fe fbf4 	bl	800aecc <init_alloc_info.isra.0>
 800c6e4:	e784      	b.n	800c5f0 <follow_path+0x170>
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800c6e6:	4608      	mov	r0, r1
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800c6e8:	f046 0102 	orr.w	r1, r6, #2
 800c6ec:	9303      	str	r3, [sp, #12]
 800c6ee:	b2ca      	uxtb	r2, r1
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800c6f0:	f240 3152 	movw	r1, #850	; 0x352
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800c6f4:	9202      	str	r2, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800c6f6:	f001 fffd 	bl	800e6f4 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800c6fa:	f010 0f80 	tst.w	r0, #128	; 0x80
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800c6fe:	4601      	mov	r1, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800c700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c704:	d038      	beq.n	800c778 <follow_path+0x2f8>
 800c706:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800c70a:	483d      	ldr	r0, [pc, #244]	; (800c800 <follow_path+0x380>)
 800c70c:	5c41      	ldrb	r1, [r0, r1]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800c70e:	2900      	cmp	r1, #0
 800c710:	d0a1      	beq.n	800c656 <follow_path+0x1d6>
 800c712:	4616      	mov	r6, r2
 800c714:	e794      	b.n	800c640 <follow_path+0x1c0>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800c716:	2b2e      	cmp	r3, #46	; 0x2e
 800c718:	465a      	mov	r2, fp
 800c71a:	f43f aefb 	beq.w	800c514 <follow_path+0x94>
 800c71e:	f04f 0801 	mov.w	r8, #1
 800c722:	e6fc      	b.n	800c51e <follow_path+0x9e>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800c724:	00bb      	lsls	r3, r7, #2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800c726:	f003 020c 	and.w	r2, r3, #12
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800c72a:	b2df      	uxtb	r7, r3
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800c72c:	2a0c      	cmp	r2, #12
 800c72e:	f43f af36 	beq.w	800c59e <follow_path+0x11e>
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c732:	07b3      	lsls	r3, r6, #30
 800c734:	d508      	bpl.n	800c748 <follow_path+0x2c8>
 800c736:	e735      	b.n	800c5a4 <follow_path+0x124>
 800c738:	07b4      	lsls	r4, r6, #30
 800c73a:	f53f af33 	bmi.w	800c5a4 <follow_path+0x124>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800c73e:	07f8      	lsls	r0, r7, #31
 800c740:	d502      	bpl.n	800c748 <follow_path+0x2c8>
 800c742:	f046 0610 	orr.w	r6, r6, #16
 800c746:	b2f6      	uxtb	r6, r6
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800c748:	0779      	lsls	r1, r7, #29
 800c74a:	f57f af2b 	bpl.w	800c5a4 <follow_path+0x124>
 800c74e:	f046 0608 	orr.w	r6, r6, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 800c752:	4650      	mov	r0, sl
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800c754:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800c756:	f88a 604b 	strb.w	r6, [sl, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 800c75a:	f7ff fcbf 	bl	800c0dc <dir_find>
			ns = dp->fn[NSFLAG];
 800c75e:	f89a 304b 	ldrb.w	r3, [sl, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800c762:	2800      	cmp	r0, #0
 800c764:	f43f af28 	beq.w	800c5b8 <follow_path+0x138>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c768:	2804      	cmp	r0, #4
 800c76a:	f47f af60 	bne.w	800c62e <follow_path+0x1ae>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c76e:	f013 0f04 	tst.w	r3, #4
 800c772:	bf08      	it	eq
 800c774:	2005      	moveq	r0, #5
 800c776:	e75a      	b.n	800c62e <follow_path+0x1ae>
		if (wc >= 0x100) {				/* Is this a DBC? */
 800c778:	28ff      	cmp	r0, #255	; 0xff
 800c77a:	d9c8      	bls.n	800c70e <follow_path+0x28e>
			if (i >= ni - 1) {			/* Field overflow? */
 800c77c:	1e68      	subs	r0, r5, #1
 800c77e:	42a0      	cmp	r0, r4
 800c780:	d911      	bls.n	800c7a6 <follow_path+0x326>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800c782:	1918      	adds	r0, r3, r4
 800c784:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 800c788:	4616      	mov	r6, r2
 800c78a:	3401      	adds	r4, #1
		dp->fn[i++] = (BYTE)wc;
 800c78c:	b2c9      	uxtb	r1, r1
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800c78e:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
 800c792:	e764      	b.n	800c65e <follow_path+0x1de>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800c794:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
 800c798:	b280      	uxth	r0, r0
 800c79a:	2819      	cmp	r0, #25
 800c79c:	d811      	bhi.n	800c7c2 <follow_path+0x342>
					b |= 2;
 800c79e:	f047 0702 	orr.w	r7, r7, #2
		dp->fn[i++] = (BYTE)wc;
 800c7a2:	b2c9      	uxtb	r1, r1
 800c7a4:	e75b      	b.n	800c65e <follow_path+0x1de>
				cf |= NS_LOSS | NS_LFN;
 800c7a6:	f046 0603 	orr.w	r6, r6, #3
				i = ni; continue;		/* Next field */
 800c7aa:	462c      	mov	r4, r5
				cf |= NS_LOSS | NS_LFN;
 800c7ac:	b2f6      	uxtb	r6, r6
				i = ni; continue;		/* Next field */
 800c7ae:	e6da      	b.n	800c566 <follow_path+0xe6>
		dp->fn[NSFLAG] = NS_NONAME;
 800c7b0:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800c7b2:	4650      	mov	r0, sl
		dp->fn[NSFLAG] = NS_NONAME;
 800c7b4:	f88a 304b 	strb.w	r3, [sl, #75]	; 0x4b
}
 800c7b8:	b005      	add	sp, #20
 800c7ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800c7be:	f7ff bb63 	b.w	800be88 <dir_sdi>
				if (IsLower(wc)) {		/* ASCII lower case? */
 800c7c2:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
 800c7c6:	b280      	uxth	r0, r0
 800c7c8:	2819      	cmp	r0, #25
					b |= 1; wc -= 0x20;
 800c7ca:	bf9c      	itt	ls
 800c7cc:	3920      	subls	r1, #32
 800c7ce:	f047 0701 	orrls.w	r7, r7, #1
		dp->fn[i++] = (BYTE)wc;
 800c7d2:	b2c9      	uxtb	r1, r1
 800c7d4:	e743      	b.n	800c65e <follow_path+0x1de>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7d6:	2005      	movs	r0, #5
}
 800c7d8:	b005      	add	sp, #20
 800c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
 800c7de:	469a      	mov	sl, r3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
				cf |= NS_LOSS | NS_LFN;
 800c7e4:	f046 0603 	orr.w	r6, r6, #3
 800c7e8:	9d01      	ldr	r5, [sp, #4]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7ea:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN;
 800c7ec:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7ee:	f47f aecd 	bne.w	800c58c <follow_path+0x10c>
 800c7f2:	2305      	movs	r3, #5
 800c7f4:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800c7f8:	e6c8      	b.n	800c58c <follow_path+0x10c>
 800c7fa:	bf00      	nop
 800c7fc:	0801564c 	.word	0x0801564c
 800c800:	08015654 	.word	0x08015654
 800c804:	08015640 	.word	0x08015640

0800c808 <store_xdir>:
{
 800c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80c:	4605      	mov	r5, r0
	for (i = sum = 0; i < szblk; i++) {
 800c80e:	2100      	movs	r1, #0
{
 800c810:	b083      	sub	sp, #12
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 800c812:	682b      	ldr	r3, [r5, #0]
	for (i = sum = 0; i < szblk; i++) {
 800c814:	4608      	mov	r0, r1
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 800c816:	695c      	ldr	r4, [r3, #20]
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800c818:	7867      	ldrb	r7, [r4, #1]
 800c81a:	3701      	adds	r7, #1
 800c81c:	017e      	lsls	r6, r7, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800c81e:	2802      	cmp	r0, #2
 800c820:	d10e      	bne.n	800c840 <store_xdir+0x38>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c822:	7923      	ldrb	r3, [r4, #4]
	for (i = sum = 0; i < szblk; i++) {
 800c824:	2006      	movs	r0, #6
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c826:	7962      	ldrb	r2, [r4, #5]
 800c828:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800c832:	f3c3 014e 	ubfx	r1, r3, #1, #15
 800c836:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 800c83a:	fa11 f383 	uxtah	r3, r1, r3
 800c83e:	b299      	uxth	r1, r3
 800c840:	5c23      	ldrb	r3, [r4, r0]
	for (i = sum = 0; i < szblk; i++) {
 800c842:	3001      	adds	r0, #1
 800c844:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800c848:	4286      	cmp	r6, r0
 800c84a:	b29b      	uxth	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c84c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800c850:	b299      	uxth	r1, r3
	for (i = sum = 0; i < szblk; i++) {
 800c852:	d8e4      	bhi.n	800c81e <store_xdir+0x16>
	*ptr++ = (BYTE)val; val >>= 8;
 800c854:	0a0b      	lsrs	r3, r1, #8
 800c856:	70a1      	strb	r1, [r4, #2]
	res = dir_sdi(dp, dp->blk_ofs);
 800c858:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 800c85a:	70e3      	strb	r3, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);
 800c85c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800c85e:	f7ff fb13 	bl	800be88 <dir_sdi>
	while (res == FR_OK) {
 800c862:	4680      	mov	r8, r0
 800c864:	2800      	cmp	r0, #0
 800c866:	f040 80a9 	bne.w	800c9bc <store_xdir+0x1b4>
 800c86a:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800c86e:	f04f 0901 	mov.w	r9, #1
		res = move_window(dp->obj.fs, dp->sect);
 800c872:	682e      	ldr	r6, [r5, #0]
	if (sect != fs->winsect) {	/* Window offset changed? */
 800c874:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800c876:	4592      	cmp	sl, r2
 800c878:	d015      	beq.n	800c8a6 <store_xdir+0x9e>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800c87a:	7933      	ldrb	r3, [r6, #4]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800c87c:	f106 0140 	add.w	r1, r6, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800c880:	2b00      	cmp	r3, #0
 800c882:	d155      	bne.n	800c930 <store_xdir+0x128>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800c884:	2301      	movs	r3, #1
 800c886:	4652      	mov	r2, sl
 800c888:	7870      	ldrb	r0, [r6, #1]
 800c88a:	f7fe f9af 	bl	800abec <disk_read>
 800c88e:	b140      	cbz	r0, 800c8a2 <store_xdir+0x9a>
			fs->winsect = sect;
 800c890:	f04f 33ff 	mov.w	r3, #4294967295
 800c894:	f04f 0801 	mov.w	r8, #1
 800c898:	63f3      	str	r3, [r6, #60]	; 0x3c
}
 800c89a:	4640      	mov	r0, r8
 800c89c:	b003      	add	sp, #12
 800c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
 800c8a2:	f8c6 a03c 	str.w	sl, [r6, #60]	; 0x3c
		memcpy(dp->dir, dirb, SZDIRE);
 800c8a6:	6826      	ldr	r6, [r4, #0]
		if (--nent == 0) break;
 800c8a8:	3f01      	subs	r7, #1
		memcpy(dp->dir, dirb, SZDIRE);
 800c8aa:	6860      	ldr	r0, [r4, #4]
 800c8ac:	68a1      	ldr	r1, [r4, #8]
 800c8ae:	68e2      	ldr	r2, [r4, #12]
 800c8b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c8b2:	601e      	str	r6, [r3, #0]
 800c8b4:	6058      	str	r0, [r3, #4]
 800c8b6:	6099      	str	r1, [r3, #8]
 800c8b8:	60da      	str	r2, [r3, #12]
 800c8ba:	6926      	ldr	r6, [r4, #16]
 800c8bc:	6960      	ldr	r0, [r4, #20]
 800c8be:	69a1      	ldr	r1, [r4, #24]
 800c8c0:	69e2      	ldr	r2, [r4, #28]
 800c8c2:	611e      	str	r6, [r3, #16]
 800c8c4:	6158      	str	r0, [r3, #20]
 800c8c6:	6199      	str	r1, [r3, #24]
 800c8c8:	61da      	str	r2, [r3, #28]
		dp->obj.fs->wflag = 1;
 800c8ca:	682e      	ldr	r6, [r5, #0]
 800c8cc:	f886 9004 	strb.w	r9, [r6, #4]
		if (--nent == 0) break;
 800c8d0:	d0e3      	beq.n	800c89a <store_xdir+0x92>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c8d2:	7832      	ldrb	r2, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c8d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c8d6:	2a04      	cmp	r2, #4
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c8d8:	f103 0320 	add.w	r3, r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c8dc:	bf0c      	ite	eq
 800c8de:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800c8e2:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d307      	bcc.n	800c8fa <store_xdir+0xf2>
 800c8ea:	f04f 0802 	mov.w	r8, #2
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4640      	mov	r0, r8
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c8f2:	63ab      	str	r3, [r5, #56]	; 0x38
}
 800c8f4:	b003      	add	sp, #12
 800c8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c8fa:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
 800c8fe:	f1ba 0f00 	cmp.w	sl, #0
 800c902:	d058      	beq.n	800c9b6 <store_xdir+0x1ae>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c904:	89b2      	ldrh	r2, [r6, #12]
 800c906:	fbb3 f0f2 	udiv	r0, r3, r2
 800c90a:	fb02 3210 	mls	r2, r2, r0, r3
 800c90e:	b94a      	cbnz	r2, 800c924 <store_xdir+0x11c>
		dp->sect++;				/* Next sector */
 800c910:	f10a 0a01 	add.w	sl, sl, #1
		if (dp->clust == 0) {	/* Static table */
 800c914:	6b69      	ldr	r1, [r5, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800c916:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800c91a:	b999      	cbnz	r1, 800c944 <store_xdir+0x13c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c91c:	8931      	ldrh	r1, [r6, #8]
 800c91e:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
 800c922:	d9e2      	bls.n	800c8ea <store_xdir+0xe2>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c924:	3640      	adds	r6, #64	; 0x40
		dirb += SZDIRE;
 800c926:	3420      	adds	r4, #32
	dp->dptr = ofs;						/* Current entry */
 800c928:	632b      	str	r3, [r5, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c92a:	4416      	add	r6, r2
 800c92c:	63ee      	str	r6, [r5, #60]	; 0x3c
	while (res == FR_OK) {
 800c92e:	e7a0      	b.n	800c872 <store_xdir+0x6a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800c930:	2301      	movs	r3, #1
 800c932:	7870      	ldrb	r0, [r6, #1]
 800c934:	9101      	str	r1, [sp, #4]
 800c936:	f7fe f969 	bl	800ac0c <disk_write>
 800c93a:	9901      	ldr	r1, [sp, #4]
 800c93c:	b338      	cbz	r0, 800c98e <store_xdir+0x186>
 800c93e:	f04f 0801 	mov.w	r8, #1
 800c942:	e7aa      	b.n	800c89a <store_xdir+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c944:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 800c948:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c94c:	ea1c 0b00 	ands.w	fp, ip, r0
 800c950:	d1e8      	bne.n	800c924 <store_xdir+0x11c>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c952:	4628      	mov	r0, r5
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	f7fe fb9b 	bl	800b090 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c95a:	2801      	cmp	r0, #1
 800c95c:	d92b      	bls.n	800c9b6 <store_xdir+0x1ae>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c95e:	1c43      	adds	r3, r0, #1
 800c960:	d0ed      	beq.n	800c93e <store_xdir+0x136>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c962:	6a32      	ldr	r2, [r6, #32]
 800c964:	4290      	cmp	r0, r2
 800c966:	d2c0      	bcs.n	800c8ea <store_xdir+0xe2>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c968:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800c96a:	6368      	str	r0, [r5, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800c96c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	4290      	cmp	r0, r2
 800c972:	d203      	bcs.n	800c97c <store_xdir+0x174>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800c974:	8971      	ldrh	r1, [r6, #10]
 800c976:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800c978:	fb00 2b01 	mla	fp, r0, r1, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c97c:	89b1      	ldrh	r1, [r6, #12]
 800c97e:	46da      	mov	sl, fp
				dp->sect = clst2sect(fs, clst);
 800c980:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c984:	fbb3 f2f1 	udiv	r2, r3, r1
 800c988:	fb01 3212 	mls	r2, r1, r2, r3
 800c98c:	e7ca      	b.n	800c924 <store_xdir+0x11c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800c98e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
			fs->wflag = 0;	/* Clear window dirty flag */
 800c990:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800c992:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800c994:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c996:	1ac3      	subs	r3, r0, r3
 800c998:	4293      	cmp	r3, r2
 800c99a:	f4bf af73 	bcs.w	800c884 <store_xdir+0x7c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800c99e:	78f3      	ldrb	r3, [r6, #3]
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	f47f af6f 	bne.w	800c884 <store_xdir+0x7c>
 800c9a6:	4402      	add	r2, r0
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	7870      	ldrb	r0, [r6, #1]
 800c9ac:	9101      	str	r1, [sp, #4]
 800c9ae:	f7fe f92d 	bl	800ac0c <disk_write>
 800c9b2:	9901      	ldr	r1, [sp, #4]
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c9b4:	e766      	b.n	800c884 <store_xdir+0x7c>
 800c9b6:	f04f 0802 	mov.w	r8, #2
 800c9ba:	e76e      	b.n	800c89a <store_xdir+0x92>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c9bc:	2802      	cmp	r0, #2
 800c9be:	bf28      	it	cs
 800c9c0:	f04f 0802 	movcs.w	r8, #2
 800c9c4:	fa5f f888 	uxtb.w	r8, r8
 800c9c8:	e767      	b.n	800c89a <store_xdir+0x92>
 800c9ca:	bf00      	nop

0800c9cc <create_chain>:
{
 800c9cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800c9d2:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800c9d4:	4689      	mov	r9, r1
 800c9d6:	2900      	cmp	r1, #0
 800c9d8:	f040 80d3 	bne.w	800cb82 <create_chain+0x1b6>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800c9dc:	69af      	ldr	r7, [r5, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c9de:	b30f      	cbz	r7, 800ca24 <create_chain+0x58>
 800c9e0:	6a2b      	ldr	r3, [r5, #32]
 800c9e2:	42bb      	cmp	r3, r7
 800c9e4:	bf98      	it	ls
 800c9e6:	2701      	movls	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800c9e8:	69eb      	ldr	r3, [r5, #28]
 800c9ea:	b1fb      	cbz	r3, 800ca2c <create_chain+0x60>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c9ec:	782b      	ldrb	r3, [r5, #0]
 800c9ee:	2b04      	cmp	r3, #4
 800c9f0:	f000 8115 	beq.w	800cc1e <create_chain+0x252>
		if (scl == clst) {						/* Stretching an existing chain? */
 800c9f4:	454f      	cmp	r7, r9
 800c9f6:	f000 80f9 	beq.w	800cbec <create_chain+0x220>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800c9fa:	6a2b      	ldr	r3, [r5, #32]
 800c9fc:	463c      	mov	r4, r7
				ncl++;							/* Next cluster */
 800c9fe:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ca00:	429c      	cmp	r4, r3
 800ca02:	d353      	bcc.n	800caac <create_chain+0xe0>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800ca04:	2f01      	cmp	r7, #1
 800ca06:	d011      	beq.n	800ca2c <create_chain+0x60>
	FATFS *fs = obj->fs;
 800ca08:	f8d8 6000 	ldr.w	r6, [r8]
					ncl = 2;
 800ca0c:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca0e:	6a33      	ldr	r3, [r6, #32]
 800ca10:	42a3      	cmp	r3, r4
 800ca12:	d94f      	bls.n	800cab4 <create_chain+0xe8>
		switch (fs->fs_type) {
 800ca14:	7833      	ldrb	r3, [r6, #0]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	2b03      	cmp	r3, #3
 800ca1a:	d84b      	bhi.n	800cab4 <create_chain+0xe8>
 800ca1c:	e8df f003 	tbb	[pc, r3]
 800ca20:	0a4e8da1 	.word	0x0a4e8da1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800ca24:	69eb      	ldr	r3, [r5, #28]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca26:	2701      	movs	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1df      	bne.n	800c9ec <create_chain+0x20>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800ca2c:	2400      	movs	r4, #0
}
 800ca2e:	4620      	mov	r0, r4
 800ca30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800ca34:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 800ca38:	ea50 0301 	orrs.w	r3, r0, r1
 800ca3c:	f000 80ad 	beq.w	800cb9a <create_chain+0x1ce>
 800ca40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f000 80a8 	beq.w	800cb9a <create_chain+0x1ce>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ca4a:	eba4 0a03 	sub.w	sl, r4, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800ca4e:	f898 3007 	ldrb.w	r3, [r8, #7]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800ca52:	89b2      	ldrh	r2, [r6, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800ca54:	2b02      	cmp	r3, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800ca56:	f8b6 b00a 	ldrh.w	fp, [r6, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800ca5a:	f000 8187 	beq.w	800cd6c <create_chain+0x3a0>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	f000 816e 	beq.w	800cd40 <create_chain+0x374>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ca64:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800ca68:	b9d3      	cbnz	r3, 800caa0 <create_chain+0xd4>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca6a:	0893      	lsrs	r3, r2, #2
 800ca6c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800ca6e:	4630      	mov	r0, r6
 800ca70:	fbb4 f3f3 	udiv	r3, r4, r3
 800ca74:	4419      	add	r1, r3
 800ca76:	f7fe fa3b 	bl	800aef0 <move_window>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d17c      	bne.n	800cb78 <create_chain+0x1ac>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ca7e:	00a3      	lsls	r3, r4, #2
 800ca80:	89b2      	ldrh	r2, [r6, #12]
 800ca82:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca86:	fb02 3311 	mls	r3, r2, r1, r3
	rv = rv << 8 | ptr[0];
 800ca8a:	4433      	add	r3, r6
 800ca8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ca8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				if (cs == 0) break;				/* Found a free cluster? */
 800ca92:	b353      	cbz	r3, 800caea <create_chain+0x11e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	f000 81bc 	beq.w	800ce12 <create_chain+0x446>
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	f000 81b9 	beq.w	800ce12 <create_chain+0x446>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800caa0:	42a7      	cmp	r7, r4
 800caa2:	d0c3      	beq.n	800ca2c <create_chain+0x60>
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800caa4:	6a2b      	ldr	r3, [r5, #32]
				ncl++;							/* Next cluster */
 800caa6:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800caa8:	429c      	cmp	r4, r3
 800caaa:	d2ab      	bcs.n	800ca04 <create_chain+0x38>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800caac:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 800caae:	f8d8 6000 	ldr.w	r6, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cab2:	d8ac      	bhi.n	800ca0e <create_chain+0x42>
		switch (fs->fs_type) {
 800cab4:	2401      	movs	r4, #1
}
 800cab6:	4620      	mov	r0, r4
 800cab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cabc:	89b3      	ldrh	r3, [r6, #12]
 800cabe:	4630      	mov	r0, r6
 800cac0:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800cac2:	089b      	lsrs	r3, r3, #2
 800cac4:	fbb4 f3f3 	udiv	r3, r4, r3
 800cac8:	4419      	add	r1, r3
 800caca:	f7fe fa11 	bl	800aef0 <move_window>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d152      	bne.n	800cb78 <create_chain+0x1ac>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800cad2:	00a3      	lsls	r3, r4, #2
 800cad4:	89b2      	ldrh	r2, [r6, #12]
 800cad6:	fbb3 f1f2 	udiv	r1, r3, r2
 800cada:	fb02 3311 	mls	r3, r2, r1, r3
	rv = rv << 8 | ptr[0];
 800cade:	4433      	add	r3, r6
 800cae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800cae2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
				if (cs == 0) break;				/* Found a free cluster? */
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1d4      	bne.n	800ca94 <create_chain+0xc8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800caea:	6a2b      	ldr	r3, [r5, #32]
 800caec:	42a3      	cmp	r3, r4
 800caee:	d9e1      	bls.n	800cab4 <create_chain+0xe8>
 800caf0:	f04f 32ff 	mov.w	r2, #4294967295
 800caf4:	4621      	mov	r1, r4
 800caf6:	4628      	mov	r0, r5
 800caf8:	f7fe fa30 	bl	800af5c <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800cafc:	b968      	cbnz	r0, 800cb1a <create_chain+0x14e>
 800cafe:	f1b9 0f00 	cmp.w	r9, #0
 800cb02:	d00a      	beq.n	800cb1a <create_chain+0x14e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cb04:	f1b9 0f01 	cmp.w	r9, #1
 800cb08:	d0d4      	beq.n	800cab4 <create_chain+0xe8>
 800cb0a:	6a2b      	ldr	r3, [r5, #32]
 800cb0c:	4599      	cmp	r9, r3
 800cb0e:	d2d1      	bcs.n	800cab4 <create_chain+0xe8>
 800cb10:	4622      	mov	r2, r4
 800cb12:	4649      	mov	r1, r9
 800cb14:	4628      	mov	r0, r5
 800cb16:	f7fe fa21 	bl	800af5c <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	f040 8117 	bne.w	800cd4e <create_chain+0x382>
		fs->last_clst = ncl;
 800cb20:	61ac      	str	r4, [r5, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cb22:	e9d5 2307 	ldrd	r2, r3, [r5, #28]
 800cb26:	3b02      	subs	r3, #2
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d801      	bhi.n	800cb30 <create_chain+0x164>
 800cb2c:	3a01      	subs	r2, #1
 800cb2e:	61ea      	str	r2, [r5, #28]
		fs->fsi_flag |= 1;
 800cb30:	796b      	ldrb	r3, [r5, #5]
 800cb32:	f043 0301 	orr.w	r3, r3, #1
 800cb36:	716b      	strb	r3, [r5, #5]
 800cb38:	e020      	b.n	800cb7c <create_chain+0x1b0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb3a:	89b3      	ldrh	r3, [r6, #12]
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800cb40:	085b      	lsrs	r3, r3, #1
 800cb42:	fbb4 f3f3 	udiv	r3, r4, r3
 800cb46:	4419      	add	r1, r3
 800cb48:	f7fe f9d2 	bl	800aef0 <move_window>
 800cb4c:	b9a0      	cbnz	r0, 800cb78 <create_chain+0x1ac>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800cb4e:	0063      	lsls	r3, r4, #1
 800cb50:	89b2      	ldrh	r2, [r6, #12]
 800cb52:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb56:	fb02 3311 	mls	r3, r2, r1, r3
 800cb5a:	4433      	add	r3, r6
 800cb5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
			break;
 800cb60:	e797      	b.n	800ca92 <create_chain+0xc6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb62:	89b3      	ldrh	r3, [r6, #12]
			bc = (UINT)clst; bc += bc / 2;
 800cb64:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb68:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	fbba f3f3 	udiv	r3, sl, r3
 800cb70:	4419      	add	r1, r3
 800cb72:	f7fe f9bd 	bl	800aef0 <move_window>
 800cb76:	b1b0      	cbz	r0, 800cba6 <create_chain+0x1da>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb78:	f04f 34ff 	mov.w	r4, #4294967295
}
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb82:	f7fe fa85 	bl	800b090 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
 800cb86:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb88:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 800cb8a:	d993      	bls.n	800cab4 <create_chain+0xe8>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800cb8c:	1c46      	adds	r6, r0, #1
 800cb8e:	d0f3      	beq.n	800cb78 <create_chain+0x1ac>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb90:	6a2b      	ldr	r3, [r5, #32]
 800cb92:	4283      	cmp	r3, r0
 800cb94:	d8f2      	bhi.n	800cb7c <create_chain+0x1b0>
 800cb96:	464f      	mov	r7, r9
 800cb98:	e726      	b.n	800c9e8 <create_chain+0x1c>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800cb9a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d188      	bne.n	800cab4 <create_chain+0xe8>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800cba2:	89b2      	ldrh	r2, [r6, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800cba4:	e75e      	b.n	800ca64 <create_chain+0x98>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800cba6:	89b1      	ldrh	r1, [r6, #12]
 800cba8:	f10a 0b01 	add.w	fp, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800cbae:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800cbb0:	fbba f2f1 	udiv	r2, sl, r1
 800cbb4:	fb01 aa12 	mls	sl, r1, r2, sl
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbb8:	fbbb f1f1 	udiv	r1, fp, r1
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800cbbc:	44b2      	add	sl, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbbe:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800cbc0:	f89a a040 	ldrb.w	sl, [sl, #64]	; 0x40
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbc4:	f7fe f994 	bl	800aef0 <move_window>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d1d5      	bne.n	800cb78 <create_chain+0x1ac>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800cbcc:	89b3      	ldrh	r3, [r6, #12]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800cbce:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800cbd0:	fbbb f2f3 	udiv	r2, fp, r3
 800cbd4:	fb03 bb12 	mls	fp, r3, r2, fp
 800cbd8:	44b3      	add	fp, r6
 800cbda:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 800cbde:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800cbe2:	bf4c      	ite	mi
 800cbe4:	091b      	lsrmi	r3, r3, #4
 800cbe6:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
 800cbea:	e752      	b.n	800ca92 <create_chain+0xc6>
			if (ncl >= fs->n_fatent) ncl = 2;
 800cbec:	6a2b      	ldr	r3, [r5, #32]
			ncl = scl + 1;						/* Test if next cluster is free */
 800cbee:	1c7e      	adds	r6, r7, #1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800cbf0:	4640      	mov	r0, r8
			if (ncl >= fs->n_fatent) ncl = 2;
 800cbf2:	42b3      	cmp	r3, r6
 800cbf4:	bf98      	it	ls
 800cbf6:	2602      	movls	r6, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	f7fe fa49 	bl	800b090 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800cbfe:	2801      	cmp	r0, #1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800cc00:	4604      	mov	r4, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800cc02:	d0bb      	beq.n	800cb7c <create_chain+0x1b0>
 800cc04:	1c60      	adds	r0, r4, #1
 800cc06:	d0b9      	beq.n	800cb7c <create_chain+0x1b0>
			if (cs != 0) {						/* Not free? */
 800cc08:	2c00      	cmp	r4, #0
 800cc0a:	f040 8090 	bne.w	800cd2e <create_chain+0x362>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800cc0e:	2e00      	cmp	r6, #0
 800cc10:	f43f aef3 	beq.w	800c9fa <create_chain+0x2e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cc14:	2e01      	cmp	r6, #1
 800cc16:	f43f af4d 	beq.w	800cab4 <create_chain+0xe8>
 800cc1a:	4634      	mov	r4, r6
 800cc1c:	e765      	b.n	800caea <create_chain+0x11e>
	if (clst >= fs->n_fatent - 2) clst = 0;
 800cc1e:	6a2b      	ldr	r3, [r5, #32]
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800cc20:	f1a7 0a02 	sub.w	sl, r7, #2
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cc24:	89aa      	ldrh	r2, [r5, #12]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800cc26:	3b02      	subs	r3, #2
 800cc28:	459a      	cmp	sl, r3
 800cc2a:	bf28      	it	cs
 800cc2c:	f04f 0a00 	movcs.w	sl, #0
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cc30:	4656      	mov	r6, sl
 800cc32:	ea4f 0bd6 	mov.w	fp, r6, lsr #3
 800cc36:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800cc38:	4628      	mov	r0, r5
 800cc3a:	fbbb f2f2 	udiv	r2, fp, r2
 800cc3e:	4411      	add	r1, r2
 800cc40:	f7fe f956 	bl	800aef0 <move_window>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d197      	bne.n	800cb78 <create_chain+0x1ac>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800cc48:	89aa      	ldrh	r2, [r5, #12]
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	f006 0307 	and.w	r3, r6, #7
 800cc50:	fa01 f303 	lsl.w	r3, r1, r3
 800cc54:	fbbb f1f2 	udiv	r1, fp, r2
 800cc58:	fb02 bc11 	mls	ip, r2, r1, fp
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cc5c:	6a29      	ldr	r1, [r5, #32]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800cc5e:	b2db      	uxtb	r3, r3
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cc60:	eb05 000c 	add.w	r0, r5, ip
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cc64:	3902      	subs	r1, #2
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cc66:	f890 e040 	ldrb.w	lr, [r0, #64]	; 0x40
 800cc6a:	f1ba 0f00 	cmp.w	sl, #0
 800cc6e:	d03d      	beq.n	800ccec <create_chain+0x320>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cc70:	1c70      	adds	r0, r6, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cc72:	ea03 040e 	and.w	r4, r3, lr
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cc76:	4281      	cmp	r1, r0
 800cc78:	d841      	bhi.n	800ccfe <create_chain+0x332>
				if (bv == 0) {	/* Is it a free cluster? */
 800cc7a:	2c00      	cmp	r4, #0
 800cc7c:	d14a      	bne.n	800cd14 <create_chain+0x348>
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cc7e:	3003      	adds	r0, #3
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800cc80:	f106 0402 	add.w	r4, r6, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cc84:	f63f af7a 	bhi.w	800cb7c <create_chain+0x1b0>
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800cc88:	08f3      	lsrs	r3, r6, #3
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800cc8a:	f04f 0a01 	mov.w	sl, #1
 800cc8e:	f006 0607 	and.w	r6, r6, #7
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cc92:	4628      	mov	r0, r5
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800cc94:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc98:	fb02 3b11 	mls	fp, r2, r1, r3
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800cc9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800cc9e:	fa0a f606 	lsl.w	r6, sl, r6
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cca2:	4419      	add	r1, r3
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800cca4:	b2f6      	uxtb	r6, r6
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cca6:	f7fe f923 	bl	800aef0 <move_window>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	f47f af64 	bne.w	800cb78 <create_chain+0x1ac>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800ccb0:	eb05 030b 	add.w	r3, r5, fp
 800ccb4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ccb8:	4216      	tst	r6, r2
 800ccba:	f47f aefb 	bne.w	800cab4 <create_chain+0xe8>
				fs->win[i] ^= bm;	/* Flip the bit */
 800ccbe:	4056      	eors	r6, r2
 800ccc0:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
				fs->wflag = 1;
 800ccc4:	f885 a004 	strb.w	sl, [r5, #4]
		if (clst == 0) {							/* Is it a new chain? */
 800ccc8:	f1b9 0f00 	cmp.w	r9, #0
 800cccc:	d15e      	bne.n	800cd8c <create_chain+0x3c0>
			obj->stat = 2;							/* Set status 'contiguous' */
 800ccce:	2302      	movs	r3, #2
 800ccd0:	f888 3007 	strb.w	r3, [r8, #7]
 800ccd4:	e724      	b.n	800cb20 <create_chain+0x154>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ccd6:	005b      	lsls	r3, r3, #1
				if (bv == 0) {	/* Is it a free cluster? */
 800ccd8:	f1bb 0f00 	cmp.w	fp, #0
 800ccdc:	d0cf      	beq.n	800cc7e <create_chain+0x2b2>
				if (val == clst) return 0;	/* All cluster scanned? */
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f43f aea4 	beq.w	800ca2c <create_chain+0x60>
			} while (bm != 0);
 800cce4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800cce8:	d035      	beq.n	800cd56 <create_chain+0x38a>
			bm = 1;
 800ccea:	4606      	mov	r6, r0
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ccec:	1c70      	adds	r0, r6, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ccee:	ea03 0b0e 	and.w	fp, r3, lr
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ccf2:	4288      	cmp	r0, r1
 800ccf4:	d3ef      	bcc.n	800ccd6 <create_chain+0x30a>
				if (bv == 0) {	/* Is it a free cluster? */
 800ccf6:	f1bb 0f00 	cmp.w	fp, #0
 800ccfa:	d0c0      	beq.n	800cc7e <create_chain+0x2b2>
 800ccfc:	e696      	b.n	800ca2c <create_chain+0x60>
 800ccfe:	2c00      	cmp	r4, #0
 800cd00:	d0bd      	beq.n	800cc7e <create_chain+0x2b2>
				if (val == clst) return 0;	/* All cluster scanned? */
 800cd02:	4582      	cmp	sl, r0
 800cd04:	f43f ae92 	beq.w	800ca2c <create_chain+0x60>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cd08:	005b      	lsls	r3, r3, #1
			} while (bm != 0);
 800cd0a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800cd0e:	d003      	beq.n	800cd18 <create_chain+0x34c>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cd10:	4606      	mov	r6, r0
 800cd12:	e7ad      	b.n	800cc70 <create_chain+0x2a4>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800cd14:	4694      	mov	ip, r2
				if (bv == 0) {	/* Is it a free cluster? */
 800cd16:	2000      	movs	r0, #0
		} while (++i < SS(fs));
 800cd18:	f10c 0c01 	add.w	ip, ip, #1
 800cd1c:	4562      	cmp	r2, ip
 800cd1e:	d933      	bls.n	800cd88 <create_chain+0x3bc>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cd20:	eb05 030c 	add.w	r3, r5, ip
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cd24:	4606      	mov	r6, r0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cd26:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
			bm = 1;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e7a0      	b.n	800cc70 <create_chain+0x2a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800cd2e:	69aa      	ldr	r2, [r5, #24]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800cd30:	6a2b      	ldr	r3, [r5, #32]
 800cd32:	2a01      	cmp	r2, #1
 800cd34:	f67f ae62 	bls.w	800c9fc <create_chain+0x30>
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	bf88      	it	hi
 800cd3c:	4617      	movhi	r7, r2
 800cd3e:	e65d      	b.n	800c9fc <create_chain+0x30>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800cd40:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800cd44:	459a      	cmp	sl, r3
 800cd46:	f4bf ae8d 	bcs.w	800ca64 <create_chain+0x98>
					val = clst + 1; 	/* Generate the value */
 800cd4a:	1c63      	adds	r3, r4, #1
					break;
 800cd4c:	e6a1      	b.n	800ca92 <create_chain+0xc6>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cd4e:	2801      	cmp	r0, #1
 800cd50:	f43f af12 	beq.w	800cb78 <create_chain+0x1ac>
 800cd54:	e6ae      	b.n	800cab4 <create_chain+0xe8>
		} while (++i < SS(fs));
 800cd56:	f10c 0c01 	add.w	ip, ip, #1
 800cd5a:	4562      	cmp	r2, ip
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cd5c:	eb05 030c 	add.w	r3, r5, ip
		} while (++i < SS(fs));
 800cd60:	d912      	bls.n	800cd88 <create_chain+0x3bc>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cd62:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
			bm = 1;
 800cd66:	4606      	mov	r6, r0
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e7bf      	b.n	800ccec <create_chain+0x320>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800cd6c:	3801      	subs	r0, #1
 800cd6e:	f04f 0300 	mov.w	r3, #0
 800cd72:	f161 0100 	sbc.w	r1, r1, #0
 800cd76:	f7f3 fab7 	bl	80002e8 <__aeabi_uldivmod>
 800cd7a:	fbb0 f0fb 	udiv	r0, r0, fp
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800cd7e:	4582      	cmp	sl, r0
 800cd80:	f63f ae98 	bhi.w	800cab4 <create_chain+0xe8>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800cd84:	d1e1      	bne.n	800cd4a <create_chain+0x37e>
 800cd86:	e68b      	b.n	800caa0 <create_chain+0xd4>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cd88:	4606      	mov	r6, r0
 800cd8a:	e752      	b.n	800cc32 <create_chain+0x266>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800cd8c:	f898 3007 	ldrb.w	r3, [r8, #7]
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d02f      	beq.n	800cdf4 <create_chain+0x428>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800cd94:	f109 0301 	add.w	r3, r9, #1
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	d026      	beq.n	800cdea <create_chain+0x41e>
				if (obj->n_frag == 0) obj->n_frag = 1;
 800cd9c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800cda0:	b913      	cbnz	r3, 800cda8 <create_chain+0x3dc>
 800cda2:	2301      	movs	r3, #1
 800cda4:	f8c8 301c 	str.w	r3, [r8, #28]
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800cda8:	eba9 0203 	sub.w	r2, r9, r3
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	f8d8 0000 	ldr.w	r0, [r8]
 800cdb2:	f102 0101 	add.w	r1, r2, #1
 800cdb6:	f102 0202 	add.w	r2, r2, #2
 800cdba:	bf08      	it	eq
 800cdbc:	4622      	moveq	r2, r4
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cdbe:	2901      	cmp	r1, #1
 800cdc0:	f67f ae78 	bls.w	800cab4 <create_chain+0xe8>
 800cdc4:	6a03      	ldr	r3, [r0, #32]
 800cdc6:	4299      	cmp	r1, r3
 800cdc8:	f4bf ae74 	bcs.w	800cab4 <create_chain+0xe8>
 800cdcc:	f7fe f8c6 	bl	800af5c <put_fat.part.0>
		if (res != FR_OK) return res;
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d1bc      	bne.n	800cd4e <create_chain+0x382>
		obj->n_frag--;
 800cdd4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	f8c8 301c 	str.w	r3, [r8, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1e2      	bne.n	800cda8 <create_chain+0x3dc>
				if (res == FR_OK) obj->n_frag = 1;
 800cde2:	2301      	movs	r3, #1
 800cde4:	f8c8 301c 	str.w	r3, [r8, #28]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cde8:	e69a      	b.n	800cb20 <create_chain+0x154>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800cdea:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800cdee:	b173      	cbz	r3, 800ce0e <create_chain+0x442>
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	e7f7      	b.n	800cde4 <create_chain+0x418>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800cdf4:	1c7b      	adds	r3, r7, #1
 800cdf6:	42a3      	cmp	r3, r4
 800cdf8:	f43f ae92 	beq.w	800cb20 <create_chain+0x154>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800cdfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce00:	1afb      	subs	r3, r7, r3
 800ce02:	f8c8 3018 	str.w	r3, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800ce06:	2303      	movs	r3, #3
 800ce08:	f888 3007 	strb.w	r3, [r8, #7]
 800ce0c:	e7c2      	b.n	800cd94 <create_chain+0x3c8>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800ce0e:	2302      	movs	r3, #2
 800ce10:	e7e8      	b.n	800cde4 <create_chain+0x418>
 800ce12:	461c      	mov	r4, r3
 800ce14:	e6b2      	b.n	800cb7c <create_chain+0x1b0>
 800ce16:	bf00      	nop

0800ce18 <dir_alloc>:
{
 800ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1c:	468a      	mov	sl, r1
 800ce1e:	b083      	sub	sp, #12
	res = dir_sdi(dp, 0);
 800ce20:	2100      	movs	r1, #0
{
 800ce22:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800ce24:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800ce26:	f7ff f82f 	bl	800be88 <dir_sdi>
	if (res == FR_OK) {
 800ce2a:	4681      	mov	r9, r0
 800ce2c:	b130      	cbz	r0, 800ce3c <dir_alloc+0x24>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ce2e:	2804      	cmp	r0, #4
 800ce30:	f000 80bc 	beq.w	800cfac <dir_alloc+0x194>
}
 800ce34:	4648      	mov	r0, r9
 800ce36:	b003      	add	sp, #12
 800ce38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 800ce3c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		n = 0;
 800ce3e:	4680      	mov	r8, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 800ce40:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800ce42:	f106 0b40 	add.w	fp, r6, #64	; 0x40
	if (sect != fs->winsect) {	/* Window offset changed? */
 800ce46:	42ba      	cmp	r2, r7
 800ce48:	d013      	beq.n	800ce72 <dir_alloc+0x5a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800ce4a:	7933      	ldrb	r3, [r6, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d152      	bne.n	800cef6 <dir_alloc+0xde>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800ce50:	2301      	movs	r3, #1
 800ce52:	463a      	mov	r2, r7
 800ce54:	4659      	mov	r1, fp
 800ce56:	7870      	ldrb	r0, [r6, #1]
 800ce58:	f7fd fec8 	bl	800abec <disk_read>
 800ce5c:	b140      	cbz	r0, 800ce70 <dir_alloc+0x58>
				res = FR_DISK_ERR;
 800ce5e:	f04f 0901 	mov.w	r9, #1
			fs->winsect = sect;
 800ce62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ce66:	4648      	mov	r0, r9
			fs->winsect = sect;
 800ce68:	63f3      	str	r3, [r6, #60]	; 0x3c
}
 800ce6a:	b003      	add	sp, #12
 800ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
 800ce70:	63f7      	str	r7, [r6, #60]	; 0x3c
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800ce72:	7833      	ldrb	r3, [r6, #0]
 800ce74:	2b04      	cmp	r3, #4
 800ce76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce78:	d031      	beq.n	800cede <dir_alloc+0xc6>
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2be5      	cmp	r3, #229	; 0xe5
 800ce7e:	d032      	beq.n	800cee6 <dir_alloc+0xce>
 800ce80:	fab3 f283 	clz	r2, r3
 800ce84:	0952      	lsrs	r2, r2, #5
 800ce86:	b373      	cbz	r3, 800cee6 <dir_alloc+0xce>
				n = 0;				/* Not a free entry, restart to search */
 800ce88:	4690      	mov	r8, r2
	FATFS *fs = dp->obj.fs;
 800ce8a:	6825      	ldr	r5, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ce8e:	782a      	ldrb	r2, [r5, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce90:	3320      	adds	r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ce92:	2a04      	cmp	r2, #4
 800ce94:	bf0c      	ite	eq
 800ce96:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800ce9a:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d304      	bcc.n	800ceac <dir_alloc+0x94>
 800cea2:	2300      	movs	r3, #0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cea4:	f04f 0907 	mov.w	r9, #7
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800cea8:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800ceaa:	e7c3      	b.n	800ce34 <dir_alloc+0x1c>
 800ceac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ceae:	2900      	cmp	r1, #0
 800ceb0:	d07c      	beq.n	800cfac <dir_alloc+0x194>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ceb2:	89aa      	ldrh	r2, [r5, #12]
 800ceb4:	fbb3 fcf2 	udiv	ip, r3, r2
 800ceb8:	fb02 301c 	mls	r0, r2, ip, r3
 800cebc:	b940      	cbnz	r0, 800ced0 <dir_alloc+0xb8>
		dp->sect++;				/* Next sector */
 800cebe:	3101      	adds	r1, #1
		if (dp->clust == 0) {	/* Static table */
 800cec0:	6b62      	ldr	r2, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800cec2:	63a1      	str	r1, [r4, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800cec4:	bb7a      	cbnz	r2, 800cf26 <dir_alloc+0x10e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cec6:	892a      	ldrh	r2, [r5, #8]
 800cec8:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800cecc:	d9e9      	bls.n	800cea2 <dir_alloc+0x8a>
	if (sect != fs->winsect) {	/* Window offset changed? */
 800cece:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ced0:	3540      	adds	r5, #64	; 0x40
 800ced2:	463a      	mov	r2, r7
	dp->dptr = ofs;						/* Current entry */
 800ced4:	6323      	str	r3, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ced6:	460f      	mov	r7, r1
 800ced8:	4405      	add	r5, r0
 800ceda:	63e5      	str	r5, [r4, #60]	; 0x3c
		} while (res == FR_OK);
 800cedc:	e7b3      	b.n	800ce46 <dir_alloc+0x2e>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800cede:	f993 3000 	ldrsb.w	r3, [r3]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	db04      	blt.n	800cef0 <dir_alloc+0xd8>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800cee6:	f108 0801 	add.w	r8, r8, #1
 800ceea:	45d0      	cmp	r8, sl
 800ceec:	d1cd      	bne.n	800ce8a <dir_alloc+0x72>
 800ceee:	e7a1      	b.n	800ce34 <dir_alloc+0x1c>
				n = 0;				/* Not a free entry, restart to search */
 800cef0:	f04f 0800 	mov.w	r8, #0
 800cef4:	e7c9      	b.n	800ce8a <dir_alloc+0x72>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800cef6:	2301      	movs	r3, #1
 800cef8:	4659      	mov	r1, fp
 800cefa:	7870      	ldrb	r0, [r6, #1]
 800cefc:	f7fd fe86 	bl	800ac0c <disk_write>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d14b      	bne.n	800cf9c <dir_alloc+0x184>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800cf04:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 800cf06:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800cf08:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800cf0a:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800cf0c:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d29e      	bcs.n	800ce50 <dir_alloc+0x38>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800cf12:	78f3      	ldrb	r3, [r6, #3]
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d19b      	bne.n	800ce50 <dir_alloc+0x38>
 800cf18:	440a      	add	r2, r1
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4659      	mov	r1, fp
 800cf1e:	7870      	ldrb	r0, [r6, #1]
 800cf20:	f7fd fe74 	bl	800ac0c <disk_write>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cf24:	e794      	b.n	800ce50 <dir_alloc+0x38>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800cf26:	896f      	ldrh	r7, [r5, #10]
 800cf28:	3f01      	subs	r7, #1
 800cf2a:	ea17 0f0c 	tst.w	r7, ip
 800cf2e:	d1ce      	bne.n	800cece <dir_alloc+0xb6>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800cf30:	4611      	mov	r1, r2
 800cf32:	4620      	mov	r0, r4
 800cf34:	9301      	str	r3, [sp, #4]
 800cf36:	f7fe f8ab 	bl	800b090 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800cf3a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800cf3c:	4607      	mov	r7, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800cf3e:	9b01      	ldr	r3, [sp, #4]
 800cf40:	d92f      	bls.n	800cfa2 <dir_alloc+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf42:	1c42      	adds	r2, r0, #1
 800cf44:	d02a      	beq.n	800cf9c <dir_alloc+0x184>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800cf46:	6a2a      	ldr	r2, [r5, #32]
 800cf48:	4290      	cmp	r0, r2
 800cf4a:	d315      	bcc.n	800cf78 <dir_alloc+0x160>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cf4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf4e:	4620      	mov	r0, r4
 800cf50:	9301      	str	r3, [sp, #4]
 800cf52:	f7ff fd3b 	bl	800c9cc <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cf56:	4607      	mov	r7, r0
 800cf58:	b340      	cbz	r0, 800cfac <dir_alloc+0x194>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cf5a:	2801      	cmp	r0, #1
 800cf5c:	d021      	beq.n	800cfa2 <dir_alloc+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf5e:	1c43      	adds	r3, r0, #1
 800cf60:	d01c      	beq.n	800cf9c <dir_alloc+0x184>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800cf62:	4601      	mov	r1, r0
 800cf64:	4628      	mov	r0, r5
 800cf66:	f7fe f991 	bl	800b28c <dir_clear>
 800cf6a:	b9b8      	cbnz	r0, 800cf9c <dir_alloc+0x184>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800cf6c:	79e2      	ldrb	r2, [r4, #7]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cf6e:	9b01      	ldr	r3, [sp, #4]
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800cf70:	f042 0204 	orr.w	r2, r2, #4
 800cf74:	71e2      	strb	r2, [r4, #7]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cf76:	6a2a      	ldr	r2, [r5, #32]
 800cf78:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf7a:	6367      	str	r7, [r4, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800cf7c:	3f02      	subs	r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cf7e:	4297      	cmp	r7, r2
 800cf80:	d212      	bcs.n	800cfa8 <dir_alloc+0x190>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800cf82:	896a      	ldrh	r2, [r5, #10]
 800cf84:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800cf86:	fb07 1102 	mla	r1, r7, r2, r1
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf8a:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
	if (sect != fs->winsect) {	/* Window offset changed? */
 800cf8e:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
				dp->sect = clst2sect(fs, clst);
 800cf90:	63a1      	str	r1, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf92:	fbb3 f2fc 	udiv	r2, r3, ip
 800cf96:	fb0c 3012 	mls	r0, ip, r2, r3
 800cf9a:	e799      	b.n	800ced0 <dir_alloc+0xb8>
				res = FR_DISK_ERR;
 800cf9c:	f04f 0901 	mov.w	r9, #1
 800cfa0:	e748      	b.n	800ce34 <dir_alloc+0x1c>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800cfa2:	f04f 0902 	mov.w	r9, #2
 800cfa6:	e745      	b.n	800ce34 <dir_alloc+0x1c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	e7ee      	b.n	800cf8a <dir_alloc+0x172>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cfac:	f04f 0907 	mov.w	r9, #7
 800cfb0:	e740      	b.n	800ce34 <dir_alloc+0x1c>
 800cfb2:	bf00      	nop

0800cfb4 <dir_register>:
{
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cfb8:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
 800cfbc:	b099      	sub	sp, #100	; 0x64
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cfbe:	f013 0aa0 	ands.w	sl, r3, #160	; 0xa0
 800cfc2:	9301      	str	r3, [sp, #4]
 800cfc4:	f040 834d 	bne.w	800d662 <dir_register+0x6ae>
	FATFS *fs = dp->obj.fs;
 800cfc8:	f8d0 8000 	ldr.w	r8, [r0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800cfcc:	4605      	mov	r5, r0
 800cfce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cfd2:	881a      	ldrh	r2, [r3, #0]
 800cfd4:	2a00      	cmp	r2, #0
 800cfd6:	f000 83c6 	beq.w	800d766 <dir_register+0x7b2>
 800cfda:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800cfde:	f10a 0a01 	add.w	sl, sl, #1
 800cfe2:	2a00      	cmp	r2, #0
 800cfe4:	d1f9      	bne.n	800cfda <dir_register+0x26>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cfe6:	f898 3000 	ldrb.w	r3, [r8]
 800cfea:	2b04      	cmp	r3, #4
 800cfec:	f000 8344 	beq.w	800d678 <dir_register+0x6c4>
	memcpy(sn, dp->fn, 12);
 800cff0:	f105 0640 	add.w	r6, r5, #64	; 0x40
 800cff4:	ab04      	add	r3, sp, #16
 800cff6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800cffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cffe:	9b01      	ldr	r3, [sp, #4]
 800d000:	07d8      	lsls	r0, r3, #31
 800d002:	f140 81a4 	bpl.w	800d34e <dir_register+0x39a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d006:	2340      	movs	r3, #64	; 0x40
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800d008:	aa04      	add	r2, sp, #16
		for (n = 1; n < 100; n++) {
 800d00a:	2701      	movs	r7, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d00c:	f04f 0920 	mov.w	r9, #32
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d010:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800d014:	4633      	mov	r3, r6
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d016:	4cc9      	ldr	r4, [pc, #804]	; (800d33c <dir_register+0x388>)
		for (n = 1; n < 100; n++) {
 800d018:	46bc      	mov	ip, r7
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800d01a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d01c:	c303      	stmia	r3!, {r0, r1}
 800d01e:	f823 2b02 	strh.w	r2, [r3], #2
 800d022:	0c12      	lsrs	r2, r2, #16
 800d024:	701a      	strb	r2, [r3, #0]
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d026:	f00c 010f 	and.w	r1, ip, #15
 800d02a:	ea4f 121c 	mov.w	r2, ip, lsr #4
 800d02e:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 800d032:	2b39      	cmp	r3, #57	; 0x39
 800d034:	bf88      	it	hi
 800d036:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (i && seq);
 800d03a:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 800d03e:	f88d 300f 	strb.w	r3, [sp, #15]
	} while (i && seq);
 800d042:	f240 8294 	bls.w	800d56e <dir_register+0x5ba>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d046:	f002 000f 	and.w	r0, r2, #15
 800d04a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 800d04e:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 800d052:	2b39      	cmp	r3, #57	; 0x39
 800d054:	bf88      	it	hi
 800d056:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (i && seq);
 800d05a:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 800d05c:	f88d 300e 	strb.w	r3, [sp, #14]
	} while (i && seq);
 800d060:	f240 82b3 	bls.w	800d5ca <dir_register+0x616>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d064:	f001 000f 	and.w	r0, r1, #15
 800d068:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800d06c:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 800d070:	2b39      	cmp	r3, #57	; 0x39
 800d072:	bf88      	it	hi
 800d074:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (i && seq);
 800d078:	290f      	cmp	r1, #15
		ns[i--] = c;
 800d07a:	f88d 300d 	strb.w	r3, [sp, #13]
	} while (i && seq);
 800d07e:	f240 82b6 	bls.w	800d5ee <dir_register+0x63a>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d082:	f002 000f 	and.w	r0, r2, #15
 800d086:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800d08a:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 800d08e:	2b39      	cmp	r3, #57	; 0x39
 800d090:	bf88      	it	hi
 800d092:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (i && seq);
 800d096:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 800d098:	f88d 300c 	strb.w	r3, [sp, #12]
	} while (i && seq);
 800d09c:	f240 82b1 	bls.w	800d602 <dir_register+0x64e>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d0a0:	f001 020f 	and.w	r2, r1, #15
 800d0a4:	ea4f 501c 	mov.w	r0, ip, lsr #20
 800d0a8:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
 800d0ac:	2b39      	cmp	r3, #57	; 0x39
 800d0ae:	bf88      	it	hi
 800d0b0:	f102 0337 	addhi.w	r3, r2, #55	; 0x37
	} while (i && seq);
 800d0b4:	290f      	cmp	r1, #15
		ns[i--] = c;
 800d0b6:	f88d 300b 	strb.w	r3, [sp, #11]
	} while (i && seq);
 800d0ba:	f240 82ac 	bls.w	800d616 <dir_register+0x662>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d0be:	f000 010f 	and.w	r1, r0, #15
 800d0c2:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800d0c6:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800d0ca:	2a39      	cmp	r2, #57	; 0x39
 800d0cc:	bf88      	it	hi
 800d0ce:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (i && seq);
 800d0d2:	280f      	cmp	r0, #15
		ns[i--] = c;
 800d0d4:	f88d 200a 	strb.w	r2, [sp, #10]
	} while (i && seq);
 800d0d8:	f240 82ad 	bls.w	800d636 <dir_register+0x682>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d0dc:	f003 030f 	and.w	r3, r3, #15
 800d0e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9') c += 7;
 800d0e4:	2a39      	cmp	r2, #57	; 0x39
 800d0e6:	bf88      	it	hi
 800d0e8:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	ns[i] = '~';
 800d0ec:	237e      	movs	r3, #126	; 0x7e
 800d0ee:	f88d 3008 	strb.w	r3, [sp, #8]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d0f2:	2300      	movs	r3, #0
		ns[i--] = c;
 800d0f4:	f88d 2009 	strb.w	r2, [sp, #9]
	ns[i] = '~';
 800d0f8:	461a      	mov	r2, r3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d0fa:	f102 0160 	add.w	r1, r2, #96	; 0x60
 800d0fe:	18f0      	adds	r0, r6, r3
 800d100:	2a06      	cmp	r2, #6
 800d102:	f102 0c02 	add.w	ip, r2, #2
 800d106:	4469      	add	r1, sp
 800d108:	f103 0e02 	add.w	lr, r3, #2
 800d10c:	f811 bc58 	ldrb.w	fp, [r1, #-88]
 800d110:	f806 b003 	strb.w	fp, [r6, r3]
 800d114:	f811 bc57 	ldrb.w	fp, [r1, #-87]
 800d118:	f880 b001 	strb.w	fp, [r0, #1]
 800d11c:	f000 81f7 	beq.w	800d50e <dir_register+0x55a>
 800d120:	f10c 0160 	add.w	r1, ip, #96	; 0x60
	} while (j < 8);
 800d124:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d126:	f103 0003 	add.w	r0, r3, #3
 800d12a:	eb0d 0c01 	add.w	ip, sp, r1
 800d12e:	f81c 1c58 	ldrb.w	r1, [ip, #-88]
 800d132:	f806 100e 	strb.w	r1, [r6, lr]
 800d136:	f102 0103 	add.w	r1, r2, #3
	} while (j < 8);
 800d13a:	d03f      	beq.n	800d1bc <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d13c:	2908      	cmp	r1, #8
 800d13e:	f000 81f8 	beq.w	800d532 <dir_register+0x57e>
 800d142:	f102 0163 	add.w	r1, r2, #99	; 0x63
	} while (j < 8);
 800d146:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d148:	4469      	add	r1, sp
 800d14a:	f811 1c58 	ldrb.w	r1, [r1, #-88]
 800d14e:	5431      	strb	r1, [r6, r0]
 800d150:	f102 0104 	add.w	r1, r2, #4
 800d154:	f103 0004 	add.w	r0, r3, #4
	} while (j < 8);
 800d158:	d030      	beq.n	800d1bc <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d15a:	2908      	cmp	r1, #8
 800d15c:	f000 81f0 	beq.w	800d540 <dir_register+0x58c>
 800d160:	f102 0164 	add.w	r1, r2, #100	; 0x64
	} while (j < 8);
 800d164:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d166:	4469      	add	r1, sp
 800d168:	f811 1c58 	ldrb.w	r1, [r1, #-88]
 800d16c:	5431      	strb	r1, [r6, r0]
 800d16e:	f102 0105 	add.w	r1, r2, #5
 800d172:	f103 0005 	add.w	r0, r3, #5
	} while (j < 8);
 800d176:	d021      	beq.n	800d1bc <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d178:	2908      	cmp	r1, #8
 800d17a:	f000 81e8 	beq.w	800d54e <dir_register+0x59a>
 800d17e:	f102 0165 	add.w	r1, r2, #101	; 0x65
	} while (j < 8);
 800d182:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d184:	4469      	add	r1, sp
 800d186:	f811 1c58 	ldrb.w	r1, [r1, #-88]
 800d18a:	5431      	strb	r1, [r6, r0]
 800d18c:	f102 0106 	add.w	r1, r2, #6
 800d190:	f103 0006 	add.w	r0, r3, #6
	} while (j < 8);
 800d194:	d012      	beq.n	800d1bc <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d196:	2908      	cmp	r1, #8
 800d198:	f000 81e0 	beq.w	800d55c <dir_register+0x5a8>
 800d19c:	f102 0366 	add.w	r3, r2, #102	; 0x66
	} while (j < 8);
 800d1a0:	2806      	cmp	r0, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d1a2:	eb0d 0103 	add.w	r1, sp, r3
 800d1a6:	f811 3c58 	ldrb.w	r3, [r1, #-88]
 800d1aa:	5433      	strb	r3, [r6, r0]
	} while (j < 8);
 800d1ac:	d106      	bne.n	800d1bc <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d1ae:	2a00      	cmp	r2, #0
 800d1b0:	f040 81db 	bne.w	800d56a <dir_register+0x5b6>
 800d1b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d1b8:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f7fe ff8d 	bl	800c0dc <dir_find>
			if (res != FR_OK) break;
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	f040 80bc 	bne.w	800d340 <dir_register+0x38c>
		for (n = 1; n < 100; n++) {
 800d1c8:	3701      	adds	r7, #1
 800d1ca:	2f64      	cmp	r7, #100	; 0x64
 800d1cc:	f000 8437 	beq.w	800da3e <dir_register+0xa8a>
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800d1d0:	aa04      	add	r2, sp, #16
 800d1d2:	4633      	mov	r3, r6
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d1d4:	f8d8 c010 	ldr.w	ip, [r8, #16]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d1d8:	2f05      	cmp	r7, #5
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800d1da:	ca07      	ldmia	r2, {r0, r1, r2}
 800d1dc:	c303      	stmia	r3!, {r0, r1}
 800d1de:	f823 2b02 	strh.w	r2, [r3], #2
 800d1e2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d1e6:	701a      	strb	r2, [r3, #0]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d1e8:	f240 818f 	bls.w	800d50a <dir_register+0x556>
		while (*lfn) {	/* Create a CRC as hash value */
 800d1ec:	f8bc 3000 	ldrh.w	r3, [ip]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 818a 	beq.w	800d50a <dir_register+0x556>
				sreg = (sreg << 1) + (wc & 1);
 800d1f6:	f003 0101 	and.w	r1, r3, #1
 800d1fa:	4660      	mov	r0, ip
				wc >>= 1;
 800d1fc:	085a      	lsrs	r2, r3, #1
				sreg = (sreg << 1) + (wc & 1);
 800d1fe:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800d202:	f002 0e01 	and.w	lr, r2, #1
				wc >>= 1;
 800d206:	089a      	lsrs	r2, r3, #2
 800d208:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
				sreg = (sreg << 1) + (wc & 1);
 800d20c:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d210:	0409      	lsls	r1, r1, #16
				sreg = (sreg << 1) + (wc & 1);
 800d212:	f002 0201 	and.w	r2, r2, #1
 800d216:	f00c 0c01 	and.w	ip, ip, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d21a:	bf48      	it	mi
 800d21c:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 800d220:	0919      	lsrs	r1, r3, #4
				sreg = (sreg << 1) + (wc & 1);
 800d222:	eb02 024e 	add.w	r2, r2, lr, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d226:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sreg = (sreg << 1) + (wc & 1);
 800d22a:	f001 0101 	and.w	r1, r1, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d22e:	bf18      	it	ne
 800d230:	4062      	eorne	r2, r4
				sreg = (sreg << 1) + (wc & 1);
 800d232:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d236:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800d238:	ea4f 1253 	mov.w	r2, r3, lsr #5
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d23c:	bf48      	it	mi
 800d23e:	ea8c 0c04 	eormi.w	ip, ip, r4
				sreg = (sreg << 1) + (wc & 1);
 800d242:	f002 0201 	and.w	r2, r2, #1
 800d246:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d24a:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d24e:	ea4f 1c93 	mov.w	ip, r3, lsr #6
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d252:	bf18      	it	ne
 800d254:	4061      	eorne	r1, r4
				sreg = (sreg << 1) + (wc & 1);
 800d256:	f00c 0c01 	and.w	ip, ip, #1
 800d25a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d25e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800d260:	ea4f 11d3 	mov.w	r1, r3, lsr #7
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d264:	bf48      	it	mi
 800d266:	4062      	eormi	r2, r4
				sreg = (sreg << 1) + (wc & 1);
 800d268:	f001 0101 	and.w	r1, r1, #1
 800d26c:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d270:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800d272:	ea4f 2213 	mov.w	r2, r3, lsr #8
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d276:	bf48      	it	mi
 800d278:	ea8c 0c04 	eormi.w	ip, ip, r4
				sreg = (sreg << 1) + (wc & 1);
 800d27c:	f002 0201 	and.w	r2, r2, #1
 800d280:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d284:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d288:	ea4f 2c53 	mov.w	ip, r3, lsr #9
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d28c:	bf18      	it	ne
 800d28e:	4061      	eorne	r1, r4
				sreg = (sreg << 1) + (wc & 1);
 800d290:	f00c 0c01 	and.w	ip, ip, #1
 800d294:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d298:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800d29a:	ea4f 2193 	mov.w	r1, r3, lsr #10
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d29e:	bf48      	it	mi
 800d2a0:	4062      	eormi	r2, r4
				sreg = (sreg << 1) + (wc & 1);
 800d2a2:	f001 0101 	and.w	r1, r1, #1
 800d2a6:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2aa:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800d2ac:	ea4f 22d3 	mov.w	r2, r3, lsr #11
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2b0:	bf48      	it	mi
 800d2b2:	ea8c 0c04 	eormi.w	ip, ip, r4
				sreg = (sreg << 1) + (wc & 1);
 800d2b6:	f002 0201 	and.w	r2, r2, #1
 800d2ba:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2be:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d2c2:	ea4f 3c13 	mov.w	ip, r3, lsr #12
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2c6:	bf18      	it	ne
 800d2c8:	4061      	eorne	r1, r4
				sreg = (sreg << 1) + (wc & 1);
 800d2ca:	f00c 0c01 	and.w	ip, ip, #1
 800d2ce:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2d2:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800d2d4:	ea4f 3153 	mov.w	r1, r3, lsr #13
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2d8:	bf48      	it	mi
 800d2da:	4062      	eormi	r2, r4
				sreg = (sreg << 1) + (wc & 1);
 800d2dc:	f001 0101 	and.w	r1, r1, #1
 800d2e0:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2e4:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800d2e6:	ea4f 3293 	mov.w	r2, r3, lsr #14
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2ea:	bf48      	it	mi
 800d2ec:	ea8c 0c04 	eormi.w	ip, ip, r4
				sreg = (sreg << 1) + (wc & 1);
 800d2f0:	f002 0201 	and.w	r2, r2, #1
 800d2f4:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2f8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d2fc:	ea4f 3cd3 	mov.w	ip, r3, lsr #15
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d300:	bf18      	it	ne
 800d302:	4061      	eorne	r1, r4
				sreg = (sreg << 1) + (wc & 1);
 800d304:	eb02 0341 	add.w	r3, r2, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d308:	0409      	lsls	r1, r1, #16
 800d30a:	bf48      	it	mi
 800d30c:	4063      	eormi	r3, r4
				sreg = (sreg << 1) + (wc & 1);
 800d30e:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d312:	041a      	lsls	r2, r3, #16
		while (*lfn) {	/* Create a CRC as hash value */
 800d314:	f830 3f02 	ldrh.w	r3, [r0, #2]!
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d318:	bf48      	it	mi
 800d31a:	ea8c 0c04 	eormi.w	ip, ip, r4
		while (*lfn) {	/* Create a CRC as hash value */
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f43f ae81 	beq.w	800d026 <dir_register+0x72>
				sreg = (sreg << 1) + (wc & 1);
 800d324:	f003 0101 	and.w	r1, r3, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d328:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d32c:	ea4f 0253 	mov.w	r2, r3, lsr #1
				sreg = (sreg << 1) + (wc & 1);
 800d330:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d334:	bf18      	it	ne
 800d336:	4061      	eorne	r1, r4
 800d338:	e763      	b.n	800d202 <dir_register+0x24e>
 800d33a:	bf00      	nop
 800d33c:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d340:	2804      	cmp	r0, #4
 800d342:	4683      	mov	fp, r0
 800d344:	f040 80dd 	bne.w	800d502 <dir_register+0x54e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d348:	9b01      	ldr	r3, [sp, #4]
 800d34a:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d34e:	9b01      	ldr	r3, [sp, #4]
 800d350:	079b      	lsls	r3, r3, #30
 800d352:	f140 817a 	bpl.w	800d64a <dir_register+0x696>
 800d356:	4bc7      	ldr	r3, [pc, #796]	; (800d674 <dir_register+0x6c0>)
 800d358:	f10a 0a0c 	add.w	sl, sl, #12
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d35c:	4628      	mov	r0, r5
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d35e:	fba3 320a 	umull	r3, r2, r3, sl
 800d362:	0893      	lsrs	r3, r2, #2
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d364:	1c59      	adds	r1, r3, #1
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d366:	9301      	str	r3, [sp, #4]
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d368:	f7ff fd56 	bl	800ce18 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800d36c:	4683      	mov	fp, r0
 800d36e:	2800      	cmp	r0, #0
 800d370:	f040 80c7 	bne.w	800d502 <dir_register+0x54e>
 800d374:	f1ba 0f0c 	cmp.w	sl, #12
 800d378:	f000 80a7 	beq.w	800d4ca <dir_register+0x516>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 800d37c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800d37e:	4628      	mov	r0, r5
 800d380:	9b01      	ldr	r3, [sp, #4]
 800d382:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 800d386:	f7fe fd7f 	bl	800be88 <dir_sdi>
		if (res == FR_OK) {
 800d38a:	4683      	mov	fp, r0
 800d38c:	2800      	cmp	r0, #0
 800d38e:	f040 80b8 	bne.w	800d502 <dir_register+0x54e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d392:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d396:	f895 4041 	ldrb.w	r4, [r5, #65]	; 0x41
 800d39a:	01da      	lsls	r2, r3, #7
 800d39c:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
 800d3a0:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
 800d3a4:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800d3a8:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
 800d3ac:	f895 a045 	ldrb.w	sl, [r5, #69]	; 0x45
 800d3b0:	4422      	add	r2, r4
 800d3b2:	f895 9046 	ldrb.w	r9, [r5, #70]	; 0x46
 800d3b6:	f895 e047 	ldrb.w	lr, [r5, #71]	; 0x47
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d3ba:	f64f 74fd 	movw	r4, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d3be:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d3c2:	f895 c048 	ldrb.w	ip, [r5, #72]	; 0x48
 800d3c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d3ca:	fa50 f383 	uxtab	r3, r0, r3
 800d3ce:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
 800d3d2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d3d6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d3da:	fa51 f282 	uxtab	r2, r1, r2
 800d3de:	f895 104a 	ldrb.w	r1, [r5, #74]	; 0x4a
 800d3e2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d3e6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d3ea:	fa57 f283 	uxtab	r2, r7, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800d3ee:	f64f 77ff 	movw	r7, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d3f2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d3f6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d3fa:	fa5a f383 	uxtab	r3, sl, r3
 800d3fe:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d402:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d406:	fa59 f282 	uxtab	r2, r9, r2
 800d40a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d40e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d412:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d416:	fa5e f383 	uxtab	r3, lr, r3
 800d41a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d41e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d422:	fa5c f282 	uxtab	r2, ip, r2
 800d426:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d42a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d42e:	fa50 f383 	uxtab	r3, r0, r3
 800d432:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d436:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 800d43a:	fa51 f383 	uxtab	r3, r1, r3
 800d43e:	fa5f fa83 	uxtb.w	sl, r3
				res = move_window(fs, dp->sect);
 800d442:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d444:	4640      	mov	r0, r8
 800d446:	f7fd fd53 	bl	800aef0 <move_window>
 800d44a:	4683      	mov	fp, r0
				if (res != FR_OK) break;
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d158      	bne.n	800d502 <dir_register+0x54e>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800d450:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d452:	220f      	movs	r2, #15
 800d454:	fa5f fc89 	uxtb.w	ip, r9
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800d458:	f8d8 1010 	ldr.w	r1, [r8, #16]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d45c:	f8a3 200b 	strh.w	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d460:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d464:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d466:	f883 a00d 	strb.w	sl, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d46a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800d46e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d472:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800d476:	f100 3eff 	add.w	lr, r0, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d47a:	7058      	strb	r0, [r3, #1]
 800d47c:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d47e:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800d482:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d484:	0050      	lsls	r0, r2, #1
 800d486:	45a6      	cmp	lr, r4
 800d488:	f240 8218 	bls.w	800d8bc <dir_register+0x908>
	*ptr++ = (BYTE)val; val >>= 8;
 800d48c:	f8a3 7003 	strh.w	r7, [r3, #3]
 800d490:	f8a3 7005 	strh.w	r7, [r3, #5]
 800d494:	f8a3 7007 	strh.w	r7, [r3, #7]
 800d498:	f8a3 7009 	strh.w	r7, [r3, #9]
 800d49c:	81df      	strh	r7, [r3, #14]
 800d49e:	821f      	strh	r7, [r3, #16]
 800d4a0:	825f      	strh	r7, [r3, #18]
 800d4a2:	829f      	strh	r7, [r3, #20]
 800d4a4:	82df      	strh	r7, [r3, #22]
 800d4a6:	831f      	strh	r7, [r3, #24]
 800d4a8:	839f      	strh	r7, [r3, #28]
 800d4aa:	83df      	strh	r7, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d4ac:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d4b0:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
 800d4b4:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800d4b6:	4628      	mov	r0, r5
				fs->wflag = 1;
 800d4b8:	f888 3004 	strb.w	r3, [r8, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800d4bc:	f7fd fe98 	bl	800b1f0 <dir_next.constprop.0>
			} while (res == FR_OK && --n_ent);
 800d4c0:	4683      	mov	fp, r0
 800d4c2:	b9f0      	cbnz	r0, 800d502 <dir_register+0x54e>
 800d4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800d4c8:	d1bb      	bne.n	800d442 <dir_register+0x48e>
		res = move_window(fs, dp->sect);
 800d4ca:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	f7fd fd0f 	bl	800aef0 <move_window>
		if (res == FR_OK) {
 800d4d2:	4683      	mov	fp, r0
 800d4d4:	b9a8      	cbnz	r0, 800d502 <dir_register+0x54e>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d4d6:	4601      	mov	r1, r0
 800d4d8:	2220      	movs	r2, #32
 800d4da:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800d4dc:	f004 fedd 	bl	801229a <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d4e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
			fs->wflag = 1;
 800d4e2:	2201      	movs	r2, #1
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d4e4:	ce03      	ldmia	r6!, {r0, r1}
 800d4e6:	6018      	str	r0, [r3, #0]
 800d4e8:	6059      	str	r1, [r3, #4]
 800d4ea:	78b1      	ldrb	r1, [r6, #2]
 800d4ec:	8830      	ldrh	r0, [r6, #0]
 800d4ee:	7299      	strb	r1, [r3, #10]
 800d4f0:	8118      	strh	r0, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d4f2:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
 800d4f6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800d4f8:	f003 0318 	and.w	r3, r3, #24
 800d4fc:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800d4fe:	f888 2004 	strb.w	r2, [r8, #4]
}
 800d502:	4658      	mov	r0, fp
 800d504:	b019      	add	sp, #100	; 0x64
 800d506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50a:	46bc      	mov	ip, r7
 800d50c:	e58b      	b.n	800d026 <dir_register+0x72>
	} while (j < 8);
 800d50e:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d510:	f103 0003 	add.w	r0, r3, #3
 800d514:	f806 900e 	strb.w	r9, [r6, lr]
	} while (j < 8);
 800d518:	f43f ae50 	beq.w	800d1bc <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d51c:	1c43      	adds	r3, r0, #1
 800d51e:	f1c0 0208 	rsb	r2, r0, #8
 800d522:	2120      	movs	r1, #32
 800d524:	4430      	add	r0, r6
 800d526:	2b08      	cmp	r3, #8
 800d528:	bf88      	it	hi
 800d52a:	2201      	movhi	r2, #1
 800d52c:	f004 feb5 	bl	801229a <memset>
 800d530:	e644      	b.n	800d1bc <dir_register+0x208>
	} while (j < 8);
 800d532:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d534:	f806 9000 	strb.w	r9, [r6, r0]
 800d538:	f103 0004 	add.w	r0, r3, #4
	} while (j < 8);
 800d53c:	d1ee      	bne.n	800d51c <dir_register+0x568>
 800d53e:	e63d      	b.n	800d1bc <dir_register+0x208>
 800d540:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d542:	f806 9000 	strb.w	r9, [r6, r0]
 800d546:	f103 0005 	add.w	r0, r3, #5
	} while (j < 8);
 800d54a:	d1e7      	bne.n	800d51c <dir_register+0x568>
 800d54c:	e636      	b.n	800d1bc <dir_register+0x208>
 800d54e:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d550:	f806 9000 	strb.w	r9, [r6, r0]
 800d554:	f103 0006 	add.w	r0, r3, #6
	} while (j < 8);
 800d558:	d1e0      	bne.n	800d51c <dir_register+0x568>
 800d55a:	e62f      	b.n	800d1bc <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d55c:	f806 9000 	strb.w	r9, [r6, r0]
	} while (j < 8);
 800d560:	2b00      	cmp	r3, #0
 800d562:	f47f ae2b 	bne.w	800d1bc <dir_register+0x208>
 800d566:	2007      	movs	r0, #7
 800d568:	e7d8      	b.n	800d51c <dir_register+0x568>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d56a:	2320      	movs	r3, #32
 800d56c:	e624      	b.n	800d1b8 <dir_register+0x204>
	ns[i] = '~';
 800d56e:	237e      	movs	r3, #126	; 0x7e
 800d570:	f88d 300e 	strb.w	r3, [sp, #14]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d574:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d578:	2b20      	cmp	r3, #32
 800d57a:	f000 8263 	beq.w	800da44 <dir_register+0xa90>
		ns[i--] = c;
 800d57e:	2206      	movs	r2, #6
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d580:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800d584:	2b20      	cmp	r3, #32
 800d586:	d02d      	beq.n	800d5e4 <dir_register+0x630>
 800d588:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800d58c:	2b20      	cmp	r3, #32
 800d58e:	d06e      	beq.n	800d66e <dir_register+0x6ba>
 800d590:	2a03      	cmp	r2, #3
 800d592:	d02a      	beq.n	800d5ea <dir_register+0x636>
 800d594:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
 800d598:	2b20      	cmp	r3, #32
 800d59a:	f000 80c1 	beq.w	800d720 <dir_register+0x76c>
 800d59e:	2a04      	cmp	r2, #4
 800d5a0:	d023      	beq.n	800d5ea <dir_register+0x636>
 800d5a2:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800d5a6:	2b20      	cmp	r3, #32
 800d5a8:	f000 80b8 	beq.w	800d71c <dir_register+0x768>
 800d5ac:	2a06      	cmp	r2, #6
 800d5ae:	d11b      	bne.n	800d5e8 <dir_register+0x634>
 800d5b0:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800d5b4:	2b20      	cmp	r3, #32
 800d5b6:	f000 80b5 	beq.w	800d724 <dir_register+0x770>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d5ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d5be:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 800d5c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d5c6:	71f3      	strb	r3, [r6, #7]
	} while (j < 8);
 800d5c8:	e5f8      	b.n	800d1bc <dir_register+0x208>
	ns[i] = '~';
 800d5ca:	237e      	movs	r3, #126	; 0x7e
 800d5cc:	f88d 300d 	strb.w	r3, [sp, #13]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d5d0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d5d4:	2b20      	cmp	r3, #32
 800d5d6:	f000 822a 	beq.w	800da2e <dir_register+0xa7a>
 800d5da:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
		ns[i--] = c;
 800d5de:	2205      	movs	r2, #5
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d5e0:	2b20      	cmp	r3, #32
 800d5e2:	d1d1      	bne.n	800d588 <dir_register+0x5d4>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e588      	b.n	800d0fa <dir_register+0x146>
 800d5e8:	2205      	movs	r2, #5
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	e585      	b.n	800d0fa <dir_register+0x146>
	ns[i] = '~';
 800d5ee:	237e      	movs	r3, #126	; 0x7e
 800d5f0:	f88d 300c 	strb.w	r3, [sp, #12]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d5f4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d5f8:	2b20      	cmp	r3, #32
 800d5fa:	f000 821c 	beq.w	800da36 <dir_register+0xa82>
		ns[i--] = c;
 800d5fe:	2204      	movs	r2, #4
 800d600:	e7be      	b.n	800d580 <dir_register+0x5cc>
	ns[i] = '~';
 800d602:	237e      	movs	r3, #126	; 0x7e
 800d604:	f88d 300b 	strb.w	r3, [sp, #11]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d608:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d60c:	2b20      	cmp	r3, #32
 800d60e:	f000 8221 	beq.w	800da54 <dir_register+0xaa0>
		ns[i--] = c;
 800d612:	2203      	movs	r2, #3
 800d614:	e7b4      	b.n	800d580 <dir_register+0x5cc>
	ns[i] = '~';
 800d616:	237e      	movs	r3, #126	; 0x7e
 800d618:	f88d 300a 	strb.w	r3, [sp, #10]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d61c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d620:	2b20      	cmp	r3, #32
 800d622:	f000 821b 	beq.w	800da5c <dir_register+0xaa8>
 800d626:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800d62a:	2b20      	cmp	r3, #32
 800d62c:	f000 820e 	beq.w	800da4c <dir_register+0xa98>
 800d630:	2302      	movs	r3, #2
		ns[i--] = c;
 800d632:	461a      	mov	r2, r3
 800d634:	e561      	b.n	800d0fa <dir_register+0x146>
	ns[i] = '~';
 800d636:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 800d638:	2201      	movs	r2, #1
	ns[i] = '~';
 800d63a:	f88d 3009 	strb.w	r3, [sp, #9]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d63e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d642:	3b20      	subs	r3, #32
 800d644:	bf18      	it	ne
 800d646:	2301      	movne	r3, #1
 800d648:	e557      	b.n	800d0fa <dir_register+0x146>
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d64a:	2101      	movs	r1, #1
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7ff fbe3 	bl	800ce18 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800d652:	4683      	mov	fp, r0
 800d654:	2800      	cmp	r0, #0
 800d656:	f43f af38 	beq.w	800d4ca <dir_register+0x516>
}
 800d65a:	4658      	mov	r0, fp
 800d65c:	b019      	add	sp, #100	; 0x64
 800d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d662:	f04f 0b06 	mov.w	fp, #6
}
 800d666:	4658      	mov	r0, fp
 800d668:	b019      	add	sp, #100	; 0x64
 800d66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d66e:	2302      	movs	r3, #2
 800d670:	e543      	b.n	800d0fa <dir_register+0x146>
 800d672:	bf00      	nop
 800d674:	4ec4ec4f 	.word	0x4ec4ec4f
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d678:	4b8f      	ldr	r3, [pc, #572]	; (800d8b8 <dir_register+0x904>)
 800d67a:	f10a 040e 	add.w	r4, sl, #14
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 800d67e:	4628      	mov	r0, r5
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d680:	fba3 3404 	umull	r3, r4, r3, r4
 800d684:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 800d686:	1ca1      	adds	r1, r4, #2
 800d688:	f7ff fbc6 	bl	800ce18 <dir_alloc>
		if (res != FR_OK) return res;
 800d68c:	4683      	mov	fp, r0
 800d68e:	2800      	cmp	r0, #0
 800d690:	f47f af37 	bne.w	800d502 <dir_register+0x54e>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 800d694:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d696:	3401      	adds	r4, #1
 800d698:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800d69c:	79eb      	ldrb	r3, [r5, #7]
 800d69e:	075e      	lsls	r6, r3, #29
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 800d6a0:	64ec      	str	r4, [r5, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800d6a2:	f140 80a1 	bpl.w	800d7e8 <dir_register+0x834>
			dp->obj.stat &= ~4;
 800d6a6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800d6aa:	2b03      	cmp	r3, #3
			dp->obj.stat &= ~4;
 800d6ac:	71eb      	strb	r3, [r5, #7]
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800d6ae:	d03b      	beq.n	800d728 <dir_register+0x774>
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800d6b0:	69eb      	ldr	r3, [r5, #28]
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800d6b2:	6b6c      	ldr	r4, [r5, #52]	; 0x34
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800d6b4:	b1cb      	cbz	r3, 800d6ea <dir_register+0x736>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d6b6:	1ae2      	subs	r2, r4, r3
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	6828      	ldr	r0, [r5, #0]
 800d6bc:	f102 0601 	add.w	r6, r2, #1
 800d6c0:	f102 0202 	add.w	r2, r2, #2
 800d6c4:	bf08      	it	eq
 800d6c6:	f04f 32ff 	moveq.w	r2, #4294967295
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d6ca:	2e01      	cmp	r6, #1
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	d947      	bls.n	800d760 <dir_register+0x7ac>
 800d6d0:	6a03      	ldr	r3, [r0, #32]
 800d6d2:	429e      	cmp	r6, r3
 800d6d4:	d244      	bcs.n	800d760 <dir_register+0x7ac>
 800d6d6:	f7fd fc41 	bl	800af5c <put_fat.part.0>
		if (res != FR_OK) return res;
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	f040 81c4 	bne.w	800da68 <dir_register+0xab4>
		obj->n_frag--;
 800d6e0:	69eb      	ldr	r3, [r5, #28]
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	61eb      	str	r3, [r5, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1e5      	bne.n	800d6b6 <dir_register+0x702>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 800d6ea:	68ab      	ldr	r3, [r5, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d07b      	beq.n	800d7e8 <dir_register+0x834>
	dp->obj.stat = (BYTE)obj->c_size;
 800d6f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800d6f2:	a804      	add	r0, sp, #16
	dp->obj.fs = obj->fs;
 800d6f4:	682a      	ldr	r2, [r5, #0]
	dp->obj.stat = (BYTE)obj->c_size;
 800d6f6:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d6fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	dp->blk_ofs = obj->c_ofs;
 800d6fe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d700:	9308      	str	r3, [sp, #32]
	dp->obj.sclust = obj->c_scl;
 800d702:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.fs = obj->fs;
 800d704:	9204      	str	r2, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 800d706:	9306      	str	r3, [sp, #24]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d708:	2300      	movs	r3, #0
	dp->blk_ofs = obj->c_ofs;
 800d70a:	9117      	str	r1, [sp, #92]	; 0x5c
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d70c:	9309      	str	r3, [sp, #36]	; 0x24
	dp->obj.n_frag = 0;
 800d70e:	930b      	str	r3, [sp, #44]	; 0x2c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800d710:	f7fe fbba 	bl	800be88 <dir_sdi>
	if (res == FR_OK) {
 800d714:	4603      	mov	r3, r0
 800d716:	b340      	cbz	r0, 800d76a <dir_register+0x7b6>
				if (res != FR_OK) return res;
 800d718:	469b      	mov	fp, r3
 800d71a:	e6f2      	b.n	800d502 <dir_register+0x54e>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d71c:	2304      	movs	r3, #4
 800d71e:	e4ec      	b.n	800d0fa <dir_register+0x146>
 800d720:	2303      	movs	r3, #3
 800d722:	e4ea      	b.n	800d0fa <dir_register+0x146>
 800d724:	2305      	movs	r3, #5
 800d726:	e4e8      	b.n	800d0fa <dir_register+0x146>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d728:	69ab      	ldr	r3, [r5, #24]
 800d72a:	68ac      	ldr	r4, [r5, #8]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f000 819d 	beq.w	800da6c <dir_register+0xab8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d732:	2c01      	cmp	r4, #1
			res = put_fat(obj->fs, cl, cl + 1);
 800d734:	6828      	ldr	r0, [r5, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d736:	d913      	bls.n	800d760 <dir_register+0x7ac>
 800d738:	4423      	add	r3, r4
 800d73a:	1e5e      	subs	r6, r3, #1
 800d73c:	4627      	mov	r7, r4
 800d73e:	6a03      	ldr	r3, [r0, #32]
 800d740:	3401      	adds	r4, #1
 800d742:	42bb      	cmp	r3, r7
 800d744:	4639      	mov	r1, r7
 800d746:	4622      	mov	r2, r4
 800d748:	d90a      	bls.n	800d760 <dir_register+0x7ac>
 800d74a:	f7fd fc07 	bl	800af5c <put_fat.part.0>
			if (res != FR_OK) return res;
 800d74e:	2800      	cmp	r0, #0
 800d750:	f040 818a 	bne.w	800da68 <dir_register+0xab4>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d754:	42b7      	cmp	r7, r6
 800d756:	f000 8189 	beq.w	800da6c <dir_register+0xab8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d75a:	2c01      	cmp	r4, #1
			res = put_fat(obj->fs, cl, cl + 1);
 800d75c:	6828      	ldr	r0, [r5, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d75e:	d8ed      	bhi.n	800d73c <dir_register+0x788>
	FRESULT res = FR_INT_ERR;
 800d760:	f04f 0b02 	mov.w	fp, #2
 800d764:	e6cd      	b.n	800d502 <dir_register+0x54e>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800d766:	4692      	mov	sl, r2
 800d768:	e43d      	b.n	800cfe6 <dir_register+0x32>
		res = load_xdir(dp);		/* Load the object's entry block */
 800d76a:	a804      	add	r0, sp, #16
 800d76c:	f7fe f896 	bl	800b89c <load_xdir>
				if (res != FR_OK) return res;
 800d770:	4603      	mov	r3, r0
 800d772:	2800      	cmp	r0, #0
 800d774:	d1d0      	bne.n	800d718 <dir_register+0x764>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d776:	f8b8 600c 	ldrh.w	r6, [r8, #12]
				res = store_xdir(&dj);				/* Store the object status */
 800d77a:	a804      	add	r0, sp, #16
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d77c:	f8b8 700a 	ldrh.w	r7, [r8, #10]
 800d780:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
 800d784:	fbe7 1206 	umlal	r1, r2, r7, r6
 800d788:	e9c5 1204 	strd	r1, r2, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800d78c:	0a16      	lsrs	r6, r2, #8
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d78e:	460c      	mov	r4, r1
	*ptr++ = (BYTE)val; val >>= 8;
 800d790:	4619      	mov	r1, r3
 800d792:	f362 0307 	bfi	r3, r2, #0, #8
 800d796:	f366 230f 	bfi	r3, r6, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d79a:	0c16      	lsrs	r6, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d79c:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800d79e:	f366 4317 	bfi	r3, r6, #16, #8
 800d7a2:	f362 631f 	bfi	r3, r2, #24, #8
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800d7a6:	f8d8 2014 	ldr.w	r2, [r8, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7aa:	6394      	str	r4, [r2, #56]	; 0x38
 800d7ac:	63d3      	str	r3, [r2, #60]	; 0x3c
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d7ae:	696b      	ldr	r3, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7b0:	0a1a      	lsrs	r2, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d7b2:	f363 0107 	bfi	r1, r3, #0, #8
 800d7b6:	f362 210f 	bfi	r1, r2, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d7ba:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d7bc:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800d7be:	f362 4117 	bfi	r1, r2, #16, #8
 800d7c2:	692a      	ldr	r2, [r5, #16]
 800d7c4:	f363 611f 	bfi	r1, r3, #24, #8
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d7c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7cc:	629a      	str	r2, [r3, #40]	; 0x28
 800d7ce:	62d9      	str	r1, [r3, #44]	; 0x2c
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 800d7d0:	79eb      	ldrb	r3, [r5, #7]
 800d7d2:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800d7d6:	f043 0301 	orr.w	r3, r3, #1
 800d7da:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
 800d7de:	f7ff f813 	bl	800c808 <store_xdir>
				if (res != FR_OK) return res;
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d197      	bne.n	800d718 <dir_register+0x764>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d7e8:	f8d8 6014 	ldr.w	r6, [r8, #20]
	memset(dirb, 0, 2 * SZDIRE);
 800d7ec:	2240      	movs	r2, #64	; 0x40
 800d7ee:	2100      	movs	r1, #0
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d7f0:	f8d8 4010 	ldr.w	r4, [r8, #16]
	memset(dirb, 0, 2 * SZDIRE);
 800d7f4:	4630      	mov	r0, r6
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800d7f6:	f04f 09c1 	mov.w	r9, #193	; 0xc1
	memset(dirb, 0, 2 * SZDIRE);
 800d7fa:	f004 fd4e 	bl	801229a <memset>
	nlen = nc1 = 0; wc = 1;
 800d7fe:	f04f 0e00 	mov.w	lr, #0
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800d802:	2385      	movs	r3, #133	; 0x85
	nlen = nc1 = 0; wc = 1;
 800d804:	2201      	movs	r2, #1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800d806:	46f0      	mov	r8, lr
	i = SZDIRE * 2;	/* Top of file_name entries */
 800d808:	2140      	movs	r1, #64	; 0x40
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800d80a:	7033      	strb	r3, [r6, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800d80c:	4677      	mov	r7, lr
 800d80e:	23c0      	movs	r3, #192	; 0xc0
 800d810:	f1c6 0c04 	rsb	ip, r6, #4
 800d814:	f886 3020 	strb.w	r3, [r6, #32]
	nlen = nc1 = 0; wc = 1;
 800d818:	1873      	adds	r3, r6, r1
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800d81a:	f826 9001 	strh.w	r9, [r6, r1]
 800d81e:	fa5f f188 	uxtb.w	r1, r8
 800d822:	9101      	str	r1, [sp, #4]
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800d824:	2a00      	cmp	r2, #0
 800d826:	d136      	bne.n	800d896 <dir_register+0x8e2>
 800d828:	eb04 0a47 	add.w	sl, r4, r7, lsl #1
 800d82c:	4610      	mov	r0, r2
 800d82e:	4615      	mov	r5, r2
	*ptr++ = (BYTE)val; val >>= 8;
 800d830:	eb0c 0103 	add.w	r1, ip, r3
 800d834:	709d      	strb	r5, [r3, #2]
	*ptr++ = (BYTE)val;
 800d836:	70d8      	strb	r0, [r3, #3]
		} while (i % SZDIRE != 0);
 800d838:	3302      	adds	r3, #2
 800d83a:	06cd      	lsls	r5, r1, #27
 800d83c:	d1f2      	bne.n	800d824 <dir_register+0x870>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800d83e:	f8ba 5000 	ldrh.w	r5, [sl]
 800d842:	f108 0801 	add.w	r8, r8, #1
 800d846:	2d00      	cmp	r5, #0
 800d848:	d1e6      	bne.n	800d818 <dir_register+0x864>
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 800d84a:	9b01      	ldr	r3, [sp, #4]
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800d84c:	f886 e023 	strb.w	lr, [r6, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 800d850:	3302      	adds	r3, #2
 800d852:	7073      	strb	r3, [r6, #1]
	while ((chr = *name++) != 0) {
 800d854:	f834 3b02 	ldrh.w	r3, [r4], #2
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f000 8103 	beq.w	800da64 <dir_register+0xab0>
 800d85e:	4618      	mov	r0, r3
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800d860:	f000 ff7c 	bl	800e75c <ff_wtoupper>
 800d864:	4602      	mov	r2, r0
	while ((chr = *name++) != 0) {
 800d866:	f834 0b02 	ldrh.w	r0, [r4], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d86a:	b2d1      	uxtb	r1, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d86c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d870:	eb01 0155 	add.w	r1, r1, r5, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d874:	eb01 31c5 	add.w	r1, r1, r5, lsl #15
 800d878:	b289      	uxth	r1, r1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d87a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800d87e:	eb02 32c1 	add.w	r2, r2, r1, lsl #15
 800d882:	b295      	uxth	r5, r2
	while ((chr = *name++) != 0) {
 800d884:	2800      	cmp	r0, #0
 800d886:	d1eb      	bne.n	800d860 <dir_register+0x8ac>
	*ptr++ = (BYTE)val; val >>= 8;
 800d888:	b2ea      	uxtb	r2, r5
	*ptr++ = (BYTE)val;
 800d88a:	0a2b      	lsrs	r3, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d88c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
	*ptr++ = (BYTE)val;
 800d890:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
}
 800d894:	e635      	b.n	800d502 <dir_register+0x54e>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800d896:	f834 2017 	ldrh.w	r2, [r4, r7, lsl #1]
 800d89a:	f10e 0101 	add.w	r1, lr, #1
 800d89e:	eb04 0a47 	add.w	sl, r4, r7, lsl #1
 800d8a2:	4610      	mov	r0, r2
 800d8a4:	4615      	mov	r5, r2
 800d8a6:	2a00      	cmp	r2, #0
 800d8a8:	d0c2      	beq.n	800d830 <dir_register+0x87c>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800d8aa:	b2cf      	uxtb	r7, r1
	*ptr++ = (BYTE)val; val >>= 8;
 800d8ac:	b2d5      	uxtb	r5, r2
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800d8ae:	46be      	mov	lr, r7
	*ptr++ = (BYTE)val;
 800d8b0:	0a10      	lsrs	r0, r2, #8
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800d8b2:	eb04 0a47 	add.w	sl, r4, r7, lsl #1
 800d8b6:	e7bb      	b.n	800d830 <dir_register+0x87c>
 800d8b8:	88888889 	.word	0x88888889
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8bc:	3201      	adds	r2, #1
 800d8be:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 800d8c2:	0052      	lsls	r2, r2, #1
 800d8c4:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d8c8:	f883 e003 	strb.w	lr, [r3, #3]
 800d8cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8d0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d8d4:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8d8:	45a3      	cmp	fp, r4
 800d8da:	f63f add9 	bhi.w	800d490 <dir_register+0x4dc>
 800d8de:	440a      	add	r2, r1
 800d8e0:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 800d8e4:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d8e8:	f883 e005 	strb.w	lr, [r3, #5]
 800d8ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8f0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d8f4:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8f8:	45a3      	cmp	fp, r4
 800d8fa:	f63f adcb 	bhi.w	800d494 <dir_register+0x4e0>
 800d8fe:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 800d902:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d906:	f883 e007 	strb.w	lr, [r3, #7]
 800d90a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d90e:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d912:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d916:	45a3      	cmp	fp, r4
 800d918:	f63f adbe 	bhi.w	800d498 <dir_register+0x4e4>
 800d91c:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 800d920:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d924:	f883 e009 	strb.w	lr, [r3, #9]
 800d928:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d92c:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d930:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d934:	45a3      	cmp	fp, r4
 800d936:	f63f adb1 	bhi.w	800d49c <dir_register+0x4e8>
 800d93a:	f8b2 e008 	ldrh.w	lr, [r2, #8]
 800d93e:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d942:	f883 e00e 	strb.w	lr, [r3, #14]
 800d946:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d94a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d94e:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d952:	45a3      	cmp	fp, r4
 800d954:	f63f ada3 	bhi.w	800d49e <dir_register+0x4ea>
 800d958:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
 800d95c:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d960:	f883 e010 	strb.w	lr, [r3, #16]
 800d964:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d968:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d96c:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d970:	45a3      	cmp	fp, r4
 800d972:	f63f ad95 	bhi.w	800d4a0 <dir_register+0x4ec>
 800d976:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
 800d97a:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d97e:	f883 e012 	strb.w	lr, [r3, #18]
 800d982:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d986:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d98a:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d98e:	45a3      	cmp	fp, r4
 800d990:	f63f ad87 	bhi.w	800d4a2 <dir_register+0x4ee>
 800d994:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 800d998:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d99c:	f883 e014 	strb.w	lr, [r3, #20]
 800d9a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9a4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d9a8:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9ac:	45a3      	cmp	fp, r4
 800d9ae:	f63f ad79 	bhi.w	800d4a4 <dir_register+0x4f0>
 800d9b2:	f8b2 e010 	ldrh.w	lr, [r2, #16]
 800d9b6:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d9ba:	f883 e016 	strb.w	lr, [r3, #22]
 800d9be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9c2:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d9c6:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9ca:	45a3      	cmp	fp, r4
 800d9cc:	f63f ad6b 	bhi.w	800d4a6 <dir_register+0x4f2>
 800d9d0:	f8b2 e012 	ldrh.w	lr, [r2, #18]
 800d9d4:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d9d8:	f883 e018 	strb.w	lr, [r3, #24]
 800d9dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9e0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d9e4:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9e8:	45a3      	cmp	fp, r4
 800d9ea:	f63f ad5d 	bhi.w	800d4a8 <dir_register+0x4f4>
 800d9ee:	f8b2 e014 	ldrh.w	lr, [r2, #20]
 800d9f2:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d9f6:	f883 e01c 	strb.w	lr, [r3, #28]
 800d9fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9fe:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800da02:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800da06:	45a3      	cmp	fp, r4
 800da08:	f63f ad4f 	bhi.w	800d4aa <dir_register+0x4f6>
 800da0c:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800da0e:	f102 3eff 	add.w	lr, r2, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800da12:	779a      	strb	r2, [r3, #30]
 800da14:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800da16:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800da18:	fa1f f28e 	uxth.w	r2, lr
 800da1c:	42a2      	cmp	r2, r4
 800da1e:	f63f ad45 	bhi.w	800d4ac <dir_register+0x4f8>
 800da22:	180a      	adds	r2, r1, r0
 800da24:	8b52      	ldrh	r2, [r2, #26]
 800da26:	2a00      	cmp	r2, #0
 800da28:	f47f ad42 	bne.w	800d4b0 <dir_register+0x4fc>
 800da2c:	e53e      	b.n	800d4ac <dir_register+0x4f8>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da2e:	2300      	movs	r3, #0
		ns[i--] = c;
 800da30:	2205      	movs	r2, #5
 800da32:	f7ff bb62 	b.w	800d0fa <dir_register+0x146>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da36:	2300      	movs	r3, #0
		ns[i--] = c;
 800da38:	2204      	movs	r2, #4
 800da3a:	f7ff bb5e 	b.w	800d0fa <dir_register+0x146>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800da3e:	f04f 0b07 	mov.w	fp, #7
 800da42:	e55e      	b.n	800d502 <dir_register+0x54e>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da44:	2300      	movs	r3, #0
		ns[i--] = c;
 800da46:	2206      	movs	r2, #6
 800da48:	f7ff bb57 	b.w	800d0fa <dir_register+0x146>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da4c:	2301      	movs	r3, #1
		ns[i--] = c;
 800da4e:	2202      	movs	r2, #2
 800da50:	f7ff bb53 	b.w	800d0fa <dir_register+0x146>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da54:	2300      	movs	r3, #0
		ns[i--] = c;
 800da56:	2203      	movs	r2, #3
 800da58:	f7ff bb4f 	b.w	800d0fa <dir_register+0x146>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da5c:	2300      	movs	r3, #0
		ns[i--] = c;
 800da5e:	2202      	movs	r2, #2
 800da60:	f7ff bb4b 	b.w	800d0fa <dir_register+0x146>
	while ((chr = *name++) != 0) {
 800da64:	461a      	mov	r2, r3
 800da66:	e711      	b.n	800d88c <dir_register+0x8d8>
 800da68:	4683      	mov	fp, r0
 800da6a:	e54a      	b.n	800d502 <dir_register+0x54e>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800da6c:	2300      	movs	r3, #0
 800da6e:	71eb      	strb	r3, [r5, #7]
			if (res != FR_OK) return res;
 800da70:	e61e      	b.n	800d6b0 <dir_register+0x6fc>
 800da72:	bf00      	nop

0800da74 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da74:	2901      	cmp	r1, #1
{
 800da76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800da7a:	6806      	ldr	r6, [r0, #0]
{
 800da7c:	b083      	sub	sp, #12
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da7e:	d91f      	bls.n	800dac0 <remove_chain+0x4c>
 800da80:	4691      	mov	r9, r2
 800da82:	6a32      	ldr	r2, [r6, #32]
 800da84:	460c      	mov	r4, r1
 800da86:	428a      	cmp	r2, r1
 800da88:	d91a      	bls.n	800dac0 <remove_chain+0x4c>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800da8a:	4680      	mov	r8, r0
 800da8c:	f1b9 0f00 	cmp.w	r9, #0
 800da90:	d10d      	bne.n	800daae <remove_chain+0x3a>
 800da92:	4637      	mov	r7, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da94:	46a3      	mov	fp, r4
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800da96:	f04f 0a01 	mov.w	sl, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da9a:	4294      	cmp	r4, r2
 800da9c:	d210      	bcs.n	800dac0 <remove_chain+0x4c>
		switch (fs->fs_type) {
 800da9e:	783a      	ldrb	r2, [r7, #0]
 800daa0:	3a01      	subs	r2, #1
 800daa2:	2a03      	cmp	r2, #3
 800daa4:	d80c      	bhi.n	800dac0 <remove_chain+0x4c>
 800daa6:	e8df f002 	tbb	[pc, r2]
 800daaa:	8ea2      	.short	0x8ea2
 800daac:	1b79      	.short	0x1b79
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800daae:	7833      	ldrb	r3, [r6, #0]
 800dab0:	2b04      	cmp	r3, #4
 800dab2:	f000 80f5 	beq.w	800dca0 <remove_chain+0x22c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dab6:	454a      	cmp	r2, r9
 800dab8:	d902      	bls.n	800dac0 <remove_chain+0x4c>
 800daba:	f1b9 0f01 	cmp.w	r9, #1
 800dabe:	d103      	bne.n	800dac8 <remove_chain+0x54>
		switch (fs->fs_type) {
 800dac0:	2002      	movs	r0, #2
}
 800dac2:	b003      	add	sp, #12
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	f04f 32ff 	mov.w	r2, #4294967295
 800dacc:	4649      	mov	r1, r9
 800dace:	4630      	mov	r0, r6
 800dad0:	f7fd fa44 	bl	800af5c <put_fat.part.0>
		if (res != FR_OK) return res;
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d1f4      	bne.n	800dac2 <remove_chain+0x4e>
	FATFS *fs = obj->fs;
 800dad8:	f8d8 7000 	ldr.w	r7, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dadc:	6a3a      	ldr	r2, [r7, #32]
 800dade:	e7d9      	b.n	800da94 <remove_chain+0x20>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800dae0:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 800dae4:	ea50 0201 	orrs.w	r2, r0, r1
 800dae8:	f000 8091 	beq.w	800dc0e <remove_chain+0x19a>
 800daec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800daf0:	2d00      	cmp	r5, #0
 800daf2:	f000 808c 	beq.w	800dc0e <remove_chain+0x19a>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800daf6:	f898 c007 	ldrb.w	ip, [r8, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800dafa:	1b65      	subs	r5, r4, r5
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800dafc:	897b      	ldrh	r3, [r7, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800dafe:	f1bc 0f02 	cmp.w	ip, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800db02:	89ba      	ldrh	r2, [r7, #12]
 800db04:	9301      	str	r3, [sp, #4]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800db06:	f000 8106 	beq.w	800dd16 <remove_chain+0x2a2>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800db0a:	f1bc 0f03 	cmp.w	ip, #3
 800db0e:	f000 8117 	beq.w	800dd40 <remove_chain+0x2cc>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800db12:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800db16:	2900      	cmp	r1, #0
 800db18:	f040 8118 	bne.w	800dd4c <remove_chain+0x2d8>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db1c:	0892      	lsrs	r2, r2, #2
 800db1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db20:	4638      	mov	r0, r7
 800db22:	fbb4 f2f2 	udiv	r2, r4, r2
 800db26:	4411      	add	r1, r2
 800db28:	f7fd f9e2 	bl	800aef0 <move_window>
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d16a      	bne.n	800dc06 <remove_chain+0x192>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800db30:	89b9      	ldrh	r1, [r7, #12]
 800db32:	00a2      	lsls	r2, r4, #2
 800db34:	fbb2 f0f1 	udiv	r0, r2, r1
 800db38:	fb01 2210 	mls	r2, r1, r0, r2
	rv = rv << 8 | ptr[0];
 800db3c:	18bb      	adds	r3, r7, r2
 800db3e:	6c1f      	ldr	r7, [r3, #64]	; 0x40
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800db40:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
		if (nxt == 0) break;				/* Empty cluster? */
 800db44:	2f00      	cmp	r7, #0
 800db46:	f000 80b3 	beq.w	800dcb0 <remove_chain+0x23c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db4a:	2f01      	cmp	r7, #1
 800db4c:	d0b8      	beq.n	800dac0 <remove_chain+0x4c>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800db4e:	7833      	ldrb	r3, [r6, #0]
 800db50:	2b04      	cmp	r3, #4
 800db52:	d009      	beq.n	800db68 <remove_chain+0xf4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800db54:	6a33      	ldr	r3, [r6, #32]
 800db56:	429c      	cmp	r4, r3
 800db58:	d2b2      	bcs.n	800dac0 <remove_chain+0x4c>
 800db5a:	2200      	movs	r2, #0
 800db5c:	4621      	mov	r1, r4
 800db5e:	4630      	mov	r0, r6
 800db60:	f7fd f9fc 	bl	800af5c <put_fat.part.0>
			if (res != FR_OK) return res;
 800db64:	2800      	cmp	r0, #0
 800db66:	d1ac      	bne.n	800dac2 <remove_chain+0x4e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db68:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
 800db6c:	1e91      	subs	r1, r2, #2
 800db6e:	428b      	cmp	r3, r1
 800db70:	d205      	bcs.n	800db7e <remove_chain+0x10a>
			fs->free_clst++;
 800db72:	3301      	adds	r3, #1
 800db74:	61f3      	str	r3, [r6, #28]
			fs->fsi_flag |= 1;
 800db76:	7973      	ldrb	r3, [r6, #5]
 800db78:	f043 0301 	orr.w	r3, r3, #1
 800db7c:	7173      	strb	r3, [r6, #5]
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800db7e:	3401      	adds	r4, #1
 800db80:	42bc      	cmp	r4, r7
 800db82:	d003      	beq.n	800db8c <remove_chain+0x118>
			if (fs->fs_type == FS_EXFAT) {
 800db84:	7833      	ldrb	r3, [r6, #0]
 800db86:	2b04      	cmp	r3, #4
 800db88:	d048      	beq.n	800dc1c <remove_chain+0x1a8>
 800db8a:	46bb      	mov	fp, r7
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db8c:	4297      	cmp	r7, r2
 800db8e:	f080 808f 	bcs.w	800dcb0 <remove_chain+0x23c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db92:	463c      	mov	r4, r7
	FATFS *fs = obj->fs;
 800db94:	f8d8 7000 	ldr.w	r7, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db98:	6a3a      	ldr	r2, [r7, #32]
 800db9a:	e77e      	b.n	800da9a <remove_chain+0x26>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db9c:	89ba      	ldrh	r2, [r7, #12]
 800db9e:	4638      	mov	r0, r7
 800dba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dba2:	0892      	lsrs	r2, r2, #2
 800dba4:	fbb4 f2f2 	udiv	r2, r4, r2
 800dba8:	4411      	add	r1, r2
 800dbaa:	f7fd f9a1 	bl	800aef0 <move_window>
 800dbae:	bb50      	cbnz	r0, 800dc06 <remove_chain+0x192>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800dbb0:	89b9      	ldrh	r1, [r7, #12]
 800dbb2:	00a2      	lsls	r2, r4, #2
 800dbb4:	fbb2 f0f1 	udiv	r0, r2, r1
 800dbb8:	fb01 2210 	mls	r2, r1, r0, r2
	rv = rv << 8 | ptr[0];
 800dbbc:	443a      	add	r2, r7
 800dbbe:	6c17      	ldr	r7, [r2, #64]	; 0x40
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800dbc0:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
			break;
 800dbc4:	e7be      	b.n	800db44 <remove_chain+0xd0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbc6:	89ba      	ldrh	r2, [r7, #12]
 800dbc8:	4638      	mov	r0, r7
 800dbca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbcc:	0852      	lsrs	r2, r2, #1
 800dbce:	fbb4 f2f2 	udiv	r2, r4, r2
 800dbd2:	4411      	add	r1, r2
 800dbd4:	f7fd f98c 	bl	800aef0 <move_window>
 800dbd8:	b9a8      	cbnz	r0, 800dc06 <remove_chain+0x192>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800dbda:	89b9      	ldrh	r1, [r7, #12]
 800dbdc:	0062      	lsls	r2, r4, #1
 800dbde:	fbb2 f0f1 	udiv	r0, r2, r1
 800dbe2:	fb01 2210 	mls	r2, r1, r0, r2
 800dbe6:	443a      	add	r2, r7
 800dbe8:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
			break;
 800dbec:	e7aa      	b.n	800db44 <remove_chain+0xd0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbee:	89ba      	ldrh	r2, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 800dbf0:	eb04 0554 	add.w	r5, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	fbb5 f2f2 	udiv	r2, r5, r2
 800dbfc:	4411      	add	r1, r2
 800dbfe:	f7fd f977 	bl	800aef0 <move_window>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d059      	beq.n	800dcba <remove_chain+0x246>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dc06:	2001      	movs	r0, #1
}
 800dc08:	b003      	add	sp, #12
 800dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800dc0e:	f898 2007 	ldrb.w	r2, [r8, #7]
 800dc12:	2a00      	cmp	r2, #0
 800dc14:	f47f af54 	bne.w	800dac0 <remove_chain+0x4c>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800dc18:	89ba      	ldrh	r2, [r7, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800dc1a:	e77a      	b.n	800db12 <remove_chain+0x9e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800dc1c:	eba4 050b 	sub.w	r5, r4, fp
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800dc20:	f1ab 0b02 	sub.w	fp, fp, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800dc24:	89b1      	ldrh	r1, [r6, #12]
 800dc26:	ea4f 02db 	mov.w	r2, fp, lsr #3
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800dc2a:	f00b 0b07 	and.w	fp, fp, #7
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800dc2e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800dc30:	fa0a f40b 	lsl.w	r4, sl, fp
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800dc34:	fbb2 fbf1 	udiv	fp, r2, r1
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800dc38:	b2e4      	uxtb	r4, r4
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800dc3a:	fb01 221b 	mls	r2, r1, fp, r2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800dc3e:	eb0b 0103 	add.w	r1, fp, r3
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800dc42:	4630      	mov	r0, r6
 800dc44:	f101 0b01 	add.w	fp, r1, #1
 800dc48:	9201      	str	r2, [sp, #4]
 800dc4a:	f7fd f951 	bl	800aef0 <move_window>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d1d9      	bne.n	800dc06 <remove_chain+0x192>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dc52:	9a01      	ldr	r2, [sp, #4]
 800dc54:	18b1      	adds	r1, r6, r2
 800dc56:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800dc5a:	421c      	tst	r4, r3
 800dc5c:	f43f af30 	beq.w	800dac0 <remove_chain+0x4c>
				fs->win[i] ^= bm;	/* Flip the bit */
 800dc60:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800dc62:	3d01      	subs	r5, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 800dc64:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
				fs->wflag = 1;
 800dc68:	f886 a004 	strb.w	sl, [r6, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800dc6c:	d106      	bne.n	800dc7c <remove_chain+0x208>
 800dc6e:	e01c      	b.n	800dcaa <remove_chain+0x236>
 800dc70:	3d01      	subs	r5, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 800dc72:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
				fs->wflag = 1;
 800dc76:	f886 a004 	strb.w	sl, [r6, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800dc7a:	d016      	beq.n	800dcaa <remove_chain+0x236>
			} while (bm <<= 1);		/* Next bit */
 800dc7c:	0064      	lsls	r4, r4, #1
 800dc7e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800dc82:	d108      	bne.n	800dc96 <remove_chain+0x222>
		} while (++i < SS(fs));		/* Next byte */
 800dc84:	3201      	adds	r2, #1
 800dc86:	89b3      	ldrh	r3, [r6, #12]
			bm = 1;
 800dc88:	2401      	movs	r4, #1
		} while (++i < SS(fs));		/* Next byte */
 800dc8a:	429a      	cmp	r2, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dc8c:	eb06 0102 	add.w	r1, r6, r2
		} while (++i < SS(fs));		/* Next byte */
 800dc90:	d23e      	bcs.n	800dd10 <remove_chain+0x29c>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dc92:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800dc96:	421c      	tst	r4, r3
				fs->win[i] ^= bm;	/* Flip the bit */
 800dc98:	ea83 0304 	eor.w	r3, r3, r4
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dc9c:	d1e8      	bne.n	800dc70 <remove_chain+0x1fc>
 800dc9e:	e70f      	b.n	800dac0 <remove_chain+0x4c>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dca0:	79c3      	ldrb	r3, [r0, #7]
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	f47f af07 	bne.w	800dab6 <remove_chain+0x42>
 800dca8:	e6f3      	b.n	800da92 <remove_chain+0x1e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dcaa:	6a32      	ldr	r2, [r6, #32]
 800dcac:	46bb      	mov	fp, r7
 800dcae:	e76d      	b.n	800db8c <remove_chain+0x118>
	if (fs->fs_type == FS_EXFAT) {
 800dcb0:	7833      	ldrb	r3, [r6, #0]
 800dcb2:	2b04      	cmp	r3, #4
 800dcb4:	d025      	beq.n	800dd02 <remove_chain+0x28e>
	return FR_OK;
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	e703      	b.n	800dac2 <remove_chain+0x4e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800dcba:	89b9      	ldrh	r1, [r7, #12]
 800dcbc:	1c6b      	adds	r3, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcc0:	4638      	mov	r0, r7
 800dcc2:	9301      	str	r3, [sp, #4]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800dcc4:	fbb5 fcf1 	udiv	ip, r5, r1
 800dcc8:	fb01 551c 	mls	r5, r1, ip, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dccc:	fbb3 f1f1 	udiv	r1, r3, r1
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800dcd0:	443d      	add	r5, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcd2:	4411      	add	r1, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800dcd4:	f895 5040 	ldrb.w	r5, [r5, #64]	; 0x40
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcd8:	f7fd f90a 	bl	800aef0 <move_window>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	d192      	bne.n	800dc06 <remove_chain+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800dce0:	89ba      	ldrh	r2, [r7, #12]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800dce2:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800dce4:	9b01      	ldr	r3, [sp, #4]
 800dce6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcea:	fb02 3311 	mls	r3, r2, r1, r3
 800dcee:	443b      	add	r3, r7
 800dcf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcf4:	ea45 2703 	orr.w	r7, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800dcf8:	bf4c      	ite	mi
 800dcfa:	093f      	lsrmi	r7, r7, #4
 800dcfc:	f3c7 070b 	ubfxpl	r7, r7, #0, #12
 800dd00:	e720      	b.n	800db44 <remove_chain+0xd0>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800dd02:	f1b9 0f00 	cmp.w	r9, #0
 800dd06:	d124      	bne.n	800dd52 <remove_chain+0x2de>
	return FR_OK;
 800dd08:	4648      	mov	r0, r9
			obj->stat = 0;		/* Change the chain status 'initial' */
 800dd0a:	f888 9007 	strb.w	r9, [r8, #7]
 800dd0e:	e6d8      	b.n	800dac2 <remove_chain+0x4e>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800dd10:	4659      	mov	r1, fp
		i = 0;
 800dd12:	2200      	movs	r2, #0
 800dd14:	e795      	b.n	800dc42 <remove_chain+0x1ce>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800dd16:	3801      	subs	r0, #1
 800dd18:	f04f 0300 	mov.w	r3, #0
 800dd1c:	f161 0100 	sbc.w	r1, r1, #0
 800dd20:	f7f2 fae2 	bl	80002e8 <__aeabi_uldivmod>
 800dd24:	9b01      	ldr	r3, [sp, #4]
 800dd26:	fbb0 f0f3 	udiv	r0, r0, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800dd2a:	4285      	cmp	r5, r0
 800dd2c:	f63f aec8 	bhi.w	800dac0 <remove_chain+0x4c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800dd30:	d00c      	beq.n	800dd4c <remove_chain+0x2d8>
					val = clst + 1; 	/* Generate the value */
 800dd32:	1c67      	adds	r7, r4, #1
		if (nxt == 0) break;				/* Empty cluster? */
 800dd34:	2f00      	cmp	r7, #0
 800dd36:	d0bb      	beq.n	800dcb0 <remove_chain+0x23c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dd38:	1c79      	adds	r1, r7, #1
 800dd3a:	f47f af08 	bne.w	800db4e <remove_chain+0xda>
 800dd3e:	e762      	b.n	800dc06 <remove_chain+0x192>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800dd40:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800dd44:	428d      	cmp	r5, r1
 800dd46:	f4bf aee4 	bcs.w	800db12 <remove_chain+0x9e>
 800dd4a:	e7f2      	b.n	800dd32 <remove_chain+0x2be>
 800dd4c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800dd50:	e6fd      	b.n	800db4e <remove_chain+0xda>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800dd52:	f898 3007 	ldrb.w	r3, [r8, #7]
 800dd56:	b9bb      	cbnz	r3, 800dd88 <remove_chain+0x314>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800dd58:	f8d8 4008 	ldr.w	r4, [r8, #8]
				while (clst != pclst) {
 800dd5c:	e00b      	b.n	800dd76 <remove_chain+0x302>
					nxt = get_fat(obj, clst);
 800dd5e:	f7fd f997 	bl	800b090 <get_fat>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800dd62:	1c63      	adds	r3, r4, #1
					if (nxt < 2) return FR_INT_ERR;
 800dd64:	2801      	cmp	r0, #1
 800dd66:	461c      	mov	r4, r3
 800dd68:	f67f aeaa 	bls.w	800dac0 <remove_chain+0x4c>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800dd6c:	1c42      	adds	r2, r0, #1
 800dd6e:	f43f af4a 	beq.w	800dc06 <remove_chain+0x192>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800dd72:	4283      	cmp	r3, r0
 800dd74:	d19f      	bne.n	800dcb6 <remove_chain+0x242>
				while (clst != pclst) {
 800dd76:	454c      	cmp	r4, r9
					nxt = get_fat(obj, clst);
 800dd78:	4621      	mov	r1, r4
 800dd7a:	4640      	mov	r0, r8
				while (clst != pclst) {
 800dd7c:	d1ef      	bne.n	800dd5e <remove_chain+0x2ea>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800dd7e:	2302      	movs	r3, #2
	return FR_OK;
 800dd80:	2000      	movs	r0, #0
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800dd82:	f888 3007 	strb.w	r3, [r8, #7]
 800dd86:	e69c      	b.n	800dac2 <remove_chain+0x4e>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800dd88:	2b03      	cmp	r3, #3
 800dd8a:	d194      	bne.n	800dcb6 <remove_chain+0x242>
 800dd8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd90:	454b      	cmp	r3, r9
 800dd92:	d890      	bhi.n	800dcb6 <remove_chain+0x242>
 800dd94:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800dd98:	4413      	add	r3, r2
 800dd9a:	454b      	cmp	r3, r9
 800dd9c:	d38b      	bcc.n	800dcb6 <remove_chain+0x242>
 800dd9e:	e7ee      	b.n	800dd7e <remove_chain+0x30a>

0800dda0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800dda0:	b530      	push	{r4, r5, lr}
 800dda2:	b083      	sub	sp, #12
 800dda4:	e9cd 1000 	strd	r1, r0, [sp]
	if (!tp) return vol;	/* Invalid path name? */
 800dda8:	b161      	cbz	r1, 800ddc4 <f_mount+0x24>
 800ddaa:	468c      	mov	ip, r1
		tc = *tt++;
 800ddac:	f81c 3b01 	ldrb.w	r3, [ip], #1
	} while (!IsTerminator(tc) && tc != ':');
 800ddb0:	2b1f      	cmp	r3, #31
 800ddb2:	d90a      	bls.n	800ddca <f_mount+0x2a>
 800ddb4:	2b3a      	cmp	r3, #58	; 0x3a
 800ddb6:	d1f9      	bne.n	800ddac <f_mount+0xc>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800ddb8:	780b      	ldrb	r3, [r1, #0]
 800ddba:	2b30      	cmp	r3, #48	; 0x30
 800ddbc:	d102      	bne.n	800ddc4 <f_mount+0x24>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800ddbe:	3102      	adds	r1, #2
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800ddc0:	458c      	cmp	ip, r1
 800ddc2:	d004      	beq.n	800ddce <f_mount+0x2e>
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddc4:	200b      	movs	r0, #11

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800ddc6:	b003      	add	sp, #12
 800ddc8:	bd30      	pop	{r4, r5, pc}
	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800ddca:	2b3a      	cmp	r3, #58	; 0x3a
 800ddcc:	d0f4      	beq.n	800ddb8 <f_mount+0x18>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800ddce:	4911      	ldr	r1, [pc, #68]	; (800de14 <f_mount+0x74>)
 800ddd0:	680b      	ldr	r3, [r1, #0]
	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800ddd2:	b15b      	cbz	r3, 800ddec <f_mount+0x4c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ddd4:	4810      	ldr	r0, [pc, #64]	; (800de18 <f_mount+0x78>)
		FatFs[vol] = 0;
 800ddd6:	2400      	movs	r4, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ddd8:	6805      	ldr	r5, [r0, #0]
		FatFs[vol] = 0;
 800ddda:	600c      	str	r4, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dddc:	42ab      	cmp	r3, r5
 800ddde:	bf08      	it	eq
 800dde0:	6004      	streq	r4, [r0, #0]
 800dde2:	6904      	ldr	r4, [r0, #16]
 800dde4:	42a3      	cmp	r3, r4
 800dde6:	d011      	beq.n	800de0c <f_mount+0x6c>
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800dde8:	2000      	movs	r0, #0
 800ddea:	7018      	strb	r0, [r3, #0]
	if (fs) {					/* Register new filesystem object */
 800ddec:	9b01      	ldr	r3, [sp, #4]
 800ddee:	b113      	cbz	r3, 800ddf6 <f_mount+0x56>
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800ddf0:	2000      	movs	r0, #0
		FatFs[vol] = fs;		/* Register new fs object */
 800ddf2:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800ddf4:	8018      	strh	r0, [r3, #0]
	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800ddf6:	b132      	cbz	r2, 800de06 <f_mount+0x66>
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	a901      	add	r1, sp, #4
 800ddfc:	4668      	mov	r0, sp
 800ddfe:	f7fd fb17 	bl	800b430 <mount_volume>
}
 800de02:	b003      	add	sp, #12
 800de04:	bd30      	pop	{r4, r5, pc}
	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800de06:	4610      	mov	r0, r2
}
 800de08:	b003      	add	sp, #12
 800de0a:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800de0c:	2400      	movs	r4, #0
 800de0e:	6104      	str	r4, [r0, #16]
 800de10:	e7ea      	b.n	800dde8 <f_mount+0x48>
 800de12:	bf00      	nop
 800de14:	24000778 	.word	0x24000778
 800de18:	2400077c 	.word	0x2400077c
 800de1c:	00000000 	.word	0x00000000

0800de20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	ed2d 8b02 	vpush	{d8}
 800de28:	b099      	sub	sp, #100	; 0x64
 800de2a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f000 809f 	beq.w	800df70 <f_open+0x150>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800de32:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 800de36:	4616      	mov	r6, r2
 800de38:	4604      	mov	r4, r0
 800de3a:	a903      	add	r1, sp, #12
 800de3c:	a801      	add	r0, sp, #4
 800de3e:	463a      	mov	r2, r7
 800de40:	f7fd faf6 	bl	800b430 <mount_volume>
	if (res == FR_OK) {
 800de44:	4605      	mov	r5, r0
 800de46:	b138      	cbz	r0, 800de58 <f_open+0x38>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800de48:	2300      	movs	r3, #0
 800de4a:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800de4c:	4628      	mov	r0, r5
 800de4e:	b019      	add	sp, #100	; 0x64
 800de50:	ecbd 8b02 	vpop	{d8}
 800de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800de58:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800de5c:	a804      	add	r0, sp, #16
 800de5e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800de60:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800de64:	f7fe fb0c 	bl	800c480 <follow_path>
		if (res == FR_OK) {
 800de68:	b9f8      	cbnz	r0, 800deaa <f_open+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de6a:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f2c0 8087 	blt.w	800df82 <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
 800de74:	f8df 93b0 	ldr.w	r9, [pc, #944]	; 800e228 <f_open+0x408>
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 800de78:	f027 0301 	bic.w	r3, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800de7c:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800de7e:	f8d9 e000 	ldr.w	lr, [r9]
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 800de82:	4619      	mov	r1, r3
				Files[i].clu == dp->obj.sclust &&
 800de84:	9806      	ldr	r0, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 800de86:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
		if (Files[i].fs) {	/* Existing entry */
 800de8a:	f1be 0f00 	cmp.w	lr, #0
 800de8e:	f000 812a 	beq.w	800e0e6 <f_open+0x2c6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800de92:	4596      	cmp	lr, r2
 800de94:	d077      	beq.n	800df86 <f_open+0x166>
		if (Files[i].fs) {	/* Existing entry */
 800de96:	f8d9 e010 	ldr.w	lr, [r9, #16]
 800de9a:	f1be 0f00 	cmp.w	lr, #0
 800de9e:	f000 8090 	beq.w	800dfc2 <f_open+0x1a2>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800dea2:	4596      	cmp	lr, r2
 800dea4:	d079      	beq.n	800df9a <f_open+0x17a>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 800dea6:	2512      	movs	r5, #18
 800dea8:	e7ce      	b.n	800de48 <f_open+0x28>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800deaa:	f016 0f1c 	tst.w	r6, #28
 800deae:	d066      	beq.n	800df7e <f_open+0x15e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800deb0:	2804      	cmp	r0, #4
 800deb2:	d164      	bne.n	800df7e <f_open+0x15e>
	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800deb4:	f8df 9370 	ldr.w	r9, [pc, #880]	; 800e228 <f_open+0x408>
 800deb8:	f8d9 3000 	ldr.w	r3, [r9]
 800debc:	b11b      	cbz	r3, 800dec6 <f_open+0xa6>
 800debe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1ef      	bne.n	800dea6 <f_open+0x86>
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dec6:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dec8:	f047 0708 	orr.w	r7, r7, #8
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800decc:	f7ff f872 	bl	800cfb4 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d154      	bne.n	800df7e <f_open+0x15e>
				if (fs->fs_type == FS_EXFAT) {
 800ded4:	f898 3000 	ldrb.w	r3, [r8]
 800ded8:	2b04      	cmp	r3, #4
 800deda:	f000 814b 	beq.w	800e174 <f_open+0x354>
					tm = GET_FATTIME();					/* Set created time */
 800dede:	f7fc febf 	bl	800ac60 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, tm);
 800dee2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 800dee4:	0a02      	lsrs	r2, r0, #8
 800dee6:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, tm);
 800deea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 800deec:	75da      	strb	r2, [r3, #23]
 800deee:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800def0:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800def2:	0e00      	lsrs	r0, r0, #24
 800def4:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 800def6:	7658      	strb	r0, [r3, #25]
	if (fs->fs_type == FS_FAT32) {
 800def8:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800defc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	if (fs->fs_type == FS_FAT32) {
 800defe:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800df00:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800df02:	d102      	bne.n	800df0a <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800df04:	8a9a      	ldrh	r2, [r3, #20]
 800df06:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df0a:	2220      	movs	r2, #32
 800df0c:	72da      	strb	r2, [r3, #11]
	*ptr++ = (BYTE)val; val >>= 8;
 800df0e:	2200      	movs	r2, #0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 800df12:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800df14:	f898 1000 	ldrb.w	r1, [r8]
 800df18:	2903      	cmp	r1, #3
 800df1a:	d100      	bne.n	800df1e <f_open+0xfe>
	*ptr++ = (BYTE)val; val >>= 8;
 800df1c:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 800df1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 800df20:	2200      	movs	r2, #0
 800df22:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 800df24:	2301      	movs	r3, #1
 800df26:	f888 3004 	strb.w	r3, [r8, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800df2a:	b176      	cbz	r6, 800df4a <f_open+0x12a>
						res = remove_chain(&dj.obj, cl, 0);
 800df2c:	4631      	mov	r1, r6
 800df2e:	a804      	add	r0, sp, #16
						sc = fs->winsect;
 800df30:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
						res = remove_chain(&dj.obj, cl, 0);
 800df34:	f7ff fd9e 	bl	800da74 <remove_chain>
						if (res == FR_OK) {
 800df38:	bb08      	cbnz	r0, 800df7e <f_open+0x15e>
							res = move_window(fs, sc);
 800df3a:	4651      	mov	r1, sl
 800df3c:	4640      	mov	r0, r8
 800df3e:	f7fc ffd7 	bl	800aef0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800df42:	1e73      	subs	r3, r6, #1
 800df44:	f8c8 3018 	str.w	r3, [r8, #24]
		if (res == FR_OK) {
 800df48:	b9c8      	cbnz	r0, 800df7e <f_open+0x15e>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800df4a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800df4e:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800df52:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800df56:	3900      	subs	r1, #0
			fp->dir_ptr = dj.dir;
 800df58:	9e13      	ldr	r6, [sp, #76]	; 0x4c
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800df5a:	a804      	add	r0, sp, #16
 800df5c:	bf18      	it	ne
 800df5e:	2101      	movne	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800df60:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800df62:	64e6      	str	r6, [r4, #76]	; 0x4c
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800df64:	f7fc ff04 	bl	800ad70 <inc_share>
 800df68:	62e0      	str	r0, [r4, #44]	; 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 800df6a:	bbc0      	cbnz	r0, 800dfde <f_open+0x1be>
 800df6c:	2502      	movs	r5, #2
 800df6e:	e76b      	b.n	800de48 <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
 800df70:	2509      	movs	r5, #9
}
 800df72:	4628      	mov	r0, r5
 800df74:	b019      	add	sp, #100	; 0x64
 800df76:	ecbd 8b02 	vpop	{d8}
 800df7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7e:	4605      	mov	r5, r0
 800df80:	e762      	b.n	800de48 <f_open+0x28>
				res = FR_INVALID_NAME;
 800df82:	2506      	movs	r5, #6
 800df84:	e760      	b.n	800de48 <f_open+0x28>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800df86:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800df8a:	4282      	cmp	r2, r0
 800df8c:	f000 812d 	beq.w	800e1ea <f_open+0x3ca>
		if (Files[i].fs) {	/* Existing entry */
 800df90:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800df94:	b1aa      	cbz	r2, 800dfc2 <f_open+0x1a2>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800df96:	4572      	cmp	r2, lr
 800df98:	d185      	bne.n	800dea6 <f_open+0x86>
 800df9a:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800df9e:	4282      	cmp	r2, r0
 800dfa0:	d181      	bne.n	800dea6 <f_open+0x86>
				Files[i].clu == dp->obj.sclust &&
 800dfa2:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800dfa6:	4562      	cmp	r2, ip
 800dfa8:	f47f af7d 	bne.w	800dea6 <f_open+0x86>
	for (i = 0; i < FF_FS_LOCK; i++) {
 800dfac:	2201      	movs	r2, #1
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f040 8095 	bne.w	800e0de <f_open+0x2be>
 800dfb4:	eb09 1202 	add.w	r2, r9, r2, lsl #4
 800dfb8:	68d2      	ldr	r2, [r2, #12]
 800dfba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800dfbe:	f000 808e 	beq.w	800e0de <f_open+0x2be>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dfc2:	f016 0f1c 	tst.w	r6, #28
 800dfc6:	d079      	beq.n	800e0bc <f_open+0x29c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dfc8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800dfcc:	f013 0f11 	tst.w	r3, #17
 800dfd0:	f040 8087 	bne.w	800e0e2 <f_open+0x2c2>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dfd4:	0773      	lsls	r3, r6, #29
 800dfd6:	f140 80ab 	bpl.w	800e130 <f_open+0x310>
 800dfda:	2508      	movs	r5, #8
 800dfdc:	e734      	b.n	800de48 <f_open+0x28>
			if (fs->fs_type == FS_EXFAT) {
 800dfde:	f898 3000 	ldrb.w	r3, [r8]
 800dfe2:	2b04      	cmp	r3, #4
 800dfe4:	f000 8093 	beq.w	800e10e <f_open+0x2ee>
	if (fs->fs_type == FS_FAT32) {
 800dfe8:	2b03      	cmp	r3, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800dfea:	8b72      	ldrh	r2, [r6, #26]
	if (fs->fs_type == FS_FAT32) {
 800dfec:	d102      	bne.n	800dff4 <f_open+0x1d4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dfee:	8ab3      	ldrh	r3, [r6, #20]
 800dff0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dff4:	60a2      	str	r2, [r4, #8]
	rv = rv << 8 | ptr[0];
 800dff6:	69f3      	ldr	r3, [r6, #28]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dff8:	6123      	str	r3, [r4, #16]
 800dffa:	2300      	movs	r3, #0
 800dffc:	6163      	str	r3, [r4, #20]
			fp->obj.id = fs->id;
 800dffe:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->cltbl = 0;		/* Disable fast seek mode */
 800e002:	f04f 0b00 	mov.w	fp, #0
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800e006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
			fp->obj.fs = fs;	/* Validate the file object */
 800e00a:	f8c4 8000 	str.w	r8, [r4]
			fp->obj.id = fs->id;
 800e00e:	80a3      	strh	r3, [r4, #4]
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800e010:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800e014:	4659      	mov	r1, fp
			fp->flag = mode;	/* Set file access mode */
 800e016:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800e01a:	4618      	mov	r0, r3
			fp->cltbl = 0;		/* Disable fast seek mode */
 800e01c:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
			fp->err = 0;		/* Clear error flag */
 800e020:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800e024:	ee08 3a10 	vmov	s16, r3
			fp->sect = 0;		/* Invalidate current data sector */
 800e028:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 800e02c:	ed9f 7b7c 	vldr	d7, [pc, #496]	; 800e220 <f_open+0x400>
 800e030:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800e034:	f004 f931 	bl	801229a <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e038:	06be      	lsls	r6, r7, #26
 800e03a:	f57f af07 	bpl.w	800de4c <f_open+0x2c>
 800e03e:	e9d4 6a04 	ldrd	r6, sl, [r4, #16]
 800e042:	ea56 020a 	orrs.w	r2, r6, sl
 800e046:	f43f af01 	beq.w	800de4c <f_open+0x2c>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e04a:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 800e04e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e052:	68a7      	ldr	r7, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e054:	fb01 f202 	mul.w	r2, r1, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e058:	42b2      	cmp	r2, r6
 800e05a:	eb7b 000a 	sbcs.w	r0, fp, sl
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e05e:	e9c4 6a0e 	strd	r6, sl, [r4, #56]	; 0x38
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e062:	d30a      	bcc.n	800e07a <f_open+0x25a>
 800e064:	e06c      	b.n	800e140 <f_open+0x320>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e066:	1c78      	adds	r0, r7, #1
 800e068:	d037      	beq.n	800e0da <f_open+0x2ba>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e06a:	9a00      	ldr	r2, [sp, #0]
 800e06c:	1ab6      	subs	r6, r6, r2
 800e06e:	f16a 0a00 	sbc.w	sl, sl, #0
 800e072:	42b2      	cmp	r2, r6
 800e074:	eb7b 010a 	sbcs.w	r1, fp, sl
 800e078:	d260      	bcs.n	800e13c <f_open+0x31c>
					clst = get_fat(&fp->obj, clst);
 800e07a:	4639      	mov	r1, r7
 800e07c:	4620      	mov	r0, r4
 800e07e:	9200      	str	r2, [sp, #0]
 800e080:	f7fd f806 	bl	800b090 <get_fat>
					if (clst <= 1) res = FR_INT_ERR;
 800e084:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800e086:	4607      	mov	r7, r0
					if (clst <= 1) res = FR_INT_ERR;
 800e088:	d8ed      	bhi.n	800e066 <f_open+0x246>
 800e08a:	2502      	movs	r5, #2
				fp->clust = clst;
 800e08c:	6427      	str	r7, [r4, #64]	; 0x40
	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 800e08e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e090:	3b01      	subs	r3, #1
 800e092:	2b01      	cmp	r3, #1
 800e094:	f63f aed8 	bhi.w	800de48 <f_open+0x28>
		n = Files[i].ctr;
 800e098:	0119      	lsls	r1, r3, #4
 800e09a:	eb09 1303 	add.w	r3, r9, r3, lsl #4
 800e09e:	68da      	ldr	r2, [r3, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 800e0a0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e0a4:	f000 80a8 	beq.w	800e1f8 <f_open+0x3d8>
		if (n > 0) n--;			/* Decrement read mode open count */
 800e0a8:	b122      	cbz	r2, 800e0b4 <f_open+0x294>
 800e0aa:	3a01      	subs	r2, #1
		Files[i].ctr = n;
 800e0ac:	60da      	str	r2, [r3, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e0ae:	2a00      	cmp	r2, #0
 800e0b0:	f47f aeca 	bne.w	800de48 <f_open+0x28>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f849 3001 	str.w	r3, [r9, r1]
 800e0ba:	e6c5      	b.n	800de48 <f_open+0x28>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800e0bc:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800e0c0:	06d1      	lsls	r1, r2, #27
 800e0c2:	d439      	bmi.n	800e138 <f_open+0x318>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800e0c4:	07b1      	lsls	r1, r6, #30
 800e0c6:	d501      	bpl.n	800e0cc <f_open+0x2ac>
 800e0c8:	07d2      	lsls	r2, r2, #31
 800e0ca:	d40a      	bmi.n	800e0e2 <f_open+0x2c2>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800e0cc:	f006 0608 	and.w	r6, r6, #8
 800e0d0:	2e00      	cmp	r6, #0
 800e0d2:	f47f af3a 	bne.w	800df4a <f_open+0x12a>
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	e73b      	b.n	800df52 <f_open+0x132>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e0da:	2501      	movs	r5, #1
 800e0dc:	e7d6      	b.n	800e08c <f_open+0x26c>
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e0de:	2510      	movs	r5, #16
 800e0e0:	e6b2      	b.n	800de48 <f_open+0x28>
						res = FR_DENIED;
 800e0e2:	2507      	movs	r5, #7
 800e0e4:	e6b0      	b.n	800de48 <f_open+0x28>
		if (Files[i].fs) {	/* Existing entry */
 800e0e6:	f8d9 e010 	ldr.w	lr, [r9, #16]
 800e0ea:	f1be 0f00 	cmp.w	lr, #0
 800e0ee:	f43f af68 	beq.w	800dfc2 <f_open+0x1a2>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800e0f2:	4596      	cmp	lr, r2
 800e0f4:	f47f af65 	bne.w	800dfc2 <f_open+0x1a2>
 800e0f8:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800e0fc:	4282      	cmp	r2, r0
 800e0fe:	f47f af60 	bne.w	800dfc2 <f_open+0x1a2>
				Files[i].clu == dp->obj.sclust &&
 800e102:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800e106:	4562      	cmp	r2, ip
 800e108:	f47f af5b 	bne.w	800dfc2 <f_open+0x1a2>
 800e10c:	e74e      	b.n	800dfac <f_open+0x18c>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e10e:	9b08      	ldr	r3, [sp, #32]
				init_alloc_info(fs, &fp->obj);
 800e110:	4621      	mov	r1, r4
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e112:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				init_alloc_info(fs, &fp->obj);
 800e11a:	f8d8 0014 	ldr.w	r0, [r8, #20]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e11e:	4313      	orrs	r3, r2
 800e120:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e122:	9b06      	ldr	r3, [sp, #24]
 800e124:	6223      	str	r3, [r4, #32]
				fp->obj.c_ofs = dj.blk_ofs;
 800e126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e128:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 800e12a:	f7fc fecf 	bl	800aecc <init_alloc_info.isra.0>
 800e12e:	e766      	b.n	800dffe <f_open+0x1de>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800e130:	0730      	lsls	r0, r6, #28
 800e132:	f57f af0e 	bpl.w	800df52 <f_open+0x132>
 800e136:	e6cd      	b.n	800ded4 <f_open+0xb4>
					res = FR_NO_FILE;
 800e138:	2504      	movs	r5, #4
 800e13a:	e685      	b.n	800de48 <f_open+0x28>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e13c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
				fp->clust = clst;
 800e140:	460a      	mov	r2, r1
 800e142:	4630      	mov	r0, r6
 800e144:	4651      	mov	r1, sl
 800e146:	2300      	movs	r3, #0
 800e148:	6427      	str	r7, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e14a:	f7f2 f8cd 	bl	80002e8 <__aeabi_uldivmod>
 800e14e:	4313      	orrs	r3, r2
 800e150:	f43f ae7c 	beq.w	800de4c <f_open+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e154:	f8d8 3020 	ldr.w	r3, [r8, #32]
	clst -= 2;		/* Cluster number is origin from 2 */
 800e158:	3f02      	subs	r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e15a:	3b02      	subs	r3, #2
 800e15c:	429f      	cmp	r7, r3
 800e15e:	d207      	bcs.n	800e170 <f_open+0x350>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800e160:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800e164:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800e168:	fb07 3202 	mla	r2, r7, r2, r3
					if (sc == 0) {
 800e16c:	2a00      	cmp	r2, #0
 800e16e:	d146      	bne.n	800e1fe <f_open+0x3de>
 800e170:	2502      	movs	r5, #2
 800e172:	e78c      	b.n	800e08e <f_open+0x26e>
					fp->obj.fs = fs;
 800e174:	f8d8 0014 	ldr.w	r0, [r8, #20]
					init_alloc_info(fs, &fp->obj);
 800e178:	4621      	mov	r1, r4
					fp->obj.fs = fs;
 800e17a:	f8c4 8000 	str.w	r8, [r4]
					init_alloc_info(fs, &fp->obj);
 800e17e:	f7fc fea5 	bl	800aecc <init_alloc_info.isra.0>
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 800e182:	221e      	movs	r2, #30
 800e184:	2100      	movs	r1, #0
 800e186:	3002      	adds	r0, #2
 800e188:	f004 f887 	bl	801229a <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800e18c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e190:	2200      	movs	r2, #0
 800e192:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800e196:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800e19a:	f8c3 202e 	str.w	r2, [r3, #46]	; 0x2e
 800e19e:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 800e1a2:	f8c3 2036 	str.w	r2, [r3, #54]	; 0x36
 800e1a6:	f8c3 203a 	str.w	r2, [r3, #58]	; 0x3a
 800e1aa:	87da      	strh	r2, [r3, #62]	; 0x3e
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800e1ac:	2220      	movs	r2, #32
 800e1ae:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e1b2:	711a      	strb	r2, [r3, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800e1b4:	f8d8 6014 	ldr.w	r6, [r8, #20]
 800e1b8:	f7fc fd52 	bl	800ac60 <get_fattime>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e1bc:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800e1be:	60b0      	str	r0, [r6, #8]
					res = store_xdir(&dj);
 800e1c0:	a804      	add	r0, sp, #16
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e1c2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e1c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 800e1ca:	f7fe fb1d 	bl	800c808 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	f47f aed5 	bne.w	800df7e <f_open+0x15e>
 800e1d4:	68a1      	ldr	r1, [r4, #8]
 800e1d6:	2900      	cmp	r1, #0
 800e1d8:	f43f aeb7 	beq.w	800df4a <f_open+0x12a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e1dc:	4602      	mov	r2, r0
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f7ff fc48 	bl	800da74 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e1e4:	68a3      	ldr	r3, [r4, #8]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	e6ac      	b.n	800df44 <f_open+0x124>
				Files[i].clu == dp->obj.sclust &&
 800e1ea:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800e1ee:	4562      	cmp	r2, ip
 800e1f0:	f47f aece 	bne.w	800df90 <f_open+0x170>
	for (i = 0; i < FF_FS_LOCK; i++) {
 800e1f4:	462a      	mov	r2, r5
 800e1f6:	e6da      	b.n	800dfae <f_open+0x18e>
		Files[i].ctr = n;
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	60da      	str	r2, [r3, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e1fc:	e75a      	b.n	800e0b4 <f_open+0x294>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e1fe:	4402      	add	r2, r0
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e200:	ee18 1a10 	vmov	r1, s16
 800e204:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e206:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e208:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e20c:	f7fc fcee 	bl	800abec <disk_read>
 800e210:	2800      	cmp	r0, #0
 800e212:	f43f ae1b 	beq.w	800de4c <f_open+0x2c>
 800e216:	2501      	movs	r5, #1
 800e218:	e739      	b.n	800e08e <f_open+0x26e>
 800e21a:	bf00      	nop
 800e21c:	f3af 8000 	nop.w
	...
 800e228:	2400077c 	.word	0x2400077c

0800e22c <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800e22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e230:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800e232:	2300      	movs	r3, #0
{
 800e234:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800e236:	f8c8 3000 	str.w	r3, [r8]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e23a:	b150      	cbz	r0, 800e252 <f_read+0x26>
 800e23c:	6803      	ldr	r3, [r0, #0]
 800e23e:	4604      	mov	r4, r0
 800e240:	b13b      	cbz	r3, 800e252 <f_read+0x26>
 800e242:	4617      	mov	r7, r2
 800e244:	781a      	ldrb	r2, [r3, #0]
 800e246:	b122      	cbz	r2, 800e252 <f_read+0x26>
 800e248:	460d      	mov	r5, r1
 800e24a:	88da      	ldrh	r2, [r3, #6]
 800e24c:	8881      	ldrh	r1, [r0, #4]
 800e24e:	4291      	cmp	r1, r2
 800e250:	d005      	beq.n	800e25e <f_read+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 800e252:	f04f 0b09 	mov.w	fp, #9
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800e256:	4658      	mov	r0, fp
 800e258:	b005      	add	sp, #20
 800e25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800e25e:	7858      	ldrb	r0, [r3, #1]
 800e260:	f7fc fca8 	bl	800abb4 <disk_status>
 800e264:	07c1      	lsls	r1, r0, #31
 800e266:	d4f4      	bmi.n	800e252 <f_read+0x26>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e268:	f894 b031 	ldrb.w	fp, [r4, #49]	; 0x31
 800e26c:	f1bb 0f00 	cmp.w	fp, #0
 800e270:	d1f1      	bne.n	800e256 <f_read+0x2a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e272:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e276:	f013 0301 	ands.w	r3, r3, #1
 800e27a:	9301      	str	r3, [sp, #4]
 800e27c:	f000 80ce 	beq.w	800e41c <f_read+0x1f0>
	remain = fp->obj.objsize - fp->fptr;
 800e280:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
 800e288:	1b9b      	subs	r3, r3, r6
 800e28a:	6962      	ldr	r2, [r4, #20]
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800e28c:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 800e290:	eb62 0209 	sbc.w	r2, r2, r9
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e294:	42bb      	cmp	r3, r7
 800e296:	f172 0200 	sbcs.w	r2, r2, #0
 800e29a:	bf38      	it	cc
 800e29c:	461f      	movcc	r7, r3
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800e29e:	2f00      	cmp	r7, #0
 800e2a0:	d0d9      	beq.n	800e256 <f_read+0x2a>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e2a2:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800e2a6:	f8cd b008 	str.w	fp, [sp, #8]
 800e2aa:	46ab      	mov	fp, r5
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	464b      	mov	r3, r9
 800e2b0:	46b9      	mov	r9, r7
 800e2b2:	461f      	mov	r7, r3
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e2b4:	f8ba 500c 	ldrh.w	r5, [sl, #12]
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	462a      	mov	r2, r5
 800e2c0:	f7f2 f812 	bl	80002e8 <__aeabi_uldivmod>
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	d15e      	bne.n	800e386 <f_read+0x15a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e2c8:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800e2cc:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800e2ce:	4003      	ands	r3, r0
 800e2d0:	d068      	beq.n	800e3a4 <f_read+0x178>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e2d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e2d4:	f8da 2020 	ldr.w	r2, [sl, #32]
	clst -= 2;		/* Cluster number is origin from 2 */
 800e2d8:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e2da:	3a02      	subs	r2, #2
 800e2dc:	4290      	cmp	r0, r2
 800e2de:	d270      	bcs.n	800e3c2 <f_read+0x196>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800e2e0:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800e2e4:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800e2e8:	fb01 6600 	mla	r6, r1, r0, r6
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800e2ec:	2e00      	cmp	r6, #0
 800e2ee:	d068      	beq.n	800e3c2 <f_read+0x196>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2f0:	f8ba 200c 	ldrh.w	r2, [sl, #12]
			sect += csect;
 800e2f4:	441e      	add	r6, r3
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800e2f6:	454a      	cmp	r2, r9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2f8:	4615      	mov	r5, r2
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800e2fa:	d82a      	bhi.n	800e352 <f_read+0x126>
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2fc:	f89a 0001 	ldrb.w	r0, [sl, #1]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e300:	fbb9 f7f2 	udiv	r7, r9, r2
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e304:	19da      	adds	r2, r3, r7
 800e306:	428a      	cmp	r2, r1
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e308:	4632      	mov	r2, r6
					cc = fs->csize - csect;
 800e30a:	bf88      	it	hi
 800e30c:	1acf      	subhi	r7, r1, r3
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e30e:	4659      	mov	r1, fp
 800e310:	463b      	mov	r3, r7
 800e312:	f7fc fc6b 	bl	800abec <disk_read>
 800e316:	2800      	cmp	r0, #0
 800e318:	d177      	bne.n	800e40a <f_read+0x1de>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e31a:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800e31e:	2b00      	cmp	r3, #0
 800e320:	f2c0 8096 	blt.w	800e450 <f_read+0x224>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e324:	f8ba 500c 	ldrh.w	r5, [sl, #12]
 800e328:	fb07 f505 	mul.w	r5, r7, r5
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800e32c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e32e:	44ab      	add	fp, r5
 800e330:	f8d8 3000 	ldr.w	r3, [r8]
 800e334:	19ae      	adds	r6, r5, r6
 800e336:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800e338:	442b      	add	r3, r5
 800e33a:	f147 0700 	adc.w	r7, r7, #0
 800e33e:	ebb9 0905 	subs.w	r9, r9, r5
 800e342:	f8c8 3000 	str.w	r3, [r8]
 800e346:	63a6      	str	r6, [r4, #56]	; 0x38
 800e348:	63e7      	str	r7, [r4, #60]	; 0x3c
 800e34a:	d1b3      	bne.n	800e2b4 <f_read+0x88>
 800e34c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e350:	e781      	b.n	800e256 <f_read+0x2a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e352:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e354:	42b3      	cmp	r3, r6
 800e356:	d00f      	beq.n	800e378 <f_read+0x14c>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e358:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 800e35c:	2a00      	cmp	r2, #0
 800e35e:	db67      	blt.n	800e430 <f_read+0x204>
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e360:	2301      	movs	r3, #1
 800e362:	4632      	mov	r2, r6
 800e364:	9900      	ldr	r1, [sp, #0]
 800e366:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800e36a:	f7fc fc3f 	bl	800abec <disk_read>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d14b      	bne.n	800e40a <f_read+0x1de>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800e372:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 800e376:	4615      	mov	r5, r2
			fp->sect = sect;
 800e378:	6466      	str	r6, [r4, #68]	; 0x44
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e37a:	2300      	movs	r3, #0
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800e37c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e37e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e380:	4630      	mov	r0, r6
 800e382:	f7f1 ffb1 	bl	80002e8 <__aeabi_uldivmod>
 800e386:	9b00      	ldr	r3, [sp, #0]
 800e388:	4658      	mov	r0, fp
 800e38a:	1899      	adds	r1, r3, r2
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800e38c:	fbb6 f3f5 	udiv	r3, r6, r5
 800e390:	fb05 6313 	mls	r3, r5, r3, r6
 800e394:	1aed      	subs	r5, r5, r3
 800e396:	454d      	cmp	r5, r9
 800e398:	bf28      	it	cs
 800e39a:	464d      	movcs	r5, r9
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e39c:	462a      	mov	r2, r5
 800e39e:	f003 ffb5 	bl	801230c <memcpy>
 800e3a2:	e7c3      	b.n	800e32c <f_read+0x100>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e3a4:	ea56 0207 	orrs.w	r2, r6, r7
 800e3a8:	d113      	bne.n	800e3d2 <f_read+0x1a6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e3aa:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e3ac:	2801      	cmp	r0, #1
 800e3ae:	d908      	bls.n	800e3c2 <f_read+0x196>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3b0:	1c42      	adds	r2, r0, #1
 800e3b2:	d02a      	beq.n	800e40a <f_read+0x1de>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e3b4:	f8da 2020 	ldr.w	r2, [sl, #32]
				fp->clust = clst;				/* Update current cluster */
 800e3b8:	6420      	str	r0, [r4, #64]	; 0x40
	clst -= 2;		/* Cluster number is origin from 2 */
 800e3ba:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e3bc:	3a02      	subs	r2, #2
 800e3be:	4290      	cmp	r0, r2
 800e3c0:	d38e      	bcc.n	800e2e0 <f_read+0xb4>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e3c2:	2302      	movs	r3, #2
 800e3c4:	469b      	mov	fp, r3
 800e3c6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800e3ca:	4658      	mov	r0, fp
 800e3cc:	b005      	add	sp, #20
 800e3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 800e3d2:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800e3d4:	b32d      	cbz	r5, 800e422 <f_read+0x1f6>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e3d6:	4630      	mov	r0, r6
	FATFS *fs = fp->obj.fs;
 800e3d8:	6826      	ldr	r6, [r4, #0]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e3da:	4639      	mov	r1, r7
 800e3dc:	9303      	str	r3, [sp, #12]
 800e3de:	89b2      	ldrh	r2, [r6, #12]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e3e0:	1d2f      	adds	r7, r5, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e3e2:	f7f1 ff81 	bl	80002e8 <__aeabi_uldivmod>
 800e3e6:	8972      	ldrh	r2, [r6, #10]
 800e3e8:	9b03      	ldr	r3, [sp, #12]
 800e3ea:	f7f1 ff7d 	bl	80002e8 <__aeabi_uldivmod>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3ee:	686a      	ldr	r2, [r5, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e3f0:	9b03      	ldr	r3, [sp, #12]
 800e3f2:	b92a      	cbnz	r2, 800e400 <f_read+0x1d4>
 800e3f4:	e7e5      	b.n	800e3c2 <f_read+0x196>
		cl -= ncl; tbl++;		/* Next fragment */
 800e3f6:	1a80      	subs	r0, r0, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3f8:	f857 2f08 	ldr.w	r2, [r7, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e3fc:	2a00      	cmp	r2, #0
 800e3fe:	d0e0      	beq.n	800e3c2 <f_read+0x196>
		if (cl < ncl) break;	/* In this fragment? */
 800e400:	4282      	cmp	r2, r0
 800e402:	d9f8      	bls.n	800e3f6 <f_read+0x1ca>
	return cl + *tbl;	/* Return the cluster number */
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4410      	add	r0, r2
 800e408:	e7d0      	b.n	800e3ac <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e40a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800e40e:	2301      	movs	r3, #1
}
 800e410:	4658      	mov	r0, fp
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e412:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800e416:	b005      	add	sp, #20
 800e418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e41c:	f04f 0b07 	mov.w	fp, #7
 800e420:	e719      	b.n	800e256 <f_read+0x2a>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e422:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e424:	4620      	mov	r0, r4
 800e426:	9303      	str	r3, [sp, #12]
 800e428:	f7fc fe32 	bl	800b090 <get_fat>
 800e42c:	9b03      	ldr	r3, [sp, #12]
 800e42e:	e7bd      	b.n	800e3ac <f_read+0x180>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e430:	461a      	mov	r2, r3
 800e432:	9900      	ldr	r1, [sp, #0]
 800e434:	2301      	movs	r3, #1
 800e436:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800e43a:	f7fc fbe7 	bl	800ac0c <disk_write>
 800e43e:	2800      	cmp	r0, #0
 800e440:	d1e3      	bne.n	800e40a <f_read+0x1de>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e442:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e44a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800e44e:	e787      	b.n	800e360 <f_read+0x134>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e450:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e452:	1b80      	subs	r0, r0, r6
 800e454:	42b8      	cmp	r0, r7
 800e456:	f4bf af65 	bcs.w	800e324 <f_read+0xf8>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e45a:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 800e45e:	9900      	ldr	r1, [sp, #0]
 800e460:	fb02 b000 	mla	r0, r2, r0, fp
 800e464:	f003 ff52 	bl	801230c <memcpy>
 800e468:	e75c      	b.n	800e324 <f_read+0xf8>
 800e46a:	bf00      	nop

0800e46c <f_sync>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e46c:	2800      	cmp	r0, #0
 800e46e:	f000 80a4 	beq.w	800e5ba <f_sync+0x14e>
 800e472:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800e474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e478:	4604      	mov	r4, r0
 800e47a:	b095      	sub	sp, #84	; 0x54
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e47c:	b12b      	cbz	r3, 800e48a <f_sync+0x1e>
 800e47e:	781a      	ldrb	r2, [r3, #0]
 800e480:	b11a      	cbz	r2, 800e48a <f_sync+0x1e>
 800e482:	8881      	ldrh	r1, [r0, #4]
 800e484:	88da      	ldrh	r2, [r3, #6]
 800e486:	4291      	cmp	r1, r2
 800e488:	d004      	beq.n	800e494 <f_sync+0x28>
	FRESULT res = FR_INVALID_OBJECT;
 800e48a:	2309      	movs	r3, #9
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	b015      	add	sp, #84	; 0x54
 800e490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800e494:	7858      	ldrb	r0, [r3, #1]
 800e496:	f7fc fb8d 	bl	800abb4 <disk_status>
 800e49a:	07c2      	lsls	r2, r0, #31
 800e49c:	d4f5      	bmi.n	800e48a <f_sync+0x1e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e49e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800e4a2:	f012 0340 	ands.w	r3, r2, #64	; 0x40
 800e4a6:	d0f1      	beq.n	800e48c <f_sync+0x20>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e4a8:	0613      	lsls	r3, r2, #24
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800e4aa:	6825      	ldr	r5, [r4, #0]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e4ac:	f100 80d5 	bmi.w	800e65a <f_sync+0x1ee>
			tm = GET_FATTIME();				/* Modified time */
 800e4b0:	f7fc fbd6 	bl	800ac60 <get_fattime>
			if (fs->fs_type == FS_EXFAT) {
 800e4b4:	782b      	ldrb	r3, [r5, #0]
			tm = GET_FATTIME();				/* Modified time */
 800e4b6:	4606      	mov	r6, r0
			if (fs->fs_type == FS_EXFAT) {
 800e4b8:	2b04      	cmp	r3, #4
 800e4ba:	f040 80a5 	bne.w	800e608 <f_sync+0x19c>
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800e4be:	79e3      	ldrb	r3, [r4, #7]
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	d07d      	beq.n	800e5c0 <f_sync+0x154>
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800e4c4:	69e3      	ldr	r3, [r4, #28]
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e4c6:	6c27      	ldr	r7, [r4, #64]	; 0x40
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800e4c8:	b1e3      	cbz	r3, 800e504 <f_sync+0x98>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e4ca:	1afa      	subs	r2, r7, r3
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	6820      	ldr	r0, [r4, #0]
 800e4d0:	f102 0c01 	add.w	ip, r2, #1
 800e4d4:	f102 0202 	add.w	r2, r2, #2
 800e4d8:	bf08      	it	eq
 800e4da:	f04f 32ff 	moveq.w	r2, #4294967295
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e4de:	f1bc 0f01 	cmp.w	ip, #1
 800e4e2:	4661      	mov	r1, ip
 800e4e4:	f240 808b 	bls.w	800e5fe <f_sync+0x192>
 800e4e8:	6a03      	ldr	r3, [r0, #32]
 800e4ea:	459c      	cmp	ip, r3
 800e4ec:	f080 8087 	bcs.w	800e5fe <f_sync+0x192>
 800e4f0:	f7fc fd34 	bl	800af5c <put_fat.part.0>
		if (res != FR_OK) return res;
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d1c8      	bne.n	800e48c <f_sync+0x20>
		obj->n_frag--;
 800e4fa:	69e3      	ldr	r3, [r4, #28]
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1e2      	bne.n	800e4ca <f_sync+0x5e>
	dp->obj.stat = (BYTE)obj->c_size;
 800e504:	6a63      	ldr	r3, [r4, #36]	; 0x24
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e506:	4668      	mov	r0, sp
	dp->obj.fs = obj->fs;
 800e508:	6822      	ldr	r2, [r4, #0]
	dp->obj.stat = (BYTE)obj->c_size;
 800e50a:	f88d 3007 	strb.w	r3, [sp, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e50e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	dp->blk_ofs = obj->c_ofs;
 800e512:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e514:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 800e516:	6a23      	ldr	r3, [r4, #32]
	dp->obj.fs = obj->fs;
 800e518:	9200      	str	r2, [sp, #0]
	dp->obj.sclust = obj->c_scl;
 800e51a:	9302      	str	r3, [sp, #8]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e51c:	2300      	movs	r3, #0
	dp->blk_ofs = obj->c_ofs;
 800e51e:	9113      	str	r1, [sp, #76]	; 0x4c
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e520:	9305      	str	r3, [sp, #20]
	dp->obj.n_frag = 0;
 800e522:	9307      	str	r3, [sp, #28]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e524:	f7fd fcb0 	bl	800be88 <dir_sdi>
	if (res == FR_OK) {
 800e528:	4603      	mov	r3, r0
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d1ae      	bne.n	800e48c <f_sync+0x20>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e52e:	4668      	mov	r0, sp
 800e530:	f7fd f9b4 	bl	800b89c <load_xdir>
					if (res == FR_OK) {
 800e534:	4603      	mov	r3, r0
 800e536:	2800      	cmp	r0, #0
 800e538:	d1a8      	bne.n	800e48c <f_sync+0x20>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800e53a:	696f      	ldr	r7, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e53c:	469c      	mov	ip, r3
 800e53e:	4619      	mov	r1, r3
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e540:	4668      	mov	r0, sp
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800e542:	793a      	ldrb	r2, [r7, #4]
 800e544:	f042 0220 	orr.w	r2, r2, #32
 800e548:	713a      	strb	r2, [r7, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800e54a:	79e7      	ldrb	r7, [r4, #7]
 800e54c:	696a      	ldr	r2, [r5, #20]
 800e54e:	f047 0701 	orr.w	r7, r7, #1
 800e552:	f882 7021 	strb.w	r7, [r2, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 800e556:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e558:	68a7      	ldr	r7, [r4, #8]
 800e55a:	6357      	str	r7, [r2, #52]	; 0x34
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800e55c:	6962      	ldr	r2, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e55e:	0a17      	lsrs	r7, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800e560:	f362 0c07 	bfi	ip, r2, #0, #8
 800e564:	f367 2c0f 	bfi	ip, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800e568:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e56a:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800e56c:	f367 4c17 	bfi	ip, r7, #16, #8
 800e570:	6927      	ldr	r7, [r4, #16]
 800e572:	f362 6c1f 	bfi	ip, r2, #24, #8
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800e576:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e578:	6397      	str	r7, [r2, #56]	; 0x38
 800e57a:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800e57e:	6962      	ldr	r2, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e580:	0a17      	lsrs	r7, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800e582:	f362 0107 	bfi	r1, r2, #0, #8
 800e586:	f367 210f 	bfi	r1, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800e58a:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e58c:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800e58e:	f367 4117 	bfi	r1, r7, #16, #8
 800e592:	6927      	ldr	r7, [r4, #16]
 800e594:	f362 611f 	bfi	r1, r2, #24, #8
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800e598:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e59a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e59c:	6297      	str	r7, [r2, #40]	; 0x28
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e59e:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5a0:	60d6      	str	r6, [r2, #12]
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e5a2:	696a      	ldr	r2, [r5, #20]
 800e5a4:	7553      	strb	r3, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e5a6:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5a8:	6113      	str	r3, [r2, #16]
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e5aa:	f7fe f92d 	bl	800c808 <store_xdir>
						if (res == FR_OK) {
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	f47f af6b 	bne.w	800e48c <f_sync+0x20>
							res = sync_fs(fs);
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	e045      	b.n	800e646 <f_sync+0x1da>
	FRESULT res = FR_INVALID_OBJECT;
 800e5ba:	2309      	movs	r3, #9
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	4770      	bx	lr
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e5c0:	69a3      	ldr	r3, [r4, #24]
 800e5c2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d05d      	beq.n	800e686 <f_sync+0x21a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5ca:	f1b8 0f01 	cmp.w	r8, #1
			res = put_fat(obj->fs, cl, cl + 1);
 800e5ce:	6820      	ldr	r0, [r4, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5d0:	d915      	bls.n	800e5fe <f_sync+0x192>
 800e5d2:	4443      	add	r3, r8
 800e5d4:	f103 39ff 	add.w	r9, r3, #4294967295
 800e5d8:	6a03      	ldr	r3, [r0, #32]
 800e5da:	f108 0701 	add.w	r7, r8, #1
 800e5de:	4641      	mov	r1, r8
 800e5e0:	4543      	cmp	r3, r8
 800e5e2:	463a      	mov	r2, r7
 800e5e4:	d90b      	bls.n	800e5fe <f_sync+0x192>
 800e5e6:	f7fc fcb9 	bl	800af5c <put_fat.part.0>
			if (res != FR_OK) return res;
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	f47f af4d 	bne.w	800e48c <f_sync+0x20>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e5f2:	45c8      	cmp	r8, r9
 800e5f4:	46b8      	mov	r8, r7
 800e5f6:	d046      	beq.n	800e686 <f_sync+0x21a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5f8:	2f01      	cmp	r7, #1
			res = put_fat(obj->fs, cl, cl + 1);
 800e5fa:	6820      	ldr	r0, [r4, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5fc:	d8ec      	bhi.n	800e5d8 <f_sync+0x16c>
	FRESULT res = FR_INT_ERR;
 800e5fe:	2302      	movs	r3, #2
}
 800e600:	4618      	mov	r0, r3
 800e602:	b015      	add	sp, #84	; 0x54
 800e604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = move_window(fs, fp->dir_sect);
 800e608:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e60a:	4628      	mov	r0, r5
 800e60c:	f7fc fc70 	bl	800aef0 <move_window>
				if (res == FR_OK) {
 800e610:	4603      	mov	r3, r0
 800e612:	2800      	cmp	r0, #0
 800e614:	f47f af3a 	bne.w	800e48c <f_sync+0x20>
					dir = fp->dir_ptr;
 800e618:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800e61a:	7ada      	ldrb	r2, [r3, #11]
 800e61c:	f042 0220 	orr.w	r2, r2, #32
 800e620:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800e622:	68a2      	ldr	r2, [r4, #8]
 800e624:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e626:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800e62a:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800e62c:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800e62e:	7809      	ldrb	r1, [r1, #0]
 800e630:	2903      	cmp	r1, #3
 800e632:	d021      	beq.n	800e678 <f_sync+0x20c>
	*ptr++ = (BYTE)val; val >>= 8;
 800e634:	6921      	ldr	r1, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800e636:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800e638:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e63c:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800e63e:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800e640:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800e642:	2301      	movs	r3, #1
 800e644:	712b      	strb	r3, [r5, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e646:	f7fc fbe9 	bl	800ae1c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e64a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
					res = sync_fs(fs);					/* Restore it to the directory */
 800e64e:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e654:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800e658:	e718      	b.n	800e48c <f_sync+0x20>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e65a:	2301      	movs	r3, #1
 800e65c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e65e:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800e662:	7868      	ldrb	r0, [r5, #1]
 800e664:	f7fc fad2 	bl	800ac0c <disk_write>
 800e668:	b958      	cbnz	r0, 800e682 <f_sync+0x216>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e66a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e672:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800e676:	e71b      	b.n	800e4b0 <f_sync+0x44>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e678:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e67a:	751a      	strb	r2, [r3, #20]
 800e67c:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800e67e:	755a      	strb	r2, [r3, #21]
}
 800e680:	e7d8      	b.n	800e634 <f_sync+0x1c8>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e682:	2301      	movs	r3, #1
 800e684:	e702      	b.n	800e48c <f_sync+0x20>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800e686:	2300      	movs	r3, #0
 800e688:	71e3      	strb	r3, [r4, #7]
				if (res == FR_OK) {
 800e68a:	e71b      	b.n	800e4c4 <f_sync+0x58>

0800e68c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800e68c:	b510      	push	{r4, lr}
 800e68e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e690:	f7ff feec 	bl	800e46c <f_sync>
	if (res == FR_OK)
 800e694:	b100      	cbz	r0, 800e698 <f_close+0xc>
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800e696:	bd10      	pop	{r4, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e698:	b13c      	cbz	r4, 800e6aa <f_close+0x1e>
 800e69a:	6823      	ldr	r3, [r4, #0]
 800e69c:	b12b      	cbz	r3, 800e6aa <f_close+0x1e>
 800e69e:	781a      	ldrb	r2, [r3, #0]
 800e6a0:	b11a      	cbz	r2, 800e6aa <f_close+0x1e>
 800e6a2:	88a1      	ldrh	r1, [r4, #4]
 800e6a4:	88da      	ldrh	r2, [r3, #6]
 800e6a6:	4291      	cmp	r1, r2
 800e6a8:	d001      	beq.n	800e6ae <f_close+0x22>
	FRESULT res = FR_INVALID_OBJECT;
 800e6aa:	2009      	movs	r0, #9
}
 800e6ac:	bd10      	pop	{r4, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800e6ae:	7858      	ldrb	r0, [r3, #1]
 800e6b0:	f7fc fa80 	bl	800abb4 <disk_status>
 800e6b4:	f010 0001 	ands.w	r0, r0, #1
 800e6b8:	d1f7      	bne.n	800e6aa <f_close+0x1e>
	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 800e6ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d812      	bhi.n	800e6e8 <f_close+0x5c>
		n = Files[i].ctr;
 800e6c2:	490b      	ldr	r1, [pc, #44]	; (800e6f0 <f_close+0x64>)
 800e6c4:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 800e6c8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800e6cc:	68da      	ldr	r2, [r3, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 800e6ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e6d2:	d00b      	beq.n	800e6ec <f_close+0x60>
		if (n > 0) n--;			/* Decrement read mode open count */
 800e6d4:	b112      	cbz	r2, 800e6dc <f_close+0x50>
 800e6d6:	3a01      	subs	r2, #1
		Files[i].ctr = n;
 800e6d8:	60da      	str	r2, [r3, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e6da:	b912      	cbnz	r2, 800e6e2 <f_close+0x56>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 800e6dc:	2300      	movs	r3, #0
 800e6de:	f841 300c 	str.w	r3, [r1, ip]
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	6023      	str	r3, [r4, #0]
}
 800e6e6:	bd10      	pop	{r4, pc}
		res = FR_INT_ERR;		/* Invalid index number */
 800e6e8:	2002      	movs	r0, #2
}
 800e6ea:	bd10      	pop	{r4, pc}
		Files[i].ctr = n;
 800e6ec:	60d8      	str	r0, [r3, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e6ee:	e7f5      	b.n	800e6dc <f_close+0x50>
 800e6f0:	2400077c 	.word	0x2400077c

0800e6f4 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 800e6f4:	287f      	cmp	r0, #127	; 0x7f
 800e6f6:	d801      	bhi.n	800e6fc <ff_uni2oem+0x8>
		c = (WCHAR)uni;
 800e6f8:	b280      	uxth	r0, r0
 800e6fa:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 800e6fc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800e700:	d214      	bcs.n	800e72c <ff_uni2oem+0x38>
 800e702:	f240 3352 	movw	r3, #850	; 0x352
 800e706:	4299      	cmp	r1, r3
 800e708:	d110      	bne.n	800e72c <ff_uni2oem+0x38>
 800e70a:	4a09      	ldr	r2, [pc, #36]	; (800e730 <ff_uni2oem+0x3c>)
 800e70c:	2300      	movs	r3, #0
 800e70e:	e001      	b.n	800e714 <ff_uni2oem+0x20>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800e710:	2b80      	cmp	r3, #128	; 0x80
 800e712:	d00b      	beq.n	800e72c <ff_uni2oem+0x38>
 800e714:	f832 1b02 	ldrh.w	r1, [r2], #2
 800e718:	fa1f fc83 	uxth.w	ip, r3
 800e71c:	3301      	adds	r3, #1
 800e71e:	4281      	cmp	r1, r0
 800e720:	d1f6      	bne.n	800e710 <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
 800e722:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800e726:	fa1f f08c 	uxth.w	r0, ip
 800e72a:	4770      	bx	lr
	WCHAR c = 0;
 800e72c:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800e72e:	4770      	bx	lr
 800e730:	08015994 	.word	0x08015994

0800e734 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
 800e734:	287f      	cmp	r0, #127	; 0x7f
 800e736:	d906      	bls.n	800e746 <ff_oem2uni+0x12>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
			if (oem < 0x100) c = p[oem - 0x80];
 800e738:	28ff      	cmp	r0, #255	; 0xff
 800e73a:	d803      	bhi.n	800e744 <ff_oem2uni+0x10>
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800e73c:	f240 3352 	movw	r3, #850	; 0x352
			if (oem < 0x100) c = p[oem - 0x80];
 800e740:	4299      	cmp	r1, r3
 800e742:	d001      	beq.n	800e748 <ff_oem2uni+0x14>
	WCHAR c = 0;
 800e744:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800e746:	4770      	bx	lr
			if (oem < 0x100) c = p[oem - 0x80];
 800e748:	4b02      	ldr	r3, [pc, #8]	; (800e754 <ff_oem2uni+0x20>)
 800e74a:	4a03      	ldr	r2, [pc, #12]	; (800e758 <ff_oem2uni+0x24>)
 800e74c:	4403      	add	r3, r0
 800e74e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800e752:	4770      	bx	lr
 800e754:	7fffff80 	.word	0x7fffff80
 800e758:	08015994 	.word	0x08015994

0800e75c <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 800e75c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800e760:	d21d      	bcs.n	800e79e <ff_wtoupper+0x42>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 800e762:	4b25      	ldr	r3, [pc, #148]	; (800e7f8 <ff_wtoupper+0x9c>)
 800e764:	4a25      	ldr	r2, [pc, #148]	; (800e7fc <ff_wtoupper+0xa0>)
{
 800e766:	b530      	push	{r4, r5, lr}
		p = uc < 0x1000 ? cvt1 : cvt2;
 800e768:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e76c:	bf28      	it	cs
 800e76e:	4613      	movcs	r3, r2
		uc = (WORD)uni;
 800e770:	b284      	uxth	r4, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 800e772:	3304      	adds	r3, #4
 800e774:	e00a      	b.n	800e78c <ff_wtoupper+0x30>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e776:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800e77a:	fa5f fc82 	uxtb.w	ip, r2
 800e77e:	0a12      	lsrs	r2, r2, #8
			if (uc < bc + nc) {	/* In the block? */
 800e780:	eb0c 0e01 	add.w	lr, ip, r1
 800e784:	4570      	cmp	r0, lr
 800e786:	db0b      	blt.n	800e7a0 <ff_wtoupper+0x44>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 800e788:	3304      	adds	r3, #4
 800e78a:	b192      	cbz	r2, 800e7b2 <ff_wtoupper+0x56>
			bc = *p++;								/* Get the block base */
 800e78c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 800e790:	461d      	mov	r5, r3
 800e792:	1e4a      	subs	r2, r1, #1
 800e794:	b292      	uxth	r2, r2
 800e796:	4294      	cmp	r4, r2
 800e798:	d8ed      	bhi.n	800e776 <ff_wtoupper+0x1a>
		}
		uni = uc;
 800e79a:	4620      	mov	r0, r4
	}

	return uni;
}
 800e79c:	bd30      	pop	{r4, r5, pc}
 800e79e:	4770      	bx	lr
				switch (cmd) {
 800e7a0:	2a08      	cmp	r2, #8
 800e7a2:	d8fa      	bhi.n	800e79a <ff_wtoupper+0x3e>
 800e7a4:	e8df f002 	tbb	[pc, r2]
 800e7a8:	1916100c 	.word	0x1916100c
 800e7ac:	25221f1c 	.word	0x25221f1c
 800e7b0:	08          	.byte	0x08
 800e7b1:	00          	.byte	0x00
			if (cmd == 0) p += nc;	/* Skip table if needed */
 800e7b2:	eb05 034c 	add.w	r3, r5, ip, lsl #1
 800e7b6:	e7dc      	b.n	800e772 <ff_wtoupper+0x16>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 800e7b8:	f5a4 54e3 	sub.w	r4, r4, #7264	; 0x1c60
 800e7bc:	b2a4      	uxth	r4, r4
 800e7be:	e7ec      	b.n	800e79a <ff_wtoupper+0x3e>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 800e7c0:	1a41      	subs	r1, r0, r1
 800e7c2:	f833 4011 	ldrh.w	r4, [r3, r1, lsl #1]
 800e7c6:	e7e8      	b.n	800e79a <ff_wtoupper+0x3e>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800e7c8:	1a63      	subs	r3, r4, r1
 800e7ca:	f003 0301 	and.w	r3, r3, #1
 800e7ce:	1ae3      	subs	r3, r4, r3
 800e7d0:	b29c      	uxth	r4, r3
 800e7d2:	e7e2      	b.n	800e79a <ff_wtoupper+0x3e>
				case 2: uc -= 16; break;			/* Shift -16 */
 800e7d4:	3c10      	subs	r4, #16
 800e7d6:	b2a4      	uxth	r4, r4
 800e7d8:	e7df      	b.n	800e79a <ff_wtoupper+0x3e>
				case 3:	uc -= 32; break;			/* Shift -32 */
 800e7da:	3c20      	subs	r4, #32
 800e7dc:	b2a4      	uxth	r4, r4
 800e7de:	e7dc      	b.n	800e79a <ff_wtoupper+0x3e>
				case 4:	uc -= 48; break;			/* Shift -48 */
 800e7e0:	3c30      	subs	r4, #48	; 0x30
 800e7e2:	b2a4      	uxth	r4, r4
 800e7e4:	e7d9      	b.n	800e79a <ff_wtoupper+0x3e>
				case 5:	uc -= 26; break;			/* Shift -26 */
 800e7e6:	3c1a      	subs	r4, #26
 800e7e8:	b2a4      	uxth	r4, r4
 800e7ea:	e7d6      	b.n	800e79a <ff_wtoupper+0x3e>
				case 6:	uc += 8; break;				/* Shift +8 */
 800e7ec:	3408      	adds	r4, #8
 800e7ee:	b2a4      	uxth	r4, r4
 800e7f0:	e7d3      	b.n	800e79a <ff_wtoupper+0x3e>
				case 7: uc -= 80; break;			/* Shift -80 */
 800e7f2:	3c50      	subs	r4, #80	; 0x50
 800e7f4:	b2a4      	uxth	r4, r4
 800e7f6:	e7d0      	b.n	800e79a <ff_wtoupper+0x3e>
 800e7f8:	080156e4 	.word	0x080156e4
 800e7fc:	080158d8 	.word	0x080158d8

0800e800 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e800:	4b2d      	ldr	r3, [pc, #180]	; (800e8b8 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e802:	492e      	ldr	r1, [pc, #184]	; (800e8bc <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e804:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e808:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800e80c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800e812:	691a      	ldr	r2, [r3, #16]
 800e814:	f042 0210 	orr.w	r2, r2, #16
 800e818:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e81a:	680b      	ldr	r3, [r1, #0]
 800e81c:	f003 030f 	and.w	r3, r3, #15
 800e820:	2b06      	cmp	r3, #6
 800e822:	d805      	bhi.n	800e830 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e824:	680b      	ldr	r3, [r1, #0]
 800e826:	f023 030f 	bic.w	r3, r3, #15
 800e82a:	f043 0307 	orr.w	r3, r3, #7
 800e82e:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e830:	4b23      	ldr	r3, [pc, #140]	; (800e8c0 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e832:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800e834:	4a23      	ldr	r2, [pc, #140]	; (800e8c4 <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800e836:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e838:	4820      	ldr	r0, [pc, #128]	; (800e8bc <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 800e83a:	f041 0101 	orr.w	r1, r1, #1
 800e83e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800e840:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800e842:	6819      	ldr	r1, [r3, #0]
 800e844:	400a      	ands	r2, r1
 800e846:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e848:	6803      	ldr	r3, [r0, #0]
 800e84a:	071b      	lsls	r3, r3, #28
 800e84c:	d505      	bpl.n	800e85a <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e84e:	6803      	ldr	r3, [r0, #0]
 800e850:	f023 030f 	bic.w	r3, r3, #15
 800e854:	f043 0307 	orr.w	r3, r3, #7
 800e858:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800e85a:	4b19      	ldr	r3, [pc, #100]	; (800e8c0 <SystemInit+0xc0>)
 800e85c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800e85e:	491a      	ldr	r1, [pc, #104]	; (800e8c8 <SystemInit+0xc8>)
  RCC->PLLCFGR = 0x01FF0000;
 800e860:	481a      	ldr	r0, [pc, #104]	; (800e8cc <SystemInit+0xcc>)
  RCC->PLLCKSELR = 0x02020200;
 800e862:	4c1b      	ldr	r4, [pc, #108]	; (800e8d0 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800e864:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800e866:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800e868:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800e86a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800e86c:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800e86e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
  RCC->PLL1DIVR = 0x01010280;
 800e872:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800e874:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800e876:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800e878:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 800e87a:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800e87c:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800e87e:	6819      	ldr	r1, [r3, #0]
 800e880:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800e884:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800e886:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 800e888:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e88c:	4911      	ldr	r1, [pc, #68]	; (800e8d4 <SystemInit+0xd4>)
  EXTI_D2->EMR3 |= 0x4000UL;
 800e88e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e892:	4b11      	ldr	r3, [pc, #68]	; (800e8d8 <SystemInit+0xd8>)
  EXTI_D2->EMR3 |= 0x4000UL;
 800e894:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e898:	680a      	ldr	r2, [r1, #0]
 800e89a:	4013      	ands	r3, r2
 800e89c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8a0:	d203      	bcs.n	800e8aa <SystemInit+0xaa>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800e8a2:	4b0e      	ldr	r3, [pc, #56]	; (800e8dc <SystemInit+0xdc>)
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e8aa:	4b0d      	ldr	r3, [pc, #52]	; (800e8e0 <SystemInit+0xe0>)
 800e8ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800e8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e8b4:	601a      	str	r2, [r3, #0]
}
 800e8b6:	4770      	bx	lr
 800e8b8:	e000ed00 	.word	0xe000ed00
 800e8bc:	52002000 	.word	0x52002000
 800e8c0:	58024400 	.word	0x58024400
 800e8c4:	eaf6ed7f 	.word	0xeaf6ed7f
 800e8c8:	01010280 	.word	0x01010280
 800e8cc:	01ff0000 	.word	0x01ff0000
 800e8d0:	02020200 	.word	0x02020200
 800e8d4:	5c001000 	.word	0x5c001000
 800e8d8:	ffff0000 	.word	0xffff0000
 800e8dc:	51008000 	.word	0x51008000
 800e8e0:	52004000 	.word	0x52004000

0800e8e4 <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800e8e4:	f44f 7294 	mov.w	r2, #296	; 0x128
{
 800e8e8:	b508      	push	{r3, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800e8ea:	4b03      	ldr	r3, [pc, #12]	; (800e8f8 <tud_cdc_n_available+0x14>)
 800e8ec:	fb02 3000 	mla	r0, r2, r0, r3
 800e8f0:	3010      	adds	r0, #16
 800e8f2:	f000 ffc9 	bl	800f888 <tu_fifo_count>
}
 800e8f6:	bd08      	pop	{r3, pc}
 800e8f8:	240009a0 	.word	0x240009a0

0800e8fc <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800e8fc:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e900:	b292      	uxth	r2, r2
{
 800e902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e906:	fb03 f500 	mul.w	r5, r3, r0
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800e90a:	4f19      	ldr	r7, [pc, #100]	; (800e970 <tud_cdc_n_read+0x74>)
 800e90c:	f105 0410 	add.w	r4, r5, #16
 800e910:	443c      	add	r4, r7
 800e912:	4620      	mov	r0, r4
 800e914:	f001 f834 	bl	800f980 <tu_fifo_read_n>
 800e918:	4606      	mov	r6, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800e91a:	4620      	mov	r0, r4
 800e91c:	f000 ffd4 	bl	800f8c8 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800e920:	283f      	cmp	r0, #63	; 0x3f
 800e922:	d802      	bhi.n	800e92a <tud_cdc_n_read+0x2e>
  _prep_out_transaction(p_cdc);
  return num_read;
}
 800e924:	4630      	mov	r0, r6
 800e926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800e92a:	eb07 0805 	add.w	r8, r7, r5
 800e92e:	2000      	movs	r0, #0
 800e930:	f898 1003 	ldrb.w	r1, [r8, #3]
 800e934:	f002 f97e 	bl	8010c34 <usbd_edpt_claim>
 800e938:	2800      	cmp	r0, #0
 800e93a:	d0f3      	beq.n	800e924 <tud_cdc_n_read+0x28>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800e93c:	4620      	mov	r0, r4
 800e93e:	f000 ffc3 	bl	800f8c8 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800e942:	283f      	cmp	r0, #63	; 0x3f
 800e944:	d90b      	bls.n	800e95e <tud_cdc_n_read+0x62>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800e946:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 800e94a:	2340      	movs	r3, #64	; 0x40
 800e94c:	f898 1003 	ldrb.w	r1, [r8, #3]
 800e950:	2000      	movs	r0, #0
 800e952:	443a      	add	r2, r7
 800e954:	f002 f98a 	bl	8010c6c <usbd_edpt_xfer>
}
 800e958:	4630      	mov	r0, r6
 800e95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800e95e:	f898 1003 	ldrb.w	r1, [r8, #3]
 800e962:	2000      	movs	r0, #0
 800e964:	f002 f974 	bl	8010c50 <usbd_edpt_release>
}
 800e968:	4630      	mov	r0, r6
 800e96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e96e:	bf00      	nop
 800e970:	240009a0 	.word	0x240009a0

0800e974 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 800e974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e978:	4604      	mov	r4, r0

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 800e97a:	f001 fb69 	bl	8010050 <tud_mounted>
 800e97e:	b910      	cbnz	r0, 800e986 <tud_cdc_n_write_flush+0x12>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 800e980:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
 800e982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e986:	f001 fb6b 	bl	8010060 <tud_suspended>
 800e98a:	4606      	mov	r6, r0
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d1f7      	bne.n	800e980 <tud_cdc_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 800e990:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e994:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800e9f8 <tud_cdc_n_write_flush+0x84>
 800e998:	fb03 f404 	mul.w	r4, r3, r4
 800e99c:	f104 051c 	add.w	r5, r4, #28
 800e9a0:	4445      	add	r5, r8
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	f000 ff70 	bl	800f888 <tu_fifo_count>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d0e9      	beq.n	800e980 <tud_cdc_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800e9ac:	eb08 0704 	add.w	r7, r8, r4
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	78b9      	ldrb	r1, [r7, #2]
 800e9b4:	f002 f93e 	bl	8010c34 <usbd_edpt_claim>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d0e1      	beq.n	800e980 <tud_cdc_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 800e9bc:	34e8      	adds	r4, #232	; 0xe8
 800e9be:	4628      	mov	r0, r5
 800e9c0:	2240      	movs	r2, #64	; 0x40
 800e9c2:	4444      	add	r4, r8
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	f000 ffdb 	bl	800f980 <tu_fifo_read_n>
  if ( count )
 800e9ca:	4605      	mov	r5, r0
 800e9cc:	b170      	cbz	r0, 800e9ec <tud_cdc_n_write_flush+0x78>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	4622      	mov	r2, r4
 800e9d2:	78b9      	ldrb	r1, [r7, #2]
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f002 f949 	bl	8010c6c <usbd_edpt_xfer>
 800e9da:	b950      	cbnz	r0, 800e9f2 <tud_cdc_n_write_flush+0x7e>
 800e9dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e9e0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800e9e4:	07db      	lsls	r3, r3, #31
 800e9e6:	d5cb      	bpl.n	800e980 <tud_cdc_n_write_flush+0xc>
 800e9e8:	be00      	bkpt	0x0000
 800e9ea:	e7ca      	b.n	800e982 <tud_cdc_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800e9ec:	78b9      	ldrb	r1, [r7, #2]
 800e9ee:	f002 f92f 	bl	8010c50 <usbd_edpt_release>
    return 0;
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	e7c5      	b.n	800e982 <tud_cdc_n_write_flush+0xe>
 800e9f6:	bf00      	nop
 800e9f8:	240009a0 	.word	0x240009a0

0800e9fc <tud_cdc_n_write>:
{
 800e9fc:	b538      	push	{r3, r4, r5, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800e9fe:	f44f 7394 	mov.w	r3, #296	; 0x128
 800ea02:	4c0b      	ldr	r4, [pc, #44]	; (800ea30 <tud_cdc_n_write+0x34>)
 800ea04:	b292      	uxth	r2, r2
{
 800ea06:	4605      	mov	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800ea08:	fb03 4400 	mla	r4, r3, r0, r4
 800ea0c:	341c      	adds	r4, #28
 800ea0e:	4620      	mov	r0, r4
 800ea10:	f001 f90c 	bl	800fc2c <tu_fifo_write_n>
 800ea14:	4603      	mov	r3, r0
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800ea16:	4620      	mov	r0, r4
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800ea18:	461c      	mov	r4, r3
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800ea1a:	f000 ff35 	bl	800f888 <tu_fifo_count>
 800ea1e:	283f      	cmp	r0, #63	; 0x3f
 800ea20:	d801      	bhi.n	800ea26 <tud_cdc_n_write+0x2a>
}
 800ea22:	4620      	mov	r0, r4
 800ea24:	bd38      	pop	{r3, r4, r5, pc}
    tud_cdc_n_write_flush(itf);
 800ea26:	4628      	mov	r0, r5
 800ea28:	f7ff ffa4 	bl	800e974 <tud_cdc_n_write_flush>
}
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	240009a0 	.word	0x240009a0

0800ea34 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800ea34:	b510      	push	{r4, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800ea36:	4c12      	ldr	r4, [pc, #72]	; (800ea80 <cdcd_init+0x4c>)
{
 800ea38:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800ea3a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ea3e:	2100      	movs	r1, #0
 800ea40:	4620      	mov	r0, r4
 800ea42:	f003 fc2a 	bl	801229a <memset>
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800ea46:	2300      	movs	r3, #0
    p_cdc->wanted_char = (char) -1;
 800ea48:	21ff      	movs	r1, #255	; 0xff
    p_cdc->line_coding.bit_rate  = 115200;
 800ea4a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    p_cdc->line_coding.data_bits = 8;
 800ea4e:	2008      	movs	r0, #8
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800ea50:	9300      	str	r3, [sp, #0]
    p_cdc->wanted_char = (char) -1;
 800ea52:	7161      	strb	r1, [r4, #5]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800ea54:	2301      	movs	r3, #1
 800ea56:	f104 0128 	add.w	r1, r4, #40	; 0x28
    p_cdc->line_coding.bit_rate  = 115200;
 800ea5a:	60a2      	str	r2, [r4, #8]
    p_cdc->line_coding.data_bits = 8;
 800ea5c:	73a0      	strb	r0, [r4, #14]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800ea5e:	2240      	movs	r2, #64	; 0x40
 800ea60:	f104 0010 	add.w	r0, r4, #16
 800ea64:	f000 fef6 	bl	800f854 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 800ea68:	2301      	movs	r3, #1
 800ea6a:	2240      	movs	r2, #64	; 0x40
 800ea6c:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800ea70:	f104 001c 	add.w	r0, r4, #28
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	f000 feed 	bl	800f854 <tu_fifo_config>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 800ea7a:	b002      	add	sp, #8
 800ea7c:	bd10      	pop	{r4, pc}
 800ea7e:	bf00      	nop
 800ea80:	240009a0 	.word	0x240009a0

0800ea84 <cdcd_reset>:

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800ea84:	4b09      	ldr	r3, [pc, #36]	; (800eaac <cdcd_reset+0x28>)
 800ea86:	2200      	movs	r2, #0
{
 800ea88:	b510      	push	{r4, lr}
    tu_fifo_clear(&p_cdc->rx_ff);
    tu_fifo_clear(&p_cdc->tx_ff);
 800ea8a:	f103 041c 	add.w	r4, r3, #28
    tu_fifo_clear(&p_cdc->rx_ff);
 800ea8e:	f103 0010 	add.w	r0, r3, #16
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	711a      	strb	r2, [r3, #4]
    tu_fifo_clear(&p_cdc->rx_ff);
 800ea96:	f001 fa63 	bl	800ff60 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f001 fa60 	bl	800ff60 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	2101      	movs	r1, #1
  }
}
 800eaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800eaa8:	f001 ba60 	b.w	800ff6c <tu_fifo_set_overwritable>
 800eaac:	240009a0 	.word	0x240009a0

0800eab0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800eab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800eab4:	794b      	ldrb	r3, [r1, #5]
{
 800eab6:	b082      	sub	sp, #8
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800eab8:	2b02      	cmp	r3, #2
 800eaba:	d102      	bne.n	800eac2 <cdcd_open+0x12>
 800eabc:	798b      	ldrb	r3, [r1, #6]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d004      	beq.n	800eacc <cdcd_open+0x1c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
      break;
    }
  }
  TU_ASSERT(p_cdc, 0);
 800eac2:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
 800eac4:	4628      	mov	r0, r5
 800eac6:	b002      	add	sp, #8
 800eac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 800eacc:	4e32      	ldr	r6, [pc, #200]	; (800eb98 <cdcd_open+0xe8>)
 800eace:	78b3      	ldrb	r3, [r6, #2]
 800ead0:	b13b      	cbz	r3, 800eae2 <cdcd_open+0x32>
  TU_ASSERT(p_cdc, 0);
 800ead2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ead6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800eada:	07db      	lsls	r3, r3, #31
 800eadc:	d5f1      	bpl.n	800eac2 <cdcd_open+0x12>
 800eade:	be00      	bkpt	0x0000
 800eae0:	e7ef      	b.n	800eac2 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800eae2:	788b      	ldrb	r3, [r1, #2]
 800eae4:	4607      	mov	r7, r0
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800eae6:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800eae8:	7033      	strb	r3, [r6, #0]

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 800eaea:	780b      	ldrb	r3, [r1, #0]
 800eaec:	18cc      	adds	r4, r1, r3
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800eaee:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800eaf0:	2924      	cmp	r1, #36	; 0x24
 800eaf2:	d10b      	bne.n	800eb0c <cdcd_open+0x5c>
 800eaf4:	2a08      	cmp	r2, #8
 800eaf6:	d802      	bhi.n	800eafe <cdcd_open+0x4e>
 800eaf8:	e00f      	b.n	800eb1a <cdcd_open+0x6a>
 800eafa:	42aa      	cmp	r2, r5
 800eafc:	d30d      	bcc.n	800eb1a <cdcd_open+0x6a>
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800eafe:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800eb00:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
 800eb02:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800eb04:	7861      	ldrb	r1, [r4, #1]
 800eb06:	b29d      	uxth	r5, r3
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800eb08:	2924      	cmp	r1, #36	; 0x24
 800eb0a:	d0f6      	beq.n	800eafa <cdcd_open+0x4a>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800eb0c:	2905      	cmp	r1, #5
 800eb0e:	d01b      	beq.n	800eb48 <cdcd_open+0x98>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800eb10:	2904      	cmp	r1, #4
 800eb12:	d102      	bne.n	800eb1a <cdcd_open+0x6a>
 800eb14:	7963      	ldrb	r3, [r4, #5]
 800eb16:	2b0a      	cmp	r3, #10
 800eb18:	d029      	beq.n	800eb6e <cdcd_open+0xbe>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800eb1a:	4820      	ldr	r0, [pc, #128]	; (800eb9c <cdcd_open+0xec>)
 800eb1c:	f000 fed4 	bl	800f8c8 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800eb20:	283f      	cmp	r0, #63	; 0x3f
 800eb22:	d9cf      	bls.n	800eac4 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800eb24:	78f1      	ldrb	r1, [r6, #3]
 800eb26:	2000      	movs	r0, #0
 800eb28:	f002 f884 	bl	8010c34 <usbd_edpt_claim>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d0c9      	beq.n	800eac4 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800eb30:	481a      	ldr	r0, [pc, #104]	; (800eb9c <cdcd_open+0xec>)
 800eb32:	f000 fec9 	bl	800f8c8 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800eb36:	283f      	cmp	r0, #63	; 0x3f
 800eb38:	d914      	bls.n	800eb64 <cdcd_open+0xb4>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800eb3a:	2340      	movs	r3, #64	; 0x40
 800eb3c:	4a18      	ldr	r2, [pc, #96]	; (800eba0 <cdcd_open+0xf0>)
 800eb3e:	78f1      	ldrb	r1, [r6, #3]
 800eb40:	2000      	movs	r0, #0
 800eb42:	f002 f893 	bl	8010c6c <usbd_edpt_xfer>
 800eb46:	e7bd      	b.n	800eac4 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 800eb48:	4621      	mov	r1, r4
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	f002 f84e 	bl	8010bec <usbd_edpt_open>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	d0be      	beq.n	800ead2 <cdcd_open+0x22>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800eb54:	78a3      	ldrb	r3, [r4, #2]
 800eb56:	7073      	strb	r3, [r6, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800eb58:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
 800eb5a:	441d      	add	r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
 800eb5c:	441c      	add	r4, r3
 800eb5e:	b2ad      	uxth	r5, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800eb60:	7861      	ldrb	r1, [r4, #1]
 800eb62:	e7d5      	b.n	800eb10 <cdcd_open+0x60>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800eb64:	78f1      	ldrb	r1, [r6, #3]
 800eb66:	2000      	movs	r0, #0
 800eb68:	f002 f872 	bl	8010c50 <usbd_edpt_release>
    return false;
 800eb6c:	e7aa      	b.n	800eac4 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800eb6e:	4b0d      	ldr	r3, [pc, #52]	; (800eba4 <cdcd_open+0xf4>)
 800eb70:	4638      	mov	r0, r7
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800eb72:	f894 8000 	ldrb.w	r8, [r4]
 800eb76:	9301      	str	r3, [sp, #4]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	eb04 0108 	add.w	r1, r4, r8
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	2302      	movs	r3, #2
 800eb82:	461a      	mov	r2, r3
 800eb84:	f001 ffdc 	bl	8010b40 <usbd_open_edpt_pair>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d0a2      	beq.n	800ead2 <cdcd_open+0x22>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 800eb8c:	350e      	adds	r5, #14
 800eb8e:	fa18 f585 	uxtah	r5, r8, r5
 800eb92:	b2ad      	uxth	r5, r5
 800eb94:	e7c1      	b.n	800eb1a <cdcd_open+0x6a>
 800eb96:	bf00      	nop
 800eb98:	240009a0 	.word	0x240009a0
 800eb9c:	240009b0 	.word	0x240009b0
 800eba0:	24000a48 	.word	0x24000a48
 800eba4:	240009a2 	.word	0x240009a2

0800eba8 <cdcd_control_xfer_cb>:
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800eba8:	7813      	ldrb	r3, [r2, #0]
 800ebaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ebae:	2b20      	cmp	r3, #32
{
 800ebb0:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800ebb2:	d10f      	bne.n	800ebd4 <cdcd_control_xfer_cb+0x2c>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
 800ebb4:	4694      	mov	ip, r2
 800ebb6:	4c33      	ldr	r4, [pc, #204]	; (800ec84 <cdcd_control_xfer_cb+0xdc>)
 800ebb8:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800ebbc:	7822      	ldrb	r2, [r4, #0]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d108      	bne.n	800ebd4 <cdcd_control_xfer_cb+0x2c>
  }

  switch ( request->bRequest )
 800ebc2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800ebc6:	3b20      	subs	r3, #32
 800ebc8:	2b03      	cmp	r3, #3
 800ebca:	d803      	bhi.n	800ebd4 <cdcd_control_xfer_cb+0x2c>
 800ebcc:	e8df f003 	tbb	[pc, r3]
 800ebd0:	05312816 	.word	0x05312816
 800ebd4:	2400      	movs	r4, #0

    default: return false; // stall unsupported request
  }

  return true;
}
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800ebda:	2901      	cmp	r1, #1
 800ebdc:	d042      	beq.n	800ec64 <cdcd_control_xfer_cb+0xbc>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800ebde:	4b2a      	ldr	r3, [pc, #168]	; (800ec88 <cdcd_control_xfer_cb+0xe0>)
 800ebe0:	f04f 0401 	mov.w	r4, #1
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d042      	beq.n	800ec6e <cdcd_control_xfer_cb+0xc6>
 800ebe8:	2903      	cmp	r1, #3
 800ebea:	bf14      	ite	ne
 800ebec:	2400      	movne	r4, #0
 800ebee:	f004 0401 	andeq.w	r4, r4, #1
 800ebf2:	2c00      	cmp	r4, #0
 800ebf4:	d13f      	bne.n	800ec76 <cdcd_control_xfer_cb+0xce>
  return true;
 800ebf6:	2401      	movs	r4, #1
}
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800ebfc:	2901      	cmp	r1, #1
 800ebfe:	d011      	beq.n	800ec24 <cdcd_control_xfer_cb+0x7c>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800ec00:	4b22      	ldr	r3, [pc, #136]	; (800ec8c <cdcd_control_xfer_cb+0xe4>)
 800ec02:	f04f 0401 	mov.w	r4, #1
 800ec06:	b3a3      	cbz	r3, 800ec72 <cdcd_control_xfer_cb+0xca>
 800ec08:	2903      	cmp	r1, #3
 800ec0a:	bf14      	ite	ne
 800ec0c:	2400      	movne	r4, #0
 800ec0e:	f004 0401 	andeq.w	r4, r4, #1
 800ec12:	2c00      	cmp	r4, #0
 800ec14:	d0ef      	beq.n	800ebf6 <cdcd_control_xfer_cb+0x4e>
 800ec16:	491e      	ldr	r1, [pc, #120]	; (800ec90 <cdcd_control_xfer_cb+0xe8>)
 800ec18:	2000      	movs	r0, #0
 800ec1a:	f3af 8000 	nop.w
 800ec1e:	e7da      	b.n	800ebd6 <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800ec20:	2901      	cmp	r1, #1
 800ec22:	d1e8      	bne.n	800ebf6 <cdcd_control_xfer_cb+0x4e>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800ec24:	2307      	movs	r3, #7
 800ec26:	4a1a      	ldr	r2, [pc, #104]	; (800ec90 <cdcd_control_xfer_cb+0xe8>)
 800ec28:	4661      	mov	r1, ip
  return true;
 800ec2a:	2401      	movs	r4, #1
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800ec2c:	f002 f8aa 	bl	8010d84 <tud_control_xfer>
 800ec30:	e7d1      	b.n	800ebd6 <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800ec32:	2901      	cmp	r1, #1
 800ec34:	d016      	beq.n	800ec64 <cdcd_control_xfer_cb+0xbc>
      else if (stage == CONTROL_STAGE_ACK)
 800ec36:	2903      	cmp	r1, #3
 800ec38:	d1dd      	bne.n	800ebf6 <cdcd_control_xfer_cb+0x4e>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800ec3a:	f8bc 5002 	ldrh.w	r5, [ip, #2]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800ec3e:	4815      	ldr	r0, [pc, #84]	; (800ec94 <cdcd_control_xfer_cb+0xec>)
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800ec40:	f005 0601 	and.w	r6, r5, #1
        p_cdc->line_state = (uint8_t) request->wValue;
 800ec44:	7125      	strb	r5, [r4, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800ec46:	f086 0101 	eor.w	r1, r6, #1
 800ec4a:	f001 f98f 	bl	800ff6c <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800ec4e:	4b12      	ldr	r3, [pc, #72]	; (800ec98 <cdcd_control_xfer_cb+0xf0>)
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d0d0      	beq.n	800ebf6 <cdcd_control_xfer_cb+0x4e>
 800ec54:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800ec58:	4631      	mov	r1, r6
 800ec5a:	2000      	movs	r0, #0
  return true;
 800ec5c:	2401      	movs	r4, #1
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800ec5e:	f3af 8000 	nop.w
 800ec62:	e7b8      	b.n	800ebd6 <cdcd_control_xfer_cb+0x2e>
        tud_control_status(rhport, request);
 800ec64:	4661      	mov	r1, ip
  return true;
 800ec66:	2401      	movs	r4, #1
        tud_control_status(rhport, request);
 800ec68:	f002 f874 	bl	8010d54 <tud_control_status>
 800ec6c:	e7b3      	b.n	800ebd6 <cdcd_control_xfer_cb+0x2e>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800ec6e:	461c      	mov	r4, r3
 800ec70:	e7ba      	b.n	800ebe8 <cdcd_control_xfer_cb+0x40>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800ec72:	461c      	mov	r4, r3
 800ec74:	e7c8      	b.n	800ec08 <cdcd_control_xfer_cb+0x60>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800ec76:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	f3af 8000 	nop.w
 800ec80:	e7a9      	b.n	800ebd6 <cdcd_control_xfer_cb+0x2e>
 800ec82:	bf00      	nop
 800ec84:	240009a0 	.word	0x240009a0
	...
 800ec90:	240009a8 	.word	0x240009a8
 800ec94:	240009bc 	.word	0x240009bc
 800ec98:	00000000 	.word	0x00000000

0800ec9c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800ec9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800eca0:	4e44      	ldr	r6, [pc, #272]	; (800edb4 <cdcd_xfer_cb+0x118>)
{
 800eca2:	460c      	mov	r4, r1
 800eca4:	4607      	mov	r7, r0
 800eca6:	461d      	mov	r5, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800eca8:	78f2      	ldrb	r2, [r6, #3]
 800ecaa:	428a      	cmp	r2, r1
 800ecac:	d15e      	bne.n	800ed6c <cdcd_xfer_cb+0xd0>
  TU_ASSERT(itf < CFG_TUD_CDC);

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800ecb4:	f106 0010 	add.w	r0, r6, #16
 800ecb8:	f000 ffb8 	bl	800fc2c <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 800ecbc:	4b3e      	ldr	r3, [pc, #248]	; (800edb8 <cdcd_xfer_cb+0x11c>)
 800ecbe:	b1d3      	cbz	r3, 800ecf6 <cdcd_xfer_cb+0x5a>
 800ecc0:	7973      	ldrb	r3, [r6, #5]
 800ecc2:	2bff      	cmp	r3, #255	; 0xff
 800ecc4:	d017      	beq.n	800ecf6 <cdcd_xfer_cb+0x5a>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800ecc6:	b1b5      	cbz	r5, 800ecf6 <cdcd_xfer_cb+0x5a>
 800ecc8:	f106 08a7 	add.w	r8, r6, #167	; 0xa7
 800eccc:	eb08 0a05 	add.w	sl, r8, r5
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800ecd0:	f1a8 0997 	sub.w	r9, r8, #151	; 0x97
 800ecd4:	e002      	b.n	800ecdc <cdcd_xfer_cb+0x40>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800ecd6:	45d0      	cmp	r8, sl
 800ecd8:	d00d      	beq.n	800ecf6 <cdcd_xfer_cb+0x5a>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800ecda:	7973      	ldrb	r3, [r6, #5]
 800ecdc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d1f8      	bne.n	800ecd6 <cdcd_xfer_cb+0x3a>
 800ece4:	4648      	mov	r0, r9
 800ece6:	f000 fde5 	bl	800f8b4 <tu_fifo_empty>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	d1f3      	bne.n	800ecd6 <cdcd_xfer_cb+0x3a>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800ecee:	7971      	ldrb	r1, [r6, #5]
 800ecf0:	f3af 8000 	nop.w
 800ecf4:	e7ef      	b.n	800ecd6 <cdcd_xfer_cb+0x3a>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800ecf6:	4b31      	ldr	r3, [pc, #196]	; (800edbc <cdcd_xfer_cb+0x120>)
 800ecf8:	b123      	cbz	r3, 800ed04 <cdcd_xfer_cb+0x68>
 800ecfa:	4831      	ldr	r0, [pc, #196]	; (800edc0 <cdcd_xfer_cb+0x124>)
 800ecfc:	f000 fdda 	bl	800f8b4 <tu_fifo_empty>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d04f      	beq.n	800eda4 <cdcd_xfer_cb+0x108>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800ed04:	482e      	ldr	r0, [pc, #184]	; (800edc0 <cdcd_xfer_cb+0x124>)
 800ed06:	f000 fddf 	bl	800f8c8 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800ed0a:	283f      	cmp	r0, #63	; 0x3f
 800ed0c:	d905      	bls.n	800ed1a <cdcd_xfer_cb+0x7e>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800ed0e:	78f1      	ldrb	r1, [r6, #3]
 800ed10:	2000      	movs	r0, #0
 800ed12:	f001 ff8f 	bl	8010c34 <usbd_edpt_claim>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d137      	bne.n	800ed8a <cdcd_xfer_cb+0xee>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800ed1a:	78b3      	ldrb	r3, [r6, #2]
 800ed1c:	42a3      	cmp	r3, r4
 800ed1e:	d003      	beq.n	800ed28 <cdcd_xfer_cb+0x8c>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 800ed20:	2401      	movs	r4, #1
}
 800ed22:	4620      	mov	r0, r4
 800ed24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 800ed28:	4b26      	ldr	r3, [pc, #152]	; (800edc4 <cdcd_xfer_cb+0x128>)
 800ed2a:	b113      	cbz	r3, 800ed32 <cdcd_xfer_cb+0x96>
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	f3af 8000 	nop.w
    if ( 0 == tud_cdc_n_write_flush(itf) )
 800ed32:	2000      	movs	r0, #0
 800ed34:	f7ff fe1e 	bl	800e974 <tud_cdc_n_write_flush>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d1f1      	bne.n	800ed20 <cdcd_xfer_cb+0x84>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 800ed3c:	4822      	ldr	r0, [pc, #136]	; (800edc8 <cdcd_xfer_cb+0x12c>)
 800ed3e:	f000 fda3 	bl	800f888 <tu_fifo_count>
 800ed42:	2d00      	cmp	r5, #0
 800ed44:	d0ec      	beq.n	800ed20 <cdcd_xfer_cb+0x84>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d1ea      	bne.n	800ed20 <cdcd_xfer_cb+0x84>
 800ed4a:	f015 053f 	ands.w	r5, r5, #63	; 0x3f
 800ed4e:	d1e7      	bne.n	800ed20 <cdcd_xfer_cb+0x84>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 800ed50:	78b1      	ldrb	r1, [r6, #2]
 800ed52:	4638      	mov	r0, r7
 800ed54:	f001 ff6e 	bl	8010c34 <usbd_edpt_claim>
 800ed58:	4604      	mov	r4, r0
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d0e0      	beq.n	800ed20 <cdcd_xfer_cb+0x84>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 800ed5e:	462b      	mov	r3, r5
 800ed60:	462a      	mov	r2, r5
 800ed62:	78b1      	ldrb	r1, [r6, #2]
 800ed64:	4638      	mov	r0, r7
 800ed66:	f001 ff81 	bl	8010c6c <usbd_edpt_xfer>
 800ed6a:	e7da      	b.n	800ed22 <cdcd_xfer_cb+0x86>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800ed6c:	78b3      	ldrb	r3, [r6, #2]
 800ed6e:	428b      	cmp	r3, r1
 800ed70:	d0da      	beq.n	800ed28 <cdcd_xfer_cb+0x8c>
  TU_ASSERT(itf < CFG_TUD_CDC);
 800ed72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ed76:	f8d3 4df0 	ldr.w	r4, [r3, #3568]	; 0xdf0
 800ed7a:	f014 0401 	ands.w	r4, r4, #1
 800ed7e:	d0d0      	beq.n	800ed22 <cdcd_xfer_cb+0x86>
 800ed80:	be00      	bkpt	0x0000
 800ed82:	2400      	movs	r4, #0
}
 800ed84:	4620      	mov	r0, r4
 800ed86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800ed8a:	480d      	ldr	r0, [pc, #52]	; (800edc0 <cdcd_xfer_cb+0x124>)
 800ed8c:	f000 fd9c 	bl	800f8c8 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800ed90:	283f      	cmp	r0, #63	; 0x3f
 800ed92:	d90a      	bls.n	800edaa <cdcd_xfer_cb+0x10e>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800ed94:	2340      	movs	r3, #64	; 0x40
 800ed96:	4a0d      	ldr	r2, [pc, #52]	; (800edcc <cdcd_xfer_cb+0x130>)
 800ed98:	78f1      	ldrb	r1, [r6, #3]
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	f001 ff66 	bl	8010c6c <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
 800eda0:	78b3      	ldrb	r3, [r6, #2]
 800eda2:	e7bb      	b.n	800ed1c <cdcd_xfer_cb+0x80>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800eda4:	f3af 8000 	nop.w
 800eda8:	e7ac      	b.n	800ed04 <cdcd_xfer_cb+0x68>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800edaa:	78f1      	ldrb	r1, [r6, #3]
 800edac:	2000      	movs	r0, #0
 800edae:	f001 ff4f 	bl	8010c50 <usbd_edpt_release>
 800edb2:	e7b2      	b.n	800ed1a <cdcd_xfer_cb+0x7e>
 800edb4:	240009a0 	.word	0x240009a0
	...
 800edc0:	240009b0 	.word	0x240009b0
 800edc4:	00000000 	.word	0x00000000
 800edc8:	240009bc 	.word	0x240009bc
 800edcc:	24000a48 	.word	0x24000a48

0800edd0 <proc_read10_cmd.constprop.0>:
  }

  return resplen;
}

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 800edd0:	b530      	push	{r4, r5, lr}

#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 800edd2:	4c33      	ldr	r4, [pc, #204]	; (800eea0 <proc_read10_cmd.constprop.0+0xd0>)
 800edd4:	b087      	sub	sp, #28
 800edd6:	4605      	mov	r5, r0
  return tu_ntohs(block_count);
 800edd8:	8ae2      	ldrh	r2, [r4, #22]
  return (uint16_t) (cbw->total_bytes / block_count);
 800edda:	68a3      	ldr	r3, [r4, #8]
  return tu_ntohs(block_count);
 800eddc:	ba52      	rev16	r2, r2
 800edde:	b292      	uxth	r2, r2
  if (block_count == 0) return 0;
 800ede0:	b112      	cbz	r2, 800ede8 <proc_read10_cmd.constprop.0+0x18>
  return (uint16_t) (cbw->total_bytes / block_count);
 800ede2:	fbb3 f2f2 	udiv	r2, r3, r2
 800ede6:	b292      	uxth	r2, r2

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800ede8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800edea:	f8d4 1011 	ldr.w	r1, [r4, #17]

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800edee:	1a1b      	subs	r3, r3, r0
  return tu_ntohl(lba);
 800edf0:	ba09      	rev	r1, r1
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800edf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edf6:	bf28      	it	cs
 800edf8:	f44f 5300 	movcs.w	r3, #8192	; 0x2000

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 800edfc:	9300      	str	r3, [sp, #0]
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800edfe:	fbb0 f3f2 	udiv	r3, r0, r2
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 800ee02:	fb02 0213 	mls	r2, r2, r3, r0
 800ee06:	4419      	add	r1, r3
 800ee08:	7b60      	ldrb	r0, [r4, #13]
 800ee0a:	4b26      	ldr	r3, [pc, #152]	; (800eea4 <proc_read10_cmd.constprop.0+0xd4>)
 800ee0c:	f7f5 fa72 	bl	80042f4 <tud_msc_read10_cb>

  if ( nbytes < 0 )
 800ee10:	1e01      	subs	r1, r0, #0
 800ee12:	db1c      	blt.n	800ee4e <proc_read10_cmd.constprop.0+0x7e>
    // set sense
    set_sense_medium_not_present(p_cbw->lun);

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
  }
  else if ( nbytes == 0 )
 800ee14:	d00a      	beq.n	800ee2c <proc_read10_cmd.constprop.0+0x5c>
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 800ee16:	b28b      	uxth	r3, r1
 800ee18:	4a22      	ldr	r2, [pc, #136]	; (800eea4 <proc_read10_cmd.constprop.0+0xd4>)
 800ee1a:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f001 ff24 	bl	8010c6c <usbd_edpt_xfer>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d033      	beq.n	800ee90 <proc_read10_cmd.constprop.0+0xc0>
  }
}
 800ee28:	b007      	add	sp, #28
 800ee2a:	bd30      	pop	{r4, r5, pc}
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 800ee2c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800ee30:	2207      	movs	r2, #7

  event.xfer_complete.ep_addr = ep_addr;
  event.xfer_complete.len     = xferred_bytes;
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
 800ee32:	a803      	add	r0, sp, #12
  event.xfer_complete.len     = xferred_bytes;
 800ee34:	9105      	str	r1, [sp, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800ee36:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800ee3a:	f88d 500c 	strb.w	r5, [sp, #12]
 800ee3e:	f88d 200d 	strb.w	r2, [sp, #13]
  event.xfer_complete.ep_addr = ep_addr;
 800ee42:	f88d 3010 	strb.w	r3, [sp, #16]
  dcd_event_handler(&event, in_isr);
 800ee46:	f001 fd9b 	bl	8010980 <dcd_event_handler>
}
 800ee4a:	b007      	add	sp, #28
 800ee4c:	bd30      	pop	{r4, r5, pc}
  _mscd_itf.sense_key           = sense_key;
 800ee4e:	f643 2102 	movw	r1, #14850	; 0x3a02
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800ee52:	68a2      	ldr	r2, [r4, #8]
 800ee54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  _mscd_itf.sense_key           = sense_key;
 800ee56:	87a1      	strh	r1, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800ee58:	2100      	movs	r1, #0
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800ee5a:	1ad3      	subs	r3, r2, r3
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800ee5c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  p_csw->status       = status;
 800ee60:	2101      	movs	r1, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800ee62:	62a3      	str	r3, [r4, #40]	; 0x28
  p_csw->status       = status;
 800ee64:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800ee68:	2102      	movs	r1, #2
 800ee6a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800ee6e:	2a00      	cmp	r2, #0
 800ee70:	d0da      	beq.n	800ee28 <proc_read10_cmd.constprop.0+0x58>
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d0d8      	beq.n	800ee28 <proc_read10_cmd.constprop.0+0x58>
  return tu_bit_test(dir, 7);
 800ee76:	7b23      	ldrb	r3, [r4, #12]
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800ee78:	4628      	mov	r0, r5
    if ( is_data_in(p_cbw->dir) )
 800ee7a:	09db      	lsrs	r3, r3, #7
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800ee7c:	bf14      	ite	ne
 800ee7e:	f894 102e 	ldrbne.w	r1, [r4, #46]	; 0x2e
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800ee82:	f894 102f 	ldrbeq.w	r1, [r4, #47]	; 0x2f
}
 800ee86:	b007      	add	sp, #28
 800ee88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800ee8c:	f001 bf34 	b.w	8010cf8 <usbd_edpt_stall>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 800ee90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee94:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ee98:	07db      	lsls	r3, r3, #31
 800ee9a:	d5c5      	bpl.n	800ee28 <proc_read10_cmd.constprop.0+0x58>
 800ee9c:	be00      	bkpt	0x0000
 800ee9e:	e7c3      	b.n	800ee28 <proc_read10_cmd.constprop.0+0x58>
 800eea0:	24002ac8 	.word	0x24002ac8
 800eea4:	24000ac8 	.word	0x24000ac8

0800eea8 <proc_write10_cmd.constprop.0>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 800eea8:	b538      	push	{r3, r4, r5, lr}
{
  msc_cbw_t const * p_cbw = &p_msc->cbw;
  bool writable = true;

  if ( tud_msc_is_writable_cb )
 800eeaa:	4b23      	ldr	r3, [pc, #140]	; (800ef38 <proc_write10_cmd.constprop.0+0x90>)
static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 800eeac:	4605      	mov	r5, r0
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 800eeae:	4c23      	ldr	r4, [pc, #140]	; (800ef3c <proc_write10_cmd.constprop.0+0x94>)
  if ( tud_msc_is_writable_cb )
 800eeb0:	b123      	cbz	r3, 800eebc <proc_write10_cmd.constprop.0+0x14>
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 800eeb2:	7b60      	ldrb	r0, [r4, #13]
 800eeb4:	f7f5 fa78 	bl	80043a8 <tud_msc_is_writable_cb>
  }

  if ( !writable )
 800eeb8:	4603      	mov	r3, r0
 800eeba:	b1c0      	cbz	r0, 800eeee <proc_write10_cmd.constprop.0+0x46>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
    return;
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800eebc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800eebe:	68a3      	ldr	r3, [r4, #8]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800eec0:	4a1f      	ldr	r2, [pc, #124]	; (800ef40 <proc_write10_cmd.constprop.0+0x98>)
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800eec2:	1a1b      	subs	r3, r3, r0
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800eec4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800eec8:	4628      	mov	r0, r5
 800eeca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eece:	bf28      	it	cs
 800eed0:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	f001 fec9 	bl	8010c6c <usbd_edpt_xfer>
 800eeda:	b100      	cbz	r0, 800eede <proc_write10_cmd.constprop.0+0x36>
}
 800eedc:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800eede:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800eee2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800eee6:	07db      	lsls	r3, r3, #31
 800eee8:	d5f8      	bpl.n	800eedc <proc_write10_cmd.constprop.0+0x34>
 800eeea:	be00      	bkpt	0x0000
}
 800eeec:	bd38      	pop	{r3, r4, r5, pc}
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800eeee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  _mscd_itf.sense_key           = sense_key;
 800eef0:	f242 7007 	movw	r0, #9991	; 0x2707
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800eef4:	68a1      	ldr	r1, [r4, #8]
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800eef6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800eefa:	87a0      	strh	r0, [r4, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800eefc:	1a8b      	subs	r3, r1, r2
  p_csw->status       = status;
 800eefe:	2001      	movs	r0, #1
  p_msc->stage        = MSC_STAGE_STATUS;
 800ef00:	2202      	movs	r2, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800ef02:	62a3      	str	r3, [r4, #40]	; 0x28
  p_csw->status       = status;
 800ef04:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800ef08:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d0e5      	beq.n	800eedc <proc_write10_cmd.constprop.0+0x34>
 800ef10:	2900      	cmp	r1, #0
 800ef12:	d0e3      	beq.n	800eedc <proc_write10_cmd.constprop.0+0x34>
  return tu_bit_test(dir, 7);
 800ef14:	7b23      	ldrb	r3, [r4, #12]
    if ( is_data_in(p_cbw->dir) )
 800ef16:	09db      	lsrs	r3, r3, #7
 800ef18:	d006      	beq.n	800ef28 <proc_write10_cmd.constprop.0+0x80>
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800ef1a:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800ef1e:	4628      	mov	r0, r5
}
 800ef20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800ef24:	f001 bee8 	b.w	8010cf8 <usbd_edpt_stall>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800ef28:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800ef2c:	4628      	mov	r0, r5
}
 800ef2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800ef32:	f001 bee1 	b.w	8010cf8 <usbd_edpt_stall>
 800ef36:	bf00      	nop
 800ef38:	080043a9 	.word	0x080043a9
 800ef3c:	24002ac8 	.word	0x24002ac8
 800ef40:	24000ac8 	.word	0x24000ac8

0800ef44 <tud_msc_set_sense>:
{
 800ef44:	b410      	push	{r4}
  _mscd_itf.sense_key           = sense_key;
 800ef46:	4c05      	ldr	r4, [pc, #20]	; (800ef5c <tud_msc_set_sense+0x18>)
}
 800ef48:	2001      	movs	r0, #1
  _mscd_itf.sense_key           = sense_key;
 800ef4a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 800ef4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800ef52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800ef56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef5a:	4770      	bx	lr
 800ef5c:	24002ac8 	.word	0x24002ac8

0800ef60 <mscd_init>:
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 800ef60:	2240      	movs	r2, #64	; 0x40
 800ef62:	2100      	movs	r1, #0
 800ef64:	4801      	ldr	r0, [pc, #4]	; (800ef6c <mscd_init+0xc>)
 800ef66:	f003 b998 	b.w	801229a <memset>
 800ef6a:	bf00      	nop
 800ef6c:	24002ac8 	.word	0x24002ac8

0800ef70 <mscd_reset>:
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 800ef70:	2240      	movs	r2, #64	; 0x40
 800ef72:	2100      	movs	r1, #0
 800ef74:	4801      	ldr	r0, [pc, #4]	; (800ef7c <mscd_reset+0xc>)
 800ef76:	f003 b990 	b.w	801229a <memset>
 800ef7a:	bf00      	nop
 800ef7c:	24002ac8 	.word	0x24002ac8

0800ef80 <mscd_open>:
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 800ef80:	794b      	ldrb	r3, [r1, #5]
 800ef82:	2b08      	cmp	r3, #8
 800ef84:	d001      	beq.n	800ef8a <mscd_open+0xa>
 800ef86:	2000      	movs	r0, #0
}
 800ef88:	4770      	bx	lr
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 800ef8a:	798b      	ldrb	r3, [r1, #6]
 800ef8c:	2b06      	cmp	r3, #6
 800ef8e:	d1fa      	bne.n	800ef86 <mscd_open+0x6>
 800ef90:	79cb      	ldrb	r3, [r1, #7]
 800ef92:	2b50      	cmp	r3, #80	; 0x50
 800ef94:	d1f7      	bne.n	800ef86 <mscd_open+0x6>
  TU_ASSERT(max_len >= drv_len, 0);
 800ef96:	2a16      	cmp	r2, #22
 800ef98:	d808      	bhi.n	800efac <mscd_open+0x2c>
 800ef9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ef9e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800efa2:	07d9      	lsls	r1, r3, #31
 800efa4:	d5ef      	bpl.n	800ef86 <mscd_open+0x6>
 800efa6:	be00      	bkpt	0x0000
 800efa8:	2000      	movs	r0, #0
 800efaa:	4770      	bx	lr
{
 800efac:	b530      	push	{r4, r5, lr}
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 800efae:	4d1a      	ldr	r5, [pc, #104]	; (800f018 <mscd_open+0x98>)
{
 800efb0:	b083      	sub	sp, #12
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 800efb2:	788b      	ldrb	r3, [r1, #2]
 800efb4:	4604      	mov	r4, r0
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 800efb6:	f105 022e 	add.w	r2, r5, #46	; 0x2e
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 800efba:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  return desc8 + desc8[DESC_OFFSET_LEN];
 800efbe:	780b      	ldrb	r3, [r1, #0]
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 800efc0:	9201      	str	r2, [sp, #4]
 800efc2:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 800efc6:	4419      	add	r1, r3
 800efc8:	2302      	movs	r3, #2
 800efca:	9200      	str	r2, [sp, #0]
 800efcc:	461a      	mov	r2, r3
 800efce:	f001 fdb7 	bl	8010b40 <usbd_open_edpt_pair>
 800efd2:	b940      	cbnz	r0, 800efe6 <mscd_open+0x66>
 800efd4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800efd8:	f8d2 2df0 	ldr.w	r2, [r2, #3568]	; 0xdf0
 800efdc:	07d2      	lsls	r2, r2, #31
 800efde:	d50f      	bpl.n	800f000 <mscd_open+0x80>
 800efe0:	be00      	bkpt	0x0000
}
 800efe2:	b003      	add	sp, #12
 800efe4:	bd30      	pop	{r4, r5, pc}
  p_msc->stage = MSC_STAGE_CMD;
 800efe6:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800efe8:	231f      	movs	r3, #31
 800efea:	462a      	mov	r2, r5
 800efec:	4620      	mov	r0, r4
  p_msc->stage = MSC_STAGE_CMD;
 800efee:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800eff2:	f895 102f 	ldrb.w	r1, [r5, #47]	; 0x2f
 800eff6:	f001 fe39 	bl	8010c6c <usbd_edpt_xfer>
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 800effa:	b120      	cbz	r0, 800f006 <mscd_open+0x86>
  return drv_len;
 800effc:	2017      	movs	r0, #23
 800effe:	e7f0      	b.n	800efe2 <mscd_open+0x62>
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 800f000:	2000      	movs	r0, #0
}
 800f002:	b003      	add	sp, #12
 800f004:	bd30      	pop	{r4, r5, pc}
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 800f006:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f00a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f00e:	07db      	lsls	r3, r3, #31
 800f010:	d5f4      	bpl.n	800effc <mscd_open+0x7c>
 800f012:	be00      	bkpt	0x0000
 800f014:	2017      	movs	r0, #23
 800f016:	e7e4      	b.n	800efe2 <mscd_open+0x62>
 800f018:	24002ac8 	.word	0x24002ac8

0800f01c <mscd_control_xfer_cb>:
  if (stage != CONTROL_STAGE_SETUP) return true;
 800f01c:	2901      	cmp	r1, #1
 800f01e:	d001      	beq.n	800f024 <mscd_control_xfer_cb+0x8>
 800f020:	2001      	movs	r0, #1
}
 800f022:	4770      	bx	lr
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800f024:	7813      	ldrb	r3, [r2, #0]
{
 800f026:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f028:	4614      	mov	r4, r2
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800f02a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
{
 800f02e:	b083      	sub	sp, #12
 800f030:	4606      	mov	r6, r0
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800f032:	2a02      	cmp	r2, #2
 800f034:	d02b      	beq.n	800f08e <mscd_control_xfer_cb+0x72>
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800f036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f03a:	2b20      	cmp	r3, #32
 800f03c:	d10a      	bne.n	800f054 <mscd_control_xfer_cb+0x38>
  switch ( request->bRequest )
 800f03e:	7863      	ldrb	r3, [r4, #1]
 800f040:	2bfe      	cmp	r3, #254	; 0xfe
 800f042:	d00a      	beq.n	800f05a <mscd_control_xfer_cb+0x3e>
 800f044:	2bff      	cmp	r3, #255	; 0xff
 800f046:	d105      	bne.n	800f054 <mscd_control_xfer_cb+0x38>
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 800f048:	8863      	ldrh	r3, [r4, #2]
 800f04a:	b91b      	cbnz	r3, 800f054 <mscd_control_xfer_cb+0x38>
 800f04c:	88e5      	ldrh	r5, [r4, #6]
 800f04e:	b2ab      	uxth	r3, r5
 800f050:	2b00      	cmp	r3, #0
 800f052:	d035      	beq.n	800f0c0 <mscd_control_xfer_cb+0xa4>
  switch ( request->bRequest )
 800f054:	2000      	movs	r0, #0
}
 800f056:	b003      	add	sp, #12
 800f058:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 800f05a:	8863      	ldrh	r3, [r4, #2]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d1f9      	bne.n	800f054 <mscd_control_xfer_cb+0x38>
 800f060:	88e2      	ldrh	r2, [r4, #6]
 800f062:	2a01      	cmp	r2, #1
 800f064:	d1f6      	bne.n	800f054 <mscd_control_xfer_cb+0x38>
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 800f066:	4d38      	ldr	r5, [pc, #224]	; (800f148 <mscd_control_xfer_cb+0x12c>)
      uint8_t maxlun = 1;
 800f068:	f88d 2007 	strb.w	r2, [sp, #7]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 800f06c:	b12d      	cbz	r5, 800f07a <mscd_control_xfer_cb+0x5e>
 800f06e:	f3af 8000 	nop.w
      TU_VERIFY(maxlun);
 800f072:	2800      	cmp	r0, #0
 800f074:	d0ee      	beq.n	800f054 <mscd_control_xfer_cb+0x38>
      maxlun--;
 800f076:	1e43      	subs	r3, r0, #1
 800f078:	b2dd      	uxtb	r5, r3
      tud_control_xfer(rhport, request, &maxlun, 1);
 800f07a:	2301      	movs	r3, #1
 800f07c:	f10d 0207 	add.w	r2, sp, #7
 800f080:	4621      	mov	r1, r4
 800f082:	4630      	mov	r0, r6
      maxlun--;
 800f084:	f88d 5007 	strb.w	r5, [sp, #7]
      tud_control_xfer(rhport, request, &maxlun, 1);
 800f088:	f001 fe7c 	bl	8010d84 <tud_control_xfer>
 800f08c:	e015      	b.n	800f0ba <mscd_control_xfer_cb+0x9e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 800f08e:	7865      	ldrb	r5, [r4, #1]
 800f090:	2d01      	cmp	r5, #1
 800f092:	d1d0      	bne.n	800f036 <mscd_control_xfer_cb+0x1a>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 800f094:	8863      	ldrh	r3, [r4, #2]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1dc      	bne.n	800f054 <mscd_control_xfer_cb+0x38>
    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 800f09a:	4f2c      	ldr	r7, [pc, #176]	; (800f14c <mscd_control_xfer_cb+0x130>)
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 800f09c:	88a3      	ldrh	r3, [r4, #4]
    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 800f09e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	2a04      	cmp	r2, #4
 800f0a6:	d049      	beq.n	800f13c <mscd_control_xfer_cb+0x120>
      if ( ep_addr == p_msc->ep_in )
 800f0a8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800f0ac:	4299      	cmp	r1, r3
 800f0ae:	d015      	beq.n	800f0dc <mscd_control_xfer_cb+0xc0>
      else if ( ep_addr == p_msc->ep_out )
 800f0b0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
        if ( p_msc->stage == MSC_STAGE_CMD )
 800f0b4:	b90a      	cbnz	r2, 800f0ba <mscd_control_xfer_cb+0x9e>
 800f0b6:	429c      	cmp	r4, r3
 800f0b8:	d028      	beq.n	800f10c <mscd_control_xfer_cb+0xf0>
  return true;
 800f0ba:	2001      	movs	r0, #1
}
 800f0bc:	b003      	add	sp, #12
 800f0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  p_msc->stage       = MSC_STAGE_CMD;
 800f0c0:	4a22      	ldr	r2, [pc, #136]	; (800f14c <mscd_control_xfer_cb+0x130>)
      tud_control_status(rhport, request);
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	4630      	mov	r0, r6
  p_msc->sense_key           = 0;
 800f0c6:	8795      	strh	r5, [r2, #60]	; 0x3c
  p_msc->stage       = MSC_STAGE_CMD;
 800f0c8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  p_msc->add_sense_qualifier = 0;
 800f0cc:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  p_msc->xferred_len = 0;
 800f0d0:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
      tud_control_status(rhport, request);
 800f0d4:	f001 fe3e 	bl	8010d54 <tud_control_status>
  return true;
 800f0d8:	2001      	movs	r0, #1
    break;
 800f0da:	e7bc      	b.n	800f056 <mscd_control_xfer_cb+0x3a>
        if ( p_msc->stage == MSC_STAGE_STATUS )
 800f0dc:	2a02      	cmp	r2, #2
 800f0de:	d1ec      	bne.n	800f0ba <mscd_control_xfer_cb+0x9e>
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f0e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	1a9b      	subs	r3, r3, r2
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800f0e6:	2203      	movs	r2, #3
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f0e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800f0ea:	230d      	movs	r3, #13
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800f0ec:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800f0f0:	f107 0220 	add.w	r2, r7, #32
 800f0f4:	f001 fdba 	bl	8010c6c <usbd_edpt_xfer>
          TU_ASSERT( send_csw(rhport, p_msc) );
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d1de      	bne.n	800f0ba <mscd_control_xfer_cb+0x9e>
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 800f0fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f100:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f104:	07db      	lsls	r3, r3, #31
 800f106:	d5a5      	bpl.n	800f054 <mscd_control_xfer_cb+0x38>
 800f108:	be00      	bkpt	0x0000
 800f10a:	e7a4      	b.n	800f056 <mscd_control_xfer_cb+0x3a>

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 800f10c:	4621      	mov	r1, r4
 800f10e:	f001 fde5 	bl	8010cdc <usbd_edpt_busy>
 800f112:	2800      	cmp	r0, #0
 800f114:	d1d1      	bne.n	800f0ba <mscd_control_xfer_cb+0x9e>
 800f116:	4621      	mov	r1, r4
 800f118:	4630      	mov	r0, r6
 800f11a:	f001 fe0d 	bl	8010d38 <usbd_edpt_stalled>
 800f11e:	2800      	cmp	r0, #0
 800f120:	d1cb      	bne.n	800f0ba <mscd_control_xfer_cb+0x9e>
  p_msc->stage = MSC_STAGE_CMD;
 800f122:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800f124:	231f      	movs	r3, #31
 800f126:	4a09      	ldr	r2, [pc, #36]	; (800f14c <mscd_control_xfer_cb+0x130>)
 800f128:	4630      	mov	r0, r6
  p_msc->stage = MSC_STAGE_CMD;
 800f12a:	f887 1030 	strb.w	r1, [r7, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800f12e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800f132:	f001 fd9b 	bl	8010c6c <usbd_edpt_xfer>
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 800f136:	2800      	cmp	r0, #0
 800f138:	d1bf      	bne.n	800f0ba <mscd_control_xfer_cb+0x9e>
 800f13a:	e7df      	b.n	800f0fc <mscd_control_xfer_cb+0xe0>
      usbd_edpt_stall(rhport, ep_addr);
 800f13c:	4619      	mov	r1, r3
 800f13e:	f001 fddb 	bl	8010cf8 <usbd_edpt_stall>
    return true;
 800f142:	4628      	mov	r0, r5
 800f144:	e787      	b.n	800f056 <mscd_control_xfer_cb+0x3a>
 800f146:	bf00      	nop
 800f148:	00000000 	.word	0x00000000
 800f14c:	24002ac8 	.word	0x24002ac8

0800f150 <mscd_xfer_cb>:
{
 800f150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (p_msc->stage)
 800f154:	4c96      	ldr	r4, [pc, #600]	; (800f3b0 <mscd_xfer_cb+0x260>)
{
 800f156:	b08e      	sub	sp, #56	; 0x38
 800f158:	4606      	mov	r6, r0
 800f15a:	461f      	mov	r7, r3
  switch (p_msc->stage)
 800f15c:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f160:	2d01      	cmp	r5, #1
 800f162:	d069      	beq.n	800f238 <mscd_xfer_cb+0xe8>
 800f164:	2d03      	cmp	r5, #3
 800f166:	d03e      	beq.n	800f1e6 <mscd_xfer_cb+0x96>
 800f168:	b135      	cbz	r5, 800f178 <mscd_xfer_cb+0x28>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f16a:	2d02      	cmp	r5, #2
 800f16c:	f000 8086 	beq.w	800f27c <mscd_xfer_cb+0x12c>
  return true;
 800f170:	2001      	movs	r0, #1
}
 800f172:	b00e      	add	sp, #56	; 0x38
 800f174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(ep_addr != p_msc->ep_out) return true;
 800f178:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f17c:	428b      	cmp	r3, r1
 800f17e:	d1f7      	bne.n	800f170 <mscd_xfer_cb+0x20>
      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 800f180:	2f1f      	cmp	r7, #31
 800f182:	f040 809a 	bne.w	800f2ba <mscd_xfer_cb+0x16a>
 800f186:	4b8b      	ldr	r3, [pc, #556]	; (800f3b4 <mscd_xfer_cb+0x264>)
 800f188:	6822      	ldr	r2, [r4, #0]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	f040 8095 	bne.w	800f2ba <mscd_xfer_cb+0x16a>
      p_csw->signature    = MSC_CSW_SIGNATURE;
 800f190:	4b89      	ldr	r3, [pc, #548]	; (800f3b8 <mscd_xfer_cb+0x268>)
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800f192:	7be2      	ldrb	r2, [r4, #15]
      p_csw->signature    = MSC_CSW_SIGNATURE;
 800f194:	6223      	str	r3, [r4, #32]
      p_csw->tag          = p_cbw->tag;
 800f196:	6863      	ldr	r3, [r4, #4]
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800f198:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
      p_csw->data_residue = 0;
 800f19c:	62a5      	str	r5, [r4, #40]	; 0x28
      p_csw->tag          = p_cbw->tag;
 800f19e:	6263      	str	r3, [r4, #36]	; 0x24
      p_msc->stage = MSC_STAGE_DATA;
 800f1a0:	2301      	movs	r3, #1
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800f1a2:	2828      	cmp	r0, #40	; 0x28
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 800f1a4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
      p_msc->stage = MSC_STAGE_DATA;
 800f1a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 800f1ac:	68a3      	ldr	r3, [r4, #8]
      p_msc->xferred_len = 0;
 800f1ae:	63a5      	str	r5, [r4, #56]	; 0x38
      p_msc->total_len = p_cbw->total_bytes;
 800f1b0:	6363      	str	r3, [r4, #52]	; 0x34
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800f1b2:	f040 8091 	bne.w	800f2d8 <mscd_xfer_cb+0x188>
  return tu_ntohs(block_count);
 800f1b6:	8ae0      	ldrh	r0, [r4, #22]
 800f1b8:	ba40      	rev16	r0, r0
 800f1ba:	b280      	uxth	r0, r0
  if ( cbw->total_bytes == 0 )
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f040 828c 	bne.w	800f6da <mscd_xfer_cb+0x58a>
    if ( block_count )
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	d057      	beq.n	800f276 <mscd_xfer_cb+0x126>
  p_csw->status       = status;
 800f1c6:	2302      	movs	r3, #2
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f1c8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f1cc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f1d0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f1d4:	2a00      	cmp	r2, #0
 800f1d6:	d151      	bne.n	800f27c <mscd_xfer_cb+0x12c>
  _mscd_itf.sense_key           = sense_key;
 800f1d8:	f242 0205 	movw	r2, #8197	; 0x2005
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f1dc:	2300      	movs	r3, #0
  _mscd_itf.sense_key           = sense_key;
 800f1de:	87a2      	strh	r2, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f1e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f1e4:	e04a      	b.n	800f27c <mscd_xfer_cb+0x12c>
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 800f1e6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800f1ea:	428b      	cmp	r3, r1
 800f1ec:	d1c0      	bne.n	800f170 <mscd_xfer_cb+0x20>
 800f1ee:	2f0d      	cmp	r7, #13
 800f1f0:	d1be      	bne.n	800f170 <mscd_xfer_cb+0x20>
        switch(p_cbw->command[0])
 800f1f2:	7be3      	ldrb	r3, [r4, #15]
 800f1f4:	2b28      	cmp	r3, #40	; 0x28
 800f1f6:	f000 82ac 	beq.w	800f752 <mscd_xfer_cb+0x602>
 800f1fa:	2b2a      	cmp	r3, #42	; 0x2a
 800f1fc:	f000 82a1 	beq.w	800f742 <mscd_xfer_cb+0x5f2>
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 800f200:	4b6e      	ldr	r3, [pc, #440]	; (800f3bc <mscd_xfer_cb+0x26c>)
 800f202:	b123      	cbz	r3, 800f20e <mscd_xfer_cb+0xbe>
 800f204:	f104 010f 	add.w	r1, r4, #15
 800f208:	7b60      	ldrb	r0, [r4, #13]
 800f20a:	f3af 8000 	nop.w
  p_msc->stage = MSC_STAGE_CMD;
 800f20e:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800f210:	231f      	movs	r3, #31
 800f212:	4a67      	ldr	r2, [pc, #412]	; (800f3b0 <mscd_xfer_cb+0x260>)
 800f214:	4630      	mov	r0, r6
  p_msc->stage = MSC_STAGE_CMD;
 800f216:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800f21a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f21e:	f001 fd25 	bl	8010c6c <usbd_edpt_xfer>
        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 800f222:	2800      	cmp	r0, #0
 800f224:	d173      	bne.n	800f30e <mscd_xfer_cb+0x1be>
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 800f226:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f22a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f22e:	07da      	lsls	r2, r3, #31
 800f230:	f100 80bc 	bmi.w	800f3ac <mscd_xfer_cb+0x25c>
 800f234:	2000      	movs	r0, #0
 800f236:	e79c      	b.n	800f172 <mscd_xfer_cb+0x22>
      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800f238:	7be3      	ldrb	r3, [r4, #15]
 800f23a:	2b28      	cmp	r3, #40	; 0x28
 800f23c:	d014      	beq.n	800f268 <mscd_xfer_cb+0x118>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 800f23e:	2b2a      	cmp	r3, #42	; 0x2a
 800f240:	d07a      	beq.n	800f338 <mscd_xfer_cb+0x1e8>
        p_msc->xferred_len += xferred_bytes;
 800f242:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  return tu_bit_test(dir, 7);
 800f244:	7b22      	ldrb	r2, [r4, #12]
        p_msc->xferred_len += xferred_bytes;
 800f246:	443b      	add	r3, r7
        if ( !is_data_in(p_cbw->dir) )
 800f248:	09d2      	lsrs	r2, r2, #7
        p_msc->xferred_len += xferred_bytes;
 800f24a:	63a3      	str	r3, [r4, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 800f24c:	d068      	beq.n	800f320 <mscd_xfer_cb+0x1d0>
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f24e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f250:	429a      	cmp	r2, r3
 800f252:	d910      	bls.n	800f276 <mscd_xfer_cb+0x126>
          TU_BREAKPOINT();
 800f254:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f258:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f25c:	07db      	lsls	r3, r3, #31
 800f25e:	d556      	bpl.n	800f30e <mscd_xfer_cb+0x1be>
 800f260:	be00      	bkpt	0x0000
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f262:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f266:	e780      	b.n	800f16a <mscd_xfer_cb+0x1a>
        p_msc->xferred_len += xferred_bytes;
 800f268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f26a:	6b62      	ldr	r2, [r4, #52]	; 0x34
        p_msc->xferred_len += xferred_bytes;
 800f26c:	443b      	add	r3, r7
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f26e:	4293      	cmp	r3, r2
        p_msc->xferred_len += xferred_bytes;
 800f270:	63a3      	str	r3, [r4, #56]	; 0x38
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f272:	f0c0 8096 	bcc.w	800f3a2 <mscd_xfer_cb+0x252>
          p_msc->stage = MSC_STAGE_STATUS;
 800f276:	2302      	movs	r3, #2
 800f278:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 800f27c:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f280:	4630      	mov	r0, r6
 800f282:	f001 fd59 	bl	8010d38 <usbd_edpt_stalled>
 800f286:	2800      	cmp	r0, #0
 800f288:	f47f af72 	bne.w	800f170 <mscd_xfer_cb+0x20>
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 800f28c:	68a3      	ldr	r3, [r4, #8]
 800f28e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f290:	4293      	cmp	r3, r2
 800f292:	d902      	bls.n	800f29a <mscd_xfer_cb+0x14a>
  return tu_bit_test(dir, 7);
 800f294:	7b21      	ldrb	r1, [r4, #12]
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 800f296:	09c9      	lsrs	r1, r1, #7
 800f298:	d13c      	bne.n	800f314 <mscd_xfer_cb+0x1c4>
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f29a:	1a9a      	subs	r2, r3, r2
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800f29c:	2103      	movs	r1, #3
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800f29e:	230d      	movs	r3, #13
 800f2a0:	4630      	mov	r0, r6
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f2a2:	62a2      	str	r2, [r4, #40]	; 0x28
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800f2a4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800f2a8:	4a45      	ldr	r2, [pc, #276]	; (800f3c0 <mscd_xfer_cb+0x270>)
 800f2aa:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f2ae:	f001 fcdd 	bl	8010c6c <usbd_edpt_xfer>
        TU_ASSERT( send_csw(rhport, p_msc) );
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	f47f af5c 	bne.w	800f170 <mscd_xfer_cb+0x20>
 800f2b8:	e7b5      	b.n	800f226 <mscd_xfer_cb+0xd6>
        p_msc->stage = MSC_STAGE_NEED_RESET;
 800f2ba:	2304      	movs	r3, #4
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800f2bc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f2c0:	4630      	mov	r0, r6
        p_msc->stage = MSC_STAGE_NEED_RESET;
 800f2c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800f2c6:	f001 fd17 	bl	8010cf8 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f2d0:	f001 fd12 	bl	8010cf8 <usbd_edpt_stall>
        return false;
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	e74c      	b.n	800f172 <mscd_xfer_cb+0x22>
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d075      	beq.n	800f3c8 <mscd_xfer_cb+0x278>
  return tu_bit_test(dir, 7);
 800f2dc:	7b20      	ldrb	r0, [r4, #12]
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 800f2de:	09c0      	lsrs	r0, r0, #7
 800f2e0:	d172      	bne.n	800f3c8 <mscd_xfer_cb+0x278>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 800f2e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2e6:	f240 827e 	bls.w	800f7e6 <mscd_xfer_cb+0x696>
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f2ea:	62a3      	str	r3, [r4, #40]	; 0x28
  p_msc->stage        = MSC_STAGE_STATUS;
 800f2ec:	2302      	movs	r3, #2
  p_csw->status       = status;
 800f2ee:	2201      	movs	r2, #1
  p_msc->stage        = MSC_STAGE_STATUS;
 800f2f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f2f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f2f8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f2fc:	b923      	cbnz	r3, 800f308 <mscd_xfer_cb+0x1b8>
  _mscd_itf.sense_key           = sense_key;
 800f2fe:	f242 0205 	movw	r2, #8197	; 0x2005
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f302:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f306:	87a2      	strh	r2, [r4, #60]	; 0x3c
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800f308:	4630      	mov	r0, r6
 800f30a:	f001 fcf5 	bl	8010cf8 <usbd_edpt_stall>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f30e:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f312:	e72a      	b.n	800f16a <mscd_xfer_cb+0x1a>
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800f314:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f318:	4630      	mov	r0, r6
 800f31a:	f001 fced 	bl	8010cf8 <usbd_edpt_stall>
 800f31e:	e727      	b.n	800f170 <mscd_xfer_cb+0x20>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800f320:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f322:	f104 010f 	add.w	r1, r4, #15
 800f326:	4a27      	ldr	r2, [pc, #156]	; (800f3c4 <mscd_xfer_cb+0x274>)
 800f328:	7b60      	ldrb	r0, [r4, #13]
 800f32a:	f7f5 f82f 	bl	800438c <tud_msc_scsi_cb>
          if ( cb_result < 0 )
 800f32e:	2800      	cmp	r0, #0
 800f330:	f2c0 81b1 	blt.w	800f696 <mscd_xfer_cb+0x546>
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f334:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f336:	e78a      	b.n	800f24e <mscd_xfer_cb+0xfe>
  return tu_ntohs(block_count);
 800f338:	8ae2      	ldrh	r2, [r4, #22]
 800f33a:	ba52      	rev16	r2, r2
 800f33c:	b292      	uxth	r2, r2
  if (block_count == 0) return 0;
 800f33e:	b11a      	cbz	r2, 800f348 <mscd_xfer_cb+0x1f8>
  return (uint16_t) (cbw->total_bytes / block_count);
 800f340:	68a3      	ldr	r3, [r4, #8]
 800f342:	fbb3 f3f2 	udiv	r3, r3, r2
 800f346:	b29a      	uxth	r2, r3

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800f348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800f34a:	f8d4 1011 	ldr.w	r1, [r4, #17]

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 800f34e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800f3c4 <mscd_xfer_cb+0x274>
  return tu_ntohl(lba);
 800f352:	ba09      	rev	r1, r1
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 800f354:	7b60      	ldrb	r0, [r4, #13]
 800f356:	9700      	str	r7, [sp, #0]
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800f358:	fbb3 f5f2 	udiv	r5, r3, r2
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 800f35c:	fb02 3215 	mls	r2, r2, r5, r3
 800f360:	4429      	add	r1, r5
 800f362:	4643      	mov	r3, r8
 800f364:	f7f4 ffd2 	bl	800430c <tud_msc_write10_cb>

  if ( nbytes < 0 )
 800f368:	2800      	cmp	r0, #0
 800f36a:	f2c0 81fa 	blt.w	800f762 <mscd_xfer_cb+0x612>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
  }else
  {
    // Application consume less than what we got (including zero)
    if ( (uint32_t) nbytes < xferred_bytes )
 800f36e:	4287      	cmp	r7, r0
 800f370:	f240 8186 	bls.w	800f680 <mscd_xfer_cb+0x530>
    {
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 800f374:	1a3f      	subs	r7, r7, r0
      if ( nbytes > 0 )
 800f376:	2800      	cmp	r0, #0
 800f378:	f040 821d 	bne.w	800f7b6 <mscd_xfer_cb+0x666>
        p_msc->xferred_len += (uint16_t) nbytes;
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
      }

      // simulate an transfer complete with adjusted parameters --> callback will be invoked with adjusted parameter
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 800f37c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800f380:	2100      	movs	r1, #0
  dcd_event_handler(&event, in_isr);
 800f382:	a805      	add	r0, sp, #20
  event.xfer_complete.len     = xferred_bytes;
 800f384:	9707      	str	r7, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800f386:	e9cd 1105 	strd	r1, r1, [sp, #20]
  event.xfer_complete.ep_addr = ep_addr;
 800f38a:	f88d 3018 	strb.w	r3, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800f38e:	2307      	movs	r3, #7
 800f390:	f88d 6014 	strb.w	r6, [sp, #20]
 800f394:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 800f398:	f001 faf2 	bl	8010980 <dcd_event_handler>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f39c:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
}
 800f3a0:	e6e3      	b.n	800f16a <mscd_xfer_cb+0x1a>
          proc_read10_cmd(rhport, p_msc);
 800f3a2:	f7ff fd15 	bl	800edd0 <proc_read10_cmd.constprop.0>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f3a6:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f3aa:	e6de      	b.n	800f16a <mscd_xfer_cb+0x1a>
        TU_ASSERT( send_csw(rhport, p_msc) );
 800f3ac:	be00      	bkpt	0x0000
 800f3ae:	e6e0      	b.n	800f172 <mscd_xfer_cb+0x22>
 800f3b0:	24002ac8 	.word	0x24002ac8
 800f3b4:	43425355 	.word	0x43425355
 800f3b8:	53425355 	.word	0x53425355
 800f3bc:	00000000 	.word	0x00000000
 800f3c0:	24002ae8 	.word	0x24002ae8
 800f3c4:	24000ac8 	.word	0x24000ac8
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 800f3c8:	f894 c00d 	ldrb.w	ip, [r4, #13]
  switch ( scsi_cmd[0] )
 800f3cc:	2a25      	cmp	r2, #37	; 0x25
 800f3ce:	d827      	bhi.n	800f420 <mscd_xfer_cb+0x2d0>
 800f3d0:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f3d4:	00260150 	.word	0x00260150
 800f3d8:	01140026 	.word	0x01140026
 800f3dc:	00260026 	.word	0x00260026
 800f3e0:	00260026 	.word	0x00260026
 800f3e4:	00260026 	.word	0x00260026
 800f3e8:	00260026 	.word	0x00260026
 800f3ec:	00260026 	.word	0x00260026
 800f3f0:	00260026 	.word	0x00260026
 800f3f4:	00260026 	.word	0x00260026
 800f3f8:	002600b2 	.word	0x002600b2
 800f3fc:	00260026 	.word	0x00260026
 800f400:	00260026 	.word	0x00260026
 800f404:	00260026 	.word	0x00260026
 800f408:	00f80081 	.word	0x00f80081
 800f40c:	00260026 	.word	0x00260026
 800f410:	00260026 	.word	0x00260026
 800f414:	00260026 	.word	0x00260026
 800f418:	00d30026 	.word	0x00d30026
 800f41c:	00580026 	.word	0x00580026
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800f420:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800f424:	2a00      	cmp	r2, #0
 800f426:	d141      	bne.n	800f4ac <mscd_xfer_cb+0x35c>
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800f428:	b29b      	uxth	r3, r3
 800f42a:	4ab5      	ldr	r2, [pc, #724]	; (800f700 <mscd_xfer_cb+0x5b0>)
 800f42c:	4660      	mov	r0, ip
 800f42e:	49b5      	ldr	r1, [pc, #724]	; (800f704 <mscd_xfer_cb+0x5b4>)
 800f430:	f7f4 ffac 	bl	800438c <tud_msc_scsi_cb>
          if ( resplen < 0 )
 800f434:	1e05      	subs	r5, r0, #0
 800f436:	db39      	blt.n	800f4ac <mscd_xfer_cb+0x35c>
          else if (resplen == 0)
 800f438:	2d00      	cmp	r5, #0
 800f43a:	d165      	bne.n	800f508 <mscd_xfer_cb+0x3b8>
            if (p_cbw->total_bytes)
 800f43c:	68a3      	ldr	r3, [r4, #8]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f43f af19 	beq.w	800f276 <mscd_xfer_cb+0x126>
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f444:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  p_csw->status       = status;
 800f446:	2101      	movs	r1, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f448:	1a9b      	subs	r3, r3, r2
  p_msc->stage        = MSC_STAGE_STATUS;
 800f44a:	2202      	movs	r2, #2
  p_csw->status       = status;
 800f44c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f450:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f454:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f458:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f45a:	b922      	cbnz	r2, 800f466 <mscd_xfer_cb+0x316>
  _mscd_itf.sense_key           = sense_key;
 800f45c:	f242 0105 	movw	r1, #8197	; 0x2005
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f460:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f464:	87a1      	strh	r1, [r4, #60]	; 0x3c
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800f466:	2b00      	cmp	r3, #0
 800f468:	f43f af08 	beq.w	800f27c <mscd_xfer_cb+0x12c>
  return tu_bit_test(dir, 7);
 800f46c:	7b23      	ldrb	r3, [r4, #12]
    if ( is_data_in(p_cbw->dir) )
 800f46e:	09db      	lsrs	r3, r3, #7
 800f470:	f040 8164 	bne.w	800f73c <mscd_xfer_cb+0x5ec>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800f474:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f478:	4630      	mov	r0, r6
 800f47a:	f001 fc3d 	bl	8010cf8 <usbd_edpt_stall>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f47e:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f482:	e672      	b.n	800f16a <mscd_xfer_cb+0x1a>
      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 800f484:	aa04      	add	r2, sp, #16
 800f486:	a905      	add	r1, sp, #20
 800f488:	4660      	mov	r0, ip
 800f48a:	f7f4 ff75 	bl	8004378 <tud_msc_capacity_cb>
      if (block_count == 0 || block_size == 0)
 800f48e:	9b05      	ldr	r3, [sp, #20]
      block_size = (uint32_t) block_size_u16;
 800f490:	f8bd 2010 	ldrh.w	r2, [sp, #16]
      if (block_count == 0 || block_size == 0)
 800f494:	b113      	cbz	r3, 800f49c <mscd_xfer_cb+0x34c>
 800f496:	2a00      	cmp	r2, #0
 800f498:	f040 81cd 	bne.w	800f836 <mscd_xfer_cb+0x6e6>
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800f49c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f4a0:	b923      	cbnz	r3, 800f4ac <mscd_xfer_cb+0x35c>
  _mscd_itf.sense_key           = sense_key;
 800f4a2:	f643 2202 	movw	r2, #14850	; 0x3a02
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f4a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f4aa:	87a2      	strh	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f4ac:	2101      	movs	r1, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f4ae:	68a2      	ldr	r2, [r4, #8]
 800f4b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  p_csw->status       = status;
 800f4b2:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f4b6:	2102      	movs	r1, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f4b8:	1ad3      	subs	r3, r2, r3
  p_msc->stage        = MSC_STAGE_STATUS;
 800f4ba:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f4be:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f4c2:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f4c4:	b921      	cbnz	r1, 800f4d0 <mscd_xfer_cb+0x380>
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f4c6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f4ca:	f242 0105 	movw	r1, #8197	; 0x2005
 800f4ce:	87a1      	strh	r1, [r4, #60]	; 0x3c
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800f4d0:	2a00      	cmp	r2, #0
 800f4d2:	d1c8      	bne.n	800f466 <mscd_xfer_cb+0x316>
 800f4d4:	e6d2      	b.n	800f27c <mscd_xfer_cb+0x12c>
      scsi_mode_sense6_resp_t mode_resp =
 800f4d6:	9b05      	ldr	r3, [sp, #20]
      if ( tud_msc_is_writable_cb )
 800f4d8:	4a8b      	ldr	r2, [pc, #556]	; (800f708 <mscd_xfer_cb+0x5b8>)
      scsi_mode_sense6_resp_t mode_resp =
 800f4da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4de:	f043 0303 	orr.w	r3, r3, #3
 800f4e2:	9305      	str	r3, [sp, #20]
      if ( tud_msc_is_writable_cb )
 800f4e4:	2a00      	cmp	r2, #0
 800f4e6:	f000 81a4 	beq.w	800f832 <mscd_xfer_cb+0x6e2>
        writable = tud_msc_is_writable_cb(lun);
 800f4ea:	4660      	mov	r0, ip
 800f4ec:	f7f4 ff5c 	bl	80043a8 <tud_msc_is_writable_cb>
      mode_resp.write_protected = !writable;
 800f4f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f4f4:	f080 0001 	eor.w	r0, r0, #1
  memcpy(dest, src, count);
 800f4f8:	4a81      	ldr	r2, [pc, #516]	; (800f700 <mscd_xfer_cb+0x5b0>)
      resplen = sizeof(mode_resp);
 800f4fa:	2504      	movs	r5, #4
      mode_resp.write_protected = !writable;
 800f4fc:	f360 13c7 	bfi	r3, r0, #7, #1
 800f500:	f88d 3016 	strb.w	r3, [sp, #22]
 800f504:	9b05      	ldr	r3, [sp, #20]
 800f506:	6013      	str	r3, [r2, #0]
            if ( p_cbw->total_bytes == 0 )
 800f508:	68a3      	ldr	r3, [r4, #8]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f040 8174 	bne.w	800f7f8 <mscd_xfer_cb+0x6a8>
  p_msc->stage        = MSC_STAGE_STATUS;
 800f510:	2202      	movs	r2, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f512:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  p_csw->status       = status;
 800f514:	2101      	movs	r1, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f516:	425b      	negs	r3, r3
  p_msc->stage        = MSC_STAGE_STATUS;
 800f518:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f51c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f520:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f524:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f526:	2a00      	cmp	r2, #0
 800f528:	f47f aea8 	bne.w	800f27c <mscd_xfer_cb+0x12c>
  _mscd_itf.sense_key           = sense_key;
 800f52c:	f242 0305 	movw	r3, #8197	; 0x2005
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f530:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f534:	87a3      	strh	r3, [r4, #60]	; 0x3c
  return true;
 800f536:	e6a1      	b.n	800f27c <mscd_xfer_cb+0x12c>
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 800f538:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
      scsi_inquiry_resp_t inquiry_rsp =
 800f53c:	4a73      	ldr	r2, [pc, #460]	; (800f70c <mscd_xfer_cb+0x5bc>)
 800f53e:	251f      	movs	r5, #31
 800f540:	af05      	add	r7, sp, #20
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 800f542:	4660      	mov	r0, ip
 800f544:	a907      	add	r1, sp, #28
      scsi_inquiry_resp_t inquiry_rsp =
 800f546:	9205      	str	r2, [sp, #20]
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 800f548:	aa09      	add	r2, sp, #36	; 0x24
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 800f54a:	9309      	str	r3, [sp, #36]	; 0x24
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 800f54c:	930d      	str	r3, [sp, #52]	; 0x34
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 800f54e:	930c      	str	r3, [sp, #48]	; 0x30
      scsi_inquiry_resp_t inquiry_rsp =
 800f550:	9506      	str	r5, [sp, #24]
      resplen = sizeof(inquiry_rsp);
 800f552:	2524      	movs	r5, #36	; 0x24
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 800f554:	e9cd 3307 	strd	r3, r3, [sp, #28]
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 800f558:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 800f55c:	ab0d      	add	r3, sp, #52	; 0x34
 800f55e:	f7f4 fee1 	bl	8004324 <tud_msc_inquiry_cb>
 800f562:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800f700 <mscd_xfer_cb+0x5b0>
 800f566:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f56c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f56e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	f8cc 3000 	str.w	r3, [ip]
          if ( resplen < 0 )
 800f578:	e7c6      	b.n	800f508 <mscd_xfer_cb+0x3b8>
      scsi_read_format_capacity_data_t read_fmt_capa =
 800f57a:	2300      	movs	r3, #0
 800f57c:	af05      	add	r7, sp, #20
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 800f57e:	f10d 020e 	add.w	r2, sp, #14
 800f582:	4660      	mov	r0, ip
      scsi_read_format_capacity_data_t read_fmt_capa =
 800f584:	9305      	str	r3, [sp, #20]
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 800f586:	a904      	add	r1, sp, #16
      scsi_read_format_capacity_data_t read_fmt_capa =
 800f588:	e9c7 3301 	strd	r3, r3, [r7, #4]
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 800f58c:	f7f4 fef4 	bl	8004378 <tud_msc_capacity_cb>
      if (block_count == 0 || block_size == 0)
 800f590:	9a04      	ldr	r2, [sp, #16]
 800f592:	2a00      	cmp	r2, #0
 800f594:	d082      	beq.n	800f49c <mscd_xfer_cb+0x34c>
 800f596:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f43f af7e 	beq.w	800f49c <mscd_xfer_cb+0x34c>
        read_fmt_capa.block_num = tu_htonl(block_count);
 800f5a0:	ba12      	rev	r2, r2
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 800f5a2:	ba5b      	rev16	r3, r3
        resplen = sizeof(read_fmt_capa);
 800f5a4:	250c      	movs	r5, #12
 800f5a6:	9206      	str	r2, [sp, #24]
 800f5a8:	2202      	movs	r2, #2
 800f5aa:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f5ae:	f88d 201c 	strb.w	r2, [sp, #28]
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	4b52      	ldr	r3, [pc, #328]	; (800f700 <mscd_xfer_cb+0x5b0>)
 800f5b6:	f88d 2017 	strb.w	r2, [sp, #23]
 800f5ba:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f5be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          if ( resplen < 0 )
 800f5c2:	e7a1      	b.n	800f508 <mscd_xfer_cb+0x3b8>
      if (tud_msc_start_stop_cb)
 800f5c4:	4b52      	ldr	r3, [pc, #328]	; (800f710 <mscd_xfer_cb+0x5c0>)
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f43f af38 	beq.w	800f43c <mscd_xfer_cb+0x2ec>
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 800f5cc:	7ce1      	ldrb	r1, [r4, #19]
 800f5ce:	4660      	mov	r0, ip
 800f5d0:	f3c1 0340 	ubfx	r3, r1, #1, #1
 800f5d4:	f001 0201 	and.w	r2, r1, #1
 800f5d8:	0909      	lsrs	r1, r1, #4
 800f5da:	f7f4 fee1 	bl	80043a0 <tud_msc_start_stop_cb>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	f47f af2c 	bne.w	800f43c <mscd_xfer_cb+0x2ec>
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800f5e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f47f af5f 	bne.w	800f4ac <mscd_xfer_cb+0x35c>
  _mscd_itf.sense_key           = sense_key;
 800f5ee:	f643 2202 	movw	r2, #14850	; 0x3a02
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f5f2:	2300      	movs	r3, #0
  _mscd_itf.sense_key           = sense_key;
 800f5f4:	87a2      	strh	r2, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f5f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800f5fa:	e757      	b.n	800f4ac <mscd_xfer_cb+0x35c>
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 800f5fc:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800f600:	f04f 0300 	mov.w	r3, #0
      scsi_sense_fixed_resp_t sense_rsp =
 800f604:	f04f 0800 	mov.w	r8, #0
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 800f608:	f8b4 203d 	ldrh.w	r2, [r4, #61]	; 0x3d
 800f60c:	f361 0303 	bfi	r3, r1, #0, #4
 800f610:	ad05      	add	r5, sp, #20
      scsi_sense_fixed_resp_t sense_rsp =
 800f612:	f8cd 8014 	str.w	r8, [sp, #20]
 800f616:	f88d 3016 	strb.w	r3, [sp, #22]
 800f61a:	23f0      	movs	r3, #240	; 0xf0
 800f61c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f620:	f88d 3014 	strb.w	r3, [sp, #20]
 800f624:	230a      	movs	r3, #10
 800f626:	f8cd 8020 	str.w	r8, [sp, #32]
 800f62a:	f8cd 801c 	str.w	r8, [sp, #28]
 800f62e:	f8ad 2020 	strh.w	r2, [sp, #32]
 800f632:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 800f636:	f88d 301b 	strb.w	r3, [sp, #27]
 800f63a:	4f31      	ldr	r7, [pc, #196]	; (800f700 <mscd_xfer_cb+0x5b0>)
      if (tud_msc_request_sense_cb)
 800f63c:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 800f714 <mscd_xfer_cb+0x5c4>
 800f640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f642:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f644:	682b      	ldr	r3, [r5, #0]
 800f646:	803b      	strh	r3, [r7, #0]
 800f648:	f1be 0f00 	cmp.w	lr, #0
 800f64c:	f000 80eb 	beq.w	800f826 <mscd_xfer_cb+0x6d6>
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 800f650:	f1a7 0110 	sub.w	r1, r7, #16
 800f654:	4660      	mov	r0, ip
 800f656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f65a:	f7f4 fea3 	bl	80043a4 <tud_msc_request_sense_cb>
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800f65e:	1e05      	subs	r5, r0, #0
  _mscd_itf.sense_key           = sense_key;
 800f660:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f664:	f884 803e 	strb.w	r8, [r4, #62]	; 0x3e
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800f668:	f6bf aee6 	bge.w	800f438 <mscd_xfer_cb+0x2e8>
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800f66c:	f894 c00d 	ldrb.w	ip, [r4, #13]
 800f670:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f672:	e6d9      	b.n	800f428 <mscd_xfer_cb+0x2d8>
      if ( !tud_msc_test_unit_ready_cb(lun) )
 800f674:	4660      	mov	r0, ip
 800f676:	f7f4 fe7d 	bl	8004374 <tud_msc_test_unit_ready_cb>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d0b2      	beq.n	800f5e4 <mscd_xfer_cb+0x494>
 800f67e:	e6dd      	b.n	800f43c <mscd_xfer_cb+0x2ec>
    else
    {
      // Application consume all bytes in our buffer
      p_msc->xferred_len += xferred_bytes;

      if ( p_msc->xferred_len >= p_msc->total_len )
 800f680:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
      p_msc->xferred_len += xferred_bytes;
 800f684:	443b      	add	r3, r7
      if ( p_msc->xferred_len >= p_msc->total_len )
 800f686:	4293      	cmp	r3, r2
      p_msc->xferred_len += xferred_bytes;
 800f688:	63a3      	str	r3, [r4, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 800f68a:	f4bf adf4 	bcs.w	800f276 <mscd_xfer_cb+0x126>
        // Data Stage is complete
        p_msc->stage = MSC_STAGE_STATUS;
      }else
      {
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
 800f68e:	4630      	mov	r0, r6
 800f690:	f7ff fc0a 	bl	800eea8 <proc_write10_cmd.constprop.0>
 800f694:	e63b      	b.n	800f30e <mscd_xfer_cb+0x1be>
  p_msc->stage        = MSC_STAGE_STATUS;
 800f696:	2202      	movs	r2, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f698:	68a1      	ldr	r1, [r4, #8]
 800f69a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  p_msc->stage        = MSC_STAGE_STATUS;
 800f69c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f6a0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f6a4:	1aca      	subs	r2, r1, r3
  p_csw->status       = status;
 800f6a6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f6aa:	62a2      	str	r2, [r4, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f6ac:	b920      	cbnz	r0, 800f6b8 <mscd_xfer_cb+0x568>
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f6ae:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f6b2:	f242 0005 	movw	r0, #8197	; 0x2005
 800f6b6:	87a0      	strh	r0, [r4, #60]	; 0x3c
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800f6b8:	2a00      	cmp	r2, #0
 800f6ba:	f43f adc8 	beq.w	800f24e <mscd_xfer_cb+0xfe>
 800f6be:	2900      	cmp	r1, #0
 800f6c0:	f43f adc5 	beq.w	800f24e <mscd_xfer_cb+0xfe>
  return tu_bit_test(dir, 7);
 800f6c4:	7b23      	ldrb	r3, [r4, #12]
    if ( is_data_in(p_cbw->dir) )
 800f6c6:	09db      	lsrs	r3, r3, #7
 800f6c8:	f000 80a7 	beq.w	800f81a <mscd_xfer_cb+0x6ca>
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800f6cc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f001 fb11 	bl	8010cf8 <usbd_edpt_stall>
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f6d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f6d8:	e5b9      	b.n	800f24e <mscd_xfer_cb+0xfe>
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800f6da:	2a28      	cmp	r2, #40	; 0x28
  return tu_bit_test(dir, 7);
 800f6dc:	7b25      	ldrb	r5, [r4, #12]
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800f6de:	d075      	beq.n	800f7cc <mscd_xfer_cb+0x67c>
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 800f6e0:	09ed      	lsrs	r5, r5, #7
 800f6e2:	d119      	bne.n	800f718 <mscd_xfer_cb+0x5c8>
    else if ( 0 == block_count )
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	d05a      	beq.n	800f79e <mscd_xfer_cb+0x64e>
    else if ( cbw->total_bytes / block_count == 0 )
 800f6e8:	4283      	cmp	r3, r0
 800f6ea:	f0c0 8094 	bcc.w	800f816 <mscd_xfer_cb+0x6c6>
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800f6ee:	2a28      	cmp	r2, #40	; 0x28
            proc_read10_cmd(rhport, p_msc);
 800f6f0:	4630      	mov	r0, r6
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800f6f2:	f43f ae56 	beq.w	800f3a2 <mscd_xfer_cb+0x252>
            proc_write10_cmd(rhport, p_msc);
 800f6f6:	f7ff fbd7 	bl	800eea8 <proc_write10_cmd.constprop.0>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f6fa:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f6fe:	e534      	b.n	800f16a <mscd_xfer_cb+0x1a>
 800f700:	24000ac8 	.word	0x24000ac8
 800f704:	24002ad7 	.word	0x24002ad7
 800f708:	080043a9 	.word	0x080043a9
 800f70c:	02028000 	.word	0x02028000
 800f710:	080043a1 	.word	0x080043a1
 800f714:	080043a5 	.word	0x080043a5
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f718:	62a3      	str	r3, [r4, #40]	; 0x28
  p_csw->status       = status;
 800f71a:	2302      	movs	r3, #2
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f71c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f720:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f724:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f728:	b942      	cbnz	r2, 800f73c <mscd_xfer_cb+0x5ec>
  _mscd_itf.sense_key           = sense_key;
 800f72a:	f242 0305 	movw	r3, #8197	; 0x2005
 800f72e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f730:	2300      	movs	r3, #0
 800f732:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if ( is_data_in(p_cbw->dir) )
 800f736:	2d00      	cmp	r5, #0
 800f738:	f43f ade6 	beq.w	800f308 <mscd_xfer_cb+0x1b8>
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800f73c:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f740:	e5e2      	b.n	800f308 <mscd_xfer_cb+0x1b8>
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 800f742:	4b41      	ldr	r3, [pc, #260]	; (800f848 <mscd_xfer_cb+0x6f8>)
 800f744:	2b00      	cmp	r3, #0
 800f746:	f43f ad62 	beq.w	800f20e <mscd_xfer_cb+0xbe>
 800f74a:	7b60      	ldrb	r0, [r4, #13]
 800f74c:	f3af 8000 	nop.w
 800f750:	e55d      	b.n	800f20e <mscd_xfer_cb+0xbe>
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 800f752:	4b3e      	ldr	r3, [pc, #248]	; (800f84c <mscd_xfer_cb+0x6fc>)
 800f754:	2b00      	cmp	r3, #0
 800f756:	f43f ad5a 	beq.w	800f20e <mscd_xfer_cb+0xbe>
 800f75a:	7b60      	ldrb	r0, [r4, #13]
 800f75c:	f3af 8000 	nop.w
 800f760:	e555      	b.n	800f20e <mscd_xfer_cb+0xbe>
  _mscd_itf.sense_key           = sense_key;
 800f762:	f643 2102 	movw	r1, #14850	; 0x3a02
    p_msc->xferred_len += xferred_bytes;
 800f766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f768:	68a2      	ldr	r2, [r4, #8]
  _mscd_itf.sense_key           = sense_key;
 800f76a:	87a1      	strh	r1, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f76c:	2100      	movs	r1, #0
    p_msc->xferred_len += xferred_bytes;
 800f76e:	443b      	add	r3, r7
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f770:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  p_csw->status       = status;
 800f774:	2101      	movs	r1, #1
    p_msc->xferred_len += xferred_bytes;
 800f776:	63a3      	str	r3, [r4, #56]	; 0x38
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f778:	1ad3      	subs	r3, r2, r3
  p_csw->status       = status;
 800f77a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f77e:	2102      	movs	r1, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f780:	62a3      	str	r3, [r4, #40]	; 0x28
  p_msc->stage        = MSC_STAGE_STATUS;
 800f782:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800f786:	2b00      	cmp	r3, #0
 800f788:	f43f ad78 	beq.w	800f27c <mscd_xfer_cb+0x12c>
 800f78c:	2a00      	cmp	r2, #0
 800f78e:	f43f ad75 	beq.w	800f27c <mscd_xfer_cb+0x12c>
  return tu_bit_test(dir, 7);
 800f792:	7b23      	ldrb	r3, [r4, #12]
    if ( is_data_in(p_cbw->dir) )
 800f794:	09db      	lsrs	r3, r3, #7
 800f796:	d1d1      	bne.n	800f73c <mscd_xfer_cb+0x5ec>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800f798:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f79c:	e5b4      	b.n	800f308 <mscd_xfer_cb+0x1b8>
      status =  MSC_CSW_STATUS_FAILED;
 800f79e:	2201      	movs	r2, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f7a0:	62a3      	str	r3, [r4, #40]	; 0x28
  p_msc->stage        = MSC_STAGE_STATUS;
 800f7a2:	2302      	movs	r3, #2
  p_csw->status       = status;
 800f7a4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f7a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f7ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1c0      	bne.n	800f736 <mscd_xfer_cb+0x5e6>
 800f7b4:	e7b9      	b.n	800f72a <mscd_xfer_cb+0x5da>
        p_msc->xferred_len += (uint16_t) nbytes;
 800f7b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 800f7b8:	eb08 0100 	add.w	r1, r8, r0
 800f7bc:	463a      	mov	r2, r7
        p_msc->xferred_len += (uint16_t) nbytes;
 800f7be:	fa13 f380 	uxtah	r3, r3, r0
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 800f7c2:	4640      	mov	r0, r8
        p_msc->xferred_len += (uint16_t) nbytes;
 800f7c4:	63a3      	str	r3, [r4, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 800f7c6:	f002 fd4e 	bl	8012266 <memmove>
 800f7ca:	e5d7      	b.n	800f37c <mscd_xfer_cb+0x22c>
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800f7cc:	09ed      	lsrs	r5, r5, #7
 800f7ce:	d189      	bne.n	800f6e4 <mscd_xfer_cb+0x594>
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f7d0:	62a3      	str	r3, [r4, #40]	; 0x28
  p_csw->status       = status;
 800f7d2:	2302      	movs	r3, #2
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f7d4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f7d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f7dc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f7e0:	2a00      	cmp	r2, #0
 800f7e2:	d0a2      	beq.n	800f72a <mscd_xfer_cb+0x5da>
 800f7e4:	e590      	b.n	800f308 <mscd_xfer_cb+0x1b8>
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	4a19      	ldr	r2, [pc, #100]	; (800f850 <mscd_xfer_cb+0x700>)
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f001 fa3e 	bl	8010c6c <usbd_edpt_xfer>
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	f47f ad8c 	bne.w	800f30e <mscd_xfer_cb+0x1be>
 800f7f6:	e516      	b.n	800f226 <mscd_xfer_cb+0xd6>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800f7f8:	429d      	cmp	r5, r3
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 800f7fa:	4a15      	ldr	r2, [pc, #84]	; (800f850 <mscd_xfer_cb+0x700>)
 800f7fc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f800:	4630      	mov	r0, r6
 800f802:	bf28      	it	cs
 800f804:	461d      	movcs	r5, r3
 800f806:	b2ab      	uxth	r3, r5
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 800f808:	6365      	str	r5, [r4, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 800f80a:	f001 fa2f 	bl	8010c6c <usbd_edpt_xfer>
 800f80e:	2800      	cmp	r0, #0
 800f810:	f47f ad7d 	bne.w	800f30e <mscd_xfer_cb+0x1be>
 800f814:	e507      	b.n	800f226 <mscd_xfer_cb+0xd6>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800f816:	2202      	movs	r2, #2
 800f818:	e7c2      	b.n	800f7a0 <mscd_xfer_cb+0x650>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800f81a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f81e:	4630      	mov	r0, r6
 800f820:	f001 fa6a 	bl	8010cf8 <usbd_edpt_stall>
 800f824:	e586      	b.n	800f334 <mscd_xfer_cb+0x1e4>
      resplen = sizeof(sense_rsp);
 800f826:	2512      	movs	r5, #18
  _mscd_itf.sense_key           = sense_key;
 800f828:	f8a4 e03c 	strh.w	lr, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f82c:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
          if ( resplen < 0 )
 800f830:	e66a      	b.n	800f508 <mscd_xfer_cb+0x3b8>
      bool writable = true;
 800f832:	2001      	movs	r0, #1
 800f834:	e65c      	b.n	800f4f0 <mscd_xfer_cb+0x3a0>
        read_capa10.last_lba   = tu_htonl(block_count-1);
 800f836:	3b01      	subs	r3, #1
  memcpy(dest, src, count);
 800f838:	4905      	ldr	r1, [pc, #20]	; (800f850 <mscd_xfer_cb+0x700>)
        read_capa10.block_size = tu_htonl(block_size);
 800f83a:	ba12      	rev	r2, r2
        resplen = sizeof(read_capa10);
 800f83c:	2508      	movs	r5, #8
        read_capa10.last_lba   = tu_htonl(block_count-1);
 800f83e:	ba1b      	rev	r3, r3
 800f840:	604a      	str	r2, [r1, #4]
 800f842:	600b      	str	r3, [r1, #0]
 800f844:	e660      	b.n	800f508 <mscd_xfer_cb+0x3b8>
 800f846:	bf00      	nop
	...
 800f850:	24000ac8 	.word	0x24000ac8

0800f854 <tu_fifo_config>:
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800f854:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
{
 800f858:	4684      	mov	ip, r0
 800f85a:	f89d 0000 	ldrb.w	r0, [sp]
  if (depth > 0x8000) return false;
 800f85e:	d810      	bhi.n	800f882 <tu_fifo_config+0x2e>
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
  f->depth        = depth;
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f860:	f3c3 030e 	ubfx	r3, r3, #0, #15
  f->buffer       = (uint8_t*) buffer;
 800f864:	f8cc 1000 	str.w	r1, [ip]
  f->overwritable = overwritable;
  f->rd_idx       = 0;
 800f868:	2100      	movs	r1, #0
  f->depth        = depth;
 800f86a:	f8ac 2004 	strh.w	r2, [ip, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f86e:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
  f->wr_idx       = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800f872:	2001      	movs	r0, #1
  f->rd_idx       = 0;
 800f874:	f8ac 100a 	strh.w	r1, [ip, #10]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f878:	f8ac 3006 	strh.w	r3, [ip, #6]
  f->wr_idx       = 0;
 800f87c:	f8ac 1008 	strh.w	r1, [ip, #8]
  return true;
 800f880:	4770      	bx	lr
  if (depth > 0x8000) return false;
 800f882:	2000      	movs	r0, #0
}
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop

0800f888 <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800f888:	8903      	ldrh	r3, [r0, #8]
 800f88a:	8942      	ldrh	r2, [r0, #10]
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	8880      	ldrh	r0, [r0, #4]
 800f890:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800f892:	4293      	cmp	r3, r2
 800f894:	d305      	bcc.n	800f8a2 <tu_fifo_count+0x1a>
    return (uint16_t) (wr_idx - rd_idx);
 800f896:	1a9b      	subs	r3, r3, r2
 800f898:	b29b      	uxth	r3, r3
}
 800f89a:	4298      	cmp	r0, r3
 800f89c:	bf28      	it	cs
 800f89e:	4618      	movcs	r0, r3
 800f8a0:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f8a2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800f8a6:	4413      	add	r3, r2
 800f8a8:	b29b      	uxth	r3, r3
}
 800f8aa:	4298      	cmp	r0, r3
 800f8ac:	bf28      	it	cs
 800f8ae:	4618      	movcs	r0, r3
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop

0800f8b4 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return f->wr_idx == f->rd_idx;
 800f8b4:	8902      	ldrh	r2, [r0, #8]
 800f8b6:	8943      	ldrh	r3, [r0, #10]
 800f8b8:	b290      	uxth	r0, r2
 800f8ba:	b29b      	uxth	r3, r3
}
 800f8bc:	1ac0      	subs	r0, r0, r3
 800f8be:	fab0 f080 	clz	r0, r0
 800f8c2:	0940      	lsrs	r0, r0, #5
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop

0800f8c8 <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800f8c8:	8903      	ldrh	r3, [r0, #8]
 800f8ca:	8942      	ldrh	r2, [r0, #10]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	8880      	ldrh	r0, [r0, #4]
 800f8d0:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d306      	bcc.n	800f8e4 <tu_fifo_remaining+0x1c>
    return (uint16_t) (wr_idx - rd_idx);
 800f8d6:	1a9b      	subs	r3, r3, r2
 800f8d8:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800f8da:	4298      	cmp	r0, r3
 800f8dc:	d908      	bls.n	800f8f0 <tu_fifo_remaining+0x28>
 800f8de:	1ac0      	subs	r0, r0, r3
 800f8e0:	b280      	uxth	r0, r0
 800f8e2:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f8e4:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800f8e8:	4413      	add	r3, r2
 800f8ea:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800f8ec:	4298      	cmp	r0, r3
 800f8ee:	d8f6      	bhi.n	800f8de <tu_fifo_remaining+0x16>
 800f8f0:	2000      	movs	r0, #0
}
 800f8f2:	4770      	bx	lr

0800f8f4 <tu_fifo_read>:
{
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f8f4:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800f8f8:	8882      	ldrh	r2, [r0, #4]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f8fa:	fa1f fc8c 	uxth.w	ip, ip
{
 800f8fe:	b538      	push	{r3, r4, r5, lr}
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f900:	8943      	ldrh	r3, [r0, #10]
{
 800f902:	4604      	mov	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f904:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 800f906:	459c      	cmp	ip, r3
 800f908:	d32b      	bcc.n	800f962 <tu_fifo_read+0x6e>
    return (uint16_t) (wr_idx - rd_idx);
 800f90a:	ebac 0503 	sub.w	r5, ip, r3
 800f90e:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800f910:	b368      	cbz	r0, 800f96e <tu_fifo_read+0x7a>
  if ( cnt > f->depth )
 800f912:	4282      	cmp	r2, r0
 800f914:	d20b      	bcs.n	800f92e <tu_fifo_read+0x3a>
  if ( wr_idx >= f->depth )
 800f916:	4594      	cmp	ip, r2
    rd_idx = wr_idx - f->depth;
 800f918:	bf2c      	ite	cs
 800f91a:	ebac 0c02 	subcs.w	ip, ip, r2
    rd_idx = wr_idx + f->depth;
 800f91e:	4494      	addcc	ip, r2
 800f920:	fa1f f38c 	uxth.w	r3, ip
  while ( idx >= depth ) idx -= depth;
 800f924:	429a      	cmp	r2, r3
  f->rd_idx = rd_idx;
 800f926:	8163      	strh	r3, [r4, #10]
  while ( idx >= depth ) idx -= depth;
 800f928:	d803      	bhi.n	800f932 <tu_fifo_read+0x3e>
 800f92a:	1a9b      	subs	r3, r3, r2
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	429a      	cmp	r2, r3
 800f930:	d9fb      	bls.n	800f92a <tu_fifo_read+0x36>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800f932:	88e2      	ldrh	r2, [r4, #6]
 800f934:	4608      	mov	r0, r1
 800f936:	6825      	ldr	r5, [r4, #0]
 800f938:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f93c:	fb02 5103 	mla	r1, r2, r3, r5
 800f940:	f002 fce4 	bl	801230c <memcpy>

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f944:	8961      	ldrh	r1, [r4, #10]
 800f946:	88a2      	ldrh	r2, [r4, #4]
  return true;
 800f948:	2001      	movs	r0, #1
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f94a:	b289      	uxth	r1, r1
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f94c:	1c4b      	adds	r3, r1, #1
 800f94e:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f950:	4299      	cmp	r1, r3
 800f952:	d90e      	bls.n	800f972 <tu_fifo_read+0x7e>
 800f954:	2300      	movs	r3, #0
 800f956:	fa02 f100 	lsl.w	r1, r2, r0
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800f95a:	1a5b      	subs	r3, r3, r1
 800f95c:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f95e:	8163      	strh	r3, [r4, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 800f960:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f962:	ebc3 0542 	rsb	r5, r3, r2, lsl #1
 800f966:	4465      	add	r5, ip
 800f968:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d1d1      	bne.n	800f912 <tu_fifo_read+0x1e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f96e:	8963      	ldrh	r3, [r4, #10]
 800f970:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f972:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800f976:	ea4f 0142 	mov.w	r1, r2, lsl #1
 800f97a:	daee      	bge.n	800f95a <tu_fifo_read+0x66>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f97c:	8163      	strh	r3, [r4, #10]
}
 800f97e:	bd38      	pop	{r3, r4, r5, pc}

0800f980 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800f980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f984:	8903      	ldrh	r3, [r0, #8]
{
 800f986:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f988:	8944      	ldrh	r4, [r0, #10]
{
 800f98a:	4688      	mov	r8, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f98c:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800f98e:	8885      	ldrh	r5, [r0, #4]
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f990:	b2a4      	uxth	r4, r4
  if (wr_idx >= rd_idx)
 800f992:	42a3      	cmp	r3, r4
 800f994:	d354      	bcc.n	800fa40 <tu_fifo_read_n+0xc0>
    return (uint16_t) (wr_idx - rd_idx);
 800f996:	1b1f      	subs	r7, r3, r4
 800f998:	b2bf      	uxth	r7, r7
  if ( cnt == 0 ) return 0;
 800f99a:	2f00      	cmp	r7, #0
 800f99c:	d045      	beq.n	800fa2a <tu_fifo_read_n+0xaa>
  if ( cnt > f->depth )
 800f99e:	42bd      	cmp	r5, r7
 800f9a0:	d33b      	bcc.n	800fa1a <tu_fifo_read_n+0x9a>
  if ( cnt < n ) n = cnt;
 800f9a2:	42ba      	cmp	r2, r7
 800f9a4:	bf28      	it	cs
 800f9a6:	463a      	movcs	r2, r7
  while ( idx >= depth ) idx -= depth;
 800f9a8:	42a5      	cmp	r5, r4
 800f9aa:	b297      	uxth	r7, r2
 800f9ac:	d803      	bhi.n	800f9b6 <tu_fifo_read_n+0x36>
 800f9ae:	1b64      	subs	r4, r4, r5
 800f9b0:	b2a4      	uxth	r4, r4
 800f9b2:	42a5      	cmp	r5, r4
 800f9b4:	d9fb      	bls.n	800f9ae <tu_fifo_read_n+0x2e>
  uint16_t const lin_count = f->depth - rd_ptr;
 800f9b6:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800f9b8:	f8b6 a006 	ldrh.w	sl, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800f9bc:	6831      	ldr	r1, [r6, #0]
  uint16_t const lin_count = f->depth - rd_ptr;
 800f9be:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800f9c0:	f3ca 020e 	ubfx	r2, sl, #0, #15
      if ( n <= lin_count )
 800f9c4:	429f      	cmp	r7, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800f9c6:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800f9c8:	fb02 1104 	mla	r1, r2, r4, r1
      if ( n <= lin_count )
 800f9cc:	d91f      	bls.n	800fa0e <tu_fifo_read_n+0x8e>
  uint16_t lin_bytes = lin_count * f->item_size;
 800f9ce:	fb13 f302 	smulbb	r3, r3, r2
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800f9d2:	1b7d      	subs	r5, r7, r5
        memcpy(app_buf, ff_buf, lin_bytes);
 800f9d4:	4640      	mov	r0, r8
 800f9d6:	fa1f f983 	uxth.w	r9, r3
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800f9da:	442c      	add	r4, r5
        memcpy(app_buf, ff_buf, lin_bytes);
 800f9dc:	464a      	mov	r2, r9
 800f9de:	f002 fc95 	bl	801230c <memcpy>
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800f9e2:	fb14 f20a 	smulbb	r2, r4, sl
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800f9e6:	eb08 0009 	add.w	r0, r8, r9
 800f9ea:	6831      	ldr	r1, [r6, #0]
 800f9ec:	b292      	uxth	r2, r2
 800f9ee:	f002 fc8d 	bl	801230c <memcpy>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f9f2:	8972      	ldrh	r2, [r6, #10]
 800f9f4:	88b5      	ldrh	r5, [r6, #4]
 800f9f6:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f9f8:	19d3      	adds	r3, r2, r7
 800f9fa:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d916      	bls.n	800fa2e <tu_fifo_read_n+0xae>
 800fa00:	006a      	lsls	r2, r5, #1
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fa02:	1a9b      	subs	r3, r3, r2
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}
 800fa04:	4638      	mov	r0, r7
 800fa06:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fa08:	8173      	strh	r3, [r6, #10]
}
 800fa0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(app_buf, ff_buf, n*f->item_size);
 800fa0e:	fb07 f202 	mul.w	r2, r7, r2
 800fa12:	4640      	mov	r0, r8
 800fa14:	f002 fc7a 	bl	801230c <memcpy>
 800fa18:	e7eb      	b.n	800f9f2 <tu_fifo_read_n+0x72>
  if ( wr_idx >= f->depth )
 800fa1a:	42ab      	cmp	r3, r5
  f->rd_idx = rd_idx;
 800fa1c:	462f      	mov	r7, r5
    rd_idx = wr_idx - f->depth;
 800fa1e:	bf2c      	ite	cs
 800fa20:	1b5b      	subcs	r3, r3, r5
    rd_idx = wr_idx + f->depth;
 800fa22:	195b      	addcc	r3, r3, r5
 800fa24:	b29c      	uxth	r4, r3
  f->rd_idx = rd_idx;
 800fa26:	8174      	strh	r4, [r6, #10]
    cnt = f->depth;
 800fa28:	e7bb      	b.n	800f9a2 <tu_fifo_read_n+0x22>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fa2a:	8973      	ldrh	r3, [r6, #10]
 800fa2c:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fa2e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 800fa32:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800fa36:	dae4      	bge.n	800fa02 <tu_fifo_read_n+0x82>
}
 800fa38:	4638      	mov	r0, r7
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fa3a:	8173      	strh	r3, [r6, #10]
}
 800fa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fa40:	ebc4 0745 	rsb	r7, r4, r5, lsl #1
 800fa44:	441f      	add	r7, r3
 800fa46:	b2bf      	uxth	r7, r7
 800fa48:	e7a7      	b.n	800f99a <tu_fifo_read_n+0x1a>
 800fa4a:	bf00      	nop

0800fa4c <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	460f      	mov	r7, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fa52:	8901      	ldrh	r1, [r0, #8]
 800fa54:	8943      	ldrh	r3, [r0, #10]
{
 800fa56:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fa58:	b289      	uxth	r1, r1
{
 800fa5a:	b083      	sub	sp, #12
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fa5c:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800fa5e:	8880      	ldrh	r0, [r0, #4]
  if (wr_idx >= rd_idx)
 800fa60:	4299      	cmp	r1, r3
 800fa62:	f0c0 80a2 	bcc.w	800fbaa <tu_fifo_read_n_const_addr_full_words+0x15e>
    return (uint16_t) (wr_idx - rd_idx);
 800fa66:	1acd      	subs	r5, r1, r3
 800fa68:	ea4f 0940 	mov.w	r9, r0, lsl #1
 800fa6c:	b2ad      	uxth	r5, r5
  if ( cnt == 0 ) return 0;
 800fa6e:	2d00      	cmp	r5, #0
 800fa70:	f000 8092 	beq.w	800fb98 <tu_fifo_read_n_const_addr_full_words+0x14c>
  if ( cnt > f->depth )
 800fa74:	42a8      	cmp	r0, r5
 800fa76:	f0c0 8087 	bcc.w	800fb88 <tu_fifo_read_n_const_addr_full_words+0x13c>
  if ( cnt < n ) n = cnt;
 800fa7a:	4295      	cmp	r5, r2
 800fa7c:	bf28      	it	cs
 800fa7e:	4615      	movcs	r5, r2
  while ( idx >= depth ) idx -= depth;
 800fa80:	4298      	cmp	r0, r3
 800fa82:	d803      	bhi.n	800fa8c <tu_fifo_read_n_const_addr_full_words+0x40>
 800fa84:	1a1b      	subs	r3, r3, r0
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	4298      	cmp	r0, r3
 800fa8a:	d9fb      	bls.n	800fa84 <tu_fifo_read_n_const_addr_full_words+0x38>
  uint16_t const lin_count = f->depth - rd_ptr;
 800fa8c:	eba0 0e03 	sub.w	lr, r0, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fa90:	f8b6 a006 	ldrh.w	sl, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fa94:	f8d6 8000 	ldr.w	r8, [r6]
  uint16_t const lin_count = f->depth - rd_ptr;
 800fa98:	fa1f fe8e 	uxth.w	lr, lr
  uint16_t lin_bytes = lin_count * f->item_size;
 800fa9c:	f3ca 0c0e 	ubfx	ip, sl, #0, #15
      if ( n <= lin_count )
 800faa0:	4575      	cmp	r5, lr
  uint16_t lin_bytes = lin_count * f->item_size;
 800faa2:	46e2      	mov	sl, ip
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800faa4:	fb0c 8c03 	mla	ip, ip, r3, r8
      if ( n <= lin_count )
 800faa8:	d81e      	bhi.n	800fae8 <tu_fifo_read_n_const_addr_full_words+0x9c>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800faaa:	fb15 f20a 	smulbb	r2, r5, sl
  uint16_t full_words = len >> 2;
 800faae:	f3c2 018d 	ubfx	r1, r2, #2, #14
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800fab2:	b292      	uxth	r2, r2
  while(full_words--)
 800fab4:	2900      	cmp	r1, #0
 800fab6:	d07f      	beq.n	800fbb8 <tu_fifo_read_n_const_addr_full_words+0x16c>
 800fab8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800fabc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fac0:	4561      	cmp	r1, ip
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fac2:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800fac4:	d1fa      	bne.n	800fabc <tu_fifo_read_n_const_addr_full_words+0x70>
  if ( bytes_rem )
 800fac6:	f012 0203 	ands.w	r2, r2, #3
 800faca:	d155      	bne.n	800fb78 <tu_fifo_read_n_const_addr_full_words+0x12c>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800facc:	8972      	ldrh	r2, [r6, #10]
 800face:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fad0:	1953      	adds	r3, r2, r5
 800fad2:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d961      	bls.n	800fb9c <tu_fifo_read_n_const_addr_full_words+0x150>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fad8:	eba3 0309 	sub.w	r3, r3, r9
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 800fadc:	4628      	mov	r0, r5
 800fade:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fae0:	8173      	strh	r3, [r6, #10]
}
 800fae2:	b003      	add	sp, #12
 800fae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t lin_bytes = lin_count * f->item_size;
 800fae8:	fb1e fe0a 	smulbb	lr, lr, sl
 800faec:	fa1f fe8e 	uxth.w	lr, lr
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800faf0:	f02e 0203 	bic.w	r2, lr, #3
 800faf4:	b291      	uxth	r1, r2
  while(full_words--)
 800faf6:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 800fafa:	b13a      	cbz	r2, 800fb0c <tu_fifo_read_n_const_addr_full_words+0xc0>
 800fafc:	eb0c 0b8b 	add.w	fp, ip, fp, lsl #2
 800fb00:	4662      	mov	r2, ip
 800fb02:	f852 4b04 	ldr.w	r4, [r2], #4
 800fb06:	4593      	cmp	fp, r2
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fb08:	603c      	str	r4, [r7, #0]
  while(full_words--)
 800fb0a:	d1fa      	bne.n	800fb02 <tu_fifo_read_n_const_addr_full_words+0xb6>
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fb0c:	1a2a      	subs	r2, r5, r0
        if (rem > 0)
 800fb0e:	f01e 0b03 	ands.w	fp, lr, #3
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fb12:	eb03 0402 	add.w	r4, r3, r2
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fb16:	fb14 f40a 	smulbb	r4, r4, sl
 800fb1a:	b2a4      	uxth	r4, r4
        if (rem > 0)
 800fb1c:	d01e      	beq.n	800fb5c <tu_fifo_read_n_const_addr_full_words+0x110>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fb1e:	f1cb 0a04 	rsb	sl, fp, #4
          uint32_t tmp32=0;
 800fb22:	2300      	movs	r3, #0
          while(rem--) *dst_u8++ = *ff_buf++;
 800fb24:	465a      	mov	r2, fp
 800fb26:	4461      	add	r1, ip
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fb28:	fa1f fa8a 	uxth.w	sl, sl
 800fb2c:	a801      	add	r0, sp, #4
          uint32_t tmp32=0;
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	45a2      	cmp	sl, r4
 800fb32:	bf28      	it	cs
 800fb34:	46a2      	movcs	sl, r4
          while(rem--) *dst_u8++ = *ff_buf++;
 800fb36:	f002 fbe9 	bl	801230c <memcpy>
 800fb3a:	ab01      	add	r3, sp, #4
          wrap_bytes -= remrem;
 800fb3c:	eba4 040a 	sub.w	r4, r4, sl
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fb40:	fa5f f28a 	uxtb.w	r2, sl
          while(rem--) *dst_u8++ = *ff_buf++;
 800fb44:	eb03 000b 	add.w	r0, r3, fp
          wrap_bytes -= remrem;
 800fb48:	b2a4      	uxth	r4, r4
          while(remrem--) *dst_u8++ = *ff_buf++;
 800fb4a:	f1ba 0f00 	cmp.w	sl, #0
 800fb4e:	d003      	beq.n	800fb58 <tu_fifo_read_n_const_addr_full_words+0x10c>
 800fb50:	4641      	mov	r1, r8
 800fb52:	4490      	add	r8, r2
 800fb54:	f002 fbda 	bl	801230c <memcpy>
          *reg_tx = tmp32;
 800fb58:	9b01      	ldr	r3, [sp, #4]
 800fb5a:	603b      	str	r3, [r7, #0]
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 800fb5c:	2c00      	cmp	r4, #0
 800fb5e:	d0b5      	beq.n	800facc <tu_fifo_read_n_const_addr_full_words+0x80>
  while(full_words--)
 800fb60:	08a1      	lsrs	r1, r4, #2
 800fb62:	d02b      	beq.n	800fbbc <tu_fifo_read_n_const_addr_full_words+0x170>
 800fb64:	eb08 0181 	add.w	r1, r8, r1, lsl #2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800fb68:	f858 3b04 	ldr.w	r3, [r8], #4
 800fb6c:	4588      	cmp	r8, r1
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fb6e:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800fb70:	d1fa      	bne.n	800fb68 <tu_fifo_read_n_const_addr_full_words+0x11c>
  if ( bytes_rem )
 800fb72:	f014 0203 	ands.w	r2, r4, #3
 800fb76:	d0a9      	beq.n	800facc <tu_fifo_read_n_const_addr_full_words+0x80>
    uint32_t tmp32 = 0;
 800fb78:	2300      	movs	r3, #0
    memcpy(&tmp32, ff_buf, bytes_rem);
 800fb7a:	a801      	add	r0, sp, #4
    uint32_t tmp32 = 0;
 800fb7c:	9301      	str	r3, [sp, #4]
    memcpy(&tmp32, ff_buf, bytes_rem);
 800fb7e:	f002 fbc5 	bl	801230c <memcpy>
    *reg_tx = tmp32;
 800fb82:	9b01      	ldr	r3, [sp, #4]
 800fb84:	603b      	str	r3, [r7, #0]
 800fb86:	e7a1      	b.n	800facc <tu_fifo_read_n_const_addr_full_words+0x80>
  if ( wr_idx >= f->depth )
 800fb88:	4281      	cmp	r1, r0
  f->rd_idx = rd_idx;
 800fb8a:	4605      	mov	r5, r0
    rd_idx = wr_idx - f->depth;
 800fb8c:	bf2c      	ite	cs
 800fb8e:	1a09      	subcs	r1, r1, r0
    rd_idx = wr_idx + f->depth;
 800fb90:	1809      	addcc	r1, r1, r0
 800fb92:	b28b      	uxth	r3, r1
  f->rd_idx = rd_idx;
 800fb94:	8173      	strh	r3, [r6, #10]
    cnt = f->depth;
 800fb96:	e770      	b.n	800fa7a <tu_fifo_read_n_const_addr_full_words+0x2e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fb98:	8973      	ldrh	r3, [r6, #10]
 800fb9a:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fb9c:	454b      	cmp	r3, r9
 800fb9e:	da9b      	bge.n	800fad8 <tu_fifo_read_n_const_addr_full_words+0x8c>
}
 800fba0:	4628      	mov	r0, r5
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fba2:	8173      	strh	r3, [r6, #10]
}
 800fba4:	b003      	add	sp, #12
 800fba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fbaa:	ebc3 0540 	rsb	r5, r3, r0, lsl #1
 800fbae:	ea4f 0940 	mov.w	r9, r0, lsl #1
 800fbb2:	440d      	add	r5, r1
 800fbb4:	b2ad      	uxth	r5, r5
 800fbb6:	e75a      	b.n	800fa6e <tu_fifo_read_n_const_addr_full_words+0x22>
  while(full_words--)
 800fbb8:	4661      	mov	r1, ip
 800fbba:	e784      	b.n	800fac6 <tu_fifo_read_n_const_addr_full_words+0x7a>
 800fbbc:	4641      	mov	r1, r8
 800fbbe:	e7d8      	b.n	800fb72 <tu_fifo_read_n_const_addr_full_words+0x126>

0800fbc0 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800fbc0:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 800fbc2:	8905      	ldrh	r5, [r0, #8]
{
 800fbc4:	4604      	mov	r4, r0
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800fbc6:	8903      	ldrh	r3, [r0, #8]
 800fbc8:	8940      	ldrh	r0, [r0, #10]
  uint16_t const wr_idx = f->wr_idx;
 800fbca:	b2ad      	uxth	r5, r5
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	88a2      	ldrh	r2, [r4, #4]
 800fbd0:	b280      	uxth	r0, r0
  if (wr_idx >= rd_idx)
 800fbd2:	4283      	cmp	r3, r0
 800fbd4:	d320      	bcc.n	800fc18 <tu_fifo_write+0x58>
    return (uint16_t) (wr_idx - rd_idx);
 800fbd6:	1a1b      	subs	r3, r3, r0
 800fbd8:	b29b      	uxth	r3, r3

  if ( tu_fifo_full(f) && !f->overwritable )
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d802      	bhi.n	800fbe4 <tu_fifo_write+0x24>
 800fbde:	79e0      	ldrb	r0, [r4, #7]
 800fbe0:	09c0      	lsrs	r0, r0, #7
 800fbe2:	d018      	beq.n	800fc16 <tu_fifo_write+0x56>
  while ( idx >= depth ) idx -= depth;
 800fbe4:	4295      	cmp	r5, r2
 800fbe6:	462b      	mov	r3, r5
 800fbe8:	d303      	bcc.n	800fbf2 <tu_fifo_write+0x32>
 800fbea:	1a9b      	subs	r3, r3, r2
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d2fb      	bcs.n	800fbea <tu_fifo_write+0x2a>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800fbf2:	88e2      	ldrh	r2, [r4, #6]
 800fbf4:	6820      	ldr	r0, [r4, #0]
 800fbf6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fbfa:	fb02 0003 	mla	r0, r2, r3, r0
 800fbfe:	f002 fb85 	bl	801230c <memcpy>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fc02:	1c6b      	adds	r3, r5, #1

    // Write data
    _ff_push(f, data, wr_ptr);

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800fc04:	88a2      	ldrh	r2, [r4, #4]
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fc06:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fc08:	0051      	lsls	r1, r2, #1
 800fc0a:	429d      	cmp	r5, r3
 800fc0c:	d909      	bls.n	800fc22 <tu_fifo_write+0x62>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fc0e:	1a5b      	subs	r3, r3, r1
 800fc10:	b29b      	uxth	r3, r3

    ret = true;
 800fc12:	2001      	movs	r0, #1
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800fc14:	8123      	strh	r3, [r4, #8]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 800fc16:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fc18:	ebc0 0042 	rsb	r0, r0, r2, lsl #1
 800fc1c:	4403      	add	r3, r0
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	e7db      	b.n	800fbda <tu_fifo_write+0x1a>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fc22:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800fc26:	dbf4      	blt.n	800fc12 <tu_fifo_write+0x52>
 800fc28:	e7f1      	b.n	800fc0e <tu_fifo_write+0x4e>
 800fc2a:	bf00      	nop

0800fc2c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800fc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc30:	b083      	sub	sp, #12
  if ( n == 0 ) return 0;
 800fc32:	2a00      	cmp	r2, #0
 800fc34:	d043      	beq.n	800fcbe <tu_fifo_write_n+0x92>
  uint16_t wr_idx = f->wr_idx;
 800fc36:	8907      	ldrh	r7, [r0, #8]
 800fc38:	4606      	mov	r6, r0
  uint16_t rd_idx = f->rd_idx;
 800fc3a:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800fc3c:	79c0      	ldrb	r0, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800fc3e:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800fc40:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800fc42:	09c0      	lsrs	r0, r0, #7
 800fc44:	d141      	bne.n	800fcca <tu_fifo_write_n+0x9e>
  if (wr_idx >= rd_idx)
 800fc46:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800fc48:	88b5      	ldrh	r5, [r6, #4]
  if (wr_idx >= rd_idx)
 800fc4a:	d254      	bcs.n	800fcf6 <tu_fifo_write_n+0xca>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fc4c:	ebc3 0345 	rsb	r3, r3, r5, lsl #1
 800fc50:	443b      	add	r3, r7
 800fc52:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fc54:	429d      	cmp	r5, r3
 800fc56:	d932      	bls.n	800fcbe <tu_fifo_write_n+0x92>
 800fc58:	1aeb      	subs	r3, r5, r3
 800fc5a:	f8b6 a006 	ldrh.w	sl, [r6, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	4293      	cmp	r3, r2
 800fc62:	bf28      	it	cs
 800fc64:	4613      	movcs	r3, r2
 800fc66:	4698      	mov	r8, r3
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fc68:	eb08 0907 	add.w	r9, r8, r7
 800fc6c:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800fc70:	42bd      	cmp	r5, r7
 800fc72:	463c      	mov	r4, r7
 800fc74:	d803      	bhi.n	800fc7e <tu_fifo_write_n+0x52>
 800fc76:	1b64      	subs	r4, r4, r5
 800fc78:	b2a4      	uxth	r4, r4
 800fc7a:	42ac      	cmp	r4, r5
 800fc7c:	d2fb      	bcs.n	800fc76 <tu_fifo_write_n+0x4a>
  uint16_t const lin_count = f->depth - wr_ptr;
 800fc7e:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800fc80:	f3ca 020e 	ubfx	r2, sl, #0, #15
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fc84:	6830      	ldr	r0, [r6, #0]
  uint16_t const lin_count = f->depth - wr_ptr;
 800fc86:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fc88:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fc8a:	fb02 0004 	mla	r0, r2, r4, r0
      if(n <= lin_count)
 800fc8e:	4543      	cmp	r3, r8
 800fc90:	d342      	bcc.n	800fd18 <tu_fifo_write_n+0xec>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800fc92:	fb02 f208 	mul.w	r2, r2, r8
 800fc96:	f002 fb39 	bl	801230c <memcpy>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fc9a:	88b2      	ldrh	r2, [r6, #4]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fc9c:	454f      	cmp	r7, r9
 800fc9e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800fca2:	d802      	bhi.n	800fcaa <tu_fifo_write_n+0x7e>
 800fca4:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
 800fca8:	db03      	blt.n	800fcb2 <tu_fifo_write_n+0x86>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fcaa:	eba9 0303 	sub.w	r3, r9, r3
 800fcae:	fa1f f983 	uxth.w	r9, r3
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 800fcb2:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fcb4:	f8a6 9008 	strh.w	r9, [r6, #8]
}
 800fcb8:	b003      	add	sp, #12
 800fcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 800fcbe:	f04f 0800 	mov.w	r8, #0
}
 800fcc2:	4640      	mov	r0, r8
 800fcc4:	b003      	add	sp, #12
 800fcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 800fcca:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800fcce:	4542      	cmp	r2, r8
 800fcd0:	d214      	bcs.n	800fcfc <tu_fifo_write_n+0xd0>
  if (wr_idx >= rd_idx)
 800fcd2:	429f      	cmp	r7, r3
 800fcd4:	d34e      	bcc.n	800fd74 <tu_fifo_write_n+0x148>
    return (uint16_t) (wr_idx - rd_idx);
 800fcd6:	1af8      	subs	r0, r7, r3
 800fcd8:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800fcdc:	b280      	uxth	r0, r0
      if (overflowable_count + n >= 2*f->depth)
 800fcde:	4410      	add	r0, r2
 800fce0:	42a0      	cmp	r0, r4
 800fce2:	da2d      	bge.n	800fd40 <tu_fifo_write_n+0x114>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fce4:	eb02 0907 	add.w	r9, r2, r7
 800fce8:	4645      	mov	r5, r8
 800fcea:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fcee:	4690      	mov	r8, r2
 800fcf0:	fa1f f989 	uxth.w	r9, r9
 800fcf4:	e7bc      	b.n	800fc70 <tu_fifo_write_n+0x44>
    return (uint16_t) (wr_idx - rd_idx);
 800fcf6:	1afb      	subs	r3, r7, r3
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	e7ab      	b.n	800fc54 <tu_fifo_write_n+0x28>
        buf8 += (n - f->depth) * f->item_size;
 800fcfc:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fd00:	eba2 0208 	sub.w	r2, r2, r8
 800fd04:	f3ca 000e 	ubfx	r0, sl, #0, #15
 800fd08:	fb00 1102 	mla	r1, r0, r2, r1
  if (n)
 800fd0c:	f1b8 0f00 	cmp.w	r8, #0
 800fd10:	d0d7      	beq.n	800fcc2 <tu_fifo_write_n+0x96>
  uint16_t rd_idx = f->rd_idx;
 800fd12:	461f      	mov	r7, r3
 800fd14:	4645      	mov	r5, r8
 800fd16:	e7a7      	b.n	800fc68 <tu_fifo_write_n+0x3c>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fd18:	fb13 f302 	smulbb	r3, r3, r2
  uint16_t const wrap_count = n - lin_count;
 800fd1c:	eba8 0505 	sub.w	r5, r8, r5
        memcpy(ff_buf, app_buf, lin_bytes);
 800fd20:	9101      	str	r1, [sp, #4]
 800fd22:	fa1f fb83 	uxth.w	fp, r3
 800fd26:	465a      	mov	r2, fp
 800fd28:	f002 faf0 	bl	801230c <memcpy>
  uint16_t const wrap_count = n - lin_count;
 800fd2c:	1962      	adds	r2, r4, r5
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fd2e:	9901      	ldr	r1, [sp, #4]
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fd30:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fd34:	6830      	ldr	r0, [r6, #0]
 800fd36:	4459      	add	r1, fp
 800fd38:	b292      	uxth	r2, r2
 800fd3a:	f002 fae7 	bl	801230c <memcpy>
 800fd3e:	e7ac      	b.n	800fc9a <tu_fifo_write_n+0x6e>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800fd40:	eb03 0908 	add.w	r9, r3, r8
 800fd44:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fd48:	eba9 0702 	sub.w	r7, r9, r2
 800fd4c:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fd4e:	42bb      	cmp	r3, r7
 800fd50:	d806      	bhi.n	800fd60 <tu_fifo_write_n+0x134>
 800fd52:	42bc      	cmp	r4, r7
 800fd54:	dd04      	ble.n	800fd60 <tu_fifo_write_n+0x134>
 800fd56:	4645      	mov	r5, r8
 800fd58:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fd5c:	4690      	mov	r8, r2
 800fd5e:	e787      	b.n	800fc70 <tu_fifo_write_n+0x44>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fd60:	1b3c      	subs	r4, r7, r4
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fd62:	4645      	mov	r5, r8
 800fd64:	4690      	mov	r8, r2
 800fd66:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fd6a:	b2a7      	uxth	r7, r4
 800fd6c:	443a      	add	r2, r7
 800fd6e:	fa1f f982 	uxth.w	r9, r2
 800fd72:	e77d      	b.n	800fc70 <tu_fifo_write_n+0x44>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fd74:	ebc3 0048 	rsb	r0, r3, r8, lsl #1
 800fd78:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800fd7c:	4438      	add	r0, r7
 800fd7e:	b280      	uxth	r0, r0
 800fd80:	e7ad      	b.n	800fcde <tu_fifo_write_n+0xb2>
 800fd82:	bf00      	nop

0800fd84 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800fd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd88:	b085      	sub	sp, #20
  if ( n == 0 ) return 0;
 800fd8a:	2a00      	cmp	r2, #0
 800fd8c:	d056      	beq.n	800fe3c <tu_fifo_write_n_const_addr_full_words+0xb8>
 800fd8e:	460e      	mov	r6, r1
  if ( !f->overwritable )
 800fd90:	79c1      	ldrb	r1, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800fd92:	8907      	ldrh	r7, [r0, #8]
 800fd94:	4605      	mov	r5, r0
  uint16_t rd_idx = f->rd_idx;
 800fd96:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800fd98:	09c9      	lsrs	r1, r1, #7
  uint16_t wr_idx = f->wr_idx;
 800fd9a:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800fd9c:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800fd9e:	d153      	bne.n	800fe48 <tu_fifo_write_n_const_addr_full_words+0xc4>
  if (wr_idx >= rd_idx)
 800fda0:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800fda2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  if (wr_idx >= rd_idx)
 800fda6:	d263      	bcs.n	800fe70 <tu_fifo_write_n_const_addr_full_words+0xec>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fda8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 800fdac:	443b      	add	r3, r7
 800fdae:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fdb0:	459c      	cmp	ip, r3
 800fdb2:	d943      	bls.n	800fe3c <tu_fifo_write_n_const_addr_full_words+0xb8>
 800fdb4:	ebac 0303 	sub.w	r3, ip, r3
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	bf28      	it	cs
 800fdbe:	4613      	movcs	r3, r2
 800fdc0:	4698      	mov	r8, r3
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fdc2:	eb08 0907 	add.w	r9, r8, r7
 800fdc6:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800fdca:	45bc      	cmp	ip, r7
 800fdcc:	463b      	mov	r3, r7
 800fdce:	d804      	bhi.n	800fdda <tu_fifo_write_n_const_addr_full_words+0x56>
 800fdd0:	eba3 030c 	sub.w	r3, r3, ip
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	4563      	cmp	r3, ip
 800fdd8:	d2fa      	bcs.n	800fdd0 <tu_fifo_write_n_const_addr_full_words+0x4c>
  uint16_t const lin_count = f->depth - wr_ptr;
 800fdda:	ebac 0003 	sub.w	r0, ip, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fdde:	88e9      	ldrh	r1, [r5, #6]
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fde0:	f8d5 a000 	ldr.w	sl, [r5]
  uint16_t const lin_count = f->depth - wr_ptr;
 800fde4:	b280      	uxth	r0, r0
  uint16_t lin_bytes = lin_count * f->item_size;
 800fde6:	f3c1 0e0e 	ubfx	lr, r1, #0, #15
      if(n <= lin_count)
 800fdea:	4540      	cmp	r0, r8
  uint16_t lin_bytes = lin_count * f->item_size;
 800fdec:	4671      	mov	r1, lr
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fdee:	fb0e ae03 	mla	lr, lr, r3, sl
      if(n <= lin_count)
 800fdf2:	d346      	bcc.n	800fe82 <tu_fifo_write_n_const_addr_full_words+0xfe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800fdf4:	fb11 f208 	smulbb	r2, r1, r8
  uint16_t full_words = len >> 2;
 800fdf8:	f3c2 008d 	ubfx	r0, r2, #2, #14
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800fdfc:	b292      	uxth	r2, r2
  while(full_words--)
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	f000 80ac 	beq.w	800ff5c <tu_fifo_write_n_const_addr_full_words+0x1d8>
 800fe04:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 800fe08:	6833      	ldr	r3, [r6, #0]

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800fe0a:	f84e 3b04 	str.w	r3, [lr], #4
  while(full_words--)
 800fe0e:	4570      	cmp	r0, lr
 800fe10:	d1fa      	bne.n	800fe08 <tu_fifo_write_n_const_addr_full_words+0x84>
  if ( bytes_rem )
 800fe12:	f012 0203 	ands.w	r2, r2, #3
 800fe16:	f040 8099 	bne.w	800ff4c <tu_fifo_write_n_const_addr_full_words+0x1c8>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fe1a:	45b9      	cmp	r9, r7
 800fe1c:	ea4f 034c 	mov.w	r3, ip, lsl #1
 800fe20:	d302      	bcc.n	800fe28 <tu_fifo_write_n_const_addr_full_words+0xa4>
 800fe22:	ebb9 0f4c 	cmp.w	r9, ip, lsl #1
 800fe26:	db03      	blt.n	800fe30 <tu_fifo_write_n_const_addr_full_words+0xac>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fe28:	eba9 0303 	sub.w	r3, r9, r3
 800fe2c:	fa1f f983 	uxth.w	r9, r3
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 800fe30:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fe32:	f8a5 9008 	strh.w	r9, [r5, #8]
}
 800fe36:	b005      	add	sp, #20
 800fe38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 800fe3c:	f04f 0800 	mov.w	r8, #0
}
 800fe40:	4640      	mov	r0, r8
 800fe42:	b005      	add	sp, #20
 800fe44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 800fe48:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800fe4c:	4542      	cmp	r2, r8
 800fe4e:	d212      	bcs.n	800fe76 <tu_fifo_write_n_const_addr_full_words+0xf2>
  if (wr_idx >= rd_idx)
 800fe50:	429f      	cmp	r7, r3
 800fe52:	d368      	bcc.n	800ff26 <tu_fifo_write_n_const_addr_full_words+0x1a2>
    return (uint16_t) (wr_idx - rd_idx);
 800fe54:	1af9      	subs	r1, r7, r3
 800fe56:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800fe5a:	b289      	uxth	r1, r1
      if (overflowable_count + n >= 2*f->depth)
 800fe5c:	4411      	add	r1, r2
 800fe5e:	4281      	cmp	r1, r0
 800fe60:	da4b      	bge.n	800fefa <tu_fifo_write_n_const_addr_full_words+0x176>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fe62:	eb02 0907 	add.w	r9, r2, r7
 800fe66:	46c4      	mov	ip, r8
 800fe68:	4690      	mov	r8, r2
 800fe6a:	fa1f f989 	uxth.w	r9, r9
 800fe6e:	e7ac      	b.n	800fdca <tu_fifo_write_n_const_addr_full_words+0x46>
    return (uint16_t) (wr_idx - rd_idx);
 800fe70:	1afb      	subs	r3, r7, r3
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	e79c      	b.n	800fdb0 <tu_fifo_write_n_const_addr_full_words+0x2c>
  if (n)
 800fe76:	f1b8 0f00 	cmp.w	r8, #0
 800fe7a:	d0e1      	beq.n	800fe40 <tu_fifo_write_n_const_addr_full_words+0xbc>
 800fe7c:	46c4      	mov	ip, r8
  uint16_t rd_idx = f->rd_idx;
 800fe7e:	461f      	mov	r7, r3
 800fe80:	e79f      	b.n	800fdc2 <tu_fifo_write_n_const_addr_full_words+0x3e>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fe82:	fb10 f001 	smulbb	r0, r0, r1
 800fe86:	b280      	uxth	r0, r0
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800fe88:	f020 0203 	bic.w	r2, r0, #3
 800fe8c:	b294      	uxth	r4, r2
  while(full_words--)
 800fe8e:	ea4f 0b92 	mov.w	fp, r2, lsr #2
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800fe92:	9401      	str	r4, [sp, #4]
  while(full_words--)
 800fe94:	b13a      	cbz	r2, 800fea6 <tu_fifo_write_n_const_addr_full_words+0x122>
 800fe96:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 800fe9a:	4672      	mov	r2, lr
    tu_unaligned_write32(ff_buf, *reg_rx);
 800fe9c:	6834      	ldr	r4, [r6, #0]
 800fe9e:	f842 4b04 	str.w	r4, [r2], #4
  while(full_words--)
 800fea2:	4593      	cmp	fp, r2
 800fea4:	d1fa      	bne.n	800fe9c <tu_fifo_write_n_const_addr_full_words+0x118>
  uint16_t const wrap_count = n - lin_count;
 800fea6:	eba8 040c 	sub.w	r4, r8, ip
        if (rem > 0)
 800feaa:	f010 0b03 	ands.w	fp, r0, #3
  uint16_t const wrap_count = n - lin_count;
 800feae:	441c      	add	r4, r3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800feb0:	fb14 f401 	smulbb	r4, r4, r1
 800feb4:	b2a4      	uxth	r4, r4
        if (rem > 0)
 800feb6:	d01c      	beq.n	800fef2 <tu_fifo_write_n_const_addr_full_words+0x16e>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800feb8:	f1cb 0304 	rsb	r3, fp, #4
          while(rem--) *ff_buf++ = *src_u8++;
 800febc:	9801      	ldr	r0, [sp, #4]
          uint32_t tmp32 = *rx_fifo;
 800febe:	6832      	ldr	r2, [r6, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 800fec0:	a903      	add	r1, sp, #12
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	4470      	add	r0, lr
          uint32_t tmp32 = *rx_fifo;
 800fec6:	9203      	str	r2, [sp, #12]
          while(rem--) *ff_buf++ = *src_u8++;
 800fec8:	465a      	mov	r2, fp
 800feca:	42a3      	cmp	r3, r4
 800fecc:	bf28      	it	cs
 800fece:	4623      	movcs	r3, r4
          wrap_bytes -= remrem;
 800fed0:	1ae4      	subs	r4, r4, r3
 800fed2:	9301      	str	r3, [sp, #4]
          while(rem--) *ff_buf++ = *src_u8++;
 800fed4:	f002 fa1a 	bl	801230c <memcpy>
 800fed8:	ab03      	add	r3, sp, #12
          wrap_bytes -= remrem;
 800feda:	b2a4      	uxth	r4, r4
          ff_buf = f->buffer;
 800fedc:	f8d5 a000 	ldr.w	sl, [r5]
          while(rem--) *ff_buf++ = *src_u8++;
 800fee0:	eb03 010b 	add.w	r1, r3, fp
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fee4:	9b01      	ldr	r3, [sp, #4]
 800fee6:	b2da      	uxtb	r2, r3
          while(remrem--) *ff_buf++ = *src_u8++;
 800fee8:	b11b      	cbz	r3, 800fef2 <tu_fifo_write_n_const_addr_full_words+0x16e>
 800feea:	4650      	mov	r0, sl
 800feec:	4492      	add	sl, r2
 800feee:	f002 fa0d 	bl	801230c <memcpy>
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800fef2:	b9fc      	cbnz	r4, 800ff34 <tu_fifo_write_n_const_addr_full_words+0x1b0>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fef4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800fef8:	e78f      	b.n	800fe1a <tu_fifo_write_n_const_addr_full_words+0x96>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800fefa:	eb03 0908 	add.w	r9, r3, r8
 800fefe:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 800ff02:	eba9 0702 	sub.w	r7, r9, r2
 800ff06:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800ff08:	42bb      	cmp	r3, r7
 800ff0a:	d804      	bhi.n	800ff16 <tu_fifo_write_n_const_addr_full_words+0x192>
 800ff0c:	42b8      	cmp	r0, r7
 800ff0e:	dd02      	ble.n	800ff16 <tu_fifo_write_n_const_addr_full_words+0x192>
 800ff10:	46c4      	mov	ip, r8
 800ff12:	4690      	mov	r8, r2
 800ff14:	e759      	b.n	800fdca <tu_fifo_write_n_const_addr_full_words+0x46>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800ff16:	1a38      	subs	r0, r7, r0
  uint16_t new_idx = (uint16_t) (idx + offset);
 800ff18:	46c4      	mov	ip, r8
 800ff1a:	4690      	mov	r8, r2
 800ff1c:	b287      	uxth	r7, r0
 800ff1e:	443a      	add	r2, r7
 800ff20:	fa1f f982 	uxth.w	r9, r2
 800ff24:	e751      	b.n	800fdca <tu_fifo_write_n_const_addr_full_words+0x46>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800ff26:	ebc3 0148 	rsb	r1, r3, r8, lsl #1
 800ff2a:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800ff2e:	4439      	add	r1, r7
 800ff30:	b289      	uxth	r1, r1
 800ff32:	e793      	b.n	800fe5c <tu_fifo_write_n_const_addr_full_words+0xd8>
  while(full_words--)
 800ff34:	08a0      	lsrs	r0, r4, #2
 800ff36:	d00f      	beq.n	800ff58 <tu_fifo_write_n_const_addr_full_words+0x1d4>
 800ff38:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 800ff3c:	6833      	ldr	r3, [r6, #0]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800ff3e:	f84a 3b04 	str.w	r3, [sl], #4
  while(full_words--)
 800ff42:	4582      	cmp	sl, r0
 800ff44:	d1fa      	bne.n	800ff3c <tu_fifo_write_n_const_addr_full_words+0x1b8>
  if ( bytes_rem )
 800ff46:	f014 0203 	ands.w	r2, r4, #3
 800ff4a:	d0d3      	beq.n	800fef4 <tu_fifo_write_n_const_addr_full_words+0x170>
    uint32_t tmp32 = *reg_rx;
 800ff4c:	6833      	ldr	r3, [r6, #0]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800ff4e:	a903      	add	r1, sp, #12
    uint32_t tmp32 = *reg_rx;
 800ff50:	9303      	str	r3, [sp, #12]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800ff52:	f002 f9db 	bl	801230c <memcpy>
 800ff56:	e7cd      	b.n	800fef4 <tu_fifo_write_n_const_addr_full_words+0x170>
  while(full_words--)
 800ff58:	4650      	mov	r0, sl
 800ff5a:	e7f4      	b.n	800ff46 <tu_fifo_write_n_const_addr_full_words+0x1c2>
 800ff5c:	4670      	mov	r0, lr
 800ff5e:	e758      	b.n	800fe12 <tu_fifo_write_n_const_addr_full_words+0x8e>

0800ff60 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 800ff60:	4603      	mov	r3, r0
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800ff62:	2200      	movs	r2, #0
  f->wr_idx = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 800ff64:	2001      	movs	r0, #1
  f->rd_idx = 0;
 800ff66:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800ff68:	811a      	strh	r2, [r3, #8]
}
 800ff6a:	4770      	bx	lr

0800ff6c <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 800ff6c:	4603      	mov	r3, r0

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
 800ff6e:	2001      	movs	r0, #1
  f->overwritable = overwritable;
 800ff70:	79da      	ldrb	r2, [r3, #7]
 800ff72:	f361 12c7 	bfi	r2, r1, #7, #1
 800ff76:	71da      	strb	r2, [r3, #7]
}
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop

0800ff7c <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 800ff7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff80:	4b29      	ldr	r3, [pc, #164]	; (8010028 <configuration_reset+0xac>)
 800ff82:	4607      	mov	r7, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800ff84:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8010038 <configuration_reset+0xbc>
 800ff88:	f898 2000 	ldrb.w	r2, [r8]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d03a      	beq.n	8010006 <configuration_reset+0x8a>
 800ff90:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800ff92:	4d26      	ldr	r5, [pc, #152]	; (801002c <configuration_reset+0xb0>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ff94:	4e26      	ldr	r6, [pc, #152]	; (8010030 <configuration_reset+0xb4>)
    drvid -= _app_driver_count;
 800ff96:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ff98:	42a2      	cmp	r2, r4
    drvid -= _app_driver_count;
 800ff9a:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ff9c:	d83d      	bhi.n	801001a <configuration_reset+0x9e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ffa4:	d908      	bls.n	800ffb8 <configuration_reset+0x3c>
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
 800ffa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ffaa:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ffae:	07db      	lsls	r3, r3, #31
 800ffb0:	d500      	bpl.n	800ffb4 <configuration_reset+0x38>
 800ffb2:	be00      	bkpt	0x0000
  }

  tu_varclr(&_usbd_dev);
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
}
 800ffb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800ffb8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->reset(rhport);
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	4638      	mov	r0, r7
 800ffc0:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800ffc2:	3401      	adds	r4, #1
 800ffc4:	f898 2000 	ldrb.w	r2, [r8]
 800ffc8:	b2e4      	uxtb	r4, r4
 800ffca:	1c53      	adds	r3, r2, #1
 800ffcc:	42a3      	cmp	r3, r4
 800ffce:	dae2      	bge.n	800ff96 <configuration_reset+0x1a>
  tu_varclr(&_usbd_dev);
 800ffd0:	4b18      	ldr	r3, [pc, #96]	; (8010034 <configuration_reset+0xb8>)
 800ffd2:	2237      	movs	r2, #55	; 0x37
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f002 f95f 	bl	801229a <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800ffdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ffe0:	f8c0 2003 	str.w	r2, [r0, #3]
 800ffe4:	f8c0 2007 	str.w	r2, [r0, #7]
 800ffe8:	f8c0 200b 	str.w	r2, [r0, #11]
 800ffec:	f8c0 200f 	str.w	r2, [r0, #15]
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 800fff0:	f8c0 2013 	str.w	r2, [r0, #19]
 800fff4:	f8c0 2017 	str.w	r2, [r0, #23]
 800fff8:	f8c0 201b 	str.w	r2, [r0, #27]
 800fffc:	f8c0 201f 	str.w	r2, [r0, #31]
 8010000:	f8a0 2023 	strh.w	r2, [r0, #35]	; 0x23
 8010004:	e7d6      	b.n	800ffb4 <configuration_reset+0x38>
    driver->reset(rhport);
 8010006:	f7fe fd3d 	bl	800ea84 <cdcd_reset>
 801000a:	4638      	mov	r0, r7
 801000c:	f7fe ffb0 	bl	800ef70 <mscd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8010010:	f898 3000 	ldrb.w	r3, [r8]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d1c6      	bne.n	800ffa6 <configuration_reset+0x2a>
 8010018:	e7da      	b.n	800ffd0 <configuration_reset+0x54>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801001a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801001e:	6833      	ldr	r3, [r6, #0]
    TU_ASSERT(driver, );
 8010020:	eb13 03c2 	adds.w	r3, r3, r2, lsl #3
 8010024:	d1ca      	bne.n	800ffbc <configuration_reset+0x40>
 8010026:	e7be      	b.n	800ffa6 <configuration_reset+0x2a>
 8010028:	00000000 	.word	0x00000000
 801002c:	08015aa4 	.word	0x08015aa4
 8010030:	24002b08 	.word	0x24002b08
 8010034:	24002b10 	.word	0x24002b10
 8010038:	24002b0c 	.word	0x24002b0c

0801003c <usbd_int_set>:

void usbd_int_set(bool enabled)
{
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 801003c:	4b03      	ldr	r3, [pc, #12]	; (801004c <usbd_int_set+0x10>)
  if (enabled)
 801003e:	b110      	cbz	r0, 8010046 <usbd_int_set+0xa>
    dcd_int_enable(_usbd_rhport);
 8010040:	7818      	ldrb	r0, [r3, #0]
 8010042:	f000 bfab 	b.w	8010f9c <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
 8010046:	7818      	ldrb	r0, [r3, #0]
 8010048:	f000 bfbe 	b.w	8010fc8 <dcd_int_disable>
 801004c:	24000034 	.word	0x24000034

08010050 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
 8010050:	4b02      	ldr	r3, [pc, #8]	; (801005c <tud_mounted+0xc>)
 8010052:	7858      	ldrb	r0, [r3, #1]
}
 8010054:	3800      	subs	r0, #0
 8010056:	bf18      	it	ne
 8010058:	2001      	movne	r0, #1
 801005a:	4770      	bx	lr
 801005c:	24002b10 	.word	0x24002b10

08010060 <tud_suspended>:
  return _usbd_dev.suspended;
 8010060:	4b02      	ldr	r3, [pc, #8]	; (801006c <tud_suspended+0xc>)
 8010062:	7818      	ldrb	r0, [r3, #0]
}
 8010064:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	24002b10 	.word	0x24002b10

08010070 <tud_init>:
{
 8010070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8010074:	4f2e      	ldr	r7, [pc, #184]	; (8010130 <tud_init+0xc0>)
  if ( tud_inited() ) return true;
 8010076:	783b      	ldrb	r3, [r7, #0]
 8010078:	2bff      	cmp	r3, #255	; 0xff
 801007a:	d002      	beq.n	8010082 <tud_init+0x12>
 801007c:	2001      	movs	r0, #1
}
 801007e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 8010082:	4e2c      	ldr	r6, [pc, #176]	; (8010134 <tud_init+0xc4>)
  tu_varclr(&_usbd_dev);
 8010084:	2237      	movs	r2, #55	; 0x37
 8010086:	2100      	movs	r1, #0
 8010088:	4604      	mov	r4, r0
 801008a:	482b      	ldr	r0, [pc, #172]	; (8010138 <tud_init+0xc8>)
 801008c:	f002 f905 	bl	801229a <memset>
 8010090:	1d30      	adds	r0, r6, #4
 8010092:	f7ff ff65 	bl	800ff60 <tu_fifo_clear>
  if ( usbd_app_driver_get_cb )
 8010096:	4d29      	ldr	r5, [pc, #164]	; (801013c <tud_init+0xcc>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8010098:	4b29      	ldr	r3, [pc, #164]	; (8010140 <tud_init+0xd0>)
 801009a:	601e      	str	r6, [r3, #0]
  if ( usbd_app_driver_get_cb )
 801009c:	b125      	cbz	r5, 80100a8 <tud_init+0x38>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 801009e:	4829      	ldr	r0, [pc, #164]	; (8010144 <tud_init+0xd4>)
 80100a0:	f3af 8000 	nop.w
 80100a4:	4b28      	ldr	r3, [pc, #160]	; (8010148 <tud_init+0xd8>)
 80100a6:	6018      	str	r0, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80100a8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8010144 <tud_init+0xd4>
 80100ac:	f899 2000 	ldrb.w	r2, [r9]
 80100b0:	b36d      	cbz	r5, 801010e <tud_init+0x9e>
 80100b2:	f04f 0800 	mov.w	r8, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80100b6:	4d25      	ldr	r5, [pc, #148]	; (801014c <tud_init+0xdc>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80100b8:	4e23      	ldr	r6, [pc, #140]	; (8010148 <tud_init+0xd8>)
    drvid -= _app_driver_count;
 80100ba:	eba8 0302 	sub.w	r3, r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80100be:	4542      	cmp	r2, r8
    drvid -= _app_driver_count;
 80100c0:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80100c2:	d82d      	bhi.n	8010120 <tud_init+0xb0>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80100ca:	d90a      	bls.n	80100e2 <tud_init+0x72>
    TU_ASSERT(driver);
 80100cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80100d0:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 80100d4:	f010 0001 	ands.w	r0, r0, #1
 80100d8:	d0d1      	beq.n	801007e <tud_init+0xe>
 80100da:	be00      	bkpt	0x0000
 80100dc:	2000      	movs	r0, #0
}
 80100de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80100e2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->init();
 80100e6:	681b      	ldr	r3, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80100e8:	f108 0801 	add.w	r8, r8, #1
    driver->init();
 80100ec:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80100ee:	f899 2000 	ldrb.w	r2, [r9]
 80100f2:	fa5f f888 	uxtb.w	r8, r8
 80100f6:	1c53      	adds	r3, r2, #1
 80100f8:	4543      	cmp	r3, r8
 80100fa:	dade      	bge.n	80100ba <tud_init+0x4a>
  dcd_init(rhport);
 80100fc:	4620      	mov	r0, r4
  _usbd_rhport = rhport;
 80100fe:	703c      	strb	r4, [r7, #0]
  dcd_init(rhport);
 8010100:	f000 ffd6 	bl	80110b0 <dcd_init>
  dcd_int_enable(rhport);
 8010104:	4620      	mov	r0, r4
 8010106:	f000 ff49 	bl	8010f9c <dcd_int_enable>
  return true;
 801010a:	2001      	movs	r0, #1
 801010c:	e7b7      	b.n	801007e <tud_init+0xe>
    driver->init();
 801010e:	f7fe fc91 	bl	800ea34 <cdcd_init>
 8010112:	f7fe ff25 	bl	800ef60 <mscd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010116:	f899 3000 	ldrb.w	r3, [r9]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1d6      	bne.n	80100cc <tud_init+0x5c>
 801011e:	e7ed      	b.n	80100fc <tud_init+0x8c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010120:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8010124:	6833      	ldr	r3, [r6, #0]
    TU_ASSERT(driver);
 8010126:	eb13 03c2 	adds.w	r3, r3, r2, lsl #3
 801012a:	d1dc      	bne.n	80100e6 <tud_init+0x76>
 801012c:	e7ce      	b.n	80100cc <tud_init+0x5c>
 801012e:	bf00      	nop
 8010130:	24000034 	.word	0x24000034
 8010134:	24000024 	.word	0x24000024
 8010138:	24002b10 	.word	0x24002b10
 801013c:	00000000 	.word	0x00000000
 8010140:	24002b48 	.word	0x24002b48
 8010144:	24002b0c 	.word	0x24002b0c
 8010148:	24002b08 	.word	0x24002b08
 801014c:	08015aa4 	.word	0x08015aa4

08010150 <tud_task_ext>:
{
 8010150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8010154:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8010468 <tud_task_ext+0x318>
{
 8010158:	b08b      	sub	sp, #44	; 0x2c
  if ( !tud_inited() ) return;
 801015a:	f899 3000 	ldrb.w	r3, [r9]
 801015e:	2bff      	cmp	r3, #255	; 0xff
 8010160:	d052      	beq.n	8010208 <tud_task_ext+0xb8>
 8010162:	4db9      	ldr	r5, [pc, #740]	; (8010448 <tud_task_ext+0x2f8>)
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010164:	f8df a304 	ldr.w	sl, [pc, #772]	; 801046c <tud_task_ext+0x31c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010168:	f8df b304 	ldr.w	fp, [pc, #772]	; 8010470 <tud_task_ext+0x320>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 801016c:	682e      	ldr	r6, [r5, #0]
  qhdl->interrupt_set(false);
 801016e:	2000      	movs	r0, #0
 8010170:	4634      	mov	r4, r6
 8010172:	f854 3b04 	ldr.w	r3, [r4], #4
 8010176:	4798      	blx	r3
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8010178:	a907      	add	r1, sp, #28
 801017a:	4620      	mov	r0, r4
 801017c:	f7ff fbba 	bl	800f8f4 <tu_fifo_read>
 8010180:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8010182:	6833      	ldr	r3, [r6, #0]
 8010184:	2001      	movs	r0, #1
 8010186:	4798      	blx	r3
 8010188:	2c00      	cmp	r4, #0
 801018a:	d03d      	beq.n	8010208 <tud_task_ext+0xb8>
    switch ( event.event_id )
 801018c:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010190:	3b01      	subs	r3, #1
 8010192:	2b07      	cmp	r3, #7
 8010194:	f200 80c4 	bhi.w	8010320 <tud_task_ext+0x1d0>
 8010198:	e8df f003 	tbb	[pc, r3]
 801019c:	94c2aab7 	.word	0x94c2aab7
 80101a0:	040a3981 	.word	0x040a3981
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 80101a4:	9b08      	ldr	r3, [sp, #32]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d0e0      	beq.n	801016c <tud_task_ext+0x1c>
 80101aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101ac:	4798      	blx	r3
 80101ae:	e7dd      	b.n	801016c <tud_task_ext+0x1c>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80101b0:	f89d 1020 	ldrb.w	r1, [sp, #32]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80101b4:	4ba5      	ldr	r3, [pc, #660]	; (801044c <tud_task_ext+0x2fc>)
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80101b6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 80101ba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80101be:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 80101c2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80101c6:	f36f 0200 	bfc	r2, #0, #1
 80101ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80101ce:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80101d2:	f36f 0282 	bfc	r2, #2, #1
 80101d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        if ( 0 == epnum )
 80101da:	2800      	cmp	r0, #0
 80101dc:	f000 80bd 	beq.w	801035a <tud_task_ext+0x20a>
  if ( usbd_app_driver_get_cb )
 80101e0:	4a9b      	ldr	r2, [pc, #620]	; (8010450 <tud_task_ext+0x300>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80101e2:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
 80101e4:	b132      	cbz	r2, 80101f4 <tud_task_ext+0xa4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80101e6:	4a9b      	ldr	r2, [pc, #620]	; (8010454 <tud_task_ext+0x304>)
 80101e8:	7812      	ldrb	r2, [r2, #0]
 80101ea:	4293      	cmp	r3, r2
 80101ec:	f0c0 80ad 	bcc.w	801034a <tud_task_ext+0x1fa>
    drvid -= _app_driver_count;
 80101f0:	1a9b      	subs	r3, r3, r2
 80101f2:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	f240 809c 	bls.w	8010332 <tud_task_ext+0x1e2>
          TU_ASSERT(driver, );
 80101fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80101fe:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010202:	07da      	lsls	r2, r3, #31
 8010204:	d500      	bpl.n	8010208 <tud_task_ext+0xb8>
 8010206:	be00      	bkpt	0x0000
}
 8010208:	b00b      	add	sp, #44	; 0x2c
 801020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _usbd_dev.connected = 1;
 801020e:	4c8f      	ldr	r4, [pc, #572]	; (801044c <tud_task_ext+0x2fc>)
  usbd_control_set_complete_callback(NULL);
 8010210:	2000      	movs	r0, #0
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010212:	f89d 801c 	ldrb.w	r8, [sp, #28]
        _usbd_dev.connected = 1;
 8010216:	7823      	ldrb	r3, [r4, #0]
 8010218:	f043 0301 	orr.w	r3, r3, #1
 801021c:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 801021e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010222:	f36f 0300 	bfc	r3, #0, #1
 8010226:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 801022a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801022e:	f36f 0382 	bfc	r3, #2, #1
 8010232:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8010236:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801023a:	f36f 0300 	bfc	r3, #0, #1
 801023e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8010242:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010246:	f36f 0382 	bfc	r3, #2, #1
 801024a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  usbd_control_set_complete_callback(NULL);
 801024e:	f000 fdfd 	bl	8010e4c <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8010252:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8010256:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801025a:	2a60      	cmp	r2, #96	; 0x60
 801025c:	d00d      	beq.n	801027a <tud_task_ext+0x12a>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 801025e:	2a40      	cmp	r2, #64	; 0x40
 8010260:	f000 8087 	beq.w	8010372 <tud_task_ext+0x222>
  switch ( p_request->bmRequestType_bit.recipient )
 8010264:	f003 031f 	and.w	r3, r3, #31
 8010268:	2b01      	cmp	r3, #1
 801026a:	f000 8103 	beq.w	8010474 <tud_task_ext+0x324>
 801026e:	2b02      	cmp	r3, #2
 8010270:	f000 80b0 	beq.w	80103d4 <tud_task_ext+0x284>
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 808a 	beq.w	801038e <tud_task_ext+0x23e>
    default: TU_BREAKPOINT(); return false;
 801027a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801027e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010282:	07d9      	lsls	r1, r3, #31
 8010284:	d500      	bpl.n	8010288 <tud_task_ext+0x138>
 8010286:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
 8010288:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801028c:	2100      	movs	r1, #0
 801028e:	f001 f9e1 	bl	8011654 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8010292:	2180      	movs	r1, #128	; 0x80
 8010294:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010298:	f001 f9dc 	bl	8011654 <dcd_edpt_stall>
 801029c:	e766      	b.n	801016c <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 801029e:	4a6b      	ldr	r2, [pc, #428]	; (801044c <tud_task_ext+0x2fc>)
          if (tud_resume_cb) tud_resume_cb();
 80102a0:	f04f 0301 	mov.w	r3, #1
 80102a4:	496c      	ldr	r1, [pc, #432]	; (8010458 <tud_task_ext+0x308>)
        if ( _usbd_dev.connected )
 80102a6:	7812      	ldrb	r2, [r2, #0]
 80102a8:	f002 0201 	and.w	r2, r2, #1
          if (tud_resume_cb) tud_resume_cb();
 80102ac:	2900      	cmp	r1, #0
 80102ae:	d05e      	beq.n	801036e <tud_task_ext+0x21e>
 80102b0:	b2db      	uxtb	r3, r3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f43f af5a 	beq.w	801016c <tud_task_ext+0x1c>
 80102b8:	2a00      	cmp	r2, #0
 80102ba:	f43f af57 	beq.w	801016c <tud_task_ext+0x1c>
 80102be:	f7f3 ffbb 	bl	8004238 <tud_resume_cb>
 80102c2:	e753      	b.n	801016c <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 80102c4:	4c61      	ldr	r4, [pc, #388]	; (801044c <tud_task_ext+0x2fc>)
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80102c6:	f04f 0301 	mov.w	r3, #1
 80102ca:	4964      	ldr	r1, [pc, #400]	; (801045c <tud_task_ext+0x30c>)
        if ( _usbd_dev.connected )
 80102cc:	7822      	ldrb	r2, [r4, #0]
 80102ce:	f002 0201 	and.w	r2, r2, #1
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80102d2:	2900      	cmp	r1, #0
 80102d4:	d049      	beq.n	801036a <tud_task_ext+0x21a>
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f43f af47 	beq.w	801016c <tud_task_ext+0x1c>
 80102de:	2a00      	cmp	r2, #0
 80102e0:	f43f af44 	beq.w	801016c <tud_task_ext+0x1c>
 80102e4:	7820      	ldrb	r0, [r4, #0]
 80102e6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80102ea:	f7f3 ffa3 	bl	8004234 <tud_suspend_cb>
 80102ee:	e73d      	b.n	801016c <tud_task_ext+0x1c>
  configuration_reset(rhport);
 80102f0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80102f4:	f7ff fe42 	bl	800ff7c <configuration_reset>
  usbd_control_reset();
 80102f8:	f000 fd9e 	bl	8010e38 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 80102fc:	4b58      	ldr	r3, [pc, #352]	; (8010460 <tud_task_ext+0x310>)
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f43f af34 	beq.w	801016c <tud_task_ext+0x1c>
 8010304:	f7f3 ff94 	bl	8004230 <tud_umount_cb>
 8010308:	e730      	b.n	801016c <tud_task_ext+0x1c>
  configuration_reset(rhport);
 801030a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801030e:	f7ff fe35 	bl	800ff7c <configuration_reset>
  usbd_control_reset();
 8010312:	f000 fd91 	bl	8010e38 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8010316:	4b4d      	ldr	r3, [pc, #308]	; (801044c <tud_task_ext+0x2fc>)
 8010318:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801031c:	709a      	strb	r2, [r3, #2]
      break;
 801031e:	e725      	b.n	801016c <tud_task_ext+0x1c>
        TU_BREAKPOINT();
 8010320:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010324:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010328:	07db      	lsls	r3, r3, #31
 801032a:	f57f af1f 	bpl.w	801016c <tud_task_ext+0x1c>
 801032e:	be00      	bkpt	0x0000
  {
 8010330:	e71c      	b.n	801016c <tud_task_ext+0x1c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010332:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010336:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 801033a:	691c      	ldr	r4, [r3, #16]
 801033c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8010340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010342:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010346:	47a0      	blx	r4
 8010348:	e710      	b.n	801016c <tud_task_ext+0x1c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801034a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801034e:	f8db 2000 	ldr.w	r2, [fp]
          TU_ASSERT(driver, );
 8010352:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 8010356:	d1f0      	bne.n	801033a <tud_task_ext+0x1ea>
 8010358:	e74f      	b.n	80101fa <tud_task_ext+0xaa>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 801035a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801035c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8010360:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010364:	f000 fd88 	bl	8010e78 <usbd_control_xfer_cb>
 8010368:	e700      	b.n	801016c <tud_task_ext+0x1c>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 801036a:	460b      	mov	r3, r1
 801036c:	e7b3      	b.n	80102d6 <tud_task_ext+0x186>
          if (tud_resume_cb) tud_resume_cb();
 801036e:	460b      	mov	r3, r1
 8010370:	e79e      	b.n	80102b0 <tud_task_ext+0x160>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8010372:	483c      	ldr	r0, [pc, #240]	; (8010464 <tud_task_ext+0x314>)
 8010374:	2800      	cmp	r0, #0
 8010376:	d087      	beq.n	8010288 <tud_task_ext+0x138>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8010378:	f000 fd68 	bl	8010e4c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 801037c:	4640      	mov	r0, r8
 801037e:	aa08      	add	r2, sp, #32
 8010380:	2101      	movs	r1, #1
 8010382:	f3af 8000 	nop.w
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010386:	2800      	cmp	r0, #0
 8010388:	f47f aef0 	bne.w	801016c <tud_task_ext+0x1c>
 801038c:	e77c      	b.n	8010288 <tud_task_ext+0x138>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 801038e:	2a20      	cmp	r2, #32
 8010390:	f000 80aa 	beq.w	80104e8 <tud_task_ext+0x398>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8010394:	2a00      	cmp	r2, #0
 8010396:	f47f af70 	bne.w	801027a <tud_task_ext+0x12a>
      switch ( p_request->bRequest )
 801039a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801039e:	2b09      	cmp	r3, #9
 80103a0:	f63f af6b 	bhi.w	801027a <tud_task_ext+0x12a>
 80103a4:	a201      	add	r2, pc, #4	; (adr r2, 80103ac <tud_task_ext+0x25c>)
 80103a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103aa:	bf00      	nop
 80103ac:	08010555 	.word	0x08010555
 80103b0:	0801063f 	.word	0x0801063f
 80103b4:	0801027b 	.word	0x0801027b
 80103b8:	08010623 	.word	0x08010623
 80103bc:	0801027b 	.word	0x0801027b
 80103c0:	08010609 	.word	0x08010609
 80103c4:	080105b7 	.word	0x080105b7
 80103c8:	0801027b 	.word	0x0801027b
 80103cc:	080105a1 	.word	0x080105a1
 80103d0:	08010577 	.word	0x08010577
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80103d4:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 80103d8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80103dc:	2b08      	cmp	r3, #8
 80103de:	f63f af4c 	bhi.w	801027a <tud_task_ext+0x12a>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80103e2:	eb04 0043 	add.w	r0, r4, r3, lsl #1
  if ( usbd_app_driver_get_cb )
 80103e6:	4e1a      	ldr	r6, [pc, #104]	; (8010450 <tud_task_ext+0x300>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80103e8:	005b      	lsls	r3, r3, #1
 80103ea:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
 80103ee:	ea4f 1cd1 	mov.w	ip, r1, lsr #7
 80103f2:	7cc0      	ldrb	r0, [r0, #19]
  if ( usbd_app_driver_get_cb )
 80103f4:	b136      	cbz	r6, 8010404 <tud_task_ext+0x2b4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80103f6:	4e17      	ldr	r6, [pc, #92]	; (8010454 <tud_task_ext+0x304>)
 80103f8:	7836      	ldrb	r6, [r6, #0]
 80103fa:	42b0      	cmp	r0, r6
 80103fc:	f0c0 8174 	bcc.w	80106e8 <tud_task_ext+0x598>
    drvid -= _app_driver_count;
 8010400:	1b80      	subs	r0, r0, r6
 8010402:	b2c0      	uxtb	r0, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010404:	2801      	cmp	r0, #1
 8010406:	f240 8092 	bls.w	801052e <tud_task_ext+0x3de>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 801040a:	2a00      	cmp	r2, #0
 801040c:	f47f af3c 	bne.w	8010288 <tud_task_ext+0x138>
  return NULL;
 8010410:	4616      	mov	r6, r2
        switch ( p_request->bRequest )
 8010412:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8010416:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
 801041a:	2801      	cmp	r0, #1
 801041c:	f000 817a 	beq.w	8010714 <tud_task_ext+0x5c4>
 8010420:	2a00      	cmp	r2, #0
 8010422:	f47f af2a 	bne.w	801027a <tud_task_ext+0x12a>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8010426:	4423      	add	r3, r4
            tud_control_xfer(rhport, p_request, &status, 2);
 8010428:	4640      	mov	r0, r8
 801042a:	f10d 021a 	add.w	r2, sp, #26
 801042e:	a908      	add	r1, sp, #32
  return _usbd_dev.ep_status[epnum][dir].stalled;
 8010430:	4463      	add	r3, ip
 8010432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010436:	f3c3 0340 	ubfx	r3, r3, #1, #1
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 801043a:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
 801043e:	2302      	movs	r3, #2
 8010440:	f000 fca0 	bl	8010d84 <tud_control_xfer>
          break;
 8010444:	e692      	b.n	801016c <tud_task_ext+0x1c>
 8010446:	bf00      	nop
 8010448:	24002b48 	.word	0x24002b48
 801044c:	24002b10 	.word	0x24002b10
 8010450:	00000000 	.word	0x00000000
 8010454:	24002b0c 	.word	0x24002b0c
 8010458:	08004239 	.word	0x08004239
 801045c:	08004235 	.word	0x08004235
 8010460:	08004231 	.word	0x08004231
 8010464:	00000000 	.word	0x00000000
 8010468:	24000034 	.word	0x24000034
 801046c:	08015aa4 	.word	0x08015aa4
 8010470:	24002b08 	.word	0x24002b08
 8010474:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8010478:	2b0f      	cmp	r3, #15
 801047a:	f63f af05 	bhi.w	8010288 <tud_task_ext+0x138>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801047e:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 8010480:	4abb      	ldr	r2, [pc, #748]	; (8010770 <tud_task_ext+0x620>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8010482:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 8010484:	b132      	cbz	r2, 8010494 <tud_task_ext+0x344>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010486:	4abb      	ldr	r2, [pc, #748]	; (8010774 <tud_task_ext+0x624>)
 8010488:	7812      	ldrb	r2, [r2, #0]
 801048a:	4293      	cmp	r3, r2
 801048c:	f0c0 8139 	bcc.w	8010702 <tud_task_ext+0x5b2>
    drvid -= _app_driver_count;
 8010490:	1a9b      	subs	r3, r3, r2
 8010492:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010494:	2b01      	cmp	r3, #1
 8010496:	f63f aef7 	bhi.w	8010288 <tud_task_ext+0x138>
 801049a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801049e:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80104a2:	68e0      	ldr	r0, [r4, #12]
 80104a4:	f000 fcd2 	bl	8010e4c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80104a8:	68e3      	ldr	r3, [r4, #12]
 80104aa:	aa08      	add	r2, sp, #32
 80104ac:	2101      	movs	r1, #1
 80104ae:	4640      	mov	r0, r8
 80104b0:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
 80104b2:	2800      	cmp	r0, #0
 80104b4:	f47f ae5a 	bne.w	801016c <tud_task_ext+0x1c>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80104b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80104bc:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 80104c0:	f47f aee2 	bne.w	8010288 <tud_task_ext+0x138>
        switch(p_request->bRequest)
 80104c4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80104c8:	3b0a      	subs	r3, #10
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	f63f aedc 	bhi.w	8010288 <tud_task_ext+0x138>
            usbd_control_set_complete_callback(NULL);
 80104d0:	f000 fcbc 	bl	8010e4c <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 80104d4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80104d8:	2b0a      	cmp	r3, #10
 80104da:	f000 8173 	beq.w	80107c4 <tud_task_ext+0x674>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80104de:	a908      	add	r1, sp, #32
 80104e0:	4640      	mov	r0, r8
 80104e2:	f000 fc37 	bl	8010d54 <tud_control_status>
 80104e6:	e641      	b.n	801016c <tud_task_ext+0x1c>
 80104e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80104ec:	2b0f      	cmp	r3, #15
 80104ee:	f63f aecb 	bhi.w	8010288 <tud_task_ext+0x138>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80104f2:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 80104f4:	4a9e      	ldr	r2, [pc, #632]	; (8010770 <tud_task_ext+0x620>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80104f6:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 80104f8:	b132      	cbz	r2, 8010508 <tud_task_ext+0x3b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80104fa:	4a9e      	ldr	r2, [pc, #632]	; (8010774 <tud_task_ext+0x624>)
 80104fc:	7812      	ldrb	r2, [r2, #0]
 80104fe:	4293      	cmp	r3, r2
 8010500:	f0c0 8140 	bcc.w	8010784 <tud_task_ext+0x634>
    drvid -= _app_driver_count;
 8010504:	1a9b      	subs	r3, r3, r2
 8010506:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010508:	2b01      	cmp	r3, #1
 801050a:	f63f aebd 	bhi.w	8010288 <tud_task_ext+0x138>
 801050e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010512:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8010516:	68e0      	ldr	r0, [r4, #12]
 8010518:	f000 fc98 	bl	8010e4c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 801051c:	68e3      	ldr	r3, [r4, #12]
 801051e:	4640      	mov	r0, r8
 8010520:	aa08      	add	r2, sp, #32
 8010522:	2101      	movs	r1, #1
 8010524:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010526:	2800      	cmp	r0, #0
 8010528:	f47f ae20 	bne.w	801016c <tud_task_ext+0x1c>
 801052c:	e6ac      	b.n	8010288 <tud_task_ext+0x138>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801052e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010532:	eb0a 06c0 	add.w	r6, sl, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8010536:	2a00      	cmp	r2, #0
 8010538:	f43f af6b 	beq.w	8010412 <tud_task_ext+0x2c2>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 801053c:	68f0      	ldr	r0, [r6, #12]
 801053e:	f000 fc85 	bl	8010e4c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010542:	68f3      	ldr	r3, [r6, #12]
 8010544:	4640      	mov	r0, r8
 8010546:	aa08      	add	r2, sp, #32
 8010548:	2101      	movs	r1, #1
 801054a:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801054c:	2800      	cmp	r0, #0
 801054e:	f47f ae0d 	bne.w	801016c <tud_task_ext+0x1c>
 8010552:	e699      	b.n	8010288 <tud_task_ext+0x138>
          tud_control_xfer(rhport, p_request, &status, 2);
 8010554:	2302      	movs	r3, #2
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8010556:	7821      	ldrb	r1, [r4, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 8010558:	4640      	mov	r0, r8
 801055a:	f10d 021a 	add.w	r2, sp, #26
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 801055e:	fa21 f403 	lsr.w	r4, r1, r3
 8010562:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8010566:	401c      	ands	r4, r3
 8010568:	4321      	orrs	r1, r4
 801056a:	f8ad 101a 	strh.w	r1, [sp, #26]
          tud_control_xfer(rhport, p_request, &status, 2);
 801056e:	a908      	add	r1, sp, #32
 8010570:	f000 fc08 	bl	8010d84 <tud_control_xfer>
        break;
 8010574:	e5fa      	b.n	801016c <tud_task_ext+0x1c>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8010576:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
          if (_usbd_dev.cfg_num != cfg_num)
 801057a:	7863      	ldrb	r3, [r4, #1]
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 801057c:	9201      	str	r2, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 801057e:	429a      	cmp	r2, r3
 8010580:	d007      	beq.n	8010592 <tud_task_ext+0x442>
            if ( _usbd_dev.cfg_num )
 8010582:	7863      	ldrb	r3, [r4, #1]
 8010584:	2b00      	cmp	r3, #0
 8010586:	f040 816d 	bne.w	8010864 <tud_task_ext+0x714>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 801058a:	9b01      	ldr	r3, [sp, #4]
 801058c:	2b00      	cmp	r3, #0
 801058e:	f040 8123 	bne.w	80107d8 <tud_task_ext+0x688>
          _usbd_dev.cfg_num = cfg_num;
 8010592:	9b01      	ldr	r3, [sp, #4]
          tud_control_status(rhport, p_request);
 8010594:	4640      	mov	r0, r8
 8010596:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
 8010598:	7063      	strb	r3, [r4, #1]
          tud_control_status(rhport, p_request);
 801059a:	f000 fbdb 	bl	8010d54 <tud_control_status>
        break;
 801059e:	e5e5      	b.n	801016c <tud_task_ext+0x1c>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80105a0:	7863      	ldrb	r3, [r4, #1]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80105a2:	4640      	mov	r0, r8
 80105a4:	f10d 021a 	add.w	r2, sp, #26
 80105a8:	a908      	add	r1, sp, #32
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80105aa:	f88d 301a 	strb.w	r3, [sp, #26]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80105ae:	2301      	movs	r3, #1
 80105b0:	f000 fbe8 	bl	8010d84 <tud_control_xfer>
        break;
 80105b4:	e5da      	b.n	801016c <tud_task_ext+0x1c>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80105b6:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80105ba:	0a03      	lsrs	r3, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80105bc:	b2c0      	uxtb	r0, r0
  switch(desc_type)
 80105be:	1e5a      	subs	r2, r3, #1
 80105c0:	2a0e      	cmp	r2, #14
 80105c2:	f63f ae61 	bhi.w	8010288 <tud_task_ext+0x138>
 80105c6:	a101      	add	r1, pc, #4	; (adr r1, 80105cc <tud_task_ext+0x47c>)
 80105c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80105cc:	08010687 	.word	0x08010687
 80105d0:	0801065b 	.word	0x0801065b
 80105d4:	080106c5 	.word	0x080106c5
 80105d8:	08010289 	.word	0x08010289
 80105dc:	08010289 	.word	0x08010289
 80105e0:	0801069f 	.word	0x0801069f
 80105e4:	0801065b 	.word	0x0801065b
 80105e8:	08010289 	.word	0x08010289
 80105ec:	08010289 	.word	0x08010289
 80105f0:	08010289 	.word	0x08010289
 80105f4:	08010289 	.word	0x08010289
 80105f8:	08010289 	.word	0x08010289
 80105fc:	08010289 	.word	0x08010289
 8010600:	08010289 	.word	0x08010289
 8010604:	080106d5 	.word	0x080106d5
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8010608:	a808      	add	r0, sp, #32
 801060a:	f000 fc25 	bl	8010e58 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 801060e:	4640      	mov	r0, r8
 8010610:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 8010614:	f000 fcf2 	bl	8010ffc <dcd_set_address>
          _usbd_dev.addressed = 1;
 8010618:	7823      	ldrb	r3, [r4, #0]
 801061a:	f043 0302 	orr.w	r3, r3, #2
 801061e:	7023      	strb	r3, [r4, #0]
        break;
 8010620:	e5a4      	b.n	801016c <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8010622:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8010626:	2b01      	cmp	r3, #1
 8010628:	f47f ae2e 	bne.w	8010288 <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = true;
 801062c:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 801062e:	4640      	mov	r0, r8
 8010630:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = true;
 8010632:	f043 0308 	orr.w	r3, r3, #8
 8010636:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 8010638:	f000 fb8c 	bl	8010d54 <tud_control_status>
        break;
 801063c:	e596      	b.n	801016c <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 801063e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8010642:	2b01      	cmp	r3, #1
 8010644:	f47f ae20 	bne.w	8010288 <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = false;
 8010648:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 801064a:	4640      	mov	r0, r8
 801064c:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
 801064e:	f36f 03c3 	bfc	r3, #3, #1
 8010652:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 8010654:	f000 fb7e 	bl	8010d54 <tud_control_status>
        break;
 8010658:	e588      	b.n	801016c <tud_task_ext+0x1c>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 801065a:	2b02      	cmp	r3, #2
 801065c:	f000 8121 	beq.w	80108a2 <tud_task_ext+0x752>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8010660:	4b45      	ldr	r3, [pc, #276]	; (8010778 <tud_task_ext+0x628>)
 8010662:	2b00      	cmp	r3, #0
 8010664:	f43f ae10 	beq.w	8010288 <tud_task_ext+0x138>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8010668:	f3af 8000 	nop.w
 801066c:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
 801066e:	2a00      	cmp	r2, #0
 8010670:	f43f ae03 	beq.w	801027a <tud_task_ext+0x12a>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8010674:	4640      	mov	r0, r8
 8010676:	8853      	ldrh	r3, [r2, #2]
 8010678:	a908      	add	r1, sp, #32
 801067a:	f000 fb83 	bl	8010d84 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801067e:	2800      	cmp	r0, #0
 8010680:	f47f ad74 	bne.w	801016c <tud_task_ext+0x1c>
 8010684:	e600      	b.n	8010288 <tud_task_ext+0x138>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8010686:	f7f3 fdd9 	bl	800423c <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 801068a:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 801068c:	4602      	mov	r2, r0
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 801068e:	a908      	add	r1, sp, #32
 8010690:	4640      	mov	r0, r8
 8010692:	f000 fb77 	bl	8010d84 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010696:	2800      	cmp	r0, #0
 8010698:	f47f ad68 	bne.w	801016c <tud_task_ext+0x1c>
 801069c:	e5f4      	b.n	8010288 <tud_task_ext+0x138>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 801069e:	4b37      	ldr	r3, [pc, #220]	; (801077c <tud_task_ext+0x62c>)
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f43f adf1 	beq.w	8010288 <tud_task_ext+0x138>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80106a6:	f3af 8000 	nop.w
      TU_VERIFY(desc_qualifier);
 80106aa:	4602      	mov	r2, r0
 80106ac:	2800      	cmp	r0, #0
 80106ae:	f43f adeb 	beq.w	8010288 <tud_task_ext+0x138>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80106b2:	4640      	mov	r0, r8
 80106b4:	7813      	ldrb	r3, [r2, #0]
 80106b6:	a908      	add	r1, sp, #32
 80106b8:	f000 fb64 	bl	8010d84 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80106bc:	2800      	cmp	r0, #0
 80106be:	f47f ad55 	bne.w	801016c <tud_task_ext+0x1c>
 80106c2:	e5e1      	b.n	8010288 <tud_task_ext+0x138>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 80106c4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80106c8:	f7f3 fddc 	bl	8004284 <tud_descriptor_string_cb>
      TU_VERIFY(desc_str);
 80106cc:	4602      	mov	r2, r0
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d1ef      	bne.n	80106b2 <tud_task_ext+0x562>
 80106d2:	e5d9      	b.n	8010288 <tud_task_ext+0x138>
      if (!tud_descriptor_bos_cb) return false;
 80106d4:	4b2a      	ldr	r3, [pc, #168]	; (8010780 <tud_task_ext+0x630>)
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f43f add6 	beq.w	8010288 <tud_task_ext+0x138>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 80106dc:	f3af 8000 	nop.w
      TU_ASSERT(desc_bos);
 80106e0:	4602      	mov	r2, r0
 80106e2:	2800      	cmp	r0, #0
 80106e4:	d1c6      	bne.n	8010674 <tud_task_ext+0x524>
 80106e6:	e5c8      	b.n	801027a <tud_task_ext+0x12a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80106e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80106ec:	f8db 7000 	ldr.w	r7, [fp]
 80106f0:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80106f4:	2a00      	cmp	r2, #0
 80106f6:	f43f ae8c 	beq.w	8010412 <tud_task_ext+0x2c2>
        TU_VERIFY(driver);
 80106fa:	2e00      	cmp	r6, #0
 80106fc:	f47f af1e 	bne.w	801053c <tud_task_ext+0x3ec>
 8010700:	e5c2      	b.n	8010288 <tud_task_ext+0x138>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010702:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010706:	f8db 2000 	ldr.w	r2, [fp]
      TU_VERIFY(driver);
 801070a:	eb12 04c3 	adds.w	r4, r2, r3, lsl #3
 801070e:	f43f adbb 	beq.w	8010288 <tud_task_ext+0x138>
 8010712:	e6c6      	b.n	80104a2 <tud_task_ext+0x352>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8010714:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8010718:	b947      	cbnz	r7, 801072c <tud_task_ext+0x5dc>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 801071a:	2a01      	cmp	r2, #1
 801071c:	d03b      	beq.n	8010796 <tud_task_ext+0x646>
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 801071e:	18e7      	adds	r7, r4, r3
 8010720:	4467      	add	r7, ip
 8010722:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010726:	3720      	adds	r7, #32
 8010728:	079b      	lsls	r3, r3, #30
 801072a:	d513      	bpl.n	8010754 <tud_task_ext+0x604>
            if (driver)
 801072c:	2e00      	cmp	r6, #0
 801072e:	f43f ad1d 	beq.w	801016c <tud_task_ext+0x1c>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8010732:	68f0      	ldr	r0, [r6, #12]
 8010734:	f000 fb8a 	bl	8010e4c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010738:	68f3      	ldr	r3, [r6, #12]
 801073a:	aa08      	add	r2, sp, #32
 801073c:	2101      	movs	r1, #1
 801073e:	4640      	mov	r0, r8
 8010740:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
 8010742:	2000      	movs	r0, #0
 8010744:	f000 fb82 	bl	8010e4c <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8010748:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801074c:	07d8      	lsls	r0, r3, #31
 801074e:	f53f ad0d 	bmi.w	801016c <tud_task_ext+0x1c>
 8010752:	e6c4      	b.n	80104de <tud_task_ext+0x38e>
    dcd_edpt_stall(rhport, ep_addr);
 8010754:	f899 0000 	ldrb.w	r0, [r9]
 8010758:	f000 ff7c 	bl	8011654 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 801075c:	797b      	ldrb	r3, [r7, #5]
 801075e:	f043 0302 	orr.w	r3, r3, #2
 8010762:	717b      	strb	r3, [r7, #5]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8010764:	797b      	ldrb	r3, [r7, #5]
 8010766:	f043 0301 	orr.w	r3, r3, #1
 801076a:	717b      	strb	r3, [r7, #5]
 801076c:	e7de      	b.n	801072c <tud_task_ext+0x5dc>
 801076e:	bf00      	nop
 8010770:	00000000 	.word	0x00000000
 8010774:	24002b0c 	.word	0x24002b0c
	...
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010784:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010788:	f8db 2000 	ldr.w	r2, [fp]
        TU_VERIFY(driver);
 801078c:	eb12 04c3 	adds.w	r4, r2, r3, lsl #3
 8010790:	f43f ad7a 	beq.w	8010288 <tud_task_ext+0x138>
 8010794:	e6bf      	b.n	8010516 <tud_task_ext+0x3c6>
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8010796:	4423      	add	r3, r4
 8010798:	4463      	add	r3, ip
 801079a:	f103 0220 	add.w	r2, r3, #32
 801079e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80107a2:	0798      	lsls	r0, r3, #30
 80107a4:	d5c2      	bpl.n	801072c <tud_task_ext+0x5dc>
    dcd_edpt_clear_stall(rhport, ep_addr);
 80107a6:	f899 0000 	ldrb.w	r0, [r9]
 80107aa:	9200      	str	r2, [sp, #0]
 80107ac:	f000 ffb0 	bl	8011710 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 80107b0:	9a00      	ldr	r2, [sp, #0]
 80107b2:	7953      	ldrb	r3, [r2, #5]
 80107b4:	f367 0341 	bfi	r3, r7, #1, #1
 80107b8:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 80107ba:	7953      	ldrb	r3, [r2, #5]
 80107bc:	f367 0300 	bfi	r3, r7, #0, #1
 80107c0:	7153      	strb	r3, [r2, #5]
 80107c2:	e7b3      	b.n	801072c <tud_task_ext+0x5dc>
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80107c4:	a908      	add	r1, sp, #32
 80107c6:	4640      	mov	r0, r8
 80107c8:	2301      	movs	r3, #1
 80107ca:	f10d 021a 	add.w	r2, sp, #26
              uint8_t alternate = 0;
 80107ce:	f88d 401a 	strb.w	r4, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80107d2:	f000 fad7 	bl	8010d84 <tud_control_xfer>
 80107d6:	e4c9      	b.n	801016c <tud_task_ext+0x1c>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80107d8:	1e58      	subs	r0, r3, #1
 80107da:	b2c0      	uxtb	r0, r0
 80107dc:	f7f3 fd40 	bl	8004260 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80107e0:	2800      	cmp	r0, #0
 80107e2:	d036      	beq.n	8010852 <tud_task_ext+0x702>
 80107e4:	7843      	ldrb	r3, [r0, #1]
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	d133      	bne.n	8010852 <tud_task_ext+0x702>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80107ea:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80107ec:	f100 0709 	add.w	r7, r0, #9
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80107f0:	7821      	ldrb	r1, [r4, #0]
 80107f2:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80107f6:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80107fa:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80107fe:	011b      	lsls	r3, r3, #4
 8010800:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8010804:	430b      	orrs	r3, r1
 8010806:	7023      	strb	r3, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8010808:	8843      	ldrh	r3, [r0, #2]
 801080a:	f8cd 8008 	str.w	r8, [sp, #8]
 801080e:	18c3      	adds	r3, r0, r3
 8010810:	9404      	str	r4, [sp, #16]
 8010812:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 8010814:	9b03      	ldr	r3, [sp, #12]
 8010816:	42bb      	cmp	r3, r7
 8010818:	d97e      	bls.n	8010918 <tud_task_ext+0x7c8>
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 801081a:	787b      	ldrb	r3, [r7, #1]
 801081c:	2b0b      	cmp	r3, #11
 801081e:	d076      	beq.n	801090e <tud_task_ext+0x7be>
    uint8_t assoc_itf_count = 1;
 8010820:	2301      	movs	r3, #1
 8010822:	9300      	str	r3, [sp, #0]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8010824:	787b      	ldrb	r3, [r7, #1]
 8010826:	2b04      	cmp	r3, #4
 8010828:	d113      	bne.n	8010852 <tud_task_ext+0x702>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 801082a:	9b03      	ldr	r3, [sp, #12]
 801082c:	494e      	ldr	r1, [pc, #312]	; (8010968 <tud_task_ext+0x818>)
 801082e:	1bda      	subs	r2, r3, r7
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010830:	4b4e      	ldr	r3, [pc, #312]	; (801096c <tud_task_ext+0x81c>)
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8010832:	b292      	uxth	r2, r2
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	2900      	cmp	r1, #0
 8010838:	d078      	beq.n	801092c <tud_task_ext+0x7dc>
 801083a:	2600      	movs	r6, #0
 801083c:	4639      	mov	r1, r7
 801083e:	4617      	mov	r7, r2
 8010840:	46b0      	mov	r8, r6
    drvid -= _app_driver_count;
 8010842:	1af4      	subs	r4, r6, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010844:	429e      	cmp	r6, r3
    drvid -= _app_driver_count;
 8010846:	b2e4      	uxtb	r4, r4
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010848:	d359      	bcc.n	80108fe <tud_task_ext+0x7ae>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801084a:	2c01      	cmp	r4, #1
 801084c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010850:	d911      	bls.n	8010876 <tud_task_ext+0x726>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8010852:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010856:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801085a:	07dc      	lsls	r4, r3, #31
 801085c:	f57f ad0d 	bpl.w	801027a <tud_task_ext+0x12a>
 8010860:	be00      	bkpt	0x0000
 8010862:	e50a      	b.n	801027a <tud_task_ext+0x12a>
              dcd_edpt_close_all(rhport);
 8010864:	4640      	mov	r0, r8
 8010866:	f000 fd8f 	bl	8011388 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 801086a:	78a6      	ldrb	r6, [r4, #2]
              configuration_reset(rhport);
 801086c:	4640      	mov	r0, r8
 801086e:	f7ff fb85 	bl	800ff7c <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 8010872:	70a6      	strb	r6, [r4, #2]
 8010874:	e689      	b.n	801058a <tud_task_ext+0x43a>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010876:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 801087a:	68a3      	ldr	r3, [r4, #8]
 801087c:	463a      	mov	r2, r7
 801087e:	9802      	ldr	r0, [sp, #8]
 8010880:	9105      	str	r1, [sp, #20]
 8010882:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010884:	2808      	cmp	r0, #8
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010886:	f106 0301 	add.w	r3, r6, #1
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 801088a:	9905      	ldr	r1, [sp, #20]
 801088c:	d901      	bls.n	8010892 <tud_task_ext+0x742>
 801088e:	4287      	cmp	r7, r0
 8010890:	d20d      	bcs.n	80108ae <tud_task_ext+0x75e>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010892:	b2de      	uxtb	r6, r3
 8010894:	4b35      	ldr	r3, [pc, #212]	; (801096c <tud_task_ext+0x81c>)
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	46b0      	mov	r8, r6
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	42b2      	cmp	r2, r6
 801089e:	dad0      	bge.n	8010842 <tud_task_ext+0x6f2>
 80108a0:	e7d7      	b.n	8010852 <tud_task_ext+0x702>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80108a2:	f7f3 fcdd 	bl	8004260 <tud_descriptor_configuration_cb>
 80108a6:	4602      	mov	r2, r0
 80108a8:	e6e1      	b.n	801066e <tud_task_ext+0x51e>
 80108aa:	461c      	mov	r4, r3
 80108ac:	463e      	mov	r6, r7
        if ( assoc_itf_count == 1)
 80108ae:	9b00      	ldr	r3, [sp, #0]
 80108b0:	460f      	mov	r7, r1
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d106      	bne.n	80108c4 <tud_task_ext+0x774>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80108b6:	9900      	ldr	r1, [sp, #0]
 80108b8:	68a2      	ldr	r2, [r4, #8]
 80108ba:	4b2d      	ldr	r3, [pc, #180]	; (8010970 <tud_task_ext+0x820>)
 80108bc:	429a      	cmp	r2, r3
 80108be:	bf08      	it	eq
 80108c0:	2102      	moveq	r1, #2
 80108c2:	9100      	str	r1, [sp, #0]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80108c4:	2200      	movs	r2, #0
 80108c6:	e008      	b.n	80108da <tud_task_ext+0x78a>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80108c8:	78b9      	ldrb	r1, [r7, #2]
 80108ca:	440b      	add	r3, r1
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80108cc:	9904      	ldr	r1, [sp, #16]
 80108ce:	fa51 f383 	uxtab	r3, r1, r3
 80108d2:	78d9      	ldrb	r1, [r3, #3]
 80108d4:	29ff      	cmp	r1, #255	; 0xff
 80108d6:	d1bc      	bne.n	8010852 <tud_task_ext+0x702>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80108d8:	70de      	strb	r6, [r3, #3]
 80108da:	b2d3      	uxtb	r3, r2
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80108dc:	9900      	ldr	r1, [sp, #0]
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80108de:	3201      	adds	r2, #1
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80108e0:	4299      	cmp	r1, r3
 80108e2:	d8f1      	bhi.n	80108c8 <tud_task_ext+0x778>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80108e4:	4633      	mov	r3, r6
 80108e6:	4639      	mov	r1, r7
 80108e8:	4602      	mov	r2, r0
        p_desc += drv_len;
 80108ea:	4407      	add	r7, r0
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80108ec:	4821      	ldr	r0, [pc, #132]	; (8010974 <tud_task_ext+0x824>)
 80108ee:	f001 fba7 	bl	8012040 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80108f2:	4b1e      	ldr	r3, [pc, #120]	; (801096c <tud_task_ext+0x81c>)
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	3301      	adds	r3, #1
 80108f8:	4543      	cmp	r3, r8
 80108fa:	da8b      	bge.n	8010814 <tud_task_ext+0x6c4>
 80108fc:	e7a9      	b.n	8010852 <tud_task_ext+0x702>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80108fe:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8010902:	f8db 4000 	ldr.w	r4, [fp]
      TU_ASSERT(driver);
 8010906:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 801090a:	d1b6      	bne.n	801087a <tud_task_ext+0x72a>
 801090c:	e7a1      	b.n	8010852 <tud_task_ext+0x702>
      assoc_itf_count = desc_iad->bInterfaceCount;
 801090e:	78fa      	ldrb	r2, [r7, #3]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010910:	783b      	ldrb	r3, [r7, #0]
 8010912:	9200      	str	r2, [sp, #0]
 8010914:	441f      	add	r7, r3
 8010916:	e785      	b.n	8010824 <tud_task_ext+0x6d4>
  if (tud_mount_cb) tud_mount_cb();
 8010918:	4b17      	ldr	r3, [pc, #92]	; (8010978 <tud_task_ext+0x828>)
 801091a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801091e:	9c04      	ldr	r4, [sp, #16]
 8010920:	2b00      	cmp	r3, #0
 8010922:	f43f ae36 	beq.w	8010592 <tud_task_ext+0x442>
 8010926:	f7f3 fc81 	bl	800422c <tud_mount_cb>
 801092a:	e632      	b.n	8010592 <tud_task_ext+0x442>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801092c:	4688      	mov	r8, r1
 801092e:	4c13      	ldr	r4, [pc, #76]	; (801097c <tud_task_ext+0x82c>)
 8010930:	4639      	mov	r1, r7
 8010932:	4616      	mov	r6, r2
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010934:	f1b8 0f02 	cmp.w	r8, #2
 8010938:	fa5f f788 	uxtb.w	r7, r8
 801093c:	d089      	beq.n	8010852 <tud_task_ext+0x702>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 801093e:	68a3      	ldr	r3, [r4, #8]
 8010940:	4632      	mov	r2, r6
 8010942:	9802      	ldr	r0, [sp, #8]
 8010944:	9105      	str	r1, [sp, #20]
 8010946:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010948:	4286      	cmp	r6, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801094a:	4623      	mov	r3, r4
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 801094c:	9905      	ldr	r1, [sp, #20]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801094e:	f104 0418 	add.w	r4, r4, #24
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010952:	d301      	bcc.n	8010958 <tud_task_ext+0x808>
 8010954:	2808      	cmp	r0, #8
 8010956:	d8a8      	bhi.n	80108aa <tud_task_ext+0x75a>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010958:	4b04      	ldr	r3, [pc, #16]	; (801096c <tud_task_ext+0x81c>)
 801095a:	f108 0801 	add.w	r8, r8, #1
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	3301      	adds	r3, #1
 8010962:	4598      	cmp	r8, r3
 8010964:	dde6      	ble.n	8010934 <tud_task_ext+0x7e4>
 8010966:	e774      	b.n	8010852 <tud_task_ext+0x702>
 8010968:	00000000 	.word	0x00000000
 801096c:	24002b0c 	.word	0x24002b0c
 8010970:	0800eab1 	.word	0x0800eab1
 8010974:	24002b23 	.word	0x24002b23
 8010978:	0800422d 	.word	0x0800422d
 801097c:	08015aa4 	.word	0x08015aa4

08010980 <dcd_event_handler>:
{
 8010980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (event->event_id)
 8010984:	7843      	ldrb	r3, [r0, #1]
{
 8010986:	b085      	sub	sp, #20
 8010988:	4605      	mov	r5, r0
 801098a:	460e      	mov	r6, r1
  switch (event->event_id)
 801098c:	3b02      	subs	r3, #2
 801098e:	2b03      	cmp	r3, #3
 8010990:	f200 80c3 	bhi.w	8010b1a <dcd_event_handler+0x19a>
 8010994:	e8df f003 	tbb	[pc, r3]
 8010998:	021f4733 	.word	0x021f4733
      if ( _usbd_dev.connected )
 801099c:	4b62      	ldr	r3, [pc, #392]	; (8010b28 <dcd_event_handler+0x1a8>)
 801099e:	781a      	ldrb	r2, [r3, #0]
 80109a0:	07d1      	lsls	r1, r2, #31
 80109a2:	d515      	bpl.n	80109d0 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 0;
 80109a4:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80109a6:	4961      	ldr	r1, [pc, #388]	; (8010b2c <dcd_event_handler+0x1ac>)
        _usbd_dev.suspended = 0;
 80109a8:	f36f 0282 	bfc	r2, #2, #1
        osal_queue_send(_usbd_q, event, in_isr);
 80109ac:	680f      	ldr	r7, [r1, #0]
        _usbd_dev.suspended = 0;
 80109ae:	701a      	strb	r2, [r3, #0]
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 80109b0:	b9ee      	cbnz	r6, 80109ee <dcd_event_handler+0x6e>
  qhdl->interrupt_set(false);
 80109b2:	463c      	mov	r4, r7
 80109b4:	4630      	mov	r0, r6
 80109b6:	f854 3b04 	ldr.w	r3, [r4], #4
 80109ba:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 80109bc:	4629      	mov	r1, r5
 80109be:	4620      	mov	r0, r4
 80109c0:	f7ff f8fe 	bl	800fbc0 <tu_fifo_write>
 80109c4:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	2001      	movs	r0, #1
 80109ca:	4798      	blx	r3

  if (!in_isr) {
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 80109cc:	2c00      	cmp	r4, #0
 80109ce:	d075      	beq.n	8010abc <dcd_event_handler+0x13c>
}
 80109d0:	b005      	add	sp, #20
 80109d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if ( _usbd_dev.connected )
 80109d6:	4b54      	ldr	r3, [pc, #336]	; (8010b28 <dcd_event_handler+0x1a8>)
 80109d8:	781a      	ldrb	r2, [r3, #0]
 80109da:	07d0      	lsls	r0, r2, #31
 80109dc:	d5f8      	bpl.n	80109d0 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 1;
 80109de:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80109e0:	4952      	ldr	r1, [pc, #328]	; (8010b2c <dcd_event_handler+0x1ac>)
        _usbd_dev.suspended = 1;
 80109e2:	f042 0204 	orr.w	r2, r2, #4
        osal_queue_send(_usbd_q, event, in_isr);
 80109e6:	680f      	ldr	r7, [r1, #0]
        _usbd_dev.suspended = 1;
 80109e8:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 80109ea:	2e00      	cmp	r6, #0
 80109ec:	d0e1      	beq.n	80109b2 <dcd_event_handler+0x32>
  bool success = tu_fifo_write(&qhdl->ff, data);
 80109ee:	4629      	mov	r1, r5
 80109f0:	1d38      	adds	r0, r7, #4
 80109f2:	f7ff f8e5 	bl	800fbc0 <tu_fifo_write>
 80109f6:	4604      	mov	r4, r0
  TU_ASSERT(success);
 80109f8:	2c00      	cmp	r4, #0
 80109fa:	d1e9      	bne.n	80109d0 <dcd_event_handler+0x50>
 80109fc:	e05e      	b.n	8010abc <dcd_event_handler+0x13c>
      _usbd_dev.connected  = 0;
 80109fe:	4b4a      	ldr	r3, [pc, #296]	; (8010b28 <dcd_event_handler+0x1a8>)
      _usbd_dev.cfg_num    = 0;
 8010a00:	2100      	movs	r1, #0
      _usbd_dev.connected  = 0;
 8010a02:	781a      	ldrb	r2, [r3, #0]
 8010a04:	f36f 0200 	bfc	r2, #0, #1
 8010a08:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 8010a0a:	781a      	ldrb	r2, [r3, #0]
 8010a0c:	f36f 0241 	bfc	r2, #1, #1
 8010a10:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 8010a12:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended  = 0;
 8010a14:	781a      	ldrb	r2, [r3, #0]
 8010a16:	f361 0282 	bfi	r2, r1, #2, #1
      osal_queue_send(_usbd_q, event, in_isr);
 8010a1a:	4944      	ldr	r1, [pc, #272]	; (8010b2c <dcd_event_handler+0x1ac>)
      _usbd_dev.suspended  = 0;
 8010a1c:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8010a1e:	680f      	ldr	r7, [r1, #0]
  if (!in_isr) {
 8010a20:	2e00      	cmp	r6, #0
 8010a22:	d1e4      	bne.n	80109ee <dcd_event_handler+0x6e>
 8010a24:	e7c5      	b.n	80109b2 <dcd_event_handler+0x32>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010a26:	4f42      	ldr	r7, [pc, #264]	; (8010b30 <dcd_event_handler+0x1b0>)
 8010a28:	4c42      	ldr	r4, [pc, #264]	; (8010b34 <dcd_event_handler+0x1b4>)
 8010a2a:	783a      	ldrb	r2, [r7, #0]
 8010a2c:	2c00      	cmp	r4, #0
 8010a2e:	d04d      	beq.n	8010acc <dcd_event_handler+0x14c>
 8010a30:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010a32:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8010b38 <dcd_event_handler+0x1b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010a36:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8010b3c <dcd_event_handler+0x1bc>
 8010a3a:	e004      	b.n	8010a46 <dcd_event_handler+0xc6>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010a3c:	3401      	adds	r4, #1
 8010a3e:	1c53      	adds	r3, r2, #1
 8010a40:	b2e4      	uxtb	r4, r4
 8010a42:	42a3      	cmp	r3, r4
 8010a44:	db15      	blt.n	8010a72 <dcd_event_handler+0xf2>
    drvid -= _app_driver_count;
 8010a46:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010a48:	4294      	cmp	r4, r2
    drvid -= _app_driver_count;
 8010a4a:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010a4c:	d354      	bcc.n	8010af8 <dcd_event_handler+0x178>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010a4e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 8010a58:	d8f0      	bhi.n	8010a3c <dcd_event_handler+0xbc>
        if (driver && driver->sof)
 8010a5a:	694b      	ldr	r3, [r1, #20]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d0ed      	beq.n	8010a3c <dcd_event_handler+0xbc>
          driver->sof(event->rhport, event->sof.frame_count);
 8010a60:	6869      	ldr	r1, [r5, #4]
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010a62:	3401      	adds	r4, #1
          driver->sof(event->rhport, event->sof.frame_count);
 8010a64:	7828      	ldrb	r0, [r5, #0]
 8010a66:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010a68:	783a      	ldrb	r2, [r7, #0]
 8010a6a:	b2e4      	uxtb	r4, r4
 8010a6c:	1c53      	adds	r3, r2, #1
 8010a6e:	42a3      	cmp	r3, r4
 8010a70:	dae9      	bge.n	8010a46 <dcd_event_handler+0xc6>
      if ( _usbd_dev.suspended )
 8010a72:	4b2d      	ldr	r3, [pc, #180]	; (8010b28 <dcd_event_handler+0x1a8>)
 8010a74:	781a      	ldrb	r2, [r3, #0]
 8010a76:	0752      	lsls	r2, r2, #29
 8010a78:	d5aa      	bpl.n	80109d0 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 0;
 8010a7a:	781a      	ldrb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a7c:	2100      	movs	r1, #0
        _usbd_dev.suspended = 0;
 8010a7e:	f36f 0282 	bfc	r2, #2, #1
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a82:	9103      	str	r1, [sp, #12]
 8010a84:	e9cd 1101 	strd	r1, r1, [sp, #4]
        _usbd_dev.suspended = 0;
 8010a88:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a8a:	2105      	movs	r1, #5
 8010a8c:	782b      	ldrb	r3, [r5, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8010a8e:	4a27      	ldr	r2, [pc, #156]	; (8010b2c <dcd_event_handler+0x1ac>)
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a90:	f88d 1005 	strb.w	r1, [sp, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8010a94:	6815      	ldr	r5, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a96:	f88d 3004 	strb.w	r3, [sp, #4]
 8010a9a:	2e00      	cmp	r6, #0
 8010a9c:	d134      	bne.n	8010b08 <dcd_event_handler+0x188>
  qhdl->interrupt_set(false);
 8010a9e:	462c      	mov	r4, r5
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f854 3b04 	ldr.w	r3, [r4], #4
 8010aa6:	4798      	blx	r3
  bool success = tu_fifo_write(&qhdl->ff, data);
 8010aa8:	a901      	add	r1, sp, #4
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f7ff f888 	bl	800fbc0 <tu_fifo_write>
 8010ab0:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8010ab2:	682b      	ldr	r3, [r5, #0]
 8010ab4:	2001      	movs	r0, #1
 8010ab6:	4798      	blx	r3
  TU_ASSERT(success);
 8010ab8:	2c00      	cmp	r4, #0
 8010aba:	d189      	bne.n	80109d0 <dcd_event_handler+0x50>
 8010abc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010ac0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010ac4:	07db      	lsls	r3, r3, #31
 8010ac6:	d583      	bpl.n	80109d0 <dcd_event_handler+0x50>
 8010ac8:	be00      	bkpt	0x0000
}
 8010aca:	e781      	b.n	80109d0 <dcd_event_handler+0x50>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010acc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8010b38 <dcd_event_handler+0x1b8>
 8010ad0:	e004      	b.n	8010adc <dcd_event_handler+0x15c>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010ad2:	3401      	adds	r4, #1
 8010ad4:	1c53      	adds	r3, r2, #1
 8010ad6:	b2e4      	uxtb	r4, r4
 8010ad8:	42a3      	cmp	r3, r4
 8010ada:	dbca      	blt.n	8010a72 <dcd_event_handler+0xf2>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010adc:	2c01      	cmp	r4, #1
 8010ade:	d8f8      	bhi.n	8010ad2 <dcd_event_handler+0x152>
 8010ae0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
        if (driver && driver->sof)
 8010ae4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8010ae8:	695b      	ldr	r3, [r3, #20]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d0f1      	beq.n	8010ad2 <dcd_event_handler+0x152>
          driver->sof(event->rhport, event->sof.frame_count);
 8010aee:	6869      	ldr	r1, [r5, #4]
 8010af0:	7828      	ldrb	r0, [r5, #0]
 8010af2:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010af4:	783a      	ldrb	r2, [r7, #0]
 8010af6:	e7ec      	b.n	8010ad2 <dcd_event_handler+0x152>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010af8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010afc:	f8d9 1000 	ldr.w	r1, [r9]
        if (driver && driver->sof)
 8010b00:	eb11 01c3 	adds.w	r1, r1, r3, lsl #3
 8010b04:	d09a      	beq.n	8010a3c <dcd_event_handler+0xbc>
 8010b06:	e7a8      	b.n	8010a5a <dcd_event_handler+0xda>
  bool success = tu_fifo_write(&qhdl->ff, data);
 8010b08:	a901      	add	r1, sp, #4
 8010b0a:	1d28      	adds	r0, r5, #4
 8010b0c:	f7ff f858 	bl	800fbc0 <tu_fifo_write>
 8010b10:	4604      	mov	r4, r0
  TU_ASSERT(success);
 8010b12:	2c00      	cmp	r4, #0
 8010b14:	f47f af5c 	bne.w	80109d0 <dcd_event_handler+0x50>
 8010b18:	e7d0      	b.n	8010abc <dcd_event_handler+0x13c>
      osal_queue_send(_usbd_q, event, in_isr);
 8010b1a:	4b04      	ldr	r3, [pc, #16]	; (8010b2c <dcd_event_handler+0x1ac>)
 8010b1c:	681f      	ldr	r7, [r3, #0]
  if (!in_isr) {
 8010b1e:	2900      	cmp	r1, #0
 8010b20:	f47f af65 	bne.w	80109ee <dcd_event_handler+0x6e>
 8010b24:	e745      	b.n	80109b2 <dcd_event_handler+0x32>
 8010b26:	bf00      	nop
 8010b28:	24002b10 	.word	0x24002b10
 8010b2c:	24002b48 	.word	0x24002b48
 8010b30:	24002b0c 	.word	0x24002b0c
 8010b34:	00000000 	.word	0x00000000
 8010b38:	08015aa4 	.word	0x08015aa4
 8010b3c:	24002b08 	.word	0x24002b08

08010b40 <usbd_open_edpt_pair>:
{
 8010b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b44:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  for(int i=0; i<ep_count; i++)
 8010b48:	2a00      	cmp	r2, #0
 8010b4a:	d046      	beq.n	8010bda <usbd_open_edpt_pair+0x9a>
 8010b4c:	460c      	mov	r4, r1
 8010b4e:	461e      	mov	r6, r3
 8010b50:	4615      	mov	r5, r2
 8010b52:	f04f 0b00 	mov.w	fp, #0
  rhport = _usbd_rhport;
 8010b56:	4f23      	ldr	r7, [pc, #140]	; (8010be4 <usbd_open_edpt_pair+0xa4>)
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010b58:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010be8 <usbd_open_edpt_pair+0xa8>
 8010b5c:	e015      	b.n	8010b8a <usbd_open_edpt_pair+0x4a>
 8010b5e:	f899 1002 	ldrb.w	r1, [r9, #2]
 8010b62:	f001 fa39 	bl	8011fd8 <tu_edpt_validate>
 8010b66:	4603      	mov	r3, r0
  return dcd_edpt_open(rhport, desc_ep);
 8010b68:	4621      	mov	r1, r4
 8010b6a:	4650      	mov	r0, sl
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010b6c:	b1eb      	cbz	r3, 8010baa <usbd_open_edpt_pair+0x6a>
  return dcd_edpt_open(rhport, desc_ep);
 8010b6e:	f000 fb67 	bl	8011240 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010b72:	b308      	cbz	r0, 8010bb8 <usbd_open_edpt_pair+0x78>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8010b74:	78a3      	ldrb	r3, [r4, #2]
 8010b76:	09da      	lsrs	r2, r3, #7
 8010b78:	d127      	bne.n	8010bca <usbd_open_edpt_pair+0x8a>
  for(int i=0; i<ep_count; i++)
 8010b7a:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_out) = desc_ep->bEndpointAddress;
 8010b7e:	f888 3000 	strb.w	r3, [r8]
 8010b82:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
 8010b84:	45ab      	cmp	fp, r5
 8010b86:	441c      	add	r4, r3
 8010b88:	d027      	beq.n	8010bda <usbd_open_edpt_pair+0x9a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010b8a:	7863      	ldrb	r3, [r4, #1]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010b8c:	4620      	mov	r0, r4
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010b8e:	2b05      	cmp	r3, #5
 8010b90:	d112      	bne.n	8010bb8 <usbd_open_edpt_pair+0x78>
 8010b92:	78e1      	ldrb	r1, [r4, #3]
 8010b94:	f001 0103 	and.w	r1, r1, #3
 8010b98:	42b1      	cmp	r1, r6
 8010b9a:	d10d      	bne.n	8010bb8 <usbd_open_edpt_pair+0x78>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010b9c:	78a3      	ldrb	r3, [r4, #2]
  rhport = _usbd_rhport;
 8010b9e:	f897 a000 	ldrb.w	sl, [r7]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8010ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ba6:	2b08      	cmp	r3, #8
 8010ba8:	d9d9      	bls.n	8010b5e <usbd_open_edpt_pair+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010baa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010bae:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010bb2:	07da      	lsls	r2, r3, #31
 8010bb4:	d500      	bpl.n	8010bb8 <usbd_open_edpt_pair+0x78>
 8010bb6:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010bb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010bbc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010bc0:	07db      	lsls	r3, r3, #31
 8010bc2:	d40d      	bmi.n	8010be0 <usbd_open_edpt_pair+0xa0>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010bc4:	2000      	movs	r0, #0
}
 8010bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (*ep_in) = desc_ep->bEndpointAddress;
 8010bca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  for(int i=0; i<ep_count; i++)
 8010bcc:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_in) = desc_ep->bEndpointAddress;
 8010bd0:	7013      	strb	r3, [r2, #0]
  for(int i=0; i<ep_count; i++)
 8010bd2:	45ab      	cmp	fp, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010bd4:	7823      	ldrb	r3, [r4, #0]
 8010bd6:	441c      	add	r4, r3
 8010bd8:	d1d7      	bne.n	8010b8a <usbd_open_edpt_pair+0x4a>
  return true;
 8010bda:	2001      	movs	r0, #1
}
 8010bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010be0:	be00      	bkpt	0x0000
 8010be2:	e7ef      	b.n	8010bc4 <usbd_open_edpt_pair+0x84>
 8010be4:	24000034 	.word	0x24000034
 8010be8:	24002b10 	.word	0x24002b10

08010bec <usbd_edpt_open>:
{
 8010bec:	b538      	push	{r3, r4, r5, lr}
  rhport = _usbd_rhport;
 8010bee:	4b0f      	ldr	r3, [pc, #60]	; (8010c2c <usbd_edpt_open+0x40>)
 8010bf0:	781d      	ldrb	r5, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010bf2:	788b      	ldrb	r3, [r1, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8010bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bf8:	2b08      	cmp	r3, #8
 8010bfa:	d908      	bls.n	8010c0e <usbd_edpt_open+0x22>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010bfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010c00:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010c04:	07db      	lsls	r3, r3, #31
 8010c06:	d500      	bpl.n	8010c0a <usbd_edpt_open+0x1e>
 8010c08:	be00      	bkpt	0x0000
}
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010c0e:	4b08      	ldr	r3, [pc, #32]	; (8010c30 <usbd_edpt_open+0x44>)
 8010c10:	460c      	mov	r4, r1
 8010c12:	4608      	mov	r0, r1
 8010c14:	7899      	ldrb	r1, [r3, #2]
 8010c16:	f001 f9df 	bl	8011fd8 <tu_edpt_validate>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d0ee      	beq.n	8010bfc <usbd_edpt_open+0x10>
  return dcd_edpt_open(rhport, desc_ep);
 8010c1e:	4621      	mov	r1, r4
 8010c20:	4628      	mov	r0, r5
}
 8010c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
 8010c26:	f000 bb0b 	b.w	8011240 <dcd_edpt_open>
 8010c2a:	bf00      	nop
 8010c2c:	24000034 	.word	0x24000034
 8010c30:	24002b10 	.word	0x24002b10

08010c34 <usbd_edpt_claim>:
{
 8010c34:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010c36:	4805      	ldr	r0, [pc, #20]	; (8010c4c <usbd_edpt_claim+0x18>)
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010c38:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010c3a:	09da      	lsrs	r2, r3, #7
 8010c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c40:	3225      	adds	r2, #37	; 0x25
 8010c42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010c46:	4418      	add	r0, r3
 8010c48:	f001 b99a 	b.w	8011f80 <tu_edpt_claim>
 8010c4c:	24002b10 	.word	0x24002b10

08010c50 <usbd_edpt_release>:
{
 8010c50:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010c52:	4805      	ldr	r0, [pc, #20]	; (8010c68 <usbd_edpt_release+0x18>)
  return tu_edpt_release(ep_state, _usbd_mutex);
 8010c54:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010c56:	09da      	lsrs	r2, r3, #7
 8010c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c5c:	3225      	adds	r2, #37	; 0x25
 8010c5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
 8010c62:	4418      	add	r0, r3
 8010c64:	f001 b9a4 	b.w	8011fb0 <tu_edpt_release>
 8010c68:	24002b10 	.word	0x24002b10

08010c6c <usbd_edpt_xfer>:
{
 8010c6c:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010c6e:	4c19      	ldr	r4, [pc, #100]	; (8010cd4 <usbd_edpt_xfer+0x68>)
 8010c70:	f001 0e7f 	and.w	lr, r1, #127	; 0x7f
  rhport = _usbd_rhport;
 8010c74:	4818      	ldr	r0, [pc, #96]	; (8010cd8 <usbd_edpt_xfer+0x6c>)
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010c76:	eb04 044e 	add.w	r4, r4, lr, lsl #1
  rhport = _usbd_rhport;
 8010c7a:	7800      	ldrb	r0, [r0, #0]
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010c7c:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
 8010c80:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
 8010c84:	3420      	adds	r4, #32
 8010c86:	f01c 0f01 	tst.w	ip, #1
 8010c8a:	d008      	beq.n	8010c9e <usbd_edpt_xfer+0x32>
 8010c8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010c90:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010c94:	07da      	lsls	r2, r3, #31
 8010c96:	d500      	bpl.n	8010c9a <usbd_edpt_xfer+0x2e>
 8010c98:	be00      	bkpt	0x0000
 8010c9a:	2000      	movs	r0, #0
}
 8010c9c:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8010c9e:	f894 c005 	ldrb.w	ip, [r4, #5]
 8010ca2:	f04c 0c01 	orr.w	ip, ip, #1
 8010ca6:	f884 c005 	strb.w	ip, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8010caa:	f000 fbd5 	bl	8011458 <dcd_edpt_xfer>
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	d1f4      	bne.n	8010c9c <usbd_edpt_xfer+0x30>
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8010cb2:	7963      	ldrb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010cb4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8010cb8:	f360 0300 	bfi	r3, r0, #0, #1
 8010cbc:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8010cbe:	7963      	ldrb	r3, [r4, #5]
 8010cc0:	f360 0382 	bfi	r3, r0, #2, #1
 8010cc4:	7163      	strb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010cc6:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8010cca:	07db      	lsls	r3, r3, #31
 8010ccc:	d5e5      	bpl.n	8010c9a <usbd_edpt_xfer+0x2e>
 8010cce:	be00      	bkpt	0x0000
}
 8010cd0:	bd10      	pop	{r4, pc}
 8010cd2:	bf00      	nop
 8010cd4:	24002b10 	.word	0x24002b10
 8010cd8:	24000034 	.word	0x24000034

08010cdc <usbd_edpt_busy>:
  return _usbd_dev.ep_status[epnum][dir].busy;
 8010cdc:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8010ce0:	4b04      	ldr	r3, [pc, #16]	; (8010cf4 <usbd_edpt_busy+0x18>)
 8010ce2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010ce6:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 8010cea:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
}
 8010cee:	f000 0001 	and.w	r0, r0, #1
 8010cf2:	4770      	bx	lr
 8010cf4:	24002b10 	.word	0x24002b10

08010cf8 <usbd_edpt_stall>:
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8010cf8:	4b0d      	ldr	r3, [pc, #52]	; (8010d30 <usbd_edpt_stall+0x38>)
 8010cfa:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8010cfe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8010d02:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8010d06:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010d0a:	0792      	lsls	r2, r2, #30
 8010d0c:	d500      	bpl.n	8010d10 <usbd_edpt_stall+0x18>
 8010d0e:	4770      	bx	lr
{
 8010d10:	b510      	push	{r4, lr}
 8010d12:	f103 0420 	add.w	r4, r3, #32
  rhport = _usbd_rhport;
 8010d16:	4b07      	ldr	r3, [pc, #28]	; (8010d34 <usbd_edpt_stall+0x3c>)
    dcd_edpt_stall(rhport, ep_addr);
 8010d18:	7818      	ldrb	r0, [r3, #0]
 8010d1a:	f000 fc9b 	bl	8011654 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8010d1e:	7963      	ldrb	r3, [r4, #5]
 8010d20:	f043 0302 	orr.w	r3, r3, #2
 8010d24:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8010d26:	7963      	ldrb	r3, [r4, #5]
 8010d28:	f043 0301 	orr.w	r3, r3, #1
 8010d2c:	7163      	strb	r3, [r4, #5]
}
 8010d2e:	bd10      	pop	{r4, pc}
 8010d30:	24002b10 	.word	0x24002b10
 8010d34:	24000034 	.word	0x24000034

08010d38 <usbd_edpt_stalled>:
  return _usbd_dev.ep_status[epnum][dir].stalled;
 8010d38:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8010d3c:	4b04      	ldr	r3, [pc, #16]	; (8010d50 <usbd_edpt_stalled+0x18>)
 8010d3e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010d42:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 8010d46:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
}
 8010d4a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8010d4e:	4770      	bx	lr
 8010d50:	24002b10 	.word	0x24002b10

08010d54 <tud_control_status>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8010d54:	b410      	push	{r4}
  _ctrl_xfer.request       = (*request);
 8010d56:	4c0a      	ldr	r4, [pc, #40]	; (8010d80 <tud_control_status+0x2c>)
{
 8010d58:	460b      	mov	r3, r1
 8010d5a:	4684      	mov	ip, r0
  _ctrl_xfer.request       = (*request);
 8010d5c:	6808      	ldr	r0, [r1, #0]
 8010d5e:	4622      	mov	r2, r4
 8010d60:	6849      	ldr	r1, [r1, #4]
 8010d62:	c203      	stmia	r2!, {r0, r1}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010d64:	7819      	ldrb	r1, [r3, #0]
  _ctrl_xfer.buffer        = NULL;
 8010d66:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d68:	4660      	mov	r0, ip
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010d6a:	43c9      	mvns	r1, r1
  _ctrl_xfer.buffer        = NULL;
 8010d6c:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8010d6e:	60e3      	str	r3, [r4, #12]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d70:	461a      	mov	r2, r3
 8010d72:	f001 0180 	and.w	r1, r1, #128	; 0x80

  return _status_stage_xact(rhport, request);
}
 8010d76:	f85d 4b04 	ldr.w	r4, [sp], #4
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d7a:	f7ff bf77 	b.w	8010c6c <usbd_edpt_xfer>
 8010d7e:	bf00      	nop
 8010d80:	24002c0c 	.word	0x24002c0c

08010d84 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8010d84:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 8010d86:	4e2a      	ldr	r6, [pc, #168]	; (8010e30 <tud_control_xfer+0xac>)
{
 8010d88:	468c      	mov	ip, r1
 8010d8a:	4605      	mov	r5, r0
  _ctrl_xfer.request       = (*request);
 8010d8c:	6808      	ldr	r0, [r1, #0]
 8010d8e:	46b6      	mov	lr, r6
 8010d90:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8010d92:	60b2      	str	r2, [r6, #8]
{
 8010d94:	b082      	sub	sp, #8
  _ctrl_xfer.request       = (*request);
 8010d96:	e8ae 0003 	stmia.w	lr!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
 8010d9a:	2100      	movs	r1, #0
 8010d9c:	81f1      	strh	r1, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8010d9e:	f8bc 0006 	ldrh.w	r0, [ip, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8010da2:	4283      	cmp	r3, r0
 8010da4:	bf28      	it	cs
 8010da6:	4603      	movcs	r3, r0
 8010da8:	81b3      	strh	r3, [r6, #12]

  if (request->wLength > 0U)
 8010daa:	b188      	cbz	r0, 8010dd0 <tud_control_xfer+0x4c>
  {
    if(_ctrl_xfer.data_len > 0U)
 8010dac:	b32b      	cbz	r3, 8010dfa <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8010dae:	4614      	mov	r4, r2
 8010db0:	b342      	cbz	r2, 8010e04 <tud_control_xfer+0x80>
 8010db2:	2b40      	cmp	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010db4:	f996 2000 	ldrsb.w	r2, [r6]
 8010db8:	bf28      	it	cs
 8010dba:	2340      	movcs	r3, #64	; 0x40
 8010dbc:	2a00      	cmp	r2, #0
 8010dbe:	db2a      	blt.n	8010e16 <tud_control_xfer+0x92>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010dc0:	4a1c      	ldr	r2, [pc, #112]	; (8010e34 <tud_control_xfer+0xb0>)
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f7ff ff52 	bl	8010c6c <usbd_edpt_xfer>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8010dc8:	b170      	cbz	r0, 8010de8 <tud_control_xfer+0x64>
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
 8010dca:	2001      	movs	r0, #1
}
 8010dcc:	b002      	add	sp, #8
 8010dce:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010dd0:	f89c 1000 	ldrb.w	r1, [ip]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	4628      	mov	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010dda:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010ddc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010de0:	f7ff ff44 	bl	8010c6c <usbd_edpt_xfer>
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d1f0      	bne.n	8010dca <tud_control_xfer+0x46>
 8010de8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010dec:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010df0:	07db      	lsls	r3, r3, #31
 8010df2:	d50d      	bpl.n	8010e10 <tud_control_xfer+0x8c>
 8010df4:	be00      	bkpt	0x0000
}
 8010df6:	b002      	add	sp, #8
 8010df8:	bd70      	pop	{r4, r5, r6, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010dfa:	7831      	ldrb	r1, [r6, #0]
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010dfc:	461a      	mov	r2, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010dfe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010e02:	e7de      	b.n	8010dc2 <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 8010e04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010e08:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010e0c:	07da      	lsls	r2, r3, #31
 8010e0e:	d40c      	bmi.n	8010e2a <tud_control_xfer+0xa6>
 8010e10:	2000      	movs	r0, #0
}
 8010e12:	b002      	add	sp, #8
 8010e14:	bd70      	pop	{r4, r5, r6, pc}
  memcpy(dest, src, count);
 8010e16:	461a      	mov	r2, r3
 8010e18:	4621      	mov	r1, r4
 8010e1a:	4806      	ldr	r0, [pc, #24]	; (8010e34 <tud_control_xfer+0xb0>)
 8010e1c:	9301      	str	r3, [sp, #4]
 8010e1e:	f001 fa75 	bl	801230c <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8010e22:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010e24:	4a03      	ldr	r2, [pc, #12]	; (8010e34 <tud_control_xfer+0xb0>)
 8010e26:	9b01      	ldr	r3, [sp, #4]
 8010e28:	e7cb      	b.n	8010dc2 <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 8010e2a:	be00      	bkpt	0x0000
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	e7cd      	b.n	8010dcc <tud_control_xfer+0x48>
 8010e30:	24002c0c 	.word	0x24002c0c
 8010e34:	24002c20 	.word	0x24002c20

08010e38 <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
 8010e38:	4b03      	ldr	r3, [pc, #12]	; (8010e48 <usbd_control_reset+0x10>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	e9c3 2200 	strd	r2, r2, [r3]
 8010e40:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8010e44:	611a      	str	r2, [r3, #16]
}
 8010e46:	4770      	bx	lr
 8010e48:	24002c0c 	.word	0x24002c0c

08010e4c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 8010e4c:	4b01      	ldr	r3, [pc, #4]	; (8010e54 <usbd_control_set_complete_callback+0x8>)
 8010e4e:	6118      	str	r0, [r3, #16]
}
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	24002c0c 	.word	0x24002c0c

08010e58 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8010e58:	b410      	push	{r4}
 8010e5a:	4602      	mov	r2, r0
  _ctrl_xfer.request       = (*request);
 8010e5c:	4c05      	ldr	r4, [pc, #20]	; (8010e74 <usbd_control_set_request+0x1c>)
 8010e5e:	6800      	ldr	r0, [r0, #0]
 8010e60:	4623      	mov	r3, r4
 8010e62:	6851      	ldr	r1, [r2, #4]
 8010e64:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8010e66:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8010e68:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 8010e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	24002c0c 	.word	0x24002c0c

08010e78 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8010e78:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010e7a:	4c45      	ldr	r4, [pc, #276]	; (8010f90 <usbd_control_xfer_cb+0x118>)
 8010e7c:	09c9      	lsrs	r1, r1, #7
{
 8010e7e:	b083      	sub	sp, #12
 8010e80:	4606      	mov	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010e82:	7822      	ldrb	r2, [r4, #0]
{
 8010e84:	461f      	mov	r7, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010e86:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
 8010e8a:	d01a      	beq.n	8010ec2 <usbd_control_xfer_cb+0x4a>
  {
    TU_ASSERT(0 == xferred_bytes);
 8010e8c:	b14b      	cbz	r3, 8010ea2 <usbd_control_xfer_cb+0x2a>
 8010e8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010e92:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010e96:	07da      	lsls	r2, r3, #31
 8010e98:	d45f      	bmi.n	8010f5a <usbd_control_xfer_cb+0xe2>
 8010e9a:	2500      	movs	r5, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	b003      	add	sp, #12
 8010ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8010ea2:	4b3c      	ldr	r3, [pc, #240]	; (8010f94 <usbd_control_xfer_cb+0x11c>)
 8010ea4:	b113      	cbz	r3, 8010eac <usbd_control_xfer_cb+0x34>
 8010ea6:	4621      	mov	r1, r4
 8010ea8:	f3af 8000 	nop.w
    if (_ctrl_xfer.complete_cb)
 8010eac:	6923      	ldr	r3, [r4, #16]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d04f      	beq.n	8010f52 <usbd_control_xfer_cb+0xda>
    return true;
 8010eb2:	2501      	movs	r5, #1
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8010eb4:	4a36      	ldr	r2, [pc, #216]	; (8010f90 <usbd_control_xfer_cb+0x118>)
 8010eb6:	2103      	movs	r1, #3
 8010eb8:	4630      	mov	r0, r6
 8010eba:	4798      	blx	r3
}
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	b003      	add	sp, #12
 8010ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8010ec2:	f994 2000 	ldrsb.w	r2, [r4]
 8010ec6:	2a00      	cmp	r2, #0
 8010ec8:	db06      	blt.n	8010ed8 <usbd_control_xfer_cb+0x60>
    TU_VERIFY(_ctrl_xfer.buffer);
 8010eca:	68a0      	ldr	r0, [r4, #8]
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	d0e4      	beq.n	8010e9a <usbd_control_xfer_cb+0x22>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	4931      	ldr	r1, [pc, #196]	; (8010f98 <usbd_control_xfer_cb+0x120>)
 8010ed4:	f001 fa1a 	bl	801230c <memcpy>
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010ed8:	89e0      	ldrh	r0, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010eda:	88e5      	ldrh	r5, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010edc:	4438      	add	r0, r7
  _ctrl_xfer.buffer += xferred_bytes;
 8010ede:	68a1      	ldr	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010ee0:	b280      	uxth	r0, r0
  _ctrl_xfer.buffer += xferred_bytes;
 8010ee2:	4439      	add	r1, r7
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010ee4:	4285      	cmp	r5, r0
 8010ee6:	bf18      	it	ne
 8010ee8:	2f3f      	cmpne	r7, #63	; 0x3f
  _ctrl_xfer.buffer += xferred_bytes;
 8010eea:	60a1      	str	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010eec:	81e0      	strh	r0, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010eee:	bf94      	ite	ls
 8010ef0:	2501      	movls	r5, #1
 8010ef2:	2500      	movhi	r5, #0
 8010ef4:	d819      	bhi.n	8010f2a <usbd_control_xfer_cb+0xb2>
    if ( _ctrl_xfer.complete_cb )
 8010ef6:	6923      	ldr	r3, [r4, #16]
 8010ef8:	b123      	cbz	r3, 8010f04 <usbd_control_xfer_cb+0x8c>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8010efa:	4a25      	ldr	r2, [pc, #148]	; (8010f90 <usbd_control_xfer_cb+0x118>)
 8010efc:	2102      	movs	r1, #2
 8010efe:	4630      	mov	r0, r6
 8010f00:	4798      	blx	r3
    if ( is_ok )
 8010f02:	b360      	cbz	r0, 8010f5e <usbd_control_xfer_cb+0xe6>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010f04:	7821      	ldrb	r1, [r4, #0]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010f06:	2300      	movs	r3, #0
 8010f08:	4630      	mov	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010f0a:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010f12:	f7ff feab 	bl	8010c6c <usbd_edpt_xfer>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8010f16:	4605      	mov	r5, r0
 8010f18:	b9d8      	cbnz	r0, 8010f52 <usbd_control_xfer_cb+0xda>
    TU_ASSERT( _data_stage_xact(rhport) );
 8010f1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010f1e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010f22:	07db      	lsls	r3, r3, #31
 8010f24:	d5b9      	bpl.n	8010e9a <usbd_control_xfer_cb+0x22>
 8010f26:	be00      	bkpt	0x0000
 8010f28:	e7b8      	b.n	8010e9c <usbd_control_xfer_cb+0x24>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8010f2a:	89a2      	ldrh	r2, [r4, #12]
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010f2c:	f994 4000 	ldrsb.w	r4, [r4]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8010f30:	1a13      	subs	r3, r2, r0
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	2b40      	cmp	r3, #64	; 0x40
 8010f36:	bf28      	it	cs
 8010f38:	2340      	movcs	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010f3a:	2c00      	cmp	r4, #0
 8010f3c:	db18      	blt.n	8010f70 <usbd_control_xfer_cb+0xf8>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010f3e:	4290      	cmp	r0, r2
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8010f40:	4629      	mov	r1, r5
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010f42:	d023      	beq.n	8010f8c <usbd_control_xfer_cb+0x114>
 8010f44:	4a14      	ldr	r2, [pc, #80]	; (8010f98 <usbd_control_xfer_cb+0x120>)
 8010f46:	4630      	mov	r0, r6
 8010f48:	f7ff fe90 	bl	8010c6c <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
 8010f4c:	4605      	mov	r5, r0
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d0e3      	beq.n	8010f1a <usbd_control_xfer_cb+0xa2>
    return true;
 8010f52:	2501      	movs	r5, #1
}
 8010f54:	4628      	mov	r0, r5
 8010f56:	b003      	add	sp, #12
 8010f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_ASSERT(0 == xferred_bytes);
 8010f5a:	be00      	bkpt	0x0000
 8010f5c:	e79d      	b.n	8010e9a <usbd_control_xfer_cb+0x22>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8010f5e:	4601      	mov	r1, r0
 8010f60:	4630      	mov	r0, r6
 8010f62:	f000 fb77 	bl	8011654 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8010f66:	2180      	movs	r1, #128	; 0x80
 8010f68:	4630      	mov	r0, r6
 8010f6a:	f000 fb73 	bl	8011654 <dcd_edpt_stall>
 8010f6e:	e795      	b.n	8010e9c <usbd_control_xfer_cb+0x24>
    if ( xact_len ) {
 8010f70:	4290      	cmp	r0, r2
 8010f72:	d008      	beq.n	8010f86 <usbd_control_xfer_cb+0x10e>
  memcpy(dest, src, count);
 8010f74:	461a      	mov	r2, r3
 8010f76:	4808      	ldr	r0, [pc, #32]	; (8010f98 <usbd_control_xfer_cb+0x120>)
 8010f78:	9301      	str	r3, [sp, #4]
 8010f7a:	f001 f9c7 	bl	801230c <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8010f7e:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010f80:	4a05      	ldr	r2, [pc, #20]	; (8010f98 <usbd_control_xfer_cb+0x120>)
 8010f82:	9b01      	ldr	r3, [sp, #4]
 8010f84:	e7df      	b.n	8010f46 <usbd_control_xfer_cb+0xce>
    ep_addr = EDPT_CTRL_IN;
 8010f86:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010f88:	462a      	mov	r2, r5
 8010f8a:	e7dc      	b.n	8010f46 <usbd_control_xfer_cb+0xce>
 8010f8c:	462a      	mov	r2, r5
 8010f8e:	e7da      	b.n	8010f46 <usbd_control_xfer_cb+0xce>
 8010f90:	24002c0c 	.word	0x24002c0c
 8010f94:	00000000 	.word	0x00000000
 8010f98:	24002c20 	.word	0x24002c20

08010f9c <dcd_int_enable>:
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE
static inline void dwc2_dcd_int_enable(uint8_t rhport)
{
  NVIC_EnableIRQ((IRQn_Type)_dwc2_controller[rhport].irqnum);
 8010f9c:	4b08      	ldr	r3, [pc, #32]	; (8010fc0 <dcd_int_enable+0x24>)
 8010f9e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8010fa2:	6842      	ldr	r2, [r0, #4]
 8010fa4:	b213      	sxth	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	db08      	blt.n	8010fbc <dcd_int_enable+0x20>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010faa:	2101      	movs	r1, #1
 8010fac:	f002 021f 	and.w	r2, r2, #31
 8010fb0:	095b      	lsrs	r3, r3, #5
 8010fb2:	4804      	ldr	r0, [pc, #16]	; (8010fc4 <dcd_int_enable+0x28>)
 8010fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8010fb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}

void dcd_int_enable (uint8_t rhport)
{
  dwc2_dcd_int_enable(rhport);
}
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	08015ad4 	.word	0x08015ad4
 8010fc4:	e000e100 	.word	0xe000e100

08010fc8 <dcd_int_disable>:
}

TU_ATTR_ALWAYS_INLINE
static inline void dwc2_dcd_int_disable (uint8_t rhport)
{
  NVIC_DisableIRQ((IRQn_Type)_dwc2_controller[rhport].irqnum);
 8010fc8:	4b0a      	ldr	r3, [pc, #40]	; (8010ff4 <dcd_int_disable+0x2c>)
 8010fca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8010fce:	6842      	ldr	r2, [r0, #4]
 8010fd0:	b213      	sxth	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	db0d      	blt.n	8010ff2 <dcd_int_disable+0x2a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010fd6:	2101      	movs	r1, #1
 8010fd8:	095b      	lsrs	r3, r3, #5
 8010fda:	f002 021f 	and.w	r2, r2, #31
 8010fde:	4806      	ldr	r0, [pc, #24]	; (8010ff8 <dcd_int_disable+0x30>)
 8010fe0:	3320      	adds	r3, #32
 8010fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8010fe6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010fee:	f3bf 8f6f 	isb	sy

void dcd_int_disable (uint8_t rhport)
{
  dwc2_dcd_int_disable(rhport);
}
 8010ff2:	4770      	bx	lr
 8010ff4:	08015ad4 	.word	0x08015ad4
 8010ff8:	e000e100 	.word	0xe000e100

08010ffc <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8010ffc:	0100      	lsls	r0, r0, #4
 8010ffe:	4b1d      	ldr	r3, [pc, #116]	; (8011074 <dcd_set_address+0x78>)
 8011000:	581b      	ldr	r3, [r3, r0]
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
  xfer->buffer      = buffer;
 8011002:	2000      	movs	r0, #0
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8011004:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8011008:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
{
 801100c:	b430      	push	{r4, r5}
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 801100e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8011012:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  xfer->buffer      = buffer;
 8011016:	4c18      	ldr	r4, [pc, #96]	; (8011078 <dcd_set_address+0x7c>)
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8011018:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
  xfer->buffer      = buffer;
 801101c:	2100      	movs	r1, #0
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 801101e:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8011022:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8011026:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 801102a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 801102e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8011032:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  xfer->buffer      = buffer;
 8011036:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 801103a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
  xfer->ff          = NULL;
  xfer->total_len   = total_bytes;
 801103e:	f04f 0100 	mov.w	r1, #0

  // EP0 can only handle one packet
  if(epnum == 0)
  {
    ep0_pending[dir] = total_bytes;
 8011042:	480e      	ldr	r0, [pc, #56]	; (801107c <dcd_set_address+0x80>)
  xfer->total_len   = total_bytes;
 8011044:	8321      	strh	r1, [r4, #24]
    ep0_pending[dir] = total_bytes;
 8011046:	8041      	strh	r1, [r0, #2]
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011048:	d001      	beq.n	801104e <dcd_set_address+0x52>
}
 801104a:	bc30      	pop	{r4, r5}
 801104c:	4770      	bx	lr
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 801104e:	7f22      	ldrb	r2, [r4, #28]
 8011050:	2a01      	cmp	r2, #1
 8011052:	d1fa      	bne.n	801104a <dcd_set_address+0x4e>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011054:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8011058:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 801105c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8011060:	bf14      	ite	ne
 8011062:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 8011066:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 801106a:	430a      	orrs	r2, r1
 801106c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8011070:	e7eb      	b.n	801104a <dcd_set_address+0x4e>
 8011072:	bf00      	nop
 8011074:	08015ad4 	.word	0x08015ad4
 8011078:	24002c78 	.word	0x24002c78
 801107c:	24002c70 	.word	0x24002c70

08011080 <dcd_connect>:
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011080:	4b04      	ldr	r3, [pc, #16]	; (8011094 <dcd_connect+0x14>)
 8011082:	0100      	lsls	r0, r0, #4
 8011084:	581a      	ldr	r2, [r3, r0]
  dwc2->dctl &= ~DCTL_SDIS;
 8011086:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 801108a:	f023 0302 	bic.w	r3, r3, #2
 801108e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 8011092:	4770      	bx	lr
 8011094:	08015ad4 	.word	0x08015ad4

08011098 <dcd_disconnect>:
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011098:	4b04      	ldr	r3, [pc, #16]	; (80110ac <dcd_disconnect+0x14>)
 801109a:	0100      	lsls	r0, r0, #4
 801109c:	581a      	ldr	r2, [r3, r0]
  dwc2->dctl |= DCTL_SDIS;
 801109e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80110a2:	f043 0302 	orr.w	r3, r3, #2
 80110a6:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 80110aa:	4770      	bx	lr
 80110ac:	08015ad4 	.word	0x08015ad4

080110b0 <dcd_init>:
{
 80110b0:	b538      	push	{r3, r4, r5, lr}
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80110b2:	4c56      	ldr	r4, [pc, #344]	; (801120c <dcd_init+0x15c>)
{
 80110b4:	4605      	mov	r5, r0
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80110b6:	0100      	lsls	r0, r0, #4
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 80110b8:	4b55      	ldr	r3, [pc, #340]	; (8011210 <dcd_init+0x160>)
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80110ba:	4956      	ldr	r1, [pc, #344]	; (8011214 <dcd_init+0x164>)
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80110bc:	5824      	ldr	r4, [r4, r0]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80110be:	4a56      	ldr	r2, [pc, #344]	; (8011218 <dcd_init+0x168>)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 80110c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80110c2:	4003      	ands	r3, r0
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80110c4:	428b      	cmp	r3, r1
 80110c6:	bf18      	it	ne
 80110c8:	4293      	cmpne	r3, r2
 80110ca:	d003      	beq.n	80110d4 <dcd_init+0x24>
 80110cc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d17d      	bne.n	80111d0 <dcd_init+0x120>
  dcd_disconnect(rhport);
 80110d4:	4628      	mov	r0, r5
 80110d6:	f7ff ffdf 	bl	8011098 <dcd_disconnect>
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 80110da:	68e3      	ldr	r3, [r4, #12]
 80110dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e0:	60e3      	str	r3, [r4, #12]
static inline void dwc2_phy_init(dwc2_regs_t * dwc2, uint8_t hs_phy_type)
{
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
  {
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 80110e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80110e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80110e8:	63a3      	str	r3, [r4, #56]	; 0x38
	while ( !(dwc2->grstctl & GRSTCTL_AHBIDL) ) { }
 80110ea:	6923      	ldr	r3, [r4, #16]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	dafc      	bge.n	80110ea <dcd_init+0x3a>
	dwc2->grstctl |= GRSTCTL_CSRST;
 80110f0:	6923      	ldr	r3, [r4, #16]
 80110f2:	f043 0301 	orr.w	r3, r3, #1
 80110f6:	6123      	str	r3, [r4, #16]
	while (dwc2->grstctl & GRSTCTL_CSRST) { }
 80110f8:	6923      	ldr	r3, [r4, #16]
 80110fa:	07db      	lsls	r3, r3, #31
 80110fc:	d4fc      	bmi.n	80110f8 <dcd_init+0x48>
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 80110fe:	68e3      	ldr	r3, [r4, #12]
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
  {
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if ( SystemCoreClock >= 32000000u )
 8011100:	4a46      	ldr	r2, [pc, #280]	; (801121c <dcd_init+0x16c>)
 8011102:	4947      	ldr	r1, [pc, #284]	; (8011220 <dcd_init+0x170>)
 8011104:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8011108:	6812      	ldr	r2, [r2, #0]
 801110a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 801110e:	428a      	cmp	r2, r1
 8011110:	60e3      	str	r3, [r4, #12]
 8011112:	d33a      	bcc.n	801118a <dcd_init+0xda>
 8011114:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    else if ( SystemCoreClock >= 15000000u )
      turnaround = 0xEu;
    else
      turnaround = 0xFu;

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8011118:	68e3      	ldr	r3, [r4, #12]
  dcd_connect(rhport);
 801111a:	4628      	mov	r0, r5
  dwc2->gintmsk = GINTMSK_OTGINT   | GINTMSK_MMISM  | GINTMSK_RXFLVLM  |
 801111c:	4941      	ldr	r1, [pc, #260]	; (8011224 <dcd_init+0x174>)
 801111e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8011122:	4313      	orrs	r3, r2
 8011124:	60e3      	str	r3, [r4, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 8011126:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 801112a:	f043 0303 	orr.w	r3, r3, #3
 801112e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 8011132:	f8d4 3e00 	ldr.w	r3, [r4, #3584]	; 0xe00
 8011136:	f023 030f 	bic.w	r3, r3, #15
 801113a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 801113e:	68e3      	ldr	r3, [r4, #12]
 8011140:	f043 0307 	orr.w	r3, r3, #7
 8011144:	60e3      	str	r3, [r4, #12]
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8011146:	68e3      	ldr	r3, [r4, #12]
 8011148:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801114c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011150:	60e3      	str	r3, [r4, #12]
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8011152:	6823      	ldr	r3, [r4, #0]
 8011154:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8011158:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801115c:	6023      	str	r3, [r4, #0]
  dwc2->dcfg |= DCFG_NZLSOHSK;
 801115e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8011162:	f043 0304 	orr.w	r3, r3, #4
 8011166:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  uint32_t int_mask = dwc2->gintsts;
 801116a:	6962      	ldr	r2, [r4, #20]
  dwc2->gintsts |= int_mask;
 801116c:	6963      	ldr	r3, [r4, #20]
 801116e:	4313      	orrs	r3, r2
 8011170:	6163      	str	r3, [r4, #20]
  int_mask = dwc2->gotgint;
 8011172:	6862      	ldr	r2, [r4, #4]
  dwc2->gotgint |= int_mask;
 8011174:	6863      	ldr	r3, [r4, #4]
 8011176:	4313      	orrs	r3, r2
 8011178:	6063      	str	r3, [r4, #4]
  dwc2->gintmsk = GINTMSK_OTGINT   | GINTMSK_MMISM  | GINTMSK_RXFLVLM  |
 801117a:	61a1      	str	r1, [r4, #24]
  dwc2->gahbcfg |= GAHBCFG_GINT;
 801117c:	68a3      	ldr	r3, [r4, #8]
 801117e:	f043 0301 	orr.w	r3, r3, #1
 8011182:	60a3      	str	r3, [r4, #8]
  dcd_connect(rhport);
 8011184:	f7ff ff7c 	bl	8011080 <dcd_connect>
}
 8011188:	bd38      	pop	{r3, r4, r5, pc}
    else if ( SystemCoreClock >= 27500000u )
 801118a:	4b27      	ldr	r3, [pc, #156]	; (8011228 <dcd_init+0x178>)
 801118c:	429a      	cmp	r2, r3
 801118e:	d827      	bhi.n	80111e0 <dcd_init+0x130>
    else if ( SystemCoreClock >= 24000000u )
 8011190:	4b26      	ldr	r3, [pc, #152]	; (801122c <dcd_init+0x17c>)
 8011192:	429a      	cmp	r2, r3
 8011194:	d227      	bcs.n	80111e6 <dcd_init+0x136>
    else if ( SystemCoreClock >= 21800000u )
 8011196:	4b26      	ldr	r3, [pc, #152]	; (8011230 <dcd_init+0x180>)
 8011198:	429a      	cmp	r2, r3
 801119a:	d827      	bhi.n	80111ec <dcd_init+0x13c>
    else if ( SystemCoreClock >= 20000000u )
 801119c:	f5a3 13db 	sub.w	r3, r3, #1794048	; 0x1b6000
 80111a0:	f5a3 53ba 	sub.w	r3, r3, #5952	; 0x1740
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d824      	bhi.n	80111f2 <dcd_init+0x142>
    else if ( SystemCoreClock >= 18500000u )
 80111a8:	f5a3 13b7 	sub.w	r3, r3, #1499136	; 0x16e000
 80111ac:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d821      	bhi.n	80111f8 <dcd_init+0x148>
    else if ( SystemCoreClock >= 17200000u )
 80111b4:	4b1f      	ldr	r3, [pc, #124]	; (8011234 <dcd_init+0x184>)
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d221      	bcs.n	80111fe <dcd_init+0x14e>
    else if ( SystemCoreClock >= 16000000u )
 80111ba:	4b1f      	ldr	r3, [pc, #124]	; (8011238 <dcd_init+0x188>)
 80111bc:	429a      	cmp	r2, r3
 80111be:	d221      	bcs.n	8011204 <dcd_init+0x154>
    else if ( SystemCoreClock >= 15000000u )
 80111c0:	4b1e      	ldr	r3, [pc, #120]	; (801123c <dcd_init+0x18c>)
 80111c2:	429a      	cmp	r2, r3
 80111c4:	bf2c      	ite	cs
 80111c6:	f44f 5260 	movcs.w	r2, #14336	; 0x3800
 80111ca:	f44f 5270 	movcc.w	r2, #15360	; 0x3c00
 80111ce:	e7a3      	b.n	8011118 <dcd_init+0x68>
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80111d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80111d4:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80111d8:	07da      	lsls	r2, r3, #31
 80111da:	d5d5      	bpl.n	8011188 <dcd_init+0xd8>
 80111dc:	be00      	bkpt	0x0000
}
 80111de:	bd38      	pop	{r3, r4, r5, pc}
 80111e0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80111e4:	e798      	b.n	8011118 <dcd_init+0x68>
 80111e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80111ea:	e795      	b.n	8011118 <dcd_init+0x68>
 80111ec:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80111f0:	e792      	b.n	8011118 <dcd_init+0x68>
 80111f2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80111f6:	e78f      	b.n	8011118 <dcd_init+0x68>
 80111f8:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80111fc:	e78c      	b.n	8011118 <dcd_init+0x68>
 80111fe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8011202:	e789      	b.n	8011118 <dcd_init+0x68>
 8011204:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8011208:	e786      	b.n	8011118 <dcd_init+0x68>
 801120a:	bf00      	nop
 801120c:	08015ad4 	.word	0x08015ad4
 8011210:	ffff0000 	.word	0xffff0000
 8011214:	4f540000 	.word	0x4f540000
 8011218:	55310000 	.word	0x55310000
 801121c:	2400001c 	.word	0x2400001c
 8011220:	01e84800 	.word	0x01e84800
 8011224:	80003816 	.word	0x80003816
 8011228:	01a39ddf 	.word	0x01a39ddf
 801122c:	016e3600 	.word	0x016e3600
 8011230:	014ca43f 	.word	0x014ca43f
 8011234:	01067380 	.word	0x01067380
 8011238:	00f42400 	.word	0x00f42400
 801123c:	00e4e1c0 	.word	0x00e4e1c0

08011240 <dcd_edpt_open>:
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011240:	4b4e      	ldr	r3, [pc, #312]	; (801137c <dcd_edpt_open+0x13c>)
 8011242:	0102      	lsls	r2, r0, #4
{
 8011244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011248:	eb03 1e00 	add.w	lr, r3, r0, lsl #4
  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 801124c:	7888      	ldrb	r0, [r1, #2]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 801124e:	589c      	ldr	r4, [r3, r2]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8011250:	f89e 2008 	ldrb.w	r2, [lr, #8]
 8011254:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  TU_ASSERT(epnum < ep_count);
 8011258:	429a      	cmp	r2, r3
 801125a:	d97d      	bls.n	8011358 <dcd_edpt_open+0x118>
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 801125c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8011260:	888e      	ldrh	r6, [r1, #4]
 8011262:	4d47      	ldr	r5, [pc, #284]	; (8011380 <dcd_edpt_open+0x140>)
 8011264:	eb0c 1cd0 	add.w	ip, ip, r0, lsr #7
 8011268:	f3c6 060a 	ubfx	r6, r6, #0, #11
  if(dir == TUSB_DIR_OUT)
 801126c:	09c0      	lsrs	r0, r0, #7
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 801126e:	eb05 1c0c 	add.w	ip, r5, ip, lsl #4
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 8011272:	f106 0503 	add.w	r5, r6, #3
 8011276:	f8ac 600a 	strh.w	r6, [ip, #10]
  xfer->interval = desc_edpt->bInterval;
 801127a:	798f      	ldrb	r7, [r1, #6]
 801127c:	f88c 700c 	strb.w	r7, [ip, #12]
 8011280:	ea4f 0c95 	mov.w	ip, r5, lsr #2
  if(dir == TUSB_DIR_OUT)
 8011284:	d03b      	beq.n	80112fe <dcd_edpt_open+0xbe>
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size/4);
 8011286:	f8de 800c 	ldr.w	r8, [lr, #12]
 801128a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8011384 <dcd_edpt_open+0x144>
 801128e:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 8011292:	ea4f 0798 	mov.w	r7, r8, lsr #2
 8011296:	f8be 2000 	ldrh.w	r2, [lr]
 801129a:	eb02 000c 	add.w	r0, r2, ip
 801129e:	4448      	add	r0, r9
 80112a0:	ebb0 0f98 	cmp.w	r0, r8, lsr #2
 80112a4:	d858      	bhi.n	8011358 <dcd_edpt_open+0x118>
    _allocated_fifo_words_tx += fifo_size;
 80112a6:	4462      	add	r2, ip
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 80112a8:	f103 003f 	add.w	r0, r3, #63	; 0x3f
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80112ac:	78c9      	ldrb	r1, [r1, #3]
 80112ae:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    _allocated_fifo_words_tx += fifo_size;
 80112b2:	b292      	uxth	r2, r2
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 80112b4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    _allocated_fifo_words_tx += fifo_size;
 80112b8:	f8ae 2000 	strh.w	r2, [lr]
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 80112bc:	1aba      	subs	r2, r7, r2
 80112be:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80112c2:	6042      	str	r2, [r0, #4]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80112c4:	f001 0203 	and.w	r2, r1, #3
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 80112c8:	0599      	lsls	r1, r3, #22
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 80112ca:	4610      	mov	r0, r2
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80112cc:	3a01      	subs	r2, #1
 80112ce:	bf18      	it	ne
 80112d0:	2201      	movne	r2, #1
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 80112d2:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80112d6:	f8d5 0900 	ldr.w	r0, [r5, #2304]	; 0x900
 80112da:	ea46 7202 	orr.w	r2, r6, r2, lsl #28
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 80112de:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80112e2:	4302      	orrs	r2, r0
    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80112e4:	2001      	movs	r0, #1
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80112e6:	430a      	orrs	r2, r1
    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80112e8:	fa00 f303 	lsl.w	r3, r0, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80112ec:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80112f0:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 80112f4:	4313      	orrs	r3, r2
 80112f6:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 80112fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 80112fe:	4462      	add	r2, ip
    if (dwc2->grxfsiz < sz)
 8011300:	6a65      	ldr	r5, [r4, #36]	; 0x24
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8011302:	0052      	lsls	r2, r2, #1
 8011304:	320f      	adds	r2, #15
    if (dwc2->grxfsiz < sz)
 8011306:	4295      	cmp	r5, r2
 8011308:	d208      	bcs.n	801131c <dcd_edpt_open+0xdc>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size/4);
 801130a:	4d1e      	ldr	r5, [pc, #120]	; (8011384 <dcd_edpt_open+0x144>)
 801130c:	f8de 700c 	ldr.w	r7, [lr, #12]
 8011310:	882d      	ldrh	r5, [r5, #0]
 8011312:	4415      	add	r5, r2
 8011314:	ebb5 0f97 	cmp.w	r5, r7, lsr #2
 8011318:	d828      	bhi.n	801136c <dcd_edpt_open+0x12c>
      dwc2->grxfsiz = sz;
 801131a:	6262      	str	r2, [r4, #36]	; 0x24
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 801131c:	eb04 1543 	add.w	r5, r4, r3, lsl #5
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8011320:	78c9      	ldrb	r1, [r1, #3]
    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 8011322:	2001      	movs	r0, #1
 8011324:	3310      	adds	r3, #16
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8011326:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 801132a:	fa00 f303 	lsl.w	r3, r0, r3
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 801132e:	4332      	orrs	r2, r6
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8011330:	f001 0603 	and.w	r6, r1, #3
 8011334:	1a31      	subs	r1, r6, r0
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8011336:	ea42 4286 	orr.w	r2, r2, r6, lsl #18
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 801133a:	bf18      	it	ne
 801133c:	2101      	movne	r1, #1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 801133e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8011342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011346:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 801134a:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 801134e:	4313      	orrs	r3, r2
 8011350:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 8011354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size/4);
 8011358:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801135c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011360:	07db      	lsls	r3, r3, #31
 8011362:	d500      	bpl.n	8011366 <dcd_edpt_open+0x126>
  TU_ASSERT(epnum < ep_count);
 8011364:	be00      	bkpt	0x0000
 8011366:	2000      	movs	r0, #0
}
 8011368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size/4);
 801136c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011370:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011374:	07da      	lsls	r2, r3, #31
 8011376:	d5f6      	bpl.n	8011366 <dcd_edpt_open+0x126>
 8011378:	be00      	bkpt	0x0000
 801137a:	e7be      	b.n	80112fa <dcd_edpt_open+0xba>
 801137c:	08015ad4 	.word	0x08015ad4
 8011380:	24002c78 	.word	0x24002c78
 8011384:	24002c60 	.word	0x24002c60

08011388 <dcd_edpt_close_all>:
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011388:	4b30      	ldr	r3, [pc, #192]	; (801144c <dcd_edpt_close_all+0xc4>)
 801138a:	0102      	lsls	r2, r0, #4
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 801138c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011390:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8011394:	589a      	ldr	r2, [r3, r2]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8011396:	7a00      	ldrb	r0, [r0, #8]
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8011398:	f8c2 181c 	str.w	r1, [r2, #2076]	; 0x81c
  for(uint8_t n = 1; n < ep_count; n++)
 801139c:	2801      	cmp	r0, #1
 801139e:	d951      	bls.n	8011444 <dcd_edpt_close_all+0xbc>
    dwc2->epout[n].doepctl = 0;
 80113a0:	2300      	movs	r3, #0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113a2:	492b      	ldr	r1, [pc, #172]	; (8011450 <dcd_edpt_close_all+0xc8>)
  for(uint8_t n = 1; n < ep_count; n++)
 80113a4:	2802      	cmp	r0, #2
    dwc2->epout[n].doepctl = 0;
 80113a6:	f8c2 3b20 	str.w	r3, [r2, #2848]	; 0xb20
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113aa:	854b      	strh	r3, [r1, #42]	; 0x2a
    dwc2->epin[n].diepctl = 0;
 80113ac:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113b0:	874b      	strh	r3, [r1, #58]	; 0x3a
  for(uint8_t n = 1; n < ep_count; n++)
 80113b2:	d047      	beq.n	8011444 <dcd_edpt_close_all+0xbc>
 80113b4:	2803      	cmp	r0, #3
    dwc2->epout[n].doepctl = 0;
 80113b6:	f8c2 3b40 	str.w	r3, [r2, #2880]	; 0xb40
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113ba:	f8a1 304a 	strh.w	r3, [r1, #74]	; 0x4a
    dwc2->epin[n].diepctl = 0;
 80113be:	f8c2 3940 	str.w	r3, [r2, #2368]	; 0x940
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113c2:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  for(uint8_t n = 1; n < ep_count; n++)
 80113c6:	d03d      	beq.n	8011444 <dcd_edpt_close_all+0xbc>
 80113c8:	2804      	cmp	r0, #4
    dwc2->epout[n].doepctl = 0;
 80113ca:	f8c2 3b60 	str.w	r3, [r2, #2912]	; 0xb60
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113ce:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
    dwc2->epin[n].diepctl = 0;
 80113d2:	f8c2 3960 	str.w	r3, [r2, #2400]	; 0x960
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113d6:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
  for(uint8_t n = 1; n < ep_count; n++)
 80113da:	d033      	beq.n	8011444 <dcd_edpt_close_all+0xbc>
 80113dc:	2805      	cmp	r0, #5
    dwc2->epout[n].doepctl = 0;
 80113de:	f8c2 3b80 	str.w	r3, [r2, #2944]	; 0xb80
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113e2:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
    dwc2->epin[n].diepctl = 0;
 80113e6:	f8c2 3980 	str.w	r3, [r2, #2432]	; 0x980
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113ea:	f8a1 309a 	strh.w	r3, [r1, #154]	; 0x9a
  for(uint8_t n = 1; n < ep_count; n++)
 80113ee:	d029      	beq.n	8011444 <dcd_edpt_close_all+0xbc>
 80113f0:	2806      	cmp	r0, #6
    dwc2->epout[n].doepctl = 0;
 80113f2:	f8c2 3ba0 	str.w	r3, [r2, #2976]	; 0xba0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113f6:	f8a1 30aa 	strh.w	r3, [r1, #170]	; 0xaa
    dwc2->epin[n].diepctl = 0;
 80113fa:	f8c2 39a0 	str.w	r3, [r2, #2464]	; 0x9a0
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113fe:	f8a1 30ba 	strh.w	r3, [r1, #186]	; 0xba
  for(uint8_t n = 1; n < ep_count; n++)
 8011402:	d01f      	beq.n	8011444 <dcd_edpt_close_all+0xbc>
 8011404:	2807      	cmp	r0, #7
    dwc2->epout[n].doepctl = 0;
 8011406:	f8c2 3bc0 	str.w	r3, [r2, #3008]	; 0xbc0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801140a:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
    dwc2->epin[n].diepctl = 0;
 801140e:	f8c2 39c0 	str.w	r3, [r2, #2496]	; 0x9c0
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011412:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
  for(uint8_t n = 1; n < ep_count; n++)
 8011416:	d015      	beq.n	8011444 <dcd_edpt_close_all+0xbc>
 8011418:	2808      	cmp	r0, #8
    dwc2->epout[n].doepctl = 0;
 801141a:	f8c2 3be0 	str.w	r3, [r2, #3040]	; 0xbe0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801141e:	f8a1 30ea 	strh.w	r3, [r1, #234]	; 0xea
    dwc2->epin[n].diepctl = 0;
 8011422:	f8c2 39e0 	str.w	r3, [r2, #2528]	; 0x9e0
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011426:	f8a1 30fa 	strh.w	r3, [r1, #250]	; 0xfa
  for(uint8_t n = 1; n < ep_count; n++)
 801142a:	d00b      	beq.n	8011444 <dcd_edpt_close_all+0xbc>
 801142c:	2809      	cmp	r0, #9
    dwc2->epout[n].doepctl = 0;
 801142e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011432:	f8a1 310a 	strh.w	r3, [r1, #266]	; 0x10a
    dwc2->epin[n].diepctl = 0;
 8011436:	f8c2 3a00 	str.w	r3, [r2, #2560]	; 0xa00
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 801143a:	f8a1 311a 	strh.w	r3, [r1, #282]	; 0x11a
  for(uint8_t n = 1; n < ep_count; n++)
 801143e:	d001      	beq.n	8011444 <dcd_edpt_close_all+0xbc>
    dwc2->epout[n].doepctl = 0;
 8011440:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
  _allocated_fifo_words_tx = 16;
 8011444:	4b03      	ldr	r3, [pc, #12]	; (8011454 <dcd_edpt_close_all+0xcc>)
 8011446:	2210      	movs	r2, #16
 8011448:	801a      	strh	r2, [r3, #0]
}
 801144a:	4770      	bx	lr
 801144c:	08015ad4 	.word	0x08015ad4
 8011450:	24002c78 	.word	0x24002c78
 8011454:	24002c60 	.word	0x24002c60

08011458 <dcd_edpt_xfer>:
{
 8011458:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801145a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = buffer;
 801145e:	4d7a      	ldr	r5, [pc, #488]	; (8011648 <dcd_edpt_xfer+0x1f0>)
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8011460:	09ce      	lsrs	r6, r1, #7
  xfer->ff          = NULL;
 8011462:	2700      	movs	r7, #0
  xfer->buffer      = buffer;
 8011464:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8011468:	eb0c 11d1 	add.w	r1, ip, r1, lsr #7
 801146c:	eb05 1c01 	add.w	ip, r5, r1, lsl #4
 8011470:	0109      	lsls	r1, r1, #4
  xfer->ff          = NULL;
 8011472:	f8cc 7004 	str.w	r7, [ip, #4]
  xfer->buffer      = buffer;
 8011476:	506a      	str	r2, [r5, r1]
  xfer->total_len   = total_bytes;
 8011478:	f8ac 3008 	strh.w	r3, [ip, #8]
  if(epnum == 0)
 801147c:	2c00      	cmp	r4, #0
 801147e:	d054      	beq.n	801152a <dcd_edpt_xfer+0xd2>
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
  }
  else
  {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 8011480:	f8bc 200a 	ldrh.w	r2, [ip, #10]
 8011484:	fbb3 f1f2 	udiv	r1, r3, r2
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8011488:	fb02 3211 	mls	r2, r2, r1, r3
    uint16_t num_packets = (total_bytes / xfer->max_size);
 801148c:	b289      	uxth	r1, r1

    // Zero-size packet is special case.
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 801148e:	b292      	uxth	r2, r2
 8011490:	2a00      	cmp	r2, #0
 8011492:	d142      	bne.n	801151a <dcd_edpt_xfer+0xc2>
 8011494:	2b00      	cmp	r3, #0
 8011496:	d040      	beq.n	801151a <dcd_edpt_xfer+0xc2>
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011498:	0100      	lsls	r0, r0, #4
 801149a:	4a6c      	ldr	r2, [pc, #432]	; (801164c <dcd_edpt_xfer+0x1f4>)
 801149c:	5817      	ldr	r7, [r2, r0]
  if ( dir == TUSB_DIR_IN )
 801149e:	b9f6      	cbnz	r6, 80114de <dcd_edpt_xfer+0x86>
    dwc2_epout_t* epout = dwc2->epout;
 80114a0:	f507 6030 	add.w	r0, r7, #2816	; 0xb00
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 80114a4:	0166      	lsls	r6, r4, #5
 80114a6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80114aa:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80114ae:	f00c 4c60 	and.w	ip, ip, #3758096384	; 0xe0000000
 80114b2:	f8c2 c010 	str.w	ip, [r2, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 80114b6:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80114ba:	ea43 030c 	orr.w	r3, r3, ip
 80114be:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 80114c2:	6113      	str	r3, [r2, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80114c4:	5983      	ldr	r3, [r0, r6]
 80114c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80114ca:	5183      	str	r3, [r0, r6]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 80114cc:	5983      	ldr	r3, [r0, r6]
 80114ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80114d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80114d6:	d077      	beq.n	80115c8 <dcd_edpt_xfer+0x170>
    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
  }

  return true;
}
 80114d8:	2001      	movs	r0, #1
 80114da:	bcf0      	pop	{r4, r5, r6, r7}
 80114dc:	4770      	bx	lr
    dwc2_epin_t* epin = dwc2->epin;
 80114de:	f507 6210 	add.w	r2, r7, #2304	; 0x900
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 80114e2:	0160      	lsls	r0, r4, #5
 80114e4:	ea43 41c1 	orr.w	r1, r3, r1, lsl #19
 80114e8:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 80114ec:	6131      	str	r1, [r6, #16]
    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80114ee:	5811      	ldr	r1, [r2, r0]
 80114f0:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 80114f4:	5011      	str	r1, [r2, r0]
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 80114f6:	5811      	ldr	r1, [r2, r0]
 80114f8:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 80114fc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8011500:	d04e      	beq.n	80115a0 <dcd_edpt_xfer+0x148>
    if ( total_bytes != 0 )
 8011502:	2b00      	cmp	r3, #0
 8011504:	d0e8      	beq.n	80114d8 <dcd_edpt_xfer+0x80>
      dwc2->diepempmsk |= (1 << epnum);
 8011506:	2301      	movs	r3, #1
 8011508:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
}
 801150c:	2001      	movs	r0, #1
      dwc2->diepempmsk |= (1 << epnum);
 801150e:	40a3      	lsls	r3, r4
 8011510:	4313      	orrs	r3, r2
 8011512:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
}
 8011516:	bcf0      	pop	{r4, r5, r6, r7}
 8011518:	4770      	bx	lr
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 801151a:	3101      	adds	r1, #1
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801151c:	0100      	lsls	r0, r0, #4
 801151e:	4a4b      	ldr	r2, [pc, #300]	; (801164c <dcd_edpt_xfer+0x1f4>)
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 8011520:	b289      	uxth	r1, r1
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011522:	5817      	ldr	r7, [r2, r0]
  if ( dir == TUSB_DIR_IN )
 8011524:	2e00      	cmp	r6, #0
 8011526:	d0bb      	beq.n	80114a0 <dcd_edpt_xfer+0x48>
 8011528:	e7d9      	b.n	80114de <dcd_edpt_xfer+0x86>
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801152a:	4a48      	ldr	r2, [pc, #288]	; (801164c <dcd_edpt_xfer+0x1f4>)
 801152c:	0100      	lsls	r0, r0, #4
 801152e:	5811      	ldr	r1, [r2, r0]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8011530:	eb05 1206 	add.w	r2, r5, r6, lsl #4
    ep0_pending[dir] -= total_bytes;
 8011534:	4846      	ldr	r0, [pc, #280]	; (8011650 <dcd_edpt_xfer+0x1f8>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011536:	8952      	ldrh	r2, [r2, #10]
 8011538:	429a      	cmp	r2, r3
 801153a:	bf28      	it	cs
 801153c:	461a      	movcs	r2, r3
 801153e:	1a9b      	subs	r3, r3, r2
 8011540:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
  if ( dir == TUSB_DIR_IN )
 8011544:	2e00      	cmp	r6, #0
 8011546:	d151      	bne.n	80115ec <dcd_edpt_xfer+0x194>
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8011548:	f8d1 3b10 	ldr.w	r3, [r1, #2832]	; 0xb10
 801154c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8011550:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8011554:	f8d1 3b10 	ldr.w	r3, [r1, #2832]	; 0xb10
 8011558:	431a      	orrs	r2, r3
 801155a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 801155e:	f8c1 2b10 	str.w	r2, [r1, #2832]	; 0xb10
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8011562:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8011566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801156a:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 801156e:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8011572:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801157a:	d1ad      	bne.n	80114d8 <dcd_edpt_xfer+0x80>
 801157c:	7b2b      	ldrb	r3, [r5, #12]
 801157e:	2b01      	cmp	r3, #1
 8011580:	d1aa      	bne.n	80114d8 <dcd_edpt_xfer+0x80>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011582:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8011586:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 801158a:	f412 7f80 	tst.w	r2, #256	; 0x100
 801158e:	bf14      	ite	ne
 8011590:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8011594:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8011598:	4313      	orrs	r3, r2
 801159a:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 801159e:	e79b      	b.n	80114d8 <dcd_edpt_xfer+0x80>
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 80115a0:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 80115a4:	7f29      	ldrb	r1, [r5, #28]
 80115a6:	2901      	cmp	r1, #1
 80115a8:	d1ab      	bne.n	8011502 <dcd_edpt_xfer+0xaa>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 80115aa:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 80115ae:	f411 7f80 	tst.w	r1, #256	; 0x100
 80115b2:	5811      	ldr	r1, [r2, r0]
 80115b4:	bf14      	ite	ne
 80115b6:	f04f 5580 	movne.w	r5, #268435456	; 0x10000000
 80115ba:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 80115be:	4329      	orrs	r1, r5
 80115c0:	5011      	str	r1, [r2, r0]
    if ( total_bytes != 0 )
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d088      	beq.n	80114d8 <dcd_edpt_xfer+0x80>
 80115c6:	e79e      	b.n	8011506 <dcd_edpt_xfer+0xae>
         XFER_CTL_BASE(epnum, dir)->interval == 1 )
 80115c8:	eb05 1544 	add.w	r5, r5, r4, lsl #5
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 80115cc:	7b2b      	ldrb	r3, [r5, #12]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d182      	bne.n	80114d8 <dcd_edpt_xfer+0x80>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 80115d2:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 80115d6:	5983      	ldr	r3, [r0, r6]
 80115d8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80115dc:	bf14      	ite	ne
 80115de:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 80115e2:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 80115e6:	4313      	orrs	r3, r2
 80115e8:	5183      	str	r3, [r0, r6]
 80115ea:	e775      	b.n	80114d8 <dcd_edpt_xfer+0x80>
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 80115ec:	f442 2300 	orr.w	r3, r2, #524288	; 0x80000
 80115f0:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80115f4:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 80115f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80115fc:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011600:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8011604:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011608:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801160c:	d009      	beq.n	8011622 <dcd_edpt_xfer+0x1ca>
    if ( total_bytes != 0 )
 801160e:	2a00      	cmp	r2, #0
 8011610:	f43f af62 	beq.w	80114d8 <dcd_edpt_xfer+0x80>
      dwc2->diepempmsk |= (1 << epnum);
 8011614:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 8011618:	f043 0301 	orr.w	r3, r3, #1
 801161c:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
 8011620:	e75a      	b.n	80114d8 <dcd_edpt_xfer+0x80>
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011622:	7f2b      	ldrb	r3, [r5, #28]
 8011624:	2b01      	cmp	r3, #1
 8011626:	d1f2      	bne.n	801160e <dcd_edpt_xfer+0x1b6>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011628:	f8d1 0808 	ldr.w	r0, [r1, #2056]	; 0x808
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 801162c:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8011630:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011634:	bf14      	ite	ne
 8011636:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 801163a:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 801163e:	4303      	orrs	r3, r0
 8011640:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8011644:	e7e3      	b.n	801160e <dcd_edpt_xfer+0x1b6>
 8011646:	bf00      	nop
 8011648:	24002c78 	.word	0x24002c78
 801164c:	08015ad4 	.word	0x08015ad4
 8011650:	24002c70 	.word	0x24002c70

08011654 <dcd_edpt_stall>:

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
  (void) rhport;

  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011654:	4b2c      	ldr	r3, [pc, #176]	; (8011708 <dcd_edpt_stall+0xb4>)
 8011656:	0100      	lsls	r0, r0, #4
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8011658:	b410      	push	{r4}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801165a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  if ( dir == TUSB_DIR_IN )
 801165e:	09c9      	lsrs	r1, r1, #7
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011660:	581b      	ldr	r3, [r3, r0]
  if ( dir == TUSB_DIR_IN )
 8011662:	d129      	bne.n	80116b8 <dcd_edpt_stall+0x64>
    dwc2_epout_t* epout = dwc2->epout;
 8011664:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
    if ( (epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA) )
 8011668:	b934      	cbnz	r4, 8011678 <dcd_edpt_stall+0x24>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 801166a:	6813      	ldr	r3, [r2, #0]
  dcd_edpt_disable(rhport, ep_addr, true);
}
 801166c:	f85d 4b04 	ldr.w	r4, [sp], #4
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8011670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011674:	6013      	str	r3, [r2, #0]
}
 8011676:	4770      	bx	lr
    if ( (epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA) )
 8011678:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 801167c:	6811      	ldr	r1, [r2, #0]
 801167e:	2900      	cmp	r1, #0
 8011680:	daf3      	bge.n	801166a <dcd_edpt_stall+0x16>
      dwc2->dctl |= DCTL_SGONAK;
 8011682:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
 8011686:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 801168a:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
      while ( (dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0 ) {}
 801168e:	6959      	ldr	r1, [r3, #20]
 8011690:	0608      	lsls	r0, r1, #24
 8011692:	d5fc      	bpl.n	801168e <dcd_edpt_stall+0x3a>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8011694:	6810      	ldr	r0, [r2, #0]
 8011696:	491d      	ldr	r1, [pc, #116]	; (801170c <dcd_edpt_stall+0xb8>)
 8011698:	4301      	orrs	r1, r0
 801169a:	6011      	str	r1, [r2, #0]
      while ( (epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0 ) {}
 801169c:	6891      	ldr	r1, [r2, #8]
 801169e:	0789      	lsls	r1, r1, #30
 80116a0:	d5fc      	bpl.n	801169c <dcd_edpt_stall+0x48>
      epout[epnum].doepint = DOEPINT_EPDISD;
 80116a2:	2102      	movs	r1, #2
}
 80116a4:	f85d 4b04 	ldr.w	r4, [sp], #4
      epout[epnum].doepint = DOEPINT_EPDISD;
 80116a8:	6091      	str	r1, [r2, #8]
      dwc2->dctl |= DCTL_CGONAK;
 80116aa:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 80116ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80116b2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 80116b6:	4770      	bx	lr
    dwc2_epin_t* epin = dwc2->epin;
 80116b8:	f503 6210 	add.w	r2, r3, #2304	; 0x900
    if ( (epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA) )
 80116bc:	b96c      	cbnz	r4, 80116da <dcd_edpt_stall+0x86>
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 80116be:	6811      	ldr	r1, [r2, #0]
 80116c0:	f041 6102 	orr.w	r1, r1, #136314880	; 0x8200000
 80116c4:	6011      	str	r1, [r2, #0]
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 80116c6:	01a4      	lsls	r4, r4, #6
 80116c8:	f044 0420 	orr.w	r4, r4, #32
 80116cc:	611c      	str	r4, [r3, #16]
    while ( (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0 ) {}
 80116ce:	691a      	ldr	r2, [r3, #16]
 80116d0:	0694      	lsls	r4, r2, #26
 80116d2:	d4fc      	bmi.n	80116ce <dcd_edpt_stall+0x7a>
}
 80116d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116d8:	4770      	bx	lr
    if ( (epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA) )
 80116da:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 80116de:	6811      	ldr	r1, [r2, #0]
 80116e0:	2900      	cmp	r1, #0
 80116e2:	daec      	bge.n	80116be <dcd_edpt_stall+0x6a>
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 80116e4:	6811      	ldr	r1, [r2, #0]
 80116e6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80116ea:	6011      	str	r1, [r2, #0]
      while ( (epin[epnum].diepint & DIEPINT_INEPNE) == 0 ) {}
 80116ec:	6891      	ldr	r1, [r2, #8]
 80116ee:	0648      	lsls	r0, r1, #25
 80116f0:	d5fc      	bpl.n	80116ec <dcd_edpt_stall+0x98>
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 80116f2:	6810      	ldr	r0, [r2, #0]
 80116f4:	4905      	ldr	r1, [pc, #20]	; (801170c <dcd_edpt_stall+0xb8>)
 80116f6:	4301      	orrs	r1, r0
 80116f8:	6011      	str	r1, [r2, #0]
      while ( (epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0 ) {}
 80116fa:	6891      	ldr	r1, [r2, #8]
 80116fc:	0789      	lsls	r1, r1, #30
 80116fe:	d5fc      	bpl.n	80116fa <dcd_edpt_stall+0xa6>
      epin[epnum].diepint = DIEPINT_EPDISD;
 8011700:	2102      	movs	r1, #2
 8011702:	6091      	str	r1, [r2, #8]
 8011704:	e7df      	b.n	80116c6 <dcd_edpt_stall+0x72>
 8011706:	bf00      	nop
 8011708:	08015ad4 	.word	0x08015ad4
 801170c:	40200000 	.word	0x40200000

08011710 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011710:	4b11      	ldr	r3, [pc, #68]	; (8011758 <dcd_edpt_clear_stall+0x48>)
 8011712:	0100      	lsls	r0, r0, #4
 8011714:	f001 027f 	and.w	r2, r1, #127	; 0x7f

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // Clear stall and reset data toggle
  if ( dir == TUSB_DIR_IN )
 8011718:	09c9      	lsrs	r1, r1, #7
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801171a:	581b      	ldr	r3, [r3, r0]
  if ( dir == TUSB_DIR_IN )
 801171c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011720:	d10c      	bne.n	801173c <dcd_edpt_clear_stall+0x2c>
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
  }
  else
  {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 8011722:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8011726:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 801172a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 801172e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8011732:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011736:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  }
}
 801173a:	4770      	bx	lr
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 801173c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8011740:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8011744:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8011748:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 801174c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011750:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8011754:	4770      	bx	lr
 8011756:	bf00      	nop
 8011758:	08015ad4 	.word	0x08015ad4

0801175c <dcd_int_handler>:
    }
  }
}

void dcd_int_handler(uint8_t rhport)
{
 801175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011760:	4e95      	ldr	r6, [pc, #596]	; (80119b8 <dcd_int_handler+0x25c>)
 8011762:	ea4f 1a00 	mov.w	sl, r0, lsl #4
{
 8011766:	b089      	sub	sp, #36	; 0x24
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011768:	f856 400a 	ldr.w	r4, [r6, sl]
 801176c:	eb06 1200 	add.w	r2, r6, r0, lsl #4
{
 8011770:	9001      	str	r0, [sp, #4]

  uint32_t const int_mask = dwc2->gintmsk;
 8011772:	69a3      	ldr	r3, [r4, #24]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011774:	46a3      	mov	fp, r4
  uint32_t const int_status = dwc2->gintsts & int_mask;
 8011776:	6967      	ldr	r7, [r4, #20]
 8011778:	401f      	ands	r7, r3

  if(int_status & GINTSTS_USBRST)
 801177a:	04fd      	lsls	r5, r7, #19
 801177c:	f100 8207 	bmi.w	8011b8e <dcd_int_handler+0x432>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
    bus_reset(rhport);
  }

  if(int_status & GINTSTS_ENUMDNE)
 8011780:	04b8      	lsls	r0, r7, #18
 8011782:	d51e      	bpl.n	80117c2 <dcd_int_handler+0x66>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    dwc2->gintsts = GINTSTS_ENUMDNE;
 8011784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011788:	6163      	str	r3, [r4, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos)
 801178a:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
 801178e:	f012 0f06 	tst.w	r2, #6
 8011792:	f3c2 0341 	ubfx	r3, r2, #1, #2
 8011796:	f000 8303 	beq.w	8011da0 <dcd_int_handler+0x644>
    {
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 801179a:	f1a3 0302 	sub.w	r3, r3, #2
 801179e:	fab3 f383 	clz	r3, r3
 80117a2:	095b      	lsrs	r3, r3, #5
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 80117a4:	2200      	movs	r2, #0
 80117a6:	a805      	add	r0, sp, #20
 80117a8:	2101      	movs	r1, #1
 80117aa:	9205      	str	r2, [sp, #20]
 80117ac:	e9c0 2201 	strd	r2, r2, [r0, #4]
  event.bus_reset.speed = speed;
 80117b0:	f88d 3018 	strb.w	r3, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 80117b4:	9b01      	ldr	r3, [sp, #4]
 80117b6:	f88d 1015 	strb.w	r1, [sp, #21]
 80117ba:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 80117be:	f7ff f8df 	bl	8010980 <dcd_event_handler>
    }

    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & GINTSTS_USBSUSP)
 80117c2:	0539      	lsls	r1, r7, #20
 80117c4:	f100 81bd 	bmi.w	8011b42 <dcd_int_handler+0x3e6>
  {
    dwc2->gintsts = GINTSTS_USBSUSP;
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & GINTSTS_WKUINT)
 80117c8:	2f00      	cmp	r7, #0
 80117ca:	f2c0 81ce 	blt.w	8011b6a <dcd_int_handler+0x40e>
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if(int_status & GINTSTS_OTGINT)
 80117ce:	077a      	lsls	r2, r7, #29
 80117d0:	d504      	bpl.n	80117dc <dcd_int_handler+0x80>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 80117d2:	6865      	ldr	r5, [r4, #4]

    if (otg_int & GOTGINT_SEDET)
 80117d4:	076b      	lsls	r3, r5, #29
 80117d6:	f100 82e5 	bmi.w	8011da4 <dcd_int_handler+0x648>
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 80117da:	6065      	str	r5, [r4, #4]
  }

  if(int_status & GINTSTS_SOF)
 80117dc:	0738      	lsls	r0, r7, #28
 80117de:	d518      	bpl.n	8011812 <dcd_int_handler+0xb6>
  {
    dwc2->gotgint = GINTSTS_SOF;

    if (_sof_en)
 80117e0:	4b76      	ldr	r3, [pc, #472]	; (80119bc <dcd_int_handler+0x260>)
    dwc2->gotgint = GINTSTS_SOF;
 80117e2:	2208      	movs	r2, #8
    if (_sof_en)
 80117e4:	781b      	ldrb	r3, [r3, #0]
    dwc2->gotgint = GINTSTS_SOF;
 80117e6:	6062      	str	r2, [r4, #4]
    if (_sof_en)
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f040 82ea 	bne.w	8011dc2 <dcd_int_handler+0x666>
      dcd_event_sof(rhport, frame, true);
    }
    else
    {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 80117ee:	69a3      	ldr	r3, [r4, #24]
 80117f0:	a805      	add	r0, sp, #20
 80117f2:	f023 0308 	bic.w	r3, r3, #8
 80117f6:	61a3      	str	r3, [r4, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80117f8:	2300      	movs	r3, #0
  dcd_event_handler(&event, in_isr);
 80117fa:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80117fc:	9305      	str	r3, [sp, #20]
 80117fe:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011802:	9b01      	ldr	r3, [sp, #4]
 8011804:	f88d 3014 	strb.w	r3, [sp, #20]
 8011808:	2303      	movs	r3, #3
 801180a:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 801180e:	f7ff f8b7 	bl	8010980 <dcd_event_handler>

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & GINTSTS_RXFLVL)
 8011812:	06f9      	lsls	r1, r7, #27
 8011814:	f140 8084 	bpl.w	8011920 <dcd_int_handler+0x1c4>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 8011818:	69a3      	ldr	r3, [r4, #24]
 801181a:	f023 0310 	bic.w	r3, r3, #16
 801181e:	61a3      	str	r3, [r4, #24]
      if ( xfer->ff )
 8011820:	4b67      	ldr	r3, [pc, #412]	; (80119c0 <dcd_int_handler+0x264>)
  uint32_t const ctl_word = dwc2->grxstsp;
 8011822:	6a21      	ldr	r1, [r4, #32]
  uint8_t  const epnum    = (ctl_word & GRXSTSP_EPNUM_Msk  ) >> GRXSTSP_EPNUM_Pos;
 8011824:	f001 050f 	and.w	r5, r1, #15
  uint16_t const bcnt     = (ctl_word & GRXSTSP_BCNT_Msk   ) >> GRXSTSP_BCNT_Pos;
 8011828:	f3c1 180a 	ubfx	r8, r1, #4, #11
  switch ( pktsts )
 801182c:	f3c1 4143 	ubfx	r1, r1, #17, #4
 8011830:	3901      	subs	r1, #1
 8011832:	2905      	cmp	r1, #5
 8011834:	f200 80b7 	bhi.w	80119a6 <dcd_int_handler+0x24a>
 8011838:	e8df f001 	tbb	[pc, r1]
 801183c:	117a910a 	.word	0x117a910a
 8011840:	03b5      	.short	0x03b5
      _setup_packet[0] = (*rx_fifo);
 8011842:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8011846:	4a5f      	ldr	r2, [pc, #380]	; (80119c4 <dcd_int_handler+0x268>)
 8011848:	6821      	ldr	r1, [r4, #0]
 801184a:	6011      	str	r1, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 801184c:	6821      	ldr	r1, [r4, #0]
 801184e:	6051      	str	r1, [r2, #4]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_irq(rhport);
    } while(dwc2->gotgint & GINTSTS_RXFLVL);
 8011850:	f8db 2004 	ldr.w	r2, [fp, #4]
 8011854:	06d5      	lsls	r5, r2, #27
 8011856:	d50e      	bpl.n	8011876 <dcd_int_handler+0x11a>
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011858:	f856 400a 	ldr.w	r4, [r6, sl]
 801185c:	e7e1      	b.n	8011822 <dcd_int_handler+0xc6>
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 801185e:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 8011862:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 8011866:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 801186a:	f8c4 2b10 	str.w	r2, [r4, #2832]	; 0xb10
    } while(dwc2->gotgint & GINTSTS_RXFLVL);
 801186e:	f8db 2004 	ldr.w	r2, [fp, #4]
 8011872:	06d5      	lsls	r5, r2, #27
 8011874:	d4f0      	bmi.n	8011858 <dcd_int_handler+0xfc>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8011876:	4954      	ldr	r1, [pc, #336]	; (80119c8 <dcd_int_handler+0x26c>)
 8011878:	780b      	ldrb	r3, [r1, #0]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d04a      	beq.n	8011914 <dcd_int_handler+0x1b8>
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 801187e:	eb06 030a 	add.w	r3, r6, sl
 8011882:	7a1a      	ldrb	r2, [r3, #8]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 8011884:	2a00      	cmp	r2, #0
 8011886:	f000 8372 	beq.w	8011f6e <dcd_int_handler+0x812>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 801188a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80119c0 <dcd_int_handler+0x264>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 801188e:	2a01      	cmp	r2, #1
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8011890:	f8b9 300a 	ldrh.w	r3, [r9, #10]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 8011894:	d035      	beq.n	8011902 <dcd_int_handler+0x1a6>
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8011896:	f8b9 002a 	ldrh.w	r0, [r9, #42]	; 0x2a
 801189a:	4283      	cmp	r3, r0
 801189c:	bf38      	it	cc
 801189e:	4603      	movcc	r3, r0
 80118a0:	2a02      	cmp	r2, #2
 80118a2:	d02e      	beq.n	8011902 <dcd_int_handler+0x1a6>
 80118a4:	f8b9 004a 	ldrh.w	r0, [r9, #74]	; 0x4a
 80118a8:	4283      	cmp	r3, r0
 80118aa:	bf38      	it	cc
 80118ac:	4603      	movcc	r3, r0
 80118ae:	2a03      	cmp	r2, #3
 80118b0:	d027      	beq.n	8011902 <dcd_int_handler+0x1a6>
 80118b2:	f8b9 006a 	ldrh.w	r0, [r9, #106]	; 0x6a
 80118b6:	4283      	cmp	r3, r0
 80118b8:	bf38      	it	cc
 80118ba:	4603      	movcc	r3, r0
 80118bc:	2a04      	cmp	r2, #4
 80118be:	d020      	beq.n	8011902 <dcd_int_handler+0x1a6>
 80118c0:	f8b9 008a 	ldrh.w	r0, [r9, #138]	; 0x8a
 80118c4:	4283      	cmp	r3, r0
 80118c6:	bf38      	it	cc
 80118c8:	4603      	movcc	r3, r0
 80118ca:	2a05      	cmp	r2, #5
 80118cc:	d019      	beq.n	8011902 <dcd_int_handler+0x1a6>
 80118ce:	f8b9 00aa 	ldrh.w	r0, [r9, #170]	; 0xaa
 80118d2:	4283      	cmp	r3, r0
 80118d4:	bf38      	it	cc
 80118d6:	4603      	movcc	r3, r0
 80118d8:	2a06      	cmp	r2, #6
 80118da:	d012      	beq.n	8011902 <dcd_int_handler+0x1a6>
 80118dc:	f8b9 00ca 	ldrh.w	r0, [r9, #202]	; 0xca
 80118e0:	4283      	cmp	r3, r0
 80118e2:	bf38      	it	cc
 80118e4:	4603      	movcc	r3, r0
 80118e6:	2a07      	cmp	r2, #7
 80118e8:	d00b      	beq.n	8011902 <dcd_int_handler+0x1a6>
 80118ea:	f8b9 00ea 	ldrh.w	r0, [r9, #234]	; 0xea
 80118ee:	4283      	cmp	r3, r0
 80118f0:	bf38      	it	cc
 80118f2:	4603      	movcc	r3, r0
 80118f4:	2a08      	cmp	r2, #8
 80118f6:	d004      	beq.n	8011902 <dcd_int_handler+0x1a6>
 80118f8:	f8b9 010a 	ldrh.w	r0, [r9, #266]	; 0x10a
 80118fc:	4283      	cmp	r3, r0
 80118fe:	bf38      	it	cc
 8011900:	4603      	movcc	r3, r0
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8011902:	089b      	lsrs	r3, r3, #2
 8011904:	4413      	add	r3, r2
 8011906:	005b      	lsls	r3, r3, #1
 8011908:	330f      	adds	r3, #15
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 801190a:	b29b      	uxth	r3, r3
 801190c:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    {
      update_grxfsiz(rhport);

      // Disable flag
      _out_ep_closed = false;
 8011910:	2300      	movs	r3, #0
 8011912:	700b      	strb	r3, [r1, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 8011914:	f8db 3018 	ldr.w	r3, [fp, #24]
 8011918:	f043 0310 	orr.w	r3, r3, #16
 801191c:	f8cb 3018 	str.w	r3, [fp, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & GINTSTS_OEPINT)
 8011920:	033c      	lsls	r4, r7, #12
 8011922:	f100 80a7 	bmi.w	8011a74 <dcd_int_handler+0x318>
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
  }

  // IN endpoint interrupt handling.
  if(int_status & GINTSTS_IEPINT)
 8011926:	037c      	lsls	r4, r7, #13
 8011928:	d454      	bmi.n	80119d4 <dcd_int_handler+0x278>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 801192a:	b009      	add	sp, #36	; 0x24
 801192c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8011930:	2d00      	cmp	r5, #0
 8011932:	d18d      	bne.n	8011850 <dcd_int_handler+0xf4>
 8011934:	f1b8 0f00 	cmp.w	r8, #0
 8011938:	d18a      	bne.n	8011850 <dcd_int_handler+0xf4>
 801193a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801193c:	4923      	ldr	r1, [pc, #140]	; (80119cc <dcd_int_handler+0x270>)
 801193e:	428a      	cmp	r2, r1
 8011940:	d986      	bls.n	8011850 <dcd_int_handler+0xf4>
          uint32_t doepint = epout->doepint;
 8011942:	f8d4 2b08 	ldr.w	r2, [r4, #2824]	; 0xb08
          if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR))
 8011946:	f248 0120 	movw	r1, #32800	; 0x8020
 801194a:	420a      	tst	r2, r1
 801194c:	d080      	beq.n	8011850 <dcd_int_handler+0xf4>
            if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 801194e:	f012 0f20 	tst.w	r2, #32
 8011952:	bf0c      	ite	eq
 8011954:	2201      	moveq	r2, #1
 8011956:	2221      	movne	r2, #33	; 0x21
            epout->doepint = clear_flags;
 8011958:	f8c4 2b08 	str.w	r2, [r4, #2824]	; 0xb08
 801195c:	e778      	b.n	8011850 <dcd_int_handler+0xf4>
      if ( xfer->ff )
 801195e:	eb03 1245 	add.w	r2, r3, r5, lsl #5
 8011962:	ea4f 1945 	mov.w	r9, r5, lsl #5
 8011966:	6850      	ldr	r0, [r2, #4]
 8011968:	2800      	cmp	r0, #0
 801196a:	f000 81ed 	beq.w	8011d48 <dcd_int_handler+0x5ec>
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 801196e:	4642      	mov	r2, r8
 8011970:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
 8011974:	f7fe fa06 	bl	800fd84 <tu_fifo_write_n_const_addr_full_words>
 8011978:	4b11      	ldr	r3, [pc, #68]	; (80119c0 <dcd_int_handler+0x264>)
      if ( bcnt < xfer->max_size )
 801197a:	eb03 0109 	add.w	r1, r3, r9
 801197e:	894a      	ldrh	r2, [r1, #10]
 8011980:	4542      	cmp	r2, r8
 8011982:	f67f af65 	bls.w	8011850 <dcd_int_handler+0xf4>
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8011986:	44a1      	add	r9, r4
 8011988:	890a      	ldrh	r2, [r1, #8]
 801198a:	f8d9 0b10 	ldr.w	r0, [r9, #2832]	; 0xb10
 801198e:	1a12      	subs	r2, r2, r0
 8011990:	b292      	uxth	r2, r2
 8011992:	810a      	strh	r2, [r1, #8]
        if ( epnum == 0 )
 8011994:	2d00      	cmp	r5, #0
 8011996:	f47f af5b 	bne.w	8011850 <dcd_int_handler+0xf4>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 801199a:	480d      	ldr	r0, [pc, #52]	; (80119d0 <dcd_int_handler+0x274>)
 801199c:	8801      	ldrh	r1, [r0, #0]
          ep0_pending[TUSB_DIR_OUT] = 0;
 801199e:	8005      	strh	r5, [r0, #0]
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 80119a0:	1a52      	subs	r2, r2, r1
 80119a2:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 80119a4:	e754      	b.n	8011850 <dcd_int_handler+0xf4>
      TU_BREAKPOINT();
 80119a6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80119aa:	f8d2 2df0 	ldr.w	r2, [r2, #3568]	; 0xdf0
 80119ae:	07d2      	lsls	r2, r2, #31
 80119b0:	f57f af4e 	bpl.w	8011850 <dcd_int_handler+0xf4>
 80119b4:	be00      	bkpt	0x0000
 80119b6:	e74b      	b.n	8011850 <dcd_int_handler+0xf4>
 80119b8:	08015ad4 	.word	0x08015ad4
 80119bc:	24002c6c 	.word	0x24002c6c
 80119c0:	24002c78 	.word	0x24002c78
 80119c4:	24002c64 	.word	0x24002c64
 80119c8:	24002c62 	.word	0x24002c62
 80119cc:	4f543009 	.word	0x4f543009
 80119d0:	24002c70 	.word	0x24002c70
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 80119d4:	eb06 030a 	add.w	r3, r6, sl
 80119d8:	f856 600a 	ldr.w	r6, [r6, sl]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80119dc:	f893 a008 	ldrb.w	sl, [r3, #8]
  dwc2_epin_t* epin      = dwc2->epin;
 80119e0:	f506 6410 	add.w	r4, r6, #2304	; 0x900
  for ( uint8_t n = 0; n < ep_count; n++ )
 80119e4:	f1ba 0f00 	cmp.w	sl, #0
 80119e8:	d09f      	beq.n	801192a <dcd_int_handler+0x1ce>
 80119ea:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8011d38 <dcd_int_handler+0x5dc>
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 80119ee:	2500      	movs	r5, #0
 80119f0:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8011d38 <dcd_int_handler+0x5dc>
 80119f4:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
        if ( (n == 0) && ep0_pending[TUSB_DIR_IN] )
 80119f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80119fc:	462a      	mov	r2, r5
    if ( dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n) )
 80119fe:	f8d6 3818 	ldr.w	r3, [r6, #2072]	; 0x818
 8011a02:	40eb      	lsrs	r3, r5
 8011a04:	07d8      	lsls	r0, r3, #31
 8011a06:	d529      	bpl.n	8011a5c <dcd_int_handler+0x300>
      if ( epin[n].diepint & DIEPINT_XFRC )
 8011a08:	68a3      	ldr	r3, [r4, #8]
 8011a0a:	07d9      	lsls	r1, r3, #31
 8011a0c:	d51b      	bpl.n	8011a46 <dcd_int_handler+0x2ea>
        epin[n].diepint = DIEPINT_XFRC;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	60a3      	str	r3, [r4, #8]
        if ( (n == 0) && ep0_pending[TUSB_DIR_IN] )
 8011a12:	b925      	cbnz	r5, 8011a1e <dcd_int_handler+0x2c2>
 8011a14:	4bc5      	ldr	r3, [pc, #788]	; (8011d2c <dcd_int_handler+0x5d0>)
 8011a16:	885b      	ldrh	r3, [r3, #2]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	f040 8239 	bne.w	8011e90 <dcd_int_handler+0x734>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011a1e:	2300      	movs	r3, #0
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8011a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
  dcd_event_handler(&event, in_isr);
 8011a24:	a805      	add	r0, sp, #20
 8011a26:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011a28:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011a2c:	9b01      	ldr	r3, [sp, #4]
  event.xfer_complete.ep_addr = ep_addr;
 8011a2e:	f88d 2018 	strb.w	r2, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011a32:	f88d 3014 	strb.w	r3, [sp, #20]
 8011a36:	f8b8 3018 	ldrh.w	r3, [r8, #24]
  event.xfer_complete.len     = xferred_bytes;
 8011a3a:	9307      	str	r3, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011a3c:	2307      	movs	r3, #7
 8011a3e:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011a42:	f7fe ff9d 	bl	8010980 <dcd_event_handler>
      if ( (epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n)) )
 8011a46:	68a3      	ldr	r3, [r4, #8]
 8011a48:	061a      	lsls	r2, r3, #24
 8011a4a:	d507      	bpl.n	8011a5c <dcd_int_handler+0x300>
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8011a52:	40aa      	lsls	r2, r5
 8011a54:	421a      	tst	r2, r3
 8011a56:	9202      	str	r2, [sp, #8]
 8011a58:	f040 81c8 	bne.w	8011dec <dcd_int_handler+0x690>
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011a5c:	3501      	adds	r5, #1
 8011a5e:	3420      	adds	r4, #32
 8011a60:	f108 0820 	add.w	r8, r8, #32
 8011a64:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8011a68:	b2ea      	uxtb	r2, r5
 8011a6a:	4592      	cmp	sl, r2
 8011a6c:	d8c7      	bhi.n	80119fe <dcd_int_handler+0x2a2>
}
 8011a6e:	b009      	add	sp, #36	; 0x24
 8011a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011a74:	eb06 030a 	add.w	r3, r6, sl
 8011a78:	f856 600a 	ldr.w	r6, [r6, sl]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8011a7c:	f893 a008 	ldrb.w	sl, [r3, #8]
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011a80:	f1ba 0f00 	cmp.w	sl, #0
 8011a84:	f43f af51 	beq.w	801192a <dcd_int_handler+0x1ce>
 8011a88:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8011d38 <dcd_int_handler+0x5dc>
 8011a8c:	2400      	movs	r4, #0
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8011a8e:	9d01      	ldr	r5, [sp, #4]
 8011a90:	46c8      	mov	r8, r9
 8011a92:	46a3      	mov	fp, r4
 8011a94:	9702      	str	r7, [sp, #8]
 8011a96:	e042      	b.n	8011b1e <dcd_int_handler+0x3c2>
 8011a98:	6c31      	ldr	r1, [r6, #64]	; 0x40
        uint32_t clear_flag = DOEPINT_STUP;
 8011a9a:	f248 0208 	movw	r2, #32776	; 0x8008
 8011a9e:	4ba4      	ldr	r3, [pc, #656]	; (8011d30 <dcd_int_handler+0x5d4>)
 8011aa0:	4299      	cmp	r1, r3
 8011aa2:	bf98      	it	ls
 8011aa4:	2208      	movls	r2, #8
        epout->doepint = clear_flag;
 8011aa6:	19f1      	adds	r1, r6, r7
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011aa8:	4ba2      	ldr	r3, [pc, #648]	; (8011d34 <dcd_int_handler+0x5d8>)
 8011aaa:	f8c1 2b08 	str.w	r2, [r1, #2824]	; 0xb08
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f88d 5014 	strb.w	r5, [sp, #20]
 8011ab4:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011ab8:	2206      	movs	r2, #6
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011aba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011abe:	ab08      	add	r3, sp, #32
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011ac0:	f88d 2015 	strb.w	r2, [sp, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011ac4:	e903 0003 	stmdb	r3, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8011ac8:	2101      	movs	r1, #1
 8011aca:	a805      	add	r0, sp, #20
 8011acc:	f7fe ff58 	bl	8010980 <dcd_event_handler>
      if ( epout->doepint & DOEPINT_XFRC )
 8011ad0:	19f3      	adds	r3, r6, r7
 8011ad2:	f8d3 2b08 	ldr.w	r2, [r3, #2824]	; 0xb08
 8011ad6:	07d7      	lsls	r7, r2, #31
 8011ad8:	d519      	bpl.n	8011b0e <dcd_int_handler+0x3b2>
        epout->doepint = DOEPINT_XFRC;
 8011ada:	2201      	movs	r2, #1
 8011adc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        if ( (n == 0) && ep0_pending[TUSB_DIR_OUT] )
 8011ae0:	b924      	cbnz	r4, 8011aec <dcd_int_handler+0x390>
 8011ae2:	4b92      	ldr	r3, [pc, #584]	; (8011d2c <dcd_int_handler+0x5d0>)
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f040 81f5 	bne.w	8011ed6 <dcd_int_handler+0x77a>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011aec:	2300      	movs	r3, #0
  dcd_event_handler(&event, in_isr);
 8011aee:	a805      	add	r0, sp, #20
 8011af0:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011af2:	e9cd 3305 	strd	r3, r3, [sp, #20]
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8011af6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  event.xfer_complete.ep_addr = ep_addr;
 8011afa:	f88d b018 	strb.w	fp, [sp, #24]
  event.xfer_complete.len     = xferred_bytes;
 8011afe:	9307      	str	r3, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011b00:	2307      	movs	r3, #7
 8011b02:	f88d 5014 	strb.w	r5, [sp, #20]
 8011b06:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011b0a:	f7fe ff39 	bl	8010980 <dcd_event_handler>
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011b0e:	3401      	adds	r4, #1
 8011b10:	f108 0820 	add.w	r8, r8, #32
 8011b14:	fa5f fb84 	uxtb.w	fp, r4
 8011b18:	45da      	cmp	sl, fp
 8011b1a:	f240 80ff 	bls.w	8011d1c <dcd_int_handler+0x5c0>
    if ( dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n) )
 8011b1e:	f8d6 3818 	ldr.w	r3, [r6, #2072]	; 0x818
 8011b22:	f104 0210 	add.w	r2, r4, #16
 8011b26:	40d3      	lsrs	r3, r2
 8011b28:	07d8      	lsls	r0, r3, #31
 8011b2a:	d5f0      	bpl.n	8011b0e <dcd_int_handler+0x3b2>
      uint32_t const doepint = epout->doepint;
 8011b2c:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8011b30:	0167      	lsls	r7, r4, #5
 8011b32:	f8d3 2b08 	ldr.w	r2, [r3, #2824]	; 0xb08
      if ( doepint & DOEPINT_STUP )
 8011b36:	0711      	lsls	r1, r2, #28
 8011b38:	d5ca      	bpl.n	8011ad0 <dcd_int_handler+0x374>
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8011b3a:	0413      	lsls	r3, r2, #16
 8011b3c:	d4ac      	bmi.n	8011a98 <dcd_int_handler+0x33c>
        uint32_t clear_flag = DOEPINT_STUP;
 8011b3e:	2208      	movs	r2, #8
 8011b40:	e7b1      	b.n	8011aa6 <dcd_int_handler+0x34a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8011b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011b46:	a805      	add	r0, sp, #20
  dcd_event_handler(&event, in_isr);
 8011b48:	2101      	movs	r1, #1
 8011b4a:	6163      	str	r3, [r4, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	9305      	str	r3, [sp, #20]
 8011b50:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011b54:	9b01      	ldr	r3, [sp, #4]
 8011b56:	f88d 3014 	strb.w	r3, [sp, #20]
 8011b5a:	2304      	movs	r3, #4
 8011b5c:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011b60:	f7fe ff0e 	bl	8010980 <dcd_event_handler>
  if(int_status & GINTSTS_WKUINT)
 8011b64:	2f00      	cmp	r7, #0
 8011b66:	f6bf ae32 	bge.w	80117ce <dcd_int_handler+0x72>
    dwc2->gintsts = GINTSTS_WKUINT;
 8011b6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011b6e:	a805      	add	r0, sp, #20
  dcd_event_handler(&event, in_isr);
 8011b70:	2101      	movs	r1, #1
 8011b72:	6163      	str	r3, [r4, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011b74:	2300      	movs	r3, #0
 8011b76:	9305      	str	r3, [sp, #20]
 8011b78:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011b7c:	9b01      	ldr	r3, [sp, #4]
 8011b7e:	f88d 3014 	strb.w	r3, [sp, #20]
 8011b82:	2305      	movs	r3, #5
 8011b84:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011b88:	f7fe fefa 	bl	8010980 <dcd_event_handler>
}
 8011b8c:	e61f      	b.n	80117ce <dcd_int_handler+0x72>
    dwc2->gintsts = GINTSTS_USBRST;
 8011b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8011b92:	7a15      	ldrb	r5, [r2, #8]
  tu_memclr(xfer_status, sizeof(xfer_status));
 8011b94:	2100      	movs	r1, #0
 8011b96:	f44f 7290 	mov.w	r2, #288	; 0x120
    dwc2->gintsts = GINTSTS_USBRST;
 8011b9a:	6163      	str	r3, [r4, #20]
  tu_memclr(xfer_status, sizeof(xfer_status));
 8011b9c:	4866      	ldr	r0, [pc, #408]	; (8011d38 <dcd_int_handler+0x5dc>)
 8011b9e:	f000 fb7c 	bl	801229a <memset>
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8011ba2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
  _out_ep_closed = false;
 8011ba6:	4a65      	ldr	r2, [pc, #404]	; (8011d3c <dcd_int_handler+0x5e0>)
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8011ba8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011bac:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  _out_ep_closed = false;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	7013      	strb	r3, [r2, #0]
  _sof_en = false;
 8011bb4:	4a62      	ldr	r2, [pc, #392]	; (8011d40 <dcd_int_handler+0x5e4>)
 8011bb6:	7013      	strb	r3, [r2, #0]
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bb8:	2d00      	cmp	r5, #0
 8011bba:	d07d      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bbc:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bc0:	2d01      	cmp	r5, #1
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bc6:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bca:	d075      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bcc:	f8d4 3b20 	ldr.w	r3, [r4, #2848]	; 0xb20
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bd0:	2d02      	cmp	r5, #2
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bd6:	f8c4 3b20 	str.w	r3, [r4, #2848]	; 0xb20
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bda:	d06d      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bdc:	f8d4 3b40 	ldr.w	r3, [r4, #2880]	; 0xb40
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011be0:	2d03      	cmp	r5, #3
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011be6:	f8c4 3b40 	str.w	r3, [r4, #2880]	; 0xb40
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bea:	d065      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bec:	f8d4 3b60 	ldr.w	r3, [r4, #2912]	; 0xb60
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bf0:	2d04      	cmp	r5, #4
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bf6:	f8c4 3b60 	str.w	r3, [r4, #2912]	; 0xb60
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bfa:	d05d      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bfc:	f8d4 3b80 	ldr.w	r3, [r4, #2944]	; 0xb80
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c00:	2d05      	cmp	r5, #5
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c06:	f8c4 3b80 	str.w	r3, [r4, #2944]	; 0xb80
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c0a:	d055      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c0c:	f8d4 3ba0 	ldr.w	r3, [r4, #2976]	; 0xba0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c10:	2d06      	cmp	r5, #6
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c16:	f8c4 3ba0 	str.w	r3, [r4, #2976]	; 0xba0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c1a:	d04d      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c1c:	f8d4 3bc0 	ldr.w	r3, [r4, #3008]	; 0xbc0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c20:	2d07      	cmp	r5, #7
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c26:	f8c4 3bc0 	str.w	r3, [r4, #3008]	; 0xbc0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c2a:	d045      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c2c:	f8d4 3be0 	ldr.w	r3, [r4, #3040]	; 0xbe0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c30:	2d08      	cmp	r5, #8
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c36:	f8c4 3be0 	str.w	r3, [r4, #3040]	; 0xbe0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c3a:	d03d      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c3c:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c40:	2d09      	cmp	r5, #9
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c46:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c4a:	d035      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c4c:	f8d4 3c20 	ldr.w	r3, [r4, #3104]	; 0xc20
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c50:	2d0a      	cmp	r5, #10
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c56:	f8c4 3c20 	str.w	r3, [r4, #3104]	; 0xc20
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c5a:	d02d      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c5c:	f8d4 3c40 	ldr.w	r3, [r4, #3136]	; 0xc40
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c60:	2d0b      	cmp	r5, #11
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c66:	f8c4 3c40 	str.w	r3, [r4, #3136]	; 0xc40
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c6a:	d025      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c6c:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c70:	2d0c      	cmp	r5, #12
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c76:	f8c4 3c60 	str.w	r3, [r4, #3168]	; 0xc60
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c7a:	d01d      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c7c:	f8d4 3c80 	ldr.w	r3, [r4, #3200]	; 0xc80
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c80:	2d0d      	cmp	r5, #13
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c86:	f8c4 3c80 	str.w	r3, [r4, #3200]	; 0xc80
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c8a:	d015      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c8c:	f8d4 3ca0 	ldr.w	r3, [r4, #3232]	; 0xca0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c90:	2d0e      	cmp	r5, #14
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c96:	f8c4 3ca0 	str.w	r3, [r4, #3232]	; 0xca0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c9a:	d00d      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c9c:	f8d4 3cc0 	ldr.w	r3, [r4, #3264]	; 0xcc0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011ca0:	2d0f      	cmp	r5, #15
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011ca6:	f8c4 3cc0 	str.w	r3, [r4, #3264]	; 0xcc0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011caa:	d005      	beq.n	8011cb8 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011cac:	f8d4 3ce0 	ldr.w	r3, [r4, #3296]	; 0xce0
 8011cb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011cb4:	f8c4 3ce0 	str.w	r3, [r4, #3296]	; 0xce0
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011cb8:	eb06 030a 	add.w	r3, r6, sl
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8011cbc:	f105 0210 	add.w	r2, r5, #16
  dwc2->doepmsk  = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8011cc0:	2109      	movs	r1, #9
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8011cc2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011cc6:	68db      	ldr	r3, [r3, #12]
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8011cc8:	b2d2      	uxtb	r2, r2
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8011cca:	f8c4 081c 	str.w	r0, [r4, #2076]	; 0x81c
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011cce:	089b      	lsrs	r3, r3, #2
  dwc2->doepmsk  = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8011cd0:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8011cd4:	0052      	lsls	r2, r2, #1
  dwc2->diepmsk  = DIEPMSK_TOM   | DIEPMSK_XFRCM;
 8011cd6:	f8c4 1810 	str.w	r1, [r4, #2064]	; 0x810
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011cda:	3b10      	subs	r3, #16
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8011cdc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8011d38 <dcd_int_handler+0x5dc>
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8011ce0:	320f      	adds	r2, #15
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8011ce6:	6262      	str	r2, [r4, #36]	; 0x24
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8011ce8:	2240      	movs	r2, #64	; 0x40
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011cea:	62a3      	str	r3, [r4, #40]	; 0x28
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8011cec:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8011cf0:	f8a9 200a 	strh.w	r2, [r9, #10]
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8011cf4:	f023 0303 	bic.w	r3, r3, #3
 8011cf8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8011cfc:	f8d4 3b10 	ldr.w	r3, [r4, #2832]	; 0xb10
 8011d00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011d04:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8011d08:	69a3      	ldr	r3, [r4, #24]
  xfer_status[0][TUSB_DIR_IN ].max_size = 64;
 8011d0a:	f8a9 201a 	strh.w	r2, [r9, #26]
  _allocated_fifo_words_tx = 16;
 8011d0e:	2210      	movs	r2, #16
  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8011d10:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8011d14:	61a3      	str	r3, [r4, #24]
  _allocated_fifo_words_tx = 16;
 8011d16:	4b0b      	ldr	r3, [pc, #44]	; (8011d44 <dcd_int_handler+0x5e8>)
 8011d18:	801a      	strh	r2, [r3, #0]
}
 8011d1a:	e531      	b.n	8011780 <dcd_int_handler+0x24>
  if(int_status & GINTSTS_IEPINT)
 8011d1c:	9f02      	ldr	r7, [sp, #8]
 8011d1e:	037b      	lsls	r3, r7, #13
 8011d20:	f57f ae03 	bpl.w	801192a <dcd_int_handler+0x1ce>
  dwc2_epin_t* epin      = dwc2->epin;
 8011d24:	f506 6410 	add.w	r4, r6, #2304	; 0x900
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011d28:	e661      	b.n	80119ee <dcd_int_handler+0x292>
 8011d2a:	bf00      	nop
 8011d2c:	24002c70 	.word	0x24002c70
 8011d30:	4f543009 	.word	0x4f543009
 8011d34:	24002c64 	.word	0x24002c64
 8011d38:	24002c78 	.word	0x24002c78
 8011d3c:	24002c62 	.word	0x24002c62
 8011d40:	24002c6c 	.word	0x24002c6c
 8011d44:	24002c60 	.word	0x24002c60
  while(full_words--)
 8011d48:	ea5f 0098 	movs.w	r0, r8, lsr #2
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8011d4c:	f853 e009 	ldr.w	lr, [r3, r9]
  while(full_words--)
 8011d50:	f000 810f 	beq.w	8011f72 <dcd_int_handler+0x816>
 8011d54:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8011d58:	4672      	mov	r2, lr
 8011d5a:	f504 5c80 	add.w	ip, r4, #4096	; 0x1000
    tu_unaligned_write32(dst, *rx_fifo);
 8011d5e:	f8dc 1000 	ldr.w	r1, [ip]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8011d62:	f842 1b04 	str.w	r1, [r2], #4
  while(full_words--)
 8011d66:	4282      	cmp	r2, r0
 8011d68:	d1f9      	bne.n	8011d5e <dcd_int_handler+0x602>
  if ( bytes_rem != 0 )
 8011d6a:	f018 0103 	ands.w	r1, r8, #3
  uint8_t const bytes_rem = len & 0x03;
 8011d6e:	fa5f fc88 	uxtb.w	ip, r8
  if ( bytes_rem != 0 )
 8011d72:	d010      	beq.n	8011d96 <dcd_int_handler+0x63a>
    uint32_t const tmp = *rx_fifo;
 8011d74:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    if ( bytes_rem > 1 ) dst[1] = tu_u32_byte1(tmp);
 8011d78:	f01c 0f02 	tst.w	ip, #2
    uint32_t const tmp = *rx_fifo;
 8011d7c:	6812      	ldr	r2, [r2, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8011d7e:	7002      	strb	r2, [r0, #0]
    if ( bytes_rem > 1 ) dst[1] = tu_u32_byte1(tmp);
 8011d80:	d003      	beq.n	8011d8a <dcd_int_handler+0x62e>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8011d82:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8011d86:	f880 c001 	strb.w	ip, [r0, #1]
    if ( bytes_rem > 2 ) dst[2] = tu_u32_byte2(tmp);
 8011d8a:	2903      	cmp	r1, #3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8011d8c:	bf04      	itt	eq
 8011d8e:	0c12      	lsreq	r2, r2, #16
 8011d90:	7082      	strbeq	r2, [r0, #2]
        xfer->buffer += bcnt;
 8011d92:	f853 e009 	ldr.w	lr, [r3, r9]
 8011d96:	eb0e 0208 	add.w	r2, lr, r8
 8011d9a:	f843 2009 	str.w	r2, [r3, r9]
 8011d9e:	e5ec      	b.n	801197a <dcd_int_handler+0x21e>
        speed = TUSB_SPEED_HIGH;
 8011da0:	2302      	movs	r3, #2
 8011da2:	e4ff      	b.n	80117a4 <dcd_int_handler+0x48>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011da4:	2300      	movs	r3, #0
 8011da6:	a805      	add	r0, sp, #20
  dcd_event_handler(&event, in_isr);
 8011da8:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011daa:	9305      	str	r3, [sp, #20]
 8011dac:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011db0:	9b01      	ldr	r3, [sp, #4]
 8011db2:	f88d 3014 	strb.w	r3, [sp, #20]
 8011db6:	2302      	movs	r3, #2
 8011db8:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011dbc:	f7fe fde0 	bl	8010980 <dcd_event_handler>
}
 8011dc0:	e50b      	b.n	80117da <dcd_int_handler+0x7e>
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 8011dc2:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808

static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8011dc6:	a805      	add	r0, sp, #20
 8011dc8:	2200      	movs	r2, #0
  event.sof.frame_count = frame_count;
  dcd_event_handler(&event, in_isr);
 8011dca:	2101      	movs	r1, #1
 8011dcc:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8011dd0:	9002      	str	r0, [sp, #8]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8011dd2:	9205      	str	r2, [sp, #20]
 8011dd4:	6082      	str	r2, [r0, #8]
  event.sof.frame_count = frame_count;
 8011dd6:	9306      	str	r3, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8011dd8:	9b01      	ldr	r3, [sp, #4]
 8011dda:	f88d 3014 	strb.w	r3, [sp, #20]
 8011dde:	2303      	movs	r3, #3
 8011de0:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011de4:	f7fe fdcc 	bl	8010980 <dcd_event_handler>
}
 8011de8:	9802      	ldr	r0, [sp, #8]
 8011dea:	e505      	b.n	80117f8 <dcd_int_handler+0x9c>
        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 8011dec:	6923      	ldr	r3, [r4, #16]
 8011dee:	f3c3 4bc9 	ubfx	fp, r3, #19, #10
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 8011df2:	f1bb 0f00 	cmp.w	fp, #0
 8011df6:	d03d      	beq.n	8011e74 <dcd_int_handler+0x718>
  volatile uint32_t * tx_fifo = dwc2->fifo[fifo_num];
 8011df8:	f04f 0900 	mov.w	r9, #0
 8011dfc:	e008      	b.n	8011e10 <dcd_int_handler+0x6b4>
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 8011dfe:	4639      	mov	r1, r7
 8011e00:	f7fd fe24 	bl	800fa4c <tu_fifo_read_n_const_addr_full_words>
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 8011e04:	f109 0901 	add.w	r9, r9, #1
 8011e08:	fa1f f389 	uxth.w	r3, r9
 8011e0c:	459b      	cmp	fp, r3
 8011e0e:	d931      	bls.n	8011e74 <dcd_int_handler+0x718>
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 8011e10:	6921      	ldr	r1, [r4, #16]
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 8011e12:	4a59      	ldr	r2, [pc, #356]	; (8011f78 <dcd_int_handler+0x81c>)
 8011e14:	69a3      	ldr	r3, [r4, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011e16:	b289      	uxth	r1, r1
 8011e18:	ea02 0383 	and.w	r3, r2, r3, lsl #2
 8011e1c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8011e20:	428a      	cmp	r2, r1
 8011e22:	bf28      	it	cs
 8011e24:	460a      	movcs	r2, r1
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d824      	bhi.n	8011e74 <dcd_int_handler+0x718>
          if ( xfer->ff )
 8011e2a:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	d1e5      	bne.n	8011dfe <dcd_int_handler+0x6a2>
  while(full_words--)
 8011e32:	0890      	lsrs	r0, r2, #2
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8011e34:	f8d8 c010 	ldr.w	ip, [r8, #16]
  while(full_words--)
 8011e38:	f000 8097 	beq.w	8011f6a <dcd_int_handler+0x80e>
 8011e3c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8011e40:	4663      	mov	r3, ip
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8011e42:	f853 1b04 	ldr.w	r1, [r3], #4
 8011e46:	4283      	cmp	r3, r0
    *tx_fifo = tu_unaligned_read32(src);
 8011e48:	6039      	str	r1, [r7, #0]
  while(full_words--)
 8011e4a:	d1fa      	bne.n	8011e42 <dcd_int_handler+0x6e6>
  if ( bytes_rem )
 8011e4c:	f012 0103 	ands.w	r1, r2, #3
  uint8_t const bytes_rem = len & 0x03;
 8011e50:	fa5f fe82 	uxtb.w	lr, r2
  if ( bytes_rem )
 8011e54:	d00a      	beq.n	8011e6c <dcd_int_handler+0x710>
    if ( bytes_rem > 1 ) tmp_word |= (src[1] << 8);
 8011e56:	f01e 0f02 	tst.w	lr, #2
    uint32_t tmp_word = src[0];
 8011e5a:	7803      	ldrb	r3, [r0, #0]
    if ( bytes_rem > 1 ) tmp_word |= (src[1] << 8);
 8011e5c:	bf18      	it	ne
 8011e5e:	8803      	ldrhne	r3, [r0, #0]
    if ( bytes_rem > 2 ) tmp_word |= (src[2] << 16);
 8011e60:	2903      	cmp	r1, #3
 8011e62:	d102      	bne.n	8011e6a <dcd_int_handler+0x70e>
 8011e64:	7881      	ldrb	r1, [r0, #2]
 8011e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    *tx_fifo = tmp_word;
 8011e6a:	603b      	str	r3, [r7, #0]
            xfer->buffer += packet_size;
 8011e6c:	4462      	add	r2, ip
 8011e6e:	f8c8 2010 	str.w	r2, [r8, #16]
 8011e72:	e7c7      	b.n	8011e04 <dcd_int_handler+0x6a8>
        if ( ((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0 )
 8011e74:	6923      	ldr	r3, [r4, #16]
 8011e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f47f adee 	bne.w	8011a5c <dcd_int_handler+0x300>
          dwc2->diepempmsk &= ~(1 << n);
 8011e80:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8011e84:	9a02      	ldr	r2, [sp, #8]
 8011e86:	ea23 0302 	bic.w	r3, r3, r2
 8011e8a:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
 8011e8e:	e5e5      	b.n	8011a5c <dcd_int_handler+0x300>
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011e90:	9a03      	ldr	r2, [sp, #12]
    ep0_pending[dir] -= total_bytes;
 8011e92:	493a      	ldr	r1, [pc, #232]	; (8011f7c <dcd_int_handler+0x820>)
 8011e94:	8b52      	ldrh	r2, [r2, #26]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	bf28      	it	cs
 8011e9a:	461a      	movcs	r2, r3
 8011e9c:	1a9b      	subs	r3, r3, r2
 8011e9e:	804b      	strh	r3, [r1, #2]
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8011ea0:	f442 2300 	orr.w	r3, r2, #524288	; 0x80000
 8011ea4:	f8c6 3910 	str.w	r3, [r6, #2320]	; 0x910
    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8011ea8:	f8d6 3900 	ldr.w	r3, [r6, #2304]	; 0x900
 8011eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011eb0:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011eb4:	f8d6 3900 	ldr.w	r3, [r6, #2304]	; 0x900
 8011eb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011ec0:	d040      	beq.n	8011f44 <dcd_int_handler+0x7e8>
    if ( total_bytes != 0 )
 8011ec2:	2a00      	cmp	r2, #0
 8011ec4:	f43f adbf 	beq.w	8011a46 <dcd_int_handler+0x2ea>
      dwc2->diepempmsk |= (1 << epnum);
 8011ec8:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8011ecc:	f043 0301 	orr.w	r3, r3, #1
 8011ed0:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
 8011ed4:	e5b7      	b.n	8011a46 <dcd_int_handler+0x2ea>
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8011ed6:	f8d6 2b10 	ldr.w	r2, [r6, #2832]	; 0xb10
    ep0_pending[dir] -= total_bytes;
 8011eda:	4928      	ldr	r1, [pc, #160]	; (8011f7c <dcd_int_handler+0x820>)
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8011edc:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8011ee0:	f8c6 2b10 	str.w	r2, [r6, #2832]	; 0xb10
 8011ee4:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	bf28      	it	cs
 8011eec:	461a      	movcs	r2, r3
    ep0_pending[dir] -= total_bytes;
 8011eee:	1a9b      	subs	r3, r3, r2
 8011ef0:	800b      	strh	r3, [r1, #0]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8011ef2:	f8d6 3b10 	ldr.w	r3, [r6, #2832]	; 0xb10
 8011ef6:	431a      	orrs	r2, r3
 8011ef8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8011efc:	f8c6 2b10 	str.w	r2, [r6, #2832]	; 0xb10
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8011f00:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 8011f04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011f08:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8011f0c:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 8011f10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011f14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011f18:	f47f adf9 	bne.w	8011b0e <dcd_int_handler+0x3b2>
 8011f1c:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	f47f adf4 	bne.w	8011b0e <dcd_int_handler+0x3b2>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011f26:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8011f2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011f2e:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 8011f32:	bf14      	ite	ne
 8011f34:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8011f38:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8011f3c:	4313      	orrs	r3, r2
 8011f3e:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
 8011f42:	e5e4      	b.n	8011b0e <dcd_int_handler+0x3b2>
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011f44:	9b03      	ldr	r3, [sp, #12]
 8011f46:	7f1b      	ldrb	r3, [r3, #28]
 8011f48:	2b01      	cmp	r3, #1
 8011f4a:	d1ba      	bne.n	8011ec2 <dcd_int_handler+0x766>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011f4c:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8011f50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011f54:	f8d6 3900 	ldr.w	r3, [r6, #2304]	; 0x900
 8011f58:	bf14      	ite	ne
 8011f5a:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 8011f5e:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8011f62:	430b      	orrs	r3, r1
 8011f64:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
 8011f68:	e7ab      	b.n	8011ec2 <dcd_int_handler+0x766>
  while(full_words--)
 8011f6a:	4660      	mov	r0, ip
 8011f6c:	e76e      	b.n	8011e4c <dcd_int_handler+0x6f0>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 8011f6e:	4613      	mov	r3, r2
 8011f70:	e4c8      	b.n	8011904 <dcd_int_handler+0x1a8>
  while(full_words--)
 8011f72:	4670      	mov	r0, lr
 8011f74:	e6f9      	b.n	8011d6a <dcd_int_handler+0x60e>
 8011f76:	bf00      	nop
 8011f78:	0003fffc 	.word	0x0003fffc
 8011f7c:	24002c70 	.word	0x24002c70

08011f80 <tu_edpt_claim>:
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011f80:	7803      	ldrb	r3, [r0, #0]
 8011f82:	f013 0301 	ands.w	r3, r3, #1
 8011f86:	d110      	bne.n	8011faa <tu_edpt_claim+0x2a>
 8011f88:	7802      	ldrb	r2, [r0, #0]
 8011f8a:	0751      	lsls	r1, r2, #29
 8011f8c:	d40b      	bmi.n	8011fa6 <tu_edpt_claim+0x26>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8011f8e:	7803      	ldrb	r3, [r0, #0]
 8011f90:	f013 0301 	ands.w	r3, r3, #1
 8011f94:	d109      	bne.n	8011faa <tu_edpt_claim+0x2a>
 8011f96:	7802      	ldrb	r2, [r0, #0]
 8011f98:	0752      	lsls	r2, r2, #29
 8011f9a:	d404      	bmi.n	8011fa6 <tu_edpt_claim+0x26>
  if (available)
  {
    ep_state->claimed = 1;
 8011f9c:	7802      	ldrb	r2, [r0, #0]
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	f042 0204 	orr.w	r2, r2, #4
 8011fa4:	7002      	strb	r2, [r0, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011faa:	2300      	movs	r3, #0
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	4770      	bx	lr

08011fb0 <tu_edpt_release>:
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011fb0:	7803      	ldrb	r3, [r0, #0]
 8011fb2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8011fb6:	075b      	lsls	r3, r3, #29
 8011fb8:	d401      	bmi.n	8011fbe <tu_edpt_release+0xe>
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
}
 8011fba:	4610      	mov	r0, r2
 8011fbc:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011fbe:	7803      	ldrb	r3, [r0, #0]
 8011fc0:	f013 0101 	ands.w	r1, r3, #1
 8011fc4:	d105      	bne.n	8011fd2 <tu_edpt_release+0x22>
    ep_state->claimed = 0;
 8011fc6:	7803      	ldrb	r3, [r0, #0]
 8011fc8:	f361 0382 	bfi	r3, r1, #2, #1
 8011fcc:	7003      	strb	r3, [r0, #0]
}
 8011fce:	4610      	mov	r0, r2
 8011fd0:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011fd2:	2200      	movs	r2, #0
}
 8011fd4:	4610      	mov	r0, r2
 8011fd6:	4770      	bx	lr

08011fd8 <tu_edpt_validate>:
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8011fd8:	78c3      	ldrb	r3, [r0, #3]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8011fda:	8882      	ldrh	r2, [r0, #4]
 8011fdc:	f003 0003 	and.w	r0, r3, #3
 8011fe0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8011fe4:	2802      	cmp	r0, #2
 8011fe6:	d005      	beq.n	8011ff4 <tu_edpt_validate+0x1c>
 8011fe8:	2803      	cmp	r0, #3
 8011fea:	d01b      	beq.n	8012024 <tu_edpt_validate+0x4c>
 8011fec:	2801      	cmp	r0, #1
 8011fee:	d007      	beq.n	8012000 <tu_edpt_validate+0x28>
 8011ff0:	2000      	movs	r0, #0
 8011ff2:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8011ff4:	2902      	cmp	r1, #2
 8011ff6:	d01e      	beq.n	8012036 <tu_edpt_validate+0x5e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8011ff8:	2a40      	cmp	r2, #64	; 0x40
 8011ffa:	d809      	bhi.n	8012010 <tu_edpt_validate+0x38>
    break;

    default: return false;
  }

  return true;
 8011ffc:	2001      	movs	r0, #1
}
 8011ffe:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8012000:	2902      	cmp	r1, #2
 8012002:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8012006:	bf08      	it	eq
 8012008:	f44f 6380 	moveq.w	r3, #1024	; 0x400
      TU_ASSERT(max_packet_size <= spec_size);
 801200c:	4293      	cmp	r3, r2
 801200e:	d2f6      	bcs.n	8011ffe <tu_edpt_validate+0x26>
      TU_ASSERT(max_packet_size <= spec_size);
 8012010:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8012014:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8012018:	f010 0001 	ands.w	r0, r0, #1
 801201c:	d0ef      	beq.n	8011ffe <tu_edpt_validate+0x26>
 801201e:	be00      	bkpt	0x0000
 8012020:	2000      	movs	r0, #0
 8012022:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8012024:	2902      	cmp	r1, #2
 8012026:	bf0c      	ite	eq
 8012028:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801202c:	2340      	movne	r3, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 801202e:	4293      	cmp	r3, r2
 8012030:	d3ee      	bcc.n	8012010 <tu_edpt_validate+0x38>
  return true;
 8012032:	2001      	movs	r0, #1
 8012034:	e7e3      	b.n	8011ffe <tu_edpt_validate+0x26>
        TU_ASSERT(max_packet_size == 512);
 8012036:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801203a:	d0df      	beq.n	8011ffc <tu_edpt_validate+0x24>
 801203c:	e7e8      	b.n	8012010 <tu_edpt_validate+0x38>
 801203e:	bf00      	nop

08012040 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 8012040:	440a      	add	r2, r1

  while( p_desc < desc_end )
 8012042:	4291      	cmp	r1, r2
 8012044:	d226      	bcs.n	8012094 <tu_edpt_bind_driver+0x54>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8012046:	f891 c001 	ldrb.w	ip, [r1, #1]
 801204a:	f1bc 0f05 	cmp.w	ip, #5
 801204e:	d005      	beq.n	801205c <tu_edpt_bind_driver+0x1c>
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012050:	f891 c000 	ldrb.w	ip, [r1]
 8012054:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8012056:	428a      	cmp	r2, r1
 8012058:	d8f5      	bhi.n	8012046 <tu_edpt_bind_driver+0x6>
 801205a:	4770      	bx	lr
{
 801205c:	b500      	push	{lr}
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 801205e:	f891 c002 	ldrb.w	ip, [r1, #2]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8012062:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
 8012066:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 801206a:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801206e:	f80e 300c 	strb.w	r3, [lr, ip]
 8012072:	f891 c000 	ldrb.w	ip, [r1]
 8012076:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8012078:	428a      	cmp	r2, r1
 801207a:	d909      	bls.n	8012090 <tu_edpt_bind_driver+0x50>
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 801207c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8012080:	f1bc 0f05 	cmp.w	ip, #5
 8012084:	d0eb      	beq.n	801205e <tu_edpt_bind_driver+0x1e>
 8012086:	f891 c000 	ldrb.w	ip, [r1]
 801208a:	4461      	add	r1, ip
  while( p_desc < desc_end )
 801208c:	428a      	cmp	r2, r1
 801208e:	d8f5      	bhi.n	801207c <tu_edpt_bind_driver+0x3c>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 8012090:	f85d fb04 	ldr.w	pc, [sp], #4
 8012094:	4770      	bx	lr
 8012096:	bf00      	nop

08012098 <main>:

#include "main.h"
#include "graph2d.h"

int main(void)
{
 8012098:	b500      	push	{lr}
 801209a:	f5ad 5dc2 	sub.w	sp, sp, #6208	; 0x1840
 801209e:	b087      	sub	sp, #28

	if (BSP_BOARD_Init_CM7()) BSP_Error_Handler();
 80120a0:	f7ef f946 	bl	8001330 <BSP_BOARD_Init_CM7>
 80120a4:	2800      	cmp	r0, #0
 80120a6:	f040 8096 	bne.w	80121d6 <main+0x13e>

	BSP_LCD_Init(LCD_COLOR_MODE_RGB888, LCD_BUFFER_MODE_DOUBLE, C_BLACK, NULL);
 80120aa:	2300      	movs	r3, #0
 80120ac:	2102      	movs	r1, #2
 80120ae:	2003      	movs	r0, #3
 80120b0:	461a      	mov	r2, r3
 80120b2:	f7f0 fce5 	bl	8002a80 <BSP_LCD_Init>

	// If "Menu_Button" pressed during startup than console switches into USB MSC mode (active until RESET)
	if (BSP_hinputs.buttons.btn_MENU > 0) {
 80120b6:	4b49      	ldr	r3, [pc, #292]	; (80121dc <main+0x144>)
 80120b8:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 80120bc:	b124      	cbz	r4, 80120c8 <main+0x30>
		BSP_USB_Init_MSC();
 80120be:	f7f2 f87f 	bl	80041c0 <BSP_USB_Init_MSC>
		while (1) BSP_USB_Task();
 80120c2:	f7f2 f88b 	bl	80041dc <BSP_USB_Task>
 80120c6:	e7fc      	b.n	80120c2 <main+0x2a>
	}

	// Initialize Backlight
	BSP_LCD_InitBackLight(10);
 80120c8:	200a      	movs	r0, #10
 80120ca:	f7f1 f81f 	bl	800310c <BSP_LCD_InitBackLight>
	BSP_LCD_SetBackLight(80, 25);
 80120ce:	2119      	movs	r1, #25
 80120d0:	2050      	movs	r0, #80	; 0x50
 80120d2:	f7f1 f847 	bl	8003164 <BSP_LCD_SetBackLight>

	// Load resources
	ResCtx_TypeDef resctx = {0};
 80120d6:	4621      	mov	r1, r4
 80120d8:	f641 0250 	movw	r2, #6224	; 0x1850
 80120dc:	a802      	add	r0, sp, #8
 80120de:	f000 f8dc 	bl	801229a <memset>
	BSP_Res_Init(&resctx, 0xC0000000, 48 * 1024 * 1024);
 80120e2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80120e6:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80120ea:	a802      	add	r0, sp, #8
 80120ec:	f7f1 f970 	bl	80033d0 <BSP_Res_Init>
	BSP_Res_Load(&resctx, "/_/wallpaper01.jpg", 0);
 80120f0:	4622      	mov	r2, r4
 80120f2:	493b      	ldr	r1, [pc, #236]	; (80121e0 <main+0x148>)
 80120f4:	a802      	add	r0, sp, #8
 80120f6:	f7f1 f9a1 	bl	800343c <BSP_Res_Load>

	G2D_DecodeJPEG(BSP_Res_GetAddr(&resctx, 0), BSP_Res_GetSize(&resctx, 0));
 80120fa:	4621      	mov	r1, r4
 80120fc:	a802      	add	r0, sp, #8
 80120fe:	f7f1 f9ed 	bl	80034dc <BSP_Res_GetAddr>
 8012102:	4605      	mov	r5, r0
 8012104:	4621      	mov	r1, r4
 8012106:	a802      	add	r0, sp, #8
 8012108:	f7f1 f9ec 	bl	80034e4 <BSP_Res_GetSize>
 801210c:	4601      	mov	r1, r0
 801210e:	4628      	mov	r0, r5
	G2D_DrawLastJPEG(0, 0);

	//G2D_FillFrame(&BSP_hlcd, 0, BSP_LCD_Color(C_RED, 255));

	G2D_DrawIconBlend((uint32_t)ICON_128_IMU, 10, 10, BSP_LCD_Color(C_WHITE, 200));
 8012110:	4d34      	ldr	r5, [pc, #208]	; (80121e4 <main+0x14c>)
	G2D_DecodeJPEG(BSP_Res_GetAddr(&resctx, 0), BSP_Res_GetSize(&resctx, 0));
 8012112:	f7f3 f8d1 	bl	80052b8 <G2D_DecodeJPEG>
	G2D_DrawLastJPEG(0, 0);
 8012116:	4621      	mov	r1, r4
 8012118:	4620      	mov	r0, r4
 801211a:	f7f3 f8c5 	bl	80052a8 <G2D_DrawLastJPEG>
	G2D_DrawIconBlend((uint32_t)ICON_128_IMU, 10, 10, BSP_LCD_Color(C_WHITE, 200));
 801211e:	21c8      	movs	r1, #200	; 0xc8
 8012120:	682b      	ldr	r3, [r5, #0]
 8012122:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012126:	4798      	blx	r3
 8012128:	220a      	movs	r2, #10
 801212a:	4603      	mov	r3, r0
 801212c:	482e      	ldr	r0, [pc, #184]	; (80121e8 <main+0x150>)
 801212e:	4611      	mov	r1, r2
 8012130:	f7f3 f82e 	bl	8005190 <G2D_DrawIconBlend>

	G2D_TextBlend(0, 180, FONT_36_verdana, "MiniConsole Test Text", BSP_LCD_Color(C_WHITE, 200));
 8012134:	21c8      	movs	r1, #200	; 0xc8
 8012136:	682b      	ldr	r3, [r5, #0]
 8012138:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801213c:	4798      	blx	r3
 801213e:	4601      	mov	r1, r0
 8012140:	4a2a      	ldr	r2, [pc, #168]	; (80121ec <main+0x154>)
 8012142:	4620      	mov	r0, r4
 8012144:	4b2a      	ldr	r3, [pc, #168]	; (80121f0 <main+0x158>)

	G2D_DrawFillRoundRectBlend(20, 300, 200, 60, 10, BSP_LCD_Color(C_RED, 200));
 8012146:	240a      	movs	r4, #10
	G2D_TextBlend(0, 180, FONT_36_verdana, "MiniConsole Test Text", BSP_LCD_Color(C_WHITE, 200));
 8012148:	9100      	str	r1, [sp, #0]
 801214a:	21b4      	movs	r1, #180	; 0xb4
 801214c:	f7f2 fefa 	bl	8004f44 <G2D_TextBlend>
	G2D_DrawFillRoundRectBlend(20, 300, 200, 60, 10, BSP_LCD_Color(C_RED, 200));
 8012150:	21c8      	movs	r1, #200	; 0xc8
 8012152:	682b      	ldr	r3, [r5, #0]
 8012154:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8012158:	4798      	blx	r3
 801215a:	22c8      	movs	r2, #200	; 0xc8
 801215c:	233c      	movs	r3, #60	; 0x3c
 801215e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8012162:	e9cd 4000 	strd	r4, r0, [sp]
 8012166:	2014      	movs	r0, #20
 8012168:	f7f2 fd18 	bl	8004b9c <G2D_DrawFillRoundRectBlend>
	//G2D_DrawFillRoundRect(20, 300, 200, 60, 10, BSP_LCD_Color(C_RED, 255));
	G2D_DrawRoundRect(20, 300, 200, 60, 10, BSP_LCD_Color(C_WHITE, 255));
 801216c:	21ff      	movs	r1, #255	; 0xff
 801216e:	682b      	ldr	r3, [r5, #0]
 8012170:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012174:	4798      	blx	r3
 8012176:	22c8      	movs	r2, #200	; 0xc8
 8012178:	233c      	movs	r3, #60	; 0x3c
 801217a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801217e:	e9cd 4000 	strd	r4, r0, [sp]
 8012182:	2014      	movs	r0, #20
 8012184:	f7f2 fb12 	bl	80047ac <G2D_DrawRoundRect>

	G2D_DrawFillRectBlend(200, 20, 100, 100, BSP_LCD_Color(C_GREEN, 200));
 8012188:	21c8      	movs	r1, #200	; 0xc8
 801218a:	682b      	ldr	r3, [r5, #0]
 801218c:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8012190:	4798      	blx	r3
 8012192:	2364      	movs	r3, #100	; 0x64
 8012194:	4602      	mov	r2, r0
 8012196:	2114      	movs	r1, #20
 8012198:	20c8      	movs	r0, #200	; 0xc8
 801219a:	9200      	str	r2, [sp, #0]
 801219c:	461a      	mov	r2, r3
 801219e:	f7f2 f905 	bl	80043ac <G2D_DrawFillRectBlend>
	//G2D_DrawFillRect(200, 20, 100, 100, BSP_LCD_Color(C_GREEN, 255));

	G2D_DrawFillCircleBlend(400, 100, 80, BSP_LCD_Color(C_BLUE, 200));
 80121a2:	21c8      	movs	r1, #200	; 0xc8
 80121a4:	682b      	ldr	r3, [r5, #0]
 80121a6:	20ff      	movs	r0, #255	; 0xff
 80121a8:	4798      	blx	r3
 80121aa:	2250      	movs	r2, #80	; 0x50
 80121ac:	4603      	mov	r3, r0
 80121ae:	2164      	movs	r1, #100	; 0x64
 80121b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80121b4:	f7f2 f9d4 	bl	8004560 <G2D_DrawFillCircleBlend>
	//G2D_DrawFillCircle(400, 100, 80, BSP_LCD_Color(C_BLUE, 255));
	G2D_DrawCircle(400, 100, 80, BSP_LCD_Color(C_WHITE, 255));
 80121b8:	21ff      	movs	r1, #255	; 0xff
 80121ba:	682b      	ldr	r3, [r5, #0]
 80121bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80121c0:	4798      	blx	r3
 80121c2:	2250      	movs	r2, #80	; 0x50
 80121c4:	4603      	mov	r3, r0
 80121c6:	2164      	movs	r1, #100	; 0x64
 80121c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80121cc:	f7f2 f91a 	bl	8004404 <G2D_DrawCircle>

	BSP_LCD_FrameReady();
 80121d0:	f7f0 ff6c 	bl	80030ac <BSP_LCD_FrameReady>


    /* Loop forever */
	for(;;);
 80121d4:	e7fe      	b.n	80121d4 <main+0x13c>
	if (BSP_BOARD_Init_CM7()) BSP_Error_Handler();
 80121d6:	f7ef f961 	bl	800149c <BSP_Error_Handler>
 80121da:	e766      	b.n	80120aa <main+0x12>
 80121dc:	38000058 	.word	0x38000058
 80121e0:	08015af4 	.word	0x08015af4
 80121e4:	24000244 	.word	0x24000244
 80121e8:	08012638 	.word	0x08012638
 80121ec:	08012ac4 	.word	0x08012ac4
 80121f0:	08015b08 	.word	0x08015b08

080121f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80121f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801222c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80121f8:	f7fc fb02 	bl	800e800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80121fc:	480c      	ldr	r0, [pc, #48]	; (8012230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80121fe:	490d      	ldr	r1, [pc, #52]	; (8012234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012200:	4a0d      	ldr	r2, [pc, #52]	; (8012238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012204:	e002      	b.n	801220c <LoopCopyDataInit>

08012206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801220a:	3304      	adds	r3, #4

0801220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012210:	d3f9      	bcc.n	8012206 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012212:	4a0a      	ldr	r2, [pc, #40]	; (801223c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012214:	4c0a      	ldr	r4, [pc, #40]	; (8012240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012218:	e001      	b.n	801221e <LoopFillZerobss>

0801221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801221c:	3204      	adds	r2, #4

0801221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012220:	d3fb      	bcc.n	801221a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012222:	f000 f84f 	bl	80122c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012226:	f7ff ff37 	bl	8012098 <main>
  bx  lr
 801222a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801222c:	24020000 	.word	0x24020000
  ldr r0, =_sdata
 8012230:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8012234:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 8012238:	08015b68 	.word	0x08015b68
  ldr r2, =_sbss
 801223c:	24000038 	.word	0x24000038
  ldr r4, =_ebss
 8012240:	24002d98 	.word	0x24002d98

08012244 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012244:	e7fe      	b.n	8012244 <ADC3_IRQHandler>

08012246 <memcmp>:
 8012246:	b510      	push	{r4, lr}
 8012248:	3901      	subs	r1, #1
 801224a:	4402      	add	r2, r0
 801224c:	4290      	cmp	r0, r2
 801224e:	d101      	bne.n	8012254 <memcmp+0xe>
 8012250:	2000      	movs	r0, #0
 8012252:	e005      	b.n	8012260 <memcmp+0x1a>
 8012254:	7803      	ldrb	r3, [r0, #0]
 8012256:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801225a:	42a3      	cmp	r3, r4
 801225c:	d001      	beq.n	8012262 <memcmp+0x1c>
 801225e:	1b18      	subs	r0, r3, r4
 8012260:	bd10      	pop	{r4, pc}
 8012262:	3001      	adds	r0, #1
 8012264:	e7f2      	b.n	801224c <memcmp+0x6>

08012266 <memmove>:
 8012266:	4288      	cmp	r0, r1
 8012268:	b510      	push	{r4, lr}
 801226a:	eb01 0402 	add.w	r4, r1, r2
 801226e:	d902      	bls.n	8012276 <memmove+0x10>
 8012270:	4284      	cmp	r4, r0
 8012272:	4623      	mov	r3, r4
 8012274:	d807      	bhi.n	8012286 <memmove+0x20>
 8012276:	1e43      	subs	r3, r0, #1
 8012278:	42a1      	cmp	r1, r4
 801227a:	d008      	beq.n	801228e <memmove+0x28>
 801227c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012280:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012284:	e7f8      	b.n	8012278 <memmove+0x12>
 8012286:	4402      	add	r2, r0
 8012288:	4601      	mov	r1, r0
 801228a:	428a      	cmp	r2, r1
 801228c:	d100      	bne.n	8012290 <memmove+0x2a>
 801228e:	bd10      	pop	{r4, pc}
 8012290:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012294:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012298:	e7f7      	b.n	801228a <memmove+0x24>

0801229a <memset>:
 801229a:	4402      	add	r2, r0
 801229c:	4603      	mov	r3, r0
 801229e:	4293      	cmp	r3, r2
 80122a0:	d100      	bne.n	80122a4 <memset+0xa>
 80122a2:	4770      	bx	lr
 80122a4:	f803 1b01 	strb.w	r1, [r3], #1
 80122a8:	e7f9      	b.n	801229e <memset+0x4>

080122aa <strchr>:
 80122aa:	b2c9      	uxtb	r1, r1
 80122ac:	4603      	mov	r3, r0
 80122ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122b2:	b11a      	cbz	r2, 80122bc <strchr+0x12>
 80122b4:	428a      	cmp	r2, r1
 80122b6:	d1f9      	bne.n	80122ac <strchr+0x2>
 80122b8:	4618      	mov	r0, r3
 80122ba:	4770      	bx	lr
 80122bc:	2900      	cmp	r1, #0
 80122be:	bf18      	it	ne
 80122c0:	2300      	movne	r3, #0
 80122c2:	e7f9      	b.n	80122b8 <strchr+0xe>

080122c4 <__libc_init_array>:
 80122c4:	b570      	push	{r4, r5, r6, lr}
 80122c6:	4d0d      	ldr	r5, [pc, #52]	; (80122fc <__libc_init_array+0x38>)
 80122c8:	4c0d      	ldr	r4, [pc, #52]	; (8012300 <__libc_init_array+0x3c>)
 80122ca:	1b64      	subs	r4, r4, r5
 80122cc:	10a4      	asrs	r4, r4, #2
 80122ce:	2600      	movs	r6, #0
 80122d0:	42a6      	cmp	r6, r4
 80122d2:	d109      	bne.n	80122e8 <__libc_init_array+0x24>
 80122d4:	4d0b      	ldr	r5, [pc, #44]	; (8012304 <__libc_init_array+0x40>)
 80122d6:	4c0c      	ldr	r4, [pc, #48]	; (8012308 <__libc_init_array+0x44>)
 80122d8:	f000 f9a2 	bl	8012620 <_init>
 80122dc:	1b64      	subs	r4, r4, r5
 80122de:	10a4      	asrs	r4, r4, #2
 80122e0:	2600      	movs	r6, #0
 80122e2:	42a6      	cmp	r6, r4
 80122e4:	d105      	bne.n	80122f2 <__libc_init_array+0x2e>
 80122e6:	bd70      	pop	{r4, r5, r6, pc}
 80122e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80122ec:	4798      	blx	r3
 80122ee:	3601      	adds	r6, #1
 80122f0:	e7ee      	b.n	80122d0 <__libc_init_array+0xc>
 80122f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80122f6:	4798      	blx	r3
 80122f8:	3601      	adds	r6, #1
 80122fa:	e7f2      	b.n	80122e2 <__libc_init_array+0x1e>
 80122fc:	08015b60 	.word	0x08015b60
 8012300:	08015b60 	.word	0x08015b60
 8012304:	08015b60 	.word	0x08015b60
 8012308:	08015b64 	.word	0x08015b64

0801230c <memcpy>:
 801230c:	440a      	add	r2, r1
 801230e:	4291      	cmp	r1, r2
 8012310:	f100 33ff 	add.w	r3, r0, #4294967295
 8012314:	d100      	bne.n	8012318 <memcpy+0xc>
 8012316:	4770      	bx	lr
 8012318:	b510      	push	{r4, lr}
 801231a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801231e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012322:	4291      	cmp	r1, r2
 8012324:	d1f9      	bne.n	801231a <memcpy+0xe>
 8012326:	bd10      	pop	{r4, pc}

08012328 <atan2f>:
 8012328:	f000 b800 	b.w	801232c <__ieee754_atan2f>

0801232c <__ieee754_atan2f>:
 801232c:	ee10 2a90 	vmov	r2, s1
 8012330:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012334:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012338:	b510      	push	{r4, lr}
 801233a:	eef0 7a40 	vmov.f32	s15, s0
 801233e:	dc06      	bgt.n	801234e <__ieee754_atan2f+0x22>
 8012340:	ee10 0a10 	vmov	r0, s0
 8012344:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012348:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801234c:	dd04      	ble.n	8012358 <__ieee754_atan2f+0x2c>
 801234e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012352:	eeb0 0a67 	vmov.f32	s0, s15
 8012356:	bd10      	pop	{r4, pc}
 8012358:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801235c:	d103      	bne.n	8012366 <__ieee754_atan2f+0x3a>
 801235e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012362:	f000 b881 	b.w	8012468 <atanf>
 8012366:	1794      	asrs	r4, r2, #30
 8012368:	f004 0402 	and.w	r4, r4, #2
 801236c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012370:	b93b      	cbnz	r3, 8012382 <__ieee754_atan2f+0x56>
 8012372:	2c02      	cmp	r4, #2
 8012374:	d05c      	beq.n	8012430 <__ieee754_atan2f+0x104>
 8012376:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012444 <__ieee754_atan2f+0x118>
 801237a:	2c03      	cmp	r4, #3
 801237c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8012380:	e7e7      	b.n	8012352 <__ieee754_atan2f+0x26>
 8012382:	b939      	cbnz	r1, 8012394 <__ieee754_atan2f+0x68>
 8012384:	eddf 7a30 	vldr	s15, [pc, #192]	; 8012448 <__ieee754_atan2f+0x11c>
 8012388:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801244c <__ieee754_atan2f+0x120>
 801238c:	2800      	cmp	r0, #0
 801238e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8012392:	e7de      	b.n	8012352 <__ieee754_atan2f+0x26>
 8012394:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012398:	d110      	bne.n	80123bc <__ieee754_atan2f+0x90>
 801239a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801239e:	f104 34ff 	add.w	r4, r4, #4294967295
 80123a2:	d107      	bne.n	80123b4 <__ieee754_atan2f+0x88>
 80123a4:	2c02      	cmp	r4, #2
 80123a6:	d846      	bhi.n	8012436 <__ieee754_atan2f+0x10a>
 80123a8:	4b29      	ldr	r3, [pc, #164]	; (8012450 <__ieee754_atan2f+0x124>)
 80123aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80123ae:	edd3 7a00 	vldr	s15, [r3]
 80123b2:	e7ce      	b.n	8012352 <__ieee754_atan2f+0x26>
 80123b4:	2c02      	cmp	r4, #2
 80123b6:	d841      	bhi.n	801243c <__ieee754_atan2f+0x110>
 80123b8:	4b26      	ldr	r3, [pc, #152]	; (8012454 <__ieee754_atan2f+0x128>)
 80123ba:	e7f6      	b.n	80123aa <__ieee754_atan2f+0x7e>
 80123bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80123c0:	d0e0      	beq.n	8012384 <__ieee754_atan2f+0x58>
 80123c2:	1a5b      	subs	r3, r3, r1
 80123c4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80123c8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80123cc:	da1a      	bge.n	8012404 <__ieee754_atan2f+0xd8>
 80123ce:	2a00      	cmp	r2, #0
 80123d0:	da01      	bge.n	80123d6 <__ieee754_atan2f+0xaa>
 80123d2:	313c      	adds	r1, #60	; 0x3c
 80123d4:	db19      	blt.n	801240a <__ieee754_atan2f+0xde>
 80123d6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80123da:	f000 f919 	bl	8012610 <fabsf>
 80123de:	f000 f843 	bl	8012468 <atanf>
 80123e2:	eef0 7a40 	vmov.f32	s15, s0
 80123e6:	2c01      	cmp	r4, #1
 80123e8:	d012      	beq.n	8012410 <__ieee754_atan2f+0xe4>
 80123ea:	2c02      	cmp	r4, #2
 80123ec:	d017      	beq.n	801241e <__ieee754_atan2f+0xf2>
 80123ee:	2c00      	cmp	r4, #0
 80123f0:	d0af      	beq.n	8012352 <__ieee754_atan2f+0x26>
 80123f2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8012458 <__ieee754_atan2f+0x12c>
 80123f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80123fa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801245c <__ieee754_atan2f+0x130>
 80123fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012402:	e7a6      	b.n	8012352 <__ieee754_atan2f+0x26>
 8012404:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012448 <__ieee754_atan2f+0x11c>
 8012408:	e7ed      	b.n	80123e6 <__ieee754_atan2f+0xba>
 801240a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012460 <__ieee754_atan2f+0x134>
 801240e:	e7ea      	b.n	80123e6 <__ieee754_atan2f+0xba>
 8012410:	ee17 3a90 	vmov	r3, s15
 8012414:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012418:	ee07 3a90 	vmov	s15, r3
 801241c:	e799      	b.n	8012352 <__ieee754_atan2f+0x26>
 801241e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8012458 <__ieee754_atan2f+0x12c>
 8012422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012426:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801245c <__ieee754_atan2f+0x130>
 801242a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801242e:	e790      	b.n	8012352 <__ieee754_atan2f+0x26>
 8012430:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801245c <__ieee754_atan2f+0x130>
 8012434:	e78d      	b.n	8012352 <__ieee754_atan2f+0x26>
 8012436:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012464 <__ieee754_atan2f+0x138>
 801243a:	e78a      	b.n	8012352 <__ieee754_atan2f+0x26>
 801243c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012460 <__ieee754_atan2f+0x134>
 8012440:	e787      	b.n	8012352 <__ieee754_atan2f+0x26>
 8012442:	bf00      	nop
 8012444:	c0490fdb 	.word	0xc0490fdb
 8012448:	3fc90fdb 	.word	0x3fc90fdb
 801244c:	bfc90fdb 	.word	0xbfc90fdb
 8012450:	08015b20 	.word	0x08015b20
 8012454:	08015b2c 	.word	0x08015b2c
 8012458:	33bbbd2e 	.word	0x33bbbd2e
 801245c:	40490fdb 	.word	0x40490fdb
 8012460:	00000000 	.word	0x00000000
 8012464:	3f490fdb 	.word	0x3f490fdb

08012468 <atanf>:
 8012468:	b538      	push	{r3, r4, r5, lr}
 801246a:	ee10 5a10 	vmov	r5, s0
 801246e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012472:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012476:	eef0 7a40 	vmov.f32	s15, s0
 801247a:	db0f      	blt.n	801249c <atanf+0x34>
 801247c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012480:	dd04      	ble.n	801248c <atanf+0x24>
 8012482:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012486:	eeb0 0a67 	vmov.f32	s0, s15
 801248a:	bd38      	pop	{r3, r4, r5, pc}
 801248c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80125c4 <atanf+0x15c>
 8012490:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80125c8 <atanf+0x160>
 8012494:	2d00      	cmp	r5, #0
 8012496:	fe77 7a87 	vselgt.f32	s15, s15, s14
 801249a:	e7f4      	b.n	8012486 <atanf+0x1e>
 801249c:	4b4b      	ldr	r3, [pc, #300]	; (80125cc <atanf+0x164>)
 801249e:	429c      	cmp	r4, r3
 80124a0:	dc10      	bgt.n	80124c4 <atanf+0x5c>
 80124a2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80124a6:	da0a      	bge.n	80124be <atanf+0x56>
 80124a8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80125d0 <atanf+0x168>
 80124ac:	ee30 7a07 	vadd.f32	s14, s0, s14
 80124b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80124b4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80124b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124bc:	dce3      	bgt.n	8012486 <atanf+0x1e>
 80124be:	f04f 33ff 	mov.w	r3, #4294967295
 80124c2:	e013      	b.n	80124ec <atanf+0x84>
 80124c4:	f000 f8a4 	bl	8012610 <fabsf>
 80124c8:	4b42      	ldr	r3, [pc, #264]	; (80125d4 <atanf+0x16c>)
 80124ca:	429c      	cmp	r4, r3
 80124cc:	dc4f      	bgt.n	801256e <atanf+0x106>
 80124ce:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80124d2:	429c      	cmp	r4, r3
 80124d4:	dc41      	bgt.n	801255a <atanf+0xf2>
 80124d6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80124da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80124de:	eea0 7a27 	vfma.f32	s14, s0, s15
 80124e2:	2300      	movs	r3, #0
 80124e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80124ec:	1c5a      	adds	r2, r3, #1
 80124ee:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80124f2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80125d8 <atanf+0x170>
 80124f6:	eddf 5a39 	vldr	s11, [pc, #228]	; 80125dc <atanf+0x174>
 80124fa:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80125e0 <atanf+0x178>
 80124fe:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012502:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012506:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80125e4 <atanf+0x17c>
 801250a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801250e:	eddf 5a36 	vldr	s11, [pc, #216]	; 80125e8 <atanf+0x180>
 8012512:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012516:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80125ec <atanf+0x184>
 801251a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801251e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80125f0 <atanf+0x188>
 8012522:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012526:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80125f4 <atanf+0x18c>
 801252a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801252e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80125f8 <atanf+0x190>
 8012532:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012536:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80125fc <atanf+0x194>
 801253a:	eea7 5a26 	vfma.f32	s10, s14, s13
 801253e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8012600 <atanf+0x198>
 8012542:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012546:	ee27 7a26 	vmul.f32	s14, s14, s13
 801254a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801254e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012552:	d121      	bne.n	8012598 <atanf+0x130>
 8012554:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012558:	e795      	b.n	8012486 <atanf+0x1e>
 801255a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801255e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012562:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012566:	2301      	movs	r3, #1
 8012568:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801256c:	e7be      	b.n	80124ec <atanf+0x84>
 801256e:	4b25      	ldr	r3, [pc, #148]	; (8012604 <atanf+0x19c>)
 8012570:	429c      	cmp	r4, r3
 8012572:	dc0b      	bgt.n	801258c <atanf+0x124>
 8012574:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801257c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012580:	2302      	movs	r3, #2
 8012582:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801258a:	e7af      	b.n	80124ec <atanf+0x84>
 801258c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012590:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012594:	2303      	movs	r3, #3
 8012596:	e7a9      	b.n	80124ec <atanf+0x84>
 8012598:	4a1b      	ldr	r2, [pc, #108]	; (8012608 <atanf+0x1a0>)
 801259a:	491c      	ldr	r1, [pc, #112]	; (801260c <atanf+0x1a4>)
 801259c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80125a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80125a4:	edd3 6a00 	vldr	s13, [r3]
 80125a8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80125ac:	2d00      	cmp	r5, #0
 80125ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80125b2:	edd2 7a00 	vldr	s15, [r2]
 80125b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125ba:	bfb8      	it	lt
 80125bc:	eef1 7a67 	vneglt.f32	s15, s15
 80125c0:	e761      	b.n	8012486 <atanf+0x1e>
 80125c2:	bf00      	nop
 80125c4:	3fc90fdb 	.word	0x3fc90fdb
 80125c8:	bfc90fdb 	.word	0xbfc90fdb
 80125cc:	3edfffff 	.word	0x3edfffff
 80125d0:	7149f2ca 	.word	0x7149f2ca
 80125d4:	3f97ffff 	.word	0x3f97ffff
 80125d8:	3c8569d7 	.word	0x3c8569d7
 80125dc:	3d4bda59 	.word	0x3d4bda59
 80125e0:	bd6ef16b 	.word	0xbd6ef16b
 80125e4:	3d886b35 	.word	0x3d886b35
 80125e8:	3dba2e6e 	.word	0x3dba2e6e
 80125ec:	3e124925 	.word	0x3e124925
 80125f0:	3eaaaaab 	.word	0x3eaaaaab
 80125f4:	bd15a221 	.word	0xbd15a221
 80125f8:	bd9d8795 	.word	0xbd9d8795
 80125fc:	bde38e38 	.word	0xbde38e38
 8012600:	be4ccccd 	.word	0xbe4ccccd
 8012604:	401bffff 	.word	0x401bffff
 8012608:	08015b38 	.word	0x08015b38
 801260c:	08015b48 	.word	0x08015b48

08012610 <fabsf>:
 8012610:	ee10 3a10 	vmov	r3, s0
 8012614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012618:	ee00 3a10 	vmov	s0, r3
 801261c:	4770      	bx	lr
	...

08012620 <_init>:
 8012620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012622:	bf00      	nop
 8012624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012626:	bc08      	pop	{r3}
 8012628:	469e      	mov	lr, r3
 801262a:	4770      	bx	lr

0801262c <_fini>:
 801262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262e:	bf00      	nop
 8012630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012632:	bc08      	pop	{r3}
 8012634:	469e      	mov	lr, r3
 8012636:	4770      	bx	lr
