
Mini-Console-3-Firmware_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012360  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003520  080125f8  080125f8  000225f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b18  08015b18  0004028c  2**0
                  CONTENTS
  4 .ARM          00000008  08015b18  08015b18  00025b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b20  08015b20  0004028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b20  08015b20  00025b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b24  08015b24  00025b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  24000000  08015b28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d58  24000038  08015b60  00030038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002d90  08015b60  00032d90  2**0
                  ALLOC
 11 .sh0_ram      00000000  30040000  30040000  0004028c  2**0
                  CONTENTS
 12 .sh1_ram      00000000  38008000  38008000  0004028c  2**0
                  CONTENTS
 13 .buf_ram      0000028c  38000000  38000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bk_ram       00000000  38800000  38800000  0004028c  2**0
                  CONTENTS
 15 .qspi         00000000  90000000  90000000  0004028c  2**0
                  CONTENTS
 16 .ARM.attributes 0000002e  00000000  00000000  0004028c  2**0
                  CONTENTS, READONLY
 17 .comment      00000043  00000000  00000000  000402ba  2**0
                  CONTENTS, READONLY
 18 .debug_info   00043e1b  00000000  00000000  000402fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00008c34  00000000  00000000  00084118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0002ff59  00000000  00000000  0008cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 000017f8  00000000  00000000  000bcca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00004c59  00000000  00000000  000be4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000410f1  00000000  00000000  000c30f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   000447bd  00000000  00000000  001041ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    0014374e  00000000  00000000  001489a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  00004bd8  00000000  00000000  0028c0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000057  00000000  00000000  00290cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080125e0 	.word	0x080125e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	080125e0 	.word	0x080125e0

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <BSP_DRV_QSPI_Reset>:
    return BSP_OK;
}



uint8_t	BSP_DRV_QSPI_Reset(QUADSPI_TypeDef * hqspi) {
 80005e4:	b538      	push	{r3, r4, r5, lr}
 80005e6:	4604      	mov	r4, r0

	// 1. Exit QPI mode and fallback to SPI 1-bit mode
	BSP_STM32_QSPI_CfgNewCommand();
 80005e8:	f007 fcb8 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_4_LINES, QSPI_CMD_QPIDI);
 80005ec:	21f5      	movs	r1, #245	; 0xf5
 80005ee:	f44f 7040 	mov.w	r0, #768	; 0x300
 80005f2:	f007 fcbd 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80005f6:	2200      	movs	r2, #0
 80005f8:	4611      	mov	r1, r2
 80005fa:	4610      	mov	r0, r2
 80005fc:	f007 fcd0 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_StartTransmit(hqspi);  // This function can exit with error if chip was not in QPI mode - just ignore it
 8000600:	4620      	mov	r0, r4
 8000602:	f007 fd35 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>

	// 2. Sending Reset Enable command

    BSP_STM32_QSPI_CfgNewCommand();
 8000606:	f007 fca9 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RSTEN);
 800060a:	2166      	movs	r1, #102	; 0x66
 800060c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000610:	f007 fcae 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000614:	2200      	movs	r2, #0
 8000616:	4611      	mov	r1, r2
 8000618:	4610      	mov	r0, r2
 800061a:	f007 fcc1 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800061e:	4620      	mov	r0, r4
 8000620:	f007 fd26 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>
 8000624:	b108      	cbz	r0, 800062a <BSP_DRV_QSPI_Reset+0x46>
 8000626:	2001      	movs	r0, #1
	// 4. Waiting for chip ready status
    BSP_Delay(10); // Delay so CE line can go HIGH
    if (_DRV_QSPI_CheckStatus(hqspi, QSPI_MODE_SPI, 0x01, 0x00)) return BSP_ERROR;

    return BSP_OK;
}
 8000628:	bd38      	pop	{r3, r4, r5, pc}
    BSP_STM32_QSPI_CfgNewCommand();
 800062a:	4605      	mov	r5, r0
 800062c:	f007 fc96 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RST);
 8000630:	2199      	movs	r1, #153	; 0x99
 8000632:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000636:	f007 fc9b 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800063a:	462a      	mov	r2, r5
 800063c:	4629      	mov	r1, r5
 800063e:	4628      	mov	r0, r5
 8000640:	f007 fcae 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000644:	4620      	mov	r0, r4
 8000646:	f007 fd13 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>
 800064a:	4605      	mov	r5, r0
 800064c:	2800      	cmp	r0, #0
 800064e:	d1ea      	bne.n	8000626 <BSP_DRV_QSPI_Reset+0x42>
    BSP_Delay(10); // Delay so CE line can go HIGH
 8000650:	200a      	movs	r0, #10
 8000652:	f003 fd15 	bl	8004080 <BSP_Delay>
	BSP_STM32_QSPI_CfgNewCommand();
 8000656:	f007 fc81 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800065a:	462a      	mov	r2, r5
 800065c:	4629      	mov	r1, r5
 800065e:	4628      	mov	r0, r5
 8000660:	f007 fc9e 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_CfgAutoPooling(mask, match, 0x10, QSPI_MATCH_MODE_AND);
 8000664:	462b      	mov	r3, r5
 8000666:	2210      	movs	r2, #16
 8000668:	4629      	mov	r1, r5
 800066a:	2001      	movs	r0, #1
 800066c:	f007 fca0 	bl	8007fb0 <BSP_STM32_QSPI_CfgAutoPooling>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 8000670:	2105      	movs	r1, #5
 8000672:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000676:	f007 fc7b 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, 0x00000000, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	4629      	mov	r1, r5
 800067e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000682:	f007 fc85 	bl	8007f90 <BSP_STM32_QSPI_CfgData>
	if (BSP_STM32_QSPI_StartAutoPooling(hqspi)) return BSP_TIMEOUT;
 8000686:	4620      	mov	r0, r4
 8000688:	f007 fd44 	bl	8008114 <BSP_STM32_QSPI_StartAutoPooling>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800068c:	3800      	subs	r0, #0
 800068e:	bf18      	it	ne
 8000690:	2001      	movne	r0, #1
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}

08000694 <BSP_DRV_QSPI_Init>:



uint8_t BSP_DRV_QSPI_Init(QUADSPI_TypeDef * hqspi) {
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	4605      	mov	r5, r0
 8000698:	b083      	sub	sp, #12
    // For some reason memory chip is not working properly after every reset
    // Therefore operation is repeated as required (but not more than 4 times)
    do {

		// 1. Reset chip
		if (BSP_DRV_QSPI_Reset(hqspi)) continue;
 800069a:	4628      	mov	r0, r5
 800069c:	f7ff ffa2 	bl	80005e4 <BSP_DRV_QSPI_Reset>
 80006a0:	4604      	mov	r4, r0
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d1f9      	bne.n	800069a <BSP_DRV_QSPI_Init+0x6>

		// 2. Checking communication and identify chip
		BSP_STM32_QSPI_CfgNewCommand();
 80006a6:	f007 fc59 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDMDID);
 80006aa:	2190      	movs	r1, #144	; 0x90
 80006ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006b0:	f007 fc5e 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgAddress(QSPI_ADDRESS_1_LINE, QSPI_ADDRESS_24_BITS, 0x00);
 80006b4:	4622      	mov	r2, r4
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006be:	f007 fc5f 	bl	8007f80 <BSP_STM32_QSPI_CfgAddress>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, chip_id, 2);
 80006c2:	2202      	movs	r2, #2
 80006c4:	a901      	add	r1, sp, #4
 80006c6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80006ca:	f007 fc61 	bl	8007f90 <BSP_STM32_QSPI_CfgData>
		BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80006ce:	4622      	mov	r2, r4
 80006d0:	4621      	mov	r1, r4
 80006d2:	4620      	mov	r0, r4
 80006d4:	f007 fc64 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
		if (BSP_STM32_QSPI_StartReceive(hqspi)) continue;
 80006d8:	4628      	mov	r0, r5
 80006da:	f007 fc75 	bl	8007fc8 <BSP_STM32_QSPI_StartReceive>
 80006de:	4604      	mov	r4, r0
 80006e0:	2800      	cmp	r0, #0
 80006e2:	d1da      	bne.n	800069a <BSP_DRV_QSPI_Init+0x6>

		if (chip_id[0] != QSPI_CHIP_MID) continue;
 80006e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80006e8:	2b9d      	cmp	r3, #157	; 0x9d
 80006ea:	d1d6      	bne.n	800069a <BSP_DRV_QSPI_Init+0x6>

		if (chip_id[1] != QSPI_CHIP_CID) continue;
 80006ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80006f0:	2b17      	cmp	r3, #23
 80006f2:	d1d2      	bne.n	800069a <BSP_DRV_QSPI_Init+0x6>
		break;

    } while (1);

	// 3. Setup dummy cycles
    BSP_STM32_QSPI_CfgNewCommand();
 80006f4:	f007 fc32 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDRP);
 80006f8:	2161      	movs	r1, #97	; 0x61
 80006fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006fe:	f007 fc37 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &read_reg, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	f10d 0102 	add.w	r1, sp, #2
 8000708:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800070c:	f007 fc40 	bl	8007f90 <BSP_STM32_QSPI_CfgData>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000710:	4622      	mov	r2, r4
 8000712:	4621      	mov	r1, r4
 8000714:	4620      	mov	r0, r4
 8000716:	f007 fc43 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartReceive(hqspi)) return BSP_ERROR;
 800071a:	4628      	mov	r0, r5
 800071c:	f007 fc54 	bl	8007fc8 <BSP_STM32_QSPI_StartReceive>
 8000720:	4604      	mov	r4, r0
 8000722:	b110      	cbz	r0, 800072a <BSP_DRV_QSPI_Init+0x96>
 8000724:	2001      	movs	r0, #1
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_QPIEN);
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;

	return BSP_OK;
}
 8000726:	b003      	add	sp, #12
 8000728:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(read_reg, 0b01111000, (QSPI_CFG_DUMMY_CLKS << 3));
 800072a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800072e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8000732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000736:	f88d 3002 	strb.w	r3, [sp, #2]
	BSP_STM32_QSPI_CfgNewCommand();
 800073a:	f007 fc0f 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800073e:	4622      	mov	r2, r4
 8000740:	4621      	mov	r1, r4
 8000742:	4620      	mov	r0, r4
 8000744:	f007 fc2c 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WREN);
 8000748:	2106      	movs	r1, #6
 800074a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800074e:	f007 fc0f 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000752:	4628      	mov	r0, r5
 8000754:	f007 fc8c 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>
 8000758:	4604      	mov	r4, r0
 800075a:	2800      	cmp	r0, #0
 800075c:	d1e2      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
    BSP_STM32_QSPI_CfgNewCommand();
 800075e:	f007 fbfd 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_SRPV);
 8000762:	2163      	movs	r1, #99	; 0x63
 8000764:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000768:	f007 fc02 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &read_reg, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	f10d 0102 	add.w	r1, sp, #2
 8000772:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000776:	f007 fc0b 	bl	8007f90 <BSP_STM32_QSPI_CfgData>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800077a:	4622      	mov	r2, r4
 800077c:	4621      	mov	r1, r4
 800077e:	4620      	mov	r0, r4
 8000780:	f007 fc0e 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 8000784:	4628      	mov	r0, r5
 8000786:	f007 fc73 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>
 800078a:	4604      	mov	r4, r0
 800078c:	2800      	cmp	r0, #0
 800078e:	d1c9      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
	BSP_STM32_QSPI_CfgNewCommand();
 8000790:	f007 fbe4 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000794:	4622      	mov	r2, r4
 8000796:	4621      	mov	r1, r4
 8000798:	4620      	mov	r0, r4
 800079a:	f007 fc01 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_CfgAutoPooling(mask, match, 0x10, QSPI_MATCH_MODE_AND);
 800079e:	4623      	mov	r3, r4
 80007a0:	2210      	movs	r2, #16
 80007a2:	4621      	mov	r1, r4
 80007a4:	2001      	movs	r0, #1
 80007a6:	f007 fc03 	bl	8007fb0 <BSP_STM32_QSPI_CfgAutoPooling>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 80007aa:	2105      	movs	r1, #5
 80007ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007b0:	f007 fbde 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, 0x00000000, 1);
 80007b4:	4621      	mov	r1, r4
 80007b6:	2201      	movs	r2, #1
 80007b8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80007bc:	f007 fbe8 	bl	8007f90 <BSP_STM32_QSPI_CfgData>
	if (BSP_STM32_QSPI_StartAutoPooling(hqspi)) return BSP_TIMEOUT;
 80007c0:	4628      	mov	r0, r5
 80007c2:	f007 fca7 	bl	8008114 <BSP_STM32_QSPI_StartAutoPooling>
 80007c6:	4604      	mov	r4, r0
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d1ab      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
    BSP_STM32_QSPI_CfgNewCommand();
 80007cc:	f007 fbc6 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_EN4B);
 80007d0:	21b7      	movs	r1, #183	; 0xb7
 80007d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007d6:	f007 fbcb 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80007da:	4622      	mov	r2, r4
 80007dc:	4621      	mov	r1, r4
 80007de:	4620      	mov	r0, r4
 80007e0:	f007 fbde 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 80007e4:	4628      	mov	r0, r5
 80007e6:	f007 fc43 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>
 80007ea:	4604      	mov	r4, r0
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d199      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
    BSP_STM32_QSPI_CfgNewCommand();
 80007f0:	f007 fbb4 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 80007f4:	2105      	movs	r1, #5
 80007f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007fa:	f007 fbb9 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
    BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &status_reg, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	f10d 0103 	add.w	r1, sp, #3
 8000804:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000808:	f007 fbc2 	bl	8007f90 <BSP_STM32_QSPI_CfgData>
    BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 800080c:	4622      	mov	r2, r4
 800080e:	4621      	mov	r1, r4
 8000810:	4620      	mov	r0, r4
 8000812:	f007 fbc5 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
    if (BSP_STM32_QSPI_StartReceive(hqspi)) return BSP_ERROR;
 8000816:	4628      	mov	r0, r5
 8000818:	f007 fbd6 	bl	8007fc8 <BSP_STM32_QSPI_StartReceive>
 800081c:	2800      	cmp	r0, #0
 800081e:	d181      	bne.n	8000724 <BSP_DRV_QSPI_Init+0x90>
    if ((status_reg & (0b01000000)) == 0) {
 8000820:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000824:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 8000828:	d151      	bne.n	80008ce <BSP_DRV_QSPI_Init+0x23a>
    	MODIFY_REG(status_reg, 0b01000000, (1 << 6));
 800082a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082e:	f88d 3003 	strb.w	r3, [sp, #3]
	BSP_STM32_QSPI_CfgNewCommand();
 8000832:	f007 fb93 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000836:	4622      	mov	r2, r4
 8000838:	4621      	mov	r1, r4
 800083a:	4620      	mov	r0, r4
 800083c:	f007 fbb0 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WREN);
 8000840:	2106      	movs	r1, #6
 8000842:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000846:	f007 fb93 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800084a:	4628      	mov	r0, r5
 800084c:	f007 fc10 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>
 8000850:	4604      	mov	r4, r0
 8000852:	2800      	cmp	r0, #0
 8000854:	f47f af66 	bne.w	8000724 <BSP_DRV_QSPI_Init+0x90>
		BSP_STM32_QSPI_CfgNewCommand();
 8000858:	f007 fb80 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_WRSR);
 800085c:	2101      	movs	r1, #1
 800085e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000862:	f007 fb85 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, &status_reg, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	f10d 0103 	add.w	r1, sp, #3
 800086c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000870:	f007 fb8e 	bl	8007f90 <BSP_STM32_QSPI_CfgData>
		BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000874:	4622      	mov	r2, r4
 8000876:	4621      	mov	r1, r4
 8000878:	4620      	mov	r0, r4
 800087a:	f007 fb91 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
		if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 800087e:	4628      	mov	r0, r5
 8000880:	f007 fbf6 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>
 8000884:	4604      	mov	r4, r0
 8000886:	2800      	cmp	r0, #0
 8000888:	f47f af4c 	bne.w	8000724 <BSP_DRV_QSPI_Init+0x90>
		BSP_Delay(10); // Delay so CE line can go HIGH
 800088c:	200a      	movs	r0, #10
 800088e:	f003 fbf7 	bl	8004080 <BSP_Delay>
	BSP_STM32_QSPI_CfgNewCommand();
 8000892:	f007 fb63 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 8000896:	4622      	mov	r2, r4
 8000898:	4621      	mov	r1, r4
 800089a:	4620      	mov	r0, r4
 800089c:	f007 fb80 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
	BSP_STM32_QSPI_CfgAutoPooling(mask, match, 0x10, QSPI_MATCH_MODE_AND);
 80008a0:	4623      	mov	r3, r4
 80008a2:	2210      	movs	r2, #16
 80008a4:	4621      	mov	r1, r4
 80008a6:	2001      	movs	r0, #1
 80008a8:	f007 fb82 	bl	8007fb0 <BSP_STM32_QSPI_CfgAutoPooling>
		BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_RDSR);
 80008ac:	2105      	movs	r1, #5
 80008ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008b2:	f007 fb5d 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
		BSP_STM32_QSPI_CfgData(QSPI_DATA_1_LINE, 0x00000000, 1);
 80008b6:	2201      	movs	r2, #1
 80008b8:	4621      	mov	r1, r4
 80008ba:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80008be:	f007 fb67 	bl	8007f90 <BSP_STM32_QSPI_CfgData>
	if (BSP_STM32_QSPI_StartAutoPooling(hqspi)) return BSP_TIMEOUT;
 80008c2:	4628      	mov	r0, r5
 80008c4:	f007 fc26 	bl	8008114 <BSP_STM32_QSPI_StartAutoPooling>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	f47f af2b 	bne.w	8000724 <BSP_DRV_QSPI_Init+0x90>
    BSP_STM32_QSPI_CfgNewCommand();
 80008ce:	f007 fb45 	bl	8007f5c <BSP_STM32_QSPI_CfgNewCommand>
    BSP_STM32_QSPI_CfgInstruction(QSPI_INSTRUCTION_1_LINE, QSPI_CMD_QPIEN);
 80008d2:	2135      	movs	r1, #53	; 0x35
 80008d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008d8:	f007 fb4a 	bl	8007f70 <BSP_STM32_QSPI_CfgInstruction>
	BSP_STM32_QSPI_CfgOptions(QSPI_DDR_MODE_DISABLE, QSPI_DDR_HHC_ANALOG_DELAY, QSPI_SIOO_INST_EVERY_CMD);
 80008dc:	2200      	movs	r2, #0
 80008de:	4611      	mov	r1, r2
 80008e0:	4610      	mov	r0, r2
 80008e2:	f007 fb5d 	bl	8007fa0 <BSP_STM32_QSPI_CfgOptions>
	if (BSP_STM32_QSPI_StartTransmit(hqspi)) return BSP_ERROR;
 80008e6:	4628      	mov	r0, r5
 80008e8:	f007 fbc2 	bl	8008070 <BSP_STM32_QSPI_StartTransmit>
	return BSP_OK;
 80008ec:	3800      	subs	r0, #0
 80008ee:	bf18      	it	ne
 80008f0:	2001      	movne	r0, #1
 80008f2:	e718      	b.n	8000726 <BSP_DRV_QSPI_Init+0x92>
 80008f4:	0000      	movs	r0, r0
	...

080008f8 <BSP_DRV_SDRAM_Init>:
	return val;
}


// SDRAM Configuration generator
uint8_t	BSP_DRV_SDRAM_Init(FMC_SDRAM_TypeDef *sdram, uint32_t SDBank, uint32_t SDClockPeriod, uint32_t Ck_Freq) {
 80008f8:	ee06 3a90 	vmov	s13, r3
		default:	return BSP_ERROR;
	}

	// Calculating memory timings

	float CPeriod = 1000.0 / (float)Ck_Freq; // Returns period in ns
 80008fc:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8000b10 <BSP_DRV_SDRAM_Init+0x218>
 8000900:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
	volatile uint32_t timeout = SDRAM_TIMEOUT;
 8000904:	4b83      	ldr	r3, [pc, #524]	; (8000b14 <BSP_DRV_SDRAM_Init+0x21c>)
	float CPeriod = 1000.0 / (float)Ck_Freq; // Returns period in ns
 8000906:	eef8 7a66 	vcvt.f32.u32	s15, s13
uint8_t	BSP_DRV_SDRAM_Init(FMC_SDRAM_TypeDef *sdram, uint32_t SDBank, uint32_t SDClockPeriod, uint32_t Ck_Freq) {
 800090a:	4684      	mov	ip, r0

	uint32_t param_LoadToActiveDelay = limitvalue(round(1.0 * BSP_SDRAM_TMRD / CPeriod), 1, 16);
 800090c:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
	float CPeriod = 1000.0 / (float)Ck_Freq; // Returns period in ns
 8000910:	ee87 4a27 	vdiv.f32	s8, s14, s15
uint8_t	BSP_DRV_SDRAM_Init(FMC_SDRAM_TypeDef *sdram, uint32_t SDBank, uint32_t SDClockPeriod, uint32_t Ck_Freq) {
 8000914:	b530      	push	{r4, r5, lr}
 8000916:	b083      	sub	sp, #12
	volatile uint32_t timeout = SDRAM_TIMEOUT;
 8000918:	9301      	str	r3, [sp, #4]
	uint32_t param_LoadToActiveDelay = limitvalue(round(1.0 * BSP_SDRAM_TMRD / CPeriod), 1, 16);
 800091a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 800091e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8000922:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000926:	feb8 5b45 	vrinta.f64	d5, d5
 800092a:	eebc 6bc5 	vcvt.u32.f64	s12, d5
 800092e:	ee16 ea10 	vmov	lr, s12
	if (value > max) val = max;
 8000932:	f1be 0f10 	cmp.w	lr, #16
 8000936:	f200 80d6 	bhi.w	8000ae6 <BSP_DRV_SDRAM_Init+0x1ee>


	// Configuring SDRAM timings

	if (SDBank == FMC_SDRAM_BANK1) {
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 800093a:	f1be 0f01 	cmp.w	lr, #1
 800093e:	bf38      	it	cc
 8000940:	f04f 0e01 	movcc.w	lr, #1
 8000944:	f10e 3eff 	add.w	lr, lr, #4294967295
	uint32_t param_ExitSelfRefreshDelay = limitvalue(round(1.0 * BSP_SDRAM_TXSR / CPeriod), 1, 16);
 8000948:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8000af0 <BSP_DRV_SDRAM_Init+0x1f8>
 800094c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000950:	feb8 5b45 	vrinta.f64	d5, d5
 8000954:	eebc 6bc5 	vcvt.u32.f64	s12, d5
 8000958:	ee16 3a10 	vmov	r3, s12
	if (value > max) val = max;
 800095c:	2b10      	cmp	r3, #16
 800095e:	f200 80c0 	bhi.w	8000ae2 <BSP_DRV_SDRAM_Init+0x1ea>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000962:	2b01      	cmp	r3, #1
 8000964:	bf38      	it	cc
 8000966:	2301      	movcc	r3, #1
 8000968:	1e5d      	subs	r5, r3, #1
 800096a:	012d      	lsls	r5, r5, #4
	uint32_t param_SelfRefreshTime = limitvalue(round(1.0 * BSP_SDRAM_TRAS / CPeriod), 1, 16);
 800096c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000af8 <BSP_DRV_SDRAM_Init+0x200>
 8000970:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000974:	feb8 5b45 	vrinta.f64	d5, d5
 8000978:	eebc 6bc5 	vcvt.u32.f64	s12, d5
 800097c:	ee16 3a10 	vmov	r3, s12
	if (value > max) val = max;
 8000980:	2b10      	cmp	r3, #16
 8000982:	f200 80ab 	bhi.w	8000adc <BSP_DRV_SDRAM_Init+0x1e4>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000986:	2b01      	cmp	r3, #1
 8000988:	bf38      	it	cc
 800098a:	2301      	movcc	r3, #1
 800098c:	1e5c      	subs	r4, r3, #1
 800098e:	0224      	lsls	r4, r4, #8
	uint32_t param_RowCycleDelay = limitvalue(round(1.0 * BSP_SDRAM_TRC / CPeriod), 1, 16);
 8000990:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8000b00 <BSP_DRV_SDRAM_Init+0x208>
 8000994:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000998:	feb8 7b47 	vrinta.f64	d7, d7
 800099c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a0:	ee17 0a90 	vmov	r0, s15
	if (value > max) val = max;
 80009a4:	2810      	cmp	r0, #16
 80009a6:	f200 8096 	bhi.w	8000ad6 <BSP_DRV_SDRAM_Init+0x1de>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80009aa:	2801      	cmp	r0, #1
 80009ac:	bf38      	it	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	1e43      	subs	r3, r0, #1
 80009b2:	031b      	lsls	r3, r3, #12
	if (SDBank == FMC_SDRAM_BANK1) {
 80009b4:	2900      	cmp	r1, #0
 80009b6:	d169      	bne.n	8000a8c <BSP_DRV_SDRAM_Init+0x194>
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80009b8:	ea4e 0303 	orr.w	r3, lr, r3
 80009bc:	4856      	ldr	r0, [pc, #344]	; (8000b18 <BSP_DRV_SDRAM_Init+0x220>)
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], 0xFFFFFFFF,(param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber | param_CASLatency |
 80009be:	f8dc 1000 	ldr.w	r1, [ip]
	}

	// Initialize memory IC

	uint32_t CommandTarget = 0;
	if (SDBank == FMC_SDRAM_BANK1) CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK1; else CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK2;
 80009c2:	2110      	movs	r1, #16
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80009c4:	432b      	orrs	r3, r5
 80009c6:	4323      	orrs	r3, r4
 80009c8:	4318      	orrs	r0, r3
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], 0xFFFFFFFF,(param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber | param_CASLatency |
 80009ca:	f241 1369 	movw	r3, #4457	; 0x1169
 80009ce:	4313      	orrs	r3, r2
 80009d0:	f8cc 3000 	str.w	r3, [ip]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], 0xFFFFFFFF, 	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 80009d4:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80009d8:	f8cc 0008 	str.w	r0, [ip, #8]

	// Little delay
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 80009dc:	4b4f      	ldr	r3, [pc, #316]	; (8000b1c <BSP_DRV_SDRAM_Init+0x224>)
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	9b01      	ldr	r3, [sp, #4]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	9201      	str	r2, [sp, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1fa      	bne.n	80009e0 <BSP_DRV_SDRAM_Init+0xe8>

	// Configure a clock configuration enable command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80009ea:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80009ee:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
				((FMC_SDRAM_CMD_CLK_ENABLE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0) << FMC_SDCMR_MRD_Pos)));

	// Little delay
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 80009f2:	4a4a      	ldr	r2, [pc, #296]	; (8000b1c <BSP_DRV_SDRAM_Init+0x224>)
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80009f4:	4003      	ands	r3, r0
 80009f6:	430b      	orrs	r3, r1
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	f8cc 3010 	str.w	r3, [ip, #16]
	timeout = SDRAM_TIMEOUT * 0xF;	while (timeout--);
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9801      	ldr	r0, [sp, #4]
 8000a04:	1e43      	subs	r3, r0, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d1fa      	bne.n	8000a02 <BSP_DRV_SDRAM_Init+0x10a>

	// Configure a PALL (precharge all) command
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a0c:	f8dc 3010 	ldr.w	r3, [ip, #16]
				((FMC_SDRAM_CMD_LOAD_MODE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0x0230) << FMC_SDCMR_MRD_Pos)));
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
			((FMC_SDRAM_CMD_LOAD_MODE) | (CommandTarget) | (((1) - 1U) << FMC_SDCMR_NRFS_Pos) | ((0x0220) << FMC_SDCMR_MRD_Pos)));

	// Program Refresh Period
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a10:	eeb8 7b66 	vcvt.f64.u32	d7, s13
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a14:	4a42      	ldr	r2, [pc, #264]	; (8000b20 <BSP_DRV_SDRAM_Init+0x228>)
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a16:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8cc 3010 	str.w	r3, [ip, #16]
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a26:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	f043 03e3 	orr.w	r3, r3, #227	; 0xe3
 8000a32:	f8cc 3010 	str.w	r3, [ip, #16]
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a36:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8000a3a:	4013      	ands	r3, r2
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a3c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000b08 <BSP_DRV_SDRAM_Init+0x210>
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a40:	430b      	orrs	r3, r1
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a42:	ee27 7b05 	vmul.f64	d7, d7, d5
	MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a46:	f043 03e3 	orr.w	r3, r3, #227	; 0xe3
 8000a4a:	f8cc 3010 	str.w	r3, [ip, #16]
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a4e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <BSP_DRV_SDRAM_Init+0x22c>)
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a56:	feb8 7b47 	vrinta.f64	d7, d7
 8000a5a:	ee37 7b46 	vsub.f64	d7, d7, d6
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	431a      	orrs	r2, r3
	uint32_t param_RefreshPeriod = round(1000.0 * Ck_Freq * BSP_SDRAM_REFRESH_PERIOD / BSP_SDRAM_REFRESH_COUNT) - 20;
 8000a62:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	MODIFY_REG(sdram->SDRTR, FMC_SDRTR_COUNT, (param_RefreshPeriod << FMC_SDRTR_COUNT_Pos));
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <BSP_DRV_SDRAM_Init+0x230>)
	if (BSP_SDRAM_CAS_LATENCY == 2) MODIFY_REG(sdram->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8000a68:	f8cc 2010 	str.w	r2, [ip, #16]
	MODIFY_REG(sdram->SDRTR, FMC_SDRTR_COUNT, (param_RefreshPeriod << FMC_SDRTR_COUNT_Pos));
 8000a6c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8000a70:	ee17 1a10 	vmov	r1, s14
 8000a74:	4013      	ands	r3, r2

	// Enable FMC Peripheral
	__FMC_ENABLE();
 8000a76:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <BSP_DRV_SDRAM_Init+0x234>)
	MODIFY_REG(sdram->SDRTR, FMC_SDRTR_COUNT, (param_RefreshPeriod << FMC_SDRTR_COUNT_Pos));
 8000a78:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000a7c:	f8cc 3014 	str.w	r3, [ip, #20]
	__FMC_ENABLE();
 8000a80:	6813      	ldr	r3, [r2, #0]
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	6013      	str	r3, [r2, #0]

	return BSP_OK;
}
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd30      	pop	{r4, r5, pc}
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000a8c:	f8dc 0000 	ldr.w	r0, [ip]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000a90:	ea4e 0e04 	orr.w	lr, lr, r4
 8000a94:	4c26      	ldr	r4, [pc, #152]	; (8000b30 <BSP_DRV_SDRAM_Init+0x238>)
	if (SDBank == FMC_SDRAM_BANK1) CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK1; else CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK2;
 8000a96:	2108      	movs	r1, #8
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000a98:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000a9c:	ea4e 0e05 	orr.w	lr, lr, r5
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000aa0:	4302      	orrs	r2, r0
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000aa2:	ea4e 0404 	orr.w	r4, lr, r4
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK1], (FMC_SDCRx_SDCLK | FMC_SDCRx_RBURST | FMC_SDCRx_RPIPE), (SDClockPeriod | param_ReadBurst | param_ReadPipeDelay));
 8000aa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000aaa:	f8cc 2000 	str.w	r2, [ip]
	    MODIFY_REG(sdram->SDCR[FMC_SDRAM_BANK2], 0xFFFFFFFF, (param_ColumnBitsNumber | param_RowBitsNumber | param_MemoryDataWidth | param_InternalBankNumber |
 8000aae:	f240 1269 	movw	r2, #361	; 0x169
 8000ab2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8000ab6:	f8cc 2004 	str.w	r2, [ip, #4]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK1], FMC_SDTRx_TRC | FMC_SDTRx_TRP, (((param_RowCycleDelay) - 1U) << FMC_SDTRx_TRC_Pos) | (((param_RPDelay) - 1U) << FMC_SDTRx_TRP_Pos));
 8000aba:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <BSP_DRV_SDRAM_Init+0x23c>)
 8000abc:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8000ac0:	4002      	ands	r2, r0
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000ac8:	f8cc 2008 	str.w	r2, [ip, #8]
	    MODIFY_REG(sdram->SDTR[FMC_SDRAM_BANK2], 0xFFFFFFFF,	(((param_LoadToActiveDelay) - 1U) | (((param_ExitSelfRefreshDelay) - 1U) << FMC_SDTRx_TXSR_Pos) |
 8000acc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8000ad0:	f8cc 400c 	str.w	r4, [ip, #12]
	if (SDBank == FMC_SDRAM_BANK1) CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK1; else CommandTarget =  FMC_SDRAM_CMD_TARGET_BANK2;
 8000ad4:	e782      	b.n	80009dc <BSP_DRV_SDRAM_Init+0xe4>
 8000ad6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ada:	e76b      	b.n	80009b4 <BSP_DRV_SDRAM_Init+0xbc>
 8000adc:	f44f 6470 	mov.w	r4, #3840	; 0xf00
 8000ae0:	e756      	b.n	8000990 <BSP_DRV_SDRAM_Init+0x98>
 8000ae2:	25f0      	movs	r5, #240	; 0xf0
 8000ae4:	e742      	b.n	800096c <BSP_DRV_SDRAM_Init+0x74>
 8000ae6:	f04f 0e0f 	mov.w	lr, #15
 8000aea:	e72d      	b.n	8000948 <BSP_DRV_SDRAM_Init+0x50>
 8000aec:	f3af 8000 	nop.w
 8000af0:	00000000 	.word	0x00000000
 8000af4:	40518000 	.word	0x40518000
 8000af8:	00000000 	.word	0x00000000
 8000afc:	40450000 	.word	0x40450000
 8000b00:	00000000 	.word	0x00000000
 8000b04:	404e0000 	.word	0x404e0000
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	401f4000 	.word	0x401f4000
 8000b10:	447a0000 	.word	0x447a0000
 8000b14:	000fffff 	.word	0x000fffff
 8000b18:	02210000 	.word	0x02210000
 8000b1c:	00effff1 	.word	0x00effff1
 8000b20:	ffc00000 	.word	0xffc00000
 8000b24:	00044004 	.word	0x00044004
 8000b28:	ffffc001 	.word	0xffffc001
 8000b2c:	52004000 	.word	0x52004000
 8000b30:	02010000 	.word	0x02010000
 8000b34:	ff0f0fff 	.word	0xff0f0fff

08000b38 <BSP_DRV_IMU_Init>:
KALMAN_HandleTypeDef KALMAN_pitch = {0};
KALMAN_HandleTypeDef KALMAN_roll = {0};
KALMAN_HandleTypeDef KALMAN_yaw = {0};


uint8_t	BSP_DRV_IMU_Init(IMU_HandleTypeDef *himu, I2C_TypeDef *hi2c) {
 8000b38:	b530      	push	{r4, r5, lr}
	// Resetting IMU global variable
	himu->cal.c_ox = 0;
 8000b3a:	2200      	movs	r2, #0
uint8_t	BSP_DRV_IMU_Init(IMU_HandleTypeDef *himu, I2C_TypeDef *hi2c) {
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	460c      	mov	r4, r1
	himu->cal.c_y = 0;
	himu->cal.c_z = 0;
	himu->cal.progress = 0;

	// Reseting MPU
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x80, 100)) return BSP_ERROR;
 8000b40:	2564      	movs	r5, #100	; 0x64
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	21d0      	movs	r1, #208	; 0xd0
 8000b46:	9500      	str	r5, [sp, #0]
	himu->cal.progress = 0;
 8000b48:	6282      	str	r2, [r0, #40]	; 0x28
	himu->cal.c_oy = 0;
 8000b4a:	e9c0 2204 	strd	r2, r2, [r0, #16]
	himu->cal.c_x = 0;
 8000b4e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	himu->cal.c_z = 0;
 8000b52:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x80, 100)) return BSP_ERROR;
 8000b56:	226b      	movs	r2, #107	; 0x6b
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f006 fc97 	bl	800748c <BSP_STM32_I2C_RegWrite>
 8000b5e:	b118      	cbz	r0, 8000b68 <BSP_DRV_IMU_Init+0x30>
 8000b60:	2401      	movs	r4, #1
	KALMAN_Init(&KALMAN_pitch);
	KALMAN_Init(&KALMAN_roll);
	KALMAN_Init(&KALMAN_yaw);

	return BSP_OK;
}
 8000b62:	4620      	mov	r0, r4
 8000b64:	b003      	add	sp, #12
 8000b66:	bd30      	pop	{r4, r5, pc}
	BSP_Delay(100);
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f003 fa89 	bl	8004080 <BSP_Delay>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_PWR_MGMT, 0x03, 100)) return BSP_ERROR;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	226b      	movs	r2, #107	; 0x6b
 8000b72:	21d0      	movs	r1, #208	; 0xd0
 8000b74:	4620      	mov	r0, r4
 8000b76:	9500      	str	r5, [sp, #0]
 8000b78:	f006 fc88 	bl	800748c <BSP_STM32_I2C_RegWrite>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d1ef      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_GYRO_CFG, 0x08, 100)) return BSP_ERROR;
 8000b80:	2308      	movs	r3, #8
 8000b82:	221b      	movs	r2, #27
 8000b84:	21d0      	movs	r1, #208	; 0xd0
 8000b86:	4620      	mov	r0, r4
 8000b88:	9500      	str	r5, [sp, #0]
 8000b8a:	f006 fc7f 	bl	800748c <BSP_STM32_I2C_RegWrite>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d1e6      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_ACCEL_CFG, 0x00, 100)) return BSP_ERROR;
 8000b92:	4603      	mov	r3, r0
 8000b94:	221c      	movs	r2, #28
 8000b96:	21d0      	movs	r1, #208	; 0xd0
 8000b98:	4620      	mov	r0, r4
 8000b9a:	9500      	str	r5, [sp, #0]
 8000b9c:	f006 fc76 	bl	800748c <BSP_STM32_I2C_RegWrite>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d1dd      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_CONFIG, 0x02, 100)) return BSP_ERROR;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	221a      	movs	r2, #26
 8000ba8:	21d0      	movs	r1, #208	; 0xd0
 8000baa:	4620      	mov	r0, r4
 8000bac:	9500      	str	r5, [sp, #0]
 8000bae:	f006 fc6d 	bl	800748c <BSP_STM32_I2C_RegWrite>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d1d4      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_SMPLRT_DIV, 39, 100)) return BSP_ERROR;
 8000bb6:	2327      	movs	r3, #39	; 0x27
 8000bb8:	2219      	movs	r2, #25
 8000bba:	21d0      	movs	r1, #208	; 0xd0
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	9500      	str	r5, [sp, #0]
 8000bc0:	f006 fc64 	bl	800748c <BSP_STM32_I2C_RegWrite>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d1cb      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_INT_CFG, 0x10, 100)) return BSP_ERROR;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	2237      	movs	r2, #55	; 0x37
 8000bcc:	21d0      	movs	r1, #208	; 0xd0
 8000bce:	4620      	mov	r0, r4
 8000bd0:	9500      	str	r5, [sp, #0]
 8000bd2:	f006 fc5b 	bl	800748c <BSP_STM32_I2C_RegWrite>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d1c2      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	if (BSP_STM32_I2C_RegWrite(hi2c, (IMU_I2C_ADDR << 1), IMU_REG_INT_EN, 0x01, 100)) return BSP_ERROR;
 8000bda:	4620      	mov	r0, r4
 8000bdc:	2301      	movs	r3, #1
 8000bde:	2238      	movs	r2, #56	; 0x38
 8000be0:	21d0      	movs	r1, #208	; 0xd0
 8000be2:	9500      	str	r5, [sp, #0]
 8000be4:	f006 fc52 	bl	800748c <BSP_STM32_I2C_RegWrite>
 8000be8:	4604      	mov	r4, r0
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d1b8      	bne.n	8000b60 <BSP_DRV_IMU_Init+0x28>
	KALMAN_Init(&KALMAN_pitch);
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <BSP_DRV_IMU_Init+0xcc>)
 8000bf0:	f004 fb44 	bl	800527c <KALMAN_Init>
	KALMAN_Init(&KALMAN_roll);
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <BSP_DRV_IMU_Init+0xd0>)
 8000bf6:	f004 fb41 	bl	800527c <KALMAN_Init>
	KALMAN_Init(&KALMAN_yaw);
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <BSP_DRV_IMU_Init+0xd4>)
 8000bfc:	f004 fb3e 	bl	800527c <KALMAN_Init>
	return BSP_OK;
 8000c00:	e7af      	b.n	8000b62 <BSP_DRV_IMU_Init+0x2a>
 8000c02:	bf00      	nop
 8000c04:	24000054 	.word	0x24000054
 8000c08:	24000090 	.word	0x24000090
 8000c0c:	240000cc 	.word	0x240000cc

08000c10 <BSP_DRV_IMU_Parse>:
	himu->cal.progress = 128;
	return BSP_OK;
}


void BSP_DRV_IMU_Parse(IMU_HandleTypeDef *himu) {
 8000c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c14:	4604      	mov	r4, r0
 8000c16:	ed2d 8b04 	vpush	{d8-d9}

	// Parsing data received from IMU - integer calculations

	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000c1a:	7903      	ldrb	r3, [r0, #4]
void BSP_DRV_IMU_Parse(IMU_HandleTypeDef *himu) {
 8000c1c:	b083      	sub	sp, #12
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000c1e:	7946      	ldrb	r6, [r0, #5]
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000c20:	f894 c003 	ldrb.w	ip, [r4, #3]
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000c24:	eb06 2603 	add.w	r6, r6, r3, lsl #8
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000c28:	78a3      	ldrb	r3, [r4, #2]
	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000c2a:	7802      	ldrb	r2, [r0, #0]
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000c2c:	eb0c 2c03 	add.w	ip, ip, r3, lsl #8
	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000c30:	7840      	ldrb	r0, [r0, #1]
	z = -z;

	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c32:	7a23      	ldrb	r3, [r4, #8]
	int32_t z = (int16_t)((uint16_t)(himu->raw_data[4] << 8) + himu->raw_data[5]);
 8000c34:	b236      	sxth	r6, r6
	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c36:	7a61      	ldrb	r1, [r4, #9]
	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000c38:	eb00 2002 	add.w	r0, r0, r2, lsl #8
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c3c:	7ae2      	ldrb	r2, [r4, #11]
	int32_t x = (int16_t)((uint16_t)(himu->raw_data[2] << 8) + himu->raw_data[3]);
 8000c3e:	fa0f fc8c 	sxth.w	ip, ip
	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c42:	eb01 2103 	add.w	r1, r1, r3, lsl #8
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c46:	7aa3      	ldrb	r3, [r4, #10]
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c48:	7b25      	ldrb	r5, [r4, #12]
	int32_t y = (int16_t)((uint16_t)(himu->raw_data[0] << 8) + himu->raw_data[1]);
 8000c4a:	b200      	sxth	r0, r0
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c4c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c50:	7b63      	ldrb	r3, [r4, #13]

	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c52:	f894 e007 	ldrb.w	lr, [r4, #7]
	int32_t oy = (int16_t)((uint16_t)(himu->raw_data[8] << 8) + himu->raw_data[9]);
 8000c56:	b209      	sxth	r1, r1
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c58:	eb03 2305 	add.w	r3, r3, r5, lsl #8
	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c5c:	79a5      	ldrb	r5, [r4, #6]
	int32_t ox = (int16_t)((uint16_t)(himu->raw_data[10] << 8) + himu->raw_data[11]);
 8000c5e:	b212      	sxth	r2, r2
	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c60:	eb0e 2e05 	add.w	lr, lr, r5, lsl #8
	int32_t oz = (int16_t)((uint16_t)(himu->raw_data[12] << 8) + himu->raw_data[13]);
 8000c64:	b21b      	sxth	r3, r3
	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c66:	fa0f f58e 	sxth.w	r5, lr
	z = -z;
 8000c6a:	f1c6 0e00 	rsb	lr, r6, #0
	int32_t t = (int16_t)((uint16_t)(himu->raw_data[6] << 8) + himu->raw_data[7]);
 8000c6e:	ee06 5a10 	vmov	s12, r5

	if (himu->cal.progress > 0) {
 8000c72:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	f000 80da 	beq.w	8000e2e <BSP_DRV_IMU_Parse+0x21e>
		// If calibration enabled, collecting data for calibration
		himu->cal.c_y += y;
		himu->cal.c_x += x;
		himu->cal.c_z += (z - 16384);
 8000c7a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8000e80 <BSP_DRV_IMU_Parse+0x270>
		himu->cal.c_oy += oy;
		himu->cal.c_ox += ox;
		himu->cal.c_oz += oz;
		himu->cal.progress -= 1;
 8000c7e:	3d01      	subs	r5, #1
		himu->cal.c_x += x;
 8000c80:	69e7      	ldr	r7, [r4, #28]
		himu->cal.c_z += (z - 16384);
 8000c82:	eba8 0806 	sub.w	r8, r8, r6
		himu->cal.c_y += y;
 8000c86:	6a26      	ldr	r6, [r4, #32]
		himu->cal.c_x += x;
 8000c88:	4467      	add	r7, ip
		himu->cal.progress -= 1;
 8000c8a:	62a5      	str	r5, [r4, #40]	; 0x28
		himu->cal.c_y += y;
 8000c8c:	4406      	add	r6, r0
		himu->cal.c_x += x;
 8000c8e:	61e7      	str	r7, [r4, #28]
		himu->cal.c_y += y;
 8000c90:	9601      	str	r6, [sp, #4]
 8000c92:	6226      	str	r6, [r4, #32]
		himu->cal.c_z += (z - 16384);
 8000c94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000c96:	44b0      	add	r8, r6
		himu->cal.c_oy += oy;
 8000c98:	6966      	ldr	r6, [r4, #20]
 8000c9a:	eb01 0906 	add.w	r9, r1, r6
		himu->cal.c_ox += ox;
 8000c9e:	6926      	ldr	r6, [r4, #16]
		himu->cal.c_z += (z - 16384);
 8000ca0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		himu->cal.c_ox += ox;
 8000ca4:	eb02 0a06 	add.w	sl, r2, r6
		himu->cal.c_oz += oz;
 8000ca8:	69a6      	ldr	r6, [r4, #24]
		himu->cal.c_oy += oy;
 8000caa:	f8c4 9014 	str.w	r9, [r4, #20]
		himu->cal.c_oz += oz;
 8000cae:	eb03 0b06 	add.w	fp, r3, r6
		himu->cal.c_ox += ox;
 8000cb2:	f8c4 a010 	str.w	sl, [r4, #16]
		himu->cal.c_oz += oz;
 8000cb6:	f8c4 b018 	str.w	fp, [r4, #24]
		if (himu->cal.progress == 0) {
 8000cba:	bb65      	cbnz	r5, 8000d16 <BSP_DRV_IMU_Parse+0x106>
			himu->cal.c_y = himu->cal.c_y / 128;
 8000cbc:	9e01      	ldr	r6, [sp, #4]
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	bfb8      	it	lt
 8000cc2:	367f      	addlt	r6, #127	; 0x7f
			himu->cal.c_x = himu->cal.c_x / 128;
 8000cc4:	2f00      	cmp	r7, #0
 8000cc6:	bfb8      	it	lt
 8000cc8:	377f      	addlt	r7, #127	; 0x7f
			himu->cal.c_z = himu->cal.c_z / 128;
 8000cca:	f1b8 0f00 	cmp.w	r8, #0
			himu->cal.c_y = himu->cal.c_y / 128;
 8000cce:	ea4f 16e6 	mov.w	r6, r6, asr #7
			himu->cal.c_z = himu->cal.c_z / 128;
 8000cd2:	bfb8      	it	lt
 8000cd4:	f108 087f 	addlt.w	r8, r8, #127	; 0x7f
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000cd8:	f1b9 0f00 	cmp.w	r9, #0
			himu->cal.c_x = himu->cal.c_x / 128;
 8000cdc:	ea4f 17e7 	mov.w	r7, r7, asr #7
			himu->cal.c_y = himu->cal.c_y / 128;
 8000ce0:	6226      	str	r6, [r4, #32]
			himu->cal.c_z = himu->cal.c_z / 128;
 8000ce2:	ea4f 15e8 	mov.w	r5, r8, asr #7
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000ce6:	bfb8      	it	lt
 8000ce8:	f109 097f 	addlt.w	r9, r9, #127	; 0x7f
			himu->cal.c_ox = himu->cal.c_ox / 128;
 8000cec:	f1ba 0f00 	cmp.w	sl, #0
			himu->cal.c_x = himu->cal.c_x / 128;
 8000cf0:	61e7      	str	r7, [r4, #28]
			himu->cal.c_z = himu->cal.c_z / 128;
 8000cf2:	6265      	str	r5, [r4, #36]	; 0x24
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000cf4:	ea4f 15e9 	mov.w	r5, r9, asr #7
			himu->cal.c_ox = himu->cal.c_ox / 128;
 8000cf8:	bfb8      	it	lt
 8000cfa:	f10a 0a7f 	addlt.w	sl, sl, #127	; 0x7f
			himu->cal.c_oz = himu->cal.c_oz / 128;
 8000cfe:	f1bb 0f00 	cmp.w	fp, #0
			himu->cal.c_oy = himu->cal.c_oy / 128;
 8000d02:	6165      	str	r5, [r4, #20]
			himu->cal.c_oz = himu->cal.c_oz / 128;
 8000d04:	bfb8      	it	lt
 8000d06:	f10b 0b7f 	addlt.w	fp, fp, #127	; 0x7f
			himu->cal.c_ox = himu->cal.c_ox / 128;
 8000d0a:	ea4f 15ea 	mov.w	r5, sl, asr #7
 8000d0e:	6125      	str	r5, [r4, #16]
			himu->cal.c_oz = himu->cal.c_oz / 128;
 8000d10:	ea4f 15eb 	mov.w	r5, fp, asr #7
 8000d14:	61a5      	str	r5, [r4, #24]
	// Calculating floats
	himu->data.y = (float)y / 16384.0;
	himu->data.x = (float)x / 16384.0;
	himu->data.z = (float)z / 16384.0;

	himu->data.oy = (float)oy / 65.5;
 8000d16:	ee07 1a90 	vmov	s15, r1
	himu->data.ox = (float)ox / 65.5;
	himu->data.oz = (float)oz / 65.5;

	himu->data.t = (float)t / 340.0 + 36.53;
 8000d1a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
	himu->data.oy = (float)oy / 65.5;
 8000d1e:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
	himu->data.ox = (float)ox / 65.5;
 8000d22:	ee07 2a90 	vmov	s15, r2
 8000d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	himu->data.y = (float)y / 16384.0;
 8000d2a:	ee07 0a90 	vmov	s15, r0
	himu->data.oy = (float)oy / 65.5;
 8000d2e:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
	himu->data.y = (float)y / 16384.0;
 8000d32:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	himu->data.oz = (float)oz / 65.5;
 8000d36:	ee07 3a90 	vmov	s15, r3
	himu->data.t = (float)t / 340.0 + 36.53;
 8000d3a:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8000e50 <BSP_DRV_IMU_Parse+0x240>
 8000d3e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8000e58 <BSP_DRV_IMU_Parse+0x248>
	himu->data.oz = (float)oz / 65.5;
 8000d42:	eef8 3ae7 	vcvt.f32.s32	s7, s15
	himu->data.ox = (float)ox / 65.5;
 8000d46:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	himu->data.t = (float)t / 340.0 + 36.53;
 8000d4a:	eea6 5b01 	vfma.f64	d5, d6, d1
	himu->data.z = (float)z / 16384.0;
 8000d4e:	ee06 ea10 	vmov	s12, lr
	himu->data.x = (float)x / 16384.0;
 8000d52:	ee06 ca90 	vmov	s13, ip
	himu->data.oz = (float)oz / 65.5;
 8000d56:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
	himu->data.z = (float)z / 16384.0;
 8000d5a:	eef8 0ac6 	vcvt.f32.s32	s1, s12
	himu->data.y = (float)y / 16384.0;
 8000d5e:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8000e70 <BSP_DRV_IMU_Parse+0x260>
	himu->data.x = (float)x / 16384.0;
 8000d62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	himu->data.y = (float)y / 16384.0;
 8000d66:	ee20 0a06 	vmul.f32	s0, s0, s12
	himu->data.z = (float)z / 16384.0;
 8000d6a:	ee60 0a86 	vmul.f32	s1, s1, s12
	himu->data.x = (float)x / 16384.0;
 8000d6e:	ee66 6a86 	vmul.f32	s13, s13, s12
	himu->data.t = (float)t / 340.0 + 36.53;
 8000d72:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
	himu->data.y = (float)y / 16384.0;
 8000d76:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
	himu->data.z = (float)z / 16384.0;
 8000d7a:	edc4 0a11 	vstr	s1, [r4, #68]	; 0x44
	himu->data.x = (float)x / 16384.0;
 8000d7e:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
	himu->data.t = (float)t / 340.0 + 36.53;
 8000d82:	ed84 5a12 	vstr	s10, [r4, #72]	; 0x48
	himu->data.oy = (float)oy / 65.5;
 8000d86:	ed9f 2b36 	vldr	d2, [pc, #216]	; 8000e60 <BSP_DRV_IMU_Parse+0x250>

	// Calculating pitch, roll, yaw
	float acc_pitch = 57.29577951 * atan2f(himu->data.y, himu->data.z);
 8000d8a:	ed9f 8b37 	vldr	d8, [pc, #220]	; 8000e68 <BSP_DRV_IMU_Parse+0x258>
	himu->data.ox = (float)ox / 65.5;
 8000d8e:	ee27 7b02 	vmul.f64	d7, d7, d2
	himu->data.oy = (float)oy / 65.5;
 8000d92:	ee24 4b02 	vmul.f64	d4, d4, d2
	himu->data.oz = (float)oz / 65.5;
 8000d96:	ee23 3b02 	vmul.f64	d3, d3, d2
	himu->data.oy = (float)oy / 65.5;
 8000d9a:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
	himu->data.ox = (float)ox / 65.5;
 8000d9e:	eeb7 9bc7 	vcvt.f32.f64	s18, d7
	himu->data.oz = (float)oz / 65.5;
 8000da2:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
	himu->data.oy = (float)oy / 65.5;
 8000da6:	ed84 4a0d 	vstr	s8, [r4, #52]	; 0x34
	himu->data.ox = (float)ox / 65.5;
 8000daa:	ed84 9a0c 	vstr	s18, [r4, #48]	; 0x30
	himu->data.oz = (float)oz / 65.5;
 8000dae:	ed84 3a0e 	vstr	s6, [r4, #56]	; 0x38
	float acc_pitch = 57.29577951 * atan2f(himu->data.y, himu->data.z);
 8000db2:	f011 fa99 	bl	80122e8 <atan2f>
 8000db6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	himu->pos.pitch = KALMAN_Update(&KALMAN_pitch, acc_pitch, himu->data.ox);
 8000dba:	eef0 0a49 	vmov.f32	s1, s18
 8000dbe:	482d      	ldr	r0, [pc, #180]	; (8000e74 <BSP_DRV_IMU_Parse+0x264>)
	float acc_pitch = 57.29577951 * atan2f(himu->data.y, himu->data.z);
 8000dc0:	ee27 7b08 	vmul.f64	d7, d7, d8
	himu->pos.pitch = KALMAN_Update(&KALMAN_pitch, acc_pitch, himu->data.ox);
 8000dc4:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8000dc8:	f004 fa74 	bl	80052b4 <KALMAN_Update>

	float acc_roll = 57.29577951 * atan2f(-himu->data.x, himu->data.z);
 8000dcc:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8000dd0:	edd4 0a11 	vldr	s1, [r4, #68]	; 0x44
	himu->pos.pitch = KALMAN_Update(&KALMAN_pitch, acc_pitch, himu->data.ox);
 8000dd4:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
	float acc_roll = 57.29577951 * atan2f(-himu->data.x, himu->data.z);
 8000dd8:	eeb1 0a67 	vneg.f32	s0, s15
 8000ddc:	f011 fa84 	bl	80122e8 <atan2f>
 8000de0:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	himu->pos.roll = KALMAN_Update(&KALMAN_roll, acc_roll, himu->data.oy);
 8000de4:	4824      	ldr	r0, [pc, #144]	; (8000e78 <BSP_DRV_IMU_Parse+0x268>)
 8000de6:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	float acc_roll = 57.29577951 * atan2f(-himu->data.x, himu->data.z);
 8000dea:	ee27 7b08 	vmul.f64	d7, d7, d8
	himu->pos.roll = KALMAN_Update(&KALMAN_roll, acc_roll, himu->data.oy);
 8000dee:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8000df2:	f004 fa5f 	bl	80052b4 <KALMAN_Update>

	float acc_yaw = 57.29577951 * atan2f(-himu->data.x, himu->data.y);
 8000df6:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8000dfa:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
	himu->pos.roll = KALMAN_Update(&KALMAN_roll, acc_roll, himu->data.oy);
 8000dfe:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
	float acc_yaw = 57.29577951 * atan2f(-himu->data.x, himu->data.y);
 8000e02:	eeb1 0a67 	vneg.f32	s0, s15
 8000e06:	f011 fa6f 	bl	80122e8 <atan2f>
 8000e0a:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	himu->pos.yaw = KALMAN_Update(&KALMAN_yaw, acc_yaw, himu->data.oz);
 8000e0e:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8000e12:	481a      	ldr	r0, [pc, #104]	; (8000e7c <BSP_DRV_IMU_Parse+0x26c>)
	float acc_yaw = 57.29577951 * atan2f(-himu->data.x, himu->data.y);
 8000e14:	ee27 7b08 	vmul.f64	d7, d7, d8
	himu->pos.yaw = KALMAN_Update(&KALMAN_yaw, acc_yaw, himu->data.oz);
 8000e18:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8000e1c:	f004 fa4a 	bl	80052b4 <KALMAN_Update>
 8000e20:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54

}
 8000e24:	b003      	add	sp, #12
 8000e26:	ecbd 8b04 	vpop	{d8-d9}
 8000e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		y -= himu->cal.c_y;
 8000e2e:	6a25      	ldr	r5, [r4, #32]
 8000e30:	1b40      	subs	r0, r0, r5
		x -= himu->cal.c_x;
 8000e32:	69e5      	ldr	r5, [r4, #28]
 8000e34:	ebac 0c05 	sub.w	ip, ip, r5
		z -= himu->cal.c_z;
 8000e38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000e3a:	ebae 0e05 	sub.w	lr, lr, r5
		oy -= himu->cal.c_oy;
 8000e3e:	6965      	ldr	r5, [r4, #20]
 8000e40:	1b49      	subs	r1, r1, r5
		ox -= himu->cal.c_ox;
 8000e42:	6925      	ldr	r5, [r4, #16]
 8000e44:	1b52      	subs	r2, r2, r5
		oz -= himu->cal.c_oz;
 8000e46:	69a5      	ldr	r5, [r4, #24]
 8000e48:	1b5b      	subs	r3, r3, r5
 8000e4a:	e764      	b.n	8000d16 <BSP_DRV_IMU_Parse+0x106>
 8000e4c:	f3af 8000 	nop.w
 8000e50:	18181818 	.word	0x18181818
 8000e54:	3f681818 	.word	0x3f681818
 8000e58:	0a3d70a4 	.word	0x0a3d70a4
 8000e5c:	404243d7 	.word	0x404243d7
 8000e60:	9e4a4271 	.word	0x9e4a4271
 8000e64:	3f8f4465 	.word	0x3f8f4465
 8000e68:	1a5d2372 	.word	0x1a5d2372
 8000e6c:	404ca5dc 	.word	0x404ca5dc
 8000e70:	38800000 	.word	0x38800000
 8000e74:	24000054 	.word	0x24000054
 8000e78:	24000090 	.word	0x24000090
 8000e7c:	240000cc 	.word	0x240000cc
 8000e80:	ffffc000 	.word	0xffffc000

08000e84 <BSP_DRV_LCD_TP_Init>:

#include "RVT50AQTNWC00.h"

uint8_t BSP_DRV_LCD_TP_Init(I2C_TypeDef *hi2c) {
	return BSP_OK;
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	4770      	bx	lr

08000e88 <BSP_DRV_LCD_TP_Parse>:

void BSP_DRV_LCD_TP_Parse(LCD_TP_HandleTypeDef *hlcdtp) {
 8000e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;

	// Parsing Individual Touch Points
	for (uint8_t i=0; i<5; i++) {
		uint8_t ii = 3 + i * 6;
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000e8c:	78c3      	ldrb	r3, [r0, #3]
void BSP_DRV_LCD_TP_Parse(LCD_TP_HandleTypeDef *hlcdtp) {
 8000e8e:	4604      	mov	r4, r0
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;
 8000e90:	7885      	ldrb	r5, [r0, #2]
void BSP_DRV_LCD_TP_Parse(LCD_TP_HandleTypeDef *hlcdtp) {
 8000e92:	b083      	sub	sp, #12
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000e94:	ea4f 1a93 	mov.w	sl, r3, lsr #6
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000e98:	f890 9004 	ldrb.w	r9, [r0, #4]
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;
 8000e9c:	f005 050f 	and.w	r5, r5, #15
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000ea0:	021b      	lsls	r3, r3, #8
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000ea2:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
	hlcdtp->touch_count = hlcdtp->raw_data[2] & 0b00001111;
 8000ea6:	77c5      	strb	r5, [r0, #31]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000ea8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000eac:	7a40      	ldrb	r0, [r0, #9]
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
	}

	// Detecting gestures
	switch (hlcdtp->touch_count) {
 8000eae:	2d01      	cmp	r5, #1
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000eb0:	f894 b005 	ldrb.w	fp, [r4, #5]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000eb4:	ea4f 2100 	mov.w	r1, r0, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000eb8:	7ae2      	ldrb	r2, [r4, #11]
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000eba:	ea4f 1090 	mov.w	r0, r0, lsr #6
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000ebe:	f894 800a 	ldrb.w	r8, [r4, #10]
 8000ec2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000ec6:	7be7      	ldrb	r7, [r4, #15]
 8000ec8:	9000      	str	r0, [sp, #0]
 8000eca:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ece:	ea4f 200b 	mov.w	r0, fp, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000ed2:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 8000ed6:	7c66      	ldrb	r6, [r4, #17]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ed8:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000edc:	f894 e015 	ldrb.w	lr, [r4, #21]
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000ee0:	f884 b026 	strb.w	fp, [r4, #38]	; 0x26
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ee4:	ea4f 2b02 	mov.w	fp, r2, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000ee8:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8000eec:	f894 c017 	ldrb.w	ip, [r4, #23]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ef0:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000ef4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000ef8:	79a2      	ldrb	r2, [r4, #6]
 8000efa:	ea40 0002 	orr.w	r0, r0, r2
 8000efe:	7b22      	ldrb	r2, [r4, #12]
 8000f00:	ea42 020b 	orr.w	r2, r2, fp
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f04:	ea49 0b03 	orr.w	fp, r9, r3
 8000f08:	ea48 0901 	orr.w	r9, r8, r1
 8000f0c:	f04f 0100 	mov.w	r1, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f8cd b004 	str.w	fp, [sp, #4]
 8000f18:	f369 010f 	bfi	r1, r9, #0, #16
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	ea4f 2907 	mov.w	r9, r7, lsl #8
 8000f22:	f36b 030f 	bfi	r3, fp, #0, #16
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f26:	ea4f 1797 	mov.w	r7, r7, lsr #6
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f2a:	f362 411f 	bfi	r1, r2, #16, #16
 8000f2e:	f360 431f 	bfi	r3, r0, #16, #16
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f32:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f36:	f409 6770 	and.w	r7, r9, #3840	; 0xf00
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f3a:	ea4f 2906 	mov.w	r9, r6, lsl #8
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f3e:	6223      	str	r3, [r4, #32]
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f40:	ea4f 1616 	mov.w	r6, r6, lsr #4
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f44:	62a1      	str	r1, [r4, #40]	; 0x28
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f46:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f4a:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f4e:	ea4f 260e 	mov.w	r6, lr, lsl #8
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f52:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 8000f56:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f5a:	f406 6e70 	and.w	lr, r6, #3840	; 0xf00
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f5e:	ea4f 260c 	mov.w	r6, ip, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f62:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f66:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f6a:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f6e:	f894 c010 	ldrb.w	ip, [r4, #16]
 8000f72:	ea4c 0c07 	orr.w	ip, ip, r7
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f76:	7ca7      	ldrb	r7, [r4, #18]
 8000f78:	ea47 0709 	orr.w	r7, r7, r9
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f7c:	f8a4 c030 	strh.w	ip, [r4, #48]	; 0x30
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f80:	8667      	strh	r7, [r4, #50]	; 0x32
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f82:	7da7      	ldrb	r7, [r4, #22]
 8000f84:	ea47 070e 	orr.w	r7, r7, lr
 8000f88:	8727      	strh	r7, [r4, #56]	; 0x38
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f8a:	7e27      	ldrb	r7, [r4, #24]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f8c:	f894 c01c 	ldrb.w	ip, [r4, #28]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f90:	ea46 0607 	orr.w	r6, r6, r7
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f94:	7ee7      	ldrb	r7, [r4, #27]
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000f96:	8766      	strh	r6, [r4, #58]	; 0x3a
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000f98:	ea4f 2e07 	mov.w	lr, r7, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000f9c:	7f66      	ldrb	r6, [r4, #29]
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000f9e:	ea4f 1797 	mov.w	r7, r7, lsr #6
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000fa2:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
		hlcdtp->touch_data[i].status = (hlcdtp->raw_data[ii] & 0b11000000) >> 6;
 8000fa6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000faa:	ea4f 2706 	mov.w	r7, r6, lsl #8
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000fae:	ea4f 1616 	mov.w	r6, r6, lsr #4
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000fb2:	ea4c 0c0e 	orr.w	ip, ip, lr
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000fb6:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
		hlcdtp->touch_data[i].id = (hlcdtp->raw_data[ii+2] & 0b11110000) >> 4;
 8000fba:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000fbe:	7fa6      	ldrb	r6, [r4, #30]
		hlcdtp->touch_data[i].x = (uint16_t)((hlcdtp->raw_data[ii] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+1]);
 8000fc0:	f8a4 c040 	strh.w	ip, [r4, #64]	; 0x40
		hlcdtp->touch_data[i].y = (uint16_t)((hlcdtp->raw_data[ii+2] & 0b00001111) << 8) | (hlcdtp->raw_data[ii+3]);
 8000fc4:	ea46 0607 	orr.w	r6, r6, r7
 8000fc8:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
	switch (hlcdtp->touch_count) {
 8000fcc:	d00a      	beq.n	8000fe4 <BSP_DRV_LCD_TP_Parse+0x15c>
 8000fce:	2d02      	cmp	r5, #2
 8000fd0:	f000 8098 	beq.w	8001104 <BSP_DRV_LCD_TP_Parse+0x27c>
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d041      	beq.n	800105c <BSP_DRV_LCD_TP_Parse+0x1d4>
				}
			}
			break;

		default:
			hlcdtp->gest_data.gest = LCD_TP_GEST_NONE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		}
}
 8000fde:	b003      	add	sp, #12
 8000fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (hlcdtp->touch_data[0].status == 2) {
 8000fe4:	f1ba 0f02 	cmp.w	sl, #2
 8000fe8:	d1f9      	bne.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				if ((hlcdtp->gest_data.gest != LCD_TP_GEST_CLICK_DOWN) && (hlcdtp->gest_data.gest != LCD_TP_GEST_DRAG)) {
 8000fea:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 8000fee:	2a01      	cmp	r2, #1
 8000ff0:	f000 812c 	beq.w	800124c <BSP_DRV_LCD_TP_Parse+0x3c4>
 8000ff4:	2a40      	cmp	r2, #64	; 0x40
 8000ff6:	f000 8129 	beq.w	800124c <BSP_DRV_LCD_TP_Parse+0x3c4>
					hlcdtp->gest_data.start_x = hlcdtp->touch_data[0].x;
 8000ffa:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
					hlcdtp->gest_data.start_t = BSP_GetTick();
 8000ffe:	f003 f839 	bl	8004074 <BSP_GetTick>
					hlcdtp->gest_data.area = 255;
 8001002:	21ff      	movs	r1, #255	; 0xff
 8001004:	4623      	mov	r3, r4
 8001006:	2200      	movs	r2, #0
					hlcdtp->gest_data.start_t = BSP_GetTick();
 8001008:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
					hlcdtp->gest_data.gest = LCD_TP_GEST_CLICK_DOWN;
 800100c:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
					hlcdtp->gest_data.area = 255;
 8001010:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
						if (hlcdtp->touch_areas[i].active == 0) continue;
 8001014:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8001018:	b2d6      	uxtb	r6, r2
					for (uint8_t i=0;i<16;i++) {
 800101a:	3201      	adds	r2, #1
						if (hlcdtp->touch_areas[i].active == 0) continue;
 800101c:	2900      	cmp	r1, #0
 800101e:	f000 8132 	beq.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 8001022:	f9b3 5048 	ldrsh.w	r5, [r3, #72]	; 0x48
 8001026:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
 800102a:	42a8      	cmp	r0, r5
 800102c:	f2c0 812b 	blt.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001030:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8001034:	4429      	add	r1, r5
 8001036:	4288      	cmp	r0, r1
 8001038:	f300 8125 	bgt.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 800103c:	f9b3 504a 	ldrsh.w	r5, [r3, #74]	; 0x4a
 8001040:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
 8001044:	42a8      	cmp	r0, r5
 8001046:	f2c0 811e 	blt.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 800104a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800104e:	4429      	add	r1, r5
 8001050:	4288      	cmp	r0, r1
 8001052:	f300 8118 	bgt.w	8001286 <BSP_DRV_LCD_TP_Parse+0x3fe>
						hlcdtp->gest_data.area = i;
 8001056:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
						break;
 800105a:	e7c0      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 800105c:	f9b4 1100 	ldrsh.w	r1, [r4, #256]	; 0x100
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 8001060:	f9b4 2102 	ldrsh.w	r2, [r4, #258]	; 0x102
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001064:	ee06 1a90 	vmov	s13, r1
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 8001068:	1d0b      	adds	r3, r1, #4
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 800106a:	ee05 2a90 	vmov	s11, r2
			hlcdtp->gest_data.gest = LCD_TP_GEST_NONE;
 800106e:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001072:	eeb8 6be6 	vcvt.f64.s32	d6, s13
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 8001076:	b29b      	uxth	r3, r3
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 8001078:	eeb8 4be5 	vcvt.f64.s32	d4, s11
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 800107c:	edd4 5a41 	vldr	s11, [r4, #260]	; 0x104
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 8001080:	2b08      	cmp	r3, #8
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001082:	eeb8 5b65 	vcvt.f64.u32	d5, s11
 8001086:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80012e8 <BSP_DRV_LCD_TP_Parse+0x460>
 800108a:	ee26 6b07 	vmul.f64	d6, d6, d7
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 800108e:	ee24 4b07 	vmul.f64	d4, d4, d7
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 8001092:	ee86 7b05 	vdiv.f64	d7, d6, d5
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 8001096:	ee84 6b05 	vdiv.f64	d6, d4, d5
			hlcdtp->gest_data.speed_x = 1000.0 * hlcdtp->gest_data.delta_x / hlcdtp->gest_data.delta_t;
 800109a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800109e:	ed84 7a42 	vstr	s14, [r4, #264]	; 0x108
			hlcdtp->gest_data.speed_y = 1000.0 * hlcdtp->gest_data.delta_y / hlcdtp->gest_data.delta_t;
 80010a2:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 80010a6:	ed84 6a43 	vstr	s12, [r4, #268]	; 0x10c
			if ((hlcdtp->gest_data.delta_x > -5) && (hlcdtp->gest_data.delta_x < 5)
 80010aa:	f200 8083 	bhi.w	80011b4 <BSP_DRV_LCD_TP_Parse+0x32c>
					&& (hlcdtp->gest_data.delta_y > -5) && (hlcdtp->gest_data.delta_y < 5)) {
 80010ae:	1d13      	adds	r3, r2, #4
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	f240 80ed 	bls.w	8001292 <BSP_DRV_LCD_TP_Parse+0x40a>
			if ((hlcdtp->gest_data.delta_y < -100) && (hlcdtp->gest_data.speed_y < -800)
 80010b8:	f112 0f64 	cmn.w	r2, #100	; 0x64
 80010bc:	f280 809f 	bge.w	80011fe <BSP_DRV_LCD_TP_Parse+0x376>
 80010c0:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80012f0 <BSP_DRV_LCD_TP_Parse+0x468>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80010c4:	eddf 7a8b 	vldr	s15, [pc, #556]	; 80012f4 <BSP_DRV_LCD_TP_Parse+0x46c>
			if ((hlcdtp->gest_data.delta_y < -100) && (hlcdtp->gest_data.speed_y < -800)
 80010c8:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80010d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
			if ((hlcdtp->gest_data.delta_y < -100) && (hlcdtp->gest_data.speed_y < -800)
 80010d4:	bf4c      	ite	mi
 80010d6:	2301      	movmi	r3, #1
 80010d8:	2300      	movpl	r3, #0
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	bfd8      	it	le
 80010e4:	2300      	movle	r3, #0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f43f af79 	beq.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
 80010ec:	eddf 7a82 	vldr	s15, [pc, #520]	; 80012f8 <BSP_DRV_LCD_TP_Parse+0x470>
 80010f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	f57f af71 	bpl.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_UP;
 80010fc:	2304      	movs	r3, #4
 80010fe:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				break;
 8001102:	e76c      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
			if ((hlcdtp->touch_data[0].status == 2) && (hlcdtp->touch_data[1].status == 2)) {
 8001104:	f1ba 0f02 	cmp.w	sl, #2
 8001108:	f47f af69 	bne.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
 800110c:	9d00      	ldr	r5, [sp, #0]
 800110e:	2d02      	cmp	r5, #2
 8001110:	f47f af65 	bne.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				hlcdtp->gest_data.start_y = hlcdtp->touch_data[0].y;
 8001114:	b280      	uxth	r0, r0
				hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001116:	9d01      	ldr	r5, [sp, #4]
 8001118:	b292      	uxth	r2, r2
				hlcdtp->gest_data.start_x = hlcdtp->touch_data[0].x;
 800111a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 800111e:	eba8 0805 	sub.w	r8, r8, r5
				hlcdtp->gest_data.stop_x = hlcdtp->touch_data[1].x;
 8001122:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
				hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 8001126:	1a12      	subs	r2, r2, r0
				hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001128:	f8a4 8100 	strh.w	r8, [r4, #256]	; 0x100
				hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 800112c:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
				hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001130:	f002 ffa0 	bl	8004074 <BSP_GetTick>
				if (hlcdtp->gest_data.gest != LCD_TP_GEST_ZOOM) {
 8001134:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
				hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001138:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
				if (hlcdtp->gest_data.gest != LCD_TP_GEST_ZOOM) {
 800113c:	2b80      	cmp	r3, #128	; 0x80
 800113e:	f43f af4e 	beq.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
					hlcdtp->gest_data.start_t = BSP_GetTick();
 8001142:	f002 ff97 	bl	8004074 <BSP_GetTick>
					hlcdtp->gest_data.area = 255;
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	4623      	mov	r3, r4
 800114a:	2200      	movs	r2, #0
					hlcdtp->gest_data.start_t = BSP_GetTick();
 800114c:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
					hlcdtp->gest_data.area = 255;
 8001150:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
						if (hlcdtp->touch_areas[i].active == 0) continue;
 8001154:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8001158:	b2d6      	uxtb	r6, r2
 800115a:	b319      	cbz	r1, 80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.start_x < hlcdtp->touch_areas[i].x) continue;
 800115c:	f8b4 50f0 	ldrh.w	r5, [r4, #240]	; 0xf0
 8001160:	f9b3 0048 	ldrsh.w	r0, [r3, #72]	; 0x48
 8001164:	4285      	cmp	r5, r0
 8001166:	db1d      	blt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.start_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001168:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 800116c:	4401      	add	r1, r0
 800116e:	428d      	cmp	r5, r1
 8001170:	dc18      	bgt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.stop_x < hlcdtp->touch_areas[i].x) continue;
 8001172:	f8b4 50f8 	ldrh.w	r5, [r4, #248]	; 0xf8
						if (hlcdtp->gest_data.stop_x > (hlcdtp->touch_areas[i].x + hlcdtp->touch_areas[i].w)) continue;
 8001176:	42a9      	cmp	r1, r5
 8001178:	db14      	blt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
 800117a:	42a8      	cmp	r0, r5
 800117c:	dc12      	bgt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.start_y < hlcdtp->touch_areas[i].y) continue;
 800117e:	f8b4 50f2 	ldrh.w	r5, [r4, #242]	; 0xf2
 8001182:	f9b3 004a 	ldrsh.w	r0, [r3, #74]	; 0x4a
 8001186:	4285      	cmp	r5, r0
 8001188:	db0c      	blt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.start_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 800118a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800118e:	4401      	add	r1, r0
 8001190:	428d      	cmp	r5, r1
 8001192:	dc07      	bgt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
						if (hlcdtp->gest_data.stop_y < hlcdtp->touch_areas[i].y) continue;
 8001194:	f8b4 50fa 	ldrh.w	r5, [r4, #250]	; 0xfa
						if (hlcdtp->gest_data.stop_y > (hlcdtp->touch_areas[i].y + hlcdtp->touch_areas[i].h)) continue;
 8001198:	42a8      	cmp	r0, r5
 800119a:	dc03      	bgt.n	80011a4 <BSP_DRV_LCD_TP_Parse+0x31c>
 800119c:	42a9      	cmp	r1, r5
						hlcdtp->gest_data.area = i;
 800119e:	bfa8      	it	ge
 80011a0:	f884 60e8 	strbge.w	r6, [r4, #232]	; 0xe8
					for (uint8_t i=0;i<16;i++) {
 80011a4:	3201      	adds	r2, #1
 80011a6:	330a      	adds	r3, #10
 80011a8:	2a10      	cmp	r2, #16
 80011aa:	d1d3      	bne.n	8001154 <BSP_DRV_LCD_TP_Parse+0x2cc>
					hlcdtp->gest_data.gest = LCD_TP_GEST_ZOOM;
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80011b2:	e714      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 80011b4:	f111 0f64 	cmn.w	r1, #100	; 0x64
 80011b8:	da6f      	bge.n	800129a <BSP_DRV_LCD_TP_Parse+0x412>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80011ba:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80012f4 <BSP_DRV_LCD_TP_Parse+0x46c>
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 80011be:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80012f0 <BSP_DRV_LCD_TP_Parse+0x468>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80011c2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 80011ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80011ce:	bfcc      	ite	gt
 80011d0:	2301      	movgt	r3, #1
 80011d2:	2300      	movle	r3, #0
			if ((hlcdtp->gest_data.delta_x < -100) && (hlcdtp->gest_data.speed_x < -800)
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	bf58      	it	pl
 80011de:	2300      	movpl	r3, #0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f43f af69 	beq.w	80010b8 <BSP_DRV_LCD_TP_Parse+0x230>
 80011e6:	eddf 7a44 	vldr	s15, [pc, #272]	; 80012f8 <BSP_DRV_LCD_TP_Parse+0x470>
 80011ea:	eeb4 6a67 	vcmp.f32	s12, s15
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	f57f af61 	bpl.w	80010b8 <BSP_DRV_LCD_TP_Parse+0x230>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_LEFT;
 80011f6:	2310      	movs	r3, #16
 80011f8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				break;
 80011fc:	e6ef      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 80011fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80012f4 <BSP_DRV_LCD_TP_Parse+0x46c>
			if ((hlcdtp->gest_data.delta_y > 100) && (hlcdtp->gest_data.speed_y > 800)
 8001202:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80012fc <BSP_DRV_LCD_TP_Parse+0x474>
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 8001206:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if ((hlcdtp->gest_data.delta_y > 100) && (hlcdtp->gest_data.speed_y > 800)
 800120e:	eeb4 6ae7 	vcmpe.f32	s12, s15
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 8001212:	bfcc      	ite	gt
 8001214:	2301      	movgt	r3, #1
 8001216:	2300      	movle	r3, #0
			if ((hlcdtp->gest_data.delta_y > 100) && (hlcdtp->gest_data.speed_y > 800)
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					&& (hlcdtp->gest_data.speed_x > -400) && (hlcdtp->gest_data.speed_x < 400)) {
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	bfd8      	it	le
 8001222:	2300      	movle	r3, #0
 8001224:	2a64      	cmp	r2, #100	; 0x64
 8001226:	bfd4      	ite	le
 8001228:	2300      	movle	r3, #0
 800122a:	f003 0301 	andgt.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	f43f aed5 	beq.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
 8001234:	eddf 7a30 	vldr	s15, [pc, #192]	; 80012f8 <BSP_DRV_LCD_TP_Parse+0x470>
 8001238:	eeb4 7a67 	vcmp.f32	s14, s15
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	f57f aecd 	bpl.w	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_DOWN;
 8001244:	2308      	movs	r3, #8
 8001246:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				break;
 800124a:	e6c8      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
					hlcdtp->gest_data.stop_x = hlcdtp->touch_data[0].x;
 800124c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
					hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001250:	f002 ff10 	bl	8004074 <BSP_GetTick>
					hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001254:	f8b4 10f0 	ldrh.w	r1, [r4, #240]	; 0xf0
 8001258:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 800125c:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
					hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 8001260:	1a52      	subs	r2, r2, r1
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 8001262:	f8b4 10f2 	ldrh.w	r1, [r4, #242]	; 0xf2
					hlcdtp->gest_data.stop_t = BSP_GetTick();
 8001266:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
					hlcdtp->gest_data.delta_x = hlcdtp->gest_data.stop_x - hlcdtp->gest_data.start_x;
 800126a:	f8a4 2100 	strh.w	r2, [r4, #256]	; 0x100
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 800126e:	1a5b      	subs	r3, r3, r1
					hlcdtp->gest_data.delta_t = hlcdtp->gest_data.stop_t - hlcdtp->gest_data.start_t;
 8001270:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
					hlcdtp->gest_data.delta_y = hlcdtp->gest_data.stop_y - hlcdtp->gest_data.start_y;
 8001274:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
					hlcdtp->gest_data.delta_t = hlcdtp->gest_data.stop_t - hlcdtp->gest_data.start_t;
 8001278:	1a80      	subs	r0, r0, r2
					hlcdtp->gest_data.gest = LCD_TP_GEST_DRAG;
 800127a:	2240      	movs	r2, #64	; 0x40
					hlcdtp->gest_data.delta_t = hlcdtp->gest_data.stop_t - hlcdtp->gest_data.start_t;
 800127c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
					hlcdtp->gest_data.gest = LCD_TP_GEST_DRAG;
 8001280:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8001284:	e6ab      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
					for (uint8_t i=0;i<16;i++) {
 8001286:	2a10      	cmp	r2, #16
 8001288:	f103 030a 	add.w	r3, r3, #10
 800128c:	f47f aec2 	bne.w	8001014 <BSP_DRV_LCD_TP_Parse+0x18c>
 8001290:	e6a5      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
				hlcdtp->gest_data.gest = LCD_TP_GEST_CLICK_UP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				break;
 8001298:	e6a1      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
			if ((hlcdtp->gest_data.delta_x > 100) && (hlcdtp->gest_data.speed_x > 800)
 800129a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80012fc <BSP_DRV_LCD_TP_Parse+0x474>
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 800129e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80012f4 <BSP_DRV_LCD_TP_Parse+0x46c>
			if ((hlcdtp->gest_data.delta_x > 100) && (hlcdtp->gest_data.speed_x > 800)
 80012a2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80012aa:	eeb4 6ae7 	vcmpe.f32	s12, s15
			if ((hlcdtp->gest_data.delta_x > 100) && (hlcdtp->gest_data.speed_x > 800)
 80012ae:	bfcc      	ite	gt
 80012b0:	2301      	movgt	r3, #1
 80012b2:	2300      	movle	r3, #0
					&& (hlcdtp->gest_data.speed_y > -400) && (hlcdtp->gest_data.speed_y < 400)) {
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	bfd8      	it	le
 80012be:	2300      	movle	r3, #0
 80012c0:	2964      	cmp	r1, #100	; 0x64
 80012c2:	bfd4      	ite	le
 80012c4:	2300      	movle	r3, #0
 80012c6:	f003 0301 	andgt.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f43f aef4 	beq.w	80010b8 <BSP_DRV_LCD_TP_Parse+0x230>
 80012d0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80012f8 <BSP_DRV_LCD_TP_Parse+0x470>
 80012d4:	eeb4 6a67 	vcmp.f32	s12, s15
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	f57f aeec 	bpl.w	80010b8 <BSP_DRV_LCD_TP_Parse+0x230>
				hlcdtp->gest_data.gest = LCD_TP_GEST_SWIPE_RIGHT;
 80012e0:	2320      	movs	r3, #32
 80012e2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				break;
 80012e6:	e67a      	b.n	8000fde <BSP_DRV_LCD_TP_Parse+0x156>
 80012e8:	00000000 	.word	0x00000000
 80012ec:	408f4000 	.word	0x408f4000
 80012f0:	c4480000 	.word	0xc4480000
 80012f4:	c3c80000 	.word	0xc3c80000
 80012f8:	43c80000 	.word	0x43c80000
 80012fc:	44480000 	.word	0x44480000

08001300 <BSP_BOARD_Init_CM7>:

#include "BSP.h"

#define HSEM_ID_0 (0U) // HW semaphore 0

uint8_t BSP_BOARD_Init_CM7() {
 8001300:	b530      	push	{r4, r5, lr}
 8001302:	b083      	sub	sp, #12
	uint32_t timeout;

	// Config MPU
	BSP_STM32_MPU_Init();
 8001304:	f002 f916 	bl	8003534 <BSP_STM32_MPU_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001308:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <BSP_BOARD_Init_CM7+0x140>)
 800130a:	6953      	ldr	r3, [r2, #20]
 800130c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8001310:	d111      	bne.n	8001336 <BSP_BOARD_Init_CM7+0x36>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001312:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001316:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800131a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800131e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001322:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001326:	6953      	ldr	r3, [r2, #20]
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800132e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001332:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001336:	4842      	ldr	r0, [pc, #264]	; (8001440 <BSP_BOARD_Init_CM7+0x140>)
 8001338:	6943      	ldr	r3, [r0, #20]
 800133a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800133e:	d126      	bne.n	800138e <BSP_BOARD_Init_CM7+0x8e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001340:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001344:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001348:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800134c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001350:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001354:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8001358:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800135c:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001360:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001362:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001366:	3b01      	subs	r3, #1
 8001368:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800136a:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800136e:	d1f8      	bne.n	8001362 <BSP_BOARD_Init_CM7+0x62>
    } while(sets-- != 0U);
 8001370:	f1ac 0c20 	sub.w	ip, ip, #32
 8001374:	f11c 0f20 	cmn.w	ip, #32
 8001378:	d1f0      	bne.n	800135c <BSP_BOARD_Init_CM7+0x5c>
 800137a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800137e:	6943      	ldr	r3, [r0, #20]
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6143      	str	r3, [r0, #20]
 8001386:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800138a:	f3bf 8f6f 	isb	sy
	// Enable D-Cache
	SCB_EnableDCache();

	// Wait until CPU2 boots and enters in stop mode or timeout
	timeout = 0xFFFF;
	while (((RCC->CR & RCC_CR_D2CKRDY) != RESET) && (timeout-- > 0));
 800138e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001392:	492c      	ldr	r1, [pc, #176]	; (8001444 <BSP_BOARD_Init_CM7+0x144>)
 8001394:	e001      	b.n	800139a <BSP_BOARD_Init_CM7+0x9a>
 8001396:	3b01      	subs	r3, #1
 8001398:	d002      	beq.n	80013a0 <BSP_BOARD_Init_CM7+0xa0>
 800139a:	680a      	ldr	r2, [r1, #0]
 800139c:	0410      	lsls	r0, r2, #16
 800139e:	d4fa      	bmi.n	8001396 <BSP_BOARD_Init_CM7+0x96>
	if ( timeout < 0 ) return BSP_ERROR;

	// Setting NVIC grouping
	BSP_STM32_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f004 fb69 	bl	8005a78 <BSP_STM32_NVIC_SetPriorityGrouping>

	// STM32 Initialization - System Clocks
	if (BSP_STM32_Init_SysClocks()) return BSP_ERROR;
 80013a6:	f002 f9a3 	bl	80036f0 <BSP_STM32_Init_SysClocks>
 80013aa:	4605      	mov	r5, r0
 80013ac:	b110      	cbz	r0, 80013b4 <BSP_BOARD_Init_CM7+0xb4>
 80013ae:	2001      	movs	r0, #1

	// Audio Initialization
//	if (BSP_Audio_Init()) return BSP_ERROR;

	return BSP_OK;
}
 80013b0:	b003      	add	sp, #12
 80013b2:	bd30      	pop	{r4, r5, pc}
	__BSP_RCC_HSEM_CLK_ENABLE();			// HW semaphore Clock enable
 80013b4:	4c23      	ldr	r4, [pc, #140]	; (8001444 <BSP_BOARD_Init_CM7+0x144>)
 80013b6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80013ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013be:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80013c2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	9b01      	ldr	r3, [sp, #4]
	BSP_STM32_HSEM_FastTake(HSEM_ID_0); 	// Take HSEM
 80013ce:	f005 ffab 	bl	8007328 <BSP_STM32_HSEM_FastTake>
	BSP_STM32_HSEM_FastRelease(HSEM_ID_0);	// Release HSEM in order to notify the CPU2(CM4)
 80013d2:	4628      	mov	r0, r5
 80013d4:	f005 ffba 	bl	800734c <BSP_STM32_HSEM_FastRelease>
	while(((RCC->CR & RCC_CR_D2CKRDY) == RESET) && (timeout-- > 0));
 80013d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013dc:	e001      	b.n	80013e2 <BSP_BOARD_Init_CM7+0xe2>
 80013de:	3b01      	subs	r3, #1
 80013e0:	d002      	beq.n	80013e8 <BSP_BOARD_Init_CM7+0xe8>
 80013e2:	6822      	ldr	r2, [r4, #0]
 80013e4:	0412      	lsls	r2, r2, #16
 80013e6:	d5fa      	bpl.n	80013de <BSP_BOARD_Init_CM7+0xde>
	if (BSP_STM32_Init_PeriphClocks()) return BSP_ERROR;
 80013e8:	f002 fa46 	bl	8003878 <BSP_STM32_Init_PeriphClocks>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d1de      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_STM32_Init_GPIO()) return BSP_ERROR;
 80013f0:	f002 fc32 	bl	8003c58 <BSP_STM32_Init_GPIO>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d1da      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_STM32_Init_NVIC()) return BSP_ERROR;
 80013f8:	f002 fbca 	bl	8003b90 <BSP_STM32_Init_NVIC>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d1d6      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_SDRAM_Init(120)) return BSP_ERROR;
 8001400:	2078      	movs	r0, #120	; 0x78
 8001402:	f002 f889 	bl	8003518 <BSP_SDRAM_Init>
 8001406:	2800      	cmp	r0, #0
 8001408:	d1d1      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_QSPI_Init()) return BSP_ERROR;
 800140a:	f001 ff77 	bl	80032fc <BSP_QSPI_Init>
 800140e:	2800      	cmp	r0, #0
 8001410:	d1cd      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_LCD_TP_Init()) return BSP_ERROR;
 8001412:	f001 ff05 	bl	8003220 <BSP_LCD_TP_Init>
 8001416:	2800      	cmp	r0, #0
 8001418:	d1c9      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_IMU_Init()) return BSP_ERROR;
 800141a:	f000 f831 	bl	8001480 <BSP_IMU_Init>
 800141e:	2800      	cmp	r0, #0
 8001420:	d1c5      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_Inputs_Init()) return BSP_ERROR;
 8001422:	f000 f887 	bl	8001534 <BSP_Inputs_Init>
 8001426:	2800      	cmp	r0, #0
 8001428:	d1c1      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_SDCARD_Init()) return BSP_ERROR;
 800142a:	f002 f80d 	bl	8003448 <BSP_SDCARD_Init>
 800142e:	2800      	cmp	r0, #0
 8001430:	d1bd      	bne.n	80013ae <BSP_BOARD_Init_CM7+0xae>
	if (BSP_Serial_Init()) return BSP_ERROR;
 8001432:	f002 fe65 	bl	8004100 <BSP_Serial_Init>
	return BSP_OK;
 8001436:	3800      	subs	r0, #0
 8001438:	bf18      	it	ne
 800143a:	2001      	movne	r0, #1
 800143c:	e7b8      	b.n	80013b0 <BSP_BOARD_Init_CM7+0xb0>
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	58024400 	.word	0x58024400

08001448 <NMI_Handler>:


// Configuring Basic Interrupts
void NMI_Handler(void) {

	while (1) {}
 8001448:	e7fe      	b.n	8001448 <NMI_Handler>
 800144a:	bf00      	nop

0800144c <HardFault_Handler>:

}

void HardFault_Handler(void) {

	while (1) {}
 800144c:	e7fe      	b.n	800144c <HardFault_Handler>
 800144e:	bf00      	nop

08001450 <MemManage_Handler>:

}

void MemManage_Handler(void) {

	while (1) {}
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler>
 8001452:	bf00      	nop

08001454 <BusFault_Handler>:

}

void BusFault_Handler(void) {

	while (1) {}
 8001454:	e7fe      	b.n	8001454 <BusFault_Handler>
 8001456:	bf00      	nop

08001458 <UsageFault_Handler>:

}

void UsageFault_Handler(void) {

	while (1) {}
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler>
 800145a:	bf00      	nop

0800145c <SVC_Handler>:

}

void SVC_Handler(void) {

}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <DebugMon_Handler>:
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <PendSV_Handler>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <SysTick_Handler>:

}

void SysTick_Handler(void) {

  BSP_IncTick();
 8001468:	f002 bdf8 	b.w	800405c <BSP_IncTick>

0800146c <BSP_Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}

void BSP_Error_Handler(void) {

  __disable_irq();
  while (1) {}
 800146e:	e7fe      	b.n	800146e <BSP_Error_Handler+0x2>

08001470 <SPI3_IRQHandler>:
uint8_t BSP_Audio_Resume() {
	return BSP_STM32_I2S_Resume(SPI3, &BSP_haudio_ctx);
}

void SPI3_IRQHandler(void) {
	BSP_STM32_I2S_IRQHandler(SPI3, &BSP_haudio_ctx);
 8001470:	4901      	ldr	r1, [pc, #4]	; (8001478 <SPI3_IRQHandler+0x8>)
 8001472:	4802      	ldr	r0, [pc, #8]	; (800147c <SPI3_IRQHandler+0xc>)
 8001474:	f006 b944 	b.w	8007700 <BSP_STM32_I2S_IRQHandler>
 8001478:	24000108 	.word	0x24000108
 800147c:	40003c00 	.word	0x40003c00

08001480 <BSP_IMU_Init>:
#include "BSP_IMU.h"

BUF_RAM	IMU_HandleTypeDef		BSP_himu = {0};
		TxRxContext_TypeDef		BSP_himu_ctx = {0};

uint8_t BSP_IMU_Init() {
 8001480:	b500      	push	{lr}
	// Configuring I2C interface
	if (BSP_STM32_I2C_Init(I2C4)) return BSP_ERROR;
 8001482:	4815      	ldr	r0, [pc, #84]	; (80014d8 <BSP_IMU_Init+0x58>)
uint8_t BSP_IMU_Init() {
 8001484:	b085      	sub	sp, #20
	if (BSP_STM32_I2C_Init(I2C4)) return BSP_ERROR;
 8001486:	f005 ff6f 	bl	8007368 <BSP_STM32_I2C_Init>
 800148a:	b118      	cbz	r0, 8001494 <BSP_IMU_Init+0x14>
 800148c:	2001      	movs	r0, #1

	// Initialization of IMU IC
	if (BSP_DRV_IMU_Init(&BSP_himu, I2C4)) return BSP_ERROR;

	return BSP_OK;
}
 800148e:	b005      	add	sp, #20
 8001490:	f85d fb04 	ldr.w	pc, [sp], #4
	BSP_BDMA_Init(BDMA_Channel0, BDMA_PERIPH_TO_MEMORY, BDMA_PINC_DISABLE, BDMA_MINC_ENABLE, BDMA_PDATAALIGN_BYTE, BDMA_MDATAALIGN_BYTE, BDMA_NORMAL, BDMA_PRIORITY_LOW);
 8001494:	4602      	mov	r2, r0
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	4601      	mov	r1, r0
 800149a:	4810      	ldr	r0, [pc, #64]	; (80014dc <BSP_IMU_Init+0x5c>)
 800149c:	e9cd 2202 	strd	r2, r2, [sp, #8]
 80014a0:	e9cd 2200 	strd	r2, r2, [sp]
 80014a4:	f004 f83e 	bl	8005524 <BSP_BDMA_Init>
	BSP_BDMA_CtxLink(BDMA_Channel0, &BSP_himu_ctx, BDMA_REQUEST_I2C4_RX);
 80014a8:	220d      	movs	r2, #13
 80014aa:	490d      	ldr	r1, [pc, #52]	; (80014e0 <BSP_IMU_Init+0x60>)
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <BSP_IMU_Init+0x5c>)
 80014ae:	f004 f869 	bl	8005584 <BSP_BDMA_CtxLink>
	if (BSP_STM32_I2C_IsDeviceReady(I2C4, (IMU_I2C_ADDR) << 1, 4, 1000)) return BSP_ERROR;
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	2204      	movs	r2, #4
 80014b8:	21d0      	movs	r1, #208	; 0xd0
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <BSP_IMU_Init+0x58>)
 80014bc:	f005 ff7c 	bl	80073b8 <BSP_STM32_I2C_IsDeviceReady>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d1e3      	bne.n	800148c <BSP_IMU_Init+0xc>
	if (BSP_DRV_IMU_Init(&BSP_himu, I2C4)) return BSP_ERROR;
 80014c4:	4904      	ldr	r1, [pc, #16]	; (80014d8 <BSP_IMU_Init+0x58>)
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <BSP_IMU_Init+0x64>)
 80014c8:	f7ff fb36 	bl	8000b38 <BSP_DRV_IMU_Init>
	if (BSP_STM32_I2C_Init(I2C4)) return BSP_ERROR;
 80014cc:	3800      	subs	r0, #0
 80014ce:	bf18      	it	ne
 80014d0:	2001      	movne	r0, #1
}
 80014d2:	b005      	add	sp, #20
 80014d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80014d8:	58001c00 	.word	0x58001c00
 80014dc:	58025408 	.word	0x58025408
 80014e0:	24000170 	.word	0x24000170
 80014e4:	38000000 	.word	0x38000000

080014e8 <BSP_IMU_INTHandler>:
uint8_t BSP_IMU_Reset() {

	return BSP_OK;
}

void BSP_IMU_INTHandler() {
 80014e8:	b510      	push	{r4, lr}
	// New data available from IMU, start receiving
	BSP_STM32_I2C_MemRead(I2C4, &BSP_himu_ctx, IMU_I2C_ADDR << 1, IMU_DATA_ADDR, BSP_himu.raw_data, IMU_DATA_LEN);
 80014ea:	4806      	ldr	r0, [pc, #24]	; (8001504 <BSP_IMU_INTHandler+0x1c>)
void BSP_IMU_INTHandler() {
 80014ec:	b082      	sub	sp, #8
	BSP_STM32_I2C_MemRead(I2C4, &BSP_himu_ctx, IMU_I2C_ADDR << 1, IMU_DATA_ADDR, BSP_himu.raw_data, IMU_DATA_LEN);
 80014ee:	240e      	movs	r4, #14
 80014f0:	233b      	movs	r3, #59	; 0x3b
 80014f2:	22d0      	movs	r2, #208	; 0xd0
 80014f4:	4904      	ldr	r1, [pc, #16]	; (8001508 <BSP_IMU_INTHandler+0x20>)
 80014f6:	e9cd 0400 	strd	r0, r4, [sp]
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <BSP_IMU_INTHandler+0x24>)
 80014fc:	f006 f814 	bl	8007528 <BSP_STM32_I2C_MemRead>
}
 8001500:	b002      	add	sp, #8
 8001502:	bd10      	pop	{r4, pc}
 8001504:	38000000 	.word	0x38000000
 8001508:	24000170 	.word	0x24000170
 800150c:	58001c00 	.word	0x58001c00

08001510 <I2C4_EV_IRQHandler>:

void I2C4_EV_IRQHandler(void) {
 8001510:	b508      	push	{r3, lr}
	// Receiving and parsing data from IMU
	if (BSP_STM32_I2C_IRQHandler(I2C4, &BSP_himu_ctx) == BSP_OK) BSP_DRV_IMU_Parse(&BSP_himu);
 8001512:	4905      	ldr	r1, [pc, #20]	; (8001528 <I2C4_EV_IRQHandler+0x18>)
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <I2C4_EV_IRQHandler+0x1c>)
 8001516:	f006 f853 	bl	80075c0 <BSP_STM32_I2C_IRQHandler>
 800151a:	b100      	cbz	r0, 800151e <I2C4_EV_IRQHandler+0xe>
}
 800151c:	bd08      	pop	{r3, pc}
	if (BSP_STM32_I2C_IRQHandler(I2C4, &BSP_himu_ctx) == BSP_OK) BSP_DRV_IMU_Parse(&BSP_himu);
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <I2C4_EV_IRQHandler+0x20>)
}
 8001520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (BSP_STM32_I2C_IRQHandler(I2C4, &BSP_himu_ctx) == BSP_OK) BSP_DRV_IMU_Parse(&BSP_himu);
 8001524:	f7ff bb74 	b.w	8000c10 <BSP_DRV_IMU_Parse>
 8001528:	24000170 	.word	0x24000170
 800152c:	58001c00 	.word	0x58001c00
 8001530:	38000000 	.word	0x38000000

08001534 <BSP_Inputs_Init>:
#include "BSP_Inputs.h"

BUF_RAM  INPUTS_HandleTypeDef	BSP_hinputs = {0};
		TxRxContext_TypeDef		BSP_hinputs_ctx = {0};

uint8_t BSP_Inputs_Init() {
 8001534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initializing ADC1 for Joystick
	BSP_ADC_Init(ADC1, ADC_RESOLUTION_16B, 2);
 8001538:	4e24      	ldr	r6, [pc, #144]	; (80015cc <BSP_Inputs_Init+0x98>)
 800153a:	2100      	movs	r1, #0
uint8_t BSP_Inputs_Init() {
 800153c:	b084      	sub	sp, #16
	BSP_ADC_Init(ADC1, ADC_RESOLUTION_16B, 2);
 800153e:	2202      	movs	r2, #2
 8001540:	4630      	mov	r0, r6
	BSP_ADC_ConfigChannel(ADC1, 4, 1);
	BSP_ADC_ConfigChannel(ADC1, 8, 2);
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 8001542:	460c      	mov	r4, r1
	BSP_ADC_Init(ADC1, ADC_RESOLUTION_16B, 2);
 8001544:	f003 ff24 	bl	8005390 <BSP_ADC_Init>
	BSP_ADC_ConfigChannel(ADC1, 4, 1);
 8001548:	2201      	movs	r2, #1
 800154a:	2104      	movs	r1, #4
 800154c:	4630      	mov	r0, r6
 800154e:	f003 ff91 	bl	8005474 <BSP_ADC_ConfigChannel>
	BSP_ADC_ConfigChannel(ADC1, 8, 2);
 8001552:	2202      	movs	r2, #2
 8001554:	2108      	movs	r1, #8
 8001556:	4630      	mov	r0, r6
 8001558:	f003 ff8c 	bl	8005474 <BSP_ADC_ConfigChannel>
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80015e8 <BSP_Inputs_Init+0xb4>
 8001564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	BSP_STM32_DMA_CtxLink(DMA1_Stream1, &BSP_hinputs_ctx, DMA_REQUEST_ADC1);
 8001568:	4f19      	ldr	r7, [pc, #100]	; (80015d0 <BSP_Inputs_Init+0x9c>)
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 800156a:	4621      	mov	r1, r4
	BSP_ADC_StartDMA(ADC1, &BSP_hinputs_ctx, (uint32_t *)BSP_hinputs.raw_data_joy, 2);
 800156c:	4d19      	ldr	r5, [pc, #100]	; (80015d4 <BSP_Inputs_Init+0xa0>)
	BSP_STM32_DMA_Init(DMA1_Stream1, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_HALFWORD, DMA_MDATAALIGN_HALFWORD, DMA_CIRCULAR, DMA_PRIORITY_LOW);
 800156e:	4640      	mov	r0, r8
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001576:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800157a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	4622      	mov	r2, r4
 8001582:	f004 fae3 	bl	8005b4c <BSP_STM32_DMA_Init>
	BSP_STM32_DMA_CtxLink(DMA1_Stream1, &BSP_hinputs_ctx, DMA_REQUEST_ADC1);
 8001586:	4639      	mov	r1, r7
 8001588:	4640      	mov	r0, r8
 800158a:	2209      	movs	r2, #9
 800158c:	f004 fb12 	bl	8005bb4 <BSP_STM32_DMA_CtxLink>
	BSP_ADC_StartDMA(ADC1, &BSP_hinputs_ctx, (uint32_t *)BSP_hinputs.raw_data_joy, 2);
 8001590:	4639      	mov	r1, r7
 8001592:	462a      	mov	r2, r5
 8001594:	2302      	movs	r3, #2
 8001596:	4630      	mov	r0, r6
 8001598:	f003 ffb2 	bl	8005500 <BSP_ADC_StartDMA>
	BSP_hinputs.joy_cal.x_min = 7600;
	BSP_hinputs.joy_cal.y_max = 58000;
	BSP_hinputs.joy_cal.y_min = 12300;

	BSP_hinputs.joy_cal.x_centre_max = 33000;
	BSP_hinputs.joy_cal.x_centre_min = 30000;
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <BSP_Inputs_Init+0xa4>)
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <BSP_Inputs_Init+0xa8>)

	// Configuring TIM2 for parsing joystick and keyboard data
	// Option 1: PWM Frequency = 200MHz Input clock / Prescaler (199+1) / Reload value (9999+1) = 100Hz
	// Option 2: PWM Frequency = 240MHz Input clock / Prescaler (239+1) / Reload value (9999+1) = 100Hz

	BSP_STM32_TIM_Init(TIM2, TIM_CLOCKDIVISION_DIV1, 239, 9999);
 80015a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	BSP_hinputs.joy_cal.x_centre_min = 30000;
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <BSP_Inputs_Init+0xac>)
 80015a6:	e9c5 2301 	strd	r2, r3, [r5, #4]
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <BSP_Inputs_Init+0xb0>)
	BSP_STM32_TIM_Init(TIM2, TIM_CLOCKDIVISION_DIV1, 239, 9999);
 80015ac:	f242 730f 	movw	r3, #9999	; 0x270f
	BSP_hinputs.joy_cal.x_centre_min = 30000;
 80015b0:	e9c5 1203 	strd	r1, r2, [r5, #12]
	BSP_STM32_TIM_Init(TIM2, TIM_CLOCKDIVISION_DIV1, 239, 9999);
 80015b4:	22ef      	movs	r2, #239	; 0xef
 80015b6:	4621      	mov	r1, r4
 80015b8:	f009 f978 	bl	800a8ac <BSP_STM32_TIM_Init>
	BSP_STM32_TIM_Start(TIM2);
 80015bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015c0:	f009 f9e8 	bl	800a994 <BSP_STM32_TIM_Start>
	return BSP_OK;
}
 80015c4:	4620      	mov	r0, r4
 80015c6:	b004      	add	sp, #16
 80015c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015cc:	40022000 	.word	0x40022000
 80015d0:	240001d8 	.word	0x240001d8
 80015d4:	38000058 	.word	0x38000058
 80015d8:	80e87530 	.word	0x80e87530
 80015dc:	8aac7b0c 	.word	0x8aac7b0c
 80015e0:	c1c01db0 	.word	0xc1c01db0
 80015e4:	e290300c 	.word	0xe290300c
 80015e8:	40020028 	.word	0x40020028

080015ec <BSP_Inputs_ParseData>:


uint8_t BSP_Inputs_ParseData() {
 80015ec:	b510      	push	{r4, lr}
	// Button A - PD4
	BSP_hinputs.buttons.btn_A = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0);
 80015ee:	2110      	movs	r1, #16
 80015f0:	484e      	ldr	r0, [pc, #312]	; (800172c <BSP_Inputs_ParseData+0x140>)
 80015f2:	f005 fe8d 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 80015f6:	fab0 f380 	clz	r3, r0
 80015fa:	4c4d      	ldr	r4, [pc, #308]	; (8001730 <BSP_Inputs_ParseData+0x144>)

	// Button B - PD2
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 80015fc:	2104      	movs	r1, #4
	BSP_hinputs.buttons.btn_A = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0);
 80015fe:	095b      	lsrs	r3, r3, #5
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 8001600:	484a      	ldr	r0, [pc, #296]	; (800172c <BSP_Inputs_ParseData+0x140>)
	BSP_hinputs.buttons.btn_A = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == 0);
 8001602:	7623      	strb	r3, [r4, #24]
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 8001604:	f005 fe84 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0

	// Button C - PI8
	BSP_hinputs.buttons.btn_C = (BSP_STM32_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == 0);
 800160a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160e:	4849      	ldr	r0, [pc, #292]	; (8001734 <BSP_Inputs_ParseData+0x148>)
	BSP_hinputs.buttons.btn_B = (BSP_STM32_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	095b      	lsrs	r3, r3, #5
 8001616:	7663      	strb	r3, [r4, #25]
	BSP_hinputs.buttons.btn_C = (BSP_STM32_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == 0);
 8001618:	f005 fe7a 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0

	// Button D - PC13
	BSP_hinputs.buttons.btn_D = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	4845      	ldr	r0, [pc, #276]	; (8001738 <BSP_Inputs_ParseData+0x14c>)
	BSP_hinputs.buttons.btn_C = (BSP_STM32_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == 0);
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	095b      	lsrs	r3, r3, #5
 800162a:	76a3      	strb	r3, [r4, #26]
	BSP_hinputs.buttons.btn_D = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 800162c:	f005 fe70 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0

	// Button XU - PC11
	BSP_hinputs.buttons.btn_X_U = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0);
 8001632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001636:	4840      	ldr	r0, [pc, #256]	; (8001738 <BSP_Inputs_ParseData+0x14c>)
	BSP_hinputs.buttons.btn_D = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	76e3      	strb	r3, [r4, #27]
	BSP_hinputs.buttons.btn_X_U = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0);
 8001640:	f005 fe66 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0

	// Button XD - PG3
	BSP_hinputs.buttons.btn_X_D = (BSP_STM32_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 0);
 8001646:	2108      	movs	r1, #8
 8001648:	483c      	ldr	r0, [pc, #240]	; (800173c <BSP_Inputs_ParseData+0x150>)
	BSP_hinputs.buttons.btn_X_U = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0);
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	7723      	strb	r3, [r4, #28]
	BSP_hinputs.buttons.btn_X_D = (BSP_STM32_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 0);
 8001652:	f005 fe5d 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0

	// Button XL - PA9
	BSP_hinputs.buttons.btn_X_L = (BSP_STM32_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);
 8001658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165c:	4838      	ldr	r0, [pc, #224]	; (8001740 <BSP_Inputs_ParseData+0x154>)
	BSP_hinputs.buttons.btn_X_D = (BSP_STM32_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 0);
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	7763      	strb	r3, [r4, #29]
	BSP_hinputs.buttons.btn_X_L = (BSP_STM32_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);
 8001666:	f005 fe53 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 800166a:	4603      	mov	r3, r0

	// Button XR - PC7
	BSP_hinputs.buttons.btn_X_R = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0);
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	4832      	ldr	r0, [pc, #200]	; (8001738 <BSP_Inputs_ParseData+0x14c>)
	BSP_hinputs.buttons.btn_X_L = (BSP_STM32_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0);
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	095b      	lsrs	r3, r3, #5
 8001676:	77a3      	strb	r3, [r4, #30]
	BSP_hinputs.buttons.btn_X_R = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0);
 8001678:	f005 fe4a 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0

	// Button MENU - PE3
	BSP_hinputs.buttons.btn_MENU = (BSP_STM32_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0);
 800167e:	2108      	movs	r1, #8
 8001680:	4830      	ldr	r0, [pc, #192]	; (8001744 <BSP_Inputs_ParseData+0x158>)
	BSP_hinputs.buttons.btn_X_R = (BSP_STM32_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0);
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	77e3      	strb	r3, [r4, #31]
	BSP_hinputs.buttons.btn_MENU = (BSP_STM32_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0);
 800168a:	f005 fe41 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 800168e:	4603      	mov	r3, r0

	// Button PWR - PB5
	BSP_hinputs.buttons.btn_PWR = (BSP_STM32_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0);
 8001690:	2120      	movs	r1, #32
 8001692:	482d      	ldr	r0, [pc, #180]	; (8001748 <BSP_Inputs_ParseData+0x15c>)
	BSP_hinputs.buttons.btn_MENU = (BSP_STM32_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0);
 8001694:	fab3 f383 	clz	r3, r3
 8001698:	095b      	lsrs	r3, r3, #5
 800169a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	BSP_hinputs.buttons.btn_PWR = (BSP_STM32_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0);
 800169e:	f005 fe37 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0

	// Button JOY - PH5
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 80016a4:	2120      	movs	r1, #32
 80016a6:	4829      	ldr	r0, [pc, #164]	; (800174c <BSP_Inputs_ParseData+0x160>)
	BSP_hinputs.buttons.btn_PWR = (BSP_STM32_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0);
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	095b      	lsrs	r3, r3, #5
 80016ae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 80016b2:	f005 fe2d 	bl	8007310 <BSP_STM32_GPIO_ReadPin>
	// Parsing joystick XY axis
	int16_t joy_X = 0;
	int16_t joy_Y = 0;


	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 80016b6:	8862      	ldrh	r2, [r4, #2]
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 80016b8:	fab0 f080 	clz	r0, r0
	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 80016bc:	88e1      	ldrh	r1, [r4, #6]
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 80016be:	0940      	lsrs	r0, r0, #5
	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 80016c0:	428a      	cmp	r2, r1
	BSP_hinputs.buttons.btn_JOY = (BSP_STM32_GPIO_ReadPin(GPIOH, GPIO_PIN_5) == 0);
 80016c2:	f884 0020 	strb.w	r0, [r4, #32]
	if (BSP_hinputs.raw_data_joy[1] > BSP_hinputs.joy_cal.x_centre_max) {
 80016c6:	d92e      	bls.n	8001726 <BSP_Inputs_ParseData+0x13a>
		joy_X = ((BSP_hinputs.raw_data_joy[1] - BSP_hinputs.joy_cal.x_centre_max) * 128)/ (BSP_hinputs.joy_cal.x_max - BSP_hinputs.joy_cal.x_centre_max);
 80016c8:	1a53      	subs	r3, r2, r1
 80016ca:	89e0      	ldrh	r0, [r4, #14]
 80016cc:	01db      	lsls	r3, r3, #7
 80016ce:	1a41      	subs	r1, r0, r1
 80016d0:	fb93 f3f1 	sdiv	r3, r3, r1
 80016d4:	b21b      	sxth	r3, r3
	}

	if (BSP_hinputs.raw_data_joy[1] < BSP_hinputs.joy_cal.x_centre_min) {
 80016d6:	88a1      	ldrh	r1, [r4, #4]
 80016d8:	428a      	cmp	r2, r1
 80016da:	d206      	bcs.n	80016ea <BSP_Inputs_ParseData+0xfe>
		joy_X = ((BSP_hinputs.raw_data_joy[1] - BSP_hinputs.joy_cal.x_centre_min) * 128)/ (BSP_hinputs.joy_cal.x_centre_min - BSP_hinputs.joy_cal.x_min);
 80016dc:	1a52      	subs	r2, r2, r1
 80016de:	89a3      	ldrh	r3, [r4, #12]
 80016e0:	01d2      	lsls	r2, r2, #7
 80016e2:	1ac9      	subs	r1, r1, r3
 80016e4:	fb92 f2f1 	sdiv	r2, r2, r1
 80016e8:	b213      	sxth	r3, r2
	}

	if (BSP_hinputs.raw_data_joy[0] > BSP_hinputs.joy_cal.y_centre_max) {
 80016ea:	8822      	ldrh	r2, [r4, #0]
 80016ec:	8960      	ldrh	r0, [r4, #10]
 80016ee:	4282      	cmp	r2, r0
 80016f0:	d917      	bls.n	8001722 <BSP_Inputs_ParseData+0x136>
		joy_Y = ((BSP_hinputs.raw_data_joy[0] - BSP_hinputs.joy_cal.y_centre_max) * 128)/ (BSP_hinputs.joy_cal.y_max - BSP_hinputs.joy_cal.y_centre_max);
 80016f2:	1a11      	subs	r1, r2, r0
 80016f4:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 80016f8:	01c9      	lsls	r1, r1, #7
 80016fa:	ebac 0000 	sub.w	r0, ip, r0
 80016fe:	fb91 f1f0 	sdiv	r1, r1, r0
 8001702:	b209      	sxth	r1, r1
	}

	if (BSP_hinputs.raw_data_joy[0] < BSP_hinputs.joy_cal.y_centre_min) {
 8001704:	8920      	ldrh	r0, [r4, #8]
 8001706:	4282      	cmp	r2, r0
 8001708:	d206      	bcs.n	8001718 <BSP_Inputs_ParseData+0x12c>
		joy_Y = ((BSP_hinputs.raw_data_joy[0] - BSP_hinputs.joy_cal.y_centre_min) * 128)/ (BSP_hinputs.joy_cal.y_centre_min - BSP_hinputs.joy_cal.y_min);
 800170a:	1a12      	subs	r2, r2, r0
 800170c:	8a21      	ldrh	r1, [r4, #16]
 800170e:	01d2      	lsls	r2, r2, #7
 8001710:	1a40      	subs	r0, r0, r1
 8001712:	fb92 f2f0 	sdiv	r2, r2, r0
 8001716:	b211      	sxth	r1, r2
	}

	BSP_hinputs.joy.joy_X = -joy_X;
 8001718:	425b      	negs	r3, r3
	BSP_hinputs.joy.joy_Y = joy_Y;

	return BSP_OK;
}
 800171a:	2000      	movs	r0, #0
	BSP_hinputs.joy.joy_Y = joy_Y;
 800171c:	82e1      	strh	r1, [r4, #22]
	BSP_hinputs.joy.joy_X = -joy_X;
 800171e:	82a3      	strh	r3, [r4, #20]
}
 8001720:	bd10      	pop	{r4, pc}
	int16_t joy_Y = 0;
 8001722:	2100      	movs	r1, #0
 8001724:	e7ee      	b.n	8001704 <BSP_Inputs_ParseData+0x118>
	int16_t joy_X = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	e7d5      	b.n	80016d6 <BSP_Inputs_ParseData+0xea>
 800172a:	bf00      	nop
 800172c:	58020c00 	.word	0x58020c00
 8001730:	38000058 	.word	0x38000058
 8001734:	58022000 	.word	0x58022000
 8001738:	58020800 	.word	0x58020800
 800173c:	58021800 	.word	0x58021800
 8001740:	58020000 	.word	0x58020000
 8001744:	58021000 	.word	0x58021000
 8001748:	58020400 	.word	0x58020400
 800174c:	58021c00 	.word	0x58021c00

08001750 <TIM2_IRQHandler>:


void TIM2_IRQHandler() {
	// Update event interrupt
	if (TIM2->SR & TIM_SR_UIF) {
 8001750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	07d2      	lsls	r2, r2, #31
 8001758:	d400      	bmi.n	800175c <TIM2_IRQHandler+0xc>
		// Reseting interrupt
		TIM2->SR &= ~(TIM_SR_UIF);

		BSP_Inputs_ParseData();
	}
}
 800175a:	4770      	bx	lr
		TIM2->SR &= ~(TIM_SR_UIF);
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	611a      	str	r2, [r3, #16]
		BSP_Inputs_ParseData();
 8001764:	f7ff bf42 	b.w	80015ec <BSP_Inputs_ParseData>

08001768 <_ARGB8888_color>:

/* ARGB8888 ------------------------------------------------------------------*/

static uint32_t _ARGB8888_color(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	return (color & 0x00FFFFFF) | ((uint32_t)alpha << 24);
 8001768:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
}
 800176c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <_ARGB8888_dma2dwait>:
}


static void _ARGB8888_dma2dwait(void) {
	// Status: Function Completed
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001774:	4a02      	ldr	r2, [pc, #8]	; (8001780 <_ARGB8888_dma2dwait+0xc>)
 8001776:	6853      	ldr	r3, [r2, #4]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d0fc      	beq.n	8001776 <_ARGB8888_dma2dwait+0x2>
}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2400026c 	.word	0x2400026c

08001784 <_ARGB1555_color>:
static uint32_t _ARGB1555_color(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	uint32_t r = ((color & 0x000000FF) >> 3 ) << 0;
	uint32_t g = ((color & 0x0000FF00) >> 11) << 5;
	uint32_t b = ((color & 0x00FF0000) >> 19) << 10;
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 8001784:	3900      	subs	r1, #0
	uint32_t r = ((color & 0x000000FF) >> 3 ) << 0;
 8001786:	f3c0 03c4 	ubfx	r3, r0, #3, #5
	uint32_t g = ((color & 0x0000FF00) >> 11) << 5;
 800178a:	ea4f 1290 	mov.w	r2, r0, lsr #6
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 800178e:	bf18      	it	ne
 8001790:	2101      	movne	r1, #1
	uint32_t b = ((color & 0x00FF0000) >> 19) << 10;
 8001792:	0a40      	lsrs	r0, r0, #9
	uint32_t g = ((color & 0x0000FF00) >> 11) << 5;
 8001794:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
	return r | g | b | a;
 8001798:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
	uint32_t b = ((color & 0x00FF0000) >> 19) << 10;
 800179c:	f400 40f8 	and.w	r0, r0, #31744	; 0x7c00
	return r | g | b | a;
 80017a0:	4313      	orrs	r3, r2
}
 80017a2:	4318      	orrs	r0, r3
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop

080017a8 <_ARGB1555_alpha>:


static uint32_t _ARGB1555_alpha(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	uint32_t c = color & 0x0007FFF;
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 80017a8:	3900      	subs	r1, #0
	uint32_t c = color & 0x0007FFF;
 80017aa:	f3c0 000e 	ubfx	r0, r0, #0, #15
	uint32_t a = (uint32_t)(alpha == 0?0:1) << 15;
 80017ae:	bf18      	it	ne
 80017b0:	2101      	movne	r1, #1
	return c | a;
}
 80017b2:	ea40 30c1 	orr.w	r0, r0, r1, lsl #15
 80017b6:	4770      	bx	lr

080017b8 <_ARGB4444_color>:
static uint32_t _ARGB4444_color(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	uint32_t b = ((color & 0x000000FF) >> 4 ) << 0;
	uint32_t g = ((color & 0x0000FF00) >> 12) << 4;
	uint32_t r = ((color & 0x00FF0000) >> 20) << 8;
	uint32_t a = ((uint32_t)alpha >> 4) << 12;
 80017b8:	0909      	lsrs	r1, r1, #4
	uint32_t b = ((color & 0x000000FF) >> 4 ) << 0;
 80017ba:	f3c0 1303 	ubfx	r3, r0, #4, #4
	uint32_t g = ((color & 0x0000FF00) >> 12) << 4;
 80017be:	0a02      	lsrs	r2, r0, #8
	uint32_t c = r | g | b | a;
 80017c0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
	uint32_t g = ((color & 0x0000FF00) >> 12) << 4;
 80017c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	uint32_t r = ((color & 0x00FF0000) >> 20) << 8;
 80017c8:	0b00      	lsrs	r0, r0, #12
	uint32_t c = r | g | b | a;
 80017ca:	4313      	orrs	r3, r2
	uint32_t r = ((color & 0x00FF0000) >> 20) << 8;
 80017cc:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
	return c;
}
 80017d0:	4318      	orrs	r0, r3
 80017d2:	4770      	bx	lr

080017d4 <_ARGB4444_alpha>:


static uint32_t _ARGB4444_alpha(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	uint32_t c = color & 0x0000FFF;
	uint32_t a = ((uint32_t)alpha >> 4) << 12;
 80017d4:	0909      	lsrs	r1, r1, #4
	uint32_t c = color & 0x0000FFF;
 80017d6:	f3c0 000b 	ubfx	r0, r0, #0, #12
	return c | a;
}
 80017da:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 80017de:	4770      	bx	lr

080017e0 <_RGB888_updatepixel>:
	// Status: Function Completed
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
}


static void _RGB888_updatepixel(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 80017e0:	b082      	sub	sp, #8
 80017e2:	9301      	str	r3, [sp, #4]
	// Status: Function Completed
	if (x >= LCD_WIDTH) return;
	if (x < 0) return;
 80017e4:	b28b      	uxth	r3, r1
	if (y >= LCD_HEIGHT) return;
	if (y < 0) return;
 80017e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80017ea:	d203      	bcs.n	80017f4 <_RGB888_updatepixel+0x14>
	if (y >= LCD_HEIGHT) return;
 80017ec:	b293      	uxth	r3, r2
	if (y < 0) return;
 80017ee:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80017f2:	d301      	bcc.n	80017f8 <_RGB888_updatepixel+0x18>
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);

	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
	*(uint8_t *)(addr  ) = *(uint8_t *)(pvalue  );
}
 80017f4:	b002      	add	sp, #8
 80017f6:	4770      	bx	lr
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 80017f8:	f44f 7c48 	mov.w	ip, #800	; 0x320
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 80017fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8001800:	fb12 110c 	smlabb	r1, r2, ip, r1
 8001804:	eb01 0241 	add.w	r2, r1, r1, lsl #1
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 8001808:	5413      	strb	r3, [r2, r0]
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 800180a:	4410      	add	r0, r2
	*(uint8_t *)(addr++) = *(uint8_t *)(pvalue++);
 800180c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001810:	7043      	strb	r3, [r0, #1]
	*(uint8_t *)(addr  ) = *(uint8_t *)(pvalue  );
 8001812:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001816:	7083      	strb	r3, [r0, #2]
}
 8001818:	b002      	add	sp, #8
 800181a:	4770      	bx	lr

0800181c <_AL88_alpha>:
}


static uint32_t _AL88_alpha(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	return (color & 0x00FF00FF) | ((uint32_t)alpha << 8) | ((uint32_t)alpha << 24);
 800181c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8001820:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
 8001824:	ea43 6001 	orr.w	r0, r3, r1, lsl #24
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <_L8_color>:
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
}

/* L8 ------------------------------------------------------------------------*/

static uint32_t _L8_color(uint32_t color, uint8_t alpha) {
 800182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 8001830:	2100      	movs	r1, #0
	int16_t av_r = (c1_r + c2_r) >> 1;
 8001832:	f3c0 4707 	ubfx	r7, r0, #16, #8
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 8001836:	f3c0 2507 	ubfx	r5, r0, #8, #8
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 800183a:	fa5f fe80 	uxtb.w	lr, r0
	int16_t	dr = (int16_t)c1_r - (int16_t)c2_r;
 800183e:	463e      	mov	r6, r7
 8001840:	481c      	ldr	r0, [pc, #112]	; (80018b4 <_L8_color+0x88>)
	// Status: Function Completed
	// Alpha is ignored in this color mode

	uint32_t match_c = 0;
	uint32_t min_dist = 0xffffffff;
 8001842:	f04f 3cff 	mov.w	ip, #4294967295
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 8001846:	f240 24ff 	movw	r4, #767	; 0x2ff
	uint32_t match_c = 0;
 800184a:	4688      	mov	r8, r1
	uint32_t dist;

	for (uint16_t m=0; m<256; m++) {
		dist = _color_dist(color, C_LUT_COLOR[m]);
 800184c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	int16_t av_r = (c1_r + c2_r) >> 1;
 8001850:	f3c2 4a07 	ubfx	sl, r2, #16, #8
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 8001854:	f3c2 2307 	ubfx	r3, r2, #8, #8
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 8001858:	fa5f f982 	uxtb.w	r9, r2
	int16_t av_r = (c1_r + c2_r) >> 1;
 800185c:	eb0a 0207 	add.w	r2, sl, r7
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 8001860:	1aeb      	subs	r3, r5, r3
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 8001862:	eba6 0a0a 	sub.w	sl, r6, sl
 8001866:	ebae 0909 	sub.w	r9, lr, r9
	int16_t av_r = (c1_r + c2_r) >> 1;
 800186a:	1052      	asrs	r2, r2, #1
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 800186c:	fb03 f303 	mul.w	r3, r3, r3
 8001870:	f502 7b00 	add.w	fp, r2, #512	; 0x200
 8001874:	1aa2      	subs	r2, r4, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fb0a fb0b 	mul.w	fp, sl, fp
 800187c:	fb09 f202 	mul.w	r2, r9, r2
 8001880:	fb0a fb0b 	mul.w	fp, sl, fp
 8001884:	fb09 f202 	mul.w	r2, r9, r2
 8001888:	eb03 232b 	add.w	r3, r3, fp, asr #8
 800188c:	eb03 2322 	add.w	r3, r3, r2, asr #8
		if (dist < min_dist) {
 8001890:	4563      	cmp	r3, ip
 8001892:	d201      	bcs.n	8001898 <_L8_color+0x6c>
			min_dist = dist;
			match_c = m;
 8001894:	4688      	mov	r8, r1
		if (dist < min_dist) {
 8001896:	469c      	mov	ip, r3
	for (uint16_t m=0; m<256; m++) {
 8001898:	3101      	adds	r1, #1
 800189a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800189e:	d1d5      	bne.n	800184c <_L8_color+0x20>
		}
	}

	return (match_c) | (match_c << 8) | (match_c << 16) | (match_c << 24);
 80018a0:	ea4f 4008 	mov.w	r0, r8, lsl #16
 80018a4:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 80018a8:	ea40 0008 	orr.w	r0, r0, r8
}
 80018ac:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
 80018b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b4:	080150d8 	.word	0x080150d8

080018b8 <_L8_alpha>:
static uint32_t _L8_alpha(uint32_t color, uint8_t alpha) {
	// Status: Function Completed
	// Alpha is ignored in this color mode

	return color;
}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <_ARGB8888_copybufJPEG>:
static void _ARGB8888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80018bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80018c0:	4c34      	ldr	r4, [pc, #208]	; (8001994 <_ARGB8888_copybufJPEG+0xd8>)
static void _ARGB8888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80018c2:	b087      	sub	sp, #28
 80018c4:	4605      	mov	r5, r0
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 80018c6:	4834      	ldr	r0, [pc, #208]	; (8001998 <_ARGB8888_copybufJPEG+0xdc>)
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80018c8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
static void _ARGB8888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80018cc:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 80018ce:	330a      	adds	r3, #10
 80018d0:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 80018d4:	f006 f86c 	bl	80079b0 <BSP_STM32_JPEG_GetColorSpace>
 80018d8:	2810      	cmp	r0, #16
 80018da:	d002      	beq.n	80018e2 <_ARGB8888_copybufJPEG+0x26>
}
 80018dc:	b007      	add	sp, #28
 80018de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 80018e2:	482d      	ldr	r0, [pc, #180]	; (8001998 <_ARGB8888_copybufJPEG+0xdc>)
 80018e4:	f006 f852 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 80018e8:	4607      	mov	r7, r0
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 80018ea:	482b      	ldr	r0, [pc, #172]	; (8001998 <_ARGB8888_copybufJPEG+0xdc>)
 80018ec:	f006 f84e 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 80018f0:	f5c0 7948 	rsb	r9, r0, #800	; 0x320
	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 80018f4:	4828      	ldr	r0, [pc, #160]	; (8001998 <_ARGB8888_copybufJPEG+0xdc>)
 80018f6:	f006 f855 	bl	80079a4 <BSP_STM32_JPEG_GetCSS>
 80018fa:	2801      	cmp	r0, #1
 80018fc:	d014      	beq.n	8001928 <_ARGB8888_copybufJPEG+0x6c>
 80018fe:	2802      	cmp	r0, #2
 8001900:	d009      	beq.n	8001916 <_ARGB8888_copybufJPEG+0x5a>
 8001902:	2800      	cmp	r0, #0
 8001904:	d1ea      	bne.n	80018dc <_ARGB8888_copybufJPEG+0x20>
		if (width % 8) offsline_src = 8 - (width % 8);
 8001906:	f017 0b07 	ands.w	fp, r7, #7
 800190a:	d040      	beq.n	800198e <_ARGB8888_copybufJPEG+0xd2>
 800190c:	f1cb 0708 	rsb	r7, fp, #8
		chroma = DMA2D_CSS_444;
 8001910:	4683      	mov	fp, r0
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001912:	b2bf      	uxth	r7, r7
 8001914:	e00d      	b.n	8001932 <_ARGB8888_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001916:	f017 070f 	ands.w	r7, r7, #15
 800191a:	d035      	beq.n	8001988 <_ARGB8888_copybufJPEG+0xcc>
 800191c:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_422;
 8001920:	f04f 0b01 	mov.w	fp, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001924:	b2bf      	uxth	r7, r7
 8001926:	e004      	b.n	8001932 <_ARGB8888_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001928:	f017 070f 	ands.w	r7, r7, #15
 800192c:	d126      	bne.n	800197c <_ARGB8888_copybufJPEG+0xc0>
		chroma = DMA2D_CSS_420;
 800192e:	f04f 0b02 	mov.w	fp, #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001932:	6863      	ldr	r3, [r4, #4]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d0fc      	beq.n	8001932 <_ARGB8888_copybufJPEG+0x76>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001938:	2301      	movs	r3, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 800193a:	4817      	ldr	r0, [pc, #92]	; (8001998 <_ARGB8888_copybufJPEG+0xdc>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800193c:	6063      	str	r3, [r4, #4]
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 800193e:	f006 f825 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8001942:	4682      	mov	sl, r0
 8001944:	4814      	ldr	r0, [pc, #80]	; (8001998 <_ARGB8888_copybufJPEG+0xdc>)
 8001946:	f006 f827 	bl	8007998 <BSP_STM32_JPEG_GetHeight>
 800194a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800194c:	fa1f f189 	uxth.w	r1, r9
 8001950:	f8cd b010 	str.w	fp, [sp, #16]
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	fa1f f28a 	uxth.w	r2, sl
 800195a:	9102      	str	r1, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 800195c:	f44f 7148 	mov.w	r1, #800	; 0x320
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001960:	b283      	uxth	r3, r0
 8001962:	9700      	str	r7, [sp, #0]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001964:	fb01 5506 	mla	r5, r1, r6, r5
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001968:	2100      	movs	r1, #0
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <_ARGB8888_copybufJPEG+0xe0>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 800196c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001970:	9503      	str	r5, [sp, #12]
 8001972:	f005 fabd 	bl	8006ef0 <BSP_STM32_DMA2D_CopyBufJPEG>
}
 8001976:	b007      	add	sp, #28
 8001978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (width % 16) offsline_src = 16 - (width % 16);
 800197c:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_420;
 8001980:	f04f 0b02 	mov.w	fp, #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB8888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001984:	b2bf      	uxth	r7, r7
 8001986:	e7d4      	b.n	8001932 <_ARGB8888_copybufJPEG+0x76>
		chroma = DMA2D_CSS_422;
 8001988:	f04f 0b01 	mov.w	fp, #1
 800198c:	e7d1      	b.n	8001932 <_ARGB8888_copybufJPEG+0x76>
 800198e:	465f      	mov	r7, fp
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001990:	e7cf      	b.n	8001932 <_ARGB8888_copybufJPEG+0x76>
 8001992:	bf00      	nop
 8001994:	2400026c 	.word	0x2400026c
 8001998:	52003000 	.word	0x52003000
 800199c:	52001000 	.word	0x52001000

080019a0 <_ARGB1555_copybufJPEG>:
static void _ARGB1555_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80019a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80019a4:	4c34      	ldr	r4, [pc, #208]	; (8001a78 <_ARGB1555_copybufJPEG+0xd8>)
static void _ARGB1555_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80019a6:	b087      	sub	sp, #28
 80019a8:	4605      	mov	r5, r0
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 80019aa:	4834      	ldr	r0, [pc, #208]	; (8001a7c <_ARGB1555_copybufJPEG+0xdc>)
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80019ac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
static void _ARGB1555_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80019b0:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 80019b2:	330a      	adds	r3, #10
 80019b4:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 80019b8:	f005 fffa 	bl	80079b0 <BSP_STM32_JPEG_GetColorSpace>
 80019bc:	2810      	cmp	r0, #16
 80019be:	d002      	beq.n	80019c6 <_ARGB1555_copybufJPEG+0x26>
}
 80019c0:	b007      	add	sp, #28
 80019c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 80019c6:	482d      	ldr	r0, [pc, #180]	; (8001a7c <_ARGB1555_copybufJPEG+0xdc>)
 80019c8:	f005 ffe0 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 80019cc:	4607      	mov	r7, r0
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 80019ce:	482b      	ldr	r0, [pc, #172]	; (8001a7c <_ARGB1555_copybufJPEG+0xdc>)
 80019d0:	f005 ffdc 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 80019d4:	f5c0 7948 	rsb	r9, r0, #800	; 0x320
	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 80019d8:	4828      	ldr	r0, [pc, #160]	; (8001a7c <_ARGB1555_copybufJPEG+0xdc>)
 80019da:	f005 ffe3 	bl	80079a4 <BSP_STM32_JPEG_GetCSS>
 80019de:	2801      	cmp	r0, #1
 80019e0:	d014      	beq.n	8001a0c <_ARGB1555_copybufJPEG+0x6c>
 80019e2:	2802      	cmp	r0, #2
 80019e4:	d009      	beq.n	80019fa <_ARGB1555_copybufJPEG+0x5a>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d1ea      	bne.n	80019c0 <_ARGB1555_copybufJPEG+0x20>
		if (width % 8) offsline_src = 8 - (width % 8);
 80019ea:	f017 0b07 	ands.w	fp, r7, #7
 80019ee:	d040      	beq.n	8001a72 <_ARGB1555_copybufJPEG+0xd2>
 80019f0:	f1cb 0708 	rsb	r7, fp, #8
		chroma = DMA2D_CSS_444;
 80019f4:	4683      	mov	fp, r0
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 80019f6:	b2bf      	uxth	r7, r7
 80019f8:	e00d      	b.n	8001a16 <_ARGB1555_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 80019fa:	f017 070f 	ands.w	r7, r7, #15
 80019fe:	d035      	beq.n	8001a6c <_ARGB1555_copybufJPEG+0xcc>
 8001a00:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_422;
 8001a04:	f04f 0b01 	mov.w	fp, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a08:	b2bf      	uxth	r7, r7
 8001a0a:	e004      	b.n	8001a16 <_ARGB1555_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001a0c:	f017 070f 	ands.w	r7, r7, #15
 8001a10:	d126      	bne.n	8001a60 <_ARGB1555_copybufJPEG+0xc0>
		chroma = DMA2D_CSS_420;
 8001a12:	f04f 0b02 	mov.w	fp, #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001a16:	6863      	ldr	r3, [r4, #4]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d0fc      	beq.n	8001a16 <_ARGB1555_copybufJPEG+0x76>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001a1c:	2301      	movs	r3, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a1e:	4817      	ldr	r0, [pc, #92]	; (8001a7c <_ARGB1555_copybufJPEG+0xdc>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001a20:	6063      	str	r3, [r4, #4]
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a22:	f005 ffb3 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8001a26:	4682      	mov	sl, r0
 8001a28:	4814      	ldr	r0, [pc, #80]	; (8001a7c <_ARGB1555_copybufJPEG+0xdc>)
 8001a2a:	f005 ffb5 	bl	8007998 <BSP_STM32_JPEG_GetHeight>
 8001a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a30:	fa1f f189 	uxth.w	r1, r9
 8001a34:	f8cd b010 	str.w	fp, [sp, #16]
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	fa1f f28a 	uxth.w	r2, sl
 8001a3e:	9102      	str	r1, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001a40:	f44f 7148 	mov.w	r1, #800	; 0x320
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a44:	b283      	uxth	r3, r0
 8001a46:	9700      	str	r7, [sp, #0]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001a48:	fb01 5506 	mla	r5, r1, r6, r5
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a4c:	2103      	movs	r1, #3
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <_ARGB1555_copybufJPEG+0xe0>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001a50:	eb08 0545 	add.w	r5, r8, r5, lsl #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a54:	9503      	str	r5, [sp, #12]
 8001a56:	f005 fa4b 	bl	8006ef0 <BSP_STM32_DMA2D_CopyBufJPEG>
}
 8001a5a:	b007      	add	sp, #28
 8001a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (width % 16) offsline_src = 16 - (width % 16);
 8001a60:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_420;
 8001a64:	f04f 0b02 	mov.w	fp, #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB1555, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001a68:	b2bf      	uxth	r7, r7
 8001a6a:	e7d4      	b.n	8001a16 <_ARGB1555_copybufJPEG+0x76>
		chroma = DMA2D_CSS_422;
 8001a6c:	f04f 0b01 	mov.w	fp, #1
 8001a70:	e7d1      	b.n	8001a16 <_ARGB1555_copybufJPEG+0x76>
 8001a72:	465f      	mov	r7, fp
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001a74:	e7cf      	b.n	8001a16 <_ARGB1555_copybufJPEG+0x76>
 8001a76:	bf00      	nop
 8001a78:	2400026c 	.word	0x2400026c
 8001a7c:	52003000 	.word	0x52003000
 8001a80:	52001000 	.word	0x52001000

08001a84 <_ARGB4444_copybufJPEG>:
static void _ARGB4444_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001a88:	4c34      	ldr	r4, [pc, #208]	; (8001b5c <_ARGB4444_copybufJPEG+0xd8>)
static void _ARGB4444_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	4605      	mov	r5, r0
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001a8e:	4834      	ldr	r0, [pc, #208]	; (8001b60 <_ARGB4444_copybufJPEG+0xdc>)
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001a90:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
static void _ARGB4444_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001a94:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001a96:	330a      	adds	r3, #10
 8001a98:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001a9c:	f005 ff88 	bl	80079b0 <BSP_STM32_JPEG_GetColorSpace>
 8001aa0:	2810      	cmp	r0, #16
 8001aa2:	d002      	beq.n	8001aaa <_ARGB4444_copybufJPEG+0x26>
}
 8001aa4:	b007      	add	sp, #28
 8001aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8001aaa:	482d      	ldr	r0, [pc, #180]	; (8001b60 <_ARGB4444_copybufJPEG+0xdc>)
 8001aac:	f005 ff6e 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8001ab0:	4607      	mov	r7, r0
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8001ab2:	482b      	ldr	r0, [pc, #172]	; (8001b60 <_ARGB4444_copybufJPEG+0xdc>)
 8001ab4:	f005 ff6a 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8001ab8:	f5c0 7948 	rsb	r9, r0, #800	; 0x320
	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8001abc:	4828      	ldr	r0, [pc, #160]	; (8001b60 <_ARGB4444_copybufJPEG+0xdc>)
 8001abe:	f005 ff71 	bl	80079a4 <BSP_STM32_JPEG_GetCSS>
 8001ac2:	2801      	cmp	r0, #1
 8001ac4:	d014      	beq.n	8001af0 <_ARGB4444_copybufJPEG+0x6c>
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d009      	beq.n	8001ade <_ARGB4444_copybufJPEG+0x5a>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d1ea      	bne.n	8001aa4 <_ARGB4444_copybufJPEG+0x20>
		if (width % 8) offsline_src = 8 - (width % 8);
 8001ace:	f017 0b07 	ands.w	fp, r7, #7
 8001ad2:	d040      	beq.n	8001b56 <_ARGB4444_copybufJPEG+0xd2>
 8001ad4:	f1cb 0708 	rsb	r7, fp, #8
		chroma = DMA2D_CSS_444;
 8001ad8:	4683      	mov	fp, r0
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001ada:	b2bf      	uxth	r7, r7
 8001adc:	e00d      	b.n	8001afa <_ARGB4444_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001ade:	f017 070f 	ands.w	r7, r7, #15
 8001ae2:	d035      	beq.n	8001b50 <_ARGB4444_copybufJPEG+0xcc>
 8001ae4:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_422;
 8001ae8:	f04f 0b01 	mov.w	fp, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001aec:	b2bf      	uxth	r7, r7
 8001aee:	e004      	b.n	8001afa <_ARGB4444_copybufJPEG+0x76>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001af0:	f017 070f 	ands.w	r7, r7, #15
 8001af4:	d126      	bne.n	8001b44 <_ARGB4444_copybufJPEG+0xc0>
		chroma = DMA2D_CSS_420;
 8001af6:	f04f 0b02 	mov.w	fp, #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001afa:	6863      	ldr	r3, [r4, #4]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d0fc      	beq.n	8001afa <_ARGB4444_copybufJPEG+0x76>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001b00:	2301      	movs	r3, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b02:	4817      	ldr	r0, [pc, #92]	; (8001b60 <_ARGB4444_copybufJPEG+0xdc>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001b04:	6063      	str	r3, [r4, #4]
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b06:	f005 ff41 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8001b0a:	4682      	mov	sl, r0
 8001b0c:	4814      	ldr	r0, [pc, #80]	; (8001b60 <_ARGB4444_copybufJPEG+0xdc>)
 8001b0e:	f005 ff43 	bl	8007998 <BSP_STM32_JPEG_GetHeight>
 8001b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b14:	fa1f f189 	uxth.w	r1, r9
 8001b18:	f8cd b010 	str.w	fp, [sp, #16]
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	fa1f f28a 	uxth.w	r2, sl
 8001b22:	9102      	str	r1, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001b24:	f44f 7148 	mov.w	r1, #800	; 0x320
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b28:	b283      	uxth	r3, r0
 8001b2a:	9700      	str	r7, [sp, #0]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001b2c:	fb01 5506 	mla	r5, r1, r6, r5
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b30:	2104      	movs	r1, #4
 8001b32:	480c      	ldr	r0, [pc, #48]	; (8001b64 <_ARGB4444_copybufJPEG+0xe0>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001b34:	eb08 0545 	add.w	r5, r8, r5, lsl #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b38:	9503      	str	r5, [sp, #12]
 8001b3a:	f005 f9d9 	bl	8006ef0 <BSP_STM32_DMA2D_CopyBufJPEG>
}
 8001b3e:	b007      	add	sp, #28
 8001b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (width % 16) offsline_src = 16 - (width % 16);
 8001b44:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_420;
 8001b48:	f04f 0b02 	mov.w	fp, #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_ARGB4444, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001b4c:	b2bf      	uxth	r7, r7
 8001b4e:	e7d4      	b.n	8001afa <_ARGB4444_copybufJPEG+0x76>
		chroma = DMA2D_CSS_422;
 8001b50:	f04f 0b01 	mov.w	fp, #1
 8001b54:	e7d1      	b.n	8001afa <_ARGB4444_copybufJPEG+0x76>
 8001b56:	465f      	mov	r7, fp
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001b58:	e7cf      	b.n	8001afa <_ARGB4444_copybufJPEG+0x76>
 8001b5a:	bf00      	nop
 8001b5c:	2400026c 	.word	0x2400026c
 8001b60:	52003000 	.word	0x52003000
 8001b64:	52001000 	.word	0x52001000

08001b68 <_RGB888_copybufJPEG>:
static void _RGB888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001b6c:	4c34      	ldr	r4, [pc, #208]	; (8001c40 <_RGB888_copybufJPEG+0xd8>)
static void _RGB888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	4605      	mov	r5, r0
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001b72:	4834      	ldr	r0, [pc, #208]	; (8001c44 <_RGB888_copybufJPEG+0xdc>)
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001b74:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
static void _RGB888_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8001b78:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
	if (BSP_STM32_JPEG_GetColorSpace(JPEG) != JPEG_YCBCR_COLORSPACE) return;
 8001b80:	f005 ff16 	bl	80079b0 <BSP_STM32_JPEG_GetColorSpace>
 8001b84:	2810      	cmp	r0, #16
 8001b86:	d002      	beq.n	8001b8e <_RGB888_copybufJPEG+0x26>
}
 8001b88:	b009      	add	sp, #36	; 0x24
 8001b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8001b8e:	482d      	ldr	r0, [pc, #180]	; (8001c44 <_RGB888_copybufJPEG+0xdc>)
 8001b90:	f005 fefc 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8001b94:	4607      	mov	r7, r0
	uint32_t offsline_dest = LCD_WIDTH - BSP_STM32_JPEG_GetWidth(JPEG);
 8001b96:	482b      	ldr	r0, [pc, #172]	; (8001c44 <_RGB888_copybufJPEG+0xdc>)
 8001b98:	f005 fef8 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8001b9c:	f5c0 7948 	rsb	r9, r0, #800	; 0x320
	switch (BSP_STM32_JPEG_GetCSS(JPEG)) {
 8001ba0:	4828      	ldr	r0, [pc, #160]	; (8001c44 <_RGB888_copybufJPEG+0xdc>)
 8001ba2:	f005 feff 	bl	80079a4 <BSP_STM32_JPEG_GetCSS>
 8001ba6:	2801      	cmp	r0, #1
 8001ba8:	d013      	beq.n	8001bd2 <_RGB888_copybufJPEG+0x6a>
 8001baa:	2802      	cmp	r0, #2
 8001bac:	d009      	beq.n	8001bc2 <_RGB888_copybufJPEG+0x5a>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d1ea      	bne.n	8001b88 <_RGB888_copybufJPEG+0x20>
		if (width % 8) offsline_src = 8 - (width % 8);
 8001bb2:	f017 0207 	ands.w	r2, r7, #7
 8001bb6:	d040      	beq.n	8001c3a <_RGB888_copybufJPEG+0xd2>
 8001bb8:	f1c2 0708 	rsb	r7, r2, #8
		chroma = DMA2D_CSS_444;
 8001bbc:	4602      	mov	r2, r0
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001bbe:	b2bf      	uxth	r7, r7
 8001bc0:	e00b      	b.n	8001bda <_RGB888_copybufJPEG+0x72>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001bc2:	f017 070f 	ands.w	r7, r7, #15
 8001bc6:	d036      	beq.n	8001c36 <_RGB888_copybufJPEG+0xce>
 8001bc8:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_422;
 8001bcc:	2201      	movs	r2, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001bce:	b2bf      	uxth	r7, r7
 8001bd0:	e003      	b.n	8001bda <_RGB888_copybufJPEG+0x72>
		if (width % 16) offsline_src = 16 - (width % 16);
 8001bd2:	f017 070f 	ands.w	r7, r7, #15
 8001bd6:	d129      	bne.n	8001c2c <_RGB888_copybufJPEG+0xc4>
		chroma = DMA2D_CSS_420;
 8001bd8:	2202      	movs	r2, #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001bda:	6863      	ldr	r3, [r4, #4]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d0fc      	beq.n	8001bda <_RGB888_copybufJPEG+0x72>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001be0:	f04f 0b01 	mov.w	fp, #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001be4:	4817      	ldr	r0, [pc, #92]	; (8001c44 <_RGB888_copybufJPEG+0xdc>)
 8001be6:	9207      	str	r2, [sp, #28]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001be8:	f8c4 b004 	str.w	fp, [r4, #4]
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001bec:	f005 fece 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8001bf0:	4682      	mov	sl, r0
 8001bf2:	4814      	ldr	r0, [pc, #80]	; (8001c44 <_RGB888_copybufJPEG+0xdc>)
 8001bf4:	f005 fed0 	bl	8007998 <BSP_STM32_JPEG_GetHeight>
 8001bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bfa:	9a07      	ldr	r2, [sp, #28]
 8001bfc:	4659      	mov	r1, fp
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	b283      	uxth	r3, r0
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001c02:	f44f 7048 	mov.w	r0, #800	; 0x320
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c06:	9700      	str	r7, [sp, #0]
 8001c08:	fa1f f789 	uxth.w	r7, r9
 8001c0c:	9204      	str	r2, [sp, #16]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001c0e:	fb00 5506 	mla	r5, r0, r6, r5
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c12:	fa1f f28a 	uxth.w	r2, sl
 8001c16:	9702      	str	r7, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001c18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c1c:	480a      	ldr	r0, [pc, #40]	; (8001c48 <_RGB888_copybufJPEG+0xe0>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001c1e:	4445      	add	r5, r8
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c20:	9503      	str	r5, [sp, #12]
 8001c22:	f005 f965 	bl	8006ef0 <BSP_STM32_DMA2D_CopyBufJPEG>
}
 8001c26:	b009      	add	sp, #36	; 0x24
 8001c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (width % 16) offsline_src = 16 - (width % 16);
 8001c2c:	f1c7 0710 	rsb	r7, r7, #16
		chroma = DMA2D_CSS_420;
 8001c30:	2202      	movs	r2, #2
	BSP_STM32_DMA2D_CopyBufJPEG(DMA2D, DMA2D_RGB888, BSP_STM32_JPEG_GetWidth(JPEG), BSP_STM32_JPEG_GetHeight(JPEG), offsline_src, BSP_hlcd.JPEGbuf, offsline_dest, dest_addr, chroma);
 8001c32:	b2bf      	uxth	r7, r7
 8001c34:	e7d1      	b.n	8001bda <_RGB888_copybufJPEG+0x72>
		chroma = DMA2D_CSS_422;
 8001c36:	2201      	movs	r2, #1
 8001c38:	e7cf      	b.n	8001bda <_RGB888_copybufJPEG+0x72>
 8001c3a:	4617      	mov	r7, r2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001c3c:	e7cd      	b.n	8001bda <_RGB888_copybufJPEG+0x72>
 8001c3e:	bf00      	nop
 8001c40:	2400026c 	.word	0x2400026c
 8001c44:	52003000 	.word	0x52003000
 8001c48:	52001000 	.word	0x52001000

08001c4c <_ARGB8888_copybufblend>:
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001c4e:	4d13      	ldr	r5, [pc, #76]	; (8001c9c <_ARGB8888_copybufblend+0x50>)
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001c50:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001c52:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001c56:	b087      	sub	sp, #28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001c58:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001c5c:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001c60:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001c64:	320a      	adds	r2, #10
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001c66:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001c6a:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001c6e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001c72:	eb01 0183 	add.w	r1, r1, r3, lsl #2
static void _ARGB8888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001c76:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001c7a:	686c      	ldr	r4, [r5, #4]
 8001c7c:	2c01      	cmp	r4, #1
 8001c7e:	d0fc      	beq.n	8001c7a <_ARGB8888_copybufblend+0x2e>
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001c80:	9600      	str	r6, [sp, #0]
 8001c82:	e9cd 0701 	strd	r0, r7, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001c86:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001c88:	e9cd 1c03 	strd	r1, ip, [sp, #12]
 8001c8c:	2100      	movs	r1, #0
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001c8e:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <_ARGB8888_copybufblend+0x54>)
 8001c92:	f005 f97b 	bl	8006f8c <BSP_STM32_DMA2D_CopyBufBlend>
}
 8001c96:	b007      	add	sp, #28
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2400026c 	.word	0x2400026c
 8001ca0:	52001000 	.word	0x52001000

08001ca4 <_ARGB1555_copybufblend>:
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001ca6:	4d13      	ldr	r5, [pc, #76]	; (8001cf4 <_ARGB1555_copybufblend+0x50>)
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001ca8:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001caa:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cae:	b087      	sub	sp, #28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001cb0:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001cb4:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cb8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001cbc:	320a      	adds	r2, #10
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cbe:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001cc2:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cc6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001cca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _ARGB1555_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001cd2:	686c      	ldr	r4, [r5, #4]
 8001cd4:	2c01      	cmp	r4, #1
 8001cd6:	d0fc      	beq.n	8001cd2 <_ARGB1555_copybufblend+0x2e>
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001cd8:	9600      	str	r6, [sp, #0]
 8001cda:	e9cd 0701 	strd	r0, r7, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001cde:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001ce0:	e9cd 1c03 	strd	r1, ip, [sp, #12]
 8001ce4:	2103      	movs	r1, #3
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001ce6:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <_ARGB1555_copybufblend+0x54>)
 8001cea:	f005 f94f 	bl	8006f8c <BSP_STM32_DMA2D_CopyBufBlend>
}
 8001cee:	b007      	add	sp, #28
 8001cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2400026c 	.word	0x2400026c
 8001cf8:	52001000 	.word	0x52001000

08001cfc <_ARGB4444_copybufblend>:
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001cfe:	4d13      	ldr	r5, [pc, #76]	; (8001d4c <_ARGB4444_copybufblend+0x50>)
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d00:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d02:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d06:	b087      	sub	sp, #28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d08:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001d0c:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d10:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d14:	320a      	adds	r2, #10
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d16:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d1a:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d1e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001d22:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _ARGB4444_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d26:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001d2a:	686c      	ldr	r4, [r5, #4]
 8001d2c:	2c01      	cmp	r4, #1
 8001d2e:	d0fc      	beq.n	8001d2a <_ARGB4444_copybufblend+0x2e>
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d30:	9600      	str	r6, [sp, #0]
 8001d32:	e9cd 0701 	strd	r0, r7, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001d36:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d38:	e9cd 1c03 	strd	r1, ip, [sp, #12]
 8001d3c:	2104      	movs	r1, #4
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001d3e:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <_ARGB4444_copybufblend+0x54>)
 8001d42:	f005 f923 	bl	8006f8c <BSP_STM32_DMA2D_CopyBufBlend>
}
 8001d46:	b007      	add	sp, #28
 8001d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2400026c 	.word	0x2400026c
 8001d50:	52001000 	.word	0x52001000

08001d54 <_RGB888_copybufblend>:
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d54:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001d56:	4d12      	ldr	r5, [pc, #72]	; (8001da0 <_RGB888_copybufblend+0x4c>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001d58:	f44f 7448 	mov.w	r4, #800	; 0x320
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d5c:	b087      	sub	sp, #28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001d5e:	fb04 2203 	mla	r2, r4, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001d62:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d66:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001d6a:	330a      	adds	r3, #10
 8001d6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d70:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001d74:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d78:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001d7c:	4416      	add	r6, r2
static void _RGB888_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8001d7e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001d82:	686c      	ldr	r4, [r5, #4]
 8001d84:	2c01      	cmp	r4, #1
 8001d86:	d0fc      	beq.n	8001d82 <_RGB888_copybufblend+0x2e>
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d88:	9100      	str	r1, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001d8a:	2101      	movs	r1, #1
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d8c:	e9cd 0701 	strd	r0, r7, [sp, #4]
 8001d90:	e9cd 6c03 	strd	r6, ip, [sp, #12]
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <_RGB888_copybufblend+0x50>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001d96:	6069      	str	r1, [r5, #4]
	BSP_STM32_DMA2D_CopyBufBlend(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr, alpha);
 8001d98:	f005 f8f8 	bl	8006f8c <BSP_STM32_DMA2D_CopyBufBlend>
}
 8001d9c:	b007      	add	sp, #28
 8001d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da0:	2400026c 	.word	0x2400026c
 8001da4:	52001000 	.word	0x52001000

08001da8 <_ARGB8888_copybuf>:
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001da8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001daa:	4d11      	ldr	r5, [pc, #68]	; (8001df0 <_ARGB8888_copybuf+0x48>)
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001dac:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001dae:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001db2:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001db4:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001db8:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001dbc:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001dc0:	320a      	adds	r2, #10
 8001dc2:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001dc6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 2);
 8001dca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
static void _ARGB8888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001dce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001dd2:	686c      	ldr	r4, [r5, #4]
 8001dd4:	2c01      	cmp	r4, #1
 8001dd6:	d0fc      	beq.n	8001dd2 <_ARGB8888_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001dd8:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001dda:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001ddc:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001dde:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB8888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <_ARGB8888_copybuf+0x4c>)
 8001de2:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8001de6:	2100      	movs	r1, #0
 8001de8:	f005 f83c 	bl	8006e64 <BSP_STM32_DMA2D_CopyBuf>
}
 8001dec:	b005      	add	sp, #20
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df0:	2400026c 	.word	0x2400026c
 8001df4:	52001000 	.word	0x52001000

08001df8 <_ARGB1555_copybuf>:
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001dfa:	4d11      	ldr	r5, [pc, #68]	; (8001e40 <_ARGB1555_copybuf+0x48>)
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001dfc:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001dfe:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e02:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e04:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001e08:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e0c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e10:	320a      	adds	r2, #10
 8001e12:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e16:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e1a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _ARGB1555_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e1e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001e22:	686c      	ldr	r4, [r5, #4]
 8001e24:	2c01      	cmp	r4, #1
 8001e26:	d0fc      	beq.n	8001e22 <_ARGB1555_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e28:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001e2a:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e2c:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001e2e:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB1555, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <_ARGB1555_copybuf+0x4c>)
 8001e32:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8001e36:	2103      	movs	r1, #3
 8001e38:	f005 f814 	bl	8006e64 <BSP_STM32_DMA2D_CopyBuf>
}
 8001e3c:	b005      	add	sp, #20
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e40:	2400026c 	.word	0x2400026c
 8001e44:	52001000 	.word	0x52001000

08001e48 <_ARGB4444_copybuf>:
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001e4a:	4d11      	ldr	r5, [pc, #68]	; (8001e90 <_ARGB4444_copybuf+0x48>)
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e4c:	460e      	mov	r6, r1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e4e:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e52:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e54:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001e58:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e5c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e60:	320a      	adds	r2, #10
 8001e62:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e66:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) << 1);
 8001e6a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _ARGB4444_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e6e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001e72:	686c      	ldr	r4, [r5, #4]
 8001e74:	2c01      	cmp	r4, #1
 8001e76:	d0fc      	beq.n	8001e72 <_ARGB4444_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e78:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001e7a:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e7c:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001e7e:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_ARGB4444, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <_ARGB4444_copybuf+0x4c>)
 8001e82:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8001e86:	2104      	movs	r1, #4
 8001e88:	f004 ffec 	bl	8006e64 <BSP_STM32_DMA2D_CopyBuf>
}
 8001e8c:	b005      	add	sp, #20
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e90:	2400026c 	.word	0x2400026c
 8001e94:	52001000 	.word	0x52001000

08001e98 <_RGB888_copybuf>:
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001e9a:	4d11      	ldr	r5, [pc, #68]	; (8001ee0 <_RGB888_copybuf+0x48>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001e9c:	f44f 7448 	mov.w	r4, #800	; 0x320
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ea0:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001ea2:	fb04 2203 	mla	r2, r4, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001ea6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001eaa:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001eae:	330a      	adds	r3, #10
 8001eb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001eb4:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001eb8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH) * 3);
 8001ebc:	4416      	add	r6, r2
static void _RGB888_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ebe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001ec2:	686c      	ldr	r4, [r5, #4]
 8001ec4:	2c01      	cmp	r4, #1
 8001ec6:	d0fc      	beq.n	8001ec2 <_RGB888_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001ec8:	9100      	str	r1, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001eca:	2101      	movs	r1, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001ecc:	9001      	str	r0, [sp, #4]
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <_RGB888_copybuf+0x4c>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001ed0:	6069      	str	r1, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB888, width, height, offsline_src, src_addr, offsline_dest, dest_addr);
 8001ed2:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8001ed6:	f004 ffc5 	bl	8006e64 <BSP_STM32_DMA2D_CopyBuf>
}
 8001eda:	b005      	add	sp, #20
 8001edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2400026c 	.word	0x2400026c
 8001ee4:	52001000 	.word	0x52001000

08001ee8 <_AL88_copybuf>:
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001eea:	4d11      	ldr	r5, [pc, #68]	; (8001f30 <_AL88_copybuf+0x48>)
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001eec:	460e      	mov	r6, r1
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8001eee:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001ef2:	b085      	sub	sp, #20
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8001ef4:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001ef8:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001efc:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8001f00:	320a      	adds	r2, #10
 8001f02:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f06:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8001f0a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _AL88_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f0e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001f12:	686c      	ldr	r4, [r5, #4]
 8001f14:	2c01      	cmp	r4, #1
 8001f16:	d0fc      	beq.n	8001f12 <_AL88_copybuf+0x2a>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8001f18:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001f1a:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8001f1c:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8001f1e:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <_AL88_copybuf+0x4c>)
 8001f22:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8001f26:	2102      	movs	r1, #2
 8001f28:	f004 ff9c 	bl	8006e64 <BSP_STM32_DMA2D_CopyBuf>
}
 8001f2c:	b005      	add	sp, #20
 8001f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f30:	2400026c 	.word	0x2400026c
 8001f34:	52001000 	.word	0x52001000

08001f38 <_L8_copybuf>:
	// Function not available in color modes with CLUT tables
	_L8_fillbuf(x, y, width, height, offsetline, color);
}


static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	// Because DMA2D cannot handle 8bit formats, below workaround was required

	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001f3c:	4d3e      	ldr	r5, [pc, #248]	; (8002038 <_L8_copybuf+0x100>)

	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001f3e:	f44f 7448 	mov.w	r4, #800	; 0x320
static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f42:	b084      	sub	sp, #16
	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001f44:	fb04 2303 	mla	r3, r4, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8001f48:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f4c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	uint8_t *s_addr = (uint8_t *)src_addr;
 8001f50:	4604      	mov	r4, r0
	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001f52:	320a      	adds	r2, #10
static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f54:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001f58:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 8001f5c:	441e      	add	r6, r3
static void _L8_copybuf(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height) {
 8001f5e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	uint8_t *d_addr = (uint8_t *)BSP_hlcd.layer.Frames[eframe] + ((x_dest + y_dest * LCD_WIDTH));
 8001f62:	46b6      	mov	lr, r6
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8001f64:	686a      	ldr	r2, [r5, #4]
 8001f66:	2a01      	cmp	r2, #1
 8001f68:	d0fc      	beq.n	8001f64 <_L8_copybuf+0x2c>
	uint32_t size = 0;

	_L8_dma2dwait();

	if (((uint32_t)s_addr % 2) || ((uint32_t)d_addr % 2)>0) {
 8001f6a:	ea46 0200 	orr.w	r2, r6, r0
 8001f6e:	f012 0201 	ands.w	r2, r2, #1
 8001f72:	d01e      	beq.n	8001fb2 <_L8_copybuf+0x7a>
		// Cannot use DMA2D
		while (size<(width * height)) {
 8001f74:	fb03 f50c 	mul.w	r5, r3, ip
 8001f78:	b17d      	cbz	r5, 8001f9a <_L8_copybuf+0x62>
			size++;
			if (!(size % width)) {
				d_addr+=offsline_dest;
				s_addr+=offsline_src;
			}
			d_addr++;
 8001f7a:	3701      	adds	r7, #1
			s_addr++;
 8001f7c:	3101      	adds	r1, #1
			if (!(size % width)) {
 8001f7e:	2300      	movs	r3, #0
			size++;
 8001f80:	3301      	adds	r3, #1
			*d_addr = *s_addr;
 8001f82:	7820      	ldrb	r0, [r4, #0]
			if (!(size % width)) {
 8001f84:	fbb3 f2fc 	udiv	r2, r3, ip
 8001f88:	fb0c 3212 	mls	r2, ip, r2, r3
			*d_addr = *s_addr;
 8001f8c:	f88e 0000 	strb.w	r0, [lr]
			if (!(size % width)) {
 8001f90:	b932      	cbnz	r2, 8001fa0 <_L8_copybuf+0x68>
		while (size<(width * height)) {
 8001f92:	429d      	cmp	r5, r3
			d_addr++;
 8001f94:	44be      	add	lr, r7
			s_addr++;
 8001f96:	440c      	add	r4, r1
		while (size<(width * height)) {
 8001f98:	d1f2      	bne.n	8001f80 <_L8_copybuf+0x48>
		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);

	}


}
 8001f9a:	b004      	add	sp, #16
 8001f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		while (size<(width * height)) {
 8001fa0:	429d      	cmp	r5, r3
			d_addr++;
 8001fa2:	f10e 0e01 	add.w	lr, lr, #1
			s_addr++;
 8001fa6:	f104 0401 	add.w	r4, r4, #1
		while (size<(width * height)) {
 8001faa:	d1e9      	bne.n	8001f80 <_L8_copybuf+0x48>
}
 8001fac:	b004      	add	sp, #16
 8001fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t w = width & 0xFFFE;
 8001fb2:	f02c 0401 	bic.w	r4, ip, #1
		uint16_t os = offsline_src + width - w;
 8001fb6:	eb0c 0e01 	add.w	lr, ip, r1
		uint16_t od = offsline_dest + width - w;
 8001fba:	eb0c 0907 	add.w	r9, ip, r7
		uint16_t os = offsline_src + width - w;
 8001fbe:	ebae 0e04 	sub.w	lr, lr, r4
		if (w < width) {
 8001fc2:	45a4      	cmp	ip, r4
		uint16_t od = offsline_dest + width - w;
 8001fc4:	eba9 0904 	sub.w	r9, r9, r4
		uint16_t w = width & 0xFFFE;
 8001fc8:	fa1f f884 	uxth.w	r8, r4
		uint16_t os = offsline_src + width - w;
 8001fcc:	fa1f fe8e 	uxth.w	lr, lr
		uint16_t od = offsline_dest + width - w;
 8001fd0:	fa1f f989 	uxth.w	r9, r9
		if (w < width) {
 8001fd4:	d911      	bls.n	8001ffa <_L8_copybuf+0xc2>
			uint8_t *dd_addr = d_addr + width - 1;
 8001fd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001fda:	eb06 040c 	add.w	r4, r6, ip
			uint8_t *ss_addr = s_addr + width - 1;
 8001fde:	4484      	add	ip, r0
			for (uint16_t yy = 0; yy< height; yy++) {
 8001fe0:	b15b      	cbz	r3, 8001ffa <_L8_copybuf+0xc2>
 8001fe2:	2901      	cmp	r1, #1
 8001fe4:	d11c      	bne.n	8002020 <_L8_copybuf+0xe8>
 8001fe6:	2f01      	cmp	r7, #1
 8001fe8:	d11a      	bne.n	8002020 <_L8_copybuf+0xe8>
				*dd_addr = *ss_addr;
 8001fea:	f81c 1b01 	ldrb.w	r1, [ip], #1
			for (uint16_t yy = 0; yy< height; yy++) {
 8001fee:	3201      	adds	r2, #1
				*dd_addr = *ss_addr;
 8001ff0:	f804 1b01 	strb.w	r1, [r4], #1
			for (uint16_t yy = 0; yy< height; yy++) {
 8001ff4:	b291      	uxth	r1, r2
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	d8f7      	bhi.n	8001fea <_L8_copybuf+0xb2>
		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);
 8001ffa:	9001      	str	r0, [sp, #4]
 8001ffc:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8002000:	ea4f 0259 	mov.w	r2, r9, lsr #1
 8002004:	2102      	movs	r1, #2
 8002006:	9000      	str	r0, [sp, #0]
		BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002008:	2001      	movs	r0, #1
		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);
 800200a:	9202      	str	r2, [sp, #8]
 800200c:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8002010:	9603      	str	r6, [sp, #12]
		BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002012:	6068      	str	r0, [r5, #4]
		BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, (w >> 1), height, (os >> 1), (uint32_t)s_addr, (od >> 1), (uint32_t)d_addr);
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <_L8_copybuf+0x104>)
 8002016:	f004 ff25 	bl	8006e64 <BSP_STM32_DMA2D_CopyBuf>
}
 800201a:	b004      	add	sp, #16
 800201c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				*dd_addr = *ss_addr;
 8002020:	f89c a000 	ldrb.w	sl, [ip]
			for (uint16_t yy = 0; yy< height; yy++) {
 8002024:	3201      	adds	r2, #1
				ss_addr+=offsline_src;
 8002026:	448c      	add	ip, r1
				*dd_addr = *ss_addr;
 8002028:	f884 a000 	strb.w	sl, [r4]
			for (uint16_t yy = 0; yy< height; yy++) {
 800202c:	fa1f fa82 	uxth.w	sl, r2
				dd_addr+=offsline_dest;
 8002030:	443c      	add	r4, r7
			for (uint16_t yy = 0; yy< height; yy++) {
 8002032:	459a      	cmp	sl, r3
 8002034:	d3f4      	bcc.n	8002020 <_L8_copybuf+0xe8>
 8002036:	e7e0      	b.n	8001ffa <_L8_copybuf+0xc2>
 8002038:	2400026c 	.word	0x2400026c
 800203c:	52001000 	.word	0x52001000

08002040 <_L8_copybufblend>:


static void _L8_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002040:	b410      	push	{r4}
 8002042:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	// Status: Function Completed
	// Effective and fast blending is not possible with CLUT mode
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 8002046:	9401      	str	r4, [sp, #4]
static void _L8_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002048:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 800204c:	9402      	str	r4, [sp, #8]
static void _L8_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 800204e:	f8bd 400c 	ldrh.w	r4, [sp, #12]
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 8002052:	9403      	str	r4, [sp, #12]
}
 8002054:	f85d 4b04 	ldr.w	r4, [sp], #4
	_L8_copybuf(src_addr, offsline_src, x_dest, y_dest, offsline_dest, width, height);
 8002058:	f7ff bf6e 	b.w	8001f38 <_L8_copybuf>

0800205c <_ARGB8888_fillbufblend>:
static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800205e:	4c10      	ldr	r4, [pc, #64]	; (80020a0 <_ARGB8888_fillbufblend+0x44>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002060:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002064:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002066:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800206a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800206e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002070:	300a      	adds	r0, #10
static void _ARGB8888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002072:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	uint8_t alpha  = color >> 24;
 8002076:	0e2f      	lsrs	r7, r5, #24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002078:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800207c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002080:	6861      	ldr	r1, [r4, #4]
 8002082:	2901      	cmp	r1, #1
 8002084:	d0fc      	beq.n	8002080 <_ARGB8888_fillbufblend+0x24>
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color, alpha);
 8002086:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002088:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color, alpha);
 800208a:	2100      	movs	r1, #0
 800208c:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800208e:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color, alpha);
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <_ARGB8888_fillbufblend+0x48>)
 8002092:	e9cd 5702 	strd	r5, r7, [sp, #8]
 8002096:	f004 fe73 	bl	8006d80 <BSP_STM32_DMA2D_FillBuffBlend>
}
 800209a:	b005      	add	sp, #20
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209e:	bf00      	nop
 80020a0:	2400026c 	.word	0x2400026c
 80020a4:	52001000 	.word	0x52001000

080020a8 <_ARGB1555_fillbufblend>:
static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80020aa:	4c11      	ldr	r4, [pc, #68]	; (80020f0 <_ARGB1555_fillbufblend+0x48>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80020ac:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80020b0:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80020b2:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80020b6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80020ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80020bc:	300a      	adds	r0, #10
static void _ARGB1555_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80020be:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	uint8_t alpha  = ((color & 0x8000) >> 15)?255:0;
 80020c2:	f347 35c0 	sbfx	r5, r7, #15, #1
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80020c6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
	uint8_t alpha  = ((color & 0x8000) >> 15)?255:0;
 80020ca:	b2ed      	uxtb	r5, r5
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80020cc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80020d0:	6861      	ldr	r1, [r4, #4]
 80020d2:	2901      	cmp	r1, #1
 80020d4:	d0fc      	beq.n	80020d0 <_ARGB1555_fillbufblend+0x28>
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color, alpha);
 80020d6:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80020d8:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color, alpha);
 80020da:	2103      	movs	r1, #3
 80020dc:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80020de:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color, alpha);
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <_ARGB1555_fillbufblend+0x4c>)
 80020e2:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80020e6:	f004 fe4b 	bl	8006d80 <BSP_STM32_DMA2D_FillBuffBlend>
}
 80020ea:	b005      	add	sp, #20
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2400026c 	.word	0x2400026c
 80020f4:	52001000 	.word	0x52001000

080020f8 <_ARGB4444_fillbufblend>:
static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80020fa:	4c11      	ldr	r4, [pc, #68]	; (8002140 <_ARGB4444_fillbufblend+0x48>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80020fc:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002100:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002102:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002106:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800210a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800210c:	300a      	adds	r0, #10
static void _ARGB4444_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800210e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	uint8_t alpha  = ((color & 0xF000) >> 12) << 4;
 8002112:	0a3d      	lsrs	r5, r7, #8
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002114:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
	uint8_t alpha  = ((color & 0xF000) >> 12) << 4;
 8002118:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800211c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002120:	6861      	ldr	r1, [r4, #4]
 8002122:	2901      	cmp	r1, #1
 8002124:	d0fc      	beq.n	8002120 <_ARGB4444_fillbufblend+0x28>
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color, alpha);
 8002126:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002128:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color, alpha);
 800212a:	2104      	movs	r1, #4
 800212c:	9600      	str	r6, [sp, #0]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800212e:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color, alpha);
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <_ARGB4444_fillbufblend+0x4c>)
 8002132:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8002136:	f004 fe23 	bl	8006d80 <BSP_STM32_DMA2D_FillBuffBlend>
}
 800213a:	b005      	add	sp, #20
 800213c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213e:	bf00      	nop
 8002140:	2400026c 	.word	0x2400026c
 8002144:	52001000 	.word	0x52001000

08002148 <_RGB888_fillbufblend>:
static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800214a:	4c10      	ldr	r4, [pc, #64]	; (800218c <_RGB888_fillbufblend+0x44>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 800214c:	f44f 7648 	mov.w	r6, #800	; 0x320
static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002150:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 8002152:	fb06 0001 	mla	r0, r6, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002156:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800215a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 800215c:	310a      	adds	r1, #10
 800215e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
static void _RGB888_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002162:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	uint8_t alpha  = color >> 24;
 8002166:	0e37      	lsrs	r7, r6, #24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 8002168:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800216c:	4408      	add	r0, r1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 800216e:	6861      	ldr	r1, [r4, #4]
 8002170:	2901      	cmp	r1, #1
 8002172:	d0fc      	beq.n	800216e <_RGB888_fillbufblend+0x26>
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002174:	2101      	movs	r1, #1
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color, alpha);
 8002176:	9001      	str	r0, [sp, #4]
 8002178:	9500      	str	r5, [sp, #0]
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <_RGB888_fillbufblend+0x48>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800217c:	6061      	str	r1, [r4, #4]
	BSP_STM32_DMA2D_FillBuffBlend(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color, alpha);
 800217e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002182:	f004 fdfd 	bl	8006d80 <BSP_STM32_DMA2D_FillBuffBlend>
}
 8002186:	b005      	add	sp, #20
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218a:	bf00      	nop
 800218c:	2400026c 	.word	0x2400026c
 8002190:	52001000 	.word	0x52001000

08002194 <_ARGB8888_fillbuf>:
static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002194:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002196:	4c0f      	ldr	r4, [pc, #60]	; (80021d4 <_ARGB8888_fillbuf+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 8002198:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800219c:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 800219e:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80021a2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021a6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 80021aa:	300a      	adds	r0, #10
 80021ac:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _ARGB8888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021b0:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 2);
 80021b2:	eb05 0581 	add.w	r5, r5, r1, lsl #2
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80021b6:	6861      	ldr	r1, [r4, #4]
 80021b8:	2901      	cmp	r1, #1
 80021ba:	d0fc      	beq.n	80021b6 <_ARGB8888_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color);
 80021bc:	2100      	movs	r1, #0
 80021be:	9600      	str	r6, [sp, #0]
 80021c0:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80021c4:	2001      	movs	r0, #1
 80021c6:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, width, height, offsetline, dest_addr, color);
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <_ARGB8888_fillbuf+0x44>)
 80021ca:	f004 fd9f 	bl	8006d0c <BSP_STM32_DMA2D_FillBuff>
}
 80021ce:	b004      	add	sp, #16
 80021d0:	bd70      	pop	{r4, r5, r6, pc}
 80021d2:	bf00      	nop
 80021d4:	2400026c 	.word	0x2400026c
 80021d8:	52001000 	.word	0x52001000

080021dc <_ARGB1555_fillbuf>:
static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021dc:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80021de:	4c0f      	ldr	r4, [pc, #60]	; (800221c <_ARGB1555_fillbuf+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80021e0:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021e4:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80021e6:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80021ea:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021ee:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80021f2:	300a      	adds	r0, #10
 80021f4:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _ARGB1555_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80021f8:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80021fa:	eb05 0541 	add.w	r5, r5, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80021fe:	6861      	ldr	r1, [r4, #4]
 8002200:	2901      	cmp	r1, #1
 8002202:	d0fc      	beq.n	80021fe <_ARGB1555_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color);
 8002204:	2103      	movs	r1, #3
 8002206:	9600      	str	r6, [sp, #0]
 8002208:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800220c:	2001      	movs	r0, #1
 800220e:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB1555, width, height, offsetline, dest_addr, color);
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <_ARGB1555_fillbuf+0x44>)
 8002212:	f004 fd7b 	bl	8006d0c <BSP_STM32_DMA2D_FillBuff>
}
 8002216:	b004      	add	sp, #16
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	bf00      	nop
 800221c:	2400026c 	.word	0x2400026c
 8002220:	52001000 	.word	0x52001000

08002224 <_ARGB4444_fillbuf>:
static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002224:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002226:	4c0f      	ldr	r4, [pc, #60]	; (8002264 <_ARGB4444_fillbuf+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002228:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800222c:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800222e:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002232:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002236:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800223a:	300a      	adds	r0, #10
 800223c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _ARGB4444_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002240:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002242:	eb05 0541 	add.w	r5, r5, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002246:	6861      	ldr	r1, [r4, #4]
 8002248:	2901      	cmp	r1, #1
 800224a:	d0fc      	beq.n	8002246 <_ARGB4444_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color);
 800224c:	2104      	movs	r1, #4
 800224e:	9600      	str	r6, [sp, #0]
 8002250:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002254:	2001      	movs	r0, #1
 8002256:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB4444, width, height, offsetline, dest_addr, color);
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <_ARGB4444_fillbuf+0x44>)
 800225a:	f004 fd57 	bl	8006d0c <BSP_STM32_DMA2D_FillBuff>
}
 800225e:	b004      	add	sp, #16
 8002260:	bd70      	pop	{r4, r5, r6, pc}
 8002262:	bf00      	nop
 8002264:	2400026c 	.word	0x2400026c
 8002268:	52001000 	.word	0x52001000

0800226c <_RGB888_fillbuf>:
static void _RGB888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800226c:	b530      	push	{r4, r5, lr}
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 800226e:	f44f 7c48 	mov.w	ip, #800	; 0x320
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002272:	4c0e      	ldr	r4, [pc, #56]	; (80022ac <_RGB888_fillbuf+0x40>)
static void _RGB888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002274:	b085      	sub	sp, #20
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 8002276:	fb0c 0001 	mla	r0, ip, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800227a:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
static void _RGB888_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800227e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x + y * LCD_WIDTH) * 3;
 8002282:	310a      	adds	r1, #10
 8002284:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002288:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800228c:	4408      	add	r0, r1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 800228e:	6861      	ldr	r1, [r4, #4]
 8002290:	2901      	cmp	r1, #1
 8002292:	d0fc      	beq.n	800228e <_RGB888_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color);
 8002294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002296:	9500      	str	r5, [sp, #0]
 8002298:	e9cd 0101 	strd	r0, r1, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800229c:	2101      	movs	r1, #1
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color);
 800229e:	4804      	ldr	r0, [pc, #16]	; (80022b0 <_RGB888_fillbuf+0x44>)
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80022a0:	6061      	str	r1, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB888, width, height, offsetline, dest_addr, color);
 80022a2:	f004 fd33 	bl	8006d0c <BSP_STM32_DMA2D_FillBuff>
}
 80022a6:	b005      	add	sp, #20
 80022a8:	bd30      	pop	{r4, r5, pc}
 80022aa:	bf00      	nop
 80022ac:	2400026c 	.word	0x2400026c
 80022b0:	52001000 	.word	0x52001000

080022b4 <_AL88_fillbuf>:
static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022b4:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80022b6:	4c0f      	ldr	r4, [pc, #60]	; (80022f4 <_AL88_fillbuf+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80022b8:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022bc:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80022be:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80022c2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022c6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80022ca:	300a      	adds	r0, #10
 80022cc:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _AL88_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022d0:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80022d2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80022d6:	6861      	ldr	r1, [r4, #4]
 80022d8:	2901      	cmp	r1, #1
 80022da:	d0fc      	beq.n	80022d6 <_AL88_fillbuf+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 80022dc:	2102      	movs	r1, #2
 80022de:	9600      	str	r6, [sp, #0]
 80022e0:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80022e4:	2001      	movs	r0, #1
 80022e6:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 80022e8:	4803      	ldr	r0, [pc, #12]	; (80022f8 <_AL88_fillbuf+0x44>)
 80022ea:	f004 fd0f 	bl	8006d0c <BSP_STM32_DMA2D_FillBuff>
}
 80022ee:	b004      	add	sp, #16
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
 80022f2:	bf00      	nop
 80022f4:	2400026c 	.word	0x2400026c
 80022f8:	52001000 	.word	0x52001000

080022fc <_L8_fillbuf>:
static void _L8_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 80022fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002300:	b08b      	sub	sp, #44	; 0x2c
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002302:	4c39      	ldr	r4, [pc, #228]	; (80023e8 <_L8_fillbuf+0xec>)
static void _L8_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002304:	9307      	str	r3, [sp, #28]
 8002306:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800230a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800230c:	9309      	str	r3, [sp, #36]	; 0x24
	uint16_t x0 = x & 0xFFFC;
 800230e:	f020 0303 	bic.w	r3, r0, #3
static void _L8_fillbuf(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002312:	e9cd 1205 	strd	r1, r2, [sp, #20]
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002316:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	if (x0 < x) x0 += 4;
 800231a:	4298      	cmp	r0, r3
	uint16_t x0 = x & 0xFFFC;
 800231c:	fa1f f983 	uxth.w	r9, r3
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	9208      	str	r2, [sp, #32]
	if (x0 < x) x0 += 4;
 8002324:	d903      	bls.n	800232e <_L8_fillbuf+0x32>
 8002326:	f109 0904 	add.w	r9, r9, #4
 800232a:	fa1f f989 	uxth.w	r9, r9
	uint16_t x1 = (x + width) & 0xFFFC;
 800232e:	9b06      	ldr	r3, [sp, #24]
 8002330:	18c6      	adds	r6, r0, r3
 8002332:	f026 0a03 	bic.w	sl, r6, #3
 8002336:	fa1f fa8a 	uxth.w	sl, sl
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 800233a:	6863      	ldr	r3, [r4, #4]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d0fc      	beq.n	800233a <_L8_fillbuf+0x3e>
	for (uint32_t yy=y; yy<(y+height); yy++) {
 8002340:	9b05      	ldr	r3, [sp, #20]
 8002342:	9a07      	ldr	r2, [sp, #28]
 8002344:	461f      	mov	r7, r3
 8002346:	eb02 0b03 	add.w	fp, r2, r3
 800234a:	455b      	cmp	r3, fp
 800234c:	d21b      	bcs.n	8002386 <_L8_fillbuf+0x8a>
 800234e:	45b1      	cmp	r9, r6
 8002350:	9b08      	ldr	r3, [sp, #32]
 8002352:	46ce      	mov	lr, r9
			*addr = *color8;
 8002354:	fa5f f885 	uxtb.w	r8, r5
 8002358:	bfa8      	it	ge
 800235a:	46b6      	movge	lr, r6
 800235c:	f103 0c0a 	add.w	ip, r3, #10
		for (uint32_t xx=x; xx<MIN(x0, x+width); xx++) {
 8002360:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002364:	4570      	cmp	r0, lr
 8002366:	fb03 f107 	mul.w	r1, r3, r7
 800236a:	d207      	bcs.n	800237c <_L8_fillbuf+0x80>
 800236c:	4603      	mov	r3, r0
			addr = (uint8_t *)(BSP_hlcd.layer.Frames[eframe]) + (xx + yy*LCD_WIDTH);
 800236e:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
			*addr = *color8;
 8002372:	440a      	add	r2, r1
 8002374:	54d5      	strb	r5, [r2, r3]
		for (uint32_t xx=x; xx<MIN(x0, x+width); xx++) {
 8002376:	3301      	adds	r3, #1
 8002378:	459e      	cmp	lr, r3
 800237a:	d1f8      	bne.n	800236e <_L8_fillbuf+0x72>
		if (x1<x0) continue;
 800237c:	45d1      	cmp	r9, sl
 800237e:	d927      	bls.n	80023d0 <_L8_fillbuf+0xd4>
	for (uint32_t yy=y; yy<(y+height); yy++) {
 8002380:	3701      	adds	r7, #1
 8002382:	455f      	cmp	r7, fp
 8002384:	d1ec      	bne.n	8002360 <_L8_fillbuf+0x64>
	if (x1<=x0) return;
 8002386:	45d1      	cmp	r9, sl
 8002388:	d21f      	bcs.n	80023ca <_L8_fillbuf+0xce>
	uint16_t ol = offsetline + width - w;
 800238a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800238c:	9a06      	ldr	r2, [sp, #24]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 800238e:	9808      	ldr	r0, [sp, #32]
	uint16_t ol = offsetline + width - w;
 8002390:	441a      	add	r2, r3
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 8002392:	9502      	str	r5, [sp, #8]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 8002394:	300a      	adds	r0, #10
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 8002396:	9b07      	ldr	r3, [sp, #28]
	uint16_t ol = offsetline + width - w;
 8002398:	eba2 010a 	sub.w	r1, r2, sl
	uint16_t w = x1-x0;
 800239c:	ebaa 0209 	sub.w	r2, sl, r9
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 80023a0:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
	uint16_t ol = offsetline + width - w;
 80023a4:	4449      	add	r1, r9
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 80023a6:	9805      	ldr	r0, [sp, #20]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 80023a8:	f3c2 028d 	ubfx	r2, r2, #2, #14
 80023ac:	f3c1 018d 	ubfx	r1, r1, #2, #14
 80023b0:	9100      	str	r1, [sp, #0]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 80023b2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80023b6:	fb01 9000 	mla	r0, r1, r0, r9
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 80023ba:	2100      	movs	r1, #0
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + (x0 + y * LCD_WIDTH);
 80023bc:	4428      	add	r0, r5
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 80023be:	9001      	str	r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80023c0:	2001      	movs	r0, #1
 80023c2:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_ARGB8888, (w >> 2), height, (ol >> 2), dest_addr, color);
 80023c4:	4809      	ldr	r0, [pc, #36]	; (80023ec <_L8_fillbuf+0xf0>)
 80023c6:	f004 fca1 	bl	8006d0c <BSP_STM32_DMA2D_FillBuff>
}
 80023ca:	b00b      	add	sp, #44	; 0x2c
 80023cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (uint32_t xx=x1; xx<(x+width); xx++) {
 80023d0:	4556      	cmp	r6, sl
 80023d2:	d9d5      	bls.n	8002380 <_L8_fillbuf+0x84>
			*addr = *color8;
 80023d4:	4653      	mov	r3, sl
			addr = (uint8_t *)(BSP_hlcd.layer.Frames[eframe]) + (xx + yy*LCD_WIDTH);
 80023d6:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
			*addr = *color8;
 80023da:	440a      	add	r2, r1
 80023dc:	f802 8003 	strb.w	r8, [r2, r3]
		for (uint32_t xx=x1; xx<(x+width); xx++) {
 80023e0:	3301      	adds	r3, #1
 80023e2:	429e      	cmp	r6, r3
 80023e4:	d1f7      	bne.n	80023d6 <_L8_fillbuf+0xda>
 80023e6:	e7cb      	b.n	8002380 <_L8_fillbuf+0x84>
 80023e8:	2400026c 	.word	0x2400026c
 80023ec:	52001000 	.word	0x52001000

080023f0 <_L8_copybufJPEG>:


static void _L8_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Function not available in AL color mode. Instead area is filled with black color.
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 80023f2:	4f10      	ldr	r7, [pc, #64]	; (8002434 <_L8_copybufJPEG+0x44>)
static void _L8_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 80023f4:	b083      	sub	sp, #12
 80023f6:	4605      	mov	r5, r0
 80023f8:	460e      	mov	r6, r1
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 80023fa:	4638      	mov	r0, r7
 80023fc:	f005 fac6 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8002400:	4604      	mov	r4, r0
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 8002402:	4638      	mov	r0, r7
 8002404:	f005 fac8 	bl	8007998 <BSP_STM32_JPEG_GetHeight>

	_L8_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <_L8_copybufJPEG+0x48>)
 800240a:	b2a4      	uxth	r4, r4
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 800240c:	4607      	mov	r7, r0
	_L8_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	21ff      	movs	r1, #255	; 0xff
 8002412:	2000      	movs	r0, #0
 8002414:	4798      	blx	r3
 8002416:	f5c4 7c48 	rsb	ip, r4, #800	; 0x320
 800241a:	4602      	mov	r2, r0
 800241c:	b2bb      	uxth	r3, r7
 800241e:	4631      	mov	r1, r6
 8002420:	4628      	mov	r0, r5
 8002422:	9201      	str	r2, [sp, #4]
 8002424:	4622      	mov	r2, r4
 8002426:	fa1f f48c 	uxth.w	r4, ip
 800242a:	9400      	str	r4, [sp, #0]
 800242c:	f7ff ff66 	bl	80022fc <_L8_fillbuf>
}
 8002430:	b003      	add	sp, #12
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002434:	52003000 	.word	0x52003000
 8002438:	24000244 	.word	0x24000244

0800243c <_L8_fillbufblend>:
static void _L8_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800243c:	b410      	push	{r4}
 800243e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	_L8_fillbuf(x, y, width, height, offsetline, color);
 8002442:	9401      	str	r4, [sp, #4]
}
 8002444:	f85d 4b04 	ldr.w	r4, [sp], #4
	_L8_fillbuf(x, y, width, height, offsetline, color);
 8002448:	f7ff bf58 	b.w	80022fc <_L8_fillbuf>

0800244c <_ARGB8888_updatepixel>:
	if (x < 0) return;
 800244c:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 8002450:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002454:	d204      	bcs.n	8002460 <_ARGB8888_updatepixel+0x14>
	if (y >= LCD_HEIGHT) return;
 8002456:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 800245a:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 800245e:	d300      	bcc.n	8002462 <_ARGB8888_updatepixel+0x16>
}
 8002460:	4770      	bx	lr
	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 8002462:	f44f 7c48 	mov.w	ip, #800	; 0x320
 8002466:	fb12 110c 	smlabb	r1, r2, ip, r1
	*addr = value;
 800246a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 800246e:	4770      	bx	lr

08002470 <_ARGB8888_updatepixelblend>:
	if (y >= LCD_HEIGHT) return;
 8002470:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 8002474:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 8002478:	d204      	bcs.n	8002484 <_ARGB8888_updatepixelblend+0x14>
	if (x < 0) return;
 800247a:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 800247e:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002482:	d300      	bcc.n	8002486 <_ARGB8888_updatepixelblend+0x16>
 8002484:	4770      	bx	lr
static void _ARGB8888_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002486:	b570      	push	{r4, r5, r6, lr}
	if (a1 == 0) return;
 8002488:	ea5f 6e13 	movs.w	lr, r3, lsr #24
 800248c:	d02e      	beq.n	80024ec <_ARGB8888_updatepixelblend+0x7c>
	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 800248e:	f44f 7448 	mov.w	r4, #800	; 0x320
	if (a1 < 255) {
 8002492:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 8002496:	fb12 1104 	smlabb	r1, r2, r4, r1
	if (a1 < 255) {
 800249a:	d025      	beq.n	80024e8 <_ARGB8888_updatepixelblend+0x78>
		uint32_t bgvalue = *addr;
 800249c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
		uint32_t a1n = 255 - a1;
 80024a0:	f1ce 06ff 	rsb	r6, lr, #255	; 0xff
		uint32_t b1 = (value << 24) >> 24;
 80024a4:	b2da      	uxtb	r2, r3
		uint32_t g1 = (value << 16) >> 24;
 80024a6:	f3c3 2c07 	ubfx	ip, r3, #8, #8
		uint32_t b0 = (bgvalue << 24) >> 24;
 80024aa:	b2e5      	uxtb	r5, r4
		uint32_t r1 = (value << 8) >> 24;
 80024ac:	f3c3 4307 	ubfx	r3, r3, #16, #8
		b1 = ((a1 * b1) + (a1n * b0)) >> 8;
 80024b0:	fb06 f505 	mul.w	r5, r6, r5
 80024b4:	fb0e 5502 	mla	r5, lr, r2, r5
		uint32_t g0 = (bgvalue << 16) >> 24;
 80024b8:	f3c4 2207 	ubfx	r2, r4, #8, #8
		g1 = ((a1 * g1) + (a1n * g0)) >> 8;
 80024bc:	fb06 f202 	mul.w	r2, r6, r2
 80024c0:	fb0e 220c 	mla	r2, lr, ip, r2
		uint32_t r0 = (bgvalue << 8) >> 24;
 80024c4:	f3c4 4c07 	ubfx	ip, r4, #16, #8
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 80024c8:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
		r1 = ((a1 * r1) + (a1n * r0)) >> 8;
 80024cc:	fb06 fc0c 	mul.w	ip, r6, ip
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 80024d0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024d4:	ea44 2415 	orr.w	r4, r4, r5, lsr #8
		r1 = ((a1 * r1) + (a1n * r0)) >> 8;
 80024d8:	fb0e cc03 	mla	ip, lr, r3, ip
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 80024dc:	ea42 0304 	orr.w	r3, r2, r4
		r1 = ((a1 * r1) + (a1n * r0)) >> 8;
 80024e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		value = (a0 << 24) | (r1 << 16) | (g1 << 8) | b1;
 80024e4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
	*addr = value;
 80024e8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
 80024ee:	bf00      	nop

080024f0 <_ARGB8888_getpixel>:
	if (x < 0) return 0x00000000;
 80024f0:	b28b      	uxth	r3, r1
	if (y < 0) return 0x00000000;
 80024f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80024f6:	d203      	bcs.n	8002500 <_ARGB8888_getpixel+0x10>
	if (y >= LCD_HEIGHT) return 0x00000000;
 80024f8:	b293      	uxth	r3, r2
	if (y < 0) return 0x00000000;
 80024fa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80024fe:	d301      	bcc.n	8002504 <_ARGB8888_getpixel+0x14>
 8002500:	2000      	movs	r0, #0
}
 8002502:	4770      	bx	lr
	uint32_t *addr = (uint32_t *)offset + (x + y * LCD_WIDTH);
 8002504:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002508:	fb12 1103 	smlabb	r1, r2, r3, r1
	return *addr;
 800250c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <_ARGB1555_updatepixel>:
	if (x < 0) return;
 8002514:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 8002518:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 800251c:	d204      	bcs.n	8002528 <_ARGB1555_updatepixel+0x14>
	if (y >= LCD_HEIGHT) return;
 800251e:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 8002522:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 8002526:	d300      	bcc.n	800252a <_ARGB1555_updatepixel+0x16>
}
 8002528:	4770      	bx	lr
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 800252a:	f44f 7c48 	mov.w	ip, #800	; 0x320
 800252e:	fb12 110c 	smlabb	r1, r2, ip, r1
	*addr = (uint16_t)value;
 8002532:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8002536:	4770      	bx	lr

08002538 <_ARGB1555_updatepixelblend>:
	if (x < 0) return;
 8002538:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 800253c:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002540:	d204      	bcs.n	800254c <_ARGB1555_updatepixelblend+0x14>
	if (y >= LCD_HEIGHT) return;
 8002542:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 8002546:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 800254a:	d300      	bcc.n	800254e <_ARGB1555_updatepixelblend+0x16>
}
 800254c:	4770      	bx	lr
	if (!(value & 0x8000)) return;
 800254e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002552:	d0fb      	beq.n	800254c <_ARGB1555_updatepixelblend+0x14>
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8002554:	f44f 7c48 	mov.w	ip, #800	; 0x320
 8002558:	fb12 120c 	smlabb	r2, r2, ip, r1
	*addr = (uint16_t)value;
 800255c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <_ARGB1555_getpixel>:
	if (x < 0) return 0x00000000;
 8002564:	b28b      	uxth	r3, r1
	if (y < 0) return 0x00000000;
 8002566:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800256a:	d203      	bcs.n	8002574 <_ARGB1555_getpixel+0x10>
	if (y >= LCD_HEIGHT) return 0x00000000;
 800256c:	b293      	uxth	r3, r2
	if (y < 0) return 0x00000000;
 800256e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002572:	d301      	bcc.n	8002578 <_ARGB1555_getpixel+0x14>
 8002574:	2000      	movs	r0, #0
}
 8002576:	4770      	bx	lr
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 8002578:	f44f 7348 	mov.w	r3, #800	; 0x320
 800257c:	fb12 1103 	smlabb	r1, r2, r3, r1
	return *addr;
 8002580:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <_ARGB4444_updatepixelblend>:
	if (x < 0) return;
 8002588:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 800258c:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002590:	d204      	bcs.n	800259c <_ARGB4444_updatepixelblend+0x14>
	if (y >= LCD_HEIGHT) return;
 8002592:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 8002596:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 800259a:	d300      	bcc.n	800259e <_ARGB4444_updatepixelblend+0x16>
 800259c:	4770      	bx	lr
	if (a1 == 0) return;
 800259e:	f413 4f70 	tst.w	r3, #61440	; 0xf000
static void _ARGB4444_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 80025a2:	b570      	push	{r4, r5, r6, lr}
	uint32_t a1 = (value & 0xF000) >> 12;
 80025a4:	f3c3 3403 	ubfx	r4, r3, #12, #4
	if (a1 == 0) return;
 80025a8:	d02f      	beq.n	800260a <_ARGB4444_updatepixelblend+0x82>
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80025aa:	f44f 7548 	mov.w	r5, #800	; 0x320
	if (a1 < 15) {
 80025ae:	2c0f      	cmp	r4, #15
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80025b0:	fb12 1205 	smlabb	r2, r2, r5, r1
	if (a1 < 15) {
 80025b4:	d027      	beq.n	8002606 <_ARGB4444_updatepixelblend+0x7e>
		uint32_t bgvalue = *addr;
 80025b6:	f830 c012 	ldrh.w	ip, [r0, r2, lsl #1]
		uint32_t a1n = 15 - a1;
 80025ba:	f1c4 060f 	rsb	r6, r4, #15
		uint32_t b1 = (value & 0x000F) >> 0;
 80025be:	f003 010f 	and.w	r1, r3, #15
		uint32_t g1 = (value & 0x00F0) >> 4;
 80025c2:	f3c3 1e03 	ubfx	lr, r3, #4, #4
		uint32_t b0 = (bgvalue & 0x000F) >> 0;
 80025c6:	f00c 050f 	and.w	r5, ip, #15
		uint32_t r1 = (value & 0x0F00) >> 8;
 80025ca:	f3c3 2303 	ubfx	r3, r3, #8, #4
		b1 = ((a1 * b1) + (a1n * b0)) >> 4;
 80025ce:	fb06 f505 	mul.w	r5, r6, r5
 80025d2:	fb04 5501 	mla	r5, r4, r1, r5
		uint32_t g0 = (bgvalue & 0x00F0) >> 4;
 80025d6:	f3cc 1103 	ubfx	r1, ip, #4, #4
		g1 = ((a1 * g1) + (a1n * g0)) >> 4;
 80025da:	fb06 f101 	mul.w	r1, r6, r1
 80025de:	fb04 110e 	mla	r1, r4, lr, r1
		uint32_t r0 = (bgvalue & 0x0F00) >> 8;
 80025e2:	f3cc 2e03 	ubfx	lr, ip, #8, #4
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 80025e6:	f40c 4c70 	and.w	ip, ip, #61440	; 0xf000
		r1 = ((a1 * r1) + (a1n * r0)) >> 4;
 80025ea:	fb06 fe0e 	mul.w	lr, r6, lr
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 80025ee:	f021 010f 	bic.w	r1, r1, #15
 80025f2:	ea4c 1c15 	orr.w	ip, ip, r5, lsr #4
		r1 = ((a1 * r1) + (a1n * r0)) >> 4;
 80025f6:	fb04 ee03 	mla	lr, r4, r3, lr
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 80025fa:	ea41 030c 	orr.w	r3, r1, ip
		r1 = ((a1 * r1) + (a1n * r0)) >> 4;
 80025fe:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
		value = (a0 << 12) | (r1 << 8) | (g1 << 4) | b1;
 8002602:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	*addr = (uint16_t)value;
 8002606:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800260a:	bd70      	pop	{r4, r5, r6, pc}

0800260c <_RGB888_updatepixelblend>:
	if (x < 0) return;
 800260c:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 8002610:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 8002614:	d22f      	bcs.n	8002676 <_RGB888_updatepixelblend+0x6a>
static void _RGB888_updatepixelblend(uint32_t offset, int16_t x, int16_t y, uint32_t value) {
 8002616:	b530      	push	{r4, r5, lr}
	if (y >= LCD_HEIGHT) return;
 8002618:	b294      	uxth	r4, r2
	if (y < 0) return;
 800261a:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 800261e:	d300      	bcc.n	8002622 <_RGB888_updatepixelblend+0x16>
}
 8002620:	bd30      	pop	{r4, r5, pc}
	if (a1 == 0) return;
 8002622:	ea5f 6c13 	movs.w	ip, r3, lsr #24
 8002626:	d0fb      	beq.n	8002620 <_RGB888_updatepixelblend+0x14>
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8002628:	f44f 7448 	mov.w	r4, #800	; 0x320
	uint32_t r1 = (value & 0x00FF0000) >> 16;
 800262c:	f3c3 4507 	ubfx	r5, r3, #16, #8
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8002630:	fb12 1104 	smlabb	r1, r2, r4, r1
	uint32_t a1n = 255 - a1;
 8002634:	f1cc 04ff 	rsb	r4, ip, #255	; 0xff
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8002638:	eb01 0241 	add.w	r2, r1, r1, lsl #1
	*addr_r = ((a1 * r1) + (a1n * (*addr_r))) >> 8;
 800263c:	f812 e000 	ldrb.w	lr, [r2, r0]
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 8002640:	1811      	adds	r1, r2, r0
	*addr_r = ((a1 * r1) + (a1n * (*addr_r))) >> 8;
 8002642:	fb04 fe0e 	mul.w	lr, r4, lr
 8002646:	fb0c ee05 	mla	lr, ip, r5, lr
 800264a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 800264e:	f802 e000 	strb.w	lr, [r2, r0]
	uint32_t g1 = (value & 0x0000FF00) >> 8;
 8002652:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*addr_g = ((a1 * g1) + (a1n * (*addr_g))) >> 8;
 8002656:	784a      	ldrb	r2, [r1, #1]
	uint32_t b1 = (value & 0x000000FF) >> 0;
 8002658:	b2db      	uxtb	r3, r3
	*addr_g = ((a1 * g1) + (a1n * (*addr_g))) >> 8;
 800265a:	fb04 f202 	mul.w	r2, r4, r2
 800265e:	fb0c 2200 	mla	r2, ip, r0, r2
 8002662:	0a12      	lsrs	r2, r2, #8
 8002664:	704a      	strb	r2, [r1, #1]
	*addr_b = ((a1 * b1) + (a1n * (*addr_b))) >> 8;
 8002666:	788a      	ldrb	r2, [r1, #2]
 8002668:	fb04 f202 	mul.w	r2, r4, r2
 800266c:	fb0c 2303 	mla	r3, ip, r3, r2
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	708b      	strb	r3, [r1, #2]
}
 8002674:	bd30      	pop	{r4, r5, pc}
 8002676:	4770      	bx	lr

08002678 <_RGB888_getpixel>:
	if (x < 0) return 0x00000000;
 8002678:	b28b      	uxth	r3, r1
	if (y < 0) return 0x00000000;
 800267a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800267e:	d203      	bcs.n	8002688 <_RGB888_getpixel+0x10>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8002680:	b293      	uxth	r3, r2
	if (y < 0) return 0x00000000;
 8002682:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002686:	d301      	bcc.n	800268c <_RGB888_getpixel+0x14>
 8002688:	2000      	movs	r0, #0
}
 800268a:	4770      	bx	lr
	uint32_t addr = offset + ((x + y * LCD_WIDTH) * 3);
 800268c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002690:	fb12 1103 	smlabb	r1, r2, r3, r1
 8002694:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002698:	1813      	adds	r3, r2, r0
	if (addr & 1) return (*(uint8_t *)(addr + 1)) | (*(uint16_t *)(addr) << 8);
 800269a:	07d9      	lsls	r1, r3, #31
 800269c:	d405      	bmi.n	80026aa <_RGB888_getpixel+0x32>
	return (*(uint16_t *)(addr + 1)) | (*(uint8_t *)(addr) << 16);
 800269e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80026a2:	5c12      	ldrb	r2, [r2, r0]
 80026a4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 80026a8:	4770      	bx	lr
	if (addr & 1) return (*(uint8_t *)(addr + 1)) | (*(uint16_t *)(addr) << 8);
 80026aa:	785b      	ldrb	r3, [r3, #1]
 80026ac:	5a12      	ldrh	r2, [r2, r0]
 80026ae:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
 80026b2:	4770      	bx	lr

080026b4 <_AL88_updatepixelblend>:
	if (x < 0) return;
 80026b4:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 80026b8:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80026bc:	d204      	bcs.n	80026c8 <_AL88_updatepixelblend+0x14>
	if (y >= LCD_HEIGHT) return;
 80026be:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 80026c2:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 80026c6:	d300      	bcc.n	80026ca <_AL88_updatepixelblend+0x16>
}
 80026c8:	4770      	bx	lr
	if (!(value & 0xFF00)) return;
 80026ca:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80026ce:	d0fb      	beq.n	80026c8 <_AL88_updatepixelblend+0x14>
	uint16_t *addr = (uint16_t *)offset + (x + y * LCD_WIDTH);
 80026d0:	f44f 7c48 	mov.w	ip, #800	; 0x320
 80026d4:	fb12 120c 	smlabb	r2, r2, ip, r1
	*addr = (uint16_t)value;
 80026d8:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <_L8_updatepixel>:
	if (x < 0) return;
 80026e0:	fa1f fc81 	uxth.w	ip, r1
	if (y < 0) return;
 80026e4:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80026e8:	d204      	bcs.n	80026f4 <_L8_updatepixel+0x14>
	if (y >= LCD_HEIGHT) return;
 80026ea:	fa1f fc82 	uxth.w	ip, r2
	if (y < 0) return;
 80026ee:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 80026f2:	d300      	bcc.n	80026f6 <_L8_updatepixel+0x16>
}
 80026f4:	4770      	bx	lr
	uint8_t *addr = (uint8_t *)offset + ((x + y * LCD_WIDTH));
 80026f6:	f44f 7c48 	mov.w	ip, #800	; 0x320
 80026fa:	fb12 110c 	smlabb	r1, r2, ip, r1
	*addr = (uint8_t)value;
 80026fe:	540b      	strb	r3, [r1, r0]
}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop

08002704 <_L8_updatepixelblend>:
	if (y >= LCD_HEIGHT) return;
 8002704:	fa1f fc82 	uxth.w	ip, r2
	if (value == 0) return;
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf18      	it	ne
 800270c:	f5bc 7ff0 	cmpne.w	ip, #480	; 0x1e0
 8002710:	d204      	bcs.n	800271c <_L8_updatepixelblend+0x18>
	if (x < 0) return;
 8002712:	fa1f fc81 	uxth.w	ip, r1
	if (value == 0) return;
 8002716:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 800271a:	d300      	bcc.n	800271e <_L8_updatepixelblend+0x1a>
}
 800271c:	4770      	bx	lr
	uint8_t *addr = (uint8_t *)offset + (x + y * LCD_WIDTH);
 800271e:	f44f 7c48 	mov.w	ip, #800	; 0x320
 8002722:	fb12 110c 	smlabb	r1, r2, ip, r1
	*addr = (uint8_t)value;
 8002726:	540b      	strb	r3, [r1, r0]
}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop

0800272c <_L8_getpixel>:
	if (x < 0) return 0x00000000;
 800272c:	b28b      	uxth	r3, r1
	if (y < 0) return 0x00000000;
 800272e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002732:	d203      	bcs.n	800273c <_L8_getpixel+0x10>
	if (y >= LCD_HEIGHT) return 0x00000000;
 8002734:	b293      	uxth	r3, r2
	if (y < 0) return 0x00000000;
 8002736:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800273a:	d301      	bcc.n	8002740 <_L8_getpixel+0x14>
 800273c:	2000      	movs	r0, #0
}
 800273e:	4770      	bx	lr
	uint8_t *addr = (uint8_t *)offset + ((x + y * LCD_WIDTH));
 8002740:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002744:	fb12 1103 	smlabb	r1, r2, r3, r1
	return *addr;
 8002748:	5c08      	ldrb	r0, [r1, r0]
 800274a:	4770      	bx	lr

0800274c <_RGB888_alpha>:
 800274c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002750:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop

08002758 <_ARGB8888_alpha>:
 8002758:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800275c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop

08002764 <_RGB888_color>:
 8002764:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002768:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <_AL88_color>:
static uint32_t _AL88_color(uint32_t color, uint8_t alpha) {
 8002770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t av_r = (c1_r + c2_r) >> 1;
 8002774:	f3c0 4a07 	ubfx	sl, r0, #16, #8
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 8002778:	f3c0 2807 	ubfx	r8, r0, #8, #8
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 800277c:	b2c6      	uxtb	r6, r0
 800277e:	2000      	movs	r0, #0
static uint32_t _AL88_color(uint32_t color, uint8_t alpha) {
 8002780:	b083      	sub	sp, #12
	int16_t	dr = (int16_t)c1_r - (int16_t)c2_r;
 8002782:	46d1      	mov	r9, sl
 8002784:	4c1d      	ldr	r4, [pc, #116]	; (80027fc <_AL88_color+0x8c>)
	uint32_t min_dist = 0xffffffff;
 8002786:	f04f 35ff 	mov.w	r5, #4294967295
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 800278a:	f240 27ff 	movw	r7, #767	; 0x2ff
	uint32_t match_c = 0;
 800278e:	4683      	mov	fp, r0
static uint32_t _AL88_color(uint32_t color, uint8_t alpha) {
 8002790:	9101      	str	r1, [sp, #4]
		dist = _color_dist(color, C_LUT_COLOR[m]);
 8002792:	f854 1f04 	ldr.w	r1, [r4, #4]!
	int16_t av_r = (c1_r + c2_r) >> 1;
 8002796:	f3c1 4c07 	ubfx	ip, r1, #16, #8
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 800279a:	f3c1 2307 	ubfx	r3, r1, #8, #8
	int16_t db = (int16_t)c1_b - (int16_t)c2_b;
 800279e:	b2c9      	uxtb	r1, r1
	int16_t av_r = (c1_r + c2_r) >> 1;
 80027a0:	eb0c 020a 	add.w	r2, ip, sl
	int16_t dg = (int16_t)c1_g - (int16_t)c2_g;
 80027a4:	eba8 0303 	sub.w	r3, r8, r3
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 80027a8:	eba9 0c0c 	sub.w	ip, r9, ip
 80027ac:	1a71      	subs	r1, r6, r1
	int16_t av_r = (c1_r + c2_r) >> 1;
 80027ae:	1052      	asrs	r2, r2, #1
	return (((512 + av_r) * dr * dr) >> 8) + 4 * dg * dg + (((767 - av_r) * db * db) >> 8);
 80027b0:	fb03 f303 	mul.w	r3, r3, r3
 80027b4:	f502 7e00 	add.w	lr, r2, #512	; 0x200
 80027b8:	1aba      	subs	r2, r7, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fb0c fe0e 	mul.w	lr, ip, lr
 80027c0:	fb01 f202 	mul.w	r2, r1, r2
 80027c4:	fb0c fe0e 	mul.w	lr, ip, lr
 80027c8:	fb01 f202 	mul.w	r2, r1, r2
 80027cc:	eb03 232e 	add.w	r3, r3, lr, asr #8
 80027d0:	eb03 2322 	add.w	r3, r3, r2, asr #8
		if (dist < min_dist) {
 80027d4:	42ab      	cmp	r3, r5
 80027d6:	d201      	bcs.n	80027dc <_AL88_color+0x6c>
			match_c = m;
 80027d8:	4683      	mov	fp, r0
		if (dist < min_dist) {
 80027da:	461d      	mov	r5, r3
	for (uint16_t m=0; m<256; m++) {
 80027dc:	3001      	adds	r0, #1
 80027de:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80027e2:	d1d6      	bne.n	8002792 <_AL88_color+0x22>
	return (match_c) | ((uint32_t)alpha << 8) | (match_c << 16) | ((uint32_t)alpha << 24);
 80027e4:	9b01      	ldr	r3, [sp, #4]
 80027e6:	0618      	lsls	r0, r3, #24
 80027e8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80027ec:	ea40 000b 	orr.w	r0, r0, fp
}
 80027f0:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 80027f4:	b003      	add	sp, #12
 80027f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027fa:	bf00      	nop
 80027fc:	080150d8 	.word	0x080150d8

08002800 <_AL88_dma2dwait>:
 8002800:	4a02      	ldr	r2, [pc, #8]	; (800280c <_AL88_dma2dwait+0xc>)
 8002802:	6853      	ldr	r3, [r2, #4]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d0fc      	beq.n	8002802 <_AL88_dma2dwait+0x2>
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	2400026c 	.word	0x2400026c

08002810 <_L8_dma2dwait>:
 8002810:	4a02      	ldr	r2, [pc, #8]	; (800281c <_L8_dma2dwait+0xc>)
 8002812:	6853      	ldr	r3, [r2, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d0fc      	beq.n	8002812 <_L8_dma2dwait+0x2>
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	2400026c 	.word	0x2400026c

08002820 <_ARGB1555_dma2dwait>:
 8002820:	4a02      	ldr	r2, [pc, #8]	; (800282c <_ARGB1555_dma2dwait+0xc>)
 8002822:	6853      	ldr	r3, [r2, #4]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d0fc      	beq.n	8002822 <_ARGB1555_dma2dwait+0x2>
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	2400026c 	.word	0x2400026c

08002830 <_RGB888_dma2dwait>:
 8002830:	4a02      	ldr	r2, [pc, #8]	; (800283c <_RGB888_dma2dwait+0xc>)
 8002832:	6853      	ldr	r3, [r2, #4]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d0fc      	beq.n	8002832 <_RGB888_dma2dwait+0x2>
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	2400026c 	.word	0x2400026c

08002840 <_ARGB4444_dma2dwait>:
 8002840:	4a02      	ldr	r2, [pc, #8]	; (800284c <_ARGB4444_dma2dwait+0xc>)
 8002842:	6853      	ldr	r3, [r2, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d0fc      	beq.n	8002842 <_ARGB4444_dma2dwait+0x2>
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	2400026c 	.word	0x2400026c

08002850 <_AL88_getpixel>:
 8002850:	b28b      	uxth	r3, r1
 8002852:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002856:	d203      	bcs.n	8002860 <_AL88_getpixel+0x10>
 8002858:	b293      	uxth	r3, r2
 800285a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800285e:	d301      	bcc.n	8002864 <_AL88_getpixel+0x14>
 8002860:	2000      	movs	r0, #0
 8002862:	4770      	bx	lr
 8002864:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002868:	fb12 1103 	smlabb	r1, r2, r3, r1
 800286c:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop

08002874 <_ARGB4444_getpixel>:
 8002874:	b28b      	uxth	r3, r1
 8002876:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800287a:	d203      	bcs.n	8002884 <_ARGB4444_getpixel+0x10>
 800287c:	b293      	uxth	r3, r2
 800287e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002882:	d301      	bcc.n	8002888 <_ARGB4444_getpixel+0x14>
 8002884:	2000      	movs	r0, #0
 8002886:	4770      	bx	lr
 8002888:	f44f 7348 	mov.w	r3, #800	; 0x320
 800288c:	fb12 1103 	smlabb	r1, r2, r3, r1
 8002890:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop

08002898 <_AL88_updatepixel>:
 8002898:	fa1f fc81 	uxth.w	ip, r1
 800289c:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80028a0:	d204      	bcs.n	80028ac <_AL88_updatepixel+0x14>
 80028a2:	fa1f fc82 	uxth.w	ip, r2
 80028a6:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 80028aa:	d300      	bcc.n	80028ae <_AL88_updatepixel+0x16>
 80028ac:	4770      	bx	lr
 80028ae:	f44f 7c48 	mov.w	ip, #800	; 0x320
 80028b2:	fb12 110c 	smlabb	r1, r2, ip, r1
 80028b6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80028ba:	4770      	bx	lr

080028bc <_ARGB4444_updatepixel>:
 80028bc:	fa1f fc81 	uxth.w	ip, r1
 80028c0:	f5bc 7f48 	cmp.w	ip, #800	; 0x320
 80028c4:	d204      	bcs.n	80028d0 <_ARGB4444_updatepixel+0x14>
 80028c6:	fa1f fc82 	uxth.w	ip, r2
 80028ca:	f5bc 7ff0 	cmp.w	ip, #480	; 0x1e0
 80028ce:	d300      	bcc.n	80028d2 <_ARGB4444_updatepixel+0x16>
 80028d0:	4770      	bx	lr
 80028d2:	f44f 7c48 	mov.w	ip, #800	; 0x320
 80028d6:	fb12 110c 	smlabb	r1, r2, ip, r1
 80028da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80028de:	4770      	bx	lr

080028e0 <_AL88_copybufblend>:
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80028e0:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80028e2:	4d10      	ldr	r5, [pc, #64]	; (8002924 <_AL88_copybufblend+0x44>)
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80028e4:	460e      	mov	r6, r1
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 80028e6:	f44f 7148 	mov.w	r1, #800	; 0x320
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80028ea:	f8bd 7010 	ldrh.w	r7, [sp, #16]
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 80028ee:	fb01 2303 	mla	r3, r1, r3, r2
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80028f2:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 80028f6:	320a      	adds	r2, #10
 80028f8:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 80028fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	uint16_t *dest_addr = (uint16_t *)BSP_hlcd.layer.Frames[eframe] + (x_dest + y_dest * LCD_WIDTH);
 8002900:	eb01 0143 	add.w	r1, r1, r3, lsl #1
static void _AL88_copybufblend(uint32_t src_addr, uint16_t offsline_src, uint16_t x_dest, uint16_t y_dest, uint16_t offsline_dest, uint16_t width, uint16_t height, uint8_t alpha) {
 8002904:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 8002908:	686c      	ldr	r4, [r5, #4]
 800290a:	2c01      	cmp	r4, #1
 800290c:	d0fc      	beq.n	8002908 <_AL88_copybufblend+0x28>
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 800290e:	9005      	str	r0, [sp, #20]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002910:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8002912:	9604      	str	r6, [sp, #16]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 8002914:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8002916:	4804      	ldr	r0, [pc, #16]	; (8002928 <_AL88_copybufblend+0x48>)
 8002918:	e9cd 7106 	strd	r7, r1, [sp, #24]
 800291c:	2102      	movs	r1, #2
}
 800291e:	bcf0      	pop	{r4, r5, r6, r7}
	BSP_STM32_DMA2D_CopyBuf(DMA2D, DMA2D_RGB565, width, height, offsline_src, src_addr, offsline_dest, (uint32_t)dest_addr);
 8002920:	f004 baa0 	b.w	8006e64 <BSP_STM32_DMA2D_CopyBuf>
 8002924:	2400026c 	.word	0x2400026c
 8002928:	52001000 	.word	0x52001000

0800292c <_AL88_fillbufblend>:
static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800292c:	b570      	push	{r4, r5, r6, lr}
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800292e:	4c0f      	ldr	r4, [pc, #60]	; (800296c <_AL88_fillbufblend+0x40>)
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002930:	f44f 7548 	mov.w	r5, #800	; 0x320
static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002934:	b084      	sub	sp, #16
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002936:	fb05 0101 	mla	r1, r5, r1, r0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 800293a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 800293e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 8002942:	300a      	adds	r0, #10
 8002944:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
static void _AL88_fillbufblend(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t color) {
 8002948:	9809      	ldr	r0, [sp, #36]	; 0x24
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800294a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 800294e:	6861      	ldr	r1, [r4, #4]
 8002950:	2901      	cmp	r1, #1
 8002952:	d0fc      	beq.n	800294e <_AL88_fillbufblend+0x22>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 8002954:	2102      	movs	r1, #2
 8002956:	9600      	str	r6, [sp, #0]
 8002958:	e9cd 5001 	strd	r5, r0, [sp, #4]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 800295c:	2001      	movs	r0, #1
 800295e:	6060      	str	r0, [r4, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <_AL88_fillbufblend+0x44>)
 8002962:	f004 f9d3 	bl	8006d0c <BSP_STM32_DMA2D_FillBuff>
}
 8002966:	b004      	add	sp, #16
 8002968:	bd70      	pop	{r4, r5, r6, pc}
 800296a:	bf00      	nop
 800296c:	2400026c 	.word	0x2400026c
 8002970:	52001000 	.word	0x52001000

08002974 <_AL88_copybufJPEG>:
static void _AL88_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 8002974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002978:	4604      	mov	r4, r0
 800297a:	b086      	sub	sp, #24
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 800297c:	4817      	ldr	r0, [pc, #92]	; (80029dc <_AL88_copybufJPEG+0x68>)
static void _AL88_copybufJPEG(uint16_t x_dest, uint16_t y_dest) {
 800297e:	4688      	mov	r8, r1
	uint32_t width = BSP_STM32_JPEG_GetWidth(JPEG);
 8002980:	f005 f804 	bl	800798c <BSP_STM32_JPEG_GetWidth>
 8002984:	4606      	mov	r6, r0
	uint32_t height = BSP_STM32_JPEG_GetHeight(JPEG);
 8002986:	4815      	ldr	r0, [pc, #84]	; (80029dc <_AL88_copybufJPEG+0x68>)
 8002988:	f005 f806 	bl	8007998 <BSP_STM32_JPEG_GetHeight>
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <_AL88_copybufJPEG+0x6c>)
 800298e:	b283      	uxth	r3, r0
 8002990:	21ff      	movs	r1, #255	; 0xff
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	2000      	movs	r0, #0
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8002996:	4d13      	ldr	r5, [pc, #76]	; (80029e4 <_AL88_copybufJPEG+0x70>)
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 8002998:	b2b6      	uxth	r6, r6
 800299a:	9305      	str	r3, [sp, #20]
 800299c:	4790      	blx	r2
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 800299e:	f44f 7248 	mov.w	r2, #800	; 0x320
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 80029a2:	f5c6 7748 	rsb	r7, r6, #800	; 0x320
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80029a6:	9b05      	ldr	r3, [sp, #20]
 80029a8:	fb02 4108 	mla	r1, r2, r8, r4
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 80029ac:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
	_AL88_fillbuf(x_dest, y_dest, width, height, LCD_WIDTH - width, BSP_LCD_Color(C_BLACK, 255));
 80029b0:	b2bf      	uxth	r7, r7
	uint32_t dest_addr = BSP_hlcd.layer.Frames[eframe] + ((x + y * LCD_WIDTH) << 1);
 80029b2:	320a      	adds	r2, #10
 80029b4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80029b8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	while (BSP_hlcd.priv.dma2d_state == LCD_DMA2D_BUSY) {};
 80029bc:	686c      	ldr	r4, [r5, #4]
 80029be:	2c01      	cmp	r4, #1
 80029c0:	d0fc      	beq.n	80029bc <_AL88_copybufJPEG+0x48>
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 80029c2:	9002      	str	r0, [sp, #8]
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80029c4:	2001      	movs	r0, #1
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 80029c6:	9101      	str	r1, [sp, #4]
 80029c8:	4632      	mov	r2, r6
 80029ca:	2102      	movs	r1, #2
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_BUSY;
 80029cc:	6068      	str	r0, [r5, #4]
	BSP_STM32_DMA2D_FillBuff(DMA2D, DMA2D_RGB565, width, height, offsetline, dest_addr, color);
 80029ce:	9700      	str	r7, [sp, #0]
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <_AL88_copybufJPEG+0x74>)
 80029d2:	f004 f99b 	bl	8006d0c <BSP_STM32_DMA2D_FillBuff>
}
 80029d6:	b006      	add	sp, #24
 80029d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029dc:	52003000 	.word	0x52003000
 80029e0:	24000244 	.word	0x24000244
 80029e4:	2400026c 	.word	0x2400026c
 80029e8:	52001000 	.word	0x52001000

080029ec <BSP_LCD_Init>:
/******************************************************************************
 * Public functions
 ******************************************************************************/


void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 80029ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// CLUT parameter is ignored in ARGB and RGB modes

	// Setting up config variables
	BSP_hlcd.frametime = 0;
 80029f0:	4cad      	ldr	r4, [pc, #692]	; (8002ca8 <BSP_LCD_Init+0x2bc>)
void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 80029f2:	461f      	mov	r7, r3
	BSP_hlcd.frametime = 0;
 80029f4:	2300      	movs	r3, #0
void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 80029f6:	b08f      	sub	sp, #60	; 0x3c
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_READY;
	BSP_hlcd.priv.l_timestamp = 0;
	BSP_hlcd.config.colormode = color_mode;
 80029f8:	7720      	strb	r0, [r4, #28]
	BSP_hlcd.config.buffermode = buffer_mode;
	BSP_hlcd.config.bgcolor = bgcolor;
	BSP_hlcd.config.framesize = LCD_WIDTH * LCD_HEIGHT;

	// Configuring color mode
	switch (BSP_hlcd.config.colormode) {
 80029fa:	3801      	subs	r0, #1
	BSP_hlcd.priv.dma2d_state = LCD_DMA2D_READY;
 80029fc:	6063      	str	r3, [r4, #4]
void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 80029fe:	460d      	mov	r5, r1
	BSP_hlcd.frametime = 0;
 8002a00:	63e3      	str	r3, [r4, #60]	; 0x3c
void BSP_LCD_Init(uint8_t color_mode, uint8_t buffer_mode, uint32_t bgcolor, uint32_t *clut) {
 8002a02:	4616      	mov	r6, r2
	BSP_hlcd.priv.l_timestamp = 0;
 8002a04:	6023      	str	r3, [r4, #0]
	BSP_hlcd.config.framesize = LCD_WIDTH * LCD_HEIGHT;
 8002a06:	4ba9      	ldr	r3, [pc, #676]	; (8002cac <BSP_LCD_Init+0x2c0>)
	BSP_hlcd.config.buffermode = buffer_mode;
 8002a08:	7761      	strb	r1, [r4, #29]
	BSP_hlcd.config.bgcolor = bgcolor;
 8002a0a:	6222      	str	r2, [r4, #32]
	BSP_hlcd.config.framesize = LCD_WIDTH * LCD_HEIGHT;
 8002a0c:	6163      	str	r3, [r4, #20]
	switch (BSP_hlcd.config.colormode) {
 8002a0e:	2805      	cmp	r0, #5
 8002a10:	f200 827d 	bhi.w	8002f0e <BSP_LCD_Init+0x522>
 8002a14:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002a18:	01aa00b5 	.word	0x01aa00b5
 8002a1c:	021201de 	.word	0x021201de
 8002a20:	0006023b 	.word	0x0006023b
	BSP_hlcd.config.bytesperpixel = 4;
 8002a24:	2304      	movs	r3, #4
	BSP_hlcd.config.framesize *=4;
 8002a26:	4aa2      	ldr	r2, [pc, #648]	; (8002cb0 <BSP_LCD_Init+0x2c4>)
}
 8002a28:	f8df b320 	ldr.w	fp, [pc, #800]	; 8002d4c <BSP_LCD_Init+0x360>
	BSP_hlcd.config.bytesperpixel = 4;
 8002a2c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=4;
 8002a30:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _ARGB8888_color;
 8002a32:	4ba0      	ldr	r3, [pc, #640]	; (8002cb4 <BSP_LCD_Init+0x2c8>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002a34:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _ARGB8888_color;
 8002a38:	499f      	ldr	r1, [pc, #636]	; (8002cb8 <BSP_LCD_Init+0x2cc>)
}
 8002a3a:	f8df a314 	ldr.w	sl, [pc, #788]	; 8002d50 <BSP_LCD_Init+0x364>
	BSP_LCD_Color = _ARGB8888_color;
 8002a3e:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _ARGB8888_alpha;
 8002a40:	4b9e      	ldr	r3, [pc, #632]	; (8002cbc <BSP_LCD_Init+0x2d0>)
 8002a42:	499f      	ldr	r1, [pc, #636]	; (8002cc0 <BSP_LCD_Init+0x2d4>)
}
 8002a44:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8002d54 <BSP_LCD_Init+0x368>
	BSP_LCD_Alpha = _ARGB8888_alpha;
 8002a48:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB8888_dma2dwait;
 8002a4a:	4b9e      	ldr	r3, [pc, #632]	; (8002cc4 <BSP_LCD_Init+0x2d8>)
 8002a4c:	499e      	ldr	r1, [pc, #632]	; (8002cc8 <BSP_LCD_Init+0x2dc>)
}
 8002a4e:	f8df 9308 	ldr.w	r9, [pc, #776]	; 8002d58 <BSP_LCD_Init+0x36c>
	BSP_LCD_DMA2D_Wait = _ARGB8888_dma2dwait;
 8002a52:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB8888_updatepixel;
 8002a54:	4b9d      	ldr	r3, [pc, #628]	; (8002ccc <BSP_LCD_Init+0x2e0>)
 8002a56:	499e      	ldr	r1, [pc, #632]	; (8002cd0 <BSP_LCD_Init+0x2e4>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002a58:	61a2      	str	r2, [r4, #24]
	BSP_LCD_UpdatePixel = _ARGB8888_updatepixel;
 8002a5a:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB8888_updatepixelblend;
 8002a5c:	4b9d      	ldr	r3, [pc, #628]	; (8002cd4 <BSP_LCD_Init+0x2e8>)
 8002a5e:	499e      	ldr	r1, [pc, #632]	; (8002cd8 <BSP_LCD_Init+0x2ec>)
 8002a60:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _ARGB8888_getpixel;
 8002a62:	4b9e      	ldr	r3, [pc, #632]	; (8002cdc <BSP_LCD_Init+0x2f0>)
 8002a64:	499e      	ldr	r1, [pc, #632]	; (8002ce0 <BSP_LCD_Init+0x2f4>)
 8002a66:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _ARGB8888_fillbuf;
 8002a68:	4b9e      	ldr	r3, [pc, #632]	; (8002ce4 <BSP_LCD_Init+0x2f8>)
 8002a6a:	499f      	ldr	r1, [pc, #636]	; (8002ce8 <BSP_LCD_Init+0x2fc>)
 8002a6c:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB8888_fillbufblend;
 8002a6e:	4b9f      	ldr	r3, [pc, #636]	; (8002cec <BSP_LCD_Init+0x300>)
 8002a70:	499f      	ldr	r1, [pc, #636]	; (8002cf0 <BSP_LCD_Init+0x304>)
 8002a72:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB8888_copybuf;
 8002a74:	4b9f      	ldr	r3, [pc, #636]	; (8002cf4 <BSP_LCD_Init+0x308>)
 8002a76:	49a0      	ldr	r1, [pc, #640]	; (8002cf8 <BSP_LCD_Init+0x30c>)
 8002a78:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB8888_copybufblend;
 8002a7a:	4ba0      	ldr	r3, [pc, #640]	; (8002cfc <BSP_LCD_Init+0x310>)
 8002a7c:	49a0      	ldr	r1, [pc, #640]	; (8002d00 <BSP_LCD_Init+0x314>)
 8002a7e:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB8888_copybufJPEG;
 8002a80:	4ba0      	ldr	r3, [pc, #640]	; (8002d04 <BSP_LCD_Init+0x318>)
 8002a82:	49a1      	ldr	r1, [pc, #644]	; (8002d08 <BSP_LCD_Init+0x31c>)
 8002a84:	6019      	str	r1, [r3, #0]
}
 8002a86:	4ba1      	ldr	r3, [pc, #644]	; (8002d0c <BSP_LCD_Init+0x320>)
 8002a88:	930d      	str	r3, [sp, #52]	; 0x34
		_L8_config();
		break;
	}

	// Clearing memory for frame buffer
	memset((void *)(LCD_FRAMEBUFFER_END_ADDR - BSP_hlcd.config.framebuffersize - LCD_JPEGBUF_SIZE),0x00, (BSP_hlcd.config.framebuffersize + LCD_JPEGBUF_SIZE));
 8002a8a:	48a1      	ldr	r0, [pc, #644]	; (8002d10 <BSP_LCD_Init+0x324>)
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	1a80      	subs	r0, r0, r2
 8002a90:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8002a94:	f00f fbe1 	bl	801225a <memset>

	// Configuring frame buffer parameters
	switch (BSP_hlcd.config.buffermode) {
 8002a98:	2d02      	cmp	r5, #2
 8002a9a:	f000 8221 	beq.w	8002ee0 <BSP_LCD_Init+0x4f4>
 8002a9e:	2d03      	cmp	r5, #3
 8002aa0:	d117      	bne.n	8002ad2 <BSP_LCD_Init+0xe6>
	BSP_hlcd.layer.Frame_IDLE = 2;
 8002aa2:	2102      	movs	r1, #2
	BSP_hlcd.layer.Frame_READY = 255;
 8002aa4:	22ff      	movs	r2, #255	; 0xff
	BSP_hlcd.layer.Frame_ACTIVE = 0;
 8002aa6:	2300      	movs	r3, #0
	BSP_hlcd.JPEGbuf = LCD_FRAMEBUFFER_END_ADDR - (3 * BSP_hlcd.config.framesize) - LCD_JPEGBUF_SIZE;
 8002aa8:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
	BSP_hlcd.layer.Frame_IDLE = 2;
 8002aac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	BSP_hlcd.layer.Frame_EDIT = 1;
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
	BSP_hlcd.layer.Frame_READY = 255;
 8002ab6:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	BSP_hlcd.layer.Frame_ACTIVE = 0;
 8002aba:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	BSP_hlcd.layer.Frame_NOUSE = 255;
 8002abe:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	BSP_hlcd.layer.Frame_PREV = 0;
 8002ac2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	BSP_hlcd.layer.Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 1 * BSP_hlcd.config.framesize;
 8002ac6:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	BSP_hlcd.layer.Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 2 * BSP_hlcd.config.framesize;
 8002aca:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
	BSP_hlcd.layer.Frames[2] = LCD_FRAMEBUFFER_END_ADDR - 3 * BSP_hlcd.config.framesize;
 8002ace:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
		_config_doublebuf();
		break;
	}

	// Configuring LTDC controller
	BSP_STM32_LTDC_Init(LTDC, LCD_H_SYNC, LCD_V_SYNC, LCD_ACC_H_BACK_PORCH_WIDTH, LCD_ACC_V_BACK_PORCH_HEIGHT,
 8002ad2:	f240 2343 	movw	r3, #579	; 0x243
 8002ad6:	f240 325d 	movw	r2, #861	; 0x35d
 8002ada:	f240 314d 	movw	r1, #845	; 0x34d
 8002ade:	488d      	ldr	r0, [pc, #564]	; (8002d14 <BSP_LCD_Init+0x328>)
 8002ae0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8002ae4:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8002ae8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002aec:	2216      	movs	r2, #22
 8002aee:	232d      	movs	r3, #45	; 0x2d
 8002af0:	e9cd 2100 	strd	r2, r1, [sp]
 8002af4:	2202      	movs	r2, #2
 8002af6:	2119      	movs	r1, #25
 8002af8:	f004 ff60 	bl	80079bc <BSP_STM32_LTDC_Init>
			LCD_ACC_ACTIVE_WIDTH, LCD_ACC_ACTIVE_HEIGHT, LCD_TOTAL_WIDTH, LCD_TOTAL_HEIGHT, bgcolor);

	// Configuring JPEG hardware codec
	BSP_STM32_JPEG_Init(JPEG);
 8002afc:	4886      	ldr	r0, [pc, #536]	; (8002d18 <BSP_LCD_Init+0x32c>)
 8002afe:	f004 fe55 	bl	80077ac <BSP_STM32_JPEG_Init>

	// Disabling both layers
	BSP_STM32_LTDC_DisableLayer(LTDC, 0);
 8002b02:	2100      	movs	r1, #0
 8002b04:	4883      	ldr	r0, [pc, #524]	; (8002d14 <BSP_LCD_Init+0x328>)
 8002b06:	f004 ffa9 	bl	8007a5c <BSP_STM32_LTDC_DisableLayer>

	// Configuring LTDC Layers
	switch (BSP_hlcd.config.colormode) {
 8002b0a:	7f23      	ldrb	r3, [r4, #28]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d81d      	bhi.n	8002b4e <BSP_LCD_Init+0x162>
 8002b12:	e8df f003 	tbb	[pc, r3]
 8002b16:	92b2      	.short	0x92b2
 8002b18:	03286971 	.word	0x03286971
			BSP_hlcd.layer.Frames[0],
 8002b1c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b24:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002b28:	2407      	movs	r4, #7
 8002b2a:	9306      	str	r3, [sp, #24]
 8002b2c:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8002b30:	e9cd 3107 	strd	r3, r1, [sp, #28]
	BSP_STM32_LTDC_ConfigLayer(
 8002b34:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002b38:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8002b3c:	e9cd 3000 	strd	r3, r0, [sp]
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	4619      	mov	r1, r3
 8002b44:	4873      	ldr	r0, [pc, #460]	; (8002d14 <BSP_LCD_Init+0x328>)
 8002b46:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002b4a:	f004 ffb5 	bl	8007ab8 <BSP_STM32_LTDC_ConfigLayer>
		_L8_config_layer(clut);
		break;
	}

	// Enabling required layers
	BSP_STM32_LTDC_EnableLayer(LTDC, 0);
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4870      	ldr	r0, [pc, #448]	; (8002d14 <BSP_LCD_Init+0x328>)
 8002b52:	f004 ff9b 	bl	8007a8c <BSP_STM32_LTDC_EnableLayer>

	// Programming LTDC line interrupt
	BSP_STM32_LTDC_SetLineInt(LTDC, (uint32_t)LCD_HEIGHT);
 8002b56:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002b5a:	486e      	ldr	r0, [pc, #440]	; (8002d14 <BSP_LCD_Init+0x328>)
}
 8002b5c:	b00f      	add	sp, #60	; 0x3c
 8002b5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BSP_STM32_LTDC_SetLineInt(LTDC, (uint32_t)LCD_HEIGHT);
 8002b62:	f005 b86d 	b.w	8007c40 <BSP_STM32_LTDC_SetLineInt>
	BSP_STM32_LTDC_ConfigLayer(
 8002b66:	2300      	movs	r3, #0
 8002b68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b6c:	f44f 7148 	mov.w	r1, #800	; 0x320
			BSP_hlcd.layer.Frames[0],
 8002b70:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002b72:	2004      	movs	r0, #4
	BSP_STM32_LTDC_ConfigLayer(
 8002b74:	2407      	movs	r4, #7
 8002b76:	9006      	str	r0, [sp, #24]
 8002b78:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8002b7c:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8002b80:	e7d8      	b.n	8002b34 <BSP_LCD_Init+0x148>
	BSP_hlcd.config.bytesperpixel = 1;
 8002b82:	2301      	movs	r3, #1
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002b84:	4a49      	ldr	r2, [pc, #292]	; (8002cac <BSP_LCD_Init+0x2c0>)
	BSP_hlcd.config.bytesperpixel = 1;
 8002b86:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002b8a:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _L8_color;
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <BSP_LCD_Init+0x2c8>)
 8002b90:	4962      	ldr	r1, [pc, #392]	; (8002d1c <BSP_LCD_Init+0x330>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002b92:	61a2      	str	r2, [r4, #24]
	BSP_LCD_Color = _L8_color;
 8002b94:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _L8_alpha;
 8002b96:	4b49      	ldr	r3, [pc, #292]	; (8002cbc <BSP_LCD_Init+0x2d0>)
 8002b98:	4961      	ldr	r1, [pc, #388]	; (8002d20 <BSP_LCD_Init+0x334>)
 8002b9a:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _L8_dma2dwait;
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <BSP_LCD_Init+0x2d8>)
 8002b9e:	4961      	ldr	r1, [pc, #388]	; (8002d24 <BSP_LCD_Init+0x338>)
 8002ba0:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _L8_updatepixel;
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	; (8002ccc <BSP_LCD_Init+0x2e0>)
 8002ba4:	4960      	ldr	r1, [pc, #384]	; (8002d28 <BSP_LCD_Init+0x33c>)
 8002ba6:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _L8_updatepixelblend;
 8002ba8:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <BSP_LCD_Init+0x2e8>)
 8002baa:	4960      	ldr	r1, [pc, #384]	; (8002d2c <BSP_LCD_Init+0x340>)
 8002bac:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _L8_getpixel;
 8002bae:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <BSP_LCD_Init+0x2f0>)
 8002bb0:	495f      	ldr	r1, [pc, #380]	; (8002d30 <BSP_LCD_Init+0x344>)
 8002bb2:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _L8_fillbuf;
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <BSP_LCD_Init+0x2f8>)
 8002bb6:	495f      	ldr	r1, [pc, #380]	; (8002d34 <BSP_LCD_Init+0x348>)
 8002bb8:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _L8_fillbufblend;
 8002bba:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <BSP_LCD_Init+0x300>)
 8002bbc:	495e      	ldr	r1, [pc, #376]	; (8002d38 <BSP_LCD_Init+0x34c>)
 8002bbe:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _L8_copybuf;
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <BSP_LCD_Init+0x308>)
 8002bc2:	495e      	ldr	r1, [pc, #376]	; (8002d3c <BSP_LCD_Init+0x350>)
 8002bc4:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _L8_copybufblend;
 8002bc6:	4b4d      	ldr	r3, [pc, #308]	; (8002cfc <BSP_LCD_Init+0x310>)
 8002bc8:	495d      	ldr	r1, [pc, #372]	; (8002d40 <BSP_LCD_Init+0x354>)
 8002bca:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _L8_copybufJPEG;
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <BSP_LCD_Init+0x318>)
 8002bce:	495d      	ldr	r1, [pc, #372]	; (8002d44 <BSP_LCD_Init+0x358>)
 8002bd0:	6019      	str	r1, [r3, #0]
}
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <BSP_LCD_Init+0x35c>)
 8002bd4:	f8df b184 	ldr.w	fp, [pc, #388]	; 8002d5c <BSP_LCD_Init+0x370>
 8002bd8:	f8df a184 	ldr.w	sl, [pc, #388]	; 8002d60 <BSP_LCD_Init+0x374>
 8002bdc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8002d64 <BSP_LCD_Init+0x378>
 8002be0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8002d68 <BSP_LCD_Init+0x37c>
 8002be4:	930d      	str	r3, [sp, #52]	; 0x34
 8002be6:	e750      	b.n	8002a8a <BSP_LCD_Init+0x9e>
	BSP_STM32_LTDC_ConfigLayer(
 8002be8:	2300      	movs	r3, #0
 8002bea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002bee:	f44f 7148 	mov.w	r1, #800	; 0x320
			BSP_hlcd.layer.Frames[0],
 8002bf2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	e7bd      	b.n	8002b74 <BSP_LCD_Init+0x188>
	BSP_STM32_LTDC_ConfigLayer(
 8002bf8:	2500      	movs	r5, #0
 8002bfa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002bfe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002c02:	2101      	movs	r1, #1
			BSP_hlcd.layer.Frames[0],
 8002c04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002c06:	9106      	str	r1, [sp, #24]
 8002c08:	2105      	movs	r1, #5
 8002c0a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8002c0e:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8002c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c16:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8002c1a:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 8002c1e:	4629      	mov	r1, r5
 8002c20:	462b      	mov	r3, r5
 8002c22:	483c      	ldr	r0, [pc, #240]	; (8002d14 <BSP_LCD_Init+0x328>)
 8002c24:	e9cd 5200 	strd	r5, r2, [sp]
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	f004 ff45 	bl	8007ab8 <BSP_STM32_LTDC_ConfigLayer>
	BSP_STM32_LTDC_SetTransparentColor(LTDC, 0, 0x00000000);
 8002c2e:	462a      	mov	r2, r5
 8002c30:	4629      	mov	r1, r5
 8002c32:	4838      	ldr	r0, [pc, #224]	; (8002d14 <BSP_LCD_Init+0x328>)
 8002c34:	f004 fff0 	bl	8007c18 <BSP_STM32_LTDC_SetTransparentColor>
}
 8002c38:	e789      	b.n	8002b4e <BSP_LCD_Init+0x162>
			BSP_hlcd.layer.Frames[0],
 8002c3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002c3c:	2500      	movs	r5, #0
 8002c3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c42:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c46:	9303      	str	r3, [sp, #12]
 8002c48:	2307      	movs	r3, #7
 8002c4a:	9204      	str	r2, [sp, #16]
 8002c4c:	9302      	str	r3, [sp, #8]
 8002c4e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8002c52:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 8002c56:	e9cd 5107 	strd	r5, r1, [sp, #28]
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c60:	22ff      	movs	r2, #255	; 0xff
 8002c62:	e9cd 5100 	strd	r5, r1, [sp]
	BSP_STM32_LTDC_ConfigLayer(
 8002c66:	4629      	mov	r1, r5
 8002c68:	482a      	ldr	r0, [pc, #168]	; (8002d14 <BSP_LCD_Init+0x328>)
 8002c6a:	f004 ff25 	bl	8007ab8 <BSP_STM32_LTDC_ConfigLayer>
	BSP_STM32_LTDC_ConfigCLUT(LTDC, 0, clut);
 8002c6e:	463a      	mov	r2, r7
 8002c70:	4629      	mov	r1, r5
 8002c72:	4828      	ldr	r0, [pc, #160]	; (8002d14 <BSP_LCD_Init+0x328>)
 8002c74:	f004 ffa2 	bl	8007bbc <BSP_STM32_LTDC_ConfigCLUT>
}
 8002c78:	e769      	b.n	8002b4e <BSP_LCD_Init+0x162>
			BSP_hlcd.layer.Frames[0],
 8002c7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	BSP_STM32_LTDC_ConfigLayer(
 8002c7c:	2500      	movs	r5, #0
 8002c7e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c86:	9303      	str	r3, [sp, #12]
 8002c88:	2305      	movs	r3, #5
 8002c8a:	9204      	str	r2, [sp, #16]
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8002c92:	e9cd 5107 	strd	r5, r1, [sp, #28]
 8002c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c9a:	462b      	mov	r3, r5
 8002c9c:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 8002ca0:	e9cd 5100 	strd	r5, r1, [sp]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	e7de      	b.n	8002c66 <BSP_LCD_Init+0x27a>
 8002ca8:	2400026c 	.word	0x2400026c
 8002cac:	0005dc00 	.word	0x0005dc00
 8002cb0:	00177000 	.word	0x00177000
 8002cb4:	24000244 	.word	0x24000244
 8002cb8:	08001769 	.word	0x08001769
 8002cbc:	24000240 	.word	0x24000240
 8002cc0:	08002759 	.word	0x08002759
 8002cc4:	24000254 	.word	0x24000254
 8002cc8:	08001775 	.word	0x08001775
 8002ccc:	24000264 	.word	0x24000264
 8002cd0:	0800244d 	.word	0x0800244d
 8002cd4:	24000268 	.word	0x24000268
 8002cd8:	08002471 	.word	0x08002471
 8002cdc:	24000260 	.word	0x24000260
 8002ce0:	080024f1 	.word	0x080024f1
 8002ce4:	24000258 	.word	0x24000258
 8002ce8:	08002195 	.word	0x08002195
 8002cec:	2400025c 	.word	0x2400025c
 8002cf0:	0800205d 	.word	0x0800205d
 8002cf4:	24000248 	.word	0x24000248
 8002cf8:	08001da9 	.word	0x08001da9
 8002cfc:	2400024c 	.word	0x2400024c
 8002d00:	08001c4d 	.word	0x08001c4d
 8002d04:	24000250 	.word	0x24000250
 8002d08:	080018bd 	.word	0x080018bd
 8002d0c:	c3b12000 	.word	0xc3b12000
 8002d10:	c3e00000 	.word	0xc3e00000
 8002d14:	50001000 	.word	0x50001000
 8002d18:	52003000 	.word	0x52003000
 8002d1c:	0800182d 	.word	0x0800182d
 8002d20:	080018b9 	.word	0x080018b9
 8002d24:	08002811 	.word	0x08002811
 8002d28:	080026e1 	.word	0x080026e1
 8002d2c:	08002705 	.word	0x08002705
 8002d30:	0800272d 	.word	0x0800272d
 8002d34:	080022fd 	.word	0x080022fd
 8002d38:	0800243d 	.word	0x0800243d
 8002d3c:	08001f39 	.word	0x08001f39
 8002d40:	08002041 	.word	0x08002041
 8002d44:	080023f1 	.word	0x080023f1
 8002d48:	c3d44800 	.word	0xc3d44800
 8002d4c:	c399b000 	.word	0xc399b000
 8002d50:	c3b9b000 	.word	0xc3b9b000
 8002d54:	c3d12000 	.word	0xc3d12000
 8002d58:	c3e89000 	.word	0xc3e89000
 8002d5c:	c3ce6c00 	.word	0xc3ce6c00
 8002d60:	c3ee6c00 	.word	0xc3ee6c00
 8002d64:	c3f44800 	.word	0xc3f44800
 8002d68:	c3fa2400 	.word	0xc3fa2400
	BSP_hlcd.config.bytesperpixel = 2;
 8002d6c:	2302      	movs	r3, #2
	BSP_hlcd.config.framesize *=2;
 8002d6e:	4a69      	ldr	r2, [pc, #420]	; (8002f14 <BSP_LCD_Init+0x528>)
	BSP_hlcd.config.bytesperpixel = 2;
 8002d70:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=2;
 8002d74:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _AL88_color;
 8002d76:	4b68      	ldr	r3, [pc, #416]	; (8002f18 <BSP_LCD_Init+0x52c>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002d78:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _AL88_color;
 8002d7c:	4967      	ldr	r1, [pc, #412]	; (8002f1c <BSP_LCD_Init+0x530>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002d7e:	61a2      	str	r2, [r4, #24]
	BSP_LCD_Color = _AL88_color;
 8002d80:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _AL88_alpha;
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <BSP_LCD_Init+0x534>)
 8002d84:	4967      	ldr	r1, [pc, #412]	; (8002f24 <BSP_LCD_Init+0x538>)
 8002d86:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _AL88_dma2dwait;
 8002d88:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <BSP_LCD_Init+0x53c>)
 8002d8a:	4968      	ldr	r1, [pc, #416]	; (8002f2c <BSP_LCD_Init+0x540>)
 8002d8c:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _AL88_updatepixel;
 8002d8e:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <BSP_LCD_Init+0x544>)
 8002d90:	4968      	ldr	r1, [pc, #416]	; (8002f34 <BSP_LCD_Init+0x548>)
 8002d92:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _AL88_updatepixelblend;
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <BSP_LCD_Init+0x54c>)
 8002d96:	4969      	ldr	r1, [pc, #420]	; (8002f3c <BSP_LCD_Init+0x550>)
 8002d98:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _AL88_getpixel;
 8002d9a:	4b69      	ldr	r3, [pc, #420]	; (8002f40 <BSP_LCD_Init+0x554>)
 8002d9c:	4969      	ldr	r1, [pc, #420]	; (8002f44 <BSP_LCD_Init+0x558>)
 8002d9e:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _AL88_fillbuf;
 8002da0:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <BSP_LCD_Init+0x55c>)
 8002da2:	496a      	ldr	r1, [pc, #424]	; (8002f4c <BSP_LCD_Init+0x560>)
 8002da4:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _AL88_fillbufblend;
 8002da6:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <BSP_LCD_Init+0x564>)
 8002da8:	496a      	ldr	r1, [pc, #424]	; (8002f54 <BSP_LCD_Init+0x568>)
 8002daa:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _AL88_copybuf;
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <BSP_LCD_Init+0x56c>)
 8002dae:	496b      	ldr	r1, [pc, #428]	; (8002f5c <BSP_LCD_Init+0x570>)
 8002db0:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _AL88_copybufblend;
 8002db2:	4b6b      	ldr	r3, [pc, #428]	; (8002f60 <BSP_LCD_Init+0x574>)
 8002db4:	496b      	ldr	r1, [pc, #428]	; (8002f64 <BSP_LCD_Init+0x578>)
 8002db6:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _AL88_copybufJPEG;
 8002db8:	4b6b      	ldr	r3, [pc, #428]	; (8002f68 <BSP_LCD_Init+0x57c>)
 8002dba:	496c      	ldr	r1, [pc, #432]	; (8002f6c <BSP_LCD_Init+0x580>)
 8002dbc:	6019      	str	r1, [r3, #0]
}
 8002dbe:	4b6c      	ldr	r3, [pc, #432]	; (8002f70 <BSP_LCD_Init+0x584>)
 8002dc0:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 8002fa4 <BSP_LCD_Init+0x5b8>
 8002dc4:	f8df a238 	ldr.w	sl, [pc, #568]	; 8003000 <BSP_LCD_Init+0x614>
 8002dc8:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8003004 <BSP_LCD_Init+0x618>
 8002dcc:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8003008 <BSP_LCD_Init+0x61c>
 8002dd0:	930d      	str	r3, [sp, #52]	; 0x34
 8002dd2:	e65a      	b.n	8002a8a <BSP_LCD_Init+0x9e>
	BSP_hlcd.config.bytesperpixel = 3;
 8002dd4:	2303      	movs	r3, #3
	BSP_hlcd.config.framesize *=3;
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <BSP_LCD_Init+0x588>)
}
 8002dd8:	f8df b230 	ldr.w	fp, [pc, #560]	; 800300c <BSP_LCD_Init+0x620>
	BSP_hlcd.config.bytesperpixel = 3;
 8002ddc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=3;
 8002de0:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _RGB888_color;
 8002de2:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <BSP_LCD_Init+0x52c>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002de4:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _RGB888_color;
 8002de8:	4963      	ldr	r1, [pc, #396]	; (8002f78 <BSP_LCD_Init+0x58c>)
}
 8002dea:	f8df a224 	ldr.w	sl, [pc, #548]	; 8003010 <BSP_LCD_Init+0x624>
	BSP_LCD_Color = _RGB888_color;
 8002dee:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _RGB888_alpha;
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <BSP_LCD_Init+0x534>)
 8002df2:	4962      	ldr	r1, [pc, #392]	; (8002f7c <BSP_LCD_Init+0x590>)
}
 8002df4:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8003000 <BSP_LCD_Init+0x614>
	BSP_LCD_Alpha = _RGB888_alpha;
 8002df8:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _RGB888_dma2dwait;
 8002dfa:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <BSP_LCD_Init+0x53c>)
 8002dfc:	4960      	ldr	r1, [pc, #384]	; (8002f80 <BSP_LCD_Init+0x594>)
}
 8002dfe:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8003014 <BSP_LCD_Init+0x628>
	BSP_LCD_DMA2D_Wait = _RGB888_dma2dwait;
 8002e02:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _RGB888_updatepixel;
 8002e04:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <BSP_LCD_Init+0x544>)
 8002e06:	495f      	ldr	r1, [pc, #380]	; (8002f84 <BSP_LCD_Init+0x598>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002e08:	61a2      	str	r2, [r4, #24]
	BSP_LCD_UpdatePixel = _RGB888_updatepixel;
 8002e0a:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _RGB888_updatepixelblend;
 8002e0c:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <BSP_LCD_Init+0x54c>)
 8002e0e:	495e      	ldr	r1, [pc, #376]	; (8002f88 <BSP_LCD_Init+0x59c>)
 8002e10:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _RGB888_getpixel;
 8002e12:	4b4b      	ldr	r3, [pc, #300]	; (8002f40 <BSP_LCD_Init+0x554>)
 8002e14:	495d      	ldr	r1, [pc, #372]	; (8002f8c <BSP_LCD_Init+0x5a0>)
 8002e16:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _RGB888_fillbuf;
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <BSP_LCD_Init+0x55c>)
 8002e1a:	495d      	ldr	r1, [pc, #372]	; (8002f90 <BSP_LCD_Init+0x5a4>)
 8002e1c:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _RGB888_fillbufblend;
 8002e1e:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <BSP_LCD_Init+0x564>)
 8002e20:	495c      	ldr	r1, [pc, #368]	; (8002f94 <BSP_LCD_Init+0x5a8>)
 8002e22:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _RGB888_copybuf;
 8002e24:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <BSP_LCD_Init+0x56c>)
 8002e26:	495c      	ldr	r1, [pc, #368]	; (8002f98 <BSP_LCD_Init+0x5ac>)
 8002e28:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _RGB888_copybufblend;
 8002e2a:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <BSP_LCD_Init+0x574>)
 8002e2c:	495b      	ldr	r1, [pc, #364]	; (8002f9c <BSP_LCD_Init+0x5b0>)
 8002e2e:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _RGB888_copybufJPEG;
 8002e30:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <BSP_LCD_Init+0x57c>)
 8002e32:	495b      	ldr	r1, [pc, #364]	; (8002fa0 <BSP_LCD_Init+0x5b4>)
 8002e34:	6019      	str	r1, [r3, #0]
}
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <BSP_LCD_Init+0x5b8>)
 8002e38:	930d      	str	r3, [sp, #52]	; 0x34
 8002e3a:	e626      	b.n	8002a8a <BSP_LCD_Init+0x9e>
	BSP_hlcd.config.bytesperpixel = 2;
 8002e3c:	2302      	movs	r3, #2
	BSP_hlcd.config.framesize *=2;
 8002e3e:	4a35      	ldr	r2, [pc, #212]	; (8002f14 <BSP_LCD_Init+0x528>)
	BSP_hlcd.config.bytesperpixel = 2;
 8002e40:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=2;
 8002e44:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _ARGB1555_color;
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <BSP_LCD_Init+0x52c>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002e48:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _ARGB1555_color;
 8002e4c:	4956      	ldr	r1, [pc, #344]	; (8002fa8 <BSP_LCD_Init+0x5bc>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002e4e:	61a2      	str	r2, [r4, #24]
	BSP_LCD_Color = _ARGB1555_color;
 8002e50:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _ARGB1555_alpha;
 8002e52:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <BSP_LCD_Init+0x534>)
 8002e54:	4955      	ldr	r1, [pc, #340]	; (8002fac <BSP_LCD_Init+0x5c0>)
 8002e56:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB1555_dma2dwait;
 8002e58:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <BSP_LCD_Init+0x53c>)
 8002e5a:	4955      	ldr	r1, [pc, #340]	; (8002fb0 <BSP_LCD_Init+0x5c4>)
 8002e5c:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB1555_updatepixel;
 8002e5e:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <BSP_LCD_Init+0x544>)
 8002e60:	4954      	ldr	r1, [pc, #336]	; (8002fb4 <BSP_LCD_Init+0x5c8>)
 8002e62:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB1555_updatepixelblend;
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <BSP_LCD_Init+0x54c>)
 8002e66:	4954      	ldr	r1, [pc, #336]	; (8002fb8 <BSP_LCD_Init+0x5cc>)
 8002e68:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _ARGB1555_getpixel;
 8002e6a:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <BSP_LCD_Init+0x554>)
 8002e6c:	4953      	ldr	r1, [pc, #332]	; (8002fbc <BSP_LCD_Init+0x5d0>)
 8002e6e:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _ARGB1555_fillbuf;
 8002e70:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <BSP_LCD_Init+0x55c>)
 8002e72:	4953      	ldr	r1, [pc, #332]	; (8002fc0 <BSP_LCD_Init+0x5d4>)
 8002e74:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB1555_fillbufblend;
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <BSP_LCD_Init+0x564>)
 8002e78:	4952      	ldr	r1, [pc, #328]	; (8002fc4 <BSP_LCD_Init+0x5d8>)
 8002e7a:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB1555_copybuf;
 8002e7c:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <BSP_LCD_Init+0x56c>)
 8002e7e:	4952      	ldr	r1, [pc, #328]	; (8002fc8 <BSP_LCD_Init+0x5dc>)
 8002e80:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB1555_copybufblend;
 8002e82:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <BSP_LCD_Init+0x574>)
 8002e84:	4951      	ldr	r1, [pc, #324]	; (8002fcc <BSP_LCD_Init+0x5e0>)
 8002e86:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB1555_copybufJPEG;
 8002e88:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <BSP_LCD_Init+0x57c>)
 8002e8a:	4951      	ldr	r1, [pc, #324]	; (8002fd0 <BSP_LCD_Init+0x5e4>)
 8002e8c:	e796      	b.n	8002dbc <BSP_LCD_Init+0x3d0>
	BSP_hlcd.config.bytesperpixel = 2;
 8002e8e:	2302      	movs	r3, #2
	BSP_hlcd.config.framesize *=2;
 8002e90:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <BSP_LCD_Init+0x528>)
	BSP_hlcd.config.bytesperpixel = 2;
 8002e92:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	BSP_hlcd.config.framesize *=2;
 8002e96:	6162      	str	r2, [r4, #20]
	BSP_LCD_Color = _ARGB4444_color;
 8002e98:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <BSP_LCD_Init+0x52c>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002e9a:	fb01 f202 	mul.w	r2, r1, r2
	BSP_LCD_Color = _ARGB4444_color;
 8002e9e:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <BSP_LCD_Init+0x5e8>)
	BSP_hlcd.config.framebuffersize = BSP_hlcd.config.framesize * BSP_hlcd.config.buffermode;
 8002ea0:	61a2      	str	r2, [r4, #24]
	BSP_LCD_Color = _ARGB4444_color;
 8002ea2:	6019      	str	r1, [r3, #0]
	BSP_LCD_Alpha = _ARGB4444_alpha;
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <BSP_LCD_Init+0x534>)
 8002ea6:	494c      	ldr	r1, [pc, #304]	; (8002fd8 <BSP_LCD_Init+0x5ec>)
 8002ea8:	6019      	str	r1, [r3, #0]
	BSP_LCD_DMA2D_Wait = _ARGB4444_dma2dwait;
 8002eaa:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <BSP_LCD_Init+0x53c>)
 8002eac:	494b      	ldr	r1, [pc, #300]	; (8002fdc <BSP_LCD_Init+0x5f0>)
 8002eae:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixel = _ARGB4444_updatepixel;
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <BSP_LCD_Init+0x544>)
 8002eb2:	494b      	ldr	r1, [pc, #300]	; (8002fe0 <BSP_LCD_Init+0x5f4>)
 8002eb4:	6019      	str	r1, [r3, #0]
	BSP_LCD_UpdatePixelBlend = _ARGB4444_updatepixelblend;
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <BSP_LCD_Init+0x54c>)
 8002eb8:	494a      	ldr	r1, [pc, #296]	; (8002fe4 <BSP_LCD_Init+0x5f8>)
 8002eba:	6019      	str	r1, [r3, #0]
	BSP_LCD_GetPixel = _ARGB4444_getpixel;
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <BSP_LCD_Init+0x554>)
 8002ebe:	494a      	ldr	r1, [pc, #296]	; (8002fe8 <BSP_LCD_Init+0x5fc>)
 8002ec0:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBuf = _ARGB4444_fillbuf;
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <BSP_LCD_Init+0x55c>)
 8002ec4:	4949      	ldr	r1, [pc, #292]	; (8002fec <BSP_LCD_Init+0x600>)
 8002ec6:	6019      	str	r1, [r3, #0]
	BSP_LCD_FillBufBlend = _ARGB4444_fillbufblend;
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <BSP_LCD_Init+0x564>)
 8002eca:	4949      	ldr	r1, [pc, #292]	; (8002ff0 <BSP_LCD_Init+0x604>)
 8002ecc:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBuf = _ARGB4444_copybuf;
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <BSP_LCD_Init+0x56c>)
 8002ed0:	4948      	ldr	r1, [pc, #288]	; (8002ff4 <BSP_LCD_Init+0x608>)
 8002ed2:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufBlend = _ARGB4444_copybufblend;
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <BSP_LCD_Init+0x574>)
 8002ed6:	4948      	ldr	r1, [pc, #288]	; (8002ff8 <BSP_LCD_Init+0x60c>)
 8002ed8:	6019      	str	r1, [r3, #0]
	BSP_LCD_CopyBufJPEG = _ARGB4444_copybufJPEG;
 8002eda:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <BSP_LCD_Init+0x57c>)
 8002edc:	4947      	ldr	r1, [pc, #284]	; (8002ffc <BSP_LCD_Init+0x610>)
 8002ede:	e76d      	b.n	8002dbc <BSP_LCD_Init+0x3d0>
	BSP_hlcd.JPEGbuf = LCD_FRAMEBUFFER_END_ADDR - (2 * BSP_hlcd.config.framesize) - LCD_JPEGBUF_SIZE;
 8002ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	BSP_hlcd.layer.Frame_IDLE = 255;
 8002ee2:	22ff      	movs	r2, #255	; 0xff
	BSP_hlcd.layer.Frame_EDIT = 1;
 8002ee4:	2101      	movs	r1, #1
	BSP_hlcd.JPEGbuf = LCD_FRAMEBUFFER_END_ADDR - (2 * BSP_hlcd.config.framesize) - LCD_JPEGBUF_SIZE;
 8002ee6:	6423      	str	r3, [r4, #64]	; 0x40
	BSP_hlcd.layer.Frame_ACTIVE = 0;
 8002ee8:	2300      	movs	r3, #0
	BSP_hlcd.layer.Frame_IDLE = 255;
 8002eea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
	BSP_hlcd.layer.Frame_EDIT = 1;
 8002eee:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
	BSP_hlcd.layer.Frame_READY = 255;
 8002ef2:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	BSP_hlcd.layer.Frame_ACTIVE = 0;
 8002ef6:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	BSP_hlcd.layer.Frame_NOUSE = 2;
 8002efa:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	BSP_hlcd.layer.Frame_PREV = 0;
 8002efe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	BSP_hlcd.layer.Frames[0] = LCD_FRAMEBUFFER_END_ADDR - 1 * BSP_hlcd.config.framesize;
 8002f02:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	BSP_hlcd.layer.Frames[1] = LCD_FRAMEBUFFER_END_ADDR - 2 * BSP_hlcd.config.framesize;
 8002f06:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
	BSP_hlcd.layer.Frames[2] = 0;
 8002f0a:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002f0c:	e5e1      	b.n	8002ad2 <BSP_LCD_Init+0xe6>
	memset((void *)(LCD_FRAMEBUFFER_END_ADDR - BSP_hlcd.config.framebuffersize - LCD_JPEGBUF_SIZE),0x00, (BSP_hlcd.config.framebuffersize + LCD_JPEGBUF_SIZE));
 8002f0e:	69a2      	ldr	r2, [r4, #24]
 8002f10:	e65f      	b.n	8002bd2 <BSP_LCD_Init+0x1e6>
 8002f12:	bf00      	nop
 8002f14:	000bb800 	.word	0x000bb800
 8002f18:	24000244 	.word	0x24000244
 8002f1c:	08002771 	.word	0x08002771
 8002f20:	24000240 	.word	0x24000240
 8002f24:	0800181d 	.word	0x0800181d
 8002f28:	24000254 	.word	0x24000254
 8002f2c:	08002801 	.word	0x08002801
 8002f30:	24000264 	.word	0x24000264
 8002f34:	08002899 	.word	0x08002899
 8002f38:	24000268 	.word	0x24000268
 8002f3c:	080026b5 	.word	0x080026b5
 8002f40:	24000260 	.word	0x24000260
 8002f44:	08002851 	.word	0x08002851
 8002f48:	24000258 	.word	0x24000258
 8002f4c:	080022b5 	.word	0x080022b5
 8002f50:	2400025c 	.word	0x2400025c
 8002f54:	0800292d 	.word	0x0800292d
 8002f58:	24000248 	.word	0x24000248
 8002f5c:	08001ee9 	.word	0x08001ee9
 8002f60:	2400024c 	.word	0x2400024c
 8002f64:	080028e1 	.word	0x080028e1
 8002f68:	24000250 	.word	0x24000250
 8002f6c:	08002975 	.word	0x08002975
 8002f70:	c3c89000 	.word	0xc3c89000
 8002f74:	00119400 	.word	0x00119400
 8002f78:	08002765 	.word	0x08002765
 8002f7c:	0800274d 	.word	0x0800274d
 8002f80:	08002831 	.word	0x08002831
 8002f84:	080017e1 	.word	0x080017e1
 8002f88:	0800260d 	.word	0x0800260d
 8002f8c:	08002679 	.word	0x08002679
 8002f90:	0800226d 	.word	0x0800226d
 8002f94:	08002149 	.word	0x08002149
 8002f98:	08001e99 	.word	0x08001e99
 8002f9c:	08001d55 	.word	0x08001d55
 8002fa0:	08001b69 	.word	0x08001b69
 8002fa4:	c3bcd800 	.word	0xc3bcd800
 8002fa8:	08001785 	.word	0x08001785
 8002fac:	080017a9 	.word	0x080017a9
 8002fb0:	08002821 	.word	0x08002821
 8002fb4:	08002515 	.word	0x08002515
 8002fb8:	08002539 	.word	0x08002539
 8002fbc:	08002565 	.word	0x08002565
 8002fc0:	080021dd 	.word	0x080021dd
 8002fc4:	080020a9 	.word	0x080020a9
 8002fc8:	08001df9 	.word	0x08001df9
 8002fcc:	08001ca5 	.word	0x08001ca5
 8002fd0:	080019a1 	.word	0x080019a1
 8002fd4:	080017b9 	.word	0x080017b9
 8002fd8:	080017d5 	.word	0x080017d5
 8002fdc:	08002841 	.word	0x08002841
 8002fe0:	080028bd 	.word	0x080028bd
 8002fe4:	08002589 	.word	0x08002589
 8002fe8:	08002875 	.word	0x08002875
 8002fec:	08002225 	.word	0x08002225
 8002ff0:	080020f9 	.word	0x080020f9
 8002ff4:	08001e49 	.word	0x08001e49
 8002ff8:	08001cfd 	.word	0x08001cfd
 8002ffc:	08001a85 	.word	0x08001a85
 8003000:	c3dcd800 	.word	0xc3dcd800
 8003004:	c3e89000 	.word	0xc3e89000
 8003008:	c3f44800 	.word	0xc3f44800
 800300c:	c3ab4400 	.word	0xc3ab4400
 8003010:	c3cb4400 	.word	0xc3cb4400
 8003014:	c3ee6c00 	.word	0xc3ee6c00

08003018 <BSP_LCD_FrameReady>:
void BSP_LCD_FrameReady(void) {
	// Marking EDIT frame as READY for display
	// Marking previous READY frame (if exists) as EDIT, else IDLE becoming EDIT

	// Waiting for any DMA2D in progress
	BSP_LCD_DMA2D_Wait();
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <BSP_LCD_FrameReady+0x58>)
void BSP_LCD_FrameReady(void) {
 800301a:	b510      	push	{r4, lr}

	uint8_t t = BSP_hlcd.layer.Frame_READY;
 800301c:	4c15      	ldr	r4, [pc, #84]	; (8003074 <BSP_LCD_FrameReady+0x5c>)
	BSP_LCD_DMA2D_Wait();
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4798      	blx	r3
	uint8_t t = BSP_hlcd.layer.Frame_READY;
 8003022:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
	BSP_hlcd.layer.Frame_READY = BSP_hlcd.layer.Frame_EDIT;
 8003026:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	BSP_hlcd.layer.Frame_PREV = BSP_hlcd.layer.Frame_EDIT;
	if (t<255) BSP_hlcd.layer.Frame_EDIT = t;
 800302a:	2aff      	cmp	r2, #255	; 0xff
	uint8_t t = BSP_hlcd.layer.Frame_READY;
 800302c:	b2d1      	uxtb	r1, r2
	BSP_hlcd.layer.Frame_READY = BSP_hlcd.layer.Frame_EDIT;
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	BSP_hlcd.layer.Frame_PREV = BSP_hlcd.layer.Frame_EDIT;
 8003034:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	if (t<255) BSP_hlcd.layer.Frame_EDIT = t;
 800303e:	d00e      	beq.n	800305e <BSP_LCD_FrameReady+0x46>
 8003040:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
			BSP_hlcd.layer.Frame_EDIT = BSP_hlcd.layer.Frame_IDLE;
			BSP_hlcd.layer.Frame_IDLE = t;
		}

	// Calculating frame time [ms]. FPS = 1000 / frametime.
	uint32_t timestamp = BSP_GetTick();
 8003044:	f001 f816 	bl	8004074 <BSP_GetTick>
	uint32_t dt = timestamp - BSP_hlcd.priv.l_timestamp;
 8003048:	6822      	ldr	r2, [r4, #0]
	BSP_hlcd.priv.l_timestamp = timestamp;
	BSP_hlcd.frametime = (BSP_hlcd.frametime * 768 + (dt << 8)) >> 10; // Moving average
 800304a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uint32_t dt = timestamp - BSP_hlcd.priv.l_timestamp;
 800304c:	1a82      	subs	r2, r0, r2
	BSP_hlcd.priv.l_timestamp = timestamp;
 800304e:	6020      	str	r0, [r4, #0]
	BSP_hlcd.frametime = (BSP_hlcd.frametime * 768 + (dt << 8)) >> 10; // Moving average
 8003050:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003054:	4413      	add	r3, r2
 8003056:	f3c3 0395 	ubfx	r3, r3, #2, #22
 800305a:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800305c:	bd10      	pop	{r4, pc}
			BSP_hlcd.layer.Frame_EDIT = BSP_hlcd.layer.Frame_IDLE;
 800305e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			BSP_hlcd.layer.Frame_IDLE = t;
 8003068:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800306c:	e7ea      	b.n	8003044 <BSP_LCD_FrameReady+0x2c>
 800306e:	bf00      	nop
 8003070:	24000254 	.word	0x24000254
 8003074:	2400026c 	.word	0x2400026c

08003078 <BSP_LCD_InitBackLight>:
void BSP_LCD_InitBackLight(uint8_t value) {
	// PWM Timer - base configration
	// Option 1: PWM Frequency = 200MHz Input clock / Prescaler (7+1) / Reload value (999+1) = 25kHz
	// Option 2: PWM Frequency = 240MHz Input clock / Prescaler (7+1) / Reload value (999+1) = 30kHz

	BSP_hlcd.priv.bklt_setting = (int32_t)value << 6;
 8003078:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <BSP_LCD_InitBackLight+0x4c>)
 800307a:	0180      	lsls	r0, r0, #6
	BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
	BSP_hlcd.priv.bklt_dimspeed = 0;
 800307c:	2100      	movs	r1, #0
void BSP_LCD_InitBackLight(uint8_t value) {
 800307e:	b538      	push	{r3, r4, r5, lr}
	BSP_hlcd.priv.bklt_setting = (int32_t)value << 6;
 8003080:	60d0      	str	r0, [r2, #12]

	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;

	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 8003082:	f240 33e7 	movw	r3, #999	; 0x3e7
	BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
 8003086:	68d0      	ldr	r0, [r2, #12]
	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 8003088:	4d0f      	ldr	r5, [pc, #60]	; (80030c8 <BSP_LCD_InitBackLight+0x50>)
	BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
 800308a:	6090      	str	r0, [r2, #8]
	BSP_hlcd.priv.bklt_dimspeed = 0;
 800308c:	6111      	str	r1, [r2, #16]
	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 800308e:	4628      	mov	r0, r5
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003090:	6894      	ldr	r4, [r2, #8]
	BSP_STM32_TIM_Init(LCD_BKL_TIM, TIM_CLOCKDIVISION_DIV1, 7, 999);
 8003092:	2207      	movs	r2, #7
 8003094:	f007 fc0a 	bl	800a8ac <BSP_STM32_TIM_Init>
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003098:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800309c:	11a3      	asrs	r3, r4, #6
 800309e:	490b      	ldr	r1, [pc, #44]	; (80030cc <BSP_LCD_InitBackLight+0x54>)
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 80030a0:	2206      	movs	r2, #6
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 80030a6:	4628      	mov	r0, r5
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 80030a8:	fba1 1303 	umull	r1, r3, r1, r3
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 80030ac:	2103      	movs	r1, #3
	uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	33c8      	adds	r3, #200	; 0xc8
	BSP_STM32_TIM_ConfigChannel(LCD_BKL_TIM, 3, 0b110, val);
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f007 fc16 	bl	800a8e4 <BSP_STM32_TIM_ConfigChannel>
	BSP_STM32_TIM_Start(LCD_BKL_TIM);
 80030b8:	4628      	mov	r0, r5
}
 80030ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	BSP_STM32_TIM_Start(LCD_BKL_TIM);
 80030be:	f007 bc69 	b.w	800a994 <BSP_STM32_TIM_Start>
 80030c2:	bf00      	nop
 80030c4:	2400026c 	.word	0x2400026c
 80030c8:	40000400 	.word	0x40000400
 80030cc:	51eb851f 	.word	0x51eb851f

080030d0 <BSP_LCD_SetBackLight>:


void BSP_LCD_SetBackLight(uint8_t value, uint8_t dimspeed) {
	// Sets backlight value 0 - 100%

	BSP_hlcd.priv.bklt_setting = (int32_t)value << 6;
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <BSP_LCD_SetBackLight+0xc>)
 80030d2:	0180      	lsls	r0, r0, #6
 80030d4:	60d8      	str	r0, [r3, #12]
	BSP_hlcd.priv.bklt_dimspeed = (int32_t)dimspeed;
 80030d6:	6119      	str	r1, [r3, #16]

}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2400026c 	.word	0x2400026c

080030e0 <BSP_LCD_DecodeJPEG>:
}


void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
	// Decode JPEG into intermediate buffer (organized in YCbCr MCU blocks)
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGbuf, LCD_JPEGBUF_SIZE);
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <BSP_LCD_DecodeJPEG+0x1c>)
void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
 80030e2:	460a      	mov	r2, r1
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGbuf, LCD_JPEGBUF_SIZE);
 80030e4:	4601      	mov	r1, r0
 80030e6:	4806      	ldr	r0, [pc, #24]	; (8003100 <BSP_LCD_DecodeJPEG+0x20>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
 80030ea:	b510      	push	{r4, lr}
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGbuf, LCD_JPEGBUF_SIZE);
 80030ec:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
void BSP_LCD_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {
 80030f0:	b082      	sub	sp, #8
	BSP_STM32_JPEG_Decode(JPEG, jpeg_addr, jpeg_size, BSP_hlcd.JPEGbuf, LCD_JPEGBUF_SIZE);
 80030f2:	9400      	str	r4, [sp, #0]
 80030f4:	f004 fb7a 	bl	80077ec <BSP_STM32_JPEG_Decode>
}
 80030f8:	b002      	add	sp, #8
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	2400026c 	.word	0x2400026c
 8003100:	52003000 	.word	0x52003000

08003104 <BSP_LCD_GetEditFrameAddr>:


uint32_t BSP_LCD_GetEditFrameAddr(void) {
	uint8_t eframe = BSP_hlcd.layer.Frame_EDIT;
 8003104:	4a03      	ldr	r2, [pc, #12]	; (8003114 <BSP_LCD_GetEditFrameAddr+0x10>)
 8003106:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
	return BSP_hlcd.layer.Frames[eframe];
 800310a:	330a      	adds	r3, #10
 800310c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	2400026c 	.word	0x2400026c

08003118 <BSP_LCD_GetColorMode>:
	uint8_t pframe = BSP_hlcd.layer.Frame_PREV;
	return BSP_hlcd.layer.Frames[pframe];
}

uint32_t BSP_LCD_GetColorMode(void) {
	return BSP_hlcd.config.colormode;
 8003118:	4b01      	ldr	r3, [pc, #4]	; (8003120 <BSP_LCD_GetColorMode+0x8>)
}
 800311a:	7f18      	ldrb	r0, [r3, #28]
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2400026c 	.word	0x2400026c

08003124 <LTDC_IRQHandler>:
 * Callback for blanking interval. Updating display buffer.
 ******************************************************************************/

// INT Handler for LTDC controller
void LTDC_IRQHandler(void)
{
 8003124:	b510      	push	{r4, lr}
	if (BSP_STM32_LTDC_IRQHandler(LTDC)==BSP_OK) {
 8003126:	4834      	ldr	r0, [pc, #208]	; (80031f8 <LTDC_IRQHandler+0xd4>)
 8003128:	f004 fd9a 	bl	8007c60 <BSP_STM32_LTDC_IRQHandler>
 800312c:	2800      	cmp	r0, #0
 800312e:	d139      	bne.n	80031a4 <LTDC_IRQHandler+0x80>

		// Updating backlight brightness
		if (BSP_hlcd.priv.bklt_value != BSP_hlcd.priv.bklt_setting) {
 8003130:	4c32      	ldr	r4, [pc, #200]	; (80031fc <LTDC_IRQHandler+0xd8>)
 8003132:	68a2      	ldr	r2, [r4, #8]
 8003134:	68e3      	ldr	r3, [r4, #12]
 8003136:	429a      	cmp	r2, r3
 8003138:	d02b      	beq.n	8003192 <LTDC_IRQHandler+0x6e>
			if (BSP_hlcd.priv.bklt_value < BSP_hlcd.priv.bklt_setting) {
 800313a:	68a2      	ldr	r2, [r4, #8]
 800313c:	68e3      	ldr	r3, [r4, #12]
 800313e:	429a      	cmp	r2, r3
 8003140:	da09      	bge.n	8003156 <LTDC_IRQHandler+0x32>
				BSP_hlcd.priv.bklt_value += BSP_hlcd.priv.bklt_dimspeed;
 8003142:	6922      	ldr	r2, [r4, #16]
 8003144:	68a3      	ldr	r3, [r4, #8]
 8003146:	4413      	add	r3, r2
 8003148:	60a3      	str	r3, [r4, #8]
				if (BSP_hlcd.priv.bklt_value > BSP_hlcd.priv.bklt_setting) BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
 800314a:	68a2      	ldr	r2, [r4, #8]
 800314c:	68e3      	ldr	r3, [r4, #12]
 800314e:	429a      	cmp	r2, r3
 8003150:	dd01      	ble.n	8003156 <LTDC_IRQHandler+0x32>
 8003152:	68e3      	ldr	r3, [r4, #12]
 8003154:	60a3      	str	r3, [r4, #8]
			}

			if (BSP_hlcd.priv.bklt_value > BSP_hlcd.priv.bklt_setting) {
 8003156:	68a2      	ldr	r2, [r4, #8]
 8003158:	68e3      	ldr	r3, [r4, #12]
 800315a:	429a      	cmp	r2, r3
 800315c:	dd09      	ble.n	8003172 <LTDC_IRQHandler+0x4e>
				BSP_hlcd.priv.bklt_value -= BSP_hlcd.priv.bklt_dimspeed;
 800315e:	6922      	ldr	r2, [r4, #16]
 8003160:	68a3      	ldr	r3, [r4, #8]
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	60a3      	str	r3, [r4, #8]
				if (BSP_hlcd.priv.bklt_value < BSP_hlcd.priv.bklt_setting) BSP_hlcd.priv.bklt_value = BSP_hlcd.priv.bklt_setting;
 8003166:	68a2      	ldr	r2, [r4, #8]
 8003168:	68e3      	ldr	r3, [r4, #12]
 800316a:	429a      	cmp	r2, r3
 800316c:	da01      	bge.n	8003172 <LTDC_IRQHandler+0x4e>
 800316e:	68e3      	ldr	r3, [r4, #12]
 8003170:	60a3      	str	r3, [r4, #8]
			}

			uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003172:	68a2      	ldr	r2, [r4, #8]
 8003174:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <LTDC_IRQHandler+0xdc>)
			BSP_STM32_TIM_SetChannelValue(LCD_BKL_TIM, 3, val);
 800317a:	2103      	movs	r1, #3
			uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 800317c:	1192      	asrs	r2, r2, #6
 800317e:	fb00 f202 	mul.w	r2, r0, r2
			BSP_STM32_TIM_SetChannelValue(LCD_BKL_TIM, 3, val);
 8003182:	4820      	ldr	r0, [pc, #128]	; (8003204 <LTDC_IRQHandler+0xe0>)
			uint32_t val = (((uint32_t)(BSP_hlcd.priv.bklt_value >> 6) * (LCD_BKL_MAX_PWM - LCD_BKL_MIN_PWM)) / 100) + LCD_BKL_MIN_PWM;
 8003184:	fba3 3202 	umull	r3, r2, r3, r2
 8003188:	0952      	lsrs	r2, r2, #5
 800318a:	32c8      	adds	r2, #200	; 0xc8
			BSP_STM32_TIM_SetChannelValue(LCD_BKL_TIM, 3, val);
 800318c:	b292      	uxth	r2, r2
 800318e:	f007 fc09 	bl	800a9a4 <BSP_STM32_TIM_SetChannelValue>
		}

		// Switching frames
		switch (BSP_hlcd.config.buffermode) {
 8003192:	7f63      	ldrb	r3, [r4, #29]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d01e      	beq.n	80031d6 <LTDC_IRQHandler+0xb2>
 8003198:	2b03      	cmp	r3, #3
 800319a:	d103      	bne.n	80031a4 <LTDC_IRQHandler+0x80>
		case LCD_BUFFER_MODE_TRIPLE:

			if (BSP_hlcd.layer.Frame_READY < 255) {
 800319c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80031a0:	2bff      	cmp	r3, #255	; 0xff
 80031a2:	d100      	bne.n	80031a6 <LTDC_IRQHandler+0x82>

		}

	}

}
 80031a4:	bd10      	pop	{r4, pc}
				uint8_t t = BSP_hlcd.layer.Frame_ACTIVE;
 80031a6:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
				BSP_hlcd.layer.Frame_READY = 255;
 80031aa:	20ff      	movs	r0, #255	; 0xff
				BSP_hlcd.layer.Frame_ACTIVE = BSP_hlcd.layer.Frame_READY;
 80031ac:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.layer.Frames[BSP_hlcd.layer.Frame_ACTIVE]);
 80031b0:	2100      	movs	r1, #0
				uint8_t t = BSP_hlcd.layer.Frame_ACTIVE;
 80031b2:	b2db      	uxtb	r3, r3
				BSP_hlcd.layer.Frame_ACTIVE = BSP_hlcd.layer.Frame_READY;
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
				BSP_hlcd.layer.Frame_IDLE = t;
 80031ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				BSP_hlcd.layer.Frame_READY = 255;
 80031be:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.layer.Frames[BSP_hlcd.layer.Frame_ACTIVE]);
 80031c2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80031c6:	480c      	ldr	r0, [pc, #48]	; (80031f8 <LTDC_IRQHandler+0xd4>)
 80031c8:	330a      	adds	r3, #10
 80031ca:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
}
 80031ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.layer.Frames[BSP_hlcd.layer.Frame_ACTIVE]);
 80031d2:	f004 bce1 	b.w	8007b98 <BSP_STM32_LTDC_UpdateFrameBufAddr>
			if (BSP_hlcd.layer.Frame_READY < 255) {
 80031d6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80031da:	2bff      	cmp	r3, #255	; 0xff
 80031dc:	d0e2      	beq.n	80031a4 <LTDC_IRQHandler+0x80>
				uint8_t t = BSP_hlcd.layer.Frame_ACTIVE;
 80031de:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
				BSP_hlcd.layer.Frame_READY = 255;
 80031e2:	20ff      	movs	r0, #255	; 0xff
				BSP_hlcd.layer.Frame_ACTIVE = BSP_hlcd.layer.Frame_READY;
 80031e4:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
				BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC, 0, BSP_hlcd.layer.Frames[BSP_hlcd.layer.Frame_ACTIVE]);
 80031e8:	2100      	movs	r1, #0
				uint8_t t = BSP_hlcd.layer.Frame_ACTIVE;
 80031ea:	b2db      	uxtb	r3, r3
				BSP_hlcd.layer.Frame_ACTIVE = BSP_hlcd.layer.Frame_READY;
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
				BSP_hlcd.layer.Frame_EDIT = t;
 80031f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80031f6:	e7e2      	b.n	80031be <LTDC_IRQHandler+0x9a>
 80031f8:	50001000 	.word	0x50001000
 80031fc:	2400026c 	.word	0x2400026c
 8003200:	51eb851f 	.word	0x51eb851f
 8003204:	40000400 	.word	0x40000400

08003208 <DMA2D_IRQHandler>:

// INT Handler for DMA2D
void DMA2D_IRQHandler(void) {
 8003208:	b508      	push	{r3, lr}

	// Update state flag
	if (BSP_STM32_DMA2D_IRQHandler(DMA2D) == BSP_OK) BSP_hlcd.priv.dma2d_state = LCD_DMA2D_READY;
 800320a:	4803      	ldr	r0, [pc, #12]	; (8003218 <DMA2D_IRQHandler+0x10>)
 800320c:	f003 ff12 	bl	8007034 <BSP_STM32_DMA2D_IRQHandler>
 8003210:	b908      	cbnz	r0, 8003216 <DMA2D_IRQHandler+0xe>
 8003212:	4b02      	ldr	r3, [pc, #8]	; (800321c <DMA2D_IRQHandler+0x14>)
 8003214:	6058      	str	r0, [r3, #4]
}
 8003216:	bd08      	pop	{r3, pc}
 8003218:	52001000 	.word	0x52001000
 800321c:	2400026c 	.word	0x2400026c

08003220 <BSP_LCD_TP_Init>:

BUF_RAM	LCD_TP_HandleTypeDef	BSP_hlcdtp = {0};
		TxRxContext_TypeDef		BSP_hlcdtp_ctx = {0};


uint8_t BSP_LCD_TP_Init() {
 8003220:	b500      	push	{lr}
	// Configuring I2C interface
	if (BSP_STM32_I2C_Init(I2C1)) return BSP_ERROR;
 8003222:	481f      	ldr	r0, [pc, #124]	; (80032a0 <BSP_LCD_TP_Init+0x80>)
uint8_t BSP_LCD_TP_Init() {
 8003224:	b085      	sub	sp, #20
	if (BSP_STM32_I2C_Init(I2C1)) return BSP_ERROR;
 8003226:	f004 f89f 	bl	8007368 <BSP_STM32_I2C_Init>
 800322a:	b118      	cbz	r0, 8003234 <BSP_LCD_TP_Init+0x14>
 800322c:	2001      	movs	r0, #1

	// Initialization of Touch Panel
	if (BSP_DRV_LCD_TP_Init(I2C1)) return BSP_ERROR;

	return BSP_OK;
}
 800322e:	b005      	add	sp, #20
 8003230:	f85d fb04 	ldr.w	pc, [sp], #4
	BSP_STM32_DMA_Init(DMA1_Stream2, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_BYTE, DMA_MDATAALIGN_BYTE, DMA_NORMAL, DMA_PRIORITY_LOW);
 8003234:	4602      	mov	r2, r0
 8003236:	4601      	mov	r1, r0
 8003238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323c:	4819      	ldr	r0, [pc, #100]	; (80032a4 <BSP_LCD_TP_Init+0x84>)
 800323e:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8003242:	e9cd 2200 	strd	r2, r2, [sp]
 8003246:	f002 fc81 	bl	8005b4c <BSP_STM32_DMA_Init>
	if (BSP_STM32_DMA_CtxLink(DMA1_Stream2, &BSP_hlcdtp_ctx, DMA_REQUEST_I2C1_RX)) return BSP_ERROR;
 800324a:	2221      	movs	r2, #33	; 0x21
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <BSP_LCD_TP_Init+0x88>)
 800324e:	4815      	ldr	r0, [pc, #84]	; (80032a4 <BSP_LCD_TP_Init+0x84>)
 8003250:	f002 fcb0 	bl	8005bb4 <BSP_STM32_DMA_CtxLink>
 8003254:	2800      	cmp	r0, #0
 8003256:	d1e9      	bne.n	800322c <BSP_LCD_TP_Init+0xc>
	BSP_STM32_GPIO_WritePin(BSP_LCD_TP_RST_PORT, BSP_LCD_TP_RST_PIN, GPIO_PIN_RESET);
 8003258:	4602      	mov	r2, r0
 800325a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800325e:	4813      	ldr	r0, [pc, #76]	; (80032ac <BSP_LCD_TP_Init+0x8c>)
 8003260:	f004 f85c 	bl	800731c <BSP_STM32_GPIO_WritePin>
	BSP_Delay(5);
 8003264:	2005      	movs	r0, #5
 8003266:	f000 ff0b 	bl	8004080 <BSP_Delay>
	BSP_STM32_GPIO_WritePin(BSP_LCD_TP_RST_PORT, BSP_LCD_TP_RST_PIN, GPIO_PIN_SET);
 800326a:	2201      	movs	r2, #1
 800326c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003270:	480e      	ldr	r0, [pc, #56]	; (80032ac <BSP_LCD_TP_Init+0x8c>)
 8003272:	f004 f853 	bl	800731c <BSP_STM32_GPIO_WritePin>
	BSP_Delay(5);
 8003276:	2005      	movs	r0, #5
 8003278:	f000 ff02 	bl	8004080 <BSP_Delay>
	if (BSP_STM32_I2C_IsDeviceReady(I2C1, (LCD_TP_I2C_ADDR) << 1, 4, 1000)) return BSP_ERROR;
 800327c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003280:	2204      	movs	r2, #4
 8003282:	2170      	movs	r1, #112	; 0x70
 8003284:	4806      	ldr	r0, [pc, #24]	; (80032a0 <BSP_LCD_TP_Init+0x80>)
 8003286:	f004 f897 	bl	80073b8 <BSP_STM32_I2C_IsDeviceReady>
 800328a:	2800      	cmp	r0, #0
 800328c:	d1ce      	bne.n	800322c <BSP_LCD_TP_Init+0xc>
	if (BSP_DRV_LCD_TP_Init(I2C1)) return BSP_ERROR;
 800328e:	4804      	ldr	r0, [pc, #16]	; (80032a0 <BSP_LCD_TP_Init+0x80>)
 8003290:	f7fd fdf8 	bl	8000e84 <BSP_DRV_LCD_TP_Init>
	if (BSP_STM32_I2C_Init(I2C1)) return BSP_ERROR;
 8003294:	3800      	subs	r0, #0
 8003296:	bf18      	it	ne
 8003298:	2001      	movne	r0, #1
}
 800329a:	b005      	add	sp, #20
 800329c:	f85d fb04 	ldr.w	pc, [sp], #4
 80032a0:	40005400 	.word	0x40005400
 80032a4:	40020040 	.word	0x40020040
 80032a8:	240002b0 	.word	0x240002b0
 80032ac:	58021800 	.word	0x58021800

080032b0 <BSP_LCD_TP_INTHandler>:

	return BSP_OK;
}


void BSP_LCD_TP_INTHandler() {
 80032b0:	b510      	push	{r4, lr}
	// New data available from touch panel, start receiving
	//BSP_STM32_I2C_MemReadIT(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
	BSP_STM32_I2C_MemRead(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
 80032b2:	4806      	ldr	r0, [pc, #24]	; (80032cc <BSP_LCD_TP_INTHandler+0x1c>)
void BSP_LCD_TP_INTHandler() {
 80032b4:	b082      	sub	sp, #8
	BSP_STM32_I2C_MemRead(I2C1, &BSP_hlcdtp_ctx, LCD_TP_I2C_ADDR << 1, 0, BSP_hlcdtp.raw_data, LCD_TP_REG_TOTAL_LENGTH);
 80032b6:	241f      	movs	r4, #31
 80032b8:	2300      	movs	r3, #0
 80032ba:	2270      	movs	r2, #112	; 0x70
 80032bc:	4904      	ldr	r1, [pc, #16]	; (80032d0 <BSP_LCD_TP_INTHandler+0x20>)
 80032be:	e9cd 0400 	strd	r0, r4, [sp]
 80032c2:	4804      	ldr	r0, [pc, #16]	; (80032d4 <BSP_LCD_TP_INTHandler+0x24>)
 80032c4:	f004 f930 	bl	8007528 <BSP_STM32_I2C_MemRead>
}
 80032c8:	b002      	add	sp, #8
 80032ca:	bd10      	pop	{r4, pc}
 80032cc:	3800007c 	.word	0x3800007c
 80032d0:	240002b0 	.word	0x240002b0
 80032d4:	40005400 	.word	0x40005400

080032d8 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void) {
 80032d8:	b508      	push	{r3, lr}
	// Receiving and parsing data from touch panel
	if (BSP_STM32_I2C_IRQHandler(I2C1, &BSP_hlcdtp_ctx) == BSP_OK) BSP_DRV_LCD_TP_Parse(&BSP_hlcdtp);
 80032da:	4905      	ldr	r1, [pc, #20]	; (80032f0 <I2C1_EV_IRQHandler+0x18>)
 80032dc:	4805      	ldr	r0, [pc, #20]	; (80032f4 <I2C1_EV_IRQHandler+0x1c>)
 80032de:	f004 f96f 	bl	80075c0 <BSP_STM32_I2C_IRQHandler>
 80032e2:	b100      	cbz	r0, 80032e6 <I2C1_EV_IRQHandler+0xe>
}
 80032e4:	bd08      	pop	{r3, pc}
	if (BSP_STM32_I2C_IRQHandler(I2C1, &BSP_hlcdtp_ctx) == BSP_OK) BSP_DRV_LCD_TP_Parse(&BSP_hlcdtp);
 80032e6:	4804      	ldr	r0, [pc, #16]	; (80032f8 <I2C1_EV_IRQHandler+0x20>)
}
 80032e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (BSP_STM32_I2C_IRQHandler(I2C1, &BSP_hlcdtp_ctx) == BSP_OK) BSP_DRV_LCD_TP_Parse(&BSP_hlcdtp);
 80032ec:	f7fd bdcc 	b.w	8000e88 <BSP_DRV_LCD_TP_Parse>
 80032f0:	240002b0 	.word	0x240002b0
 80032f4:	40005400 	.word	0x40005400
 80032f8:	3800007c 	.word	0x3800007c

080032fc <BSP_QSPI_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_QSPI.h"

uint8_t BSP_QSPI_Init() {
 80032fc:	b510      	push	{r4, lr}
	if (BSP_STM32_QSPI_Init(BSP_QSPI, BSP_QSPI_PRESCALER, BSP_QSPI_CLOCKMODE, 1, BSP_QSPI_MEMSIZE)) return BSP_ERROR;
 80032fe:	2301      	movs	r3, #1
uint8_t BSP_QSPI_Init() {
 8003300:	b082      	sub	sp, #8
	if (BSP_STM32_QSPI_Init(BSP_QSPI, BSP_QSPI_PRESCALER, BSP_QSPI_CLOCKMODE, 1, BSP_QSPI_MEMSIZE)) return BSP_ERROR;
 8003302:	2417      	movs	r4, #23
 8003304:	2102      	movs	r1, #2
 8003306:	4808      	ldr	r0, [pc, #32]	; (8003328 <BSP_QSPI_Init+0x2c>)
 8003308:	461a      	mov	r2, r3
 800330a:	9400      	str	r4, [sp, #0]
 800330c:	f004 fdee 	bl	8007eec <BSP_STM32_QSPI_Init>
 8003310:	b110      	cbz	r0, 8003318 <BSP_QSPI_Init+0x1c>
 8003312:	2001      	movs	r0, #1
	if (BSP_DRV_QSPI_Init(QUADSPI)) return BSP_ERROR;

	return BSP_OK;
}
 8003314:	b002      	add	sp, #8
 8003316:	bd10      	pop	{r4, pc}
	if (BSP_DRV_QSPI_Init(QUADSPI)) return BSP_ERROR;
 8003318:	4803      	ldr	r0, [pc, #12]	; (8003328 <BSP_QSPI_Init+0x2c>)
 800331a:	f7fd f9bb 	bl	8000694 <BSP_DRV_QSPI_Init>
	if (BSP_STM32_QSPI_Init(BSP_QSPI, BSP_QSPI_PRESCALER, BSP_QSPI_CLOCKMODE, 1, BSP_QSPI_MEMSIZE)) return BSP_ERROR;
 800331e:	3800      	subs	r0, #0
 8003320:	bf18      	it	ne
 8003322:	2001      	movne	r0, #1
}
 8003324:	b002      	add	sp, #8
 8003326:	bd10      	pop	{r4, pc}
 8003328:	52005000 	.word	0x52005000

0800332c <BSP_Res_Init>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_Resources.h"

uint8_t BSP_Res_Init(ResCtx_TypeDef *resctx, uint32_t resAddr, uint32_t resSize) {
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	4604      	mov	r4, r0
 8003330:	4608      	mov	r0, r1

	FRESULT res;

	// Initiating variables

	resctx->resAddr = resAddr;
 8003332:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8003336:	f8c3 1840 	str.w	r1, [r3, #2112]	; 0x840
	resctx->resSize = resSize;
	resctx->resFree = resSize;
	resctx->resIndex = (resAddr % 4)?(4 - (resAddr % 4)):0;
 800333a:	f011 0103 	ands.w	r1, r1, #3
	resctx->resSize = resSize;
 800333e:	f8c3 2844 	str.w	r2, [r3, #2116]	; 0x844
	resctx->resIndex = (resAddr % 4)?(4 - (resAddr % 4)):0;
 8003342:	bf18      	it	ne
 8003344:	f1c1 0104 	rsbne	r1, r1, #4
	resctx->resFree = resSize;
 8003348:	f8c3 2848 	str.w	r2, [r3, #2120]	; 0x848
	resctx->resIndex = (resAddr % 4)?(4 - (resAddr % 4)):0;
 800334c:	f8c3 184c 	str.w	r1, [r3, #2124]	; 0x84c

	// Cleaning reserved resource space

	memset((uint8_t *)resctx->resAddr, 0, resctx->resSize);
 8003350:	2100      	movs	r1, #0
 8003352:	f00e ff82 	bl	801225a <memset>

	// Cleaning item list
	for (uint16_t id=0; id<RES_ITEM_NUM; id++) {
 8003356:	0763      	lsls	r3, r4, #29
 8003358:	d111      	bne.n	800337e <BSP_Res_Init+0x52>
 800335a:	f504 6500 	add.w	r5, r4, #2048	; 0x800
	memset((uint8_t *)resctx->resAddr, 0, resctx->resSize);
 800335e:	4623      	mov	r3, r4
		resctx->items[id].addr = 0;
 8003360:	2000      	movs	r0, #0
 8003362:	2100      	movs	r1, #0
 8003364:	e8e3 0102 	strd	r0, r1, [r3], #8
	for (uint16_t id=0; id<RES_ITEM_NUM; id++) {
 8003368:	42ab      	cmp	r3, r5
 800336a:	d1fb      	bne.n	8003364 <BSP_Res_Init+0x38>
		resctx->items[id].size = 0;
	}

	// Mounting File System
	f_init();
 800336c:	f007 fc4a 	bl	800ac04 <f_init>
	res = f_mount(&resctx->fs, "0:/", 1);
 8003370:	4628      	mov	r0, r5
 8003372:	2201      	movs	r2, #1
 8003374:	4907      	ldr	r1, [pc, #28]	; (8003394 <BSP_Res_Init+0x68>)
	if (res) return res;

	return FR_OK;
}
 8003376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	res = f_mount(&resctx->fs, "0:/", 1);
 800337a:	f00a bcf1 	b.w	800dd60 <f_mount>
 800337e:	4623      	mov	r3, r4
		resctx->items[id].addr = 0;
 8003380:	2200      	movs	r2, #0
 8003382:	f504 6500 	add.w	r5, r4, #2048	; 0x800
		resctx->items[id].size = 0;
 8003386:	e9c3 2200 	strd	r2, r2, [r3]
	for (uint16_t id=0; id<RES_ITEM_NUM; id++) {
 800338a:	3308      	adds	r3, #8
 800338c:	429d      	cmp	r5, r3
 800338e:	d1fa      	bne.n	8003386 <BSP_Res_Init+0x5a>
 8003390:	e7ec      	b.n	800336c <BSP_Res_Init+0x40>
 8003392:	bf00      	nop
 8003394:	080154dc 	.word	0x080154dc

08003398 <BSP_Res_Load>:

uint8_t BSP_Res_Load(ResCtx_TypeDef *resctx, char *filename, uint16_t id) {
 8003398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800339c:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 80033a0:	4691      	mov	r9, r2
 80033a2:	4680      	mov	r8, r0
	FIL	file;
	FRESULT res;

	// Opening file

	res = f_open(&file, filename, FA_READ);
 80033a4:	2201      	movs	r2, #1
 80033a6:	a802      	add	r0, sp, #8
 80033a8:	f00a fd1a 	bl	800dde0 <f_open>
	if (res) return res;
 80033ac:	4606      	mov	r6, r0
 80033ae:	b9e8      	cbnz	r0, 80033ec <BSP_Res_Load+0x54>

	uint32_t fsize = f_size(&file);
	uint32_t findex = 0;
	uint32_t fread = 0;

	if (fsize > resctx->resFree) return FR_DENIED;
 80033b0:	f508 5a80 	add.w	sl, r8, #4096	; 0x1000
	uint32_t fsize = f_size(&file);
 80033b4:	9d06      	ldr	r5, [sp, #24]
	uint32_t fread = 0;
 80033b6:	9001      	str	r0, [sp, #4]
	if (fsize > resctx->resFree) return FR_DENIED;
 80033b8:	f8da 3848 	ldr.w	r3, [sl, #2120]	; 0x848
 80033bc:	42ab      	cmp	r3, r5
 80033be:	d335      	bcc.n	800342c <BSP_Res_Load+0x94>

	// Calculating start address
	uint32_t startaddress = resctx->resAddr + resctx->resIndex;
 80033c0:	f8da 384c 	ldr.w	r3, [sl, #2124]	; 0x84c
 80033c4:	f8da 7840 	ldr.w	r7, [sl, #2112]	; 0x840
 80033c8:	441f      	add	r7, r3

	// Reading file into SDRAM
	while (findex < fsize) {
 80033ca:	b1b5      	cbz	r5, 80033fa <BSP_Res_Load+0x62>
	uint32_t findex = 0;
 80033cc:	4604      	mov	r4, r0
 80033ce:	e003      	b.n	80033d8 <BSP_Res_Load+0x40>
		res = f_read(&file, (uint8_t *)(startaddress + findex), 4096, (UINT *)&fread);
		if (res) return res;
		findex += fread;
 80033d0:	9b01      	ldr	r3, [sp, #4]
 80033d2:	441c      	add	r4, r3
	while (findex < fsize) {
 80033d4:	42a5      	cmp	r5, r4
 80033d6:	d90e      	bls.n	80033f6 <BSP_Res_Load+0x5e>
		res = f_read(&file, (uint8_t *)(startaddress + findex), 4096, (UINT *)&fread);
 80033d8:	19e1      	adds	r1, r4, r7
 80033da:	ab01      	add	r3, sp, #4
 80033dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033e0:	a802      	add	r0, sp, #8
 80033e2:	f00a ff03 	bl	800e1ec <f_read>
		if (res) return res;
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d0f2      	beq.n	80033d0 <BSP_Res_Load+0x38>
 80033ea:	4606      	mov	r6, r0

	// Closing file
	f_close(&file);

	return FR_OK;
}
 80033ec:	4630      	mov	r0, r6
 80033ee:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
 80033f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	resctx->resIndex += fsize;
 80033f6:	f8da 384c 	ldr.w	r3, [sl, #2124]	; 0x84c
 80033fa:	442b      	add	r3, r5
	resctx->items[id].addr = startaddress;
 80033fc:	f848 7039 	str.w	r7, [r8, r9, lsl #3]
	resctx->items[id].size = fsize;
 8003400:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
	f_close(&file);
 8003404:	a802      	add	r0, sp, #8
	resctx->resIndex &= 0xFFFFFFFC;
 8003406:	f023 0303 	bic.w	r3, r3, #3
	resctx->items[id].size = fsize;
 800340a:	f8c8 5004 	str.w	r5, [r8, #4]
	resctx->resIndex += 4;
 800340e:	3304      	adds	r3, #4
	resctx->resFree = resctx->resSize - resctx->resIndex;
 8003410:	f8da 2844 	ldr.w	r2, [sl, #2116]	; 0x844
 8003414:	1ad2      	subs	r2, r2, r3
	resctx->resIndex += 4;
 8003416:	f8ca 384c 	str.w	r3, [sl, #2124]	; 0x84c
	resctx->resFree = resctx->resSize - resctx->resIndex;
 800341a:	f8ca 2848 	str.w	r2, [sl, #2120]	; 0x848
	f_close(&file);
 800341e:	f00b f915 	bl	800e64c <f_close>
}
 8003422:	4630      	mov	r0, r6
 8003424:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
 8003428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fsize > resctx->resFree) return FR_DENIED;
 800342c:	2607      	movs	r6, #7
}
 800342e:	4630      	mov	r0, r6
 8003430:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
 8003434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003438 <BSP_Res_GetAddr>:


uint32_t BSP_Res_GetAddr(ResCtx_TypeDef *resctx, uint16_t id) {
	return resctx->items[id].addr;
}
 8003438:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop

08003440 <BSP_Res_GetSize>:

uint32_t BSP_Res_GetSize(ResCtx_TypeDef *resctx, uint16_t id) {
	return resctx->items[id].size;
 8003440:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8003444:	6848      	ldr	r0, [r1, #4]
 8003446:	4770      	bx	lr

08003448 <BSP_SDCARD_Init>:
TxRxContext_TypeDef	hsdcardctx = {0};



uint8_t BSP_SDCARD_Init() {
	if (BSP_STM32_SDMMC_Init(SDMMC2, &hsdcardctx)) return BSP_ERROR;
 8003448:	4904      	ldr	r1, [pc, #16]	; (800345c <BSP_SDCARD_Init+0x14>)
 800344a:	4805      	ldr	r0, [pc, #20]	; (8003460 <BSP_SDCARD_Init+0x18>)
uint8_t BSP_SDCARD_Init() {
 800344c:	b508      	push	{r3, lr}
	if (BSP_STM32_SDMMC_Init(SDMMC2, &hsdcardctx)) return BSP_ERROR;
 800344e:	f005 fbd5 	bl	8008bfc <BSP_STM32_SDMMC_Init>
	return BSP_OK;
}
 8003452:	3800      	subs	r0, #0
 8003454:	bf18      	it	ne
 8003456:	2001      	movne	r0, #1
 8003458:	bd08      	pop	{r3, pc}
 800345a:	bf00      	nop
 800345c:	24000318 	.word	0x24000318
 8003460:	48022400 	.word	0x48022400

08003464 <BSP_SDCARD_ReadBlocks>:

uint8_t BSP_SDCARD_ReadBlocks(uint8_t * pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	4614      	mov	r4, r2
 8003468:	b082      	sub	sp, #8
 800346a:	460b      	mov	r3, r1
	if (BSP_STM32_SDMMC_ReadBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 800346c:	4602      	mov	r2, r0
 800346e:	490b      	ldr	r1, [pc, #44]	; (800349c <BSP_SDCARD_ReadBlocks+0x38>)
 8003470:	480b      	ldr	r0, [pc, #44]	; (80034a0 <BSP_SDCARD_ReadBlocks+0x3c>)
 8003472:	9400      	str	r4, [sp, #0]
 8003474:	f005 fece 	bl	8009214 <BSP_STM32_SDMMC_ReadBlocks>
 8003478:	b958      	cbnz	r0, 8003492 <BSP_SDCARD_ReadBlocks+0x2e>
 800347a:	4606      	mov	r6, r0
	//Wait until operation finish
	while(!(BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER)) {}
 800347c:	4d07      	ldr	r5, [pc, #28]	; (800349c <BSP_SDCARD_ReadBlocks+0x38>)
 800347e:	4c08      	ldr	r4, [pc, #32]	; (80034a0 <BSP_SDCARD_ReadBlocks+0x3c>)
 8003480:	4629      	mov	r1, r5
 8003482:	4620      	mov	r0, r4
 8003484:	f005 fbac 	bl	8008be0 <BSP_STM32_SDMMC_GetCardState>
 8003488:	2804      	cmp	r0, #4
 800348a:	d1f9      	bne.n	8003480 <BSP_SDCARD_ReadBlocks+0x1c>
	return BSP_OK;
}
 800348c:	4630      	mov	r0, r6
 800348e:	b002      	add	sp, #8
 8003490:	bd70      	pop	{r4, r5, r6, pc}
	if (BSP_STM32_SDMMC_ReadBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 8003492:	2601      	movs	r6, #1
}
 8003494:	4630      	mov	r0, r6
 8003496:	b002      	add	sp, #8
 8003498:	bd70      	pop	{r4, r5, r6, pc}
 800349a:	bf00      	nop
 800349c:	24000318 	.word	0x24000318
 80034a0:	48022400 	.word	0x48022400

080034a4 <BSP_SDCARD_WriteBlocks>:

uint8_t BSP_SDCARD_WriteBlocks(uint8_t * pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4614      	mov	r4, r2
 80034a8:	b082      	sub	sp, #8
 80034aa:	460b      	mov	r3, r1
	if (BSP_STM32_SDMMC_WriteBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 80034ac:	4602      	mov	r2, r0
 80034ae:	490b      	ldr	r1, [pc, #44]	; (80034dc <BSP_SDCARD_WriteBlocks+0x38>)
 80034b0:	480b      	ldr	r0, [pc, #44]	; (80034e0 <BSP_SDCARD_WriteBlocks+0x3c>)
 80034b2:	9400      	str	r4, [sp, #0]
 80034b4:	f005 ff30 	bl	8009318 <BSP_STM32_SDMMC_WriteBlocks>
 80034b8:	b958      	cbnz	r0, 80034d2 <BSP_SDCARD_WriteBlocks+0x2e>
 80034ba:	4606      	mov	r6, r0
	//Wait until operation finish
	while(!(BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER)) {}
 80034bc:	4d07      	ldr	r5, [pc, #28]	; (80034dc <BSP_SDCARD_WriteBlocks+0x38>)
 80034be:	4c08      	ldr	r4, [pc, #32]	; (80034e0 <BSP_SDCARD_WriteBlocks+0x3c>)
 80034c0:	4629      	mov	r1, r5
 80034c2:	4620      	mov	r0, r4
 80034c4:	f005 fb8c 	bl	8008be0 <BSP_STM32_SDMMC_GetCardState>
 80034c8:	2804      	cmp	r0, #4
 80034ca:	d1f9      	bne.n	80034c0 <BSP_SDCARD_WriteBlocks+0x1c>
	return BSP_OK;
}
 80034cc:	4630      	mov	r0, r6
 80034ce:	b002      	add	sp, #8
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
	if (BSP_STM32_SDMMC_WriteBlocks(SDMMC2, &hsdcardctx, pData, BlockAdd, NumberOfBlocks)) return BSP_ERROR;
 80034d2:	2601      	movs	r6, #1
}
 80034d4:	4630      	mov	r0, r6
 80034d6:	b002      	add	sp, #8
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
 80034da:	bf00      	nop
 80034dc:	24000318 	.word	0x24000318
 80034e0:	48022400 	.word	0x48022400

080034e4 <BSP_SDCARD_GetBlockNo>:

uint32_t BSP_SDCARD_GetBlockNo() {
	SDMMCContext_TypeDef * sdcardctx = (SDMMCContext_TypeDef *)hsdcardctx.ctxmem;
	return sdcardctx->SDCardLogBlockNbr;
 80034e4:	4b01      	ldr	r3, [pc, #4]	; (80034ec <BSP_SDCARD_GetBlockNo+0x8>)
}
 80034e6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	24000318 	.word	0x24000318

080034f0 <BSP_SDCARD_GetBlockSize>:

uint16_t BSP_SDCARD_GetBlockSize() {
	SDMMCContext_TypeDef * sdcardctx = (SDMMCContext_TypeDef *)hsdcardctx.ctxmem;
	return (uint16_t)sdcardctx->SDCardLogBlockSize;
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <BSP_SDCARD_GetBlockSize+0x8>)
}
 80034f2:	f8b3 0064 	ldrh.w	r0, [r3, #100]	; 0x64
 80034f6:	4770      	bx	lr
 80034f8:	24000318 	.word	0x24000318

080034fc <BSP_SDCARD_GetCardState>:

uint8_t BSP_SDCARD_GetCardState() {
	if (BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER) return BSP_OK;
 80034fc:	4904      	ldr	r1, [pc, #16]	; (8003510 <BSP_SDCARD_GetCardState+0x14>)
 80034fe:	4805      	ldr	r0, [pc, #20]	; (8003514 <BSP_SDCARD_GetCardState+0x18>)
uint8_t BSP_SDCARD_GetCardState() {
 8003500:	b508      	push	{r3, lr}
	if (BSP_STM32_SDMMC_GetCardState(SDMMC2, &hsdcardctx) == SDMMC_CARD_TRANSFER) return BSP_OK;
 8003502:	f005 fb6d 	bl	8008be0 <BSP_STM32_SDMMC_GetCardState>
	return BSP_ERROR;
}
 8003506:	3804      	subs	r0, #4
 8003508:	bf18      	it	ne
 800350a:	2001      	movne	r0, #1
 800350c:	bd08      	pop	{r3, pc}
 800350e:	bf00      	nop
 8003510:	24000318 	.word	0x24000318
 8003514:	48022400 	.word	0x48022400

08003518 <BSP_SDRAM_Init>:
 *******************************************************************/

#include "BSP_SDRAM.h"

// Configuring SDRAM on the board
uint8_t	BSP_SDRAM_Init(uint32_t Freq) {
 8003518:	b508      	push	{r3, lr}
	// Freq in MHz

	// Init SDRAM
	if (BSP_DRV_SDRAM_Init(FMC_SDRAM_DEVICE, FMC_SDRAM_BANK1, FMC_SDRAM_CLOCK_PERIOD_2, Freq)) return BSP_ERROR;
 800351a:	f44f 6200 	mov.w	r2, #2048	; 0x800
uint8_t	BSP_SDRAM_Init(uint32_t Freq) {
 800351e:	4603      	mov	r3, r0
	if (BSP_DRV_SDRAM_Init(FMC_SDRAM_DEVICE, FMC_SDRAM_BANK1, FMC_SDRAM_CLOCK_PERIOD_2, Freq)) return BSP_ERROR;
 8003520:	2100      	movs	r1, #0
 8003522:	4803      	ldr	r0, [pc, #12]	; (8003530 <BSP_SDRAM_Init+0x18>)
 8003524:	f7fd f9e8 	bl	80008f8 <BSP_DRV_SDRAM_Init>

	return BSP_OK;
}
 8003528:	3800      	subs	r0, #0
 800352a:	bf18      	it	ne
 800352c:	2001      	movne	r0, #1
 800352e:	bd08      	pop	{r3, pc}
 8003530:	52004140 	.word	0x52004140

08003534 <BSP_STM32_MPU_Init>:

__IO static uint32_t tickvalue = 0;
__IO static uint32_t tickfrequency = 1;


uint8_t BSP_STM32_MPU_Init(void) {
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	MPU_Region_TypeDef MPU_InitStruct = {0};
 8003538:	2400      	movs	r4, #0
uint8_t BSP_STM32_MPU_Init(void) {
 800353a:	b084      	sub	sp, #16

	// 0x00: CONFIGURING MPU FOR ALL ADDRESS SPACE (4GB) TO AVOID INCORRECT SPECULATIVE READ
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
	MPU_InitStruct.BaseAddress = 0x00000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800353c:	f240 1501 	movw	r5, #257	; 0x101

	// 0x01: CONFIGURING MPU FOR ITCMRAM (0x00000000, 64kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
	MPU_InitStruct.BaseAddress = 0x00000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8003540:	4f5f      	ldr	r7, [pc, #380]	; (80036c0 <BSP_STM32_MPU_Init+0x18c>)

	// 0x02: CONFIGURING MPU FOR FLASH (0x08000000, 512kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
	MPU_InitStruct.BaseAddress = 0x08000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003542:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80036e8 <BSP_STM32_MPU_Init+0x1b4>

	// 0x03: CONFIGURING MPU FOR DTCMRAM (0x20000000, 128kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
	MPU_InitStruct.BaseAddress = 0x20000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8003546:	f04f 3601 	mov.w	r6, #16843009	; 0x1010101
 800354a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80036ec <BSP_STM32_MPU_Init+0x1b8>

	// 0x04: CONFIGURING MPU FOR OS_RAM + APP_RAM (0x24000000, 512kB)
	// 0x05: CONFIGURING MPU FOR OS_RAM (0x24000000, 128kB) - Restricting access to first 128kB
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
	MPU_InitStruct.BaseAddress = 0x24000000;
 800354e:	f04f 5a10 	mov.w	sl, #603979776	; 0x24000000
	MPU_Region_TypeDef MPU_InitStruct = {0};
 8003552:	e9cd 4400 	strd	r4, r4, [sp]
 8003556:	e9cd 4402 	strd	r4, r4, [sp, #8]
	BSP_STM32_MPU_Disable();
 800355a:	f002 fab5 	bl	8005ac8 <BSP_STM32_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800355e:	2301      	movs	r3, #1
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003560:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003562:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003564:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003568:	f248 731f 	movw	r3, #34591	; 0x871f
	MPU_InitStruct.BaseAddress = 0x00000000;
 800356c:	9401      	str	r4, [sp, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800356e:	9302      	str	r3, [sp, #8]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003570:	f002 fab8 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <BSP_STM32_MPU_Init+0x190>)
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003576:	4668      	mov	r0, sp
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003578:	f8ad 5000 	strh.w	r5, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800357c:	9703      	str	r7, [sp, #12]
 800357e:	e9cd 4301 	strd	r4, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003582:	f002 faaf 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003586:	f240 2301 	movw	r3, #513	; 0x201
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800358a:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800358c:	9703      	str	r7, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800358e:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003592:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003596:	e9cd 3801 	strd	r3, r8, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800359a:	f002 faa3 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800359e:	f240 3301 	movw	r3, #769	; 0x301
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035a2:	4668      	mov	r0, sp
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035a4:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.BaseAddress = 0x20000000;
 80035a8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80035ac:	e9cd 9602 	strd	r9, r6, [sp, #8]
	MPU_InitStruct.BaseAddress = 0x20000000;
 80035b0:	9301      	str	r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035b2:	f002 fa97 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035b6:	f240 4301 	movw	r3, #1025	; 0x401
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035ba:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80035bc:	9603      	str	r6, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035be:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80035c2:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <BSP_STM32_MPU_Init+0x194>)
	MPU_InitStruct.BaseAddress = 0x24000000;
 80035c4:	f8cd a004 	str.w	sl, [sp, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80035c8:	9302      	str	r3, [sp, #8]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035ca:	f002 fa8b 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035ce:	f240 5301 	movw	r3, #1281	; 0x501
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035d2:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80035d4:	9603      	str	r6, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035d6:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80035da:	e9cd a901 	strd	sl, r9, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035de:	f002 fa81 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>

	// 0x06: CONFIGURING MPU FOR SND_RAM (0x30040000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035e2:	f240 6301 	movw	r3, #1537	; 0x601
	MPU_InitStruct.Number = MPU_REGION_NUMBER6;
	MPU_InitStruct.BaseAddress = 0x30040000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80035e6:	9603      	str	r6, [sp, #12]
 80035e8:	3ef3      	subs	r6, #243	; 0xf3
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035ea:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035ee:	4668      	mov	r0, sp
	MPU_InitStruct.BaseAddress = 0x30040000;
 80035f0:	4b36      	ldr	r3, [pc, #216]	; (80036cc <BSP_STM32_MPU_Init+0x198>)
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80035f2:	9602      	str	r6, [sp, #8]
	MPU_InitStruct.BaseAddress = 0x30040000;
 80035f4:	9301      	str	r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035f6:	f002 fa75 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>

	// 0x07: CONFIGURING MPU FOR BUF_RAM (0x38000000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035fa:	f240 7301 	movw	r3, #1793	; 0x701
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80035fe:	4668      	mov	r0, sp
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003600:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.BaseAddress = 0x38000000;
 8003604:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8003608:	e9cd 6502 	strd	r6, r5, [sp, #8]
	MPU_InitStruct.BaseAddress = 0x38000000;
 800360c:	9301      	str	r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800360e:	f002 fa69 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>

	// 0x08: CONFIGURING MPU FOR SH_RAM (0x38008000, 32kB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003612:	f640 0301 	movw	r3, #2049	; 0x801
	MPU_InitStruct.Number = MPU_REGION_NUMBER8;
	MPU_InitStruct.BaseAddress = 0x38008000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8003616:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <BSP_STM32_MPU_Init+0x19c>)
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003618:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800361a:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800361c:	f8ad 3000 	strh.w	r3, [sp]

	// 0x0B: CONFIGURING MPU FOR APP_FLASH (0x90000000, 16MB)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER11;
	MPU_InitStruct.BaseAddress = 0x90000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003620:	f04f 4610 	mov.w	r6, #2415919104	; 0x90000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <BSP_STM32_MPU_Init+0x1a0>)
 8003626:	e9cd 2301 	strd	r2, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800362a:	f002 fa5b 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800362e:	f640 1301 	movw	r3, #2305	; 0x901
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 8003632:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003636:	4668      	mov	r0, sp
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003638:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 800363c:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <BSP_STM32_MPU_Init+0x1a4>)
 800363e:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003640:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 8003644:	e9cd 1301 	strd	r1, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003648:	f002 fa4c 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800364c:	f640 2301 	movw	r3, #2561	; 0xa01
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003650:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003652:	f8cd 8008 	str.w	r8, [sp, #8]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003656:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.BaseAddress = 0x40000000;
 800365a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800365e:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.BaseAddress = 0x40000000;
 8003660:	9301      	str	r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003662:	f002 fa3f 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003666:	f640 3301 	movw	r3, #2817	; 0xb01
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800366a:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800366c:	9703      	str	r7, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800366e:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <BSP_STM32_MPU_Init+0x1a8>)
 8003674:	e9cd 6301 	strd	r6, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003678:	f002 fa34 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>

	// 0x0C: CONFIGURING MPU FOR APP_SDRAM + VIDEO_SDRAM (0xC0000000, 64MB) - General use memory
	// 0x0D: CONFIGURING MPU FOR VIDEO_SDRAM (0xC3000000, 16MB) - restricting access to last 16MB for Video Memory
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	MPU_InitStruct.Number = MPU_REGION_NUMBER12;
	MPU_InitStruct.BaseAddress = 0xC0000000;
 800367c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003680:	f640 4201 	movw	r2, #3073	; 0xc01
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003684:	4668      	mov	r0, sp
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8003686:	9301      	str	r3, [sp, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <BSP_STM32_MPU_Init+0x1ac>)
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800368a:	f8ad 2000 	strh.w	r2, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800368e:	9302      	str	r3, [sp, #8]
 8003690:	9503      	str	r5, [sp, #12]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 8003692:	f002 fa27 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003696:	f640 5301 	movw	r3, #3329	; 0xd01
	MPU_InitStruct.Number = MPU_REGION_NUMBER13;
	MPU_InitStruct.BaseAddress = 0xC3000000;
 800369a:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	MPU_InitStruct.SubRegionDisable = 0x00;
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 800369e:	4668      	mov	r0, sp
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80036a0:	9503      	str	r5, [sp, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036a2:	f8ad 3000 	strh.w	r3, [sp]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <BSP_STM32_MPU_Init+0x1b0>)
 80036a8:	e9cd 2301 	strd	r2, r3, [sp, #4]
	BSP_STM32_MPU_ConfigRegion(&MPU_InitStruct);
 80036ac:	f002 fa1a 	bl	8005ae4 <BSP_STM32_MPU_ConfigRegion>

	// Enables the MPU
	BSP_STM32_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80036b0:	2004      	movs	r0, #4
 80036b2:	f002 f9f7 	bl	8005aa4 <BSP_STM32_MPU_Enable>

	return BSP_OK;
}
 80036b6:	4620      	mov	r0, r4
 80036b8:	b004      	add	sp, #16
 80036ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036be:	bf00      	nop
 80036c0:	00010100 	.word	0x00010100
 80036c4:	0100000f 	.word	0x0100000f
 80036c8:	03010012 	.word	0x03010012
 80036cc:	30040000 	.word	0x30040000
 80036d0:	38008000 	.word	0x38008000
 80036d4:	0201000e 	.word	0x0201000e
 80036d8:	0101000b 	.word	0x0101000b
 80036dc:	02000017 	.word	0x02000017
 80036e0:	03000019 	.word	0x03000019
 80036e4:	01000017 	.word	0x01000017
 80036e8:	01000012 	.word	0x01000012
 80036ec:	01010010 	.word	0x01010010

080036f0 <BSP_STM32_Init_SysClocks>:


uint8_t BSP_STM32_Init_SysClocks(void) {
 80036f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036f4:	b089      	sub	sp, #36	; 0x24

	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036f6:	4f59      	ldr	r7, [pc, #356]	; (800385c <BSP_STM32_Init_SysClocks+0x16c>)
 80036f8:	f005 f96a 	bl	80089d0 <BSP_STM32_RCC_GetSysClockFreq>
 80036fc:	4b58      	ldr	r3, [pc, #352]	; (8003860 <BSP_STM32_Init_SysClocks+0x170>)
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036fe:	4c59      	ldr	r4, [pc, #356]	; (8003864 <BSP_STM32_Init_SysClocks+0x174>)
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003700:	699a      	ldr	r2, [r3, #24]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003702:	699b      	ldr	r3, [r3, #24]
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003704:	f3c2 2203 	ubfx	r2, r2, #8, #4
	SystemCoreClock = common_system_clock;
 8003708:	4e57      	ldr	r6, [pc, #348]	; (8003868 <BSP_STM32_Init_SysClocks+0x178>)
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800370a:	f003 030f 	and.w	r3, r3, #15
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800370e:	5cba      	ldrb	r2, [r7, r2]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003710:	5cfb      	ldrb	r3, [r7, r3]
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003712:	f002 021f 	and.w	r2, r2, #31
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003716:	f003 031f 	and.w	r3, r3, #31
	uint32_t common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800371a:	40d0      	lsrs	r0, r2
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800371c:	fa20 f303 	lsr.w	r3, r0, r3
	SystemCoreClock = common_system_clock;
 8003720:	6030      	str	r0, [r6, #0]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003722:	6023      	str	r3, [r4, #0]
uint8_t BSP_TickInit(uint32_t CoreClock, uint32_t TickFreq, uint32_t TickPriority) {

	if (TickFreq == 0) return BSP_ERROR;

	// Set SysTick frequency
	if (SysTick_Config(CoreClock / (1000UL / TickFreq))) return BSP_ERROR;
 8003724:	4b51      	ldr	r3, [pc, #324]	; (800386c <BSP_STM32_Init_SysClocks+0x17c>)
 8003726:	fba3 2300 	umull	r2, r3, r3, r0
 800372a:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800372c:	3b01      	subs	r3, #1
 800372e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003732:	d212      	bcs.n	800375a <BSP_STM32_Init_SysClocks+0x6a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003734:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003738:	20f0      	movs	r0, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800373a:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373c:	614b      	str	r3, [r1, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <BSP_STM32_Init_SysClocks+0x180>)
 8003740:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003744:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003746:	618a      	str	r2, [r1, #24]
	tickfrequency = TickFreq;

	// Set SysTick priority
	if (TickPriority > (1UL << __NVIC_PRIO_BITS)) return BSP_ERROR;
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374c:	610b      	str	r3, [r1, #16]
	tickfrequency = TickFreq;
 800374e:	2101      	movs	r1, #1
 8003750:	4b48      	ldr	r3, [pc, #288]	; (8003874 <BSP_STM32_Init_SysClocks+0x184>)
 8003752:	6019      	str	r1, [r3, #0]
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003754:	2110      	movs	r1, #16
 8003756:	f002 f94f 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 800375a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8003860 <BSP_STM32_Init_SysClocks+0x170>
	BSP_STM32_PWR_ConfigSupply(PWR_SMPS_1V8_SUPPLIES_LDO);
 800375e:	2016      	movs	r0, #22
	BSP_STM32_RCC_ConfigPLL1(RCC_PLL_ON, RCC_PLLSOURCE_HSE, RCC_PLL1VCIRANGE_2, RCC_PLL1VCOWIDE, 5, 192, 2, 16, 2);
 8003760:	f04f 0902 	mov.w	r9, #2
 8003764:	2510      	movs	r5, #16
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 8003766:	f8d8 30f4 	ldr.w	r3, [r8, #244]	; 0xf4
 800376a:	f043 0302 	orr.w	r3, r3, #2
 800376e:	f8c8 30f4 	str.w	r3, [r8, #244]	; 0xf4
 8003772:	f8d8 30f4 	ldr.w	r3, [r8, #244]	; 0xf4
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	9307      	str	r3, [sp, #28]
 800377c:	9b07      	ldr	r3, [sp, #28]
	BSP_STM32_PWR_ConfigSupply(PWR_SMPS_1V8_SUPPLIES_LDO);
 800377e:	f004 fab7 	bl	8007cf0 <BSP_STM32_PWR_ConfigSupply>
	BSP_STM32_PWR_VoltageScalingConfig(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003782:	2000      	movs	r0, #0
 8003784:	f004 fb08 	bl	8007d98 <BSP_STM32_PWR_VoltageScalingConfig>
	BSP_STM32_PWR_WaitForVOSRDY();
 8003788:	f004 fb46 	bl	8007e18 <BSP_STM32_PWR_WaitForVOSRDY>
	BSP_STM32_PWR_EnableBkUpAccess();
 800378c:	f004 fb5a 	bl	8007e44 <BSP_STM32_PWR_EnableBkUpAccess>
	BSP_STM32_RCC_LSEConfigDrive(RCC_LSEDRIVE_MEDIUMHIGH);
 8003790:	2010      	movs	r0, #16
 8003792:	f004 fdad 	bl	80082f0 <BSP_STM32_RCC_LSEConfigDrive>
	BSP_STM32_RCC_PLLClockSource(RCC_PLLSOURCE_HSE);
 8003796:	2002      	movs	r0, #2
 8003798:	f004 fd9e 	bl	80082d8 <BSP_STM32_RCC_PLLClockSource>
	BSP_STM32_RCC_ConfigHSE(RCC_HSE_BYPASS);
 800379c:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 80037a0:	f004 fdb2 	bl	8008308 <BSP_STM32_RCC_ConfigHSE>
	BSP_STM32_RCC_ConfigHSI(RCC_HSI_DIV1, RCC_HSICALIBRATION_DEFAULT);
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	2001      	movs	r0, #1
 80037a8:	f004 fe0e 	bl	80083c8 <BSP_STM32_RCC_ConfigHSI>
	BSP_STM32_RCC_ConfigLSE(RCC_LSE_ON);
 80037ac:	2001      	movs	r0, #1
 80037ae:	f004 fe63 	bl	8008478 <BSP_STM32_RCC_ConfigLSE>
	BSP_STM32_RCC_ConfigHSI48(RCC_HSI48_ON);
 80037b2:	2001      	movs	r0, #1
 80037b4:	f004 fec2 	bl	800853c <BSP_STM32_RCC_ConfigHSI48>
	BSP_STM32_RCC_ConfigPLL1(RCC_PLL_ON, RCC_PLLSOURCE_HSE, RCC_PLL1VCIRANGE_2, RCC_PLL1VCOWIDE, 5, 192, 2, 16, 2);
 80037b8:	2305      	movs	r3, #5
 80037ba:	22c0      	movs	r2, #192	; 0xc0
 80037bc:	4649      	mov	r1, r9
 80037be:	4648      	mov	r0, r9
 80037c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80037c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80037c8:	9503      	str	r5, [sp, #12]
 80037ca:	e9cd 3200 	strd	r3, r2, [sp]
 80037ce:	2300      	movs	r3, #0
 80037d0:	2208      	movs	r2, #8
 80037d2:	f004 fedd 	bl	8008590 <BSP_STM32_RCC_ConfigPLL1>
	BSP_STM32_RCC_ClockConfig(clocktype, RCC_SYSCLKSOURCE_PLLCLK, RCC_SYSCLK_DIV1, RCC_HCLK_DIV2, RCC_APB1_DIV2, RCC_APB2_DIV2, RCC_APB3_DIV2, RCC_APB4_DIV2, FLASH_LATENCY_2);
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	2200      	movs	r2, #0
 80037da:	2103      	movs	r1, #3
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	203f      	movs	r0, #63	; 0x3f
 80037e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80037e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80037e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	2308      	movs	r3, #8
 80037f0:	f004 ffdc 	bl	80087ac <BSP_STM32_RCC_ClockConfig>
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037f4:	f005 f8ec 	bl	80089d0 <BSP_STM32_RCC_GetSysClockFreq>
 80037f8:	f8d8 3018 	ldr.w	r3, [r8, #24]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037fc:	f8d8 2018 	ldr.w	r2, [r8, #24]
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003800:	f3c3 2303 	ubfx	r3, r3, #8, #4
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003804:	f002 020f 	and.w	r2, r2, #15
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003808:	5cfb      	ldrb	r3, [r7, r3]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800380a:	5cba      	ldrb	r2, [r7, r2]
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800380c:	f003 031f 	and.w	r3, r3, #31
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003810:	f002 021f 	and.w	r2, r2, #31
	common_system_clock = BSP_STM32_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003814:	40d8      	lsrs	r0, r3
	if (SysTick_Config(CoreClock / (1000UL / TickFreq))) return BSP_ERROR;
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <BSP_STM32_Init_SysClocks+0x17c>)
 8003818:	fba3 1300 	umull	r1, r3, r3, r0
	SystemCoreClock = common_system_clock;
 800381c:	6030      	str	r0, [r6, #0]
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800381e:	40d0      	lsrs	r0, r2
	if (SysTick_Config(CoreClock / (1000UL / TickFreq))) return BSP_ERROR;
 8003820:	099b      	lsrs	r3, r3, #6
	SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003822:	6020      	str	r0, [r4, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003824:	3b01      	subs	r3, #1
 8003826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800382a:	d212      	bcs.n	8003852 <BSP_STM32_Init_SysClocks+0x162>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800382c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003830:	4c0f      	ldr	r4, [pc, #60]	; (8003870 <BSP_STM32_Init_SysClocks+0x180>)
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003832:	2200      	movs	r2, #0
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003834:	4629      	mov	r1, r5
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003836:	6143      	str	r3, [r0, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	23f0      	movs	r3, #240	; 0xf0
 800383a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383e:	2407      	movs	r4, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003840:	6182      	str	r2, [r0, #24]
	tickfrequency = TickFreq;
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <BSP_STM32_Init_SysClocks+0x184>)
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003844:	6104      	str	r4, [r0, #16]
 8003846:	2401      	movs	r4, #1
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
	tickfrequency = TickFreq;
 800384c:	601c      	str	r4, [r3, #0]
	BSP_STM32_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800384e:	f002 f8d3 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
}
 8003852:	2000      	movs	r0, #0
 8003854:	b009      	add	sp, #36	; 0x24
 8003856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800385a:	bf00      	nop
 800385c:	08015a54 	.word	0x08015a54
 8003860:	58024400 	.word	0x58024400
 8003864:	24000020 	.word	0x24000020
 8003868:	2400001c 	.word	0x2400001c
 800386c:	10624dd3 	.word	0x10624dd3
 8003870:	e000ed00 	.word	0xe000ed00
 8003874:	24000000 	.word	0x24000000

08003878 <BSP_STM32_Init_PeriphClocks>:
uint8_t BSP_STM32_Init_PeriphClocks(void) {
 8003878:	b510      	push	{r4, lr}
	BSP_STM32_RCC_ConfigPLL3(RCC_PLL3VCIRANGE_2, RCC_PLL3VCOMEDIUM, 5, 30, 2, 2, 10, 0);
 800387a:	2000      	movs	r0, #0
uint8_t BSP_STM32_Init_PeriphClocks(void) {
 800387c:	b09e      	sub	sp, #120	; 0x78
	BSP_STM32_RCC_ConfigPLL3(RCC_PLL3VCIRANGE_2, RCC_PLL3VCOMEDIUM, 5, 30, 2, 2, 10, 0);
 800387e:	210a      	movs	r1, #10
 8003880:	2402      	movs	r4, #2
 8003882:	231e      	movs	r3, #30
 8003884:	2205      	movs	r2, #5
 8003886:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800388a:	e9cd 4400 	strd	r4, r4, [sp]
 800388e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003892:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003896:	f004 ff0b 	bl	80086b0 <BSP_STM32_RCC_ConfigPLL3>
	BSP_STM32_RCC_CLKConfig_ADC();
 800389a:	f004 fd0f 	bl	80082bc <BSP_STM32_RCC_CLKConfig_ADC>
	BSP_STM32_RCC_CLKConfig_LTDC();
 800389e:	f004 fd19 	bl	80082d4 <BSP_STM32_RCC_CLKConfig_LTDC>
    if (BSP_STM32_RCC_CLKConfig_RTC()) return BSP_ERROR;
 80038a2:	f004 fc7b 	bl	800819c <BSP_STM32_RCC_CLKConfig_RTC>
 80038a6:	b110      	cbz	r0, 80038ae <BSP_STM32_Init_PeriphClocks+0x36>
 80038a8:	2001      	movs	r0, #1
}
 80038aa:	b01e      	add	sp, #120	; 0x78
 80038ac:	bd10      	pop	{r4, pc}
    __BSP_RCC_RTC_ENABLE();
 80038ae:	4cb6      	ldr	r4, [pc, #728]	; (8003b88 <BSP_STM32_Init_PeriphClocks+0x310>)
    if (BSP_STM32_RTC_Init(RTC, 127, 255)) return BSP_ERROR;
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	217f      	movs	r1, #127	; 0x7f
 80038b4:	48b5      	ldr	r0, [pc, #724]	; (8003b8c <BSP_STM32_Init_PeriphClocks+0x314>)
    __BSP_RCC_RTC_ENABLE();
 80038b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80038b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038bc:	6723      	str	r3, [r4, #112]	; 0x70
    if (BSP_STM32_RTC_Init(RTC, 127, 255)) return BSP_ERROR;
 80038be:	f005 f92b 	bl	8008b18 <BSP_STM32_RTC_Init>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d1f0      	bne.n	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
	__BSP_RCC_SYSCFG_CLK_ENABLE();
 80038c6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80038ca:	f043 0302 	orr.w	r3, r3, #2
 80038ce:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80038d2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	9304      	str	r3, [sp, #16]
 80038dc:	9b04      	ldr	r3, [sp, #16]
	__BSP_RCC_GPIOA_CLK_ENABLE();
 80038de:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80038ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	9305      	str	r3, [sp, #20]
 80038f4:	9b05      	ldr	r3, [sp, #20]
	__BSP_RCC_GPIOB_CLK_ENABLE();
 80038f6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003902:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	9306      	str	r3, [sp, #24]
 800390c:	9b06      	ldr	r3, [sp, #24]
	__BSP_RCC_GPIOC_CLK_ENABLE();
 800390e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800391a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	9307      	str	r3, [sp, #28]
 8003924:	9b07      	ldr	r3, [sp, #28]
	__BSP_RCC_GPIOD_CLK_ENABLE();
 8003926:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800392a:	f043 0308 	orr.w	r3, r3, #8
 800392e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003932:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	9308      	str	r3, [sp, #32]
 800393c:	9b08      	ldr	r3, [sp, #32]
	__BSP_RCC_GPIOE_CLK_ENABLE();
 800393e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003942:	f043 0310 	orr.w	r3, r3, #16
 8003946:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800394a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	9309      	str	r3, [sp, #36]	; 0x24
 8003954:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__BSP_RCC_GPIOF_CLK_ENABLE();
 8003956:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800395a:	f043 0320 	orr.w	r3, r3, #32
 800395e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003962:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	930a      	str	r3, [sp, #40]	; 0x28
 800396c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__BSP_RCC_GPIOG_CLK_ENABLE();
 800396e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003976:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800397a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	930b      	str	r3, [sp, #44]	; 0x2c
 8003984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__BSP_RCC_GPIOH_CLK_ENABLE();
 8003986:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800398a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003992:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	930c      	str	r3, [sp, #48]	; 0x30
 800399c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__BSP_RCC_GPIOI_CLK_ENABLE();
 800399e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80039aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	930d      	str	r3, [sp, #52]	; 0x34
 80039b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	if (BSP_STM32_RCC_CLKConfig_FMC()) return BSP_ERROR;
 80039b6:	f004 fc35 	bl	8008224 <BSP_STM32_RCC_CLKConfig_FMC>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	f47f af74 	bne.w	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
	__BSP_RCC_FMC_CLK_ENABLE();
 80039c0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 80039c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039c8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 80039cc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 80039d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d4:	930e      	str	r3, [sp, #56]	; 0x38
 80039d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	__BSP_RCC_LTDC_CLK_ENABLE();
 80039d8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80039dc:	f043 0308 	orr.w	r3, r3, #8
 80039e0:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80039e4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80039ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    __BSP_RCC_DMA2D_CLK_ENABLE();
 80039f0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 80039f4:	f043 0310 	orr.w	r3, r3, #16
 80039f8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 80039fc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	9310      	str	r3, [sp, #64]	; 0x40
 8003a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    __BSP_RCC_JPGDECEN_CLK_ENABLE();
 8003a08:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003a0c:	f043 0320 	orr.w	r3, r3, #32
 8003a10:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8003a14:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	9311      	str	r3, [sp, #68]	; 0x44
 8003a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    __BSP_RCC_DMA1_CLK_ENABLE();
 8003a20:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8003a2c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	9312      	str	r3, [sp, #72]	; 0x48
 8003a36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    __BSP_RCC_BDMA_CLK_ENABLE();
 8003a38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a40:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003a44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    __BSP_RCC_ADC12_CLK_ENABLE();
 8003a50:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003a54:	f043 0320 	orr.w	r3, r3, #32
 8003a58:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8003a5c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	9314      	str	r3, [sp, #80]	; 0x50
 8003a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
    if (BSP_STM32_RCC_CLKConfig_I2C1()) return BSP_ERROR;
 8003a68:	f004 fbde 	bl	8008228 <BSP_STM32_RCC_CLKConfig_I2C1>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	f47f af1b 	bne.w	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_I2C1_CLK_ENABLE();
 8003a72:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a7a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003a7e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a86:	9315      	str	r3, [sp, #84]	; 0x54
 8003a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
    if (BSP_STM32_RCC_CLKConfig_I2C4()) return BSP_ERROR;
 8003a8a:	f004 fbd7 	bl	800823c <BSP_STM32_RCC_CLKConfig_I2C4>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	f47f af0a 	bne.w	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_I2C4_CLK_ENABLE();
 8003a94:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003aa0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	9316      	str	r3, [sp, #88]	; 0x58
 8003aaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    if (BSP_STM32_RCC_CLKConfig_QSPI()) return BSP_ERROR;
 8003aac:	f004 fbd0 	bl	8008250 <BSP_STM32_RCC_CLKConfig_QSPI>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	f47f aef9 	bne.w	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_QSPI_CLK_ENABLE();
 8003ab6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003abe:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8003ac2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aca:	9317      	str	r3, [sp, #92]	; 0x5c
 8003acc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    if (BSP_STM32_RCC_CLKConfig_SDMMC2()) return BSP_ERROR;
 8003ace:	f004 fbc9 	bl	8008264 <BSP_STM32_RCC_CLKConfig_SDMMC2>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	f47f aee8 	bne.w	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_SDMMC2_CLK_ENABLE();
 8003ad8:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8003adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ae0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8003ae4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8003ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aec:	9318      	str	r3, [sp, #96]	; 0x60
 8003aee:	9b18      	ldr	r3, [sp, #96]	; 0x60
    __BSP_RCC_TIM2_CLK_ENABLE();
 8003af0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003afc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	9319      	str	r3, [sp, #100]	; 0x64
 8003b06:	9b19      	ldr	r3, [sp, #100]	; 0x64
    __BSP_RCC_TIM3_CLK_ENABLE();
 8003b08:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003b14:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    if (BSP_STM32_RCC_CLKConfig_UART5()) return BSP_ERROR;
 8003b20:	f004 fbae 	bl	8008280 <BSP_STM32_RCC_CLKConfig_UART5>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	f47f aebf 	bne.w	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_UART5_CLK_ENABLE();
 8003b2a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b32:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003b36:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    if (BSP_STM32_RCC_CLKConfig_USART2()) return BSP_ERROR;
 8003b42:	f004 fba7 	bl	8008294 <BSP_STM32_RCC_CLKConfig_USART2>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f47f aeae 	bne.w	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_USART2_CLK_ENABLE();
 8003b4c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8003b58:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	931c      	str	r3, [sp, #112]	; 0x70
 8003b62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    if (BSP_STM32_RCC_CLKConfig_USBFS()) return BSP_ERROR;
 8003b64:	f004 fba0 	bl	80082a8 <BSP_STM32_RCC_CLKConfig_USBFS>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	f47f ae9d 	bne.w	80038a8 <BSP_STM32_Init_PeriphClocks+0x30>
    __BSP_RCC_USB2_FS_CLK_ENABLE();
 8003b6e:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8003b72:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003b76:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 8003b7a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8003b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b82:	931d      	str	r3, [sp, #116]	; 0x74
 8003b84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
	return BSP_OK;
 8003b86:	e690      	b.n	80038aa <BSP_STM32_Init_PeriphClocks+0x32>
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	58004000 	.word	0x58004000

08003b90 <BSP_STM32_Init_NVIC>:
	BSP_STM32_NVIC_SetPriority(LTDC_IRQn, pp, sp);
 8003b90:	2200      	movs	r2, #0
 8003b92:	2058      	movs	r0, #88	; 0x58
uint8_t BSP_STM32_Init_NVIC(void) {
 8003b94:	b508      	push	{r3, lr}
	BSP_STM32_NVIC_SetPriority(LTDC_IRQn, pp, sp);
 8003b96:	4611      	mov	r1, r2
 8003b98:	f001 ff2e 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(LTDC_IRQn);
 8003b9c:	2058      	movs	r0, #88	; 0x58
 8003b9e:	f001 ff1d 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(DMA2D_IRQn, pp, sp);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	205a      	movs	r0, #90	; 0x5a
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	f001 ff26 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA2D_IRQn);
 8003bac:	205a      	movs	r0, #90	; 0x5a
 8003bae:	f001 ff15 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(DMA1_Stream1_IRQn, pp, sp);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	200c      	movs	r0, #12
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	f001 ff1e 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003bbc:	200c      	movs	r0, #12
 8003bbe:	f001 ff0d 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(DMA1_Stream2_IRQn, pp, sp);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	200d      	movs	r0, #13
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	f001 ff16 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003bcc:	200d      	movs	r0, #13
 8003bce:	f001 ff05 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(BDMA_Channel0_IRQn, pp, sp);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2081      	movs	r0, #129	; 0x81
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	f001 ff0e 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8003bdc:	2081      	movs	r0, #129	; 0x81
 8003bde:	f001 fefd 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(OTG_FS_IRQn, pp, sp);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2065      	movs	r0, #101	; 0x65
 8003be6:	4611      	mov	r1, r2
 8003be8:	f001 ff06 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003bec:	2065      	movs	r0, #101	; 0x65
 8003bee:	f001 fef5 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(I2C1_EV_IRQn, pp, sp);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2103      	movs	r1, #3
 8003bf6:	201f      	movs	r0, #31
 8003bf8:	f001 fefe 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003bfc:	201f      	movs	r0, #31
 8003bfe:	f001 feed 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(I2C4_EV_IRQn, pp, sp);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2103      	movs	r1, #3
 8003c06:	205f      	movs	r0, #95	; 0x5f
 8003c08:	f001 fef6 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8003c0c:	205f      	movs	r0, #95	; 0x5f
 8003c0e:	f001 fee5 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(USART2_IRQn, pp, sp);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2103      	movs	r1, #3
 8003c16:	2026      	movs	r0, #38	; 0x26
 8003c18:	f001 feee 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(USART2_IRQn);
 8003c1c:	2026      	movs	r0, #38	; 0x26
 8003c1e:	f001 fedd 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(EXTI15_10_IRQn, pp, sp); // Touch panel and MPU6050
 8003c22:	2200      	movs	r2, #0
 8003c24:	2104      	movs	r1, #4
 8003c26:	2028      	movs	r0, #40	; 0x28
 8003c28:	f001 fee6 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c2c:	2028      	movs	r0, #40	; 0x28
 8003c2e:	f001 fed5 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(EXTI9_5_IRQn, pp, sp); // BT Module
 8003c32:	2200      	movs	r2, #0
 8003c34:	2104      	movs	r1, #4
 8003c36:	2017      	movs	r0, #23
 8003c38:	f001 fede 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c3c:	2017      	movs	r0, #23
 8003c3e:	f001 fecd 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
    BSP_STM32_NVIC_SetPriority(TIM2_IRQn, pp, sp); // Timer for sampling joystick and keyboard
 8003c42:	2200      	movs	r2, #0
 8003c44:	2104      	movs	r1, #4
 8003c46:	201c      	movs	r0, #28
 8003c48:	f001 fed6 	bl	80059f8 <BSP_STM32_NVIC_SetPriority>
    BSP_STM32_NVIC_EnableIRQ(TIM2_IRQn);
 8003c4c:	201c      	movs	r0, #28
 8003c4e:	f001 fec5 	bl	80059dc <BSP_STM32_NVIC_EnableIRQ>
}
 8003c52:	2000      	movs	r0, #0
 8003c54:	bd08      	pop	{r3, pc}
 8003c56:	bf00      	nop

08003c58 <BSP_STM32_Init_GPIO>:
uint8_t BSP_STM32_Init_GPIO(void) {
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c5c:	f04f 0a03 	mov.w	sl, #3
uint8_t BSP_STM32_Init_GPIO(void) {
 8003c60:	b083      	sub	sp, #12
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c62:	250c      	movs	r5, #12
	BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c64:	4ff2      	ldr	r7, [pc, #968]	; (8004030 <BSP_STM32_Init_GPIO+0x3d8>)
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c66:	2300      	movs	r3, #0
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8003c6e:	48f1      	ldr	r0, [pc, #964]	; (8004034 <BSP_STM32_Init_GPIO+0x3dc>)
	BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c70:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 8004048 <BSP_STM32_Init_GPIO+0x3f0>
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003c74:	2400      	movs	r4, #0
	BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c76:	4ef0      	ldr	r6, [pc, #960]	; (8004038 <BSP_STM32_Init_GPIO+0x3e0>)
	BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c78:	f8df b3d0 	ldr.w	fp, [pc, #976]	; 800404c <BSP_STM32_Init_GPIO+0x3f4>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8003c7c:	f8df 83d0 	ldr.w	r8, [pc, #976]	; 8004050 <BSP_STM32_Init_GPIO+0x3f8>
	BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c80:	e9cd a500 	strd	sl, r5, [sp]
 8003c84:	f003 fa04 	bl	8007090 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8003c90:	48ea      	ldr	r0, [pc, #936]	; (800403c <BSP_STM32_Init_GPIO+0x3e4>)
 8003c92:	e9cd a500 	strd	sl, r5, [sp]
 8003c96:	f003 f9fb 	bl	8007090 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	e9cd a500 	strd	sl, r5, [sp]
 8003ca6:	f003 f9f3 	bl	8007090 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003caa:	2300      	movs	r3, #0
 8003cac:	2202      	movs	r2, #2
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	4648      	mov	r0, r9
 8003cb2:	e9cd a500 	strd	sl, r5, [sp]
 8003cb6:	f003 f9eb 	bl	8007090 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f248 1137 	movw	r1, #33079	; 0x8137
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	e9cd a500 	strd	sl, r5, [sp]
 8003cc8:	f003 f9e2 	bl	8007090 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f64f 7183 	movw	r1, #65411	; 0xff83
 8003cd4:	48da      	ldr	r0, [pc, #872]	; (8004040 <BSP_STM32_Init_GPIO+0x3e8>)
 8003cd6:	e9cd a500 	strd	sl, r5, [sp]
 8003cda:	f003 f9d9 	bl	8007090 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003cde:	4623      	mov	r3, r4
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8003ce6:	4658      	mov	r0, fp
 8003ce8:	e9cd a500 	strd	sl, r5, [sp]
 8003cec:	f003 f9d0 	bl	8007090 <BSP_STM32_GPIO_Init>
	BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF12_FMC);
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f24c 7103 	movw	r1, #50947	; 0xc703
 8003cf8:	48d2      	ldr	r0, [pc, #840]	; (8004044 <BSP_STM32_Init_GPIO+0x3ec>)
 8003cfa:	e9cd a500 	strd	sl, r5, [sp]
 8003cfe:	f003 f9c7 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003d02:	230e      	movs	r3, #14
 8003d04:	2202      	movs	r2, #2
 8003d06:	2170      	movs	r1, #112	; 0x70
 8003d08:	48cd      	ldr	r0, [pc, #820]	; (8004040 <BSP_STM32_Init_GPIO+0x3e8>)
 8003d0a:	e9cd 4300 	strd	r4, r3, [sp]
 8003d0e:	4623      	mov	r3, r4
 8003d10:	f003 f9be 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8003d14:	2309      	movs	r3, #9
 8003d16:	2202      	movs	r2, #2
 8003d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d1c:	48c5      	ldr	r0, [pc, #788]	; (8004034 <BSP_STM32_Init_GPIO+0x3dc>)
 8003d1e:	e9cd 4300 	strd	r4, r3, [sp]
 8003d22:	4623      	mov	r3, r4
 8003d24:	f003 f9b4 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003d28:	230e      	movs	r3, #14
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d30:	48c2      	ldr	r0, [pc, #776]	; (800403c <BSP_STM32_Init_GPIO+0x3e4>)
 8003d32:	e9cd 4300 	strd	r4, r3, [sp]
 8003d36:	4623      	mov	r3, r4
 8003d38:	f003 f9aa 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003d3c:	230e      	movs	r3, #14
 8003d3e:	2202      	movs	r2, #2
 8003d40:	2141      	movs	r1, #65	; 0x41
 8003d42:	4638      	mov	r0, r7
 8003d44:	e9cd 4300 	strd	r4, r3, [sp]
 8003d48:	4623      	mov	r3, r4
 8003d4a:	f003 f9a1 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003d4e:	230e      	movs	r3, #14
 8003d50:	2202      	movs	r2, #2
 8003d52:	217e      	movs	r1, #126	; 0x7e
 8003d54:	4648      	mov	r0, r9
 8003d56:	e9cd 4300 	strd	r4, r3, [sp]
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	f003 f998 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003d60:	230e      	movs	r3, #14
 8003d62:	2202      	movs	r2, #2
 8003d64:	2110      	movs	r1, #16
 8003d66:	4638      	mov	r0, r7
 8003d68:	e9cd 4300 	strd	r4, r3, [sp]
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	f003 f98f 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF9_LTDC);
 8003d72:	2309      	movs	r3, #9
 8003d74:	4651      	mov	r1, sl
 8003d76:	2202      	movs	r2, #2
 8003d78:	4640      	mov	r0, r8
 8003d7a:	e9cd 4300 	strd	r4, r3, [sp]
 8003d7e:	4623      	mov	r3, r4
 8003d80:	f003 f986 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003d84:	230e      	movs	r3, #14
 8003d86:	2202      	movs	r2, #2
 8003d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d8c:	48a9      	ldr	r0, [pc, #676]	; (8004034 <BSP_STM32_Init_GPIO+0x3dc>)
 8003d8e:	e9cd 4300 	strd	r4, r3, [sp]
 8003d92:	4623      	mov	r3, r4
 8003d94:	f003 f97c 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003d98:	230e      	movs	r3, #14
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8003da0:	4640      	mov	r0, r8
 8003da2:	e9cd 4300 	strd	r4, r3, [sp]
 8003da6:	4623      	mov	r3, r4
 8003da8:	f003 f972 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003dac:	230e      	movs	r3, #14
 8003dae:	2202      	movs	r2, #2
 8003db0:	f44f 51a6 	mov.w	r1, #5312	; 0x14c0
 8003db4:	4630      	mov	r0, r6
 8003db6:	e9cd 4300 	strd	r4, r3, [sp]
 8003dba:	4623      	mov	r3, r4
 8003dbc:	f003 f968 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF10_LTDC);
 8003dc0:	230a      	movs	r3, #10
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dc8:	4638      	mov	r0, r7
 8003dca:	e9cd 4300 	strd	r4, r3, [sp]
 8003dce:	4623      	mov	r3, r4
 8003dd0:	f003 f95e 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF13_LTDC);
 8003dd4:	230d      	movs	r3, #13
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	4648      	mov	r0, r9
 8003de0:	4623      	mov	r3, r4
 8003de2:	9400      	str	r4, [sp, #0]
 8003de4:	f003 f954 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF12_LTDC);
 8003de8:	4623      	mov	r3, r4
 8003dea:	2202      	movs	r2, #2
 8003dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003df0:	4648      	mov	r0, r9
 8003df2:	e9cd 4500 	strd	r4, r5, [sp]
 8003df6:	f003 f94b 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003dfa:	230e      	movs	r3, #14
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	2108      	movs	r1, #8
 8003e00:	4890      	ldr	r0, [pc, #576]	; (8004044 <BSP_STM32_Init_GPIO+0x3ec>)
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 8003e02:	2502      	movs	r5, #2
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_LTDC);
 8003e04:	e9cd 4300 	strd	r4, r3, [sp]
 8003e08:	4623      	mov	r3, r4
 8003e0a:	f003 f941 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_ANALOG, GPIO_NOPULL, 0, 0);
 8003e0e:	4623      	mov	r3, r4
 8003e10:	4652      	mov	r2, sl
 8003e12:	2130      	movs	r1, #48	; 0x30
 8003e14:	4638      	mov	r0, r7
 8003e16:	e9cd 4400 	strd	r4, r4, [sp]
 8003e1a:	f003 f939 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_I2C1);
 8003e1e:	2304      	movs	r3, #4
 8003e20:	2212      	movs	r2, #18
 8003e22:	21c0      	movs	r1, #192	; 0xc0
 8003e24:	4640      	mov	r0, r8
 8003e26:	e9cd 4300 	strd	r4, r3, [sp]
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	f003 f930 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_I2C4);
 8003e30:	2304      	movs	r3, #4
 8003e32:	2212      	movs	r2, #18
 8003e34:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003e38:	4882      	ldr	r0, [pc, #520]	; (8004044 <BSP_STM32_Init_GPIO+0x3ec>)
 8003e3a:	e9cd 4300 	strd	r4, r3, [sp]
 8003e3e:	4623      	mov	r3, r4
 8003e40:	f003 f926 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 8003e44:	2309      	movs	r3, #9
 8003e46:	462a      	mov	r2, r5
 8003e48:	21c0      	movs	r1, #192	; 0xc0
 8003e4a:	487c      	ldr	r0, [pc, #496]	; (800403c <BSP_STM32_Init_GPIO+0x3e4>)
 8003e4c:	e9cd 5300 	strd	r5, r3, [sp]
 8003e50:	4623      	mov	r3, r4
 8003e52:	f003 f91d 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOF, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF10_QUADSPI);
 8003e56:	230a      	movs	r3, #10
 8003e58:	462a      	mov	r2, r5
 8003e5a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003e5e:	4877      	ldr	r0, [pc, #476]	; (800403c <BSP_STM32_Init_GPIO+0x3e4>)
 8003e60:	e9cd 5300 	strd	r5, r3, [sp]
 8003e64:	4623      	mov	r3, r4
 8003e66:	f003 f913 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF9_QUADSPI);
 8003e6a:	2309      	movs	r3, #9
 8003e6c:	462a      	mov	r2, r5
 8003e6e:	f240 4104 	movw	r1, #1028	; 0x404
 8003e72:	4640      	mov	r0, r8
 8003e74:	e9cd 5300 	strd	r5, r3, [sp]
 8003e78:	4623      	mov	r3, r4
 8003e7a:	f003 f909 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 8003e7e:	2309      	movs	r3, #9
 8003e80:	462a      	mov	r2, r5
 8003e82:	4629      	mov	r1, r5
 8003e84:	4638      	mov	r0, r7
 8003e86:	e9cd a300 	strd	sl, r3, [sp]
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	f003 f900 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 8003e90:	2309      	movs	r3, #9
 8003e92:	462a      	mov	r2, r5
 8003e94:	2101      	movs	r1, #1
 8003e96:	4648      	mov	r0, r9
 8003e98:	e9cd a300 	strd	sl, r3, [sp]
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	f003 f8f7 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF9_SDIO2);
 8003ea2:	2309      	movs	r3, #9
 8003ea4:	462a      	mov	r2, r5
 8003ea6:	f24c 0110 	movw	r1, #49168	; 0xc010
 8003eaa:	4640      	mov	r0, r8
 8003eac:	e9cd a300 	strd	sl, r3, [sp]
 8003eb0:	4623      	mov	r3, r4
 8003eb2:	f003 f8ed 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF10_SDIO2);
 8003eb6:	230a      	movs	r3, #10
 8003eb8:	462a      	mov	r2, r5
 8003eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	f8cd a000 	str.w	sl, [sp]
 8003ec8:	f003 f8e2 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF2_TIM3);
 8003ecc:	4623      	mov	r3, r4
 8003ece:	462a      	mov	r2, r5
 8003ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	e9cd 4500 	strd	r4, r5, [sp]
 8003eda:	f003 f8d9 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF14_UART5);
 8003ede:	230e      	movs	r3, #14
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	e9cd 4300 	strd	r4, r3, [sp]
 8003eec:	4623      	mov	r3, r4
 8003eee:	f003 f8cf 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF7_USART2);
 8003ef2:	2307      	movs	r3, #7
 8003ef4:	462a      	mov	r2, r5
 8003ef6:	2160      	movs	r1, #96	; 0x60
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	4623      	mov	r3, r4
 8003efc:	9400      	str	r4, [sp, #0]
 8003efe:	4851      	ldr	r0, [pc, #324]	; (8004044 <BSP_STM32_Init_GPIO+0x3ec>)
 8003f00:	f003 f8c6 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF10_OTG1_FS);
 8003f04:	230a      	movs	r3, #10
 8003f06:	462a      	mov	r2, r5
 8003f08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f0c:	4648      	mov	r0, r9
 8003f0e:	e9cd 5300 	strd	r5, r3, [sp]
 8003f12:	4623      	mov	r3, r4
 8003f14:	f003 f8bc 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_WritePin(GPIOH, GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8003f18:	4622      	mov	r2, r4
 8003f1a:	2188      	movs	r1, #136	; 0x88
 8003f1c:	4658      	mov	r0, fp
 8003f1e:	f003 f9fd 	bl	800731c <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8003f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f26:	2201      	movs	r2, #1
 8003f28:	4630      	mov	r0, r6
 8003f2a:	f003 f9f7 	bl	800731c <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8003f2e:	4622      	mov	r2, r4
 8003f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f34:	4630      	mov	r0, r6
 8003f36:	f003 f9f1 	bl	800731c <BSP_STM32_GPIO_WritePin>
    BSP_STM32_GPIO_Init(GPIOE, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	2108      	movs	r1, #8
 8003f40:	483f      	ldr	r0, [pc, #252]	; (8004040 <BSP_STM32_Init_GPIO+0x3e8>)
 8003f42:	e9cd 4400 	strd	r4, r4, [sp]
 8003f46:	f003 f8a3 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOI, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003f4a:	4623      	mov	r3, r4
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f52:	4838      	ldr	r0, [pc, #224]	; (8004034 <BSP_STM32_Init_GPIO+0x3dc>)
 8003f54:	e9cd 4400 	strd	r4, r4, [sp]
 8003f58:	f003 f89a 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOC, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4638      	mov	r0, r7
 8003f62:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 8003f66:	e9cd 4400 	strd	r4, r4, [sp]
 8003f6a:	f003 f891 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003f6e:	4623      	mov	r3, r4
 8003f70:	4622      	mov	r2, r4
 8003f72:	2104      	movs	r1, #4
 8003f74:	4658      	mov	r0, fp
 8003f76:	e9cd 4400 	strd	r4, r4, [sp]
 8003f7a:	f003 f889 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);
 8003f7e:	4623      	mov	r3, r4
 8003f80:	2201      	movs	r2, #1
 8003f82:	2188      	movs	r1, #136	; 0x88
 8003f84:	4658      	mov	r0, fp
 8003f86:	e9cd 4400 	strd	r4, r4, [sp]
 8003f8a:	f003 f881 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003f8e:	4623      	mov	r3, r4
 8003f90:	4622      	mov	r2, r4
 8003f92:	2120      	movs	r1, #32
 8003f94:	4658      	mov	r0, fp
 8003f96:	e9cd 4400 	strd	r4, r4, [sp]
 8003f9a:	f003 f879 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOH, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	4658      	mov	r0, fp
 8003fa2:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8003fa6:	2140      	movs	r1, #64	; 0x40
 8003fa8:	e9cd 4400 	strd	r4, r4, [sp]
 8003fac:	f003 f870 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 8003fb0:	4623      	mov	r3, r4
 8003fb2:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8003fb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fba:	4822      	ldr	r0, [pc, #136]	; (8004044 <BSP_STM32_Init_GPIO+0x3ec>)
 8003fbc:	e9cd 4400 	strd	r4, r4, [sp]
 8003fc0:	f003 f866 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	2108      	movs	r1, #8
 8003fca:	4630      	mov	r0, r6
 8003fcc:	e9cd 4400 	strd	r4, r4, [sp]
 8003fd0:	f003 f85e 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOA, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4648      	mov	r0, r9
 8003fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fde:	e9cd 4400 	strd	r4, r4, [sp]
 8003fe2:	f003 f855 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOD, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	4622      	mov	r2, r4
 8003fea:	2194      	movs	r1, #148	; 0x94
 8003fec:	4815      	ldr	r0, [pc, #84]	; (8004044 <BSP_STM32_Init_GPIO+0x3ec>)
 8003fee:	e9cd 4400 	strd	r4, r4, [sp]
 8003ff2:	f003 f84d 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0);
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8003ffe:	4630      	mov	r0, r6
 8004000:	e9cd 4400 	strd	r4, r4, [sp]
 8004004:	f003 f844 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOG, Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0);
 8004008:	4623      	mov	r3, r4
 800400a:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800400e:	4630      	mov	r0, r6
 8004010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004014:	e9cd 4400 	strd	r4, r4, [sp]
 8004018:	f003 f83a 	bl	8007090 <BSP_STM32_GPIO_Init>
    BSP_STM32_GPIO_Init(GPIOB, Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0);
 800401c:	4623      	mov	r3, r4
 800401e:	4622      	mov	r2, r4
 8004020:	2120      	movs	r1, #32
 8004022:	4640      	mov	r0, r8
 8004024:	e9cd 4400 	strd	r4, r4, [sp]
 8004028:	f003 f832 	bl	8007090 <BSP_STM32_GPIO_Init>
 800402c:	e012      	b.n	8004054 <BSP_STM32_Init_GPIO+0x3fc>
 800402e:	bf00      	nop
 8004030:	58020800 	.word	0x58020800
 8004034:	58022000 	.word	0x58022000
 8004038:	58021800 	.word	0x58021800
 800403c:	58021400 	.word	0x58021400
 8004040:	58021000 	.word	0x58021000
 8004044:	58020c00 	.word	0x58020c00
 8004048:	58020000 	.word	0x58020000
 800404c:	58021c00 	.word	0x58021c00
 8004050:	58020400 	.word	0x58020400
}
 8004054:	4620      	mov	r0, r4
 8004056:	b003      	add	sp, #12
 8004058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800405c <BSP_IncTick>:
}


void BSP_IncTick(void) {

	tickvalue += tickfrequency;
 800405c:	4a03      	ldr	r2, [pc, #12]	; (800406c <BSP_IncTick+0x10>)
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <BSP_IncTick+0x14>)
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	440b      	add	r3, r1
 8004066:	6013      	str	r3, [r2, #0]

}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	24000380 	.word	0x24000380
 8004070:	24000000 	.word	0x24000000

08004074 <BSP_GetTick>:

uint32_t BSP_GetTick(void) {

	return tickvalue;
 8004074:	4b01      	ldr	r3, [pc, #4]	; (800407c <BSP_GetTick+0x8>)
 8004076:	6818      	ldr	r0, [r3, #0]
}
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	24000380 	.word	0x24000380

08004080 <BSP_Delay>:

void BSP_Delay(uint32_t delay) {

	uint32_t wait = delay + tickfrequency;
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <BSP_Delay+0x14>)
	return tickvalue;
 8004082:	4a05      	ldr	r2, [pc, #20]	; (8004098 <BSP_Delay+0x18>)
	uint32_t wait = delay + tickfrequency;
 8004084:	681b      	ldr	r3, [r3, #0]
	return tickvalue;
 8004086:	6811      	ldr	r1, [r2, #0]
	uint32_t wait = delay + tickfrequency;
 8004088:	4418      	add	r0, r3
	return tickvalue;
 800408a:	6813      	ldr	r3, [r2, #0]
	uint32_t tickstart = BSP_GetTick();

	while ((BSP_GetTick() - tickstart) < wait) {}
 800408c:	1a5b      	subs	r3, r3, r1
 800408e:	4283      	cmp	r3, r0
 8004090:	d3fb      	bcc.n	800408a <BSP_Delay+0xa>

}
 8004092:	4770      	bx	lr
 8004094:	24000000 	.word	0x24000000
 8004098:	24000380 	.word	0x24000380

0800409c <EXTI15_10_IRQHandler>:
* INT HANDLERS FOR GPIO GROUP EXTIS shared between subsystems
 *******************************************************************/

// INT Handlers for Touch Panel, MPU6050

void EXTI15_10_IRQHandler(void) {
 800409c:	b508      	push	{r3, lr}
	if (EXTI->PR1 & GPIO_PIN_13) {
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040a6:	0491      	lsls	r1, r2, #18
 80040a8:	d40f      	bmi.n	80040ca <EXTI15_10_IRQHandler+0x2e>
		EXTI->PR1 |= ~(GPIO_PIN_13);
		// Call to Touch Panel INT handler
		BSP_LCD_TP_INTHandler();
	}

	if (EXTI->PR1 & GPIO_PIN_11) {
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040b2:	0512      	lsls	r2, r2, #20
 80040b4:	d400      	bmi.n	80040b8 <EXTI15_10_IRQHandler+0x1c>
		EXTI->PR1 |= ~(GPIO_PIN_11);
		// Call to IMU INT handler
		BSP_IMU_INTHandler();
	}
}
 80040b6:	bd08      	pop	{r3, pc}
		EXTI->PR1 |= ~(GPIO_PIN_11);
 80040b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040bc:	f462 6200 	orn	r2, r2, #2048	; 0x800
 80040c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		BSP_IMU_INTHandler();
 80040c4:	f7fd fa10 	bl	80014e8 <BSP_IMU_INTHandler>
}
 80040c8:	bd08      	pop	{r3, pc}
		EXTI->PR1 |= ~(GPIO_PIN_13);
 80040ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040ce:	f462 5200 	orn	r2, r2, #8192	; 0x2000
 80040d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		BSP_LCD_TP_INTHandler();
 80040d6:	f7ff f8eb 	bl	80032b0 <BSP_LCD_TP_INTHandler>
 80040da:	e7e6      	b.n	80040aa <EXTI15_10_IRQHandler+0xe>

080040dc <EXTI9_5_IRQHandler>:

// INT Handler for BLE Module

void EXTI9_5_IRQHandler(void)
{
 80040dc:	b508      	push	{r3, lr}
	if (EXTI->PR1 & GPIO_PIN_6) {
 80040de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040e6:	0652      	lsls	r2, r2, #25
 80040e8:	d400      	bmi.n	80040ec <EXTI9_5_IRQHandler+0x10>
		EXTI->PR1 |= ~(GPIO_PIN_6);
		// Call to BLE module INT handler
		BSP_BLE_INTHandler();
	}
}
 80040ea:	bd08      	pop	{r3, pc}
		EXTI->PR1 |= ~(GPIO_PIN_6);
 80040ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040f0:	f062 0240 	orn	r2, r2, #64	; 0x40
 80040f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		BSP_BLE_INTHandler();
 80040f8:	f3af 8000 	nop.w
}
 80040fc:	bd08      	pop	{r3, pc}
 80040fe:	bf00      	nop

08004100 <BSP_Serial_Init>:
	BSP_STM32_UART_Transmit(USART2, pData, 1);
	return ch;
}


uint8_t BSP_Serial_Init(void) {
 8004100:	b530      	push	{r4, r5, lr}
	// Configure USART2 interface
	if (BSP_STM32_UART_Init(USART2, 115200, UART_WORDLENGTH_8B, UART_STOPBITS_1, UART_PARITY_NONE)) return BSP_ERROR;
 8004102:	2300      	movs	r3, #0
uint8_t BSP_Serial_Init(void) {
 8004104:	b085      	sub	sp, #20
	if (BSP_STM32_UART_Init(USART2, 115200, UART_WORDLENGTH_8B, UART_STOPBITS_1, UART_PARITY_NONE)) return BSP_ERROR;
 8004106:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800410a:	4815      	ldr	r0, [pc, #84]	; (8004160 <BSP_Serial_Init+0x60>)
 800410c:	461a      	mov	r2, r3
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	f006 fc68 	bl	800a9e4 <BSP_STM32_UART_Init>
 8004114:	b118      	cbz	r0, 800411e <BSP_Serial_Init+0x1e>
 8004116:	2401      	movs	r4, #1

	// Start listening on USART2 port
	BSP_STM32_UART_StartListen(USART2, &BSP_hserial_ctx, BSP_hserial.data_rx, SERIAL_BUF_SIZE);

	return BSP_OK;
}
 8004118:	4620      	mov	r0, r4
 800411a:	b005      	add	sp, #20
 800411c:	bd30      	pop	{r4, r5, pc}
	if (BSP_STM32_DMA_Init(DMA1_Stream3, DMA_PERIPH_TO_MEMORY, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_BYTE, DMA_MDATAALIGN_BYTE, DMA_CIRCULAR, DMA_PRIORITY_LOW)) return BSP_ERROR;
 800411e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8004122:	4602      	mov	r2, r0
 8004124:	4601      	mov	r1, r0
 8004126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800412a:	e9cd 5002 	strd	r5, r0, [sp, #8]
 800412e:	e9cd 0000 	strd	r0, r0, [sp]
 8004132:	480c      	ldr	r0, [pc, #48]	; (8004164 <BSP_Serial_Init+0x64>)
 8004134:	f001 fd0a 	bl	8005b4c <BSP_STM32_DMA_Init>
 8004138:	2800      	cmp	r0, #0
 800413a:	d1ec      	bne.n	8004116 <BSP_Serial_Init+0x16>
	if (BSP_STM32_DMA_CtxLink(DMA1_Stream3, &BSP_hserial_ctx, DMA_REQUEST_USART2_RX)) return BSP_ERROR;
 800413c:	222b      	movs	r2, #43	; 0x2b
 800413e:	490a      	ldr	r1, [pc, #40]	; (8004168 <BSP_Serial_Init+0x68>)
 8004140:	4808      	ldr	r0, [pc, #32]	; (8004164 <BSP_Serial_Init+0x64>)
 8004142:	f001 fd37 	bl	8005bb4 <BSP_STM32_DMA_CtxLink>
 8004146:	4604      	mov	r4, r0
 8004148:	2800      	cmp	r0, #0
 800414a:	d1e4      	bne.n	8004116 <BSP_Serial_Init+0x16>
	BSP_STM32_UART_StartListen(USART2, &BSP_hserial_ctx, BSP_hserial.data_rx, SERIAL_BUF_SIZE);
 800414c:	462b      	mov	r3, r5
 800414e:	4a07      	ldr	r2, [pc, #28]	; (800416c <BSP_Serial_Init+0x6c>)
 8004150:	4905      	ldr	r1, [pc, #20]	; (8004168 <BSP_Serial_Init+0x68>)
 8004152:	4803      	ldr	r0, [pc, #12]	; (8004160 <BSP_Serial_Init+0x60>)
 8004154:	f006 fc9c 	bl	800aa90 <BSP_STM32_UART_StartListen>
}
 8004158:	4620      	mov	r0, r4
 800415a:	b005      	add	sp, #20
 800415c:	bd30      	pop	{r4, r5, pc}
 800415e:	bf00      	nop
 8004160:	40004400 	.word	0x40004400
 8004164:	40020058 	.word	0x40020058
 8004168:	24000384 	.word	0x24000384
 800416c:	3800018c 	.word	0x3800018c

08004170 <USART2_IRQHandler>:
	return BSP_OK;
}


void USART2_IRQHandler(void) {
	BSP_STM32_UART_IRQHandler(USART2, &BSP_hserial_ctx);
 8004170:	4901      	ldr	r1, [pc, #4]	; (8004178 <USART2_IRQHandler+0x8>)
 8004172:	4802      	ldr	r0, [pc, #8]	; (800417c <USART2_IRQHandler+0xc>)
 8004174:	f006 bcaa 	b.w	800aacc <BSP_STM32_UART_IRQHandler>
 8004178:	24000384 	.word	0x24000384
 800417c:	40004400 	.word	0x40004400

08004180 <BSP_USB_Init_MSC>:

//--------------------------------------------------------------------+
// BSP USB functions
//--------------------------------------------------------------------+

uint8_t BSP_USB_Init_MSC() {
 8004180:	b508      	push	{r3, lr}
	usb_mode = USB_MODE_MSC;
 8004182:	2201      	movs	r2, #1
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <BSP_USB_Init_MSC+0x18>)
 8004186:	701a      	strb	r2, [r3, #0]
	BSP_STM32_PCD_EnableUSBVoltageDetector();
 8004188:	f003 fda8 	bl	8007cdc <BSP_STM32_PCD_EnableUSBVoltageDetector>
	tud_init(TUD_OPT_RHPORT);
 800418c:	2000      	movs	r0, #0
 800418e:	f00b ff4f 	bl	8010030 <tud_init>
	return BSP_OK;
}
 8004192:	2000      	movs	r0, #0
 8004194:	bd08      	pop	{r3, pc}
 8004196:	bf00      	nop
 8004198:	2400042c 	.word	0x2400042c

0800419c <BSP_USB_Task>:
	tud_disconnect();
	BSP_STM32_PCD_DisableUSBVoltageDetector();
	return BSP_OK;
}

void BSP_USB_Task() {
 800419c:	b510      	push	{r4, lr}
	if (usb_mode == USB_MODE_NONE) return;
 800419e:	4c10      	ldr	r4, [pc, #64]	; (80041e0 <BSP_USB_Task+0x44>)
void BSP_USB_Task() {
 80041a0:	b090      	sub	sp, #64	; 0x40
	if (usb_mode == USB_MODE_NONE) return;
 80041a2:	7823      	ldrb	r3, [r4, #0]
 80041a4:	b90b      	cbnz	r3, 80041aa <BSP_USB_Task+0xe>
		break;
	case USB_MODE_HID:
		// hid_task();
		break;
	}
}
 80041a6:	b010      	add	sp, #64	; 0x40
 80041a8:	bd10      	pop	{r4, pc}

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 80041aa:	2100      	movs	r1, #0
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	f00b ffae 	bl	8010110 <tud_task_ext>
	switch (usb_mode) {
 80041b4:	7823      	ldrb	r3, [r4, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d1f5      	bne.n	80041a6 <BSP_USB_Task+0xa>
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
 80041ba:	2000      	movs	r0, #0
 80041bc:	f00a fb72 	bl	800e8a4 <tud_cdc_n_available>
  // connected() check for DTR bit
  // Most but not all terminal client set this when making connection
  // if ( tud_cdc_connected() )
  {
    // connected and there are data available
    if ( tud_cdc_available() )
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d0f0      	beq.n	80041a6 <BSP_USB_Task+0xa>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
 80041c4:	4669      	mov	r1, sp
 80041c6:	2240      	movs	r2, #64	; 0x40
 80041c8:	2000      	movs	r0, #0
 80041ca:	f00a fb77 	bl	800e8bc <tud_cdc_n_read>
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
 80041ce:	4669      	mov	r1, sp
  return tud_cdc_n_read(0, buffer, bufsize);
 80041d0:	4602      	mov	r2, r0
  return tud_cdc_n_write(0, buffer, bufsize);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f00a fbf2 	bl	800e9bc <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
 80041d8:	2000      	movs	r0, #0
 80041da:	f00a fbab 	bl	800e934 <tud_cdc_n_write_flush>
      //    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
      tud_cdc_write(buf, count);
      tud_cdc_write_flush();
    }
  }
}
 80041de:	e7e2      	b.n	80041a6 <BSP_USB_Task+0xa>
 80041e0:	2400042c 	.word	0x2400042c

080041e4 <OTG_FS_IRQHandler>:
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 80041e4:	2000      	movs	r0, #0
 80041e6:	f00d ba99 	b.w	801171c <dcd_int_handler>
 80041ea:	bf00      	nop

080041ec <tud_mount_cb>:
void tud_mount_cb(void) {}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop

080041f0 <tud_umount_cb>:
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <tud_suspend_cb>:
}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop

080041f8 <tud_resume_cb>:
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop

080041fc <tud_descriptor_device_cb>:
	switch (usb_mode) {
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <tud_descriptor_device_cb+0x18>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d004      	beq.n	800420e <tud_descriptor_device_cb+0x12>
 8004204:	2b02      	cmp	r3, #2
 8004206:	4804      	ldr	r0, [pc, #16]	; (8004218 <tud_descriptor_device_cb+0x1c>)
 8004208:	bf18      	it	ne
 800420a:	2000      	movne	r0, #0
 800420c:	4770      	bx	lr
		return (uint8_t const *) &desc_device_msc;
 800420e:	4803      	ldr	r0, [pc, #12]	; (800421c <tud_descriptor_device_cb+0x20>)
}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2400042c 	.word	0x2400042c
 8004218:	0801551c 	.word	0x0801551c
 800421c:	08015530 	.word	0x08015530

08004220 <tud_descriptor_configuration_cb>:
	switch (usb_mode) {
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <tud_descriptor_configuration_cb+0x18>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d004      	beq.n	8004232 <tud_descriptor_configuration_cb+0x12>
 8004228:	2b02      	cmp	r3, #2
 800422a:	4804      	ldr	r0, [pc, #16]	; (800423c <tud_descriptor_configuration_cb+0x1c>)
 800422c:	bf18      	it	ne
 800422e:	2000      	movne	r0, #0
 8004230:	4770      	bx	lr
		return desc_fs_conf_msc;
 8004232:	4803      	ldr	r0, [pc, #12]	; (8004240 <tud_descriptor_configuration_cb+0x20>)
}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	2400042c 	.word	0x2400042c
 800423c:	08015544 	.word	0x08015544
 8004240:	08015590 	.word	0x08015590

08004244 <tud_descriptor_string_cb>:
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8004244:	b538      	push	{r3, r4, r5, lr}
	if (index == 0) {
 8004246:	b948      	cbnz	r0, 800425c <tud_descriptor_string_cb+0x18>
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8004248:	4a18      	ldr	r2, [pc, #96]	; (80042ac <tud_descriptor_string_cb+0x68>)
 800424a:	f44f 7341 	mov.w	r3, #772	; 0x304
 800424e:	4d18      	ldr	r5, [pc, #96]	; (80042b0 <tud_descriptor_string_cb+0x6c>)
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	8812      	ldrh	r2, [r2, #0]
 8004254:	806a      	strh	r2, [r5, #2]
	return _desc_str;
 8004256:	4816      	ldr	r0, [pc, #88]	; (80042b0 <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8004258:	802b      	strh	r3, [r5, #0]
}
 800425a:	bd38      	pop	{r3, r4, r5, pc}
		if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 800425c:	2804      	cmp	r0, #4
 800425e:	d81f      	bhi.n	80042a0 <tud_descriptor_string_cb+0x5c>
		const char* str = string_desc_arr[index];
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <tud_descriptor_string_cb+0x68>)
 8004262:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
		chr_count = (uint8_t) strlen(str);
 8004266:	4620      	mov	r0, r4
 8004268:	f7fc f836 	bl	80002d8 <strlen>
 800426c:	b2c0      	uxtb	r0, r0
		if ( chr_count > 31 ) chr_count = 31;
 800426e:	281f      	cmp	r0, #31
 8004270:	4602      	mov	r2, r0
 8004272:	bf28      	it	cs
 8004274:	221f      	movcs	r2, #31
		for(uint8_t i=0; i<chr_count; i++) _desc_str[1+i] = str[i];
 8004276:	b1a8      	cbz	r0, 80042a4 <tud_descriptor_string_cb+0x60>
 8004278:	4d0d      	ldr	r5, [pc, #52]	; (80042b0 <tud_descriptor_string_cb+0x6c>)
 800427a:	1e60      	subs	r0, r4, #1
 800427c:	2300      	movs	r3, #0
 800427e:	4629      	mov	r1, r5
 8004280:	3301      	adds	r3, #1
 8004282:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f821 4f02 	strh.w	r4, [r1, #2]!
 800428c:	429a      	cmp	r2, r3
 800428e:	d8f7      	bhi.n	8004280 <tud_descriptor_string_cb+0x3c>
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8004290:	1c53      	adds	r3, r2, #1
	return _desc_str;
 8004292:	4807      	ldr	r0, [pc, #28]	; (80042b0 <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8004294:	b2db      	uxtb	r3, r3
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800429c:	802b      	strh	r3, [r5, #0]
	return _desc_str;
 800429e:	e7dc      	b.n	800425a <tud_descriptor_string_cb+0x16>
		if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 80042a0:	2000      	movs	r0, #0
}
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
		for(uint8_t i=0; i<chr_count; i++) _desc_str[1+i] = str[i];
 80042a4:	f240 3302 	movw	r3, #770	; 0x302
 80042a8:	4d01      	ldr	r5, [pc, #4]	; (80042b0 <tud_descriptor_string_cb+0x6c>)
 80042aa:	e7d4      	b.n	8004256 <tud_descriptor_string_cb+0x12>
 80042ac:	24000004 	.word	0x24000004
 80042b0:	240003ec 	.word	0x240003ec

080042b4 <tud_msc_read10_cb>:
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize) {
 80042b4:	b510      	push	{r4, lr}
 80042b6:	9c02      	ldr	r4, [sp, #8]
	if (BSP_SDCARD_ReadBlocks(buffer, lba, bn)) return -1;
 80042b8:	4618      	mov	r0, r3
 80042ba:	0a62      	lsrs	r2, r4, #9
 80042bc:	f7ff f8d2 	bl	8003464 <BSP_SDCARD_ReadBlocks>
	return (int32_t) bufsize;
 80042c0:	2800      	cmp	r0, #0
}
 80042c2:	bf0c      	ite	eq
 80042c4:	4620      	moveq	r0, r4
 80042c6:	f04f 30ff 	movne.w	r0, #4294967295
 80042ca:	bd10      	pop	{r4, pc}

080042cc <tud_msc_write10_cb>:
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize) {
 80042cc:	b510      	push	{r4, lr}
 80042ce:	9c02      	ldr	r4, [sp, #8]
	if (BSP_SDCARD_WriteBlocks(buffer, lba, bn)) return -1;
 80042d0:	4618      	mov	r0, r3
 80042d2:	0a62      	lsrs	r2, r4, #9
 80042d4:	f7ff f8e6 	bl	80034a4 <BSP_SDCARD_WriteBlocks>
	return (int32_t) bufsize;
 80042d8:	2800      	cmp	r0, #0
}
 80042da:	bf0c      	ite	eq
 80042dc:	4620      	moveq	r0, r4
 80042de:	f04f 30ff 	movne.w	r0, #4294967295
 80042e2:	bd10      	pop	{r4, pc}

080042e4 <tud_msc_inquiry_cb>:
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4]) {
 80042e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const char vid[] = USB_MANUFACTURER;
 80042e8:	4810      	ldr	r0, [pc, #64]	; (800432c <tud_msc_inquiry_cb+0x48>)
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4]) {
 80042ea:	b088      	sub	sp, #32
 80042ec:	4694      	mov	ip, r2
 80042ee:	460d      	mov	r5, r1
 80042f0:	461f      	mov	r7, r3
	const char vid[] = USB_MANUFACTURER;
 80042f2:	ac01      	add	r4, sp, #4
	const char pid[] = USB_PRODUCT;
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <tud_msc_inquiry_cb+0x4c>)
	memcpy(vendor_id  , vid, strlen(vid));
 80042f6:	ae01      	add	r6, sp, #4
	memcpy(product_rev, rev, strlen(rev));
 80042f8:	f243 3856 	movw	r8, #13142	; 0x3356
	const char vid[] = USB_MANUFACTURER;
 80042fc:	c807      	ldmia	r0, {r0, r1, r2}
 80042fe:	c403      	stmia	r4!, {r0, r1}
	const char pid[] = USB_PRODUCT;
 8004300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004302:	ac04      	add	r4, sp, #16
	memcpy(product_id , pid, strlen(pid));
 8004304:	46a6      	mov	lr, r4
	const char pid[] = USB_PRODUCT;
 8004306:	c407      	stmia	r4!, {r0, r1, r2}
	memcpy(vendor_id  , vid, strlen(vid));
 8004308:	ce03      	ldmia	r6!, {r0, r1}
 800430a:	6028      	str	r0, [r5, #0]
 800430c:	6069      	str	r1, [r5, #4]
	memcpy(product_id , pid, strlen(pid));
 800430e:	f88c 300c 	strb.w	r3, [ip, #12]
 8004312:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8004316:	f8cc 0000 	str.w	r0, [ip]
 800431a:	f8cc 1004 	str.w	r1, [ip, #4]
 800431e:	f8cc 2008 	str.w	r2, [ip, #8]
	memcpy(product_rev, rev, strlen(rev));
 8004322:	f8a7 8000 	strh.w	r8, [r7]
}
 8004326:	b008      	add	sp, #32
 8004328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800432c:	080154e0 	.word	0x080154e0
 8004330:	080154ec 	.word	0x080154ec

08004334 <tud_msc_test_unit_ready_cb>:
}
 8004334:	2001      	movs	r0, #1
 8004336:	4770      	bx	lr

08004338 <tud_msc_capacity_cb>:
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size) {
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	460d      	mov	r5, r1
 800433c:	4614      	mov	r4, r2
	*block_count  = BSP_SDCARD_GetBlockNo();
 800433e:	f7ff f8d1 	bl	80034e4 <BSP_SDCARD_GetBlockNo>
 8004342:	6028      	str	r0, [r5, #0]
	*block_size = BSP_SDCARD_GetBlockSize();
 8004344:	f7ff f8d4 	bl	80034f0 <BSP_SDCARD_GetBlockSize>
 8004348:	8020      	strh	r0, [r4, #0]
}
 800434a:	bd38      	pop	{r3, r4, r5, pc}

0800434c <tud_msc_scsi_cb>:
int32_t tud_msc_scsi_cb(uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize) {
 800434c:	b508      	push	{r3, lr}
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800434e:	2220      	movs	r2, #32
 8004350:	2300      	movs	r3, #0
 8004352:	2105      	movs	r1, #5
 8004354:	f00a fdd6 	bl	800ef04 <tud_msc_set_sense>
}
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	bd08      	pop	{r3, pc}
 800435e:	bf00      	nop

08004360 <tud_msc_start_stop_cb>:
}
 8004360:	2001      	movs	r0, #1
 8004362:	4770      	bx	lr

08004364 <tud_msc_request_sense_cb>:
}
 8004364:	2000      	movs	r0, #0
 8004366:	4770      	bx	lr

08004368 <tud_msc_is_writable_cb>:
}
 8004368:	2001      	movs	r0, #1
 800436a:	4770      	bx	lr

0800436c <G2D_DrawFillRectBlend>:
	uint16_t ol = LCD_WIDTH - w;

	BSP_LCD_FillBuf(x1, y1, w, h, ol, color);
}

void G2D_DrawFillRectBlend(int16_t x, int16_t y, uint16_t width, uint16_t height, uint32_t color) {
 800436c:	b510      	push	{r4, lr}
 800436e:	b082      	sub	sp, #8
	uint16_t x1 = MAX(0, x);
	uint16_t y1 = MAX(0, y);
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004370:	4402      	add	r2, r0
	uint16_t x1 = MAX(0, x);
 8004372:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 8004376:	440b      	add	r3, r1
void G2D_DrawFillRectBlend(int16_t x, int16_t y, uint16_t width, uint16_t height, uint32_t color) {
 8004378:	9c04      	ldr	r4, [sp, #16]
	uint16_t y1 = MAX(0, y);
 800437a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	uint16_t x1 = MAX(0, x);
 800437e:	b280      	uxth	r0, r0
	uint16_t w = x2 - x1;
	uint16_t h = y2 - y1;
	uint16_t ol = LCD_WIDTH - w;

	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004380:	9401      	str	r4, [sp, #4]
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004382:	f240 341f 	movw	r4, #799	; 0x31f
	uint16_t ol = LCD_WIDTH - w;
 8004386:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t y1 = MAX(0, y);
 800438a:	b289      	uxth	r1, r1
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 800438c:	42a2      	cmp	r2, r4
 800438e:	bfa8      	it	ge
 8004390:	4622      	movge	r2, r4
 8004392:	b292      	uxth	r2, r2
	uint16_t ol = LCD_WIDTH - w;
 8004394:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t w = x2 - x1;
 8004398:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 800439a:	fa1f f48c 	uxth.w	r4, ip
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 800439e:	f240 1cdf 	movw	ip, #479	; 0x1df
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 80043a2:	b292      	uxth	r2, r2
 80043a4:	9400      	str	r4, [sp, #0]
	uint16_t h = y2 - y1;
 80043a6:	4563      	cmp	r3, ip
 80043a8:	bfd4      	ite	le
 80043aa:	ebc1 0403 	rsble	r4, r1, r3
 80043ae:	ebc1 040c 	rsbgt	r4, r1, ip
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 80043b2:	b2a3      	uxth	r3, r4
 80043b4:	4c02      	ldr	r4, [pc, #8]	; (80043c0 <G2D_DrawFillRectBlend+0x54>)
 80043b6:	6824      	ldr	r4, [r4, #0]
 80043b8:	47a0      	blx	r4
}
 80043ba:	b002      	add	sp, #8
 80043bc:	bd10      	pop	{r4, pc}
 80043be:	bf00      	nop
 80043c0:	2400025c 	.word	0x2400025c

080043c4 <G2D_DrawCircle>:

void G2D_DrawCircle(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 80043c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c8:	ed2d 8b02 	vpush	{d8}
 80043cc:	b089      	sub	sp, #36	; 0x24
	int32_t d;			/* Decision Variable */
	int32_t curx;		/* Current X Value */
	int32_t cury;		/* Current Y Value */

	d = 3 - (r << 1);
 80043ce:	4614      	mov	r4, r2
	curx = 0;
 80043d0:	f04f 0a00 	mov.w	sl, #0
 80043d4:	f8df 9144 	ldr.w	r9, [pc, #324]	; 800451c <G2D_DrawCircle+0x158>
void G2D_DrawCircle(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 80043d8:	9306      	str	r3, [sp, #24]
	uint32_t offset = BSP_LCD_GetEditFrameAddr();

	BSP_LCD_DMA2D_Wait();

	while (curx <= cury) {
		BSP_LCD_UpdatePixel(offset, (x + curx), (y - cury), color);
 80043da:	b28b      	uxth	r3, r1
	d = 3 - (r << 1);
 80043dc:	9204      	str	r2, [sp, #16]
 80043de:	0052      	lsls	r2, r2, #1
		BSP_LCD_UpdatePixel(offset, (x + curx), (y - cury), color);
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	b283      	uxth	r3, r0
 80043e4:	fa1f fb84 	uxth.w	fp, r4
 80043e8:	9303      	str	r3, [sp, #12]
	d = 3 - (r << 1);
 80043ea:	f1c2 0303 	rsb	r3, r2, #3
 80043ee:	9305      	str	r3, [sp, #20]
	uint32_t offset = BSP_LCD_GetEditFrameAddr();
 80043f0:	f7fe fe88 	bl	8003104 <BSP_LCD_GetEditFrameAddr>
	BSP_LCD_DMA2D_Wait();
 80043f4:	4a48      	ldr	r2, [pc, #288]	; (8004518 <G2D_DrawCircle+0x154>)
	uint32_t offset = BSP_LCD_GetEditFrameAddr();
 80043f6:	9002      	str	r0, [sp, #8]
	BSP_LCD_DMA2D_Wait();
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	4790      	blx	r2
	while (curx <= cury) {
 80043fc:	9802      	ldr	r0, [sp, #8]
 80043fe:	9b06      	ldr	r3, [sp, #24]
 8004400:	4606      	mov	r6, r0
		BSP_LCD_UpdatePixel(offset, (x + curx), (y - cury), color);
 8004402:	9f03      	ldr	r7, [sp, #12]
 8004404:	fa1f f18a 	uxth.w	r1, sl
 8004408:	9d01      	ldr	r5, [sp, #4]
 800440a:	4630      	mov	r0, r6
 800440c:	eb07 0801 	add.w	r8, r7, r1
 8004410:	f8d9 4000 	ldr.w	r4, [r9]
 8004414:	eba5 020b 	sub.w	r2, r5, fp
 8004418:	9102      	str	r1, [sp, #8]
 800441a:	fa0f f888 	sxth.w	r8, r8
 800441e:	9306      	str	r3, [sp, #24]
 8004420:	b212      	sxth	r2, r2
 8004422:	4641      	mov	r1, r8
 8004424:	9201      	str	r2, [sp, #4]
 8004426:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x - curx), (y - cury), color);
 8004428:	9902      	ldr	r1, [sp, #8]
 800442a:	4630      	mov	r0, r6
 800442c:	9703      	str	r7, [sp, #12]
 800442e:	1a7f      	subs	r7, r7, r1
 8004430:	9a01      	ldr	r2, [sp, #4]
 8004432:	f8d9 4000 	ldr.w	r4, [r9]
 8004436:	b23b      	sxth	r3, r7
 8004438:	ee08 3a10 	vmov	s16, r3
 800443c:	9b06      	ldr	r3, [sp, #24]
 800443e:	ee18 1a10 	vmov	r1, s16
 8004442:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x + cury), (y - curx), color);
 8004444:	9f03      	ldr	r7, [sp, #12]
 8004446:	9902      	ldr	r1, [sp, #8]
 8004448:	4630      	mov	r0, r6
 800444a:	eb0b 0407 	add.w	r4, fp, r7
 800444e:	9b06      	ldr	r3, [sp, #24]
 8004450:	1a6a      	subs	r2, r5, r1
 8004452:	9501      	str	r5, [sp, #4]
 8004454:	b224      	sxth	r4, r4
 8004456:	f8d9 5000 	ldr.w	r5, [r9]
 800445a:	b212      	sxth	r2, r2
 800445c:	9307      	str	r3, [sp, #28]
 800445e:	4621      	mov	r1, r4
 8004460:	9206      	str	r2, [sp, #24]
 8004462:	47a8      	blx	r5
		BSP_LCD_UpdatePixel(offset, (x - cury), (y - curx), color);
 8004464:	eba7 050b 	sub.w	r5, r7, fp
 8004468:	9b07      	ldr	r3, [sp, #28]
 800446a:	9a06      	ldr	r2, [sp, #24]
 800446c:	4630      	mov	r0, r6
 800446e:	b22d      	sxth	r5, r5
 8004470:	f8d9 7000 	ldr.w	r7, [r9]
 8004474:	9306      	str	r3, [sp, #24]
 8004476:	4629      	mov	r1, r5
 8004478:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x + curx), (y + cury), color);
 800447a:	9b01      	ldr	r3, [sp, #4]
 800447c:	4641      	mov	r1, r8
 800447e:	4630      	mov	r0, r6
 8004480:	eb0b 0203 	add.w	r2, fp, r3
 8004484:	9b06      	ldr	r3, [sp, #24]
 8004486:	f8d9 7000 	ldr.w	r7, [r9]
 800448a:	b212      	sxth	r2, r2
 800448c:	9307      	str	r3, [sp, #28]
 800448e:	9206      	str	r2, [sp, #24]
 8004490:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x - curx), (y + cury), color);
 8004492:	9b07      	ldr	r3, [sp, #28]
 8004494:	ee18 1a10 	vmov	r1, s16
 8004498:	9a06      	ldr	r2, [sp, #24]
 800449a:	4630      	mov	r0, r6
 800449c:	f8d9 7000 	ldr.w	r7, [r9]
 80044a0:	9306      	str	r3, [sp, #24]
 80044a2:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x + cury), (y + curx), color);
 80044a4:	4630      	mov	r0, r6
 80044a6:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 80044aa:	185a      	adds	r2, r3, r1
 80044ac:	9b06      	ldr	r3, [sp, #24]
 80044ae:	4621      	mov	r1, r4
 80044b0:	f8d9 4000 	ldr.w	r4, [r9]
 80044b4:	b212      	sxth	r2, r2
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	9206      	str	r2, [sp, #24]
 80044ba:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x - cury), (y + curx), color);
 80044bc:	9b02      	ldr	r3, [sp, #8]
 80044be:	4629      	mov	r1, r5
 80044c0:	9a06      	ldr	r2, [sp, #24]
 80044c2:	4630      	mov	r0, r6
 80044c4:	f8d9 4000 	ldr.w	r4, [r9]
 80044c8:	47a0      	blx	r4

		if (d < 0) {
			d += (curx << 2) + 6;
 80044ca:	9b05      	ldr	r3, [sp, #20]
		} else {
			d += ((curx - cury) << 2) + 10;
 80044cc:	9804      	ldr	r0, [sp, #16]
		if (d < 0) {
 80044ce:	2b00      	cmp	r3, #0
			d += (curx << 2) + 6;
 80044d0:	eb03 018a 	add.w	r1, r3, sl, lsl #2
			d += ((curx - cury) << 2) + 10;
 80044d4:	ebaa 0200 	sub.w	r2, sl, r0
 80044d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		if (d < 0) {
 80044dc:	9b02      	ldr	r3, [sp, #8]
 80044de:	db0e      	blt.n	80044fe <G2D_DrawCircle+0x13a>
			cury--;
 80044e0:	1e41      	subs	r1, r0, #1
		}
		curx++;
 80044e2:	f10a 0a01 	add.w	sl, sl, #1
			d += ((curx - cury) << 2) + 10;
 80044e6:	320a      	adds	r2, #10
	while (curx <= cury) {
 80044e8:	4551      	cmp	r1, sl
 80044ea:	fa1f fb81 	uxth.w	fp, r1
			cury--;
 80044ee:	9104      	str	r1, [sp, #16]
			d += ((curx - cury) << 2) + 10;
 80044f0:	9205      	str	r2, [sp, #20]
	while (curx <= cury) {
 80044f2:	da86      	bge.n	8004402 <G2D_DrawCircle+0x3e>
	}
}
 80044f4:	b009      	add	sp, #36	; 0x24
 80044f6:	ecbd 8b02 	vpop	{d8}
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curx++;
 80044fe:	f10a 0a01 	add.w	sl, sl, #1
			d += (curx << 2) + 6;
 8004502:	1d8a      	adds	r2, r1, #6
	while (curx <= cury) {
 8004504:	4582      	cmp	sl, r0
			d += (curx << 2) + 6;
 8004506:	9205      	str	r2, [sp, #20]
	while (curx <= cury) {
 8004508:	f77f af7b 	ble.w	8004402 <G2D_DrawCircle+0x3e>
}
 800450c:	b009      	add	sp, #36	; 0x24
 800450e:	ecbd 8b02 	vpop	{d8}
 8004512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004516:	bf00      	nop
 8004518:	24000254 	.word	0x24000254
 800451c:	24000264 	.word	0x24000264

08004520 <G2D_DrawFillCircleBlend>:
		curx++;
	}
}


void G2D_DrawFillCircleBlend(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t  d;    	/* Decision Variable */
	int32_t  curx;	/* Current X Value */
	int32_t  cury;	/* Current Y Value */

	d = 3 - (r << 1);
 8004524:	4616      	mov	r6, r2
 8004526:	b282      	uxth	r2, r0
void G2D_DrawFillCircleBlend(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8004528:	b087      	sub	sp, #28
	curx = 0;
	cury = r;

	while (curx <= cury) {
		if(cury > 0) {
			G2D_DrawHLineBlend(x - cury, y + curx, 2 * cury + 1, color);
 800452a:	fa1f fb81 	uxth.w	fp, r1
	d = 3 - (r << 1);
 800452e:	0074      	lsls	r4, r6, #1
 8004530:	1e97      	subs	r7, r2, #2
void G2D_DrawFillCircleBlend(int16_t x, int16_t y, uint16_t r, uint32_t color) {
 8004532:	9305      	str	r3, [sp, #20]
	curx = 0;
 8004534:	2500      	movs	r5, #0
 8004536:	b2bf      	uxth	r7, r7
	if (y >= LCD_HEIGHT) return;
 8004538:	f10b 33ff 	add.w	r3, fp, #4294967295
	d = 3 - (r << 1);
 800453c:	f1c4 0403 	rsb	r4, r4, #3
	while (curx <= cury) {
 8004540:	9203      	str	r2, [sp, #12]
	if (y >= LCD_HEIGHT) return;
 8004542:	9304      	str	r3, [sp, #16]
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004544:	9702      	str	r7, [sp, #8]
		if(cury > 0) {
 8004546:	b9a6      	cbnz	r6, 8004572 <G2D_DrawFillCircleBlend+0x52>
			G2D_DrawHLineBlend(x - cury, y - curx, 2 * cury + 1, color);
		}

		if(curx > 0) {
 8004548:	2d00      	cmp	r5, #0
 800454a:	d17d      	bne.n	8004648 <G2D_DrawFillCircleBlend+0x128>
			G2D_DrawHLineBlend(x - curx, y - cury, 2 * curx + 1, color);
			G2D_DrawHLineBlend(x - curx, y + cury, 2 * curx + 1, color);
		}
		if (d < 0) {
 800454c:	2c00      	cmp	r4, #0
 800454e:	f2c0 80e5 	blt.w	800471c <G2D_DrawFillCircleBlend+0x1fc>
	while (curx <= cury) {
 8004552:	9a02      	ldr	r2, [sp, #8]
			d += (curx << 2) + 6;
		} else {
			d += ((curx - cury) << 2) + 10;
 8004554:	1bab      	subs	r3, r5, r6
			cury--;
 8004556:	3e01      	subs	r6, #1
		}
		curx++;
 8004558:	3501      	adds	r5, #1
	while (curx <= cury) {
 800455a:	1ed7      	subs	r7, r2, #3
			d += ((curx - cury) << 2) + 10;
 800455c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	while (curx <= cury) {
 8004560:	42ae      	cmp	r6, r5
 8004562:	b2ba      	uxth	r2, r7
			d += ((curx - cury) << 2) + 10;
 8004564:	f103 040a 	add.w	r4, r3, #10
	while (curx <= cury) {
 8004568:	9202      	str	r2, [sp, #8]
 800456a:	daec      	bge.n	8004546 <G2D_DrawFillCircleBlend+0x26>
	}
}
 800456c:	b007      	add	sp, #28
 800456e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			G2D_DrawHLineBlend(x - cury, y + curx, 2 * cury + 1, color);
 8004572:	b2b3      	uxth	r3, r6
 8004574:	9a03      	ldr	r2, [sp, #12]
 8004576:	fa1f f985 	uxth.w	r9, r5
 800457a:	eba2 0803 	sub.w	r8, r2, r3
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	eb0b 0109 	add.w	r1, fp, r9
 8004584:	b29b      	uxth	r3, r3
 8004586:	fa1f f888 	uxth.w	r8, r8
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	b289      	uxth	r1, r1
 800458e:	fa0f fa82 	sxth.w	sl, r2
 8004592:	b292      	uxth	r2, r2
	if (length < 0) {x -= length + 1; length = -length;}
 8004594:	f1ba 0f00 	cmp.w	sl, #0
 8004598:	f2c0 80d7 	blt.w	800474a <G2D_DrawFillCircleBlend+0x22a>
 800459c:	b20b      	sxth	r3, r1
			G2D_DrawHLineBlend(x - cury, y + curx, 2 * cury + 1, color);
 800459e:	fa0f f888 	sxth.w	r8, r8
	if (y < 1) return;
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	dd23      	ble.n	80045ee <G2D_DrawFillCircleBlend+0xce>
	if (y >= LCD_HEIGHT) return;
 80045a6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80045aa:	da20      	bge.n	80045ee <G2D_DrawFillCircleBlend+0xce>
	if (x >= LCD_WIDTH) return;
 80045ac:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
	if ((x + length) < 1) return;
 80045b0:	eb08 030a 	add.w	r3, r8, sl
	if (x >= LCD_WIDTH) return;
 80045b4:	da1b      	bge.n	80045ee <G2D_DrawFillCircleBlend+0xce>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	dd19      	ble.n	80045ee <G2D_DrawFillCircleBlend+0xce>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80045ba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 80045be:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80045c2:	9a05      	ldr	r2, [sp, #20]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80045c4:	bfa8      	it	ge
 80045c6:	f44f 7348 	movge.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 80045ca:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80045cc:	9201      	str	r2, [sp, #4]
	uint16_t lo = LCD_WIDTH - l;
 80045ce:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80045d2:	b29a      	uxth	r2, r3
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80045d4:	4b64      	ldr	r3, [pc, #400]	; (8004768 <G2D_DrawFillCircleBlend+0x248>)
	uint16_t lo = LCD_WIDTH - l;
 80045d6:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 80045da:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	fa1f fc8c 	uxth.w	ip, ip
 80045e2:	461f      	mov	r7, r3
 80045e4:	b292      	uxth	r2, r2
 80045e6:	2301      	movs	r3, #1
 80045e8:	f8cd c000 	str.w	ip, [sp]
 80045ec:	47b8      	blx	r7
	if (y >= LCD_HEIGHT) return;
 80045ee:	9b04      	ldr	r3, [sp, #16]
			G2D_DrawHLineBlend(x - cury, y - curx, 2 * cury + 1, color);
 80045f0:	ebab 0109 	sub.w	r1, fp, r9
	if (y >= LCD_HEIGHT) return;
 80045f4:	eba3 0909 	sub.w	r9, r3, r9
			G2D_DrawHLineBlend(x - cury, y - curx, 2 * cury + 1, color);
 80045f8:	b289      	uxth	r1, r1
	if (y >= LCD_HEIGHT) return;
 80045fa:	fa1f f989 	uxth.w	r9, r9
 80045fe:	f5b9 7fef 	cmp.w	r9, #478	; 0x1de
 8004602:	d8a1      	bhi.n	8004548 <G2D_DrawFillCircleBlend+0x28>
	if (x >= LCD_WIDTH) return;
 8004604:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
	if ((x + length) < 1) return;
 8004608:	eb08 020a 	add.w	r2, r8, sl
	if (x >= LCD_WIDTH) return;
 800460c:	da9c      	bge.n	8004548 <G2D_DrawFillCircleBlend+0x28>
 800460e:	2a00      	cmp	r2, #0
 8004610:	dd9a      	ble.n	8004548 <G2D_DrawFillCircleBlend+0x28>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004612:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004616:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 800461a:	9b05      	ldr	r3, [sp, #20]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 800461c:	bfa8      	it	ge
 800461e:	f44f 7248 	movge.w	r2, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004622:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004624:	9301      	str	r3, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004626:	b292      	uxth	r2, r2
	uint16_t lo = LCD_WIDTH - l;
 8004628:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 800462c:	4b4e      	ldr	r3, [pc, #312]	; (8004768 <G2D_DrawFillCircleBlend+0x248>)
	uint16_t lo = LCD_WIDTH - l;
 800462e:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 8004632:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004634:	681f      	ldr	r7, [r3, #0]
 8004636:	2301      	movs	r3, #1
 8004638:	fa1f fc8c 	uxth.w	ip, ip
 800463c:	b292      	uxth	r2, r2
 800463e:	f8cd c000 	str.w	ip, [sp]
 8004642:	47b8      	blx	r7
		if(curx > 0) {
 8004644:	2d00      	cmp	r5, #0
 8004646:	d081      	beq.n	800454c <G2D_DrawFillCircleBlend+0x2c>
			G2D_DrawHLineBlend(x - curx, y - cury, 2 * curx + 1, color);
 8004648:	fa1f f885 	uxth.w	r8, r5
 800464c:	fa1f fa86 	uxth.w	sl, r6
 8004650:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8004654:	ebab 020a 	sub.w	r2, fp, sl
 8004658:	b29b      	uxth	r3, r3
 800465a:	b291      	uxth	r1, r2
 800465c:	f103 0901 	add.w	r9, r3, #1
 8004660:	b212      	sxth	r2, r2
 8004662:	fa0f f989 	sxth.w	r9, r9
	if (length < 0) {x -= length + 1; length = -length;}
 8004666:	f1b9 0f00 	cmp.w	r9, #0
 800466a:	db66      	blt.n	800473a <G2D_DrawFillCircleBlend+0x21a>
 800466c:	9b03      	ldr	r3, [sp, #12]
	if (y < 1) return;
 800466e:	2a00      	cmp	r2, #0
 8004670:	eba3 0808 	sub.w	r8, r3, r8
 8004674:	fa0f f888 	sxth.w	r8, r8
 8004678:	dd22      	ble.n	80046c0 <G2D_DrawFillCircleBlend+0x1a0>
	if (y >= LCD_HEIGHT) return;
 800467a:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 800467e:	da1f      	bge.n	80046c0 <G2D_DrawFillCircleBlend+0x1a0>
	if (x >= LCD_WIDTH) return;
 8004680:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
	if ((x + length) < 1) return;
 8004684:	eb08 0309 	add.w	r3, r8, r9
	if (x >= LCD_WIDTH) return;
 8004688:	da1a      	bge.n	80046c0 <G2D_DrawFillCircleBlend+0x1a0>
 800468a:	2b00      	cmp	r3, #0
 800468c:	dd18      	ble.n	80046c0 <G2D_DrawFillCircleBlend+0x1a0>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 800468e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004692:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004696:	9a05      	ldr	r2, [sp, #20]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004698:	bfa8      	it	ge
 800469a:	f44f 7348 	movge.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 800469e:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046a0:	9201      	str	r2, [sp, #4]
	uint16_t lo = LCD_WIDTH - l;
 80046a2:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80046a6:	b29a      	uxth	r2, r3
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046a8:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <G2D_DrawFillCircleBlend+0x248>)
	uint16_t lo = LCD_WIDTH - l;
 80046aa:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 80046ae:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046b0:	681f      	ldr	r7, [r3, #0]
 80046b2:	2301      	movs	r3, #1
 80046b4:	fa1f fc8c 	uxth.w	ip, ip
 80046b8:	b292      	uxth	r2, r2
 80046ba:	f8cd c000 	str.w	ip, [sp]
 80046be:	47b8      	blx	r7
			G2D_DrawHLineBlend(x - curx, y + cury, 2 * curx + 1, color);
 80046c0:	eb0b 010a 	add.w	r1, fp, sl
 80046c4:	b289      	uxth	r1, r1
	if (y >= LCD_HEIGHT) return;
 80046c6:	1e4b      	subs	r3, r1, #1
 80046c8:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 80046cc:	f63f af3e 	bhi.w	800454c <G2D_DrawFillCircleBlend+0x2c>
	if (x >= LCD_WIDTH) return;
 80046d0:	f5b8 7f48 	cmp.w	r8, #800	; 0x320
	if ((x + length) < 1) return;
 80046d4:	44c1      	add	r9, r8
	if (x >= LCD_WIDTH) return;
 80046d6:	f6bf af39 	bge.w	800454c <G2D_DrawFillCircleBlend+0x2c>
 80046da:	f1b9 0f00 	cmp.w	r9, #0
 80046de:	f77f af35 	ble.w	800454c <G2D_DrawFillCircleBlend+0x2c>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80046e2:	f5b9 7f48 	cmp.w	r9, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 80046e6:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046ea:	9b05      	ldr	r3, [sp, #20]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80046ec:	bfa8      	it	ge
 80046ee:	f44f 7948 	movge.w	r9, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 80046f2:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046f4:	9301      	str	r3, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80046f6:	fa1f f989 	uxth.w	r9, r9
	uint16_t lo = LCD_WIDTH - l;
 80046fa:	f500 7248 	add.w	r2, r0, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <G2D_DrawFillCircleBlend+0x248>)
	uint16_t lo = LCD_WIDTH - l;
 8004700:	eba2 0209 	sub.w	r2, r2, r9
	uint16_t l = x1 - x0;
 8004704:	eba9 0900 	sub.w	r9, r9, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004708:	681f      	ldr	r7, [r3, #0]
 800470a:	2301      	movs	r3, #1
 800470c:	b292      	uxth	r2, r2
 800470e:	9200      	str	r2, [sp, #0]
 8004710:	fa1f f289 	uxth.w	r2, r9
 8004714:	47b8      	blx	r7
		if (d < 0) {
 8004716:	2c00      	cmp	r4, #0
 8004718:	f6bf af1b 	bge.w	8004552 <G2D_DrawFillCircleBlend+0x32>
	while (curx <= cury) {
 800471c:	9b02      	ldr	r3, [sp, #8]
			d += (curx << 2) + 6;
 800471e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
		curx++;
 8004722:	3501      	adds	r5, #1
	while (curx <= cury) {
 8004724:	1edf      	subs	r7, r3, #3
			d += (curx << 2) + 6;
 8004726:	3406      	adds	r4, #6
	while (curx <= cury) {
 8004728:	42b5      	cmp	r5, r6
 800472a:	b2bb      	uxth	r3, r7
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	f73f af1d 	bgt.w	800456c <G2D_DrawFillCircleBlend+0x4c>
		if(cury > 0) {
 8004732:	2e00      	cmp	r6, #0
 8004734:	f43f af08 	beq.w	8004548 <G2D_DrawFillCircleBlend+0x28>
 8004738:	e71b      	b.n	8004572 <G2D_DrawFillCircleBlend+0x52>
	if (length < 0) {x -= length + 1; length = -length;}
 800473a:	43db      	mvns	r3, r3
	if (y < 1) return;
 800473c:	2a00      	cmp	r2, #0
	if (length < 0) {x -= length + 1; length = -length;}
 800473e:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8004742:	fa0f f983 	sxth.w	r9, r3
	if (y < 1) return;
 8004746:	dc98      	bgt.n	800467a <G2D_DrawFillCircleBlend+0x15a>
 8004748:	e7ba      	b.n	80046c0 <G2D_DrawFillCircleBlend+0x1a0>
	if (length < 0) {x -= length + 1; length = -length;}
 800474a:	43db      	mvns	r3, r3
 800474c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004750:	fa0f fa83 	sxth.w	sl, r3
 8004754:	eba8 0802 	sub.w	r8, r8, r2
 8004758:	b20b      	sxth	r3, r1
 800475a:	fa0f f888 	sxth.w	r8, r8
	if (y < 1) return;
 800475e:	2b00      	cmp	r3, #0
 8004760:	f73f af21 	bgt.w	80045a6 <G2D_DrawFillCircleBlend+0x86>
 8004764:	e743      	b.n	80045ee <G2D_DrawFillCircleBlend+0xce>
 8004766:	bf00      	nop
 8004768:	2400025c 	.word	0x2400025c

0800476c <G2D_DrawRoundRect>:


void G2D_DrawRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 800476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004770:	b08d      	sub	sp, #52	; 0x34
 8004772:	461f      	mov	r7, r3
 8004774:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	int32_t  cury;	/* Current Y Value */

	uint16_t radius2 = radius << 1;

	if (height < radius2) return;
	if (width < radius2) return;
 8004778:	4297      	cmp	r7, r2
void G2D_DrawRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 800477a:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
	uint16_t radius2 = radius << 1;
 800477e:	ea4f 0345 	mov.w	r3, r5, lsl #1
 8004782:	b29e      	uxth	r6, r3
	if (width < radius2) return;
 8004784:	463b      	mov	r3, r7
 8004786:	bf28      	it	cs
 8004788:	4613      	movcs	r3, r2
 800478a:	429e      	cmp	r6, r3
 800478c:	d902      	bls.n	8004794 <G2D_DrawRoundRect+0x28>
			cury--;
		}
		curx++;
	}

}
 800478e:	b00d      	add	sp, #52	; 0x34
 8004790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int16_t x0 = x + radius;
 8004794:	b280      	uxth	r0, r0
 8004796:	460c      	mov	r4, r1
 8004798:	9203      	str	r2, [sp, #12]
 800479a:	9002      	str	r0, [sp, #8]
	uint32_t offset = BSP_LCD_GetEditFrameAddr();
 800479c:	f7fe fcb2 	bl	8003104 <BSP_LCD_GetEditFrameAddr>
 80047a0:	4682      	mov	sl, r0
	int16_t y0 = y + radius;
 80047a2:	b2a1      	uxth	r1, r4
	int16_t x1 = x + width - radius;
 80047a4:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
	cury = radius;
 80047a8:	9503      	str	r5, [sp, #12]
	int16_t x1 = x + width - radius;
 80047aa:	1883      	adds	r3, r0, r2
	if (width > radius2) {
 80047ac:	4296      	cmp	r6, r2
	int16_t x1 = x + width - radius;
 80047ae:	b29c      	uxth	r4, r3
	int16_t y1 = y + height - radius;
 80047b0:	eb01 0307 	add.w	r3, r1, r7
 80047b4:	fa1f f883 	uxth.w	r8, r3
	int16_t x0 = x + radius;
 80047b8:	eb00 0305 	add.w	r3, r0, r5
	int16_t x1 = x + width - radius;
 80047bc:	9409      	str	r4, [sp, #36]	; 0x24
	int16_t x0 = x + radius;
 80047be:	b298      	uxth	r0, r3
	int16_t y0 = y + radius;
 80047c0:	eb01 0305 	add.w	r3, r1, r5
 80047c4:	b29b      	uxth	r3, r3
	int16_t x0 = x + radius;
 80047c6:	9005      	str	r0, [sp, #20]
	int16_t y0 = y + radius;
 80047c8:	9304      	str	r3, [sp, #16]
	int16_t x1 = x + width - radius;
 80047ca:	eba4 0305 	sub.w	r3, r4, r5
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	9306      	str	r3, [sp, #24]
	int16_t y1 = y + height - radius;
 80047d2:	eba8 0305 	sub.w	r3, r8, r5
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	9307      	str	r3, [sp, #28]
	d = 3 - radius2;
 80047da:	f1c6 0303 	rsb	r3, r6, #3
 80047de:	9308      	str	r3, [sp, #32]
	if (width > radius2) {
 80047e0:	f0c0 8088 	bcc.w	80048f4 <G2D_DrawRoundRect+0x188>
	if (height > radius2) {
 80047e4:	42be      	cmp	r6, r7
 80047e6:	f0c0 80bd 	bcc.w	8004964 <G2D_DrawRoundRect+0x1f8>
	BSP_LCD_DMA2D_Wait();
 80047ea:	b2ab      	uxth	r3, r5
 80047ec:	4daf      	ldr	r5, [pc, #700]	; (8004aac <G2D_DrawRoundRect+0x340>)
 80047ee:	9302      	str	r3, [sp, #8]
 80047f0:	4baf      	ldr	r3, [pc, #700]	; (8004ab0 <G2D_DrawRoundRect+0x344>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4798      	blx	r3
	curx = 0;
 80047f6:	2200      	movs	r2, #0
 80047f8:	465b      	mov	r3, fp
 80047fa:	4650      	mov	r0, sl
 80047fc:	4693      	mov	fp, r2
		BSP_LCD_UpdatePixel(offset, (x0 - curx), (y0 - cury), color);
 80047fe:	fa1f f48b 	uxth.w	r4, fp
 8004802:	9904      	ldr	r1, [sp, #16]
 8004804:	9a02      	ldr	r2, [sp, #8]
 8004806:	9e05      	ldr	r6, [sp, #20]
 8004808:	1a8f      	subs	r7, r1, r2
 800480a:	9317      	str	r3, [sp, #92]	; 0x5c
 800480c:	eba6 0904 	sub.w	r9, r6, r4
 8004810:	682e      	ldr	r6, [r5, #0]
 8004812:	b23f      	sxth	r7, r7
 8004814:	9009      	str	r0, [sp, #36]	; 0x24
 8004816:	fa0f f989 	sxth.w	r9, r9
 800481a:	463a      	mov	r2, r7
 800481c:	4649      	mov	r1, r9
 800481e:	47b0      	blx	r6
		BSP_LCD_UpdatePixel(offset, (x0 - cury), (y0 - curx), color);
 8004820:	9805      	ldr	r0, [sp, #20]
 8004822:	9a02      	ldr	r2, [sp, #8]
 8004824:	9904      	ldr	r1, [sp, #16]
 8004826:	eba0 0802 	sub.w	r8, r0, r2
 800482a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800482c:	eba1 0a04 	sub.w	sl, r1, r4
 8004830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004832:	fa0f f888 	sxth.w	r8, r8
 8004836:	682e      	ldr	r6, [r5, #0]
 8004838:	fa0f fa8a 	sxth.w	sl, sl
 800483c:	4641      	mov	r1, r8
 800483e:	4652      	mov	r2, sl
 8004840:	47b0      	blx	r6
		BSP_LCD_UpdatePixel(offset, (x1 + curx), (y0 - cury), color);
 8004842:	9906      	ldr	r1, [sp, #24]
 8004844:	463a      	mov	r2, r7
 8004846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004848:	190e      	adds	r6, r1, r4
 800484a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800484c:	682f      	ldr	r7, [r5, #0]
 800484e:	b236      	sxth	r6, r6
 8004850:	4631      	mov	r1, r6
 8004852:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x1 + cury), (y0 - curx), color);
 8004854:	9906      	ldr	r1, [sp, #24]
 8004856:	9b02      	ldr	r3, [sp, #8]
 8004858:	4652      	mov	r2, sl
 800485a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800485c:	eb01 0a03 	add.w	sl, r1, r3
 8004860:	682f      	ldr	r7, [r5, #0]
 8004862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004864:	fa0f fa8a 	sxth.w	sl, sl
 8004868:	4651      	mov	r1, sl
 800486a:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x0 - curx), (y1 + cury), color);
 800486c:	9807      	ldr	r0, [sp, #28]
 800486e:	9b02      	ldr	r3, [sp, #8]
 8004870:	4649      	mov	r1, r9
 8004872:	682f      	ldr	r7, [r5, #0]
 8004874:	eb00 0903 	add.w	r9, r0, r3
 8004878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800487a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800487c:	fa0f f989 	sxth.w	r9, r9
 8004880:	464a      	mov	r2, r9
 8004882:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x0 - cury), (y1 + curx), color);
 8004884:	9807      	ldr	r0, [sp, #28]
 8004886:	4641      	mov	r1, r8
 8004888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800488a:	1902      	adds	r2, r0, r4
 800488c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800488e:	682f      	ldr	r7, [r5, #0]
 8004890:	b212      	sxth	r2, r2
 8004892:	900a      	str	r0, [sp, #40]	; 0x28
 8004894:	9209      	str	r2, [sp, #36]	; 0x24
 8004896:	47b8      	blx	r7
		BSP_LCD_UpdatePixel(offset, (x1 + cury), (y1 + curx), color);
 8004898:	980a      	ldr	r0, [sp, #40]	; 0x28
 800489a:	4651      	mov	r1, sl
 800489c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800489e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048a0:	682c      	ldr	r4, [r5, #0]
 80048a2:	9009      	str	r0, [sp, #36]	; 0x24
 80048a4:	47a0      	blx	r4
		BSP_LCD_UpdatePixel(offset, (x1 + curx), (y1 + cury), color);
 80048a6:	464a      	mov	r2, r9
 80048a8:	4631      	mov	r1, r6
 80048aa:	682c      	ldr	r4, [r5, #0]
 80048ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048b0:	47a0      	blx	r4
		if (d < 0) {
 80048b2:	9b08      	ldr	r3, [sp, #32]
			d += ((curx - cury) << 2) + 10;
 80048b4:	9c03      	ldr	r4, [sp, #12]
		if (d < 0) {
 80048b6:	2b00      	cmp	r3, #0
			d += (curx << 2) + 6;
 80048b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
			d += ((curx - cury) << 2) + 10;
 80048bc:	ebab 0204 	sub.w	r2, fp, r4
		if (d < 0) {
 80048c0:	9809      	ldr	r0, [sp, #36]	; 0x24
			d += ((curx - cury) << 2) + 10;
 80048c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		if (d < 0) {
 80048c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048c8:	db0b      	blt.n	80048e2 <G2D_DrawRoundRect+0x176>
			cury--;
 80048ca:	1e61      	subs	r1, r4, #1
		curx++;
 80048cc:	f10b 0b01 	add.w	fp, fp, #1
			d += ((curx - cury) << 2) + 10;
 80048d0:	320a      	adds	r2, #10
	while (curx <= cury) {
 80048d2:	4559      	cmp	r1, fp
			cury--;
 80048d4:	9103      	str	r1, [sp, #12]
			d += ((curx - cury) << 2) + 10;
 80048d6:	9208      	str	r2, [sp, #32]
	while (curx <= cury) {
 80048d8:	f6ff af59 	blt.w	800478e <G2D_DrawRoundRect+0x22>
 80048dc:	b28a      	uxth	r2, r1
 80048de:	9202      	str	r2, [sp, #8]
 80048e0:	e78d      	b.n	80047fe <G2D_DrawRoundRect+0x92>
		curx++;
 80048e2:	f10b 0b01 	add.w	fp, fp, #1
			d += (curx << 2) + 6;
 80048e6:	1d8a      	adds	r2, r1, #6
	while (curx <= cury) {
 80048e8:	45a3      	cmp	fp, r4
			d += (curx << 2) + 6;
 80048ea:	9208      	str	r2, [sp, #32]
	while (curx <= cury) {
 80048ec:	dd87      	ble.n	80047fe <G2D_DrawRoundRect+0x92>
}
 80048ee:	b00d      	add	sp, #52	; 0x34
 80048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		G2D_DrawHLine(x0, y, width - radius2, color);
 80048f4:	1b93      	subs	r3, r2, r6
 80048f6:	fa0f f983 	sxth.w	r9, r3
	int16_t x0 = x + radius;
 80048fa:	b203      	sxth	r3, r0
	if (length < 0) {x -= length + 1; length = -length;}
 80048fc:	f1b9 0f00 	cmp.w	r9, #0
	int16_t x0 = x + radius;
 8004900:	930a      	str	r3, [sp, #40]	; 0x28
	if (length < 0) {x -= length + 1; length = -length;}
 8004902:	f2c0 80d9 	blt.w	8004ab8 <G2D_DrawRoundRect+0x34c>
	if (y >= LCD_HEIGHT) return;
 8004906:	1e4b      	subs	r3, r1, #1
 8004908:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 800490c:	d965      	bls.n	80049da <G2D_DrawRoundRect+0x26e>
		G2D_DrawHLine(x0, y + height, width - radius2, color);
 800490e:	fa0f f388 	sxth.w	r3, r8
	if (y >= LCD_HEIGHT) return;
 8004912:	3b01      	subs	r3, #1
 8004914:	b29b      	uxth	r3, r3
 8004916:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 800491a:	f63f af63 	bhi.w	80047e4 <G2D_DrawRoundRect+0x78>
	if ((x + length) < 1) return;
 800491e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004920:	eb02 0309 	add.w	r3, r2, r9
	if (x >= LCD_WIDTH) return;
 8004924:	2b00      	cmp	r3, #0
 8004926:	f77f af5d 	ble.w	80047e4 <G2D_DrawRoundRect+0x78>
 800492a:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 800492e:	f6bf af59 	bge.w	80047e4 <G2D_DrawRoundRect+0x78>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004932:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004936:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 800493a:	4a5e      	ldr	r2, [pc, #376]	; (8004ab4 <G2D_DrawRoundRect+0x348>)
 800493c:	4641      	mov	r1, r8
	uint16_t x0 = MAX(0, x);
 800493e:	b280      	uxth	r0, r0
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004940:	bfa8      	it	ge
 8004942:	f44f 7348 	movge.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004946:	f8cd b004 	str.w	fp, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 800494a:	b29b      	uxth	r3, r3
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 800494c:	f8d2 8000 	ldr.w	r8, [r2]
	uint16_t lo = LCD_WIDTH - l;
 8004950:	f500 7248 	add.w	r2, r0, #800	; 0x320
 8004954:	1ad2      	subs	r2, r2, r3
	uint16_t l = x1 - x0;
 8004956:	1a1b      	subs	r3, r3, r0
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004958:	b292      	uxth	r2, r2
 800495a:	9200      	str	r2, [sp, #0]
 800495c:	b29a      	uxth	r2, r3
 800495e:	2301      	movs	r3, #1
 8004960:	47c0      	blx	r8
 8004962:	e73f      	b.n	80047e4 <G2D_DrawRoundRect+0x78>
		G2D_DrawVLine(x, y0, height - radius2, color);
 8004964:	1bbb      	subs	r3, r7, r6
	int16_t y0 = y + radius;
 8004966:	f9bd 9010 	ldrsh.w	r9, [sp, #16]
		G2D_DrawVLine(x, y0, height - radius2, color);
 800496a:	fa0f f883 	sxth.w	r8, r3
	if (length < 0) {y -= length + 1; length = -length;}
 800496e:	f1b8 0f00 	cmp.w	r8, #0
 8004972:	f2c0 8085 	blt.w	8004a80 <G2D_DrawRoundRect+0x314>
	if (x >= LCD_WIDTH) return;
 8004976:	9b02      	ldr	r3, [sp, #8]
 8004978:	f240 321e 	movw	r2, #798	; 0x31e
 800497c:	3b01      	subs	r3, #1
 800497e:	b29b      	uxth	r3, r3
 8004980:	4293      	cmp	r3, r2
 8004982:	d94d      	bls.n	8004a20 <G2D_DrawRoundRect+0x2b4>
		G2D_DrawVLine(x + width, y0, height - radius2, color);
 8004984:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	if (x >= LCD_WIDTH) return;
 8004988:	3b01      	subs	r3, #1
 800498a:	f240 321e 	movw	r2, #798	; 0x31e
 800498e:	b29b      	uxth	r3, r3
 8004990:	4293      	cmp	r3, r2
 8004992:	f63f af2a 	bhi.w	80047ea <G2D_DrawRoundRect+0x7e>
	if (y >= LCD_HEIGHT) return;
 8004996:	f5b9 7ff0 	cmp.w	r9, #480	; 0x1e0
	if ((y + length) < 1) return;
 800499a:	eb09 0308 	add.w	r3, r9, r8
	if (y >= LCD_HEIGHT) return;
 800499e:	f6bf af24 	bge.w	80047ea <G2D_DrawRoundRect+0x7e>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f77f af21 	ble.w	80047ea <G2D_DrawRoundRect+0x7e>
	uint16_t y0 = MAX(0, y);
 80049a8:	ea29 71e9 	bic.w	r1, r9, r9, asr #31
 80049ac:	b289      	uxth	r1, r1
	uint16_t l = y1 - y0;
 80049ae:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80049b2:	bfd4      	ite	le
 80049b4:	ebc1 0203 	rsble	r2, r1, r3
 80049b8:	f5c1 72f0 	rsbgt	r2, r1, #480	; 0x1e0
 80049bc:	b293      	uxth	r3, r2
	if (l == 0) return;
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f43f af13 	beq.w	80047ea <G2D_DrawRoundRect+0x7e>
	BSP_LCD_FillBuf(x, y0, 1, l, lo, color);
 80049c4:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <G2D_DrawRoundRect+0x348>)
 80049c6:	f8cd b004 	str.w	fp, [sp, #4]
 80049ca:	6814      	ldr	r4, [r2, #0]
 80049cc:	f240 321f 	movw	r2, #799	; 0x31f
 80049d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049d2:	9200      	str	r2, [sp, #0]
 80049d4:	2201      	movs	r2, #1
 80049d6:	47a0      	blx	r4
 80049d8:	e707      	b.n	80047ea <G2D_DrawRoundRect+0x7e>
	if ((x + length) < 1) return;
 80049da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049dc:	eb09 0302 	add.w	r3, r9, r2
	if (x >= LCD_WIDTH) return;
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dd94      	ble.n	800490e <G2D_DrawRoundRect+0x1a2>
 80049e4:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 80049e8:	da91      	bge.n	800490e <G2D_DrawRoundRect+0x1a2>
	uint16_t x0 = MAX(0, x);
 80049ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80049ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 80049f0:	f8cd b004 	str.w	fp, [sp, #4]
	uint16_t x0 = MAX(0, x);
 80049f4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 80049f8:	bfa8      	it	ge
 80049fa:	f44f 7348 	movge.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 80049fe:	4a2d      	ldr	r2, [pc, #180]	; (8004ab4 <G2D_DrawRoundRect+0x348>)
	uint16_t x0 = MAX(0, x);
 8004a00:	b280      	uxth	r0, r0
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004a02:	b29b      	uxth	r3, r3
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004a04:	6814      	ldr	r4, [r2, #0]
	uint16_t lo = LCD_WIDTH - l;
 8004a06:	f500 7c48 	add.w	ip, r0, #800	; 0x320
 8004a0a:	ebac 0c03 	sub.w	ip, ip, r3
	uint16_t l = x1 - x0;
 8004a0e:	1a1b      	subs	r3, r3, r0
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004a10:	fa1f fc8c 	uxth.w	ip, ip
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	2301      	movs	r3, #1
 8004a18:	f8cd c000 	str.w	ip, [sp]
 8004a1c:	47a0      	blx	r4
 8004a1e:	e776      	b.n	800490e <G2D_DrawRoundRect+0x1a2>
	if ((y + length) < 1) return;
 8004a20:	eb08 0209 	add.w	r2, r8, r9
	if (y >= LCD_HEIGHT) return;
 8004a24:	2a00      	cmp	r2, #0
 8004a26:	ddad      	ble.n	8004984 <G2D_DrawRoundRect+0x218>
 8004a28:	f5b9 7ff0 	cmp.w	r9, #480	; 0x1e0
 8004a2c:	daaa      	bge.n	8004984 <G2D_DrawRoundRect+0x218>
	uint16_t y0 = MAX(0, y);
 8004a2e:	ea29 71e9 	bic.w	r1, r9, r9, asr #31
 8004a32:	b289      	uxth	r1, r1
	uint16_t l = y1 - y0;
 8004a34:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004a38:	bfd4      	ite	le
 8004a3a:	ebc1 0302 	rsble	r3, r1, r2
 8004a3e:	f5c1 73f0 	rsbgt	r3, r1, #480	; 0x1e0
 8004a42:	b29b      	uxth	r3, r3
	if (l == 0) return;
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d09d      	beq.n	8004984 <G2D_DrawRoundRect+0x218>
	BSP_LCD_FillBuf(x, y0, 1, l, lo, color);
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <G2D_DrawRoundRect+0x348>)
 8004a4a:	f8cd b004 	str.w	fp, [sp, #4]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	9802      	ldr	r0, [sp, #8]
 8004a52:	4614      	mov	r4, r2
 8004a54:	f240 321f 	movw	r2, #799	; 0x31f
 8004a58:	9200      	str	r2, [sp, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	47a0      	blx	r4
	if (length < 0) {y -= length + 1; length = -length;}
 8004a5e:	f1b8 0f00 	cmp.w	r8, #0
		G2D_DrawVLine(x + width, y0, height - radius2, color);
 8004a62:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	if (length < 0) {y -= length + 1; length = -length;}
 8004a66:	da8f      	bge.n	8004988 <G2D_DrawRoundRect+0x21c>
 8004a68:	9a04      	ldr	r2, [sp, #16]
 8004a6a:	1bf0      	subs	r0, r6, r7
 8004a6c:	f102 3eff 	add.w	lr, r2, #4294967295
 8004a70:	b280      	uxth	r0, r0
 8004a72:	eb00 020e 	add.w	r2, r0, lr
 8004a76:	fa0f f880 	sxth.w	r8, r0
 8004a7a:	fa0f f982 	sxth.w	r9, r2
 8004a7e:	e783      	b.n	8004988 <G2D_DrawRoundRect+0x21c>
 8004a80:	9b04      	ldr	r3, [sp, #16]
 8004a82:	1bf0      	subs	r0, r6, r7
	if (x >= LCD_WIDTH) return;
 8004a84:	f240 3c1e 	movw	ip, #798	; 0x31e
	if (length < 0) {y -= length + 1; length = -length;}
 8004a88:	f103 3eff 	add.w	lr, r3, #4294967295
	if (x >= LCD_WIDTH) return;
 8004a8c:	9b02      	ldr	r3, [sp, #8]
 8004a8e:	b282      	uxth	r2, r0
 8004a90:	1e59      	subs	r1, r3, #1
	if (length < 0) {y -= length + 1; length = -length;}
 8004a92:	eb02 030e 	add.w	r3, r2, lr
 8004a96:	b212      	sxth	r2, r2
	if (x >= LCD_WIDTH) return;
 8004a98:	b289      	uxth	r1, r1
	if (length < 0) {y -= length + 1; length = -length;}
 8004a9a:	b21b      	sxth	r3, r3
	if (x >= LCD_WIDTH) return;
 8004a9c:	4561      	cmp	r1, ip
 8004a9e:	d92c      	bls.n	8004afa <G2D_DrawRoundRect+0x38e>
		G2D_DrawVLine(x + width, y0, height - radius2, color);
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	if (length < 0) {y -= length + 1; length = -length;}
 8004aa8:	e76e      	b.n	8004988 <G2D_DrawRoundRect+0x21c>
 8004aaa:	bf00      	nop
 8004aac:	24000264 	.word	0x24000264
 8004ab0:	24000254 	.word	0x24000254
 8004ab4:	24000258 	.word	0x24000258
	if (length < 0) {x -= length + 1; length = -length;}
 8004ab8:	1ab2      	subs	r2, r6, r2
 8004aba:	3801      	subs	r0, #1
	if (y >= LCD_HEIGHT) return;
 8004abc:	1e4b      	subs	r3, r1, #1
 8004abe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ac0:	b292      	uxth	r2, r2
	if (length < 0) {x -= length + 1; length = -length;}
 8004ac2:	4604      	mov	r4, r0
	if (y >= LCD_HEIGHT) return;
 8004ac4:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
	if (length < 0) {x -= length + 1; length = -length;}
 8004ac8:	4410      	add	r0, r2
 8004aca:	fa0f f982 	sxth.w	r9, r2
 8004ace:	b202      	sxth	r2, r0
 8004ad0:	920a      	str	r2, [sp, #40]	; 0x28
	if (y >= LCD_HEIGHT) return;
 8004ad2:	f63f af1c 	bhi.w	800490e <G2D_DrawRoundRect+0x1a2>
	if ((x + length) < 1) return;
 8004ad6:	eb09 0302 	add.w	r3, r9, r2
	if (x >= LCD_WIDTH) return;
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	dd02      	ble.n	8004ae4 <G2D_DrawRoundRect+0x378>
 8004ade:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8004ae2:	db20      	blt.n	8004b26 <G2D_DrawRoundRect+0x3ba>
		G2D_DrawHLine(x0, y + height, width - radius2, color);
 8004ae4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
	if (length < 0) {x -= length + 1; length = -length;}
 8004ae8:	4621      	mov	r1, r4
		G2D_DrawHLine(x0, y + height, width - radius2, color);
 8004aea:	fa0f f388 	sxth.w	r3, r8
	if (length < 0) {x -= length + 1; length = -length;}
 8004aee:	4411      	add	r1, r2
 8004af0:	fa0f f982 	sxth.w	r9, r2
 8004af4:	b20a      	sxth	r2, r1
 8004af6:	920a      	str	r2, [sp, #40]	; 0x28
 8004af8:	e70b      	b.n	8004912 <G2D_DrawRoundRect+0x1a6>
	if (y >= LCD_HEIGHT) return;
 8004afa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
	if ((y + length) < 1) return;
 8004afe:	441a      	add	r2, r3
	if (y >= LCD_HEIGHT) return;
 8004b00:	da0e      	bge.n	8004b20 <G2D_DrawRoundRect+0x3b4>
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	dd0c      	ble.n	8004b20 <G2D_DrawRoundRect+0x3b4>
	uint16_t y0 = MAX(0, y);
 8004b06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004b0a:	b299      	uxth	r1, r3
	uint16_t l = y1 - y0;
 8004b0c:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004b10:	bfd4      	ite	le
 8004b12:	ebc1 0302 	rsble	r3, r1, r2
 8004b16:	f5c1 73f0 	rsbgt	r3, r1, #480	; 0x1e0
 8004b1a:	b29b      	uxth	r3, r3
	if (l == 0) return;
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d193      	bne.n	8004a48 <G2D_DrawRoundRect+0x2dc>
		G2D_DrawVLine(x + width, y0, height - radius2, color);
 8004b20:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	if (length < 0) {y -= length + 1; length = -length;}
 8004b24:	e7a4      	b.n	8004a70 <G2D_DrawRoundRect+0x304>
	uint16_t x0 = MAX(0, x);
 8004b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004b28:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004b2c:	f8cd b004 	str.w	fp, [sp, #4]
	uint16_t x0 = MAX(0, x);
 8004b30:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004b34:	bfa8      	it	ge
 8004b36:	f44f 7348 	movge.w	r3, #800	; 0x320
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <G2D_DrawRoundRect+0x3ec>)
	uint16_t x0 = MAX(0, x);
 8004b3c:	b280      	uxth	r0, r0
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004b3e:	f8d2 9000 	ldr.w	r9, [r2]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004b42:	b29b      	uxth	r3, r3
	uint16_t lo = LCD_WIDTH - l;
 8004b44:	f500 7248 	add.w	r2, r0, #800	; 0x320
 8004b48:	1ad2      	subs	r2, r2, r3
	uint16_t l = x1 - x0;
 8004b4a:	1a1b      	subs	r3, r3, r0
	BSP_LCD_FillBuf(x0, y, l, 1, lo, color);
 8004b4c:	b292      	uxth	r2, r2
 8004b4e:	9200      	str	r2, [sp, #0]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	2301      	movs	r3, #1
 8004b54:	47c8      	blx	r9
 8004b56:	e7c5      	b.n	8004ae4 <G2D_DrawRoundRect+0x378>
 8004b58:	24000258 	.word	0x24000258

08004b5c <G2D_DrawFillRoundRectBlend>:
	}

}


void G2D_DrawFillRoundRectBlend(int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 8004b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	b08f      	sub	sp, #60	; 0x3c
 8004b62:	4615      	mov	r5, r2
	int32_t  cury;	/* Current Y Value */

	uint16_t radius2 = radius << 1;

	if (height < radius2) return;
	if (width < radius2) return;
 8004b64:	461a      	mov	r2, r3
void G2D_DrawFillRoundRectBlend(int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t radius, uint32_t color) {
 8004b66:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
	if (width < radius2) return;
 8004b6a:	42ab      	cmp	r3, r5
	uint16_t radius2 = radius << 1;
 8004b6c:	ea4f 0644 	mov.w	r6, r4, lsl #1
	if (width < radius2) return;
 8004b70:	bf28      	it	cs
 8004b72:	462a      	movcs	r2, r5
	uint16_t radius2 = radius << 1;
 8004b74:	b2b6      	uxth	r6, r6
	if (width < radius2) return;
 8004b76:	4296      	cmp	r6, r2
 8004b78:	d902      	bls.n	8004b80 <G2D_DrawFillRoundRectBlend+0x24>
			cury--;
		}
		curx++;
	}

}
 8004b7a:	b00f      	add	sp, #60	; 0x3c
 8004b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004b80:	9a19      	ldr	r2, [sp, #100]	; 0x64
	int16_t y0 = y + radius;
 8004b82:	b289      	uxth	r1, r1
	cury = radius;
 8004b84:	46a3      	mov	fp, r4
	uint16_t x1 = MAX(0, x);
 8004b86:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004b8a:	9201      	str	r2, [sp, #4]
	int16_t y0 = y + radius;
 8004b8c:	190a      	adds	r2, r1, r4
	int16_t y1 = y + height - radius;
 8004b8e:	4419      	add	r1, r3
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004b90:	1e5c      	subs	r4, r3, #1
	int16_t y0 = y + radius;
 8004b92:	b292      	uxth	r2, r2
	d = 3 - radius2;
 8004b94:	f1c6 0903 	rsb	r9, r6, #3
	int16_t y1 = y + height - radius;
 8004b98:	eba1 010b 	sub.w	r1, r1, fp
	uint16_t x1 = MAX(0, x);
 8004b9c:	b2bf      	uxth	r7, r7
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004b9e:	1ba4      	subs	r4, r4, r6
	int16_t y1 = y + height - radius;
 8004ba0:	b28b      	uxth	r3, r1
	uint16_t ol = LCD_WIDTH - w;
 8004ba2:	f507 7c48 	add.w	ip, r7, #800	; 0x320
	int16_t y1 = y + height - radius;
 8004ba6:	9307      	str	r3, [sp, #28]
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004ba8:	1943      	adds	r3, r0, r5
	int16_t x0 = x + radius;
 8004baa:	4458      	add	r0, fp
 8004bac:	b281      	uxth	r1, r0
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004bae:	f240 301f 	movw	r0, #799	; 0x31f
 8004bb2:	4283      	cmp	r3, r0
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004bb4:	e9cd 1205 	strd	r1, r2, [sp, #20]
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004bb8:	bfa8      	it	ge
 8004bba:	4603      	movge	r3, r0
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004bbc:	1c51      	adds	r1, r2, #1
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004bbe:	4638      	mov	r0, r7
	G2D_DrawFillRectBlend(x, y0 + 1, width, height - radius2 - 1, color);
 8004bc0:	b209      	sxth	r1, r1
	uint16_t x2 = MIN(LCD_WIDTH - 1, (x + width));
 8004bc2:	b29b      	uxth	r3, r3
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 8004bc4:	fa11 f484 	uxtah	r4, r1, r4
	uint16_t y1 = MAX(0, y);
 8004bc8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	uint16_t ol = LCD_WIDTH - w;
 8004bcc:	ebac 0c03 	sub.w	ip, ip, r3
	uint16_t w = x2 - x1;
 8004bd0:	1bdb      	subs	r3, r3, r7
	uint16_t y1 = MAX(0, y);
 8004bd2:	b289      	uxth	r1, r1
	uint16_t y2 = MIN(LCD_HEIGHT - 1, (y + height));
 8004bd4:	f240 17df 	movw	r7, #479	; 0x1df
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004bd8:	fa1f f28c 	uxth.w	r2, ip
 8004bdc:	9200      	str	r2, [sp, #0]
 8004bde:	b29a      	uxth	r2, r3
	uint16_t h = y2 - y1;
 8004be0:	42bc      	cmp	r4, r7
 8004be2:	bfd4      	ite	le
 8004be4:	ebc1 0304 	rsble	r3, r1, r4
 8004be8:	ebc1 0307 	rsbgt	r3, r1, r7
	uint16_t wr = width - radius2;
 8004bec:	1bac      	subs	r4, r5, r6
 8004bee:	1b75      	subs	r5, r6, r5
 8004bf0:	b2a7      	uxth	r7, r4
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004bf2:	4ca2      	ldr	r4, [pc, #648]	; (8004e7c <G2D_DrawFillRoundRectBlend+0x320>)
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	6824      	ldr	r4, [r4, #0]
 8004bf8:	46ba      	mov	sl, r7
	uint16_t wr = width - radius2;
 8004bfa:	9709      	str	r7, [sp, #36]	; 0x24
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004bfc:	47a0      	blx	r4
	while (curx <= cury) {
 8004bfe:	9905      	ldr	r1, [sp, #20]
	curx = 0;
 8004c00:	2400      	movs	r4, #0
	if (y >= LCD_HEIGHT) return;
 8004c02:	9a06      	ldr	r2, [sp, #24]
 8004c04:	1e4b      	subs	r3, r1, #1
 8004c06:	b2a9      	uxth	r1, r5
 8004c08:	442b      	add	r3, r5
 8004c0a:	910d      	str	r1, [sp, #52]	; 0x34
	BSP_LCD_FillBufBlend(x1, y1, w, h, ol, color);
 8004c0c:	9102      	str	r1, [sp, #8]
 8004c0e:	b298      	uxth	r0, r3
 8004c10:	9b07      	ldr	r3, [sp, #28]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	9003      	str	r0, [sp, #12]
 8004c16:	b29d      	uxth	r5, r3
	if (y >= LCD_HEIGHT) return;
 8004c18:	1e53      	subs	r3, r2, #1
 8004c1a:	930b      	str	r3, [sp, #44]	; 0x2c
		if(cury > 0) {
 8004c1c:	f1bb 0f00 	cmp.w	fp, #0
 8004c20:	d050      	beq.n	8004cc4 <G2D_DrawFillRoundRectBlend+0x168>
			G2D_DrawHLineBlend(x0 - cury, y1 + curx, 2 * cury + wr, color);
 8004c22:	fa1f f38b 	uxth.w	r3, fp
 8004c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c28:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004c2c:	fa1f f888 	uxth.w	r8, r8
 8004c30:	4442      	add	r2, r8
 8004c32:	b217      	sxth	r7, r2
 8004c34:	b290      	uxth	r0, r2
	if (length == 0) return;
 8004c36:	2f00      	cmp	r7, #0
			G2D_DrawHLineBlend(x0 - cury, y1 + curx, 2 * cury + wr, color);
 8004c38:	900a      	str	r0, [sp, #40]	; 0x28
	if (length == 0) return;
 8004c3a:	d043      	beq.n	8004cc4 <G2D_DrawFillRoundRectBlend+0x168>
			G2D_DrawHLineBlend(x0 - cury, y1 + curx, 2 * cury + wr, color);
 8004c3c:	9a05      	ldr	r2, [sp, #20]
 8004c3e:	b2a1      	uxth	r1, r4
 8004c40:	eba2 0303 	sub.w	r3, r2, r3
 8004c44:	9a07      	ldr	r2, [sp, #28]
 8004c46:	9104      	str	r1, [sp, #16]
 8004c48:	4411      	add	r1, r2
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	b21b      	sxth	r3, r3
 8004c4e:	b289      	uxth	r1, r1
 8004c50:	920c      	str	r2, [sp, #48]	; 0x30
 8004c52:	9308      	str	r3, [sp, #32]
	if (length < 0) {x -= length + 1; length = -length;}
 8004c54:	f2c0 80af 	blt.w	8004db6 <G2D_DrawFillRoundRectBlend+0x25a>
	if (y >= LCD_HEIGHT) return;
 8004c58:	f5b5 7fef 	cmp.w	r5, #478	; 0x1de
 8004c5c:	d809      	bhi.n	8004c72 <G2D_DrawFillRoundRectBlend+0x116>
	if ((x + length) < 1) return;
 8004c5e:	461a      	mov	r2, r3
 8004c60:	18fb      	adds	r3, r7, r3
	if (x >= LCD_WIDTH) return;
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	dd05      	ble.n	8004c72 <G2D_DrawFillRoundRectBlend+0x116>
 8004c66:	f240 301f 	movw	r0, #799	; 0x31f
 8004c6a:	4282      	cmp	r2, r0
 8004c6c:	dc01      	bgt.n	8004c72 <G2D_DrawFillRoundRectBlend+0x116>
 8004c6e:	4610      	mov	r0, r2
 8004c70:	e0d5      	b.n	8004e1e <G2D_DrawFillRoundRectBlend+0x2c2>
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004c72:	9b06      	ldr	r3, [sp, #24]
 8004c74:	9a04      	ldr	r2, [sp, #16]
 8004c76:	1a99      	subs	r1, r3, r2
 8004c78:	b289      	uxth	r1, r1
	if (y >= LCD_HEIGHT) return;
 8004c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c7c:	9a04      	ldr	r2, [sp, #16]
 8004c7e:	1a9e      	subs	r6, r3, r2
 8004c80:	b2b6      	uxth	r6, r6
 8004c82:	f5b6 7fef 	cmp.w	r6, #478	; 0x1de
 8004c86:	d81d      	bhi.n	8004cc4 <G2D_DrawFillRoundRectBlend+0x168>
	if ((x + length) < 1) return;
 8004c88:	9b08      	ldr	r3, [sp, #32]
 8004c8a:	441f      	add	r7, r3
	if (x >= LCD_WIDTH) return;
 8004c8c:	2f00      	cmp	r7, #0
 8004c8e:	dd19      	ble.n	8004cc4 <G2D_DrawFillRoundRectBlend+0x168>
 8004c90:	f240 321f 	movw	r2, #799	; 0x31f
 8004c94:	4293      	cmp	r3, r2
 8004c96:	dc15      	bgt.n	8004cc4 <G2D_DrawFillRoundRectBlend+0x168>
	uint16_t x0 = MAX(0, x);
 8004c98:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004c9c:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004ca0:	9b19      	ldr	r3, [sp, #100]	; 0x64
	uint16_t x0 = MAX(0, x);
 8004ca2:	b280      	uxth	r0, r0
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004ca4:	bfa8      	it	ge
 8004ca6:	f44f 7748 	movge.w	r7, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004caa:	9301      	str	r3, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004cac:	b2bf      	uxth	r7, r7
	uint16_t lo = LCD_WIDTH - l;
 8004cae:	f500 7248 	add.w	r2, r0, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004cb2:	4b72      	ldr	r3, [pc, #456]	; (8004e7c <G2D_DrawFillRoundRectBlend+0x320>)
	uint16_t lo = LCD_WIDTH - l;
 8004cb4:	1bd2      	subs	r2, r2, r7
	uint16_t l = x1 - x0;
 8004cb6:	1a3f      	subs	r7, r7, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004cb8:	681e      	ldr	r6, [r3, #0]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	b292      	uxth	r2, r2
 8004cbe:	9200      	str	r2, [sp, #0]
 8004cc0:	b2ba      	uxth	r2, r7
 8004cc2:	47b0      	blx	r6
		if(curx > 0) {
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	d03b      	beq.n	8004d40 <G2D_DrawFillRoundRectBlend+0x1e4>
			G2D_DrawHLineBlend(x0 - curx, y0 - cury, 2 * curx + wr, color);
 8004cc8:	fa0f f68a 	sxth.w	r6, sl
	if (length == 0) return;
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	d037      	beq.n	8004d40 <G2D_DrawFillRoundRectBlend+0x1e4>
 8004cd0:	9b05      	ldr	r3, [sp, #20]
			G2D_DrawHLineBlend(x0 - curx, y0 - cury, 2 * curx + wr, color);
 8004cd2:	fa1f f28b 	uxth.w	r2, fp
 8004cd6:	eba3 0804 	sub.w	r8, r3, r4
 8004cda:	9b06      	ldr	r3, [sp, #24]
 8004cdc:	9204      	str	r2, [sp, #16]
 8004cde:	eba3 0102 	sub.w	r1, r3, r2
 8004ce2:	fa0f f888 	sxth.w	r8, r8
 8004ce6:	b289      	uxth	r1, r1
	if (length < 0) {x -= length + 1; length = -length;}
 8004ce8:	db78      	blt.n	8004ddc <G2D_DrawFillRoundRectBlend+0x280>
	if (y >= LCD_HEIGHT) return;
 8004cea:	1e4b      	subs	r3, r1, #1
 8004cec:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8004cf0:	f240 8084 	bls.w	8004dfc <G2D_DrawFillRoundRectBlend+0x2a0>
 8004cf4:	4617      	mov	r7, r2
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004cf6:	9b07      	ldr	r3, [sp, #28]
 8004cf8:	441f      	add	r7, r3
 8004cfa:	b2b9      	uxth	r1, r7
	if (y >= LCD_HEIGHT) return;
 8004cfc:	1e4b      	subs	r3, r1, #1
 8004cfe:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8004d02:	d81d      	bhi.n	8004d40 <G2D_DrawFillRoundRectBlend+0x1e4>
	if ((x + length) < 1) return;
 8004d04:	4446      	add	r6, r8
	if (x >= LCD_WIDTH) return;
 8004d06:	2e00      	cmp	r6, #0
 8004d08:	dd1a      	ble.n	8004d40 <G2D_DrawFillRoundRectBlend+0x1e4>
 8004d0a:	f240 331f 	movw	r3, #799	; 0x31f
 8004d0e:	4598      	cmp	r8, r3
 8004d10:	dc16      	bgt.n	8004d40 <G2D_DrawFillRoundRectBlend+0x1e4>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004d12:	f5b6 7f48 	cmp.w	r6, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004d16:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004d1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
	uint16_t x0 = MAX(0, x);
 8004d1c:	fa1f f088 	uxth.w	r0, r8
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004d20:	bfa8      	it	ge
 8004d22:	f44f 7648 	movge.w	r6, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004d26:	9301      	str	r3, [sp, #4]
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004d28:	b2b6      	uxth	r6, r6
	uint16_t lo = LCD_WIDTH - l;
 8004d2a:	f500 7248 	add.w	r2, r0, #800	; 0x320
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004d2e:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <G2D_DrawFillRoundRectBlend+0x320>)
	uint16_t lo = LCD_WIDTH - l;
 8004d30:	1b92      	subs	r2, r2, r6
	uint16_t l = x1 - x0;
 8004d32:	1a36      	subs	r6, r6, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004d34:	681f      	ldr	r7, [r3, #0]
 8004d36:	2301      	movs	r3, #1
 8004d38:	b292      	uxth	r2, r2
 8004d3a:	9200      	str	r2, [sp, #0]
 8004d3c:	b2b2      	uxth	r2, r6
 8004d3e:	47b8      	blx	r7
		if (d < 0) {
 8004d40:	f1b9 0f00 	cmp.w	r9, #0
 8004d44:	db1c      	blt.n	8004d80 <G2D_DrawFillRoundRectBlend+0x224>
	while (curx <= cury) {
 8004d46:	9b03      	ldr	r3, [sp, #12]
 8004d48:	f10a 0a02 	add.w	sl, sl, #2
 8004d4c:	1ed9      	subs	r1, r3, #3
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	fa1f fa8a 	uxth.w	sl, sl
 8004d54:	1e9a      	subs	r2, r3, #2
 8004d56:	1c6b      	adds	r3, r5, #1
 8004d58:	b289      	uxth	r1, r1
 8004d5a:	b29d      	uxth	r5, r3
			d += ((curx - cury) << 2) + 10;
 8004d5c:	eba4 030b 	sub.w	r3, r4, fp
			cury--;
 8004d60:	f10b 3bff 	add.w	fp, fp, #4294967295
		curx++;
 8004d64:	3401      	adds	r4, #1
	while (curx <= cury) {
 8004d66:	b292      	uxth	r2, r2
 8004d68:	9103      	str	r1, [sp, #12]
			d += ((curx - cury) << 2) + 10;
 8004d6a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	while (curx <= cury) {
 8004d6e:	45a3      	cmp	fp, r4
 8004d70:	9202      	str	r2, [sp, #8]
			d += ((curx - cury) << 2) + 10;
 8004d72:	f103 090a 	add.w	r9, r3, #10
	while (curx <= cury) {
 8004d76:	f6bf af51 	bge.w	8004c1c <G2D_DrawFillRoundRectBlend+0xc0>
}
 8004d7a:	b00f      	add	sp, #60	; 0x3c
 8004d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (curx <= cury) {
 8004d80:	9b03      	ldr	r3, [sp, #12]
			d += (curx << 2) + 6;
 8004d82:	eb09 0984 	add.w	r9, r9, r4, lsl #2
		curx++;
 8004d86:	3401      	adds	r4, #1
	while (curx <= cury) {
 8004d88:	f10a 0a02 	add.w	sl, sl, #2
 8004d8c:	1ed9      	subs	r1, r3, #3
 8004d8e:	9b02      	ldr	r3, [sp, #8]
 8004d90:	45a3      	cmp	fp, r4
			d += (curx << 2) + 6;
 8004d92:	f109 0906 	add.w	r9, r9, #6
	while (curx <= cury) {
 8004d96:	f1a3 0202 	sub.w	r2, r3, #2
 8004d9a:	b289      	uxth	r1, r1
 8004d9c:	f105 0301 	add.w	r3, r5, #1
 8004da0:	fa1f fa8a 	uxth.w	sl, sl
 8004da4:	b292      	uxth	r2, r2
 8004da6:	9103      	str	r1, [sp, #12]
 8004da8:	b29d      	uxth	r5, r3
 8004daa:	9202      	str	r2, [sp, #8]
 8004dac:	f6bf af36 	bge.w	8004c1c <G2D_DrawFillRoundRectBlend+0xc0>
}
 8004db0:	b00f      	add	sp, #60	; 0x3c
 8004db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 0) {x -= length + 1; length = -length;}
 8004db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db8:	3a01      	subs	r2, #1
	if (y >= LCD_HEIGHT) return;
 8004dba:	f5b5 7fef 	cmp.w	r5, #478	; 0x1de
	if (length < 0) {x -= length + 1; length = -length;}
 8004dbe:	eba3 0c08 	sub.w	ip, r3, r8
 8004dc2:	eba2 0000 	sub.w	r0, r2, r0
 8004dc6:	fa0f f38c 	sxth.w	r3, ip
 8004dca:	b200      	sxth	r0, r0
	if (y >= LCD_HEIGHT) return;
 8004dcc:	d920      	bls.n	8004e10 <G2D_DrawFillRoundRectBlend+0x2b4>
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004dce:	461f      	mov	r7, r3
 8004dd0:	9a04      	ldr	r2, [sp, #16]
 8004dd2:	9b06      	ldr	r3, [sp, #24]
 8004dd4:	9008      	str	r0, [sp, #32]
 8004dd6:	1a99      	subs	r1, r3, r2
 8004dd8:	b289      	uxth	r1, r1
	if (length < 0) {x -= length + 1; length = -length;}
 8004dda:	e74e      	b.n	8004c7a <G2D_DrawFillRoundRectBlend+0x11e>
	if (y >= LCD_HEIGHT) return;
 8004ddc:	1e4b      	subs	r3, r1, #1
	if (length < 0) {x -= length + 1; length = -length;}
 8004dde:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8004de2:	f9bd c008 	ldrsh.w	ip, [sp, #8]
	if (y >= LCD_HEIGHT) return;
 8004de6:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
	if (length < 0) {x -= length + 1; length = -length;}
 8004dea:	4610      	mov	r0, r2
	if (y >= LCD_HEIGHT) return;
 8004dec:	d948      	bls.n	8004e80 <G2D_DrawFillRoundRectBlend+0x324>
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004dee:	9b07      	ldr	r3, [sp, #28]
 8004df0:	4666      	mov	r6, ip
 8004df2:	9f04      	ldr	r7, [sp, #16]
 8004df4:	4690      	mov	r8, r2
 8004df6:	441f      	add	r7, r3
 8004df8:	b2b9      	uxth	r1, r7
	if (length < 0) {x -= length + 1; length = -length;}
 8004dfa:	e77f      	b.n	8004cfc <G2D_DrawFillRoundRectBlend+0x1a0>
	if (x >= LCD_WIDTH) return;
 8004dfc:	f240 321f 	movw	r2, #799	; 0x31f
	if ((x + length) < 1) return;
 8004e00:	eb08 0306 	add.w	r3, r8, r6
	if (x >= LCD_WIDTH) return;
 8004e04:	4590      	cmp	r8, r2
 8004e06:	dc6b      	bgt.n	8004ee0 <G2D_DrawFillRoundRectBlend+0x384>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dd69      	ble.n	8004ee0 <G2D_DrawFillRoundRectBlend+0x384>
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	e03f      	b.n	8004e90 <G2D_DrawFillRoundRectBlend+0x334>
	if ((x + length) < 1) return;
 8004e10:	4403      	add	r3, r0
	if (x >= LCD_WIDTH) return;
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dd6e      	ble.n	8004ef4 <G2D_DrawFillRoundRectBlend+0x398>
 8004e16:	f240 361f 	movw	r6, #799	; 0x31f
 8004e1a:	42b0      	cmp	r0, r6
 8004e1c:	dc6a      	bgt.n	8004ef4 <G2D_DrawFillRoundRectBlend+0x398>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004e1e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004e22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e26:	9a19      	ldr	r2, [sp, #100]	; 0x64
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004e28:	bfa8      	it	ge
 8004e2a:	f44f 7348 	movge.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004e2e:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e30:	9201      	str	r2, [sp, #4]
	uint16_t lo = LCD_WIDTH - l;
 8004e32:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004e36:	b29a      	uxth	r2, r3
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <G2D_DrawFillRoundRectBlend+0x320>)
	uint16_t lo = LCD_WIDTH - l;
 8004e3a:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 8004e3e:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	fa1f fc8c 	uxth.w	ip, ip
 8004e46:	461e      	mov	r6, r3
 8004e48:	b292      	uxth	r2, r2
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f8cd c000 	str.w	ip, [sp]
 8004e50:	47b0      	blx	r6
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004e52:	9b06      	ldr	r3, [sp, #24]
 8004e54:	9a04      	ldr	r2, [sp, #16]
	if (length < 0) {x -= length + 1; length = -length;}
 8004e56:	2f00      	cmp	r7, #0
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004e58:	eba3 0102 	sub.w	r1, r3, r2
 8004e5c:	b289      	uxth	r1, r1
	if (length < 0) {x -= length + 1; length = -length;}
 8004e5e:	f6bf af0c 	bge.w	8004c7a <G2D_DrawFillRoundRectBlend+0x11e>
 8004e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e64:	1e5a      	subs	r2, r3, #1
 8004e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e68:	eba3 0c08 	sub.w	ip, r3, r8
 8004e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e6e:	fa0f f78c 	sxth.w	r7, ip
 8004e72:	1ad2      	subs	r2, r2, r3
 8004e74:	b213      	sxth	r3, r2
 8004e76:	9308      	str	r3, [sp, #32]
 8004e78:	e6ff      	b.n	8004c7a <G2D_DrawFillRoundRectBlend+0x11e>
 8004e7a:	bf00      	nop
 8004e7c:	2400025c 	.word	0x2400025c
	if (x >= LCD_WIDTH) return;
 8004e80:	f240 371f 	movw	r7, #799	; 0x31f
	if ((x + length) < 1) return;
 8004e84:	eb02 030c 	add.w	r3, r2, ip
	if (x >= LCD_WIDTH) return;
 8004e88:	42ba      	cmp	r2, r7
 8004e8a:	dc2e      	bgt.n	8004eea <G2D_DrawFillRoundRectBlend+0x38e>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	dd2c      	ble.n	8004eea <G2D_DrawFillRoundRectBlend+0x38e>
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004e90:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004e94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004e98:	9a19      	ldr	r2, [sp, #100]	; 0x64
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004e9a:	bfa8      	it	ge
 8004e9c:	f44f 7348 	movge.w	r3, #800	; 0x320
	uint16_t x0 = MAX(0, x);
 8004ea0:	b280      	uxth	r0, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004ea2:	9201      	str	r2, [sp, #4]
	uint16_t lo = LCD_WIDTH - l;
 8004ea4:	f500 7c48 	add.w	ip, r0, #800	; 0x320
	uint16_t x1 = MIN(LCD_WIDTH, x + length);
 8004ea8:	b29a      	uxth	r2, r3
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004eaa:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <G2D_DrawFillRoundRectBlend+0x3a4>)
	uint16_t lo = LCD_WIDTH - l;
 8004eac:	ebac 0c02 	sub.w	ip, ip, r2
	uint16_t l = x1 - x0;
 8004eb0:	1a12      	subs	r2, r2, r0
	BSP_LCD_FillBufBlend(x0, y, l, 1, lo, color);
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	fa1f fc8c 	uxth.w	ip, ip
 8004eb8:	461f      	mov	r7, r3
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f8cd c000 	str.w	ip, [sp]
 8004ec2:	47b8      	blx	r7
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004ec4:	9b07      	ldr	r3, [sp, #28]
 8004ec6:	9f04      	ldr	r7, [sp, #16]
	if (length < 0) {x -= length + 1; length = -length;}
 8004ec8:	2e00      	cmp	r6, #0
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004eca:	441f      	add	r7, r3
 8004ecc:	b2b9      	uxth	r1, r7
	if (length < 0) {x -= length + 1; length = -length;}
 8004ece:	f6bf af15 	bge.w	8004cfc <G2D_DrawFillRoundRectBlend+0x1a0>
 8004ed2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8004ed6:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8004eda:	4690      	mov	r8, r2
 8004edc:	4666      	mov	r6, ip
 8004ede:	e70d      	b.n	8004cfc <G2D_DrawFillRoundRectBlend+0x1a0>
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004ee0:	9b07      	ldr	r3, [sp, #28]
 8004ee2:	9f04      	ldr	r7, [sp, #16]
 8004ee4:	441f      	add	r7, r3
 8004ee6:	b2b9      	uxth	r1, r7
	if (length < 0) {x -= length + 1; length = -length;}
 8004ee8:	e708      	b.n	8004cfc <G2D_DrawFillRoundRectBlend+0x1a0>
			G2D_DrawHLineBlend(x0 - curx, y1 + cury, 2 * curx + wr, color);
 8004eea:	9b07      	ldr	r3, [sp, #28]
 8004eec:	9f04      	ldr	r7, [sp, #16]
 8004eee:	441f      	add	r7, r3
 8004ef0:	b2b9      	uxth	r1, r7
	if (length < 0) {x -= length + 1; length = -length;}
 8004ef2:	e7f2      	b.n	8004eda <G2D_DrawFillRoundRectBlend+0x37e>
			G2D_DrawHLineBlend(x0 - cury, y0 - curx, 2 * cury + wr, color);
 8004ef4:	9b06      	ldr	r3, [sp, #24]
 8004ef6:	9904      	ldr	r1, [sp, #16]
 8004ef8:	1a59      	subs	r1, r3, r1
 8004efa:	b289      	uxth	r1, r1
	if (length < 0) {x -= length + 1; length = -length;}
 8004efc:	e7b6      	b.n	8004e6c <G2D_DrawFillRoundRectBlend+0x310>
 8004efe:	bf00      	nop
 8004f00:	2400025c 	.word	0x2400025c

08004f04 <G2D_TextBlend>:
	}
	return x + w;
}


uint16_t G2D_TextBlend(int16_t x, int16_t y, const uint8_t *font, char *str, uint32_t color) {
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	b091      	sub	sp, #68	; 0x44
 8004f0a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8004f0c:	9004      	str	r0, [sp, #16]
 8004f0e:	910a      	str	r1, [sp, #40]	; 0x28
 8004f10:	e9cd 3205 	strd	r3, r2, [sp, #20]
	// Calculating color array for anty-aliasing
	uint32_t text_clut[4];
	uint32_t a1 = 0;

	switch (BSP_LCD_GetColorMode()) {
 8004f14:	f7fe f900 	bl	8003118 <BSP_LCD_GetColorMode>
 8004f18:	3801      	subs	r0, #1
 8004f1a:	2805      	cmp	r0, #5
 8004f1c:	d80d      	bhi.n	8004f3a <G2D_TextBlend+0x36>
 8004f1e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004f22:	0006      	.short	0x0006
 8004f24:	00e40006 	.word	0x00e40006
 8004f28:	00fa0006 	.word	0x00fa0006
 8004f2c:	00e4      	.short	0x00e4
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
		text_clut[3] = color;
		break;
	case LCD_COLOR_MODE_ARGB1555:
		text_clut[0] = 0;
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2300      	movs	r3, #0
		text_clut[1] = 0;
		text_clut[2] = color;
 8004f32:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
		text_clut[0] = 0;
 8004f36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		text_clut[3] = color;
		break;
	}


	uint8_t h = *(font);	// Font height
 8004f3a:	9b06      	ldr	r3, [sp, #24]
 8004f3c:	781c      	ldrb	r4, [r3, #0]
	uint8_t w = 0;			// Character width
	uint8_t flag = 0;		// Flag -> character pointer not to beupdated in first loop

	// Waiting for DMA2D to stop
	BSP_LCD_DMA2D_Wait();
 8004f3e:	4b82      	ldr	r3, [pc, #520]	; (8005148 <G2D_TextBlend+0x244>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4798      	blx	r3

	while (*str > 0) {
 8004f44:	9b05      	ldr	r3, [sp, #20]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80fb 	beq.w	8005144 <G2D_TextBlend+0x240>

		// Getting character width
		w = _charw(font, *str);

		// Is character within screen area?
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 8004f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 8004f50:	9906      	ldr	r1, [sp, #24]
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 8004f52:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004f56:	4414      	add	r4, r2
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 8004f58:	784e      	ldrb	r6, [r1, #1]
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 8004f5a:	bfb4      	ite	lt
 8004f5c:	2200      	movlt	r2, #0
 8004f5e:	2201      	movge	r2, #1
		x += w;
 8004f60:	f8bd 9010 	ldrh.w	r9, [sp, #16]
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 8004f64:	4630      	mov	r0, r6
 8004f66:	ea42 72d4 	orr.w	r2, r2, r4, lsr #31
 8004f6a:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 800514c <G2D_TextBlend+0x248>
 8004f6e:	464f      	mov	r7, r9
 8004f70:	46b6      	mov	lr, r6
 8004f72:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f74:	e01d      	b.n	8004fb2 <G2D_TextBlend+0xae>
	uint16_t a = (ch - 33) * 2;
 8004f76:	0064      	lsls	r4, r4, #1
	if (*adr0 == *adr1) return swidth;
 8004f78:	9b06      	ldr	r3, [sp, #24]
	adr0 = (uint16_t*)(font + a + 2);
 8004f7a:	b2a4      	uxth	r4, r4
 8004f7c:	1ca5      	adds	r5, r4, #2
	adr1 = (uint16_t*)(font + a + 4);
 8004f7e:	3404      	adds	r4, #4
	if (*adr0 == *adr1) return swidth;
 8004f80:	5b5a      	ldrh	r2, [r3, r5]
	adr1 = (uint16_t*)(font + a + 4);
 8004f82:	191e      	adds	r6, r3, r4
	if (*adr0 == *adr1) return swidth;
 8004f84:	5b19      	ldrh	r1, [r3, r4]
	adr1 = (uint16_t*)(font + a + 4);
 8004f86:	9609      	str	r6, [sp, #36]	; 0x24
	if (*adr0 == *adr1) return swidth;
 8004f88:	428a      	cmp	r2, r1
 8004f8a:	f000 80a8 	beq.w	80050de <G2D_TextBlend+0x1da>
	return *(font + *adr0);
 8004f8e:	5c9b      	ldrb	r3, [r3, r2]
 8004f90:	461e      	mov	r6, r3
 8004f92:	9308      	str	r3, [sp, #32]
		if (((x + w) < 0) || (x >= LCD_WIDTH) || ((y + h) < 0) || (y >= LCD_HEIGHT)) continue; // No rendering
 8004f94:	9b04      	ldr	r3, [sp, #16]
 8004f96:	199b      	adds	r3, r3, r6
 8004f98:	d404      	bmi.n	8004fa4 <G2D_TextBlend+0xa0>
 8004f9a:	9e04      	ldr	r6, [sp, #16]
 8004f9c:	f240 3c1f 	movw	ip, #799	; 0x31f
 8004fa0:	4566      	cmp	r6, ip
 8004fa2:	dd15      	ble.n	8004fd0 <G2D_TextBlend+0xcc>
		w = _charw(font, *str);
 8004fa4:	9a05      	ldr	r2, [sp, #20]
		x += w;
 8004fa6:	b29f      	uxth	r7, r3
 8004fa8:	b21b      	sxth	r3, r3
 8004faa:	9304      	str	r3, [sp, #16]
		w = _charw(font, *str);
 8004fac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004fb0:	9205      	str	r2, [sp, #20]
	if ((ch < 33) || (ch > 126)) return swidth;
 8004fb2:	f1a3 0421 	sub.w	r4, r3, #33	; 0x21
 8004fb6:	b2e2      	uxtb	r2, r4
 8004fb8:	2a5d      	cmp	r2, #93	; 0x5d
 8004fba:	d9dc      	bls.n	8004f76 <G2D_TextBlend+0x72>
	while (*str > 0) {
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d05c      	beq.n	800507a <G2D_TextBlend+0x176>
 8004fc0:	9b06      	ldr	r3, [sp, #24]
 8004fc2:	f893 e001 	ldrb.w	lr, [r3, #1]
	uint8_t swidth = *(font + 1);			   	// Width of space (empty character)
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	9a04      	ldr	r2, [sp, #16]
 8004fca:	4670      	mov	r0, lr
 8004fcc:	4413      	add	r3, r2
 8004fce:	e7e9      	b.n	8004fa4 <G2D_TextBlend+0xa0>
	if ((ch < 33) || (ch > 126)) return swidth;
 8004fd0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	f040 8087 	bne.w	80050e6 <G2D_TextBlend+0x1e2>
	if (*adr0 == *adr1) return swidth;
 8004fd8:	428a      	cmp	r2, r1
 8004fda:	d0e3      	beq.n	8004fa4 <G2D_TextBlend+0xa0>
	uint8_t width = *(font + *adr0);
 8004fdc:	9e06      	ldr	r6, [sp, #24]
 8004fde:	5cb3      	ldrb	r3, [r6, r2]
 8004fe0:	9302      	str	r3, [sp, #8]
	uint32_t offset = BSP_LCD_GetEditFrameAddr();
 8004fe2:	f7fe f88f 	bl	8003104 <BSP_LCD_GetEditFrameAddr>
	for (uint16_t j = *adr0 + 1; j < *adr1; j++) {
 8004fe6:	5b73      	ldrh	r3, [r6, r5]
 8004fe8:	5b32      	ldrh	r2, [r6, r4]
 8004fea:	3301      	adds	r3, #1
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	9307      	str	r3, [sp, #28]
 8004ff2:	d23d      	bcs.n	8005070 <G2D_TextBlend+0x16c>
	int16_t fy = 0;
 8004ff4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	int16_t fx = 0;
 8004ff6:	463e      	mov	r6, r7
	int16_t fy = 0;
 8004ff8:	46a0      	mov	r8, r4
		m = *(font + j);
 8004ffa:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 8004ffe:	f813 9001 	ldrb.w	r9, [r3, r1]
		switch (m >> 6) {
 8005002:	ea4f 1399 	mov.w	r3, r9, lsr #6
 8005006:	1e59      	subs	r1, r3, #1
 8005008:	2901      	cmp	r1, #1
 800500a:	d93d      	bls.n	8005088 <G2D_TextBlend+0x184>
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 800500c:	f019 093f 	ands.w	r9, r9, #63	; 0x3f
 8005010:	d028      	beq.n	8005064 <G2D_TextBlend+0x160>
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 8005012:	aa10      	add	r2, sp, #64	; 0x40
 8005014:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
				if (fx==width) { fx = 0; fy++; }
 8005018:	2700      	movs	r7, #0
 800501a:	9603      	str	r6, [sp, #12]
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 800501c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005020:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8005024:	b2a4      	uxth	r4, r4
 8005026:	9903      	ldr	r1, [sp, #12]
 8005028:	fa1f f588 	uxth.w	r5, r8
 800502c:	f8db 6000 	ldr.w	r6, [fp]
 8005030:	1861      	adds	r1, r4, r1
				fx++;
 8005032:	3401      	adds	r4, #1
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 8005034:	eb05 020a 	add.w	r2, r5, sl
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	b209      	sxth	r1, r1
 800503c:	9000      	str	r0, [sp, #0]
 800503e:	b212      	sxth	r2, r2
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 8005040:	3701      	adds	r7, #1
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 8005042:	47b0      	blx	r6
				if (fx==width) { fx = 0; fy++; }
 8005044:	9b02      	ldr	r3, [sp, #8]
				fx++;
 8005046:	b224      	sxth	r4, r4
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 8005048:	b2fa      	uxtb	r2, r7
				if (fx==width) { fx = 0; fy++; }
 800504a:	429c      	cmp	r4, r3
 800504c:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005050:	d103      	bne.n	800505a <G2D_TextBlend+0x156>
 8005052:	3501      	adds	r5, #1
 8005054:	2400      	movs	r4, #0
 8005056:	fa0f f885 	sxth.w	r8, r5
			for (uint8_t i = 0; i < (m & 0x3F); i++) {
 800505a:	4591      	cmp	r9, r2
 800505c:	d8e2      	bhi.n	8005024 <G2D_TextBlend+0x120>
	for (uint16_t j = *adr0 + 1; j < *adr1; j++) {
 800505e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005060:	9e03      	ldr	r6, [sp, #12]
 8005062:	881a      	ldrh	r2, [r3, #0]
 8005064:	9b07      	ldr	r3, [sp, #28]
 8005066:	3301      	adds	r3, #1
 8005068:	b29b      	uxth	r3, r3
 800506a:	4293      	cmp	r3, r2
 800506c:	9307      	str	r3, [sp, #28]
 800506e:	d3c4      	bcc.n	8004ffa <G2D_TextBlend+0xf6>
	while (*str > 0) {
 8005070:	9b05      	ldr	r3, [sp, #20]
 8005072:	9808      	ldr	r0, [sp, #32]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1a2      	bne.n	8004fc0 <G2D_TextBlend+0xbc>

		// Character rendering
		_charblend(x, y, font, *str, text_clut);

	}
	return x + w;
 800507a:	b280      	uxth	r0, r0
 800507c:	9b04      	ldr	r3, [sp, #16]
 800507e:	4418      	add	r0, r3
 8005080:	b280      	uxth	r0, r0
}
 8005082:	b011      	add	sp, #68	; 0x44
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[m >> 6]);
 8005088:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[(m >> i) & 0x03]);
 800508c:	2706      	movs	r7, #6
 800508e:	9601      	str	r6, [sp, #4]
 8005090:	fa49 f307 	asr.w	r3, r9, r7
 8005094:	9a01      	ldr	r2, [sp, #4]
 8005096:	b2a4      	uxth	r4, r4
 8005098:	ae10      	add	r6, sp, #64	; 0x40
 800509a:	fa1f f588 	uxth.w	r5, r8
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	18a1      	adds	r1, r4, r2
				fx++;
 80050a4:	3401      	adds	r4, #1
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[(m >> i) & 0x03]);
 80050a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80050aa:	eb05 020a 	add.w	r2, r5, sl
 80050ae:	b209      	sxth	r1, r1
 80050b0:	f8db 6000 	ldr.w	r6, [fp]
 80050b4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80050b8:	b212      	sxth	r2, r2
 80050ba:	9000      	str	r0, [sp, #0]
				fx++;
 80050bc:	b224      	sxth	r4, r4
				BSP_LCD_UpdatePixelBlend(offset, x+fx, y+fy, text_clut[(m >> i) & 0x03]);
 80050be:	47b0      	blx	r6
				if (fx==width) { fx = 0; fy++; }
 80050c0:	9b02      	ldr	r3, [sp, #8]
			for (int8_t i = 6; i >= 0; i-=2) {
 80050c2:	3f02      	subs	r7, #2
				if (fx==width) { fx = 0; fy++; }
 80050c4:	9800      	ldr	r0, [sp, #0]
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d103      	bne.n	80050d2 <G2D_TextBlend+0x1ce>
 80050ca:	3501      	adds	r5, #1
 80050cc:	2400      	movs	r4, #0
 80050ce:	fa0f f885 	sxth.w	r8, r5
			for (int8_t i = 6; i >= 0; i-=2) {
 80050d2:	1cbb      	adds	r3, r7, #2
 80050d4:	d1dc      	bne.n	8005090 <G2D_TextBlend+0x18c>
	for (uint16_t j = *adr0 + 1; j < *adr1; j++) {
 80050d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d8:	9e01      	ldr	r6, [sp, #4]
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	e7c2      	b.n	8005064 <G2D_TextBlend+0x160>
 80050de:	4676      	mov	r6, lr
	if (*adr0 == *adr1) return swidth;
 80050e0:	f8cd e020 	str.w	lr, [sp, #32]
 80050e4:	e756      	b.n	8004f94 <G2D_TextBlend+0x90>
 80050e6:	9808      	ldr	r0, [sp, #32]
 80050e8:	e76d      	b.n	8004fc6 <G2D_TextBlend+0xc2>
		a1 = (color & 0xFF000000) >> 24;
 80050ea:	0e23      	lsrs	r3, r4, #24
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 80050ec:	22ab      	movs	r2, #171	; 0xab
		text_clut[3] = color;
 80050ee:	940f      	str	r4, [sp, #60]	; 0x3c
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 80050f0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 80050f4:	fb03 f202 	mul.w	r2, r3, r2
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 80050f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005100:	0a12      	lsrs	r2, r2, #8
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005102:	0a1b      	lsrs	r3, r3, #8
		text_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005104:	ea44 6202 	orr.w	r2, r4, r2, lsl #24
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005108:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
		text_clut[0] = 0;
 800510c:	2300      	movs	r3, #0
		text_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 800510e:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
		text_clut[0] = 0;
 8005112:	930c      	str	r3, [sp, #48]	; 0x30
		break;
 8005114:	e711      	b.n	8004f3a <G2D_TextBlend+0x36>
		a1 = (color & 0xF000) >> 12;
 8005116:	f3c4 3303 	ubfx	r3, r4, #12, #4
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800511a:	22ab      	movs	r2, #171	; 0xab
		text_clut[3] = color;
 800511c:	940f      	str	r4, [sp, #60]	; 0x3c
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 800511e:	f3c4 040b 	ubfx	r4, r4, #0, #12
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 8005122:	fb03 f202 	mul.w	r2, r3, r2
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005126:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800512a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800512e:	0a12      	lsrs	r2, r2, #8
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005130:	0a1b      	lsrs	r3, r3, #8
		text_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 8005132:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005136:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
		text_clut[0] = 0;
 800513a:	2300      	movs	r3, #0
		text_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 800513c:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
		text_clut[0] = 0;
 8005140:	930c      	str	r3, [sp, #48]	; 0x30
		break;
 8005142:	e6fa      	b.n	8004f3a <G2D_TextBlend+0x36>
	while (*str > 0) {
 8005144:	4618      	mov	r0, r3
 8005146:	e799      	b.n	800507c <G2D_TextBlend+0x178>
 8005148:	24000254 	.word	0x24000254
 800514c:	24000268 	.word	0x24000268

08005150 <G2D_DrawIconBlend>:
	y -= height >> 1;
	G2D_DrawIcon(iconsource, x, y, color, bgcolor);
}


void G2D_DrawIconBlend(uint32_t iconsource, int16_t x, int16_t y, uint32_t color) {
 8005150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	b08b      	sub	sp, #44	; 0x2c
 8005156:	4605      	mov	r5, r0
 8005158:	4691      	mov	r9, r2
 800515a:	461c      	mov	r4, r3
 800515c:	9102      	str	r1, [sp, #8]
	// Calculating color array for anty-aliasing
	uint32_t icon_clut[4];
	uint32_t a1 = 0;

	switch (BSP_LCD_GetColorMode()) {
 800515e:	f7fd ffdb 	bl	8003118 <BSP_LCD_GetColorMode>
 8005162:	3801      	subs	r0, #1
 8005164:	2805      	cmp	r0, #5
 8005166:	d80a      	bhi.n	800517e <G2D_DrawIconBlend+0x2e>
 8005168:	e8df f000 	tbb	[pc, r0]
 800516c:	034d0303 	.word	0x034d0303
 8005170:	4d63      	.short	0x4d63
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
		icon_clut[3] = color;
		break;
	case LCD_COLOR_MODE_ARGB1555:
		icon_clut[0] = 0;
 8005172:	2000      	movs	r0, #0
 8005174:	2100      	movs	r1, #0
		icon_clut[1] = 0;
		icon_clut[2] = color;
 8005176:	e9cd 4408 	strd	r4, r4, [sp, #32]
		icon_clut[0] = 0;
 800517a:	e9cd 0106 	strd	r0, r1, [sp, #24]
		icon_clut[3] = color;
		break;
	}

	// Calculating destination address
	uint32_t faddr = BSP_LCD_GetEditFrameAddr();
 800517e:	f7fd ffc1 	bl	8003104 <BSP_LCD_GetEditFrameAddr>

	// Decoding compressed icon data
	uint8_t *pdata;
	pdata = (uint8_t *)iconsource;

	uint16_t width = *(uint16_t *)(pdata++);
 8005182:	882b      	ldrh	r3, [r5, #0]
	pdata++;
	uint16_t height = *(uint16_t *)(pdata++);
	pdata++;
 8005184:	1d2a      	adds	r2, r5, #4
	uint32_t faddr = BSP_LCD_GetEditFrameAddr();
 8005186:	4682      	mov	sl, r0
	uint16_t width = *(uint16_t *)(pdata++);
 8005188:	9305      	str	r3, [sp, #20]
	uint16_t height = *(uint16_t *)(pdata++);
 800518a:	886b      	ldrh	r3, [r5, #2]
	pdata++;
 800518c:	9203      	str	r2, [sp, #12]
	int16_t yy = y;

	// Waiting for DMA2D to stop
	BSP_LCD_DMA2D_Wait();

	while (yy < (y+height)) {
 800518e:	eb03 0409 	add.w	r4, r3, r9
	BSP_LCD_DMA2D_Wait();
 8005192:	4b33      	ldr	r3, [pc, #204]	; (8005260 <G2D_DrawIconBlend+0x110>)
 8005194:	681b      	ldr	r3, [r3, #0]
	while (yy < (y+height)) {
 8005196:	9404      	str	r4, [sp, #16]
	BSP_LCD_DMA2D_Wait();
 8005198:	4798      	blx	r3
	while (yy < (y+height)) {
 800519a:	45a1      	cmp	r9, r4
 800519c:	da30      	bge.n	8005200 <G2D_DrawIconBlend+0xb0>
	int16_t xx = x;
 800519e:	f8dd b008 	ldr.w	fp, [sp, #8]
 80051a2:	4655      	mov	r5, sl
 80051a4:	4f2f      	ldr	r7, [pc, #188]	; (8005264 <G2D_DrawIconBlend+0x114>)
		uint8_t j = *(pdata++);
 80051a6:	9a03      	ldr	r2, [sp, #12]
 80051a8:	4613      	mov	r3, r2
 80051aa:	7816      	ldrb	r6, [r2, #0]
 80051ac:	3301      	adds	r3, #1
 80051ae:	9303      	str	r3, [sp, #12]
		uint8_t m = j >> 6;
 80051b0:	09b3      	lsrs	r3, r6, #6
		uint8_t r = j & 0x3F;
		for (uint32_t z = 0; z<r; z++) {
 80051b2:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 80051b6:	d020      	beq.n	80051fa <G2D_DrawIconBlend+0xaa>
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051b8:	aa0a      	add	r2, sp, #40	; 0x28
			xx++;
			if (xx == (x+width)) {
 80051ba:	9905      	ldr	r1, [sp, #20]
		for (uint32_t z = 0; z<r; z++) {
 80051bc:	2400      	movs	r4, #0
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051be:	9601      	str	r6, [sp, #4]
 80051c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			if (xx == (x+width)) {
 80051c4:	9a02      	ldr	r2, [sp, #8]
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051c6:	f853 8c10 	ldr.w	r8, [r3, #-16]
			if (xx == (x+width)) {
 80051ca:	eb02 0a01 	add.w	sl, r2, r1
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051ce:	4659      	mov	r1, fp
			xx++;
 80051d0:	f10b 0b01 	add.w	fp, fp, #1
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051d4:	464a      	mov	r2, r9
 80051d6:	4643      	mov	r3, r8
			xx++;
 80051d8:	fa0f fb8b 	sxth.w	fp, fp
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051dc:	4628      	mov	r0, r5
 80051de:	683e      	ldr	r6, [r7, #0]
		for (uint32_t z = 0; z<r; z++) {
 80051e0:	3401      	adds	r4, #1
			BSP_LCD_UpdatePixelBlend(faddr, xx, yy, icon_clut[m]);
 80051e2:	47b0      	blx	r6
			if (xx == (x+width)) {
 80051e4:	45d3      	cmp	fp, sl
 80051e6:	d105      	bne.n	80051f4 <G2D_DrawIconBlend+0xa4>
				xx = x;
				yy++;
 80051e8:	f109 0901 	add.w	r9, r9, #1
				xx = x;
 80051ec:	f8dd b008 	ldr.w	fp, [sp, #8]
				yy++;
 80051f0:	fa0f f989 	sxth.w	r9, r9
		for (uint32_t z = 0; z<r; z++) {
 80051f4:	9b01      	ldr	r3, [sp, #4]
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d1e9      	bne.n	80051ce <G2D_DrawIconBlend+0x7e>
	while (yy < (y+height)) {
 80051fa:	9b04      	ldr	r3, [sp, #16]
 80051fc:	4599      	cmp	r9, r3
 80051fe:	dbd2      	blt.n	80051a6 <G2D_DrawIconBlend+0x56>
			}
		}
	}
}
 8005200:	b00b      	add	sp, #44	; 0x2c
 8005202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		a1 = (color & 0xFF000000) >> 24;
 8005206:	0e23      	lsrs	r3, r4, #24
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005208:	21ab      	movs	r1, #171	; 0xab
		icon_clut[3] = color;
 800520a:	9409      	str	r4, [sp, #36]	; 0x24
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 800520c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005210:	fb03 f101 	mul.w	r1, r3, r1
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005214:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005218:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 800521c:	0a09      	lsrs	r1, r1, #8
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 800521e:	0a1b      	lsrs	r3, r3, #8
		icon_clut[2] = (((a1 * 171) >> 8) << 24) | (color & 0x00FFFFFF);
 8005220:	ea44 6101 	orr.w	r1, r4, r1, lsl #24
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 8005224:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
		icon_clut[0] = 0;
 8005228:	2300      	movs	r3, #0
		icon_clut[1] = (((a1 * 85) >> 8) << 24) | (color & 0x00FFFFFF);
 800522a:	e9cd 4107 	strd	r4, r1, [sp, #28]
		icon_clut[0] = 0;
 800522e:	9306      	str	r3, [sp, #24]
		break;
 8005230:	e7a5      	b.n	800517e <G2D_DrawIconBlend+0x2e>
		a1 = (color & 0xF000) >> 12;
 8005232:	f3c4 3303 	ubfx	r3, r4, #12, #4
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 8005236:	21ab      	movs	r1, #171	; 0xab
		icon_clut[3] = color;
 8005238:	9409      	str	r4, [sp, #36]	; 0x24
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 800523a:	f3c4 040b 	ubfx	r4, r4, #0, #12
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800523e:	fb03 f101 	mul.w	r1, r3, r1
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005242:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005246:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800524a:	0a09      	lsrs	r1, r1, #8
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 800524c:	0a1b      	lsrs	r3, r3, #8
		icon_clut[2] = (((a1 * 171) >> 8) << 12) | (color & 0x0FFF);
 800524e:	ea44 3101 	orr.w	r1, r4, r1, lsl #12
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005252:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
		icon_clut[0] = 0;
 8005256:	2300      	movs	r3, #0
		icon_clut[1] = (((a1 * 85) >> 8) << 12) | (color & 0x0FFF);
 8005258:	e9cd 4107 	strd	r4, r1, [sp, #28]
		icon_clut[0] = 0;
 800525c:	9306      	str	r3, [sp, #24]
		break;
 800525e:	e78e      	b.n	800517e <G2D_DrawIconBlend+0x2e>
 8005260:	24000254 	.word	0x24000254
 8005264:	24000268 	.word	0x24000268

08005268 <G2D_DrawLastJPEG>:
	BSP_LCD_CopyBufJPEG((uint16_t)x, (uint16_t)y);
}

void G2D_DrawLastJPEG(int16_t x, int16_t y) {
	// TODO: Checking if JPEG is within borders of screen
	BSP_LCD_CopyBufJPEG((uint16_t)x, (uint16_t)y);
 8005268:	4b02      	ldr	r3, [pc, #8]	; (8005274 <G2D_DrawLastJPEG+0xc>)
 800526a:	b289      	uxth	r1, r1
 800526c:	b280      	uxth	r0, r0
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4718      	bx	r3
 8005272:	bf00      	nop
 8005274:	24000250 	.word	0x24000250

08005278 <G2D_DecodeJPEG>:
}


void G2D_DecodeJPEG(uint32_t jpeg_addr, uint32_t jpeg_size) {

	BSP_LCD_DecodeJPEG(jpeg_addr, jpeg_size);
 8005278:	f7fd bf32 	b.w	80030e0 <BSP_LCD_DecodeJPEG>

0800527c <KALMAN_Init>:
    // We will set the variables like so, these can also be tuned by the user
    kalman->Q_angle   = 0.001;
    kalman->Q_bias    = 0.003;
    kalman->R_measure = 0.03;

    kalman->angle = 0.0; // Reset the angle
 800527c:	2300      	movs	r3, #0
    kalman->Q_angle   = 0.001;
 800527e:	f8df c030 	ldr.w	ip, [pc, #48]	; 80052b0 <KALMAN_Init+0x34>
    kalman->Q_bias    = 0.003;
 8005282:	4909      	ldr	r1, [pc, #36]	; (80052a8 <KALMAN_Init+0x2c>)
    kalman->R_measure = 0.03;
 8005284:	4a09      	ldr	r2, [pc, #36]	; (80052ac <KALMAN_Init+0x30>)
void KALMAN_Init(KALMAN_HandleTypeDef *kalman) {
 8005286:	b510      	push	{r4, lr}
 8005288:	4604      	mov	r4, r0
    kalman->Q_angle   = 0.001;
 800528a:	f8c0 c000 	str.w	ip, [r0]
    kalman->Q_bias    = 0.003;
 800528e:	6041      	str	r1, [r0, #4]
    kalman->R_measure = 0.03;
 8005290:	6082      	str	r2, [r0, #8]
    kalman->angle = 0.0; // Reset the angle
 8005292:	60c3      	str	r3, [r0, #12]
    kalman->bias  = 0.0; // Reset bias
 8005294:	6103      	str	r3, [r0, #16]

    // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so
    // see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
    kalman->P[0][0] = 0.0;
 8005296:	6183      	str	r3, [r0, #24]
    kalman->P[0][1] = 0.0;
 8005298:	61c3      	str	r3, [r0, #28]
    kalman->P[1][0] = 0.0;
 800529a:	6203      	str	r3, [r0, #32]
    kalman->P[1][1] = 0.0;
 800529c:	6243      	str	r3, [r0, #36]	; 0x24

    kalman->tick = BSP_GetTick();
 800529e:	f7fe fee9 	bl	8004074 <BSP_GetTick>
 80052a2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop
 80052a8:	3b449ba6 	.word	0x3b449ba6
 80052ac:	3cf5c28f 	.word	0x3cf5c28f
 80052b0:	3a83126f 	.word	0x3a83126f

080052b4 <KALMAN_Update>:

float KALMAN_Update(KALMAN_HandleTypeDef *kalman, float newAngle, float newRate) {
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4604      	mov	r4, r0
 80052b8:	ed2d 8b02 	vpush	{d8}
 80052bc:	eeb0 8a40 	vmov.f32	s16, s0
 80052c0:	eef0 8a60 	vmov.f32	s17, s1
	// newAngle - last calculated angle from accelerometer [deg]
	// newRate - last rate of turn from gyro [deg/sec]


    // Step 1
	uint32_t tick = BSP_GetTick();
 80052c4:	f7fe fed6 	bl	8004074 <BSP_GetTick>
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 80052c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    kalman->angle += kalman->K[0] * kalman->y;
    kalman->bias += kalman->K[1] * kalman->y;

    // Step 7
    // Calculate estimation error covariance - Update the error covariance
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 80052ca:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 80052ce:	ed94 5a07 	vldr	s10, [r4, #28]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 80052d2:	1ac3      	subs	r3, r0, r3
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 80052d4:	ed94 6a08 	vldr	s12, [r4, #32]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 80052d8:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 800538c <KALMAN_Update+0xd8>
 80052dc:	ee07 3a90 	vmov	s15, r3
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 80052e0:	ee75 5a06 	vadd.f32	s11, s10, s12
 80052e4:	ed94 4a00 	vldr	s8, [r4]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 80052e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 80052ec:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80052f0:	ee34 4a65 	vsub.f32	s8, s8, s11
 80052f4:	edd4 6a06 	vldr	s13, [r4, #24]
    kalman->S = kalman->P[0][0] + kalman->R_measure;
 80052f8:	edd4 4a02 	vldr	s9, [r4, #8]
	float dt = (float)(tick - kalman->tick) / 1000; // time between updates in seconds
 80052fc:	ee67 7a82 	vmul.f32	s15, s15, s4
    kalman->P[1][1] += kalman->Q_bias * dt;
 8005300:	edd4 2a01 	vldr	s5, [r4, #4]
    kalman->rate = newRate - kalman->bias;
 8005304:	edd4 3a04 	vldr	s7, [r4, #16]
    kalman->angle += dt * kalman->rate;
 8005308:	edd4 5a03 	vldr	s11, [r4, #12]
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 800530c:	eea7 4a27 	vfma.f32	s8, s14, s15
	kalman->tick = tick;
 8005310:	63a0      	str	r0, [r4, #56]	; 0x38
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8005312:	eea7 6a67 	vfms.f32	s12, s14, s15
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8005316:	eea7 5a67 	vfms.f32	s10, s14, s15
    kalman->P[1][1] += kalman->Q_bias * dt;
 800531a:	eea2 7aa7 	vfma.f32	s14, s5, s15
    kalman->rate = newRate - kalman->bias;
 800531e:	ee78 0ae3 	vsub.f32	s1, s17, s7
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8005322:	eee4 6a27 	vfma.f32	s13, s8, s15
    kalman->angle += dt * kalman->rate;
 8005326:	eee0 5aa7 	vfma.f32	s11, s1, s15
    kalman->rate = newRate - kalman->bias;
 800532a:	edc4 0a05 	vstr	s1, [r4, #20]
    kalman->S = kalman->P[0][0] + kalman->R_measure;
 800532e:	ee76 4aa4 	vadd.f32	s9, s13, s9
    kalman->y = newAngle - kalman->angle;
 8005332:	ee78 7a65 	vsub.f32	s15, s16, s11
    kalman->K[0] = kalman->P[0][0] / kalman->S;
 8005336:	eec6 2aa4 	vdiv.f32	s5, s13, s9
    kalman->S = kalman->P[0][0] + kalman->R_measure;
 800533a:	edc4 4a0d 	vstr	s9, [r4, #52]	; 0x34
    kalman->y = newAngle - kalman->angle;
 800533e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    kalman->K[1] = kalman->P[1][0] / kalman->S;
 8005342:	ee86 4a24 	vdiv.f32	s8, s12, s9
    kalman->P[0][1] -= kalman->K[0] * kalman->P[0][1];
    kalman->P[1][0] -= kalman->K[1] * kalman->P[0][0];
    kalman->P[1][1] -= kalman->K[1] * kalman->P[0][1];

    return kalman->angle;
}
 8005346:	ecbd 8b02 	vpop	{d8}
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 800534a:	ee73 4a62 	vsub.f32	s9, s6, s5
    kalman->K[0] = kalman->P[0][0] / kalman->S;
 800534e:	edc4 2a0a 	vstr	s5, [r4, #40]	; 0x28
    kalman->angle += kalman->K[0] * kalman->y;
 8005352:	eee2 5aa7 	vfma.f32	s11, s5, s15
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 8005356:	ee66 6aa4 	vmul.f32	s13, s13, s9
    kalman->bias += kalman->K[1] * kalman->y;
 800535a:	eee4 3a27 	vfma.f32	s7, s8, s15
    kalman->K[1] = kalman->P[1][0] / kalman->S;
 800535e:	ed84 4a0b 	vstr	s8, [r4, #44]	; 0x2c
    kalman->P[0][1] -= kalman->K[0] * kalman->P[0][1];
 8005362:	ee65 7a24 	vmul.f32	s15, s10, s9
    kalman->P[0][0] -= kalman->K[0] * kalman->P[0][0];
 8005366:	edc4 6a06 	vstr	s13, [r4, #24]
    kalman->P[1][0] -= kalman->K[1] * kalman->P[0][0];
 800536a:	eea4 6a66 	vfms.f32	s12, s8, s13
    kalman->angle += kalman->K[0] * kalman->y;
 800536e:	edc4 5a03 	vstr	s11, [r4, #12]
 8005372:	eeb0 0a65 	vmov.f32	s0, s11
    kalman->P[1][1] -= kalman->K[1] * kalman->P[0][1];
 8005376:	eea4 7a67 	vfms.f32	s14, s8, s15
    kalman->P[0][1] -= kalman->K[0] * kalman->P[0][1];
 800537a:	edc4 7a07 	vstr	s15, [r4, #28]
    kalman->bias += kalman->K[1] * kalman->y;
 800537e:	edc4 3a04 	vstr	s7, [r4, #16]
    kalman->P[1][0] -= kalman->K[1] * kalman->P[0][0];
 8005382:	ed84 6a08 	vstr	s12, [r4, #32]
    kalman->P[1][1] -= kalman->K[1] * kalman->P[0][1];
 8005386:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
}
 800538a:	bd10      	pop	{r4, pc}
 800538c:	3a83126f 	.word	0x3a83126f

08005390 <BSP_ADC_Init>:

/*******************************************************************
* I2C Functions
 *******************************************************************/

uint8_t BSP_ADC_Init(ADC_TypeDef * hadc, uint32_t resolution, uint32_t nb_conversions) {
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	4604      	mov	r4, r0
 8005394:	460f      	mov	r7, r1
 8005396:	4616      	mov	r6, r2

	uint32_t t_start = BSP_GetTick();
 8005398:	f7fe fe6c 	bl	8004074 <BSP_GetTick>
	uint32_t tmpCFGR;

	// Exiting from deep power-down
	if (hadc->CR & ADC_CR_DEEPPWD) hadc->CR &= ~(ADC_CR_DEEPPWD);
 800539c:	68a3      	ldr	r3, [r4, #8]
	uint32_t t_start = BSP_GetTick();
 800539e:	4605      	mov	r5, r0
	if (hadc->CR & ADC_CR_DEEPPWD) hadc->CR &= ~(ADC_CR_DEEPPWD);
 80053a0:	0099      	lsls	r1, r3, #2
 80053a2:	d503      	bpl.n	80053ac <BSP_ADC_Init+0x1c>
 80053a4:	68a3      	ldr	r3, [r4, #8]
 80053a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053aa:	60a3      	str	r3, [r4, #8]

	// Starting internal voltage regulator
	hadc->CR |= ADC_CR_ADVREGEN;
 80053ac:	68a3      	ldr	r3, [r4, #8]
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b2:	60a3      	str	r3, [r4, #8]

	// Waiting for voltage regulator to start
	while ((hadc->ISR & ADC_ISR_LDORDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 80053b4:	e004      	b.n	80053c0 <BSP_ADC_Init+0x30>
 80053b6:	f7fe fe5d 	bl	8004074 <BSP_GetTick>
 80053ba:	1b43      	subs	r3, r0, r5
 80053bc:	2b64      	cmp	r3, #100	; 0x64
 80053be:	d84e      	bhi.n	800545e <BSP_ADC_Init+0xce>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	04da      	lsls	r2, r3, #19
 80053c4:	d5f7      	bpl.n	80053b6 <BSP_ADC_Init+0x26>

	// Setting ADC clock prescaler
	ADC_Common_TypeDef * ADCxy_common;
	if ((hadc == ADC1) || (hadc == ADC2)) ADCxy_common = ADC12_COMMON; else ADCxy_common = ADC3_COMMON;
 80053c6:	4b28      	ldr	r3, [pc, #160]	; (8005468 <BSP_ADC_Init+0xd8>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	d04a      	beq.n	8005462 <BSP_ADC_Init+0xd2>
 80053cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053d0:	429c      	cmp	r4, r3
 80053d2:	d046      	beq.n	8005462 <BSP_ADC_Init+0xd2>
 80053d4:	4a25      	ldr	r2, [pc, #148]	; (800546c <BSP_ADC_Init+0xdc>)
	MODIFY_REG(ADCxy_common->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, ADC_CLOCK_ASYNC_DIV1);
 80053d6:	6893      	ldr	r3, [r2, #8]
	// 10: used when 12.5 MHz < ADC clock ≤ 25.0 MHz <<<<<<<<< SELECTED (Clock for ADC is 15MHz)
	// 11: used when 25.0 MHz < ADC clock ≤ 50.0 MHz
	MODIFY_REG(hadc->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);

	// Set number of ranks in regular group sequencer
	MODIFY_REG(hadc->SQR1, ADC_SQR1_L, (nb_conversions - (uint8_t)1));
 80053d8:	3e01      	subs	r6, #1
	MODIFY_REG(ADCxy_common->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, ADC_CLOCK_ASYNC_DIV1);
 80053da:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80053de:	6093      	str	r3, [r2, #8]
	tmpCFGR |= ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80053e0:	f243 0303 	movw	r3, #12291	; 0x3003
 80053e4:	433b      	orrs	r3, r7
	hadc->CFGR = tmpCFGR;
 80053e6:	60e3      	str	r3, [r4, #12]
	CLEAR_BIT(hadc->CFGR2, ADC_CFGR2_ROVSE);
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	6123      	str	r3, [r4, #16]
	MODIFY_REG(hadc->CFGR2, ADC_CFGR2_LSHIFT, ADC_LEFTBITSHIFT_NONE);
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053f6:	6123      	str	r3, [r4, #16]
	MODIFY_REG(hadc->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80053f8:	68a3      	ldr	r3, [r4, #8]
 80053fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005402:	60a3      	str	r3, [r4, #8]
	MODIFY_REG(hadc->SQR1, ADC_SQR1_L, (nb_conversions - (uint8_t)1));
 8005404:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005406:	f023 030f 	bic.w	r3, r3, #15
 800540a:	4333      	orrs	r3, r6
 800540c:	6323      	str	r3, [r4, #48]	; 0x30

	// Auto-calibration - requesting single-ended calibration
	hadc->CR &= ~(ADC_CR_ADCALDIF);
 800540e:	68a3      	ldr	r3, [r4, #8]
 8005410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005414:	60a3      	str	r3, [r4, #8]

	// Auto-calibration - requesting calibration of offset and linearity
	hadc->CR |= ADC_CR_ADCALLIN;
 8005416:	68a3      	ldr	r3, [r4, #8]
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	60a3      	str	r3, [r4, #8]

	// Starting calibration
	hadc->CR |= ADC_CR_ADCAL;
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005424:	60a3      	str	r3, [r4, #8]

	// Waiting for completion of calibration
	while (hadc->CR & ADC_CR_ADCAL) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 8005426:	e004      	b.n	8005432 <BSP_ADC_Init+0xa2>
 8005428:	f7fe fe24 	bl	8004074 <BSP_GetTick>
 800542c:	1b40      	subs	r0, r0, r5
 800542e:	2864      	cmp	r0, #100	; 0x64
 8005430:	d815      	bhi.n	800545e <BSP_ADC_Init+0xce>
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	dbf7      	blt.n	8005428 <BSP_ADC_Init+0x98>

	// Enabling ADC
	hadc->CR |= ADC_CR_ADEN;
 8005438:	68a3      	ldr	r3, [r4, #8]
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	60a3      	str	r3, [r4, #8]

	// Waiting until ADC started
	while ((hadc->ISR & ADC_ISR_ADRDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 8005440:	e004      	b.n	800544c <BSP_ADC_Init+0xbc>
 8005442:	f7fe fe17 	bl	8004074 <BSP_GetTick>
 8005446:	1b40      	subs	r0, r0, r5
 8005448:	2864      	cmp	r0, #100	; 0x64
 800544a:	d808      	bhi.n	800545e <BSP_ADC_Init+0xce>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	07db      	lsls	r3, r3, #31
 8005450:	d5f7      	bpl.n	8005442 <BSP_ADC_Init+0xb2>
	// Clearing ADRDY flag
	hadc->ISR &= ~(ADC_ISR_ADRDY);
 8005452:	6823      	ldr	r3, [r4, #0]

	return BSP_OK;
 8005454:	2000      	movs	r0, #0
	hadc->ISR &= ~(ADC_ISR_ADRDY);
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	6023      	str	r3, [r4, #0]
}
 800545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((hadc->ISR & ADC_ISR_LDORDY)==0) if ((BSP_GetTick() - t_start) > 100) return BSP_ERROR;
 800545e:	2001      	movs	r0, #1
}
 8005460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((hadc == ADC1) || (hadc == ADC2)) ADCxy_common = ADC12_COMMON; else ADCxy_common = ADC3_COMMON;
 8005462:	4a03      	ldr	r2, [pc, #12]	; (8005470 <BSP_ADC_Init+0xe0>)
 8005464:	e7b7      	b.n	80053d6 <BSP_ADC_Init+0x46>
 8005466:	bf00      	nop
 8005468:	40022000 	.word	0x40022000
 800546c:	58026300 	.word	0x58026300
 8005470:	40022300 	.word	0x40022300

08005474 <BSP_ADC_ConfigChannel>:


uint8_t BSP_ADC_ConfigChannel(ADC_TypeDef * hadc, uint32_t channel, uint32_t sequence) {

	if (channel>19) return BSP_ERROR;
	if (sequence == 0) return BSP_ERROR;
 8005474:	2913      	cmp	r1, #19
 8005476:	d83c      	bhi.n	80054f2 <BSP_ADC_ConfigChannel+0x7e>
 8005478:	4603      	mov	r3, r0
 800547a:	fab2 f082 	clz	r0, r2
 800547e:	0940      	lsrs	r0, r0, #5
 8005480:	b3ba      	cbz	r2, 80054f2 <BSP_ADC_ConfigChannel+0x7e>
uint8_t BSP_ADC_ConfigChannel(ADC_TypeDef * hadc, uint32_t channel, uint32_t sequence) {
 8005482:	b570      	push	{r4, r5, r6, lr}
	if (sequence > ((hadc->SQR1) & 0x0F)+1) return BSP_ERROR;
 8005484:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005486:	f004 0c0f 	and.w	ip, r4, #15
 800548a:	f10c 0c01 	add.w	ip, ip, #1
 800548e:	4594      	cmp	ip, r2
 8005490:	d331      	bcc.n	80054f6 <BSP_ADC_ConfigChannel+0x82>

	// ADC channels preselection
	hadc->PCSEL |= (1UL << channel);
 8005492:	2401      	movs	r4, #1
 8005494:	69de      	ldr	r6, [r3, #28]

	// Set ADC group regular sequence: channel on the selected scan sequence rank
	uint8_t sqr_shift = (sequence % 5) * 6;
	uint32_t * sqr_reg = &hadc->SQR1;
	sqr_reg += (sequence / 5);
 8005496:	4d19      	ldr	r5, [pc, #100]	; (80054fc <BSP_ADC_ConfigChannel+0x88>)
	uint32_t * sqr_reg = &hadc->SQR1;
 8005498:	f103 0e30 	add.w	lr, r3, #48	; 0x30
	hadc->PCSEL |= (1UL << channel);
 800549c:	408c      	lsls	r4, r1
	*sqr_reg |= (channel << sqr_shift);

	// Set sampling time of the selected ADC channel
	uint8_t smpr_shift = (channel % 10) * 3;
	uint32_t * smpr_reg = &hadc->SMPR1;
 800549e:	3314      	adds	r3, #20
	hadc->PCSEL |= (1UL << channel);
 80054a0:	4334      	orrs	r4, r6
 80054a2:	609c      	str	r4, [r3, #8]
	sqr_reg += (sequence / 5);
 80054a4:	fba5 4c02 	umull	r4, ip, r5, r2
	smpr_reg += (channel / 10);
 80054a8:	fba5 5401 	umull	r5, r4, r5, r1
	sqr_reg += (sequence / 5);
 80054ac:	f02c 0503 	bic.w	r5, ip, #3
	smpr_reg += (channel / 10);
 80054b0:	08e4      	lsrs	r4, r4, #3
	uint8_t sqr_shift = (sequence % 5) * 6;
 80054b2:	eb05 059c 	add.w	r5, r5, ip, lsr #2
	sqr_reg += (sequence / 5);
 80054b6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
	uint8_t sqr_shift = (sequence % 5) * 6;
 80054ba:	1b52      	subs	r2, r2, r5
	uint8_t smpr_shift = (channel % 10) * 3;
 80054bc:	eb04 0584 	add.w	r5, r4, r4, lsl #2
	uint8_t sqr_shift = (sequence % 5) * 6;
 80054c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80054c4:	0052      	lsls	r2, r2, #1
	*sqr_reg |= (channel << sqr_shift);
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	fa01 f202 	lsl.w	r2, r1, r2
	uint8_t smpr_shift = (channel % 10) * 3;
 80054cc:	eba1 0145 	sub.w	r1, r1, r5, lsl #1
	*smpr_reg |= (ADC_SAMPLINGTIME_64CYCLES_5 << smpr_shift);
 80054d0:	2505      	movs	r5, #5
	uint8_t smpr_shift = (channel % 10) * 3;
 80054d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	*smpr_reg |= (ADC_SAMPLINGTIME_64CYCLES_5 << smpr_shift);
 80054d6:	b2c9      	uxtb	r1, r1
 80054d8:	fa05 f101 	lsl.w	r1, r5, r1
	*sqr_reg |= (channel << sqr_shift);
 80054dc:	f85e 502c 	ldr.w	r5, [lr, ip, lsl #2]
 80054e0:	4315      	orrs	r5, r2
 80054e2:	f84e 502c 	str.w	r5, [lr, ip, lsl #2]
	*smpr_reg |= (ADC_SAMPLINGTIME_64CYCLES_5 << smpr_shift);
 80054e6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	// For this application all other parameters remains default

	return BSP_OK;
}
 80054f0:	bd70      	pop	{r4, r5, r6, pc}
	if (sequence == 0) return BSP_ERROR;
 80054f2:	2001      	movs	r0, #1
}
 80054f4:	4770      	bx	lr
	if (sequence == 0) return BSP_ERROR;
 80054f6:	2001      	movs	r0, #1
}
 80054f8:	bd70      	pop	{r4, r5, r6, pc}
 80054fa:	bf00      	nop
 80054fc:	cccccccd 	.word	0xcccccccd

08005500 <BSP_ADC_StartDMA>:


uint8_t BSP_ADC_StartDMA(ADC_TypeDef * hadc, TxRxContext_TypeDef *ctx, uint32_t *pData, uint32_t Length) {
 8005500:	b510      	push	{r4, lr}
 8005502:	4604      	mov	r4, r0

	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&hadc->DR, (uint32_t)pData, Length);
 8005504:	4608      	mov	r0, r1
 8005506:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800550a:	f000 fb95 	bl	8005c38 <BSP_STM32_DMA_StartIT>
	MODIFY_REG(hadc->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800550e:	68a2      	ldr	r2, [r4, #8]
 8005510:	4b03      	ldr	r3, [pc, #12]	; (8005520 <BSP_ADC_StartDMA+0x20>)
	return BSP_OK;
}
 8005512:	2000      	movs	r0, #0
	MODIFY_REG(hadc->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8005514:	4013      	ands	r3, r2
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	60a3      	str	r3, [r4, #8]
}
 800551c:	bd10      	pop	{r4, pc}
 800551e:	bf00      	nop
 8005520:	7fffffc0 	.word	0x7fffffc0

08005524 <BSP_BDMA_Init>:
  __IO uint32_t IFCR;  // BDMA interrupt flag clear register
} BDMA_Base_Registers;

uint32_t BDMACTXvectors[8] = {0};

uint8_t BSP_BDMA_Init(BDMA_Channel_TypeDef *hbdma, uint32_t dir, uint32_t pinc, uint32_t minc, uint32_t pdatalign, uint32_t mdatalign, uint32_t mode, uint32_t priority) {
 8005524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005528:	4605      	mov	r5, r0
 800552a:	4698      	mov	r8, r3
 800552c:	460e      	mov	r6, r1
 800552e:	4617      	mov	r7, r2

	uint32_t tickstart = BSP_GetTick();
 8005530:	f7fe fda0 	bl	8004074 <BSP_GetTick>

    // Disable the peripheral
    hbdma->CCR &= ~BDMA_CCR_EN;
 8005534:	682b      	ldr	r3, [r5, #0]
	uint32_t tickstart = BSP_GetTick();
 8005536:	4681      	mov	r9, r0
    hbdma->CCR &= ~BDMA_CCR_EN;
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	602b      	str	r3, [r5, #0]

    // Check if the BDMA Channel is effectively disabled
    while ((hbdma->CCR & BDMA_CCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 800553e:	e005      	b.n	800554c <BSP_BDMA_Init+0x28>
 8005540:	f7fe fd98 	bl	8004074 <BSP_GetTick>
 8005544:	eba0 0409 	sub.w	r4, r0, r9
 8005548:	2c02      	cmp	r4, #2
 800554a:	d816      	bhi.n	800557a <BSP_BDMA_Init+0x56>
 800554c:	682c      	ldr	r4, [r5, #0]
 800554e:	f014 0401 	ands.w	r4, r4, #1
 8005552:	d1f5      	bne.n	8005540 <BSP_BDMA_Init+0x1c>

	// Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits
	registerValue &= ((uint32_t)~(BDMA_CCR_PL | BDMA_CCR_MSIZE | BDMA_CCR_PSIZE | BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC | BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM | BDMA_CCR_CT));

	// Prepare the BDMA Channel configuration */
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005554:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
	uint32_t registerValue = hbdma->CCR;
 8005558:	6829      	ldr	r1, [r5, #0]

	// Write to BDMA Channel CR register
	hbdma->CCR = registerValue;

	return BSP_OK;
 800555a:	4620      	mov	r0, r4
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 800555c:	4313      	orrs	r3, r2
 800555e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005560:	4313      	orrs	r3, r2
 8005562:	9a08      	ldr	r2, [sp, #32]
 8005564:	4313      	orrs	r3, r2
	registerValue &= ((uint32_t)~(BDMA_CCR_PL | BDMA_CCR_MSIZE | BDMA_CCR_PSIZE | BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC | BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM | BDMA_CCR_CT));
 8005566:	4a06      	ldr	r2, [pc, #24]	; (8005580 <BSP_BDMA_Init+0x5c>)
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005568:	ea43 0308 	orr.w	r3, r3, r8
	registerValue &= ((uint32_t)~(BDMA_CCR_PL | BDMA_CCR_MSIZE | BDMA_CCR_PSIZE | BDMA_CCR_MINC | BDMA_CCR_PINC | BDMA_CCR_CIRC | BDMA_CCR_DIR | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM | BDMA_CCR_CT));
 800556c:	400a      	ands	r2, r1
	    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 800556e:	433b      	orrs	r3, r7
 8005570:	4333      	orrs	r3, r6
 8005572:	4313      	orrs	r3, r2
	hbdma->CCR = registerValue;
 8005574:	602b      	str	r3, [r5, #0]
}
 8005576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while ((hbdma->CCR & BDMA_CCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 800557a:	2001      	movs	r0, #1
}
 800557c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005580:	fffe000f 	.word	0xfffe000f

08005584 <BSP_BDMA_CtxLink>:

	ctx->dma_stream = (uint32_t)hbdma;
	ctx->dma_mode = TXRX_CTX_MODE_BDMA;

	// Initialize BaseAddress and Index parameters
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <BSP_BDMA_CtxLink+0x5c>)
	ctx->dma_index = channel_number << 2U;
	BDMA_Base_Registers * dma_baseregs = (BDMA_Base_Registers *)((uint32_t)(hbdma) & (uint32_t)(~0xFFU));
	ctx->dma_baseregs = (uint32_t)dma_baseregs;

	// Clear all interrupt flags
	dma_baseregs->IFCR = ((BDMA_IFCR_CGIF0) << (ctx->dma_index & 0x1FU));
 8005586:	f04f 0c01 	mov.w	ip, #1
	ctx->dma_stream = (uint32_t)hbdma;
 800558a:	6048      	str	r0, [r1, #4]
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
	ctx->dma_muxchannelstatus = DMAMUX2_ChannelStatus_BASE;
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);

	DMAMUX_Channel_TypeDef * dma_muxchannel = (DMAMUX_Channel_TypeDef *)ctx->dma_muxchannel;
	dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 800558c:	b2d2      	uxtb	r2, r2
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 800558e:	4403      	add	r3, r0
	BDMA_Base_Registers * dma_baseregs = (BDMA_Base_Registers *)((uint32_t)(hbdma) & (uint32_t)(~0xFFU));
 8005590:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
uint8_t BSP_BDMA_CtxLink(BDMA_Channel_TypeDef *hbdma, TxRxContext_TypeDef *ctx, uint32_t request) {
 8005594:	b430      	push	{r4, r5}
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 8005596:	4c13      	ldr	r4, [pc, #76]	; (80055e4 <BSP_BDMA_CtxLink+0x60>)
	ctx->dma_mode = TXRX_CTX_MODE_BDMA;
 8005598:	2502      	movs	r5, #2
	ctx->dma_baseregs = (uint32_t)dma_baseregs;
 800559a:	60c8      	str	r0, [r1, #12]
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 800559c:	fba4 4303 	umull	r4, r3, r4, r3
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 80055a0:	4c11      	ldr	r4, [pc, #68]	; (80055e8 <BSP_BDMA_CtxLink+0x64>)
	ctx->dma_mode = TXRX_CTX_MODE_BDMA;
 80055a2:	600d      	str	r5, [r1, #0]
	uint32_t channel_number = (((uint32_t)(hbdma) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0));
 80055a4:	091b      	lsrs	r3, r3, #4
	ctx->dma_index = channel_number << 2U;
 80055a6:	fa03 f505 	lsl.w	r5, r3, r5
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 80055aa:	441c      	add	r4, r3
	ctx->dma_index = channel_number << 2U;
 80055ac:	608d      	str	r5, [r1, #8]
	dma_baseregs->IFCR = ((BDMA_IFCR_CGIF0) << (ctx->dma_index & 0x1FU));
 80055ae:	f005 051f 	and.w	r5, r5, #31
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 80055b2:	00a4      	lsls	r4, r4, #2
	dma_baseregs->IFCR = ((BDMA_IFCR_CGIF0) << (ctx->dma_index & 0x1FU));
 80055b4:	fa0c f505 	lsl.w	r5, ip, r5
 80055b8:	6045      	str	r5, [r0, #4]
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);
 80055ba:	f003 001f 	and.w	r0, r3, #31
	ctx->dma_muxchannelstatus = DMAMUX2_ChannelStatus_BASE;
 80055be:	4d0b      	ldr	r5, [pc, #44]	; (80055ec <BSP_BDMA_CtxLink+0x68>)
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);
 80055c0:	fa0c f000 	lsl.w	r0, ip, r0
	ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (channel_number * 4U)));
 80055c4:	610c      	str	r4, [r1, #16]
	ctx->dma_muxchannelstatus = DMAMUX2_ChannelStatus_BASE;
 80055c6:	614d      	str	r5, [r1, #20]
	ctx->dma_muxchannelstatusmask = 1UL << (channel_number & 0x1FU);
 80055c8:	6188      	str	r0, [r1, #24]
	dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 80055ca:	6022      	str	r2, [r4, #0]

	// Clear the DMAMUX synchro overrun flag
	DMAMUX_ChannelStatus_TypeDef * dma_muxchannelstatus = (DMAMUX_ChannelStatus_TypeDef *)ctx->dma_muxchannelstatus;
	dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 80055cc:	4c08      	ldr	r4, [pc, #32]	; (80055f0 <BSP_BDMA_CtxLink+0x6c>)

	// Assigning TxRx Context to BDMA channel
	BDMACTXvectors[channel_number] = (uint32_t)ctx;
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <BSP_BDMA_CtxLink+0x70>)
	dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 80055d0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84

	return BSP_OK;
}
 80055d4:	2000      	movs	r0, #0
	BDMACTXvectors[channel_number] = (uint32_t)ctx;
 80055d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80055da:	bc30      	pop	{r4, r5}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	a7fdabf8 	.word	0xa7fdabf8
 80055e4:	cccccccd 	.word	0xcccccccd
 80055e8:	16009600 	.word	0x16009600
 80055ec:	58025880 	.word	0x58025880
 80055f0:	58025800 	.word	0x58025800
 80055f4:	24000430 	.word	0x24000430

080055f8 <BSP_BDMA_StartIT>:


uint8_t BSP_BDMA_StartIT(TxRxContext_TypeDef *ctx, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 80055f8:	b470      	push	{r4, r5, r6}

	// Disable the peripheral
	hbdma->CCR &= ~BDMA_CCR_EN;

	// Clear all flags
	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80055fa:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
	BDMA_Base_Registers * regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80055fe:	68c6      	ldr	r6, [r0, #12]
	hbdma->CCR &= ~BDMA_CCR_EN;
 8005600:	6820      	ldr	r0, [r4, #0]
	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005602:	f005 0c1f 	and.w	ip, r5, #31
	hbdma->CCR &= ~BDMA_CCR_EN;
 8005606:	f020 0001 	bic.w	r0, r0, #1
 800560a:	6020      	str	r0, [r4, #0]
	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800560c:	2001      	movs	r0, #1
 800560e:	fa00 f00c 	lsl.w	r0, r0, ip
 8005612:	6070      	str	r0, [r6, #4]

	// Configure DMA Stream data length
	hbdma->CNDTR = DataLength;
 8005614:	6063      	str	r3, [r4, #4]

	if((hbdma->CCR & BDMA_CCR_DIR) == BDMA_MEMORY_TO_PERIPH) {
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	06db      	lsls	r3, r3, #27
 800561a:	d50c      	bpl.n	8005636 <BSP_BDMA_StartIT+0x3e>
			// Memory to Peripheral
			// Configure DMA Stream source address
			hbdma->CPAR = DstAddress;
 800561c:	60a2      	str	r2, [r4, #8]

			// Configure DMA Stream destination address
			hbdma->CM0AR = SrcAddress;
 800561e:	60e1      	str	r1, [r4, #12]
		    // Configure DMA Stream source address
		    hbdma->CM0AR = DstAddress;
		}

	// Enable Common interrupts
	MODIFY_REG(hbdma->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE));
 8005620:	6823      	ldr	r3, [r4, #0]

	// Enable BDMA
	hbdma->CCR |=  BDMA_CCR_EN;

	return BSP_OK;
}
 8005622:	2000      	movs	r0, #0
	MODIFY_REG(hbdma->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE));
 8005624:	f043 030e 	orr.w	r3, r3, #14
 8005628:	6023      	str	r3, [r4, #0]
	hbdma->CCR |=  BDMA_CCR_EN;
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	6023      	str	r3, [r4, #0]
}
 8005632:	bc70      	pop	{r4, r5, r6}
 8005634:	4770      	bx	lr
		    hbdma->CPAR = SrcAddress;
 8005636:	60a1      	str	r1, [r4, #8]
		    hbdma->CM0AR = DstAddress;
 8005638:	60e2      	str	r2, [r4, #12]
 800563a:	e7f1      	b.n	8005620 <BSP_BDMA_StartIT+0x28>

0800563c <BDMA_Channel0_IRQHandler>:

}


void BDMA_Channel0_IRQHandler() {
	if (BDMACTXvectors[0x00]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x00]));
 800563c:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <BDMA_Channel0_IRQHandler+0x70>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	b903      	cbnz	r3, 8005644 <BDMA_Channel0_IRQHandler+0x8>
 8005642:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 8005644:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005646:	2104      	movs	r1, #4
void BDMA_Channel0_IRQHandler() {
 8005648:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800564a:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 800564e:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 8005652:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005654:	6815      	ldr	r5, [r2, #0]
 8005656:	4099      	lsls	r1, r3
 8005658:	420d      	tst	r5, r1
 800565a:	d008      	beq.n	800566e <BDMA_Channel0_IRQHandler+0x32>
 800565c:	0745      	lsls	r5, r0, #29
 800565e:	d506      	bpl.n	800566e <BDMA_Channel0_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8005660:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 8005662:	0681      	lsls	r1, r0, #26
 8005664:	d403      	bmi.n	800566e <BDMA_Channel0_IRQHandler+0x32>
 8005666:	6821      	ldr	r1, [r4, #0]
 8005668:	f021 0104 	bic.w	r1, r1, #4
 800566c:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 800566e:	2102      	movs	r1, #2
 8005670:	6815      	ldr	r5, [r2, #0]
 8005672:	4099      	lsls	r1, r3
 8005674:	420d      	tst	r5, r1
 8005676:	d008      	beq.n	800568a <BDMA_Channel0_IRQHandler+0x4e>
 8005678:	0785      	lsls	r5, r0, #30
 800567a:	d506      	bpl.n	800568a <BDMA_Channel0_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 800567c:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 800567e:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005680:	d403      	bmi.n	800568a <BDMA_Channel0_IRQHandler+0x4e>
 8005682:	6821      	ldr	r1, [r4, #0]
 8005684:	f021 0102 	bic.w	r1, r1, #2
 8005688:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 800568a:	2108      	movs	r1, #8
 800568c:	6815      	ldr	r5, [r2, #0]
 800568e:	4099      	lsls	r1, r3
 8005690:	4229      	tst	r1, r5
 8005692:	d009      	beq.n	80056a8 <BDMA_Channel0_IRQHandler+0x6c>
 8005694:	0701      	lsls	r1, r0, #28
 8005696:	d507      	bpl.n	80056a8 <BDMA_Channel0_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005698:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800569a:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800569c:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80056a4:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80056a6:	6053      	str	r3, [r2, #4]
}
 80056a8:	bc30      	pop	{r4, r5}
 80056aa:	4770      	bx	lr
 80056ac:	24000430 	.word	0x24000430

080056b0 <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler() { if (BDMACTXvectors[0x01]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x01])); }
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <BDMA_Channel1_IRQHandler+0x70>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	b903      	cbnz	r3, 80056b8 <BDMA_Channel1_IRQHandler+0x8>
 80056b6:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80056b8:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80056ba:	2104      	movs	r1, #4
void BDMA_Channel1_IRQHandler() { if (BDMACTXvectors[0x01]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x01])); }
 80056bc:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80056be:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 80056c2:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 80056c6:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80056c8:	6815      	ldr	r5, [r2, #0]
 80056ca:	4099      	lsls	r1, r3
 80056cc:	420d      	tst	r5, r1
 80056ce:	d008      	beq.n	80056e2 <BDMA_Channel1_IRQHandler+0x32>
 80056d0:	0745      	lsls	r5, r0, #29
 80056d2:	d506      	bpl.n	80056e2 <BDMA_Channel1_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 80056d4:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 80056d6:	0681      	lsls	r1, r0, #26
 80056d8:	d403      	bmi.n	80056e2 <BDMA_Channel1_IRQHandler+0x32>
 80056da:	6821      	ldr	r1, [r4, #0]
 80056dc:	f021 0104 	bic.w	r1, r1, #4
 80056e0:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80056e2:	2102      	movs	r1, #2
 80056e4:	6815      	ldr	r5, [r2, #0]
 80056e6:	4099      	lsls	r1, r3
 80056e8:	420d      	tst	r5, r1
 80056ea:	d008      	beq.n	80056fe <BDMA_Channel1_IRQHandler+0x4e>
 80056ec:	0785      	lsls	r5, r0, #30
 80056ee:	d506      	bpl.n	80056fe <BDMA_Channel1_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80056f0:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 80056f2:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80056f4:	d403      	bmi.n	80056fe <BDMA_Channel1_IRQHandler+0x4e>
 80056f6:	6821      	ldr	r1, [r4, #0]
 80056f8:	f021 0102 	bic.w	r1, r1, #2
 80056fc:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 80056fe:	2108      	movs	r1, #8
 8005700:	6815      	ldr	r5, [r2, #0]
 8005702:	4099      	lsls	r1, r3
 8005704:	4229      	tst	r1, r5
 8005706:	d009      	beq.n	800571c <BDMA_Channel1_IRQHandler+0x6c>
 8005708:	0701      	lsls	r1, r0, #28
 800570a:	d507      	bpl.n	800571c <BDMA_Channel1_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800570c:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800570e:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005710:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005718:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800571a:	6053      	str	r3, [r2, #4]
void BDMA_Channel1_IRQHandler() { if (BDMACTXvectors[0x01]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x01])); }
 800571c:	bc30      	pop	{r4, r5}
 800571e:	4770      	bx	lr
 8005720:	24000430 	.word	0x24000430

08005724 <BDMA_Channel2_IRQHandler>:
void BDMA_Channel2_IRQHandler() { if (BDMACTXvectors[0x02]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x02])); }
 8005724:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <BDMA_Channel2_IRQHandler+0x70>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	b903      	cbnz	r3, 800572c <BDMA_Channel2_IRQHandler+0x8>
 800572a:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 800572c:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800572e:	2104      	movs	r1, #4
void BDMA_Channel2_IRQHandler() { if (BDMACTXvectors[0x02]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x02])); }
 8005730:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005732:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 8005736:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 800573a:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800573c:	6815      	ldr	r5, [r2, #0]
 800573e:	4099      	lsls	r1, r3
 8005740:	420d      	tst	r5, r1
 8005742:	d008      	beq.n	8005756 <BDMA_Channel2_IRQHandler+0x32>
 8005744:	0745      	lsls	r5, r0, #29
 8005746:	d506      	bpl.n	8005756 <BDMA_Channel2_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8005748:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 800574a:	0681      	lsls	r1, r0, #26
 800574c:	d403      	bmi.n	8005756 <BDMA_Channel2_IRQHandler+0x32>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	f021 0104 	bic.w	r1, r1, #4
 8005754:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 8005756:	2102      	movs	r1, #2
 8005758:	6815      	ldr	r5, [r2, #0]
 800575a:	4099      	lsls	r1, r3
 800575c:	420d      	tst	r5, r1
 800575e:	d008      	beq.n	8005772 <BDMA_Channel2_IRQHandler+0x4e>
 8005760:	0785      	lsls	r5, r0, #30
 8005762:	d506      	bpl.n	8005772 <BDMA_Channel2_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005764:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 8005766:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005768:	d403      	bmi.n	8005772 <BDMA_Channel2_IRQHandler+0x4e>
 800576a:	6821      	ldr	r1, [r4, #0]
 800576c:	f021 0102 	bic.w	r1, r1, #2
 8005770:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 8005772:	2108      	movs	r1, #8
 8005774:	6815      	ldr	r5, [r2, #0]
 8005776:	4099      	lsls	r1, r3
 8005778:	4229      	tst	r1, r5
 800577a:	d009      	beq.n	8005790 <BDMA_Channel2_IRQHandler+0x6c>
 800577c:	0701      	lsls	r1, r0, #28
 800577e:	d507      	bpl.n	8005790 <BDMA_Channel2_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005780:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005782:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005784:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005788:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800578c:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800578e:	6053      	str	r3, [r2, #4]
void BDMA_Channel2_IRQHandler() { if (BDMACTXvectors[0x02]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x02])); }
 8005790:	bc30      	pop	{r4, r5}
 8005792:	4770      	bx	lr
 8005794:	24000430 	.word	0x24000430

08005798 <BDMA_Channel3_IRQHandler>:
void BDMA_Channel3_IRQHandler() { if (BDMACTXvectors[0x03]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x03])); }
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <BDMA_Channel3_IRQHandler+0x70>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	b903      	cbnz	r3, 80057a0 <BDMA_Channel3_IRQHandler+0x8>
 800579e:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80057a0:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80057a2:	2104      	movs	r1, #4
void BDMA_Channel3_IRQHandler() { if (BDMACTXvectors[0x03]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x03])); }
 80057a4:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80057a6:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 80057aa:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 80057ae:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80057b0:	6815      	ldr	r5, [r2, #0]
 80057b2:	4099      	lsls	r1, r3
 80057b4:	420d      	tst	r5, r1
 80057b6:	d008      	beq.n	80057ca <BDMA_Channel3_IRQHandler+0x32>
 80057b8:	0745      	lsls	r5, r0, #29
 80057ba:	d506      	bpl.n	80057ca <BDMA_Channel3_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 80057bc:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 80057be:	0681      	lsls	r1, r0, #26
 80057c0:	d403      	bmi.n	80057ca <BDMA_Channel3_IRQHandler+0x32>
 80057c2:	6821      	ldr	r1, [r4, #0]
 80057c4:	f021 0104 	bic.w	r1, r1, #4
 80057c8:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80057ca:	2102      	movs	r1, #2
 80057cc:	6815      	ldr	r5, [r2, #0]
 80057ce:	4099      	lsls	r1, r3
 80057d0:	420d      	tst	r5, r1
 80057d2:	d008      	beq.n	80057e6 <BDMA_Channel3_IRQHandler+0x4e>
 80057d4:	0785      	lsls	r5, r0, #30
 80057d6:	d506      	bpl.n	80057e6 <BDMA_Channel3_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80057d8:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 80057da:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80057dc:	d403      	bmi.n	80057e6 <BDMA_Channel3_IRQHandler+0x4e>
 80057de:	6821      	ldr	r1, [r4, #0]
 80057e0:	f021 0102 	bic.w	r1, r1, #2
 80057e4:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 80057e6:	2108      	movs	r1, #8
 80057e8:	6815      	ldr	r5, [r2, #0]
 80057ea:	4099      	lsls	r1, r3
 80057ec:	4229      	tst	r1, r5
 80057ee:	d009      	beq.n	8005804 <BDMA_Channel3_IRQHandler+0x6c>
 80057f0:	0701      	lsls	r1, r0, #28
 80057f2:	d507      	bpl.n	8005804 <BDMA_Channel3_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80057f4:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80057f6:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80057f8:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005800:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005802:	6053      	str	r3, [r2, #4]
void BDMA_Channel3_IRQHandler() { if (BDMACTXvectors[0x03]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x03])); }
 8005804:	bc30      	pop	{r4, r5}
 8005806:	4770      	bx	lr
 8005808:	24000430 	.word	0x24000430

0800580c <BDMA_Channel4_IRQHandler>:
void BDMA_Channel4_IRQHandler() { if (BDMACTXvectors[0x04]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x04])); }
 800580c:	4b1b      	ldr	r3, [pc, #108]	; (800587c <BDMA_Channel4_IRQHandler+0x70>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	b903      	cbnz	r3, 8005814 <BDMA_Channel4_IRQHandler+0x8>
 8005812:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 8005814:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005816:	2104      	movs	r1, #4
void BDMA_Channel4_IRQHandler() { if (BDMACTXvectors[0x04]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x04])); }
 8005818:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800581a:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 800581e:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 8005822:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005824:	6815      	ldr	r5, [r2, #0]
 8005826:	4099      	lsls	r1, r3
 8005828:	420d      	tst	r5, r1
 800582a:	d008      	beq.n	800583e <BDMA_Channel4_IRQHandler+0x32>
 800582c:	0745      	lsls	r5, r0, #29
 800582e:	d506      	bpl.n	800583e <BDMA_Channel4_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8005830:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 8005832:	0681      	lsls	r1, r0, #26
 8005834:	d403      	bmi.n	800583e <BDMA_Channel4_IRQHandler+0x32>
 8005836:	6821      	ldr	r1, [r4, #0]
 8005838:	f021 0104 	bic.w	r1, r1, #4
 800583c:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 800583e:	2102      	movs	r1, #2
 8005840:	6815      	ldr	r5, [r2, #0]
 8005842:	4099      	lsls	r1, r3
 8005844:	420d      	tst	r5, r1
 8005846:	d008      	beq.n	800585a <BDMA_Channel4_IRQHandler+0x4e>
 8005848:	0785      	lsls	r5, r0, #30
 800584a:	d506      	bpl.n	800585a <BDMA_Channel4_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 800584c:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 800584e:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005850:	d403      	bmi.n	800585a <BDMA_Channel4_IRQHandler+0x4e>
 8005852:	6821      	ldr	r1, [r4, #0]
 8005854:	f021 0102 	bic.w	r1, r1, #2
 8005858:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 800585a:	2108      	movs	r1, #8
 800585c:	6815      	ldr	r5, [r2, #0]
 800585e:	4099      	lsls	r1, r3
 8005860:	4229      	tst	r1, r5
 8005862:	d009      	beq.n	8005878 <BDMA_Channel4_IRQHandler+0x6c>
 8005864:	0701      	lsls	r1, r0, #28
 8005866:	d507      	bpl.n	8005878 <BDMA_Channel4_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005868:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800586a:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800586c:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005870:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005874:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005876:	6053      	str	r3, [r2, #4]
void BDMA_Channel4_IRQHandler() { if (BDMACTXvectors[0x04]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x04])); }
 8005878:	bc30      	pop	{r4, r5}
 800587a:	4770      	bx	lr
 800587c:	24000430 	.word	0x24000430

08005880 <BDMA_Channel5_IRQHandler>:
void BDMA_Channel5_IRQHandler() { if (BDMACTXvectors[0x05]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x05])); }
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <BDMA_Channel5_IRQHandler+0x70>)
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	b903      	cbnz	r3, 8005888 <BDMA_Channel5_IRQHandler+0x8>
 8005886:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 8005888:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800588a:	2104      	movs	r1, #4
void BDMA_Channel5_IRQHandler() { if (BDMACTXvectors[0x05]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x05])); }
 800588c:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800588e:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 8005892:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 8005896:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005898:	6815      	ldr	r5, [r2, #0]
 800589a:	4099      	lsls	r1, r3
 800589c:	420d      	tst	r5, r1
 800589e:	d008      	beq.n	80058b2 <BDMA_Channel5_IRQHandler+0x32>
 80058a0:	0745      	lsls	r5, r0, #29
 80058a2:	d506      	bpl.n	80058b2 <BDMA_Channel5_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 80058a4:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 80058a6:	0681      	lsls	r1, r0, #26
 80058a8:	d403      	bmi.n	80058b2 <BDMA_Channel5_IRQHandler+0x32>
 80058aa:	6821      	ldr	r1, [r4, #0]
 80058ac:	f021 0104 	bic.w	r1, r1, #4
 80058b0:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 80058b2:	2102      	movs	r1, #2
 80058b4:	6815      	ldr	r5, [r2, #0]
 80058b6:	4099      	lsls	r1, r3
 80058b8:	420d      	tst	r5, r1
 80058ba:	d008      	beq.n	80058ce <BDMA_Channel5_IRQHandler+0x4e>
 80058bc:	0785      	lsls	r5, r0, #30
 80058be:	d506      	bpl.n	80058ce <BDMA_Channel5_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80058c0:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 80058c2:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80058c4:	d403      	bmi.n	80058ce <BDMA_Channel5_IRQHandler+0x4e>
 80058c6:	6821      	ldr	r1, [r4, #0]
 80058c8:	f021 0102 	bic.w	r1, r1, #2
 80058cc:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 80058ce:	2108      	movs	r1, #8
 80058d0:	6815      	ldr	r5, [r2, #0]
 80058d2:	4099      	lsls	r1, r3
 80058d4:	4229      	tst	r1, r5
 80058d6:	d009      	beq.n	80058ec <BDMA_Channel5_IRQHandler+0x6c>
 80058d8:	0701      	lsls	r1, r0, #28
 80058da:	d507      	bpl.n	80058ec <BDMA_Channel5_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80058dc:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80058de:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80058e0:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80058e8:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80058ea:	6053      	str	r3, [r2, #4]
void BDMA_Channel5_IRQHandler() { if (BDMACTXvectors[0x05]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x05])); }
 80058ec:	bc30      	pop	{r4, r5}
 80058ee:	4770      	bx	lr
 80058f0:	24000430 	.word	0x24000430

080058f4 <BDMA_Channel6_IRQHandler>:
void BDMA_Channel6_IRQHandler() { if (BDMACTXvectors[0x06]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x06])); }
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <BDMA_Channel6_IRQHandler+0x70>)
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	b903      	cbnz	r3, 80058fc <BDMA_Channel6_IRQHandler+0x8>
 80058fa:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 80058fc:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 80058fe:	2104      	movs	r1, #4
void BDMA_Channel6_IRQHandler() { if (BDMACTXvectors[0x06]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x06])); }
 8005900:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005902:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 8005906:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 800590a:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 800590c:	6815      	ldr	r5, [r2, #0]
 800590e:	4099      	lsls	r1, r3
 8005910:	420d      	tst	r5, r1
 8005912:	d008      	beq.n	8005926 <BDMA_Channel6_IRQHandler+0x32>
 8005914:	0745      	lsls	r5, r0, #29
 8005916:	d506      	bpl.n	8005926 <BDMA_Channel6_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 8005918:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 800591a:	0681      	lsls	r1, r0, #26
 800591c:	d403      	bmi.n	8005926 <BDMA_Channel6_IRQHandler+0x32>
 800591e:	6821      	ldr	r1, [r4, #0]
 8005920:	f021 0104 	bic.w	r1, r1, #4
 8005924:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 8005926:	2102      	movs	r1, #2
 8005928:	6815      	ldr	r5, [r2, #0]
 800592a:	4099      	lsls	r1, r3
 800592c:	420d      	tst	r5, r1
 800592e:	d008      	beq.n	8005942 <BDMA_Channel6_IRQHandler+0x4e>
 8005930:	0785      	lsls	r5, r0, #30
 8005932:	d506      	bpl.n	8005942 <BDMA_Channel6_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005934:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 8005936:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 8005938:	d403      	bmi.n	8005942 <BDMA_Channel6_IRQHandler+0x4e>
 800593a:	6821      	ldr	r1, [r4, #0]
 800593c:	f021 0102 	bic.w	r1, r1, #2
 8005940:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 8005942:	2108      	movs	r1, #8
 8005944:	6815      	ldr	r5, [r2, #0]
 8005946:	4099      	lsls	r1, r3
 8005948:	4229      	tst	r1, r5
 800594a:	d009      	beq.n	8005960 <BDMA_Channel6_IRQHandler+0x6c>
 800594c:	0701      	lsls	r1, r0, #28
 800594e:	d507      	bpl.n	8005960 <BDMA_Channel6_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005950:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005952:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 8005954:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 800595c:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 800595e:	6053      	str	r3, [r2, #4]
void BDMA_Channel6_IRQHandler() { if (BDMACTXvectors[0x06]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x06])); }
 8005960:	bc30      	pop	{r4, r5}
 8005962:	4770      	bx	lr
 8005964:	24000430 	.word	0x24000430

08005968 <BDMA_Channel7_IRQHandler>:
void BDMA_Channel7_IRQHandler() { if (BDMACTXvectors[0x07]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x07])); }
 8005968:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <BDMA_Channel7_IRQHandler+0x70>)
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	b903      	cbnz	r3, 8005970 <BDMA_Channel7_IRQHandler+0x8>
 800596e:	4770      	bx	lr
	BDMA_Base_Registers  *regs_bdma  = (BDMA_Base_Registers *)ctx->dma_baseregs;
 8005970:	68da      	ldr	r2, [r3, #12]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005972:	2104      	movs	r1, #4
void BDMA_Channel7_IRQHandler() { if (BDMACTXvectors[0x07]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x07])); }
 8005974:	b430      	push	{r4, r5}
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005976:	e9d3 4301 	ldrd	r4, r3, [r3, #4]
 800597a:	f003 031f 	and.w	r3, r3, #31
	uint32_t ccr_reg = regs_bdma_channel->CCR;
 800597e:	6820      	ldr	r0, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_HT0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U)) {
 8005980:	6815      	ldr	r5, [r2, #0]
 8005982:	4099      	lsls	r1, r3
 8005984:	420d      	tst	r5, r1
 8005986:	d008      	beq.n	800599a <BDMA_Channel7_IRQHandler+0x32>
 8005988:	0745      	lsls	r5, r0, #29
 800598a:	d506      	bpl.n	800599a <BDMA_Channel7_IRQHandler+0x32>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (ctx->dma_index & 0x1FU));
 800598c:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_HTIE);
 800598e:	0681      	lsls	r1, r0, #26
 8005990:	d403      	bmi.n	800599a <BDMA_Channel7_IRQHandler+0x32>
 8005992:	6821      	ldr	r1, [r4, #0]
 8005994:	f021 0104 	bic.w	r1, r1, #4
 8005998:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TC0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U)) {
 800599a:	2102      	movs	r1, #2
 800599c:	6815      	ldr	r5, [r2, #0]
 800599e:	4099      	lsls	r1, r3
 80059a0:	420d      	tst	r5, r1
 80059a2:	d008      	beq.n	80059b6 <BDMA_Channel7_IRQHandler+0x4e>
 80059a4:	0785      	lsls	r5, r0, #30
 80059a6:	d506      	bpl.n	80059b6 <BDMA_Channel7_IRQHandler+0x4e>
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80059a8:	0685      	lsls	r5, r0, #26
      regs_bdma->IFCR = (BDMA_ISR_TCIF0 << (ctx->dma_index & 0x1FU));
 80059aa:	6051      	str	r1, [r2, #4]
      if((ccr_reg & BDMA_CCR_CIRC) == 0U) regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE);
 80059ac:	d403      	bmi.n	80059b6 <BDMA_Channel7_IRQHandler+0x4e>
 80059ae:	6821      	ldr	r1, [r4, #0]
 80059b0:	f021 0102 	bic.w	r1, r1, #2
 80059b4:	6021      	str	r1, [r4, #0]
    if (((regs_bdma->ISR & (BDMA_FLAG_TE0 << (ctx->dma_index & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U)) {
 80059b6:	2108      	movs	r1, #8
 80059b8:	6815      	ldr	r5, [r2, #0]
 80059ba:	4099      	lsls	r1, r3
 80059bc:	4229      	tst	r1, r5
 80059be:	d009      	beq.n	80059d4 <BDMA_Channel7_IRQHandler+0x6c>
 80059c0:	0701      	lsls	r1, r0, #28
 80059c2:	d507      	bpl.n	80059d4 <BDMA_Channel7_IRQHandler+0x6c>
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80059c4:	6820      	ldr	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80059c6:	2101      	movs	r1, #1
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80059c8:	f020 000e 	bic.w	r0, r0, #14
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
    	regs_bdma_channel->CCR &= ~(BDMA_CCR_TCIE | BDMA_CCR_TEIE | BDMA_CCR_HTIE );
 80059d0:	6020      	str	r0, [r4, #0]
    	regs_bdma->IFCR = (BDMA_ISR_GIF0) << (ctx->dma_index & 0x1FU);
 80059d2:	6053      	str	r3, [r2, #4]
void BDMA_Channel7_IRQHandler() { if (BDMACTXvectors[0x07]>0) BDMA_Stream_IRQHandler((TxRxContext_TypeDef *)(BDMACTXvectors[0x07])); }
 80059d4:	bc30      	pop	{r4, r5}
 80059d6:	4770      	bx	lr
 80059d8:	24000430 	.word	0x24000430

080059dc <BSP_STM32_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80059dc:	2800      	cmp	r0, #0
 80059de:	db07      	blt.n	80059f0 <BSP_STM32_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059e0:	2301      	movs	r3, #1
 80059e2:	f000 011f 	and.w	r1, r0, #31
 80059e6:	4a03      	ldr	r2, [pc, #12]	; (80059f4 <BSP_STM32_NVIC_EnableIRQ+0x18>)
 80059e8:	0940      	lsrs	r0, r0, #5
 80059ea:	408b      	lsls	r3, r1
 80059ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]


uint8_t BSP_STM32_NVIC_EnableIRQ(IRQn_Type IRQn) {
	NVIC_EnableIRQ(IRQn);
	return BSP_OK;
}
 80059f0:	2000      	movs	r0, #0
 80059f2:	4770      	bx	lr
 80059f4:	e000e100 	.word	0xe000e100

080059f8 <BSP_STM32_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059f8:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <BSP_STM32_NVIC_SetPriority+0x74>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f3c3 2302 	ubfx	r3, r3, #8, #3


uint8_t BSP_STM32_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8005a00:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a02:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a06:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a0a:	f1be 0f04 	cmp.w	lr, #4
 8005a0e:	bf28      	it	cs
 8005a10:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a14:	f1bc 0f06 	cmp.w	ip, #6
 8005a18:	d91b      	bls.n	8005a52 <BSP_STM32_NVIC_SetPriority+0x5a>
 8005a1a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8005a20:	fa0c fc03 	lsl.w	ip, ip, r3
 8005a24:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a28:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8005a2c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a2e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005a32:	ea21 010c 	bic.w	r1, r1, ip
 8005a36:	fa01 f103 	lsl.w	r1, r1, r3
 8005a3a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005a3e:	db0b      	blt.n	8005a58 <BSP_STM32_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a40:	0109      	lsls	r1, r1, #4
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <BSP_STM32_NVIC_SetPriority+0x78>)
 8005a44:	b2c9      	uxtb	r1, r1
 8005a46:	4403      	add	r3, r0
	uint32_t prioritygroup = NVIC_GetPriorityGrouping();
	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
	return BSP_OK;
}
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8005a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a52:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a54:	4613      	mov	r3, r2
 8005a56:	e7e7      	b.n	8005a28 <BSP_STM32_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a58:	f000 000f 	and.w	r0, r0, #15
 8005a5c:	0109      	lsls	r1, r1, #4
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <BSP_STM32_NVIC_SetPriority+0x7c>)
 8005a60:	b2c9      	uxtb	r1, r1
 8005a62:	4403      	add	r3, r0
 8005a64:	2000      	movs	r0, #0
 8005a66:	7619      	strb	r1, [r3, #24]
 8005a68:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a6c:	e000ed00 	.word	0xe000ed00
 8005a70:	e000e100 	.word	0xe000e100
 8005a74:	e000ecfc 	.word	0xe000ecfc

08005a78 <BSP_STM32_NVIC_SetPriorityGrouping>:

uint8_t BSP_STM32_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8005a78:	b410      	push	{r4}
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a7a:	4c08      	ldr	r4, [pc, #32]	; (8005a9c <BSP_STM32_NVIC_SetPriorityGrouping+0x24>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a7c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a7e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8005a82:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <BSP_STM32_NVIC_SetPriorityGrouping+0x28>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a84:	68e1      	ldr	r1, [r4, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	// Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value
	NVIC_SetPriorityGrouping(PriorityGroup);
	return BSP_OK;
}
 8005a8a:	2000      	movs	r0, #0
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a8c:	ea01 010c 	and.w	r1, r1, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a90:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8005a92:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8005a94:	60e2      	str	r2, [r4, #12]
 8005a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	e000ed00 	.word	0xe000ed00
 8005aa0:	05fa0000 	.word	0x05fa0000

08005aa4 <BSP_STM32_MPU_Enable>:

uint8_t BSP_STM32_MPU_Enable(uint32_t MPU_Control) {
	// Enable the MPU
	MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005aa4:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <BSP_STM32_MPU_Enable+0x20>)
 8005aa6:	f040 0001 	orr.w	r0, r0, #1
 8005aaa:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	// Enable fault exceptions
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005ab6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005aba:	f3bf 8f6f 	isb	sy
	// Ensure MPU setting take effects
	  __DSB();
	  __ISB();
	return BSP_OK;
}
 8005abe:	2000      	movs	r0, #0
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e000ed00 	.word	0xe000ed00

08005ac8 <BSP_STM32_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005ac8:	f3bf 8f5f 	dmb	sy

uint8_t BSP_STM32_MPU_Disable() {
	// Make sure outstanding transfers are done
	__DMB();
	// Disable fault exceptions
	SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <BSP_STM32_MPU_Disable+0x18>)
	// Disable the MPU and clear the control register
	MPU->CTRL = 0;
 8005ace:	2000      	movs	r0, #0
	SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24
	MPU->CTRL = 0;
 8005ad8:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	return BSP_OK;
}
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000ed00 	.word	0xe000ed00

08005ae4 <BSP_STM32_MPU_ConfigRegion>:

uint8_t BSP_STM32_MPU_ConfigRegion(MPU_Region_TypeDef *MPU_Init) {
	// Set the Region number
	MPU->RNR = MPU_Init->Number;
 8005ae4:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <BSP_STM32_MPU_ConfigRegion+0x64>)
 8005ae6:	7843      	ldrb	r3, [r0, #1]
 8005ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	if (MPU_Init->Enable == MPU_REGION_DISABLE) { MPU->RBAR = 0; MPU->RASR = 0; return BSP_OK; }
 8005aec:	7801      	ldrb	r1, [r0, #0]
 8005aee:	b329      	cbz	r1, 8005b3c <BSP_STM32_MPU_ConfigRegion+0x58>

	MPU->RBAR = MPU_Init->BaseAddress;
 8005af0:	6843      	ldr	r3, [r0, #4]
uint8_t BSP_STM32_MPU_ConfigRegion(MPU_Region_TypeDef *MPU_Init) {
 8005af2:	b500      	push	{lr}
	MPU->RBAR = MPU_Init->BaseAddress;
 8005af4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
	            ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005af8:	7ac3      	ldrb	r3, [r0, #11]
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005afa:	f890 c00c 	ldrb.w	ip, [r0, #12]
	            ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005afe:	061b      	lsls	r3, r3, #24
	            ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
	            ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
	            ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
	            ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005b00:	f890 e00f 	ldrb.w	lr, [r0, #15]
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b04:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
	            ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005b08:	f890 c00a 	ldrb.w	ip, [r0, #10]
	            ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b0c:	430b      	orrs	r3, r1
	            ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005b0e:	7b81      	ldrb	r1, [r0, #14]
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b10:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
	            ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005b14:	f890 c00d 	ldrb.w	ip, [r0, #13]
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b18:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
	            ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005b1c:	f890 c009 	ldrb.w	ip, [r0, #9]
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b20:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005b24:	7a01      	ldrb	r1, [r0, #8]
	            ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);

	return BSP_OK;
}
 8005b26:	2000      	movs	r0, #0
	            ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b28:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8005b2c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8005b30:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
	MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b34:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 8005b38:	f85d fb04 	ldr.w	pc, [sp], #4
	if (MPU_Init->Enable == MPU_REGION_DISABLE) { MPU->RBAR = 0; MPU->RASR = 0; return BSP_OK; }
 8005b3c:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
}
 8005b40:	2000      	movs	r0, #0
	if (MPU_Init->Enable == MPU_REGION_DISABLE) { MPU->RBAR = 0; MPU->RASR = 0; return BSP_OK; }
 8005b42:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8005b46:	4770      	bx	lr
 8005b48:	e000ed00 	.word	0xe000ed00

08005b4c <BSP_STM32_DMA_Init>:


uint32_t DMACTXvectors[16] = {0};


uint8_t BSP_STM32_DMA_Init(DMA_Stream_TypeDef *hdma, uint32_t dir, uint32_t pinc, uint32_t minc, uint32_t pdatalign, uint32_t mdatalign, uint32_t mode, uint32_t priority) {
 8005b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b50:	4605      	mov	r5, r0
 8005b52:	4698      	mov	r8, r3
 8005b54:	460e      	mov	r6, r1
 8005b56:	4617      	mov	r7, r2

	uint32_t tickstart = BSP_GetTick();
 8005b58:	f7fe fa8c 	bl	8004074 <BSP_GetTick>

    // Disable the peripheral
    hdma->CR &= ~DMA_SxCR_EN;
 8005b5c:	682b      	ldr	r3, [r5, #0]
	uint32_t tickstart = BSP_GetTick();
 8005b5e:	4681      	mov	r9, r0
    hdma->CR &= ~DMA_SxCR_EN;
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	602b      	str	r3, [r5, #0]

    // Check if the DMA Stream is effectively disabled
    while ((hdma->CR & DMA_SxCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 8005b66:	e005      	b.n	8005b74 <BSP_STM32_DMA_Init+0x28>
 8005b68:	f7fe fa84 	bl	8004074 <BSP_GetTick>
 8005b6c:	eba0 0409 	sub.w	r4, r0, r9
 8005b70:	2c02      	cmp	r4, #2
 8005b72:	d81a      	bhi.n	8005baa <BSP_STM32_DMA_Init+0x5e>
 8005b74:	682c      	ldr	r4, [r5, #0]
 8005b76:	f014 0401 	ands.w	r4, r4, #1
 8005b7a:	d1f5      	bne.n	8005b68 <BSP_STM32_DMA_Init+0x1c>

    // Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));

    // Prepare the DMA Stream configuration
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005b7c:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    uint32_t registerValue = hdma->CR;
 8005b80:	6829      	ldr	r1, [r5, #0]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

    // Write to DMA Stream FCR
    hdma->FCR = registerValue;

	return BSP_OK;
 8005b82:	4620      	mov	r0, r4
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005b84:	4313      	orrs	r3, r2
 8005b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	9a08      	ldr	r2, [sp, #32]
 8005b8c:	4313      	orrs	r3, r2
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <BSP_STM32_DMA_Init+0x64>)
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005b90:	ea43 0308 	orr.w	r3, r3, r8
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 8005b94:	400a      	ands	r2, r1
    registerValue |=  dir | pinc | minc | pdatalign | mdatalign | mode | priority;
 8005b96:	433b      	orrs	r3, r7
 8005b98:	4333      	orrs	r3, r6
 8005b9a:	4313      	orrs	r3, r2
    hdma->CR = registerValue;
 8005b9c:	602b      	str	r3, [r5, #0]
    registerValue = hdma->FCR;
 8005b9e:	696b      	ldr	r3, [r5, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ba0:	f023 0307 	bic.w	r3, r3, #7
    hdma->FCR = registerValue;
 8005ba4:	616b      	str	r3, [r5, #20]
}
 8005ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while ((hdma->CR & DMA_SxCR_EN) > 0) if ((BSP_GetTick() - tickstart) > 2) return BSP_ERROR;
 8005baa:	2001      	movs	r0, #1
}
 8005bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb0:	fe10803f 	.word	0xfe10803f

08005bb4 <BSP_STM32_DMA_CtxLink>:


uint8_t BSP_STM32_DMA_CtxLink(DMA_Stream_TypeDef *hdma, TxRxContext_TypeDef *ctx, uint32_t request) {
 8005bb4:	b470      	push	{r4, r5, r6}

	ctx->dma_stream = (uint32_t)hdma;
	ctx->dma_mode = TXRX_CTX_MODE_DMA;
 8005bb6:	2401      	movs	r4, #1

    // Initialize StreamBaseAddress and StreamIndex parameters
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma) & 0xFFU) - 16U) / 24U;
 8005bb8:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <BSP_STM32_DMA_CtxLink+0x68>)
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8005bba:	4e19      	ldr	r6, [pc, #100]	; (8005c20 <BSP_STM32_DMA_CtxLink+0x6c>)
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
    	else ctx->dma_baseregs = ((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU));

    //Clear all interrupt flags
    DMA_Base_Registers * regs_dma = (DMA_Base_Registers * )ctx->dma_baseregs;
    regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005bbc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    ctx->dma_muxchannelstatus = DMAMUX1_ChannelStatus_BASE;
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);

    // Set peripheral request  to DMAMUX channel
    DMAMUX_Channel_TypeDef * dma_muxchannel = (DMAMUX_Channel_TypeDef *)ctx->dma_muxchannel;
    dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 8005bc0:	b2d2      	uxtb	r2, r2
	ctx->dma_mode = TXRX_CTX_MODE_DMA;
 8005bc2:	e9c1 4000 	strd	r4, r0, [r1]
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma) & 0xFFU) - 16U) / 24U;
 8005bc6:	b2c4      	uxtb	r4, r0
 8005bc8:	3c10      	subs	r4, #16
 8005bca:	fba3 5304 	umull	r5, r3, r3, r4
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
 8005bce:	2c5f      	cmp	r4, #95	; 0x5f
 8005bd0:	4c14      	ldr	r4, [pc, #80]	; (8005c24 <BSP_STM32_DMA_CtxLink+0x70>)
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8005bd2:	f3c3 1502 	ubfx	r5, r3, #4, #3
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma) & 0xFFU) - 16U) / 24U;
 8005bd6:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
 8005bda:	ea04 0400 	and.w	r4, r4, r0
    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005bde:	4812      	ldr	r0, [pc, #72]	; (8005c28 <BSP_STM32_DMA_CtxLink+0x74>)
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8005be0:	5d75      	ldrb	r5, [r6, r5]
    if (stream_number > 3U) ctx->dma_baseregs = (((uint32_t)((uint32_t*)hdma) & (uint32_t)(~0x3FFU)) + 4U);
 8005be2:	bf88      	it	hi
 8005be4:	3404      	addhi	r4, #4
    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005be6:	4418      	add	r0, r3
    ctx->dma_index = flagBitshiftOffset[stream_number & 0x7U];
 8005be8:	608d      	str	r5, [r1, #8]
    regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005bea:	f005 051f 	and.w	r5, r5, #31
 8005bee:	60cc      	str	r4, [r1, #12]
    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005bf0:	0080      	lsls	r0, r0, #2
    regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005bf2:	fa0c f505 	lsl.w	r5, ip, r5
 8005bf6:	60a5      	str	r5, [r4, #8]
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);
 8005bf8:	f003 051f 	and.w	r5, r3, #31
 8005bfc:	2401      	movs	r4, #1
    ctx->dma_muxchannel = ((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005bfe:	6108      	str	r0, [r1, #16]
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);
 8005c00:	40ac      	lsls	r4, r5
    ctx->dma_muxchannelstatus = DMAMUX1_ChannelStatus_BASE;
 8005c02:	4d0a      	ldr	r5, [pc, #40]	; (8005c2c <BSP_STM32_DMA_CtxLink+0x78>)
    ctx->dma_muxchannelstatusmask = 1UL << (stream_number & 0x1FU);
 8005c04:	618c      	str	r4, [r1, #24]
    ctx->dma_muxchannelstatus = DMAMUX1_ChannelStatus_BASE;
 8005c06:	614d      	str	r5, [r1, #20]
    dma_muxchannel->CCR = (request & DMAMUX_CxCR_DMAREQ_ID);
 8005c08:	6002      	str	r2, [r0, #0]

    // Clear the DMAMUX synchro overrun flag
    DMAMUX_ChannelStatus_TypeDef * dma_muxchannelstatus = (DMAMUX_ChannelStatus_TypeDef *)ctx->dma_muxchannelstatus;
    dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 8005c0a:	4809      	ldr	r0, [pc, #36]	; (8005c30 <BSP_STM32_DMA_CtxLink+0x7c>)

    // Assigning TxRx Context to DMA stream
    DMACTXvectors[stream_number] = (uint32_t)ctx;
 8005c0c:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <BSP_STM32_DMA_CtxLink+0x80>)
    dma_muxchannelstatus->CFR = ctx->dma_muxchannelstatusmask;
 8005c0e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84

	return BSP_OK;
}
 8005c12:	2000      	movs	r0, #0
    DMACTXvectors[stream_number] = (uint32_t)ctx;
 8005c14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005c18:	bc70      	pop	{r4, r5, r6}
 8005c1a:	4770      	bx	lr
 8005c1c:	aaaaaaab 	.word	0xaaaaaaab
 8005c20:	080155b0 	.word	0x080155b0
 8005c24:	fffffc00 	.word	0xfffffc00
 8005c28:	10008200 	.word	0x10008200
 8005c2c:	40020880 	.word	0x40020880
 8005c30:	40020800 	.word	0x40020800
 8005c34:	24000450 	.word	0x24000450

08005c38 <BSP_STM32_DMA_StartIT>:


uint8_t BSP_STM32_DMA_StartIT(TxRxContext_TypeDef *ctx, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 8005c38:	b470      	push	{r4, r5, r6}

	// Disable the peripheral
	hdma->CR &= ~DMA_SxCR_EN;

	// Clear all interrupt flags at correct offset within the register
	regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005c3a:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
	DMA_Base_Registers * regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005c3e:	68c6      	ldr	r6, [r0, #12]
	hdma->CR &= ~DMA_SxCR_EN;
 8005c40:	6820      	ldr	r0, [r4, #0]
	regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005c42:	f005 0c1f 	and.w	ip, r5, #31
	hdma->CR &= ~DMA_SxCR_EN;
 8005c46:	f020 0001 	bic.w	r0, r0, #1
 8005c4a:	6020      	str	r0, [r4, #0]
	regs_dma->IFCR = 0x3FUL << (ctx->dma_index & 0x1FU);
 8005c4c:	203f      	movs	r0, #63	; 0x3f
 8005c4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8005c52:	60b0      	str	r0, [r6, #8]

	// Clear DBM bit
	hdma->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8005c5a:	6020      	str	r0, [r4, #0]

	// Configure DMA Stream data length
	hdma->NDTR = DataLength;
 8005c5c:	6063      	str	r3, [r4, #4]

	if((hdma->CR & DMA_SxCR_DIR) == DMA_MEMORY_TO_PERIPH) {
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d00c      	beq.n	8005c82 <BSP_STM32_DMA_StartIT+0x4a>
		// Configure DMA Stream destination address
		hdma->M0AR = SrcAddress;
	} else {
		// Peripheral to Memory
		// Configure DMA Stream destination address
	    hdma->PAR = SrcAddress;
 8005c68:	60a1      	str	r1, [r4, #8]

	    // Configure DMA Stream source address
	    hdma->M0AR = DstAddress;
 8005c6a:	60e2      	str	r2, [r4, #12]
	}

	// Enable Common interrupts
	MODIFY_REG(hdma->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT));
 8005c6c:	6823      	ldr	r3, [r4, #0]

	// Enable DMA
	hdma->CR |=  DMA_SxCR_EN;

	return BSP_OK;
}
 8005c6e:	2000      	movs	r0, #0
	MODIFY_REG(hdma->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT));
 8005c70:	f043 031e 	orr.w	r3, r3, #30
 8005c74:	6023      	str	r3, [r4, #0]
	hdma->CR |=  DMA_SxCR_EN;
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	6023      	str	r3, [r4, #0]
}
 8005c7e:	bc70      	pop	{r4, r5, r6}
 8005c80:	4770      	bx	lr
		hdma->PAR = DstAddress;
 8005c82:	60a2      	str	r2, [r4, #8]
		hdma->M0AR = SrcAddress;
 8005c84:	60e1      	str	r1, [r4, #12]
 8005c86:	e7f1      	b.n	8005c6c <BSP_STM32_DMA_StartIT+0x34>

08005c88 <BSP_STM32_DMA_GetCounter>:

	return BSP_OK;
}

uint32_t BSP_STM32_DMA_GetCounter(DMA_Stream_TypeDef *hdma) {
	return hdma->NDTR;
 8005c88:	6840      	ldr	r0, [r0, #4]
}
 8005c8a:	4770      	bx	lr

08005c8c <DMA1_Stream0_IRQHandler>:
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
	}

}

void DMA1_Stream0_IRQHandler() { if (DMACTXvectors[0x00]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x00])); }
 8005c8c:	4b40      	ldr	r3, [pc, #256]	; (8005d90 <DMA1_Stream0_IRQHandler+0x104>)
 8005c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c92:	681c      	ldr	r4, [r3, #0]
 8005c94:	b90c      	cbnz	r4, 8005c9a <DMA1_Stream0_IRQHandler+0xe>
 8005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8005c9a:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8005c9c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ca0:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005ca2:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ca4:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8005ca6:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005caa:	d515      	bpl.n	8005cd8 <DMA1_Stream0_IRQHandler+0x4c>
 8005cac:	68a3      	ldr	r3, [r4, #8]
 8005cae:	f003 021f 	and.w	r2, r3, #31
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	4093      	lsls	r3, r2
 8005cb6:	6832      	ldr	r2, [r6, #0]
 8005cb8:	421a      	tst	r2, r3
 8005cba:	d00d      	beq.n	8005cd8 <DMA1_Stream0_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8005cbc:	682a      	ldr	r2, [r5, #0]
 8005cbe:	f022 0204 	bic.w	r2, r2, #4
 8005cc2:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8005cc4:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005cc6:	682b      	ldr	r3, [r5, #0]
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005cce:	f1b9 0f00 	cmp.w	r9, #0
 8005cd2:	d001      	beq.n	8005cd8 <DMA1_Stream0_IRQHandler+0x4c>
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005cd8:	696b      	ldr	r3, [r5, #20]
 8005cda:	0619      	lsls	r1, r3, #24
 8005cdc:	d516      	bpl.n	8005d0c <DMA1_Stream0_IRQHandler+0x80>
 8005cde:	68a3      	ldr	r3, [r4, #8]
 8005ce0:	6832      	ldr	r2, [r6, #0]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	40da      	lsrs	r2, r3
 8005ce8:	07d2      	lsls	r2, r2, #31
 8005cea:	d50f      	bpl.n	8005d0c <DMA1_Stream0_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8005cec:	696a      	ldr	r2, [r5, #20]
 8005cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf2:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d06:	b10b      	cbz	r3, 8005d0c <DMA1_Stream0_IRQHandler+0x80>
 8005d08:	4620      	mov	r0, r4
 8005d0a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	079b      	lsls	r3, r3, #30
 8005d10:	d50c      	bpl.n	8005d2c <DMA1_Stream0_IRQHandler+0xa0>
 8005d12:	68a3      	ldr	r3, [r4, #8]
 8005d14:	f003 021f 	and.w	r2, r3, #31
 8005d18:	2304      	movs	r3, #4
 8005d1a:	4093      	lsls	r3, r2
 8005d1c:	6832      	ldr	r2, [r6, #0]
 8005d1e:	421a      	tst	r2, r3
 8005d20:	d004      	beq.n	8005d2c <DMA1_Stream0_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8005d22:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d26:	b10b      	cbz	r3, 8005d2c <DMA1_Stream0_IRQHandler+0xa0>
 8005d28:	4620      	mov	r0, r4
 8005d2a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	0718      	lsls	r0, r3, #28
 8005d30:	d513      	bpl.n	8005d5a <DMA1_Stream0_IRQHandler+0xce>
 8005d32:	68a3      	ldr	r3, [r4, #8]
 8005d34:	f003 021f 	and.w	r2, r3, #31
 8005d38:	2310      	movs	r3, #16
 8005d3a:	4093      	lsls	r3, r2
 8005d3c:	6832      	ldr	r2, [r6, #0]
 8005d3e:	421a      	tst	r2, r3
 8005d40:	d00b      	beq.n	8005d5a <DMA1_Stream0_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8005d42:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	05d9      	lsls	r1, r3, #23
 8005d48:	d403      	bmi.n	8005d52 <DMA1_Stream0_IRQHandler+0xc6>
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	f023 0308 	bic.w	r3, r3, #8
 8005d50:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8005d52:	69e3      	ldr	r3, [r4, #28]
 8005d54:	b10b      	cbz	r3, 8005d5a <DMA1_Stream0_IRQHandler+0xce>
 8005d56:	4620      	mov	r0, r4
 8005d58:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005d5a:	682b      	ldr	r3, [r5, #0]
 8005d5c:	06da      	lsls	r2, r3, #27
 8005d5e:	d59a      	bpl.n	8005c96 <DMA1_Stream0_IRQHandler+0xa>
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	6831      	ldr	r1, [r6, #0]
 8005d64:	f003 021f 	and.w	r2, r3, #31
 8005d68:	2320      	movs	r3, #32
 8005d6a:	4093      	lsls	r3, r2
 8005d6c:	4219      	tst	r1, r3
 8005d6e:	d092      	beq.n	8005c96 <DMA1_Stream0_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8005d70:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8005d72:	682b      	ldr	r3, [r5, #0]
 8005d74:	05db      	lsls	r3, r3, #23
 8005d76:	d403      	bmi.n	8005d80 <DMA1_Stream0_IRQHandler+0xf4>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	f023 0310 	bic.w	r3, r3, #16
 8005d7e:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005d80:	6a23      	ldr	r3, [r4, #32]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d087      	beq.n	8005c96 <DMA1_Stream0_IRQHandler+0xa>
 8005d86:	4620      	mov	r0, r4
 8005d88:	463b      	mov	r3, r7
void DMA1_Stream0_IRQHandler() { if (DMACTXvectors[0x00]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x00])); }
 8005d8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005d8e:	4718      	bx	r3
 8005d90:	24000450 	.word	0x24000450

08005d94 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler() { if (DMACTXvectors[0x01]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x01])); }
 8005d94:	4b40      	ldr	r3, [pc, #256]	; (8005e98 <DMA1_Stream1_IRQHandler+0x104>)
 8005d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d9a:	685c      	ldr	r4, [r3, #4]
 8005d9c:	b90c      	cbnz	r4, 8005da2 <DMA1_Stream1_IRQHandler+0xe>
 8005d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8005da2:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8005da4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005da8:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005daa:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005dac:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8005dae:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005db2:	d515      	bpl.n	8005de0 <DMA1_Stream1_IRQHandler+0x4c>
 8005db4:	68a3      	ldr	r3, [r4, #8]
 8005db6:	f003 021f 	and.w	r2, r3, #31
 8005dba:	2308      	movs	r3, #8
 8005dbc:	4093      	lsls	r3, r2
 8005dbe:	6832      	ldr	r2, [r6, #0]
 8005dc0:	421a      	tst	r2, r3
 8005dc2:	d00d      	beq.n	8005de0 <DMA1_Stream1_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8005dc4:	682a      	ldr	r2, [r5, #0]
 8005dc6:	f022 0204 	bic.w	r2, r2, #4
 8005dca:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8005dcc:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005dce:	682b      	ldr	r3, [r5, #0]
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005dd6:	f1b9 0f00 	cmp.w	r9, #0
 8005dda:	d001      	beq.n	8005de0 <DMA1_Stream1_IRQHandler+0x4c>
 8005ddc:	4620      	mov	r0, r4
 8005dde:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005de0:	696b      	ldr	r3, [r5, #20]
 8005de2:	0619      	lsls	r1, r3, #24
 8005de4:	d516      	bpl.n	8005e14 <DMA1_Stream1_IRQHandler+0x80>
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	6832      	ldr	r2, [r6, #0]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	40da      	lsrs	r2, r3
 8005df0:	07d2      	lsls	r2, r2, #31
 8005df2:	d50f      	bpl.n	8005e14 <DMA1_Stream1_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8005df4:	696a      	ldr	r2, [r5, #20]
 8005df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dfa:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0e:	b10b      	cbz	r3, 8005e14 <DMA1_Stream1_IRQHandler+0x80>
 8005e10:	4620      	mov	r0, r4
 8005e12:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	079b      	lsls	r3, r3, #30
 8005e18:	d50c      	bpl.n	8005e34 <DMA1_Stream1_IRQHandler+0xa0>
 8005e1a:	68a3      	ldr	r3, [r4, #8]
 8005e1c:	f003 021f 	and.w	r2, r3, #31
 8005e20:	2304      	movs	r3, #4
 8005e22:	4093      	lsls	r3, r2
 8005e24:	6832      	ldr	r2, [r6, #0]
 8005e26:	421a      	tst	r2, r3
 8005e28:	d004      	beq.n	8005e34 <DMA1_Stream1_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8005e2a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e2e:	b10b      	cbz	r3, 8005e34 <DMA1_Stream1_IRQHandler+0xa0>
 8005e30:	4620      	mov	r0, r4
 8005e32:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	0718      	lsls	r0, r3, #28
 8005e38:	d513      	bpl.n	8005e62 <DMA1_Stream1_IRQHandler+0xce>
 8005e3a:	68a3      	ldr	r3, [r4, #8]
 8005e3c:	f003 021f 	and.w	r2, r3, #31
 8005e40:	2310      	movs	r3, #16
 8005e42:	4093      	lsls	r3, r2
 8005e44:	6832      	ldr	r2, [r6, #0]
 8005e46:	421a      	tst	r2, r3
 8005e48:	d00b      	beq.n	8005e62 <DMA1_Stream1_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8005e4a:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	05d9      	lsls	r1, r3, #23
 8005e50:	d403      	bmi.n	8005e5a <DMA1_Stream1_IRQHandler+0xc6>
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	f023 0308 	bic.w	r3, r3, #8
 8005e58:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8005e5a:	69e3      	ldr	r3, [r4, #28]
 8005e5c:	b10b      	cbz	r3, 8005e62 <DMA1_Stream1_IRQHandler+0xce>
 8005e5e:	4620      	mov	r0, r4
 8005e60:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	06da      	lsls	r2, r3, #27
 8005e66:	d59a      	bpl.n	8005d9e <DMA1_Stream1_IRQHandler+0xa>
 8005e68:	68a3      	ldr	r3, [r4, #8]
 8005e6a:	6831      	ldr	r1, [r6, #0]
 8005e6c:	f003 021f 	and.w	r2, r3, #31
 8005e70:	2320      	movs	r3, #32
 8005e72:	4093      	lsls	r3, r2
 8005e74:	4219      	tst	r1, r3
 8005e76:	d092      	beq.n	8005d9e <DMA1_Stream1_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8005e78:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8005e7a:	682b      	ldr	r3, [r5, #0]
 8005e7c:	05db      	lsls	r3, r3, #23
 8005e7e:	d403      	bmi.n	8005e88 <DMA1_Stream1_IRQHandler+0xf4>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	f023 0310 	bic.w	r3, r3, #16
 8005e86:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005e88:	6a23      	ldr	r3, [r4, #32]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d087      	beq.n	8005d9e <DMA1_Stream1_IRQHandler+0xa>
 8005e8e:	4620      	mov	r0, r4
 8005e90:	463b      	mov	r3, r7
void DMA1_Stream1_IRQHandler() { if (DMACTXvectors[0x01]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x01])); }
 8005e92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005e96:	4718      	bx	r3
 8005e98:	24000450 	.word	0x24000450

08005e9c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler() { if (DMACTXvectors[0x02]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x02])); }
 8005e9c:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <DMA1_Stream2_IRQHandler+0x104>)
 8005e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea2:	689c      	ldr	r4, [r3, #8]
 8005ea4:	b90c      	cbnz	r4, 8005eaa <DMA1_Stream2_IRQHandler+0xe>
 8005ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8005eaa:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8005eac:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005eb0:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005eb2:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005eb4:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8005eb6:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005eba:	d515      	bpl.n	8005ee8 <DMA1_Stream2_IRQHandler+0x4c>
 8005ebc:	68a3      	ldr	r3, [r4, #8]
 8005ebe:	f003 021f 	and.w	r2, r3, #31
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	4093      	lsls	r3, r2
 8005ec6:	6832      	ldr	r2, [r6, #0]
 8005ec8:	421a      	tst	r2, r3
 8005eca:	d00d      	beq.n	8005ee8 <DMA1_Stream2_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8005ecc:	682a      	ldr	r2, [r5, #0]
 8005ece:	f022 0204 	bic.w	r2, r2, #4
 8005ed2:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8005ed4:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005ede:	f1b9 0f00 	cmp.w	r9, #0
 8005ee2:	d001      	beq.n	8005ee8 <DMA1_Stream2_IRQHandler+0x4c>
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ee8:	696b      	ldr	r3, [r5, #20]
 8005eea:	0619      	lsls	r1, r3, #24
 8005eec:	d516      	bpl.n	8005f1c <DMA1_Stream2_IRQHandler+0x80>
 8005eee:	68a3      	ldr	r3, [r4, #8]
 8005ef0:	6832      	ldr	r2, [r6, #0]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	40da      	lsrs	r2, r3
 8005ef8:	07d2      	lsls	r2, r2, #31
 8005efa:	d50f      	bpl.n	8005f1c <DMA1_Stream2_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8005efc:	696a      	ldr	r2, [r5, #20]
 8005efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f02:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8005f04:	2201      	movs	r2, #1
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f16:	b10b      	cbz	r3, 8005f1c <DMA1_Stream2_IRQHandler+0x80>
 8005f18:	4620      	mov	r0, r4
 8005f1a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	079b      	lsls	r3, r3, #30
 8005f20:	d50c      	bpl.n	8005f3c <DMA1_Stream2_IRQHandler+0xa0>
 8005f22:	68a3      	ldr	r3, [r4, #8]
 8005f24:	f003 021f 	and.w	r2, r3, #31
 8005f28:	2304      	movs	r3, #4
 8005f2a:	4093      	lsls	r3, r2
 8005f2c:	6832      	ldr	r2, [r6, #0]
 8005f2e:	421a      	tst	r2, r3
 8005f30:	d004      	beq.n	8005f3c <DMA1_Stream2_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8005f32:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f36:	b10b      	cbz	r3, 8005f3c <DMA1_Stream2_IRQHandler+0xa0>
 8005f38:	4620      	mov	r0, r4
 8005f3a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	0718      	lsls	r0, r3, #28
 8005f40:	d513      	bpl.n	8005f6a <DMA1_Stream2_IRQHandler+0xce>
 8005f42:	68a3      	ldr	r3, [r4, #8]
 8005f44:	f003 021f 	and.w	r2, r3, #31
 8005f48:	2310      	movs	r3, #16
 8005f4a:	4093      	lsls	r3, r2
 8005f4c:	6832      	ldr	r2, [r6, #0]
 8005f4e:	421a      	tst	r2, r3
 8005f50:	d00b      	beq.n	8005f6a <DMA1_Stream2_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8005f52:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	05d9      	lsls	r1, r3, #23
 8005f58:	d403      	bmi.n	8005f62 <DMA1_Stream2_IRQHandler+0xc6>
 8005f5a:	682b      	ldr	r3, [r5, #0]
 8005f5c:	f023 0308 	bic.w	r3, r3, #8
 8005f60:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8005f62:	69e3      	ldr	r3, [r4, #28]
 8005f64:	b10b      	cbz	r3, 8005f6a <DMA1_Stream2_IRQHandler+0xce>
 8005f66:	4620      	mov	r0, r4
 8005f68:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005f6a:	682b      	ldr	r3, [r5, #0]
 8005f6c:	06da      	lsls	r2, r3, #27
 8005f6e:	d59a      	bpl.n	8005ea6 <DMA1_Stream2_IRQHandler+0xa>
 8005f70:	68a3      	ldr	r3, [r4, #8]
 8005f72:	6831      	ldr	r1, [r6, #0]
 8005f74:	f003 021f 	and.w	r2, r3, #31
 8005f78:	2320      	movs	r3, #32
 8005f7a:	4093      	lsls	r3, r2
 8005f7c:	4219      	tst	r1, r3
 8005f7e:	d092      	beq.n	8005ea6 <DMA1_Stream2_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8005f80:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	05db      	lsls	r3, r3, #23
 8005f86:	d403      	bmi.n	8005f90 <DMA1_Stream2_IRQHandler+0xf4>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	f023 0310 	bic.w	r3, r3, #16
 8005f8e:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005f90:	6a23      	ldr	r3, [r4, #32]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d087      	beq.n	8005ea6 <DMA1_Stream2_IRQHandler+0xa>
 8005f96:	4620      	mov	r0, r4
 8005f98:	463b      	mov	r3, r7
void DMA1_Stream2_IRQHandler() { if (DMACTXvectors[0x02]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x02])); }
 8005f9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8005f9e:	4718      	bx	r3
 8005fa0:	24000450 	.word	0x24000450

08005fa4 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler() { if (DMACTXvectors[0x03]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x03])); }
 8005fa4:	4b40      	ldr	r3, [pc, #256]	; (80060a8 <DMA1_Stream3_IRQHandler+0x104>)
 8005fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005faa:	68dc      	ldr	r4, [r3, #12]
 8005fac:	b90c      	cbnz	r4, 8005fb2 <DMA1_Stream3_IRQHandler+0xe>
 8005fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8005fb2:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8005fb4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005fb8:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8005fba:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005fbc:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8005fbe:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005fc2:	d515      	bpl.n	8005ff0 <DMA1_Stream3_IRQHandler+0x4c>
 8005fc4:	68a3      	ldr	r3, [r4, #8]
 8005fc6:	f003 021f 	and.w	r2, r3, #31
 8005fca:	2308      	movs	r3, #8
 8005fcc:	4093      	lsls	r3, r2
 8005fce:	6832      	ldr	r2, [r6, #0]
 8005fd0:	421a      	tst	r2, r3
 8005fd2:	d00d      	beq.n	8005ff0 <DMA1_Stream3_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8005fd4:	682a      	ldr	r2, [r5, #0]
 8005fd6:	f022 0204 	bic.w	r2, r2, #4
 8005fda:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8005fdc:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8005fe6:	f1b9 0f00 	cmp.w	r9, #0
 8005fea:	d001      	beq.n	8005ff0 <DMA1_Stream3_IRQHandler+0x4c>
 8005fec:	4620      	mov	r0, r4
 8005fee:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8005ff0:	696b      	ldr	r3, [r5, #20]
 8005ff2:	0619      	lsls	r1, r3, #24
 8005ff4:	d516      	bpl.n	8006024 <DMA1_Stream3_IRQHandler+0x80>
 8005ff6:	68a3      	ldr	r3, [r4, #8]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	40da      	lsrs	r2, r3
 8006000:	07d2      	lsls	r2, r2, #31
 8006002:	d50f      	bpl.n	8006024 <DMA1_Stream3_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006004:	696a      	ldr	r2, [r5, #20]
 8006006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800600a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800600c:	2201      	movs	r2, #1
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800601c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601e:	b10b      	cbz	r3, 8006024 <DMA1_Stream3_IRQHandler+0x80>
 8006020:	4620      	mov	r0, r4
 8006022:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	079b      	lsls	r3, r3, #30
 8006028:	d50c      	bpl.n	8006044 <DMA1_Stream3_IRQHandler+0xa0>
 800602a:	68a3      	ldr	r3, [r4, #8]
 800602c:	f003 021f 	and.w	r2, r3, #31
 8006030:	2304      	movs	r3, #4
 8006032:	4093      	lsls	r3, r2
 8006034:	6832      	ldr	r2, [r6, #0]
 8006036:	421a      	tst	r2, r3
 8006038:	d004      	beq.n	8006044 <DMA1_Stream3_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 800603a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800603c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800603e:	b10b      	cbz	r3, 8006044 <DMA1_Stream3_IRQHandler+0xa0>
 8006040:	4620      	mov	r0, r4
 8006042:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	0718      	lsls	r0, r3, #28
 8006048:	d513      	bpl.n	8006072 <DMA1_Stream3_IRQHandler+0xce>
 800604a:	68a3      	ldr	r3, [r4, #8]
 800604c:	f003 021f 	and.w	r2, r3, #31
 8006050:	2310      	movs	r3, #16
 8006052:	4093      	lsls	r3, r2
 8006054:	6832      	ldr	r2, [r6, #0]
 8006056:	421a      	tst	r2, r3
 8006058:	d00b      	beq.n	8006072 <DMA1_Stream3_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 800605a:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	05d9      	lsls	r1, r3, #23
 8006060:	d403      	bmi.n	800606a <DMA1_Stream3_IRQHandler+0xc6>
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	f023 0308 	bic.w	r3, r3, #8
 8006068:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 800606a:	69e3      	ldr	r3, [r4, #28]
 800606c:	b10b      	cbz	r3, 8006072 <DMA1_Stream3_IRQHandler+0xce>
 800606e:	4620      	mov	r0, r4
 8006070:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006072:	682b      	ldr	r3, [r5, #0]
 8006074:	06da      	lsls	r2, r3, #27
 8006076:	d59a      	bpl.n	8005fae <DMA1_Stream3_IRQHandler+0xa>
 8006078:	68a3      	ldr	r3, [r4, #8]
 800607a:	6831      	ldr	r1, [r6, #0]
 800607c:	f003 021f 	and.w	r2, r3, #31
 8006080:	2320      	movs	r3, #32
 8006082:	4093      	lsls	r3, r2
 8006084:	4219      	tst	r1, r3
 8006086:	d092      	beq.n	8005fae <DMA1_Stream3_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006088:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	05db      	lsls	r3, r3, #23
 800608e:	d403      	bmi.n	8006098 <DMA1_Stream3_IRQHandler+0xf4>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	f023 0310 	bic.w	r3, r3, #16
 8006096:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006098:	6a23      	ldr	r3, [r4, #32]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d087      	beq.n	8005fae <DMA1_Stream3_IRQHandler+0xa>
 800609e:	4620      	mov	r0, r4
 80060a0:	463b      	mov	r3, r7
void DMA1_Stream3_IRQHandler() { if (DMACTXvectors[0x03]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x03])); }
 80060a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80060a6:	4718      	bx	r3
 80060a8:	24000450 	.word	0x24000450

080060ac <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler() { if (DMACTXvectors[0x04]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x04])); }
 80060ac:	4b40      	ldr	r3, [pc, #256]	; (80061b0 <DMA1_Stream4_IRQHandler+0x104>)
 80060ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b2:	691c      	ldr	r4, [r3, #16]
 80060b4:	b90c      	cbnz	r4, 80060ba <DMA1_Stream4_IRQHandler+0xe>
 80060b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80060ba:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80060bc:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80060c0:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80060c2:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80060c4:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 80060c6:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80060ca:	d515      	bpl.n	80060f8 <DMA1_Stream4_IRQHandler+0x4c>
 80060cc:	68a3      	ldr	r3, [r4, #8]
 80060ce:	f003 021f 	and.w	r2, r3, #31
 80060d2:	2308      	movs	r3, #8
 80060d4:	4093      	lsls	r3, r2
 80060d6:	6832      	ldr	r2, [r6, #0]
 80060d8:	421a      	tst	r2, r3
 80060da:	d00d      	beq.n	80060f8 <DMA1_Stream4_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 80060dc:	682a      	ldr	r2, [r5, #0]
 80060de:	f022 0204 	bic.w	r2, r2, #4
 80060e2:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 80060e4:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 80060e6:	682b      	ldr	r3, [r5, #0]
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80060ee:	f1b9 0f00 	cmp.w	r9, #0
 80060f2:	d001      	beq.n	80060f8 <DMA1_Stream4_IRQHandler+0x4c>
 80060f4:	4620      	mov	r0, r4
 80060f6:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80060f8:	696b      	ldr	r3, [r5, #20]
 80060fa:	0619      	lsls	r1, r3, #24
 80060fc:	d516      	bpl.n	800612c <DMA1_Stream4_IRQHandler+0x80>
 80060fe:	68a3      	ldr	r3, [r4, #8]
 8006100:	6832      	ldr	r2, [r6, #0]
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	40da      	lsrs	r2, r3
 8006108:	07d2      	lsls	r2, r2, #31
 800610a:	d50f      	bpl.n	800612c <DMA1_Stream4_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800610c:	696a      	ldr	r2, [r5, #20]
 800610e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006112:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006114:	2201      	movs	r2, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006126:	b10b      	cbz	r3, 800612c <DMA1_Stream4_IRQHandler+0x80>
 8006128:	4620      	mov	r0, r4
 800612a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	079b      	lsls	r3, r3, #30
 8006130:	d50c      	bpl.n	800614c <DMA1_Stream4_IRQHandler+0xa0>
 8006132:	68a3      	ldr	r3, [r4, #8]
 8006134:	f003 021f 	and.w	r2, r3, #31
 8006138:	2304      	movs	r3, #4
 800613a:	4093      	lsls	r3, r2
 800613c:	6832      	ldr	r2, [r6, #0]
 800613e:	421a      	tst	r2, r3
 8006140:	d004      	beq.n	800614c <DMA1_Stream4_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006142:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006146:	b10b      	cbz	r3, 800614c <DMA1_Stream4_IRQHandler+0xa0>
 8006148:	4620      	mov	r0, r4
 800614a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	0718      	lsls	r0, r3, #28
 8006150:	d513      	bpl.n	800617a <DMA1_Stream4_IRQHandler+0xce>
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	f003 021f 	and.w	r2, r3, #31
 8006158:	2310      	movs	r3, #16
 800615a:	4093      	lsls	r3, r2
 800615c:	6832      	ldr	r2, [r6, #0]
 800615e:	421a      	tst	r2, r3
 8006160:	d00b      	beq.n	800617a <DMA1_Stream4_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006162:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	05d9      	lsls	r1, r3, #23
 8006168:	d403      	bmi.n	8006172 <DMA1_Stream4_IRQHandler+0xc6>
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	f023 0308 	bic.w	r3, r3, #8
 8006170:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006172:	69e3      	ldr	r3, [r4, #28]
 8006174:	b10b      	cbz	r3, 800617a <DMA1_Stream4_IRQHandler+0xce>
 8006176:	4620      	mov	r0, r4
 8006178:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800617a:	682b      	ldr	r3, [r5, #0]
 800617c:	06da      	lsls	r2, r3, #27
 800617e:	d59a      	bpl.n	80060b6 <DMA1_Stream4_IRQHandler+0xa>
 8006180:	68a3      	ldr	r3, [r4, #8]
 8006182:	6831      	ldr	r1, [r6, #0]
 8006184:	f003 021f 	and.w	r2, r3, #31
 8006188:	2320      	movs	r3, #32
 800618a:	4093      	lsls	r3, r2
 800618c:	4219      	tst	r1, r3
 800618e:	d092      	beq.n	80060b6 <DMA1_Stream4_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006190:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	05db      	lsls	r3, r3, #23
 8006196:	d403      	bmi.n	80061a0 <DMA1_Stream4_IRQHandler+0xf4>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	f023 0310 	bic.w	r3, r3, #16
 800619e:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80061a0:	6a23      	ldr	r3, [r4, #32]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d087      	beq.n	80060b6 <DMA1_Stream4_IRQHandler+0xa>
 80061a6:	4620      	mov	r0, r4
 80061a8:	463b      	mov	r3, r7
void DMA1_Stream4_IRQHandler() { if (DMACTXvectors[0x04]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x04])); }
 80061aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80061ae:	4718      	bx	r3
 80061b0:	24000450 	.word	0x24000450

080061b4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler() { if (DMACTXvectors[0x05]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x05])); }
 80061b4:	4b40      	ldr	r3, [pc, #256]	; (80062b8 <DMA1_Stream5_IRQHandler+0x104>)
 80061b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ba:	695c      	ldr	r4, [r3, #20]
 80061bc:	b90c      	cbnz	r4, 80061c2 <DMA1_Stream5_IRQHandler+0xe>
 80061be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80061c2:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80061c4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80061c8:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80061ca:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80061cc:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 80061ce:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80061d2:	d515      	bpl.n	8006200 <DMA1_Stream5_IRQHandler+0x4c>
 80061d4:	68a3      	ldr	r3, [r4, #8]
 80061d6:	f003 021f 	and.w	r2, r3, #31
 80061da:	2308      	movs	r3, #8
 80061dc:	4093      	lsls	r3, r2
 80061de:	6832      	ldr	r2, [r6, #0]
 80061e0:	421a      	tst	r2, r3
 80061e2:	d00d      	beq.n	8006200 <DMA1_Stream5_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 80061e4:	682a      	ldr	r2, [r5, #0]
 80061e6:	f022 0204 	bic.w	r2, r2, #4
 80061ea:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 80061ec:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80061f6:	f1b9 0f00 	cmp.w	r9, #0
 80061fa:	d001      	beq.n	8006200 <DMA1_Stream5_IRQHandler+0x4c>
 80061fc:	4620      	mov	r0, r4
 80061fe:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006200:	696b      	ldr	r3, [r5, #20]
 8006202:	0619      	lsls	r1, r3, #24
 8006204:	d516      	bpl.n	8006234 <DMA1_Stream5_IRQHandler+0x80>
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	6832      	ldr	r2, [r6, #0]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	40da      	lsrs	r2, r3
 8006210:	07d2      	lsls	r2, r2, #31
 8006212:	d50f      	bpl.n	8006234 <DMA1_Stream5_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006214:	696a      	ldr	r2, [r5, #20]
 8006216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800621a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800621c:	2201      	movs	r2, #1
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800622c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800622e:	b10b      	cbz	r3, 8006234 <DMA1_Stream5_IRQHandler+0x80>
 8006230:	4620      	mov	r0, r4
 8006232:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	079b      	lsls	r3, r3, #30
 8006238:	d50c      	bpl.n	8006254 <DMA1_Stream5_IRQHandler+0xa0>
 800623a:	68a3      	ldr	r3, [r4, #8]
 800623c:	f003 021f 	and.w	r2, r3, #31
 8006240:	2304      	movs	r3, #4
 8006242:	4093      	lsls	r3, r2
 8006244:	6832      	ldr	r2, [r6, #0]
 8006246:	421a      	tst	r2, r3
 8006248:	d004      	beq.n	8006254 <DMA1_Stream5_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 800624a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800624c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624e:	b10b      	cbz	r3, 8006254 <DMA1_Stream5_IRQHandler+0xa0>
 8006250:	4620      	mov	r0, r4
 8006252:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	0718      	lsls	r0, r3, #28
 8006258:	d513      	bpl.n	8006282 <DMA1_Stream5_IRQHandler+0xce>
 800625a:	68a3      	ldr	r3, [r4, #8]
 800625c:	f003 021f 	and.w	r2, r3, #31
 8006260:	2310      	movs	r3, #16
 8006262:	4093      	lsls	r3, r2
 8006264:	6832      	ldr	r2, [r6, #0]
 8006266:	421a      	tst	r2, r3
 8006268:	d00b      	beq.n	8006282 <DMA1_Stream5_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 800626a:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	05d9      	lsls	r1, r3, #23
 8006270:	d403      	bmi.n	800627a <DMA1_Stream5_IRQHandler+0xc6>
 8006272:	682b      	ldr	r3, [r5, #0]
 8006274:	f023 0308 	bic.w	r3, r3, #8
 8006278:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 800627a:	69e3      	ldr	r3, [r4, #28]
 800627c:	b10b      	cbz	r3, 8006282 <DMA1_Stream5_IRQHandler+0xce>
 800627e:	4620      	mov	r0, r4
 8006280:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006282:	682b      	ldr	r3, [r5, #0]
 8006284:	06da      	lsls	r2, r3, #27
 8006286:	d59a      	bpl.n	80061be <DMA1_Stream5_IRQHandler+0xa>
 8006288:	68a3      	ldr	r3, [r4, #8]
 800628a:	6831      	ldr	r1, [r6, #0]
 800628c:	f003 021f 	and.w	r2, r3, #31
 8006290:	2320      	movs	r3, #32
 8006292:	4093      	lsls	r3, r2
 8006294:	4219      	tst	r1, r3
 8006296:	d092      	beq.n	80061be <DMA1_Stream5_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006298:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 800629a:	682b      	ldr	r3, [r5, #0]
 800629c:	05db      	lsls	r3, r3, #23
 800629e:	d403      	bmi.n	80062a8 <DMA1_Stream5_IRQHandler+0xf4>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	f023 0310 	bic.w	r3, r3, #16
 80062a6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80062a8:	6a23      	ldr	r3, [r4, #32]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d087      	beq.n	80061be <DMA1_Stream5_IRQHandler+0xa>
 80062ae:	4620      	mov	r0, r4
 80062b0:	463b      	mov	r3, r7
void DMA1_Stream5_IRQHandler() { if (DMACTXvectors[0x05]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x05])); }
 80062b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80062b6:	4718      	bx	r3
 80062b8:	24000450 	.word	0x24000450

080062bc <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler() { if (DMACTXvectors[0x06]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x06])); }
 80062bc:	4b40      	ldr	r3, [pc, #256]	; (80063c0 <DMA1_Stream6_IRQHandler+0x104>)
 80062be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c2:	699c      	ldr	r4, [r3, #24]
 80062c4:	b90c      	cbnz	r4, 80062ca <DMA1_Stream6_IRQHandler+0xe>
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80062ca:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80062cc:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80062d0:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80062d2:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80062d4:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 80062d6:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80062da:	d515      	bpl.n	8006308 <DMA1_Stream6_IRQHandler+0x4c>
 80062dc:	68a3      	ldr	r3, [r4, #8]
 80062de:	f003 021f 	and.w	r2, r3, #31
 80062e2:	2308      	movs	r3, #8
 80062e4:	4093      	lsls	r3, r2
 80062e6:	6832      	ldr	r2, [r6, #0]
 80062e8:	421a      	tst	r2, r3
 80062ea:	d00d      	beq.n	8006308 <DMA1_Stream6_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 80062ec:	682a      	ldr	r2, [r5, #0]
 80062ee:	f022 0204 	bic.w	r2, r2, #4
 80062f2:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 80062f4:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 80062f6:	682b      	ldr	r3, [r5, #0]
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 80062fe:	f1b9 0f00 	cmp.w	r9, #0
 8006302:	d001      	beq.n	8006308 <DMA1_Stream6_IRQHandler+0x4c>
 8006304:	4620      	mov	r0, r4
 8006306:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006308:	696b      	ldr	r3, [r5, #20]
 800630a:	0619      	lsls	r1, r3, #24
 800630c:	d516      	bpl.n	800633c <DMA1_Stream6_IRQHandler+0x80>
 800630e:	68a3      	ldr	r3, [r4, #8]
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	40da      	lsrs	r2, r3
 8006318:	07d2      	lsls	r2, r2, #31
 800631a:	d50f      	bpl.n	800633c <DMA1_Stream6_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800631c:	696a      	ldr	r2, [r5, #20]
 800631e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006322:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006324:	2201      	movs	r2, #1
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006336:	b10b      	cbz	r3, 800633c <DMA1_Stream6_IRQHandler+0x80>
 8006338:	4620      	mov	r0, r4
 800633a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	079b      	lsls	r3, r3, #30
 8006340:	d50c      	bpl.n	800635c <DMA1_Stream6_IRQHandler+0xa0>
 8006342:	68a3      	ldr	r3, [r4, #8]
 8006344:	f003 021f 	and.w	r2, r3, #31
 8006348:	2304      	movs	r3, #4
 800634a:	4093      	lsls	r3, r2
 800634c:	6832      	ldr	r2, [r6, #0]
 800634e:	421a      	tst	r2, r3
 8006350:	d004      	beq.n	800635c <DMA1_Stream6_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006352:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006356:	b10b      	cbz	r3, 800635c <DMA1_Stream6_IRQHandler+0xa0>
 8006358:	4620      	mov	r0, r4
 800635a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	0718      	lsls	r0, r3, #28
 8006360:	d513      	bpl.n	800638a <DMA1_Stream6_IRQHandler+0xce>
 8006362:	68a3      	ldr	r3, [r4, #8]
 8006364:	f003 021f 	and.w	r2, r3, #31
 8006368:	2310      	movs	r3, #16
 800636a:	4093      	lsls	r3, r2
 800636c:	6832      	ldr	r2, [r6, #0]
 800636e:	421a      	tst	r2, r3
 8006370:	d00b      	beq.n	800638a <DMA1_Stream6_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006372:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	05d9      	lsls	r1, r3, #23
 8006378:	d403      	bmi.n	8006382 <DMA1_Stream6_IRQHandler+0xc6>
 800637a:	682b      	ldr	r3, [r5, #0]
 800637c:	f023 0308 	bic.w	r3, r3, #8
 8006380:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006382:	69e3      	ldr	r3, [r4, #28]
 8006384:	b10b      	cbz	r3, 800638a <DMA1_Stream6_IRQHandler+0xce>
 8006386:	4620      	mov	r0, r4
 8006388:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800638a:	682b      	ldr	r3, [r5, #0]
 800638c:	06da      	lsls	r2, r3, #27
 800638e:	d59a      	bpl.n	80062c6 <DMA1_Stream6_IRQHandler+0xa>
 8006390:	68a3      	ldr	r3, [r4, #8]
 8006392:	6831      	ldr	r1, [r6, #0]
 8006394:	f003 021f 	and.w	r2, r3, #31
 8006398:	2320      	movs	r3, #32
 800639a:	4093      	lsls	r3, r2
 800639c:	4219      	tst	r1, r3
 800639e:	d092      	beq.n	80062c6 <DMA1_Stream6_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80063a0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80063a2:	682b      	ldr	r3, [r5, #0]
 80063a4:	05db      	lsls	r3, r3, #23
 80063a6:	d403      	bmi.n	80063b0 <DMA1_Stream6_IRQHandler+0xf4>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	f023 0310 	bic.w	r3, r3, #16
 80063ae:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80063b0:	6a23      	ldr	r3, [r4, #32]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d087      	beq.n	80062c6 <DMA1_Stream6_IRQHandler+0xa>
 80063b6:	4620      	mov	r0, r4
 80063b8:	463b      	mov	r3, r7
void DMA1_Stream6_IRQHandler() { if (DMACTXvectors[0x06]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x06])); }
 80063ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80063be:	4718      	bx	r3
 80063c0:	24000450 	.word	0x24000450

080063c4 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler() { if (DMACTXvectors[0x07]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x07])); }
 80063c4:	4b40      	ldr	r3, [pc, #256]	; (80064c8 <DMA1_Stream7_IRQHandler+0x104>)
 80063c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ca:	69dc      	ldr	r4, [r3, #28]
 80063cc:	b90c      	cbnz	r4, 80063d2 <DMA1_Stream7_IRQHandler+0xe>
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80063d2:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80063d4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80063d8:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80063da:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80063dc:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 80063de:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80063e2:	d515      	bpl.n	8006410 <DMA1_Stream7_IRQHandler+0x4c>
 80063e4:	68a3      	ldr	r3, [r4, #8]
 80063e6:	f003 021f 	and.w	r2, r3, #31
 80063ea:	2308      	movs	r3, #8
 80063ec:	4093      	lsls	r3, r2
 80063ee:	6832      	ldr	r2, [r6, #0]
 80063f0:	421a      	tst	r2, r3
 80063f2:	d00d      	beq.n	8006410 <DMA1_Stream7_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 80063f4:	682a      	ldr	r2, [r5, #0]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 80063fc:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006406:	f1b9 0f00 	cmp.w	r9, #0
 800640a:	d001      	beq.n	8006410 <DMA1_Stream7_IRQHandler+0x4c>
 800640c:	4620      	mov	r0, r4
 800640e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006410:	696b      	ldr	r3, [r5, #20]
 8006412:	0619      	lsls	r1, r3, #24
 8006414:	d516      	bpl.n	8006444 <DMA1_Stream7_IRQHandler+0x80>
 8006416:	68a3      	ldr	r3, [r4, #8]
 8006418:	6832      	ldr	r2, [r6, #0]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	40da      	lsrs	r2, r3
 8006420:	07d2      	lsls	r2, r2, #31
 8006422:	d50f      	bpl.n	8006444 <DMA1_Stream7_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006424:	696a      	ldr	r2, [r5, #20]
 8006426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800642a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800642c:	2201      	movs	r2, #1
 800642e:	fa02 f303 	lsl.w	r3, r2, r3
 8006432:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800643c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643e:	b10b      	cbz	r3, 8006444 <DMA1_Stream7_IRQHandler+0x80>
 8006440:	4620      	mov	r0, r4
 8006442:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	079b      	lsls	r3, r3, #30
 8006448:	d50c      	bpl.n	8006464 <DMA1_Stream7_IRQHandler+0xa0>
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	2304      	movs	r3, #4
 8006452:	4093      	lsls	r3, r2
 8006454:	6832      	ldr	r2, [r6, #0]
 8006456:	421a      	tst	r2, r3
 8006458:	d004      	beq.n	8006464 <DMA1_Stream7_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 800645a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800645c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800645e:	b10b      	cbz	r3, 8006464 <DMA1_Stream7_IRQHandler+0xa0>
 8006460:	4620      	mov	r0, r4
 8006462:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	0718      	lsls	r0, r3, #28
 8006468:	d513      	bpl.n	8006492 <DMA1_Stream7_IRQHandler+0xce>
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	f003 021f 	and.w	r2, r3, #31
 8006470:	2310      	movs	r3, #16
 8006472:	4093      	lsls	r3, r2
 8006474:	6832      	ldr	r2, [r6, #0]
 8006476:	421a      	tst	r2, r3
 8006478:	d00b      	beq.n	8006492 <DMA1_Stream7_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 800647a:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	05d9      	lsls	r1, r3, #23
 8006480:	d403      	bmi.n	800648a <DMA1_Stream7_IRQHandler+0xc6>
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	f023 0308 	bic.w	r3, r3, #8
 8006488:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 800648a:	69e3      	ldr	r3, [r4, #28]
 800648c:	b10b      	cbz	r3, 8006492 <DMA1_Stream7_IRQHandler+0xce>
 800648e:	4620      	mov	r0, r4
 8006490:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	06da      	lsls	r2, r3, #27
 8006496:	d59a      	bpl.n	80063ce <DMA1_Stream7_IRQHandler+0xa>
 8006498:	68a3      	ldr	r3, [r4, #8]
 800649a:	6831      	ldr	r1, [r6, #0]
 800649c:	f003 021f 	and.w	r2, r3, #31
 80064a0:	2320      	movs	r3, #32
 80064a2:	4093      	lsls	r3, r2
 80064a4:	4219      	tst	r1, r3
 80064a6:	d092      	beq.n	80063ce <DMA1_Stream7_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80064a8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	05db      	lsls	r3, r3, #23
 80064ae:	d403      	bmi.n	80064b8 <DMA1_Stream7_IRQHandler+0xf4>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80064b8:	6a23      	ldr	r3, [r4, #32]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d087      	beq.n	80063ce <DMA1_Stream7_IRQHandler+0xa>
 80064be:	4620      	mov	r0, r4
 80064c0:	463b      	mov	r3, r7
void DMA1_Stream7_IRQHandler() { if (DMACTXvectors[0x07]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x07])); }
 80064c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80064c6:	4718      	bx	r3
 80064c8:	24000450 	.word	0x24000450

080064cc <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler() { if (DMACTXvectors[0x08]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x08])); }
 80064cc:	4b40      	ldr	r3, [pc, #256]	; (80065d0 <DMA2_Stream0_IRQHandler+0x104>)
 80064ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d2:	6a1c      	ldr	r4, [r3, #32]
 80064d4:	b90c      	cbnz	r4, 80064da <DMA2_Stream0_IRQHandler+0xe>
 80064d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80064da:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80064dc:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80064e0:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80064e2:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80064e4:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 80064e6:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80064ea:	d515      	bpl.n	8006518 <DMA2_Stream0_IRQHandler+0x4c>
 80064ec:	68a3      	ldr	r3, [r4, #8]
 80064ee:	f003 021f 	and.w	r2, r3, #31
 80064f2:	2308      	movs	r3, #8
 80064f4:	4093      	lsls	r3, r2
 80064f6:	6832      	ldr	r2, [r6, #0]
 80064f8:	421a      	tst	r2, r3
 80064fa:	d00d      	beq.n	8006518 <DMA2_Stream0_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 80064fc:	682a      	ldr	r2, [r5, #0]
 80064fe:	f022 0204 	bic.w	r2, r2, #4
 8006502:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006504:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800650e:	f1b9 0f00 	cmp.w	r9, #0
 8006512:	d001      	beq.n	8006518 <DMA2_Stream0_IRQHandler+0x4c>
 8006514:	4620      	mov	r0, r4
 8006516:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006518:	696b      	ldr	r3, [r5, #20]
 800651a:	0619      	lsls	r1, r3, #24
 800651c:	d516      	bpl.n	800654c <DMA2_Stream0_IRQHandler+0x80>
 800651e:	68a3      	ldr	r3, [r4, #8]
 8006520:	6832      	ldr	r2, [r6, #0]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	40da      	lsrs	r2, r3
 8006528:	07d2      	lsls	r2, r2, #31
 800652a:	d50f      	bpl.n	800654c <DMA2_Stream0_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800652c:	696a      	ldr	r2, [r5, #20]
 800652e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006532:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006534:	2201      	movs	r2, #1
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006546:	b10b      	cbz	r3, 800654c <DMA2_Stream0_IRQHandler+0x80>
 8006548:	4620      	mov	r0, r4
 800654a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	079b      	lsls	r3, r3, #30
 8006550:	d50c      	bpl.n	800656c <DMA2_Stream0_IRQHandler+0xa0>
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	f003 021f 	and.w	r2, r3, #31
 8006558:	2304      	movs	r3, #4
 800655a:	4093      	lsls	r3, r2
 800655c:	6832      	ldr	r2, [r6, #0]
 800655e:	421a      	tst	r2, r3
 8006560:	d004      	beq.n	800656c <DMA2_Stream0_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006562:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006566:	b10b      	cbz	r3, 800656c <DMA2_Stream0_IRQHandler+0xa0>
 8006568:	4620      	mov	r0, r4
 800656a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	0718      	lsls	r0, r3, #28
 8006570:	d513      	bpl.n	800659a <DMA2_Stream0_IRQHandler+0xce>
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	f003 021f 	and.w	r2, r3, #31
 8006578:	2310      	movs	r3, #16
 800657a:	4093      	lsls	r3, r2
 800657c:	6832      	ldr	r2, [r6, #0]
 800657e:	421a      	tst	r2, r3
 8006580:	d00b      	beq.n	800659a <DMA2_Stream0_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006582:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	05d9      	lsls	r1, r3, #23
 8006588:	d403      	bmi.n	8006592 <DMA2_Stream0_IRQHandler+0xc6>
 800658a:	682b      	ldr	r3, [r5, #0]
 800658c:	f023 0308 	bic.w	r3, r3, #8
 8006590:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006592:	69e3      	ldr	r3, [r4, #28]
 8006594:	b10b      	cbz	r3, 800659a <DMA2_Stream0_IRQHandler+0xce>
 8006596:	4620      	mov	r0, r4
 8006598:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	06da      	lsls	r2, r3, #27
 800659e:	d59a      	bpl.n	80064d6 <DMA2_Stream0_IRQHandler+0xa>
 80065a0:	68a3      	ldr	r3, [r4, #8]
 80065a2:	6831      	ldr	r1, [r6, #0]
 80065a4:	f003 021f 	and.w	r2, r3, #31
 80065a8:	2320      	movs	r3, #32
 80065aa:	4093      	lsls	r3, r2
 80065ac:	4219      	tst	r1, r3
 80065ae:	d092      	beq.n	80064d6 <DMA2_Stream0_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80065b0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80065b2:	682b      	ldr	r3, [r5, #0]
 80065b4:	05db      	lsls	r3, r3, #23
 80065b6:	d403      	bmi.n	80065c0 <DMA2_Stream0_IRQHandler+0xf4>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80065c0:	6a23      	ldr	r3, [r4, #32]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d087      	beq.n	80064d6 <DMA2_Stream0_IRQHandler+0xa>
 80065c6:	4620      	mov	r0, r4
 80065c8:	463b      	mov	r3, r7
void DMA2_Stream0_IRQHandler() { if (DMACTXvectors[0x08]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x08])); }
 80065ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80065ce:	4718      	bx	r3
 80065d0:	24000450 	.word	0x24000450

080065d4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler() { if (DMACTXvectors[0x09]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x09])); }
 80065d4:	4b40      	ldr	r3, [pc, #256]	; (80066d8 <DMA2_Stream1_IRQHandler+0x104>)
 80065d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80065dc:	b90c      	cbnz	r4, 80065e2 <DMA2_Stream1_IRQHandler+0xe>
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80065e2:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80065e4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80065e8:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80065ea:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80065ec:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 80065ee:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80065f2:	d515      	bpl.n	8006620 <DMA2_Stream1_IRQHandler+0x4c>
 80065f4:	68a3      	ldr	r3, [r4, #8]
 80065f6:	f003 021f 	and.w	r2, r3, #31
 80065fa:	2308      	movs	r3, #8
 80065fc:	4093      	lsls	r3, r2
 80065fe:	6832      	ldr	r2, [r6, #0]
 8006600:	421a      	tst	r2, r3
 8006602:	d00d      	beq.n	8006620 <DMA2_Stream1_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006604:	682a      	ldr	r2, [r5, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 800660c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800660e:	682b      	ldr	r3, [r5, #0]
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006616:	f1b9 0f00 	cmp.w	r9, #0
 800661a:	d001      	beq.n	8006620 <DMA2_Stream1_IRQHandler+0x4c>
 800661c:	4620      	mov	r0, r4
 800661e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006620:	696b      	ldr	r3, [r5, #20]
 8006622:	0619      	lsls	r1, r3, #24
 8006624:	d516      	bpl.n	8006654 <DMA2_Stream1_IRQHandler+0x80>
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	6832      	ldr	r2, [r6, #0]
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	40da      	lsrs	r2, r3
 8006630:	07d2      	lsls	r2, r2, #31
 8006632:	d50f      	bpl.n	8006654 <DMA2_Stream1_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006634:	696a      	ldr	r2, [r5, #20]
 8006636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800663c:	2201      	movs	r2, #1
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800664c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800664e:	b10b      	cbz	r3, 8006654 <DMA2_Stream1_IRQHandler+0x80>
 8006650:	4620      	mov	r0, r4
 8006652:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	079b      	lsls	r3, r3, #30
 8006658:	d50c      	bpl.n	8006674 <DMA2_Stream1_IRQHandler+0xa0>
 800665a:	68a3      	ldr	r3, [r4, #8]
 800665c:	f003 021f 	and.w	r2, r3, #31
 8006660:	2304      	movs	r3, #4
 8006662:	4093      	lsls	r3, r2
 8006664:	6832      	ldr	r2, [r6, #0]
 8006666:	421a      	tst	r2, r3
 8006668:	d004      	beq.n	8006674 <DMA2_Stream1_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 800666a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800666c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800666e:	b10b      	cbz	r3, 8006674 <DMA2_Stream1_IRQHandler+0xa0>
 8006670:	4620      	mov	r0, r4
 8006672:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	0718      	lsls	r0, r3, #28
 8006678:	d513      	bpl.n	80066a2 <DMA2_Stream1_IRQHandler+0xce>
 800667a:	68a3      	ldr	r3, [r4, #8]
 800667c:	f003 021f 	and.w	r2, r3, #31
 8006680:	2310      	movs	r3, #16
 8006682:	4093      	lsls	r3, r2
 8006684:	6832      	ldr	r2, [r6, #0]
 8006686:	421a      	tst	r2, r3
 8006688:	d00b      	beq.n	80066a2 <DMA2_Stream1_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 800668a:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	05d9      	lsls	r1, r3, #23
 8006690:	d403      	bmi.n	800669a <DMA2_Stream1_IRQHandler+0xc6>
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	f023 0308 	bic.w	r3, r3, #8
 8006698:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 800669a:	69e3      	ldr	r3, [r4, #28]
 800669c:	b10b      	cbz	r3, 80066a2 <DMA2_Stream1_IRQHandler+0xce>
 800669e:	4620      	mov	r0, r4
 80066a0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80066a2:	682b      	ldr	r3, [r5, #0]
 80066a4:	06da      	lsls	r2, r3, #27
 80066a6:	d59a      	bpl.n	80065de <DMA2_Stream1_IRQHandler+0xa>
 80066a8:	68a3      	ldr	r3, [r4, #8]
 80066aa:	6831      	ldr	r1, [r6, #0]
 80066ac:	f003 021f 	and.w	r2, r3, #31
 80066b0:	2320      	movs	r3, #32
 80066b2:	4093      	lsls	r3, r2
 80066b4:	4219      	tst	r1, r3
 80066b6:	d092      	beq.n	80065de <DMA2_Stream1_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80066b8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80066ba:	682b      	ldr	r3, [r5, #0]
 80066bc:	05db      	lsls	r3, r3, #23
 80066be:	d403      	bmi.n	80066c8 <DMA2_Stream1_IRQHandler+0xf4>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	f023 0310 	bic.w	r3, r3, #16
 80066c6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80066c8:	6a23      	ldr	r3, [r4, #32]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d087      	beq.n	80065de <DMA2_Stream1_IRQHandler+0xa>
 80066ce:	4620      	mov	r0, r4
 80066d0:	463b      	mov	r3, r7
void DMA2_Stream1_IRQHandler() { if (DMACTXvectors[0x09]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x09])); }
 80066d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80066d6:	4718      	bx	r3
 80066d8:	24000450 	.word	0x24000450

080066dc <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler() { if (DMACTXvectors[0x0A]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0A])); }
 80066dc:	4b40      	ldr	r3, [pc, #256]	; (80067e0 <DMA2_Stream2_IRQHandler+0x104>)
 80066de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80066e4:	b90c      	cbnz	r4, 80066ea <DMA2_Stream2_IRQHandler+0xe>
 80066e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80066ea:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80066ec:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80066f0:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80066f2:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80066f4:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 80066f6:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80066fa:	d515      	bpl.n	8006728 <DMA2_Stream2_IRQHandler+0x4c>
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	f003 021f 	and.w	r2, r3, #31
 8006702:	2308      	movs	r3, #8
 8006704:	4093      	lsls	r3, r2
 8006706:	6832      	ldr	r2, [r6, #0]
 8006708:	421a      	tst	r2, r3
 800670a:	d00d      	beq.n	8006728 <DMA2_Stream2_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 800670c:	682a      	ldr	r2, [r5, #0]
 800670e:	f022 0204 	bic.w	r2, r2, #4
 8006712:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006714:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800671e:	f1b9 0f00 	cmp.w	r9, #0
 8006722:	d001      	beq.n	8006728 <DMA2_Stream2_IRQHandler+0x4c>
 8006724:	4620      	mov	r0, r4
 8006726:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006728:	696b      	ldr	r3, [r5, #20]
 800672a:	0619      	lsls	r1, r3, #24
 800672c:	d516      	bpl.n	800675c <DMA2_Stream2_IRQHandler+0x80>
 800672e:	68a3      	ldr	r3, [r4, #8]
 8006730:	6832      	ldr	r2, [r6, #0]
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	40da      	lsrs	r2, r3
 8006738:	07d2      	lsls	r2, r2, #31
 800673a:	d50f      	bpl.n	800675c <DMA2_Stream2_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800673c:	696a      	ldr	r2, [r5, #20]
 800673e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006742:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006744:	2201      	movs	r2, #1
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006756:	b10b      	cbz	r3, 800675c <DMA2_Stream2_IRQHandler+0x80>
 8006758:	4620      	mov	r0, r4
 800675a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	079b      	lsls	r3, r3, #30
 8006760:	d50c      	bpl.n	800677c <DMA2_Stream2_IRQHandler+0xa0>
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	f003 021f 	and.w	r2, r3, #31
 8006768:	2304      	movs	r3, #4
 800676a:	4093      	lsls	r3, r2
 800676c:	6832      	ldr	r2, [r6, #0]
 800676e:	421a      	tst	r2, r3
 8006770:	d004      	beq.n	800677c <DMA2_Stream2_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006772:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006776:	b10b      	cbz	r3, 800677c <DMA2_Stream2_IRQHandler+0xa0>
 8006778:	4620      	mov	r0, r4
 800677a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	0718      	lsls	r0, r3, #28
 8006780:	d513      	bpl.n	80067aa <DMA2_Stream2_IRQHandler+0xce>
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	f003 021f 	and.w	r2, r3, #31
 8006788:	2310      	movs	r3, #16
 800678a:	4093      	lsls	r3, r2
 800678c:	6832      	ldr	r2, [r6, #0]
 800678e:	421a      	tst	r2, r3
 8006790:	d00b      	beq.n	80067aa <DMA2_Stream2_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006792:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	05d9      	lsls	r1, r3, #23
 8006798:	d403      	bmi.n	80067a2 <DMA2_Stream2_IRQHandler+0xc6>
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	f023 0308 	bic.w	r3, r3, #8
 80067a0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80067a2:	69e3      	ldr	r3, [r4, #28]
 80067a4:	b10b      	cbz	r3, 80067aa <DMA2_Stream2_IRQHandler+0xce>
 80067a6:	4620      	mov	r0, r4
 80067a8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	06da      	lsls	r2, r3, #27
 80067ae:	d59a      	bpl.n	80066e6 <DMA2_Stream2_IRQHandler+0xa>
 80067b0:	68a3      	ldr	r3, [r4, #8]
 80067b2:	6831      	ldr	r1, [r6, #0]
 80067b4:	f003 021f 	and.w	r2, r3, #31
 80067b8:	2320      	movs	r3, #32
 80067ba:	4093      	lsls	r3, r2
 80067bc:	4219      	tst	r1, r3
 80067be:	d092      	beq.n	80066e6 <DMA2_Stream2_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80067c0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80067c2:	682b      	ldr	r3, [r5, #0]
 80067c4:	05db      	lsls	r3, r3, #23
 80067c6:	d403      	bmi.n	80067d0 <DMA2_Stream2_IRQHandler+0xf4>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	f023 0310 	bic.w	r3, r3, #16
 80067ce:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80067d0:	6a23      	ldr	r3, [r4, #32]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d087      	beq.n	80066e6 <DMA2_Stream2_IRQHandler+0xa>
 80067d6:	4620      	mov	r0, r4
 80067d8:	463b      	mov	r3, r7
void DMA2_Stream2_IRQHandler() { if (DMACTXvectors[0x0A]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0A])); }
 80067da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80067de:	4718      	bx	r3
 80067e0:	24000450 	.word	0x24000450

080067e4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler() { if (DMACTXvectors[0x0B]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0B])); }
 80067e4:	4b40      	ldr	r3, [pc, #256]	; (80068e8 <DMA2_Stream3_IRQHandler+0x104>)
 80067e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80067ec:	b90c      	cbnz	r4, 80067f2 <DMA2_Stream3_IRQHandler+0xe>
 80067ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80067f2:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80067f4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80067f8:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 80067fa:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80067fc:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 80067fe:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006802:	d515      	bpl.n	8006830 <DMA2_Stream3_IRQHandler+0x4c>
 8006804:	68a3      	ldr	r3, [r4, #8]
 8006806:	f003 021f 	and.w	r2, r3, #31
 800680a:	2308      	movs	r3, #8
 800680c:	4093      	lsls	r3, r2
 800680e:	6832      	ldr	r2, [r6, #0]
 8006810:	421a      	tst	r2, r3
 8006812:	d00d      	beq.n	8006830 <DMA2_Stream3_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006814:	682a      	ldr	r2, [r5, #0]
 8006816:	f022 0204 	bic.w	r2, r2, #4
 800681a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 800681c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	f023 0301 	bic.w	r3, r3, #1
 8006824:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006826:	f1b9 0f00 	cmp.w	r9, #0
 800682a:	d001      	beq.n	8006830 <DMA2_Stream3_IRQHandler+0x4c>
 800682c:	4620      	mov	r0, r4
 800682e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006830:	696b      	ldr	r3, [r5, #20]
 8006832:	0619      	lsls	r1, r3, #24
 8006834:	d516      	bpl.n	8006864 <DMA2_Stream3_IRQHandler+0x80>
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	6832      	ldr	r2, [r6, #0]
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	40da      	lsrs	r2, r3
 8006840:	07d2      	lsls	r2, r2, #31
 8006842:	d50f      	bpl.n	8006864 <DMA2_Stream3_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006844:	696a      	ldr	r2, [r5, #20]
 8006846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800684a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 800684c:	2201      	movs	r2, #1
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800685c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800685e:	b10b      	cbz	r3, 8006864 <DMA2_Stream3_IRQHandler+0x80>
 8006860:	4620      	mov	r0, r4
 8006862:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	079b      	lsls	r3, r3, #30
 8006868:	d50c      	bpl.n	8006884 <DMA2_Stream3_IRQHandler+0xa0>
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	f003 021f 	and.w	r2, r3, #31
 8006870:	2304      	movs	r3, #4
 8006872:	4093      	lsls	r3, r2
 8006874:	6832      	ldr	r2, [r6, #0]
 8006876:	421a      	tst	r2, r3
 8006878:	d004      	beq.n	8006884 <DMA2_Stream3_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 800687a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800687c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800687e:	b10b      	cbz	r3, 8006884 <DMA2_Stream3_IRQHandler+0xa0>
 8006880:	4620      	mov	r0, r4
 8006882:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	0718      	lsls	r0, r3, #28
 8006888:	d513      	bpl.n	80068b2 <DMA2_Stream3_IRQHandler+0xce>
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	f003 021f 	and.w	r2, r3, #31
 8006890:	2310      	movs	r3, #16
 8006892:	4093      	lsls	r3, r2
 8006894:	6832      	ldr	r2, [r6, #0]
 8006896:	421a      	tst	r2, r3
 8006898:	d00b      	beq.n	80068b2 <DMA2_Stream3_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 800689a:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	05d9      	lsls	r1, r3, #23
 80068a0:	d403      	bmi.n	80068aa <DMA2_Stream3_IRQHandler+0xc6>
 80068a2:	682b      	ldr	r3, [r5, #0]
 80068a4:	f023 0308 	bic.w	r3, r3, #8
 80068a8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80068aa:	69e3      	ldr	r3, [r4, #28]
 80068ac:	b10b      	cbz	r3, 80068b2 <DMA2_Stream3_IRQHandler+0xce>
 80068ae:	4620      	mov	r0, r4
 80068b0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80068b2:	682b      	ldr	r3, [r5, #0]
 80068b4:	06da      	lsls	r2, r3, #27
 80068b6:	d59a      	bpl.n	80067ee <DMA2_Stream3_IRQHandler+0xa>
 80068b8:	68a3      	ldr	r3, [r4, #8]
 80068ba:	6831      	ldr	r1, [r6, #0]
 80068bc:	f003 021f 	and.w	r2, r3, #31
 80068c0:	2320      	movs	r3, #32
 80068c2:	4093      	lsls	r3, r2
 80068c4:	4219      	tst	r1, r3
 80068c6:	d092      	beq.n	80067ee <DMA2_Stream3_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80068c8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	05db      	lsls	r3, r3, #23
 80068ce:	d403      	bmi.n	80068d8 <DMA2_Stream3_IRQHandler+0xf4>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	f023 0310 	bic.w	r3, r3, #16
 80068d6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80068d8:	6a23      	ldr	r3, [r4, #32]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d087      	beq.n	80067ee <DMA2_Stream3_IRQHandler+0xa>
 80068de:	4620      	mov	r0, r4
 80068e0:	463b      	mov	r3, r7
void DMA2_Stream3_IRQHandler() { if (DMACTXvectors[0x0B]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0B])); }
 80068e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80068e6:	4718      	bx	r3
 80068e8:	24000450 	.word	0x24000450

080068ec <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler() { if (DMACTXvectors[0x0C]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0C])); }
 80068ec:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <DMA2_Stream4_IRQHandler+0x104>)
 80068ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80068f4:	b90c      	cbnz	r4, 80068fa <DMA2_Stream4_IRQHandler+0xe>
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 80068fa:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 80068fc:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006900:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006902:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006904:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006906:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800690a:	d515      	bpl.n	8006938 <DMA2_Stream4_IRQHandler+0x4c>
 800690c:	68a3      	ldr	r3, [r4, #8]
 800690e:	f003 021f 	and.w	r2, r3, #31
 8006912:	2308      	movs	r3, #8
 8006914:	4093      	lsls	r3, r2
 8006916:	6832      	ldr	r2, [r6, #0]
 8006918:	421a      	tst	r2, r3
 800691a:	d00d      	beq.n	8006938 <DMA2_Stream4_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 800691c:	682a      	ldr	r2, [r5, #0]
 800691e:	f022 0204 	bic.w	r2, r2, #4
 8006922:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006924:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006926:	682b      	ldr	r3, [r5, #0]
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800692e:	f1b9 0f00 	cmp.w	r9, #0
 8006932:	d001      	beq.n	8006938 <DMA2_Stream4_IRQHandler+0x4c>
 8006934:	4620      	mov	r0, r4
 8006936:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006938:	696b      	ldr	r3, [r5, #20]
 800693a:	0619      	lsls	r1, r3, #24
 800693c:	d516      	bpl.n	800696c <DMA2_Stream4_IRQHandler+0x80>
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	6832      	ldr	r2, [r6, #0]
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	40da      	lsrs	r2, r3
 8006948:	07d2      	lsls	r2, r2, #31
 800694a:	d50f      	bpl.n	800696c <DMA2_Stream4_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 800694c:	696a      	ldr	r2, [r5, #20]
 800694e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006952:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006954:	2201      	movs	r2, #1
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006966:	b10b      	cbz	r3, 800696c <DMA2_Stream4_IRQHandler+0x80>
 8006968:	4620      	mov	r0, r4
 800696a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	079b      	lsls	r3, r3, #30
 8006970:	d50c      	bpl.n	800698c <DMA2_Stream4_IRQHandler+0xa0>
 8006972:	68a3      	ldr	r3, [r4, #8]
 8006974:	f003 021f 	and.w	r2, r3, #31
 8006978:	2304      	movs	r3, #4
 800697a:	4093      	lsls	r3, r2
 800697c:	6832      	ldr	r2, [r6, #0]
 800697e:	421a      	tst	r2, r3
 8006980:	d004      	beq.n	800698c <DMA2_Stream4_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006982:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006986:	b10b      	cbz	r3, 800698c <DMA2_Stream4_IRQHandler+0xa0>
 8006988:	4620      	mov	r0, r4
 800698a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	0718      	lsls	r0, r3, #28
 8006990:	d513      	bpl.n	80069ba <DMA2_Stream4_IRQHandler+0xce>
 8006992:	68a3      	ldr	r3, [r4, #8]
 8006994:	f003 021f 	and.w	r2, r3, #31
 8006998:	2310      	movs	r3, #16
 800699a:	4093      	lsls	r3, r2
 800699c:	6832      	ldr	r2, [r6, #0]
 800699e:	421a      	tst	r2, r3
 80069a0:	d00b      	beq.n	80069ba <DMA2_Stream4_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 80069a2:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	05d9      	lsls	r1, r3, #23
 80069a8:	d403      	bmi.n	80069b2 <DMA2_Stream4_IRQHandler+0xc6>
 80069aa:	682b      	ldr	r3, [r5, #0]
 80069ac:	f023 0308 	bic.w	r3, r3, #8
 80069b0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 80069b2:	69e3      	ldr	r3, [r4, #28]
 80069b4:	b10b      	cbz	r3, 80069ba <DMA2_Stream4_IRQHandler+0xce>
 80069b6:	4620      	mov	r0, r4
 80069b8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 80069ba:	682b      	ldr	r3, [r5, #0]
 80069bc:	06da      	lsls	r2, r3, #27
 80069be:	d59a      	bpl.n	80068f6 <DMA2_Stream4_IRQHandler+0xa>
 80069c0:	68a3      	ldr	r3, [r4, #8]
 80069c2:	6831      	ldr	r1, [r6, #0]
 80069c4:	f003 021f 	and.w	r2, r3, #31
 80069c8:	2320      	movs	r3, #32
 80069ca:	4093      	lsls	r3, r2
 80069cc:	4219      	tst	r1, r3
 80069ce:	d092      	beq.n	80068f6 <DMA2_Stream4_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 80069d0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 80069d2:	682b      	ldr	r3, [r5, #0]
 80069d4:	05db      	lsls	r3, r3, #23
 80069d6:	d403      	bmi.n	80069e0 <DMA2_Stream4_IRQHandler+0xf4>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80069e0:	6a23      	ldr	r3, [r4, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d087      	beq.n	80068f6 <DMA2_Stream4_IRQHandler+0xa>
 80069e6:	4620      	mov	r0, r4
 80069e8:	463b      	mov	r3, r7
void DMA2_Stream4_IRQHandler() { if (DMACTXvectors[0x0C]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0C])); }
 80069ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 80069ee:	4718      	bx	r3
 80069f0:	24000450 	.word	0x24000450

080069f4 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler() { if (DMACTXvectors[0x0D]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0D])); }
 80069f4:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <DMA2_Stream5_IRQHandler+0x104>)
 80069f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80069fc:	b90c      	cbnz	r4, 8006a02 <DMA2_Stream5_IRQHandler+0xe>
 80069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006a02:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006a04:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a08:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006a0a:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a0c:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006a0e:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a12:	d515      	bpl.n	8006a40 <DMA2_Stream5_IRQHandler+0x4c>
 8006a14:	68a3      	ldr	r3, [r4, #8]
 8006a16:	f003 021f 	and.w	r2, r3, #31
 8006a1a:	2308      	movs	r3, #8
 8006a1c:	4093      	lsls	r3, r2
 8006a1e:	6832      	ldr	r2, [r6, #0]
 8006a20:	421a      	tst	r2, r3
 8006a22:	d00d      	beq.n	8006a40 <DMA2_Stream5_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006a24:	682a      	ldr	r2, [r5, #0]
 8006a26:	f022 0204 	bic.w	r2, r2, #4
 8006a2a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006a2c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	f023 0301 	bic.w	r3, r3, #1
 8006a34:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006a36:	f1b9 0f00 	cmp.w	r9, #0
 8006a3a:	d001      	beq.n	8006a40 <DMA2_Stream5_IRQHandler+0x4c>
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a40:	696b      	ldr	r3, [r5, #20]
 8006a42:	0619      	lsls	r1, r3, #24
 8006a44:	d516      	bpl.n	8006a74 <DMA2_Stream5_IRQHandler+0x80>
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	6832      	ldr	r2, [r6, #0]
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	40da      	lsrs	r2, r3
 8006a50:	07d2      	lsls	r2, r2, #31
 8006a52:	d50f      	bpl.n	8006a74 <DMA2_Stream5_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006a54:	696a      	ldr	r2, [r5, #20]
 8006a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a5a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a6e:	b10b      	cbz	r3, 8006a74 <DMA2_Stream5_IRQHandler+0x80>
 8006a70:	4620      	mov	r0, r4
 8006a72:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	079b      	lsls	r3, r3, #30
 8006a78:	d50c      	bpl.n	8006a94 <DMA2_Stream5_IRQHandler+0xa0>
 8006a7a:	68a3      	ldr	r3, [r4, #8]
 8006a7c:	f003 021f 	and.w	r2, r3, #31
 8006a80:	2304      	movs	r3, #4
 8006a82:	4093      	lsls	r3, r2
 8006a84:	6832      	ldr	r2, [r6, #0]
 8006a86:	421a      	tst	r2, r3
 8006a88:	d004      	beq.n	8006a94 <DMA2_Stream5_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006a8a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a8e:	b10b      	cbz	r3, 8006a94 <DMA2_Stream5_IRQHandler+0xa0>
 8006a90:	4620      	mov	r0, r4
 8006a92:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	0718      	lsls	r0, r3, #28
 8006a98:	d513      	bpl.n	8006ac2 <DMA2_Stream5_IRQHandler+0xce>
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	f003 021f 	and.w	r2, r3, #31
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	4093      	lsls	r3, r2
 8006aa4:	6832      	ldr	r2, [r6, #0]
 8006aa6:	421a      	tst	r2, r3
 8006aa8:	d00b      	beq.n	8006ac2 <DMA2_Stream5_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006aaa:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	05d9      	lsls	r1, r3, #23
 8006ab0:	d403      	bmi.n	8006aba <DMA2_Stream5_IRQHandler+0xc6>
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	f023 0308 	bic.w	r3, r3, #8
 8006ab8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006aba:	69e3      	ldr	r3, [r4, #28]
 8006abc:	b10b      	cbz	r3, 8006ac2 <DMA2_Stream5_IRQHandler+0xce>
 8006abe:	4620      	mov	r0, r4
 8006ac0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006ac2:	682b      	ldr	r3, [r5, #0]
 8006ac4:	06da      	lsls	r2, r3, #27
 8006ac6:	d59a      	bpl.n	80069fe <DMA2_Stream5_IRQHandler+0xa>
 8006ac8:	68a3      	ldr	r3, [r4, #8]
 8006aca:	6831      	ldr	r1, [r6, #0]
 8006acc:	f003 021f 	and.w	r2, r3, #31
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	4093      	lsls	r3, r2
 8006ad4:	4219      	tst	r1, r3
 8006ad6:	d092      	beq.n	80069fe <DMA2_Stream5_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006ad8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	05db      	lsls	r3, r3, #23
 8006ade:	d403      	bmi.n	8006ae8 <DMA2_Stream5_IRQHandler+0xf4>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	f023 0310 	bic.w	r3, r3, #16
 8006ae6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006ae8:	6a23      	ldr	r3, [r4, #32]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d087      	beq.n	80069fe <DMA2_Stream5_IRQHandler+0xa>
 8006aee:	4620      	mov	r0, r4
 8006af0:	463b      	mov	r3, r7
void DMA2_Stream5_IRQHandler() { if (DMACTXvectors[0x0D]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0D])); }
 8006af2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006af6:	4718      	bx	r3
 8006af8:	24000450 	.word	0x24000450

08006afc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler() { if (DMACTXvectors[0x0E]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0E])); }
 8006afc:	4b40      	ldr	r3, [pc, #256]	; (8006c00 <DMA2_Stream6_IRQHandler+0x104>)
 8006afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b02:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006b04:	b90c      	cbnz	r4, 8006b0a <DMA2_Stream6_IRQHandler+0xe>
 8006b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006b0a:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006b0c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b10:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006b12:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b14:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006b16:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b1a:	d515      	bpl.n	8006b48 <DMA2_Stream6_IRQHandler+0x4c>
 8006b1c:	68a3      	ldr	r3, [r4, #8]
 8006b1e:	f003 021f 	and.w	r2, r3, #31
 8006b22:	2308      	movs	r3, #8
 8006b24:	4093      	lsls	r3, r2
 8006b26:	6832      	ldr	r2, [r6, #0]
 8006b28:	421a      	tst	r2, r3
 8006b2a:	d00d      	beq.n	8006b48 <DMA2_Stream6_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006b2c:	682a      	ldr	r2, [r5, #0]
 8006b2e:	f022 0204 	bic.w	r2, r2, #4
 8006b32:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006b34:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006b36:	682b      	ldr	r3, [r5, #0]
 8006b38:	f023 0301 	bic.w	r3, r3, #1
 8006b3c:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006b3e:	f1b9 0f00 	cmp.w	r9, #0
 8006b42:	d001      	beq.n	8006b48 <DMA2_Stream6_IRQHandler+0x4c>
 8006b44:	4620      	mov	r0, r4
 8006b46:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b48:	696b      	ldr	r3, [r5, #20]
 8006b4a:	0619      	lsls	r1, r3, #24
 8006b4c:	d516      	bpl.n	8006b7c <DMA2_Stream6_IRQHandler+0x80>
 8006b4e:	68a3      	ldr	r3, [r4, #8]
 8006b50:	6832      	ldr	r2, [r6, #0]
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	40da      	lsrs	r2, r3
 8006b58:	07d2      	lsls	r2, r2, #31
 8006b5a:	d50f      	bpl.n	8006b7c <DMA2_Stream6_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006b5c:	696a      	ldr	r2, [r5, #20]
 8006b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b62:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006b64:	2201      	movs	r2, #1
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	f023 0301 	bic.w	r3, r3, #1
 8006b72:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b76:	b10b      	cbz	r3, 8006b7c <DMA2_Stream6_IRQHandler+0x80>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	079b      	lsls	r3, r3, #30
 8006b80:	d50c      	bpl.n	8006b9c <DMA2_Stream6_IRQHandler+0xa0>
 8006b82:	68a3      	ldr	r3, [r4, #8]
 8006b84:	f003 021f 	and.w	r2, r3, #31
 8006b88:	2304      	movs	r3, #4
 8006b8a:	4093      	lsls	r3, r2
 8006b8c:	6832      	ldr	r2, [r6, #0]
 8006b8e:	421a      	tst	r2, r3
 8006b90:	d004      	beq.n	8006b9c <DMA2_Stream6_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006b92:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b96:	b10b      	cbz	r3, 8006b9c <DMA2_Stream6_IRQHandler+0xa0>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	0718      	lsls	r0, r3, #28
 8006ba0:	d513      	bpl.n	8006bca <DMA2_Stream6_IRQHandler+0xce>
 8006ba2:	68a3      	ldr	r3, [r4, #8]
 8006ba4:	f003 021f 	and.w	r2, r3, #31
 8006ba8:	2310      	movs	r3, #16
 8006baa:	4093      	lsls	r3, r2
 8006bac:	6832      	ldr	r2, [r6, #0]
 8006bae:	421a      	tst	r2, r3
 8006bb0:	d00b      	beq.n	8006bca <DMA2_Stream6_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006bb2:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	05d9      	lsls	r1, r3, #23
 8006bb8:	d403      	bmi.n	8006bc2 <DMA2_Stream6_IRQHandler+0xc6>
 8006bba:	682b      	ldr	r3, [r5, #0]
 8006bbc:	f023 0308 	bic.w	r3, r3, #8
 8006bc0:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006bc2:	69e3      	ldr	r3, [r4, #28]
 8006bc4:	b10b      	cbz	r3, 8006bca <DMA2_Stream6_IRQHandler+0xce>
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	06da      	lsls	r2, r3, #27
 8006bce:	d59a      	bpl.n	8006b06 <DMA2_Stream6_IRQHandler+0xa>
 8006bd0:	68a3      	ldr	r3, [r4, #8]
 8006bd2:	6831      	ldr	r1, [r6, #0]
 8006bd4:	f003 021f 	and.w	r2, r3, #31
 8006bd8:	2320      	movs	r3, #32
 8006bda:	4093      	lsls	r3, r2
 8006bdc:	4219      	tst	r1, r3
 8006bde:	d092      	beq.n	8006b06 <DMA2_Stream6_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006be0:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	05db      	lsls	r3, r3, #23
 8006be6:	d403      	bmi.n	8006bf0 <DMA2_Stream6_IRQHandler+0xf4>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	f023 0310 	bic.w	r3, r3, #16
 8006bee:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006bf0:	6a23      	ldr	r3, [r4, #32]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d087      	beq.n	8006b06 <DMA2_Stream6_IRQHandler+0xa>
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	463b      	mov	r3, r7
void DMA2_Stream6_IRQHandler() { if (DMACTXvectors[0x0E]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0E])); }
 8006bfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006bfe:	4718      	bx	r3
 8006c00:	24000450 	.word	0x24000450

08006c04 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler() { if (DMACTXvectors[0x0F]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0F])); }
 8006c04:	4b40      	ldr	r3, [pc, #256]	; (8006d08 <DMA2_Stream7_IRQHandler+0x104>)
 8006c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8006c0c:	b90c      	cbnz	r4, 8006c12 <DMA2_Stream7_IRQHandler+0xe>
 8006c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DMA_Stream_TypeDef	*regs_dma_stream = (DMA_Stream_TypeDef *)ctx->dma_stream;
 8006c12:	6865      	ldr	r5, [r4, #4]
	pCallback_TE = (void *)ctx->callback_TE;
 8006c14:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c18:	682b      	ldr	r3, [r5, #0]
	DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)ctx->dma_baseregs;
 8006c1a:	68e6      	ldr	r6, [r4, #12]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c1c:	0758      	lsls	r0, r3, #29
	pCallback_TC = (void *)ctx->callback_TC;
 8006c1e:	e9d4 8707 	ldrd	r8, r7, [r4, #28]
	if (((regs_dma_stream->CR & DMA_IT_TE) != 0) && ((regs_dma->ISR & (DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c22:	d515      	bpl.n	8006c50 <DMA2_Stream7_IRQHandler+0x4c>
 8006c24:	68a3      	ldr	r3, [r4, #8]
 8006c26:	f003 021f 	and.w	r2, r3, #31
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	4093      	lsls	r3, r2
 8006c2e:	6832      	ldr	r2, [r6, #0]
 8006c30:	421a      	tst	r2, r3
 8006c32:	d00d      	beq.n	8006c50 <DMA2_Stream7_IRQHandler+0x4c>
        regs_dma_stream->CR  &= ~(DMA_IT_TE);
 8006c34:	682a      	ldr	r2, [r5, #0]
 8006c36:	f022 0204 	bic.w	r2, r2, #4
 8006c3a:	602a      	str	r2, [r5, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (ctx->dma_index & 0x1FU);
 8006c3c:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006c46:	f1b9 0f00 	cmp.w	r9, #0
 8006c4a:	d001      	beq.n	8006c50 <DMA2_Stream7_IRQHandler+0x4c>
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	47c8      	blx	r9
	if (((regs_dma_stream->FCR & DMA_IT_FE) != 0) && ((regs_dma->ISR & (DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c50:	696b      	ldr	r3, [r5, #20]
 8006c52:	0619      	lsls	r1, r3, #24
 8006c54:	d516      	bpl.n	8006c84 <DMA2_Stream7_IRQHandler+0x80>
 8006c56:	68a3      	ldr	r3, [r4, #8]
 8006c58:	6832      	ldr	r2, [r6, #0]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	40da      	lsrs	r2, r3
 8006c60:	07d2      	lsls	r2, r2, #31
 8006c62:	d50f      	bpl.n	8006c84 <DMA2_Stream7_IRQHandler+0x80>
        regs_dma_stream->FCR &= ~(DMA_IT_FE);
 8006c64:	696a      	ldr	r2, [r5, #20]
 8006c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c6a:	616a      	str	r2, [r5, #20]
	    regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (ctx->dma_index & 0x1FU);
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	60b3      	str	r3, [r6, #8]
	    regs_dma_stream->CR &= ~DMA_SxCR_EN;
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	602b      	str	r3, [r5, #0]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c7e:	b10b      	cbz	r3, 8006c84 <DMA2_Stream7_IRQHandler+0x80>
 8006c80:	4620      	mov	r0, r4
 8006c82:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_DME) != 0) && ((regs_dma->ISR & (DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	079b      	lsls	r3, r3, #30
 8006c88:	d50c      	bpl.n	8006ca4 <DMA2_Stream7_IRQHandler+0xa0>
 8006c8a:	68a3      	ldr	r3, [r4, #8]
 8006c8c:	f003 021f 	and.w	r2, r3, #31
 8006c90:	2304      	movs	r3, #4
 8006c92:	4093      	lsls	r3, r2
 8006c94:	6832      	ldr	r2, [r6, #0]
 8006c96:	421a      	tst	r2, r3
 8006c98:	d004      	beq.n	8006ca4 <DMA2_Stream7_IRQHandler+0xa0>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (ctx->dma_index & 0x1FU);
 8006c9a:	60b3      	str	r3, [r6, #8]
        if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8006c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c9e:	b10b      	cbz	r3, 8006ca4 <DMA2_Stream7_IRQHandler+0xa0>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	47c8      	blx	r9
	if (((regs_dma_stream->CR & DMA_IT_HT) != 0) && ((regs_dma->ISR & (DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	0718      	lsls	r0, r3, #28
 8006ca8:	d513      	bpl.n	8006cd2 <DMA2_Stream7_IRQHandler+0xce>
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	f003 021f 	and.w	r2, r3, #31
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	4093      	lsls	r3, r2
 8006cb4:	6832      	ldr	r2, [r6, #0]
 8006cb6:	421a      	tst	r2, r3
 8006cb8:	d00b      	beq.n	8006cd2 <DMA2_Stream7_IRQHandler+0xce>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (ctx->dma_index & 0x1FU);
 8006cba:	60b3      	str	r3, [r6, #8]
        if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_HT);
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	05d9      	lsls	r1, r3, #23
 8006cc0:	d403      	bmi.n	8006cca <DMA2_Stream7_IRQHandler+0xc6>
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	f023 0308 	bic.w	r3, r3, #8
 8006cc8:	602b      	str	r3, [r5, #0]
        if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8006cca:	69e3      	ldr	r3, [r4, #28]
 8006ccc:	b10b      	cbz	r3, 8006cd2 <DMA2_Stream7_IRQHandler+0xce>
 8006cce:	4620      	mov	r0, r4
 8006cd0:	47c0      	blx	r8
	if (((regs_dma_stream->CR & DMA_IT_TC) != 0) && ((regs_dma->ISR & (DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU))) != 0)) {
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	06da      	lsls	r2, r3, #27
 8006cd6:	d59a      	bpl.n	8006c0e <DMA2_Stream7_IRQHandler+0xa>
 8006cd8:	68a3      	ldr	r3, [r4, #8]
 8006cda:	6831      	ldr	r1, [r6, #0]
 8006cdc:	f003 021f 	and.w	r2, r3, #31
 8006ce0:	2320      	movs	r3, #32
 8006ce2:	4093      	lsls	r3, r2
 8006ce4:	4219      	tst	r1, r3
 8006ce6:	d092      	beq.n	8006c0e <DMA2_Stream7_IRQHandler+0xa>
		regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (ctx->dma_index & 0x1FU);
 8006ce8:	60b3      	str	r3, [r6, #8]
		if ((regs_dma_stream->CR & DMA_SxCR_CIRC) == 0U) regs_dma_stream->CR  &= ~(DMA_IT_TC);
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	05db      	lsls	r3, r3, #23
 8006cee:	d403      	bmi.n	8006cf8 <DMA2_Stream7_IRQHandler+0xf4>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	f023 0310 	bic.w	r3, r3, #16
 8006cf6:	602b      	str	r3, [r5, #0]
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006cf8:	6a23      	ldr	r3, [r4, #32]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d087      	beq.n	8006c0e <DMA2_Stream7_IRQHandler+0xa>
 8006cfe:	4620      	mov	r0, r4
 8006d00:	463b      	mov	r3, r7
void DMA2_Stream7_IRQHandler() { if (DMACTXvectors[0x0F]>0) DMA_Stream_IRQHandler((TxRxContext_TypeDef *)(DMACTXvectors[0x0F])); }
 8006d02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (ctx->callback_TC > 0) pCallback_TC(ctx);
 8006d06:	4718      	bx	r3
 8006d08:	24000450 	.word	0x24000450

08006d0c <BSP_STM32_DMA2D_FillBuff>:
 * - 0.1b	- Development version
 *******************************************************************/

#include "BSP_STM32_DMA2D.h"

uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006d0c:	4684      	mov	ip, r0

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_R2M);
 8006d0e:	6800      	ldr	r0, [r0, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, (uint32_t)offsetline);
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), ((uint32_t)height | ((uint32_t)width << DMA2D_NLR_PL_Pos)));
 8006d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_R2M);
 8006d14:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8006d18:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006d1c:	b510      	push	{r4, lr}
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_R2M);
 8006d1e:	f8cc 0000 	str.w	r0, [ip]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006d22:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, (uint32_t)offsetline);
 8006d26:	4c15      	ldr	r4, [pc, #84]	; (8006d7c <BSP_STM32_DMA2D_FillBuff+0x70>)
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006d28:	f020 0007 	bic.w	r0, r0, #7
uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006d2c:	f8bd e008 	ldrh.w	lr, [sp, #8]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006d30:	4301      	orrs	r1, r0

	// Enable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006d32:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006d34:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, (uint32_t)offsetline);
 8006d38:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
 8006d3c:	4014      	ands	r4, r2
 8006d3e:	ea44 040e 	orr.w	r4, r4, lr
 8006d42:	f8cc 4040 	str.w	r4, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), ((uint32_t)height | ((uint32_t)width << DMA2D_NLR_PL_Pos)));
 8006d46:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006d4a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
uint8_t BSP_STM32_DMA2D_FillBuff(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color) {
 8006d54:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006d58:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
	WRITE_REG(hdma2d->OCOLR, color);
 8006d5c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006d60:	f8dc 3000 	ldr.w	r3, [ip]
 8006d64:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8006d68:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 8006d6c:	f8dc 3000 	ldr.w	r3, [ip]
 8006d70:	f043 0301 	orr.w	r3, r3, #1
 8006d74:	f8cc 3000 	str.w	r3, [ip]
}
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	bf00      	nop
 8006d7c:	ffff0000 	.word	0xffff0000

08006d80 <BSP_STM32_DMA2D_FillBuffBlend>:


uint8_t BSP_STM32_DMA2D_FillBuffBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color, uint8_t alpha) {
	// Recalculating color for ARGB4444 and ARGB1555
	switch (colormode) {
 8006d80:	2903      	cmp	r1, #3
uint8_t BSP_STM32_DMA2D_FillBuffBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t offsetline, uint32_t dest_addr, uint32_t color, uint8_t alpha) {
 8006d82:	4684      	mov	ip, r0
 8006d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d86:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8006d8a:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8006d8e:	e9dd 5006 	ldrd	r5, r0, [sp, #24]
	switch (colormode) {
 8006d92:	d055      	beq.n	8006e40 <BSP_STM32_DMA2D_FillBuffBlend+0xc0>
 8006d94:	2904      	cmp	r1, #4
 8006d96:	d10b      	bne.n	8006db0 <BSP_STM32_DMA2D_FillBuffBlend+0x30>
	case DMA2D_ARGB4444:
		color = ((color & 0x0F00) << 12) | ((color & 0x00F0) << 8) | ((color & 0x000F) << 4);
 8006d98:	0307      	lsls	r7, r0, #12
 8006d9a:	ea4f 2e00 	mov.w	lr, r0, lsl #8
 8006d9e:	f407 0770 	and.w	r7, r7, #15728640	; 0xf00000
 8006da2:	0100      	lsls	r0, r0, #4
 8006da4:	f40e 4e70 	and.w	lr, lr, #61440	; 0xf000
 8006da8:	b2c0      	uxtb	r0, r0
 8006daa:	ea47 070e 	orr.w	r7, r7, lr
 8006dae:	4338      	orrs	r0, r7
	uint32_t regMask0  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA);
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
	WRITE_REG(hdma2d->BGOR, offsetline);

	WRITE_REG(hdma2d->BGMAR, dest_addr);
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	uint32_t regValue1 = colormode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos);
 8006db4:	ea41 6204 	orr.w	r2, r1, r4, lsl #24
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND_FG);
 8006db8:	f8dc 4000 	ldr.w	r4, [ip]
 8006dbc:	f424 24e0 	bic.w	r4, r4, #458752	; 0x70000
 8006dc0:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8006dc4:	f8cc 4000 	str.w	r4, [ip]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006dc8:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 8006dcc:	f024 0407 	bic.w	r4, r4, #7
 8006dd0:	430c      	orrs	r4, r1
 8006dd2:	f8cc 4034 	str.w	r4, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, offsetline);
 8006dd6:	4c21      	ldr	r4, [pc, #132]	; (8006e5c <BSP_STM32_DMA2D_FillBuffBlend+0xdc>)
 8006dd8:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 8006ddc:	403c      	ands	r4, r7
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8006dde:	4f20      	ldr	r7, [pc, #128]	; (8006e60 <BSP_STM32_DMA2D_FillBuffBlend+0xe0>)
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, offsetline);
 8006de0:	4334      	orrs	r4, r6
 8006de2:	f8cc 4040 	str.w	r4, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8006de6:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8006dea:	403c      	ands	r4, r7
 8006dec:	4322      	orrs	r2, r4
 8006dee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006df2:	f8cc 201c 	str.w	r2, [ip, #28]
	WRITE_REG(hdma2d->FGCOLR, color);
 8006df6:	f8cc 0020 	str.w	r0, [ip, #32]
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006dfa:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 8006dfc:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8006e00:	403a      	ands	r2, r7
 8006e02:	4311      	orrs	r1, r2
 8006e04:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 8006e08:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
	WRITE_REG(hdma2d->BGOR, offsetline);
 8006e0c:	f8cc 6018 	str.w	r6, [ip, #24]
	WRITE_REG(hdma2d->BGMAR, dest_addr);
 8006e10:	f8cc 5014 	str.w	r5, [ip, #20]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006e14:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006e18:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006e22:	f8cc 503c 	str.w	r5, [ip, #60]	; 0x3c
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006e26:	f8dc 3000 	ldr.w	r3, [ip]
 8006e2a:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8006e2e:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 8006e32:	f8dc 3000 	ldr.w	r3, [ip]
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	f8cc 3000 	str.w	r3, [ip]
}
 8006e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		color = ((color & 0x7C00) << 9) | ((color & 0x03E0) << 6) | ((color & 0x001F) << 3);
 8006e40:	0247      	lsls	r7, r0, #9
 8006e42:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8006e46:	f407 0778 	and.w	r7, r7, #16252928	; 0xf80000
 8006e4a:	00c0      	lsls	r0, r0, #3
 8006e4c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8006e50:	b2c0      	uxtb	r0, r0
 8006e52:	ea47 070e 	orr.w	r7, r7, lr
 8006e56:	4338      	orrs	r0, r7
		break;
 8006e58:	e7aa      	b.n	8006db0 <BSP_STM32_DMA2D_FillBuffBlend+0x30>
 8006e5a:	bf00      	nop
 8006e5c:	ffff0000 	.word	0xffff0000
 8006e60:	00fcfff0 	.word	0x00fcfff0

08006e64 <BSP_STM32_DMA2D_CopyBuf>:
	uint32_t regValue = colormode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFF << DMA2D_FGPFCCR_ALPHA_Pos);
	uint32_t regMask  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA);
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
	WRITE_REG(hdma2d->FGOR, src_offsetline);

	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M);
 8006e68:	6802      	ldr	r2, [r0, #0]
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006e6a:	4684      	mov	ip, r0
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M);
 8006e6c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006e70:	b410      	push	{r4}
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M);
 8006e72:	6002      	str	r2, [r0, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006e74:	6b40      	ldr	r0, [r0, #52]	; 0x34
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006e76:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006e7a:	f020 0007 	bic.w	r0, r0, #7
 8006e7e:	4308      	orrs	r0, r1
 8006e80:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006e84:	4818      	ldr	r0, [pc, #96]	; (8006ee8 <BSP_STM32_DMA2D_CopyBuf+0x84>)
 8006e86:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
 8006e8a:	4010      	ands	r0, r2
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006e8c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006e90:	4310      	orrs	r0, r2
 8006e92:	f8cc 0040 	str.w	r0, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006e96:	4815      	ldr	r0, [pc, #84]	; (8006eec <BSP_STM32_DMA2D_CopyBuf+0x88>)
 8006e98:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8006e9c:	4010      	ands	r0, r2
 8006e9e:	4301      	orrs	r1, r0
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006ea0:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006ea2:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 8006ea6:	f8cc 101c 	str.w	r1, [ip, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8006eaa:	f8cc 4010 	str.w	r4, [ip, #16]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006eae:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006eb2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006eb6:	4313      	orrs	r3, r2
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006eb8:	9a04      	ldr	r2, [sp, #16]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006eba:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
uint8_t BSP_STM32_DMA2D_CopyBuf(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr) {
 8006ebe:	9b02      	ldr	r3, [sp, #8]
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006ec0:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 8006ec4:	f8cc 300c 	str.w	r3, [ip, #12]
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006ec8:	f8dc 3000 	ldr.w	r3, [ip]
}
 8006ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006ed0:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8006ed4:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 8006ed8:	f8dc 3000 	ldr.w	r3, [ip]
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	f8cc 3000 	str.w	r3, [ip]
}
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	ffff0000 	.word	0xffff0000
 8006eec:	00fcfff0 	.word	0x00fcfff0

08006ef0 <BSP_STM32_DMA2D_CopyBufJPEG>:

uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006ef0:	4684      	mov	ip, r0

	// Configuring DMA2D
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_PFC);
 8006ef2:	6800      	ldr	r0, [r0, #0]
	uint32_t regValue = DMA2D_YCBCR | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFF << DMA2D_FGPFCCR_ALPHA_Pos) | (chroma << DMA2D_FGPFCCR_CSS_Pos);
	uint32_t regMask  = (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_CSS);
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
	WRITE_REG(hdma2d->FGOR, src_offsetline);

	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_PFC);
 8006ef8:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8006efc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f00:	b410      	push	{r4}
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_PFC);
 8006f02:	f8cc 0000 	str.w	r0, [ip]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006f06:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f0a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006f0e:	f020 0007 	bic.w	r0, r0, #7
 8006f12:	4301      	orrs	r1, r0
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006f14:	481a      	ldr	r0, [pc, #104]	; (8006f80 <BSP_STM32_DMA2D_CopyBufJPEG+0x90>)
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006f16:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006f1a:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006f1e:	4919      	ldr	r1, [pc, #100]	; (8006f84 <BSP_STM32_DMA2D_CopyBufJPEG+0x94>)
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006f20:	4010      	ands	r0, r2
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f22:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006f26:	4310      	orrs	r0, r2
 8006f28:	f8cc 0040 	str.w	r0, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006f2c:	f8dc 201c 	ldr.w	r2, [ip, #28]
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f30:	9805      	ldr	r0, [sp, #20]
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006f32:	4011      	ands	r1, r2
 8006f34:	4a14      	ldr	r2, [pc, #80]	; (8006f88 <BSP_STM32_DMA2D_CopyBufJPEG+0x98>)
 8006f36:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006f3a:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->FGPFCCR, regMask, regValue);
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	f8cc 201c 	str.w	r2, [ip, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8006f42:	f8cc 4010 	str.w	r4, [ip, #16]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006f46:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006f4a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006f4e:	4313      	orrs	r3, r2
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f50:	9a04      	ldr	r2, [sp, #16]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006f52:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
uint8_t BSP_STM32_DMA2D_CopyBufJPEG(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint32_t chroma) {
 8006f56:	9b02      	ldr	r3, [sp, #8]
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8006f58:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 8006f5c:	f8cc 300c 	str.w	r3, [ip, #12]
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006f60:	f8dc 3000 	ldr.w	r3, [ip]
}
 8006f64:	f85d 4b04 	ldr.w	r4, [sp], #4
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8006f68:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8006f6c:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 8006f70:	f8dc 3000 	ldr.w	r3, [ip]
 8006f74:	f043 0301 	orr.w	r3, r3, #1
 8006f78:	f8cc 3000 	str.w	r3, [ip]
}
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	ffff0000 	.word	0xffff0000
 8006f84:	00f0fff0 	.word	0x00f0fff0
 8006f88:	ff01000b 	.word	0xff01000b

08006f8c <BSP_STM32_DMA2D_CopyBufBlend>:
	uint32_t regMask0  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA);
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
	WRITE_REG(hdma2d->BGOR, dest_offsetline);

	WRITE_REG(hdma2d->BGMAR, dest_addr);
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND);
 8006f90:	6802      	ldr	r2, [r0, #0]
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006f92:	4684      	mov	ip, r0
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND);
 8006f94:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006f98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006f9c:	b530      	push	{r4, r5, lr}
	MODIFY_REG(hdma2d->CR, DMA2D_CR_MODE, DMA2D_M2M_BLEND);
 8006f9e:	6002      	str	r2, [r0, #0]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006fa0:	6b42      	ldr	r2, [r0, #52]	; 0x34
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8006fa2:	4d22      	ldr	r5, [pc, #136]	; (800702c <BSP_STM32_DMA2D_CopyBufBlend+0xa0>)
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006fa4:	f022 0207 	bic.w	r2, r2, #7
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006fa8:	f89d e01c 	ldrb.w	lr, [sp, #28]
 8006fac:	f8bd 400c 	ldrh.w	r4, [sp, #12]
	MODIFY_REG(hdma2d->OPFCCR, DMA2D_OPFCCR_CM, colormode);
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	6342      	str	r2, [r0, #52]	; 0x34
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006fb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006fb6:	481e      	ldr	r0, [pc, #120]	; (8007030 <BSP_STM32_DMA2D_CopyBufBlend+0xa4>)
 8006fb8:	4010      	ands	r0, r2
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006fba:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	MODIFY_REG(hdma2d->OOR, DMA2D_OOR_LO, dest_offsetline);
 8006fbe:	4310      	orrs	r0, r2
 8006fc0:	f8cc 0040 	str.w	r0, [ip, #64]	; 0x40
	MODIFY_REG(hdma2d->FGPFCCR, regMask1, regValue1);
 8006fc4:	f8dc 001c 	ldr.w	r0, [ip, #28]
 8006fc8:	4028      	ands	r0, r5
 8006fca:	4308      	orrs	r0, r1
 8006fcc:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
 8006fd0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8006fd4:	f8cc 001c 	str.w	r0, [ip, #28]
	WRITE_REG(hdma2d->FGOR, src_offsetline);
 8006fd8:	f8cc 4010 	str.w	r4, [ip, #16]
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 8006fdc:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 8006fe0:	4028      	ands	r0, r5
 8006fe2:	4301      	orrs	r1, r0
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
	// ENable DMA2D
	hdma2d->CR |= DMA2D_CR_START;

	return BSP_OK;
}
 8006fe4:	2000      	movs	r0, #0
	MODIFY_REG(hdma2d->BGPFCCR, regMask0, regValue0);
 8006fe6:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 8006fea:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8006fee:	9906      	ldr	r1, [sp, #24]
	WRITE_REG(hdma2d->BGOR, dest_offsetline);
 8006ff0:	f8cc 2018 	str.w	r2, [ip, #24]
	WRITE_REG(hdma2d->BGMAR, dest_addr);
 8006ff4:	f8cc 1014 	str.w	r1, [ip, #20]
	MODIFY_REG(hdma2d->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (height | (width << DMA2D_NLR_PL_Pos)));
 8006ff8:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8006ffc:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007000:	4313      	orrs	r3, r2
 8007002:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
uint8_t BSP_STM32_DMA2D_CopyBufBlend(DMA2D_TypeDef * hdma2d, uint32_t colormode, uint16_t width, uint16_t height, uint16_t src_offsetline, uint32_t src_addr, uint16_t dest_offsetline, uint32_t dest_addr, uint8_t alpha) {
 8007006:	9b04      	ldr	r3, [sp, #16]
	WRITE_REG(hdma2d->OMAR, dest_addr);
 8007008:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
	WRITE_REG(hdma2d->FGMAR, src_addr);
 800700c:	f8cc 300c 	str.w	r3, [ip, #12]
	hdma2d->CR |= DMA2D_CR_TCIE | DMA2D_CR_TEIE | DMA2D_CR_CEIE;
 8007010:	f8dc 3000 	ldr.w	r3, [ip]
 8007014:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8007018:	f8cc 3000 	str.w	r3, [ip]
	hdma2d->CR |= DMA2D_CR_START;
 800701c:	f8dc 3000 	ldr.w	r3, [ip]
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	f8cc 3000 	str.w	r3, [ip]
}
 8007028:	bd30      	pop	{r4, r5, pc}
 800702a:	bf00      	nop
 800702c:	00fcfff0 	.word	0x00fcfff0
 8007030:	ffff0000 	.word	0xffff0000

08007034 <BSP_STM32_DMA2D_IRQHandler>:


uint8_t BSP_STM32_DMA2D_IRQHandler(DMA2D_TypeDef * hdma2d) {
	if (((hdma2d->ISR & DMA2D_ISR_TCIF) > 0) &&  ((hdma2d->CR & DMA2D_CR_TCIE) > 0)) {
 8007034:	6842      	ldr	r2, [r0, #4]
uint8_t BSP_STM32_DMA2D_IRQHandler(DMA2D_TypeDef * hdma2d) {
 8007036:	4603      	mov	r3, r0
	if (((hdma2d->ISR & DMA2D_ISR_TCIF) > 0) &&  ((hdma2d->CR & DMA2D_CR_TCIE) > 0)) {
 8007038:	0790      	lsls	r0, r2, #30
 800703a:	d502      	bpl.n	8007042 <BSP_STM32_DMA2D_IRQHandler+0xe>
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	0591      	lsls	r1, r2, #22
 8007040:	d40d      	bmi.n	800705e <BSP_STM32_DMA2D_IRQHandler+0x2a>
		hdma2d->IFCR = DMA2D_IFCR_CTCIF;

		return BSP_OK;
	}

	if (((hdma2d->ISR & DMA2D_ISR_TEIF) > 0) && ((hdma2d->CR & DMA2D_CR_TEIE) > 0)) {
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	07d2      	lsls	r2, r2, #31
 8007046:	d502      	bpl.n	800704e <BSP_STM32_DMA2D_IRQHandler+0x1a>
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	05d0      	lsls	r0, r2, #23
 800704c:	d40f      	bmi.n	800706e <BSP_STM32_DMA2D_IRQHandler+0x3a>
		hdma2d->IFCR = DMA2D_IFCR_CTEIF;

		return BSP_ERROR;
	}

	if (((hdma2d->ISR & DMA2D_ISR_CEIF) > 0) && ((hdma2d->CR & DMA2D_CR_CEIE) > 0)) {
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	0691      	lsls	r1, r2, #26
 8007052:	d502      	bpl.n	800705a <BSP_STM32_DMA2D_IRQHandler+0x26>
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	0492      	lsls	r2, r2, #18
 8007058:	d411      	bmi.n	800707e <BSP_STM32_DMA2D_IRQHandler+0x4a>
		// Clear the configuration error flag
		hdma2d->IFCR = DMA2D_IFCR_CCEIF;

		return BSP_ERROR;
	}
	return BSP_ERROR;
 800705a:	2001      	movs	r0, #1
}
 800705c:	4770      	bx	lr
		hdma2d->CR &= ~(DMA2D_CR_TCIE);
 800705e:	681a      	ldr	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CTCIF;
 8007060:	2102      	movs	r1, #2
		return BSP_OK;
 8007062:	2000      	movs	r0, #0
		hdma2d->CR &= ~(DMA2D_CR_TCIE);
 8007064:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007068:	601a      	str	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CTCIF;
 800706a:	6099      	str	r1, [r3, #8]
		return BSP_OK;
 800706c:	4770      	bx	lr
		hdma2d->CR &= ~(DMA2D_CR_TEIE);
 800706e:	681a      	ldr	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CTEIF;
 8007070:	2101      	movs	r1, #1
		hdma2d->CR &= ~(DMA2D_CR_TEIE);
 8007072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
		return BSP_ERROR;
 8007076:	4608      	mov	r0, r1
		hdma2d->CR &= ~(DMA2D_CR_TEIE);
 8007078:	601a      	str	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CTEIF;
 800707a:	6099      	str	r1, [r3, #8]
		return BSP_ERROR;
 800707c:	4770      	bx	lr
		hdma2d->CR &= ~(DMA2D_CR_CEIE);
 800707e:	681a      	ldr	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CCEIF;
 8007080:	2120      	movs	r1, #32
		return BSP_ERROR;
 8007082:	2001      	movs	r0, #1
		hdma2d->CR &= ~(DMA2D_CR_CEIE);
 8007084:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007088:	601a      	str	r2, [r3, #0]
		hdma2d->IFCR = DMA2D_IFCR_CCEIF;
 800708a:	6099      	str	r1, [r3, #8]
		return BSP_ERROR;
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop

08007090 <BSP_STM32_GPIO_Init>:
	#else
		EXTI_CurrentCPU = EXTI_D1; // EXTI for CM7 CPU
	#endif

	// Configure the port pins
	while (((Pins) >> position) != 0x00U) {
 8007090:	2900      	cmp	r1, #0
 8007092:	f000 8113 	beq.w	80072bc <BSP_STM32_GPIO_Init+0x22c>
uint8_t BSP_STM32_GPIO_Init(GPIO_TypeDef  *GPIOx, uint32_t Pins, uint32_t Mode, uint32_t Pull, uint32_t Speed, uint32_t Alternate) {
 8007096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    	  GPIOx->OSPEEDR = temp;

	    	  // Configure the IO Output Type
	    	  temp = GPIOx->OTYPER;
	    	  temp &= ~(GPIO_OTYPER_OT0 << position) ;
	    	  temp |= (((Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800709a:	f3c2 1400 	ubfx	r4, r2, #4, #1
uint8_t BSP_STM32_GPIO_Init(GPIO_TypeDef  *GPIOx, uint32_t Pins, uint32_t Mode, uint32_t Pull, uint32_t Speed, uint32_t Alternate) {
 800709e:	b087      	sub	sp, #28
	      if (((Mode & GPIO_MODE) == MODE_OUTPUT) || ((Mode & GPIO_MODE) == MODE_AF)) {
 80070a0:	f002 0603 	and.w	r6, r2, #3
	      GPIOx->MODER = temp;

	      //--------------------- EXTI Mode Configuration ------------------------
	      // Configure the External Interrupt or event for the current IO

	      if ((Mode & EXTI_MODE) != 0x00U) {
 80070a4:	f402 3b40 	and.w	fp, r2, #196608	; 0x30000
	    	  temp |= (((Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070a8:	9405      	str	r4, [sp, #20]
	        SYSCFG->EXTICR[position >> 2U] = temp;

	        // Clear Rising Falling edge configuration
	        temp = EXTI->RTSR1;
	        temp &= ~(iocurrent);
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 80070aa:	f402 1480 	and.w	r4, r2, #1048576	; 0x100000
	      if (((Mode & GPIO_MODE) == MODE_OUTPUT) || ((Mode & GPIO_MODE) == MODE_AF)) {
 80070ae:	f106 3aff 	add.w	sl, r6, #4294967295
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070b2:	4699      	mov	r9, r3
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 80070b4:	9401      	str	r4, [sp, #4]
	        EXTI->RTSR1 = temp;

	        temp = EXTI->FTSR1;
	        temp &= ~(iocurrent);
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 80070b6:	f402 1400 	and.w	r4, r2, #2097152	; 0x200000
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070ba:	9600      	str	r6, [sp, #0]
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 80070bc:	9402      	str	r4, [sp, #8]
	        EXTI->FTSR1 = temp;

	        temp = EXTI_CurrentCPU->EMR1;
	        temp &= ~(iocurrent);
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 80070be:	f402 3400 	and.w	r4, r2, #131072	; 0x20000
	        EXTI_CurrentCPU->EMR1 = temp;

	        // Clear EXTI line configuration
	        temp = EXTI_CurrentCPU->IMR1;
	        temp &= ~(iocurrent);
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 80070c2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 80070c6:	9403      	str	r4, [sp, #12]
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 80070c8:	9204      	str	r2, [sp, #16]
	uint32_t position = 0x00U;
 80070ca:	2200      	movs	r2, #0
	    iocurrent = (Pins) & (1UL << position);
 80070cc:	2301      	movs	r3, #1
 80070ce:	4093      	lsls	r3, r2
	    if (iocurrent != 0x00U) {
 80070d0:	ea13 0701 	ands.w	r7, r3, r1
 80070d4:	d07c      	beq.n	80071d0 <BSP_STM32_GPIO_Init+0x140>
	      if (((Mode & GPIO_MODE) == MODE_OUTPUT) || ((Mode & GPIO_MODE) == MODE_AF)) {
 80070d6:	f1ba 0f01 	cmp.w	sl, #1
 80070da:	f240 8082 	bls.w	80071e2 <BSP_STM32_GPIO_Init+0x152>
	      if ((Mode & GPIO_MODE) != MODE_ANALOG) {
 80070de:	9b00      	ldr	r3, [sp, #0]
 80070e0:	0054      	lsls	r4, r2, #1
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	f040 80bb 	bne.w	800725e <BSP_STM32_GPIO_Init+0x1ce>
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070e8:	fa03 f404 	lsl.w	r4, r3, r4
 80070ec:	43e5      	mvns	r5, r4
	      temp = GPIOx->MODER;
 80070ee:	6803      	ldr	r3, [r0, #0]
	      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070f0:	402b      	ands	r3, r5
	      temp |= ((Mode & GPIO_MODE) << (position * 2U));
 80070f2:	431c      	orrs	r4, r3
	      GPIOx->MODER = temp;
 80070f4:	6004      	str	r4, [r0, #0]
	      if ((Mode & EXTI_MODE) != 0x00U) {
 80070f6:	f1bb 0f00 	cmp.w	fp, #0
 80070fa:	d069      	beq.n	80071d0 <BSP_STM32_GPIO_Init+0x140>
	        temp = SYSCFG->EXTICR[position >> 2U];
 80070fc:	f022 0403 	bic.w	r4, r2, #3
	        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007100:	f002 0503 	and.w	r5, r2, #3
 8007104:	f04f 0c0f 	mov.w	ip, #15
 8007108:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
 800710c:	00ad      	lsls	r5, r5, #2
	        temp = SYSCFG->EXTICR[position >> 2U];
 800710e:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
	        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007112:	fa0c fc05 	lsl.w	ip, ip, r5
 8007116:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800711a:	ea23 060c 	bic.w	r6, r3, ip
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800711e:	4b73      	ldr	r3, [pc, #460]	; (80072ec <BSP_STM32_GPIO_Init+0x25c>)
 8007120:	4298      	cmp	r0, r3
 8007122:	d02d      	beq.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
 8007124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007128:	4298      	cmp	r0, r3
 800712a:	f000 80ab 	beq.w	8007284 <BSP_STM32_GPIO_Init+0x1f4>
 800712e:	4b70      	ldr	r3, [pc, #448]	; (80072f0 <BSP_STM32_GPIO_Init+0x260>)
 8007130:	4298      	cmp	r0, r3
 8007132:	f000 80ae 	beq.w	8007292 <BSP_STM32_GPIO_Init+0x202>
 8007136:	4b6f      	ldr	r3, [pc, #444]	; (80072f4 <BSP_STM32_GPIO_Init+0x264>)
 8007138:	4298      	cmp	r0, r3
 800713a:	f000 809c 	beq.w	8007276 <BSP_STM32_GPIO_Init+0x1e6>
 800713e:	4b6e      	ldr	r3, [pc, #440]	; (80072f8 <BSP_STM32_GPIO_Init+0x268>)
 8007140:	4298      	cmp	r0, r3
 8007142:	f000 80b4 	beq.w	80072ae <BSP_STM32_GPIO_Init+0x21e>
 8007146:	4b6d      	ldr	r3, [pc, #436]	; (80072fc <BSP_STM32_GPIO_Init+0x26c>)
 8007148:	4298      	cmp	r0, r3
 800714a:	f000 80b9 	beq.w	80072c0 <BSP_STM32_GPIO_Init+0x230>
 800714e:	4b6c      	ldr	r3, [pc, #432]	; (8007300 <BSP_STM32_GPIO_Init+0x270>)
 8007150:	4298      	cmp	r0, r3
 8007152:	f000 80a5 	beq.w	80072a0 <BSP_STM32_GPIO_Init+0x210>
 8007156:	4b6b      	ldr	r3, [pc, #428]	; (8007304 <BSP_STM32_GPIO_Init+0x274>)
 8007158:	4298      	cmp	r0, r3
 800715a:	f000 80b8 	beq.w	80072ce <BSP_STM32_GPIO_Init+0x23e>
 800715e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8007308 <BSP_STM32_GPIO_Init+0x278>
 8007162:	4560      	cmp	r0, ip
 8007164:	f000 80ba 	beq.w	80072dc <BSP_STM32_GPIO_Init+0x24c>
 8007168:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800730c <BSP_STM32_GPIO_Init+0x27c>
 800716c:	4560      	cmp	r0, ip
 800716e:	bf0c      	ite	eq
 8007170:	f04f 0c09 	moveq.w	ip, #9
 8007174:	f04f 0c0a 	movne.w	ip, #10
 8007178:	fa0c fc05 	lsl.w	ip, ip, r5
 800717c:	ea46 060c 	orr.w	r6, r6, ip
	        temp = EXTI->RTSR1;
 8007180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 8007184:	9d01      	ldr	r5, [sp, #4]
	        SYSCFG->EXTICR[position >> 2U] = temp;
 8007186:	60a6      	str	r6, [r4, #8]
	        temp &= ~(iocurrent);
 8007188:	43fc      	mvns	r4, r7
	        temp = EXTI->RTSR1;
 800718a:	681b      	ldr	r3, [r3, #0]
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 800718c:	2d00      	cmp	r5, #0
 800718e:	d170      	bne.n	8007272 <BSP_STM32_GPIO_Init+0x1e2>
	        temp &= ~(iocurrent);
 8007190:	4023      	ands	r3, r4
	        EXTI->RTSR1 = temp;
 8007192:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8007196:	602b      	str	r3, [r5, #0]
	        temp = EXTI->FTSR1;
 8007198:	686b      	ldr	r3, [r5, #4]
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 800719a:	9d02      	ldr	r5, [sp, #8]
 800719c:	2d00      	cmp	r5, #0
 800719e:	d166      	bne.n	800726e <BSP_STM32_GPIO_Init+0x1de>
	        temp &= ~(iocurrent);
 80071a0:	4023      	ands	r3, r4
	        EXTI->FTSR1 = temp;
 80071a2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80071a6:	606b      	str	r3, [r5, #4]
	        temp = EXTI_CurrentCPU->EMR1;
 80071a8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 80071ac:	9d03      	ldr	r5, [sp, #12]
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	d15b      	bne.n	800726a <BSP_STM32_GPIO_Init+0x1da>
	        temp &= ~(iocurrent);
 80071b2:	4023      	ands	r3, r4
	        EXTI_CurrentCPU->EMR1 = temp;
 80071b4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80071b8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	        temp = EXTI_CurrentCPU->IMR1;
 80071bc:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 80071c0:	9d04      	ldr	r5, [sp, #16]
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	d14f      	bne.n	8007266 <BSP_STM32_GPIO_Init+0x1d6>
	        temp &= ~(iocurrent);
 80071c6:	4023      	ands	r3, r4
	        EXTI_CurrentCPU->IMR1 = temp;
 80071c8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80071cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	      }
	    }

	    position++;
 80071d0:	3201      	adds	r2, #1
	while (((Pins) >> position) != 0x00U) {
 80071d2:	fa31 f302 	lsrs.w	r3, r1, r2
 80071d6:	f47f af79 	bne.w	80070cc <BSP_STM32_GPIO_Init+0x3c>
	  }

	return BSP_OK;
}
 80071da:	2000      	movs	r0, #0
 80071dc:	b007      	add	sp, #28
 80071de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    	  temp = GPIOx->OSPEEDR;
 80071e2:	0054      	lsls	r4, r2, #1
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071e4:	2503      	movs	r5, #3
	    	  temp = GPIOx->OSPEEDR;
 80071e6:	f8d0 e008 	ldr.w	lr, [r0, #8]
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071ea:	40a5      	lsls	r5, r4
	    	  temp |= (Speed << (position * 2U));
 80071ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071ee:	ea2e 0e05 	bic.w	lr, lr, r5
	    	  temp |= (Speed << (position * 2U));
 80071f2:	fa06 fc04 	lsl.w	ip, r6, r4
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071f6:	43ed      	mvns	r5, r5
	    	  temp |= (Speed << (position * 2U));
 80071f8:	ea4c 0c0e 	orr.w	ip, ip, lr
	    	  GPIOx->OSPEEDR = temp;
 80071fc:	f8c0 c008 	str.w	ip, [r0, #8]
	    	  temp = GPIOx->OTYPER;
 8007200:	f8d0 c004 	ldr.w	ip, [r0, #4]
	    	  temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007204:	ea2c 0c03 	bic.w	ip, ip, r3
	    	  temp |= (((Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007208:	9b05      	ldr	r3, [sp, #20]
 800720a:	4093      	lsls	r3, r2
 800720c:	ea43 030c 	orr.w	r3, r3, ip
	    	  GPIOx->OTYPER = temp;
 8007210:	6043      	str	r3, [r0, #4]
	    	  temp = GPIOx->PUPDR;
 8007212:	68c3      	ldr	r3, [r0, #12]
	    	  temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007214:	ea03 0c05 	and.w	ip, r3, r5
	    	  temp |= ((Pull) << (position * 2U));
 8007218:	fa09 f304 	lsl.w	r3, r9, r4
 800721c:	ea43 030c 	orr.w	r3, r3, ip
	    	  GPIOx->PUPDR = temp;
 8007220:	60c3      	str	r3, [r0, #12]
	      if ((Mode & GPIO_MODE) == MODE_AF) {
 8007222:	9b00      	ldr	r3, [sp, #0]
 8007224:	2b02      	cmp	r3, #2
 8007226:	fa03 f404 	lsl.w	r4, r3, r4
 800722a:	f47f af60 	bne.w	80070ee <BSP_STM32_GPIO_Init+0x5e>
	    	  temp = GPIOx->AFR[position >> 3U];
 800722e:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
	    	  temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007232:	f002 0c07 	and.w	ip, r2, #7
	    	  temp |= ((Alternate) << ((position & 0x07U) * 4U));
 8007236:	9b11      	ldr	r3, [sp, #68]	; 0x44
	    	  temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007238:	f04f 080f 	mov.w	r8, #15
 800723c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007240:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007244:	fa08 f80c 	lsl.w	r8, r8, ip
	    	  temp |= ((Alternate) << ((position & 0x07U) * 4U));
 8007248:	fa03 fc0c 	lsl.w	ip, r3, ip
	    	  temp = GPIOx->AFR[position >> 3U];
 800724c:	f8de 3020 	ldr.w	r3, [lr, #32]
	    	  temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007250:	ea23 0308 	bic.w	r3, r3, r8
	    	  temp |= ((Alternate) << ((position & 0x07U) * 4U));
 8007254:	ea4c 0303 	orr.w	r3, ip, r3
	    	  GPIOx->AFR[position >> 3U] = temp;
 8007258:	f8ce 3020 	str.w	r3, [lr, #32]
 800725c:	e747      	b.n	80070ee <BSP_STM32_GPIO_Init+0x5e>
	    	  temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800725e:	2503      	movs	r5, #3
 8007260:	40a5      	lsls	r5, r4
 8007262:	43ed      	mvns	r5, r5
 8007264:	e7d5      	b.n	8007212 <BSP_STM32_GPIO_Init+0x182>
	        if ((Mode & EXTI_IT) != 0x00U) temp |= iocurrent;
 8007266:	433b      	orrs	r3, r7
 8007268:	e7ae      	b.n	80071c8 <BSP_STM32_GPIO_Init+0x138>
	        if ((Mode & EXTI_EVT) != 0x00U) temp |= iocurrent;
 800726a:	433b      	orrs	r3, r7
 800726c:	e7a2      	b.n	80071b4 <BSP_STM32_GPIO_Init+0x124>
	        if ((Mode & TRIGGER_FALLING) != 0x00U) temp |= iocurrent;
 800726e:	433b      	orrs	r3, r7
 8007270:	e797      	b.n	80071a2 <BSP_STM32_GPIO_Init+0x112>
	        if ((Mode & TRIGGER_RISING) != 0x00U) temp |= iocurrent;
 8007272:	433b      	orrs	r3, r7
 8007274:	e78d      	b.n	8007192 <BSP_STM32_GPIO_Init+0x102>
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007276:	f04f 0c03 	mov.w	ip, #3
 800727a:	fa0c fc05 	lsl.w	ip, ip, r5
 800727e:	ea46 060c 	orr.w	r6, r6, ip
 8007282:	e77d      	b.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
 8007284:	f04f 0c01 	mov.w	ip, #1
 8007288:	fa0c fc05 	lsl.w	ip, ip, r5
 800728c:	ea46 060c 	orr.w	r6, r6, ip
 8007290:	e776      	b.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
 8007292:	f04f 0c02 	mov.w	ip, #2
 8007296:	fa0c fc05 	lsl.w	ip, ip, r5
 800729a:	ea46 060c 	orr.w	r6, r6, ip
 800729e:	e76f      	b.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
 80072a0:	f04f 0c06 	mov.w	ip, #6
 80072a4:	fa0c fc05 	lsl.w	ip, ip, r5
 80072a8:	ea46 060c 	orr.w	r6, r6, ip
 80072ac:	e768      	b.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
 80072ae:	f04f 0c04 	mov.w	ip, #4
 80072b2:	fa0c fc05 	lsl.w	ip, ip, r5
 80072b6:	ea46 060c 	orr.w	r6, r6, ip
 80072ba:	e761      	b.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
}
 80072bc:	2000      	movs	r0, #0
 80072be:	4770      	bx	lr
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80072c0:	f04f 0c05 	mov.w	ip, #5
 80072c4:	fa0c fc05 	lsl.w	ip, ip, r5
 80072c8:	ea46 060c 	orr.w	r6, r6, ip
 80072cc:	e758      	b.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
 80072ce:	f04f 0c07 	mov.w	ip, #7
 80072d2:	fa0c fc05 	lsl.w	ip, ip, r5
 80072d6:	ea46 060c 	orr.w	r6, r6, ip
 80072da:	e751      	b.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
 80072dc:	f04f 0c08 	mov.w	ip, #8
 80072e0:	fa0c fc05 	lsl.w	ip, ip, r5
 80072e4:	ea46 060c 	orr.w	r6, r6, ip
 80072e8:	e74a      	b.n	8007180 <BSP_STM32_GPIO_Init+0xf0>
 80072ea:	bf00      	nop
 80072ec:	58020000 	.word	0x58020000
 80072f0:	58020800 	.word	0x58020800
 80072f4:	58020c00 	.word	0x58020c00
 80072f8:	58021000 	.word	0x58021000
 80072fc:	58021400 	.word	0x58021400
 8007300:	58021800 	.word	0x58021800
 8007304:	58021c00 	.word	0x58021c00
 8007308:	58022000 	.word	0x58022000
 800730c:	58022400 	.word	0x58022400

08007310 <BSP_STM32_GPIO_ReadPin>:


uint32_t BSP_STM32_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin) {
	return ((GPIOx->IDR & GPIO_Pin) > 0)?GPIO_PIN_SET:GPIO_PIN_RESET;
 8007310:	6903      	ldr	r3, [r0, #16]
 8007312:	420b      	tst	r3, r1
}
 8007314:	bf14      	ite	ne
 8007316:	2001      	movne	r0, #1
 8007318:	2000      	moveq	r0, #0
 800731a:	4770      	bx	lr

0800731c <BSP_STM32_GPIO_WritePin>:

uint8_t BSP_STM32_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin, uint32_t PinState) {
	GPIOx->BSRR=((PinState==GPIO_PIN_SET)?GPIO_Pin:GPIO_Pin << GPIO_NUMBER);
 800731c:	2a01      	cmp	r2, #1
 800731e:	bf18      	it	ne
 8007320:	0409      	lslne	r1, r1, #16
 8007322:	6181      	str	r1, [r0, #24]
	return BSP_OK;
}
 8007324:	2000      	movs	r0, #0
 8007326:	4770      	bx	lr

08007328 <BSP_STM32_HSEM_FastTake>:
}


uint8_t BSP_STM32_HSEM_FastTake(uint32_t SemID) {
	// Validate input parameters
	if (SemID > 31) return BSP_ERROR;
 8007328:	281f      	cmp	r0, #31
 800732a:	d809      	bhi.n	8007340 <BSP_STM32_HSEM_FastTake+0x18>

	// Read the RLR register to take the semaphore
	if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK)) return BSP_OK;
 800732c:	4905      	ldr	r1, [pc, #20]	; (8007344 <BSP_STM32_HSEM_FastTake+0x1c>)
 800732e:	f100 0320 	add.w	r3, r0, #32
 8007332:	4a05      	ldr	r2, [pc, #20]	; (8007348 <BSP_STM32_HSEM_FastTake+0x20>)
 8007334:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (SemID > 31) return BSP_ERROR;
 8007338:	1a80      	subs	r0, r0, r2
 800733a:	bf18      	it	ne
 800733c:	2001      	movne	r0, #1
 800733e:	4770      	bx	lr
 8007340:	2001      	movs	r0, #1
	return BSP_ERROR;
}
 8007342:	4770      	bx	lr
 8007344:	58026400 	.word	0x58026400
 8007348:	80000300 	.word	0x80000300

0800734c <BSP_STM32_HSEM_FastRelease>:
	return BSP_OK;
}

uint8_t BSP_STM32_HSEM_FastRelease(uint32_t SemID) {
	// Validate input parameters
	if (SemID > 31) return BSP_ERROR;
 800734c:	281f      	cmp	r0, #31
uint8_t BSP_STM32_HSEM_FastRelease(uint32_t SemID) {
 800734e:	4603      	mov	r3, r0
	if (SemID > 31) return BSP_ERROR;
 8007350:	d806      	bhi.n	8007360 <BSP_STM32_HSEM_FastRelease+0x14>

	// Clear the semaphore by writing to the R register: the MasterID, the ProcessID = 0 and take bit = 0
	HSEM->R[SemID] = (HSEM_CR_COREID_CURRENT);
 8007352:	4a04      	ldr	r2, [pc, #16]	; (8007364 <BSP_STM32_HSEM_FastRelease+0x18>)
 8007354:	f44f 7140 	mov.w	r1, #768	; 0x300
	return BSP_OK;
 8007358:	2000      	movs	r0, #0
	HSEM->R[SemID] = (HSEM_CR_COREID_CURRENT);
 800735a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return BSP_OK;
 800735e:	4770      	bx	lr
	if (SemID > 31) return BSP_ERROR;
 8007360:	2001      	movs	r0, #1
}
 8007362:	4770      	bx	lr
 8007364:	58026400 	.word	0x58026400

08007368 <BSP_STM32_I2C_Init>:

uint8_t BSP_STM32_I2C_Init(I2C_TypeDef *hi2c) {
	#define TIMING_CLEAR_MASK   (0xF0FFFFFFU)

	// Disable I2C periph
	CLEAR_BIT(hi2c->CR1, I2C_CR1_PE);
 8007368:	6801      	ldr	r1, [r0, #0]
uint8_t BSP_STM32_I2C_Init(I2C_TypeDef *hi2c) {
 800736a:	4603      	mov	r3, r0

	// Disable Own Address2
	hi2c->OAR2 &= ~I2C_OAR2_OA2EN;

	// Enable the AUTOEND and NACK
	hi2c->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800736c:	4a10      	ldr	r2, [pc, #64]	; (80073b0 <BSP_STM32_I2C_Init+0x48>)
	CLEAR_BIT(hi2c->CR1, I2C_CR1_PE);
 800736e:	f021 0101 	bic.w	r1, r1, #1
uint8_t BSP_STM32_I2C_Init(I2C_TypeDef *hi2c) {
 8007372:	b430      	push	{r4, r5}
	hi2c->TIMINGR = 0x009034B6 & TIMING_CLEAR_MASK; // 400kHz - High Speed I2C
 8007374:	4d0f      	ldr	r5, [pc, #60]	; (80073b4 <BSP_STM32_I2C_Init+0x4c>)

	// Configure I2C Generalcall and NoStretch mode
	hi2c->CR1 = (I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE);
 8007376:	2400      	movs	r4, #0
	CLEAR_BIT(hi2c->CR1, I2C_CR1_PE);
 8007378:	6001      	str	r1, [r0, #0]
	hi2c->TIMINGR = 0x009034B6 & TIMING_CLEAR_MASK; // 400kHz - High Speed I2C
 800737a:	6105      	str	r5, [r0, #16]
	hi2c->OAR1 &= ~I2C_OAR1_OA1EN;
 800737c:	6881      	ldr	r1, [r0, #8]

	// Enable I2C periph
	SET_BIT(hi2c->CR1, I2C_CR1_PE);

	return BSP_OK;
}
 800737e:	4620      	mov	r0, r4
	hi2c->OAR1 &= ~I2C_OAR1_OA1EN;
 8007380:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007384:	6099      	str	r1, [r3, #8]
	hi2c->OAR2 &= ~I2C_OAR2_OA2EN;
 8007386:	68d9      	ldr	r1, [r3, #12]
 8007388:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800738c:	60d9      	str	r1, [r3, #12]
	hi2c->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800738e:	6859      	ldr	r1, [r3, #4]
 8007390:	430a      	orrs	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
	hi2c->CR1 = (I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE);
 8007394:	601c      	str	r4, [r3, #0]
	hi2c->CR1 &= ~(I2C_CR1_ANFOFF);
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800739c:	601a      	str	r2, [r3, #0]
	hi2c->CR1 |= I2C_ANALOGFILTER_ENABLE;
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	601a      	str	r2, [r3, #0]
	SET_BIT(hi2c->CR1, I2C_CR1_PE);
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	f042 0201 	orr.w	r2, r2, #1
}
 80073a8:	bc30      	pop	{r4, r5}
	SET_BIT(hi2c->CR1, I2C_CR1_PE);
 80073aa:	601a      	str	r2, [r3, #0]
}
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	02008000 	.word	0x02008000
 80073b4:	009034b6 	.word	0x009034b6

080073b8 <BSP_STM32_I2C_IsDeviceReady>:


uint8_t BSP_STM32_I2C_IsDeviceReady(I2C_TypeDef *hi2c, uint32_t device_address, uint32_t maxtrials, uint32_t timeout) {
 80073b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	uint32_t tickstart;

	__IO uint32_t trials = 0UL;
 80073bc:	2500      	movs	r5, #0
uint8_t BSP_STM32_I2C_IsDeviceReady(I2C_TypeDef *hi2c, uint32_t device_address, uint32_t maxtrials, uint32_t timeout) {
 80073be:	b082      	sub	sp, #8
 80073c0:	4617      	mov	r7, r2
 80073c2:	461e      	mov	r6, r3
	__IO uint32_t trials = 0UL;
 80073c4:	9501      	str	r5, [sp, #4]
uint8_t BSP_STM32_I2C_IsDeviceReady(I2C_TypeDef *hi2c, uint32_t device_address, uint32_t maxtrials, uint32_t timeout) {
 80073c6:	4604      	mov	r4, r0
 80073c8:	4688      	mov	r8, r1

	uint8_t tmp1;
	uint8_t tmp2;

	// No need to Check TC flag, with AUTOEND mode the stop is automatically generated. Wait until STOPF flag is set or a NACK flag is set.
	tickstart = BSP_GetTick();
 80073ca:	f7fc fe53 	bl	8004074 <BSP_GetTick>

    while (trials < maxtrials) {
 80073ce:	9b01      	ldr	r3, [sp, #4]
	tickstart = BSP_GetTick();
 80073d0:	4605      	mov	r5, r0
    while (trials < maxtrials) {
 80073d2:	429f      	cmp	r7, r3
 80073d4:	d93b      	bls.n	800744e <BSP_STM32_I2C_IsDeviceReady+0x96>
		// Generate Start
		hi2c->CR2 = ((((uint32_t)(device_address) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN));
 80073d6:	f3c8 0309 	ubfx	r3, r8, #0, #10
 80073da:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007488 <BSP_STM32_I2C_IsDeviceReady+0xd0>

	    	// Wait until STOPF flag is reset
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;

	        // Clear NACK Flag
	    	hi2c->ICR = I2C_ICR_NACKCF;
 80073de:	f04f 0a10 	mov.w	sl, #16

	        // Clear STOP Flag, auto generated with autoend
	    	hi2c->ICR = I2C_ICR_STOPCF;
 80073e2:	f04f 0920 	mov.w	r9, #32
		hi2c->CR2 = ((((uint32_t)(device_address) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN));
 80073e6:	ea43 0808 	orr.w	r8, r3, r8
 80073ea:	f8c4 8004 	str.w	r8, [r4, #4]
		tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 80073ee:	69a3      	ldr	r3, [r4, #24]
		tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 80073f0:	69a2      	ldr	r2, [r4, #24]
		tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 80073f2:	f003 0320 	and.w	r3, r3, #32
		tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 80073f6:	f002 0210 	and.w	r2, r2, #16
		while ((tmp1 == 0) && (tmp2 == 0)) {
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d008      	beq.n	8007410 <BSP_STM32_I2C_IsDeviceReady+0x58>
 80073fe:	e010      	b.n	8007422 <BSP_STM32_I2C_IsDeviceReady+0x6a>
			tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8007400:	69a1      	ldr	r1, [r4, #24]
			tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8007402:	69a3      	ldr	r3, [r4, #24]
			tmp1 = hi2c->ISR & I2C_ISR_STOPF;
 8007404:	f001 0120 	and.w	r1, r1, #32
			tmp2 = hi2c->ISR & I2C_ISR_NACKF;
 8007408:	f003 0310 	and.w	r3, r3, #16
		while ((tmp1 == 0) && (tmp2 == 0)) {
 800740c:	4319      	orrs	r1, r3
 800740e:	d108      	bne.n	8007422 <BSP_STM32_I2C_IsDeviceReady+0x6a>
			if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007410:	f7fc fe30 	bl	8004074 <BSP_GetTick>
 8007414:	1b40      	subs	r0, r0, r5
 8007416:	42b0      	cmp	r0, r6
 8007418:	d9f2      	bls.n	8007400 <BSP_STM32_I2C_IsDeviceReady+0x48>
 800741a:	2001      	movs	r0, #1

    // Clear STOP Flag
    hi2c->ICR = I2C_ICR_STOPCF;

    return BSP_ERROR;
}
 800741c:	b002      	add	sp, #8
 800741e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    if ((hi2c->ISR & I2C_ISR_NACKF) == 0) {
 8007422:	69a3      	ldr	r3, [r4, #24]
 8007424:	06d8      	lsls	r0, r3, #27
 8007426:	d405      	bmi.n	8007434 <BSP_STM32_I2C_IsDeviceReady+0x7c>
 8007428:	e027      	b.n	800747a <BSP_STM32_I2C_IsDeviceReady+0xc2>
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 800742a:	f7fc fe23 	bl	8004074 <BSP_GetTick>
 800742e:	1b40      	subs	r0, r0, r5
 8007430:	42b0      	cmp	r0, r6
 8007432:	d8f2      	bhi.n	800741a <BSP_STM32_I2C_IsDeviceReady+0x62>
 8007434:	69a3      	ldr	r3, [r4, #24]
 8007436:	069a      	lsls	r2, r3, #26
 8007438:	d5f7      	bpl.n	800742a <BSP_STM32_I2C_IsDeviceReady+0x72>
	    	hi2c->ICR = I2C_ICR_NACKCF;
 800743a:	f8c4 a01c 	str.w	sl, [r4, #28]
	    	hi2c->ICR = I2C_ICR_STOPCF;
 800743e:	f8c4 901c 	str.w	r9, [r4, #28]
	    trials++;
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	3301      	adds	r3, #1
 8007446:	9301      	str	r3, [sp, #4]
    while (trials < maxtrials) {
 8007448:	9b01      	ldr	r3, [sp, #4]
 800744a:	42bb      	cmp	r3, r7
 800744c:	d3cd      	bcc.n	80073ea <BSP_STM32_I2C_IsDeviceReady+0x32>
    hi2c->CR2 |= I2C_CR2_STOP;
 800744e:	6863      	ldr	r3, [r4, #4]
 8007450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007454:	6063      	str	r3, [r4, #4]
    while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007456:	e004      	b.n	8007462 <BSP_STM32_I2C_IsDeviceReady+0xaa>
 8007458:	f7fc fe0c 	bl	8004074 <BSP_GetTick>
 800745c:	1b40      	subs	r0, r0, r5
 800745e:	42b0      	cmp	r0, r6
 8007460:	d8db      	bhi.n	800741a <BSP_STM32_I2C_IsDeviceReady+0x62>
 8007462:	69a3      	ldr	r3, [r4, #24]
 8007464:	069b      	lsls	r3, r3, #26
 8007466:	d5f7      	bpl.n	8007458 <BSP_STM32_I2C_IsDeviceReady+0xa0>
    hi2c->ICR = I2C_ICR_STOPCF;
 8007468:	2320      	movs	r3, #32
    return BSP_ERROR;
 800746a:	2001      	movs	r0, #1
    hi2c->ICR = I2C_ICR_STOPCF;
 800746c:	61e3      	str	r3, [r4, #28]
    return BSP_ERROR;
 800746e:	e7d5      	b.n	800741c <BSP_STM32_I2C_IsDeviceReady+0x64>
	    	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > timeout) return BSP_ERROR;
 8007470:	f7fc fe00 	bl	8004074 <BSP_GetTick>
 8007474:	1b40      	subs	r0, r0, r5
 8007476:	42b0      	cmp	r0, r6
 8007478:	d8cf      	bhi.n	800741a <BSP_STM32_I2C_IsDeviceReady+0x62>
 800747a:	69a3      	ldr	r3, [r4, #24]
 800747c:	0699      	lsls	r1, r3, #26
 800747e:	d5f7      	bpl.n	8007470 <BSP_STM32_I2C_IsDeviceReady+0xb8>
	        hi2c->ICR = I2C_ICR_STOPCF;
 8007480:	2320      	movs	r3, #32
	        return BSP_OK;
 8007482:	2000      	movs	r0, #0
	        hi2c->ICR = I2C_ICR_STOPCF;
 8007484:	61e3      	str	r3, [r4, #28]
	        return BSP_OK;
 8007486:	e7c9      	b.n	800741c <BSP_STM32_I2C_IsDeviceReady+0x64>
 8007488:	02002000 	.word	0x02002000

0800748c <BSP_STM32_I2C_RegWrite>:


uint8_t BSP_STM32_I2C_RegWrite(I2C_TypeDef *hi2c, uint16_t DevAddress, uint8_t RegAddress, uint8_t RegValue, uint32_t Timeout) {
 800748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007490:	9e08      	ldr	r6, [sp, #32]
 8007492:	4604      	mov	r4, r0
 8007494:	460f      	mov	r7, r1
 8007496:	4690      	mov	r8, r2
 8007498:	4699      	mov	r9, r3

	uint32_t tickstart = BSP_GetTick();
 800749a:	f7fc fdeb 	bl	8004074 <BSP_GetTick>
 800749e:	4605      	mov	r5, r0
	uint32_t tmp;

	// Wait for BUSY flag to reset
	while ((hi2c->ISR & I2C_ISR_BUSY) > 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 80074a0:	e005      	b.n	80074ae <BSP_STM32_I2C_RegWrite+0x22>
 80074a2:	f7fc fde7 	bl	8004074 <BSP_GetTick>
 80074a6:	eba0 0c05 	sub.w	ip, r0, r5
 80074aa:	45b4      	cmp	ip, r6
 80074ac:	d832      	bhi.n	8007514 <BSP_STM32_I2C_RegWrite+0x88>
 80074ae:	69a3      	ldr	r3, [r4, #24]
 80074b0:	0418      	lsls	r0, r3, #16
 80074b2:	d4f6      	bmi.n	80074a2 <BSP_STM32_I2C_RegWrite+0x16>

	// Config transfer
	tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)2 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)I2C_GENERATE_START_WRITE) & (~0x80000000U));
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80074b4:	6863      	ldr	r3, [r4, #4]
	tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)2 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)I2C_GENERATE_START_WRITE) & (~0x80000000U));
 80074b6:	f3c7 0709 	ubfx	r7, r7, #0, #10
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80074ba:	4a18      	ldr	r2, [pc, #96]	; (800751c <BSP_STM32_I2C_RegWrite+0x90>)
 80074bc:	4013      	ands	r3, r2
 80074be:	431f      	orrs	r7, r3
 80074c0:	4b17      	ldr	r3, [pc, #92]	; (8007520 <BSP_STM32_I2C_RegWrite+0x94>)
 80074c2:	433b      	orrs	r3, r7
 80074c4:	6063      	str	r3, [r4, #4]

	while ((hi2c->ISR & I2C_ISR_TXIS) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 80074c6:	e004      	b.n	80074d2 <BSP_STM32_I2C_RegWrite+0x46>
 80074c8:	f7fc fdd4 	bl	8004074 <BSP_GetTick>
 80074cc:	1b40      	subs	r0, r0, r5
 80074ce:	42b0      	cmp	r0, r6
 80074d0:	d820      	bhi.n	8007514 <BSP_STM32_I2C_RegWrite+0x88>
 80074d2:	69a3      	ldr	r3, [r4, #24]
 80074d4:	0799      	lsls	r1, r3, #30
 80074d6:	d5f7      	bpl.n	80074c8 <BSP_STM32_I2C_RegWrite+0x3c>

	hi2c->TXDR = RegAddress;
 80074d8:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28

	while ((hi2c->ISR & I2C_ISR_TXIS) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 80074dc:	e004      	b.n	80074e8 <BSP_STM32_I2C_RegWrite+0x5c>
 80074de:	f7fc fdc9 	bl	8004074 <BSP_GetTick>
 80074e2:	1b40      	subs	r0, r0, r5
 80074e4:	42b0      	cmp	r0, r6
 80074e6:	d815      	bhi.n	8007514 <BSP_STM32_I2C_RegWrite+0x88>
 80074e8:	69a3      	ldr	r3, [r4, #24]
 80074ea:	079a      	lsls	r2, r3, #30
 80074ec:	d5f7      	bpl.n	80074de <BSP_STM32_I2C_RegWrite+0x52>

	hi2c->TXDR = RegValue;
 80074ee:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28

	//while ((hi2c->ISR & I2C_FLAG_TCR) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;

	// Wait for Stop flag
	while ((hi2c->ISR & I2C_ISR_STOPF) == 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 80074f2:	e004      	b.n	80074fe <BSP_STM32_I2C_RegWrite+0x72>
 80074f4:	f7fc fdbe 	bl	8004074 <BSP_GetTick>
 80074f8:	1b40      	subs	r0, r0, r5
 80074fa:	42b0      	cmp	r0, r6
 80074fc:	d80a      	bhi.n	8007514 <BSP_STM32_I2C_RegWrite+0x88>
 80074fe:	69a3      	ldr	r3, [r4, #24]
 8007500:	069b      	lsls	r3, r3, #26
 8007502:	d5f7      	bpl.n	80074f4 <BSP_STM32_I2C_RegWrite+0x68>

	// Clear Stop Flag
	hi2c->ICR = I2C_ICR_STOPCF;
 8007504:	2320      	movs	r3, #32

	hi2c->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD  | I2C_CR2_RD_WRN));
 8007506:	4a07      	ldr	r2, [pc, #28]	; (8007524 <BSP_STM32_I2C_RegWrite+0x98>)


	return BSP_OK;
 8007508:	2000      	movs	r0, #0
	hi2c->ICR = I2C_ICR_STOPCF;
 800750a:	61e3      	str	r3, [r4, #28]
	hi2c->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD  | I2C_CR2_RD_WRN));
 800750c:	6863      	ldr	r3, [r4, #4]
 800750e:	4013      	ands	r3, r2
 8007510:	6063      	str	r3, [r4, #4]
	return BSP_OK;
 8007512:	e000      	b.n	8007516 <BSP_STM32_I2C_RegWrite+0x8a>
	while ((hi2c->ISR & I2C_ISR_BUSY) > 0) if ((BSP_GetTick() - tickstart) > Timeout) return BSP_ERROR;
 8007514:	2001      	movs	r0, #1
}
 8007516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751a:	bf00      	nop
 800751c:	fc009800 	.word	0xfc009800
 8007520:	02022000 	.word	0x02022000
 8007524:	fe00e800 	.word	0xfe00e800

08007528 <BSP_STM32_I2C_MemRead>:


uint8_t BSP_STM32_I2C_MemRead(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	4605      	mov	r5, r0
	switch (ctx->dma_mode) {
 800752c:	6808      	ldr	r0, [r1, #0]
uint8_t BSP_STM32_I2C_MemRead(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t Size) {
 800752e:	4614      	mov	r4, r2
 8007530:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8007534:	9a06      	ldr	r2, [sp, #24]
	switch (ctx->dma_mode) {
 8007536:	b320      	cbz	r0, 8007582 <BSP_STM32_I2C_MemRead+0x5a>
 8007538:	f100 3cff 	add.w	ip, r0, #4294967295
 800753c:	f1bc 0f01 	cmp.w	ip, #1
 8007540:	d81f      	bhi.n	8007582 <BSP_STM32_I2C_MemRead+0x5a>
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 8007542:	f04f 3cff 	mov.w	ip, #4294967295
 8007546:	4f1c      	ldr	r7, [pc, #112]	; (80075b8 <BSP_STM32_I2C_MemRead+0x90>)
	switch (ctx->dma_mode) {
 8007548:	2802      	cmp	r0, #2
	i2c_ctx->devaddr = DevAddress;
 800754a:	638c      	str	r4, [r1, #56]	; 0x38
		BSP_BDMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 800754c:	4608      	mov	r0, r1
	i2c_ctx->size = Size;
 800754e:	e9c1 260a 	strd	r2, r6, [r1, #40]	; 0x28
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 8007552:	e9c1 c70c 	strd	ip, r7, [r1, #48]	; 0x30
	hi2c->TXDR = MemAddress;
 8007556:	62ab      	str	r3, [r5, #40]	; 0x28
		BSP_BDMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 8007558:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800755c:	4633      	mov	r3, r6
	switch (ctx->dma_mode) {
 800755e:	d028      	beq.n	80075b2 <BSP_STM32_I2C_MemRead+0x8a>
		BSP_STM32_DMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 8007560:	f7fe fb6a 	bl	8005c38 <BSP_STM32_DMA_StartIT>
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007564:	686b      	ldr	r3, [r5, #4]
	uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | ((1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE) & (~0x80000000U));
 8007566:	f3c4 0409 	ubfx	r4, r4, #0, #10
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800756a:	4a14      	ldr	r2, [pc, #80]	; (80075bc <BSP_STM32_I2C_MemRead+0x94>)
	case TXRX_CTX_MODE_DMA:
	case TXRX_CTX_MODE_BDMA:
		return _I2C_MemReadDMA(hi2c, ctx, DevAddress, MemAddress, pData, Size);
	}
	return _I2C_MemReadIT(hi2c, ctx, DevAddress, MemAddress, pData, Size);
}
 800756c:	2000      	movs	r0, #0
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800756e:	4013      	ands	r3, r2
 8007570:	431c      	orrs	r4, r3
 8007572:	f444 3490 	orr.w	r4, r4, #73728	; 0x12000
 8007576:	606c      	str	r4, [r5, #4]
	hi2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_TCIE | I2C_CR1_STOPIE | I2C_CR1_NACKIE | I2C_CR1_TXIE;
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800757e:	602b      	str	r3, [r5, #0]
}
 8007580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	i2c_ctx->size = Size;
 8007582:	e9c1 260a 	strd	r2, r6, [r1, #40]	; 0x28
	i2c_ctx->index = 0xFFFFFFFFU;
 8007586:	f04f 32ff 	mov.w	r2, #4294967295
	i2c_ctx->devaddr = DevAddress;
 800758a:	638c      	str	r4, [r1, #56]	; 0x38
	uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | ((1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE) & (~0x80000000U));
 800758c:	f3c4 0409 	ubfx	r4, r4, #0, #10
}
 8007590:	2000      	movs	r0, #0
	i2c_ctx->index = 0xFFFFFFFFU;
 8007592:	630a      	str	r2, [r1, #48]	; 0x30
	i2c_ctx->option = I2C_NO_OPTION_FRAME;
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <BSP_STM32_I2C_MemRead+0x90>)
 8007596:	634a      	str	r2, [r1, #52]	; 0x34
	hi2c->TXDR = MemAddress;
 8007598:	62ab      	str	r3, [r5, #40]	; 0x28
	MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800759a:	4a08      	ldr	r2, [pc, #32]	; (80075bc <BSP_STM32_I2C_MemRead+0x94>)
 800759c:	686b      	ldr	r3, [r5, #4]
 800759e:	4013      	ands	r3, r2
 80075a0:	431c      	orrs	r4, r3
 80075a2:	f444 3490 	orr.w	r4, r4, #73728	; 0x12000
 80075a6:	606c      	str	r4, [r5, #4]
	hi2c->CR1 |= I2C_CR1_ERRIE | I2C_CR1_TCIE | I2C_CR1_STOPIE | I2C_CR1_NACKIE | I2C_CR1_TXIE | I2C_CR1_RXIE;
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	f043 03f6 	orr.w	r3, r3, #246	; 0xf6
 80075ae:	602b      	str	r3, [r5, #0]
}
 80075b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BSP_BDMA_StartIT(ctx, (uint32_t)&hi2c->RXDR, (uint32_t)pData, Size);
 80075b2:	f7fe f821 	bl	80055f8 <BSP_BDMA_StartIT>
		break;
 80075b6:	e7d5      	b.n	8007564 <BSP_STM32_I2C_MemRead+0x3c>
 80075b8:	ffff0000 	.word	0xffff0000
 80075bc:	fc009800 	.word	0xfc009800

080075c0 <BSP_STM32_I2C_IRQHandler>:


uint8_t BSP_STM32_I2C_IRQHandler(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
	switch (ctx->dma_mode) {
 80075c0:	680a      	ldr	r2, [r1, #0]
uint8_t BSP_STM32_I2C_IRQHandler(I2C_TypeDef *hi2c, TxRxContext_TypeDef *ctx) {
 80075c2:	4603      	mov	r3, r0
 80075c4:	b470      	push	{r4, r5, r6}
	switch (ctx->dma_mode) {
 80075c6:	b332      	cbz	r2, 8007616 <BSP_STM32_I2C_IRQHandler+0x56>
 80075c8:	3a01      	subs	r2, #1
 80075ca:	2a01      	cmp	r2, #1
 80075cc:	d834      	bhi.n	8007638 <BSP_STM32_I2C_IRQHandler+0x78>
	uint32_t itflags   = hi2c->ISR;
 80075ce:	6982      	ldr	r2, [r0, #24]
	uint32_t itsources = hi2c->CR1;
 80075d0:	6800      	ldr	r0, [r0, #0]
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 80075d2:	06d5      	lsls	r5, r2, #27
 80075d4:	d501      	bpl.n	80075da <BSP_STM32_I2C_IRQHandler+0x1a>
 80075d6:	06c4      	lsls	r4, r0, #27
 80075d8:	d434      	bmi.n	8007644 <BSP_STM32_I2C_IRQHandler+0x84>
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 80075da:	0656      	lsls	r6, r2, #25
 80075dc:	d514      	bpl.n	8007608 <BSP_STM32_I2C_IRQHandler+0x48>
 80075de:	0645      	lsls	r5, r0, #25
 80075e0:	d512      	bpl.n	8007608 <BSP_STM32_I2C_IRQHandler+0x48>
		uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80075e2:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80075e4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
		MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80075e6:	685e      	ldr	r6, [r3, #4]
		uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80075e8:	0421      	lsls	r1, r4, #16
 80075ea:	f3c5 0409 	ubfx	r4, r5, #0, #10
		MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80075ee:	4d42      	ldr	r5, [pc, #264]	; (80076f8 <BSP_STM32_I2C_IRQHandler+0x138>)
		uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80075f0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
		MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80075f4:	4035      	ands	r5, r6
 80075f6:	4329      	orrs	r1, r5
 80075f8:	4321      	orrs	r1, r4
 80075fa:	4c40      	ldr	r4, [pc, #256]	; (80076fc <BSP_STM32_I2C_IRQHandler+0x13c>)
 80075fc:	430c      	orrs	r4, r1
 80075fe:	605c      	str	r4, [r3, #4]
		hi2c->CR1 |= I2C_CR1_RXDMAEN;
 8007600:	6819      	ldr	r1, [r3, #0]
 8007602:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007606:	6019      	str	r1, [r3, #0]
	if (((itflags & I2C_ISR_STOPF) > 0) && ((itsources & I2C_CR1_STOPIE) > 0)) {
 8007608:	0691      	lsls	r1, r2, #26
 800760a:	d501      	bpl.n	8007610 <BSP_STM32_I2C_IRQHandler+0x50>
 800760c:	0682      	lsls	r2, r0, #26
 800760e:	d40e      	bmi.n	800762e <BSP_STM32_I2C_IRQHandler+0x6e>
	return BSP_BUSY;
 8007610:	2002      	movs	r0, #2
	case TXRX_CTX_MODE_DMA:
	case TXRX_CTX_MODE_BDMA:
		return _I2C_IRQHandler_DMA(hi2c, ctx);
	}
	return _I2C_IRQHandler_IT(hi2c, ctx);
}
 8007612:	bc70      	pop	{r4, r5, r6}
 8007614:	4770      	bx	lr
	uint32_t itflags   = hi2c->ISR;
 8007616:	6980      	ldr	r0, [r0, #24]
	uint32_t itsources = hi2c->CR1;
 8007618:	681c      	ldr	r4, [r3, #0]
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 800761a:	06c6      	lsls	r6, r0, #27
 800761c:	d43f      	bmi.n	800769e <BSP_STM32_I2C_IRQHandler+0xde>
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 800761e:	0645      	lsls	r5, r0, #25
 8007620:	d452      	bmi.n	80076c8 <BSP_STM32_I2C_IRQHandler+0x108>
	if (((itflags & I2C_ISR_RXNE) > 0) && ((itsources & I2C_CR1_RXIE) > 0)) {
 8007622:	0746      	lsls	r6, r0, #29
 8007624:	d444      	bmi.n	80076b0 <BSP_STM32_I2C_IRQHandler+0xf0>
	if (((itflags & I2C_ISR_STOPF) > 0) && ((itsources & I2C_CR1_STOPIE) > 0)) {
 8007626:	0682      	lsls	r2, r0, #26
 8007628:	d5f2      	bpl.n	8007610 <BSP_STM32_I2C_IRQHandler+0x50>
 800762a:	06a6      	lsls	r6, r4, #26
 800762c:	d5f0      	bpl.n	8007610 <BSP_STM32_I2C_IRQHandler+0x50>
		hi2c->ICR = I2C_ICR_STOPCF;
 800762e:	2220      	movs	r2, #32
		return BSP_OK;
 8007630:	2000      	movs	r0, #0
}
 8007632:	bc70      	pop	{r4, r5, r6}
		hi2c->ICR = I2C_ICR_STOPCF;
 8007634:	61da      	str	r2, [r3, #28]
}
 8007636:	4770      	bx	lr
	uint32_t itflags   = hi2c->ISR;
 8007638:	6982      	ldr	r2, [r0, #24]
	uint32_t itsources = hi2c->CR1;
 800763a:	6800      	ldr	r0, [r0, #0]
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 800763c:	06d4      	lsls	r4, r2, #27
 800763e:	d50d      	bpl.n	800765c <BSP_STM32_I2C_IRQHandler+0x9c>
 8007640:	06c6      	lsls	r6, r0, #27
 8007642:	d50b      	bpl.n	800765c <BSP_STM32_I2C_IRQHandler+0x9c>
	    hi2c->ICR = I2C_ICR_NACKCF;
 8007644:	2210      	movs	r2, #16
 8007646:	61da      	str	r2, [r3, #28]
	    if ((hi2c->ISR & I2C_ISR_TXIS) > 0) hi2c->TXDR = 0x00U;
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	0795      	lsls	r5, r2, #30
 800764c:	d501      	bpl.n	8007652 <BSP_STM32_I2C_IRQHandler+0x92>
 800764e:	2200      	movs	r2, #0
 8007650:	629a      	str	r2, [r3, #40]	; 0x28
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	07d6      	lsls	r6, r2, #31
 8007656:	d549      	bpl.n	80076ec <BSP_STM32_I2C_IRQHandler+0x12c>
	    return BSP_ERROR;
 8007658:	2001      	movs	r0, #1
 800765a:	e7da      	b.n	8007612 <BSP_STM32_I2C_IRQHandler+0x52>
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 800765c:	0654      	lsls	r4, r2, #25
 800765e:	d510      	bpl.n	8007682 <BSP_STM32_I2C_IRQHandler+0xc2>
 8007660:	0646      	lsls	r6, r0, #25
 8007662:	d50e      	bpl.n	8007682 <BSP_STM32_I2C_IRQHandler+0xc2>
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007664:	6acc      	ldr	r4, [r1, #44]	; 0x2c
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007666:	685d      	ldr	r5, [r3, #4]
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007668:	0424      	lsls	r4, r4, #16
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800766a:	4e23      	ldr	r6, [pc, #140]	; (80076f8 <BSP_STM32_I2C_IRQHandler+0x138>)
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 800766c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 8007670:	4035      	ands	r5, r6
 8007672:	432c      	orrs	r4, r5
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 8007674:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8007676:	f3c5 0509 	ubfx	r5, r5, #0, #10
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 800767a:	432c      	orrs	r4, r5
 800767c:	4d1f      	ldr	r5, [pc, #124]	; (80076fc <BSP_STM32_I2C_IRQHandler+0x13c>)
 800767e:	4325      	orrs	r5, r4
 8007680:	605d      	str	r5, [r3, #4]
	if (((itflags & I2C_ISR_RXNE) > 0) && ((itsources & I2C_CR1_RXIE) > 0)) {
 8007682:	0755      	lsls	r5, r2, #29
 8007684:	d5c0      	bpl.n	8007608 <BSP_STM32_I2C_IRQHandler+0x48>
 8007686:	0744      	lsls	r4, r0, #29
 8007688:	d5be      	bpl.n	8007608 <BSP_STM32_I2C_IRQHandler+0x48>
	    *i2c_ctx->pData = (uint8_t)hi2c->RXDR;
 800768a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800768c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800768e:	7025      	strb	r5, [r4, #0]
	    i2c_ctx->pData++;
 8007690:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007692:	3401      	adds	r4, #1
 8007694:	628c      	str	r4, [r1, #40]	; 0x28
	    i2c_ctx->size--;
 8007696:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8007698:	3c01      	subs	r4, #1
 800769a:	62cc      	str	r4, [r1, #44]	; 0x2c
 800769c:	e7b4      	b.n	8007608 <BSP_STM32_I2C_IRQHandler+0x48>
	if (((itflags & I2C_ISR_NACKF) > 0) && ((itsources & I2C_CR1_NACKIE) > 0)) {
 800769e:	06e5      	lsls	r5, r4, #27
 80076a0:	d5bd      	bpl.n	800761e <BSP_STM32_I2C_IRQHandler+0x5e>
	    hi2c->ICR = I2C_ICR_NACKCF;
 80076a2:	2110      	movs	r1, #16
 80076a4:	61d9      	str	r1, [r3, #28]
	    if ((hi2c->ISR & I2C_ISR_TXIS) > 0) hi2c->TXDR = 0x00U;
 80076a6:	6999      	ldr	r1, [r3, #24]
 80076a8:	0789      	lsls	r1, r1, #30
 80076aa:	d5d2      	bpl.n	8007652 <BSP_STM32_I2C_IRQHandler+0x92>
 80076ac:	629a      	str	r2, [r3, #40]	; 0x28
 80076ae:	e7d0      	b.n	8007652 <BSP_STM32_I2C_IRQHandler+0x92>
	if (((itflags & I2C_ISR_RXNE) > 0) && ((itsources & I2C_CR1_RXIE) > 0)) {
 80076b0:	0765      	lsls	r5, r4, #29
 80076b2:	d5b8      	bpl.n	8007626 <BSP_STM32_I2C_IRQHandler+0x66>
	    *i2c_ctx->pData = (uint8_t)hi2c->RXDR;
 80076b4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80076b6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80076b8:	7015      	strb	r5, [r2, #0]
	    i2c_ctx->pData++;
 80076ba:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80076bc:	3201      	adds	r2, #1
 80076be:	628a      	str	r2, [r1, #40]	; 0x28
	    i2c_ctx->size--;
 80076c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80076c2:	3a01      	subs	r2, #1
 80076c4:	62ca      	str	r2, [r1, #44]	; 0x2c
 80076c6:	e7ae      	b.n	8007626 <BSP_STM32_I2C_IRQHandler+0x66>
	if (((itflags & I2C_ISR_TC) > 0) && ((itsources & I2C_CR1_TCIE) > 0)) {
 80076c8:	0662      	lsls	r2, r4, #25
 80076ca:	d5aa      	bpl.n	8007622 <BSP_STM32_I2C_IRQHandler+0x62>
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80076cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076ce:	685d      	ldr	r5, [r3, #4]
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80076d0:	0412      	lsls	r2, r2, #16
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076d2:	4e09      	ldr	r6, [pc, #36]	; (80076f8 <BSP_STM32_I2C_IRQHandler+0x138>)
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80076d4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076d8:	4035      	ands	r5, r6
 80076da:	432a      	orrs	r2, r5
	    uint32_t tmp = ((uint32_t)(((uint32_t)i2c_ctx->devaddr & I2C_CR2_SADD) | (((uint32_t)i2c_ctx->size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)direction) & (~0x80000000U));
 80076dc:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80076de:	f3c5 0509 	ubfx	r5, r5, #0, #10
	    MODIFY_REG(hi2c->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(direction >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), tmp);
 80076e2:	432a      	orrs	r2, r5
 80076e4:	4d05      	ldr	r5, [pc, #20]	; (80076fc <BSP_STM32_I2C_IRQHandler+0x13c>)
 80076e6:	4315      	orrs	r5, r2
 80076e8:	605d      	str	r5, [r3, #4]
 80076ea:	e79a      	b.n	8007622 <BSP_STM32_I2C_IRQHandler+0x62>
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 80076ec:	699a      	ldr	r2, [r3, #24]
	    return BSP_ERROR;
 80076ee:	2001      	movs	r0, #1
	    if ((hi2c->ISR & I2C_ISR_TXE) == 0) hi2c->ISR |= I2C_ISR_TXE;
 80076f0:	4302      	orrs	r2, r0
 80076f2:	619a      	str	r2, [r3, #24]
 80076f4:	e78d      	b.n	8007612 <BSP_STM32_I2C_IRQHandler+0x52>
 80076f6:	bf00      	nop
 80076f8:	fc009800 	.word	0xfc009800
 80076fc:	02002400 	.word	0x02002400

08007700 <BSP_STM32_I2S_IRQHandler>:
	return BSP_OK;
}



uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 8007700:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}

	I2SContext_TypeDef * i2s_ctx = (I2SContext_TypeDef *)ctx->ctxmem;

	uint32_t	reg_ier = hi2s->IER;
 8007704:	6904      	ldr	r4, [r0, #16]
uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 8007706:	4689      	mov	r9, r1
	uint32_t	reg_sr = hi2s->SR;
 8007708:	6943      	ldr	r3, [r0, #20]
uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 800770a:	b082      	sub	sp, #8
	// Callback management
	void (* pCallback_TE)(TxRxContext_TypeDef * ctx);
	void (* pCallback_HT)(TxRxContext_TypeDef * ctx);
	void (* pCallback_TC)(TxRxContext_TypeDef * ctx);

	pCallback_TE = (void *)ctx->callback_TE;
 800770c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
uint8_t BSP_STM32_I2S_IRQHandler(SPI_TypeDef *hi2s, TxRxContext_TypeDef *ctx) {
 800770e:	4605      	mov	r5, r0
	uint32_t	trigger = reg_ier & reg_sr;
 8007710:	401c      	ands	r4, r3
	pCallback_TC = (void *)ctx->callback_TC;

	__IO int16_t *ptxdr = (__IO int16_t *)(&(hi2s->TXDR));

	// TX Mode
	if (((trigger & I2S_FLAG_TXP) == I2S_FLAG_TXP) && ((trigger & I2S_FLAG_UDR)== 0)) {
 8007712:	f004 0322 	and.w	r3, r4, #34	; 0x22
 8007716:	2b02      	cmp	r3, #2
	pCallback_TC = (void *)ctx->callback_TC;
 8007718:	e9d1 7107 	ldrd	r7, r1, [r1, #28]
	if (((trigger & I2S_FLAG_TXP) == I2S_FLAG_TXP) && ((trigger & I2S_FLAG_UDR)== 0)) {
 800771c:	d006      	beq.n	800772c <BSP_STM32_I2S_IRQHandler+0x2c>
			if (ctx->callback_TC > 0) pCallback_TC(ctx);
		}
	}

	// Underrun error
	if ((trigger & I2S_FLAG_UDR) == I2S_FLAG_UDR) {
 800771e:	f014 0420 	ands.w	r4, r4, #32
 8007722:	d12b      	bne.n	800777c <BSP_STM32_I2S_IRQHandler+0x7c>
		// Execute error callback if set
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
		return BSP_ERROR;
	}

	return BSP_OK;
 8007724:	4620      	mov	r0, r4
}
 8007726:	b002      	add	sp, #8
 8007728:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
		*ptxdr = *i2s_ctx->pData;
 800772c:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
		i2s_ctx->index+=2;
 8007730:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
		*ptxdr = *i2s_ctx->pData;
 8007734:	f932 0b02 	ldrsh.w	r0, [r2], #2
		i2s_ctx->index+=2;
 8007738:	3302      	adds	r3, #2
		*ptxdr = *i2s_ctx->pData;
 800773a:	8428      	strh	r0, [r5, #32]
		i2s_ctx->pData++;
 800773c:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
		if (i2s_ctx->index == (i2s_ctx->size >> 1)) {
 8007740:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
		i2s_ctx->index+=2;
 8007744:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
			 if (ctx->callback_HT > 0) pCallback_HT(ctx);
 8007748:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800774c:	d106      	bne.n	800775c <BSP_STM32_I2S_IRQHandler+0x5c>
 800774e:	b12f      	cbz	r7, 800775c <BSP_STM32_I2S_IRQHandler+0x5c>
 8007750:	4648      	mov	r0, r9
 8007752:	9101      	str	r1, [sp, #4]
 8007754:	47b8      	blx	r7
		if (i2s_ctx->index >= i2s_ctx->size) {
 8007756:	9901      	ldr	r1, [sp, #4]
 8007758:	e9d9 230b 	ldrd	r2, r3, [r9, #44]	; 0x2c
 800775c:	429a      	cmp	r2, r3
 800775e:	d8de      	bhi.n	800771e <BSP_STM32_I2S_IRQHandler+0x1e>
			hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 8007760:	692b      	ldr	r3, [r5, #16]
 8007762:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007766:	612b      	str	r3, [r5, #16]
			i2s_ctx->status = I2S_STATUS_READY;
 8007768:	2300      	movs	r3, #0
 800776a:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
			if (ctx->callback_TC > 0) pCallback_TC(ctx);
 800776e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0d3      	beq.n	800771e <BSP_STM32_I2S_IRQHandler+0x1e>
 8007776:	4648      	mov	r0, r9
 8007778:	4788      	blx	r1
 800777a:	e7d0      	b.n	800771e <BSP_STM32_I2S_IRQHandler+0x1e>
		hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 800777c:	692b      	ldr	r3, [r5, #16]
		i2s_ctx->status = I2S_STATUS_READY;
 800777e:	2200      	movs	r2, #0
		hi2s->IER &= ~(I2S_FLAG_TXP | I2S_FLAG_UDR);
 8007780:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007784:	612b      	str	r3, [r5, #16]
		hi2s->IFCR |= I2S_FLAG_UDR;
 8007786:	69ab      	ldr	r3, [r5, #24]
 8007788:	f043 0320 	orr.w	r3, r3, #32
 800778c:	61ab      	str	r3, [r5, #24]
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 800778e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
		i2s_ctx->status = I2S_STATUS_READY;
 8007792:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
	    if (ctx->callback_TE > 0) pCallback_TE(ctx);
 8007796:	b12b      	cbz	r3, 80077a4 <BSP_STM32_I2S_IRQHandler+0xa4>
 8007798:	4648      	mov	r0, r9
 800779a:	47b0      	blx	r6
		return BSP_ERROR;
 800779c:	2001      	movs	r0, #1
}
 800779e:	b002      	add	sp, #8
 80077a0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
		return BSP_ERROR;
 80077a4:	2001      	movs	r0, #1
}
 80077a6:	b002      	add	sp, #8
 80077a8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

080077ac <BSP_STM32_JPEG_Init>:

	return BSP_BUSY;
}


uint8_t BSP_STM32_JPEG_Init(JPEG_TypeDef * _hjpeg) {
 80077ac:	4603      	mov	r3, r0

	// Enable header processing
	_hjpeg->CONFR1 |= JPEG_CONFR1_HDR;

	return BSP_OK;
}
 80077ae:	2000      	movs	r0, #0
	_hjpeg->CR |=  JPEG_CR_JCEN;
 80077b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	f022 0201 	bic.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
	MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 80077c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_IFF;
 80077c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_OFF;
 80077d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
	_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 80077d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077da:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80077de:	639a      	str	r2, [r3, #56]	; 0x38
	_hjpeg->CONFR1 |= JPEG_CONFR1_HDR;
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e6:	605a      	str	r2, [r3, #4]
}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop

080077ec <BSP_STM32_JPEG_Decode>:

uint8_t BSP_STM32_JPEG_Decode(JPEG_TypeDef * _hjpeg, uint32_t JPEG_Addr, uint32_t JPEG_Size, uint32_t OutputBuf_Addr, uint32_t OutputBuf_Size) {
 80077ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_hjpeg->CONFR1 |= JPEG_CONFR1_DE;
 80077f0:	6845      	ldr	r5, [r0, #4]
	JPEGctx.CSSType = 0;
 80077f2:	2700      	movs	r7, #0
uint8_t BSP_STM32_JPEG_Decode(JPEG_TypeDef * _hjpeg, uint32_t JPEG_Addr, uint32_t JPEG_Size, uint32_t OutputBuf_Addr, uint32_t OutputBuf_Size) {
 80077f4:	9c06      	ldr	r4, [sp, #24]
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 80077f6:	f04f 0e01 	mov.w	lr, #1
	_hjpeg->CONFR1 |= JPEG_CONFR1_DE;
 80077fa:	f045 0508 	orr.w	r5, r5, #8
	return BSP_OK;
 80077fe:	463e      	mov	r6, r7
 8007800:	46bc      	mov	ip, r7
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 8007802:	46b8      	mov	r8, r7
	_hjpeg->CONFR1 |= JPEG_CONFR1_DE;
 8007804:	6045      	str	r5, [r0, #4]
	_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 8007806:	6805      	ldr	r5, [r0, #0]
 8007808:	f025 0501 	bic.w	r5, r5, #1
 800780c:	6005      	str	r5, [r0, #0]
	MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 800780e:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8007810:	f025 057e 	bic.w	r5, r5, #126	; 0x7e
 8007814:	6305      	str	r5, [r0, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_IFF;
 8007816:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8007818:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 800781c:	6305      	str	r5, [r0, #48]	; 0x30
	_hjpeg->CR |= JPEG_CR_OFF;
 800781e:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8007820:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8007824:	6305      	str	r5, [r0, #48]	; 0x30
	_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 8007826:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8007828:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 800782c:	6385      	str	r5, [r0, #56]	; 0x38
	_hjpeg->CONFR0 |=  JPEG_CONFR0_START;
 800782e:	6805      	ldr	r5, [r0, #0]
 8007830:	f045 0501 	orr.w	r5, r5, #1
 8007834:	6005      	str	r5, [r0, #0]
	JPEGctx.CSSType = 0;
 8007836:	4d54      	ldr	r5, [pc, #336]	; (8007988 <BSP_STM32_JPEG_Decode+0x19c>)
 8007838:	e9c5 4704 	strd	r4, r7, [r5, #16]
	JPEGctx.JPEGEnd = JPEG_Addr + JPEG_Size;
 800783c:	188c      	adds	r4, r1, r2
	JPEGctx.ColorSpace = 0;
 800783e:	61af      	str	r7, [r5, #24]
	JPEGctx.ImageWidth = 0;
 8007840:	e9c5 7707 	strd	r7, r7, [r5, #28]
	JPEGctx.JPEGSize = JPEG_Size;
 8007844:	e9c5 1200 	strd	r1, r2, [r5]
	JPEGctx.JPEGEnd = JPEG_Addr + JPEG_Size;
 8007848:	e9c5 4302 	strd	r4, r3, [r5, #8]
	if ((_hjpeg->SR) & JPEG_FLAG_HPDF) {
 800784c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800784e:	0652      	lsls	r2, r2, #25
 8007850:	d516      	bpl.n	8007880 <BSP_STM32_JPEG_Decode+0x94>
		switch ((_hjpeg->CONFR1 & JPEG_CONFR1_NF)) {
 8007852:	6842      	ldr	r2, [r0, #4]
 8007854:	f002 0203 	and.w	r2, r2, #3
 8007858:	2a02      	cmp	r2, #2
 800785a:	d05a      	beq.n	8007912 <BSP_STM32_JPEG_Decode+0x126>
 800785c:	2a03      	cmp	r2, #3
 800785e:	d040      	beq.n	80078e2 <BSP_STM32_JPEG_Decode+0xf6>
 8007860:	2a00      	cmp	r2, #0
 8007862:	d033      	beq.n	80078cc <BSP_STM32_JPEG_Decode+0xe0>

	// Decode process
	while (_JPEG_DecProcess(_hjpeg) == BSP_BUSY) {};

	return BSP_OK;
}
 8007864:	2000      	movs	r0, #0
 8007866:	f8c5 c018 	str.w	ip, [r5, #24]
 800786a:	6029      	str	r1, [r5, #0]
 800786c:	60eb      	str	r3, [r5, #12]
	return BSP_OK;
 800786e:	e9c5 6707 	strd	r6, r7, [r5, #28]
}
 8007872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while ((((_hjpeg->SR) & JPEG_FLAG_IFNFF) > 0) && (JPEGctx.JPEGAddr < JPEGctx.JPEGEnd)) {
 8007876:	42a1      	cmp	r1, r4
 8007878:	d20b      	bcs.n	8007892 <BSP_STM32_JPEG_Decode+0xa6>
		_hjpeg->DIR = *((uint32_t *)JPEGctx.JPEGAddr);
 800787a:	f851 2b04 	ldr.w	r2, [r1], #4
 800787e:	6402      	str	r2, [r0, #64]	; 0x40
	while ((((_hjpeg->SR) & JPEG_FLAG_IFNFF) > 0) && (JPEGctx.JPEGAddr < JPEGctx.JPEGEnd)) {
 8007880:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007882:	0752      	lsls	r2, r2, #29
 8007884:	d4f7      	bmi.n	8007876 <BSP_STM32_JPEG_Decode+0x8a>
	while ((_hjpeg->SR) & JPEG_FLAG_OFNEF) {
 8007886:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007888:	06d2      	lsls	r2, r2, #27
 800788a:	d505      	bpl.n	8007898 <BSP_STM32_JPEG_Decode+0xac>
		*((uint32_t *)JPEGctx.OutputBufAddr) = _hjpeg->DOR;
 800788c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800788e:	f843 2b04 	str.w	r2, [r3], #4
	while ((_hjpeg->SR) & JPEG_FLAG_OFNEF) {
 8007892:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007894:	06d2      	lsls	r2, r2, #27
 8007896:	d4f9      	bmi.n	800788c <BSP_STM32_JPEG_Decode+0xa0>
	if (((_hjpeg->SR) & (JPEG_FLAG_EOCF | JPEG_FLAG_OFNEF | JPEG_FLAG_OFTF)) == JPEG_FLAG_EOCF) {
 8007898:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800789a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800789e:	2a20      	cmp	r2, #32
 80078a0:	d1d4      	bne.n	800784c <BSP_STM32_JPEG_Decode+0x60>
		_hjpeg->CONFR0 &=  ~JPEG_CONFR0_START;
 80078a2:	6802      	ldr	r2, [r0, #0]
 80078a4:	60eb      	str	r3, [r5, #12]
 80078a6:	f022 0201 	bic.w	r2, r2, #1
 80078aa:	f8c5 c018 	str.w	ip, [r5, #24]
 80078ae:	6029      	str	r1, [r5, #0]
 80078b0:	6002      	str	r2, [r0, #0]
		MODIFY_REG(_hjpeg->CR, JPEG_INTERRUPT_MASK, 0UL);
 80078b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80078b4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80078b8:	6303      	str	r3, [r0, #48]	; 0x30
		_hjpeg->CFR |= (JPEG_FLAG_ALL & (JPEG_FLAG_EOCF | JPEG_FLAG_HPDF));
 80078ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80078bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078c0:	e9c5 6707 	strd	r6, r7, [r5, #28]
 80078c4:	6383      	str	r3, [r0, #56]	; 0x38
}
 80078c6:	2000      	movs	r0, #0
 80078c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			JPEGctx.ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80078cc:	4694      	mov	ip, r2
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 80078ce:	616a      	str	r2, [r5, #20]
		JPEGctx.ImageHeight = (_hjpeg->CONFR1 & 0xFFFF0000UL) >> 16;
 80078d0:	6847      	ldr	r7, [r0, #4]
		JPEGctx.ImageWidth  = (_hjpeg->CONFR3 & 0xFFFF0000UL) >> 16;
 80078d2:	68c6      	ldr	r6, [r0, #12]
		_hjpeg->CFR |= JPEG_FLAG_HPDF;
 80078d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
		JPEGctx.ImageHeight = (_hjpeg->CONFR1 & 0xFFFF0000UL) >> 16;
 80078d6:	0c3f      	lsrs	r7, r7, #16
		JPEGctx.ImageWidth  = (_hjpeg->CONFR3 & 0xFFFF0000UL) >> 16;
 80078d8:	0c36      	lsrs	r6, r6, #16
		_hjpeg->CFR |= JPEG_FLAG_HPDF;
 80078da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078de:	6382      	str	r2, [r0, #56]	; 0x38
 80078e0:	e7ce      	b.n	8007880 <BSP_STM32_JPEG_Decode+0x94>
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80078e2:	6902      	ldr	r2, [r0, #16]
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80078e4:	6947      	ldr	r7, [r0, #20]
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80078e6:	6986      	ldr	r6, [r0, #24]
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80078e8:	f3c2 1203 	ubfx	r2, r2, #4, #4
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 80078ec:	f017 0ff0 	tst.w	r7, #240	; 0xf0
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80078f0:	ea4f 1c17 	mov.w	ip, r7, lsr #4
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80078f4:	ea4f 1616 	mov.w	r6, r6, lsr #4
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 80078f8:	d123      	bne.n	8007942 <BSP_STM32_JPEG_Decode+0x156>
 80078fa:	2a01      	cmp	r2, #1
 80078fc:	d121      	bne.n	8007942 <BSP_STM32_JPEG_Decode+0x156>
 80078fe:	f016 0f0f 	tst.w	r6, #15
			JPEGctx.ColorSpace = JPEG_CMYK_COLORSPACE;
 8007902:	f04f 0c30 	mov.w	ip, #48	; 0x30
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8007906:	bf0c      	ite	eq
 8007908:	2201      	moveq	r2, #1
 800790a:	2200      	movne	r2, #0
 800790c:	0052      	lsls	r2, r2, #1
 800790e:	616a      	str	r2, [r5, #20]
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007910:	e7de      	b.n	80078d0 <BSP_STM32_JPEG_Decode+0xe4>
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007912:	6902      	ldr	r2, [r0, #16]
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007914:	6947      	ldr	r7, [r0, #20]
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007916:	6986      	ldr	r6, [r0, #24]
			yblockNb  = (_hjpeg->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007918:	f3c2 1203 	ubfx	r2, r2, #4, #4
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 800791c:	f017 0ff0 	tst.w	r7, #240	; 0xf0
			cBblockNb = (_hjpeg->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007920:	ea4f 1c17 	mov.w	ip, r7, lsr #4
			cRblockNb = (_hjpeg->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007924:	ea4f 1616 	mov.w	r6, r6, lsr #4
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8007928:	d117      	bne.n	800795a <BSP_STM32_JPEG_Decode+0x16e>
 800792a:	2a01      	cmp	r2, #1
 800792c:	d115      	bne.n	800795a <BSP_STM32_JPEG_Decode+0x16e>
 800792e:	f016 0f0f 	tst.w	r6, #15
			JPEGctx.ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007932:	f04f 0c10 	mov.w	ip, #16
			if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_422_SUBSAMPLING; // 16x8 block
 8007936:	bf0c      	ite	eq
 8007938:	2201      	moveq	r2, #1
 800793a:	2200      	movne	r2, #0
 800793c:	0052      	lsls	r2, r2, #1
 800793e:	616a      	str	r2, [r5, #20]
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007940:	e7c6      	b.n	80078d0 <BSP_STM32_JPEG_Decode+0xe4>
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007942:	ea4c 0c06 	orr.w	ip, ip, r6
 8007946:	f01c 0f0f 	tst.w	ip, #15
 800794a:	d117      	bne.n	800797c <BSP_STM32_JPEG_Decode+0x190>
 800794c:	2a03      	cmp	r2, #3
 800794e:	d115      	bne.n	800797c <BSP_STM32_JPEG_Decode+0x190>
			JPEGctx.ColorSpace = JPEG_CMYK_COLORSPACE;
 8007950:	f04f 0c30 	mov.w	ip, #48	; 0x30
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 8007954:	f8c5 e014 	str.w	lr, [r5, #20]
 8007958:	e7ba      	b.n	80078d0 <BSP_STM32_JPEG_Decode+0xe4>
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 800795a:	ea4c 0c06 	orr.w	ip, ip, r6
 800795e:	f01c 0f0f 	tst.w	ip, #15
 8007962:	d106      	bne.n	8007972 <BSP_STM32_JPEG_Decode+0x186>
 8007964:	2a03      	cmp	r2, #3
 8007966:	d104      	bne.n	8007972 <BSP_STM32_JPEG_Decode+0x186>
			JPEGctx.ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007968:	f04f 0c10 	mov.w	ip, #16
			if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL)) JPEGctx.CSSType = JPEG_420_SUBSAMPLING;
 800796c:	f8c5 e014 	str.w	lr, [r5, #20]
 8007970:	e7ae      	b.n	80078d0 <BSP_STM32_JPEG_Decode+0xe4>
			JPEGctx.ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007972:	f04f 0c10 	mov.w	ip, #16
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 8007976:	f8c5 8014 	str.w	r8, [r5, #20]
 800797a:	e7a9      	b.n	80078d0 <BSP_STM32_JPEG_Decode+0xe4>
			JPEGctx.ColorSpace = JPEG_CMYK_COLORSPACE;
 800797c:	f04f 0c30 	mov.w	ip, #48	; 0x30
			JPEGctx.CSSType = JPEG_444_SUBSAMPLING;
 8007980:	f8c5 8014 	str.w	r8, [r5, #20]
 8007984:	e7a4      	b.n	80078d0 <BSP_STM32_JPEG_Decode+0xe4>
 8007986:	bf00      	nop
 8007988:	24000490 	.word	0x24000490

0800798c <BSP_STM32_JPEG_GetWidth>:

uint32_t BSP_STM32_JPEG_GetWidth(JPEG_TypeDef * _hjpeg) {
	UNUSED(_hjpeg);

	return JPEGctx.ImageWidth;
 800798c:	4b01      	ldr	r3, [pc, #4]	; (8007994 <BSP_STM32_JPEG_GetWidth+0x8>)
}
 800798e:	69d8      	ldr	r0, [r3, #28]
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	24000490 	.word	0x24000490

08007998 <BSP_STM32_JPEG_GetHeight>:

uint32_t BSP_STM32_JPEG_GetHeight(JPEG_TypeDef * _hjpeg) {
	UNUSED(_hjpeg);

	return JPEGctx.ImageHeight;
 8007998:	4b01      	ldr	r3, [pc, #4]	; (80079a0 <BSP_STM32_JPEG_GetHeight+0x8>)
}
 800799a:	6a18      	ldr	r0, [r3, #32]
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	24000490 	.word	0x24000490

080079a4 <BSP_STM32_JPEG_GetCSS>:

uint32_t BSP_STM32_JPEG_GetCSS(JPEG_TypeDef * _hjpeg) {
	UNUSED(_hjpeg);

	return JPEGctx.CSSType;
 80079a4:	4b01      	ldr	r3, [pc, #4]	; (80079ac <BSP_STM32_JPEG_GetCSS+0x8>)
}
 80079a6:	6958      	ldr	r0, [r3, #20]
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	24000490 	.word	0x24000490

080079b0 <BSP_STM32_JPEG_GetColorSpace>:

uint32_t BSP_STM32_JPEG_GetColorSpace(JPEG_TypeDef * _hjpeg) {
	UNUSED(_hjpeg);

	return JPEGctx.ColorSpace;
 80079b0:	4b01      	ldr	r3, [pc, #4]	; (80079b8 <BSP_STM32_JPEG_GetColorSpace+0x8>)
}
 80079b2:	6998      	ldr	r0, [r3, #24]
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	24000490 	.word	0x24000490

080079bc <BSP_STM32_LTDC_Init>:


uint8_t BSP_STM32_LTDC_Init(LTDC_TypeDef *hltdc, uint32_t lcd_h_sync, uint32_t lcd_v_sync,
		uint32_t lcd_acc_h_back_porch_width, uint32_t lcd_acc_v_back_porch_height,
		uint32_t lcd_acc_active_width, uint32_t lcd_acc_active_height,
		uint32_t lcd_total_width, uint32_t lcd_total_height, uint32_t bgcolor) {
 80079bc:	b430      	push	{r4, r5}

	// Checking if LTDC already initialized
	if (hltdc->GCR & LTDC_GCR_LTDCEN) return BSP_OK;
 80079be:	6984      	ldr	r4, [r0, #24]
 80079c0:	07e4      	lsls	r4, r4, #31
 80079c2:	d444      	bmi.n	8007a4e <BSP_STM32_LTDC_Init+0x92>
//	BSP_Delay(1);
//	RCC->APB3RSTR &= ~RCC_APB3RSTR_LTDCRST;
//	BSP_Delay(1);

	// Setting AXI QOS to higher priority for LTDC peripheral
	GPV->AXI_INI6_READ_QOS = 1UL;
 80079c4:	2401      	movs	r4, #1
	hltdc->GCR |= (uint32_t)(LTDC_HSPOLARITY_AL | LTDC_VSPOLARITY_AL | LTDC_DEPOLARITY_AL | LTDC_PCPOLARITY_IPC);

	// Set Synchronization size
	hltdc->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
	tmp = ((lcd_h_sync) << 16U);
	hltdc->SSCR |= (tmp | (lcd_v_sync));
 80079c6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
	GPV->AXI_INI6_READ_QOS = 1UL;
 80079ca:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <BSP_STM32_LTDC_Init+0x98>)

	// Set Accumulated Back porch
	hltdc->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
	tmp = ((lcd_acc_h_back_porch_width) << 16U);
	hltdc->BPCR |= (tmp | (lcd_acc_v_back_porch_height));
 80079cc:	9d02      	ldr	r5, [sp, #8]
	GPV->AXI_INI6_READ_QOS = 1UL;
 80079ce:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
	GPV->AXI_INI6_WRITE_QOS = 1UL;
 80079d2:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
	hltdc->BPCR |= (tmp | (lcd_acc_v_back_porch_height));
 80079d6:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
	hltdc->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80079da:	6982      	ldr	r2, [r0, #24]
	hltdc->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80079dc:	4c1e      	ldr	r4, [pc, #120]	; (8007a58 <BSP_STM32_LTDC_Init+0x9c>)
	hltdc->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80079de:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80079e2:	6182      	str	r2, [r0, #24]
	hltdc->GCR |= (uint32_t)(LTDC_HSPOLARITY_AL | LTDC_VSPOLARITY_AL | LTDC_DEPOLARITY_AL | LTDC_PCPOLARITY_IPC);
 80079e4:	6982      	ldr	r2, [r0, #24]
 80079e6:	6182      	str	r2, [r0, #24]
	hltdc->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80079e8:	6882      	ldr	r2, [r0, #8]
 80079ea:	4022      	ands	r2, r4
 80079ec:	6082      	str	r2, [r0, #8]
	hltdc->SSCR |= (tmp | (lcd_v_sync));
 80079ee:	6882      	ldr	r2, [r0, #8]
 80079f0:	4311      	orrs	r1, r2

	// Set Accumulated Active Width
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
	tmp = ((lcd_acc_active_width) << 16U);
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 80079f2:	e9dd 5203 	ldrd	r5, r2, [sp, #12]
	hltdc->SSCR |= (tmp | (lcd_v_sync));
 80079f6:	6081      	str	r1, [r0, #8]
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 80079f8:	ea42 4c05 	orr.w	ip, r2, r5, lsl #16
	hltdc->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80079fc:	68c2      	ldr	r2, [r0, #12]
 80079fe:	4022      	ands	r2, r4
 8007a00:	60c2      	str	r2, [r0, #12]
	hltdc->BPCR |= (tmp | (lcd_acc_v_back_porch_height));
 8007a02:	68c2      	ldr	r2, [r0, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60c3      	str	r3, [r0, #12]
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a08:	6903      	ldr	r3, [r0, #16]

	// Set Total Width
	hltdc->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
	tmp = ((lcd_total_width) << 16U);
	hltdc->TWCR |= (tmp | (lcd_total_height));
 8007a0a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a0e:	4023      	ands	r3, r4
	hltdc->TWCR |= (tmp | (lcd_total_height));
 8007a10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	hltdc->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a14:	6103      	str	r3, [r0, #16]
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007a16:	6901      	ldr	r1, [r0, #16]

	// Set the background color value
	hltdc->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
	hltdc->BCCR |= (bgcolor & 0x00FFFFFF);
 8007a18:	9b07      	ldr	r3, [sp, #28]
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007a1a:	ea4c 0101 	orr.w	r1, ip, r1
	hltdc->BCCR |= (bgcolor & 0x00FFFFFF);
 8007a1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	hltdc->AWCR |= (tmp | (lcd_acc_active_height));
 8007a22:	6101      	str	r1, [r0, #16]
	hltdc->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007a24:	6941      	ldr	r1, [r0, #20]
 8007a26:	4021      	ands	r1, r4
 8007a28:	6141      	str	r1, [r0, #20]
	hltdc->TWCR |= (tmp | (lcd_total_height));
 8007a2a:	6941      	ldr	r1, [r0, #20]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	6142      	str	r2, [r0, #20]
	hltdc->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007a30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007a32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007a36:	62c2      	str	r2, [r0, #44]	; 0x2c
	hltdc->BCCR |= (bgcolor & 0x00FFFFFF);
 8007a38:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	62c3      	str	r3, [r0, #44]	; 0x2c

	// Enable the Transfer Error and FIFO underrun interrupts */
	hltdc->IER |= LTDC_IER_TERRIE | LTDC_IER_FUIE;
 8007a3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a40:	f043 0306 	orr.w	r3, r3, #6
 8007a44:	6343      	str	r3, [r0, #52]	; 0x34

	// Enable LTDC by setting LTDCEN bit
	hltdc->GCR |= LTDC_GCR_LTDCEN;
 8007a46:	6983      	ldr	r3, [r0, #24]
 8007a48:	f043 0301 	orr.w	r3, r3, #1
 8007a4c:	6183      	str	r3, [r0, #24]

	return BSP_OK;
}
 8007a4e:	2000      	movs	r0, #0
 8007a50:	bc30      	pop	{r4, r5}
 8007a52:	4770      	bx	lr
 8007a54:	51047000 	.word	0x51047000
 8007a58:	f000f800 	.word	0xf000f800

08007a5c <BSP_STM32_LTDC_DisableLayer>:

uint8_t BSP_STM32_LTDC_DisableLayer(LTDC_TypeDef *hltdc, uint32_t layer) {
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007a5c:	f100 0384 	add.w	r3, r0, #132	; 0x84
 8007a60:	ea4f 1cc1 	mov.w	ip, r1, lsl #7

	// Disable Layer
	l->CR &= ~(LTDC_LxCR_LEN | LTDC_LxCR_CLUTEN | LTDC_LxCR_COLKEN);
 8007a64:	f853 200c 	ldr.w	r2, [r3, ip]
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007a68:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
	l->CR &= ~(LTDC_LxCR_LEN | LTDC_LxCR_CLUTEN | LTDC_LxCR_COLKEN);
 8007a6c:	f022 0213 	bic.w	r2, r2, #19
 8007a70:	f843 200c 	str.w	r2, [r3, ip]
	l->CKCR = 0x00000000;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60cb      	str	r3, [r1, #12]

	// Set the Reload on Vertical Blank
	hltdc->SRCR |= LTDC_SRCR_VBR;
 8007a78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a7a:	f043 0302 	orr.w	r3, r3, #2
 8007a7e:	6243      	str	r3, [r0, #36]	; 0x24

	// Wait for layer to disable
	while (l->CR & LTDC_LxCR_LEN) {};
 8007a80:	6808      	ldr	r0, [r1, #0]
 8007a82:	f010 0001 	ands.w	r0, r0, #1
 8007a86:	d1fb      	bne.n	8007a80 <BSP_STM32_LTDC_DisableLayer+0x24>

	return BSP_OK;
}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop

08007a8c <BSP_STM32_LTDC_EnableLayer>:

uint8_t BSP_STM32_LTDC_EnableLayer(LTDC_TypeDef *hltdc, uint32_t layer) {
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007a8c:	f100 0384 	add.w	r3, r0, #132	; 0x84
 8007a90:	ea4f 1cc1 	mov.w	ip, r1, lsl #7

	// Enable layer
	l->CR |= LTDC_LxCR_LEN;
 8007a94:	f853 200c 	ldr.w	r2, [r3, ip]
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007a98:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
	l->CR |= LTDC_LxCR_LEN;
 8007a9c:	f042 0201 	orr.w	r2, r2, #1
 8007aa0:	f843 200c 	str.w	r2, [r3, ip]

	// Set the Reload on Vertical Blank
	hltdc->SRCR |= LTDC_SRCR_VBR;
 8007aa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007aa6:	f043 0302 	orr.w	r3, r3, #2
 8007aaa:	6243      	str	r3, [r0, #36]	; 0x24

	// Wait for layer to enable
	while (!(l->CR & LTDC_LxCR_LEN)) {};
 8007aac:	680b      	ldr	r3, [r1, #0]
 8007aae:	07db      	lsls	r3, r3, #31
 8007ab0:	d5fc      	bpl.n	8007aac <BSP_STM32_LTDC_EnableLayer+0x20>

	return BSP_OK;
}
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop

08007ab8 <BSP_STM32_LTDC_ConfigLayer>:

uint8_t BSP_STM32_LTDC_ConfigLayer(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t alpha, uint32_t alpha0, uint32_t bgcolor,
		uint32_t blendingfactor1, uint32_t blendingfactor2, uint32_t fbstartaddress, uint32_t imgheight, uint32_t imgwidth,
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)hltdc) + 0x84U + (0x80U*(layer)));
 8007ab8:	f100 0384 	add.w	r3, r0, #132	; 0x84
 8007abc:	eb03 11c1 	add.w	r1, r3, r1, lsl #7

	// Disable Layer
	// BSP_STM32_LTDC_DisableLayer(hltdc, layer);

	// Configure the horizontal start and stop position
	tmp = ((x1 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007ac0:	68c3      	ldr	r3, [r0, #12]
 8007ac2:	f3c3 4c0b 	ubfx	ip, r3, #16, #12
	l->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ac6:	684b      	ldr	r3, [r1, #4]
 8007ac8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 8007acc:	b4f0      	push	{r4, r5, r6, r7}
 8007ace:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	l->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ad0:	604b      	str	r3, [r1, #4]
	l->WHPCR = ((x0 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ad2:	68c4      	ldr	r4, [r0, #12]
 8007ad4:	1c6e      	adds	r6, r5, #1
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 8007ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	l->WHPCR = ((x0 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ad8:	f3c4 440b 	ubfx	r4, r4, #16, #12
	tmp = ((x1 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007adc:	449c      	add	ip, r3
	l->WHPCR = ((x0 + ((hltdc->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ade:	4434      	add	r4, r6
 8007ae0:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8007ae4:	604c      	str	r4, [r1, #4]

	// Configure the vertical start and stop position
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007ae6:	68c4      	ldr	r4, [r0, #12]
	l->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007ae8:	688e      	ldr	r6, [r1, #8]
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007aea:	f3c4 040a 	ubfx	r4, r4, #0, #11
	l->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007aee:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 8007af2:	608e      	str	r6, [r1, #8]
	l->WVPCR  = ((y0 + (hltdc->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007af4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007af6:	68c0      	ldr	r0, [r0, #12]
 8007af8:	f106 0c01 	add.w	ip, r6, #1
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007afc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	l->WVPCR  = ((y0 + (hltdc->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007afe:	f3c0 000a 	ubfx	r0, r0, #0, #11
	tmp = ((y1 + (hltdc->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b02:	4434      	add	r4, r6
	// Specifies the pixel format
	l->PFCR &= ~(LTDC_LxPFCR_PF);
	l->PFCR = pixelformat;

	// Configure the default color values
	l->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b04:	2600      	movs	r6, #0
	l->WVPCR  = ((y0 + (hltdc->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b06:	4460      	add	r0, ip
 8007b08:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8007b0c:	6088      	str	r0, [r1, #8]
	l->PFCR &= ~(LTDC_LxPFCR_PF);
 8007b0e:	6908      	ldr	r0, [r1, #16]
 8007b10:	f020 0007 	bic.w	r0, r0, #7
 8007b14:	6108      	str	r0, [r1, #16]
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 8007b16:	980a      	ldr	r0, [sp, #40]	; 0x28
	l->PFCR = pixelformat;
 8007b18:	6108      	str	r0, [r1, #16]
	l->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b1a:	698c      	ldr	r4, [r1, #24]
	l->DCCR = bgcolor;
 8007b1c:	9c04      	ldr	r4, [sp, #16]
	l->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b1e:	618e      	str	r6, [r1, #24]
	l->DCCR = bgcolor;
 8007b20:	618c      	str	r4, [r1, #24]

	// Specifies the constant alpha value
	l->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007b22:	694c      	ldr	r4, [r1, #20]
 8007b24:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 8007b28:	614c      	str	r4, [r1, #20]
	l->CACR = alpha;
 8007b2a:	614a      	str	r2, [r1, #20]

	// Specifies the blending factors
	l->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007b2c:	69cf      	ldr	r7, [r1, #28]
	l->BFCR = (blendingfactor1 | blendingfactor2);
 8007b2e:	e9dd 4205 	ldrd	r4, r2, [sp, #20]
 8007b32:	4314      	orrs	r4, r2
	l->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007b34:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <BSP_STM32_LTDC_ConfigLayer+0xd4>)
 8007b36:	403a      	ands	r2, r7
 8007b38:	61ca      	str	r2, [r1, #28]
		uint32_t pixelformat, uint32_t x0, uint32_t x1, uint32_t y0, uint32_t y1) {
 8007b3a:	e9dd 2708 	ldrd	r2, r7, [sp, #32]
	l->BFCR = (blendingfactor1 | blendingfactor2);
 8007b3e:	61cc      	str	r4, [r1, #28]

	// Configure the color frame buffer start address
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007b40:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 8007b42:	9c07      	ldr	r4, [sp, #28]
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007b44:	628e      	str	r6, [r1, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 8007b46:	628c      	str	r4, [r1, #40]	; 0x28

	if (pixelformat == LTDC_PIXEL_FORMAT_ARGB8888) { tmp = 4U; }
 8007b48:	b9a0      	cbnz	r0, 8007b74 <BSP_STM32_LTDC_ConfigLayer+0xbc>
	else if ((pixelformat == LTDC_PIXEL_FORMAT_ARGB4444) || (pixelformat == LTDC_PIXEL_FORMAT_RGB565) || (pixelformat == LTDC_PIXEL_FORMAT_ARGB1555) || (pixelformat == LTDC_PIXEL_FORMAT_AL88)) { tmp = 2U; }
	else { tmp = 1U; }

	// Configure the color frame buffer pitch in byte
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b4a:	00bf      	lsls	r7, r7, #2
	if (pixelformat == LTDC_PIXEL_FORMAT_ARGB8888) { tmp = 4U; }
 8007b4c:	2004      	movs	r0, #4
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b4e:	1b5b      	subs	r3, r3, r5

	// Configure the frame buffer line number
	l->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007b50:	4c0f      	ldr	r4, [pc, #60]	; (8007b90 <BSP_STM32_LTDC_ConfigLayer+0xd8>)
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b52:	fb00 f303 	mul.w	r3, r0, r3
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007b56:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b58:	3307      	adds	r3, #7
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007b5a:	f000 20e0 	and.w	r0, r0, #3758153728	; 0xe000e000
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b5e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
	l->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007b62:	62c8      	str	r0, [r1, #44]	; 0x2c

	// Enable Layer
	// BSP_STM32_LTDC_EnableLayer(hltdc, layer);

	return BSP_OK;
}
 8007b64:	2000      	movs	r0, #0
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b66:	62cb      	str	r3, [r1, #44]	; 0x2c
	l->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007b68:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007b6a:	401c      	ands	r4, r3
 8007b6c:	630c      	str	r4, [r1, #48]	; 0x30
	l->CFBLNR  = (imgheight);
 8007b6e:	630a      	str	r2, [r1, #48]	; 0x30
}
 8007b70:	bcf0      	pop	{r4, r5, r6, r7}
 8007b72:	4770      	bx	lr
	else if (pixelformat == LTDC_PIXEL_FORMAT_RGB888) { tmp = 3U; }
 8007b74:	3801      	subs	r0, #1
 8007b76:	2806      	cmp	r0, #6
 8007b78:	d901      	bls.n	8007b7e <BSP_STM32_LTDC_ConfigLayer+0xc6>
	if (pixelformat == LTDC_PIXEL_FORMAT_ARGB8888) { tmp = 4U; }
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	e7e7      	b.n	8007b4e <BSP_STM32_LTDC_ConfigLayer+0x96>
 8007b7e:	4c05      	ldr	r4, [pc, #20]	; (8007b94 <BSP_STM32_LTDC_ConfigLayer+0xdc>)
 8007b80:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
	l->CFBLR  = (((imgwidth * tmp) << 16U) | (((x1 - x0) * tmp)  + 7U));
 8007b84:	fb00 f707 	mul.w	r7, r0, r7
 8007b88:	e7e1      	b.n	8007b4e <BSP_STM32_LTDC_ConfigLayer+0x96>
 8007b8a:	bf00      	nop
 8007b8c:	fffff8f8 	.word	0xfffff8f8
 8007b90:	fffff800 	.word	0xfffff800
 8007b94:	080155b8 	.word	0x080155b8

08007b98 <BSP_STM32_LTDC_UpdateFrameBufAddr>:


uint8_t BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t fbstartaddress) {

	// Updating Framebuffer address
	LTDC_Layer_TypeDef *l = ((LTDC_Layer_TypeDef *)((uint32_t)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)))));
 8007b98:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <BSP_STM32_LTDC_UpdateFrameBufAddr+0x20>)
uint8_t BSP_STM32_LTDC_UpdateFrameBufAddr(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t fbstartaddress) {
 8007b9a:	4684      	mov	ip, r0
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007b9c:	2000      	movs	r0, #0
	LTDC_Layer_TypeDef *l = ((LTDC_Layer_TypeDef *)((uint32_t)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)))));
 8007b9e:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
	l->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007ba2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007ba4:	6288      	str	r0, [r1, #40]	; 0x28
	l->CFBAR = fbstartaddress;
 8007ba6:	628a      	str	r2, [r1, #40]	; 0x28
	hltdc->SRCR |= LTDC_SRCR_VBR;
 8007ba8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8007bac:	f043 0302 	orr.w	r3, r3, #2
 8007bb0:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24

	return BSP_OK;
}
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	50001084 	.word	0x50001084

08007bbc <BSP_STM32_LTDC_ConfigCLUT>:


uint8_t BSP_STM32_LTDC_ConfigCLUT(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t *clut) {
 8007bbc:	b570      	push	{r4, r5, r6, lr}

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 8007bbe:	4d15      	ldr	r5, [pc, #84]	; (8007c14 <BSP_STM32_LTDC_ConfigCLUT+0x58>)
 8007bc0:	01ce      	lsls	r6, r1, #7
uint8_t BSP_STM32_LTDC_ConfigCLUT(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t *clut) {
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	f502 6e80 	add.w	lr, r2, #1024	; 0x400
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 8007bc8:	eb05 1cc1 	add.w	ip, r5, r1, lsl #7
 8007bcc:	2100      	movs	r1, #0
	uint32_t counter;
	uint32_t tmp;

	// Configure CLUT
	for (counter = 0U; (counter < 256); counter++) {
		tmp  = (counter << 24U) | ((uint32_t)(*pcolorlut) & 0x00FFFFFF);
 8007bce:	f852 3b04 	ldr.w	r3, [r2], #4
 8007bd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	for (counter = 0U; (counter < 256); counter++) {
 8007bd6:	4596      	cmp	lr, r2
		tmp  = (counter << 24U) | ((uint32_t)(*pcolorlut) & 0x00FFFFFF);
 8007bd8:	ea43 0301 	orr.w	r3, r3, r1
	    pcolorlut++;
	    l->CLUTWR  = tmp;
 8007bdc:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 8007be0:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
	for (counter = 0U; (counter < 256); counter++) {
 8007be4:	d1f3      	bne.n	8007bce <BSP_STM32_LTDC_ConfigCLUT+0x12>
	}
	// Enable CLUT
	l->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8007be6:	5973      	ldr	r3, [r6, r5]
	hltdc->SRCR = LTDC_SRCR_IMR;

	// Configure color keying
	l->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
	l->CKCR  = 0x00000000;
 8007be8:	2000      	movs	r0, #0
	l->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8007bea:	f043 0310 	orr.w	r3, r3, #16
 8007bee:	5173      	str	r3, [r6, r5]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	6263      	str	r3, [r4, #36]	; 0x24
	l->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007bf4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007bf8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007bfc:	f8cc 200c 	str.w	r2, [ip, #12]
	l->CKCR  = 0x00000000;
 8007c00:	f8cc 000c 	str.w	r0, [ip, #12]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c04:	6263      	str	r3, [r4, #36]	; 0x24
	// Enable color keying
	l->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007c06:	5972      	ldr	r2, [r6, r5]
 8007c08:	f042 0202 	orr.w	r2, r2, #2
 8007c0c:	5172      	str	r2, [r6, r5]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c0e:	6263      	str	r3, [r4, #36]	; 0x24

	return BSP_OK;
}
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	bf00      	nop
 8007c14:	50001084 	.word	0x50001084

08007c18 <BSP_STM32_LTDC_SetTransparentColor>:

uint8_t BSP_STM32_LTDC_SetTransparentColor(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t color) {
 8007c18:	b410      	push	{r4}

	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 8007c1a:	4c08      	ldr	r4, [pc, #32]	; (8007c3c <BSP_STM32_LTDC_SetTransparentColor+0x24>)
uint8_t BSP_STM32_LTDC_SetTransparentColor(LTDC_TypeDef *hltdc, uint32_t layer, uint32_t color) {
 8007c1c:	4603      	mov	r3, r0
	LTDC_Layer_TypeDef *l = (LTDC_Layer_TypeDef *)(((uint32_t)LTDC) + 0x84U + (0x80U*(layer)));
 8007c1e:	01c8      	lsls	r0, r1, #7
 8007c20:	eb04 11c1 	add.w	r1, r4, r1, lsl #7

	// Setting transparent color
	l->CKCR  = color;
 8007c24:	60ca      	str	r2, [r1, #12]
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c26:	2101      	movs	r1, #1
 8007c28:	6259      	str	r1, [r3, #36]	; 0x24
	// Enable color keying
	l->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007c2a:	5902      	ldr	r2, [r0, r4]
 8007c2c:	f042 0202 	orr.w	r2, r2, #2
 8007c30:	5102      	str	r2, [r0, r4]
	hltdc->SRCR = LTDC_SRCR_IMR;

	return BSP_OK;
}
 8007c32:	2000      	movs	r0, #0
 8007c34:	f85d 4b04 	ldr.w	r4, [sp], #4
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c38:	6259      	str	r1, [r3, #36]	; 0x24
}
 8007c3a:	4770      	bx	lr
 8007c3c:	50001084 	.word	0x50001084

08007c40 <BSP_STM32_LTDC_SetLineInt>:

uint8_t BSP_STM32_LTDC_SetLineInt(LTDC_TypeDef *hltdc, uint32_t line) {
 8007c40:	4603      	mov	r3, r0
	hltdc->LIPCR = line;
	hltdc->IER |= LTDC_IER_LIE;
	hltdc->SRCR = LTDC_SRCR_IMR;

	return BSP_OK;
}
 8007c42:	2000      	movs	r0, #0
	hltdc->IER &= ~(LTDC_IER_LIE);
 8007c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c46:	f022 0201 	bic.w	r2, r2, #1
uint8_t BSP_STM32_LTDC_SetLineInt(LTDC_TypeDef *hltdc, uint32_t line) {
 8007c4a:	b410      	push	{r4}
	hltdc->IER &= ~(LTDC_IER_LIE);
 8007c4c:	635a      	str	r2, [r3, #52]	; 0x34
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c4e:	2401      	movs	r4, #1
	hltdc->LIPCR = line;
 8007c50:	6419      	str	r1, [r3, #64]	; 0x40
	hltdc->IER |= LTDC_IER_LIE;
 8007c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c54:	4322      	orrs	r2, r4
 8007c56:	635a      	str	r2, [r3, #52]	; 0x34
	hltdc->SRCR = LTDC_SRCR_IMR;
 8007c58:	625c      	str	r4, [r3, #36]	; 0x24
}
 8007c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <BSP_STM32_LTDC_IRQHandler>:

uint8_t BSP_STM32_LTDC_IRQHandler(LTDC_TypeDef *hltdc) {
	if (((hltdc->ISR & LTDC_ISR_LIF) != 0U) && ((hltdc->IER & LTDC_IER_LIE) != 0U)) {
 8007c60:	6b82      	ldr	r2, [r0, #56]	; 0x38
uint8_t BSP_STM32_LTDC_IRQHandler(LTDC_TypeDef *hltdc) {
 8007c62:	4603      	mov	r3, r0
	if (((hltdc->ISR & LTDC_ISR_LIF) != 0U) && ((hltdc->IER & LTDC_IER_LIE) != 0U)) {
 8007c64:	07d1      	lsls	r1, r2, #31
 8007c66:	d502      	bpl.n	8007c6e <BSP_STM32_LTDC_IRQHandler+0xe>
 8007c68:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007c6a:	07d2      	lsls	r2, r2, #31
 8007c6c:	d430      	bmi.n	8007cd0 <BSP_STM32_LTDC_IRQHandler+0x70>
	    // Enable the Line interrupt
		hltdc->IER |= (LTDC_IER_LIE);
		return BSP_OK;
	}

	if (((hltdc->ISR & LTDC_ISR_FUIF) != 0U) && ((hltdc->IER & LTDC_IER_FUIE) != 0U)) {
 8007c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c70:	0790      	lsls	r0, r2, #30
 8007c72:	d50b      	bpl.n	8007c8c <BSP_STM32_LTDC_IRQHandler+0x2c>
 8007c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c76:	0791      	lsls	r1, r2, #30
 8007c78:	d508      	bpl.n	8007c8c <BSP_STM32_LTDC_IRQHandler+0x2c>
		// Disable the interrupt FIFO Underrun
		hltdc->IER &= ~(LTDC_IER_FUIE);
 8007c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CFUIF;
 8007c7c:	2102      	movs	r1, #2
		hltdc->IER &= ~(LTDC_IER_FUIE);
 8007c7e:	f022 0202 	bic.w	r2, r2, #2
 8007c82:	635a      	str	r2, [r3, #52]	; 0x34
		hltdc->ICR = LTDC_ICR_CFUIF;
 8007c84:	63d9      	str	r1, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_FUIE);
 8007c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (((hltdc->ISR & LTDC_ISR_RRIF) != 0U) && ((hltdc->IER & LTDC_IER_RRIE) != 0U)) {
 8007c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c8e:	0712      	lsls	r2, r2, #28
 8007c90:	d50b      	bpl.n	8007caa <BSP_STM32_LTDC_IRQHandler+0x4a>
 8007c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c94:	0710      	lsls	r0, r2, #28
 8007c96:	d508      	bpl.n	8007caa <BSP_STM32_LTDC_IRQHandler+0x4a>
		// Disable the interrupt Register Reload
		hltdc->IER &= ~(LTDC_IER_RRIE);
 8007c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CRRIF;
 8007c9a:	2108      	movs	r1, #8
		hltdc->IER &= ~(LTDC_IER_RRIE);
 8007c9c:	f022 0208 	bic.w	r2, r2, #8
 8007ca0:	635a      	str	r2, [r3, #52]	; 0x34
		hltdc->ICR = LTDC_ICR_CRRIF;
 8007ca2:	63d9      	str	r1, [r3, #60]	; 0x3c
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_RRIE);
 8007ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (((hltdc->ISR & LTDC_ISR_TERRIF) != 0U) && ((hltdc->IER & LTDC_IER_TERRIE) != 0U)) {
 8007caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cac:	0751      	lsls	r1, r2, #29
 8007cae:	d50d      	bpl.n	8007ccc <BSP_STM32_LTDC_IRQHandler+0x6c>
 8007cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb2:	0752      	lsls	r2, r2, #29
 8007cb4:	d50a      	bpl.n	8007ccc <BSP_STM32_LTDC_IRQHandler+0x6c>
		// Disable the interrupt Transfer Error
		hltdc->IER &= ~(LTDC_IER_TERRIE);
 8007cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		// Clear the interrupt flag
		hltdc->ICR = LTDC_ICR_CTERRIF;
 8007cb8:	2104      	movs	r1, #4
		// Enable the interrupt
		hltdc->IER |= (LTDC_IER_TERRIE);
	}

	return BSP_ERROR;
 8007cba:	2001      	movs	r0, #1
		hltdc->IER &= ~(LTDC_IER_TERRIE);
 8007cbc:	f022 0204 	bic.w	r2, r2, #4
 8007cc0:	635a      	str	r2, [r3, #52]	; 0x34
		hltdc->ICR = LTDC_ICR_CTERRIF;
 8007cc2:	63d9      	str	r1, [r3, #60]	; 0x3c
		hltdc->IER |= (LTDC_IER_TERRIE);
 8007cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8007cca:	4770      	bx	lr
	return BSP_ERROR;
 8007ccc:	2001      	movs	r0, #1
}
 8007cce:	4770      	bx	lr
		hltdc->IER &= ~(LTDC_IER_LIE);
 8007cd0:	6b42      	ldr	r2, [r0, #52]	; 0x34
		hltdc->ICR = LTDC_ICR_CLIF;
 8007cd2:	2101      	movs	r1, #1
		return BSP_OK;
 8007cd4:	2000      	movs	r0, #0
		hltdc->IER &= ~(LTDC_IER_LIE);
 8007cd6:	f022 0201 	bic.w	r2, r2, #1
 8007cda:	e7f1      	b.n	8007cc0 <BSP_STM32_LTDC_IRQHandler+0x60>

08007cdc <BSP_STM32_PCD_EnableUSBVoltageDetector>:

#include "BSP_STM32_PCD.h"

uint8_t BSP_STM32_PCD_EnableUSBVoltageDetector() {
  // Enable the USB voltage detector
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007cdc:	4a03      	ldr	r2, [pc, #12]	; (8007cec <BSP_STM32_PCD_EnableUSBVoltageDetector+0x10>)
  return BSP_OK;
}
 8007cde:	2000      	movs	r0, #0
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ce0:	68d3      	ldr	r3, [r2, #12]
 8007ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ce6:	60d3      	str	r3, [r2, #12]
}
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	58024800 	.word	0x58024800

08007cf0 <BSP_STM32_PWR_ConfigSupply>:

uint8_t BSP_STM32_PWR_ConfigSupply(uint32_t SupplySource) {
	uint32_t tick;

	// Validate input parameters
	switch (SupplySource) {
 8007cf0:	282e      	cmp	r0, #46	; 0x2e
 8007cf2:	d839      	bhi.n	8007d68 <BSP_STM32_PWR_ConfigSupply+0x78>
 8007cf4:	2815      	cmp	r0, #21
uint8_t BSP_STM32_PWR_ConfigSupply(uint32_t SupplySource) {
 8007cf6:	b570      	push	{r4, r5, r6, lr}
 8007cf8:	4604      	mov	r4, r0
	switch (SupplySource) {
 8007cfa:	d813      	bhi.n	8007d24 <BSP_STM32_PWR_ConfigSupply+0x34>
 8007cfc:	2802      	cmp	r0, #2
 8007cfe:	d802      	bhi.n	8007d06 <BSP_STM32_PWR_ConfigSupply+0x16>
 8007d00:	b918      	cbnz	r0, 8007d0a <BSP_STM32_PWR_ConfigSupply+0x1a>
 8007d02:	2001      	movs	r0, #1
	// Wait for SMPS readiness
	tick = BSP_GetTick();
	while ((PWR->CR3 & PWR_CR3_SMPSEXTRDY) != PWR_CR3_SMPSEXTRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;

	return BSP_OK;
}
 8007d04:	bd70      	pop	{r4, r5, r6, pc}
	switch (SupplySource) {
 8007d06:	2804      	cmp	r0, #4
 8007d08:	d1fb      	bne.n	8007d02 <BSP_STM32_PWR_ConfigSupply+0x12>
	if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN)) {
 8007d0a:	4d21      	ldr	r5, [pc, #132]	; (8007d90 <BSP_STM32_PWR_ConfigSupply+0xa0>)
 8007d0c:	68eb      	ldr	r3, [r5, #12]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	2b06      	cmp	r3, #6
 8007d14:	d012      	beq.n	8007d3c <BSP_STM32_PWR_ConfigSupply+0x4c>
		if ((PWR->CR3 & pwr_config_mask) == SupplySource) return BSP_OK;
 8007d16:	68e8      	ldr	r0, [r5, #12]
 8007d18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		return BSP_ERROR;
 8007d1c:	1b00      	subs	r0, r0, r4
 8007d1e:	bf18      	it	ne
 8007d20:	2001      	movne	r0, #1
}
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
	switch (SupplySource) {
 8007d24:	f1a0 0216 	sub.w	r2, r0, #22
 8007d28:	4b1a      	ldr	r3, [pc, #104]	; (8007d94 <BSP_STM32_PWR_ConfigSupply+0xa4>)
 8007d2a:	40d3      	lsrs	r3, r2
 8007d2c:	07d8      	lsls	r0, r3, #31
 8007d2e:	d5e8      	bpl.n	8007d02 <BSP_STM32_PWR_ConfigSupply+0x12>
	if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN)) {
 8007d30:	4d17      	ldr	r5, [pc, #92]	; (8007d90 <BSP_STM32_PWR_ConfigSupply+0xa0>)
 8007d32:	68eb      	ldr	r3, [r5, #12]
 8007d34:	f003 0307 	and.w	r3, r3, #7
 8007d38:	2b06      	cmp	r3, #6
 8007d3a:	d1ec      	bne.n	8007d16 <BSP_STM32_PWR_ConfigSupply+0x26>
	MODIFY_REG(PWR->CR3, pwr_config_mask, SupplySource);
 8007d3c:	68eb      	ldr	r3, [r5, #12]
 8007d3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d42:	4323      	orrs	r3, r4
 8007d44:	60eb      	str	r3, [r5, #12]
	tick = BSP_GetTick();
 8007d46:	f7fc f995 	bl	8004074 <BSP_GetTick>
 8007d4a:	4606      	mov	r6, r0
	while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) != PWR_CSR1_ACTVOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8007d4c:	e005      	b.n	8007d5a <BSP_STM32_PWR_ConfigSupply+0x6a>
 8007d4e:	f7fc f991 	bl	8004074 <BSP_GetTick>
 8007d52:	1b80      	subs	r0, r0, r6
 8007d54:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007d58:	d808      	bhi.n	8007d6c <BSP_STM32_PWR_ConfigSupply+0x7c>
 8007d5a:	686b      	ldr	r3, [r5, #4]
 8007d5c:	0499      	lsls	r1, r3, #18
 8007d5e:	d5f6      	bpl.n	8007d4e <BSP_STM32_PWR_ConfigSupply+0x5e>
	if ((SupplySource & PWR_CR3_SMPSEN) == 0) return BSP_OK;
 8007d60:	0762      	lsls	r2, r4, #29
 8007d62:	d405      	bmi.n	8007d70 <BSP_STM32_PWR_ConfigSupply+0x80>
 8007d64:	2000      	movs	r0, #0
}
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
	switch (SupplySource) {
 8007d68:	2001      	movs	r0, #1
}
 8007d6a:	4770      	bx	lr
	while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) != PWR_CSR1_ACTVOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8007d6c:	2003      	movs	r0, #3
}
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
	tick = BSP_GetTick();
 8007d70:	f7fc f980 	bl	8004074 <BSP_GetTick>
	while ((PWR->CR3 & PWR_CR3_SMPSEXTRDY) != PWR_CR3_SMPSEXTRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8007d74:	4d06      	ldr	r5, [pc, #24]	; (8007d90 <BSP_STM32_PWR_ConfigSupply+0xa0>)
	tick = BSP_GetTick();
 8007d76:	4604      	mov	r4, r0
	while ((PWR->CR3 & PWR_CR3_SMPSEXTRDY) != PWR_CR3_SMPSEXTRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_TIMEOUT;
 8007d78:	e005      	b.n	8007d86 <BSP_STM32_PWR_ConfigSupply+0x96>
 8007d7a:	f7fc f97b 	bl	8004074 <BSP_GetTick>
 8007d7e:	1b00      	subs	r0, r0, r4
 8007d80:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007d84:	d8f2      	bhi.n	8007d6c <BSP_STM32_PWR_ConfigSupply+0x7c>
 8007d86:	68eb      	ldr	r3, [r5, #12]
 8007d88:	03db      	lsls	r3, r3, #15
 8007d8a:	d5f6      	bpl.n	8007d7a <BSP_STM32_PWR_ConfigSupply+0x8a>
 8007d8c:	e7ea      	b.n	8007d64 <BSP_STM32_PWR_ConfigSupply+0x74>
 8007d8e:	bf00      	nop
 8007d90:	58024800 	.word	0x58024800
 8007d94:	01810181 	.word	0x01810181

08007d98 <BSP_STM32_PWR_VoltageScalingConfig>:


uint8_t BSP_STM32_PWR_VoltageScalingConfig(uint32_t Regulator) {
 8007d98:	b082      	sub	sp, #8
	// For STM32H74xxx and STM32H75xxx lines
	__IO uint32_t tmpreg = 0x00;
 8007d9a:	2300      	movs	r3, #0

	// Validating input parameters
	switch (Regulator) {
 8007d9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	__IO uint32_t tmpreg = 0x00;
 8007da0:	9301      	str	r3, [sp, #4]
	switch (Regulator) {
 8007da2:	d009      	beq.n	8007db8 <BSP_STM32_PWR_VoltageScalingConfig+0x20>
 8007da4:	d805      	bhi.n	8007db2 <BSP_STM32_PWR_VoltageScalingConfig+0x1a>
 8007da6:	f430 4380 	bics.w	r3, r0, #16384	; 0x4000
 8007daa:	d01c      	beq.n	8007de6 <BSP_STM32_PWR_VoltageScalingConfig+0x4e>
 8007dac:	2001      	movs	r0, #1
		// Delay after setting the voltage scaling
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
	}
	UNUSED(tmpreg);
	return BSP_OK;
}
 8007dae:	b002      	add	sp, #8
 8007db0:	4770      	bx	lr
	switch (Regulator) {
 8007db2:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8007db6:	d1f9      	bne.n	8007dac <BSP_STM32_PWR_VoltageScalingConfig+0x14>
		CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007db8:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <BSP_STM32_PWR_VoltageScalingConfig+0x78>)
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, Regulator);
 8007dba:	4a16      	ldr	r2, [pc, #88]	; (8007e14 <BSP_STM32_PWR_VoltageScalingConfig+0x7c>)
		CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007dbe:	f021 0101 	bic.w	r1, r1, #1
 8007dc2:	62d9      	str	r1, [r3, #44]	; 0x2c
		tmpreg = READ_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	9301      	str	r3, [sp, #4]
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, Regulator);
 8007dcc:	6993      	ldr	r3, [r2, #24]
 8007dce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007dd2:	4303      	orrs	r3, r0
 8007dd4:	6193      	str	r3, [r2, #24]
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
 8007dd6:	6993      	ldr	r3, [r2, #24]
 8007dd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ddc:	9301      	str	r3, [sp, #4]
	return BSP_OK;
 8007dde:	2000      	movs	r0, #0
	UNUSED(tmpreg);
 8007de0:	9b01      	ldr	r3, [sp, #4]
}
 8007de2:	b002      	add	sp, #8
 8007de4:	4770      	bx	lr
	if (Regulator == PWR_REGULATOR_VOLTAGE_SCALE0) {
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d1e6      	bne.n	8007db8 <BSP_STM32_PWR_VoltageScalingConfig+0x20>
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dea:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <BSP_STM32_PWR_VoltageScalingConfig+0x7c>)
		SET_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007dec:	4b08      	ldr	r3, [pc, #32]	; (8007e10 <BSP_STM32_PWR_VoltageScalingConfig+0x78>)
		MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dee:	6991      	ldr	r1, [r2, #24]
 8007df0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8007df4:	6191      	str	r1, [r2, #24]
		tmpreg = READ_BIT(PWR->D3CR, PWR_D3CR_VOS);
 8007df6:	6992      	ldr	r2, [r2, #24]
 8007df8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8007dfc:	9201      	str	r2, [sp, #4]
		SET_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	f042 0201 	orr.w	r2, r2, #1
 8007e04:	62da      	str	r2, [r3, #44]	; 0x2c
		tmpreg = READ_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	e7e6      	b.n	8007dde <BSP_STM32_PWR_VoltageScalingConfig+0x46>
 8007e10:	58000400 	.word	0x58000400
 8007e14:	58024800 	.word	0x58024800

08007e18 <BSP_STM32_PWR_WaitForVOSRDY>:

uint8_t BSP_STM32_PWR_WaitForVOSRDY(void) {
 8007e18:	b538      	push	{r3, r4, r5, lr}
	uint32_t tick = BSP_GetTick();
 8007e1a:	f7fc f92b 	bl	8004074 <BSP_GetTick>
	while ((PWR->D3CR & PWR_D3CR_VOSRDY) != PWR_D3CR_VOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_ERROR;
 8007e1e:	4d08      	ldr	r5, [pc, #32]	; (8007e40 <BSP_STM32_PWR_WaitForVOSRDY+0x28>)
	uint32_t tick = BSP_GetTick();
 8007e20:	4604      	mov	r4, r0
	while ((PWR->D3CR & PWR_D3CR_VOSRDY) != PWR_D3CR_VOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_ERROR;
 8007e22:	e005      	b.n	8007e30 <BSP_STM32_PWR_WaitForVOSRDY+0x18>
 8007e24:	f7fc f926 	bl	8004074 <BSP_GetTick>
 8007e28:	1b00      	subs	r0, r0, r4
 8007e2a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007e2e:	d804      	bhi.n	8007e3a <BSP_STM32_PWR_WaitForVOSRDY+0x22>
 8007e30:	69ab      	ldr	r3, [r5, #24]
 8007e32:	049b      	lsls	r3, r3, #18
 8007e34:	d5f6      	bpl.n	8007e24 <BSP_STM32_PWR_WaitForVOSRDY+0xc>
	return BSP_OK;
 8007e36:	2000      	movs	r0, #0
}
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
	while ((PWR->D3CR & PWR_D3CR_VOSRDY) != PWR_D3CR_VOSRDY) if ((BSP_GetTick() - tick) > 1000) return BSP_ERROR;
 8007e3a:	2001      	movs	r0, #1
}
 8007e3c:	bd38      	pop	{r3, r4, r5, pc}
 8007e3e:	bf00      	nop
 8007e40:	58024800 	.word	0x58024800

08007e44 <BSP_STM32_PWR_EnableBkUpAccess>:

uint8_t BSP_STM32_PWR_EnableBkUpAccess(void) {
  // Enable access to RTC and backup registers
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007e44:	4a03      	ldr	r2, [pc, #12]	; (8007e54 <BSP_STM32_PWR_EnableBkUpAccess+0x10>)
  return BSP_OK;
}
 8007e46:	2000      	movs	r0, #0
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007e48:	6813      	ldr	r3, [r2, #0]
 8007e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e4e:	6013      	str	r3, [r2, #0]
}
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	58024800 	.word	0x58024800

08007e58 <_QSPI_GetConfigCCR>:
static uint32_t _QSPI_GetConfigCCR(QUADSPI_TypeDef * hqspi, uint32_t FMode) {

	uint32_t reg_ccr = 0x00;

	// Program Instruction Block
	if (qspictx.InstructionMode != QSPI_INSTRUCTION_NONE) {
 8007e58:	4b23      	ldr	r3, [pc, #140]	; (8007ee8 <_QSPI_GetConfigCCR+0x90>)
static uint32_t _QSPI_GetConfigCCR(QUADSPI_TypeDef * hqspi, uint32_t FMode) {
 8007e5a:	b430      	push	{r4, r5}
	if (qspictx.InstructionMode != QSPI_INSTRUCTION_NONE) {
 8007e5c:	681c      	ldr	r4, [r3, #0]
 8007e5e:	b11c      	cbz	r4, 8007e68 <_QSPI_GetConfigCCR+0x10>
		reg_ccr |= (qspictx.Instruction & QUADSPI_CCR_INSTRUCTION_Msk);
 8007e60:	791a      	ldrb	r2, [r3, #4]
		reg_ccr |= (qspictx.InstructionMode & QUADSPI_CCR_IMODE_Msk);
 8007e62:	f404 7440 	and.w	r4, r4, #768	; 0x300
 8007e66:	4314      	orrs	r4, r2
	}

	// Program Address Block
	if (qspictx.AddressMode !=QSPI_ADDRESS_NONE) {
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	b16a      	cbz	r2, 8007e88 <_QSPI_GetConfigCCR+0x30>
		reg_ccr |= (qspictx.AddressMode & QUADSPI_CCR_ADMODE_Msk);
		reg_ccr |= (qspictx.AddressSize & QUADSPI_CCR_ADSIZE_Msk);
 8007e6c:	68dd      	ldr	r5, [r3, #12]
		reg_ccr |= (qspictx.AddressMode & QUADSPI_CCR_ADMODE_Msk);
 8007e6e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->AR = qspictx.Address;
 8007e72:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
		reg_ccr |= (qspictx.AddressSize & QUADSPI_CCR_ADSIZE_Msk);
 8007e76:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
 8007e7a:	ea45 0502 	orr.w	r5, r5, r2
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->AR = qspictx.Address;
 8007e7e:	bf14      	ite	ne
 8007e80:	691a      	ldrne	r2, [r3, #16]
			else hqspi->AR = 0;
 8007e82:	2200      	moveq	r2, #0
		reg_ccr |= (qspictx.AddressSize & QUADSPI_CCR_ADSIZE_Msk);
 8007e84:	432c      	orrs	r4, r5
			else hqspi->AR = 0;
 8007e86:	6182      	str	r2, [r0, #24]
	}

	// Program Alternate Bytes
	if (qspictx.AlternateMode != QSPI_ALTERNATE_BYTES_NONE) {
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	b142      	cbz	r2, 8007e9e <_QSPI_GetConfigCCR+0x46>
		reg_ccr |= (qspictx.AlternateMode & QUADSPI_CCR_ABMODE_Msk);
		reg_ccr |= (qspictx.AlternateSize & QUADSPI_CCR_ABSIZE_Msk);
 8007e8c:	699d      	ldr	r5, [r3, #24]
		reg_ccr |= (qspictx.AlternateMode & QUADSPI_CCR_ABMODE_Msk);
 8007e8e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
		reg_ccr |= (qspictx.AlternateSize & QUADSPI_CCR_ABSIZE_Msk);
 8007e92:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
 8007e96:	4315      	orrs	r5, r2
		hqspi->ABR = qspictx.AlternateBytes;
 8007e98:	69da      	ldr	r2, [r3, #28]
		reg_ccr |= (qspictx.AlternateSize & QUADSPI_CCR_ABSIZE_Msk);
 8007e9a:	432c      	orrs	r4, r5
		hqspi->ABR = qspictx.AlternateBytes;
 8007e9c:	61c2      	str	r2, [r0, #28]
	}

	// Program Dummy Cycles
	if (qspictx.DummyCycles > 0) {
 8007e9e:	6a1a      	ldr	r2, [r3, #32]
 8007ea0:	b10a      	cbz	r2, 8007ea6 <_QSPI_GetConfigCCR+0x4e>
		reg_ccr |= (qspictx.DummyCycles << QUADSPI_CCR_DCYC_Pos);
 8007ea2:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
	}

	// Program Data Block
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 8007ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea8:	b14a      	cbz	r2, 8007ebe <_QSPI_GetConfigCCR+0x66>
		reg_ccr |= (qspictx.DataMode & QUADSPI_CCR_DMODE_Msk);
 8007eaa:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->DLR = qspictx.DataLenth - 1U;
 8007eae:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
		reg_ccr |= (qspictx.DataMode & QUADSPI_CCR_DMODE_Msk);
 8007eb2:	ea44 0402 	orr.w	r4, r4, r2
		if (FMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED) hqspi->DLR = qspictx.DataLenth - 1U;
 8007eb6:	d013      	beq.n	8007ee0 <_QSPI_GetConfigCCR+0x88>
 8007eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eba:	3a01      	subs	r2, #1
 8007ebc:	6102      	str	r2, [r0, #16]
	}

	// Program Additional Options
	reg_ccr |= (qspictx.DDRMode & QUADSPI_CCR_DDRM_Msk); 		// DDR Configuration
	reg_ccr |= (qspictx.SignalDelay & QUADSPI_CCR_DHHC_Msk); 	// Signal Shift
	reg_ccr |= (qspictx.SIOOMode & QUADSPI_CCR_SIOO_Msk);		// SIOO Mode
 8007ebe:	6b98      	ldr	r0, [r3, #56]	; 0x38
	reg_ccr |= (qspictx.SignalDelay & QUADSPI_CCR_DHHC_Msk); 	// Signal Shift
 8007ec0:	e9d3 250c 	ldrd	r2, r5, [r3, #48]	; 0x30
	reg_ccr |= (qspictx.DDRMode & QUADSPI_CCR_DDRM_Msk); 		// DDR Configuration
 8007ec4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
	reg_ccr |= (qspictx.SignalDelay & QUADSPI_CCR_DHHC_Msk); 	// Signal Shift
 8007ec8:	f005 4c80 	and.w	ip, r5, #1073741824	; 0x40000000
	reg_ccr |= (qspictx.SIOOMode & QUADSPI_CCR_SIOO_Msk);		// SIOO Mode
 8007ecc:	f000 5280 	and.w	r2, r0, #268435456	; 0x10000000
	reg_ccr |= (FMode & QUADSPI_CCR_FMODE_Msk);					// Functional Mode
 8007ed0:	ea43 030c 	orr.w	r3, r3, ip
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	4319      	orrs	r1, r3

	return reg_ccr;
}
 8007ed8:	ea41 0004 	orr.w	r0, r1, r4
 8007edc:	bc30      	pop	{r4, r5}
 8007ede:	4770      	bx	lr
			else hqspi->DLR = 0;
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	6102      	str	r2, [r0, #16]
 8007ee4:	e7eb      	b.n	8007ebe <_QSPI_GetConfigCCR+0x66>
 8007ee6:	bf00      	nop
 8007ee8:	240004b4 	.word	0x240004b4

08007eec <BSP_STM32_QSPI_Init>:


uint8_t BSP_STM32_QSPI_Init(QUADSPI_TypeDef * hqspi, uint32_t ClockPrescaler, uint32_t ClockMode, uint32_t FifoThreshold, uint32_t FlashSize) {
 8007eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef0:	4690      	mov	r8, r2

	// Configure QSPI FIFO Threshold
	MODIFY_REG(hqspi->CR, QUADSPI_CR_FTHRES, ((FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
 8007ef2:	6802      	ldr	r2, [r0, #0]
 8007ef4:	3b01      	subs	r3, #1
uint8_t BSP_STM32_QSPI_Init(QUADSPI_TypeDef * hqspi, uint32_t ClockPrescaler, uint32_t ClockMode, uint32_t FifoThreshold, uint32_t FlashSize) {
 8007ef6:	4604      	mov	r4, r0
	MODIFY_REG(hqspi->CR, QUADSPI_CR_FTHRES, ((FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
 8007ef8:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
uint8_t BSP_STM32_QSPI_Init(QUADSPI_TypeDef * hqspi, uint32_t ClockPrescaler, uint32_t ClockMode, uint32_t FifoThreshold, uint32_t FlashSize) {
 8007efc:	460f      	mov	r7, r1
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8007efe:	f241 3688 	movw	r6, #5000	; 0x1388
	MODIFY_REG(hqspi->CR, QUADSPI_CR_FTHRES, ((FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
 8007f02:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007f06:	6003      	str	r3, [r0, #0]
	uint32_t tick = BSP_GetTick();
 8007f08:	f7fc f8b4 	bl	8004074 <BSP_GetTick>
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	e004      	b.n	8007f1a <BSP_STM32_QSPI_Init+0x2e>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8007f10:	f7fc f8b0 	bl	8004074 <BSP_GetTick>
 8007f14:	1b43      	subs	r3, r0, r5
 8007f16:	42b3      	cmp	r3, r6
 8007f18:	d819      	bhi.n	8007f4e <BSP_STM32_QSPI_Init+0x62>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8007f1a:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8007f1c:	f013 0320 	ands.w	r3, r3, #32
 8007f20:	d1f6      	bne.n	8007f10 <BSP_STM32_QSPI_Init+0x24>
	// Configure QSPI Clock Prescaler and Sample Shift
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
			((ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) | QSPI_SAMPLE_SHIFTING_NONE  | QSPI_FLASH_ID_1 | QSPI_DUALFLASH_DISABLE));

	// Configure QSPI Flash Size, CS High Time and Clock Mode
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f22:	9a06      	ldr	r2, [sp, #24]
			((FlashSize << QUADSPI_DCR_FSIZE_Pos) | QSPI_CS_HIGH_TIME_1_CYCLE | ClockMode));

	// Enable the QSPI peripheral
	hqspi->CR |= QUADSPI_CR_EN;

    return BSP_OK;
 8007f24:	4618      	mov	r0, r3
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007f26:	6821      	ldr	r1, [r4, #0]
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f28:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007f2c:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <BSP_STM32_QSPI_Init+0x68>)
 8007f2e:	400a      	ands	r2, r1
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f30:	4909      	ldr	r1, [pc, #36]	; (8007f58 <BSP_STM32_QSPI_Init+0x6c>)
	MODIFY_REG(hqspi->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007f32:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8007f36:	6022      	str	r2, [r4, #0]
	MODIFY_REG(hqspi->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f38:	6862      	ldr	r2, [r4, #4]
 8007f3a:	4011      	ands	r1, r2
 8007f3c:	ea48 0101 	orr.w	r1, r8, r1
 8007f40:	6061      	str	r1, [r4, #4]
	hqspi->CR |= QUADSPI_CR_EN;
 8007f42:	6822      	ldr	r2, [r4, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	6022      	str	r2, [r4, #0]
}
 8007f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8007f4e:	2003      	movs	r0, #3
}
 8007f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f54:	00ffff2f 	.word	0x00ffff2f
 8007f58:	ffe0f8fe 	.word	0xffe0f8fe

08007f5c <BSP_STM32_QSPI_CfgNewCommand>:


uint8_t BSP_STM32_QSPI_CfgNewCommand() {

	memset(&qspictx, 0x00, sizeof(qspictx));
 8007f5c:	224c      	movs	r2, #76	; 0x4c
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4802      	ldr	r0, [pc, #8]	; (8007f6c <BSP_STM32_QSPI_CfgNewCommand+0x10>)
uint8_t BSP_STM32_QSPI_CfgNewCommand() {
 8007f62:	b508      	push	{r3, lr}
	memset(&qspictx, 0x00, sizeof(qspictx));
 8007f64:	f00a f979 	bl	801225a <memset>

	return BSP_OK;
}
 8007f68:	2000      	movs	r0, #0
 8007f6a:	bd08      	pop	{r3, pc}
 8007f6c:	240004b4 	.word	0x240004b4

08007f70 <BSP_STM32_QSPI_CfgInstruction>:

uint8_t BSP_STM32_QSPI_CfgInstruction(uint32_t Mode, uint8_t Instruction) {
 8007f70:	4602      	mov	r2, r0

	qspictx.InstructionMode = Mode;
 8007f72:	4b02      	ldr	r3, [pc, #8]	; (8007f7c <BSP_STM32_QSPI_CfgInstruction+0xc>)
	qspictx.Instruction = Instruction;

	return BSP_OK;
}
 8007f74:	2000      	movs	r0, #0
	qspictx.Instruction = Instruction;
 8007f76:	e9c3 2100 	strd	r2, r1, [r3]
}
 8007f7a:	4770      	bx	lr
 8007f7c:	240004b4 	.word	0x240004b4

08007f80 <BSP_STM32_QSPI_CfgAddress>:

uint8_t BSP_STM32_QSPI_CfgAddress(uint32_t Mode, uint32_t Size, uint32_t Address) {

	qspictx.AddressMode = Mode;
 8007f80:	4b02      	ldr	r3, [pc, #8]	; (8007f8c <BSP_STM32_QSPI_CfgAddress+0xc>)
 8007f82:	6098      	str	r0, [r3, #8]
	qspictx.AddressSize = Size;
	qspictx.Address = Address;

	return BSP_OK;
}
 8007f84:	2000      	movs	r0, #0
	qspictx.Address = Address;
 8007f86:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 8007f8a:	4770      	bx	lr
 8007f8c:	240004b4 	.word	0x240004b4

08007f90 <BSP_STM32_QSPI_CfgData>:
	return BSP_OK;
}

uint8_t BSP_STM32_QSPI_CfgData(uint32_t Mode, uint8_t * pData, uint32_t Length) {

	qspictx.DataMode = Mode;
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <BSP_STM32_QSPI_CfgData+0xc>)
 8007f92:	6258      	str	r0, [r3, #36]	; 0x24
	qspictx.DataLenth = Length;
	qspictx.pData = pData;

	return BSP_OK;
}
 8007f94:	2000      	movs	r0, #0
	qspictx.pData = pData;
 8007f96:	e9c3 210a 	strd	r2, r1, [r3, #40]	; 0x28
}
 8007f9a:	4770      	bx	lr
 8007f9c:	240004b4 	.word	0x240004b4

08007fa0 <BSP_STM32_QSPI_CfgOptions>:

uint8_t	BSP_STM32_QSPI_CfgOptions(uint32_t DDRMode, uint32_t SignalDelay, uint32_t SIOOMode) {
	qspictx.DDRMode = DDRMode;
 8007fa0:	4b02      	ldr	r3, [pc, #8]	; (8007fac <BSP_STM32_QSPI_CfgOptions+0xc>)
 8007fa2:	6318      	str	r0, [r3, #48]	; 0x30
	qspictx.SignalDelay = SignalDelay;
	qspictx.SIOOMode = SIOOMode;

	return BSP_OK;
}
 8007fa4:	2000      	movs	r0, #0
	qspictx.SIOOMode = SIOOMode;
 8007fa6:	e9c3 120d 	strd	r1, r2, [r3, #52]	; 0x34
}
 8007faa:	4770      	bx	lr
 8007fac:	240004b4 	.word	0x240004b4

08007fb0 <BSP_STM32_QSPI_CfgAutoPooling>:

uint8_t BSP_STM32_QSPI_CfgAutoPooling(uint32_t mask, uint32_t match, uint32_t interval, uint32_t matchmode) {
 8007fb0:	b410      	push	{r4}
	qspictx.AutoPoolingMask = mask;
 8007fb2:	4c04      	ldr	r4, [pc, #16]	; (8007fc4 <BSP_STM32_QSPI_CfgAutoPooling+0x14>)
	qspictx.AutoPoolingMatch = match;
 8007fb4:	e9c4 100f 	strd	r1, r0, [r4, #60]	; 0x3c
	qspictx.AutoPoolingInterval = interval;
	qspictx.AutoPoolingMode = matchmode;
 8007fb8:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44

	return BSP_OK;
}
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	240004b4 	.word	0x240004b4

08007fc8 <BSP_STM32_QSPI_StartReceive>:


uint8_t BSP_STM32_QSPI_StartReceive(QUADSPI_TypeDef * hqspi) {
 8007fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fcc:	4604      	mov	r4, r0
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8007fce:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 8007fd2:	f7fc f84f 	bl	8004074 <BSP_GetTick>
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	e004      	b.n	8007fe4 <BSP_STM32_QSPI_StartReceive+0x1c>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8007fda:	f7fc f84b 	bl	8004074 <BSP_GetTick>
 8007fde:	1b40      	subs	r0, r0, r5
 8007fe0:	42b0      	cmp	r0, r6
 8007fe2:	d83f      	bhi.n	8008064 <BSP_STM32_QSPI_StartReceive+0x9c>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8007fe4:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8007fe6:	069a      	lsls	r2, r3, #26
 8007fe8:	d4f7      	bmi.n	8007fda <BSP_STM32_QSPI_StartReceive+0x12>

	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;

	// 2. Set CCR configuration register
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007fea:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f7ff ff32 	bl	8007e58 <_QSPI_GetConfigCCR>

	// 3. Initiate transmit of data by rewriting Address Register
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	; (800806c <BSP_STM32_QSPI_StartReceive+0xa4>)
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007ff6:	6160      	str	r0, [r4, #20]
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	b10a      	cbz	r2, 8008000 <BSP_STM32_QSPI_StartReceive+0x38>
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	61a2      	str	r2, [r4, #24]

	// 4. If Data block defined than receive data
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 8008000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008002:	b1d2      	cbz	r2, 800803a <BSP_STM32_QSPI_StartReceive+0x72>
		uint32_t xFerCount = qspictx.DataLenth;
		__IO uint8_t * pData = qspictx.pData;
 8008004:	e9d3 270a 	ldrd	r2, r7, [r3, #40]	; 0x28
		__IO uint8_t * pRegDR = (uint8_t *)&hqspi->DR;

		while (xFerCount > 0) {
 8008008:	b1ba      	cbz	r2, 800803a <BSP_STM32_QSPI_StartReceive+0x72>
 800800a:	eb07 0802 	add.w	r8, r7, r2
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800800e:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 8008012:	f7fc f82f 	bl	8004074 <BSP_GetTick>
 8008016:	4605      	mov	r5, r0
 8008018:	e004      	b.n	8008024 <BSP_STM32_QSPI_StartReceive+0x5c>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800801a:	f7fc f82b 	bl	8004074 <BSP_GetTick>
 800801e:	1b43      	subs	r3, r0, r5
 8008020:	42b3      	cmp	r3, r6
 8008022:	d81f      	bhi.n	8008064 <BSP_STM32_QSPI_StartReceive+0x9c>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8008024:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008026:	f013 0f06 	tst.w	r3, #6
 800802a:	d0f6      	beq.n	800801a <BSP_STM32_QSPI_StartReceive+0x52>

			//Wait until FT or TC flag is set to read received data
			if (_QSPI_WaitForFlag(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, 5000)) return BSP_TIMEOUT;

			// Copy data from DR register
			*pData = *pRegDR;
 800802c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f807 3b01 	strb.w	r3, [r7], #1
		while (xFerCount > 0) {
 8008036:	45b8      	cmp	r8, r7
 8008038:	d1eb      	bne.n	8008012 <BSP_STM32_QSPI_StartReceive+0x4a>
	uint32_t tick = BSP_GetTick();
 800803a:	f7fc f81b 	bl	8004074 <BSP_GetTick>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800803e:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 8008042:	4605      	mov	r5, r0
 8008044:	e004      	b.n	8008050 <BSP_STM32_QSPI_StartReceive+0x88>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008046:	f7fc f815 	bl	8004074 <BSP_GetTick>
 800804a:	1b40      	subs	r0, r0, r5
 800804c:	42b0      	cmp	r0, r6
 800804e:	d809      	bhi.n	8008064 <BSP_STM32_QSPI_StartReceive+0x9c>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8008050:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008052:	079b      	lsls	r3, r3, #30
 8008054:	d5f7      	bpl.n	8008046 <BSP_STM32_QSPI_StartReceive+0x7e>

	// 5. Wait for TC flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_TC, SET, 5000)) return BSP_TIMEOUT;

	// 6. Reset TC flag
	hqspi->FCR |= QSPI_FLAG_TC;
 8008056:	68e3      	ldr	r3, [r4, #12]


	return BSP_OK;
 8008058:	2000      	movs	r0, #0
	hqspi->FCR |= QSPI_FLAG_TC;
 800805a:	f043 0302 	orr.w	r3, r3, #2
 800805e:	60e3      	str	r3, [r4, #12]
}
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8008064:	2003      	movs	r0, #3
}
 8008066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800806a:	bf00      	nop
 800806c:	240004b4 	.word	0x240004b4

08008070 <BSP_STM32_QSPI_StartTransmit>:


uint8_t BSP_STM32_QSPI_StartTransmit(QUADSPI_TypeDef * hqspi) {
 8008070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	4604      	mov	r4, r0
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008076:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 800807a:	f7fb fffb 	bl	8004074 <BSP_GetTick>
 800807e:	4605      	mov	r5, r0
 8008080:	e004      	b.n	800808c <BSP_STM32_QSPI_StartTransmit+0x1c>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008082:	f7fb fff7 	bl	8004074 <BSP_GetTick>
 8008086:	1b40      	subs	r0, r0, r5
 8008088:	42b0      	cmp	r0, r6
 800808a:	d83d      	bhi.n	8008108 <BSP_STM32_QSPI_StartTransmit+0x98>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 800808c:	68a1      	ldr	r1, [r4, #8]
		if (reg == state) break;
 800808e:	f011 0120 	ands.w	r1, r1, #32
 8008092:	d1f6      	bne.n	8008082 <BSP_STM32_QSPI_StartTransmit+0x12>

	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;

	// 2. Set CCR configuration register
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008094:	4620      	mov	r0, r4
 8008096:	f7ff fedf 	bl	8007e58 <_QSPI_GetConfigCCR>

	// 3. Initiate transmit of data by rewriting Address Register
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 800809a:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <BSP_STM32_QSPI_StartTransmit+0xa0>)
	hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800809c:	6160      	str	r0, [r4, #20]
	if (qspictx.AddressMode != QSPI_ADDRESS_NONE) hqspi->AR = qspictx.Address;
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	b10a      	cbz	r2, 80080a6 <BSP_STM32_QSPI_StartTransmit+0x36>
 80080a2:	691a      	ldr	r2, [r3, #16]
 80080a4:	61a2      	str	r2, [r4, #24]

	// 4. If Data block defined than receive data
	if (qspictx.DataMode != QSPI_DATA_NONE) {
 80080a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080a8:	b1ca      	cbz	r2, 80080de <BSP_STM32_QSPI_StartTransmit+0x6e>
		uint32_t xFerCount = qspictx.DataLenth;
		__IO uint8_t * pData = qspictx.pData;
 80080aa:	e9d3 270a 	ldrd	r2, r7, [r3, #40]	; 0x28
		__IO uint8_t * pRegDR = (uint8_t *)&hqspi->DR;

		while (xFerCount > 0) {
 80080ae:	b1b2      	cbz	r2, 80080de <BSP_STM32_QSPI_StartTransmit+0x6e>
 80080b0:	eb07 0802 	add.w	r8, r7, r2
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80080b4:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 80080b8:	f7fb ffdc 	bl	8004074 <BSP_GetTick>
 80080bc:	4605      	mov	r5, r0
 80080be:	e004      	b.n	80080ca <BSP_STM32_QSPI_StartTransmit+0x5a>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80080c0:	f7fb ffd8 	bl	8004074 <BSP_GetTick>
 80080c4:	1b43      	subs	r3, r0, r5
 80080c6:	42b3      	cmp	r3, r6
 80080c8:	d81e      	bhi.n	8008108 <BSP_STM32_QSPI_StartTransmit+0x98>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 80080ca:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 80080cc:	075a      	lsls	r2, r3, #29
 80080ce:	d5f7      	bpl.n	80080c0 <BSP_STM32_QSPI_StartTransmit+0x50>

			//Wait until FT is set to transmit data
			if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_FT, SET, 5000)) return BSP_TIMEOUT;

			// Copy data to DR register
			 *pRegDR = *pData;
 80080d0:	f817 3b01 	ldrb.w	r3, [r7], #1
 80080d4:	b2db      	uxtb	r3, r3
		while (xFerCount > 0) {
 80080d6:	45b8      	cmp	r8, r7
			 *pRegDR = *pData;
 80080d8:	f884 3020 	strb.w	r3, [r4, #32]
		while (xFerCount > 0) {
 80080dc:	d1ec      	bne.n	80080b8 <BSP_STM32_QSPI_StartTransmit+0x48>
	uint32_t tick = BSP_GetTick();
 80080de:	f7fb ffc9 	bl	8004074 <BSP_GetTick>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80080e2:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 80080e6:	4605      	mov	r5, r0
 80080e8:	e004      	b.n	80080f4 <BSP_STM32_QSPI_StartTransmit+0x84>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 80080ea:	f7fb ffc3 	bl	8004074 <BSP_GetTick>
 80080ee:	1b40      	subs	r0, r0, r5
 80080f0:	42b0      	cmp	r0, r6
 80080f2:	d809      	bhi.n	8008108 <BSP_STM32_QSPI_StartTransmit+0x98>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 80080f4:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 80080f6:	079b      	lsls	r3, r3, #30
 80080f8:	d5f7      	bpl.n	80080ea <BSP_STM32_QSPI_StartTransmit+0x7a>

	// 5. Wait for TC flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_TC, SET, 5000)) return BSP_TIMEOUT;

	// 6. Reset TC flag
	hqspi->FCR |= QSPI_FLAG_TC;
 80080fa:	68e3      	ldr	r3, [r4, #12]


	return BSP_OK;
 80080fc:	2000      	movs	r0, #0
	hqspi->FCR |= QSPI_FLAG_TC;
 80080fe:	f043 0302 	orr.w	r3, r3, #2
 8008102:	60e3      	str	r3, [r4, #12]
}
 8008104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8008108:	2003      	movs	r0, #3
}
 800810a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800810e:	bf00      	nop
 8008110:	240004b4 	.word	0x240004b4

08008114 <BSP_STM32_QSPI_StartAutoPooling>:

	 return BSP_OK;
}


uint8_t BSP_STM32_QSPI_StartAutoPooling(QUADSPI_TypeDef * hqspi) {
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	4604      	mov	r4, r0
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008118:	f241 3688 	movw	r6, #5000	; 0x1388
	uint32_t tick = BSP_GetTick();
 800811c:	f7fb ffaa 	bl	8004074 <BSP_GetTick>
 8008120:	4605      	mov	r5, r0
 8008122:	e004      	b.n	800812e <BSP_STM32_QSPI_StartAutoPooling+0x1a>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 8008124:	f7fb ffa6 	bl	8004074 <BSP_GetTick>
 8008128:	1b43      	subs	r3, r0, r5
 800812a:	42b3      	cmp	r3, r6
 800812c:	d831      	bhi.n	8008192 <BSP_STM32_QSPI_StartAutoPooling+0x7e>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 800812e:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008130:	069a      	lsls	r2, r3, #26
 8008132:	d4f7      	bmi.n	8008124 <BSP_STM32_QSPI_StartAutoPooling+0x10>
	// 1. Wait till BUSY flag reset
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;

	// 2. Configure Auto Pooling parameters
	hqspi->PSMAR = qspictx.AutoPoolingMatch;
 8008134:	4b18      	ldr	r3, [pc, #96]	; (8008198 <BSP_STM32_QSPI_StartAutoPooling+0x84>)

	// 3. Configure CR register for Auto Pooling mode
    MODIFY_REG(hqspi->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), (qspictx.AutoPoolingMode | QSPI_AUTOMATIC_STOP_ENABLE));

    // 4. Configure CCR register
    hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008136:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800813a:	4620      	mov	r0, r4
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800813c:	f64e 2660 	movw	r6, #60000	; 0xea60
	hqspi->PSMAR = qspictx.AutoPoolingMatch;
 8008140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008142:	62a2      	str	r2, [r4, #40]	; 0x28
	hqspi->PSMKR = qspictx.AutoPoolingMask;
 8008144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008146:	6262      	str	r2, [r4, #36]	; 0x24
	hqspi->PIR = qspictx.AutoPoolingInterval;
 8008148:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800814a:	62e2      	str	r2, [r4, #44]	; 0x2c
    MODIFY_REG(hqspi->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), (qspictx.AutoPoolingMode | QSPI_AUTOMATIC_STOP_ENABLE));
 800814c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008154:	4313      	orrs	r3, r2
 8008156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800815a:	6023      	str	r3, [r4, #0]
    hqspi->CCR = _QSPI_GetConfigCCR(hqspi, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800815c:	f7ff fe7c 	bl	8007e58 <_QSPI_GetConfigCCR>
 8008160:	6160      	str	r0, [r4, #20]
	uint32_t tick = BSP_GetTick();
 8008162:	f7fb ff87 	bl	8004074 <BSP_GetTick>
 8008166:	4605      	mov	r5, r0
 8008168:	e004      	b.n	8008174 <BSP_STM32_QSPI_StartAutoPooling+0x60>
		if ((BSP_GetTick() - tick) > timeout) return BSP_TIMEOUT;
 800816a:	f7fb ff83 	bl	8004074 <BSP_GetTick>
 800816e:	1b40      	subs	r0, r0, r5
 8008170:	42b0      	cmp	r0, r6
 8008172:	d80e      	bhi.n	8008192 <BSP_STM32_QSPI_StartAutoPooling+0x7e>
		uint32_t reg = ((hqspi->SR & flag) == 0)?RESET:SET;
 8008174:	68a3      	ldr	r3, [r4, #8]
		if (reg == state) break;
 8008176:	071b      	lsls	r3, r3, #28
 8008178:	d5f7      	bpl.n	800816a <BSP_STM32_QSPI_StartAutoPooling+0x56>

	// 5. Wait for SM flag to SET
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_SM, SET, 60000)) return BSP_TIMEOUT;

	hqspi->FCR = QSPI_FLAG_SM;
 800817a:	2308      	movs	r3, #8

	// 6. Exit autopooling mode
	SET_BIT(hqspi->CR, QUADSPI_CR_ABORT);
	CLEAR_BIT(hqspi->CCR, QUADSPI_CCR_FMODE);

	return BSP_OK;
 800817c:	2000      	movs	r0, #0
	hqspi->FCR = QSPI_FLAG_SM;
 800817e:	60e3      	str	r3, [r4, #12]
	SET_BIT(hqspi->CR, QUADSPI_CR_ABORT);
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	f043 0302 	orr.w	r3, r3, #2
 8008186:	6023      	str	r3, [r4, #0]
	CLEAR_BIT(hqspi->CCR, QUADSPI_CCR_FMODE);
 8008188:	6963      	ldr	r3, [r4, #20]
 800818a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800818e:	6163      	str	r3, [r4, #20]
}
 8008190:	bd70      	pop	{r4, r5, r6, pc}
	if (_QSPI_WaitForFlag(hqspi, QSPI_FLAG_BUSY, RESET, 5000)) return BSP_TIMEOUT;
 8008192:	2003      	movs	r0, #3
}
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	bf00      	nop
 8008198:	240004b4 	.word	0x240004b4

0800819c <BSP_STM32_RCC_CLKConfig_RTC>:
 *******************************************************************/

#include "BSP_STM32_RCC.h"

// Setting RTC clock source to external LSE
uint8_t BSP_STM32_RCC_CLKConfig_RTC() {
 800819c:	b570      	push	{r4, r5, r6, lr}

	uint32_t tickstart;
	uint32_t tmpreg;

	// Enable write access to Backup domain
	SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800819e:	4c1f      	ldr	r4, [pc, #124]	; (800821c <BSP_STM32_RCC_CLKConfig_RTC+0x80>)
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a6:	6023      	str	r3, [r4, #0]

	// Wait for Backup domain Write protection disable
	tickstart = BSP_GetTick();
 80081a8:	f7fb ff64 	bl	8004074 <BSP_GetTick>
 80081ac:	4605      	mov	r5, r0

	while ((PWR->CR1 & PWR_CR1_DBP) == 0) if ((BSP_GetTick() - tickstart) > 100) return BSP_ERROR;
 80081ae:	e004      	b.n	80081ba <BSP_STM32_RCC_CLKConfig_RTC+0x1e>
 80081b0:	f7fb ff60 	bl	8004074 <BSP_GetTick>
 80081b4:	1b40      	subs	r0, r0, r5
 80081b6:	2864      	cmp	r0, #100	; 0x64
 80081b8:	d82e      	bhi.n	8008218 <BSP_STM32_RCC_CLKConfig_RTC+0x7c>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	05da      	lsls	r2, r3, #23
 80081be:	d5f7      	bpl.n	80081b0 <BSP_STM32_RCC_CLKConfig_RTC+0x14>

	// Reset the Backup domain only if the RTC Clock source selection is modified
	if ((RCC->BDCR & RCC_BDCR_RTCSEL) != RCC_RTCCLKSOURCE_LSE) {
 80081c0:	4b17      	ldr	r3, [pc, #92]	; (8008220 <BSP_STM32_RCC_CLKConfig_RTC+0x84>)
 80081c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081c4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80081c8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80081cc:	d00b      	beq.n	80081e6 <BSP_STM32_RCC_CLKConfig_RTC+0x4a>

		// Store the content of BDCR register before the reset of Backup Domain
	    tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70

	    // RTC Clock selection can be changed only if the Backup Domain is reset
	    __BSP_RCC_BACKUPRESET_FORCE();
 80081d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
	    tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
	    __BSP_RCC_BACKUPRESET_FORCE();
 80081d6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80081da:	6719      	str	r1, [r3, #112]	; 0x70
	    __BSP_RCC_BACKUPRESET_RELEASE();
 80081dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80081de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80081e2:	6719      	str	r1, [r3, #112]	; 0x70

	    // Restore the Content of BDCR register
	    RCC->BDCR = tmpreg;
 80081e4:	671a      	str	r2, [r3, #112]	; 0x70
	}

	// Wait for LSE reactivation
    tickstart = BSP_GetTick();
 80081e6:	f7fb ff45 	bl	8004074 <BSP_GetTick>

	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_ERROR;
 80081ea:	4c0d      	ldr	r4, [pc, #52]	; (8008220 <BSP_STM32_RCC_CLKConfig_RTC+0x84>)
 80081ec:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = BSP_GetTick();
 80081f0:	4605      	mov	r5, r0
	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_ERROR;
 80081f2:	e004      	b.n	80081fe <BSP_STM32_RCC_CLKConfig_RTC+0x62>
 80081f4:	f7fb ff3e 	bl	8004074 <BSP_GetTick>
 80081f8:	1b40      	subs	r0, r0, r5
 80081fa:	42b0      	cmp	r0, r6
 80081fc:	d80c      	bhi.n	8008218 <BSP_STM32_RCC_CLKConfig_RTC+0x7c>
 80081fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008200:	079b      	lsls	r3, r3, #30
 8008202:	d5f7      	bpl.n	80081f4 <BSP_STM32_RCC_CLKConfig_RTC+0x58>

	__BSP_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8008204:	6923      	ldr	r3, [r4, #16]

	return BSP_OK;
 8008206:	2000      	movs	r0, #0
	__BSP_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8008208:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008214:	6723      	str	r3, [r4, #112]	; 0x70
}
 8008216:	bd70      	pop	{r4, r5, r6, pc}
	while ((PWR->CR1 & PWR_CR1_DBP) == 0) if ((BSP_GetTick() - tickstart) > 100) return BSP_ERROR;
 8008218:	2001      	movs	r0, #1
}
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	58024800 	.word	0x58024800
 8008220:	58024400 	.word	0x58024400

08008224 <BSP_STM32_RCC_CLKConfig_FMC>:

// Setting FMC clock source to HCLK
uint8_t BSP_STM32_RCC_CLKConfig_FMC() {
	// This is default configuration. Nothing to change.
	return BSP_OK;
}
 8008224:	2000      	movs	r0, #0
 8008226:	4770      	bx	lr

08008228 <BSP_STM32_RCC_CLKConfig_I2C1>:

// Setting I2C1 clock source to PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_I2C1() {
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_I2C123SEL, RCC_I2C123CLKSOURCE_D2PCLK1);
 8008228:	4a03      	ldr	r2, [pc, #12]	; (8008238 <BSP_STM32_RCC_CLKConfig_I2C1+0x10>)
	return BSP_OK;
}
 800822a:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_I2C123SEL, RCC_I2C123CLKSOURCE_D2PCLK1);
 800822c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800822e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008232:	6553      	str	r3, [r2, #84]	; 0x54
}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	58024400 	.word	0x58024400

0800823c <BSP_STM32_RCC_CLKConfig_I2C4>:

// Setting I2C4 clock source to PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_I2C4() {
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_I2C4SEL, RCC_I2C4CLKSOURCE_D3PCLK1);
 800823c:	4a03      	ldr	r2, [pc, #12]	; (800824c <BSP_STM32_RCC_CLKConfig_I2C4+0x10>)
	return BSP_OK;
}
 800823e:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_I2C4SEL, RCC_I2C4CLKSOURCE_D3PCLK1);
 8008240:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008246:	6593      	str	r3, [r2, #88]	; 0x58
}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400

08008250 <BSP_STM32_RCC_CLKConfig_QSPI>:
}


// Setting QSPI clock source to D1HCLK
uint8_t BSP_STM32_RCC_CLKConfig_QSPI() {
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_QSPISEL, RCC_QSPICLKSOURCE_D1HCLK);
 8008250:	4a03      	ldr	r2, [pc, #12]	; (8008260 <BSP_STM32_RCC_CLKConfig_QSPI+0x10>)
	return BSP_OK;
}
 8008252:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_QSPISEL, RCC_QSPICLKSOURCE_D1HCLK);
 8008254:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008256:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800825a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	58024400 	.word	0x58024400

08008264 <BSP_STM32_RCC_CLKConfig_SDMMC2>:


// Setting SDMMC2 clock source to PLL
uint8_t BSP_STM32_RCC_CLKConfig_SDMMC2() {
	RCC->PLLCFGR |= RCC_PLLCFGR_DIVQ1EN;
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <BSP_STM32_RCC_CLKConfig_SDMMC2+0x18>)
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_SDMMCSEL, RCC_SDMMCCLKSOURCE_PLL);
	return BSP_OK;
}
 8008266:	2000      	movs	r0, #0
	RCC->PLLCFGR |= RCC_PLLCFGR_DIVQ1EN;
 8008268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800826e:	62da      	str	r2, [r3, #44]	; 0x2c
	MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_SDMMCSEL, RCC_SDMMCCLKSOURCE_PLL);
 8008270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008276:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	58024400 	.word	0x58024400

08008280 <BSP_STM32_RCC_CLKConfig_UART5>:


// Setting UART5 clock source to D2PCLK1
uint8_t BSP_STM32_RCC_CLKConfig_UART5() {
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USART28SEL, RCC_USART234578CLKSOURCE_D2PCLK1);
 8008280:	4a03      	ldr	r2, [pc, #12]	; (8008290 <BSP_STM32_RCC_CLKConfig_UART5+0x10>)
	return BSP_OK;
}
 8008282:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USART28SEL, RCC_USART234578CLKSOURCE_D2PCLK1);
 8008284:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	6553      	str	r3, [r2, #84]	; 0x54
}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	58024400 	.word	0x58024400

08008294 <BSP_STM32_RCC_CLKConfig_USART2>:
 8008294:	4a03      	ldr	r2, [pc, #12]	; (80082a4 <BSP_STM32_RCC_CLKConfig_USART2+0x10>)
 8008296:	2000      	movs	r0, #0
 8008298:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	6553      	str	r3, [r2, #84]	; 0x54
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	58024400 	.word	0x58024400

080082a8 <BSP_STM32_RCC_CLKConfig_USBFS>:
	return BSP_OK;
}

// Setting USBFS clock source to_HSI48
uint8_t BSP_STM32_RCC_CLKConfig_USBFS() {
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USBSEL, RCC_USBCLKSOURCE_HSI48);
 80082a8:	4a03      	ldr	r2, [pc, #12]	; (80082b8 <BSP_STM32_RCC_CLKConfig_USBFS+0x10>)
	return BSP_OK;
}
 80082aa:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USBSEL, RCC_USBCLKSOURCE_HSI48);
 80082ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80082ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082b2:	6553      	str	r3, [r2, #84]	; 0x54
}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	58024400 	.word	0x58024400

080082bc <BSP_STM32_RCC_CLKConfig_ADC>:

// Setting ADC clock source to PLL3
uint8_t BSP_STM32_RCC_CLKConfig_ADC() {
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, RCC_ADCCLKSOURCE_PLL3);
 80082bc:	4a04      	ldr	r2, [pc, #16]	; (80082d0 <BSP_STM32_RCC_CLKConfig_ADC+0x14>)
	return BSP_OK;
}
 80082be:	2000      	movs	r0, #0
	MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, RCC_ADCCLKSOURCE_PLL3);
 80082c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80082c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80082c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ca:	6593      	str	r3, [r2, #88]	; 0x58
}
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	58024400 	.word	0x58024400

080082d4 <BSP_STM32_RCC_CLKConfig_LTDC>:
 80082d4:	2000      	movs	r0, #0
 80082d6:	4770      	bx	lr

080082d8 <BSP_STM32_RCC_PLLClockSource>:
	return BSP_OK;
}

// Setting the PLL clock source
uint8_t BSP_STM32_RCC_PLLClockSource(uint32_t pllsource) {
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, pllsource);
 80082d8:	4a04      	ldr	r2, [pc, #16]	; (80082ec <BSP_STM32_RCC_PLLClockSource+0x14>)
uint8_t BSP_STM32_RCC_PLLClockSource(uint32_t pllsource) {
 80082da:	4601      	mov	r1, r0
	return BSP_OK;
}
 80082dc:	2000      	movs	r0, #0
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, pllsource);
 80082de:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80082e0:	f023 0303 	bic.w	r3, r3, #3
 80082e4:	430b      	orrs	r3, r1
 80082e6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	58024400 	.word	0x58024400

080082f0 <BSP_STM32_RCC_LSEConfigDrive>:

// Setting LSE drive capability
uint8_t BSP_STM32_RCC_LSEConfigDrive(uint32_t lsedrive) {
	MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, lsedrive);
 80082f0:	4a04      	ldr	r2, [pc, #16]	; (8008304 <BSP_STM32_RCC_LSEConfigDrive+0x14>)
uint8_t BSP_STM32_RCC_LSEConfigDrive(uint32_t lsedrive) {
 80082f2:	4601      	mov	r1, r0
	return BSP_OK;
}
 80082f4:	2000      	movs	r0, #0
	MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, lsedrive);
 80082f6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80082f8:	f023 0318 	bic.w	r3, r3, #24
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	58024400 	.word	0x58024400

08008308 <BSP_STM32_RCC_ConfigHSE>:
uint8_t BSP_STM32_RCC_ConfigHSE(uint32_t hsestate) {

	uint32_t tickstart;

	// Getting system clock source
    uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 8008308:	4a2e      	ldr	r2, [pc, #184]	; (80083c4 <BSP_STM32_RCC_ConfigHSE+0xbc>)
uint8_t BSP_STM32_RCC_ConfigHSE(uint32_t hsestate) {
 800830a:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 800830c:	6913      	ldr	r3, [r2, #16]
    uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800830e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 8008310:	f003 0338 	and.w	r3, r3, #56	; 0x38

    // When the HSE is used as system clock or clock source for PLL in these cases HSE will not be disabled
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE))) {
 8008314:	2b10      	cmp	r3, #16
 8008316:	d024      	beq.n	8008362 <BSP_STM32_RCC_ConfigHSE+0x5a>
 8008318:	2b18      	cmp	r3, #24
 800831a:	d01e      	beq.n	800835a <BSP_STM32_RCC_ConfigHSE+0x52>
    	if (((RCC->CR & RCC_CR_HSERDY) != 0U) && (hsestate == RCC_HSE_OFF)) return BSP_ERROR;

    } else {

    	// Set the new HSE configuration
    	switch (hsestate) {
 800831c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8008320:	d049      	beq.n	80083b6 <BSP_STM32_RCC_ConfigHSE+0xae>
 8008322:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 8008326:	d03c      	beq.n	80083a2 <BSP_STM32_RCC_ConfigHSE+0x9a>
 8008328:	b318      	cbz	r0, 8008372 <BSP_STM32_RCC_ConfigHSE+0x6a>
    	case RCC_HSE_BYPASS:
    		SET_BIT(RCC->CR, RCC_CR_HSEBYP);
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
    		break;
    	default:
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800832a:	4b26      	ldr	r3, [pc, #152]	; (80083c4 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008332:	601a      	str	r2, [r3, #0]
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800833a:	601a      	str	r2, [r3, #0]
    	}

    	// Check the HSE State

    	tickstart = BSP_GetTick();
 800833c:	f7fb fe9a 	bl	8004074 <BSP_GetTick>
    	if (hsestate != RCC_HSE_OFF) {

    		// Wait till HSE is ready
    		while ((RCC->CR & RCC_CR_HSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 8008340:	4d20      	ldr	r5, [pc, #128]	; (80083c4 <BSP_STM32_RCC_ConfigHSE+0xbc>)
    	tickstart = BSP_GetTick();
 8008342:	4604      	mov	r4, r0
    	if (hsestate != RCC_HSE_OFF) {
 8008344:	e004      	b.n	8008350 <BSP_STM32_RCC_ConfigHSE+0x48>
    		while ((RCC->CR & RCC_CR_HSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 8008346:	f7fb fe95 	bl	8004074 <BSP_GetTick>
 800834a:	1b00      	subs	r0, r0, r4
 800834c:	2864      	cmp	r0, #100	; 0x64
 800834e:	d826      	bhi.n	800839e <BSP_STM32_RCC_ConfigHSE+0x96>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	039a      	lsls	r2, r3, #14
 8008354:	d5f7      	bpl.n	8008346 <BSP_STM32_RCC_ConfigHSE+0x3e>
    		// Wait till HSE is disabled
    		while ((RCC->CR & RCC_CR_HSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;

        }
    }
    return BSP_OK;
 8008356:	2000      	movs	r0, #0
}
 8008358:	bd38      	pop	{r3, r4, r5, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE))) {
 800835a:	f002 0203 	and.w	r2, r2, #3
 800835e:	2a02      	cmp	r2, #2
 8008360:	d1dc      	bne.n	800831c <BSP_STM32_RCC_ConfigHSE+0x14>
    	if (((RCC->CR & RCC_CR_HSERDY) != 0U) && (hsestate == RCC_HSE_OFF)) return BSP_ERROR;
 8008362:	4b18      	ldr	r3, [pc, #96]	; (80083c4 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 8008364:	fab0 f080 	clz	r0, r0
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	0940      	lsrs	r0, r0, #5
 800836c:	ea00 4053 	and.w	r0, r0, r3, lsr #17
}
 8008370:	bd38      	pop	{r3, r4, r5, pc}
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008372:	4c14      	ldr	r4, [pc, #80]	; (80083c4 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837a:	6023      	str	r3, [r4, #0]
    		CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008382:	6023      	str	r3, [r4, #0]
    	tickstart = BSP_GetTick();
 8008384:	f7fb fe76 	bl	8004074 <BSP_GetTick>
 8008388:	4605      	mov	r5, r0
    	if (hsestate != RCC_HSE_OFF) {
 800838a:	e004      	b.n	8008396 <BSP_STM32_RCC_ConfigHSE+0x8e>
    		while ((RCC->CR & RCC_CR_HSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 800838c:	f7fb fe72 	bl	8004074 <BSP_GetTick>
 8008390:	1b40      	subs	r0, r0, r5
 8008392:	2864      	cmp	r0, #100	; 0x64
 8008394:	d803      	bhi.n	800839e <BSP_STM32_RCC_ConfigHSE+0x96>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	039b      	lsls	r3, r3, #14
 800839a:	d4f7      	bmi.n	800838c <BSP_STM32_RCC_ConfigHSE+0x84>
 800839c:	e7db      	b.n	8008356 <BSP_STM32_RCC_ConfigHSE+0x4e>
    		while ((RCC->CR & RCC_CR_HSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 800839e:	2003      	movs	r0, #3
}
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
    		SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80083a2:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083aa:	601a      	str	r2, [r3, #0]
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083b2:	601a      	str	r2, [r3, #0]
    		break;
 80083b4:	e7c2      	b.n	800833c <BSP_STM32_RCC_ConfigHSE+0x34>
    		SET_BIT(RCC->CR, RCC_CR_HSEON);
 80083b6:	4a03      	ldr	r2, [pc, #12]	; (80083c4 <BSP_STM32_RCC_ConfigHSE+0xbc>)
 80083b8:	6813      	ldr	r3, [r2, #0]
 80083ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083be:	6013      	str	r3, [r2, #0]
    		break;
 80083c0:	e7bc      	b.n	800833c <BSP_STM32_RCC_ConfigHSE+0x34>
 80083c2:	bf00      	nop
 80083c4:	58024400 	.word	0x58024400

080083c8 <BSP_STM32_RCC_ConfigHSI>:
uint8_t BSP_STM32_RCC_ConfigHSI(uint32_t hsistate, uint32_t hsicalvalue) {

	uint32_t tickstart;

    // When the HSI is used as system clock it will not be disabled
    const uint32_t temp_sysclksrc = RCC->CFGR & RCC_CFGR_SWS;
 80083c8:	4a2a      	ldr	r2, [pc, #168]	; (8008474 <BSP_STM32_RCC_ConfigHSI+0xac>)
 80083ca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI))) {
 80083ce:	f013 0338 	ands.w	r3, r3, #56	; 0x38
uint8_t BSP_STM32_RCC_ConfigHSI(uint32_t hsistate, uint32_t hsicalvalue) {
 80083d2:	b570      	push	{r4, r5, r6, lr}
 80083d4:	460d      	mov	r5, r1
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI))) {
 80083d6:	d01f      	beq.n	8008418 <BSP_STM32_RCC_ConfigHSI+0x50>
 80083d8:	2b18      	cmp	r3, #24
 80083da:	d01b      	beq.n	8008414 <BSP_STM32_RCC_ConfigHSI+0x4c>

    	// Check the HSI State
    	if (hsistate != RCC_HSI_OFF) {

    		// Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8)
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 80083dc:	4c25      	ldr	r4, [pc, #148]	; (8008474 <BSP_STM32_RCC_ConfigHSI+0xac>)
 80083de:	6823      	ldr	r3, [r4, #0]
    	if (hsistate != RCC_HSI_OFF) {
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d033      	beq.n	800844c <BSP_STM32_RCC_ConfigHSI+0x84>
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 80083e4:	f023 0319 	bic.w	r3, r3, #25
 80083e8:	4303      	orrs	r3, r0
 80083ea:	6023      	str	r3, [r4, #0]

    		// Wait till HSI is ready
    		tickstart = BSP_GetTick();
 80083ec:	f7fb fe42 	bl	8004074 <BSP_GetTick>
 80083f0:	4606      	mov	r6, r0
    		while ((RCC->CR & RCC_CR_HSIRDY) == 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80083f2:	e004      	b.n	80083fe <BSP_STM32_RCC_ConfigHSI+0x36>
 80083f4:	f7fb fe3e 	bl	8004074 <BSP_GetTick>
 80083f8:	1b80      	subs	r0, r0, r6
 80083fa:	2802      	cmp	r0, #2
 80083fc:	d824      	bhi.n	8008448 <BSP_STM32_RCC_ConfigHSI+0x80>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	075b      	lsls	r3, r3, #29
 8008402:	d5f7      	bpl.n	80083f4 <BSP_STM32_RCC_ConfigHSI+0x2c>

    		// Adjusts the Internal High Speed oscillator (HSI) calibration value (REV_V only)
    		MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, hsicalvalue << RCC_HSICFGR_HSITRIM_Pos);
 8008404:	6863      	ldr	r3, [r4, #4]
    	  	while ((RCC->CR & RCC_CR_HSIRDY) != 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
    	}

    }

    return BSP_OK;
 8008406:	2000      	movs	r0, #0
    		MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, hsicalvalue << RCC_HSICFGR_HSITRIM_Pos);
 8008408:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800840c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8008410:	6063      	str	r3, [r4, #4]
}
 8008412:	bd70      	pop	{r4, r5, r6, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI))) {
 8008414:	0794      	lsls	r4, r2, #30
 8008416:	d1e1      	bne.n	80083dc <BSP_STM32_RCC_ConfigHSI+0x14>
    	if (((RCC->CR & RCC_CR_HSIRDY) != 0U) && (hsistate == RCC_HSI_OFF)) {
 8008418:	4b16      	ldr	r3, [pc, #88]	; (8008474 <BSP_STM32_RCC_ConfigHSI+0xac>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	0759      	lsls	r1, r3, #29
 800841e:	d500      	bpl.n	8008422 <BSP_STM32_RCC_ConfigHSI+0x5a>
 8008420:	b330      	cbz	r0, 8008470 <BSP_STM32_RCC_ConfigHSI+0xa8>
    		MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIV , hsistate);
 8008422:	4c14      	ldr	r4, [pc, #80]	; (8008474 <BSP_STM32_RCC_ConfigHSI+0xac>)
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	f023 0319 	bic.w	r3, r3, #25
 800842a:	4303      	orrs	r3, r0
 800842c:	6023      	str	r3, [r4, #0]
    		tickstart = BSP_GetTick();
 800842e:	f7fb fe21 	bl	8004074 <BSP_GetTick>
 8008432:	4606      	mov	r6, r0
    		while ((RCC->CR & RCC_CR_HSIRDY) == 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008434:	e004      	b.n	8008440 <BSP_STM32_RCC_ConfigHSI+0x78>
 8008436:	f7fb fe1d 	bl	8004074 <BSP_GetTick>
 800843a:	1b80      	subs	r0, r0, r6
 800843c:	2802      	cmp	r0, #2
 800843e:	d803      	bhi.n	8008448 <BSP_STM32_RCC_ConfigHSI+0x80>
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	075a      	lsls	r2, r3, #29
 8008444:	d5f7      	bpl.n	8008436 <BSP_STM32_RCC_ConfigHSI+0x6e>
 8008446:	e7dd      	b.n	8008404 <BSP_STM32_RCC_ConfigHSI+0x3c>
 8008448:	2003      	movs	r0, #3
}
 800844a:	bd70      	pop	{r4, r5, r6, pc}
    		CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800844c:	f023 0301 	bic.w	r3, r3, #1
 8008450:	6023      	str	r3, [r4, #0]
    	  	tickstart = BSP_GetTick();
 8008452:	f7fb fe0f 	bl	8004074 <BSP_GetTick>
 8008456:	4605      	mov	r5, r0
    	  	while ((RCC->CR & RCC_CR_HSIRDY) != 0U) if ((uint32_t)(BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008458:	e004      	b.n	8008464 <BSP_STM32_RCC_ConfigHSI+0x9c>
 800845a:	f7fb fe0b 	bl	8004074 <BSP_GetTick>
 800845e:	1b40      	subs	r0, r0, r5
 8008460:	2802      	cmp	r0, #2
 8008462:	d8f1      	bhi.n	8008448 <BSP_STM32_RCC_ConfigHSI+0x80>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	f013 0304 	ands.w	r3, r3, #4
 800846a:	d1f6      	bne.n	800845a <BSP_STM32_RCC_ConfigHSI+0x92>
    return BSP_OK;
 800846c:	4618      	mov	r0, r3
}
 800846e:	bd70      	pop	{r4, r5, r6, pc}
    		return BSP_ERROR;
 8008470:	2001      	movs	r0, #1
}
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	58024400 	.word	0x58024400

08008478 <BSP_STM32_RCC_ConfigLSE>:


// Configure LSE Oscillator
uint8_t BSP_STM32_RCC_ConfigLSE(uint32_t lsestate) {
 8008478:	b570      	push	{r4, r5, r6, lr}
	uint32_t tickstart;

	// Enable write access to Backup domain
    PWR->CR1 |= PWR_CR1_DBP;
 800847a:	4c2e      	ldr	r4, [pc, #184]	; (8008534 <BSP_STM32_RCC_ConfigLSE+0xbc>)
uint8_t BSP_STM32_RCC_ConfigLSE(uint32_t lsestate) {
 800847c:	4606      	mov	r6, r0
    PWR->CR1 |= PWR_CR1_DBP;
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008484:	6023      	str	r3, [r4, #0]

    // Wait for Backup domain Write protection disable
    tickstart = BSP_GetTick();
 8008486:	f7fb fdf5 	bl	8004074 <BSP_GetTick>
 800848a:	4605      	mov	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 800848c:	e004      	b.n	8008498 <BSP_STM32_RCC_ConfigLSE+0x20>
 800848e:	f7fb fdf1 	bl	8004074 <BSP_GetTick>
 8008492:	1b43      	subs	r3, r0, r5
 8008494:	2b64      	cmp	r3, #100	; 0x64
 8008496:	d821      	bhi.n	80084dc <BSP_STM32_RCC_ConfigLSE+0x64>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	05d9      	lsls	r1, r3, #23
 800849c:	d5f7      	bpl.n	800848e <BSP_STM32_RCC_ConfigLSE+0x16>

    // Set the new LSE configuration
    switch (lsestate) {
 800849e:	2e01      	cmp	r6, #1
 80084a0:	d041      	beq.n	8008526 <BSP_STM32_RCC_ConfigLSE+0xae>
 80084a2:	2e05      	cmp	r6, #5
 80084a4:	d035      	beq.n	8008512 <BSP_STM32_RCC_ConfigLSE+0x9a>
 80084a6:	b1de      	cbz	r6, 80084e0 <BSP_STM32_RCC_ConfigLSE+0x68>
    case RCC_LSE_BYPASS:
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
    	break;
	default:
		CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80084a8:	4b23      	ldr	r3, [pc, #140]	; (8008538 <BSP_STM32_RCC_ConfigLSE+0xc0>)
 80084aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084ac:	f022 0201 	bic.w	r2, r2, #1
 80084b0:	671a      	str	r2, [r3, #112]	; 0x70
		CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80084b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084b4:	f022 0204 	bic.w	r2, r2, #4
 80084b8:	671a      	str	r2, [r3, #112]	; 0x70
    }


    // Check the LSE State
    tickstart = BSP_GetTick();
 80084ba:	f7fb fddb 	bl	8004074 <BSP_GetTick>
    if (lsestate != RCC_LSE_OFF) {

    	// Wait till LSE is ready
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80084be:	4d1e      	ldr	r5, [pc, #120]	; (8008538 <BSP_STM32_RCC_ConfigLSE+0xc0>)
 80084c0:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = BSP_GetTick();
 80084c4:	4604      	mov	r4, r0
    if (lsestate != RCC_LSE_OFF) {
 80084c6:	e004      	b.n	80084d2 <BSP_STM32_RCC_ConfigLSE+0x5a>
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80084c8:	f7fb fdd4 	bl	8004074 <BSP_GetTick>
 80084cc:	1b00      	subs	r0, r0, r4
 80084ce:	42b0      	cmp	r0, r6
 80084d0:	d804      	bhi.n	80084dc <BSP_STM32_RCC_ConfigLSE+0x64>
 80084d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80084d4:	079a      	lsls	r2, r3, #30
 80084d6:	d5f7      	bpl.n	80084c8 <BSP_STM32_RCC_ConfigLSE+0x50>

    	// Wait till LSE is disabled
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;

    }
    return BSP_OK;
 80084d8:	2000      	movs	r0, #0
}
 80084da:	bd70      	pop	{r4, r5, r6, pc}
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) if ((BSP_GetTick() - tickstart) > 100) return BSP_TIMEOUT;
 80084dc:	2003      	movs	r0, #3
}
 80084de:	bd70      	pop	{r4, r5, r6, pc}
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80084e0:	4c15      	ldr	r4, [pc, #84]	; (8008538 <BSP_STM32_RCC_ConfigLSE+0xc0>)
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80084e2:	f241 3688 	movw	r6, #5000	; 0x1388
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80084e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80084e8:	f023 0301 	bic.w	r3, r3, #1
 80084ec:	6723      	str	r3, [r4, #112]	; 0x70
    	CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80084ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80084f0:	f023 0304 	bic.w	r3, r3, #4
 80084f4:	6723      	str	r3, [r4, #112]	; 0x70
    tickstart = BSP_GetTick();
 80084f6:	f7fb fdbd 	bl	8004074 <BSP_GetTick>
 80084fa:	4605      	mov	r5, r0
    if (lsestate != RCC_LSE_OFF) {
 80084fc:	e004      	b.n	8008508 <BSP_STM32_RCC_ConfigLSE+0x90>
    	while ((RCC->BDCR & RCC_BDCR_LSERDY) != 0U) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80084fe:	f7fb fdb9 	bl	8004074 <BSP_GetTick>
 8008502:	1b40      	subs	r0, r0, r5
 8008504:	42b0      	cmp	r0, r6
 8008506:	d8e9      	bhi.n	80084dc <BSP_STM32_RCC_ConfigLSE+0x64>
 8008508:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800850a:	079b      	lsls	r3, r3, #30
 800850c:	d4f7      	bmi.n	80084fe <BSP_STM32_RCC_ConfigLSE+0x86>
    return BSP_OK;
 800850e:	2000      	movs	r0, #0
 8008510:	e7e3      	b.n	80084da <BSP_STM32_RCC_ConfigLSE+0x62>
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008512:	4b09      	ldr	r3, [pc, #36]	; (8008538 <BSP_STM32_RCC_ConfigLSE+0xc0>)
 8008514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008516:	f042 0204 	orr.w	r2, r2, #4
 800851a:	671a      	str	r2, [r3, #112]	; 0x70
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800851c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800851e:	f042 0201 	orr.w	r2, r2, #1
 8008522:	671a      	str	r2, [r3, #112]	; 0x70
    	break;
 8008524:	e7c9      	b.n	80084ba <BSP_STM32_RCC_ConfigLSE+0x42>
    	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008526:	4a04      	ldr	r2, [pc, #16]	; (8008538 <BSP_STM32_RCC_ConfigLSE+0xc0>)
 8008528:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800852a:	f043 0301 	orr.w	r3, r3, #1
 800852e:	6713      	str	r3, [r2, #112]	; 0x70
    	break;
 8008530:	e7c3      	b.n	80084ba <BSP_STM32_RCC_ConfigLSE+0x42>
 8008532:	bf00      	nop
 8008534:	58024800 	.word	0x58024800
 8008538:	58024400 	.word	0x58024400

0800853c <BSP_STM32_RCC_ConfigHSI48>:

// Configure HSI48 Oscillator
uint8_t BSP_STM32_RCC_ConfigHSI48(uint32_t hsi48state) {
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4605      	mov	r5, r0

	uint32_t tickstart = BSP_GetTick();
 8008540:	f7fb fd98 	bl	8004074 <BSP_GetTick>
 8008544:	4604      	mov	r4, r0

    // Check the HSI48 State
    if (hsi48state != RCC_HSI48_OFF) {
 8008546:	b17d      	cbz	r5, 8008568 <BSP_STM32_RCC_ConfigHSI48+0x2c>
    	// Enable the Internal Low Speed oscillator (HSI48)
    	SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 8008548:	4d10      	ldr	r5, [pc, #64]	; (800858c <BSP_STM32_RCC_ConfigHSI48+0x50>)
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008550:	602b      	str	r3, [r5, #0]

    	// Wait till HSI48 is ready
    	while ((RCC->CR & RCC_CR_HSI48RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008552:	e004      	b.n	800855e <BSP_STM32_RCC_ConfigHSI48+0x22>
 8008554:	f7fb fd8e 	bl	8004074 <BSP_GetTick>
 8008558:	1b03      	subs	r3, r0, r4
 800855a:	2b02      	cmp	r3, #2
 800855c:	d813      	bhi.n	8008586 <BSP_STM32_RCC_ConfigHSI48+0x4a>
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	049a      	lsls	r2, r3, #18
 8008562:	d5f7      	bpl.n	8008554 <BSP_STM32_RCC_ConfigHSI48+0x18>
    	/* Wait till HSI48 is ready */
    	while ((RCC->CR & RCC_CR_HSI48RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;

    }

    return BSP_OK;
 8008564:	2000      	movs	r0, #0
}
 8008566:	bd38      	pop	{r3, r4, r5, pc}
    	CLEAR_BIT(RCC->CR, RCC_CR_HSI48ON);
 8008568:	4d08      	ldr	r5, [pc, #32]	; (800858c <BSP_STM32_RCC_ConfigHSI48+0x50>)
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008570:	602b      	str	r3, [r5, #0]
    	while ((RCC->CR & RCC_CR_HSI48RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008572:	e004      	b.n	800857e <BSP_STM32_RCC_ConfigHSI48+0x42>
 8008574:	f7fb fd7e 	bl	8004074 <BSP_GetTick>
 8008578:	1b03      	subs	r3, r0, r4
 800857a:	2b02      	cmp	r3, #2
 800857c:	d803      	bhi.n	8008586 <BSP_STM32_RCC_ConfigHSI48+0x4a>
 800857e:	682b      	ldr	r3, [r5, #0]
 8008580:	049b      	lsls	r3, r3, #18
 8008582:	d4f7      	bmi.n	8008574 <BSP_STM32_RCC_ConfigHSI48+0x38>
 8008584:	e7ee      	b.n	8008564 <BSP_STM32_RCC_ConfigHSI48+0x28>
    	while ((RCC->CR & RCC_CR_HSI48RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008586:	2003      	movs	r0, #3
}
 8008588:	bd38      	pop	{r3, r4, r5, pc}
 800858a:	bf00      	nop
 800858c:	58024400 	.word	0x58024400

08008590 <BSP_STM32_RCC_ConfigPLL1>:


uint8_t BSP_STM32_RCC_ConfigPLL1(uint32_t pllstate, uint32_t pllsource, uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r) {
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	uint32_t tickstart;

	// Check if the PLL is used as system clock or not
	if ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL1) {
 8008594:	4c43      	ldr	r4, [pc, #268]	; (80086a4 <BSP_STM32_RCC_ConfigPLL1+0x114>)
 8008596:	6925      	ldr	r5, [r4, #16]
 8008598:	f005 0538 	and.w	r5, r5, #56	; 0x38
 800859c:	2d18      	cmp	r5, #24
 800859e:	d07e      	beq.n	800869e <BSP_STM32_RCC_ConfigPLL1+0x10e>

		if (pllstate == RCC_PLL_ON) {
 80085a0:	2802      	cmp	r0, #2
 80085a2:	d015      	beq.n	80085d0 <BSP_STM32_RCC_ConfigPLL1+0x40>
			while ((RCC->CR & RCC_CR_PLL1RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;

		} else {

			// Disable the main PLL
			CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085aa:	6023      	str	r3, [r4, #0]

			// Wait till PLL is disabled
			tickstart = BSP_GetTick();
 80085ac:	f7fb fd62 	bl	8004074 <BSP_GetTick>
 80085b0:	4605      	mov	r5, r0
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80085b2:	e004      	b.n	80085be <BSP_STM32_RCC_ConfigPLL1+0x2e>
 80085b4:	f7fb fd5e 	bl	8004074 <BSP_GetTick>
 80085b8:	1b40      	subs	r0, r0, r5
 80085ba:	2802      	cmp	r0, #2
 80085bc:	d805      	bhi.n	80085ca <BSP_STM32_RCC_ConfigPLL1+0x3a>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	019b      	lsls	r3, r3, #6
 80085c2:	d4f7      	bmi.n	80085b4 <BSP_STM32_RCC_ConfigPLL1+0x24>
    	// PLL1 already used as SYSCLK source, therefore full configuration cannot be completed
    	return BSP_ERROR;

    }

	return BSP_OK;
 80085c4:	2000      	movs	r0, #0

}
 80085c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80085ca:	2003      	movs	r0, #3
}
 80085cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d0:	461e      	mov	r6, r3
			CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	4688      	mov	r8, r1
 80085d6:	4617      	mov	r7, r2
 80085d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085dc:	6023      	str	r3, [r4, #0]
			tickstart = BSP_GetTick();
 80085de:	f7fb fd49 	bl	8004074 <BSP_GetTick>
 80085e2:	4681      	mov	r9, r0
			while ((RCC->CR & RCC_CR_PLL1RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80085e4:	e005      	b.n	80085f2 <BSP_STM32_RCC_ConfigPLL1+0x62>
 80085e6:	f7fb fd45 	bl	8004074 <BSP_GetTick>
 80085ea:	eba0 0009 	sub.w	r0, r0, r9
 80085ee:	2802      	cmp	r0, #2
 80085f0:	d8eb      	bhi.n	80085ca <BSP_STM32_RCC_ConfigPLL1+0x3a>
 80085f2:	6825      	ldr	r5, [r4, #0]
 80085f4:	01a9      	lsls	r1, r5, #6
 80085f6:	d4f6      	bmi.n	80085e6 <BSP_STM32_RCC_ConfigPLL1+0x56>
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 80085f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085fc:	3b01      	subs	r3, #1
			MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | RCC_PLLCKSELR_DIVM1) , (pllsource | ( m << 4)));
 80085fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008600:	3a01      	subs	r2, #1
			while ((RCC->CR & RCC_CR_PLL1RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008602:	4d28      	ldr	r5, [pc, #160]	; (80086a4 <BSP_STM32_RCC_ConfigPLL1+0x114>)
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008604:	041b      	lsls	r3, r3, #16
 8008606:	0612      	lsls	r2, r2, #24
 8008608:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800860c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008610:	4313      	orrs	r3, r2
			MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | RCC_PLLCKSELR_DIVM1) , (pllsource | ( m << 4)));
 8008612:	4a25      	ldr	r2, [pc, #148]	; (80086a8 <BSP_STM32_RCC_ConfigPLL1+0x118>)
 8008614:	400a      	ands	r2, r1
 8008616:	9908      	ldr	r1, [sp, #32]
 8008618:	ea42 0208 	orr.w	r2, r2, r8
 800861c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8008620:	62a2      	str	r2, [r4, #40]	; 0x28
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008624:	3a01      	subs	r2, #1
 8008626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800862a:	4313      	orrs	r3, r2
 800862c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800862e:	3a01      	subs	r2, #1
 8008630:	0252      	lsls	r2, r2, #9
 8008632:	b292      	uxth	r2, r2
 8008634:	4313      	orrs	r3, r2
			MODIFY_REG(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1, 0 << RCC_PLL1FRACR_FRACN1_Pos);
 8008636:	4a1d      	ldr	r2, [pc, #116]	; (80086ac <BSP_STM32_RCC_ConfigPLL1+0x11c>)
			WRITE_REG (RCC->PLL1DIVR , (((n - 1) & RCC_PLL1DIVR_N1) | (((p - 1) << 9U) & RCC_PLL1DIVR_P1) | (((q - 1) << 16U) & RCC_PLL1DIVR_Q1) | (((r - 1) << 24U) & RCC_PLL1DIVR_R1)));
 8008638:	6323      	str	r3, [r4, #48]	; 0x30
			CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 800863a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	62e3      	str	r3, [r4, #44]	; 0x2c
			MODIFY_REG(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1, 0 << RCC_PLL1FRACR_FRACN1_Pos);
 8008642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008644:	401a      	ands	r2, r3
 8008646:	6362      	str	r2, [r4, #52]	; 0x34
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, pllrge);
 8008648:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800864a:	f023 030c 	bic.w	r3, r3, #12
 800864e:	433b      	orrs	r3, r7
 8008650:	62e3      	str	r3, [r4, #44]	; 0x2c
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, pllvcosel);
 8008652:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008654:	f023 0302 	bic.w	r3, r3, #2
 8008658:	4333      	orrs	r3, r6
 800865a:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVP);
 800865c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800865e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008662:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVQ);
 8008664:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800866a:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->PLLCFGR, RCC_PLL1_DIVR);
 800866c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800866e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008672:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 8008674:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008676:	f043 0301 	orr.w	r3, r3, #1
 800867a:	62e3      	str	r3, [r4, #44]	; 0x2c
			SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008682:	6023      	str	r3, [r4, #0]
			tickstart = BSP_GetTick();
 8008684:	f7fb fcf6 	bl	8004074 <BSP_GetTick>
 8008688:	4604      	mov	r4, r0
			while ((RCC->CR & RCC_CR_PLL1RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800868a:	e004      	b.n	8008696 <BSP_STM32_RCC_ConfigPLL1+0x106>
 800868c:	f7fb fcf2 	bl	8004074 <BSP_GetTick>
 8008690:	1b00      	subs	r0, r0, r4
 8008692:	2802      	cmp	r0, #2
 8008694:	d899      	bhi.n	80085ca <BSP_STM32_RCC_ConfigPLL1+0x3a>
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	019a      	lsls	r2, r3, #6
 800869a:	d5f7      	bpl.n	800868c <BSP_STM32_RCC_ConfigPLL1+0xfc>
 800869c:	e792      	b.n	80085c4 <BSP_STM32_RCC_ConfigPLL1+0x34>
    	return BSP_ERROR;
 800869e:	2001      	movs	r0, #1
}
 80086a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a4:	58024400 	.word	0x58024400
 80086a8:	fffffc0c 	.word	0xfffffc0c
 80086ac:	ffff0007 	.word	0xffff0007

080086b0 <BSP_STM32_RCC_ConfigPLL3>:


uint8_t BSP_STM32_RCC_ConfigPLL3(uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r, uint32_t frac) {
 80086b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	uint32_t tickstart;

	// Check that PLL3 OSC clock source is already set
	if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLSOURCE_NONE) return BSP_ERROR;
 80086b4:	4c3b      	ldr	r4, [pc, #236]	; (80087a4 <BSP_STM32_RCC_ConfigPLL3+0xf4>)
uint8_t BSP_STM32_RCC_ConfigPLL3(uint32_t pllrge, uint32_t pllvcosel, uint32_t m, uint32_t n, uint32_t p, uint32_t q, uint32_t r, uint32_t frac) {
 80086b6:	461e      	mov	r6, r3
	if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLSOURCE_NONE) return BSP_ERROR;
 80086b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d06c      	beq.n	800879c <BSP_STM32_RCC_ConfigPLL3+0xec>

	// Disable PLL3
	CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	4680      	mov	r8, r0
 80086c6:	460f      	mov	r7, r1
 80086c8:	4691      	mov	r9, r2
 80086ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ce:	6023      	str	r3, [r4, #0]

    // Wait till PLL3 is disabled
	tickstart = BSP_GetTick();
 80086d0:	f7fb fcd0 	bl	8004074 <BSP_GetTick>
 80086d4:	4605      	mov	r5, r0
	while ((RCC->CR & RCC_CR_PLL3RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80086d6:	e006      	b.n	80086e6 <BSP_STM32_RCC_ConfigPLL3+0x36>
 80086d8:	f7fb fccc 	bl	8004074 <BSP_GetTick>
 80086dc:	eba0 0c05 	sub.w	ip, r0, r5
 80086e0:	f1bc 0f02 	cmp.w	ip, #2
 80086e4:	d857      	bhi.n	8008796 <BSP_STM32_RCC_ConfigPLL3+0xe6>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	009a      	lsls	r2, r3, #2
 80086ea:	d4f5      	bmi.n	80086d8 <BSP_STM32_RCC_ConfigPLL3+0x28>

    // Configure the PLL3  multiplication and division factors
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3, (m << 20));
    WRITE_REG (RCC->PLL3DIVR, (((n - 1) & RCC_PLL3DIVR_N3) | (((p - 1) << 9U) & RCC_PLL3DIVR_P3) | (((q -1) << 16U) & RCC_PLL3DIVR_Q3) | (((r - 1) << 24U) & RCC_PLL3DIVR_R3)));
 80086ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ee:	3e01      	subs	r6, #1
 80086f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086f2:	3b01      	subs	r3, #1
 80086f4:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80086f8:	3a01      	subs	r2, #1
	// Enable PLL3
    SET_BIT(RCC->CR, RCC_CR_PLL3ON);

    // Wait till PLL3 is enabled
	tickstart = BSP_GetTick();
	while ((RCC->CR & RCC_CR_PLL3RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 80086fa:	4d2a      	ldr	r5, [pc, #168]	; (80087a4 <BSP_STM32_RCC_ConfigPLL3+0xf4>)
    WRITE_REG (RCC->PLL3DIVR, (((n - 1) & RCC_PLL3DIVR_N3) | (((p - 1) << 9U) & RCC_PLL3DIVR_P3) | (((q -1) << 16U) & RCC_PLL3DIVR_Q3) | (((r - 1) << 24U) & RCC_PLL3DIVR_R3)));
 80086fc:	041b      	lsls	r3, r3, #16
 80086fe:	0612      	lsls	r2, r2, #24
 8008700:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008704:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008708:	4313      	orrs	r3, r2
 800870a:	9a08      	ldr	r2, [sp, #32]
 800870c:	3a01      	subs	r2, #1
 800870e:	4333      	orrs	r3, r6
 8008710:	0252      	lsls	r2, r2, #9
 8008712:	b292      	uxth	r2, r2
 8008714:	4313      	orrs	r3, r2
	MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3, (m << 20));
 8008716:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008718:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800871c:	ea42 5209 	orr.w	r2, r2, r9, lsl #20
 8008720:	62a2      	str	r2, [r4, #40]	; 0x28
    WRITE_REG (RCC->PLL3DIVR, (((n - 1) & RCC_PLL3DIVR_N3) | (((p - 1) << 9U) & RCC_PLL3DIVR_P3) | (((q -1) << 16U) & RCC_PLL3DIVR_Q3) | (((r - 1) << 24U) & RCC_PLL3DIVR_R3)));
 8008722:	6423      	str	r3, [r4, #64]	; 0x40
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3RGE, pllrge);
 8008724:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    MODIFY_REG(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3, frac << RCC_PLL3FRACR_FRACN3_Pos);
 8008726:	4b20      	ldr	r3, [pc, #128]	; (80087a8 <BSP_STM32_RCC_ConfigPLL3+0xf8>)
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3RGE, pllrge);
 8008728:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800872c:	ea42 0208 	orr.w	r2, r2, r8
 8008730:	62e2      	str	r2, [r4, #44]	; 0x2c
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3VCOSEL, pllvcosel);
 8008732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008734:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008738:	433a      	orrs	r2, r7
 800873a:	62e2      	str	r2, [r4, #44]	; 0x2c
    CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN);
 800873c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800873e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008742:	62e2      	str	r2, [r4, #44]	; 0x2c
    MODIFY_REG(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3, frac << RCC_PLL3FRACR_FRACN3_Pos);
 8008744:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008746:	4013      	ands	r3, r2
 8008748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800874a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800874e:	6463      	str	r3, [r4, #68]	; 0x44
    SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN);
 8008750:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008756:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVP);
 8008758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800875a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800875e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVQ);
 8008760:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008762:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008766:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(RCC->PLLCFGR, RCC_PLL3_DIVR);
 8008768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800876a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800876e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SET_BIT(RCC->CR, RCC_CR_PLL3ON);
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008776:	6023      	str	r3, [r4, #0]
	tickstart = BSP_GetTick();
 8008778:	f7fb fc7c 	bl	8004074 <BSP_GetTick>
 800877c:	4604      	mov	r4, r0
	while ((RCC->CR & RCC_CR_PLL3RDY) == 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 800877e:	e004      	b.n	800878a <BSP_STM32_RCC_ConfigPLL3+0xda>
 8008780:	f7fb fc78 	bl	8004074 <BSP_GetTick>
 8008784:	1b00      	subs	r0, r0, r4
 8008786:	2802      	cmp	r0, #2
 8008788:	d805      	bhi.n	8008796 <BSP_STM32_RCC_ConfigPLL3+0xe6>
 800878a:	682b      	ldr	r3, [r5, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	d5f7      	bpl.n	8008780 <BSP_STM32_RCC_ConfigPLL3+0xd0>

	return BSP_OK;
 8008790:	2000      	movs	r0, #0
}
 8008792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	while ((RCC->CR & RCC_CR_PLL3RDY) != 0U) if ((BSP_GetTick() - tickstart) > 2) return BSP_TIMEOUT;
 8008796:	2003      	movs	r0, #3
}
 8008798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLSOURCE_NONE) return BSP_ERROR;
 800879c:	2001      	movs	r0, #1
}
 800879e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087a2:	bf00      	nop
 80087a4:	58024400 	.word	0x58024400
 80087a8:	ffff0007 	.word	0xffff0007

080087ac <BSP_STM32_RCC_ClockConfig>:

uint8_t BSP_STM32_RCC_ClockConfig(uint32_t clocktype, uint32_t SYSSource, uint32_t SYSDiv, uint32_t AHBDiv, uint32_t APB1Div, uint32_t APB2Div, uint32_t APB3Div, uint32_t APB4Div, uint32_t flatency) {
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// To correctly read data from FLASH memory, the number of wait states (LATENCY) must be correctly programmed
	// according to the frequency of the CPU clock (HCLK) and the supply voltage of the device.

	// Increasing the CPU frequency
	if (flatency > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))  {
 80087b0:	4e85      	ldr	r6, [pc, #532]	; (80089c8 <BSP_STM32_RCC_ClockConfig+0x21c>)
uint8_t BSP_STM32_RCC_ClockConfig(uint32_t clocktype, uint32_t SYSSource, uint32_t SYSDiv, uint32_t AHBDiv, uint32_t APB1Div, uint32_t APB2Div, uint32_t APB3Div, uint32_t APB4Div, uint32_t flatency) {
 80087b2:	b085      	sub	sp, #20
 80087b4:	461d      	mov	r5, r3
	if (flatency > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))  {
 80087b6:	6833      	ldr	r3, [r6, #0]
uint8_t BSP_STM32_RCC_ClockConfig(uint32_t clocktype, uint32_t SYSSource, uint32_t SYSDiv, uint32_t AHBDiv, uint32_t APB1Div, uint32_t APB2Div, uint32_t APB3Div, uint32_t APB4Div, uint32_t flatency) {
 80087b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (flatency > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))  {
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	42a3      	cmp	r3, r4
 80087c0:	d20d      	bcs.n	80087de <BSP_STM32_RCC_ClockConfig+0x32>

	    // Program the new number of wait states to the LATENCY bits in the FLASH_ACR register
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, flatency);
 80087c2:	6833      	ldr	r3, [r6, #0]
 80087c4:	f023 030f 	bic.w	r3, r3, #15
 80087c8:	4323      	orrs	r3, r4
 80087ca:	6033      	str	r3, [r6, #0]

	    // Check that the new number of wait states is taken into account to access the Flash memory by reading the FLASH_ACR register
	    if ((READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)) != flatency) return BSP_ERROR;
 80087cc:	6833      	ldr	r3, [r6, #0]
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	d003      	beq.n	80087de <BSP_STM32_RCC_ClockConfig+0x32>
 80087d6:	2001      	movs	r0, #1
		if (APB4Div < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);

	}

	return BSP_OK;
}
 80087d8:	b005      	add	sp, #20
 80087da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((clocktype & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1) {
 80087de:	f010 0304 	ands.w	r3, r0, #4
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	d00b      	beq.n	80087fe <BSP_STM32_RCC_ClockConfig+0x52>
		if (APB3Div > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, APB3Div);
 80087e6:	4e79      	ldr	r6, [pc, #484]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 80087e8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80087ea:	69b3      	ldr	r3, [r6, #24]
 80087ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087f0:	42bb      	cmp	r3, r7
 80087f2:	d204      	bcs.n	80087fe <BSP_STM32_RCC_ClockConfig+0x52>
 80087f4:	69b3      	ldr	r3, [r6, #24]
 80087f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fa:	433b      	orrs	r3, r7
 80087fc:	61b3      	str	r3, [r6, #24]
	if ((clocktype & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 80087fe:	f010 0308 	ands.w	r3, r0, #8
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	d00b      	beq.n	800881e <BSP_STM32_RCC_ClockConfig+0x72>
		if (APB1Div > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, APB1Div);
 8008806:	4e71      	ldr	r6, [pc, #452]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 8008808:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800880a:	69f3      	ldr	r3, [r6, #28]
 800880c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008810:	42bb      	cmp	r3, r7
 8008812:	d204      	bcs.n	800881e <BSP_STM32_RCC_ClockConfig+0x72>
 8008814:	69f3      	ldr	r3, [r6, #28]
 8008816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881a:	433b      	orrs	r3, r7
 800881c:	61f3      	str	r3, [r6, #28]
	if ((clocktype & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800881e:	f010 0b10 	ands.w	fp, r0, #16
 8008822:	d00b      	beq.n	800883c <BSP_STM32_RCC_ClockConfig+0x90>
		if (APB2Div > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, APB2Div);
 8008824:	4e69      	ldr	r6, [pc, #420]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 8008826:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008828:	69f3      	ldr	r3, [r6, #28]
 800882a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800882e:	42bb      	cmp	r3, r7
 8008830:	d204      	bcs.n	800883c <BSP_STM32_RCC_ClockConfig+0x90>
 8008832:	69f3      	ldr	r3, [r6, #28]
 8008834:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008838:	433b      	orrs	r3, r7
 800883a:	61f3      	str	r3, [r6, #28]
	if ((clocktype & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1) {
 800883c:	f010 0620 	ands.w	r6, r0, #32
 8008840:	d00f      	beq.n	8008862 <BSP_STM32_RCC_ClockConfig+0xb6>
	    if (APB4Div > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 8008842:	f8df c188 	ldr.w	ip, [pc, #392]	; 80089cc <BSP_STM32_RCC_ClockConfig+0x220>
 8008846:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008848:	f8dc 3020 	ldr.w	r3, [ip, #32]
 800884c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008850:	42bb      	cmp	r3, r7
 8008852:	d206      	bcs.n	8008862 <BSP_STM32_RCC_ClockConfig+0xb6>
 8008854:	f8dc 3020 	ldr.w	r3, [ip, #32]
 8008858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885c:	433b      	orrs	r3, r7
 800885e:	f8cc 3020 	str.w	r3, [ip, #32]
	if ((clocktype & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8008862:	f010 0302 	ands.w	r3, r0, #2
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	f000 8087 	beq.w	800897a <BSP_STM32_RCC_ClockConfig+0x1ce>
		if (AHBDiv > (RCC->D1CFGR & RCC_D1CFGR_HPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, AHBDiv);
 800886c:	4f57      	ldr	r7, [pc, #348]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	42ab      	cmp	r3, r5
 8008876:	d204      	bcs.n	8008882 <BSP_STM32_RCC_ClockConfig+0xd6>
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	f023 030f 	bic.w	r3, r3, #15
 800887e:	432b      	orrs	r3, r5
 8008880:	61bb      	str	r3, [r7, #24]
	if ((clocktype & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 8008882:	07c0      	lsls	r0, r0, #31
 8008884:	d57c      	bpl.n	8008980 <BSP_STM32_RCC_ClockConfig+0x1d4>
		MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, SYSDiv);
 8008886:	4851      	ldr	r0, [pc, #324]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
		switch (SYSSource) {
 8008888:	2902      	cmp	r1, #2
		MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, SYSDiv);
 800888a:	6983      	ldr	r3, [r0, #24]
 800888c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008890:	ea43 0302 	orr.w	r3, r3, r2
 8008894:	6183      	str	r3, [r0, #24]
		switch (SYSSource) {
 8008896:	f000 8087 	beq.w	80089a8 <BSP_STM32_RCC_ClockConfig+0x1fc>
 800889a:	2903      	cmp	r1, #3
 800889c:	f000 808e 	beq.w	80089bc <BSP_STM32_RCC_ClockConfig+0x210>
 80088a0:	2901      	cmp	r1, #1
 80088a2:	f000 8086 	beq.w	80089b2 <BSP_STM32_RCC_ClockConfig+0x206>
			if ((RCC->CR & RCC_CR_HSIRDY) == 0) return BSP_ERROR;
 80088a6:	6803      	ldr	r3, [r0, #0]
 80088a8:	075f      	lsls	r7, r3, #29
 80088aa:	d594      	bpl.n	80087d6 <BSP_STM32_RCC_ClockConfig+0x2a>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, SYSSource);
 80088ac:	4f47      	ldr	r7, [pc, #284]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
		while ((RCC->CFGR & RCC_CFGR_SWS) != (SYSSource << RCC_CFGR_SWS_Pos)) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80088ae:	ea4f 09c1 	mov.w	r9, r1, lsl #3
 80088b2:	f241 3a88 	movw	sl, #5000	; 0x1388
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, SYSSource);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f023 0307 	bic.w	r3, r3, #7
 80088bc:	430b      	orrs	r3, r1
 80088be:	613b      	str	r3, [r7, #16]
		tickstart = BSP_GetTick();
 80088c0:	f7fb fbd8 	bl	8004074 <BSP_GetTick>
 80088c4:	4680      	mov	r8, r0
		while ((RCC->CFGR & RCC_CFGR_SWS) != (SYSSource << RCC_CFGR_SWS_Pos)) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80088c6:	e005      	b.n	80088d4 <BSP_STM32_RCC_ClockConfig+0x128>
 80088c8:	f7fb fbd4 	bl	8004074 <BSP_GetTick>
 80088cc:	eba0 0008 	sub.w	r0, r0, r8
 80088d0:	4550      	cmp	r0, sl
 80088d2:	d865      	bhi.n	80089a0 <BSP_STM32_RCC_ClockConfig+0x1f4>
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088da:	454b      	cmp	r3, r9
 80088dc:	d1f4      	bne.n	80088c8 <BSP_STM32_RCC_ClockConfig+0x11c>
	if ((clocktype & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d14d      	bne.n	8008980 <BSP_STM32_RCC_ClockConfig+0x1d4>
	if (flatency < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80088e4:	4a38      	ldr	r2, [pc, #224]	; (80089c8 <BSP_STM32_RCC_ClockConfig+0x21c>)
 80088e6:	6813      	ldr	r3, [r2, #0]
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	d90a      	bls.n	8008906 <BSP_STM32_RCC_ClockConfig+0x15a>
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, flatency);
 80088f0:	6813      	ldr	r3, [r2, #0]
 80088f2:	f023 030f 	bic.w	r3, r3, #15
 80088f6:	4323      	orrs	r3, r4
 80088f8:	6013      	str	r3, [r2, #0]
		if ((READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)) != flatency) return BSP_ERROR;
 80088fa:	6813      	ldr	r3, [r2, #0]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	42a3      	cmp	r3, r4
 8008902:	f47f af68 	bne.w	80087d6 <BSP_STM32_RCC_ClockConfig+0x2a>
	if ((clocktype & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1) {
 8008906:	9b01      	ldr	r3, [sp, #4]
 8008908:	b15b      	cbz	r3, 8008922 <BSP_STM32_RCC_ClockConfig+0x176>
	    if (APB3Div < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, APB3Div);
 800890a:	4a30      	ldr	r2, [pc, #192]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 800890c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800890e:	6993      	ldr	r3, [r2, #24]
 8008910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008914:	428b      	cmp	r3, r1
 8008916:	d904      	bls.n	8008922 <BSP_STM32_RCC_ClockConfig+0x176>
 8008918:	6993      	ldr	r3, [r2, #24]
 800891a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891e:	430b      	orrs	r3, r1
 8008920:	6193      	str	r3, [r2, #24]
	if ((clocktype & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8008922:	9b02      	ldr	r3, [sp, #8]
 8008924:	b15b      	cbz	r3, 800893e <BSP_STM32_RCC_ClockConfig+0x192>
		if (APB1Div < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, APB1Div);
 8008926:	4a29      	ldr	r2, [pc, #164]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 8008928:	990e      	ldr	r1, [sp, #56]	; 0x38
 800892a:	69d3      	ldr	r3, [r2, #28]
 800892c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008930:	428b      	cmp	r3, r1
 8008932:	d904      	bls.n	800893e <BSP_STM32_RCC_ClockConfig+0x192>
 8008934:	69d3      	ldr	r3, [r2, #28]
 8008936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893a:	430b      	orrs	r3, r1
 800893c:	61d3      	str	r3, [r2, #28]
	if ((clocktype & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800893e:	f1bb 0f00 	cmp.w	fp, #0
 8008942:	d00b      	beq.n	800895c <BSP_STM32_RCC_ClockConfig+0x1b0>
		if (APB2Div < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)) MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, APB2Div);
 8008944:	4a21      	ldr	r2, [pc, #132]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 8008946:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008948:	69d3      	ldr	r3, [r2, #28]
 800894a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800894e:	428b      	cmp	r3, r1
 8008950:	d904      	bls.n	800895c <BSP_STM32_RCC_ClockConfig+0x1b0>
 8008952:	69d3      	ldr	r3, [r2, #28]
 8008954:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008958:	430b      	orrs	r3, r1
 800895a:	61d3      	str	r3, [r2, #28]
	if ((clocktype & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1) {
 800895c:	b1e6      	cbz	r6, 8008998 <BSP_STM32_RCC_ClockConfig+0x1ec>
		if (APB4Div < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 800895e:	4a1b      	ldr	r2, [pc, #108]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 8008960:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008962:	6a13      	ldr	r3, [r2, #32]
 8008964:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008968:	428b      	cmp	r3, r1
 800896a:	d915      	bls.n	8008998 <BSP_STM32_RCC_ClockConfig+0x1ec>
 800896c:	6a13      	ldr	r3, [r2, #32]
	return BSP_OK;
 800896e:	2000      	movs	r0, #0
		if (APB4Div < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE)) MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, APB4Div);
 8008970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008974:	430b      	orrs	r3, r1
 8008976:	6213      	str	r3, [r2, #32]
 8008978:	e72e      	b.n	80087d8 <BSP_STM32_RCC_ClockConfig+0x2c>
	if ((clocktype & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 800897a:	07c3      	lsls	r3, r0, #31
 800897c:	d483      	bmi.n	8008886 <BSP_STM32_RCC_ClockConfig+0xda>
 800897e:	e7b1      	b.n	80088e4 <BSP_STM32_RCC_ClockConfig+0x138>
		if (AHBDiv < (RCC->D1CFGR & RCC_D1CFGR_HPRE)) MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, AHBDiv);
 8008980:	4a12      	ldr	r2, [pc, #72]	; (80089cc <BSP_STM32_RCC_ClockConfig+0x220>)
 8008982:	6993      	ldr	r3, [r2, #24]
 8008984:	f003 030f 	and.w	r3, r3, #15
 8008988:	42ab      	cmp	r3, r5
 800898a:	d9ab      	bls.n	80088e4 <BSP_STM32_RCC_ClockConfig+0x138>
 800898c:	6993      	ldr	r3, [r2, #24]
 800898e:	f023 030f 	bic.w	r3, r3, #15
 8008992:	432b      	orrs	r3, r5
 8008994:	6193      	str	r3, [r2, #24]
 8008996:	e7a5      	b.n	80088e4 <BSP_STM32_RCC_ClockConfig+0x138>
	return BSP_OK;
 8008998:	2000      	movs	r0, #0
}
 800899a:	b005      	add	sp, #20
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while ((RCC->CFGR & RCC_CFGR_SWS) != (SYSSource << RCC_CFGR_SWS_Pos)) if ((BSP_GetTick() - tickstart) > 5000) return BSP_TIMEOUT;
 80089a0:	2003      	movs	r0, #3
}
 80089a2:	b005      	add	sp, #20
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((RCC->CR & RCC_CR_HSERDY) == 0) return BSP_ERROR;
 80089a8:	6803      	ldr	r3, [r0, #0]
 80089aa:	0398      	lsls	r0, r3, #14
 80089ac:	f53f af7e 	bmi.w	80088ac <BSP_STM32_RCC_ClockConfig+0x100>
 80089b0:	e711      	b.n	80087d6 <BSP_STM32_RCC_ClockConfig+0x2a>
			if ((RCC->CR & RCC_CR_CSIRDY) == 0) return BSP_ERROR;
 80089b2:	6803      	ldr	r3, [r0, #0]
 80089b4:	05db      	lsls	r3, r3, #23
 80089b6:	f53f af79 	bmi.w	80088ac <BSP_STM32_RCC_ClockConfig+0x100>
 80089ba:	e70c      	b.n	80087d6 <BSP_STM32_RCC_ClockConfig+0x2a>
			if ((RCC->CR & RCC_CR_PLL1RDY) == 0) return BSP_ERROR;
 80089bc:	6803      	ldr	r3, [r0, #0]
 80089be:	019a      	lsls	r2, r3, #6
 80089c0:	f53f af74 	bmi.w	80088ac <BSP_STM32_RCC_ClockConfig+0x100>
 80089c4:	e707      	b.n	80087d6 <BSP_STM32_RCC_ClockConfig+0x2a>
 80089c6:	bf00      	nop
 80089c8:	52002000 	.word	0x52002000
 80089cc:	58024400 	.word	0x58024400

080089d0 <BSP_STM32_RCC_GetSysClockFreq>:
    float_t fracn1, pllvco;
    uint32_t sysclockfreq;

    // Get SYSCLK source

    switch (RCC->CFGR & RCC_CFGR_SWS) {
 80089d0:	4a49      	ldr	r2, [pc, #292]	; (8008af8 <BSP_STM32_RCC_GetSysClockFreq+0x128>)
 80089d2:	6913      	ldr	r3, [r2, #16]
 80089d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089d8:	2b10      	cmp	r3, #16
 80089da:	d004      	beq.n	80089e6 <BSP_STM32_RCC_GetSysClockFreq+0x16>
 80089dc:	2b18      	cmp	r3, #24
 80089de:	d00e      	beq.n	80089fe <BSP_STM32_RCC_GetSysClockFreq+0x2e>
 80089e0:	b11b      	cbz	r3, 80089ea <BSP_STM32_RCC_GetSysClockFreq+0x1a>

    	break;

    case RCC_CFGR_SWS_CSI:  // CSI used as system clock  source

    	sysclockfreq = CSI_VALUE;
 80089e2:	4846      	ldr	r0, [pc, #280]	; (8008afc <BSP_STM32_RCC_GetSysClockFreq+0x12c>)
 80089e4:	4770      	bx	lr
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 80089e6:	4846      	ldr	r0, [pc, #280]	; (8008b00 <BSP_STM32_RCC_GetSysClockFreq+0x130>)
 80089e8:	4770      	bx	lr
    	if ((RCC->CR & RCC_CR_HSIDIV_Msk) != 0U) {
 80089ea:	6813      	ldr	r3, [r2, #0]
 80089ec:	f013 0f18 	tst.w	r3, #24
 80089f0:	d04a      	beq.n	8008a88 <BSP_STM32_RCC_GetSysClockFreq+0xb8>
    		sysclockfreq = (uint32_t)(HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	4843      	ldr	r0, [pc, #268]	; (8008b04 <BSP_STM32_RCC_GetSysClockFreq+0x134>)
 80089f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089fa:	4118      	asrs	r0, r3
 80089fc:	4770      	bx	lr

    case RCC_CFGR_SWS_PLL1:  // PLL1 used as system clock  source

    	// PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN      SYSCLK = PLL_VCO / PLLR

    	pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
uint32_t BSP_STM32_RCC_GetSysClockFreq(void) {
 8008a00:	b430      	push	{r4, r5}
    	pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a02:	6a94      	ldr	r4, [r2, #40]	; 0x28
    	pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a04:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

    	if (pllm != 0U) {
 8008a06:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a0a:	6b51      	ldr	r1, [r2, #52]	; 0x34
    	pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a0c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    	if (pllm != 0U) {
 8008a10:	d038      	beq.n	8008a84 <BSP_STM32_RCC_GetSysClockFreq+0xb4>
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a12:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    	pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a16:	f005 0501 	and.w	r5, r5, #1
    	pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a1a:	f003 0303 	and.w	r3, r3, #3
    	fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a1e:	fb05 f101 	mul.w	r1, r5, r1
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	ee07 1a90 	vmov	s15, r1
 8008a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    		switch (pllsource) {
 8008a2c:	d002      	beq.n	8008a34 <BSP_STM32_RCC_GetSysClockFreq+0x64>
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d02c      	beq.n	8008a8c <BSP_STM32_RCC_GetSysClockFreq+0xbc>
 8008a32:	b393      	cbz	r3, 8008a9a <BSP_STM32_RCC_GetSysClockFreq+0xca>
    			pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
    			break;

    		default:

    			pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a34:	ee07 0a90 	vmov	s15, r0
 8008a38:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8008b08 <BSP_STM32_RCC_GetSysClockFreq+0x138>
 8008a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008a42:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008a46:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8008b0c <BSP_STM32_RCC_GetSysClockFreq+0x13c>
 8008a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a5a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008a5e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008a62:	ee66 6aa7 	vmul.f32	s13, s13, s15
    			break;

    		}

        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008a66:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <BSP_STM32_RCC_GetSysClockFreq+0x128>)
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008a6e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008a70:	ee07 3a90 	vmov	s15, r3
 8008a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a80:	ee17 0a90 	vmov	r0, s15
    	break;

    }

    return sysclockfreq;
}
 8008a84:	bc30      	pop	{r4, r5}
 8008a86:	4770      	bx	lr
    		sysclockfreq = (uint32_t) HSI_VALUE;
 8008a88:	481e      	ldr	r0, [pc, #120]	; (8008b04 <BSP_STM32_RCC_GetSysClockFreq+0x134>)
}
 8008a8a:	4770      	bx	lr
    			pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a8c:	ee07 0a90 	vmov	s15, r0
 8008a90:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8008b10 <BSP_STM32_RCC_GetSysClockFreq+0x140>
 8008a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a98:	e7d2      	b.n	8008a40 <BSP_STM32_RCC_GetSysClockFreq+0x70>
    			if ((RCC->CR & RCC_CR_HSIDIV_Msk) != 0U) {
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	f013 0f18 	tst.w	r3, #24
 8008aa0:	d022      	beq.n	8008ae8 <BSP_STM32_RCC_GetSysClockFreq+0x118>
    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008aa2:	6814      	ldr	r4, [r2, #0]
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aa4:	ee07 0a90 	vmov	s15, r0
    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008aa8:	4916      	ldr	r1, [pc, #88]	; (8008b04 <BSP_STM32_RCC_GetSysClockFreq+0x134>)
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aae:	6b13      	ldr	r3, [r2, #48]	; 0x30
    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008ab0:	f3c4 04c1 	ubfx	r4, r4, #3, #2
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ab8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8008b0c <BSP_STM32_RCC_GetSysClockFreq+0x13c>
 8008abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    				hsivalue = (HSI_VALUE >> (READ_BIT(RCC->CR, RCC_CR_HSIDIV) >> 3));
 8008ac0:	4121      	asrs	r1, r4
    				pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac2:	ee06 3a10 	vmov	s12, r3
 8008ac6:	ee05 1a90 	vmov	s11, r1
 8008aca:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008ace:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008ad2:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008ad6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008ada:	eef0 7a46 	vmov.f32	s15, s12
 8008ade:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008ae2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008ae6:	e7be      	b.n	8008a66 <BSP_STM32_RCC_GetSysClockFreq+0x96>
    				pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ae8:	ee07 0a90 	vmov	s15, r0
 8008aec:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008b14 <BSP_STM32_RCC_GetSysClockFreq+0x144>
 8008af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008af4:	e7a4      	b.n	8008a40 <BSP_STM32_RCC_GetSysClockFreq+0x70>
 8008af6:	bf00      	nop
 8008af8:	58024400 	.word	0x58024400
 8008afc:	003d0900 	.word	0x003d0900
 8008b00:	017d7840 	.word	0x017d7840
 8008b04:	03d09000 	.word	0x03d09000
 8008b08:	4a742400 	.word	0x4a742400
 8008b0c:	39000000 	.word	0x39000000
 8008b10:	4bbebc20 	.word	0x4bbebc20
 8008b14:	4c742400 	.word	0x4c742400

08008b18 <BSP_STM32_RTC_Init>:

  return BSP_OK;
}


uint8_t BSP_STM32_RTC_Init(RTC_TypeDef * hrtc, uint32_t AsynchPrediv, uint32_t SynchPrediv) {
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// TODO: This code will be moved to separate part responsible for configuration of debugger interface
	// DBGMCU->APB4FZ1 |= DBGMCU_APB4FZ1_DBG_RTC;
	// DBGMCU->APB4FZ2 |= DBGMCU_APB4FZ2_DBG_RTC;

	// Check whether the calendar needs to be initialized
	if (((hrtc->ISR)  & (RTC_ISR_INITS)) == RTC_ISR_INITS) return BSP_OK;
 8008b1a:	68c3      	ldr	r3, [r0, #12]
 8008b1c:	06dc      	lsls	r4, r3, #27
 8008b1e:	d452      	bmi.n	8008bc6 <BSP_STM32_RTC_Init+0xae>
	hrtc->WPR = 0x53;
 8008b20:	2353      	movs	r3, #83	; 0x53
 8008b22:	4616      	mov	r6, r2
	hrtc->WPR = 0xCA;
 8008b24:	22ca      	movs	r2, #202	; 0xca
 8008b26:	4604      	mov	r4, r0
 8008b28:	460d      	mov	r5, r1
 8008b2a:	6242      	str	r2, [r0, #36]	; 0x24
	hrtc->WPR = 0x53;
 8008b2c:	6243      	str	r3, [r0, #36]	; 0x24
	if ((hrtc->ISR & RTC_ISR_INITF) == 0U) {
 8008b2e:	68c3      	ldr	r3, [r0, #12]
 8008b30:	0658      	lsls	r0, r3, #25
 8008b32:	d537      	bpl.n	8008ba4 <BSP_STM32_RTC_Init+0x8c>
	if (_RTC_EnterInitMode(hrtc)) {
		_RTC_WriteDisable(hrtc);	return BSP_ERROR;
	}

	// Clear RTC_CR FMT, OSEL and POL Bits
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008b34:	68a3      	ldr	r3, [r4, #8]

	// Set RTC_CR register
	hrtc->CR |= (RTC_HOURFORMAT_24 | RTC_OUTPUT_DISABLE | RTC_OUTPUT_POLARITY_HIGH);

	// Configure the RTC PRER
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8008b36:	042d      	lsls	r5, r5, #16
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008b38:	4a26      	ldr	r2, [pc, #152]	; (8008bd4 <BSP_STM32_RTC_Init+0xbc>)
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8008b3a:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8008b3e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008b42:	401a      	ands	r2, r3
	CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008b44:	4b24      	ldr	r3, [pc, #144]	; (8008bd8 <BSP_STM32_RTC_Init+0xc0>)
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8008b46:	4335      	orrs	r5, r6
	hrtc->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008b48:	60a2      	str	r2, [r4, #8]
	hrtc->CR |= (RTC_HOURFORMAT_24 | RTC_OUTPUT_DISABLE | RTC_OUTPUT_POLARITY_HIGH);
 8008b4a:	68a1      	ldr	r1, [r4, #8]
 8008b4c:	60a1      	str	r1, [r4, #8]
	hrtc->PRER = ((AsynchPrediv & 0x007F) << RTC_PRER_PREDIV_A_Pos) | ((SynchPrediv & 0x7FFF) << RTC_PRER_PREDIV_S_Pos);
 8008b4e:	6125      	str	r5, [r4, #16]
	CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b56:	60da      	str	r2, [r3, #12]
	if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD)) {
 8008b58:	689a      	ldr	r2, [r3, #8]
 8008b5a:	0691      	lsls	r1, r2, #26
 8008b5c:	d41d      	bmi.n	8008b9a <BSP_STM32_RTC_Init+0x82>
	uint32_t tickstart = BSP_GetTick();
 8008b5e:	f7fb fa89 	bl	8004074 <BSP_GetTick>
	hrtc->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008b62:	4b1e      	ldr	r3, [pc, #120]	; (8008bdc <BSP_STM32_RTC_Init+0xc4>)
	uint32_t tickstart = BSP_GetTick();
 8008b64:	4605      	mov	r5, r0
	hrtc->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008b66:	60e3      	str	r3, [r4, #12]
    while ((hrtc->ISR & RTC_ISR_RSF) == 0U)
 8008b68:	e005      	b.n	8008b76 <BSP_STM32_RTC_Init+0x5e>
    	if ((BSP_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) return BSP_TIMEOUT;
 8008b6a:	f7fb fa83 	bl	8004074 <BSP_GetTick>
 8008b6e:	1b43      	subs	r3, r0, r5
 8008b70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008b74:	d829      	bhi.n	8008bca <BSP_STM32_RTC_Init+0xb2>
    while ((hrtc->ISR & RTC_ISR_RSF) == 0U)
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	069b      	lsls	r3, r3, #26
 8008b7a:	d5f6      	bpl.n	8008b6a <BSP_STM32_RTC_Init+0x52>
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b7c:	4a16      	ldr	r2, [pc, #88]	; (8008bd8 <BSP_STM32_RTC_Init+0xc0>)
	hrtc->WPR = 0xFF;
 8008b7e:	21ff      	movs	r1, #255	; 0xff
	hrtc->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
	hrtc->OR |= (RTC_OUTPUT_TYPE_OPENDRAIN | RTC_OUTPUT_REMAP_NONE);

	// Enable the write protection for RTC registers
	_RTC_WriteDisable(hrtc);
	return BSP_OK;
 8008b80:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b82:	6893      	ldr	r3, [r2, #8]
 8008b84:	f043 0320 	orr.w	r3, r3, #32
 8008b88:	6093      	str	r3, [r2, #8]
	hrtc->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008b8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008b8c:	f023 0303 	bic.w	r3, r3, #3
 8008b90:	64e3      	str	r3, [r4, #76]	; 0x4c
	hrtc->OR |= (RTC_OUTPUT_TYPE_OPENDRAIN | RTC_OUTPUT_REMAP_NONE);
 8008b92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008b94:	64e3      	str	r3, [r4, #76]	; 0x4c
	hrtc->WPR = 0xFF;
 8008b96:	6261      	str	r1, [r4, #36]	; 0x24
}
 8008b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	f022 0220 	bic.w	r2, r2, #32
 8008ba0:	609a      	str	r2, [r3, #8]
 8008ba2:	e7dc      	b.n	8008b5e <BSP_STM32_RTC_Init+0x46>
		hrtc->ISR = (uint32_t)RTC_INIT_MASK;
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	60e3      	str	r3, [r4, #12]
		tickstart = BSP_GetTick();
 8008baa:	f7fb fa63 	bl	8004074 <BSP_GetTick>
 8008bae:	4607      	mov	r7, r0
		while ((hrtc->ISR & RTC_ISR_INITF) == 0U)
 8008bb0:	e005      	b.n	8008bbe <BSP_STM32_RTC_Init+0xa6>
			if((BSP_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE) return BSP_TIMEOUT;
 8008bb2:	f7fb fa5f 	bl	8004074 <BSP_GetTick>
 8008bb6:	1bc0      	subs	r0, r0, r7
 8008bb8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8008bbc:	d805      	bhi.n	8008bca <BSP_STM32_RTC_Init+0xb2>
		while ((hrtc->ISR & RTC_ISR_INITF) == 0U)
 8008bbe:	68e3      	ldr	r3, [r4, #12]
 8008bc0:	065a      	lsls	r2, r3, #25
 8008bc2:	d5f6      	bpl.n	8008bb2 <BSP_STM32_RTC_Init+0x9a>
 8008bc4:	e7b6      	b.n	8008b34 <BSP_STM32_RTC_Init+0x1c>
	if (((hrtc->ISR)  & (RTC_ISR_INITS)) == RTC_ISR_INITS) return BSP_OK;
 8008bc6:	2000      	movs	r0, #0
}
 8008bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hrtc->WPR = 0xFF;
 8008bca:	23ff      	movs	r3, #255	; 0xff
		_RTC_WriteDisable(hrtc);	return BSP_ERROR;
 8008bcc:	2001      	movs	r0, #1
	hrtc->WPR = 0xFF;
 8008bce:	6263      	str	r3, [r4, #36]	; 0x24
}
 8008bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	ff8fffbf 	.word	0xff8fffbf
 8008bd8:	58004000 	.word	0x58004000
 8008bdc:	0003ff5f 	.word	0x0003ff5f

08008be0 <BSP_STM32_SDMMC_GetCardState>:

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;

	uint32_t resp1 = 0;

	SDMMC_CmdSendStatus(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U));
 8008be0:	6d49      	ldr	r1, [r1, #84]	; 0x54
uint32_t BSP_STM32_SDMMC_GetCardState(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8008be2:	b510      	push	{r4, lr}
 8008be4:	4604      	mov	r4, r0
	SDMMC_CmdSendStatus(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U));
 8008be6:	0409      	lsls	r1, r1, #16
 8008be8:	f001 fd0a 	bl	800a600 <SDMMC_CmdSendStatus>
	resp1 = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008bec:	2100      	movs	r1, #0
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 fc46 	bl	8009480 <SDMMC_GetResponse>

	return ((resp1 >> 9U) & 0x0FU);
}
 8008bf4:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	bf00      	nop

08008bfc <BSP_STM32_SDMMC_Init>:



uint8_t BSP_STM32_SDMMC_Init(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	b0a1      	sub	sp, #132	; 0x84
	uint32_t unitsize;

	// 1. Initialize Card parameters

	// Starting up in 1B bus and 400kHz
	SDMMC_InitTypeDef Init = {0};
 8008c02:	2300      	movs	r3, #0
	Init.ClockEdge        		= SDMMC_CLOCK_EDGE_RISING;
	Init.ClockPowerSave   		= SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8008c04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
uint8_t BSP_STM32_SDMMC_Init(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8008c08:	4604      	mov	r4, r0
	SDMMC_InitTypeDef Init = {0};
 8008c0a:	9307      	str	r3, [sp, #28]
	Init.BusWide          		= SDMMC_BUS_WIDE_1B;
	Init.HardwareFlowControl 	= SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;

	// For freq to 400kHz div = sdmmc_clk / (2 * 400000) -> For 60MHz div = 75
	Init.ClockDiv 				= 75;
	if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 8008c0c:	af07      	add	r7, sp, #28
	SDMMC_InitTypeDef Init = {0};
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	ad04      	add	r5, sp, #16
 8008c12:	60ab      	str	r3, [r5, #8]
	Init.ClockDiv 				= 75;
 8008c14:	234b      	movs	r3, #75	; 0x4b
uint8_t BSP_STM32_SDMMC_Init(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx) {
 8008c16:	460e      	mov	r6, r1
	Init.ClockPowerSave   		= SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8008c18:	9205      	str	r2, [sp, #20]
	Init.ClockDiv 				= 75;
 8008c1a:	9308      	str	r3, [sp, #32]
	if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 8008c1c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008c20:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008c24:	4620      	mov	r0, r4
 8008c26:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8008c2a:	f000 fbf7 	bl	800941c <SDMMC_Init>
 8008c2e:	b120      	cbz	r0, 8008c3a <BSP_STM32_SDMMC_Init+0x3e>

	// Identify card version, type and voltage
	if (_SD_IdentifyCard(hsdmmc, ctx)) return BSP_ERROR;

	// Card initialization
	if (_SD_InitCard(hsdmmc, ctx)) return BSP_ERROR;
 8008c30:	2501      	movs	r5, #1

    // 4. Verify that SD card is ready to use after Initialization
    while (BSP_STM32_SDMMC_GetCardState(hsdmmc, ctx) != SDMMC_CARD_TRANSFER) {};

    return BSP_OK;
}
 8008c32:	4628      	mov	r0, r5
 8008c34:	b021      	add	sp, #132	; 0x84
 8008c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (SDMMC_PowerState_ON(hsdmmc)) return BSP_ERROR;
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fc14 	bl	8009468 <SDMMC_PowerState_ON>
 8008c40:	4680      	mov	r8, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d1f4      	bne.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
	BSP_Delay(1);
 8008c46:	2001      	movs	r0, #1
 8008c48:	f7fb fa1a 	bl	8004080 <BSP_Delay>
	if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8008c4c:	4620      	mov	r0, r4
	__IO uint32_t count = 0U;
 8008c4e:	f8cd 800c 	str.w	r8, [sp, #12]
	if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8008c52:	f001 f94b 	bl	8009eec <SDMMC_CmdGoIdleState>
 8008c56:	4682      	mov	sl, r0
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d1e9      	bne.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
	if (SDMMC_CmdOperCond(hsdmmc) == SDMMC_ERROR_TIMEOUT) {
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f001 f971 	bl	8009f44 <SDMMC_CmdOperCond>
 8008c62:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008c66:	f000 8181 	beq.w	8008f6c <BSP_STM32_SDMMC_Init+0x370>
		sdmmc_ctx->SDCardVersion = CARD_V2_X;
 8008c6a:	2301      	movs	r3, #1
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8008c6c:	4651      	mov	r1, sl
 8008c6e:	4620      	mov	r0, r4
		sdmmc_ctx->SDCardVersion = CARD_V2_X;
 8008c70:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8008c74:	f001 f9a6 	bl	8009fc4 <SDMMC_CmdAppCommand>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d1d9      	bne.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 8008c82:	4543      	cmp	r3, r8
 8008c84:	d81c      	bhi.n	8008cc0 <BSP_STM32_SDMMC_Init+0xc4>
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8008c86:	f8df 9588 	ldr.w	r9, [pc, #1416]	; 8009210 <BSP_STM32_SDMMC_Init+0x614>
 8008c8a:	e001      	b.n	8008c90 <BSP_STM32_SDMMC_Init+0x94>
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8008c8c:	4543      	cmp	r3, r8
 8008c8e:	d816      	bhi.n	8008cbe <BSP_STM32_SDMMC_Init+0xc2>
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8008c90:	2100      	movs	r1, #0
 8008c92:	4620      	mov	r0, r4
 8008c94:	f001 f996 	bl	8009fc4 <SDMMC_CmdAppCommand>
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8008c98:	4649      	mov	r1, r9
		if (SDMMC_CmdAppCommand(hsdmmc, 0)) return BSP_ERROR;
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d1c8      	bne.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f001 fa3e 	bl	800a120 <SDMMC_CmdAppOperCommand>
 8008ca4:	4601      	mov	r1, r0
		response = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008ca6:	4620      	mov	r0, r4
		if (SDMMC_CmdAppOperCommand(hsdmmc, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY)) return BSP_ERROR;
 8008ca8:	2900      	cmp	r1, #0
 8008caa:	d1c1      	bne.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
		response = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008cac:	f000 fbe8 	bl	8009480 <SDMMC_GetResponse>
		count++;
 8008cb0:	9b03      	ldr	r3, [sp, #12]
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8008cb2:	2800      	cmp	r0, #0
		count++;
 8008cb4:	f103 0301 	add.w	r3, r3, #1
 8008cb8:	9303      	str	r3, [sp, #12]
	while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U)) {
 8008cba:	9b03      	ldr	r3, [sp, #12]
 8008cbc:	dae6      	bge.n	8008c8c <BSP_STM32_SDMMC_Init+0x90>
 8008cbe:	4682      	mov	sl, r0
	if (count >= SDMMC_MAX_VOLT_TRIAL) return BSP_ERROR;
 8008cc0:	9a03      	ldr	r2, [sp, #12]
 8008cc2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d8b2      	bhi.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
	sdmmc_ctx->SDCardType = ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) ? CARD_SDHC_SDXC : CARD_SDSC;
 8008cca:	f3ca 7080 	ubfx	r0, sl, #30, #1
	uint16_t sd_rca = 0;
 8008cce:	2300      	movs	r3, #0
	sdmmc_ctx->SDCardType = ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) ? CARD_SDHC_SDXC : CARD_SDSC;
 8008cd0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
	uint16_t sd_rca = 0;
 8008cd4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint32_t tickstart = BSP_GetTick();
 8008cd8:	f7fb f9cc 	bl	8004074 <BSP_GetTick>
 8008cdc:	4680      	mov	r8, r0
	if (SDMMC_GetPowerState(hsdmmc) == 0U) return BSP_ERROR;
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f000 fbca 	bl	8009478 <SDMMC_GetPowerState>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d0a3      	beq.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
	if (sdmmc_ctx->SDCardType == CARD_SECURED) return BSP_ERROR;
 8008ce8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d09f      	beq.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
    if (SDMMC_CmdSendCID(hsdmmc)) return BSP_ERROR;
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 fba7 	bl	800a444 <SDMMC_CmdSendCID>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d19a      	bne.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
    sdmmc_ctx->SDCardID[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 fbbf 	bl	8009480 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardID[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d02:	2104      	movs	r1, #4
    sdmmc_ctx->SDCardID[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008d04:	6370      	str	r0, [r6, #52]	; 0x34
    sdmmc_ctx->SDCardID[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fbba 	bl	8009480 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardID[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d0c:	2108      	movs	r1, #8
    sdmmc_ctx->SDCardID[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d0e:	63b0      	str	r0, [r6, #56]	; 0x38
    sdmmc_ctx->SDCardID[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 fbb5 	bl	8009480 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardID[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d16:	210c      	movs	r1, #12
    sdmmc_ctx->SDCardID[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d18:	63f0      	str	r0, [r6, #60]	; 0x3c
    sdmmc_ctx->SDCardID[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 fbb0 	bl	8009480 <SDMMC_GetResponse>
    	if ((BSP_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT) return BSP_ERROR;
 8008d20:	f241 3987 	movw	r9, #4999	; 0x1387
    sdmmc_ctx->SDCardID[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d24:	6430      	str	r0, [r6, #64]	; 0x40
    while (sd_rca == 0U) {
 8008d26:	e00b      	b.n	8008d40 <BSP_STM32_SDMMC_Init+0x144>
    	if (SDMMC_CmdSetRelAdd(hsdmmc, &sd_rca)) return BSP_ERROR;
 8008d28:	f001 fc0a 	bl	800a540 <SDMMC_CmdSetRelAdd>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f47f af7f 	bne.w	8008c30 <BSP_STM32_SDMMC_Init+0x34>
    	if ((BSP_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT) return BSP_ERROR;
 8008d32:	f7fb f99f 	bl	8004074 <BSP_GetTick>
 8008d36:	eba0 0008 	sub.w	r0, r0, r8
 8008d3a:	4548      	cmp	r0, r9
 8008d3c:	f63f af78 	bhi.w	8008c30 <BSP_STM32_SDMMC_Init+0x34>
    while (sd_rca == 0U) {
 8008d40:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    	if (SDMMC_CmdSetRelAdd(hsdmmc, &sd_rca)) return BSP_ERROR;
 8008d44:	a90a      	add	r1, sp, #40	; 0x28
 8008d46:	4620      	mov	r0, r4
    while (sd_rca == 0U) {
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d0ed      	beq.n	8008d28 <BSP_STM32_SDMMC_Init+0x12c>
    if (SDMMC_CmdSendCSD(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 8008d4c:	0419      	lsls	r1, r3, #16
    sdmmc_ctx->SDCardRelAdd = sd_rca;
 8008d4e:	6573      	str	r3, [r6, #84]	; 0x54
    if (SDMMC_CmdSendCSD(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 8008d50:	f001 fbb6 	bl	800a4c0 <SDMMC_CmdSendCSD>
 8008d54:	4680      	mov	r8, r0
 8008d56:	2800      	cmp	r0, #0
 8008d58:	f47f af6a 	bne.w	8008c30 <BSP_STM32_SDMMC_Init+0x34>
    sdmmc_ctx->SDCardSD[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008d5c:	4601      	mov	r1, r0
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fb8e 	bl	8009480 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardSD[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d64:	2104      	movs	r1, #4
    sdmmc_ctx->SDCardSD[0] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 8008d66:	6470      	str	r0, [r6, #68]	; 0x44
    sdmmc_ctx->SDCardSD[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fb89 	bl	8009480 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardSD[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d6e:	2108      	movs	r1, #8
    sdmmc_ctx->SDCardSD[1] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP2);
 8008d70:	64b0      	str	r0, [r6, #72]	; 0x48
    sdmmc_ctx->SDCardSD[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fb84 	bl	8009480 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardSD[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d78:	210c      	movs	r1, #12
    sdmmc_ctx->SDCardSD[2] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP3);
 8008d7a:	64f0      	str	r0, [r6, #76]	; 0x4c
    sdmmc_ctx->SDCardSD[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f000 fb7f 	bl	8009480 <SDMMC_GetResponse>
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 8008d82:	2104      	movs	r1, #4
    sdmmc_ctx->SDCardSD[3] = SDMMC_GetResponse(hsdmmc, SDMMC_RESP4);
 8008d84:	6530      	str	r0, [r6, #80]	; 0x50
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 fb7a 	bl	8009480 <SDMMC_GetResponse>
	switch (sdmmc_ctx->SDCardType) {
 8008d8c:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 8008d90:	0d00      	lsrs	r0, r0, #20
	CSD->CardComdClasses = (uint16_t)((sdmmc_ctx->SDCardSD[1] & 0xFFF00000U) >> 20U);
 8008d92:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
    sdmmc_ctx->SDCardClass = (SDMMC_GetResponse(hsdmmc, SDMMC_RESP2) >> 20U);
 8008d96:	62f0      	str	r0, [r6, #44]	; 0x2c
	CSD->CSDStruct = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0xC0000000U) >> 30U);
 8008d98:	0f90      	lsrs	r0, r2, #30
 8008d9a:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	CSD->SysSpecVersion = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x3C000000U) >> 26U);
 8008d9e:	f3c2 6083 	ubfx	r0, r2, #26, #4
 8008da2:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
	CSD->Reserved1 = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x03000000U) >> 24U);
 8008da6:	f3c2 6001 	ubfx	r0, r2, #24, #2
 8008daa:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
	CSD->TAAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x00FF0000U) >> 16U);
 8008dae:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008db2:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
	CSD->NSAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x0000FF00U) >> 8U);
 8008db6:	f3c2 2007 	ubfx	r0, r2, #8, #8
	CSD->MaxBusClkFrec = (uint8_t)(sdmmc_ctx->SDCardSD[0] & 0x000000FFU);
 8008dba:	b2d2      	uxtb	r2, r2
	CSD->NSAC = (uint8_t)((sdmmc_ctx->SDCardSD[0] & 0x0000FF00U) >> 8U);
 8008dbc:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
	CSD->MaxBusClkFrec = (uint8_t)(sdmmc_ctx->SDCardSD[0] & 0x000000FFU);
 8008dc0:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
	CSD->CardComdClasses = (uint16_t)((sdmmc_ctx->SDCardSD[1] & 0xFFF00000U) >> 20U);
 8008dc4:	0d1a      	lsrs	r2, r3, #20
 8008dc6:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
	CSD->RdBlockLen = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x000F0000U) >> 16U);
 8008dca:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8008dce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	CSD->PartBlockRead   = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00008000U) >> 15U);
 8008dd2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8008dd6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	CSD->WrBlockMisalign = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00004000U) >> 14U);
 8008dda:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8008dde:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	CSD->RdBlockMisalign = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00002000U) >> 13U);
 8008de2:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8008de6:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	CSD->DSRImpl = (uint8_t)((sdmmc_ctx->SDCardSD[1] & 0x00001000U) >> 12U);
 8008dea:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8008dee:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
	CSD->Reserved2 = 0U; /*!< Reserved */
 8008df2:	f88d 804d 	strb.w	r8, [sp, #77]	; 0x4d
	switch (sdmmc_ctx->SDCardType) {
 8008df6:	2900      	cmp	r1, #0
 8008df8:	f000 80c1 	beq.w	8008f7e <BSP_STM32_SDMMC_Init+0x382>
 8008dfc:	2901      	cmp	r1, #1
 8008dfe:	f040 80b1 	bne.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
		CSD->DeviceSize = (((sdmmc_ctx->SDCardSD[1] & 0x0000003FU) << 16U) | ((sdmmc_ctx->SDCardSD[2] & 0xFFFF0000U) >> 16U));
 8008e02:	041b      	lsls	r3, r3, #16
 8008e04:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8008e06:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8008e0a:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8008e0e:	9314      	str	r3, [sp, #80]	; 0x50
		sdmmc_ctx->SDCardBlockSize = 512U;
 8008e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e14:	65f3      	str	r3, [r6, #92]	; 0x5c
		sdmmc_ctx->SDCardBlockNbr = ((CSD->DeviceSize + 1U) * 1024U);
 8008e16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e18:	3301      	adds	r3, #1
 8008e1a:	029b      	lsls	r3, r3, #10
 8008e1c:	65b3      	str	r3, [r6, #88]	; 0x58
		sdmmc_ctx->SDCardLogBlockNbr = sdmmc_ctx->SDCardBlockNbr;
 8008e1e:	6633      	str	r3, [r6, #96]	; 0x60
	CSD->EraseGrSize = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00004000U) >> 14U);
 8008e20:	f3c0 3c80 	ubfx	ip, r0, #14, #1
		sdmmc_ctx->SDCardLogBlockSize = 512U;
 8008e24:	f44f 7300 	mov.w	r3, #512	; 0x200
	CSD->Reserved3 = 0;
 8008e28:	f04f 0b00 	mov.w	fp, #0
	CSD->EraseGrSize = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00004000U) >> 14U);
 8008e2c:	f88d c059 	strb.w	ip, [sp, #89]	; 0x59
	CSD->EraseGrMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00003F80U) >> 7U);
 8008e30:	f3c0 1cc6 	ubfx	ip, r0, #7, #7
	CSD->WrProtectGrSize = (uint8_t)(sdmmc_ctx->SDCardSD[2] & 0x0000007FU);
 8008e34:	f000 007f 	and.w	r0, r0, #127	; 0x7f
		sdmmc_ctx->SDCardLogBlockSize = 512U;
 8008e38:	6673      	str	r3, [r6, #100]	; 0x64
	CSD->EraseGrMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00003F80U) >> 7U);
 8008e3a:	f88d c05a 	strb.w	ip, [sp, #90]	; 0x5a
	CSD->WrProtectGrSize = (uint8_t)(sdmmc_ctx->SDCardSD[2] & 0x0000007FU);
 8008e3e:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 8008e42:	e9d6 2114 	ldrd	r2, r1, [r6, #80]	; 0x50
	CSD->WrProtectGrEnable = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x80000000U) >> 31U);
 8008e46:	0fd0      	lsrs	r0, r2, #31
	CSD->ECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000300U) >> 8U);
 8008e48:	f3c2 2301 	ubfx	r3, r2, #8, #2
	CSD->PermWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00002000U) >> 13U);
 8008e4c:	f3c2 3e40 	ubfx	lr, r2, #13, #1
	CSD->TempWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00001000U) >> 12U);
 8008e50:	f3c2 3c00 	ubfx	ip, r2, #12, #1
	CSD->WrProtectGrEnable = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x80000000U) >> 31U);
 8008e54:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
	CSD->ManDeflECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x60000000U) >> 29U);
 8008e58:	f3c2 7041 	ubfx	r0, r2, #29, #2
	CSD->ContentProtectAppli = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00010000U) >> 16U);
 8008e5c:	f3c2 4a00 	ubfx	sl, r2, #16, #1
	CSD->FileFormatGroup = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00008000U) >> 15U);
 8008e60:	f3c2 39c0 	ubfx	r9, r2, #15, #1
	CSD->ManDeflECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x60000000U) >> 29U);
 8008e64:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
	CSD->WrSpeedFact = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x1C000000U) >> 26U);
 8008e68:	f3c2 6082 	ubfx	r0, r2, #26, #3
	CSD->CopyFlag = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00004000U) >> 14U);
 8008e6c:	f3c2 3880 	ubfx	r8, r2, #14, #1
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 8008e70:	0409      	lsls	r1, r1, #16
	CSD->WrSpeedFact = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x1C000000U) >> 26U);
 8008e72:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
	CSD->MaxWrBlockLen = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x03C00000U) >> 22U);
 8008e76:	f3c2 5083 	ubfx	r0, r2, #22, #4
 8008e7a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
	CSD->WriteBlockPaPartial = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00200000U) >> 21U);
 8008e7e:	f3c2 5040 	ubfx	r0, r2, #21, #1
 8008e82:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
	CSD->FileFormat = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000C00U) >> 10U);
 8008e86:	f3c2 2081 	ubfx	r0, r2, #10, #2
	CSD->CSD_CRC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x000000FEU) >> 1U);
 8008e8a:	f3c2 0246 	ubfx	r2, r2, #1, #7
	CSD->Reserved3 = 0;
 8008e8e:	f88d b061 	strb.w	fp, [sp, #97]	; 0x61
	CSD->ContentProtectAppli = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00010000U) >> 16U);
 8008e92:	f88d a062 	strb.w	sl, [sp, #98]	; 0x62
	CSD->FileFormatGroup = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00008000U) >> 15U);
 8008e96:	f88d 9063 	strb.w	r9, [sp, #99]	; 0x63
	CSD->CopyFlag = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00004000U) >> 14U);
 8008e9a:	f88d 8064 	strb.w	r8, [sp, #100]	; 0x64
	CSD->PermWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00002000U) >> 13U);
 8008e9e:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
	CSD->TempWrProtect = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00001000U) >> 12U);
 8008ea2:	f88d c066 	strb.w	ip, [sp, #102]	; 0x66
	CSD->FileFormat = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000C00U) >> 10U);
 8008ea6:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 8008eaa:	4620      	mov	r0, r4
	CSD->ECC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x00000300U) >> 8U);
 8008eac:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
	CSD->CSD_CRC = (uint8_t)((sdmmc_ctx->SDCardSD[3] & 0x000000FEU) >> 1U);
 8008eb0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
	CSD->Reserved4 = 1;
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    if (SDMMC_CmdSelDesel(hsdmmc, (uint32_t)(((uint32_t)sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 8008eba:	f000 ff69 	bl	8009d90 <SDMMC_CmdSelDesel>
 8008ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f47f aeb4 	bne.w	8008c30 <BSP_STM32_SDMMC_Init+0x34>
	if (SDMMC_CmdBlockLength(hsdmmc, 512)) return BSP_ERROR;
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 faf2 	bl	80094b4 <SDMMC_CmdBlockLength>
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f47f aeac 	bne.w	8008c30 <BSP_STM32_SDMMC_Init+0x34>
	uint32_t tickstart = BSP_GetTick();
 8008ed8:	f7fb f8cc 	bl	8004074 <BSP_GetTick>
	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 8008edc:	4641      	mov	r1, r8
	uint32_t tickstart = BSP_GetTick();
 8008ede:	4681      	mov	r9, r0
	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 facd 	bl	8009480 <SDMMC_GetResponse>
 8008ee6:	0183      	lsls	r3, r0, #6
 8008ee8:	d43c      	bmi.n	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	if (SDMMC_CmdBlockLength(hsdmmc, 64U)) return BSP_ERROR;
 8008eea:	2140      	movs	r1, #64	; 0x40
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 fae1 	bl	80094b4 <SDMMC_CmdBlockLength>
 8008ef2:	bbb8      	cbnz	r0, 8008f64 <BSP_STM32_SDMMC_Init+0x368>
	if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 8008ef4:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	0409      	lsls	r1, r1, #16
 8008efa:	f001 f863 	bl	8009fc4 <SDMMC_CmdAppCommand>
 8008efe:	bb88      	cbnz	r0, 8008f64 <BSP_STM32_SDMMC_Init+0x368>
	config.DataLength    = 64U;
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	2340      	movs	r3, #64	; 0x40
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f06:	f04f 0c60 	mov.w	ip, #96	; 0x60
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f0a:	2200      	movs	r2, #0
	(void)SDMMC_ConfigData(hsdmmc, &config);
 8008f0c:	a90a      	add	r1, sp, #40	; 0x28
	config.DataLength    = 64U;
 8008f0e:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f12:	2302      	movs	r3, #2
	(void)SDMMC_ConfigData(hsdmmc, &config);
 8008f14:	4620      	mov	r0, r4
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f16:	e9cd c30c 	strd	ip, r3, [sp, #48]	; 0x30
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	(void)SDMMC_ConfigData(hsdmmc, &config);
 8008f20:	f000 fab2 	bl	8009488 <SDMMC_ConfigData>
	if (SDMMC_CmdStatusRegister(hsdmmc)) return BSP_ERROR;
 8008f24:	4620      	mov	r0, r4
 8008f26:	f001 fc19 	bl	800a75c <SDMMC_CmdStatusRegister>
 8008f2a:	b9d8      	cbnz	r0, 8008f64 <BSP_STM32_SDMMC_Init+0x368>
	uint32_t *pData = pSDstatus;
 8008f2c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8008f30:	e005      	b.n	8008f3e <BSP_STM32_SDMMC_Init+0x342>
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 8008f32:	f7fb f89f 	bl	8004074 <BSP_GetTick>
 8008f36:	eba0 0009 	sub.w	r0, r0, r9
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d012      	beq.n	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND)) {
 8008f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f40:	f413 7f95 	tst.w	r3, #298	; 0x12a
		if (__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOHF)) {
 8008f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND)) {
 8008f46:	d14b      	bne.n	8008fe0 <BSP_STM32_SDMMC_Init+0x3e4>
		if (__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOHF)) {
 8008f48:	0419      	lsls	r1, r3, #16
 8008f4a:	d5f2      	bpl.n	8008f32 <BSP_STM32_SDMMC_Init+0x336>
 8008f4c:	f108 0a20 	add.w	sl, r8, #32
				*pData = SDMMC_ReadFIFO(hsdmmc);
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fa7f 	bl	8009454 <SDMMC_ReadFIFO>
 8008f56:	f848 0b04 	str.w	r0, [r8], #4
			for (count = 0U; count < 8U; count++) {
 8008f5a:	45d0      	cmp	r8, sl
 8008f5c:	d1f8      	bne.n	8008f50 <BSP_STM32_SDMMC_Init+0x354>
 8008f5e:	e7e8      	b.n	8008f32 <BSP_STM32_SDMMC_Init+0x336>
		__SDMMC_CLEAR_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR));
 8008f60:	232a      	movs	r3, #42	; 0x2a
 8008f62:	63a3      	str	r3, [r4, #56]	; 0x38
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 8008f64:	4ba8      	ldr	r3, [pc, #672]	; (8009208 <BSP_STM32_SDMMC_Init+0x60c>)
    	return BSP_ERROR;
 8008f66:	2501      	movs	r5, #1
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 8008f68:	63a3      	str	r3, [r4, #56]	; 0x38
    	return BSP_ERROR;
 8008f6a:	e662      	b.n	8008c32 <BSP_STM32_SDMMC_Init+0x36>
		if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8008f6c:	4620      	mov	r0, r4
		sdmmc_ctx->SDCardVersion = CARD_V1_X;
 8008f6e:	f886 a028 	strb.w	sl, [r6, #40]	; 0x28
		if (SDMMC_CmdGoIdleState(hsdmmc)) return BSP_ERROR;
 8008f72:	f000 ffbb 	bl	8009eec <SDMMC_CmdGoIdleState>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f43f ae80 	beq.w	8008c7c <BSP_STM32_SDMMC_Init+0x80>
 8008f7c:	e658      	b.n	8008c30 <BSP_STM32_SDMMC_Init+0x34>
		CSD->DeviceSize = (((sdmmc_ctx->SDCardSD[1] & 0x000003FFU) << 2U) | ((sdmmc_ctx->SDCardSD[2] & 0xC0000000U) >> 30U));
 8008f7e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8008f82:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8008f84:	ea02 0383 	and.w	r3, r2, r3, lsl #2
 8008f88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f8c:	9314      	str	r3, [sp, #80]	; 0x50
		CSD->MaxRdCurrentVDDMin = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x38000000U) >> 27U);
 8008f8e:	f3c0 63c2 	ubfx	r3, r0, #27, #3
 8008f92:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		CSD->MaxRdCurrentVDDMax = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x07000000U) >> 24U);
 8008f96:	f3c0 6302 	ubfx	r3, r0, #24, #3
 8008f9a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
		CSD->MaxWrCurrentVDDMin = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00E00000U) >> 21U);
 8008f9e:	f3c0 5342 	ubfx	r3, r0, #21, #3
 8008fa2:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
		CSD->MaxWrCurrentVDDMax = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x001C0000U) >> 18U);
 8008fa6:	f3c0 4382 	ubfx	r3, r0, #18, #3
 8008faa:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
		CSD->DeviceSizeMul = (uint8_t)((sdmmc_ctx->SDCardSD[2] & 0x00038000U) >> 15U);
 8008fae:	f3c0 33c2 	ubfx	r3, r0, #15, #3
 8008fb2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		sdmmc_ctx->SDCardBlockSize = (1UL << (CSD->RdBlockLen & 0x0FU));
 8008fb6:	2301      	movs	r3, #1
		sdmmc_ctx->SDCardBlockNbr  = (CSD->DeviceSize + 1U) ;
 8008fb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
		sdmmc_ctx->SDCardBlockNbr *= (1UL << ((CSD->DeviceSizeMul & 0x07U) + 2U));
 8008fba:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
		sdmmc_ctx->SDCardBlockNbr  = (CSD->DeviceSize + 1U) ;
 8008fbe:	441a      	add	r2, r3
		sdmmc_ctx->SDCardBlockNbr *= (1UL << ((CSD->DeviceSizeMul & 0x07U) + 2U));
 8008fc0:	f001 0107 	and.w	r1, r1, #7
 8008fc4:	3102      	adds	r1, #2
 8008fc6:	408a      	lsls	r2, r1
		sdmmc_ctx->SDCardBlockSize = (1UL << (CSD->RdBlockLen & 0x0FU));
 8008fc8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8008fcc:	f001 010f 	and.w	r1, r1, #15
		sdmmc_ctx->SDCardBlockNbr *= (1UL << ((CSD->DeviceSizeMul & 0x07U) + 2U));
 8008fd0:	65b2      	str	r2, [r6, #88]	; 0x58
		sdmmc_ctx->SDCardBlockSize = (1UL << (CSD->RdBlockLen & 0x0FU));
 8008fd2:	408b      	lsls	r3, r1
 8008fd4:	65f3      	str	r3, [r6, #92]	; 0x5c
		sdmmc_ctx->SDCardLogBlockNbr = (sdmmc_ctx->SDCardBlockNbr) * ((sdmmc_ctx->SDCardBlockSize) / 512U);
 8008fd6:	0a5b      	lsrs	r3, r3, #9
 8008fd8:	fb02 f303 	mul.w	r3, r2, r3
 8008fdc:	6633      	str	r3, [r6, #96]	; 0x60
		break;
 8008fde:	e71f      	b.n	8008e20 <BSP_STM32_SDMMC_Init+0x224>
	if (__SDMMC_GET_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR))) return BSP_ERROR;
 8008fe0:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 8008fe4:	d00a      	beq.n	8008ffc <BSP_STM32_SDMMC_Init+0x400>
 8008fe6:	e7bd      	b.n	8008f64 <BSP_STM32_SDMMC_Init+0x368>
		*pData = SDMMC_ReadFIFO(hsdmmc);
 8008fe8:	f000 fa34 	bl	8009454 <SDMMC_ReadFIFO>
 8008fec:	f848 0b04 	str.w	r0, [r8], #4
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 8008ff0:	f7fb f840 	bl	8004074 <BSP_GetTick>
 8008ff4:	eba0 0009 	sub.w	r0, r0, r9
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d0b3      	beq.n	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	while ((__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_DPSMACT))) {
 8008ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
		*pData = SDMMC_ReadFIFO(hsdmmc);
 8008ffe:	4620      	mov	r0, r4
	while ((__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_DPSMACT))) {
 8009000:	04da      	lsls	r2, r3, #19
 8009002:	d4f1      	bmi.n	8008fe8 <BSP_STM32_SDMMC_Init+0x3ec>
    status->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009004:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009006:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009008:	f3c1 1981 	ubfx	r9, r1, #6, #2
 800900c:	fa92 fc82 	rev.w	ip, r2
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009010:	0a0a      	lsrs	r2, r1, #8
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009012:	e9dd 0312 	ldrd	r0, r3, [sp, #72]	; 0x48
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800901a:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 800901e:	fa5f f883 	uxtb.w	r8, r3
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009022:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009026:	f02e 0eff 	bic.w	lr, lr, #255	; 0xff
    status->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800902a:	f3c1 1140 	ubfx	r1, r1, #5, #1
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800902e:	b292      	uxth	r2, r2
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009030:	ea4e 0e08 	orr.w	lr, lr, r8
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 8009034:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8009208 <BSP_STM32_SDMMC_Init+0x60c>
 8009038:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    status->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800903c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    status->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009040:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 8009044:	f44f 7100 	mov.w	r1, #512	; 0x200
    status->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009048:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    status->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800904c:	b2c2      	uxtb	r2, r0
    status->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800904e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    status->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009052:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    status->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009056:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800905a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    status->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800905e:	f3c0 5203 	ubfx	r2, r0, #20, #4
    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 8009062:	4620      	mov	r0, r4
    status->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009064:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    status->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009068:	f3c3 2285 	ubfx	r2, r3, #10, #6
    status->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800906c:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    status->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009070:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    status->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009074:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8009078:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    status->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800907c:	f3c3 1203 	ubfx	r2, r3, #4, #4
    status->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009080:	f003 030f 	and.w	r3, r3, #15
    status->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009084:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    status->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009088:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    status->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800908c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8009090:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 8009094:	f000 fa0e 	bl	80094b4 <SDMMC_CmdBlockLength>
 8009098:	2800      	cmp	r0, #0
 800909a:	d168      	bne.n	800916e <BSP_STM32_SDMMC_Init+0x572>
	speedgrade = cardstatus.UhsSpeedGrade;
 800909c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	unitsize = cardstatus.UhsAllocationUnitSize;
 80090a0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
	sdmmc_ctx->SDCardSpeed = CARD_NORMAL_SPEED;
 80090a4:	6330      	str	r0, [r6, #48]	; 0x30
	speedgrade = cardstatus.UhsSpeedGrade;
 80090a6:	b2db      	uxtb	r3, r3
	if (sdmmc_ctx->SDCardType == CARD_SDHC_SDXC) {
 80090a8:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
	unitsize = cardstatus.UhsAllocationUnitSize;
 80090ac:	b2d2      	uxtb	r2, r2
	if (sdmmc_ctx->SDCardType == CARD_SDHC_SDXC) {
 80090ae:	2901      	cmp	r1, #1
 80090b0:	d054      	beq.n	800915c <BSP_STM32_SDMMC_Init+0x560>
	if (sdmmc_ctx->SDCardType == CARD_SECURED) return BSP_ERROR;
 80090b2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	f43f adba 	beq.w	8008c30 <BSP_STM32_SDMMC_Init+0x34>
	if ((SDMMC_GetResponse(hsdmmc, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED) return BSP_ERROR;
 80090bc:	2100      	movs	r1, #0
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 f9de 	bl	8009480 <SDMMC_GetResponse>
 80090c4:	0183      	lsls	r3, r0, #6
 80090c6:	f53f af4d 	bmi.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	uint32_t tickstart = BSP_GetTick();
 80090ca:	f7fa ffd3 	bl	8004074 <BSP_GetTick>
	if (SDMMC_CmdBlockLength(hsdmmc, 8U)) return BSP_ERROR;
 80090ce:	2108      	movs	r1, #8
	uint32_t tickstart = BSP_GetTick();
 80090d0:	4680      	mov	r8, r0
	if (SDMMC_CmdBlockLength(hsdmmc, 8U)) return BSP_ERROR;
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 f9ee 	bl	80094b4 <SDMMC_CmdBlockLength>
 80090d8:	2800      	cmp	r0, #0
 80090da:	f47f af43 	bne.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)((sdmmc_ctx->SDCardRelAdd) << 16U))) return BSP_ERROR;
 80090de:	6d71      	ldr	r1, [r6, #84]	; 0x54
 80090e0:	4620      	mov	r0, r4
 80090e2:	0409      	lsls	r1, r1, #16
 80090e4:	f000 ff6e 	bl	8009fc4 <SDMMC_CmdAppCommand>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	f47f af3b 	bne.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	config.DataLength    = 8U;
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295
 80090f2:	2308      	movs	r3, #8
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090f4:	2030      	movs	r0, #48	; 0x30
	SDMMC_ConfigData(hsdmmc, &config);
 80090f6:	a910      	add	r1, sp, #64	; 0x40
	config.DataLength    = 8U;
 80090f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090fc:	2302      	movs	r3, #2
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090fe:	2200      	movs	r2, #0
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009100:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009104:	2301      	movs	r3, #1
	SDMMC_ConfigData(hsdmmc, &config);
 8009106:	4620      	mov	r0, r4
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009108:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	SDMMC_ConfigData(hsdmmc, &config);
 800910c:	f000 f9bc 	bl	8009488 <SDMMC_ConfigData>
	if (SDMMC_CmdSendSCR(hsdmmc)) return BSP_ERROR;
 8009110:	4620      	mov	r0, r4
 8009112:	f001 f8ef 	bl	800a2f4 <SDMMC_CmdSendSCR>
 8009116:	2800      	cmp	r0, #0
 8009118:	f47f af24 	bne.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
 800911c:	4633      	mov	r3, r6
	uint32_t tempscr[2U] = {0UL, 0UL};
 800911e:	4681      	mov	r9, r0
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND)) {
 8009120:	f240 5b2a 	movw	fp, #1322	; 0x52a
 8009124:	4606      	mov	r6, r0
 8009126:	469a      	mov	sl, r3
 8009128:	e006      	b.n	8009138 <BSP_STM32_SDMMC_Init+0x53c>
		if ((BSP_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT) return BSP_ERROR;
 800912a:	f7fa ffa3 	bl	8004074 <BSP_GetTick>
 800912e:	eba0 0308 	sub.w	r3, r0, r8
 8009132:	3301      	adds	r3, #1
 8009134:	f43f af16 	beq.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	while (!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND)) {
 8009138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800913a:	ea13 0f0b 	tst.w	r3, fp
 800913e:	d11a      	bne.n	8009176 <BSP_STM32_SDMMC_Init+0x57a>
		if ((!__SDMMC_GET_FLAG(hsdmmc, SDMMC_FLAG_RXFIFOE)) && (index == 0U)) {
 8009140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009142:	031b      	lsls	r3, r3, #12
 8009144:	d4f1      	bmi.n	800912a <BSP_STM32_SDMMC_Init+0x52e>
 8009146:	2e00      	cmp	r6, #0
 8009148:	d1ef      	bne.n	800912a <BSP_STM32_SDMMC_Init+0x52e>
			tempscr[0] = SDMMC_ReadFIFO(hsdmmc);
 800914a:	4620      	mov	r0, r4
			index++;
 800914c:	2601      	movs	r6, #1
			tempscr[0] = SDMMC_ReadFIFO(hsdmmc);
 800914e:	f000 f981 	bl	8009454 <SDMMC_ReadFIFO>
 8009152:	4681      	mov	r9, r0
			tempscr[1] = SDMMC_ReadFIFO(hsdmmc);
 8009154:	4620      	mov	r0, r4
 8009156:	f000 f97d 	bl	8009454 <SDMMC_ReadFIFO>
			index++;
 800915a:	e7e6      	b.n	800912a <BSP_STM32_SDMMC_Init+0x52e>
		sdmmc_ctx->SDCardSpeed = CARD_HIGH_SPEED;
 800915c:	f44f 7180 	mov.w	r1, #256	; 0x100
		if ((speedgrade != 0U) || (unitsize != 0U)) sdmmc_ctx->SDCardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009160:	4313      	orrs	r3, r2
		sdmmc_ctx->SDCardSpeed = CARD_HIGH_SPEED;
 8009162:	6331      	str	r1, [r6, #48]	; 0x30
		if ((speedgrade != 0U) || (unitsize != 0U)) sdmmc_ctx->SDCardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009164:	d0a5      	beq.n	80090b2 <BSP_STM32_SDMMC_Init+0x4b6>
 8009166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800916a:	6333      	str	r3, [r6, #48]	; 0x30
 800916c:	e7a1      	b.n	80090b2 <BSP_STM32_SDMMC_Init+0x4b6>
	if (_SD_GetCardStatus(hsdmmc, ctx, &cardstatus)) return BSP_ERROR;
 800916e:	2501      	movs	r5, #1
    	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_FLAGS);
 8009170:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    	return BSP_ERROR;
 8009174:	e55d      	b.n	8008c32 <BSP_STM32_SDMMC_Init+0x36>
	if (__SDMMC_GET_FLAG(hsdmmc, (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR))) {
 8009176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009178:	4656      	mov	r6, sl
 800917a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 800917e:	f47f aeef 	bne.w	8008f60 <BSP_STM32_SDMMC_Init+0x364>
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_DATA_FLAGS);
 8009182:	fa99 f989 	rev.w	r9, r9
 8009186:	4b21      	ldr	r3, [pc, #132]	; (800920c <BSP_STM32_SDMMC_Init+0x610>)
	if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) == SDMMC_ALLZERO) return BSP_ERROR;
 8009188:	f419 2f80 	tst.w	r9, #262144	; 0x40000
	__SDMMC_CLEAR_FLAG(hsdmmc, SDMMC_STATIC_DATA_FLAGS);
 800918c:	63a3      	str	r3, [r4, #56]	; 0x38
	if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) == SDMMC_ALLZERO) return BSP_ERROR;
 800918e:	f43f aee9 	beq.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
    if (SDMMC_CmdAppCommand(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U))) return BSP_ERROR;
 8009192:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
 8009196:	4620      	mov	r0, r4
 8009198:	0409      	lsls	r1, r1, #16
 800919a:	f000 ff13 	bl	8009fc4 <SDMMC_CmdAppCommand>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f47f aee0 	bne.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
    if (SDMMC_CmdBusWidth(hsdmmc, 2U)) return BSP_ERROR;
 80091a4:	2102      	movs	r1, #2
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fff6 	bl	800a198 <SDMMC_CmdBusWidth>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	f47f aed9 	bne.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	Init.BusWide          		= SDMMC_BUS_WIDE_4B;
 80091b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80091b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
	Init.ClockDiv				= 4;
 80091be:	2304      	movs	r3, #4
 80091c0:	9308      	str	r3, [sp, #32]
    if (SDMMC_Init(hsdmmc, Init)) return BSP_ERROR;
 80091c2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80091c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80091ca:	4620      	mov	r0, r4
 80091cc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80091d0:	f000 f924 	bl	800941c <SDMMC_Init>
 80091d4:	4605      	mov	r5, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f47f ad2a 	bne.w	8008c30 <BSP_STM32_SDMMC_Init+0x34>
    if (SDMMC_CmdBlockLength(hsdmmc, 512)) {
 80091dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 f967 	bl	80094b4 <SDMMC_CmdBlockLength>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f47f aebc 	bne.w	8008f64 <BSP_STM32_SDMMC_Init+0x368>
	SDMMC_CmdSendStatus(hsdmmc, (uint32_t)(sdmmc_ctx->SDCardRelAdd << 16U));
 80091ec:	6d71      	ldr	r1, [r6, #84]	; 0x54
 80091ee:	4620      	mov	r0, r4
 80091f0:	0409      	lsls	r1, r1, #16
 80091f2:	f001 fa05 	bl	800a600 <SDMMC_CmdSendStatus>
	resp1 = SDMMC_GetResponse(hsdmmc, SDMMC_RESP1);
 80091f6:	2100      	movs	r1, #0
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 f941 	bl	8009480 <SDMMC_GetResponse>
	return ((resp1 >> 9U) & 0x0FU);
 80091fe:	f3c0 2043 	ubfx	r0, r0, #9, #4
    while (BSP_STM32_SDMMC_GetCardState(hsdmmc, ctx) != SDMMC_CARD_TRANSFER) {};
 8009202:	2804      	cmp	r0, #4
 8009204:	d1f2      	bne.n	80091ec <BSP_STM32_SDMMC_Init+0x5f0>
 8009206:	e514      	b.n	8008c32 <BSP_STM32_SDMMC_Init+0x36>
 8009208:	1fe00fff 	.word	0x1fe00fff
 800920c:	18000f3a 	.word	0x18000f3a
 8009210:	c1100000 	.word	0xc1100000

08009214 <BSP_STM32_SDMMC_ReadBlocks>:


uint8_t BSP_STM32_SDMMC_ReadBlocks(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 8009214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009218:	b087      	sub	sp, #28
 800921a:	461f      	mov	r7, r3
 800921c:	4689      	mov	r9, r1
 800921e:	4615      	mov	r5, r2
 8009220:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8009224:	4604      	mov	r4, r0

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;

	SDMMC_DataInitTypeDef config;
	uint32_t errorstate;
	uint32_t tickstart = BSP_GetTick();
 8009226:	f7fa ff25 	bl	8004074 <BSP_GetTick>
	uint32_t data;
	uint32_t dataremaining;
	uint32_t add = BlockAdd;
	uint8_t *tempbuff = pData;

	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800922a:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 800922e:	eb07 0208 	add.w	r2, r7, r8
 8009232:	429a      	cmp	r2, r3
 8009234:	d84f      	bhi.n	80092d6 <BSP_STM32_SDMMC_ReadBlocks+0xc2>

	// Initialize data control register
	hsdmmc->DCTRL = 0U;
 8009236:	2300      	movs	r3, #0

	// Configure the SD DPSM (Data Path State Machine)
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
	config.DataLength    = NumberOfBlocks * 512U;
	config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009238:	2190      	movs	r1, #144	; 0x90
 800923a:	4606      	mov	r6, r0
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
	config.DPSM          = SDMMC_DPSM_DISABLE;
	SDMMC_ConfigData(hsdmmc, &config);
 800923c:	4620      	mov	r0, r4
	hsdmmc->DCTRL = 0U;
 800923e:	62e3      	str	r3, [r4, #44]	; 0x2c
	if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 8009240:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8009244:	2b01      	cmp	r3, #1
	config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009246:	f04f 0300 	mov.w	r3, #0
	config.DPSM          = SDMMC_DPSM_DISABLE;
 800924a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800924e:	f04f 33ff 	mov.w	r3, #4294967295
	if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 8009252:	bf18      	it	ne
 8009254:	027f      	lslne	r7, r7, #9
	config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009256:	9300      	str	r3, [sp, #0]
	config.DataLength    = NumberOfBlocks * 512U;
 8009258:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800925c:	9301      	str	r3, [sp, #4]
	config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800925e:	2302      	movs	r3, #2
 8009260:	e9cd 1302 	strd	r1, r3, [sp, #8]
	SDMMC_ConfigData(hsdmmc, &config);
 8009264:	4669      	mov	r1, sp
 8009266:	f000 f90f 	bl	8009488 <SDMMC_ConfigData>
	__SDMMC_CMDTRANS_ENABLE(hsdmmc);
 800926a:	68e3      	ldr	r3, [r4, #12]

	// Read block(s) in polling mode
	if (NumberOfBlocks > 1U) {
 800926c:	f1b8 0f01 	cmp.w	r8, #1
		// Read Multi Block command
		errorstate = SDMMC_CmdReadMultiBlock(hsdmmc, add);
 8009270:	4639      	mov	r1, r7
	__SDMMC_CMDTRANS_ENABLE(hsdmmc);
 8009272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		errorstate = SDMMC_CmdReadMultiBlock(hsdmmc, add);
 8009276:	4620      	mov	r0, r4
	__SDMMC_CMDTRANS_ENABLE(hsdmmc);
 8009278:	60e3      	str	r3, [r4, #12]
	if (NumberOfBlocks > 1U) {
 800927a:	d929      	bls.n	80092d0 <BSP_STM32_SDMMC_ReadBlocks+0xbc>
		errorstate = SDMMC_CmdReadMultiBlock(hsdmmc, add);
 800927c:	f000 fa76 	bl	800976c <SDMMC_CmdReadMultiBlock>
		// Read Single Block command
		errorstate = SDMMC_CmdReadSingleBlock(hsdmmc, add);
	}

	// Handle error
	if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 8009280:	bb00      	cbnz	r0, 80092c4 <BSP_STM32_SDMMC_ReadBlocks+0xb0>

	// Poll on SDMMC flags
	dataremaining = config.DataLength;
 8009282:	9f01      	ldr	r7, [sp, #4]
	while (!(hsdmmc->STA & (SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 8009284:	e005      	b.n	8009292 <BSP_STM32_SDMMC_ReadBlocks+0x7e>
			}
			dataremaining -= 32U;
		}

		// Handle timeout
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 8009286:	f7fa fef5 	bl	8004074 <BSP_GetTick>
 800928a:	1b83      	subs	r3, r0, r6
 800928c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009290:	d218      	bcs.n	80092c4 <BSP_STM32_SDMMC_ReadBlocks+0xb0>
	while (!(hsdmmc->STA & (SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 8009292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009294:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8009298:	d121      	bne.n	80092de <BSP_STM32_SDMMC_ReadBlocks+0xca>
		if ((hsdmmc->STA & (SDMMC_FLAG_RXFIFOHF)) && (dataremaining >= 32U)) {
 800929a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800929c:	041a      	lsls	r2, r3, #16
 800929e:	d5f2      	bpl.n	8009286 <BSP_STM32_SDMMC_ReadBlocks+0x72>
 80092a0:	2f1f      	cmp	r7, #31
 80092a2:	d9f0      	bls.n	8009286 <BSP_STM32_SDMMC_ReadBlocks+0x72>
 80092a4:	f105 0920 	add.w	r9, r5, #32
				data = SDMMC_ReadFIFO(hsdmmc);
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 f8d3 	bl	8009454 <SDMMC_ReadFIFO>
				*tempbuff = (uint8_t)(data & 0xFFU);
 80092ae:	f845 0b04 	str.w	r0, [r5], #4
			for (count = 0U; count < 8U; count++) {
 80092b2:	45a9      	cmp	r9, r5
 80092b4:	d1f8      	bne.n	80092a8 <BSP_STM32_SDMMC_ReadBlocks+0x94>
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80092b6:	f7fa fedd 	bl	8004074 <BSP_GetTick>
 80092ba:	1b83      	subs	r3, r0, r6
			dataremaining -= 32U;
 80092bc:	3f20      	subs	r7, #32
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80092be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092c2:	d3e6      	bcc.n	8009292 <BSP_STM32_SDMMC_ReadBlocks+0x7e>
	// Send stop transmission command in case of multiblock read
	if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
		// Send stop transmission command
		errorstate = SDMMC_CmdStopTransfer(hsdmmc);
		// Handle error
		if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80092c4:	4b13      	ldr	r3, [pc, #76]	; (8009314 <BSP_STM32_SDMMC_ReadBlocks+0x100>)
 80092c6:	2001      	movs	r0, #1
 80092c8:	63a3      	str	r3, [r4, #56]	; 0x38
	}

	// Clear all the static flags
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
	return BSP_OK;
}
 80092ca:	b007      	add	sp, #28
 80092cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		errorstate = SDMMC_CmdReadSingleBlock(hsdmmc, add);
 80092d0:	f000 f99e 	bl	8009610 <SDMMC_CmdReadSingleBlock>
 80092d4:	e7d4      	b.n	8009280 <BSP_STM32_SDMMC_ReadBlocks+0x6c>
	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 80092d6:	2001      	movs	r0, #1
}
 80092d8:	b007      	add	sp, #28
 80092da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__SDMMC_CMDTRANS_DISABLE(hsdmmc);
 80092de:	68e3      	ldr	r3, [r4, #12]
 80092e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e4:	60e3      	str	r3, [r4, #12]
	if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
 80092e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092e8:	05db      	lsls	r3, r3, #23
 80092ea:	d502      	bpl.n	80092f2 <BSP_STM32_SDMMC_ReadBlocks+0xde>
 80092ec:	f1b8 0f01 	cmp.w	r8, #1
 80092f0:	d809      	bhi.n	8009306 <BSP_STM32_SDMMC_ReadBlocks+0xf2>
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR)) {
 80092f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
		hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 80092f4:	4b07      	ldr	r3, [pc, #28]	; (8009314 <BSP_STM32_SDMMC_ReadBlocks+0x100>)
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_RXOVERR)) {
 80092f6:	f010 002a 	ands.w	r0, r0, #42	; 0x2a
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 80092fa:	63a3      	str	r3, [r4, #56]	; 0x38
		return BSP_ERROR;
 80092fc:	bf18      	it	ne
 80092fe:	2001      	movne	r0, #1
}
 8009300:	b007      	add	sp, #28
 8009302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		errorstate = SDMMC_CmdStopTransfer(hsdmmc);
 8009306:	4620      	mov	r0, r4
 8009308:	f000 fc3a 	bl	8009b80 <SDMMC_CmdStopTransfer>
		if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 800930c:	2800      	cmp	r0, #0
 800930e:	d0f0      	beq.n	80092f2 <BSP_STM32_SDMMC_ReadBlocks+0xde>
 8009310:	e7d8      	b.n	80092c4 <BSP_STM32_SDMMC_ReadBlocks+0xb0>
 8009312:	bf00      	nop
 8009314:	1fe00fff 	.word	0x1fe00fff

08009318 <BSP_STM32_SDMMC_WriteBlocks>:


uint8_t BSP_STM32_SDMMC_WriteBlocks(SDMMC_TypeDef * hsdmmc, TxRxContext_TypeDef * ctx, const uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks) {
 8009318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800931c:	b089      	sub	sp, #36	; 0x24
 800931e:	461f      	mov	r7, r3
 8009320:	4689      	mov	r9, r1
 8009322:	4615      	mov	r5, r2
 8009324:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8009328:	4604      	mov	r4, r0

	__IO SDMMCContext_TypeDef * sdmmc_ctx = (SDMMCContext_TypeDef *)ctx->ctxmem;

	SDMMC_DataInitTypeDef config;
	uint32_t errorstate;
	uint32_t tickstart = BSP_GetTick();
 800932a:	f7fa fea3 	bl	8004074 <BSP_GetTick>
	uint32_t dataremaining;
	uint32_t add = BlockAdd;
	const uint8_t *tempbuff = pData;


	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 800932e:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 8009332:	eb07 0208 	add.w	r2, r7, r8
 8009336:	429a      	cmp	r2, r3
 8009338:	d850      	bhi.n	80093dc <BSP_STM32_SDMMC_WriteBlocks+0xc4>

    // Initialize data control register
    hsdmmc->DCTRL = 0U;
 800933a:	2300      	movs	r3, #0
    config.DataLength    = NumberOfBlocks * SDMMC_BLOCKSIZE;
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
    config.DPSM          = SDMMC_DPSM_DISABLE;
    (void)SDMMC_ConfigData(hsdmmc, &config);
 800933c:	a902      	add	r1, sp, #8
 800933e:	4606      	mov	r6, r0
 8009340:	4620      	mov	r0, r4
    hsdmmc->DCTRL = 0U;
 8009342:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 8009344:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8009348:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800934a:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800934e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009352:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009354:	f04f 33ff 	mov.w	r3, #4294967295
    if (sdmmc_ctx->SDCardType != CARD_SDHC_SDXC) add *= 512U;
 8009358:	bf18      	it	ne
 800935a:	027f      	lslne	r7, r7, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800935c:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * SDMMC_BLOCKSIZE;
 800935e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8009362:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009364:	2390      	movs	r3, #144	; 0x90
 8009366:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsdmmc, &config);
 8009368:	f000 f88e 	bl	8009488 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsdmmc);
 800936c:	68e3      	ldr	r3, [r4, #12]

    // Write Blocks in Polling mode
	if (NumberOfBlocks > 1U) {
 800936e:	f1b8 0f01 	cmp.w	r8, #1
		// Write Multi Block command
		errorstate = SDMMC_CmdWriteMultiBlock(hsdmmc, add);
 8009372:	4639      	mov	r1, r7
 8009374:	4620      	mov	r0, r4
    __SDMMC_CMDTRANS_ENABLE(hsdmmc);
 8009376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937a:	60e3      	str	r3, [r4, #12]
	if (NumberOfBlocks > 1U) {
 800937c:	d92b      	bls.n	80093d6 <BSP_STM32_SDMMC_WriteBlocks+0xbe>
		errorstate = SDMMC_CmdWriteMultiBlock(hsdmmc, add);
 800937e:	f000 fb51 	bl	8009a24 <SDMMC_CmdWriteMultiBlock>
		// Read Single Block command
		errorstate = SDMMC_CmdWriteSingleBlock(hsdmmc, add);
	}

    // Handle error
    if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 8009382:	bb10      	cbnz	r0, 80093ca <BSP_STM32_SDMMC_WriteBlocks+0xb2>

    // Write block(s) in polling mode
    dataremaining = config.DataLength;
 8009384:	9f03      	ldr	r7, [sp, #12]

    while (!(hsdmmc->STA & (SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 8009386:	e005      	b.n	8009394 <BSP_STM32_SDMMC_WriteBlocks+0x7c>
    		}
    		dataremaining -= 32U;
    	}

		// Handle timeout
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 8009388:	f7fa fe74 	bl	8004074 <BSP_GetTick>
 800938c:	1b83      	subs	r3, r0, r6
 800938e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009392:	d21a      	bcs.n	80093ca <BSP_STM32_SDMMC_WriteBlocks+0xb2>
    while (!(hsdmmc->STA & (SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))) {
 8009394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009396:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800939a:	d123      	bne.n	80093e4 <BSP_STM32_SDMMC_WriteBlocks+0xcc>
    	if ((hsdmmc->STA & (SDMMC_FLAG_TXFIFOHE)) && (dataremaining >= 32U)) {
 800939c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800939e:	045a      	lsls	r2, r3, #17
 80093a0:	d5f2      	bpl.n	8009388 <BSP_STM32_SDMMC_WriteBlocks+0x70>
 80093a2:	2f1f      	cmp	r7, #31
 80093a4:	d9f0      	bls.n	8009388 <BSP_STM32_SDMMC_WriteBlocks+0x70>
 80093a6:	f105 0920 	add.w	r9, r5, #32
    			data |= ((uint32_t)(*tempbuff) << 24U);
 80093aa:	f855 3b04 	ldr.w	r3, [r5], #4
    			(void)SDMMC_WriteFIFO(hsdmmc, &data);
 80093ae:	a901      	add	r1, sp, #4
 80093b0:	4620      	mov	r0, r4
    			data |= ((uint32_t)(*tempbuff) << 24U);
 80093b2:	9301      	str	r3, [sp, #4]
    			(void)SDMMC_WriteFIFO(hsdmmc, &data);
 80093b4:	f000 f852 	bl	800945c <SDMMC_WriteFIFO>
    		for (count = 0U; count < 8U; count++) {
 80093b8:	454d      	cmp	r5, r9
 80093ba:	d1f6      	bne.n	80093aa <BSP_STM32_SDMMC_WriteBlocks+0x92>
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80093bc:	f7fa fe5a 	bl	8004074 <BSP_GetTick>
 80093c0:	1b83      	subs	r3, r0, r6
    		dataremaining -= 32U;
 80093c2:	3f20      	subs	r7, #32
		if ((BSP_GetTick() - tickstart) >=  1000) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80093c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093c8:	d3e4      	bcc.n	8009394 <BSP_STM32_SDMMC_WriteBlocks+0x7c>
    // Send stop transmission command in case of multiblock write
    if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
        // Send stop transmission command
        errorstate = SDMMC_CmdStopTransfer(hsdmmc);
        // Handle error
        if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 80093ca:	4b13      	ldr	r3, [pc, #76]	; (8009418 <BSP_STM32_SDMMC_WriteBlocks+0x100>)
 80093cc:	2001      	movs	r0, #1
 80093ce:	63a3      	str	r3, [r4, #56]	; 0x38
	}

	// Clear all the static flags
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
	return BSP_OK;
}
 80093d0:	b009      	add	sp, #36	; 0x24
 80093d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		errorstate = SDMMC_CmdWriteSingleBlock(hsdmmc, add);
 80093d6:	f000 fa77 	bl	80098c8 <SDMMC_CmdWriteSingleBlock>
 80093da:	e7d2      	b.n	8009382 <BSP_STM32_SDMMC_WriteBlocks+0x6a>
	if ((add + NumberOfBlocks) > (sdmmc_ctx->SDCardLogBlockNbr)) return BSP_ERROR;
 80093dc:	2001      	movs	r0, #1
}
 80093de:	b009      	add	sp, #36	; 0x24
 80093e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __SDMMC_CMDTRANS_DISABLE(hsdmmc);
 80093e4:	68e3      	ldr	r3, [r4, #12]
 80093e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ea:	60e3      	str	r3, [r4, #12]
    if ((hsdmmc->STA & (SDMMC_FLAG_DATAEND)) && (NumberOfBlocks > 1U)) {
 80093ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093ee:	05db      	lsls	r3, r3, #23
 80093f0:	d502      	bpl.n	80093f8 <BSP_STM32_SDMMC_WriteBlocks+0xe0>
 80093f2:	f1b8 0f01 	cmp.w	r8, #1
 80093f6:	d809      	bhi.n	800940c <BSP_STM32_SDMMC_WriteBlocks+0xf4>
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_TXUNDERR)) {
 80093f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
		hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <BSP_STM32_SDMMC_WriteBlocks+0x100>)
	if (hsdmmc->STA & (SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_TXUNDERR)) {
 80093fc:	f010 001a 	ands.w	r0, r0, #26
	hsdmmc->ICR = SDMMC_STATIC_FLAGS;
 8009400:	63a3      	str	r3, [r4, #56]	; 0x38
		return BSP_ERROR;
 8009402:	bf18      	it	ne
 8009404:	2001      	movne	r0, #1
}
 8009406:	b009      	add	sp, #36	; 0x24
 8009408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        errorstate = SDMMC_CmdStopTransfer(hsdmmc);
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fbb7 	bl	8009b80 <SDMMC_CmdStopTransfer>
        if (errorstate) {hsdmmc->ICR = SDMMC_STATIC_FLAGS; return BSP_ERROR; }
 8009412:	2800      	cmp	r0, #0
 8009414:	d0f0      	beq.n	80093f8 <BSP_STM32_SDMMC_WriteBlocks+0xe0>
 8009416:	e7d8      	b.n	80093ca <BSP_STM32_SDMMC_WriteBlocks+0xb2>
 8009418:	1fe00fff 	.word	0x1fe00fff

0800941c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800941c:	b084      	sub	sp, #16
 800941e:	b410      	push	{r4}
 8009420:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009424:	4614      	mov	r4, r2
{
 8009426:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800942a:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800942c:	9904      	ldr	r1, [sp, #16]
{
 800942e:	4602      	mov	r2, r0
             Init.BusWide             | \
 8009430:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 8009432:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009434:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 8009436:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 8009438:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800943a:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800943c:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800943e:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009440:	4903      	ldr	r1, [pc, #12]	; (8009450 <SDMMC_Init+0x34>)
 8009442:	4021      	ands	r1, r4
}
 8009444:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009448:	430b      	orrs	r3, r1
}
 800944a:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800944c:	6053      	str	r3, [r2, #4]
}
 800944e:	4770      	bx	lr
 8009450:	ffc02c00 	.word	0xffc02c00

08009454 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009454:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop

0800945c <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800945c:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800945e:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8009460:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8009462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8009466:	4770      	bx	lr

08009468 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009468:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800946a:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	f042 0203 	orr.w	r2, r2, #3
 8009472:	601a      	str	r2, [r3, #0]
}
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop

08009478 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009478:	6800      	ldr	r0, [r0, #0]
}
 800947a:	f000 0003 	and.w	r0, r0, #3
 800947e:	4770      	bx	lr

08009480 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009480:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8009482:	5840      	ldr	r0, [r0, r1]
}
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop

08009488 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009488:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800948a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 800948e:	690d      	ldr	r5, [r1, #16]
{
 8009490:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009492:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009494:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 8009496:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009498:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   | \
 800949a:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800949c:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 800949e:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80094a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  | \
 80094a2:	4303      	orrs	r3, r0

  return HAL_OK;

}
 80094a4:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80094a6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80094aa:	430b      	orrs	r3, r1
}
 80094ac:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80094ae:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop

080094b4 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094b4:	4a50      	ldr	r2, [pc, #320]	; (80095f8 <SDMMC_CmdBlockLength+0x144>)
{
 80094b6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094b8:	4b50      	ldr	r3, [pc, #320]	; (80095fc <SDMMC_CmdBlockLength+0x148>)
 80094ba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80094bc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094c0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80094c4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80094c8:	484d      	ldr	r0, [pc, #308]	; (8009600 <SDMMC_CmdBlockLength+0x14c>)
 80094ca:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80094d0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094d2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80094d6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094d8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80094dc:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 80094e0:	1e53      	subs	r3, r2, #1
 80094e2:	b14a      	cbz	r2, 80094f8 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80094e4:	4947      	ldr	r1, [pc, #284]	; (8009604 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
 80094e6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 80094ea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094ec:	420a      	tst	r2, r1
 80094ee:	d001      	beq.n	80094f4 <SDMMC_CmdBlockLength+0x40>
 80094f0:	0492      	lsls	r2, r2, #18
 80094f2:	d504      	bpl.n	80094fe <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 80094f4:	1c58      	adds	r0, r3, #1
 80094f6:	d1f6      	bne.n	80094e6 <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80094f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80094fc:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094fe:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8009502:	0758      	lsls	r0, r3, #29
 8009504:	d445      	bmi.n	8009592 <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009506:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800950a:	f010 0001 	ands.w	r0, r0, #1
 800950e:	d137      	bne.n	8009580 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009510:	4b3d      	ldr	r3, [pc, #244]	; (8009608 <SDMMC_CmdBlockLength+0x154>)
 8009512:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009516:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b10      	cmp	r3, #16
 800951e:	d136      	bne.n	800958e <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
 8009520:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009524:	4839      	ldr	r0, [pc, #228]	; (800960c <SDMMC_CmdBlockLength+0x158>)
 8009526:	4018      	ands	r0, r3
 8009528:	2800      	cmp	r0, #0
 800952a:	d02f      	beq.n	800958c <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800952c:	2b00      	cmp	r3, #0
 800952e:	db35      	blt.n	800959c <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009530:	0059      	lsls	r1, r3, #1
 8009532:	d436      	bmi.n	80095a2 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009534:	009a      	lsls	r2, r3, #2
 8009536:	d436      	bmi.n	80095a6 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009538:	00d9      	lsls	r1, r3, #3
 800953a:	d436      	bmi.n	80095aa <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800953c:	011a      	lsls	r2, r3, #4
 800953e:	d437      	bmi.n	80095b0 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009540:	0159      	lsls	r1, r3, #5
 8009542:	d438      	bmi.n	80095b6 <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009544:	01da      	lsls	r2, r3, #7
 8009546:	d439      	bmi.n	80095bc <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009548:	0219      	lsls	r1, r3, #8
 800954a:	d43a      	bmi.n	80095c2 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800954c:	025a      	lsls	r2, r3, #9
 800954e:	d43b      	bmi.n	80095c8 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009550:	0299      	lsls	r1, r3, #10
 8009552:	d445      	bmi.n	80095e0 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009554:	02da      	lsls	r2, r3, #11
 8009556:	d440      	bmi.n	80095da <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009558:	0359      	lsls	r1, r3, #13
 800955a:	d43b      	bmi.n	80095d4 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800955c:	039a      	lsls	r2, r3, #14
 800955e:	d436      	bmi.n	80095ce <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009560:	03d9      	lsls	r1, r3, #15
 8009562:	d446      	bmi.n	80095f2 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009564:	041a      	lsls	r2, r3, #16
 8009566:	d441      	bmi.n	80095ec <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009568:	0459      	lsls	r1, r3, #17
 800956a:	d43c      	bmi.n	80095e6 <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800956c:	049a      	lsls	r2, r3, #18
 800956e:	d40b      	bmi.n	8009588 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009570:	f013 0f08 	tst.w	r3, #8
 8009574:	bf14      	ite	ne
 8009576:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800957a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800957e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009580:	2301      	movs	r3, #1
 8009582:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009586:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009588:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800958c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800958e:	2001      	movs	r0, #1
 8009590:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009592:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009594:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009596:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800959a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800959c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80095a0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095a2:	2040      	movs	r0, #64	; 0x40
 80095a4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095a6:	2080      	movs	r0, #128	; 0x80
 80095a8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80095ae:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80095b4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80095b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80095ba:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80095c0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80095c6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80095cc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80095ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80095d2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80095d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80095d8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80095da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80095de:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80095e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80095e4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80095e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80095ea:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80095ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80095f0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80095f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80095f6:	4770      	bx	lr
 80095f8:	2400001c 	.word	0x2400001c
 80095fc:	10624dd3 	.word	0x10624dd3
 8009600:	fffee0c0 	.word	0xfffee0c0
 8009604:	00200045 	.word	0x00200045
 8009608:	002000c5 	.word	0x002000c5
 800960c:	fdffe008 	.word	0xfdffe008

08009610 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009610:	4a50      	ldr	r2, [pc, #320]	; (8009754 <SDMMC_CmdReadSingleBlock+0x144>)
{
 8009612:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009614:	4b50      	ldr	r3, [pc, #320]	; (8009758 <SDMMC_CmdReadSingleBlock+0x148>)
 8009616:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009618:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800961c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009620:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009624:	484d      	ldr	r0, [pc, #308]	; (800975c <SDMMC_CmdReadSingleBlock+0x14c>)
 8009626:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800962a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800962c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800962e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009632:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009634:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009638:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800963c:	1e53      	subs	r3, r2, #1
 800963e:	b14a      	cbz	r2, 8009654 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009640:	4947      	ldr	r1, [pc, #284]	; (8009760 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 8009642:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8009646:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009648:	420a      	tst	r2, r1
 800964a:	d001      	beq.n	8009650 <SDMMC_CmdReadSingleBlock+0x40>
 800964c:	0492      	lsls	r2, r2, #18
 800964e:	d504      	bpl.n	800965a <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 8009650:	1c58      	adds	r0, r3, #1
 8009652:	d1f6      	bne.n	8009642 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009654:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009658:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800965a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800965e:	0758      	lsls	r0, r3, #29
 8009660:	d445      	bmi.n	80096ee <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009662:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8009666:	f010 0001 	ands.w	r0, r0, #1
 800966a:	d137      	bne.n	80096dc <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800966c:	4b3d      	ldr	r3, [pc, #244]	; (8009764 <SDMMC_CmdReadSingleBlock+0x154>)
 800966e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009672:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b11      	cmp	r3, #17
 800967a:	d136      	bne.n	80096ea <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800967c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009680:	4839      	ldr	r0, [pc, #228]	; (8009768 <SDMMC_CmdReadSingleBlock+0x158>)
 8009682:	4018      	ands	r0, r3
 8009684:	2800      	cmp	r0, #0
 8009686:	d02f      	beq.n	80096e8 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009688:	2b00      	cmp	r3, #0
 800968a:	db35      	blt.n	80096f8 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800968c:	0059      	lsls	r1, r3, #1
 800968e:	d436      	bmi.n	80096fe <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009690:	009a      	lsls	r2, r3, #2
 8009692:	d436      	bmi.n	8009702 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009694:	00d9      	lsls	r1, r3, #3
 8009696:	d436      	bmi.n	8009706 <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009698:	011a      	lsls	r2, r3, #4
 800969a:	d437      	bmi.n	800970c <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800969c:	0159      	lsls	r1, r3, #5
 800969e:	d438      	bmi.n	8009712 <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80096a0:	01da      	lsls	r2, r3, #7
 80096a2:	d439      	bmi.n	8009718 <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096a4:	0219      	lsls	r1, r3, #8
 80096a6:	d43a      	bmi.n	800971e <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096a8:	025a      	lsls	r2, r3, #9
 80096aa:	d43b      	bmi.n	8009724 <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80096ac:	0299      	lsls	r1, r3, #10
 80096ae:	d445      	bmi.n	800973c <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80096b0:	02da      	lsls	r2, r3, #11
 80096b2:	d440      	bmi.n	8009736 <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80096b4:	0359      	lsls	r1, r3, #13
 80096b6:	d43b      	bmi.n	8009730 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80096b8:	039a      	lsls	r2, r3, #14
 80096ba:	d436      	bmi.n	800972a <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80096bc:	03d9      	lsls	r1, r3, #15
 80096be:	d446      	bmi.n	800974e <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80096c0:	041a      	lsls	r2, r3, #16
 80096c2:	d441      	bmi.n	8009748 <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80096c4:	0459      	lsls	r1, r3, #17
 80096c6:	d43c      	bmi.n	8009742 <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80096c8:	049a      	lsls	r2, r3, #18
 80096ca:	d40b      	bmi.n	80096e4 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096cc:	f013 0f08 	tst.w	r3, #8
 80096d0:	bf14      	ite	ne
 80096d2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80096d6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80096da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096dc:	2301      	movs	r3, #1
 80096de:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096e2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80096e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80096e8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096ea:	2001      	movs	r0, #1
 80096ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096ee:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096f0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096f2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096f6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80096f8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80096fc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80096fe:	2040      	movs	r0, #64	; 0x40
 8009700:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009702:	2080      	movs	r0, #128	; 0x80
 8009704:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009706:	f44f 7080 	mov.w	r0, #256	; 0x100
 800970a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800970c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009710:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009712:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009716:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009718:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800971c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800971e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009722:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009724:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009728:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800972a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800972e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009730:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009734:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009736:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800973a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800973c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009740:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009742:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009746:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009748:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800974c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800974e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009752:	4770      	bx	lr
 8009754:	2400001c 	.word	0x2400001c
 8009758:	10624dd3 	.word	0x10624dd3
 800975c:	fffee0c0 	.word	0xfffee0c0
 8009760:	00200045 	.word	0x00200045
 8009764:	002000c5 	.word	0x002000c5
 8009768:	fdffe008 	.word	0xfdffe008

0800976c <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800976c:	4a50      	ldr	r2, [pc, #320]	; (80098b0 <SDMMC_CmdReadMultiBlock+0x144>)
{
 800976e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009770:	4b50      	ldr	r3, [pc, #320]	; (80098b4 <SDMMC_CmdReadMultiBlock+0x148>)
 8009772:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009774:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009778:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800977c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009780:	484d      	ldr	r0, [pc, #308]	; (80098b8 <SDMMC_CmdReadMultiBlock+0x14c>)
 8009782:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009786:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009788:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800978a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800978e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009790:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009794:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009798:	1e53      	subs	r3, r2, #1
 800979a:	b14a      	cbz	r2, 80097b0 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800979c:	4947      	ldr	r1, [pc, #284]	; (80098bc <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800979e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 80097a2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80097a4:	420a      	tst	r2, r1
 80097a6:	d001      	beq.n	80097ac <SDMMC_CmdReadMultiBlock+0x40>
 80097a8:	0492      	lsls	r2, r2, #18
 80097aa:	d504      	bpl.n	80097b6 <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 80097ac:	1c58      	adds	r0, r3, #1
 80097ae:	d1f6      	bne.n	800979e <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80097b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80097b4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097b6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 80097ba:	0758      	lsls	r0, r3, #29
 80097bc:	d445      	bmi.n	800984a <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097be:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 80097c2:	f010 0001 	ands.w	r0, r0, #1
 80097c6:	d137      	bne.n	8009838 <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097c8:	4b3d      	ldr	r3, [pc, #244]	; (80098c0 <SDMMC_CmdReadMultiBlock+0x154>)
 80097ca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80097ce:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b12      	cmp	r3, #18
 80097d6:	d136      	bne.n	8009846 <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 80097d8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80097dc:	4839      	ldr	r0, [pc, #228]	; (80098c4 <SDMMC_CmdReadMultiBlock+0x158>)
 80097de:	4018      	ands	r0, r3
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d02f      	beq.n	8009844 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	db35      	blt.n	8009854 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80097e8:	0059      	lsls	r1, r3, #1
 80097ea:	d436      	bmi.n	800985a <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80097ec:	009a      	lsls	r2, r3, #2
 80097ee:	d436      	bmi.n	800985e <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80097f0:	00d9      	lsls	r1, r3, #3
 80097f2:	d436      	bmi.n	8009862 <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80097f4:	011a      	lsls	r2, r3, #4
 80097f6:	d437      	bmi.n	8009868 <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80097f8:	0159      	lsls	r1, r3, #5
 80097fa:	d438      	bmi.n	800986e <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80097fc:	01da      	lsls	r2, r3, #7
 80097fe:	d439      	bmi.n	8009874 <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009800:	0219      	lsls	r1, r3, #8
 8009802:	d43a      	bmi.n	800987a <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009804:	025a      	lsls	r2, r3, #9
 8009806:	d43b      	bmi.n	8009880 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009808:	0299      	lsls	r1, r3, #10
 800980a:	d445      	bmi.n	8009898 <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800980c:	02da      	lsls	r2, r3, #11
 800980e:	d440      	bmi.n	8009892 <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009810:	0359      	lsls	r1, r3, #13
 8009812:	d43b      	bmi.n	800988c <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009814:	039a      	lsls	r2, r3, #14
 8009816:	d436      	bmi.n	8009886 <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009818:	03d9      	lsls	r1, r3, #15
 800981a:	d446      	bmi.n	80098aa <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800981c:	041a      	lsls	r2, r3, #16
 800981e:	d441      	bmi.n	80098a4 <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009820:	0459      	lsls	r1, r3, #17
 8009822:	d43c      	bmi.n	800989e <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009824:	049a      	lsls	r2, r3, #18
 8009826:	d40b      	bmi.n	8009840 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009828:	f013 0f08 	tst.w	r3, #8
 800982c:	bf14      	ite	ne
 800982e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8009832:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009836:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009838:	2301      	movs	r3, #1
 800983a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800983e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009840:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8009844:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009846:	2001      	movs	r0, #1
 8009848:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800984a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800984c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800984e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009852:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009854:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009858:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800985a:	2040      	movs	r0, #64	; 0x40
 800985c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800985e:	2080      	movs	r0, #128	; 0x80
 8009860:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009862:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009866:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009868:	f44f 7000 	mov.w	r0, #512	; 0x200
 800986c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800986e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009872:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009874:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009878:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800987a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800987e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009880:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009884:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009886:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800988a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800988c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009890:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009892:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009896:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009898:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800989c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800989e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80098a2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80098a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80098a8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80098aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80098ae:	4770      	bx	lr
 80098b0:	2400001c 	.word	0x2400001c
 80098b4:	10624dd3 	.word	0x10624dd3
 80098b8:	fffee0c0 	.word	0xfffee0c0
 80098bc:	00200045 	.word	0x00200045
 80098c0:	002000c5 	.word	0x002000c5
 80098c4:	fdffe008 	.word	0xfdffe008

080098c8 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098c8:	4a50      	ldr	r2, [pc, #320]	; (8009a0c <SDMMC_CmdWriteSingleBlock+0x144>)
{
 80098ca:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098cc:	4b50      	ldr	r3, [pc, #320]	; (8009a10 <SDMMC_CmdWriteSingleBlock+0x148>)
 80098ce:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80098d0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098d4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098d8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80098dc:	484d      	ldr	r0, [pc, #308]	; (8009a14 <SDMMC_CmdWriteSingleBlock+0x14c>)
 80098de:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098e2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098e4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098e6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098ea:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098ec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098f0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80098f4:	1e53      	subs	r3, r2, #1
 80098f6:	b14a      	cbz	r2, 800990c <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80098f8:	4947      	ldr	r1, [pc, #284]	; (8009a18 <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 80098fa:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 80098fe:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009900:	420a      	tst	r2, r1
 8009902:	d001      	beq.n	8009908 <SDMMC_CmdWriteSingleBlock+0x40>
 8009904:	0492      	lsls	r2, r2, #18
 8009906:	d504      	bpl.n	8009912 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 8009908:	1c58      	adds	r0, r3, #1
 800990a:	d1f6      	bne.n	80098fa <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800990c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009910:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009912:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8009916:	0758      	lsls	r0, r3, #29
 8009918:	d445      	bmi.n	80099a6 <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800991a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800991e:	f010 0001 	ands.w	r0, r0, #1
 8009922:	d137      	bne.n	8009994 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009924:	4b3d      	ldr	r3, [pc, #244]	; (8009a1c <SDMMC_CmdWriteSingleBlock+0x154>)
 8009926:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800992a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b18      	cmp	r3, #24
 8009932:	d136      	bne.n	80099a2 <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 8009934:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009938:	4839      	ldr	r0, [pc, #228]	; (8009a20 <SDMMC_CmdWriteSingleBlock+0x158>)
 800993a:	4018      	ands	r0, r3
 800993c:	2800      	cmp	r0, #0
 800993e:	d02f      	beq.n	80099a0 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009940:	2b00      	cmp	r3, #0
 8009942:	db35      	blt.n	80099b0 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009944:	0059      	lsls	r1, r3, #1
 8009946:	d436      	bmi.n	80099b6 <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009948:	009a      	lsls	r2, r3, #2
 800994a:	d436      	bmi.n	80099ba <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800994c:	00d9      	lsls	r1, r3, #3
 800994e:	d436      	bmi.n	80099be <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009950:	011a      	lsls	r2, r3, #4
 8009952:	d437      	bmi.n	80099c4 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009954:	0159      	lsls	r1, r3, #5
 8009956:	d438      	bmi.n	80099ca <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009958:	01da      	lsls	r2, r3, #7
 800995a:	d439      	bmi.n	80099d0 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800995c:	0219      	lsls	r1, r3, #8
 800995e:	d43a      	bmi.n	80099d6 <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009960:	025a      	lsls	r2, r3, #9
 8009962:	d43b      	bmi.n	80099dc <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009964:	0299      	lsls	r1, r3, #10
 8009966:	d445      	bmi.n	80099f4 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009968:	02da      	lsls	r2, r3, #11
 800996a:	d440      	bmi.n	80099ee <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800996c:	0359      	lsls	r1, r3, #13
 800996e:	d43b      	bmi.n	80099e8 <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009970:	039a      	lsls	r2, r3, #14
 8009972:	d436      	bmi.n	80099e2 <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009974:	03d9      	lsls	r1, r3, #15
 8009976:	d446      	bmi.n	8009a06 <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009978:	041a      	lsls	r2, r3, #16
 800997a:	d441      	bmi.n	8009a00 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800997c:	0459      	lsls	r1, r3, #17
 800997e:	d43c      	bmi.n	80099fa <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009980:	049a      	lsls	r2, r3, #18
 8009982:	d40b      	bmi.n	800999c <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009984:	f013 0f08 	tst.w	r3, #8
 8009988:	bf14      	ite	ne
 800998a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800998e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009992:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009994:	2301      	movs	r3, #1
 8009996:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800999a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800999c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80099a0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099a2:	2001      	movs	r0, #1
 80099a4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099a6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099a8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099ae:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80099b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80099b4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80099b6:	2040      	movs	r0, #64	; 0x40
 80099b8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80099ba:	2080      	movs	r0, #128	; 0x80
 80099bc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80099be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80099c2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80099c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80099c8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80099ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80099ce:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80099d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80099d4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80099d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80099da:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80099dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80099e0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80099e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80099e6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80099e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80099ec:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80099ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80099f2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80099f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80099f8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80099fe:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009a04:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a06:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009a0a:	4770      	bx	lr
 8009a0c:	2400001c 	.word	0x2400001c
 8009a10:	10624dd3 	.word	0x10624dd3
 8009a14:	fffee0c0 	.word	0xfffee0c0
 8009a18:	00200045 	.word	0x00200045
 8009a1c:	002000c5 	.word	0x002000c5
 8009a20:	fdffe008 	.word	0xfdffe008

08009a24 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a24:	4a50      	ldr	r2, [pc, #320]	; (8009b68 <SDMMC_CmdWriteMultiBlock+0x144>)
{
 8009a26:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a28:	4b50      	ldr	r3, [pc, #320]	; (8009b6c <SDMMC_CmdWriteMultiBlock+0x148>)
 8009a2a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009a2c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a30:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a34:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009a38:	484d      	ldr	r0, [pc, #308]	; (8009b70 <SDMMC_CmdWriteMultiBlock+0x14c>)
 8009a3a:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a3e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a40:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a42:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a46:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a48:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a4c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009a50:	1e53      	subs	r3, r2, #1
 8009a52:	b14a      	cbz	r2, 8009a68 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009a54:	4947      	ldr	r1, [pc, #284]	; (8009b74 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 8009a56:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8009a5a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a5c:	420a      	tst	r2, r1
 8009a5e:	d001      	beq.n	8009a64 <SDMMC_CmdWriteMultiBlock+0x40>
 8009a60:	0492      	lsls	r2, r2, #18
 8009a62:	d504      	bpl.n	8009a6e <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 8009a64:	1c58      	adds	r0, r3, #1
 8009a66:	d1f6      	bne.n	8009a56 <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009a68:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009a6c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a6e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8009a72:	0758      	lsls	r0, r3, #29
 8009a74:	d445      	bmi.n	8009b02 <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a76:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8009a7a:	f010 0001 	ands.w	r0, r0, #1
 8009a7e:	d137      	bne.n	8009af0 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a80:	4b3d      	ldr	r3, [pc, #244]	; (8009b78 <SDMMC_CmdWriteMultiBlock+0x154>)
 8009a82:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a86:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b19      	cmp	r3, #25
 8009a8e:	d136      	bne.n	8009afe <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 8009a90:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009a94:	4839      	ldr	r0, [pc, #228]	; (8009b7c <SDMMC_CmdWriteMultiBlock+0x158>)
 8009a96:	4018      	ands	r0, r3
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d02f      	beq.n	8009afc <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	db35      	blt.n	8009b0c <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009aa0:	0059      	lsls	r1, r3, #1
 8009aa2:	d436      	bmi.n	8009b12 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009aa4:	009a      	lsls	r2, r3, #2
 8009aa6:	d436      	bmi.n	8009b16 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009aa8:	00d9      	lsls	r1, r3, #3
 8009aaa:	d436      	bmi.n	8009b1a <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009aac:	011a      	lsls	r2, r3, #4
 8009aae:	d437      	bmi.n	8009b20 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ab0:	0159      	lsls	r1, r3, #5
 8009ab2:	d438      	bmi.n	8009b26 <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ab4:	01da      	lsls	r2, r3, #7
 8009ab6:	d439      	bmi.n	8009b2c <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ab8:	0219      	lsls	r1, r3, #8
 8009aba:	d43a      	bmi.n	8009b32 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009abc:	025a      	lsls	r2, r3, #9
 8009abe:	d43b      	bmi.n	8009b38 <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ac0:	0299      	lsls	r1, r3, #10
 8009ac2:	d445      	bmi.n	8009b50 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ac4:	02da      	lsls	r2, r3, #11
 8009ac6:	d440      	bmi.n	8009b4a <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ac8:	0359      	lsls	r1, r3, #13
 8009aca:	d43b      	bmi.n	8009b44 <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009acc:	039a      	lsls	r2, r3, #14
 8009ace:	d436      	bmi.n	8009b3e <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009ad0:	03d9      	lsls	r1, r3, #15
 8009ad2:	d446      	bmi.n	8009b62 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009ad4:	041a      	lsls	r2, r3, #16
 8009ad6:	d441      	bmi.n	8009b5c <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009ad8:	0459      	lsls	r1, r3, #17
 8009ada:	d43c      	bmi.n	8009b56 <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009adc:	049a      	lsls	r2, r3, #18
 8009ade:	d40b      	bmi.n	8009af8 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ae0:	f013 0f08 	tst.w	r3, #8
 8009ae4:	bf14      	ite	ne
 8009ae6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8009aea:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009aee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009af0:	2301      	movs	r3, #1
 8009af2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009af6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009af8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8009afc:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009afe:	2001      	movs	r0, #1
 8009b00:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b02:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b04:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b06:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b0a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009b0c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009b10:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009b12:	2040      	movs	r0, #64	; 0x40
 8009b14:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009b16:	2080      	movs	r0, #128	; 0x80
 8009b18:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009b1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b1e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009b20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b24:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009b26:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009b2a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009b2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009b30:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009b36:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009b3c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009b3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009b42:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009b44:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009b48:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009b4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b4e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009b50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009b54:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009b56:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009b5a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009b5c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009b60:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009b62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009b66:	4770      	bx	lr
 8009b68:	2400001c 	.word	0x2400001c
 8009b6c:	10624dd3 	.word	0x10624dd3
 8009b70:	fffee0c0 	.word	0xfffee0c0
 8009b74:	00200045 	.word	0x00200045
 8009b78:	002000c5 	.word	0x002000c5
 8009b7c:	fdffe008 	.word	0xfdffe008

08009b80 <SDMMC_CmdStopTransfer>:
{
 8009b80:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b82:	4b7c      	ldr	r3, [pc, #496]	; (8009d74 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009b84:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b86:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009b88:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b8c:	4b7a      	ldr	r3, [pc, #488]	; (8009d78 <SDMMC_CmdStopTransfer+0x1f8>)
{
 8009b8e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b90:	4c7a      	ldr	r4, [pc, #488]	; (8009d7c <SDMMC_CmdStopTransfer+0x1fc>)
  SDMMCx->ARG = Command->Argument;
 8009b92:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009b94:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b96:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009b9a:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b9c:	4c78      	ldr	r4, [pc, #480]	; (8009d80 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009b9e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ba2:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009ba4:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ba6:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 8009baa:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bac:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009bb0:	68cc      	ldr	r4, [r1, #12]
 8009bb2:	4023      	ands	r3, r4
 8009bb4:	4318      	orrs	r0, r3
 8009bb6:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8009bb8:	b14a      	cbz	r2, 8009bce <SDMMC_CmdStopTransfer+0x4e>
 8009bba:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009bbc:	4871      	ldr	r0, [pc, #452]	; (8009d84 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
 8009bbe:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8009bc0:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009bc2:	4202      	tst	r2, r0
 8009bc4:	d001      	beq.n	8009bca <SDMMC_CmdStopTransfer+0x4a>
 8009bc6:	0492      	lsls	r2, r2, #18
 8009bc8:	d509      	bpl.n	8009bde <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8009bca:	1c5c      	adds	r4, r3, #1
 8009bcc:	d1f7      	bne.n	8009bbe <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bce:	68cb      	ldr	r3, [r1, #12]
 8009bd0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd8:	60cb      	str	r3, [r1, #12]
}
 8009bda:	bc30      	pop	{r4, r5}
 8009bdc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bde:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009be0:	075b      	lsls	r3, r3, #29
 8009be2:	d452      	bmi.n	8009c8a <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009be4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8009be6:	f010 0001 	ands.w	r0, r0, #1
 8009bea:	d13b      	bne.n	8009c64 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009bec:	4b66      	ldr	r3, [pc, #408]	; (8009d88 <SDMMC_CmdStopTransfer+0x208>)
 8009bee:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009bf0:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b0c      	cmp	r3, #12
 8009bf6:	d142      	bne.n	8009c7e <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
 8009bf8:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009bfa:	4a64      	ldr	r2, [pc, #400]	; (8009d8c <SDMMC_CmdStopTransfer+0x20c>)
 8009bfc:	401a      	ands	r2, r3
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	d037      	beq.n	8009c72 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	db35      	blt.n	8009c72 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c06:	005d      	lsls	r5, r3, #1
 8009c08:	d446      	bmi.n	8009c98 <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c0a:	009c      	lsls	r4, r3, #2
 8009c0c:	d44a      	bmi.n	8009ca4 <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c0e:	00d8      	lsls	r0, r3, #3
 8009c10:	d44e      	bmi.n	8009cb0 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c12:	011a      	lsls	r2, r3, #4
 8009c14:	d453      	bmi.n	8009cbe <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c16:	015d      	lsls	r5, r3, #5
 8009c18:	d458      	bmi.n	8009ccc <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c1a:	01dc      	lsls	r4, r3, #7
 8009c1c:	d464      	bmi.n	8009ce8 <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c1e:	0218      	lsls	r0, r3, #8
 8009c20:	d45b      	bmi.n	8009cda <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c22:	025a      	lsls	r2, r3, #9
 8009c24:	d46e      	bmi.n	8009d04 <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c26:	029d      	lsls	r5, r3, #10
 8009c28:	d465      	bmi.n	8009cf6 <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c2a:	02dc      	lsls	r4, r3, #11
 8009c2c:	d47f      	bmi.n	8009d2e <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c2e:	0358      	lsls	r0, r3, #13
 8009c30:	d476      	bmi.n	8009d20 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c32:	039a      	lsls	r2, r3, #14
 8009c34:	d46d      	bmi.n	8009d12 <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c36:	03dd      	lsls	r5, r3, #15
 8009c38:	f100 8095 	bmi.w	8009d66 <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c3c:	041c      	lsls	r4, r3, #16
 8009c3e:	f100 8084 	bmi.w	8009d4a <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c42:	0458      	lsls	r0, r3, #17
 8009c44:	d47a      	bmi.n	8009d3c <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c46:	049a      	lsls	r2, r3, #18
 8009c48:	f100 8086 	bmi.w	8009d58 <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009c4c:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c50:	68cb      	ldr	r3, [r1, #12]
 8009c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c56:	bf14      	ite	ne
 8009c58:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c5c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c60:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c62:	e7ba      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c64:	2301      	movs	r3, #1
 8009c66:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c68:	68cb      	ldr	r3, [r1, #12]
 8009c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c6e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c70:	e7b3      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c72:	68cb      	ldr	r3, [r1, #12]
 8009c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 8009c78:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c7a:	60cb      	str	r3, [r1, #12]
}
 8009c7c:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c7e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c80:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c86:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c88:	e7a7      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c8a:	2004      	movs	r0, #4
 8009c8c:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c8e:	68cb      	ldr	r3, [r1, #12]
 8009c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c94:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c96:	e7a0      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c98:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c9a:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ca0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ca2:	e79a      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ca4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ca6:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cac:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cae:	e794      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cb0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009cb2:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cba:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cbc:	e78d      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cbe:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009cc0:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cc8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cca:	e786      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ccc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009cce:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cd6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cd8:	e77f      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cda:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009cdc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ce4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ce6:	e778      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ce8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009cea:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cf2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cf4:	e771      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cf6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009cf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d00:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d02:	e76a      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d04:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d0e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d10:	e763      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d12:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d14:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d1c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d1e:	e75c      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d20:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d2a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d2c:	e755      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d2e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 8009d30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d38:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d3a:	e74e      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d3c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009d3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d46:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d48:	e747      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d4a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009d4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d54:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d56:	e740      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d58:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 8009d5a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d62:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d64:	e739      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d66:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009d68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d70:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009d72:	e732      	b.n	8009bda <SDMMC_CmdStopTransfer+0x5a>
 8009d74:	2400001c 	.word	0x2400001c
 8009d78:	fffee0c0 	.word	0xfffee0c0
 8009d7c:	10624dd3 	.word	0x10624dd3
 8009d80:	05f5e100 	.word	0x05f5e100
 8009d84:	00200045 	.word	0x00200045
 8009d88:	002000c5 	.word	0x002000c5
 8009d8c:	fdffe008 	.word	0xfdffe008

08009d90 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009d90:	4a50      	ldr	r2, [pc, #320]	; (8009ed4 <SDMMC_CmdSelDesel+0x144>)
{
 8009d92:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009d94:	4b50      	ldr	r3, [pc, #320]	; (8009ed8 <SDMMC_CmdSelDesel+0x148>)
 8009d96:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009d98:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009d9c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009da0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009da4:	484d      	ldr	r0, [pc, #308]	; (8009edc <SDMMC_CmdSelDesel+0x14c>)
 8009da6:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009daa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009dac:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dae:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009db2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009db4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009db8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009dbc:	1e53      	subs	r3, r2, #1
 8009dbe:	b14a      	cbz	r2, 8009dd4 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009dc0:	4947      	ldr	r1, [pc, #284]	; (8009ee0 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
 8009dc2:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8009dc6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009dc8:	420a      	tst	r2, r1
 8009dca:	d001      	beq.n	8009dd0 <SDMMC_CmdSelDesel+0x40>
 8009dcc:	0492      	lsls	r2, r2, #18
 8009dce:	d504      	bpl.n	8009dda <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 8009dd0:	1c58      	adds	r0, r3, #1
 8009dd2:	d1f6      	bne.n	8009dc2 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009dd4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009dd8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009dda:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8009dde:	0758      	lsls	r0, r3, #29
 8009de0:	d445      	bmi.n	8009e6e <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009de2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8009de6:	f010 0001 	ands.w	r0, r0, #1
 8009dea:	d137      	bne.n	8009e5c <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009dec:	4b3d      	ldr	r3, [pc, #244]	; (8009ee4 <SDMMC_CmdSelDesel+0x154>)
 8009dee:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009df2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b07      	cmp	r3, #7
 8009dfa:	d136      	bne.n	8009e6a <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
 8009dfc:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e00:	4839      	ldr	r0, [pc, #228]	; (8009ee8 <SDMMC_CmdSelDesel+0x158>)
 8009e02:	4018      	ands	r0, r3
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d02f      	beq.n	8009e68 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	db35      	blt.n	8009e78 <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e0c:	0059      	lsls	r1, r3, #1
 8009e0e:	d436      	bmi.n	8009e7e <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e10:	009a      	lsls	r2, r3, #2
 8009e12:	d436      	bmi.n	8009e82 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e14:	00d9      	lsls	r1, r3, #3
 8009e16:	d436      	bmi.n	8009e86 <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e18:	011a      	lsls	r2, r3, #4
 8009e1a:	d437      	bmi.n	8009e8c <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e1c:	0159      	lsls	r1, r3, #5
 8009e1e:	d438      	bmi.n	8009e92 <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009e20:	01da      	lsls	r2, r3, #7
 8009e22:	d439      	bmi.n	8009e98 <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009e24:	0219      	lsls	r1, r3, #8
 8009e26:	d43a      	bmi.n	8009e9e <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009e28:	025a      	lsls	r2, r3, #9
 8009e2a:	d43b      	bmi.n	8009ea4 <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009e2c:	0299      	lsls	r1, r3, #10
 8009e2e:	d445      	bmi.n	8009ebc <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009e30:	02da      	lsls	r2, r3, #11
 8009e32:	d440      	bmi.n	8009eb6 <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e34:	0359      	lsls	r1, r3, #13
 8009e36:	d43b      	bmi.n	8009eb0 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e38:	039a      	lsls	r2, r3, #14
 8009e3a:	d436      	bmi.n	8009eaa <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e3c:	03d9      	lsls	r1, r3, #15
 8009e3e:	d446      	bmi.n	8009ece <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e40:	041a      	lsls	r2, r3, #16
 8009e42:	d441      	bmi.n	8009ec8 <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e44:	0459      	lsls	r1, r3, #17
 8009e46:	d43c      	bmi.n	8009ec2 <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e48:	049a      	lsls	r2, r3, #18
 8009e4a:	d40b      	bmi.n	8009e64 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e4c:	f013 0f08 	tst.w	r3, #8
 8009e50:	bf14      	ite	ne
 8009e52:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8009e56:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009e5a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e62:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009e64:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8009e68:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e6a:	2001      	movs	r0, #1
 8009e6c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e6e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e70:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e72:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e76:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e78:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009e7c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e7e:	2040      	movs	r0, #64	; 0x40
 8009e80:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e82:	2080      	movs	r0, #128	; 0x80
 8009e84:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009e8a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009e90:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009e92:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009e96:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009e98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009e9c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009ea2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ea4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009ea8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009eaa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009eae:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009eb0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009eb4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009eb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009eba:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ebc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009ec0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009ec2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009ec6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009ec8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009ecc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009ece:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009ed2:	4770      	bx	lr
 8009ed4:	2400001c 	.word	0x2400001c
 8009ed8:	10624dd3 	.word	0x10624dd3
 8009edc:	fffee0c0 	.word	0xfffee0c0
 8009ee0:	00200045 	.word	0x00200045
 8009ee4:	002000c5 	.word	0x002000c5
 8009ee8:	fdffe008 	.word	0xfdffe008

08009eec <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009eec:	4b11      	ldr	r3, [pc, #68]	; (8009f34 <SDMMC_CmdGoIdleState+0x48>)
{
 8009eee:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ef0:	4a11      	ldr	r2, [pc, #68]	; (8009f38 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ef2:	681b      	ldr	r3, [r3, #0]
{
 8009ef4:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ef6:	4c11      	ldr	r4, [pc, #68]	; (8009f3c <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8009ef8:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009efa:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 8009efe:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f00:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f02:	0a5b      	lsrs	r3, r3, #9
 8009f04:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f08:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f0a:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f12:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f14:	e002      	b.n	8009f1c <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009f16:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8009f18:	0612      	lsls	r2, r2, #24
 8009f1a:	d405      	bmi.n	8009f28 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	d2fa      	bcs.n	8009f16 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8009f20:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009f24:	bc30      	pop	{r4, r5}
 8009f26:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f28:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 8009f2a:	2000      	movs	r0, #0
}
 8009f2c:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f2e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	2400001c 	.word	0x2400001c
 8009f38:	fffee0c0 	.word	0xfffee0c0
 8009f3c:	10624dd3 	.word	0x10624dd3
 8009f40:	002000c5 	.word	0x002000c5

08009f44 <SDMMC_CmdOperCond>:
{
 8009f44:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f46:	4a1c      	ldr	r2, [pc, #112]	; (8009fb8 <SDMMC_CmdOperCond+0x74>)
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <SDMMC_CmdOperCond+0x78>)
 8009f4a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f4c:	481c      	ldr	r0, [pc, #112]	; (8009fc0 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f4e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f52:	f241 1308 	movw	r3, #4360	; 0x1108
{
 8009f56:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8009f58:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f5c:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 8009f5e:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f60:	68cc      	ldr	r4, [r1, #12]
 8009f62:	4020      	ands	r0, r4
 8009f64:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f66:	f241 3088 	movw	r0, #5000	; 0x1388
 8009f6a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f6e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8009f70:	b14a      	cbz	r2, 8009f86 <SDMMC_CmdOperCond+0x42>
 8009f72:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8009f74:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8009f76:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f78:	f012 0f45 	tst.w	r2, #69	; 0x45
 8009f7c:	d001      	beq.n	8009f82 <SDMMC_CmdOperCond+0x3e>
 8009f7e:	0490      	lsls	r0, r2, #18
 8009f80:	d506      	bpl.n	8009f90 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 8009f82:	1c5c      	adds	r4, r3, #1
 8009f84:	d1f6      	bne.n	8009f74 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009f86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f8e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009f92:	075a      	lsls	r2, r3, #29
 8009f94:	d40c      	bmi.n	8009fb0 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f96:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8009f98:	f010 0001 	ands.w	r0, r0, #1
 8009f9c:	d105      	bne.n	8009faa <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009f9e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009fa0:	065b      	lsls	r3, r3, #25
 8009fa2:	d5f2      	bpl.n	8009f8a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009fa4:	2340      	movs	r3, #64	; 0x40
 8009fa6:	638b      	str	r3, [r1, #56]	; 0x38
 8009fa8:	e7ef      	b.n	8009f8a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009faa:	2301      	movs	r3, #1
 8009fac:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fae:	e7ec      	b.n	8009f8a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fb0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fb2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fb4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fb6:	e7e8      	b.n	8009f8a <SDMMC_CmdOperCond+0x46>
 8009fb8:	2400001c 	.word	0x2400001c
 8009fbc:	10624dd3 	.word	0x10624dd3
 8009fc0:	fffee0c0 	.word	0xfffee0c0

08009fc4 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fc4:	4a50      	ldr	r2, [pc, #320]	; (800a108 <SDMMC_CmdAppCommand+0x144>)
{
 8009fc6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fc8:	4b50      	ldr	r3, [pc, #320]	; (800a10c <SDMMC_CmdAppCommand+0x148>)
 8009fca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009fcc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fd0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fd4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009fd8:	484d      	ldr	r0, [pc, #308]	; (800a110 <SDMMC_CmdAppCommand+0x14c>)
 8009fda:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fde:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fe0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fe2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fe6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fe8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009ff0:	1e53      	subs	r3, r2, #1
 8009ff2:	b14a      	cbz	r2, 800a008 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009ff4:	4947      	ldr	r1, [pc, #284]	; (800a114 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
 8009ff6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8009ffa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ffc:	420a      	tst	r2, r1
 8009ffe:	d001      	beq.n	800a004 <SDMMC_CmdAppCommand+0x40>
 800a000:	0492      	lsls	r2, r2, #18
 800a002:	d504      	bpl.n	800a00e <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800a004:	1c58      	adds	r0, r3, #1
 800a006:	d1f6      	bne.n	8009ff6 <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a008:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a00c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a00e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a012:	0758      	lsls	r0, r3, #29
 800a014:	d445      	bmi.n	800a0a2 <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a016:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a01a:	f010 0001 	ands.w	r0, r0, #1
 800a01e:	d137      	bne.n	800a090 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a020:	4b3d      	ldr	r3, [pc, #244]	; (800a118 <SDMMC_CmdAppCommand+0x154>)
 800a022:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a026:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b37      	cmp	r3, #55	; 0x37
 800a02e:	d136      	bne.n	800a09e <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 800a030:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a034:	4839      	ldr	r0, [pc, #228]	; (800a11c <SDMMC_CmdAppCommand+0x158>)
 800a036:	4018      	ands	r0, r3
 800a038:	2800      	cmp	r0, #0
 800a03a:	d02f      	beq.n	800a09c <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	db35      	blt.n	800a0ac <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a040:	0059      	lsls	r1, r3, #1
 800a042:	d436      	bmi.n	800a0b2 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a044:	009a      	lsls	r2, r3, #2
 800a046:	d436      	bmi.n	800a0b6 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a048:	00d9      	lsls	r1, r3, #3
 800a04a:	d436      	bmi.n	800a0ba <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a04c:	011a      	lsls	r2, r3, #4
 800a04e:	d437      	bmi.n	800a0c0 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a050:	0159      	lsls	r1, r3, #5
 800a052:	d438      	bmi.n	800a0c6 <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a054:	01da      	lsls	r2, r3, #7
 800a056:	d439      	bmi.n	800a0cc <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a058:	0219      	lsls	r1, r3, #8
 800a05a:	d43a      	bmi.n	800a0d2 <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a05c:	025a      	lsls	r2, r3, #9
 800a05e:	d43b      	bmi.n	800a0d8 <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a060:	0299      	lsls	r1, r3, #10
 800a062:	d445      	bmi.n	800a0f0 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a064:	02da      	lsls	r2, r3, #11
 800a066:	d440      	bmi.n	800a0ea <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a068:	0359      	lsls	r1, r3, #13
 800a06a:	d43b      	bmi.n	800a0e4 <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a06c:	039a      	lsls	r2, r3, #14
 800a06e:	d436      	bmi.n	800a0de <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a070:	03d9      	lsls	r1, r3, #15
 800a072:	d446      	bmi.n	800a102 <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a074:	041a      	lsls	r2, r3, #16
 800a076:	d441      	bmi.n	800a0fc <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a078:	0459      	lsls	r1, r3, #17
 800a07a:	d43c      	bmi.n	800a0f6 <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a07c:	049a      	lsls	r2, r3, #18
 800a07e:	d40b      	bmi.n	800a098 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a080:	f013 0f08 	tst.w	r3, #8
 800a084:	bf14      	ite	ne
 800a086:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a08a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a08e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a090:	2301      	movs	r3, #1
 800a092:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a096:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a098:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800a09c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a09e:	2001      	movs	r0, #1
 800a0a0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0a2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0a4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0aa:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0ac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a0b0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0b2:	2040      	movs	r0, #64	; 0x40
 800a0b4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0b6:	2080      	movs	r0, #128	; 0x80
 800a0b8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a0be:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a0c4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a0ca:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a0d0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a0d6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a0dc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a0de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a0e2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a0e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a0e8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a0ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a0ee:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a0f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a0f4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a0f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a0fa:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a0fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a100:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a102:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a106:	4770      	bx	lr
 800a108:	2400001c 	.word	0x2400001c
 800a10c:	10624dd3 	.word	0x10624dd3
 800a110:	fffee0c0 	.word	0xfffee0c0
 800a114:	00200045 	.word	0x00200045
 800a118:	002000c5 	.word	0x002000c5
 800a11c:	fdffe008 	.word	0xfdffe008

0800a120 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a120:	4a19      	ldr	r2, [pc, #100]	; (800a188 <SDMMC_CmdAppOperCommand+0x68>)
{
 800a122:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a124:	4b19      	ldr	r3, [pc, #100]	; (800a18c <SDMMC_CmdAppOperCommand+0x6c>)
 800a126:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a128:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a12c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a130:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a134:	4816      	ldr	r0, [pc, #88]	; (800a190 <SDMMC_CmdAppOperCommand+0x70>)
 800a136:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a13a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a13c:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a13e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a142:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a144:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a148:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a14c:	1e53      	subs	r3, r2, #1
 800a14e:	b14a      	cbz	r2, 800a164 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800a150:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a154:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a156:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a15a:	d001      	beq.n	800a160 <SDMMC_CmdAppOperCommand+0x40>
 800a15c:	0492      	lsls	r2, r2, #18
 800a15e:	d504      	bpl.n	800a16a <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800a160:	1c59      	adds	r1, r3, #1
 800a162:	d1f5      	bne.n	800a150 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a164:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a168:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a16a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a16e:	f010 0004 	ands.w	r0, r0, #4
 800a172:	d103      	bne.n	800a17c <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a174:	4b07      	ldr	r3, [pc, #28]	; (800a194 <SDMMC_CmdAppOperCommand+0x74>)
 800a176:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800a17a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a17c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a17e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a180:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	2400001c 	.word	0x2400001c
 800a18c:	10624dd3 	.word	0x10624dd3
 800a190:	fffee0c0 	.word	0xfffee0c0
 800a194:	002000c5 	.word	0x002000c5

0800a198 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a198:	4a50      	ldr	r2, [pc, #320]	; (800a2dc <SDMMC_CmdBusWidth+0x144>)
{
 800a19a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a19c:	4b50      	ldr	r3, [pc, #320]	; (800a2e0 <SDMMC_CmdBusWidth+0x148>)
 800a19e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a1a0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1a4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1a8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a1ac:	484d      	ldr	r0, [pc, #308]	; (800a2e4 <SDMMC_CmdBusWidth+0x14c>)
 800a1ae:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1b2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1b4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1b6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1ba:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1bc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1c0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a1c4:	1e53      	subs	r3, r2, #1
 800a1c6:	b14a      	cbz	r2, 800a1dc <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a1c8:	4947      	ldr	r1, [pc, #284]	; (800a2e8 <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
 800a1ca:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a1ce:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a1d0:	420a      	tst	r2, r1
 800a1d2:	d001      	beq.n	800a1d8 <SDMMC_CmdBusWidth+0x40>
 800a1d4:	0492      	lsls	r2, r2, #18
 800a1d6:	d504      	bpl.n	800a1e2 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800a1d8:	1c58      	adds	r0, r3, #1
 800a1da:	d1f6      	bne.n	800a1ca <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a1dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a1e0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1e2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a1e6:	0758      	lsls	r0, r3, #29
 800a1e8:	d445      	bmi.n	800a276 <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1ea:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a1ee:	f010 0001 	ands.w	r0, r0, #1
 800a1f2:	d137      	bne.n	800a264 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1f4:	4b3d      	ldr	r3, [pc, #244]	; (800a2ec <SDMMC_CmdBusWidth+0x154>)
 800a1f6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a1fa:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b06      	cmp	r3, #6
 800a202:	d136      	bne.n	800a272 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 800a204:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a208:	4839      	ldr	r0, [pc, #228]	; (800a2f0 <SDMMC_CmdBusWidth+0x158>)
 800a20a:	4018      	ands	r0, r3
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d02f      	beq.n	800a270 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a210:	2b00      	cmp	r3, #0
 800a212:	db35      	blt.n	800a280 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a214:	0059      	lsls	r1, r3, #1
 800a216:	d436      	bmi.n	800a286 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a218:	009a      	lsls	r2, r3, #2
 800a21a:	d436      	bmi.n	800a28a <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a21c:	00d9      	lsls	r1, r3, #3
 800a21e:	d436      	bmi.n	800a28e <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a220:	011a      	lsls	r2, r3, #4
 800a222:	d437      	bmi.n	800a294 <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a224:	0159      	lsls	r1, r3, #5
 800a226:	d438      	bmi.n	800a29a <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a228:	01da      	lsls	r2, r3, #7
 800a22a:	d439      	bmi.n	800a2a0 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a22c:	0219      	lsls	r1, r3, #8
 800a22e:	d43a      	bmi.n	800a2a6 <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a230:	025a      	lsls	r2, r3, #9
 800a232:	d43b      	bmi.n	800a2ac <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a234:	0299      	lsls	r1, r3, #10
 800a236:	d445      	bmi.n	800a2c4 <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a238:	02da      	lsls	r2, r3, #11
 800a23a:	d440      	bmi.n	800a2be <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a23c:	0359      	lsls	r1, r3, #13
 800a23e:	d43b      	bmi.n	800a2b8 <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a240:	039a      	lsls	r2, r3, #14
 800a242:	d436      	bmi.n	800a2b2 <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a244:	03d9      	lsls	r1, r3, #15
 800a246:	d446      	bmi.n	800a2d6 <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a248:	041a      	lsls	r2, r3, #16
 800a24a:	d441      	bmi.n	800a2d0 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a24c:	0459      	lsls	r1, r3, #17
 800a24e:	d43c      	bmi.n	800a2ca <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a250:	049a      	lsls	r2, r3, #18
 800a252:	d40b      	bmi.n	800a26c <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a254:	f013 0f08 	tst.w	r3, #8
 800a258:	bf14      	ite	ne
 800a25a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a25e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a262:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a264:	2301      	movs	r3, #1
 800a266:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a26a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a26c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800a270:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a272:	2001      	movs	r0, #1
 800a274:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a276:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a278:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a27a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a27e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a280:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a284:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a286:	2040      	movs	r0, #64	; 0x40
 800a288:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a28a:	2080      	movs	r0, #128	; 0x80
 800a28c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a28e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a292:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a294:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a298:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a29a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a29e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a2a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a2a4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a2aa:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a2b0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a2b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a2b6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a2b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a2bc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a2be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a2c2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a2c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a2c8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a2ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a2ce:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a2d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a2d4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a2d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a2da:	4770      	bx	lr
 800a2dc:	2400001c 	.word	0x2400001c
 800a2e0:	10624dd3 	.word	0x10624dd3
 800a2e4:	fffee0c0 	.word	0xfffee0c0
 800a2e8:	00200045 	.word	0x00200045
 800a2ec:	002000c5 	.word	0x002000c5
 800a2f0:	fdffe008 	.word	0xfdffe008

0800a2f4 <SDMMC_CmdSendSCR>:
{
 800a2f4:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a2f6:	4a4d      	ldr	r2, [pc, #308]	; (800a42c <SDMMC_CmdSendSCR+0x138>)
 800a2f8:	4b4d      	ldr	r3, [pc, #308]	; (800a430 <SDMMC_CmdSendSCR+0x13c>)
 800a2fa:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a2fc:	484d      	ldr	r0, [pc, #308]	; (800a434 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a2fe:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a302:	f241 1333 	movw	r3, #4403	; 0x1133
{
 800a306:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a308:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a30a:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a30c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a30e:	68cc      	ldr	r4, [r1, #12]
 800a310:	4020      	ands	r0, r4
 800a312:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a314:	f241 3088 	movw	r0, #5000	; 0x1388
 800a318:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a31c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a31e:	b14a      	cbz	r2, 800a334 <SDMMC_CmdSendSCR+0x40>
 800a320:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a322:	4845      	ldr	r0, [pc, #276]	; (800a438 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800a324:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800a326:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a328:	4202      	tst	r2, r0
 800a32a:	d001      	beq.n	800a330 <SDMMC_CmdSendSCR+0x3c>
 800a32c:	0494      	lsls	r4, r2, #18
 800a32e:	d506      	bpl.n	800a33e <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	d1f7      	bne.n	800a324 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a334:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a33c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a33e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a340:	0758      	lsls	r0, r3, #29
 800a342:	d43d      	bmi.n	800a3c0 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a344:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800a346:	f010 0001 	ands.w	r0, r0, #1
 800a34a:	d134      	bne.n	800a3b6 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a34c:	4b3b      	ldr	r3, [pc, #236]	; (800a43c <SDMMC_CmdSendSCR+0x148>)
 800a34e:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a350:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b33      	cmp	r3, #51	; 0x33
 800a356:	d131      	bne.n	800a3bc <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800a358:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a35a:	4839      	ldr	r0, [pc, #228]	; (800a440 <SDMMC_CmdSendSCR+0x14c>)
 800a35c:	4018      	ands	r0, r3
 800a35e:	2800      	cmp	r0, #0
 800a360:	d0ea      	beq.n	800a338 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a362:	2b00      	cmp	r3, #0
 800a364:	db30      	blt.n	800a3c8 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a366:	005a      	lsls	r2, r3, #1
 800a368:	d431      	bmi.n	800a3ce <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a36a:	009c      	lsls	r4, r3, #2
 800a36c:	d431      	bmi.n	800a3d2 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a36e:	00d9      	lsls	r1, r3, #3
 800a370:	d431      	bmi.n	800a3d6 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a372:	011a      	lsls	r2, r3, #4
 800a374:	d432      	bmi.n	800a3dc <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a376:	015c      	lsls	r4, r3, #5
 800a378:	d433      	bmi.n	800a3e2 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a37a:	01d9      	lsls	r1, r3, #7
 800a37c:	d434      	bmi.n	800a3e8 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a37e:	021a      	lsls	r2, r3, #8
 800a380:	d435      	bmi.n	800a3ee <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a382:	025c      	lsls	r4, r3, #9
 800a384:	d436      	bmi.n	800a3f4 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a386:	0299      	lsls	r1, r3, #10
 800a388:	d440      	bmi.n	800a40c <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a38a:	02da      	lsls	r2, r3, #11
 800a38c:	d43b      	bmi.n	800a406 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a38e:	035c      	lsls	r4, r3, #13
 800a390:	d436      	bmi.n	800a400 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a392:	0399      	lsls	r1, r3, #14
 800a394:	d431      	bmi.n	800a3fa <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a396:	03da      	lsls	r2, r3, #15
 800a398:	d444      	bmi.n	800a424 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a39a:	041c      	lsls	r4, r3, #16
 800a39c:	d43f      	bmi.n	800a41e <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a39e:	0459      	lsls	r1, r3, #17
 800a3a0:	d43a      	bmi.n	800a418 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a3a2:	049a      	lsls	r2, r3, #18
 800a3a4:	d435      	bmi.n	800a412 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3a6:	f013 0f08 	tst.w	r3, #8
 800a3aa:	bf14      	ite	ne
 800a3ac:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a3b0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a3b4:	e7c0      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3ba:	e7bd      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3bc:	2001      	movs	r0, #1
 800a3be:	e7bb      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3c0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3c2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3c4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3c6:	e7b7      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a3c8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a3cc:	e7b4      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a3ce:	2040      	movs	r0, #64	; 0x40
 800a3d0:	e7b2      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a3d2:	2080      	movs	r0, #128	; 0x80
 800a3d4:	e7b0      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a3d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a3da:	e7ad      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a3dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a3e0:	e7aa      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a3e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a3e6:	e7a7      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a3e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a3ec:	e7a4      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a3f2:	e7a1      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a3f8:	e79e      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a3fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a3fe:	e79b      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a400:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a404:	e798      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800a406:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a40a:	e795      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a40c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a410:	e792      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800a412:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a416:	e78f      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a418:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a41c:	e78c      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a41e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a422:	e789      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a424:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a428:	e786      	b.n	800a338 <SDMMC_CmdSendSCR+0x44>
 800a42a:	bf00      	nop
 800a42c:	2400001c 	.word	0x2400001c
 800a430:	10624dd3 	.word	0x10624dd3
 800a434:	fffee0c0 	.word	0xfffee0c0
 800a438:	00200045 	.word	0x00200045
 800a43c:	002000c5 	.word	0x002000c5
 800a440:	fdffe008 	.word	0xfdffe008

0800a444 <SDMMC_CmdSendCID>:
{
 800a444:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a446:	4a1a      	ldr	r2, [pc, #104]	; (800a4b0 <SDMMC_CmdSendCID+0x6c>)
 800a448:	4b1a      	ldr	r3, [pc, #104]	; (800a4b4 <SDMMC_CmdSendCID+0x70>)
 800a44a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a44c:	481a      	ldr	r0, [pc, #104]	; (800a4b8 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a44e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a452:	f241 3302 	movw	r3, #4866	; 0x1302
{
 800a456:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a458:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a45a:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a45c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a45e:	68cc      	ldr	r4, [r1, #12]
 800a460:	4020      	ands	r0, r4
 800a462:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a464:	f241 3088 	movw	r0, #5000	; 0x1388
 800a468:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a46c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a46e:	b14a      	cbz	r2, 800a484 <SDMMC_CmdSendCID+0x40>
 800a470:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a472:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800a474:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a476:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a47a:	d001      	beq.n	800a480 <SDMMC_CmdSendCID+0x3c>
 800a47c:	0492      	lsls	r2, r2, #18
 800a47e:	d506      	bpl.n	800a48e <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800a480:	1c58      	adds	r0, r3, #1
 800a482:	d1f6      	bne.n	800a472 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800a484:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a48c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a48e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a490:	075b      	lsls	r3, r3, #29
 800a492:	d409      	bmi.n	800a4a8 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a494:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 800a496:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a49a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a49e:	bf14      	ite	ne
 800a4a0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4a2:	4b06      	ldreq	r3, [pc, #24]	; (800a4bc <SDMMC_CmdSendCID+0x78>)
 800a4a4:	638b      	str	r3, [r1, #56]	; 0x38
}
 800a4a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4a8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4aa:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4ac:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4ae:	e7eb      	b.n	800a488 <SDMMC_CmdSendCID+0x44>
 800a4b0:	2400001c 	.word	0x2400001c
 800a4b4:	10624dd3 	.word	0x10624dd3
 800a4b8:	fffee0c0 	.word	0xfffee0c0
 800a4bc:	002000c5 	.word	0x002000c5

0800a4c0 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4c0:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <SDMMC_CmdSendCSD+0x70>)
{
 800a4c2:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4c4:	4b1b      	ldr	r3, [pc, #108]	; (800a534 <SDMMC_CmdSendCSD+0x74>)
 800a4c6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a4c8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4cc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a4d0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a4d4:	4818      	ldr	r0, [pc, #96]	; (800a538 <SDMMC_CmdSendCSD+0x78>)
 800a4d6:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a4dc:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4de:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a4e2:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a4e8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a4ec:	1e53      	subs	r3, r2, #1
 800a4ee:	b14a      	cbz	r2, 800a504 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800a4f0:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a4f4:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4f6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a4fa:	d001      	beq.n	800a500 <SDMMC_CmdSendCSD+0x40>
 800a4fc:	0492      	lsls	r2, r2, #18
 800a4fe:	d504      	bpl.n	800a50a <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800a500:	1c59      	adds	r1, r3, #1
 800a502:	d1f5      	bne.n	800a4f0 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a504:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a508:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a50a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a50e:	075b      	lsls	r3, r3, #29
 800a510:	d409      	bmi.n	800a526 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a512:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a516:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a51a:	bf14      	ite	ne
 800a51c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a51e:	4b07      	ldreq	r3, [pc, #28]	; (800a53c <SDMMC_CmdSendCSD+0x7c>)
 800a520:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800a524:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a526:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a528:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a52a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a52e:	4770      	bx	lr
 800a530:	2400001c 	.word	0x2400001c
 800a534:	10624dd3 	.word	0x10624dd3
 800a538:	fffee0c0 	.word	0xfffee0c0
 800a53c:	002000c5 	.word	0x002000c5

0800a540 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800a540:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a542:	4a2b      	ldr	r2, [pc, #172]	; (800a5f0 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800a544:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a546:	6812      	ldr	r2, [r2, #0]
{
 800a548:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a54a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a54c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a54e:	4829      	ldr	r0, [pc, #164]	; (800a5f4 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a550:	4c29      	ldr	r4, [pc, #164]	; (800a5f8 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a552:	fba0 0202 	umull	r0, r2, r0, r2
 800a556:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a55a:	401c      	ands	r4, r3
 800a55c:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a560:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a562:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a564:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a568:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a56c:	b152      	cbz	r2, 800a584 <SDMMC_CmdSetRelAdd+0x44>
 800a56e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a570:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a574:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a576:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a57a:	d001      	beq.n	800a580 <SDMMC_CmdSetRelAdd+0x40>
 800a57c:	0494      	lsls	r4, r2, #18
 800a57e:	d506      	bpl.n	800a58e <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	d1f5      	bne.n	800a570 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a584:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a58c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a58e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a592:	0758      	lsls	r0, r3, #29
 800a594:	d421      	bmi.n	800a5da <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a596:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a59a:	f010 0001 	ands.w	r0, r0, #1
 800a59e:	d116      	bne.n	800a5ce <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5a0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d115      	bne.n	800a5d6 <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5aa:	4b14      	ldr	r3, [pc, #80]	; (800a5fc <SDMMC_CmdSetRelAdd+0xbc>)
 800a5ac:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800a5b0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a5b4:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800a5b8:	d017      	beq.n	800a5ea <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a5ba:	045a      	lsls	r2, r3, #17
 800a5bc:	d412      	bmi.n	800a5e4 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5be:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a5c2:	bf14      	ite	ne
 800a5c4:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800a5c8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a5cc:	e7dc      	b.n	800a588 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5d4:	e7d8      	b.n	800a588 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	e7d6      	b.n	800a588 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5da:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5dc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5de:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5e2:	e7d1      	b.n	800a588 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a5e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a5e8:	e7ce      	b.n	800a588 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a5ea:	0c1b      	lsrs	r3, r3, #16
 800a5ec:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800a5ee:	e7cb      	b.n	800a588 <SDMMC_CmdSetRelAdd+0x48>
 800a5f0:	2400001c 	.word	0x2400001c
 800a5f4:	10624dd3 	.word	0x10624dd3
 800a5f8:	fffee0c0 	.word	0xfffee0c0
 800a5fc:	002000c5 	.word	0x002000c5

0800a600 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a600:	4a50      	ldr	r2, [pc, #320]	; (800a744 <SDMMC_CmdSendStatus+0x144>)
{
 800a602:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a604:	4b50      	ldr	r3, [pc, #320]	; (800a748 <SDMMC_CmdSendStatus+0x148>)
 800a606:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a608:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a60c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a610:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a614:	484d      	ldr	r0, [pc, #308]	; (800a74c <SDMMC_CmdSendStatus+0x14c>)
 800a616:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a61a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a61c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a61e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a622:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a624:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a628:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a62c:	1e53      	subs	r3, r2, #1
 800a62e:	b14a      	cbz	r2, 800a644 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a630:	4947      	ldr	r1, [pc, #284]	; (800a750 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
 800a632:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a636:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a638:	420a      	tst	r2, r1
 800a63a:	d001      	beq.n	800a640 <SDMMC_CmdSendStatus+0x40>
 800a63c:	0492      	lsls	r2, r2, #18
 800a63e:	d504      	bpl.n	800a64a <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800a640:	1c58      	adds	r0, r3, #1
 800a642:	d1f6      	bne.n	800a632 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a644:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a648:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a64a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a64e:	0758      	lsls	r0, r3, #29
 800a650:	d445      	bmi.n	800a6de <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a652:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a656:	f010 0001 	ands.w	r0, r0, #1
 800a65a:	d137      	bne.n	800a6cc <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a65c:	4b3d      	ldr	r3, [pc, #244]	; (800a754 <SDMMC_CmdSendStatus+0x154>)
 800a65e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a662:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b0d      	cmp	r3, #13
 800a66a:	d136      	bne.n	800a6da <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 800a66c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a670:	4839      	ldr	r0, [pc, #228]	; (800a758 <SDMMC_CmdSendStatus+0x158>)
 800a672:	4018      	ands	r0, r3
 800a674:	2800      	cmp	r0, #0
 800a676:	d02f      	beq.n	800a6d8 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a678:	2b00      	cmp	r3, #0
 800a67a:	db35      	blt.n	800a6e8 <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a67c:	0059      	lsls	r1, r3, #1
 800a67e:	d436      	bmi.n	800a6ee <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a680:	009a      	lsls	r2, r3, #2
 800a682:	d436      	bmi.n	800a6f2 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a684:	00d9      	lsls	r1, r3, #3
 800a686:	d436      	bmi.n	800a6f6 <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a688:	011a      	lsls	r2, r3, #4
 800a68a:	d437      	bmi.n	800a6fc <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a68c:	0159      	lsls	r1, r3, #5
 800a68e:	d438      	bmi.n	800a702 <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a690:	01da      	lsls	r2, r3, #7
 800a692:	d439      	bmi.n	800a708 <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a694:	0219      	lsls	r1, r3, #8
 800a696:	d43a      	bmi.n	800a70e <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a698:	025a      	lsls	r2, r3, #9
 800a69a:	d43b      	bmi.n	800a714 <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a69c:	0299      	lsls	r1, r3, #10
 800a69e:	d445      	bmi.n	800a72c <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a6a0:	02da      	lsls	r2, r3, #11
 800a6a2:	d440      	bmi.n	800a726 <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a6a4:	0359      	lsls	r1, r3, #13
 800a6a6:	d43b      	bmi.n	800a720 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a6a8:	039a      	lsls	r2, r3, #14
 800a6aa:	d436      	bmi.n	800a71a <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a6ac:	03d9      	lsls	r1, r3, #15
 800a6ae:	d446      	bmi.n	800a73e <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a6b0:	041a      	lsls	r2, r3, #16
 800a6b2:	d441      	bmi.n	800a738 <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6b4:	0459      	lsls	r1, r3, #17
 800a6b6:	d43c      	bmi.n	800a732 <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6b8:	049a      	lsls	r2, r3, #18
 800a6ba:	d40b      	bmi.n	800a6d4 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6bc:	f013 0f08 	tst.w	r3, #8
 800a6c0:	bf14      	ite	ne
 800a6c2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a6c6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a6ca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6d2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a6d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800a6d8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6da:	2001      	movs	r0, #1
 800a6dc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6de:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6e0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6e2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6e6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a6e8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a6ec:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a6ee:	2040      	movs	r0, #64	; 0x40
 800a6f0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a6f2:	2080      	movs	r0, #128	; 0x80
 800a6f4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a6f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a6fa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a6fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a700:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a702:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a706:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a708:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a70c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a70e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a712:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a714:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a718:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a71a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a71e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a720:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a724:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a726:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a72a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a72c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a730:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a732:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a736:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a738:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a73c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a73e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a742:	4770      	bx	lr
 800a744:	2400001c 	.word	0x2400001c
 800a748:	10624dd3 	.word	0x10624dd3
 800a74c:	fffee0c0 	.word	0xfffee0c0
 800a750:	00200045 	.word	0x00200045
 800a754:	002000c5 	.word	0x002000c5
 800a758:	fdffe008 	.word	0xfdffe008

0800a75c <SDMMC_CmdStatusRegister>:
{
 800a75c:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a75e:	4a4d      	ldr	r2, [pc, #308]	; (800a894 <SDMMC_CmdStatusRegister+0x138>)
 800a760:	4b4d      	ldr	r3, [pc, #308]	; (800a898 <SDMMC_CmdStatusRegister+0x13c>)
 800a762:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a764:	484d      	ldr	r0, [pc, #308]	; (800a89c <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a766:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a76a:	f241 130d 	movw	r3, #4365	; 0x110d
{
 800a76e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a770:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a772:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a774:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a776:	68cc      	ldr	r4, [r1, #12]
 800a778:	4020      	ands	r0, r4
 800a77a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a77c:	f241 3088 	movw	r0, #5000	; 0x1388
 800a780:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a784:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a786:	b14a      	cbz	r2, 800a79c <SDMMC_CmdStatusRegister+0x40>
 800a788:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a78a:	4845      	ldr	r0, [pc, #276]	; (800a8a0 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800a78c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800a78e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a790:	4202      	tst	r2, r0
 800a792:	d001      	beq.n	800a798 <SDMMC_CmdStatusRegister+0x3c>
 800a794:	0494      	lsls	r4, r2, #18
 800a796:	d506      	bpl.n	800a7a6 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	d1f7      	bne.n	800a78c <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a79c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7a6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a7a8:	0758      	lsls	r0, r3, #29
 800a7aa:	d43d      	bmi.n	800a828 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7ac:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800a7ae:	f010 0001 	ands.w	r0, r0, #1
 800a7b2:	d134      	bne.n	800a81e <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7b4:	4b3b      	ldr	r3, [pc, #236]	; (800a8a4 <SDMMC_CmdStatusRegister+0x148>)
 800a7b6:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a7b8:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	2b0d      	cmp	r3, #13
 800a7be:	d131      	bne.n	800a824 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800a7c0:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a7c2:	4839      	ldr	r0, [pc, #228]	; (800a8a8 <SDMMC_CmdStatusRegister+0x14c>)
 800a7c4:	4018      	ands	r0, r3
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0ea      	beq.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	db30      	blt.n	800a830 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a7ce:	005a      	lsls	r2, r3, #1
 800a7d0:	d431      	bmi.n	800a836 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a7d2:	009c      	lsls	r4, r3, #2
 800a7d4:	d431      	bmi.n	800a83a <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a7d6:	00d9      	lsls	r1, r3, #3
 800a7d8:	d431      	bmi.n	800a83e <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a7da:	011a      	lsls	r2, r3, #4
 800a7dc:	d432      	bmi.n	800a844 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a7de:	015c      	lsls	r4, r3, #5
 800a7e0:	d433      	bmi.n	800a84a <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a7e2:	01d9      	lsls	r1, r3, #7
 800a7e4:	d434      	bmi.n	800a850 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a7e6:	021a      	lsls	r2, r3, #8
 800a7e8:	d435      	bmi.n	800a856 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a7ea:	025c      	lsls	r4, r3, #9
 800a7ec:	d436      	bmi.n	800a85c <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a7ee:	0299      	lsls	r1, r3, #10
 800a7f0:	d440      	bmi.n	800a874 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a7f2:	02da      	lsls	r2, r3, #11
 800a7f4:	d43b      	bmi.n	800a86e <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a7f6:	035c      	lsls	r4, r3, #13
 800a7f8:	d436      	bmi.n	800a868 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a7fa:	0399      	lsls	r1, r3, #14
 800a7fc:	d431      	bmi.n	800a862 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a7fe:	03da      	lsls	r2, r3, #15
 800a800:	d444      	bmi.n	800a88c <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a802:	041c      	lsls	r4, r3, #16
 800a804:	d43f      	bmi.n	800a886 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a806:	0459      	lsls	r1, r3, #17
 800a808:	d43a      	bmi.n	800a880 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a80a:	049a      	lsls	r2, r3, #18
 800a80c:	d435      	bmi.n	800a87a <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a80e:	f013 0f08 	tst.w	r3, #8
 800a812:	bf14      	ite	ne
 800a814:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800a818:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a81c:	e7c0      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a81e:	2301      	movs	r3, #1
 800a820:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a822:	e7bd      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a824:	2001      	movs	r0, #1
 800a826:	e7bb      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a828:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a82a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a82c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a82e:	e7b7      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a830:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a834:	e7b4      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a836:	2040      	movs	r0, #64	; 0x40
 800a838:	e7b2      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a83a:	2080      	movs	r0, #128	; 0x80
 800a83c:	e7b0      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a83e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a842:	e7ad      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a844:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a848:	e7aa      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a84a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a84e:	e7a7      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a854:	e7a4      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a856:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a85a:	e7a1      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a85c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a860:	e79e      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a862:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a866:	e79b      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a868:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a86c:	e798      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800a86e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a872:	e795      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a874:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a878:	e792      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800a87a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a87e:	e78f      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a880:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a884:	e78c      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a88a:	e789      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a88c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a890:	e786      	b.n	800a7a0 <SDMMC_CmdStatusRegister+0x44>
 800a892:	bf00      	nop
 800a894:	2400001c 	.word	0x2400001c
 800a898:	10624dd3 	.word	0x10624dd3
 800a89c:	fffee0c0 	.word	0xfffee0c0
 800a8a0:	00200045 	.word	0x00200045
 800a8a4:	002000c5 	.word	0x002000c5
 800a8a8:	fdffe008 	.word	0xfdffe008

0800a8ac <BSP_STM32_TIM_Init>:
 *******************************************************************/

uint8_t BSP_STM32_TIM_Init(TIM_TypeDef *htim, uint8_t clk_division, uint16_t prescaler, uint16_t counter_limit) {
	uint32_t tmp;

	if (clk_division > 3) return BSP_ERROR;
 800a8ac:	2903      	cmp	r1, #3
uint8_t BSP_STM32_TIM_Init(TIM_TypeDef *htim, uint8_t clk_division, uint16_t prescaler, uint16_t counter_limit) {
 800a8ae:	4684      	mov	ip, r0
	if (clk_division > 3) return BSP_ERROR;
 800a8b0:	d816      	bhi.n	800a8e0 <BSP_STM32_TIM_Init+0x34>

	htim->CR1 = tmp;

	// Setting CR2 register
	tmp = 0;	// Reset value
	htim->CR2 = tmp;
 800a8b2:	2000      	movs	r0, #0
	tmp	|= clk_division << TIM_CR1_CKD_Pos;		// Configuring clock division factor
 800a8b4:	0209      	lsls	r1, r1, #8
	htim->CR1 = tmp;
 800a8b6:	f8cc 1000 	str.w	r1, [ip]
	htim->CR2 = tmp;
 800a8ba:	f8cc 0004 	str.w	r0, [ip, #4]

	// Setting SMCR register
	tmp = 0;	// Reset value
	htim->SMCR = tmp;
 800a8be:	f8cc 0008 	str.w	r0, [ip, #8]

	// Setting PSC register (prescaler)
	htim->PSC = prescaler;
 800a8c2:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28

	// Resetting CNT register (counter)
	htim->CNT = 0;

	// Generating update event to reload registers
	htim->EGR = 1 << TIM_EGR_UG_Pos;
 800a8c6:	2201      	movs	r2, #1
	htim->ARR = counter_limit;
 800a8c8:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
	htim->CNT = 0;
 800a8cc:	f8cc 0024 	str.w	r0, [ip, #36]	; 0x24
	htim->EGR = 1 << TIM_EGR_UG_Pos;
 800a8d0:	f8cc 2014 	str.w	r2, [ip, #20]

	// Enabling update event interrupt
	htim->DIER |= (1 << TIM_DIER_UIE_Pos);
 800a8d4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	f8cc 300c 	str.w	r3, [ip, #12]

	return BSP_OK;
 800a8de:	4770      	bx	lr
	if (clk_division > 3) return BSP_ERROR;
 800a8e0:	2001      	movs	r0, #1
}
 800a8e2:	4770      	bx	lr

0800a8e4 <BSP_STM32_TIM_ConfigChannel>:
	// Mode 0b111 - PWM mode 2

	channel--;

	if (channel > 3) return BSP_ERROR;
	if (mode > 7) return BSP_ERROR;
 800a8e4:	2a07      	cmp	r2, #7
 800a8e6:	d836      	bhi.n	800a956 <BSP_STM32_TIM_ConfigChannel+0x72>
 800a8e8:	3901      	subs	r1, #1
 800a8ea:	4684      	mov	ip, r0
 800a8ec:	b2c9      	uxtb	r1, r1
 800a8ee:	2903      	cmp	r1, #3
 800a8f0:	bf94      	ite	ls
 800a8f2:	2000      	movls	r0, #0
 800a8f4:	2001      	movhi	r0, #1
 800a8f6:	bb70      	cbnz	r0, 800a956 <BSP_STM32_TIM_ConfigChannel+0x72>
uint8_t BSP_STM32_TIM_ConfigChannel(TIM_TypeDef *htim, uint8_t channel, uint8_t mode, uint16_t init_value) {
 800a8f8:	b530      	push	{r4, r5, lr}

	uint8_t ch_shift;
	uint16_t tmp;

	ch_shift = channel << 2;
 800a8fa:	ea4f 0e81 	mov.w	lr, r1, lsl #2
	tmp = htim->CCER;
	tmp &= ~(0b1011 << ch_shift);	// Resetting channel settings
 800a8fe:	250b      	movs	r5, #11
	tmp = htim->CCER;
 800a900:	f8dc 4020 	ldr.w	r4, [ip, #32]
	tmp &= ~(0b1011 << ch_shift);	// Resetting channel settings
 800a904:	fa5f fe8e 	uxtb.w	lr, lr
 800a908:	fa05 f50e 	lsl.w	r5, r5, lr
 800a90c:	ea24 0405 	bic.w	r4, r4, r5
	tmp |= (0 << (ch_shift + 1));	// Setting positive polarity
	tmp |= (1 << (ch_shift + 0));	// Enable selected channel as output
 800a910:	2501      	movs	r5, #1
 800a912:	fa05 fe0e 	lsl.w	lr, r5, lr
	htim->CCER = tmp;


	ch_shift = (channel % 2) << 3;
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800a916:	42a9      	cmp	r1, r5
	tmp |= (1 << (ch_shift + 0));	// Enable selected channel as output
 800a918:	ea44 040e 	orr.w	r4, r4, lr
	ch_shift = (channel % 2) << 3;
 800a91c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
	htim->CCER = tmp;
 800a920:	b2a4      	uxth	r4, r4
	ch_shift = (channel % 2) << 3;
 800a922:	f00e 0e08 	and.w	lr, lr, #8
	htim->CCER = tmp;
 800a926:	f8cc 4020 	str.w	r4, [ip, #32]
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800a92a:	d916      	bls.n	800a95a <BSP_STM32_TIM_ConfigChannel+0x76>
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a92c:	25ff      	movs	r5, #255	; 0xff
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800a92e:	f8dc 401c 	ldr.w	r4, [ip, #28]
	if (channel < 2) htim->CCMR1 = tmp; else htim->CCMR2 = tmp;

	// Setting value for selected channel
	if (channel == 0) htim->CCR1 = init_value;
	if (channel == 1) htim->CCR2 = init_value;
	if (channel == 2) htim->CCR3 = init_value;
 800a932:	2902      	cmp	r1, #2
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a934:	fa05 f50e 	lsl.w	r5, r5, lr
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800a938:	f10e 0e04 	add.w	lr, lr, #4
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a93c:	ea24 0405 	bic.w	r4, r4, r5
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800a940:	fa02 f20e 	lsl.w	r2, r2, lr
 800a944:	ea42 0204 	orr.w	r2, r2, r4
	if (channel < 2) htim->CCMR1 = tmp; else htim->CCMR2 = tmp;
 800a948:	b292      	uxth	r2, r2
 800a94a:	f8cc 201c 	str.w	r2, [ip, #28]
	if (channel == 2) htim->CCR3 = init_value;
 800a94e:	d119      	bne.n	800a984 <BSP_STM32_TIM_ConfigChannel+0xa0>
 800a950:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
	if (channel == 3) htim->CCR4 = init_value;


	return BSP_OK;
}
 800a954:	bd30      	pop	{r4, r5, pc}
	if (mode > 7) return BSP_ERROR;
 800a956:	2001      	movs	r0, #1
}
 800a958:	4770      	bx	lr
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a95a:	24ff      	movs	r4, #255	; 0xff
 800a95c:	fa04 f40e 	lsl.w	r4, r4, lr
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800a960:	f10e 0e04 	add.w	lr, lr, #4
 800a964:	fa02 fe0e 	lsl.w	lr, r2, lr
	if (channel < 2) tmp = htim->CCMR1; else tmp = htim->CCMR2;
 800a968:	f8dc 2018 	ldr.w	r2, [ip, #24]
	tmp &= ~(0b11111111 << ch_shift);	// Resetting channel  setting
 800a96c:	ea22 0204 	bic.w	r2, r2, r4
	tmp |= ((uint16_t)mode << (ch_shift + 4));	// Setting channel mode
 800a970:	ea42 020e 	orr.w	r2, r2, lr
	if (channel < 2) htim->CCMR1 = tmp; else htim->CCMR2 = tmp;
 800a974:	b292      	uxth	r2, r2
 800a976:	f8cc 2018 	str.w	r2, [ip, #24]
	if (channel == 0) htim->CCR1 = init_value;
 800a97a:	b941      	cbnz	r1, 800a98e <BSP_STM32_TIM_ConfigChannel+0xaa>
 800a97c:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
	return BSP_OK;
 800a980:	2000      	movs	r0, #0
}
 800a982:	bd30      	pop	{r4, r5, pc}
	if (channel == 3) htim->CCR4 = init_value;
 800a984:	2903      	cmp	r1, #3
 800a986:	d1fb      	bne.n	800a980 <BSP_STM32_TIM_ConfigChannel+0x9c>
 800a988:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
}
 800a98c:	bd30      	pop	{r4, r5, pc}
	if (channel == 1) htim->CCR2 = init_value;
 800a98e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 800a992:	bd30      	pop	{r4, r5, pc}

0800a994 <BSP_STM32_TIM_Start>:

uint8_t BSP_STM32_TIM_Start(TIM_TypeDef *htim) {
 800a994:	4603      	mov	r3, r0
	htim->CR1 |= 1 << TIM_CR1_CEN_Pos;
	return BSP_OK;
}
 800a996:	2000      	movs	r0, #0
	htim->CR1 |= 1 << TIM_CR1_CEN_Pos;
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	f042 0201 	orr.w	r2, r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
}
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop

0800a9a4 <BSP_STM32_TIM_SetChannelValue>:
	htim->CR1 &= ~(1 << TIM_CR1_CEN_Pos);
	return BSP_OK;
}

uint8_t BSP_STM32_TIM_SetChannelValue(TIM_TypeDef *htim, uint8_t channel, uint16_t value) {
	channel --;
 800a9a4:	3901      	subs	r1, #1
 800a9a6:	b2c9      	uxtb	r1, r1
	if (channel > 3) return BSP_ERROR;
 800a9a8:	2903      	cmp	r1, #3
 800a9aa:	d809      	bhi.n	800a9c0 <BSP_STM32_TIM_SetChannelValue+0x1c>

	// Setting value for selected channel
	if (channel == 0) htim->CCR1 = value;
 800a9ac:	b129      	cbz	r1, 800a9ba <BSP_STM32_TIM_SetChannelValue+0x16>
	if (channel == 1) htim->CCR2 = value;
 800a9ae:	2901      	cmp	r1, #1
 800a9b0:	d109      	bne.n	800a9c6 <BSP_STM32_TIM_SetChannelValue+0x22>
	if (channel == 2) htim->CCR3 = value;
	if (channel == 3) htim->CCR4 = value;

	return BSP_OK;
 800a9b2:	2300      	movs	r3, #0
	if (channel == 1) htim->CCR2 = value;
 800a9b4:	6382      	str	r2, [r0, #56]	; 0x38
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	4770      	bx	lr
	if (channel == 0) htim->CCR1 = value;
 800a9ba:	6342      	str	r2, [r0, #52]	; 0x34
	return BSP_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	e7fa      	b.n	800a9b6 <BSP_STM32_TIM_SetChannelValue+0x12>
	if (channel > 3) return BSP_ERROR;
 800a9c0:	2301      	movs	r3, #1
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	4770      	bx	lr
	if (channel == 2) htim->CCR3 = value;
 800a9c6:	2902      	cmp	r1, #2
 800a9c8:	d103      	bne.n	800a9d2 <BSP_STM32_TIM_SetChannelValue+0x2e>
	return BSP_OK;
 800a9ca:	2300      	movs	r3, #0
	if (channel == 2) htim->CCR3 = value;
 800a9cc:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	4770      	bx	lr
	if (channel == 3) htim->CCR4 = value;
 800a9d2:	2903      	cmp	r1, #3
 800a9d4:	d1f2      	bne.n	800a9bc <BSP_STM32_TIM_SetChannelValue+0x18>
	return BSP_OK;
 800a9d6:	2300      	movs	r3, #0
	if (channel == 3) htim->CCR4 = value;
 800a9d8:	6402      	str	r2, [r0, #64]	; 0x40
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop

0800a9e0 <_UART_DMA_Callback_TC>:

const uint16_t UARTPrescTable[12] = {1U, 2U, 4U, 6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};

static void _UART_DMA_Callback_TC(void) {

}
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop

0800a9e4 <BSP_STM32_UART_Init>:



uint8_t BSP_STM32_UART_Init(USART_TypeDef *huart, uint32_t BaudRate, uint32_t WordLength, uint32_t StopBits, uint32_t Parity) {
 800a9e4:	4684      	mov	ip, r0
	uint32_t tmpreg = 0;

	// Disable UART
	huart->CR1 &= ~USART_CR1_UE;
 800a9e6:	6800      	ldr	r0, [r0, #0]
 800a9e8:	f020 0001 	bic.w	r0, r0, #1
uint8_t BSP_STM32_UART_Init(USART_TypeDef *huart, uint32_t BaudRate, uint32_t WordLength, uint32_t StopBits, uint32_t Parity) {
 800a9ec:	b410      	push	{r4}
	huart->CR1 &= ~USART_CR1_UE;
 800a9ee:	f8cc 0000 	str.w	r0, [ip]

	// USART CR1 Configuration
	tmpreg = (uint32_t)WordLength | Parity | UART_MODE_TX_RX | UART_OVERSAMPLING_16 | UART_FIFOMODE_ENABLE;
	MODIFY_REG(huart->CR1, USART_CR1_FIELDS, tmpreg);
 800a9f2:	4823      	ldr	r0, [pc, #140]	; (800aa80 <BSP_STM32_UART_Init+0x9c>)
 800a9f4:	f8dc 4000 	ldr.w	r4, [ip]
 800a9f8:	4020      	ands	r0, r4
 800a9fa:	9c01      	ldr	r4, [sp, #4]
 800a9fc:	4320      	orrs	r0, r4
 800a9fe:	4310      	orrs	r0, r2
 800aa00:	4a20      	ldr	r2, [pc, #128]	; (800aa84 <BSP_STM32_UART_Init+0xa0>)
 800aa02:	4302      	orrs	r2, r0
	// USART CR2 Configuration
	MODIFY_REG(huart->CR2, USART_CR2_STOP, StopBits);

	// USART CR3 Configuration
	tmpreg = UART_HWCONTROL_NONE | UART_ONE_BIT_SAMPLE_DISABLE | UART_RXFIFO_THRESHOLD_1_2 | UART_TXFIFO_THRESHOLD_1_2;
	MODIFY_REG(huart->CR3, USART_CR3_FIELDS, tmpreg);
 800aa04:	4820      	ldr	r0, [pc, #128]	; (800aa88 <BSP_STM32_UART_Init+0xa4>)
	MODIFY_REG(huart->CR1, USART_CR1_FIELDS, tmpreg);
 800aa06:	f8cc 2000 	str.w	r2, [ip]
	MODIFY_REG(huart->CR2, USART_CR2_STOP, StopBits);
 800aa0a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800aa0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800aa12:	4313      	orrs	r3, r2
	// Configuring prescaler
	MODIFY_REG(huart->PRESC, USART_PRESC_PRESCALER, UART_PRESCALER_DIV1);

	// USART BRR Configuration
	uint32_t pclk = 120000000; // 120MHz from PCLK1
	uint32_t usartdiv = ((pclk/UARTPrescTable[UART_PRESCALER_DIV1]) + (BaudRate/2U)) / (BaudRate);
 800aa14:	4a1d      	ldr	r2, [pc, #116]	; (800aa8c <BSP_STM32_UART_Init+0xa8>)
	MODIFY_REG(huart->CR2, USART_CR2_STOP, StopBits);
 800aa16:	f8cc 3004 	str.w	r3, [ip, #4]
	uint32_t usartdiv = ((pclk/UARTPrescTable[UART_PRESCALER_DIV1]) + (BaudRate/2U)) / (BaudRate);
 800aa1a:	eb02 0351 	add.w	r3, r2, r1, lsr #1
	MODIFY_REG(huart->CR3, USART_CR3_FIELDS, tmpreg);
 800aa1e:	f8dc 4008 	ldr.w	r4, [ip, #8]

	if (usartdiv < UART_BRR_MIN) return BSP_ERROR;
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800aa22:	f64f 72ef 	movw	r2, #65519	; 0xffef
	uint32_t usartdiv = ((pclk/UARTPrescTable[UART_PRESCALER_DIV1]) + (BaudRate/2U)) / (BaudRate);
 800aa26:	fbb3 f1f1 	udiv	r1, r3, r1
	MODIFY_REG(huart->CR3, USART_CR3_FIELDS, tmpreg);
 800aa2a:	4020      	ands	r0, r4
 800aa2c:	f040 4088 	orr.w	r0, r0, #1140850688	; 0x44000000
 800aa30:	f8cc 0008 	str.w	r0, [ip, #8]
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800aa34:	f1a1 0010 	sub.w	r0, r1, #16
	MODIFY_REG(huart->PRESC, USART_PRESC_PRESCALER, UART_PRESCALER_DIV1);
 800aa38:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800aa3c:	4290      	cmp	r0, r2
	MODIFY_REG(huart->PRESC, USART_PRESC_PRESCALER, UART_PRESCALER_DIV1);
 800aa3e:	f023 030f 	bic.w	r3, r3, #15
 800aa42:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
	if (usartdiv > UART_BRR_MAX) return BSP_ERROR;
 800aa46:	d903      	bls.n	800aa50 <BSP_STM32_UART_Init+0x6c>
 800aa48:	2001      	movs	r0, #1

	// Enable UART
	huart->CR1 |= USART_CR1_UE;

	return BSP_OK;
}
 800aa4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa4e:	4770      	bx	lr
	huart->BRR = (uint16_t)usartdiv;
 800aa50:	f8cc 100c 	str.w	r1, [ip, #12]
	return BSP_OK;
 800aa54:	2000      	movs	r0, #0
	CLEAR_BIT(huart->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa56:	f8dc 3004 	ldr.w	r3, [ip, #4]
}
 800aa5a:	f85d 4b04 	ldr.w	r4, [sp], #4
	CLEAR_BIT(huart->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa5e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800aa62:	f8cc 3004 	str.w	r3, [ip, #4]
	CLEAR_BIT(huart->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa66:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800aa6a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800aa6e:	f8cc 3008 	str.w	r3, [ip, #8]
	huart->CR1 |= USART_CR1_UE;
 800aa72:	f8dc 3000 	ldr.w	r3, [ip]
 800aa76:	f043 0301 	orr.w	r3, r3, #1
 800aa7a:	f8cc 3000 	str.w	r3, [ip]
}
 800aa7e:	4770      	bx	lr
 800aa80:	cfff69f3 	.word	0xcfff69f3
 800aa84:	2000000c 	.word	0x2000000c
 800aa88:	11fff4ff 	.word	0x11fff4ff
 800aa8c:	07270e00 	.word	0x07270e00

0800aa90 <BSP_STM32_UART_StartListen>:

uint8_t BSP_STM32_UART_StartListen(USART_TypeDef *huart, TxRxContext_TypeDef * ctx, uint8_t * pBuf, uint32_t bufSize) {
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4604      	mov	r4, r0

	UARTContext_TypeDef * uart_ctx = (UARTContext_TypeDef *)ctx->ctxmem;

	// Configuring context
	uart_ctx->indexRX0 = 0;
	uart_ctx->pDataRX = pBuf;
 800aa94:	628a      	str	r2, [r1, #40]	; 0x28
uint8_t BSP_STM32_UART_StartListen(USART_TypeDef *huart, TxRxContext_TypeDef * ctx, uint8_t * pBuf, uint32_t bufSize) {
 800aa96:	4608      	mov	r0, r1
	uart_ctx->indexRX0 = 0;
 800aa98:	2500      	movs	r5, #0
	uart_ctx->sizeRX = bufSize;

	// Start DMA
	ctx->callback_TC = (uint32_t)_UART_DMA_Callback_TC;
 800aa9a:	490b      	ldr	r1, [pc, #44]	; (800aac8 <BSP_STM32_UART_StartListen+0x38>)
	uart_ctx->sizeRX = bufSize;
 800aa9c:	6343      	str	r3, [r0, #52]	; 0x34
	ctx->callback_TC = (uint32_t)_UART_DMA_Callback_TC;
 800aa9e:	6201      	str	r1, [r0, #32]
	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&huart->RDR, (uint32_t)pBuf, bufSize);
 800aaa0:	f104 0124 	add.w	r1, r4, #36	; 0x24
	uart_ctx->indexRX0 = 0;
 800aaa4:	63c5      	str	r5, [r0, #60]	; 0x3c
	BSP_STM32_DMA_StartIT(ctx, (uint32_t)&huart->RDR, (uint32_t)pBuf, bufSize);
 800aaa6:	f7fb f8c7 	bl	8005c38 <BSP_STM32_DMA_StartIT>

	// Enabling IDLE interrupt
	SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800aaaa:	6a23      	ldr	r3, [r4, #32]

	// Start DMA receiving
	SET_BIT(huart->CR3, USART_CR3_DMAR);

	return BSP_OK;
}
 800aaac:	4628      	mov	r0, r5
	SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800aaae:	f043 0310 	orr.w	r3, r3, #16
 800aab2:	6223      	str	r3, [r4, #32]
	SET_BIT(huart->CR1, USART_CR1_IDLEIE);
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	f043 0310 	orr.w	r3, r3, #16
 800aaba:	6023      	str	r3, [r4, #0]
	SET_BIT(huart->CR3, USART_CR3_DMAR);
 800aabc:	68a3      	ldr	r3, [r4, #8]
 800aabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac2:	60a3      	str	r3, [r4, #8]
}
 800aac4:	bd38      	pop	{r3, r4, r5, pc}
 800aac6:	bf00      	nop
 800aac8:	0800a9e1 	.word	0x0800a9e1

0800aacc <BSP_STM32_UART_IRQHandler>:
uint8_t BSP_STM32_UART_IRQHandler(USART_TypeDef *huart, TxRxContext_TypeDef *ctx) {

	UARTContext_TypeDef * uart_ctx = (UARTContext_TypeDef *)ctx->ctxmem;

	// Handling TXFTIE interrupt (FIFO buffer not full)
	if (huart->CR3 & USART_CR3_TXFTIE) {
 800aacc:	6883      	ldr	r3, [r0, #8]
uint8_t BSP_STM32_UART_IRQHandler(USART_TypeDef *huart, TxRxContext_TypeDef *ctx) {
 800aace:	4602      	mov	r2, r0
	if (huart->CR3 & USART_CR3_TXFTIE) {
 800aad0:	0218      	lsls	r0, r3, #8
uint8_t BSP_STM32_UART_IRQHandler(USART_TypeDef *huart, TxRxContext_TypeDef *ctx) {
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	460e      	mov	r6, r1
	if (huart->CR3 & USART_CR3_TXFTIE) {
 800aad6:	d507      	bpl.n	800aae8 <BSP_STM32_UART_IRQHandler+0x1c>

		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800aad8:	69d3      	ldr	r3, [r2, #28]
 800aada:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800aadc:	f013 0f80 	tst.w	r3, #128	; 0x80
			uart_ctx->pDataTX++;
			uart_ctx->indexTX++;
		}

		// Switch off TXFTIE interrupt when no more data is available
		if (uart_ctx->indexTX == uart_ctx->sizeTX) {
 800aae0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800aae2:	d119      	bne.n	800ab18 <BSP_STM32_UART_IRQHandler+0x4c>
		if (uart_ctx->indexTX == uart_ctx->sizeTX) {
 800aae4:	42ab      	cmp	r3, r5
 800aae6:	d025      	beq.n	800ab34 <BSP_STM32_UART_IRQHandler+0x68>
		}

	}

	// Handling TCIE interrupt
	if ((huart->CR1 & USART_CR1_TCIE) && (huart->ISR & USART_ISR_TC)) {
 800aae8:	6813      	ldr	r3, [r2, #0]
 800aaea:	065c      	lsls	r4, r3, #25
 800aaec:	d502      	bpl.n	800aaf4 <BSP_STM32_UART_IRQHandler+0x28>
 800aaee:	69d3      	ldr	r3, [r2, #28]
 800aaf0:	0658      	lsls	r0, r3, #25
 800aaf2:	d416      	bmi.n	800ab22 <BSP_STM32_UART_IRQHandler+0x56>
		CLEAR_BIT(huart->CR1, USART_CR1_TCIE);
		SET_BIT(huart->ICR, USART_ICR_TCCF);
	}

	// Handling IDLE interrupt
	if ((huart->CR1 & USART_CR1_IDLEIE) && (huart->ISR & USART_ISR_IDLE)) {
 800aaf4:	6813      	ldr	r3, [r2, #0]
 800aaf6:	06d9      	lsls	r1, r3, #27
 800aaf8:	d502      	bpl.n	800ab00 <BSP_STM32_UART_IRQHandler+0x34>
 800aafa:	69d3      	ldr	r3, [r2, #28]
 800aafc:	06db      	lsls	r3, r3, #27
 800aafe:	d422      	bmi.n	800ab46 <BSP_STM32_UART_IRQHandler+0x7a>
			uart_ctx->sizeRX = (uart_ctx->indexRX1 + SERIAL_BUF_SIZE) - uart_ctx->indexRX0;
		}
	}

	return BSP_OK;
}
 800ab00:	2000      	movs	r0, #0
 800ab02:	bd70      	pop	{r4, r5, r6, pc}
			huart->TDR = *uart_ctx->pDataTX;
 800ab04:	6af0      	ldr	r0, [r6, #44]	; 0x2c
			uart_ctx->indexTX++;
 800ab06:	3301      	adds	r3, #1
			huart->TDR = *uart_ctx->pDataTX;
 800ab08:	f810 4b01 	ldrb.w	r4, [r0], #1
 800ab0c:	6294      	str	r4, [r2, #40]	; 0x28
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ab0e:	69d4      	ldr	r4, [r2, #28]
			uart_ctx->pDataTX++;
 800ab10:	62f0      	str	r0, [r6, #44]	; 0x2c
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ab12:	0621      	lsls	r1, r4, #24
			uart_ctx->indexTX++;
 800ab14:	63b3      	str	r3, [r6, #56]	; 0x38
		while ((huart->ISR & USART_ISR_TXE_TXFNF) && (uart_ctx->indexTX < uart_ctx->sizeTX)) {
 800ab16:	d5e5      	bpl.n	800aae4 <BSP_STM32_UART_IRQHandler+0x18>
 800ab18:	429d      	cmp	r5, r3
 800ab1a:	d8f3      	bhi.n	800ab04 <BSP_STM32_UART_IRQHandler+0x38>
		if (uart_ctx->indexTX == uart_ctx->sizeTX) {
 800ab1c:	42ab      	cmp	r3, r5
 800ab1e:	d1e3      	bne.n	800aae8 <BSP_STM32_UART_IRQHandler+0x1c>
 800ab20:	e008      	b.n	800ab34 <BSP_STM32_UART_IRQHandler+0x68>
		CLEAR_BIT(huart->CR1, USART_CR1_TCIE);
 800ab22:	6813      	ldr	r3, [r2, #0]
 800ab24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab28:	6013      	str	r3, [r2, #0]
		SET_BIT(huart->ICR, USART_ICR_TCCF);
 800ab2a:	6a13      	ldr	r3, [r2, #32]
 800ab2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab30:	6213      	str	r3, [r2, #32]
 800ab32:	e7df      	b.n	800aaf4 <BSP_STM32_UART_IRQHandler+0x28>
			CLEAR_BIT(huart->CR3, USART_CR3_TXFTIE);
 800ab34:	6893      	ldr	r3, [r2, #8]
 800ab36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ab3a:	6093      	str	r3, [r2, #8]
			SET_BIT(huart->CR1, USART_CR1_TCIE); // Enabling TCIE interrupt
 800ab3c:	6813      	ldr	r3, [r2, #0]
 800ab3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	e7d0      	b.n	800aae8 <BSP_STM32_UART_IRQHandler+0x1c>
		SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800ab46:	6a13      	ldr	r3, [r2, #32]
		uart_ctx->indexRX0 = uart_ctx->indexRX1;
 800ab48:	6c31      	ldr	r1, [r6, #64]	; 0x40
		SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800ab4a:	f043 0310 	orr.w	r3, r3, #16
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800ab4e:	6870      	ldr	r0, [r6, #4]
		SET_BIT(huart->ICR, USART_ICR_IDLECF);
 800ab50:	6213      	str	r3, [r2, #32]
		uart_ctx->indexRX0 = uart_ctx->indexRX1;
 800ab52:	63f1      	str	r1, [r6, #60]	; 0x3c
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800ab54:	f7fb f898 	bl	8005c88 <BSP_STM32_DMA_GetCounter>
		if (uart_ctx->indexRX1 >= uart_ctx->indexRX0) {
 800ab58:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800ab5a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
		if (uart_ctx->indexRX1 >= uart_ctx->indexRX0) {
 800ab5e:	4298      	cmp	r0, r3
		uart_ctx->indexRX1 = (SERIAL_BUF_SIZE - BSP_STM32_DMA_GetCounter((DMA_Stream_TypeDef *)ctx->dma_stream));
 800ab60:	6430      	str	r0, [r6, #64]	; 0x40
		if (uart_ctx->indexRX1 >= uart_ctx->indexRX0) {
 800ab62:	d302      	bcc.n	800ab6a <BSP_STM32_UART_IRQHandler+0x9e>
			uart_ctx->sizeRX = uart_ctx->indexRX1 - uart_ctx->indexRX0;
 800ab64:	1ac0      	subs	r0, r0, r3
 800ab66:	6370      	str	r0, [r6, #52]	; 0x34
 800ab68:	e7ca      	b.n	800ab00 <BSP_STM32_UART_IRQHandler+0x34>
			uart_ctx->sizeRX = (uart_ctx->indexRX1 + SERIAL_BUF_SIZE) - uart_ctx->indexRX0;
 800ab6a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ab6e:	4403      	add	r3, r0
 800ab70:	6373      	str	r3, [r6, #52]	; 0x34
 800ab72:	e7c5      	b.n	800ab00 <BSP_STM32_UART_IRQHandler+0x34>

0800ab74 <disk_status>:
extern Disk_drvTypeDef  disk;

DSTATUS disk_status (BYTE pdrv) {
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab74:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <disk_status+0x10>)
 800ab76:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800ab7a:	4418      	add	r0, r3
 800ab7c:	6853      	ldr	r3, [r2, #4]
 800ab7e:	7a00      	ldrb	r0, [r0, #8]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	4718      	bx	r3
 800ab84:	24000508 	.word	0x24000508

0800ab88 <disk_initialize>:


DSTATUS disk_initialize (BYTE pdrv) {
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800ab88:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <disk_initialize+0x20>)
 800ab8a:	5c1a      	ldrb	r2, [r3, r0]
 800ab8c:	b952      	cbnz	r2, 800aba4 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab8e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800ab92:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800ab94:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab98:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800ab9a:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab9e:	7a08      	ldrb	r0, [r1, #8]
 800aba0:	6813      	ldr	r3, [r2, #0]
 800aba2:	4718      	bx	r3
  }
  return stat;
}
 800aba4:	2000      	movs	r0, #0
 800aba6:	4770      	bx	lr
 800aba8:	24000508 	.word	0x24000508

0800abac <disk_read>:


DRESULT disk_read (BYTE pdrv, BYTE *buff, DWORD sector,	UINT count) {
 800abac:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abae:	4c06      	ldr	r4, [pc, #24]	; (800abc8 <disk_read+0x1c>)
 800abb0:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800abb4:	4420      	add	r0, r4
 800abb6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800abba:	7a00      	ldrb	r0, [r0, #8]
 800abbc:	68a4      	ldr	r4, [r4, #8]
 800abbe:	46a4      	mov	ip, r4
  return res;
}
 800abc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abc4:	4760      	bx	ip
 800abc6:	bf00      	nop
 800abc8:	24000508 	.word	0x24000508

0800abcc <disk_write>:


#if FF_FS_READONLY == 0

DRESULT disk_write (BYTE pdrv, const BYTE *buff, DWORD sector, UINT count) {
 800abcc:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abce:	4c06      	ldr	r4, [pc, #24]	; (800abe8 <disk_write+0x1c>)
 800abd0:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800abd4:	4420      	add	r0, r4
 800abd6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800abda:	7a00      	ldrb	r0, [r0, #8]
 800abdc:	68e4      	ldr	r4, [r4, #12]
 800abde:	46a4      	mov	ip, r4
  return res;
}
 800abe0:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abe4:	4760      	bx	ip
 800abe6:	bf00      	nop
 800abe8:	24000508 	.word	0x24000508

0800abec <disk_ioctl>:


DRESULT disk_ioctl (BYTE pdrv, BYTE cmd, void *buff) {
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800abec:	4b04      	ldr	r3, [pc, #16]	; (800ac00 <disk_ioctl+0x14>)
 800abee:	eb03 0c00 	add.w	ip, r3, r0
 800abf2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800abf6:	6843      	ldr	r3, [r0, #4]
 800abf8:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	4718      	bx	r3
 800ac00:	24000508 	.word	0x24000508

0800ac04 <f_init>:
char SDPath[4];
FATFS SDFatFS;
FIL SDFile;

void f_init(void)
{
 800ac04:	b508      	push	{r3, lr}
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac06:	4903      	ldr	r1, [pc, #12]	; (800ac14 <f_init+0x10>)
 800ac08:	4803      	ldr	r0, [pc, #12]	; (800ac18 <f_init+0x14>)
 800ac0a:	f000 f80b 	bl	800ac24 <FATFS_LinkDriver>
 800ac0e:	4b03      	ldr	r3, [pc, #12]	; (800ac1c <f_init+0x18>)
 800ac10:	7018      	strb	r0, [r3, #0]
}
 800ac12:	bd08      	pop	{r3, pc}
 800ac14:	24000500 	.word	0x24000500
 800ac18:	080155d4 	.word	0x080155d4
 800ac1c:	24000504 	.word	0x24000504

0800ac20 <get_fattime>:


DWORD get_fattime(void)
{
  return 0;
}
 800ac20:	2000      	movs	r0, #0
 800ac22:	4770      	bx	lr

0800ac24 <FATFS_LinkDriver>:

uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun) {
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < FF_VOLUMES) {
 800ac24:	4b11      	ldr	r3, [pc, #68]	; (800ac6c <FATFS_LinkDriver+0x48>)

  return ret;
}


uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path) {
 800ac26:	b410      	push	{r4}
  if(disk.nbr < FF_VOLUMES) {
 800ac28:	7a5c      	ldrb	r4, [r3, #9]
 800ac2a:	b9cc      	cbnz	r4, 800ac60 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 800ac2c:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800ac30:	7a5c      	ldrb	r4, [r3, #9]
 800ac32:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800ac34:	7a5c      	ldrb	r4, [r3, #9]
 800ac36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac3a:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800ac3c:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800ac3e:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800ac40:	441c      	add	r4, r3
 800ac42:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800ac44:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 800ac46:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800ac48:	b2e4      	uxtb	r4, r4
 800ac4a:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800ac4c:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800ac4e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800ac50:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800ac52:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800ac54:	4610      	mov	r0, r2
 800ac56:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 800ac5a:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800ac5c:	708b      	strb	r3, [r1, #2]
}
 800ac5e:	4770      	bx	lr
  uint8_t ret = 1;
 800ac60:	2201      	movs	r2, #1
}
 800ac62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac66:	4610      	mov	r0, r2
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	24000508 	.word	0x24000508

0800ac70 <SD_initialize>:
	}

	return Stat;
}

DSTATUS SD_initialize(BYTE lun) {
 800ac70:	b510      	push	{r4, lr}
	Stat = STA_NOINIT;
 800ac72:	2301      	movs	r3, #1
 800ac74:	4c07      	ldr	r4, [pc, #28]	; (800ac94 <SD_initialize+0x24>)
 800ac76:	7023      	strb	r3, [r4, #0]
	if (!BSP_SDCARD_GetCardState()) {
 800ac78:	f7f8 fc40 	bl	80034fc <BSP_SDCARD_GetCardState>
 800ac7c:	b918      	cbnz	r0, 800ac86 <SD_initialize+0x16>
		Stat &= ~STA_NOINIT;
 800ac7e:	7823      	ldrb	r3, [r4, #0]
 800ac80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ac84:	7023      	strb	r3, [r4, #0]
	return Stat;
 800ac86:	7823      	ldrb	r3, [r4, #0]
	// NOTE: SDCard initialized separately!!!
	return SD_CheckStatus(lun)?STA_NOINIT:~STA_NOINIT;
 800ac88:	2b00      	cmp	r3, #0
}
 800ac8a:	bf14      	ite	ne
 800ac8c:	2001      	movne	r0, #1
 800ac8e:	20fe      	moveq	r0, #254	; 0xfe
 800ac90:	bd10      	pop	{r4, pc}
 800ac92:	bf00      	nop
 800ac94:	24000018 	.word	0x24000018

0800ac98 <SD_status>:


DSTATUS SD_status(BYTE lun) {
 800ac98:	b510      	push	{r4, lr}
	Stat = STA_NOINIT;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	4c05      	ldr	r4, [pc, #20]	; (800acb4 <SD_status+0x1c>)
 800ac9e:	7023      	strb	r3, [r4, #0]
	if (!BSP_SDCARD_GetCardState()) {
 800aca0:	f7f8 fc2c 	bl	80034fc <BSP_SDCARD_GetCardState>
 800aca4:	b918      	cbnz	r0, 800acae <SD_status+0x16>
		Stat &= ~STA_NOINIT;
 800aca6:	7823      	ldrb	r3, [r4, #0]
 800aca8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800acac:	7023      	strb	r3, [r4, #0]
	return Stat;
 800acae:	7820      	ldrb	r0, [r4, #0]
	return SD_CheckStatus(lun);
}
 800acb0:	bd10      	pop	{r4, pc}
 800acb2:	bf00      	nop
 800acb4:	24000018 	.word	0x24000018

0800acb8 <SD_read>:


DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800acb8:	4608      	mov	r0, r1
	if(BSP_SDCARD_ReadBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800acba:	4611      	mov	r1, r2
 800acbc:	461a      	mov	r2, r3
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800acbe:	b508      	push	{r3, lr}
	if(BSP_SDCARD_ReadBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800acc0:	f7f8 fbd0 	bl	8003464 <BSP_SDCARD_ReadBlocks>
	return RES_OK;
}
 800acc4:	3800      	subs	r0, #0
 800acc6:	bf18      	it	ne
 800acc8:	2001      	movne	r0, #1
 800acca:	bd08      	pop	{r3, pc}

0800accc <SD_write>:


#if FF_READONLY == 0

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800accc:	4608      	mov	r0, r1
	if(BSP_SDCARD_WriteBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800acce:	4611      	mov	r1, r2
 800acd0:	461a      	mov	r2, r3
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800acd2:	b508      	push	{r3, lr}
	if(BSP_SDCARD_WriteBlocks((uint8_t *)buff, (uint32_t)sector, (uint32_t)count)) return RES_ERROR;
 800acd4:	f7f8 fbe6 	bl	80034a4 <BSP_SDCARD_WriteBlocks>
	return RES_OK;
}
 800acd8:	3800      	subs	r0, #0
 800acda:	bf18      	it	ne
 800acdc:	2001      	movne	r0, #1
 800acde:	bd08      	pop	{r3, pc}

0800ace0 <SD_ioctl>:

#endif /* FF_READONLY == 0 */



DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff) {
 800ace0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res = RES_ERROR;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ace2:	4b12      	ldr	r3, [pc, #72]	; (800ad2c <SD_ioctl+0x4c>)
 800ace4:	7818      	ldrb	r0, [r3, #0]
 800ace6:	f010 0401 	ands.w	r4, r0, #1
 800acea:	d106      	bne.n	800acfa <SD_ioctl+0x1a>
 800acec:	4615      	mov	r5, r2

  switch (cmd) {
 800acee:	2903      	cmp	r1, #3
 800acf0:	d81a      	bhi.n	800ad28 <SD_ioctl+0x48>
 800acf2:	e8df f001 	tbb	[pc, r1]
 800acf6:	0805      	.short	0x0805
 800acf8:	120d      	.short	0x120d
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800acfa:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800acfc:	4620      	mov	r0, r4
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
    res = RES_OK;
 800ad00:	460c      	mov	r4, r1
}
 800ad02:	4620      	mov	r0, r4
 800ad04:	bd38      	pop	{r3, r4, r5, pc}
    *(DWORD*)buff = BSP_SDCARD_GetBlockNo();
 800ad06:	f7f8 fbed 	bl	80034e4 <BSP_SDCARD_GetBlockNo>
 800ad0a:	6028      	str	r0, [r5, #0]
}
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
    *(WORD*)buff = BSP_SDCARD_GetBlockSize();
 800ad10:	f7f8 fbee 	bl	80034f0 <BSP_SDCARD_GetBlockSize>
 800ad14:	8028      	strh	r0, [r5, #0]
}
 800ad16:	4620      	mov	r0, r4
 800ad18:	bd38      	pop	{r3, r4, r5, pc}
    *(DWORD*)buff = BSP_SDCARD_GetBlockSize() / SD_DEFAULT_BLOCK_SIZE;
 800ad1a:	f7f8 fbe9 	bl	80034f0 <BSP_SDCARD_GetBlockSize>
 800ad1e:	f3c0 204f 	ubfx	r0, r0, #9, #16
 800ad22:	6028      	str	r0, [r5, #0]
}
 800ad24:	4620      	mov	r0, r4
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
  switch (cmd) {
 800ad28:	2404      	movs	r4, #4
 800ad2a:	e7e7      	b.n	800acfc <SD_ioctl+0x1c>
 800ad2c:	24000018 	.word	0x24000018

0800ad30 <inc_share>:
{
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs
 800ad30:	4b29      	ldr	r3, [pc, #164]	; (800add8 <inc_share+0xa8>)
{
 800ad32:	4684      	mov	ip, r0
		if (Files[i].fs == dp->obj.fs
 800ad34:	681a      	ldr	r2, [r3, #0]
{
 800ad36:	b570      	push	{r4, r5, r6, lr}
		if (Files[i].fs == dp->obj.fs
 800ad38:	6804      	ldr	r4, [r0, #0]
 800ad3a:	4294      	cmp	r4, r2
 800ad3c:	d01e      	beq.n	800ad7c <inc_share+0x4c>
 800ad3e:	6918      	ldr	r0, [r3, #16]
 800ad40:	42a0      	cmp	r0, r4
 800ad42:	d004      	beq.n	800ad4e <inc_share+0x1e>
		 && Files[i].clu == dp->obj.sclust
		 && Files[i].ofs == dp->dptr) break;
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800ad44:	b32a      	cbz	r2, 800ad92 <inc_share+0x62>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d03b      	beq.n	800adc2 <inc_share+0x92>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ad4a:	2000      	movs	r0, #0
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;	/* Index number origin from 1 */
}
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
		 && Files[i].clu == dp->obj.sclust
 800ad4e:	695d      	ldr	r5, [r3, #20]
 800ad50:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800ad54:	42b5      	cmp	r5, r6
 800ad56:	d1f5      	bne.n	800ad44 <inc_share+0x14>
		 && Files[i].ofs == dp->dptr) break;
 800ad58:	699d      	ldr	r5, [r3, #24]
 800ad5a:	f8dc 6030 	ldr.w	r6, [ip, #48]	; 0x30
 800ad5e:	42b5      	cmp	r5, r6
 800ad60:	d1f0      	bne.n	800ad44 <inc_share+0x14>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800ad62:	2201      	movs	r2, #1
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad64:	2901      	cmp	r1, #1
 800ad66:	d12f      	bne.n	800adc8 <inc_share+0x98>
 800ad68:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ad6c:	0111      	lsls	r1, r2, #4
 800ad6e:	68c0      	ldr	r0, [r0, #12]
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d1ea      	bne.n	800ad4a <inc_share+0x1a>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800ad74:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad7a:	e01f      	b.n	800adbc <inc_share+0x8c>
		 && Files[i].clu == dp->obj.sclust
 800ad7c:	6880      	ldr	r0, [r0, #8]
 800ad7e:	685d      	ldr	r5, [r3, #4]
 800ad80:	4285      	cmp	r5, r0
 800ad82:	d1dc      	bne.n	800ad3e <inc_share+0xe>
		 && Files[i].ofs == dp->dptr) break;
 800ad84:	6898      	ldr	r0, [r3, #8]
 800ad86:	f8dc 5030 	ldr.w	r5, [ip, #48]	; 0x30
 800ad8a:	4285      	cmp	r5, r0
 800ad8c:	d1d7      	bne.n	800ad3e <inc_share+0xe>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800ad8e:	2200      	movs	r2, #0
 800ad90:	e7e8      	b.n	800ad64 <inc_share+0x34>
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800ad92:	2001      	movs	r0, #1
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad94:	2901      	cmp	r1, #1
		Files[i].fs = dp->obj.fs;
 800ad96:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800ad9a:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 800ad9e:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
		Files[i].fs = dp->obj.fs;
 800ada2:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800ada4:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800ada8:	e9ce 4201 	strd	r4, r2, [lr, #4]
		Files[i].ctr = 0;
 800adac:	f04f 0200 	mov.w	r2, #0
 800adb0:	f8ce 200c 	str.w	r2, [lr, #12]
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800adb4:	bf0c      	ite	eq
 800adb6:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800adba:	2201      	movne	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800adbc:	440b      	add	r3, r1
 800adbe:	60da      	str	r2, [r3, #12]
}
 800adc0:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800adc2:	2002      	movs	r0, #2
 800adc4:	2201      	movs	r2, #1
 800adc6:	e7e5      	b.n	800ad94 <inc_share+0x64>
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800adc8:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800adcc:	1c50      	adds	r0, r2, #1
	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800adce:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800add0:	68e2      	ldr	r2, [r4, #12]
 800add2:	3201      	adds	r2, #1
 800add4:	e7f2      	b.n	800adbc <inc_share+0x8c>
 800add6:	bf00      	nop
 800add8:	24000778 	.word	0x24000778

0800addc <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800addc:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800adde:	7903      	ldrb	r3, [r0, #4]
{
 800ade0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800ade2:	b95b      	cbnz	r3, 800adfc <sync_fs+0x20>
	FRESULT res;


	res = sync_window(fs);
	if (res == FR_OK) {
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800ade4:	7823      	ldrb	r3, [r4, #0]
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d023      	beq.n	800ae32 <sync_fs+0x56>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800adea:	2200      	movs	r2, #0
 800adec:	7860      	ldrb	r0, [r4, #1]
 800adee:	4611      	mov	r1, r2
 800adf0:	f7ff fefc 	bl	800abec <disk_ioctl>
			res = FR_DISK_ERR;
 800adf4:	3800      	subs	r0, #0
 800adf6:	bf18      	it	ne
 800adf8:	2001      	movne	r0, #1
	}

	return res;
}
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800adfc:	f100 0540 	add.w	r5, r0, #64	; 0x40
 800ae00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ae02:	2301      	movs	r3, #1
 800ae04:	7840      	ldrb	r0, [r0, #1]
 800ae06:	4629      	mov	r1, r5
 800ae08:	f7ff fee0 	bl	800abcc <disk_write>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d139      	bne.n	800ae84 <sync_fs+0xa8>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800ae10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ae12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ae16:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800ae18:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d2e2      	bcs.n	800ade4 <sync_fs+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800ae1e:	78e3      	ldrb	r3, [r4, #3]
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d1df      	bne.n	800ade4 <sync_fs+0x8>
 800ae24:	440a      	add	r2, r1
 800ae26:	2301      	movs	r3, #1
 800ae28:	4629      	mov	r1, r5
 800ae2a:	7860      	ldrb	r0, [r4, #1]
 800ae2c:	f7ff fece 	bl	800abcc <disk_write>
	if (res == FR_OK) {
 800ae30:	e7d8      	b.n	800ade4 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800ae32:	7965      	ldrb	r5, [r4, #5]
 800ae34:	2d01      	cmp	r5, #1
 800ae36:	d1d8      	bne.n	800adea <sync_fs+0xe>
			memset(fs->win, 0, sizeof fs->win);
 800ae38:	f104 0640 	add.w	r6, r4, #64	; 0x40
 800ae3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae40:	2100      	movs	r1, #0
 800ae42:	4630      	mov	r0, r6
 800ae44:	f007 fa09 	bl	801225a <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800ae48:	480f      	ldr	r0, [pc, #60]	; (800ae88 <sync_fs+0xac>)
	*ptr++ = (BYTE)val; val >>= 8;
 800ae4a:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800ae4e:	6420      	str	r0, [r4, #64]	; 0x40
 800ae50:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800ae54:	f8a4 323e 	strh.w	r3, [r4, #574]	; 0x23e
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800ae58:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800ae5a:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800ae5e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ae62:	3020      	adds	r0, #32
 800ae64:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800ae68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 800ae6a:	f8c4 122c 	str.w	r1, [r4, #556]	; 0x22c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800ae6e:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800ae70:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ae72:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800ae76:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800ae78:	63e2      	str	r2, [r4, #60]	; 0x3c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800ae7a:	f7ff fea7 	bl	800abcc <disk_write>
			fs->fsi_flag = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	7163      	strb	r3, [r4, #5]
 800ae82:	e7b2      	b.n	800adea <sync_fs+0xe>
			res = FR_DISK_ERR;
 800ae84:	2001      	movs	r0, #1
}
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	41615252 	.word	0x41615252

0800ae8c <init_alloc_info.isra.0>:
	rv = rv << 8 | ptr[0];
 800ae8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
)
{
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
	obj->n_frag = 0;										/* No last fragment info */
 800ae8e:	2200      	movs	r2, #0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 800ae90:	608b      	str	r3, [r1, #8]
	rv = rv << 8 | ptr[0];
 800ae92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
static void init_alloc_info (
 800ae94:	b410      	push	{r4}
	rv = rv << 8 | ptr[0];
 800ae96:	6b84      	ldr	r4, [r0, #56]	; 0x38
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800ae98:	e9c1 4304 	strd	r4, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800ae9c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
}
 800aea0:	f85d 4b04 	ldr.w	r4, [sp], #4
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800aea4:	f003 0302 	and.w	r3, r3, #2
	obj->n_frag = 0;										/* No last fragment info */
 800aea8:	61ca      	str	r2, [r1, #28]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800aeaa:	71cb      	strb	r3, [r1, #7]
}
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop

0800aeb0 <move_window>:
	if (sect != fs->winsect) {	/* Window offset changed? */
 800aeb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aeb2:	428a      	cmp	r2, r1
 800aeb4:	d02c      	beq.n	800af10 <move_window+0x60>
{
 800aeb6:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800aeb8:	7903      	ldrb	r3, [r0, #4]
 800aeba:	460d      	mov	r5, r1
{
 800aebc:	b082      	sub	sp, #8
 800aebe:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800aec0:	f100 0140 	add.w	r1, r0, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800aec4:	b963      	cbnz	r3, 800aee0 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800aec6:	2301      	movs	r3, #1
 800aec8:	462a      	mov	r2, r5
 800aeca:	7860      	ldrb	r0, [r4, #1]
 800aecc:	f7ff fe6e 	bl	800abac <disk_read>
 800aed0:	b910      	cbnz	r0, 800aed8 <move_window+0x28>
			fs->winsect = sect;
 800aed2:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800aed4:	b002      	add	sp, #8
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
				res = FR_DISK_ERR;
 800aed8:	2001      	movs	r0, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800aeda:	f04f 35ff 	mov.w	r5, #4294967295
 800aede:	e7f8      	b.n	800aed2 <move_window+0x22>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800aee0:	2301      	movs	r3, #1
 800aee2:	7840      	ldrb	r0, [r0, #1]
 800aee4:	9101      	str	r1, [sp, #4]
 800aee6:	f7ff fe71 	bl	800abcc <disk_write>
 800aeea:	b998      	cbnz	r0, 800af14 <move_window+0x64>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800aeec:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800aeee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aef0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aef2:	1af3      	subs	r3, r6, r3
 800aef4:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;	/* Clear window dirty flag */
 800aef6:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d2e4      	bcs.n	800aec6 <move_window+0x16>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800aefc:	78e3      	ldrb	r3, [r4, #3]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d1e1      	bne.n	800aec6 <move_window+0x16>
 800af02:	4432      	add	r2, r6
 800af04:	2301      	movs	r3, #1
 800af06:	7860      	ldrb	r0, [r4, #1]
 800af08:	f7ff fe60 	bl	800abcc <disk_write>
 800af0c:	9901      	ldr	r1, [sp, #4]
		if (res == FR_OK) {			/* Fill sector window with new data */
 800af0e:	e7da      	b.n	800aec6 <move_window+0x16>
	FRESULT res = FR_OK;
 800af10:	2000      	movs	r0, #0
}
 800af12:	4770      	bx	lr
			res = FR_DISK_ERR;
 800af14:	2001      	movs	r0, #1
}
 800af16:	b002      	add	sp, #8
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	bf00      	nop

0800af1c <put_fat.part.0>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800af20:	7803      	ldrb	r3, [r0, #0]
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800af22:	4604      	mov	r4, r0
 800af24:	460d      	mov	r5, r1
 800af26:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d069      	beq.n	800b000 <put_fat.part.0+0xe4>
 800af2c:	d840      	bhi.n	800afb0 <put_fat.part.0+0x94>
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d163      	bne.n	800affa <put_fat.part.0+0xde>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800af32:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af36:	8983      	ldrh	r3, [r0, #12]
 800af38:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800af3a:	fbb7 f3f3 	udiv	r3, r7, r3
 800af3e:	4419      	add	r1, r3
 800af40:	f7ff ffb6 	bl	800aeb0 <move_window>
			if (res != FR_OK) break;
 800af44:	bb90      	cbnz	r0, 800afac <put_fat.part.0+0x90>
			p = fs->win + bc++ % SS(fs);
 800af46:	89a3      	ldrh	r3, [r4, #12]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800af48:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 800af4c:	f107 0801 	add.w	r8, r7, #1
 800af50:	f104 0940 	add.w	r9, r4, #64	; 0x40
 800af54:	fbb7 f2f3 	udiv	r2, r7, r3
 800af58:	fb03 7712 	mls	r7, r3, r2, r7
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800af5c:	d06b      	beq.n	800b036 <put_fat.part.0+0x11a>
 800af5e:	f819 2007 	ldrb.w	r2, [r9, r7]
 800af62:	0133      	lsls	r3, r6, #4
 800af64:	f002 020f 	and.w	r2, r2, #15
 800af68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af6c:	4313      	orrs	r3, r2
 800af6e:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af72:	4620      	mov	r0, r4
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af78:	fbb8 f3f3 	udiv	r3, r8, r3
 800af7c:	4419      	add	r1, r3
			fs->wflag = 1;
 800af7e:	2301      	movs	r3, #1
 800af80:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af82:	f7ff ff95 	bl	800aeb0 <move_window>
			if (res != FR_OK) break;
 800af86:	b988      	cbnz	r0, 800afac <put_fat.part.0+0x90>
			p = fs->win + bc % SS(fs);
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	fbb8 f2f3 	udiv	r2, r8, r3
 800af8e:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800af92:	2d00      	cmp	r5, #0
 800af94:	d151      	bne.n	800b03a <put_fat.part.0+0x11e>
 800af96:	f819 3008 	ldrb.w	r3, [r9, r8]
 800af9a:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800af9e:	f023 030f 	bic.w	r3, r3, #15
 800afa2:	4313      	orrs	r3, r2
 800afa4:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800afa8:	2301      	movs	r3, #1
 800afaa:	7123      	strb	r3, [r4, #4]
}
 800afac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		switch (fs->fs_type) {
 800afb0:	3b03      	subs	r3, #3
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d821      	bhi.n	800affa <put_fat.part.0+0xde>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800afb6:	8983      	ldrh	r3, [r0, #12]
 800afb8:	089b      	lsrs	r3, r3, #2
 800afba:	fbb1 f3f3 	udiv	r3, r1, r3
 800afbe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800afc0:	4419      	add	r1, r3
 800afc2:	f7ff ff75 	bl	800aeb0 <move_window>
			if (res != FR_OK) break;
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d1f0      	bne.n	800afac <put_fat.part.0+0x90>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800afca:	7823      	ldrb	r3, [r4, #0]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800afcc:	00ad      	lsls	r5, r5, #2
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800afce:	2b04      	cmp	r3, #4
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800afd0:	f104 0340 	add.w	r3, r4, #64	; 0x40
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800afd4:	d034      	beq.n	800b040 <put_fat.part.0+0x124>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800afd6:	89a1      	ldrh	r1, [r4, #12]
 800afd8:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 800afdc:	fbb5 f6f1 	udiv	r6, r5, r1
 800afe0:	fb01 5516 	mls	r5, r1, r6, r5
	rv = rv << 8 | ptr[0];
 800afe4:	5959      	ldr	r1, [r3, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800afe6:	442b      	add	r3, r5
 800afe8:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
 800afec:	ea41 0602 	orr.w	r6, r1, r2
			fs->wflag = 1;
 800aff0:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800aff2:	601e      	str	r6, [r3, #0]
			fs->wflag = 1;
 800aff4:	7122      	strb	r2, [r4, #4]
}
 800aff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		switch (fs->fs_type) {
 800affa:	2002      	movs	r0, #2
}
 800affc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b000:	8983      	ldrh	r3, [r0, #12]
 800b002:	085b      	lsrs	r3, r3, #1
 800b004:	fbb1 f3f3 	udiv	r3, r1, r3
 800b008:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b00a:	4419      	add	r1, r3
 800b00c:	f7ff ff50 	bl	800aeb0 <move_window>
			if (res != FR_OK) break;
 800b010:	2800      	cmp	r0, #0
 800b012:	d1cb      	bne.n	800afac <put_fat.part.0+0x90>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800b014:	89a2      	ldrh	r2, [r4, #12]
 800b016:	006d      	lsls	r5, r5, #1
 800b018:	f104 0340 	add.w	r3, r4, #64	; 0x40
	*ptr++ = (BYTE)val; val >>= 8;
 800b01c:	f3c6 2707 	ubfx	r7, r6, #8, #8
			fs->wflag = 1;
 800b020:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800b022:	fbb5 fcf2 	udiv	ip, r5, r2
 800b026:	fb02 551c 	mls	r5, r2, ip, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800b02a:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800b02c:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 800b02e:	705f      	strb	r7, [r3, #1]
			fs->wflag = 1;
 800b030:	7121      	strb	r1, [r4, #4]
}
 800b032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800b036:	b2f3      	uxtb	r3, r6
 800b038:	e799      	b.n	800af6e <put_fat.part.0+0x52>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800b03a:	f3c6 1307 	ubfx	r3, r6, #4, #8
 800b03e:	e7b1      	b.n	800afa4 <put_fat.part.0+0x88>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b040:	89a2      	ldrh	r2, [r4, #12]
 800b042:	fbb5 f1f2 	udiv	r1, r5, r2
 800b046:	fb02 5511 	mls	r5, r2, r1, r5
 800b04a:	442b      	add	r3, r5
 800b04c:	e7d0      	b.n	800aff0 <put_fat.part.0+0xd4>
 800b04e:	bf00      	nop

0800b050 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b050:	2901      	cmp	r1, #1
 800b052:	d90f      	bls.n	800b074 <get_fat+0x24>
{
 800b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800b056:	6806      	ldr	r6, [r0, #0]
 800b058:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b05a:	6a33      	ldr	r3, [r6, #32]
 800b05c:	428b      	cmp	r3, r1
 800b05e:	d801      	bhi.n	800b064 <get_fat+0x14>
		val = 1;	/* Internal error */
 800b060:	2001      	movs	r0, #1
}
 800b062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
 800b064:	7833      	ldrb	r3, [r6, #0]
 800b066:	3b01      	subs	r3, #1
 800b068:	2b03      	cmp	r3, #3
 800b06a:	d8f9      	bhi.n	800b060 <get_fat+0x10>
 800b06c:	e8df f003 	tbb	[pc, r3]
 800b070:	04182d41 	.word	0x04182d41
		val = 1;	/* Internal error */
 800b074:	2001      	movs	r0, #1
}
 800b076:	4770      	bx	lr
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800b078:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 800b07c:	ea53 0201 	orrs.w	r2, r3, r1
 800b080:	d045      	beq.n	800b10e <get_fat+0xbe>
 800b082:	6887      	ldr	r7, [r0, #8]
 800b084:	2f00      	cmp	r7, #0
 800b086:	d042      	beq.n	800b10e <get_fat+0xbe>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b088:	79c5      	ldrb	r5, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b08a:	1be7      	subs	r7, r4, r7
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b08c:	89b2      	ldrh	r2, [r6, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b08e:	2d02      	cmp	r5, #2
 800b090:	d07b      	beq.n	800b18a <get_fat+0x13a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b092:	2d03      	cmp	r5, #3
 800b094:	d13f      	bne.n	800b116 <get_fat+0xc6>
 800b096:	6983      	ldr	r3, [r0, #24]
 800b098:	42bb      	cmp	r3, r7
 800b09a:	d93c      	bls.n	800b116 <get_fat+0xc6>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800b09c:	1c60      	adds	r0, r4, #1
}
 800b09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0a0:	89b3      	ldrh	r3, [r6, #12]
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b0a6:	089b      	lsrs	r3, r3, #2
 800b0a8:	fbb4 f3f3 	udiv	r3, r4, r3
 800b0ac:	4419      	add	r1, r3
 800b0ae:	f7ff feff 	bl	800aeb0 <move_window>
 800b0b2:	bb48      	cbnz	r0, 800b108 <get_fat+0xb8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800b0b4:	89b3      	ldrh	r3, [r6, #12]
 800b0b6:	00a4      	lsls	r4, r4, #2
 800b0b8:	fbb4 f2f3 	udiv	r2, r4, r3
 800b0bc:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 800b0c0:	4434      	add	r4, r6
 800b0c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800b0c4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800b0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b0ca:	89b3      	ldrh	r3, [r6, #12]
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b0d0:	085b      	lsrs	r3, r3, #1
 800b0d2:	fbb4 f3f3 	udiv	r3, r4, r3
 800b0d6:	4419      	add	r1, r3
 800b0d8:	f7ff feea 	bl	800aeb0 <move_window>
 800b0dc:	b9a0      	cbnz	r0, 800b108 <get_fat+0xb8>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800b0de:	89b3      	ldrh	r3, [r6, #12]
 800b0e0:	0064      	lsls	r4, r4, #1
 800b0e2:	fbb4 f2f3 	udiv	r2, r4, r3
 800b0e6:	fb03 4412 	mls	r4, r3, r2, r4
 800b0ea:	4434      	add	r4, r6
 800b0ec:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
}
 800b0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
 800b0f2:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0f6:	89b3      	ldrh	r3, [r6, #12]
 800b0f8:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	fbb5 f3f3 	udiv	r3, r5, r3
 800b100:	4419      	add	r1, r3
 800b102:	f7ff fed5 	bl	800aeb0 <move_window>
 800b106:	b1f0      	cbz	r0, 800b146 <get_fat+0xf6>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b108:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800b10e:	79c3      	ldrb	r3, [r0, #7]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1a5      	bne.n	800b060 <get_fat+0x10>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b114:	89b2      	ldrh	r2, [r6, #12]
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b116:	69c3      	ldr	r3, [r0, #28]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d145      	bne.n	800b1a8 <get_fat+0x158>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b11c:	0893      	lsrs	r3, r2, #2
 800b11e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b120:	4630      	mov	r0, r6
 800b122:	fbb4 f3f3 	udiv	r3, r4, r3
 800b126:	4419      	add	r1, r3
 800b128:	f7ff fec2 	bl	800aeb0 <move_window>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d1eb      	bne.n	800b108 <get_fat+0xb8>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b130:	89b3      	ldrh	r3, [r6, #12]
 800b132:	00a4      	lsls	r4, r4, #2
 800b134:	fbb4 f2f3 	udiv	r2, r4, r3
 800b138:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 800b13c:	1933      	adds	r3, r6, r4
 800b13e:	6c18      	ldr	r0, [r3, #64]	; 0x40
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b140:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
}
 800b144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b146:	89b3      	ldrh	r3, [r6, #12]
 800b148:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b14a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800b14c:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b14e:	fbb5 f2f3 	udiv	r2, r5, r3
 800b152:	fb03 5512 	mls	r5, r3, r2, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b156:	fbb7 f3f3 	udiv	r3, r7, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b15a:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b15c:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b15e:	f895 5040 	ldrb.w	r5, [r5, #64]	; 0x40
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b162:	f7ff fea5 	bl	800aeb0 <move_window>
 800b166:	2800      	cmp	r0, #0
 800b168:	d1ce      	bne.n	800b108 <get_fat+0xb8>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800b16a:	89b3      	ldrh	r3, [r6, #12]
 800b16c:	fbb7 f2f3 	udiv	r2, r7, r3
 800b170:	fb03 7712 	mls	r7, r3, r2, r7
 800b174:	4437      	add	r7, r6
 800b176:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b17a:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800b17e:	07e3      	lsls	r3, r4, #31
 800b180:	bf4c      	ite	mi
 800b182:	0900      	lsrmi	r0, r0, #4
 800b184:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800b188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b18a:	1e58      	subs	r0, r3, #1
 800b18c:	f04f 0300 	mov.w	r3, #0
 800b190:	f161 0100 	sbc.w	r1, r1, #0
 800b194:	f7f5 f8a8 	bl	80002e8 <__aeabi_uldivmod>
 800b198:	8973      	ldrh	r3, [r6, #10]
 800b19a:	fbb0 f0f3 	udiv	r0, r0, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b19e:	4287      	cmp	r7, r0
 800b1a0:	f63f af5e 	bhi.w	800b060 <get_fat+0x10>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800b1a4:	f47f af7a 	bne.w	800b09c <get_fat+0x4c>
 800b1a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
 800b1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ae:	bf00      	nop

0800b1b0 <dir_next.constprop.0>:
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 800b1b2:	6805      	ldr	r5, [r0, #0]
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800b1b4:	4604      	mov	r4, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b1b6:	6b06      	ldr	r6, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800b1b8:	782b      	ldrb	r3, [r5, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b1ba:	3620      	adds	r6, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	bf0c      	ite	eq
 800b1c0:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 800b1c4:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 800b1c8:	429e      	cmp	r6, r3
 800b1ca:	d303      	bcc.n	800b1d4 <dir_next.constprop.0+0x24>
 800b1cc:	2300      	movs	r3, #0
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800b1ce:	2004      	movs	r0, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800b1d0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800b1d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d035      	beq.n	800b246 <dir_next.constprop.0+0x96>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b1da:	89aa      	ldrh	r2, [r5, #12]
 800b1dc:	fbb6 fcf2 	udiv	ip, r6, r2
 800b1e0:	fb02 621c 	mls	r2, r2, ip, r6
 800b1e4:	bb02      	cbnz	r2, 800b228 <dir_next.constprop.0+0x78>
		dp->sect++;				/* Next sector */
 800b1e6:	3301      	adds	r3, #1
		if (dp->clust == 0) {	/* Static table */
 800b1e8:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800b1ea:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800b1ec:	b311      	cbz	r1, 800b234 <dir_next.constprop.0+0x84>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b1ee:	896b      	ldrh	r3, [r5, #10]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	ea13 070c 	ands.w	r7, r3, ip
 800b1f6:	d117      	bne.n	800b228 <dir_next.constprop.0+0x78>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800b1f8:	f7ff ff2a 	bl	800b050 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800b1fc:	2801      	cmp	r0, #1
 800b1fe:	d920      	bls.n	800b242 <dir_next.constprop.0+0x92>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d01c      	beq.n	800b23e <dir_next.constprop.0+0x8e>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800b204:	6a2b      	ldr	r3, [r5, #32]
 800b206:	4298      	cmp	r0, r3
 800b208:	d2e0      	bcs.n	800b1cc <dir_next.constprop.0+0x1c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b20a:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800b20c:	6360      	str	r0, [r4, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800b20e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b210:	4298      	cmp	r0, r3
 800b212:	d203      	bcs.n	800b21c <dir_next.constprop.0+0x6c>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b214:	896a      	ldrh	r2, [r5, #10]
 800b216:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b218:	fb00 3702 	mla	r7, r0, r2, r3
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b21c:	89ab      	ldrh	r3, [r5, #12]
				dp->sect = clst2sect(fs, clst);
 800b21e:	63a7      	str	r7, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b220:	fbb6 f2f3 	udiv	r2, r6, r3
 800b224:	fb03 6212 	mls	r2, r3, r2, r6
 800b228:	3540      	adds	r5, #64	; 0x40
	return FR_OK;
 800b22a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800b22c:	6326      	str	r6, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b22e:	4415      	add	r5, r2
 800b230:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800b232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b234:	892b      	ldrh	r3, [r5, #8]
 800b236:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 800b23a:	d8f5      	bhi.n	800b228 <dir_next.constprop.0+0x78>
 800b23c:	e7c6      	b.n	800b1cc <dir_next.constprop.0+0x1c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b23e:	2001      	movs	r0, #1
}
 800b240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800b242:	2002      	movs	r0, #2
}
 800b244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800b246:	2004      	movs	r0, #4
}
 800b248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b24a:	bf00      	nop

0800b24c <dir_clear>:
{
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b24e:	7903      	ldrb	r3, [r0, #4]
{
 800b250:	4605      	mov	r5, r0
 800b252:	460c      	mov	r4, r1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b254:	f100 0740 	add.w	r7, r0, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b258:	bb23      	cbnz	r3, 800b2a4 <dir_clear+0x58>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b25a:	6a2b      	ldr	r3, [r5, #32]
	clst -= 2;		/* Cluster number is origin from 2 */
 800b25c:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b25e:	3b02      	subs	r3, #2
 800b260:	4299      	cmp	r1, r3
 800b262:	d237      	bcs.n	800b2d4 <dir_clear+0x88>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b264:	896b      	ldrh	r3, [r5, #10]
 800b266:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800b268:	fb01 6603 	mla	r6, r1, r3, r6
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800b26c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b270:	2100      	movs	r1, #0
 800b272:	4638      	mov	r0, r7
	fs->winsect = sect;				/* Set window to top of the cluster */
 800b274:	63ee      	str	r6, [r5, #60]	; 0x3c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800b276:	f006 fff0 	bl	801225a <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800b27a:	896b      	ldrh	r3, [r5, #10]
 800b27c:	b373      	cbz	r3, 800b2dc <dir_clear+0x90>
 800b27e:	2400      	movs	r4, #0
 800b280:	e003      	b.n	800b28a <dir_clear+0x3e>
 800b282:	3401      	adds	r4, #1
 800b284:	896b      	ldrh	r3, [r5, #10]
 800b286:	42a3      	cmp	r3, r4
 800b288:	d908      	bls.n	800b29c <dir_clear+0x50>
 800b28a:	1932      	adds	r2, r6, r4
 800b28c:	2301      	movs	r3, #1
 800b28e:	4639      	mov	r1, r7
 800b290:	7868      	ldrb	r0, [r5, #1]
 800b292:	f7ff fc9b 	bl	800abcc <disk_write>
 800b296:	2800      	cmp	r0, #0
 800b298:	d0f3      	beq.n	800b282 <dir_clear+0x36>
 800b29a:	896b      	ldrh	r3, [r5, #10]
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800b29c:	1ae0      	subs	r0, r4, r3
 800b29e:	bf18      	it	ne
 800b2a0:	2001      	movne	r0, #1
}
 800b2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b2a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	7840      	ldrb	r0, [r0, #1]
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7ff fc8e 	bl	800abcc <disk_write>
 800b2b0:	b990      	cbnz	r0, 800b2d8 <dir_clear+0x8c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b2b2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800b2b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b2b8:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800b2ba:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d2cc      	bcs.n	800b25a <dir_clear+0xe>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800b2c0:	78eb      	ldrb	r3, [r5, #3]
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d1c9      	bne.n	800b25a <dir_clear+0xe>
 800b2c6:	440a      	add	r2, r1
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	7868      	ldrb	r0, [r5, #1]
 800b2ce:	f7ff fc7d 	bl	800abcc <disk_write>
	return res;
 800b2d2:	e7c2      	b.n	800b25a <dir_clear+0xe>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	e7c9      	b.n	800b26c <dir_clear+0x20>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b2d8:	2001      	movs	r0, #1
}
 800b2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800b2dc:	461c      	mov	r4, r3
 800b2de:	e7dd      	b.n	800b29c <dir_clear+0x50>

0800b2e0 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800b2e0:	b570      	push	{r4, r5, r6, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800b2e2:	f04f 36ff 	mov.w	r6, #4294967295
 800b2e6:	2300      	movs	r3, #0
{
 800b2e8:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 800b2ea:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800b2ec:	7103      	strb	r3, [r0, #4]
 800b2ee:	63c6      	str	r6, [r0, #60]	; 0x3c
	if (sect != fs->winsect) {	/* Window offset changed? */
 800b2f0:	d00c      	beq.n	800b30c <check_fs+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	460a      	mov	r2, r1
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800b2fc:	7840      	ldrb	r0, [r0, #1]
 800b2fe:	f7ff fc55 	bl	800abac <disk_read>
 800b302:	b110      	cbz	r0, 800b30a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800b304:	2004      	movs	r0, #4
			fs->winsect = sect;
 800b306:	63e6      	str	r6, [r4, #60]	; 0x3c
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
}
 800b308:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sect;
 800b30a:	63e5      	str	r5, [r4, #60]	; 0x3c
	sign = ld_word(fs->win + BS_55AA);
 800b30c:	f8b4 523e 	ldrh.w	r5, [r4, #574]	; 0x23e
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800b310:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b314:	429d      	cmp	r5, r3
 800b316:	d033      	beq.n	800b380 <check_fs+0xa0>
	b = fs->win[BS_JmpBoot];
 800b318:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800b31c:	2beb      	cmp	r3, #235	; 0xeb
 800b31e:	d005      	beq.n	800b32c <check_fs+0x4c>
 800b320:	3318      	adds	r3, #24
 800b322:	b2db      	uxtb	r3, r3
 800b324:	2b01      	cmp	r3, #1
 800b326:	d901      	bls.n	800b32c <check_fs+0x4c>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800b328:	2003      	movs	r0, #3
}
 800b32a:	bd70      	pop	{r4, r5, r6, pc}
		w = ld_word(fs->win + BPB_BytsPerSec);
 800b32c:	f8b4 304b 	ldrh.w	r3, [r4, #75]	; 0x4b
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800b330:	1e5a      	subs	r2, r3, #1
 800b332:	421a      	tst	r2, r3
 800b334:	d1f8      	bne.n	800b328 <check_fs+0x48>
 800b336:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		b = fs->win[BPB_SecPerClus];
 800b33a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800b33e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800b342:	d8f1      	bhi.n	800b328 <check_fs+0x48>
 800b344:	2a00      	cmp	r2, #0
 800b346:	d0ef      	beq.n	800b328 <check_fs+0x48>
 800b348:	1e53      	subs	r3, r2, #1
 800b34a:	4213      	tst	r3, r2
 800b34c:	d1ec      	bne.n	800b328 <check_fs+0x48>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800b34e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800b352:	2b00      	cmp	r3, #0
 800b354:	d03b      	beq.n	800b3ce <check_fs+0xee>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800b356:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800b35a:	3b01      	subs	r3, #1
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d836      	bhi.n	800b3ce <check_fs+0xee>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800b360:	f8b4 3051 	ldrh.w	r3, [r4, #81]	; 0x51
 800b364:	b39b      	cbz	r3, 800b3ce <check_fs+0xee>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800b366:	f8b4 3053 	ldrh.w	r3, [r4, #83]	; 0x53
 800b36a:	2b7f      	cmp	r3, #127	; 0x7f
 800b36c:	d803      	bhi.n	800b376 <check_fs+0x96>
	rv = rv << 8 | ptr[0];
 800b36e:	6e23      	ldr	r3, [r4, #96]	; 0x60
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800b370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b374:	d32b      	bcc.n	800b3ce <check_fs+0xee>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800b376:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800b37a:	b343      	cbz	r3, 800b3ce <check_fs+0xee>
			return 0;	/* It is an FAT32 VBR */
 800b37c:	2000      	movs	r0, #0
}
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800b380:	220b      	movs	r2, #11
 800b382:	4919      	ldr	r1, [pc, #100]	; (800b3e8 <check_fs+0x108>)
 800b384:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b388:	f006 ff3d 	bl	8012206 <memcmp>
 800b38c:	b1e8      	cbz	r0, 800b3ca <check_fs+0xea>
	b = fs->win[BS_JmpBoot];
 800b38e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800b392:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800b396:	2ae9      	cmp	r2, #233	; 0xe9
 800b398:	d001      	beq.n	800b39e <check_fs+0xbe>
 800b39a:	2be8      	cmp	r3, #232	; 0xe8
 800b39c:	d113      	bne.n	800b3c6 <check_fs+0xe6>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800b39e:	2208      	movs	r2, #8
 800b3a0:	4912      	ldr	r1, [pc, #72]	; (800b3ec <check_fs+0x10c>)
 800b3a2:	f104 0092 	add.w	r0, r4, #146	; 0x92
 800b3a6:	f006 ff2e 	bl	8012206 <memcmp>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d0ac      	beq.n	800b308 <check_fs+0x28>
		w = ld_word(fs->win + BPB_BytsPerSec);
 800b3ae:	f8b4 304b 	ldrh.w	r3, [r4, #75]	; 0x4b
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800b3b2:	1e5a      	subs	r2, r3, #1
 800b3b4:	421a      	tst	r2, r3
 800b3b6:	d106      	bne.n	800b3c6 <check_fs+0xe6>
 800b3b8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		b = fs->win[BPB_SecPerClus];
 800b3bc:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800b3c0:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800b3c4:	d90a      	bls.n	800b3dc <check_fs+0xfc>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800b3c6:	2002      	movs	r0, #2
}
 800b3c8:	bd70      	pop	{r4, r5, r6, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800b3ca:	2001      	movs	r0, #1
}
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800b3ce:	f64a 2055 	movw	r0, #43605	; 0xaa55
 800b3d2:	4285      	cmp	r5, r0
 800b3d4:	bf14      	ite	ne
 800b3d6:	2003      	movne	r0, #3
 800b3d8:	2002      	moveq	r0, #2
}
 800b3da:	bd70      	pop	{r4, r5, r6, pc}
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800b3dc:	2a00      	cmp	r2, #0
 800b3de:	d0f2      	beq.n	800b3c6 <check_fs+0xe6>
 800b3e0:	1e53      	subs	r3, r2, #1
 800b3e2:	4213      	tst	r3, r2
 800b3e4:	d0b3      	beq.n	800b34e <check_fs+0x6e>
 800b3e6:	e7ee      	b.n	800b3c6 <check_fs+0xe6>
 800b3e8:	080155e8 	.word	0x080155e8
 800b3ec:	080155f4 	.word	0x080155f4

0800b3f0 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800b3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800b3f4:	2300      	movs	r3, #0
	tt = tp = *path;
 800b3f6:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800b3f8:	600b      	str	r3, [r1, #0]
	if (!tp) return vol;	/* Invalid path name? */
 800b3fa:	b16c      	cbz	r4, 800b418 <mount_volume+0x28>
 800b3fc:	4625      	mov	r5, r4
		tc = *tt++;
 800b3fe:	f815 3b01 	ldrb.w	r3, [r5], #1
	} while (!IsTerminator(tc) && tc != ':');
 800b402:	2b1f      	cmp	r3, #31
 800b404:	d90c      	bls.n	800b420 <mount_volume+0x30>
 800b406:	2b3a      	cmp	r3, #58	; 0x3a
 800b408:	d1f9      	bne.n	800b3fe <mount_volume+0xe>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800b40a:	7823      	ldrb	r3, [r4, #0]
 800b40c:	2b30      	cmp	r3, #48	; 0x30
 800b40e:	d103      	bne.n	800b418 <mount_volume+0x28>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800b410:	3402      	adds	r4, #2
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800b412:	42a5      	cmp	r5, r4
 800b414:	f000 8118 	beq.w	800b648 <mount_volume+0x258>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800b418:	240b      	movs	r4, #11
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
}
 800b41a:	4620      	mov	r0, r4
 800b41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800b420:	2b3a      	cmp	r3, #58	; 0x3a
 800b422:	d0f2      	beq.n	800b40a <mount_volume+0x1a>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800b424:	4b89      	ldr	r3, [pc, #548]	; (800b64c <mount_volume+0x25c>)
 800b426:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800b428:	2d00      	cmp	r5, #0
 800b42a:	d03e      	beq.n	800b4aa <mount_volume+0xba>
	*rfs = fs;							/* Return pointer to the filesystem object */
 800b42c:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b42e:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800b432:	782b      	ldrb	r3, [r5, #0]
 800b434:	b123      	cbz	r3, 800b440 <mount_volume+0x50>
		stat = disk_status(fs->pdrv);
 800b436:	7868      	ldrb	r0, [r5, #1]
 800b438:	f7ff fb9c 	bl	800ab74 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b43c:	07c7      	lsls	r7, r0, #31
 800b43e:	d527      	bpl.n	800b490 <mount_volume+0xa0>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800b440:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800b442:	7868      	ldrb	r0, [r5, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800b444:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800b446:	f7ff fb9f 	bl	800ab88 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b44a:	07c6      	lsls	r6, r0, #31
 800b44c:	d429      	bmi.n	800b4a2 <mount_volume+0xb2>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b44e:	b10c      	cbz	r4, 800b454 <mount_volume+0x64>
 800b450:	0740      	lsls	r0, r0, #29
 800b452:	d422      	bmi.n	800b49a <mount_volume+0xaa>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b454:	f105 020c 	add.w	r2, r5, #12
 800b458:	2102      	movs	r1, #2
 800b45a:	7868      	ldrb	r0, [r5, #1]
 800b45c:	f7ff fbc6 	bl	800abec <disk_ioctl>
 800b460:	4604      	mov	r4, r0
 800b462:	b988      	cbnz	r0, 800b488 <mount_volume+0x98>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b464:	89ab      	ldrh	r3, [r5, #12]
 800b466:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800b46a:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800b46e:	d80b      	bhi.n	800b488 <mount_volume+0x98>
 800b470:	1e5a      	subs	r2, r3, #1
 800b472:	421a      	tst	r2, r3
 800b474:	d108      	bne.n	800b488 <mount_volume+0x98>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800b476:	4601      	mov	r1, r0
 800b478:	4628      	mov	r0, r5
 800b47a:	f7ff ff31 	bl	800b2e0 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800b47e:	2802      	cmp	r0, #2
 800b480:	d015      	beq.n	800b4ae <mount_volume+0xbe>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800b482:	2804      	cmp	r0, #4
 800b484:	f040 8160 	bne.w	800b748 <mount_volume+0x358>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b488:	2401      	movs	r4, #1
}
 800b48a:	4620      	mov	r0, r4
 800b48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b490:	2c00      	cmp	r4, #0
 800b492:	d0fa      	beq.n	800b48a <mount_volume+0x9a>
 800b494:	f010 0404 	ands.w	r4, r0, #4
 800b498:	d0f7      	beq.n	800b48a <mount_volume+0x9a>
				return FR_WRITE_PROTECTED;
 800b49a:	240a      	movs	r4, #10
}
 800b49c:	4620      	mov	r0, r4
 800b49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b4a2:	2403      	movs	r4, #3
}
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800b4aa:	240c      	movs	r4, #12
 800b4ac:	e7ed      	b.n	800b48a <mount_volume+0x9a>
	rv = rv << 8 | ptr[0];
 800b4ae:	f8d5 1206 	ldr.w	r1, [r5, #518]	; 0x206
 800b4b2:	f8d5 7216 	ldr.w	r7, [r5, #534]	; 0x216
 800b4b6:	f8d5 6226 	ldr.w	r6, [r5, #550]	; 0x226
 800b4ba:	f8d5 8236 	ldr.w	r8, [r5, #566]	; 0x236
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b4be:	b959      	cbnz	r1, 800b4d8 <mount_volume+0xe8>
 800b4c0:	2f00      	cmp	r7, #0
 800b4c2:	f040 8095 	bne.w	800b5f0 <mount_volume+0x200>
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	f040 809c 	bne.w	800b604 <mount_volume+0x214>
 800b4cc:	f1b8 0f00 	cmp.w	r8, #0
 800b4d0:	f040 80a3 	bne.w	800b61a <mount_volume+0x22a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b4d4:	240d      	movs	r4, #13
 800b4d6:	e7d8      	b.n	800b48a <mount_volume+0x9a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f7ff ff01 	bl	800b2e0 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800b4de:	2801      	cmp	r0, #1
 800b4e0:	d8ee      	bhi.n	800b4c0 <mount_volume+0xd0>
	if (fmt == 1) {
 800b4e2:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800b4e4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
	if (fmt == 1) {
 800b4e6:	f000 80a3 	beq.w	800b630 <mount_volume+0x240>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b4ea:	89a8      	ldrh	r0, [r5, #12]
 800b4ec:	f8b5 304b 	ldrh.w	r3, [r5, #75]	; 0x4b
 800b4f0:	4283      	cmp	r3, r0
 800b4f2:	d1ef      	bne.n	800b4d4 <mount_volume+0xe4>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b4f4:	f8b5 6056 	ldrh.w	r6, [r5, #86]	; 0x56
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b4f8:	b906      	cbnz	r6, 800b4fc <mount_volume+0x10c>
	rv = rv << 8 | ptr[0];
 800b4fa:	6e6e      	ldr	r6, [r5, #100]	; 0x64
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b4fc:	f895 c050 	ldrb.w	ip, [r5, #80]	; 0x50
		fs->fsize = fasize;
 800b500:	626e      	str	r6, [r5, #36]	; 0x24
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b502:	f10c 33ff 	add.w	r3, ip, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b506:	f885 c003 	strb.w	ip, [r5, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d8e2      	bhi.n	800b4d4 <mount_volume+0xe4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b50e:	f895 904d 	ldrb.w	r9, [r5, #77]	; 0x4d
 800b512:	fa1f f389 	uxth.w	r3, r9
 800b516:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0db      	beq.n	800b4d4 <mount_volume+0xe4>
 800b51c:	f109 33ff 	add.w	r3, r9, #4294967295
 800b520:	ea13 0f09 	tst.w	r3, r9
 800b524:	d1d6      	bne.n	800b4d4 <mount_volume+0xe4>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b526:	f8b5 e051 	ldrh.w	lr, [r5, #81]	; 0x51
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b52a:	0943      	lsrs	r3, r0, #5
 800b52c:	fbbe f7f3 	udiv	r7, lr, r3
 800b530:	fb03 e317 	mls	r3, r3, r7, lr
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b534:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b538:	b29b      	uxth	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1ca      	bne.n	800b4d4 <mount_volume+0xe4>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b53e:	f8b5 3053 	ldrh.w	r3, [r5, #83]	; 0x53
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b542:	b903      	cbnz	r3, 800b546 <mount_volume+0x156>
	rv = rv << 8 | ptr[0];
 800b544:	6e2b      	ldr	r3, [r5, #96]	; 0x60
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b546:	f8b5 204e 	ldrh.w	r2, [r5, #78]	; 0x4e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b54a:	2a00      	cmp	r2, #0
 800b54c:	d0c2      	beq.n	800b4d4 <mount_volume+0xe4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b54e:	fb06 fc0c 	mul.w	ip, r6, ip
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b552:	4417      	add	r7, r2
 800b554:	4467      	add	r7, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b556:	42bb      	cmp	r3, r7
 800b558:	d3bc      	bcc.n	800b4d4 <mount_volume+0xe4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b55a:	eba3 0807 	sub.w	r8, r3, r7
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800b55e:	f8df a100 	ldr.w	sl, [pc, #256]	; 800b660 <mount_volume+0x270>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b562:	fbb8 f3f9 	udiv	r3, r8, r9
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800b566:	4553      	cmp	r3, sl
 800b568:	d8b4      	bhi.n	800b4d4 <mount_volume+0xe4>
 800b56a:	45c8      	cmp	r8, r9
 800b56c:	d3b2      	bcc.n	800b4d4 <mount_volume+0xe4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b56e:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 800b572:	4543      	cmp	r3, r8
 800b574:	f200 80ee 	bhi.w	800b754 <mount_volume+0x364>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b578:	f640 78f5 	movw	r8, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b57c:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
 800b57e:	440f      	add	r7, r1
		fs->volbase = bsect;							/* Volume start sector */
 800b580:	62a9      	str	r1, [r5, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b582:	4543      	cmp	r3, r8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b584:	f103 0302 	add.w	r3, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800b588:	636f      	str	r7, [r5, #52]	; 0x34
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b58a:	622b      	str	r3, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b58c:	62ea      	str	r2, [r5, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b58e:	f200 8135 	bhi.w	800b7fc <mount_volume+0x40c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b592:	f1be 0f00 	cmp.w	lr, #0
 800b596:	d09d      	beq.n	800b4d4 <mount_volume+0xe4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b598:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800b59c:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5a0:	4462      	add	r2, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5a2:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800b5a6:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5a8:	632a      	str	r2, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5aa:	1e42      	subs	r2, r0, #1
 800b5ac:	4413      	add	r3, r2
 800b5ae:	fbb3 f3f0 	udiv	r3, r3, r0
 800b5b2:	429e      	cmp	r6, r3
 800b5b4:	d38e      	bcc.n	800b4d4 <mount_volume+0xe4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5b6:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b5ba:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5bc:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fs->fsi_flag = 0x80;
 800b5c0:	716a      	strb	r2, [r5, #5]
	fs->id = ++Fsid;		/* Volume mount ID */
 800b5c2:	4823      	ldr	r0, [pc, #140]	; (800b650 <mount_volume+0x260>)
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b5c4:	4a23      	ldr	r2, [pc, #140]	; (800b654 <mount_volume+0x264>)
	fs->id = ++Fsid;		/* Volume mount ID */
 800b5c6:	8803      	ldrh	r3, [r0, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b5c8:	612a      	str	r2, [r5, #16]
	fs->id = ++Fsid;		/* Volume mount ID */
 800b5ca:	3301      	adds	r3, #1
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800b5cc:	4a22      	ldr	r2, [pc, #136]	; (800b658 <mount_volume+0x268>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800b5ce:	7029      	strb	r1, [r5, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800b5d0:	b29b      	uxth	r3, r3
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800b5d2:	616a      	str	r2, [r5, #20]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b5d4:	4a21      	ldr	r2, [pc, #132]	; (800b65c <mount_volume+0x26c>)
	fs->id = ++Fsid;		/* Volume mount ID */
 800b5d6:	8003      	strh	r3, [r0, #0]
 800b5d8:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b5da:	6813      	ldr	r3, [r2, #0]
 800b5dc:	429d      	cmp	r5, r3
 800b5de:	f000 80de 	beq.w	800b79e <mount_volume+0x3ae>
 800b5e2:	6913      	ldr	r3, [r2, #16]
 800b5e4:	429d      	cmp	r5, r3
 800b5e6:	f47f af50 	bne.w	800b48a <mount_volume+0x9a>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	6113      	str	r3, [r2, #16]
 800b5ee:	e74c      	b.n	800b48a <mount_volume+0x9a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f7ff fe74 	bl	800b2e0 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800b5f8:	2801      	cmp	r0, #1
 800b5fa:	f67f af72 	bls.w	800b4e2 <mount_volume+0xf2>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	f43f af64 	beq.w	800b4cc <mount_volume+0xdc>
 800b604:	4631      	mov	r1, r6
 800b606:	4628      	mov	r0, r5
 800b608:	f7ff fe6a 	bl	800b2e0 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800b60c:	2801      	cmp	r0, #1
 800b60e:	f67f af68 	bls.w	800b4e2 <mount_volume+0xf2>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800b612:	f1b8 0f00 	cmp.w	r8, #0
 800b616:	f43f af5d 	beq.w	800b4d4 <mount_volume+0xe4>
 800b61a:	4641      	mov	r1, r8
 800b61c:	4628      	mov	r0, r5
 800b61e:	f7ff fe5f 	bl	800b2e0 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800b622:	2801      	cmp	r0, #1
 800b624:	f67f af5d 	bls.w	800b4e2 <mount_volume+0xf2>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800b628:	2804      	cmp	r0, #4
 800b62a:	f43f af2d 	beq.w	800b488 <mount_volume+0x98>
 800b62e:	e751      	b.n	800b4d4 <mount_volume+0xe4>
 800b630:	f105 034a 	add.w	r3, r5, #74	; 0x4a
 800b634:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 800b638:	e001      	b.n	800b63e <mount_volume+0x24e>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800b63a:	4283      	cmp	r3, r0
 800b63c:	d012      	beq.n	800b664 <mount_volume+0x274>
 800b63e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b642:	2a00      	cmp	r2, #0
 800b644:	d0f9      	beq.n	800b63a <mount_volume+0x24a>
 800b646:	e745      	b.n	800b4d4 <mount_volume+0xe4>
			*path = tt;		/* Snip the drive prefix off */
 800b648:	6005      	str	r5, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b64a:	e6eb      	b.n	800b424 <mount_volume+0x34>
 800b64c:	24000774 	.word	0x24000774
 800b650:	24000798 	.word	0x24000798
 800b654:	2400079c 	.word	0x2400079c
 800b658:	24000514 	.word	0x24000514
 800b65c:	24000778 	.word	0x24000778
 800b660:	0ffffff5 	.word	0x0ffffff5
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800b664:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
 800b668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b66c:	f47f af32 	bne.w	800b4d4 <mount_volume+0xe4>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800b670:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
 800b674:	2301      	movs	r3, #1
 800b676:	4083      	lsls	r3, r0
 800b678:	89a8      	ldrh	r0, [r5, #12]
 800b67a:	4283      	cmp	r3, r0
 800b67c:	f47f af2a 	bne.w	800b4d4 <mount_volume+0xe4>
	rv = rv << 8 | ptr[0];
 800b680:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800b684:	f04f 33ff 	mov.w	r3, #4294967295
	rv = rv << 8 | ptr[0];
 800b688:	f8d5 708c 	ldr.w	r7, [r5, #140]	; 0x8c
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800b68c:	1840      	adds	r0, r0, r1
 800b68e:	f147 0700 	adc.w	r7, r7, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800b692:	4283      	cmp	r3, r0
 800b694:	eb72 0307 	sbcs.w	r3, r2, r7
 800b698:	f4ff af1c 	bcc.w	800b4d4 <mount_volume+0xe4>
	rv = rv << 8 | ptr[0];
 800b69c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800b6a0:	626b      	str	r3, [r5, #36]	; 0x24
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800b6a2:	f895 30ae 	ldrb.w	r3, [r5, #174]	; 0xae
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800b6a6:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800b6a8:	70eb      	strb	r3, [r5, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800b6aa:	f47f af13 	bne.w	800b4d4 <mount_volume+0xe4>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800b6ae:	f895 60ad 	ldrb.w	r6, [r5, #173]	; 0xad
 800b6b2:	40b3      	lsls	r3, r6
 800b6b4:	b29e      	uxth	r6, r3
 800b6b6:	816e      	strh	r6, [r5, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800b6b8:	2e00      	cmp	r6, #0
 800b6ba:	f43f af0b 	beq.w	800b4d4 <mount_volume+0xe4>
	rv = rv << 8 | ptr[0];
 800b6be:	f8d5 609c 	ldr.w	r6, [r5, #156]	; 0x9c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800b6c2:	f8df c194 	ldr.w	ip, [pc, #404]	; 800b858 <mount_volume+0x468>
 800b6c6:	4566      	cmp	r6, ip
 800b6c8:	f63f af04 	bhi.w	800b4d4 <mount_volume+0xe4>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b6cc:	b29b      	uxth	r3, r3
		fs->volbase = bsect;
 800b6ce:	62a9      	str	r1, [r5, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b6d0:	fb06 f303 	mul.w	r3, r6, r3
		fs->n_fatent = nclst + 2;
 800b6d4:	3602      	adds	r6, #2
 800b6d6:	622e      	str	r6, [r5, #32]
	rv = rv << 8 | ptr[0];
 800b6d8:	f8d5 6098 	ldr.w	r6, [r5, #152]	; 0x98
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800b6dc:	440e      	add	r6, r1
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b6de:	199b      	adds	r3, r3, r6
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800b6e0:	636e      	str	r6, [r5, #52]	; 0x34
	rv = rv << 8 | ptr[0];
 800b6e2:	f8d5 6090 	ldr.w	r6, [r5, #144]	; 0x90
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800b6e6:	440e      	add	r6, r1
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b6e8:	eb42 0102 	adc.w	r1, r2, r2
 800b6ec:	4298      	cmp	r0, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800b6ee:	62ee      	str	r6, [r5, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800b6f0:	eb77 0101 	sbcs.w	r1, r7, r1
 800b6f4:	f4ff aeee 	bcc.w	800b4d4 <mount_volume+0xe4>
	rv = rv << 8 | ptr[0];
 800b6f8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
		so = i = 0;
 800b6fc:	4616      	mov	r6, r2
 800b6fe:	4617      	mov	r7, r2
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800b700:	632b      	str	r3, [r5, #48]	; 0x30
			if (i == 0) {
 800b702:	b9a6      	cbnz	r6, 800b72e <mount_volume+0x33e>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800b704:	8969      	ldrh	r1, [r5, #10]
 800b706:	42b9      	cmp	r1, r7
 800b708:	f67f aee4 	bls.w	800b4d4 <mount_volume+0xe4>
	clst -= 2;		/* Cluster number is origin from 2 */
 800b70c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b70e:	6a2b      	ldr	r3, [r5, #32]
	clst -= 2;		/* Cluster number is origin from 2 */
 800b710:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b712:	3b02      	subs	r3, #2
 800b714:	429a      	cmp	r2, r3
 800b716:	d21b      	bcs.n	800b750 <mount_volume+0x360>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b718:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b71a:	fb02 3301 	mla	r3, r2, r1, r3
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800b71e:	19d9      	adds	r1, r3, r7
 800b720:	4628      	mov	r0, r5
				so++;
 800b722:	3701      	adds	r7, #1
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800b724:	f7ff fbc4 	bl	800aeb0 <move_window>
 800b728:	2800      	cmp	r0, #0
 800b72a:	f47f aead 	bne.w	800b488 <mount_volume+0x98>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800b72e:	19ab      	adds	r3, r5, r6
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800b730:	f106 0120 	add.w	r1, r6, #32
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800b734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b738:	2b81      	cmp	r3, #129	; 0x81
 800b73a:	d033      	beq.n	800b7a4 <mount_volume+0x3b4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800b73c:	89ab      	ldrh	r3, [r5, #12]
 800b73e:	fbb1 f2f3 	udiv	r2, r1, r3
 800b742:	fb03 1612 	mls	r6, r3, r2, r1
			if (i == 0) {
 800b746:	e7dc      	b.n	800b702 <mount_volume+0x312>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b748:	2801      	cmp	r0, #1
 800b74a:	f67f aeca 	bls.w	800b4e2 <mount_volume+0xf2>
 800b74e:	e6c1      	b.n	800b4d4 <mount_volume+0xe4>
 800b750:	4639      	mov	r1, r7
 800b752:	e7e5      	b.n	800b720 <mount_volume+0x330>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b754:	440a      	add	r2, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b756:	f103 0c02 	add.w	ip, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800b75a:	440f      	add	r7, r1
		fs->volbase = bsect;							/* Volume start sector */
 800b75c:	62a9      	str	r1, [r5, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b75e:	62ea      	str	r2, [r5, #44]	; 0x2c
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b760:	f8b5 206a 	ldrh.w	r2, [r5, #106]	; 0x6a
		fs->database = bsect + sysect;					/* Data start sector */
 800b764:	636f      	str	r7, [r5, #52]	; 0x34
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b766:	ea5e 0202 	orrs.w	r2, lr, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b76a:	f8c5 c020 	str.w	ip, [r5, #32]
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b76e:	f47f aeb1 	bne.w	800b4d4 <mount_volume+0xe4>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b772:	1e43      	subs	r3, r0, #1
	rv = rv << 8 | ptr[0];
 800b774:	6eea      	ldr	r2, [r5, #108]	; 0x6c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b776:	eb03 038c 	add.w	r3, r3, ip, lsl #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b77a:	632a      	str	r2, [r5, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b77c:	fbb3 f3f0 	udiv	r3, r3, r0
 800b780:	429e      	cmp	r6, r3
 800b782:	f4ff aea7 	bcc.w	800b4d4 <mount_volume+0xe4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b786:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b78a:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b78c:	e9c5 3306 	strd	r3, r3, [r5, #24]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b790:	f8b5 3070 	ldrh.w	r3, [r5, #112]	; 0x70
		fs->fsi_flag = 0x80;
 800b794:	716a      	strb	r2, [r5, #5]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b796:	2b01      	cmp	r3, #1
 800b798:	d038      	beq.n	800b80c <mount_volume+0x41c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b79a:	2103      	movs	r1, #3
 800b79c:	e711      	b.n	800b5c2 <mount_volume+0x1d2>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	e71e      	b.n	800b5e2 <mount_volume+0x1f2>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 800b7a4:	f105 0740 	add.w	r7, r5, #64	; 0x40
	rv = rv << 8 | ptr[0];
 800b7a8:	19ba      	adds	r2, r7, r6
 800b7aa:	6956      	ldr	r6, [r2, #20]
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800b7ac:	2e01      	cmp	r6, #1
 800b7ae:	f67f ae91 	bls.w	800b4d4 <mount_volume+0xe4>
 800b7b2:	6a2b      	ldr	r3, [r5, #32]
 800b7b4:	42b3      	cmp	r3, r6
 800b7b6:	f67f ae8d 	bls.w	800b4d4 <mount_volume+0xe4>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800b7ba:	1eb2      	subs	r2, r6, #2
 800b7bc:	8969      	ldrh	r1, [r5, #10]
 800b7be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b7c0:	fb02 3301 	mla	r3, r2, r1, r3
 800b7c4:	63ab      	str	r3, [r5, #56]	; 0x38
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	089a      	lsrs	r2, r3, #2
 800b7ca:	e00d      	b.n	800b7e8 <mount_volume+0x3f8>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800b7cc:	89ab      	ldrh	r3, [r5, #12]
 800b7ce:	089a      	lsrs	r2, r3, #2
 800b7d0:	fbb6 f1f2 	udiv	r1, r6, r2
 800b7d4:	fb02 6311 	mls	r3, r2, r1, r6
	rv = rv << 8 | ptr[0];
 800b7d8:	3601      	adds	r6, #1
 800b7da:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800b7de:	1c59      	adds	r1, r3, #1
 800b7e0:	d034      	beq.n	800b84c <mount_volume+0x45c>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 800b7e2:	429e      	cmp	r6, r3
 800b7e4:	f47f ae76 	bne.w	800b4d4 <mount_volume+0xe4>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800b7e8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	fbb6 f2f2 	udiv	r2, r6, r2
 800b7f0:	4411      	add	r1, r2
 800b7f2:	f7ff fb5d 	bl	800aeb0 <move_window>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d0e8      	beq.n	800b7cc <mount_volume+0x3dc>
 800b7fa:	e645      	b.n	800b488 <mount_volume+0x98>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b7fc:	f1be 0f00 	cmp.w	lr, #0
 800b800:	f43f ae68 	beq.w	800b4d4 <mount_volume+0xe4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b804:	4462      	add	r2, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	2102      	movs	r1, #2
 800b80a:	e6cd      	b.n	800b5a8 <mount_volume+0x1b8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b80c:	3101      	adds	r1, #1
 800b80e:	4628      	mov	r0, r5
 800b810:	f7ff fb4e 	bl	800aeb0 <move_window>
 800b814:	2800      	cmp	r0, #0
 800b816:	d1c0      	bne.n	800b79a <mount_volume+0x3aa>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800b818:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b81c:	f8b5 223e 	ldrh.w	r2, [r5, #574]	; 0x23e
			fs->fsi_flag = 0;
 800b820:	7168      	strb	r0, [r5, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800b822:	429a      	cmp	r2, r3
 800b824:	d1b9      	bne.n	800b79a <mount_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 800b826:	6c2a      	ldr	r2, [r5, #64]	; 0x40
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b828:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <mount_volume+0x464>)
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d1b5      	bne.n	800b79a <mount_volume+0x3aa>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b82e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800b832:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b836:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b83a:	3320      	adds	r3, #32
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d1ac      	bne.n	800b79a <mount_volume+0x3aa>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b840:	2103      	movs	r1, #3
 800b842:	e9d5 328a 	ldrd	r3, r2, [r5, #552]	; 0x228
 800b846:	e9c5 2306 	strd	r2, r3, [r5, #24]
 800b84a:	e6ba      	b.n	800b5c2 <mount_volume+0x1d2>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b84c:	2104      	movs	r1, #4
 800b84e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fmt = FS_EXFAT;			/* FAT sub-type */
 800b852:	e6b6      	b.n	800b5c2 <mount_volume+0x1d2>
 800b854:	41615252 	.word	0x41615252
 800b858:	7ffffffd 	.word	0x7ffffffd

0800b85c <load_xdir>:
{
 800b85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800b860:	6805      	ldr	r5, [r0, #0]
{
 800b862:	b082      	sub	sp, #8
	res = move_window(dp->obj.fs, dp->sect);
 800b864:	6b87      	ldr	r7, [r0, #56]	; 0x38
{
 800b866:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 800b868:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800b86a:	696e      	ldr	r6, [r5, #20]
	if (sect != fs->winsect) {	/* Window offset changed? */
 800b86c:	4297      	cmp	r7, r2
 800b86e:	d013      	beq.n	800b898 <load_xdir+0x3c>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b870:	792b      	ldrb	r3, [r5, #4]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b872:	f105 0140 	add.w	r1, r5, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b876:	2b00      	cmp	r3, #0
 800b878:	f040 8094 	bne.w	800b9a4 <load_xdir+0x148>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800b87c:	2301      	movs	r3, #1
 800b87e:	463a      	mov	r2, r7
 800b880:	7868      	ldrb	r0, [r5, #1]
 800b882:	f7ff f993 	bl	800abac <disk_read>
 800b886:	b130      	cbz	r0, 800b896 <load_xdir+0x3a>
			fs->winsect = sect;
 800b888:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800b88c:	2001      	movs	r0, #1
			fs->winsect = sect;
 800b88e:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 800b890:	b002      	add	sp, #8
 800b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fs->winsect = sect;
 800b896:	63ef      	str	r7, [r5, #60]	; 0x3c
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800b898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b89a:	781a      	ldrb	r2, [r3, #0]
 800b89c:	2a85      	cmp	r2, #133	; 0x85
 800b89e:	d003      	beq.n	800b8a8 <load_xdir+0x4c>
 800b8a0:	2002      	movs	r0, #2
}
 800b8a2:	b002      	add	sp, #8
 800b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8a8:	681f      	ldr	r7, [r3, #0]
 800b8aa:	6858      	ldr	r0, [r3, #4]
 800b8ac:	6899      	ldr	r1, [r3, #8]
 800b8ae:	68da      	ldr	r2, [r3, #12]
 800b8b0:	6037      	str	r7, [r6, #0]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b8b2:	7875      	ldrb	r5, [r6, #1]
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8b4:	6070      	str	r0, [r6, #4]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b8b6:	3501      	adds	r5, #1
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8b8:	60b1      	str	r1, [r6, #8]
 800b8ba:	60f2      	str	r2, [r6, #12]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b8bc:	016d      	lsls	r5, r5, #5
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8be:	691f      	ldr	r7, [r3, #16]
 800b8c0:	6958      	ldr	r0, [r3, #20]
 800b8c2:	6999      	ldr	r1, [r3, #24]
 800b8c4:	69da      	ldr	r2, [r3, #28]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b8c6:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8ca:	6137      	str	r7, [r6, #16]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b8cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800b8d0:	6170      	str	r0, [r6, #20]
 800b8d2:	61b1      	str	r1, [r6, #24]
 800b8d4:	61f2      	str	r2, [r6, #28]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b8d6:	d8e3      	bhi.n	800b8a0 <load_xdir+0x44>
	res = dir_next(dp, 0);
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f7ff fc69 	bl	800b1b0 <dir_next.constprop.0>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800b8de:	2804      	cmp	r0, #4
 800b8e0:	d0de      	beq.n	800b8a0 <load_xdir+0x44>
	if (res != FR_OK) return res;
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d1dd      	bne.n	800b8a2 <load_xdir+0x46>
	res = move_window(dp->obj.fs, dp->sect);
 800b8e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8e8:	6820      	ldr	r0, [r4, #0]
 800b8ea:	f7ff fae1 	bl	800aeb0 <move_window>
	if (res != FR_OK) return res;
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d1d7      	bne.n	800b8a2 <load_xdir+0x46>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 800b8f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8f4:	781a      	ldrb	r2, [r3, #0]
 800b8f6:	2ac0      	cmp	r2, #192	; 0xc0
 800b8f8:	d1d2      	bne.n	800b8a0 <load_xdir+0x44>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b8fa:	f8d3 c000 	ldr.w	ip, [r3]
 800b8fe:	685f      	ldr	r7, [r3, #4]
 800b900:	6898      	ldr	r0, [r3, #8]
 800b902:	68d9      	ldr	r1, [r3, #12]
 800b904:	f8c6 c020 	str.w	ip, [r6, #32]
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b908:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b90c:	62f1      	str	r1, [r6, #44]	; 0x2c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b90e:	322c      	adds	r2, #44	; 0x2c
 800b910:	4948      	ldr	r1, [pc, #288]	; (800ba34 <load_xdir+0x1d8>)
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b912:	6277      	str	r7, [r6, #36]	; 0x24
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b914:	fba1 1202 	umull	r1, r2, r1, r2
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b918:	62b0      	str	r0, [r6, #40]	; 0x28
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b91a:	08d2      	lsrs	r2, r2, #3
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b91c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800b920:	695f      	ldr	r7, [r3, #20]
 800b922:	6998      	ldr	r0, [r3, #24]
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b924:	ebb5 1f42 	cmp.w	r5, r2, lsl #5
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800b928:	69d9      	ldr	r1, [r3, #28]
 800b92a:	f8c6 c030 	str.w	ip, [r6, #48]	; 0x30
 800b92e:	6377      	str	r7, [r6, #52]	; 0x34
 800b930:	63b0      	str	r0, [r6, #56]	; 0x38
 800b932:	63f1      	str	r1, [r6, #60]	; 0x3c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b934:	d3b4      	bcc.n	800b8a0 <load_xdir+0x44>
	i = 2 * SZDIRE;	/* Name offset to load */
 800b936:	2740      	movs	r7, #64	; 0x40
 800b938:	e002      	b.n	800b940 <load_xdir+0xe4>
	} while ((i += SZDIRE) < sz_ent);
 800b93a:	3720      	adds	r7, #32
 800b93c:	42bd      	cmp	r5, r7
 800b93e:	d94f      	bls.n	800b9e0 <load_xdir+0x184>
		res = dir_next(dp, 0);
 800b940:	4620      	mov	r0, r4
 800b942:	f7ff fc35 	bl	800b1b0 <dir_next.constprop.0>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800b946:	2804      	cmp	r0, #4
 800b948:	d0aa      	beq.n	800b8a0 <load_xdir+0x44>
		if (res != FR_OK) return res;
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d1a9      	bne.n	800b8a2 <load_xdir+0x46>
		res = move_window(dp->obj.fs, dp->sect);
 800b94e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b950:	6820      	ldr	r0, [r4, #0]
 800b952:	f7ff faad 	bl	800aeb0 <move_window>
		if (res != FR_OK) return res;
 800b956:	2800      	cmp	r0, #0
 800b958:	d1a3      	bne.n	800b8a2 <load_xdir+0x46>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 800b95a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	2ac1      	cmp	r2, #193	; 0xc1
 800b960:	d19e      	bne.n	800b8a0 <load_xdir+0x44>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 800b962:	f5b7 7f18 	cmp.w	r7, #608	; 0x260
 800b966:	d2e8      	bcs.n	800b93a <load_xdir+0xde>
 800b968:	f8d3 8000 	ldr.w	r8, [r3]
 800b96c:	19f2      	adds	r2, r6, r7
 800b96e:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800b972:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800b976:	68d9      	ldr	r1, [r3, #12]
 800b978:	f846 8007 	str.w	r8, [r6, r7]
 800b97c:	f8c2 e004 	str.w	lr, [r2, #4]
 800b980:	f8c2 c008 	str.w	ip, [r2, #8]
 800b984:	60d1      	str	r1, [r2, #12]
 800b986:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b98a:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800b98e:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800b992:	69d9      	ldr	r1, [r3, #28]
 800b994:	f8c2 8010 	str.w	r8, [r2, #16]
 800b998:	f8c2 e014 	str.w	lr, [r2, #20]
 800b99c:	f8c2 c018 	str.w	ip, [r2, #24]
 800b9a0:	61d1      	str	r1, [r2, #28]
 800b9a2:	e7ca      	b.n	800b93a <load_xdir+0xde>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	7868      	ldrb	r0, [r5, #1]
 800b9a8:	9101      	str	r1, [sp, #4]
 800b9aa:	f7ff f90f 	bl	800abcc <disk_write>
 800b9ae:	b998      	cbnz	r0, 800b9d8 <load_xdir+0x17c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b9b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->wflag = 0;	/* Clear window dirty flag */
 800b9b2:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b9b4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800b9b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b9b8:	1ac3      	subs	r3, r0, r3
 800b9ba:	9901      	ldr	r1, [sp, #4]
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	f4bf af5d 	bcs.w	800b87c <load_xdir+0x20>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800b9c2:	78eb      	ldrb	r3, [r5, #3]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	f47f af59 	bne.w	800b87c <load_xdir+0x20>
 800b9ca:	4402      	add	r2, r0
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	7868      	ldrb	r0, [r5, #1]
 800b9d0:	f7ff f8fc 	bl	800abcc <disk_write>
 800b9d4:	9901      	ldr	r1, [sp, #4]
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b9d6:	e751      	b.n	800b87c <load_xdir+0x20>
 800b9d8:	2001      	movs	r0, #1
}
 800b9da:	b002      	add	sp, #8
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800b9e0:	f5b7 7f18 	cmp.w	r7, #608	; 0x260
 800b9e4:	f63f af5d 	bhi.w	800b8a2 <load_xdir+0x46>
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800b9e8:	7874      	ldrb	r4, [r6, #1]
	for (i = sum = 0; i < szblk; i++) {
 800b9ea:	2300      	movs	r3, #0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800b9ec:	3401      	adds	r4, #1
	for (i = sum = 0; i < szblk; i++) {
 800b9ee:	4619      	mov	r1, r3
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800b9f0:	0164      	lsls	r4, r4, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800b9f2:	2902      	cmp	r1, #2
 800b9f4:	d10e      	bne.n	800ba14 <load_xdir+0x1b8>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b9f6:	7932      	ldrb	r2, [r6, #4]
	for (i = sum = 0; i < szblk; i++) {
 800b9f8:	2106      	movs	r1, #6
 800b9fa:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800b9fe:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ba00:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800ba04:	7973      	ldrb	r3, [r6, #5]
 800ba06:	f3c2 004e 	ubfx	r0, r2, #1, #15
 800ba0a:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800ba0e:	fa10 f383 	uxtah	r3, r0, r3
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	5c72      	ldrb	r2, [r6, r1]
	for (i = sum = 0; i < szblk; i++) {
 800ba16:	3101      	adds	r1, #1
 800ba18:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800ba1c:	428c      	cmp	r4, r1
 800ba1e:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ba20:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 800ba24:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 800ba26:	d8e4      	bhi.n	800b9f2 <load_xdir+0x196>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ba28:	8870      	ldrh	r0, [r6, #2]
 800ba2a:	1ac0      	subs	r0, r0, r3
 800ba2c:	bf18      	it	ne
 800ba2e:	2001      	movne	r0, #1
 800ba30:	0040      	lsls	r0, r0, #1
 800ba32:	e736      	b.n	800b8a2 <load_xdir+0x46>
 800ba34:	88888889 	.word	0x88888889

0800ba38 <dir_read>:
{
 800ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800ba3c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800ba3e:	b083      	sub	sp, #12
 800ba40:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800ba42:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800ba44:	2e00      	cmp	r6, #0
 800ba46:	d041      	beq.n	800bacc <dir_read+0x94>
	BYTE ord = 0xFF, sum = 0xFF;
 800ba48:	f04f 0bff 	mov.w	fp, #255	; 0xff
 800ba4c:	4688      	mov	r8, r1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800ba4e:	f107 0a40 	add.w	sl, r7, #64	; 0x40
	BYTE ord = 0xFF, sum = 0xFF;
 800ba52:	46d9      	mov	r9, fp
	if (sect != fs->winsect) {	/* Window offset changed? */
 800ba54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba56:	4296      	cmp	r6, r2
 800ba58:	d013      	beq.n	800ba82 <dir_read+0x4a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800ba5a:	793b      	ldrb	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d15e      	bne.n	800bb1e <dir_read+0xe6>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800ba60:	2301      	movs	r3, #1
 800ba62:	4632      	mov	r2, r6
 800ba64:	4651      	mov	r1, sl
 800ba66:	7878      	ldrb	r0, [r7, #1]
 800ba68:	f7ff f8a0 	bl	800abac <disk_read>
 800ba6c:	b140      	cbz	r0, 800ba80 <dir_read+0x48>
			fs->winsect = sect;
 800ba6e:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800ba72:	2001      	movs	r0, #1
			fs->winsect = sect;
 800ba74:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ba76:	2300      	movs	r3, #0
 800ba78:	63ab      	str	r3, [r5, #56]	; 0x38
}
 800ba7a:	b003      	add	sp, #12
 800ba7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
 800ba80:	63fe      	str	r6, [r7, #60]	; 0x3c
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800ba82:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800ba84:	780b      	ldrb	r3, [r1, #0]
		if (b == 0) {
 800ba86:	b30b      	cbz	r3, 800bacc <dir_read+0x94>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ba88:	783a      	ldrb	r2, [r7, #0]
 800ba8a:	2a04      	cmp	r2, #4
 800ba8c:	d040      	beq.n	800bb10 <dir_read+0xd8>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ba8e:	7aca      	ldrb	r2, [r1, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ba90:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ba92:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ba96:	71aa      	strb	r2, [r5, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ba98:	d00a      	beq.n	800bab0 <dir_read+0x78>
 800ba9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba9c:	d008      	beq.n	800bab0 <dir_read+0x78>
 800ba9e:	f022 0020 	bic.w	r0, r2, #32
 800baa2:	f1a0 0008 	sub.w	r0, r0, #8
 800baa6:	fab0 f080 	clz	r0, r0
 800baaa:	0940      	lsrs	r0, r0, #5
 800baac:	4540      	cmp	r0, r8
 800baae:	d067      	beq.n	800bb80 <dir_read+0x148>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bab0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
				ord = 0xFF;
 800bab2:	f04f 09ff 	mov.w	r9, #255	; 0xff
	FATFS *fs = dp->obj.fs;
 800bab6:	682c      	ldr	r4, [r5, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bab8:	3320      	adds	r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800baba:	7822      	ldrb	r2, [r4, #0]
 800babc:	2a04      	cmp	r2, #4
 800babe:	bf0c      	ite	eq
 800bac0:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800bac4:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800bac8:	4293      	cmp	r3, r2
 800baca:	d301      	bcc.n	800bad0 <dir_read+0x98>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800bacc:	2004      	movs	r0, #4
 800bace:	e7d2      	b.n	800ba76 <dir_read+0x3e>
 800bad0:	6bae      	ldr	r6, [r5, #56]	; 0x38
 800bad2:	2e00      	cmp	r6, #0
 800bad4:	d0fa      	beq.n	800bacc <dir_read+0x94>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bad6:	89a2      	ldrh	r2, [r4, #12]
 800bad8:	fbb3 fcf2 	udiv	ip, r3, r2
 800badc:	fb02 301c 	mls	r0, r2, ip, r3
 800bae0:	b988      	cbnz	r0, 800bb06 <dir_read+0xce>
		dp->sect++;				/* Next sector */
 800bae2:	3601      	adds	r6, #1
		if (dp->clust == 0) {	/* Static table */
 800bae4:	6b69      	ldr	r1, [r5, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800bae6:	63ae      	str	r6, [r5, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800bae8:	bb09      	cbnz	r1, 800bb2e <dir_read+0xf6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800baea:	8922      	ldrh	r2, [r4, #8]
 800baec:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800baf0:	d9ec      	bls.n	800bacc <dir_read+0x94>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800baf2:	3440      	adds	r4, #64	; 0x40
	dp->dptr = ofs;						/* Current entry */
 800baf4:	632b      	str	r3, [r5, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800baf6:	440c      	add	r4, r1
 800baf8:	63ec      	str	r4, [r5, #60]	; 0x3c
	while (dp->sect) {
 800bafa:	2e00      	cmp	r6, #0
 800bafc:	d1aa      	bne.n	800ba54 <dir_read+0x1c>
	FRESULT res = FR_NO_FILE;
 800bafe:	2000      	movs	r0, #0
}
 800bb00:	b003      	add	sp, #12
 800bb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb06:	3440      	adds	r4, #64	; 0x40
	dp->dptr = ofs;						/* Current entry */
 800bb08:	632b      	str	r3, [r5, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb0a:	4404      	add	r4, r0
 800bb0c:	63ec      	str	r4, [r5, #60]	; 0x3c
	while (dp->sect) {
 800bb0e:	e7a1      	b.n	800ba54 <dir_read+0x1c>
			if (FF_USE_LABEL && vol) {
 800bb10:	f1b8 0f00 	cmp.w	r8, #0
 800bb14:	d012      	beq.n	800bb3c <dir_read+0x104>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
 800bb16:	2b83      	cmp	r3, #131	; 0x83
 800bb18:	d0f1      	beq.n	800bafe <dir_read+0xc6>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bb1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bb1c:	e7cb      	b.n	800bab6 <dir_read+0x7e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4651      	mov	r1, sl
 800bb22:	7878      	ldrb	r0, [r7, #1]
 800bb24:	f7ff f852 	bl	800abcc <disk_write>
 800bb28:	b1b8      	cbz	r0, 800bb5a <dir_read+0x122>
				res = FR_DISK_ERR;
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	e7a3      	b.n	800ba76 <dir_read+0x3e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800bb2e:	8962      	ldrh	r2, [r4, #10]
 800bb30:	3a01      	subs	r2, #1
 800bb32:	ea12 020c 	ands.w	r2, r2, ip
 800bb36:	d03a      	beq.n	800bbae <dir_read+0x176>
 800bb38:	4601      	mov	r1, r0
 800bb3a:	e7da      	b.n	800baf2 <dir_read+0xba>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800bb3c:	2b85      	cmp	r3, #133	; 0x85
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bb3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800bb40:	d1b9      	bne.n	800bab6 <dir_read+0x7e>
					res = load_xdir(dp);	/* Load the entry block */
 800bb42:	4628      	mov	r0, r5
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bb44:	64eb      	str	r3, [r5, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800bb46:	f7ff fe89 	bl	800b85c <load_xdir>
					if (res == FR_OK) {
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d193      	bne.n	800ba76 <dir_read+0x3e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	791b      	ldrb	r3, [r3, #4]
 800bb52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb56:	71ab      	strb	r3, [r5, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bb58:	e78f      	b.n	800ba7a <dir_read+0x42>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800bb5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb60:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800bb62:	7138      	strb	r0, [r7, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800bb64:	4293      	cmp	r3, r2
 800bb66:	f4bf af7b 	bcs.w	800ba60 <dir_read+0x28>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800bb6a:	78fb      	ldrb	r3, [r7, #3]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	f47f af77 	bne.w	800ba60 <dir_read+0x28>
 800bb72:	440a      	add	r2, r1
 800bb74:	2301      	movs	r3, #1
 800bb76:	4651      	mov	r1, sl
 800bb78:	7878      	ldrb	r0, [r7, #1]
 800bb7a:	f7ff f827 	bl	800abcc <disk_write>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb7e:	e76f      	b.n	800ba60 <dir_read+0x28>
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800bb80:	2a0f      	cmp	r2, #15
 800bb82:	f040 810f 	bne.w	800bda4 <dir_read+0x36c>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 800bb86:	0658      	lsls	r0, r3, #25
 800bb88:	d50b      	bpl.n	800bba2 <dir_read+0x16a>
						b &= (BYTE)~LLEF; ord = b;
 800bb8a:	f003 09bf 	and.w	r9, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800bb8e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 800bb90:	f891 b00d 	ldrb.w	fp, [r1, #13]
						dp->blk_ofs = dp->dptr;
 800bb94:	64eb      	str	r3, [r5, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bb96:	7b4a      	ldrb	r2, [r1, #13]
 800bb98:	455a      	cmp	r2, fp
 800bb9a:	d028      	beq.n	800bbee <dir_read+0x1b6>
 800bb9c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800bba0:	e789      	b.n	800bab6 <dir_read+0x7e>
 800bba2:	454b      	cmp	r3, r9
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bba6:	d0f6      	beq.n	800bb96 <dir_read+0x15e>
 800bba8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800bbac:	e783      	b.n	800bab6 <dir_read+0x7e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800bbae:	4628      	mov	r0, r5
 800bbb0:	e9cd 3200 	strd	r3, r2, [sp]
 800bbb4:	f7ff fa4c 	bl	800b050 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800bbb8:	2801      	cmp	r0, #1
 800bbba:	f240 809e 	bls.w	800bcfa <dir_read+0x2c2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bbbe:	1c43      	adds	r3, r0, #1
 800bbc0:	d0b3      	beq.n	800bb2a <dir_read+0xf2>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800bbc2:	6a21      	ldr	r1, [r4, #32]
 800bbc4:	4288      	cmp	r0, r1
 800bbc6:	d281      	bcs.n	800bacc <dir_read+0x94>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bbc8:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800bbca:	6368      	str	r0, [r5, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800bbcc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bbce:	4288      	cmp	r0, r1
 800bbd0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbd4:	f080 808f 	bcs.w	800bcf6 <dir_read+0x2be>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800bbd8:	8962      	ldrh	r2, [r4, #10]
 800bbda:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800bbdc:	fb00 6602 	mla	r6, r0, r2, r6
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bbe0:	89a2      	ldrh	r2, [r4, #12]
				dp->sect = clst2sect(fs, clst);
 800bbe2:	63ae      	str	r6, [r5, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bbe4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbe8:	fb02 3111 	mls	r1, r2, r1, r3
 800bbec:	e781      	b.n	800baf2 <dir_read+0xba>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bbee:	8b4a      	ldrh	r2, [r1, #26]
 800bbf0:	2a00      	cmp	r2, #0
 800bbf2:	d1d3      	bne.n	800bb9c <dir_read+0x164>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bbf4:	780a      	ldrb	r2, [r1, #0]
 800bbf6:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800bbfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbfe:	3a01      	subs	r2, #1
 800bc00:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800bc04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc08:	2aff      	cmp	r2, #255	; 0xff
 800bc0a:	d8c7      	bhi.n	800bb9c <dir_read+0x164>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bc0c:	693c      	ldr	r4, [r7, #16]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc0e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800bc12:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
	rv = ptr[1];
 800bc16:	f8b1 e003 	ldrh.w	lr, [r1, #3]
		if (wc != 0) {
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d06f      	beq.n	800bcfe <dir_read+0x2c6>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc1e:	2aff      	cmp	r2, #255	; 0xff
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc20:	f102 0001 	add.w	r0, r2, #1
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc24:	d0ba      	beq.n	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc26:	f824 e010 	strh.w	lr, [r4, r0, lsl #1]
 800bc2a:	0040      	lsls	r0, r0, #1
 800bc2c:	f8b1 6005 	ldrh.w	r6, [r1, #5]
		if (wc != 0) {
 800bc30:	f1be 0f00 	cmp.w	lr, #0
 800bc34:	d06a      	beq.n	800bd0c <dir_read+0x2d4>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc36:	2afe      	cmp	r2, #254	; 0xfe
 800bc38:	d0b0      	beq.n	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc3a:	4420      	add	r0, r4
 800bc3c:	8046      	strh	r6, [r0, #2]
	rv = ptr[1];
 800bc3e:	f8b1 e007 	ldrh.w	lr, [r1, #7]
		if (wc != 0) {
 800bc42:	2e00      	cmp	r6, #0
 800bc44:	d069      	beq.n	800bd1a <dir_read+0x2e2>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc46:	2afd      	cmp	r2, #253	; 0xfd
 800bc48:	d0a8      	beq.n	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc4a:	f8a0 e004 	strh.w	lr, [r0, #4]
	rv = ptr[1];
 800bc4e:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc != 0) {
 800bc52:	f1be 0f00 	cmp.w	lr, #0
 800bc56:	d067      	beq.n	800bd28 <dir_read+0x2f0>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc58:	2afc      	cmp	r2, #252	; 0xfc
 800bc5a:	d09f      	beq.n	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc5c:	80c6      	strh	r6, [r0, #6]
	rv = ptr[1];
 800bc5e:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
		if (wc != 0) {
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	d067      	beq.n	800bd36 <dir_read+0x2fe>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc66:	2afb      	cmp	r2, #251	; 0xfb
 800bc68:	d098      	beq.n	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc6a:	f8a0 e008 	strh.w	lr, [r0, #8]
	rv = ptr[1];
 800bc6e:	8a0e      	ldrh	r6, [r1, #16]
		if (wc != 0) {
 800bc70:	f1be 0f00 	cmp.w	lr, #0
 800bc74:	d065      	beq.n	800bd42 <dir_read+0x30a>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc76:	2afa      	cmp	r2, #250	; 0xfa
 800bc78:	d090      	beq.n	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc7a:	8146      	strh	r6, [r0, #10]
	rv = ptr[1];
 800bc7c:	f8b1 e012 	ldrh.w	lr, [r1, #18]
		if (wc != 0) {
 800bc80:	2e00      	cmp	r6, #0
 800bc82:	d065      	beq.n	800bd50 <dir_read+0x318>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc84:	2af9      	cmp	r2, #249	; 0xf9
 800bc86:	d089      	beq.n	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc88:	f8a0 e00c 	strh.w	lr, [r0, #12]
	rv = ptr[1];
 800bc8c:	8a8e      	ldrh	r6, [r1, #20]
		if (wc != 0) {
 800bc8e:	f1be 0f00 	cmp.w	lr, #0
 800bc92:	d063      	beq.n	800bd5c <dir_read+0x324>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bc94:	2af8      	cmp	r2, #248	; 0xf8
 800bc96:	d081      	beq.n	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bc98:	81c6      	strh	r6, [r0, #14]
	rv = ptr[1];
 800bc9a:	f8b1 e016 	ldrh.w	lr, [r1, #22]
		if (wc != 0) {
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d063      	beq.n	800bd6a <dir_read+0x332>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bca2:	2af7      	cmp	r2, #247	; 0xf7
 800bca4:	f43f af7a 	beq.w	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bca8:	f8a0 e010 	strh.w	lr, [r0, #16]
	rv = ptr[1];
 800bcac:	8b0e      	ldrh	r6, [r1, #24]
		if (wc != 0) {
 800bcae:	f1be 0f00 	cmp.w	lr, #0
 800bcb2:	d060      	beq.n	800bd76 <dir_read+0x33e>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bcb4:	2af6      	cmp	r2, #246	; 0xf6
 800bcb6:	f43f af71 	beq.w	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcba:	8246      	strh	r6, [r0, #18]
	rv = ptr[1];
 800bcbc:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
		if (wc != 0) {
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	d05f      	beq.n	800bd84 <dir_read+0x34c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bcc4:	2af5      	cmp	r2, #245	; 0xf5
 800bcc6:	f43f af69 	beq.w	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcca:	f8a0 e014 	strh.w	lr, [r0, #20]
	rv = ptr[1];
 800bcce:	8bce      	ldrh	r6, [r1, #30]
		if (wc != 0) {
 800bcd0:	f1be 0f00 	cmp.w	lr, #0
 800bcd4:	d05c      	beq.n	800bd90 <dir_read+0x358>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bcd6:	2af4      	cmp	r2, #244	; 0xf4
 800bcd8:	f43f af60 	beq.w	800bb9c <dir_read+0x164>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcdc:	82c6      	strh	r6, [r0, #22]
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800bcde:	7809      	ldrb	r1, [r1, #0]
 800bce0:	0649      	lsls	r1, r1, #25
 800bce2:	d55a      	bpl.n	800bd9a <dir_read+0x362>
 800bce4:	2e00      	cmp	r6, #0
 800bce6:	d058      	beq.n	800bd9a <dir_read+0x362>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800bce8:	2af3      	cmp	r2, #243	; 0xf3
 800bcea:	f43f af57 	beq.w	800bb9c <dir_read+0x164>
		lfnbuf[i] = 0;
 800bcee:	4464      	add	r4, ip
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	8362      	strh	r2, [r4, #26]
 800bcf4:	e051      	b.n	800bd9a <dir_read+0x362>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bcf6:	4616      	mov	r6, r2
 800bcf8:	e772      	b.n	800bbe0 <dir_read+0x1a8>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800bcfa:	2002      	movs	r0, #2
 800bcfc:	e6bb      	b.n	800ba76 <dir_read+0x3e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bcfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd02:	4596      	cmp	lr, r2
 800bd04:	f47f af4a 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd08:	f8b1 6005 	ldrh.w	r6, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd10:	4296      	cmp	r6, r2
 800bd12:	f47f af43 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd16:	f8b1 e007 	ldrh.w	lr, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd1e:	4596      	cmp	lr, r2
 800bd20:	f47f af3c 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd24:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd2c:	4296      	cmp	r6, r2
 800bd2e:	f47f af35 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd32:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd3a:	4596      	cmp	lr, r2
 800bd3c:	f47f af2e 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd40:	8a0e      	ldrh	r6, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd46:	4296      	cmp	r6, r2
 800bd48:	f47f af28 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd4c:	f8b1 e012 	ldrh.w	lr, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd54:	4596      	cmp	lr, r2
 800bd56:	f47f af21 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd5a:	8a8e      	ldrh	r6, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd60:	4296      	cmp	r6, r2
 800bd62:	f47f af1b 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd66:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd6e:	4596      	cmp	lr, r2
 800bd70:	f47f af14 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd74:	8b0e      	ldrh	r6, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd7a:	4296      	cmp	r6, r2
 800bd7c:	f47f af0e 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd80:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd88:	4596      	cmp	lr, r2
 800bd8a:	f47f af07 	bne.w	800bb9c <dir_read+0x164>
	rv = ptr[1];
 800bd8e:	8bce      	ldrh	r6, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd94:	4296      	cmp	r6, r2
 800bd96:	f47f af01 	bne.w	800bb9c <dir_read+0x164>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd9a:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd9e:	fa5f f989 	uxtb.w	r9, r9
 800bda2:	e688      	b.n	800bab6 <dir_read+0x7e>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bda4:	f1b9 0f00 	cmp.w	r9, #0
 800bda8:	d148      	bne.n	800be3c <dir_read+0x404>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bdaa:	780b      	ldrb	r3, [r1, #0]
 800bdac:	01da      	lsls	r2, r3, #7
 800bdae:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800bdb2:	784b      	ldrb	r3, [r1, #1]
 800bdb4:	441a      	add	r2, r3
 800bdb6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800bdba:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bdbe:	788a      	ldrb	r2, [r1, #2]
 800bdc0:	fa52 f383 	uxtab	r3, r2, r3
 800bdc4:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800bdc8:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800bdcc:	78cb      	ldrb	r3, [r1, #3]
 800bdce:	fa53 f282 	uxtab	r2, r3, r2
 800bdd2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800bdd6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bdda:	790a      	ldrb	r2, [r1, #4]
 800bddc:	fa52 f383 	uxtab	r3, r2, r3
 800bde0:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800bde4:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800bde8:	794b      	ldrb	r3, [r1, #5]
 800bdea:	fa53 f282 	uxtab	r2, r3, r2
 800bdee:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800bdf2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bdf6:	798a      	ldrb	r2, [r1, #6]
 800bdf8:	fa52 f383 	uxtab	r3, r2, r3
 800bdfc:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800be00:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800be04:	79cb      	ldrb	r3, [r1, #7]
 800be06:	fa53 f282 	uxtab	r2, r3, r2
 800be0a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800be0e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800be12:	7a0a      	ldrb	r2, [r1, #8]
 800be14:	fa52 f383 	uxtab	r3, r2, r3
 800be18:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800be1c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800be20:	7a4b      	ldrb	r3, [r1, #9]
 800be22:	7a89      	ldrb	r1, [r1, #10]
 800be24:	fa53 f282 	uxtab	r2, r3, r2
 800be28:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800be2c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800be30:	fa51 f383 	uxtab	r3, r1, r3
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800be34:	b2db      	uxtb	r3, r3
 800be36:	455b      	cmp	r3, fp
 800be38:	f43f ae61 	beq.w	800bafe <dir_read+0xc6>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800be3c:	f04f 33ff 	mov.w	r3, #4294967295
		res = move_window(fs, dp->sect);
 800be40:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800be42:	64eb      	str	r3, [r5, #76]	; 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800be44:	e619      	b.n	800ba7a <dir_read+0x42>
 800be46:	bf00      	nop

0800be48 <dir_sdi>:
{
 800be48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800be4c:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800be50:	f898 3000 	ldrb.w	r3, [r8]
 800be54:	2b04      	cmp	r3, #4
 800be56:	bf0c      	ite	eq
 800be58:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800be5c:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800be60:	428a      	cmp	r2, r1
 800be62:	d922      	bls.n	800beaa <dir_sdi+0x62>
 800be64:	460c      	mov	r4, r1
 800be66:	06e1      	lsls	r1, r4, #27
 800be68:	d11f      	bne.n	800beaa <dir_sdi+0x62>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800be6a:	6885      	ldr	r5, [r0, #8]
 800be6c:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800be6e:	6304      	str	r4, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800be70:	b1f5      	cbz	r5, 800beb0 <dir_sdi+0x68>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800be72:	f8b8 900a 	ldrh.w	r9, [r8, #10]
 800be76:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800be7a:	fb03 f909 	mul.w	r9, r3, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800be7e:	454c      	cmp	r4, r9
 800be80:	f0c0 80e0 	bcc.w	800c044 <dir_sdi+0x1fc>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be84:	2d01      	cmp	r5, #1
 800be86:	d010      	beq.n	800beaa <dir_sdi+0x62>
 800be88:	eba4 0409 	sub.w	r4, r4, r9
 800be8c:	4647      	mov	r7, r8
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	429d      	cmp	r5, r3
 800be92:	d20a      	bcs.n	800beaa <dir_sdi+0x62>
		switch (fs->fs_type) {
 800be94:	783b      	ldrb	r3, [r7, #0]
 800be96:	3b01      	subs	r3, #1
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d806      	bhi.n	800beaa <dir_sdi+0x62>
 800be9c:	e8df f003 	tbb	[pc, r3]
 800bea0:	2555768b 	.word	0x2555768b
		dp->sect = fs->dirbase;
 800bea4:	2300      	movs	r3, #0
 800bea6:	e9c6 530d 	strd	r5, r3, [r6, #52]	; 0x34
		switch (fs->fs_type) {
 800beaa:	2002      	movs	r0, #2
}
 800beac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	f200 80af 	bhi.w	800c014 <dir_sdi+0x1cc>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800beb6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800beba:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800bebe:	d9f4      	bls.n	800beaa <dir_sdi+0x62>
		dp->sect = fs->dirbase;
 800bec0:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
	dp->clust = clst;					/* Current cluster# */
 800bec4:	e9c6 520d 	strd	r5, r2, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800bec8:	2a00      	cmp	r2, #0
 800beca:	d0ee      	beq.n	800beaa <dir_sdi+0x62>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800becc:	f8b8 100c 	ldrh.w	r1, [r8, #12]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bed0:	f108 0840 	add.w	r8, r8, #64	; 0x40
	return FR_OK;
 800bed4:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bed6:	fbb4 f3f1 	udiv	r3, r4, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800beda:	fb01 4413 	mls	r4, r1, r3, r4
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bede:	441a      	add	r2, r3
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bee0:	4444      	add	r4, r8
 800bee2:	e9c6 240e 	strd	r2, r4, [r6, #56]	; 0x38
}
 800bee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800beea:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 800beee:	ea50 0301 	orrs.w	r3, r0, r1
 800bef2:	f000 8097 	beq.w	800c024 <dir_sdi+0x1dc>
 800bef6:	68b3      	ldr	r3, [r6, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f000 8093 	beq.w	800c024 <dir_sdi+0x1dc>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800befe:	eba5 0a03 	sub.w	sl, r5, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800bf02:	79f3      	ldrb	r3, [r6, #7]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800bf04:	89ba      	ldrh	r2, [r7, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800bf06:	2b02      	cmp	r3, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800bf08:	f8b7 b00a 	ldrh.w	fp, [r7, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800bf0c:	f000 80a8 	beq.w	800c060 <dir_sdi+0x218>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	f000 808d 	beq.w	800c030 <dir_sdi+0x1e8>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800bf16:	69f3      	ldr	r3, [r6, #28]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f040 80ae 	bne.w	800c07a <dir_sdi+0x232>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf1e:	0893      	lsrs	r3, r2, #2
 800bf20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf22:	4638      	mov	r0, r7
 800bf24:	fbb5 f3f3 	udiv	r3, r5, r3
 800bf28:	4419      	add	r1, r3
 800bf2a:	f7fe ffc1 	bl	800aeb0 <move_window>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	f040 8085 	bne.w	800c03e <dir_sdi+0x1f6>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800bf34:	89bb      	ldrh	r3, [r7, #12]
 800bf36:	00ad      	lsls	r5, r5, #2
 800bf38:	fbb5 f2f3 	udiv	r2, r5, r3
 800bf3c:	fb03 5512 	mls	r5, r3, r2, r5
	rv = rv << 8 | ptr[0];
 800bf40:	197b      	adds	r3, r7, r5
 800bf42:	6c1d      	ldr	r5, [r3, #64]	; 0x40
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800bf44:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800bf48:	e014      	b.n	800bf74 <dir_sdi+0x12c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf4a:	89bb      	ldrh	r3, [r7, #12]
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf50:	089b      	lsrs	r3, r3, #2
 800bf52:	fbb5 f3f3 	udiv	r3, r5, r3
 800bf56:	4419      	add	r1, r3
 800bf58:	f7fe ffaa 	bl	800aeb0 <move_window>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d16e      	bne.n	800c03e <dir_sdi+0x1f6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800bf60:	00ad      	lsls	r5, r5, #2
 800bf62:	89bb      	ldrh	r3, [r7, #12]
 800bf64:	fbb5 f2f3 	udiv	r2, r5, r3
 800bf68:	fb03 5512 	mls	r5, r3, r2, r5
	rv = rv << 8 | ptr[0];
 800bf6c:	443d      	add	r5, r7
 800bf6e:	6c2d      	ldr	r5, [r5, #64]	; 0x40
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800bf70:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bf74:	2d01      	cmp	r5, #1
 800bf76:	d998      	bls.n	800beaa <dir_sdi+0x62>
 800bf78:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800bf7c:	42ab      	cmp	r3, r5
 800bf7e:	d994      	bls.n	800beaa <dir_sdi+0x62>
		while (ofs >= csz) {				/* Follow cluster chain */
 800bf80:	45a1      	cmp	r9, r4
 800bf82:	d861      	bhi.n	800c048 <dir_sdi+0x200>
	FATFS *fs = obj->fs;
 800bf84:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bf86:	eba4 0409 	sub.w	r4, r4, r9
 800bf8a:	e780      	b.n	800be8e <dir_sdi+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf8c:	89bb      	ldrh	r3, [r7, #12]
 800bf8e:	4638      	mov	r0, r7
 800bf90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf92:	085b      	lsrs	r3, r3, #1
 800bf94:	fbb5 f3f3 	udiv	r3, r5, r3
 800bf98:	4419      	add	r1, r3
 800bf9a:	f7fe ff89 	bl	800aeb0 <move_window>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d14d      	bne.n	800c03e <dir_sdi+0x1f6>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800bfa2:	006d      	lsls	r5, r5, #1
 800bfa4:	89bb      	ldrh	r3, [r7, #12]
 800bfa6:	fbb5 f2f3 	udiv	r2, r5, r3
 800bfaa:	fb03 5512 	mls	r5, r3, r2, r5
 800bfae:	443d      	add	r5, r7
 800bfb0:	f8b5 5040 	ldrh.w	r5, [r5, #64]	; 0x40
			break;
 800bfb4:	e7de      	b.n	800bf74 <dir_sdi+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfb6:	89bb      	ldrh	r3, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 800bfb8:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	fbba f3f3 	udiv	r3, sl, r3
 800bfc4:	4419      	add	r1, r3
 800bfc6:	f7fe ff73 	bl	800aeb0 <move_window>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d137      	bne.n	800c03e <dir_sdi+0x1f6>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800bfce:	89b9      	ldrh	r1, [r7, #12]
 800bfd0:	f10a 0b01 	add.w	fp, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd6:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800bfd8:	fbba f2f1 	udiv	r2, sl, r1
 800bfdc:	fb01 aa12 	mls	sl, r1, r2, sl
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfe0:	fbbb f1f1 	udiv	r1, fp, r1
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800bfe4:	44ba      	add	sl, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfe6:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800bfe8:	f89a a040 	ldrb.w	sl, [sl, #64]	; 0x40
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfec:	f7fe ff60 	bl	800aeb0 <move_window>
 800bff0:	bb28      	cbnz	r0, 800c03e <dir_sdi+0x1f6>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800bff2:	89bb      	ldrh	r3, [r7, #12]
 800bff4:	fbbb f2f3 	udiv	r2, fp, r3
 800bff8:	fb03 bb12 	mls	fp, r3, r2, fp
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800bffc:	07ea      	lsls	r2, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800bffe:	44bb      	add	fp, r7
 800c000:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 800c004:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800c008:	bf4c      	ite	mi
 800c00a:	ea4f 151a 	movmi.w	r5, sl, lsr #4
 800c00e:	f3ca 050b 	ubfxpl	r5, sl, #0, #12
 800c012:	e7af      	b.n	800bf74 <dir_sdi+0x12c>
		clst = (DWORD)fs->dirbase;
 800c014:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c018:	71c5      	strb	r5, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f43f af4b 	beq.w	800beb6 <dir_sdi+0x6e>
 800c020:	461d      	mov	r5, r3
 800c022:	e726      	b.n	800be72 <dir_sdi+0x2a>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800c024:	79f3      	ldrb	r3, [r6, #7]
 800c026:	2b00      	cmp	r3, #0
 800c028:	f47f af3f 	bne.w	800beaa <dir_sdi+0x62>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800c02c:	89ba      	ldrh	r2, [r7, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800c02e:	e772      	b.n	800bf16 <dir_sdi+0xce>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800c030:	69b3      	ldr	r3, [r6, #24]
 800c032:	459a      	cmp	sl, r3
 800c034:	f4bf af6f 	bcs.w	800bf16 <dir_sdi+0xce>
					val = clst + 1; 	/* Generate the value */
 800c038:	3501      	adds	r5, #1
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c03a:	1c6b      	adds	r3, r5, #1
 800c03c:	d19a      	bne.n	800bf74 <dir_sdi+0x12c>
 800c03e:	2001      	movs	r0, #1
}
 800c040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c044:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c048:	3b02      	subs	r3, #2
	clst -= 2;		/* Cluster number is origin from 2 */
 800c04a:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c04c:	4299      	cmp	r1, r3
 800c04e:	f4bf af29 	bcs.w	800bea4 <dir_sdi+0x5c>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800c052:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c056:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800c05a:	fb01 2203 	mla	r2, r1, r3, r2
 800c05e:	e731      	b.n	800bec4 <dir_sdi+0x7c>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800c060:	3801      	subs	r0, #1
 800c062:	f04f 0300 	mov.w	r3, #0
 800c066:	f161 0100 	sbc.w	r1, r1, #0
 800c06a:	f7f4 f93d 	bl	80002e8 <__aeabi_uldivmod>
 800c06e:	fbb0 f0fb 	udiv	r0, r0, fp
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800c072:	4582      	cmp	sl, r0
 800c074:	f63f af19 	bhi.w	800beaa <dir_sdi+0x62>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800c078:	d1de      	bne.n	800c038 <dir_sdi+0x1f0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c07a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f6bf af13 	bge.w	800beaa <dir_sdi+0x62>
		while (ofs >= csz) {				/* Follow cluster chain */
 800c084:	45a1      	cmp	r9, r4
 800c086:	d803      	bhi.n	800c090 <dir_sdi+0x248>
	FATFS *fs = obj->fs;
 800c088:	6837      	ldr	r7, [r6, #0]
 800c08a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800c08e:	e77a      	b.n	800bf86 <dir_sdi+0x13e>
		while (ofs >= csz) {				/* Follow cluster chain */
 800c090:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
	clst -= 2;		/* Cluster number is origin from 2 */
 800c094:	4900      	ldr	r1, [pc, #0]	; (800c098 <dir_sdi+0x250>)
 800c096:	e7dc      	b.n	800c052 <dir_sdi+0x20a>
 800c098:	7ffffffd 	.word	0x7ffffffd

0800c09c <dir_find>:
{
 800c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c0a0:	2100      	movs	r1, #0
{
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800c0a6:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c0a8:	f7ff fece 	bl	800be48 <dir_sdi>
	if (res != FR_OK) return res;
 800c0ac:	4680      	mov	r8, r0
 800c0ae:	b9e8      	cbnz	r0, 800c0ec <dir_find+0x50>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c0b0:	782b      	ldrb	r3, [r5, #0]
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	f000 815d 	beq.w	800c372 <dir_find+0x2d6>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0b8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800c0bc:	f04f 33ff 	mov.w	r3, #4294967295
		res = move_window(fs, dp->sect);
 800c0c0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0c2:	46ca      	mov	sl, r9
 800c0c4:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (sect != fs->winsect) {	/* Window offset changed? */
 800c0c6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800c0c8:	42ba      	cmp	r2, r7
 800c0ca:	d014      	beq.n	800c0f6 <dir_find+0x5a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800c0cc:	792b      	ldrb	r3, [r5, #4]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800c0ce:	f105 0140 	add.w	r1, r5, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d161      	bne.n	800c19a <dir_find+0xfe>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	463a      	mov	r2, r7
 800c0da:	7868      	ldrb	r0, [r5, #1]
 800c0dc:	f7fe fd66 	bl	800abac <disk_read>
 800c0e0:	b140      	cbz	r0, 800c0f4 <dir_find+0x58>
			fs->winsect = sect;
 800c0e2:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800c0e6:	f04f 0801 	mov.w	r8, #1
			fs->winsect = sect;
 800c0ea:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	b005      	add	sp, #20
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
 800c0f4:	63ef      	str	r7, [r5, #60]	; 0x3c
		c = dp->dir[DIR_Name];
 800c0f6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800c0f8:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c0fa:	2f00      	cmp	r7, #0
 800c0fc:	f000 8136 	beq.w	800c36c <dir_find+0x2d0>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c100:	7af3      	ldrb	r3, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c102:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c108:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c10a:	d003      	beq.n	800c114 <dir_find+0x78>
 800c10c:	0719      	lsls	r1, r3, #28
 800c10e:	d531      	bpl.n	800c174 <dir_find+0xd8>
 800c110:	2a0f      	cmp	r2, #15
 800c112:	d072      	beq.n	800c1fa <dir_find+0x15e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c114:	f04f 33ff 	mov.w	r3, #4294967295
 800c118:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c11c:	64e3      	str	r3, [r4, #76]	; 0x4c
	FATFS *fs = dp->obj.fs;
 800c11e:	6826      	ldr	r6, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c120:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c122:	7832      	ldrb	r2, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c124:	3320      	adds	r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c126:	2a04      	cmp	r2, #4
 800c128:	bf0c      	ite	eq
 800c12a:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800c12e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800c132:	4293      	cmp	r3, r2
 800c134:	d307      	bcc.n	800c146 <dir_find+0xaa>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c136:	f04f 0804 	mov.w	r8, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4640      	mov	r0, r8
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c13e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c140:	b005      	add	sp, #20
 800c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c146:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800c148:	2f00      	cmp	r7, #0
 800c14a:	f000 810f 	beq.w	800c36c <dir_find+0x2d0>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c14e:	89b2      	ldrh	r2, [r6, #12]
 800c150:	fbb3 f0f2 	udiv	r0, r3, r2
 800c154:	fb02 3210 	mls	r2, r2, r0, r3
 800c158:	b93a      	cbnz	r2, 800c16a <dir_find+0xce>
		dp->sect++;				/* Next sector */
 800c15a:	3701      	adds	r7, #1
		if (dp->clust == 0) {	/* Static table */
 800c15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800c15e:	63a7      	str	r7, [r4, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800c160:	bb31      	cbnz	r1, 800c1b0 <dir_find+0x114>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c162:	8931      	ldrh	r1, [r6, #8]
 800c164:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
 800c168:	d9e5      	bls.n	800c136 <dir_find+0x9a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c16a:	3640      	adds	r6, #64	; 0x40
	dp->dptr = ofs;						/* Current entry */
 800c16c:	6323      	str	r3, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c16e:	4416      	add	r6, r2
 800c170:	63e6      	str	r6, [r4, #60]	; 0x3c
	} while (res == FR_OK);
 800c172:	e7a8      	b.n	800c0c6 <dir_find+0x2a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c174:	2a0f      	cmp	r2, #15
 800c176:	d040      	beq.n	800c1fa <dir_find+0x15e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c178:	f1ba 0f00 	cmp.w	sl, #0
 800c17c:	f000 80a0 	beq.w	800c2c0 <dir_find+0x224>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c180:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800c184:	07da      	lsls	r2, r3, #31
 800c186:	d4c5      	bmi.n	800c114 <dir_find+0x78>
 800c188:	220b      	movs	r2, #11
 800c18a:	4630      	mov	r0, r6
 800c18c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800c190:	f006 f839 	bl	8012206 <memcmp>
 800c194:	2800      	cmp	r0, #0
 800c196:	d1bd      	bne.n	800c114 <dir_find+0x78>
 800c198:	e7a8      	b.n	800c0ec <dir_find+0x50>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800c19a:	2301      	movs	r3, #1
 800c19c:	7868      	ldrb	r0, [r5, #1]
 800c19e:	9100      	str	r1, [sp, #0]
 800c1a0:	f7fe fd14 	bl	800abcc <disk_write>
 800c1a4:	9900      	ldr	r1, [sp, #0]
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d076      	beq.n	800c298 <dir_find+0x1fc>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c1aa:	f04f 0801 	mov.w	r8, #1
 800c1ae:	e79d      	b.n	800c0ec <dir_find+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c1b0:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 800c1b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c1b8:	ea1c 0b00 	ands.w	fp, ip, r0
 800c1bc:	d1d5      	bne.n	800c16a <dir_find+0xce>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c1be:	4620      	mov	r0, r4
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	f7fe ff45 	bl	800b050 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c1c6:	2801      	cmp	r0, #1
 800c1c8:	f240 80cd 	bls.w	800c366 <dir_find+0x2ca>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d0ec      	beq.n	800c1aa <dir_find+0x10e>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c1d0:	6a32      	ldr	r2, [r6, #32]
 800c1d2:	4290      	cmp	r0, r2
 800c1d4:	d2af      	bcs.n	800c136 <dir_find+0x9a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c1d6:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800c1d8:	6360      	str	r0, [r4, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800c1da:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c1dc:	9b00      	ldr	r3, [sp, #0]
 800c1de:	4290      	cmp	r0, r2
 800c1e0:	f080 8116 	bcs.w	800c410 <dir_find+0x374>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800c1e4:	8972      	ldrh	r2, [r6, #10]
 800c1e6:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800c1e8:	fb00 7702 	mla	r7, r0, r2, r7
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1ec:	89b1      	ldrh	r1, [r6, #12]
				dp->sect = clst2sect(fs, clst);
 800c1ee:	63a7      	str	r7, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1f0:	fbb3 f2f1 	udiv	r2, r3, r1
 800c1f4:	fb01 3212 	mls	r2, r1, r2, r3
 800c1f8:	e7b7      	b.n	800c16a <dir_find+0xce>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c1fa:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800c1fe:	065b      	lsls	r3, r3, #25
 800c200:	d48d      	bmi.n	800c11e <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c202:	0678      	lsls	r0, r7, #25
 800c204:	f140 80a9 	bpl.w	800c35a <dir_find+0x2be>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c208:	6b23      	ldr	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c20a:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800c20e:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c212:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c214:	7b73      	ldrb	r3, [r6, #13]
 800c216:	454b      	cmp	r3, r9
 800c218:	f040 80a2 	bne.w	800c360 <dir_find+0x2c4>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c21c:	8b73      	ldrh	r3, [r6, #26]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f040 809e 	bne.w	800c360 <dir_find+0x2c4>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c224:	f896 a000 	ldrb.w	sl, [r6]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c228:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c22a:	692b      	ldr	r3, [r5, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c22c:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
 800c230:	f8df b208 	ldr.w	fp, [pc, #520]	; 800c43c <dir_find+0x3a0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c234:	9302      	str	r3, [sp, #8]
 800c236:	4610      	mov	r0, r2
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c238:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c23c:	9703      	str	r7, [sp, #12]
 800c23e:	9401      	str	r4, [sp, #4]
 800c240:	f10b 010d 	add.w	r1, fp, #13
 800c244:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 800c248:	4637      	mov	r7, r6
 800c24a:	9c02      	ldr	r4, [sp, #8]
 800c24c:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c250:	9500      	str	r5, [sp, #0]
 800c252:	e013      	b.n	800c27c <dir_find+0x1e0>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c254:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800c258:	4630      	mov	r0, r6
 800c25a:	d818      	bhi.n	800c28e <dir_find+0x1f2>
 800c25c:	f002 fa5e 	bl	800e71c <ff_wtoupper>
 800c260:	4605      	mov	r5, r0
 800c262:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 800c266:	f10a 0a01 	add.w	sl, sl, #1
 800c26a:	f002 fa57 	bl	800e71c <ff_wtoupper>
 800c26e:	4285      	cmp	r5, r0
 800c270:	4630      	mov	r0, r6
 800c272:	d10c      	bne.n	800c28e <dir_find+0x1f2>
 800c274:	4970      	ldr	r1, [pc, #448]	; (800c438 <dir_find+0x39c>)
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c276:	458b      	cmp	fp, r1
 800c278:	f000 80cc 	beq.w	800c414 <dir_find+0x378>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c27c:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800c280:	5afe      	ldrh	r6, [r7, r3]
		if (wc != 0) {
 800c282:	2800      	cmp	r0, #0
 800c284:	d1e6      	bne.n	800c254 <dir_find+0x1b8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c28a:	429e      	cmp	r6, r3
 800c28c:	d0f3      	beq.n	800c276 <dir_find+0x1da>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c28e:	e9dd 5400 	ldrd	r5, r4, [sp]
 800c292:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c296:	e742      	b.n	800c11e <dir_find+0x82>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800c298:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->wflag = 0;	/* Clear window dirty flag */
 800c29a:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800c29c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800c29e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c2a0:	1ac3      	subs	r3, r0, r3
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	f4bf af17 	bcs.w	800c0d6 <dir_find+0x3a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800c2a8:	78eb      	ldrb	r3, [r5, #3]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	f47f af13 	bne.w	800c0d6 <dir_find+0x3a>
 800c2b0:	4402      	add	r2, r0
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	7868      	ldrb	r0, [r5, #1]
 800c2b6:	9100      	str	r1, [sp, #0]
 800c2b8:	f7fe fc88 	bl	800abcc <disk_write>
 800c2bc:	9900      	ldr	r1, [sp, #0]
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c2be:	e70a      	b.n	800c0d6 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c2c0:	7832      	ldrb	r2, [r6, #0]
 800c2c2:	7871      	ldrb	r1, [r6, #1]
 800c2c4:	01d0      	lsls	r0, r2, #7
 800c2c6:	78b7      	ldrb	r7, [r6, #2]
 800c2c8:	78f3      	ldrb	r3, [r6, #3]
 800c2ca:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
 800c2ce:	7932      	ldrb	r2, [r6, #4]
 800c2d0:	f896 a005 	ldrb.w	sl, [r6, #5]
 800c2d4:	4408      	add	r0, r1
 800c2d6:	f896 e006 	ldrb.w	lr, [r6, #6]
 800c2da:	f896 c007 	ldrb.w	ip, [r6, #7]
 800c2de:	f3c0 0146 	ubfx	r1, r0, #1, #7
 800c2e2:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 800c2e6:	7a70      	ldrb	r0, [r6, #9]
 800c2e8:	fa57 f181 	uxtab	r1, r7, r1
 800c2ec:	7a37      	ldrb	r7, [r6, #8]
 800c2ee:	f3c1 0b46 	ubfx	fp, r1, #1, #7
 800c2f2:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
 800c2f6:	7ab1      	ldrb	r1, [r6, #10]
 800c2f8:	fa53 fb8b 	uxtab	fp, r3, fp
 800c2fc:	f3cb 0346 	ubfx	r3, fp, #1, #7
 800c300:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
 800c304:	fa52 f383 	uxtab	r3, r2, r3
 800c308:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800c30c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800c310:	fa5a f282 	uxtab	r2, sl, r2
 800c314:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800c318:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800c31c:	fa5e f383 	uxtab	r3, lr, r3
 800c320:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800c324:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800c328:	fa5c f282 	uxtab	r2, ip, r2
 800c32c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800c330:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800c334:	fa57 f383 	uxtab	r3, r7, r3
 800c338:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800c33c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800c340:	fa50 f282 	uxtab	r2, r0, r2
 800c344:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800c348:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800c34c:	fa51 f383 	uxtab	r3, r1, r3
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c350:	b2db      	uxtb	r3, r3
 800c352:	4599      	cmp	r9, r3
 800c354:	f47f af14 	bne.w	800c180 <dir_find+0xe4>
 800c358:	e6c8      	b.n	800c0ec <dir_find+0x50>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c35a:	45ba      	cmp	sl, r7
 800c35c:	f43f af5a 	beq.w	800c214 <dir_find+0x178>
 800c360:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c364:	e6db      	b.n	800c11e <dir_find+0x82>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c366:	f04f 0802 	mov.w	r8, #2
 800c36a:	e6bf      	b.n	800c0ec <dir_find+0x50>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c36c:	f04f 0804 	mov.w	r8, #4
 800c370:	e6bc      	b.n	800c0ec <dir_find+0x50>
	while ((chr = *name++) != 0) {
 800c372:	692e      	ldr	r6, [r5, #16]
	WORD sum = 0;
 800c374:	46c1      	mov	r9, r8
	while ((chr = *name++) != 0) {
 800c376:	f836 0b02 	ldrh.w	r0, [r6], #2
 800c37a:	b1a0      	cbz	r0, 800c3a6 <dir_find+0x30a>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800c37c:	f002 f9ce 	bl	800e71c <ff_wtoupper>
 800c380:	4603      	mov	r3, r0
	while ((chr = *name++) != 0) {
 800c382:	f836 0b02 	ldrh.w	r0, [r6], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c386:	b2da      	uxtb	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c388:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c38c:	eb02 0259 	add.w	r2, r2, r9, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c390:	eb02 32c9 	add.w	r2, r2, r9, lsl #15
 800c394:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c396:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c39a:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800c39e:	fa1f f983 	uxth.w	r9, r3
	while ((chr = *name++) != 0) {
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d1ea      	bne.n	800c37c <dir_find+0x2e0>
 800c3a6:	f8cd 8000 	str.w	r8, [sp]
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f7ff fb43 	bl	800ba38 <dir_read>
 800c3b2:	bb58      	cbnz	r0, 800c40c <dir_find+0x370>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c3b4:	696b      	ldr	r3, [r5, #20]
 800c3b6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c3b8:	454a      	cmp	r2, r9
 800c3ba:	d1f6      	bne.n	800c3aa <dir_find+0x30e>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c3bc:	f893 a023 	ldrb.w	sl, [r3, #35]	; 0x23
 800c3c0:	f1ba 0f00 	cmp.w	sl, #0
 800c3c4:	d01a      	beq.n	800c3fc <dir_find+0x360>
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	2740      	movs	r7, #64	; 0x40
 800c3ca:	e000      	b.n	800c3ce <dir_find+0x332>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c3cc:	696b      	ldr	r3, [r5, #20]
				if ((di % SZDIRE) == 0) di += 2;
 800c3ce:	f017 0f1f 	tst.w	r7, #31
 800c3d2:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 800c3d6:	bf08      	it	eq
 800c3d8:	3702      	addeq	r7, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c3da:	5bd8      	ldrh	r0, [r3, r7]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c3dc:	3702      	adds	r7, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c3de:	f002 f99d 	bl	800e71c <ff_wtoupper>
 800c3e2:	692a      	ldr	r2, [r5, #16]
 800c3e4:	4680      	mov	r8, r0
 800c3e6:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c3ea:	3601      	adds	r6, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c3ec:	f002 f996 	bl	800e71c <ff_wtoupper>
 800c3f0:	4580      	cmp	r8, r0
 800c3f2:	d1da      	bne.n	800c3aa <dir_find+0x30e>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c3f4:	4556      	cmp	r6, sl
 800c3f6:	d1e9      	bne.n	800c3cc <dir_find+0x330>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c3f8:	f10b 0a02 	add.w	sl, fp, #2
 800c3fc:	692b      	ldr	r3, [r5, #16]
 800c3fe:	f833 300a 	ldrh.w	r3, [r3, sl]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1d1      	bne.n	800c3aa <dir_find+0x30e>
 800c406:	f8dd 8000 	ldr.w	r8, [sp]
 800c40a:	e66f      	b.n	800c0ec <dir_find+0x50>
 800c40c:	4680      	mov	r8, r0
 800c40e:	e66d      	b.n	800c0ec <dir_find+0x50>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c410:	465f      	mov	r7, fp
 800c412:	e6eb      	b.n	800c1ec <dir_find+0x150>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c414:	463e      	mov	r6, r7
 800c416:	9d00      	ldr	r5, [sp, #0]
 800c418:	9f03      	ldr	r7, [sp, #12]
 800c41a:	7833      	ldrb	r3, [r6, #0]
 800c41c:	9c01      	ldr	r4, [sp, #4]
 800c41e:	0659      	lsls	r1, r3, #25
 800c420:	d500      	bpl.n	800c424 <dir_find+0x388>
 800c422:	b918      	cbnz	r0, 800c42c <dir_find+0x390>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c424:	3f01      	subs	r7, #1
 800c426:	fa5f fa87 	uxtb.w	sl, r7
 800c42a:	e678      	b.n	800c11e <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c42c:	9b02      	ldr	r3, [sp, #8]
 800c42e:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d0f6      	beq.n	800c424 <dir_find+0x388>
 800c436:	e793      	b.n	800c360 <dir_find+0x2c4>
 800c438:	080156a1 	.word	0x080156a1
 800c43c:	08015694 	.word	0x08015694

0800c440 <follow_path>:
{
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800c444:	780b      	ldrb	r3, [r1, #0]
{
 800c446:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800c448:	6802      	ldr	r2, [r0, #0]
{
 800c44a:	460d      	mov	r5, r1
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800c44c:	2b5c      	cmp	r3, #92	; 0x5c
{
 800c44e:	4682      	mov	sl, r0
	FATFS *fs = dp->obj.fs;
 800c450:	9200      	str	r2, [sp, #0]
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800c452:	d001      	beq.n	800c458 <follow_path+0x18>
 800c454:	2b2f      	cmp	r3, #47	; 0x2f
 800c456:	d105      	bne.n	800c464 <follow_path+0x24>
 800c458:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800c45c:	2b2f      	cmp	r3, #47	; 0x2f
 800c45e:	d0fb      	beq.n	800c458 <follow_path+0x18>
 800c460:	2b5c      	cmp	r3, #92	; 0x5c
 800c462:	d0f9      	beq.n	800c458 <follow_path+0x18>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800c464:	2100      	movs	r1, #0
 800c466:	f8ca 1008 	str.w	r1, [sl, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c46a:	f8ca 101c 	str.w	r1, [sl, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c46e:	782b      	ldrb	r3, [r5, #0]
 800c470:	2b1f      	cmp	r3, #31
 800c472:	f240 817d 	bls.w	800c770 <follow_path+0x330>
	FATFS *fs = dp->obj.fs;
 800c476:	9b00      	ldr	r3, [sp, #0]
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c478:	f8df 9348 	ldr.w	r9, [pc, #840]	; 800c7c4 <follow_path+0x384>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800c47c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c480:	2400      	movs	r4, #0
 800c482:	f1ab 0702 	sub.w	r7, fp, #2
	wc = (BYTE)*p++;			/* Get a byte */
 800c486:	f815 0b01 	ldrb.w	r0, [r5], #1
	if (wc != 0) {
 800c48a:	2800      	cmp	r0, #0
 800c48c:	f040 8093 	bne.w	800c5b6 <follow_path+0x176>
		cf = NS_LAST;			/* Last segment */
 800c490:	2604      	movs	r6, #4
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800c492:	2c00      	cmp	r4, #0
 800c494:	f000 80eb 	beq.w	800c66e <follow_path+0x22e>
 800c498:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
 800c49c:	e002      	b.n	800c4a4 <follow_path+0x64>
 800c49e:	3c01      	subs	r4, #1
 800c4a0:	f000 80e5 	beq.w	800c66e <follow_path+0x22e>
		wc = lfn[di - 1];
 800c4a4:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (wc != ' ' && wc != '.') break;
 800c4a8:	2b20      	cmp	r3, #32
 800c4aa:	d0f8      	beq.n	800c49e <follow_path+0x5e>
 800c4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ae:	d0f6      	beq.n	800c49e <follow_path+0x5e>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800c4b0:	f04f 0800 	mov.w	r8, #0
 800c4b4:	f82b 8014 	strh.w	r8, [fp, r4, lsl #1]
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800c4b8:	f8bb 3000 	ldrh.w	r3, [fp]
 800c4bc:	2b20      	cmp	r3, #32
 800c4be:	f040 810a 	bne.w	800c6d6 <follow_path+0x296>
 800c4c2:	f10b 0302 	add.w	r3, fp, #2
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f108 0801 	add.w	r8, r8, #1
 800c4cc:	3302      	adds	r3, #2
 800c4ce:	8811      	ldrh	r1, [r2, #0]
 800c4d0:	2920      	cmp	r1, #32
 800c4d2:	d0f8      	beq.n	800c4c6 <follow_path+0x86>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800c4d4:	f046 0603 	orr.w	r6, r6, #3
		wc = lfn[si++];					/* Get an LFN character */
 800c4d8:	f108 0801 	add.w	r8, r8, #1
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800c4dc:	b2f6      	uxtb	r6, r6
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800c4de:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 800c4e2:	f833 1d02 	ldrh.w	r1, [r3, #-2]!
 800c4e6:	292e      	cmp	r1, #46	; 0x2e
 800c4e8:	d001      	beq.n	800c4ee <follow_path+0xae>
 800c4ea:	3c01      	subs	r4, #1
 800c4ec:	d1f9      	bne.n	800c4e2 <follow_path+0xa2>
	memset(dp->fn, ' ', 11);
 800c4ee:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 800c4f2:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
 800c4f6:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
 800c4fa:	f8ca 3047 	str.w	r3, [sl, #71]	; 0x47
		wc = lfn[si++];					/* Get an LFN character */
 800c4fe:	8811      	ldrh	r1, [r2, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
 800c500:	b381      	cbz	r1, 800c564 <follow_path+0x124>
 800c502:	4650      	mov	r0, sl
	i = b = 0; ni = 8;
 800c504:	2700      	movs	r7, #0
 800c506:	2208      	movs	r2, #8
 800c508:	46da      	mov	sl, fp
 800c50a:	9501      	str	r5, [sp, #4]
 800c50c:	46a3      	mov	fp, r4
 800c50e:	4615      	mov	r5, r2
 800c510:	463c      	mov	r4, r7
 800c512:	4603      	mov	r3, r0
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800c514:	2920      	cmp	r1, #32
 800c516:	d003      	beq.n	800c520 <follow_path+0xe0>
 800c518:	292e      	cmp	r1, #46	; 0x2e
 800c51a:	d16b      	bne.n	800c5f4 <follow_path+0x1b4>
 800c51c:	45c3      	cmp	fp, r8
 800c51e:	d069      	beq.n	800c5f4 <follow_path+0x1b4>
			cf |= NS_LOSS | NS_LFN;
 800c520:	f046 0603 	orr.w	r6, r6, #3
 800c524:	b2f6      	uxtb	r6, r6
		wc = lfn[si++];					/* Get an LFN character */
 800c526:	f83a 1018 	ldrh.w	r1, [sl, r8, lsl #1]
 800c52a:	f108 0801 	add.w	r8, r8, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 800c52e:	2900      	cmp	r1, #0
 800c530:	d1f0      	bne.n	800c514 <follow_path+0xd4>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c532:	469a      	mov	sl, r3
 800c534:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c538:	462a      	mov	r2, r5
 800c53a:	9d01      	ldr	r5, [sp, #4]
 800c53c:	2be5      	cmp	r3, #229	; 0xe5
 800c53e:	d102      	bne.n	800c546 <follow_path+0x106>
 800c540:	2305      	movs	r3, #5
 800c542:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800c546:	2a08      	cmp	r2, #8
 800c548:	f000 80cc 	beq.w	800c6e4 <follow_path+0x2a4>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800c54c:	f007 030c 	and.w	r3, r7, #12
 800c550:	2b0c      	cmp	r3, #12
 800c552:	d004      	beq.n	800c55e <follow_path+0x11e>
 800c554:	f007 0303 	and.w	r3, r7, #3
 800c558:	2b03      	cmp	r3, #3
 800c55a:	f040 80cd 	bne.w	800c6f8 <follow_path+0x2b8>
 800c55e:	f046 0602 	orr.w	r6, r6, #2
 800c562:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 800c564:	4650      	mov	r0, sl
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800c566:	f88a 604b 	strb.w	r6, [sl, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 800c56a:	f7ff fd97 	bl	800c09c <dir_find>
			ns = dp->fn[NSFLAG];
 800c56e:	f89a 304b 	ldrb.w	r3, [sl, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800c572:	2800      	cmp	r0, #0
 800c574:	f040 80d8 	bne.w	800c728 <follow_path+0x2e8>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800c578:	075a      	lsls	r2, r3, #29
 800c57a:	d438      	bmi.n	800c5ee <follow_path+0x1ae>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c57c:	f89a 3006 	ldrb.w	r3, [sl, #6]
 800c580:	06db      	lsls	r3, r3, #27
 800c582:	f140 8108 	bpl.w	800c796 <follow_path+0x356>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 800c586:	9b00      	ldr	r3, [sp, #0]
 800c588:	7819      	ldrb	r1, [r3, #0]
 800c58a:	2904      	cmp	r1, #4
 800c58c:	d076      	beq.n	800c67c <follow_path+0x23c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c58e:	8998      	ldrh	r0, [r3, #12]
 800c590:	3340      	adds	r3, #64	; 0x40
 800c592:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800c596:	2903      	cmp	r1, #3
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c598:	fbb2 f4f0 	udiv	r4, r2, r0
 800c59c:	fb00 2214 	mls	r2, r0, r4, r2
 800c5a0:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800c5a2:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800c5a4:	d102      	bne.n	800c5ac <follow_path+0x16c>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c5a6:	8a9b      	ldrh	r3, [r3, #20]
 800c5a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5ac:	f8ca 2008 	str.w	r2, [sl, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800c5b0:	f8da 3000 	ldr.w	r3, [sl]
 800c5b4:	e762      	b.n	800c47c <follow_path+0x3c>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 800c5b6:	f240 3152 	movw	r1, #850	; 0x352
 800c5ba:	f002 f89b 	bl	800e6f4 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800c5be:	4606      	mov	r6, r0
 800c5c0:	b1a0      	cbz	r0, 800c5ec <follow_path+0x1ac>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800c5c2:	2e1f      	cmp	r6, #31
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c5c4:	4648      	mov	r0, r9
 800c5c6:	4631      	mov	r1, r6
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800c5c8:	f67f af62 	bls.w	800c490 <follow_path+0x50>
 800c5cc:	2e2f      	cmp	r6, #47	; 0x2f
 800c5ce:	d03b      	beq.n	800c648 <follow_path+0x208>
 800c5d0:	2e5c      	cmp	r6, #92	; 0x5c
 800c5d2:	d039      	beq.n	800c648 <follow_path+0x208>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c5d4:	2e7f      	cmp	r6, #127	; 0x7f
 800c5d6:	d802      	bhi.n	800c5de <follow_path+0x19e>
 800c5d8:	f005 fe47 	bl	801226a <strchr>
 800c5dc:	b930      	cbnz	r0, 800c5ec <follow_path+0x1ac>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c5de:	2cff      	cmp	r4, #255	; 0xff
		lfn[di++] = wc;				/* Store the Unicode character */
 800c5e0:	f104 0401 	add.w	r4, r4, #1
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c5e4:	d002      	beq.n	800c5ec <follow_path+0x1ac>
		lfn[di++] = wc;				/* Store the Unicode character */
 800c5e6:	f827 6f02 	strh.w	r6, [r7, #2]!
		uc = tchar2uni(&p);			/* Get a character */
 800c5ea:	e74c      	b.n	800c486 <follow_path+0x46>
 800c5ec:	2006      	movs	r0, #6
}
 800c5ee:	b005      	add	sp, #20
 800c5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (i >= ni || si == di) {		/* End of field? */
 800c5f4:	42ac      	cmp	r4, r5
 800c5f6:	d217      	bcs.n	800c628 <follow_path+0x1e8>
 800c5f8:	45c3      	cmp	fp, r8
 800c5fa:	d015      	beq.n	800c628 <follow_path+0x1e8>
		if (wc >= 0x80) {	/* Is this an extended character? */
 800c5fc:	297f      	cmp	r1, #127	; 0x7f
 800c5fe:	d852      	bhi.n	800c6a6 <follow_path+0x266>
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800c600:	486e      	ldr	r0, [pc, #440]	; (800c7bc <follow_path+0x37c>)
 800c602:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800c606:	f005 fe30 	bl	801226a <strchr>
 800c60a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800c60e:	2800      	cmp	r0, #0
 800c610:	f000 80a0 	beq.w	800c754 <follow_path+0x314>
 800c614:	4632      	mov	r2, r6
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c616:	f042 0103 	orr.w	r1, r2, #3
 800c61a:	b2ce      	uxtb	r6, r1
 800c61c:	215f      	movs	r1, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
 800c61e:	1918      	adds	r0, r3, r4
 800c620:	3401      	adds	r4, #1
 800c622:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 800c626:	e77e      	b.n	800c526 <follow_path+0xe6>
			if (ni == 11) {				/* Name extension overflow? */
 800c628:	2d0b      	cmp	r5, #11
 800c62a:	f000 80b8 	beq.w	800c79e <follow_path+0x35e>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800c62e:	45c3      	cmp	fp, r8
 800c630:	d004      	beq.n	800c63c <follow_path+0x1fc>
 800c632:	f046 0603 	orr.w	r6, r6, #3
 800c636:	b2f6      	uxtb	r6, r6
			if (si > di) break;						/* No name extension? */
 800c638:	f4ff af7b 	bcc.w	800c532 <follow_path+0xf2>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800c63c:	00bf      	lsls	r7, r7, #2
			continue;
 800c63e:	46d8      	mov	r8, fp
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800c640:	250b      	movs	r5, #11
 800c642:	2408      	movs	r4, #8
 800c644:	b2ff      	uxtb	r7, r7
			continue;
 800c646:	e76e      	b.n	800c526 <follow_path+0xe6>
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 800c648:	782e      	ldrb	r6, [r5, #0]
 800c64a:	2e5c      	cmp	r6, #92	; 0x5c
 800c64c:	d001      	beq.n	800c652 <follow_path+0x212>
 800c64e:	2e2f      	cmp	r6, #47	; 0x2f
 800c650:	d105      	bne.n	800c65e <follow_path+0x21e>
 800c652:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c656:	2e2f      	cmp	r6, #47	; 0x2f
 800c658:	d0fb      	beq.n	800c652 <follow_path+0x212>
 800c65a:	2e5c      	cmp	r6, #92	; 0x5c
 800c65c:	d0f9      	beq.n	800c652 <follow_path+0x212>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 800c65e:	2e1f      	cmp	r6, #31
 800c660:	bf8c      	ite	hi
 800c662:	2600      	movhi	r6, #0
 800c664:	2601      	movls	r6, #1
 800c666:	00b6      	lsls	r6, r6, #2
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800c668:	2c00      	cmp	r4, #0
 800c66a:	f47f af15 	bne.w	800c498 <follow_path+0x58>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800c66e:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800c670:	2006      	movs	r0, #6
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800c672:	f8ab 3000 	strh.w	r3, [fp]
}
 800c676:	b005      	add	sp, #20
 800c678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800c67c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c680:	f89a 2007 	ldrb.w	r2, [sl, #7]
 800c684:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				dp->obj.c_scl = dp->obj.sclust;
 800c688:	f8da 1008 	ldr.w	r1, [sl, #8]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800c68c:	4313      	orrs	r3, r2
				dp->obj.c_ofs = dp->blk_ofs;
 800c68e:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
				dp->obj.c_scl = dp->obj.sclust;
 800c692:	f8ca 1020 	str.w	r1, [sl, #32]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800c696:	4651      	mov	r1, sl
				dp->obj.c_ofs = dp->blk_ofs;
 800c698:	e9ca 3209 	strd	r3, r2, [sl, #36]	; 0x24
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800c69c:	9b00      	ldr	r3, [sp, #0]
 800c69e:	6958      	ldr	r0, [r3, #20]
 800c6a0:	f7fe fbf4 	bl	800ae8c <init_alloc_info.isra.0>
 800c6a4:	e784      	b.n	800c5b0 <follow_path+0x170>
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800c6a6:	4608      	mov	r0, r1
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800c6a8:	f046 0102 	orr.w	r1, r6, #2
 800c6ac:	9303      	str	r3, [sp, #12]
 800c6ae:	b2ca      	uxtb	r2, r1
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800c6b0:	f240 3152 	movw	r1, #850	; 0x352
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800c6b4:	9202      	str	r2, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800c6b6:	f001 fffd 	bl	800e6b4 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800c6ba:	f010 0f80 	tst.w	r0, #128	; 0x80
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800c6be:	4601      	mov	r1, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800c6c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6c4:	d038      	beq.n	800c738 <follow_path+0x2f8>
 800c6c6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800c6ca:	483d      	ldr	r0, [pc, #244]	; (800c7c0 <follow_path+0x380>)
 800c6cc:	5c41      	ldrb	r1, [r0, r1]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800c6ce:	2900      	cmp	r1, #0
 800c6d0:	d0a1      	beq.n	800c616 <follow_path+0x1d6>
 800c6d2:	4616      	mov	r6, r2
 800c6d4:	e794      	b.n	800c600 <follow_path+0x1c0>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800c6d6:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d8:	465a      	mov	r2, fp
 800c6da:	f43f aefb 	beq.w	800c4d4 <follow_path+0x94>
 800c6de:	f04f 0801 	mov.w	r8, #1
 800c6e2:	e6fc      	b.n	800c4de <follow_path+0x9e>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800c6e4:	00bb      	lsls	r3, r7, #2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800c6e6:	f003 020c 	and.w	r2, r3, #12
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800c6ea:	b2df      	uxtb	r7, r3
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800c6ec:	2a0c      	cmp	r2, #12
 800c6ee:	f43f af36 	beq.w	800c55e <follow_path+0x11e>
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c6f2:	07b3      	lsls	r3, r6, #30
 800c6f4:	d508      	bpl.n	800c708 <follow_path+0x2c8>
 800c6f6:	e735      	b.n	800c564 <follow_path+0x124>
 800c6f8:	07b4      	lsls	r4, r6, #30
 800c6fa:	f53f af33 	bmi.w	800c564 <follow_path+0x124>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800c6fe:	07f8      	lsls	r0, r7, #31
 800c700:	d502      	bpl.n	800c708 <follow_path+0x2c8>
 800c702:	f046 0610 	orr.w	r6, r6, #16
 800c706:	b2f6      	uxtb	r6, r6
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800c708:	0779      	lsls	r1, r7, #29
 800c70a:	f57f af2b 	bpl.w	800c564 <follow_path+0x124>
 800c70e:	f046 0608 	orr.w	r6, r6, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 800c712:	4650      	mov	r0, sl
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800c714:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800c716:	f88a 604b 	strb.w	r6, [sl, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 800c71a:	f7ff fcbf 	bl	800c09c <dir_find>
			ns = dp->fn[NSFLAG];
 800c71e:	f89a 304b 	ldrb.w	r3, [sl, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800c722:	2800      	cmp	r0, #0
 800c724:	f43f af28 	beq.w	800c578 <follow_path+0x138>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c728:	2804      	cmp	r0, #4
 800c72a:	f47f af60 	bne.w	800c5ee <follow_path+0x1ae>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c72e:	f013 0f04 	tst.w	r3, #4
 800c732:	bf08      	it	eq
 800c734:	2005      	moveq	r0, #5
 800c736:	e75a      	b.n	800c5ee <follow_path+0x1ae>
		if (wc >= 0x100) {				/* Is this a DBC? */
 800c738:	28ff      	cmp	r0, #255	; 0xff
 800c73a:	d9c8      	bls.n	800c6ce <follow_path+0x28e>
			if (i >= ni - 1) {			/* Field overflow? */
 800c73c:	1e68      	subs	r0, r5, #1
 800c73e:	42a0      	cmp	r0, r4
 800c740:	d911      	bls.n	800c766 <follow_path+0x326>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800c742:	1918      	adds	r0, r3, r4
 800c744:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 800c748:	4616      	mov	r6, r2
 800c74a:	3401      	adds	r4, #1
		dp->fn[i++] = (BYTE)wc;
 800c74c:	b2c9      	uxtb	r1, r1
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800c74e:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
 800c752:	e764      	b.n	800c61e <follow_path+0x1de>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800c754:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
 800c758:	b280      	uxth	r0, r0
 800c75a:	2819      	cmp	r0, #25
 800c75c:	d811      	bhi.n	800c782 <follow_path+0x342>
					b |= 2;
 800c75e:	f047 0702 	orr.w	r7, r7, #2
		dp->fn[i++] = (BYTE)wc;
 800c762:	b2c9      	uxtb	r1, r1
 800c764:	e75b      	b.n	800c61e <follow_path+0x1de>
				cf |= NS_LOSS | NS_LFN;
 800c766:	f046 0603 	orr.w	r6, r6, #3
				i = ni; continue;		/* Next field */
 800c76a:	462c      	mov	r4, r5
				cf |= NS_LOSS | NS_LFN;
 800c76c:	b2f6      	uxtb	r6, r6
				i = ni; continue;		/* Next field */
 800c76e:	e6da      	b.n	800c526 <follow_path+0xe6>
		dp->fn[NSFLAG] = NS_NONAME;
 800c770:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800c772:	4650      	mov	r0, sl
		dp->fn[NSFLAG] = NS_NONAME;
 800c774:	f88a 304b 	strb.w	r3, [sl, #75]	; 0x4b
}
 800c778:	b005      	add	sp, #20
 800c77a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800c77e:	f7ff bb63 	b.w	800be48 <dir_sdi>
				if (IsLower(wc)) {		/* ASCII lower case? */
 800c782:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
 800c786:	b280      	uxth	r0, r0
 800c788:	2819      	cmp	r0, #25
					b |= 1; wc -= 0x20;
 800c78a:	bf9c      	itt	ls
 800c78c:	3920      	subls	r1, #32
 800c78e:	f047 0701 	orrls.w	r7, r7, #1
		dp->fn[i++] = (BYTE)wc;
 800c792:	b2c9      	uxtb	r1, r1
 800c794:	e743      	b.n	800c61e <follow_path+0x1de>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c796:	2005      	movs	r0, #5
}
 800c798:	b005      	add	sp, #20
 800c79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
 800c79e:	469a      	mov	sl, r3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
				cf |= NS_LOSS | NS_LFN;
 800c7a4:	f046 0603 	orr.w	r6, r6, #3
 800c7a8:	9d01      	ldr	r5, [sp, #4]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7aa:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN;
 800c7ac:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7ae:	f47f aecd 	bne.w	800c54c <follow_path+0x10c>
 800c7b2:	2305      	movs	r3, #5
 800c7b4:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800c7b8:	e6c8      	b.n	800c54c <follow_path+0x10c>
 800c7ba:	bf00      	nop
 800c7bc:	0801560c 	.word	0x0801560c
 800c7c0:	08015614 	.word	0x08015614
 800c7c4:	08015600 	.word	0x08015600

0800c7c8 <store_xdir>:
{
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	4605      	mov	r5, r0
	for (i = sum = 0; i < szblk; i++) {
 800c7ce:	2100      	movs	r1, #0
{
 800c7d0:	b083      	sub	sp, #12
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 800c7d2:	682b      	ldr	r3, [r5, #0]
	for (i = sum = 0; i < szblk; i++) {
 800c7d4:	4608      	mov	r0, r1
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 800c7d6:	695c      	ldr	r4, [r3, #20]
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800c7d8:	7867      	ldrb	r7, [r4, #1]
 800c7da:	3701      	adds	r7, #1
 800c7dc:	017e      	lsls	r6, r7, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800c7de:	2802      	cmp	r0, #2
 800c7e0:	d10e      	bne.n	800c800 <store_xdir+0x38>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c7e2:	7923      	ldrb	r3, [r4, #4]
	for (i = sum = 0; i < szblk; i++) {
 800c7e4:	2006      	movs	r0, #6
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c7e6:	7962      	ldrb	r2, [r4, #5]
 800c7e8:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800c7f2:	f3c3 014e 	ubfx	r1, r3, #1, #15
 800c7f6:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 800c7fa:	fa11 f383 	uxtah	r3, r1, r3
 800c7fe:	b299      	uxth	r1, r3
 800c800:	5c23      	ldrb	r3, [r4, r0]
	for (i = sum = 0; i < szblk; i++) {
 800c802:	3001      	adds	r0, #1
 800c804:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800c808:	4286      	cmp	r6, r0
 800c80a:	b29b      	uxth	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c80c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800c810:	b299      	uxth	r1, r3
	for (i = sum = 0; i < szblk; i++) {
 800c812:	d8e4      	bhi.n	800c7de <store_xdir+0x16>
	*ptr++ = (BYTE)val; val >>= 8;
 800c814:	0a0b      	lsrs	r3, r1, #8
 800c816:	70a1      	strb	r1, [r4, #2]
	res = dir_sdi(dp, dp->blk_ofs);
 800c818:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 800c81a:	70e3      	strb	r3, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);
 800c81c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800c81e:	f7ff fb13 	bl	800be48 <dir_sdi>
	while (res == FR_OK) {
 800c822:	4680      	mov	r8, r0
 800c824:	2800      	cmp	r0, #0
 800c826:	f040 80a9 	bne.w	800c97c <store_xdir+0x1b4>
 800c82a:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800c82e:	f04f 0901 	mov.w	r9, #1
		res = move_window(dp->obj.fs, dp->sect);
 800c832:	682e      	ldr	r6, [r5, #0]
	if (sect != fs->winsect) {	/* Window offset changed? */
 800c834:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800c836:	4592      	cmp	sl, r2
 800c838:	d015      	beq.n	800c866 <store_xdir+0x9e>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800c83a:	7933      	ldrb	r3, [r6, #4]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800c83c:	f106 0140 	add.w	r1, r6, #64	; 0x40
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800c840:	2b00      	cmp	r3, #0
 800c842:	d155      	bne.n	800c8f0 <store_xdir+0x128>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800c844:	2301      	movs	r3, #1
 800c846:	4652      	mov	r2, sl
 800c848:	7870      	ldrb	r0, [r6, #1]
 800c84a:	f7fe f9af 	bl	800abac <disk_read>
 800c84e:	b140      	cbz	r0, 800c862 <store_xdir+0x9a>
			fs->winsect = sect;
 800c850:	f04f 33ff 	mov.w	r3, #4294967295
 800c854:	f04f 0801 	mov.w	r8, #1
 800c858:	63f3      	str	r3, [r6, #60]	; 0x3c
}
 800c85a:	4640      	mov	r0, r8
 800c85c:	b003      	add	sp, #12
 800c85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
 800c862:	f8c6 a03c 	str.w	sl, [r6, #60]	; 0x3c
		memcpy(dp->dir, dirb, SZDIRE);
 800c866:	6826      	ldr	r6, [r4, #0]
		if (--nent == 0) break;
 800c868:	3f01      	subs	r7, #1
		memcpy(dp->dir, dirb, SZDIRE);
 800c86a:	6860      	ldr	r0, [r4, #4]
 800c86c:	68a1      	ldr	r1, [r4, #8]
 800c86e:	68e2      	ldr	r2, [r4, #12]
 800c870:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c872:	601e      	str	r6, [r3, #0]
 800c874:	6058      	str	r0, [r3, #4]
 800c876:	6099      	str	r1, [r3, #8]
 800c878:	60da      	str	r2, [r3, #12]
 800c87a:	6926      	ldr	r6, [r4, #16]
 800c87c:	6960      	ldr	r0, [r4, #20]
 800c87e:	69a1      	ldr	r1, [r4, #24]
 800c880:	69e2      	ldr	r2, [r4, #28]
 800c882:	611e      	str	r6, [r3, #16]
 800c884:	6158      	str	r0, [r3, #20]
 800c886:	6199      	str	r1, [r3, #24]
 800c888:	61da      	str	r2, [r3, #28]
		dp->obj.fs->wflag = 1;
 800c88a:	682e      	ldr	r6, [r5, #0]
 800c88c:	f886 9004 	strb.w	r9, [r6, #4]
		if (--nent == 0) break;
 800c890:	d0e3      	beq.n	800c85a <store_xdir+0x92>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c892:	7832      	ldrb	r2, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c894:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c896:	2a04      	cmp	r2, #4
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c898:	f103 0320 	add.w	r3, r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c89c:	bf0c      	ite	eq
 800c89e:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800c8a2:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d307      	bcc.n	800c8ba <store_xdir+0xf2>
 800c8aa:	f04f 0802 	mov.w	r8, #2
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4640      	mov	r0, r8
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c8b2:	63ab      	str	r3, [r5, #56]	; 0x38
}
 800c8b4:	b003      	add	sp, #12
 800c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c8ba:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
 800c8be:	f1ba 0f00 	cmp.w	sl, #0
 800c8c2:	d058      	beq.n	800c976 <store_xdir+0x1ae>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c8c4:	89b2      	ldrh	r2, [r6, #12]
 800c8c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8ca:	fb02 3210 	mls	r2, r2, r0, r3
 800c8ce:	b94a      	cbnz	r2, 800c8e4 <store_xdir+0x11c>
		dp->sect++;				/* Next sector */
 800c8d0:	f10a 0a01 	add.w	sl, sl, #1
		if (dp->clust == 0) {	/* Static table */
 800c8d4:	6b69      	ldr	r1, [r5, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800c8d6:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800c8da:	b999      	cbnz	r1, 800c904 <store_xdir+0x13c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c8dc:	8931      	ldrh	r1, [r6, #8]
 800c8de:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
 800c8e2:	d9e2      	bls.n	800c8aa <store_xdir+0xe2>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8e4:	3640      	adds	r6, #64	; 0x40
		dirb += SZDIRE;
 800c8e6:	3420      	adds	r4, #32
	dp->dptr = ofs;						/* Current entry */
 800c8e8:	632b      	str	r3, [r5, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8ea:	4416      	add	r6, r2
 800c8ec:	63ee      	str	r6, [r5, #60]	; 0x3c
	while (res == FR_OK) {
 800c8ee:	e7a0      	b.n	800c832 <store_xdir+0x6a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	7870      	ldrb	r0, [r6, #1]
 800c8f4:	9101      	str	r1, [sp, #4]
 800c8f6:	f7fe f969 	bl	800abcc <disk_write>
 800c8fa:	9901      	ldr	r1, [sp, #4]
 800c8fc:	b338      	cbz	r0, 800c94e <store_xdir+0x186>
 800c8fe:	f04f 0801 	mov.w	r8, #1
 800c902:	e7aa      	b.n	800c85a <store_xdir+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c904:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 800c908:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c90c:	ea1c 0b00 	ands.w	fp, ip, r0
 800c910:	d1e8      	bne.n	800c8e4 <store_xdir+0x11c>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c912:	4628      	mov	r0, r5
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	f7fe fb9b 	bl	800b050 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c91a:	2801      	cmp	r0, #1
 800c91c:	d92b      	bls.n	800c976 <store_xdir+0x1ae>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c91e:	1c43      	adds	r3, r0, #1
 800c920:	d0ed      	beq.n	800c8fe <store_xdir+0x136>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c922:	6a32      	ldr	r2, [r6, #32]
 800c924:	4290      	cmp	r0, r2
 800c926:	d2c0      	bcs.n	800c8aa <store_xdir+0xe2>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c928:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800c92a:	6368      	str	r0, [r5, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800c92c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	4290      	cmp	r0, r2
 800c932:	d203      	bcs.n	800c93c <store_xdir+0x174>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800c934:	8971      	ldrh	r1, [r6, #10]
 800c936:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800c938:	fb00 2b01 	mla	fp, r0, r1, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c93c:	89b1      	ldrh	r1, [r6, #12]
 800c93e:	46da      	mov	sl, fp
				dp->sect = clst2sect(fs, clst);
 800c940:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c944:	fbb3 f2f1 	udiv	r2, r3, r1
 800c948:	fb01 3212 	mls	r2, r1, r2, r3
 800c94c:	e7ca      	b.n	800c8e4 <store_xdir+0x11c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800c94e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
			fs->wflag = 0;	/* Clear window dirty flag */
 800c950:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800c952:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800c954:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c956:	1ac3      	subs	r3, r0, r3
 800c958:	4293      	cmp	r3, r2
 800c95a:	f4bf af73 	bcs.w	800c844 <store_xdir+0x7c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800c95e:	78f3      	ldrb	r3, [r6, #3]
 800c960:	2b02      	cmp	r3, #2
 800c962:	f47f af6f 	bne.w	800c844 <store_xdir+0x7c>
 800c966:	4402      	add	r2, r0
 800c968:	2301      	movs	r3, #1
 800c96a:	7870      	ldrb	r0, [r6, #1]
 800c96c:	9101      	str	r1, [sp, #4]
 800c96e:	f7fe f92d 	bl	800abcc <disk_write>
 800c972:	9901      	ldr	r1, [sp, #4]
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c974:	e766      	b.n	800c844 <store_xdir+0x7c>
 800c976:	f04f 0802 	mov.w	r8, #2
 800c97a:	e76e      	b.n	800c85a <store_xdir+0x92>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c97c:	2802      	cmp	r0, #2
 800c97e:	bf28      	it	cs
 800c980:	f04f 0802 	movcs.w	r8, #2
 800c984:	fa5f f888 	uxtb.w	r8, r8
 800c988:	e767      	b.n	800c85a <store_xdir+0x92>
 800c98a:	bf00      	nop

0800c98c <create_chain>:
{
 800c98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800c992:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800c994:	4689      	mov	r9, r1
 800c996:	2900      	cmp	r1, #0
 800c998:	f040 80d3 	bne.w	800cb42 <create_chain+0x1b6>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800c99c:	69af      	ldr	r7, [r5, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c99e:	b30f      	cbz	r7, 800c9e4 <create_chain+0x58>
 800c9a0:	6a2b      	ldr	r3, [r5, #32]
 800c9a2:	42bb      	cmp	r3, r7
 800c9a4:	bf98      	it	ls
 800c9a6:	2701      	movls	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800c9a8:	69eb      	ldr	r3, [r5, #28]
 800c9aa:	b1fb      	cbz	r3, 800c9ec <create_chain+0x60>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c9ac:	782b      	ldrb	r3, [r5, #0]
 800c9ae:	2b04      	cmp	r3, #4
 800c9b0:	f000 8115 	beq.w	800cbde <create_chain+0x252>
		if (scl == clst) {						/* Stretching an existing chain? */
 800c9b4:	454f      	cmp	r7, r9
 800c9b6:	f000 80f9 	beq.w	800cbac <create_chain+0x220>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800c9ba:	6a2b      	ldr	r3, [r5, #32]
 800c9bc:	463c      	mov	r4, r7
				ncl++;							/* Next cluster */
 800c9be:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c9c0:	429c      	cmp	r4, r3
 800c9c2:	d353      	bcc.n	800ca6c <create_chain+0xe0>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800c9c4:	2f01      	cmp	r7, #1
 800c9c6:	d011      	beq.n	800c9ec <create_chain+0x60>
	FATFS *fs = obj->fs;
 800c9c8:	f8d8 6000 	ldr.w	r6, [r8]
					ncl = 2;
 800c9cc:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c9ce:	6a33      	ldr	r3, [r6, #32]
 800c9d0:	42a3      	cmp	r3, r4
 800c9d2:	d94f      	bls.n	800ca74 <create_chain+0xe8>
		switch (fs->fs_type) {
 800c9d4:	7833      	ldrb	r3, [r6, #0]
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	2b03      	cmp	r3, #3
 800c9da:	d84b      	bhi.n	800ca74 <create_chain+0xe8>
 800c9dc:	e8df f003 	tbb	[pc, r3]
 800c9e0:	0a4e8da1 	.word	0x0a4e8da1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800c9e4:	69eb      	ldr	r3, [r5, #28]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c9e6:	2701      	movs	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1df      	bne.n	800c9ac <create_chain+0x20>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800c9ec:	2400      	movs	r4, #0
}
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800c9f4:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 800c9f8:	ea50 0301 	orrs.w	r3, r0, r1
 800c9fc:	f000 80ad 	beq.w	800cb5a <create_chain+0x1ce>
 800ca00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 80a8 	beq.w	800cb5a <create_chain+0x1ce>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ca0a:	eba4 0a03 	sub.w	sl, r4, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800ca0e:	f898 3007 	ldrb.w	r3, [r8, #7]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800ca12:	89b2      	ldrh	r2, [r6, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800ca14:	2b02      	cmp	r3, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800ca16:	f8b6 b00a 	ldrh.w	fp, [r6, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800ca1a:	f000 8187 	beq.w	800cd2c <create_chain+0x3a0>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ca1e:	2b03      	cmp	r3, #3
 800ca20:	f000 816e 	beq.w	800cd00 <create_chain+0x374>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ca24:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800ca28:	b9d3      	cbnz	r3, 800ca60 <create_chain+0xd4>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca2a:	0893      	lsrs	r3, r2, #2
 800ca2c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800ca2e:	4630      	mov	r0, r6
 800ca30:	fbb4 f3f3 	udiv	r3, r4, r3
 800ca34:	4419      	add	r1, r3
 800ca36:	f7fe fa3b 	bl	800aeb0 <move_window>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d17c      	bne.n	800cb38 <create_chain+0x1ac>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ca3e:	00a3      	lsls	r3, r4, #2
 800ca40:	89b2      	ldrh	r2, [r6, #12]
 800ca42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca46:	fb02 3311 	mls	r3, r2, r1, r3
	rv = rv << 8 | ptr[0];
 800ca4a:	4433      	add	r3, r6
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ca4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				if (cs == 0) break;				/* Found a free cluster? */
 800ca52:	b353      	cbz	r3, 800caaa <create_chain+0x11e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	f000 81bc 	beq.w	800cdd2 <create_chain+0x446>
 800ca5a:	1c5a      	adds	r2, r3, #1
 800ca5c:	f000 81b9 	beq.w	800cdd2 <create_chain+0x446>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800ca60:	42a7      	cmp	r7, r4
 800ca62:	d0c3      	beq.n	800c9ec <create_chain+0x60>
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ca64:	6a2b      	ldr	r3, [r5, #32]
				ncl++;							/* Next cluster */
 800ca66:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	d2ab      	bcs.n	800c9c4 <create_chain+0x38>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca6c:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 800ca6e:	f8d8 6000 	ldr.w	r6, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca72:	d8ac      	bhi.n	800c9ce <create_chain+0x42>
		switch (fs->fs_type) {
 800ca74:	2401      	movs	r4, #1
}
 800ca76:	4620      	mov	r0, r4
 800ca78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca7c:	89b3      	ldrh	r3, [r6, #12]
 800ca7e:	4630      	mov	r0, r6
 800ca80:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800ca82:	089b      	lsrs	r3, r3, #2
 800ca84:	fbb4 f3f3 	udiv	r3, r4, r3
 800ca88:	4419      	add	r1, r3
 800ca8a:	f7fe fa11 	bl	800aeb0 <move_window>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d152      	bne.n	800cb38 <create_chain+0x1ac>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800ca92:	00a3      	lsls	r3, r4, #2
 800ca94:	89b2      	ldrh	r2, [r6, #12]
 800ca96:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca9a:	fb02 3311 	mls	r3, r2, r1, r3
	rv = rv << 8 | ptr[0];
 800ca9e:	4433      	add	r3, r6
 800caa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800caa2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
				if (cs == 0) break;				/* Found a free cluster? */
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1d4      	bne.n	800ca54 <create_chain+0xc8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800caaa:	6a2b      	ldr	r3, [r5, #32]
 800caac:	42a3      	cmp	r3, r4
 800caae:	d9e1      	bls.n	800ca74 <create_chain+0xe8>
 800cab0:	f04f 32ff 	mov.w	r2, #4294967295
 800cab4:	4621      	mov	r1, r4
 800cab6:	4628      	mov	r0, r5
 800cab8:	f7fe fa30 	bl	800af1c <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800cabc:	b968      	cbnz	r0, 800cada <create_chain+0x14e>
 800cabe:	f1b9 0f00 	cmp.w	r9, #0
 800cac2:	d00a      	beq.n	800cada <create_chain+0x14e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cac4:	f1b9 0f01 	cmp.w	r9, #1
 800cac8:	d0d4      	beq.n	800ca74 <create_chain+0xe8>
 800caca:	6a2b      	ldr	r3, [r5, #32]
 800cacc:	4599      	cmp	r9, r3
 800cace:	d2d1      	bcs.n	800ca74 <create_chain+0xe8>
 800cad0:	4622      	mov	r2, r4
 800cad2:	4649      	mov	r1, r9
 800cad4:	4628      	mov	r0, r5
 800cad6:	f7fe fa21 	bl	800af1c <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cada:	2800      	cmp	r0, #0
 800cadc:	f040 8117 	bne.w	800cd0e <create_chain+0x382>
		fs->last_clst = ncl;
 800cae0:	61ac      	str	r4, [r5, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cae2:	e9d5 2307 	ldrd	r2, r3, [r5, #28]
 800cae6:	3b02      	subs	r3, #2
 800cae8:	429a      	cmp	r2, r3
 800caea:	d801      	bhi.n	800caf0 <create_chain+0x164>
 800caec:	3a01      	subs	r2, #1
 800caee:	61ea      	str	r2, [r5, #28]
		fs->fsi_flag |= 1;
 800caf0:	796b      	ldrb	r3, [r5, #5]
 800caf2:	f043 0301 	orr.w	r3, r3, #1
 800caf6:	716b      	strb	r3, [r5, #5]
 800caf8:	e020      	b.n	800cb3c <create_chain+0x1b0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cafa:	89b3      	ldrh	r3, [r6, #12]
 800cafc:	4630      	mov	r0, r6
 800cafe:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800cb00:	085b      	lsrs	r3, r3, #1
 800cb02:	fbb4 f3f3 	udiv	r3, r4, r3
 800cb06:	4419      	add	r1, r3
 800cb08:	f7fe f9d2 	bl	800aeb0 <move_window>
 800cb0c:	b9a0      	cbnz	r0, 800cb38 <create_chain+0x1ac>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800cb0e:	0063      	lsls	r3, r4, #1
 800cb10:	89b2      	ldrh	r2, [r6, #12]
 800cb12:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb16:	fb02 3311 	mls	r3, r2, r1, r3
 800cb1a:	4433      	add	r3, r6
 800cb1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
			break;
 800cb20:	e797      	b.n	800ca52 <create_chain+0xc6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb22:	89b3      	ldrh	r3, [r6, #12]
			bc = (UINT)clst; bc += bc / 2;
 800cb24:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb28:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	fbba f3f3 	udiv	r3, sl, r3
 800cb30:	4419      	add	r1, r3
 800cb32:	f7fe f9bd 	bl	800aeb0 <move_window>
 800cb36:	b1b0      	cbz	r0, 800cb66 <create_chain+0x1da>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb38:	f04f 34ff 	mov.w	r4, #4294967295
}
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb42:	f7fe fa85 	bl	800b050 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
 800cb46:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb48:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 800cb4a:	d993      	bls.n	800ca74 <create_chain+0xe8>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800cb4c:	1c46      	adds	r6, r0, #1
 800cb4e:	d0f3      	beq.n	800cb38 <create_chain+0x1ac>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb50:	6a2b      	ldr	r3, [r5, #32]
 800cb52:	4283      	cmp	r3, r0
 800cb54:	d8f2      	bhi.n	800cb3c <create_chain+0x1b0>
 800cb56:	464f      	mov	r7, r9
 800cb58:	e726      	b.n	800c9a8 <create_chain+0x1c>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800cb5a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d188      	bne.n	800ca74 <create_chain+0xe8>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800cb62:	89b2      	ldrh	r2, [r6, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800cb64:	e75e      	b.n	800ca24 <create_chain+0x98>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800cb66:	89b1      	ldrh	r1, [r6, #12]
 800cb68:	f10a 0b01 	add.w	fp, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb6c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800cb6e:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800cb70:	fbba f2f1 	udiv	r2, sl, r1
 800cb74:	fb01 aa12 	mls	sl, r1, r2, sl
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb78:	fbbb f1f1 	udiv	r1, fp, r1
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800cb7c:	44b2      	add	sl, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb7e:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800cb80:	f89a a040 	ldrb.w	sl, [sl, #64]	; 0x40
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb84:	f7fe f994 	bl	800aeb0 <move_window>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d1d5      	bne.n	800cb38 <create_chain+0x1ac>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800cb8c:	89b3      	ldrh	r3, [r6, #12]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800cb8e:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800cb90:	fbbb f2f3 	udiv	r2, fp, r3
 800cb94:	fb03 bb12 	mls	fp, r3, r2, fp
 800cb98:	44b3      	add	fp, r6
 800cb9a:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 800cb9e:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800cba2:	bf4c      	ite	mi
 800cba4:	091b      	lsrmi	r3, r3, #4
 800cba6:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
 800cbaa:	e752      	b.n	800ca52 <create_chain+0xc6>
			if (ncl >= fs->n_fatent) ncl = 2;
 800cbac:	6a2b      	ldr	r3, [r5, #32]
			ncl = scl + 1;						/* Test if next cluster is free */
 800cbae:	1c7e      	adds	r6, r7, #1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800cbb0:	4640      	mov	r0, r8
			if (ncl >= fs->n_fatent) ncl = 2;
 800cbb2:	42b3      	cmp	r3, r6
 800cbb4:	bf98      	it	ls
 800cbb6:	2602      	movls	r6, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800cbb8:	4631      	mov	r1, r6
 800cbba:	f7fe fa49 	bl	800b050 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800cbbe:	2801      	cmp	r0, #1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800cbc0:	4604      	mov	r4, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800cbc2:	d0bb      	beq.n	800cb3c <create_chain+0x1b0>
 800cbc4:	1c60      	adds	r0, r4, #1
 800cbc6:	d0b9      	beq.n	800cb3c <create_chain+0x1b0>
			if (cs != 0) {						/* Not free? */
 800cbc8:	2c00      	cmp	r4, #0
 800cbca:	f040 8090 	bne.w	800ccee <create_chain+0x362>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800cbce:	2e00      	cmp	r6, #0
 800cbd0:	f43f aef3 	beq.w	800c9ba <create_chain+0x2e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cbd4:	2e01      	cmp	r6, #1
 800cbd6:	f43f af4d 	beq.w	800ca74 <create_chain+0xe8>
 800cbda:	4634      	mov	r4, r6
 800cbdc:	e765      	b.n	800caaa <create_chain+0x11e>
	if (clst >= fs->n_fatent - 2) clst = 0;
 800cbde:	6a2b      	ldr	r3, [r5, #32]
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800cbe0:	f1a7 0a02 	sub.w	sl, r7, #2
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cbe4:	89aa      	ldrh	r2, [r5, #12]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800cbe6:	3b02      	subs	r3, #2
 800cbe8:	459a      	cmp	sl, r3
 800cbea:	bf28      	it	cs
 800cbec:	f04f 0a00 	movcs.w	sl, #0
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cbf0:	4656      	mov	r6, sl
 800cbf2:	ea4f 0bd6 	mov.w	fp, r6, lsr #3
 800cbf6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	fbbb f2f2 	udiv	r2, fp, r2
 800cbfe:	4411      	add	r1, r2
 800cc00:	f7fe f956 	bl	800aeb0 <move_window>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d197      	bne.n	800cb38 <create_chain+0x1ac>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800cc08:	89aa      	ldrh	r2, [r5, #12]
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	f006 0307 	and.w	r3, r6, #7
 800cc10:	fa01 f303 	lsl.w	r3, r1, r3
 800cc14:	fbbb f1f2 	udiv	r1, fp, r2
 800cc18:	fb02 bc11 	mls	ip, r2, r1, fp
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cc1c:	6a29      	ldr	r1, [r5, #32]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800cc1e:	b2db      	uxtb	r3, r3
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cc20:	eb05 000c 	add.w	r0, r5, ip
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cc24:	3902      	subs	r1, #2
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cc26:	f890 e040 	ldrb.w	lr, [r0, #64]	; 0x40
 800cc2a:	f1ba 0f00 	cmp.w	sl, #0
 800cc2e:	d03d      	beq.n	800ccac <create_chain+0x320>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cc30:	1c70      	adds	r0, r6, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cc32:	ea03 040e 	and.w	r4, r3, lr
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cc36:	4281      	cmp	r1, r0
 800cc38:	d841      	bhi.n	800ccbe <create_chain+0x332>
				if (bv == 0) {	/* Is it a free cluster? */
 800cc3a:	2c00      	cmp	r4, #0
 800cc3c:	d14a      	bne.n	800ccd4 <create_chain+0x348>
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cc3e:	3003      	adds	r0, #3
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800cc40:	f106 0402 	add.w	r4, r6, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cc44:	f63f af7a 	bhi.w	800cb3c <create_chain+0x1b0>
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800cc48:	08f3      	lsrs	r3, r6, #3
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800cc4a:	f04f 0a01 	mov.w	sl, #1
 800cc4e:	f006 0607 	and.w	r6, r6, #7
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cc52:	4628      	mov	r0, r5
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800cc54:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc58:	fb02 3b11 	mls	fp, r2, r1, r3
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800cc5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800cc5e:	fa0a f606 	lsl.w	r6, sl, r6
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cc62:	4419      	add	r1, r3
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800cc64:	b2f6      	uxtb	r6, r6
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cc66:	f7fe f923 	bl	800aeb0 <move_window>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	f47f af64 	bne.w	800cb38 <create_chain+0x1ac>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800cc70:	eb05 030b 	add.w	r3, r5, fp
 800cc74:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cc78:	4216      	tst	r6, r2
 800cc7a:	f47f aefb 	bne.w	800ca74 <create_chain+0xe8>
				fs->win[i] ^= bm;	/* Flip the bit */
 800cc7e:	4056      	eors	r6, r2
 800cc80:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
				fs->wflag = 1;
 800cc84:	f885 a004 	strb.w	sl, [r5, #4]
		if (clst == 0) {							/* Is it a new chain? */
 800cc88:	f1b9 0f00 	cmp.w	r9, #0
 800cc8c:	d15e      	bne.n	800cd4c <create_chain+0x3c0>
			obj->stat = 2;							/* Set status 'contiguous' */
 800cc8e:	2302      	movs	r3, #2
 800cc90:	f888 3007 	strb.w	r3, [r8, #7]
 800cc94:	e724      	b.n	800cae0 <create_chain+0x154>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cc96:	005b      	lsls	r3, r3, #1
				if (bv == 0) {	/* Is it a free cluster? */
 800cc98:	f1bb 0f00 	cmp.w	fp, #0
 800cc9c:	d0cf      	beq.n	800cc3e <create_chain+0x2b2>
				if (val == clst) return 0;	/* All cluster scanned? */
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f43f aea4 	beq.w	800c9ec <create_chain+0x60>
			} while (bm != 0);
 800cca4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800cca8:	d035      	beq.n	800cd16 <create_chain+0x38a>
			bm = 1;
 800ccaa:	4606      	mov	r6, r0
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ccac:	1c70      	adds	r0, r6, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ccae:	ea03 0b0e 	and.w	fp, r3, lr
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ccb2:	4288      	cmp	r0, r1
 800ccb4:	d3ef      	bcc.n	800cc96 <create_chain+0x30a>
				if (bv == 0) {	/* Is it a free cluster? */
 800ccb6:	f1bb 0f00 	cmp.w	fp, #0
 800ccba:	d0c0      	beq.n	800cc3e <create_chain+0x2b2>
 800ccbc:	e696      	b.n	800c9ec <create_chain+0x60>
 800ccbe:	2c00      	cmp	r4, #0
 800ccc0:	d0bd      	beq.n	800cc3e <create_chain+0x2b2>
				if (val == clst) return 0;	/* All cluster scanned? */
 800ccc2:	4582      	cmp	sl, r0
 800ccc4:	f43f ae92 	beq.w	800c9ec <create_chain+0x60>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ccc8:	005b      	lsls	r3, r3, #1
			} while (bm != 0);
 800ccca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800ccce:	d003      	beq.n	800ccd8 <create_chain+0x34c>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800ccd0:	4606      	mov	r6, r0
 800ccd2:	e7ad      	b.n	800cc30 <create_chain+0x2a4>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800ccd4:	4694      	mov	ip, r2
				if (bv == 0) {	/* Is it a free cluster? */
 800ccd6:	2000      	movs	r0, #0
		} while (++i < SS(fs));
 800ccd8:	f10c 0c01 	add.w	ip, ip, #1
 800ccdc:	4562      	cmp	r2, ip
 800ccde:	d933      	bls.n	800cd48 <create_chain+0x3bc>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cce0:	eb05 030c 	add.w	r3, r5, ip
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cce4:	4606      	mov	r6, r0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cce6:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
			bm = 1;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e7a0      	b.n	800cc30 <create_chain+0x2a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800ccee:	69aa      	ldr	r2, [r5, #24]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800ccf0:	6a2b      	ldr	r3, [r5, #32]
 800ccf2:	2a01      	cmp	r2, #1
 800ccf4:	f67f ae62 	bls.w	800c9bc <create_chain+0x30>
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	bf88      	it	hi
 800ccfc:	4617      	movhi	r7, r2
 800ccfe:	e65d      	b.n	800c9bc <create_chain+0x30>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800cd00:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800cd04:	459a      	cmp	sl, r3
 800cd06:	f4bf ae8d 	bcs.w	800ca24 <create_chain+0x98>
					val = clst + 1; 	/* Generate the value */
 800cd0a:	1c63      	adds	r3, r4, #1
					break;
 800cd0c:	e6a1      	b.n	800ca52 <create_chain+0xc6>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cd0e:	2801      	cmp	r0, #1
 800cd10:	f43f af12 	beq.w	800cb38 <create_chain+0x1ac>
 800cd14:	e6ae      	b.n	800ca74 <create_chain+0xe8>
		} while (++i < SS(fs));
 800cd16:	f10c 0c01 	add.w	ip, ip, #1
 800cd1a:	4562      	cmp	r2, ip
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cd1c:	eb05 030c 	add.w	r3, r5, ip
		} while (++i < SS(fs));
 800cd20:	d912      	bls.n	800cd48 <create_chain+0x3bc>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cd22:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
			bm = 1;
 800cd26:	4606      	mov	r6, r0
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e7bf      	b.n	800ccac <create_chain+0x320>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800cd2c:	3801      	subs	r0, #1
 800cd2e:	f04f 0300 	mov.w	r3, #0
 800cd32:	f161 0100 	sbc.w	r1, r1, #0
 800cd36:	f7f3 fad7 	bl	80002e8 <__aeabi_uldivmod>
 800cd3a:	fbb0 f0fb 	udiv	r0, r0, fp
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800cd3e:	4582      	cmp	sl, r0
 800cd40:	f63f ae98 	bhi.w	800ca74 <create_chain+0xe8>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800cd44:	d1e1      	bne.n	800cd0a <create_chain+0x37e>
 800cd46:	e68b      	b.n	800ca60 <create_chain+0xd4>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800cd48:	4606      	mov	r6, r0
 800cd4a:	e752      	b.n	800cbf2 <create_chain+0x266>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800cd4c:	f898 3007 	ldrb.w	r3, [r8, #7]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d02f      	beq.n	800cdb4 <create_chain+0x428>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800cd54:	f109 0301 	add.w	r3, r9, #1
 800cd58:	42a3      	cmp	r3, r4
 800cd5a:	d026      	beq.n	800cdaa <create_chain+0x41e>
				if (obj->n_frag == 0) obj->n_frag = 1;
 800cd5c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800cd60:	b913      	cbnz	r3, 800cd68 <create_chain+0x3dc>
 800cd62:	2301      	movs	r3, #1
 800cd64:	f8c8 301c 	str.w	r3, [r8, #28]
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800cd68:	eba9 0203 	sub.w	r2, r9, r3
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	f8d8 0000 	ldr.w	r0, [r8]
 800cd72:	f102 0101 	add.w	r1, r2, #1
 800cd76:	f102 0202 	add.w	r2, r2, #2
 800cd7a:	bf08      	it	eq
 800cd7c:	4622      	moveq	r2, r4
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cd7e:	2901      	cmp	r1, #1
 800cd80:	f67f ae78 	bls.w	800ca74 <create_chain+0xe8>
 800cd84:	6a03      	ldr	r3, [r0, #32]
 800cd86:	4299      	cmp	r1, r3
 800cd88:	f4bf ae74 	bcs.w	800ca74 <create_chain+0xe8>
 800cd8c:	f7fe f8c6 	bl	800af1c <put_fat.part.0>
		if (res != FR_OK) return res;
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d1bc      	bne.n	800cd0e <create_chain+0x382>
		obj->n_frag--;
 800cd94:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	f8c8 301c 	str.w	r3, [r8, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e2      	bne.n	800cd68 <create_chain+0x3dc>
				if (res == FR_OK) obj->n_frag = 1;
 800cda2:	2301      	movs	r3, #1
 800cda4:	f8c8 301c 	str.w	r3, [r8, #28]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cda8:	e69a      	b.n	800cae0 <create_chain+0x154>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800cdaa:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800cdae:	b173      	cbz	r3, 800cdce <create_chain+0x442>
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	e7f7      	b.n	800cda4 <create_chain+0x418>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800cdb4:	1c7b      	adds	r3, r7, #1
 800cdb6:	42a3      	cmp	r3, r4
 800cdb8:	f43f ae92 	beq.w	800cae0 <create_chain+0x154>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800cdbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdc0:	1afb      	subs	r3, r7, r3
 800cdc2:	f8c8 3018 	str.w	r3, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	f888 3007 	strb.w	r3, [r8, #7]
 800cdcc:	e7c2      	b.n	800cd54 <create_chain+0x3c8>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800cdce:	2302      	movs	r3, #2
 800cdd0:	e7e8      	b.n	800cda4 <create_chain+0x418>
 800cdd2:	461c      	mov	r4, r3
 800cdd4:	e6b2      	b.n	800cb3c <create_chain+0x1b0>
 800cdd6:	bf00      	nop

0800cdd8 <dir_alloc>:
{
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	468a      	mov	sl, r1
 800cdde:	b083      	sub	sp, #12
	res = dir_sdi(dp, 0);
 800cde0:	2100      	movs	r1, #0
{
 800cde2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800cde4:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800cde6:	f7ff f82f 	bl	800be48 <dir_sdi>
	if (res == FR_OK) {
 800cdea:	4681      	mov	r9, r0
 800cdec:	b130      	cbz	r0, 800cdfc <dir_alloc+0x24>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cdee:	2804      	cmp	r0, #4
 800cdf0:	f000 80bc 	beq.w	800cf6c <dir_alloc+0x194>
}
 800cdf4:	4648      	mov	r0, r9
 800cdf6:	b003      	add	sp, #12
 800cdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 800cdfc:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		n = 0;
 800cdfe:	4680      	mov	r8, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 800ce00:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800ce02:	f106 0b40 	add.w	fp, r6, #64	; 0x40
	if (sect != fs->winsect) {	/* Window offset changed? */
 800ce06:	42ba      	cmp	r2, r7
 800ce08:	d013      	beq.n	800ce32 <dir_alloc+0x5a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800ce0a:	7933      	ldrb	r3, [r6, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d152      	bne.n	800ceb6 <dir_alloc+0xde>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800ce10:	2301      	movs	r3, #1
 800ce12:	463a      	mov	r2, r7
 800ce14:	4659      	mov	r1, fp
 800ce16:	7870      	ldrb	r0, [r6, #1]
 800ce18:	f7fd fec8 	bl	800abac <disk_read>
 800ce1c:	b140      	cbz	r0, 800ce30 <dir_alloc+0x58>
				res = FR_DISK_ERR;
 800ce1e:	f04f 0901 	mov.w	r9, #1
			fs->winsect = sect;
 800ce22:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ce26:	4648      	mov	r0, r9
			fs->winsect = sect;
 800ce28:	63f3      	str	r3, [r6, #60]	; 0x3c
}
 800ce2a:	b003      	add	sp, #12
 800ce2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
 800ce30:	63f7      	str	r7, [r6, #60]	; 0x3c
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800ce32:	7833      	ldrb	r3, [r6, #0]
 800ce34:	2b04      	cmp	r3, #4
 800ce36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce38:	d031      	beq.n	800ce9e <dir_alloc+0xc6>
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2be5      	cmp	r3, #229	; 0xe5
 800ce3e:	d032      	beq.n	800cea6 <dir_alloc+0xce>
 800ce40:	fab3 f283 	clz	r2, r3
 800ce44:	0952      	lsrs	r2, r2, #5
 800ce46:	b373      	cbz	r3, 800cea6 <dir_alloc+0xce>
				n = 0;				/* Not a free entry, restart to search */
 800ce48:	4690      	mov	r8, r2
	FATFS *fs = dp->obj.fs;
 800ce4a:	6825      	ldr	r5, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ce4e:	782a      	ldrb	r2, [r5, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce50:	3320      	adds	r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ce52:	2a04      	cmp	r2, #4
 800ce54:	bf0c      	ite	eq
 800ce56:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800ce5a:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d304      	bcc.n	800ce6c <dir_alloc+0x94>
 800ce62:	2300      	movs	r3, #0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ce64:	f04f 0907 	mov.w	r9, #7
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800ce68:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800ce6a:	e7c3      	b.n	800cdf4 <dir_alloc+0x1c>
 800ce6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce6e:	2900      	cmp	r1, #0
 800ce70:	d07c      	beq.n	800cf6c <dir_alloc+0x194>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ce72:	89aa      	ldrh	r2, [r5, #12]
 800ce74:	fbb3 fcf2 	udiv	ip, r3, r2
 800ce78:	fb02 301c 	mls	r0, r2, ip, r3
 800ce7c:	b940      	cbnz	r0, 800ce90 <dir_alloc+0xb8>
		dp->sect++;				/* Next sector */
 800ce7e:	3101      	adds	r1, #1
		if (dp->clust == 0) {	/* Static table */
 800ce80:	6b62      	ldr	r2, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800ce82:	63a1      	str	r1, [r4, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 800ce84:	bb7a      	cbnz	r2, 800cee6 <dir_alloc+0x10e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ce86:	892a      	ldrh	r2, [r5, #8]
 800ce88:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800ce8c:	d9e9      	bls.n	800ce62 <dir_alloc+0x8a>
	if (sect != fs->winsect) {	/* Window offset changed? */
 800ce8e:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ce90:	3540      	adds	r5, #64	; 0x40
 800ce92:	463a      	mov	r2, r7
	dp->dptr = ofs;						/* Current entry */
 800ce94:	6323      	str	r3, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ce96:	460f      	mov	r7, r1
 800ce98:	4405      	add	r5, r0
 800ce9a:	63e5      	str	r5, [r4, #60]	; 0x3c
		} while (res == FR_OK);
 800ce9c:	e7b3      	b.n	800ce06 <dir_alloc+0x2e>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800ce9e:	f993 3000 	ldrsb.w	r3, [r3]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	db04      	blt.n	800ceb0 <dir_alloc+0xd8>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800cea6:	f108 0801 	add.w	r8, r8, #1
 800ceaa:	45d0      	cmp	r8, sl
 800ceac:	d1cd      	bne.n	800ce4a <dir_alloc+0x72>
 800ceae:	e7a1      	b.n	800cdf4 <dir_alloc+0x1c>
				n = 0;				/* Not a free entry, restart to search */
 800ceb0:	f04f 0800 	mov.w	r8, #0
 800ceb4:	e7c9      	b.n	800ce4a <dir_alloc+0x72>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	4659      	mov	r1, fp
 800ceba:	7870      	ldrb	r0, [r6, #1]
 800cebc:	f7fd fe86 	bl	800abcc <disk_write>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d14b      	bne.n	800cf5c <dir_alloc+0x184>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800cec4:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 800cec6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800cec8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ceca:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
 800cecc:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800cece:	4293      	cmp	r3, r2
 800ced0:	d29e      	bcs.n	800ce10 <dir_alloc+0x38>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800ced2:	78f3      	ldrb	r3, [r6, #3]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d19b      	bne.n	800ce10 <dir_alloc+0x38>
 800ced8:	440a      	add	r2, r1
 800ceda:	2301      	movs	r3, #1
 800cedc:	4659      	mov	r1, fp
 800cede:	7870      	ldrb	r0, [r6, #1]
 800cee0:	f7fd fe74 	bl	800abcc <disk_write>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cee4:	e794      	b.n	800ce10 <dir_alloc+0x38>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800cee6:	896f      	ldrh	r7, [r5, #10]
 800cee8:	3f01      	subs	r7, #1
 800ceea:	ea17 0f0c 	tst.w	r7, ip
 800ceee:	d1ce      	bne.n	800ce8e <dir_alloc+0xb6>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800cef0:	4611      	mov	r1, r2
 800cef2:	4620      	mov	r0, r4
 800cef4:	9301      	str	r3, [sp, #4]
 800cef6:	f7fe f8ab 	bl	800b050 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800cefa:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800cefc:	4607      	mov	r7, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800cefe:	9b01      	ldr	r3, [sp, #4]
 800cf00:	d92f      	bls.n	800cf62 <dir_alloc+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf02:	1c42      	adds	r2, r0, #1
 800cf04:	d02a      	beq.n	800cf5c <dir_alloc+0x184>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800cf06:	6a2a      	ldr	r2, [r5, #32]
 800cf08:	4290      	cmp	r0, r2
 800cf0a:	d315      	bcc.n	800cf38 <dir_alloc+0x160>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cf0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf0e:	4620      	mov	r0, r4
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	f7ff fd3b 	bl	800c98c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cf16:	4607      	mov	r7, r0
 800cf18:	b340      	cbz	r0, 800cf6c <dir_alloc+0x194>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cf1a:	2801      	cmp	r0, #1
 800cf1c:	d021      	beq.n	800cf62 <dir_alloc+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf1e:	1c43      	adds	r3, r0, #1
 800cf20:	d01c      	beq.n	800cf5c <dir_alloc+0x184>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800cf22:	4601      	mov	r1, r0
 800cf24:	4628      	mov	r0, r5
 800cf26:	f7fe f991 	bl	800b24c <dir_clear>
 800cf2a:	b9b8      	cbnz	r0, 800cf5c <dir_alloc+0x184>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800cf2c:	79e2      	ldrb	r2, [r4, #7]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cf2e:	9b01      	ldr	r3, [sp, #4]
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800cf30:	f042 0204 	orr.w	r2, r2, #4
 800cf34:	71e2      	strb	r2, [r4, #7]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cf36:	6a2a      	ldr	r2, [r5, #32]
 800cf38:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800cf3a:	6367      	str	r7, [r4, #52]	; 0x34
	clst -= 2;		/* Cluster number is origin from 2 */
 800cf3c:	3f02      	subs	r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cf3e:	4297      	cmp	r7, r2
 800cf40:	d212      	bcs.n	800cf68 <dir_alloc+0x190>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800cf42:	896a      	ldrh	r2, [r5, #10]
 800cf44:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800cf46:	fb07 1102 	mla	r1, r7, r2, r1
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf4a:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
	if (sect != fs->winsect) {	/* Window offset changed? */
 800cf4e:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
				dp->sect = clst2sect(fs, clst);
 800cf50:	63a1      	str	r1, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf52:	fbb3 f2fc 	udiv	r2, r3, ip
 800cf56:	fb0c 3012 	mls	r0, ip, r2, r3
 800cf5a:	e799      	b.n	800ce90 <dir_alloc+0xb8>
				res = FR_DISK_ERR;
 800cf5c:	f04f 0901 	mov.w	r9, #1
 800cf60:	e748      	b.n	800cdf4 <dir_alloc+0x1c>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800cf62:	f04f 0902 	mov.w	r9, #2
 800cf66:	e745      	b.n	800cdf4 <dir_alloc+0x1c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800cf68:	2100      	movs	r1, #0
 800cf6a:	e7ee      	b.n	800cf4a <dir_alloc+0x172>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cf6c:	f04f 0907 	mov.w	r9, #7
 800cf70:	e740      	b.n	800cdf4 <dir_alloc+0x1c>
 800cf72:	bf00      	nop

0800cf74 <dir_register>:
{
 800cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cf78:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
 800cf7c:	b099      	sub	sp, #100	; 0x64
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cf7e:	f013 0aa0 	ands.w	sl, r3, #160	; 0xa0
 800cf82:	9301      	str	r3, [sp, #4]
 800cf84:	f040 834d 	bne.w	800d622 <dir_register+0x6ae>
	FATFS *fs = dp->obj.fs;
 800cf88:	f8d0 8000 	ldr.w	r8, [r0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cf92:	881a      	ldrh	r2, [r3, #0]
 800cf94:	2a00      	cmp	r2, #0
 800cf96:	f000 83c6 	beq.w	800d726 <dir_register+0x7b2>
 800cf9a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800cf9e:	f10a 0a01 	add.w	sl, sl, #1
 800cfa2:	2a00      	cmp	r2, #0
 800cfa4:	d1f9      	bne.n	800cf9a <dir_register+0x26>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cfa6:	f898 3000 	ldrb.w	r3, [r8]
 800cfaa:	2b04      	cmp	r3, #4
 800cfac:	f000 8344 	beq.w	800d638 <dir_register+0x6c4>
	memcpy(sn, dp->fn, 12);
 800cfb0:	f105 0640 	add.w	r6, r5, #64	; 0x40
 800cfb4:	ab04      	add	r3, sp, #16
 800cfb6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800cfba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cfbe:	9b01      	ldr	r3, [sp, #4]
 800cfc0:	07d8      	lsls	r0, r3, #31
 800cfc2:	f140 81a4 	bpl.w	800d30e <dir_register+0x39a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cfc6:	2340      	movs	r3, #64	; 0x40
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800cfc8:	aa04      	add	r2, sp, #16
		for (n = 1; n < 100; n++) {
 800cfca:	2701      	movs	r7, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cfcc:	f04f 0920 	mov.w	r9, #32
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cfd0:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800cfd4:	4633      	mov	r3, r6
				if (sreg & 0x10000) sreg ^= 0x11021;
 800cfd6:	4cc9      	ldr	r4, [pc, #804]	; (800d2fc <dir_register+0x388>)
		for (n = 1; n < 100; n++) {
 800cfd8:	46bc      	mov	ip, r7
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800cfda:	ca07      	ldmia	r2, {r0, r1, r2}
 800cfdc:	c303      	stmia	r3!, {r0, r1}
 800cfde:	f823 2b02 	strh.w	r2, [r3], #2
 800cfe2:	0c12      	lsrs	r2, r2, #16
 800cfe4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800cfe6:	f00c 010f 	and.w	r1, ip, #15
 800cfea:	ea4f 121c 	mov.w	r2, ip, lsr #4
 800cfee:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 800cff2:	2b39      	cmp	r3, #57	; 0x39
 800cff4:	bf88      	it	hi
 800cff6:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (i && seq);
 800cffa:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 800cffe:	f88d 300f 	strb.w	r3, [sp, #15]
	} while (i && seq);
 800d002:	f240 8294 	bls.w	800d52e <dir_register+0x5ba>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d006:	f002 000f 	and.w	r0, r2, #15
 800d00a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 800d00e:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 800d012:	2b39      	cmp	r3, #57	; 0x39
 800d014:	bf88      	it	hi
 800d016:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (i && seq);
 800d01a:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 800d01c:	f88d 300e 	strb.w	r3, [sp, #14]
	} while (i && seq);
 800d020:	f240 82b3 	bls.w	800d58a <dir_register+0x616>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d024:	f001 000f 	and.w	r0, r1, #15
 800d028:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800d02c:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 800d030:	2b39      	cmp	r3, #57	; 0x39
 800d032:	bf88      	it	hi
 800d034:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (i && seq);
 800d038:	290f      	cmp	r1, #15
		ns[i--] = c;
 800d03a:	f88d 300d 	strb.w	r3, [sp, #13]
	} while (i && seq);
 800d03e:	f240 82b6 	bls.w	800d5ae <dir_register+0x63a>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d042:	f002 000f 	and.w	r0, r2, #15
 800d046:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800d04a:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 800d04e:	2b39      	cmp	r3, #57	; 0x39
 800d050:	bf88      	it	hi
 800d052:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (i && seq);
 800d056:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 800d058:	f88d 300c 	strb.w	r3, [sp, #12]
	} while (i && seq);
 800d05c:	f240 82b1 	bls.w	800d5c2 <dir_register+0x64e>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d060:	f001 020f 	and.w	r2, r1, #15
 800d064:	ea4f 501c 	mov.w	r0, ip, lsr #20
 800d068:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
 800d06c:	2b39      	cmp	r3, #57	; 0x39
 800d06e:	bf88      	it	hi
 800d070:	f102 0337 	addhi.w	r3, r2, #55	; 0x37
	} while (i && seq);
 800d074:	290f      	cmp	r1, #15
		ns[i--] = c;
 800d076:	f88d 300b 	strb.w	r3, [sp, #11]
	} while (i && seq);
 800d07a:	f240 82ac 	bls.w	800d5d6 <dir_register+0x662>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d07e:	f000 010f 	and.w	r1, r0, #15
 800d082:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800d086:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800d08a:	2a39      	cmp	r2, #57	; 0x39
 800d08c:	bf88      	it	hi
 800d08e:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (i && seq);
 800d092:	280f      	cmp	r0, #15
		ns[i--] = c;
 800d094:	f88d 200a 	strb.w	r2, [sp, #10]
	} while (i && seq);
 800d098:	f240 82ad 	bls.w	800d5f6 <dir_register+0x682>
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800d09c:	f003 030f 	and.w	r3, r3, #15
 800d0a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9') c += 7;
 800d0a4:	2a39      	cmp	r2, #57	; 0x39
 800d0a6:	bf88      	it	hi
 800d0a8:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	ns[i] = '~';
 800d0ac:	237e      	movs	r3, #126	; 0x7e
 800d0ae:	f88d 3008 	strb.w	r3, [sp, #8]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d0b2:	2300      	movs	r3, #0
		ns[i--] = c;
 800d0b4:	f88d 2009 	strb.w	r2, [sp, #9]
	ns[i] = '~';
 800d0b8:	461a      	mov	r2, r3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d0ba:	f102 0160 	add.w	r1, r2, #96	; 0x60
 800d0be:	18f0      	adds	r0, r6, r3
 800d0c0:	2a06      	cmp	r2, #6
 800d0c2:	f102 0c02 	add.w	ip, r2, #2
 800d0c6:	4469      	add	r1, sp
 800d0c8:	f103 0e02 	add.w	lr, r3, #2
 800d0cc:	f811 bc58 	ldrb.w	fp, [r1, #-88]
 800d0d0:	f806 b003 	strb.w	fp, [r6, r3]
 800d0d4:	f811 bc57 	ldrb.w	fp, [r1, #-87]
 800d0d8:	f880 b001 	strb.w	fp, [r0, #1]
 800d0dc:	f000 81f7 	beq.w	800d4ce <dir_register+0x55a>
 800d0e0:	f10c 0160 	add.w	r1, ip, #96	; 0x60
	} while (j < 8);
 800d0e4:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d0e6:	f103 0003 	add.w	r0, r3, #3
 800d0ea:	eb0d 0c01 	add.w	ip, sp, r1
 800d0ee:	f81c 1c58 	ldrb.w	r1, [ip, #-88]
 800d0f2:	f806 100e 	strb.w	r1, [r6, lr]
 800d0f6:	f102 0103 	add.w	r1, r2, #3
	} while (j < 8);
 800d0fa:	d03f      	beq.n	800d17c <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d0fc:	2908      	cmp	r1, #8
 800d0fe:	f000 81f8 	beq.w	800d4f2 <dir_register+0x57e>
 800d102:	f102 0163 	add.w	r1, r2, #99	; 0x63
	} while (j < 8);
 800d106:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d108:	4469      	add	r1, sp
 800d10a:	f811 1c58 	ldrb.w	r1, [r1, #-88]
 800d10e:	5431      	strb	r1, [r6, r0]
 800d110:	f102 0104 	add.w	r1, r2, #4
 800d114:	f103 0004 	add.w	r0, r3, #4
	} while (j < 8);
 800d118:	d030      	beq.n	800d17c <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d11a:	2908      	cmp	r1, #8
 800d11c:	f000 81f0 	beq.w	800d500 <dir_register+0x58c>
 800d120:	f102 0164 	add.w	r1, r2, #100	; 0x64
	} while (j < 8);
 800d124:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d126:	4469      	add	r1, sp
 800d128:	f811 1c58 	ldrb.w	r1, [r1, #-88]
 800d12c:	5431      	strb	r1, [r6, r0]
 800d12e:	f102 0105 	add.w	r1, r2, #5
 800d132:	f103 0005 	add.w	r0, r3, #5
	} while (j < 8);
 800d136:	d021      	beq.n	800d17c <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d138:	2908      	cmp	r1, #8
 800d13a:	f000 81e8 	beq.w	800d50e <dir_register+0x59a>
 800d13e:	f102 0165 	add.w	r1, r2, #101	; 0x65
	} while (j < 8);
 800d142:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d144:	4469      	add	r1, sp
 800d146:	f811 1c58 	ldrb.w	r1, [r1, #-88]
 800d14a:	5431      	strb	r1, [r6, r0]
 800d14c:	f102 0106 	add.w	r1, r2, #6
 800d150:	f103 0006 	add.w	r0, r3, #6
	} while (j < 8);
 800d154:	d012      	beq.n	800d17c <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d156:	2908      	cmp	r1, #8
 800d158:	f000 81e0 	beq.w	800d51c <dir_register+0x5a8>
 800d15c:	f102 0366 	add.w	r3, r2, #102	; 0x66
	} while (j < 8);
 800d160:	2806      	cmp	r0, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d162:	eb0d 0103 	add.w	r1, sp, r3
 800d166:	f811 3c58 	ldrb.w	r3, [r1, #-88]
 800d16a:	5433      	strb	r3, [r6, r0]
	} while (j < 8);
 800d16c:	d106      	bne.n	800d17c <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d16e:	2a00      	cmp	r2, #0
 800d170:	f040 81db 	bne.w	800d52a <dir_register+0x5b6>
 800d174:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d178:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d17c:	4628      	mov	r0, r5
 800d17e:	f7fe ff8d 	bl	800c09c <dir_find>
			if (res != FR_OK) break;
 800d182:	2800      	cmp	r0, #0
 800d184:	f040 80bc 	bne.w	800d300 <dir_register+0x38c>
		for (n = 1; n < 100; n++) {
 800d188:	3701      	adds	r7, #1
 800d18a:	2f64      	cmp	r7, #100	; 0x64
 800d18c:	f000 8437 	beq.w	800d9fe <dir_register+0xa8a>
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800d190:	aa04      	add	r2, sp, #16
 800d192:	4633      	mov	r3, r6
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d194:	f8d8 c010 	ldr.w	ip, [r8, #16]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d198:	2f05      	cmp	r7, #5
	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800d19a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d19c:	c303      	stmia	r3!, {r0, r1}
 800d19e:	f823 2b02 	strh.w	r2, [r3], #2
 800d1a2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d1a6:	701a      	strb	r2, [r3, #0]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d1a8:	f240 818f 	bls.w	800d4ca <dir_register+0x556>
		while (*lfn) {	/* Create a CRC as hash value */
 800d1ac:	f8bc 3000 	ldrh.w	r3, [ip]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 818a 	beq.w	800d4ca <dir_register+0x556>
				sreg = (sreg << 1) + (wc & 1);
 800d1b6:	f003 0101 	and.w	r1, r3, #1
 800d1ba:	4660      	mov	r0, ip
				wc >>= 1;
 800d1bc:	085a      	lsrs	r2, r3, #1
				sreg = (sreg << 1) + (wc & 1);
 800d1be:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800d1c2:	f002 0e01 	and.w	lr, r2, #1
				wc >>= 1;
 800d1c6:	089a      	lsrs	r2, r3, #2
 800d1c8:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
				sreg = (sreg << 1) + (wc & 1);
 800d1cc:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d1d0:	0409      	lsls	r1, r1, #16
				sreg = (sreg << 1) + (wc & 1);
 800d1d2:	f002 0201 	and.w	r2, r2, #1
 800d1d6:	f00c 0c01 	and.w	ip, ip, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d1da:	bf48      	it	mi
 800d1dc:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 800d1e0:	0919      	lsrs	r1, r3, #4
				sreg = (sreg << 1) + (wc & 1);
 800d1e2:	eb02 024e 	add.w	r2, r2, lr, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d1e6:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sreg = (sreg << 1) + (wc & 1);
 800d1ea:	f001 0101 	and.w	r1, r1, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d1ee:	bf18      	it	ne
 800d1f0:	4062      	eorne	r2, r4
				sreg = (sreg << 1) + (wc & 1);
 800d1f2:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d1f6:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800d1f8:	ea4f 1253 	mov.w	r2, r3, lsr #5
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d1fc:	bf48      	it	mi
 800d1fe:	ea8c 0c04 	eormi.w	ip, ip, r4
				sreg = (sreg << 1) + (wc & 1);
 800d202:	f002 0201 	and.w	r2, r2, #1
 800d206:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d20a:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d20e:	ea4f 1c93 	mov.w	ip, r3, lsr #6
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d212:	bf18      	it	ne
 800d214:	4061      	eorne	r1, r4
				sreg = (sreg << 1) + (wc & 1);
 800d216:	f00c 0c01 	and.w	ip, ip, #1
 800d21a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d21e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800d220:	ea4f 11d3 	mov.w	r1, r3, lsr #7
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d224:	bf48      	it	mi
 800d226:	4062      	eormi	r2, r4
				sreg = (sreg << 1) + (wc & 1);
 800d228:	f001 0101 	and.w	r1, r1, #1
 800d22c:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d230:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800d232:	ea4f 2213 	mov.w	r2, r3, lsr #8
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d236:	bf48      	it	mi
 800d238:	ea8c 0c04 	eormi.w	ip, ip, r4
				sreg = (sreg << 1) + (wc & 1);
 800d23c:	f002 0201 	and.w	r2, r2, #1
 800d240:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d244:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d248:	ea4f 2c53 	mov.w	ip, r3, lsr #9
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d24c:	bf18      	it	ne
 800d24e:	4061      	eorne	r1, r4
				sreg = (sreg << 1) + (wc & 1);
 800d250:	f00c 0c01 	and.w	ip, ip, #1
 800d254:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d258:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800d25a:	ea4f 2193 	mov.w	r1, r3, lsr #10
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d25e:	bf48      	it	mi
 800d260:	4062      	eormi	r2, r4
				sreg = (sreg << 1) + (wc & 1);
 800d262:	f001 0101 	and.w	r1, r1, #1
 800d266:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d26a:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800d26c:	ea4f 22d3 	mov.w	r2, r3, lsr #11
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d270:	bf48      	it	mi
 800d272:	ea8c 0c04 	eormi.w	ip, ip, r4
				sreg = (sreg << 1) + (wc & 1);
 800d276:	f002 0201 	and.w	r2, r2, #1
 800d27a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d27e:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d282:	ea4f 3c13 	mov.w	ip, r3, lsr #12
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d286:	bf18      	it	ne
 800d288:	4061      	eorne	r1, r4
				sreg = (sreg << 1) + (wc & 1);
 800d28a:	f00c 0c01 	and.w	ip, ip, #1
 800d28e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d292:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800d294:	ea4f 3153 	mov.w	r1, r3, lsr #13
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d298:	bf48      	it	mi
 800d29a:	4062      	eormi	r2, r4
				sreg = (sreg << 1) + (wc & 1);
 800d29c:	f001 0101 	and.w	r1, r1, #1
 800d2a0:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2a4:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800d2a6:	ea4f 3293 	mov.w	r2, r3, lsr #14
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2aa:	bf48      	it	mi
 800d2ac:	ea8c 0c04 	eormi.w	ip, ip, r4
				sreg = (sreg << 1) + (wc & 1);
 800d2b0:	f002 0201 	and.w	r2, r2, #1
 800d2b4:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2b8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d2bc:	ea4f 3cd3 	mov.w	ip, r3, lsr #15
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2c0:	bf18      	it	ne
 800d2c2:	4061      	eorne	r1, r4
				sreg = (sreg << 1) + (wc & 1);
 800d2c4:	eb02 0341 	add.w	r3, r2, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2c8:	0409      	lsls	r1, r1, #16
 800d2ca:	bf48      	it	mi
 800d2cc:	4063      	eormi	r3, r4
				sreg = (sreg << 1) + (wc & 1);
 800d2ce:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2d2:	041a      	lsls	r2, r3, #16
		while (*lfn) {	/* Create a CRC as hash value */
 800d2d4:	f830 3f02 	ldrh.w	r3, [r0, #2]!
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2d8:	bf48      	it	mi
 800d2da:	ea8c 0c04 	eormi.w	ip, ip, r4
		while (*lfn) {	/* Create a CRC as hash value */
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f43f ae81 	beq.w	800cfe6 <dir_register+0x72>
				sreg = (sreg << 1) + (wc & 1);
 800d2e4:	f003 0101 	and.w	r1, r3, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2e8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800d2ec:	ea4f 0253 	mov.w	r2, r3, lsr #1
				sreg = (sreg << 1) + (wc & 1);
 800d2f0:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800d2f4:	bf18      	it	ne
 800d2f6:	4061      	eorne	r1, r4
 800d2f8:	e763      	b.n	800d1c2 <dir_register+0x24e>
 800d2fa:	bf00      	nop
 800d2fc:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d300:	2804      	cmp	r0, #4
 800d302:	4683      	mov	fp, r0
 800d304:	f040 80dd 	bne.w	800d4c2 <dir_register+0x54e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d308:	9b01      	ldr	r3, [sp, #4]
 800d30a:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d30e:	9b01      	ldr	r3, [sp, #4]
 800d310:	079b      	lsls	r3, r3, #30
 800d312:	f140 817a 	bpl.w	800d60a <dir_register+0x696>
 800d316:	4bc7      	ldr	r3, [pc, #796]	; (800d634 <dir_register+0x6c0>)
 800d318:	f10a 0a0c 	add.w	sl, sl, #12
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d31c:	4628      	mov	r0, r5
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d31e:	fba3 320a 	umull	r3, r2, r3, sl
 800d322:	0893      	lsrs	r3, r2, #2
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d324:	1c59      	adds	r1, r3, #1
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d326:	9301      	str	r3, [sp, #4]
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d328:	f7ff fd56 	bl	800cdd8 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800d32c:	4683      	mov	fp, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	f040 80c7 	bne.w	800d4c2 <dir_register+0x54e>
 800d334:	f1ba 0f0c 	cmp.w	sl, #12
 800d338:	f000 80a7 	beq.w	800d48a <dir_register+0x516>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 800d33c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800d33e:	4628      	mov	r0, r5
 800d340:	9b01      	ldr	r3, [sp, #4]
 800d342:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 800d346:	f7fe fd7f 	bl	800be48 <dir_sdi>
		if (res == FR_OK) {
 800d34a:	4683      	mov	fp, r0
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f040 80b8 	bne.w	800d4c2 <dir_register+0x54e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d352:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d356:	f895 4041 	ldrb.w	r4, [r5, #65]	; 0x41
 800d35a:	01da      	lsls	r2, r3, #7
 800d35c:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
 800d360:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
 800d364:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800d368:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
 800d36c:	f895 a045 	ldrb.w	sl, [r5, #69]	; 0x45
 800d370:	4422      	add	r2, r4
 800d372:	f895 9046 	ldrb.w	r9, [r5, #70]	; 0x46
 800d376:	f895 e047 	ldrb.w	lr, [r5, #71]	; 0x47
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d37a:	f64f 74fd 	movw	r4, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d37e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d382:	f895 c048 	ldrb.w	ip, [r5, #72]	; 0x48
 800d386:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d38a:	fa50 f383 	uxtab	r3, r0, r3
 800d38e:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
 800d392:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d396:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d39a:	fa51 f282 	uxtab	r2, r1, r2
 800d39e:	f895 104a 	ldrb.w	r1, [r5, #74]	; 0x4a
 800d3a2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d3a6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d3aa:	fa57 f283 	uxtab	r2, r7, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800d3ae:	f64f 77ff 	movw	r7, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d3b2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d3b6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d3ba:	fa5a f383 	uxtab	r3, sl, r3
 800d3be:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d3c2:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d3c6:	fa59 f282 	uxtab	r2, r9, r2
 800d3ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d3ce:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d3d2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d3d6:	fa5e f383 	uxtab	r3, lr, r3
 800d3da:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d3de:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d3e2:	fa5c f282 	uxtab	r2, ip, r2
 800d3e6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d3ea:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d3ee:	fa50 f383 	uxtab	r3, r0, r3
 800d3f2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d3f6:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 800d3fa:	fa51 f383 	uxtab	r3, r1, r3
 800d3fe:	fa5f fa83 	uxtb.w	sl, r3
				res = move_window(fs, dp->sect);
 800d402:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d404:	4640      	mov	r0, r8
 800d406:	f7fd fd53 	bl	800aeb0 <move_window>
 800d40a:	4683      	mov	fp, r0
				if (res != FR_OK) break;
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d158      	bne.n	800d4c2 <dir_register+0x54e>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800d410:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d412:	220f      	movs	r2, #15
 800d414:	fa5f fc89 	uxtb.w	ip, r9
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800d418:	f8d8 1010 	ldr.w	r1, [r8, #16]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d41c:	f8a3 200b 	strh.w	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d420:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d424:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d426:	f883 a00d 	strb.w	sl, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d42a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800d42e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d432:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800d436:	f100 3eff 	add.w	lr, r0, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d43a:	7058      	strb	r0, [r3, #1]
 800d43c:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d43e:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800d442:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d444:	0050      	lsls	r0, r2, #1
 800d446:	45a6      	cmp	lr, r4
 800d448:	f240 8218 	bls.w	800d87c <dir_register+0x908>
	*ptr++ = (BYTE)val; val >>= 8;
 800d44c:	f8a3 7003 	strh.w	r7, [r3, #3]
 800d450:	f8a3 7005 	strh.w	r7, [r3, #5]
 800d454:	f8a3 7007 	strh.w	r7, [r3, #7]
 800d458:	f8a3 7009 	strh.w	r7, [r3, #9]
 800d45c:	81df      	strh	r7, [r3, #14]
 800d45e:	821f      	strh	r7, [r3, #16]
 800d460:	825f      	strh	r7, [r3, #18]
 800d462:	829f      	strh	r7, [r3, #20]
 800d464:	82df      	strh	r7, [r3, #22]
 800d466:	831f      	strh	r7, [r3, #24]
 800d468:	839f      	strh	r7, [r3, #28]
 800d46a:	83df      	strh	r7, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d46c:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d470:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
 800d474:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800d476:	4628      	mov	r0, r5
				fs->wflag = 1;
 800d478:	f888 3004 	strb.w	r3, [r8, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800d47c:	f7fd fe98 	bl	800b1b0 <dir_next.constprop.0>
			} while (res == FR_OK && --n_ent);
 800d480:	4683      	mov	fp, r0
 800d482:	b9f0      	cbnz	r0, 800d4c2 <dir_register+0x54e>
 800d484:	f1b9 0901 	subs.w	r9, r9, #1
 800d488:	d1bb      	bne.n	800d402 <dir_register+0x48e>
		res = move_window(fs, dp->sect);
 800d48a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d48c:	4640      	mov	r0, r8
 800d48e:	f7fd fd0f 	bl	800aeb0 <move_window>
		if (res == FR_OK) {
 800d492:	4683      	mov	fp, r0
 800d494:	b9a8      	cbnz	r0, 800d4c2 <dir_register+0x54e>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d496:	4601      	mov	r1, r0
 800d498:	2220      	movs	r2, #32
 800d49a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800d49c:	f004 fedd 	bl	801225a <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d4a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
			fs->wflag = 1;
 800d4a2:	2201      	movs	r2, #1
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d4a4:	ce03      	ldmia	r6!, {r0, r1}
 800d4a6:	6018      	str	r0, [r3, #0]
 800d4a8:	6059      	str	r1, [r3, #4]
 800d4aa:	78b1      	ldrb	r1, [r6, #2]
 800d4ac:	8830      	ldrh	r0, [r6, #0]
 800d4ae:	7299      	strb	r1, [r3, #10]
 800d4b0:	8118      	strh	r0, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d4b2:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
 800d4b6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800d4b8:	f003 0318 	and.w	r3, r3, #24
 800d4bc:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800d4be:	f888 2004 	strb.w	r2, [r8, #4]
}
 800d4c2:	4658      	mov	r0, fp
 800d4c4:	b019      	add	sp, #100	; 0x64
 800d4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ca:	46bc      	mov	ip, r7
 800d4cc:	e58b      	b.n	800cfe6 <dir_register+0x72>
	} while (j < 8);
 800d4ce:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d4d0:	f103 0003 	add.w	r0, r3, #3
 800d4d4:	f806 900e 	strb.w	r9, [r6, lr]
	} while (j < 8);
 800d4d8:	f43f ae50 	beq.w	800d17c <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	f1c0 0208 	rsb	r2, r0, #8
 800d4e2:	2120      	movs	r1, #32
 800d4e4:	4430      	add	r0, r6
 800d4e6:	2b08      	cmp	r3, #8
 800d4e8:	bf88      	it	hi
 800d4ea:	2201      	movhi	r2, #1
 800d4ec:	f004 feb5 	bl	801225a <memset>
 800d4f0:	e644      	b.n	800d17c <dir_register+0x208>
	} while (j < 8);
 800d4f2:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d4f4:	f806 9000 	strb.w	r9, [r6, r0]
 800d4f8:	f103 0004 	add.w	r0, r3, #4
	} while (j < 8);
 800d4fc:	d1ee      	bne.n	800d4dc <dir_register+0x568>
 800d4fe:	e63d      	b.n	800d17c <dir_register+0x208>
 800d500:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d502:	f806 9000 	strb.w	r9, [r6, r0]
 800d506:	f103 0005 	add.w	r0, r3, #5
	} while (j < 8);
 800d50a:	d1e7      	bne.n	800d4dc <dir_register+0x568>
 800d50c:	e636      	b.n	800d17c <dir_register+0x208>
 800d50e:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d510:	f806 9000 	strb.w	r9, [r6, r0]
 800d514:	f103 0006 	add.w	r0, r3, #6
	} while (j < 8);
 800d518:	d1e0      	bne.n	800d4dc <dir_register+0x568>
 800d51a:	e62f      	b.n	800d17c <dir_register+0x208>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d51c:	f806 9000 	strb.w	r9, [r6, r0]
	} while (j < 8);
 800d520:	2b00      	cmp	r3, #0
 800d522:	f47f ae2b 	bne.w	800d17c <dir_register+0x208>
 800d526:	2007      	movs	r0, #7
 800d528:	e7d8      	b.n	800d4dc <dir_register+0x568>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d52a:	2320      	movs	r3, #32
 800d52c:	e624      	b.n	800d178 <dir_register+0x204>
	ns[i] = '~';
 800d52e:	237e      	movs	r3, #126	; 0x7e
 800d530:	f88d 300e 	strb.w	r3, [sp, #14]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d534:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d538:	2b20      	cmp	r3, #32
 800d53a:	f000 8263 	beq.w	800da04 <dir_register+0xa90>
		ns[i--] = c;
 800d53e:	2206      	movs	r2, #6
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d540:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800d544:	2b20      	cmp	r3, #32
 800d546:	d02d      	beq.n	800d5a4 <dir_register+0x630>
 800d548:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800d54c:	2b20      	cmp	r3, #32
 800d54e:	d06e      	beq.n	800d62e <dir_register+0x6ba>
 800d550:	2a03      	cmp	r2, #3
 800d552:	d02a      	beq.n	800d5aa <dir_register+0x636>
 800d554:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
 800d558:	2b20      	cmp	r3, #32
 800d55a:	f000 80c1 	beq.w	800d6e0 <dir_register+0x76c>
 800d55e:	2a04      	cmp	r2, #4
 800d560:	d023      	beq.n	800d5aa <dir_register+0x636>
 800d562:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800d566:	2b20      	cmp	r3, #32
 800d568:	f000 80b8 	beq.w	800d6dc <dir_register+0x768>
 800d56c:	2a06      	cmp	r2, #6
 800d56e:	d11b      	bne.n	800d5a8 <dir_register+0x634>
 800d570:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800d574:	2b20      	cmp	r3, #32
 800d576:	f000 80b5 	beq.w	800d6e4 <dir_register+0x770>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d57a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d57e:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 800d582:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d586:	71f3      	strb	r3, [r6, #7]
	} while (j < 8);
 800d588:	e5f8      	b.n	800d17c <dir_register+0x208>
	ns[i] = '~';
 800d58a:	237e      	movs	r3, #126	; 0x7e
 800d58c:	f88d 300d 	strb.w	r3, [sp, #13]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d590:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d594:	2b20      	cmp	r3, #32
 800d596:	f000 822a 	beq.w	800d9ee <dir_register+0xa7a>
 800d59a:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
		ns[i--] = c;
 800d59e:	2205      	movs	r2, #5
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d5a0:	2b20      	cmp	r3, #32
 800d5a2:	d1d1      	bne.n	800d548 <dir_register+0x5d4>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e588      	b.n	800d0ba <dir_register+0x146>
 800d5a8:	2205      	movs	r2, #5
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	e585      	b.n	800d0ba <dir_register+0x146>
	ns[i] = '~';
 800d5ae:	237e      	movs	r3, #126	; 0x7e
 800d5b0:	f88d 300c 	strb.w	r3, [sp, #12]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d5b4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d5b8:	2b20      	cmp	r3, #32
 800d5ba:	f000 821c 	beq.w	800d9f6 <dir_register+0xa82>
		ns[i--] = c;
 800d5be:	2204      	movs	r2, #4
 800d5c0:	e7be      	b.n	800d540 <dir_register+0x5cc>
	ns[i] = '~';
 800d5c2:	237e      	movs	r3, #126	; 0x7e
 800d5c4:	f88d 300b 	strb.w	r3, [sp, #11]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d5c8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d5cc:	2b20      	cmp	r3, #32
 800d5ce:	f000 8221 	beq.w	800da14 <dir_register+0xaa0>
		ns[i--] = c;
 800d5d2:	2203      	movs	r2, #3
 800d5d4:	e7b4      	b.n	800d540 <dir_register+0x5cc>
	ns[i] = '~';
 800d5d6:	237e      	movs	r3, #126	; 0x7e
 800d5d8:	f88d 300a 	strb.w	r3, [sp, #10]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d5dc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d5e0:	2b20      	cmp	r3, #32
 800d5e2:	f000 821b 	beq.w	800da1c <dir_register+0xaa8>
 800d5e6:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800d5ea:	2b20      	cmp	r3, #32
 800d5ec:	f000 820e 	beq.w	800da0c <dir_register+0xa98>
 800d5f0:	2302      	movs	r3, #2
		ns[i--] = c;
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	e561      	b.n	800d0ba <dir_register+0x146>
	ns[i] = '~';
 800d5f6:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 800d5f8:	2201      	movs	r2, #1
	ns[i] = '~';
 800d5fa:	f88d 3009 	strb.w	r3, [sp, #9]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d5fe:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d602:	3b20      	subs	r3, #32
 800d604:	bf18      	it	ne
 800d606:	2301      	movne	r3, #1
 800d608:	e557      	b.n	800d0ba <dir_register+0x146>
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d60a:	2101      	movs	r1, #1
 800d60c:	4628      	mov	r0, r5
 800d60e:	f7ff fbe3 	bl	800cdd8 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800d612:	4683      	mov	fp, r0
 800d614:	2800      	cmp	r0, #0
 800d616:	f43f af38 	beq.w	800d48a <dir_register+0x516>
}
 800d61a:	4658      	mov	r0, fp
 800d61c:	b019      	add	sp, #100	; 0x64
 800d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d622:	f04f 0b06 	mov.w	fp, #6
}
 800d626:	4658      	mov	r0, fp
 800d628:	b019      	add	sp, #100	; 0x64
 800d62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d62e:	2302      	movs	r3, #2
 800d630:	e543      	b.n	800d0ba <dir_register+0x146>
 800d632:	bf00      	nop
 800d634:	4ec4ec4f 	.word	0x4ec4ec4f
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d638:	4b8f      	ldr	r3, [pc, #572]	; (800d878 <dir_register+0x904>)
 800d63a:	f10a 040e 	add.w	r4, sl, #14
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 800d63e:	4628      	mov	r0, r5
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d640:	fba3 3404 	umull	r3, r4, r3, r4
 800d644:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 800d646:	1ca1      	adds	r1, r4, #2
 800d648:	f7ff fbc6 	bl	800cdd8 <dir_alloc>
		if (res != FR_OK) return res;
 800d64c:	4683      	mov	fp, r0
 800d64e:	2800      	cmp	r0, #0
 800d650:	f47f af37 	bne.w	800d4c2 <dir_register+0x54e>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 800d654:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d656:	3401      	adds	r4, #1
 800d658:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800d65c:	79eb      	ldrb	r3, [r5, #7]
 800d65e:	075e      	lsls	r6, r3, #29
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 800d660:	64ec      	str	r4, [r5, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800d662:	f140 80a1 	bpl.w	800d7a8 <dir_register+0x834>
			dp->obj.stat &= ~4;
 800d666:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800d66a:	2b03      	cmp	r3, #3
			dp->obj.stat &= ~4;
 800d66c:	71eb      	strb	r3, [r5, #7]
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800d66e:	d03b      	beq.n	800d6e8 <dir_register+0x774>
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800d670:	69eb      	ldr	r3, [r5, #28]
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800d672:	6b6c      	ldr	r4, [r5, #52]	; 0x34
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800d674:	b1cb      	cbz	r3, 800d6aa <dir_register+0x736>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d676:	1ae2      	subs	r2, r4, r3
 800d678:	2b01      	cmp	r3, #1
 800d67a:	6828      	ldr	r0, [r5, #0]
 800d67c:	f102 0601 	add.w	r6, r2, #1
 800d680:	f102 0202 	add.w	r2, r2, #2
 800d684:	bf08      	it	eq
 800d686:	f04f 32ff 	moveq.w	r2, #4294967295
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d68a:	2e01      	cmp	r6, #1
 800d68c:	4631      	mov	r1, r6
 800d68e:	d947      	bls.n	800d720 <dir_register+0x7ac>
 800d690:	6a03      	ldr	r3, [r0, #32]
 800d692:	429e      	cmp	r6, r3
 800d694:	d244      	bcs.n	800d720 <dir_register+0x7ac>
 800d696:	f7fd fc41 	bl	800af1c <put_fat.part.0>
		if (res != FR_OK) return res;
 800d69a:	2800      	cmp	r0, #0
 800d69c:	f040 81c4 	bne.w	800da28 <dir_register+0xab4>
		obj->n_frag--;
 800d6a0:	69eb      	ldr	r3, [r5, #28]
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	61eb      	str	r3, [r5, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e5      	bne.n	800d676 <dir_register+0x702>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 800d6aa:	68ab      	ldr	r3, [r5, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d07b      	beq.n	800d7a8 <dir_register+0x834>
	dp->obj.stat = (BYTE)obj->c_size;
 800d6b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800d6b2:	a804      	add	r0, sp, #16
	dp->obj.fs = obj->fs;
 800d6b4:	682a      	ldr	r2, [r5, #0]
	dp->obj.stat = (BYTE)obj->c_size;
 800d6b6:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d6ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	dp->blk_ofs = obj->c_ofs;
 800d6be:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d6c0:	9308      	str	r3, [sp, #32]
	dp->obj.sclust = obj->c_scl;
 800d6c2:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.fs = obj->fs;
 800d6c4:	9204      	str	r2, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 800d6c6:	9306      	str	r3, [sp, #24]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d6c8:	2300      	movs	r3, #0
	dp->blk_ofs = obj->c_ofs;
 800d6ca:	9117      	str	r1, [sp, #92]	; 0x5c
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d6cc:	9309      	str	r3, [sp, #36]	; 0x24
	dp->obj.n_frag = 0;
 800d6ce:	930b      	str	r3, [sp, #44]	; 0x2c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800d6d0:	f7fe fbba 	bl	800be48 <dir_sdi>
	if (res == FR_OK) {
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	b340      	cbz	r0, 800d72a <dir_register+0x7b6>
				if (res != FR_OK) return res;
 800d6d8:	469b      	mov	fp, r3
 800d6da:	e6f2      	b.n	800d4c2 <dir_register+0x54e>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d6dc:	2304      	movs	r3, #4
 800d6de:	e4ec      	b.n	800d0ba <dir_register+0x146>
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	e4ea      	b.n	800d0ba <dir_register+0x146>
 800d6e4:	2305      	movs	r3, #5
 800d6e6:	e4e8      	b.n	800d0ba <dir_register+0x146>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d6e8:	69ab      	ldr	r3, [r5, #24]
 800d6ea:	68ac      	ldr	r4, [r5, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f000 819d 	beq.w	800da2c <dir_register+0xab8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d6f2:	2c01      	cmp	r4, #1
			res = put_fat(obj->fs, cl, cl + 1);
 800d6f4:	6828      	ldr	r0, [r5, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d6f6:	d913      	bls.n	800d720 <dir_register+0x7ac>
 800d6f8:	4423      	add	r3, r4
 800d6fa:	1e5e      	subs	r6, r3, #1
 800d6fc:	4627      	mov	r7, r4
 800d6fe:	6a03      	ldr	r3, [r0, #32]
 800d700:	3401      	adds	r4, #1
 800d702:	42bb      	cmp	r3, r7
 800d704:	4639      	mov	r1, r7
 800d706:	4622      	mov	r2, r4
 800d708:	d90a      	bls.n	800d720 <dir_register+0x7ac>
 800d70a:	f7fd fc07 	bl	800af1c <put_fat.part.0>
			if (res != FR_OK) return res;
 800d70e:	2800      	cmp	r0, #0
 800d710:	f040 818a 	bne.w	800da28 <dir_register+0xab4>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d714:	42b7      	cmp	r7, r6
 800d716:	f000 8189 	beq.w	800da2c <dir_register+0xab8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d71a:	2c01      	cmp	r4, #1
			res = put_fat(obj->fs, cl, cl + 1);
 800d71c:	6828      	ldr	r0, [r5, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d71e:	d8ed      	bhi.n	800d6fc <dir_register+0x788>
	FRESULT res = FR_INT_ERR;
 800d720:	f04f 0b02 	mov.w	fp, #2
 800d724:	e6cd      	b.n	800d4c2 <dir_register+0x54e>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800d726:	4692      	mov	sl, r2
 800d728:	e43d      	b.n	800cfa6 <dir_register+0x32>
		res = load_xdir(dp);		/* Load the object's entry block */
 800d72a:	a804      	add	r0, sp, #16
 800d72c:	f7fe f896 	bl	800b85c <load_xdir>
				if (res != FR_OK) return res;
 800d730:	4603      	mov	r3, r0
 800d732:	2800      	cmp	r0, #0
 800d734:	d1d0      	bne.n	800d6d8 <dir_register+0x764>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d736:	f8b8 600c 	ldrh.w	r6, [r8, #12]
				res = store_xdir(&dj);				/* Store the object status */
 800d73a:	a804      	add	r0, sp, #16
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d73c:	f8b8 700a 	ldrh.w	r7, [r8, #10]
 800d740:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
 800d744:	fbe7 1206 	umlal	r1, r2, r7, r6
 800d748:	e9c5 1204 	strd	r1, r2, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800d74c:	0a16      	lsrs	r6, r2, #8
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d74e:	460c      	mov	r4, r1
	*ptr++ = (BYTE)val; val >>= 8;
 800d750:	4619      	mov	r1, r3
 800d752:	f362 0307 	bfi	r3, r2, #0, #8
 800d756:	f366 230f 	bfi	r3, r6, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d75a:	0c16      	lsrs	r6, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d75c:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800d75e:	f366 4317 	bfi	r3, r6, #16, #8
 800d762:	f362 631f 	bfi	r3, r2, #24, #8
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800d766:	f8d8 2014 	ldr.w	r2, [r8, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800d76a:	6394      	str	r4, [r2, #56]	; 0x38
 800d76c:	63d3      	str	r3, [r2, #60]	; 0x3c
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d76e:	696b      	ldr	r3, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800d770:	0a1a      	lsrs	r2, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d772:	f363 0107 	bfi	r1, r3, #0, #8
 800d776:	f362 210f 	bfi	r1, r2, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d77a:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d77c:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800d77e:	f362 4117 	bfi	r1, r2, #16, #8
 800d782:	692a      	ldr	r2, [r5, #16]
 800d784:	f363 611f 	bfi	r1, r3, #24, #8
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d788:	f8d8 3014 	ldr.w	r3, [r8, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800d78c:	629a      	str	r2, [r3, #40]	; 0x28
 800d78e:	62d9      	str	r1, [r3, #44]	; 0x2c
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 800d790:	79eb      	ldrb	r3, [r5, #7]
 800d792:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800d796:	f043 0301 	orr.w	r3, r3, #1
 800d79a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
 800d79e:	f7ff f813 	bl	800c7c8 <store_xdir>
				if (res != FR_OK) return res;
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d197      	bne.n	800d6d8 <dir_register+0x764>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d7a8:	f8d8 6014 	ldr.w	r6, [r8, #20]
	memset(dirb, 0, 2 * SZDIRE);
 800d7ac:	2240      	movs	r2, #64	; 0x40
 800d7ae:	2100      	movs	r1, #0
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d7b0:	f8d8 4010 	ldr.w	r4, [r8, #16]
	memset(dirb, 0, 2 * SZDIRE);
 800d7b4:	4630      	mov	r0, r6
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800d7b6:	f04f 09c1 	mov.w	r9, #193	; 0xc1
	memset(dirb, 0, 2 * SZDIRE);
 800d7ba:	f004 fd4e 	bl	801225a <memset>
	nlen = nc1 = 0; wc = 1;
 800d7be:	f04f 0e00 	mov.w	lr, #0
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800d7c2:	2385      	movs	r3, #133	; 0x85
	nlen = nc1 = 0; wc = 1;
 800d7c4:	2201      	movs	r2, #1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800d7c6:	46f0      	mov	r8, lr
	i = SZDIRE * 2;	/* Top of file_name entries */
 800d7c8:	2140      	movs	r1, #64	; 0x40
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800d7ca:	7033      	strb	r3, [r6, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800d7cc:	4677      	mov	r7, lr
 800d7ce:	23c0      	movs	r3, #192	; 0xc0
 800d7d0:	f1c6 0c04 	rsb	ip, r6, #4
 800d7d4:	f886 3020 	strb.w	r3, [r6, #32]
	nlen = nc1 = 0; wc = 1;
 800d7d8:	1873      	adds	r3, r6, r1
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800d7da:	f826 9001 	strh.w	r9, [r6, r1]
 800d7de:	fa5f f188 	uxtb.w	r1, r8
 800d7e2:	9101      	str	r1, [sp, #4]
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800d7e4:	2a00      	cmp	r2, #0
 800d7e6:	d136      	bne.n	800d856 <dir_register+0x8e2>
 800d7e8:	eb04 0a47 	add.w	sl, r4, r7, lsl #1
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	4615      	mov	r5, r2
	*ptr++ = (BYTE)val; val >>= 8;
 800d7f0:	eb0c 0103 	add.w	r1, ip, r3
 800d7f4:	709d      	strb	r5, [r3, #2]
	*ptr++ = (BYTE)val;
 800d7f6:	70d8      	strb	r0, [r3, #3]
		} while (i % SZDIRE != 0);
 800d7f8:	3302      	adds	r3, #2
 800d7fa:	06cd      	lsls	r5, r1, #27
 800d7fc:	d1f2      	bne.n	800d7e4 <dir_register+0x870>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800d7fe:	f8ba 5000 	ldrh.w	r5, [sl]
 800d802:	f108 0801 	add.w	r8, r8, #1
 800d806:	2d00      	cmp	r5, #0
 800d808:	d1e6      	bne.n	800d7d8 <dir_register+0x864>
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 800d80a:	9b01      	ldr	r3, [sp, #4]
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800d80c:	f886 e023 	strb.w	lr, [r6, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 800d810:	3302      	adds	r3, #2
 800d812:	7073      	strb	r3, [r6, #1]
	while ((chr = *name++) != 0) {
 800d814:	f834 3b02 	ldrh.w	r3, [r4], #2
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 8103 	beq.w	800da24 <dir_register+0xab0>
 800d81e:	4618      	mov	r0, r3
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800d820:	f000 ff7c 	bl	800e71c <ff_wtoupper>
 800d824:	4602      	mov	r2, r0
	while ((chr = *name++) != 0) {
 800d826:	f834 0b02 	ldrh.w	r0, [r4], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d82a:	b2d1      	uxtb	r1, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d82c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d830:	eb01 0155 	add.w	r1, r1, r5, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d834:	eb01 31c5 	add.w	r1, r1, r5, lsl #15
 800d838:	b289      	uxth	r1, r1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d83a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800d83e:	eb02 32c1 	add.w	r2, r2, r1, lsl #15
 800d842:	b295      	uxth	r5, r2
	while ((chr = *name++) != 0) {
 800d844:	2800      	cmp	r0, #0
 800d846:	d1eb      	bne.n	800d820 <dir_register+0x8ac>
	*ptr++ = (BYTE)val; val >>= 8;
 800d848:	b2ea      	uxtb	r2, r5
	*ptr++ = (BYTE)val;
 800d84a:	0a2b      	lsrs	r3, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d84c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
	*ptr++ = (BYTE)val;
 800d850:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
}
 800d854:	e635      	b.n	800d4c2 <dir_register+0x54e>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800d856:	f834 2017 	ldrh.w	r2, [r4, r7, lsl #1]
 800d85a:	f10e 0101 	add.w	r1, lr, #1
 800d85e:	eb04 0a47 	add.w	sl, r4, r7, lsl #1
 800d862:	4610      	mov	r0, r2
 800d864:	4615      	mov	r5, r2
 800d866:	2a00      	cmp	r2, #0
 800d868:	d0c2      	beq.n	800d7f0 <dir_register+0x87c>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800d86a:	b2cf      	uxtb	r7, r1
	*ptr++ = (BYTE)val; val >>= 8;
 800d86c:	b2d5      	uxtb	r5, r2
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800d86e:	46be      	mov	lr, r7
	*ptr++ = (BYTE)val;
 800d870:	0a10      	lsrs	r0, r2, #8
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800d872:	eb04 0a47 	add.w	sl, r4, r7, lsl #1
 800d876:	e7bb      	b.n	800d7f0 <dir_register+0x87c>
 800d878:	88888889 	.word	0x88888889
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d87c:	3201      	adds	r2, #1
 800d87e:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 800d882:	0052      	lsls	r2, r2, #1
 800d884:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d888:	f883 e003 	strb.w	lr, [r3, #3]
 800d88c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d890:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d894:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d898:	45a3      	cmp	fp, r4
 800d89a:	f63f add9 	bhi.w	800d450 <dir_register+0x4dc>
 800d89e:	440a      	add	r2, r1
 800d8a0:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 800d8a4:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d8a8:	f883 e005 	strb.w	lr, [r3, #5]
 800d8ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8b0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d8b4:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8b8:	45a3      	cmp	fp, r4
 800d8ba:	f63f adcb 	bhi.w	800d454 <dir_register+0x4e0>
 800d8be:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 800d8c2:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d8c6:	f883 e007 	strb.w	lr, [r3, #7]
 800d8ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8ce:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d8d2:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8d6:	45a3      	cmp	fp, r4
 800d8d8:	f63f adbe 	bhi.w	800d458 <dir_register+0x4e4>
 800d8dc:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 800d8e0:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d8e4:	f883 e009 	strb.w	lr, [r3, #9]
 800d8e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8ec:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d8f0:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d8f4:	45a3      	cmp	fp, r4
 800d8f6:	f63f adb1 	bhi.w	800d45c <dir_register+0x4e8>
 800d8fa:	f8b2 e008 	ldrh.w	lr, [r2, #8]
 800d8fe:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d902:	f883 e00e 	strb.w	lr, [r3, #14]
 800d906:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d90a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d90e:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d912:	45a3      	cmp	fp, r4
 800d914:	f63f ada3 	bhi.w	800d45e <dir_register+0x4ea>
 800d918:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
 800d91c:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d920:	f883 e010 	strb.w	lr, [r3, #16]
 800d924:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d928:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d92c:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d930:	45a3      	cmp	fp, r4
 800d932:	f63f ad95 	bhi.w	800d460 <dir_register+0x4ec>
 800d936:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
 800d93a:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d93e:	f883 e012 	strb.w	lr, [r3, #18]
 800d942:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d946:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d94a:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d94e:	45a3      	cmp	fp, r4
 800d950:	f63f ad87 	bhi.w	800d462 <dir_register+0x4ee>
 800d954:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 800d958:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d95c:	f883 e014 	strb.w	lr, [r3, #20]
 800d960:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d964:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d968:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d96c:	45a3      	cmp	fp, r4
 800d96e:	f63f ad79 	bhi.w	800d464 <dir_register+0x4f0>
 800d972:	f8b2 e010 	ldrh.w	lr, [r2, #16]
 800d976:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d97a:	f883 e016 	strb.w	lr, [r3, #22]
 800d97e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d982:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d986:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d98a:	45a3      	cmp	fp, r4
 800d98c:	f63f ad6b 	bhi.w	800d466 <dir_register+0x4f2>
 800d990:	f8b2 e012 	ldrh.w	lr, [r2, #18]
 800d994:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d998:	f883 e018 	strb.w	lr, [r3, #24]
 800d99c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9a0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d9a4:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9a8:	45a3      	cmp	fp, r4
 800d9aa:	f63f ad5d 	bhi.w	800d468 <dir_register+0x4f4>
 800d9ae:	f8b2 e014 	ldrh.w	lr, [r2, #20]
 800d9b2:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d9b6:	f883 e01c 	strb.w	lr, [r3, #28]
 800d9ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9be:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 800d9c2:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9c6:	45a3      	cmp	fp, r4
 800d9c8:	f63f ad4f 	bhi.w	800d46a <dir_register+0x4f6>
 800d9cc:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d9ce:	f102 3eff 	add.w	lr, r2, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800d9d2:	779a      	strb	r2, [r3, #30]
 800d9d4:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800d9d6:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d9d8:	fa1f f28e 	uxth.w	r2, lr
 800d9dc:	42a2      	cmp	r2, r4
 800d9de:	f63f ad45 	bhi.w	800d46c <dir_register+0x4f8>
 800d9e2:	180a      	adds	r2, r1, r0
 800d9e4:	8b52      	ldrh	r2, [r2, #26]
 800d9e6:	2a00      	cmp	r2, #0
 800d9e8:	f47f ad42 	bne.w	800d470 <dir_register+0x4fc>
 800d9ec:	e53e      	b.n	800d46c <dir_register+0x4f8>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d9ee:	2300      	movs	r3, #0
		ns[i--] = c;
 800d9f0:	2205      	movs	r2, #5
 800d9f2:	f7ff bb62 	b.w	800d0ba <dir_register+0x146>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800d9f6:	2300      	movs	r3, #0
		ns[i--] = c;
 800d9f8:	2204      	movs	r2, #4
 800d9fa:	f7ff bb5e 	b.w	800d0ba <dir_register+0x146>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d9fe:	f04f 0b07 	mov.w	fp, #7
 800da02:	e55e      	b.n	800d4c2 <dir_register+0x54e>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da04:	2300      	movs	r3, #0
		ns[i--] = c;
 800da06:	2206      	movs	r2, #6
 800da08:	f7ff bb57 	b.w	800d0ba <dir_register+0x146>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da0c:	2301      	movs	r3, #1
		ns[i--] = c;
 800da0e:	2202      	movs	r2, #2
 800da10:	f7ff bb53 	b.w	800d0ba <dir_register+0x146>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da14:	2300      	movs	r3, #0
		ns[i--] = c;
 800da16:	2203      	movs	r2, #3
 800da18:	f7ff bb4f 	b.w	800d0ba <dir_register+0x146>
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800da1c:	2300      	movs	r3, #0
		ns[i--] = c;
 800da1e:	2202      	movs	r2, #2
 800da20:	f7ff bb4b 	b.w	800d0ba <dir_register+0x146>
	while ((chr = *name++) != 0) {
 800da24:	461a      	mov	r2, r3
 800da26:	e711      	b.n	800d84c <dir_register+0x8d8>
 800da28:	4683      	mov	fp, r0
 800da2a:	e54a      	b.n	800d4c2 <dir_register+0x54e>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800da2c:	2300      	movs	r3, #0
 800da2e:	71eb      	strb	r3, [r5, #7]
			if (res != FR_OK) return res;
 800da30:	e61e      	b.n	800d670 <dir_register+0x6fc>
 800da32:	bf00      	nop

0800da34 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da34:	2901      	cmp	r1, #1
{
 800da36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800da3a:	6806      	ldr	r6, [r0, #0]
{
 800da3c:	b083      	sub	sp, #12
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da3e:	d91f      	bls.n	800da80 <remove_chain+0x4c>
 800da40:	4691      	mov	r9, r2
 800da42:	6a32      	ldr	r2, [r6, #32]
 800da44:	460c      	mov	r4, r1
 800da46:	428a      	cmp	r2, r1
 800da48:	d91a      	bls.n	800da80 <remove_chain+0x4c>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800da4a:	4680      	mov	r8, r0
 800da4c:	f1b9 0f00 	cmp.w	r9, #0
 800da50:	d10d      	bne.n	800da6e <remove_chain+0x3a>
 800da52:	4637      	mov	r7, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da54:	46a3      	mov	fp, r4
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800da56:	f04f 0a01 	mov.w	sl, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da5a:	4294      	cmp	r4, r2
 800da5c:	d210      	bcs.n	800da80 <remove_chain+0x4c>
		switch (fs->fs_type) {
 800da5e:	783a      	ldrb	r2, [r7, #0]
 800da60:	3a01      	subs	r2, #1
 800da62:	2a03      	cmp	r2, #3
 800da64:	d80c      	bhi.n	800da80 <remove_chain+0x4c>
 800da66:	e8df f002 	tbb	[pc, r2]
 800da6a:	8ea2      	.short	0x8ea2
 800da6c:	1b79      	.short	0x1b79
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800da6e:	7833      	ldrb	r3, [r6, #0]
 800da70:	2b04      	cmp	r3, #4
 800da72:	f000 80f5 	beq.w	800dc60 <remove_chain+0x22c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800da76:	454a      	cmp	r2, r9
 800da78:	d902      	bls.n	800da80 <remove_chain+0x4c>
 800da7a:	f1b9 0f01 	cmp.w	r9, #1
 800da7e:	d103      	bne.n	800da88 <remove_chain+0x54>
		switch (fs->fs_type) {
 800da80:	2002      	movs	r0, #2
}
 800da82:	b003      	add	sp, #12
 800da84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da88:	f04f 32ff 	mov.w	r2, #4294967295
 800da8c:	4649      	mov	r1, r9
 800da8e:	4630      	mov	r0, r6
 800da90:	f7fd fa44 	bl	800af1c <put_fat.part.0>
		if (res != FR_OK) return res;
 800da94:	2800      	cmp	r0, #0
 800da96:	d1f4      	bne.n	800da82 <remove_chain+0x4e>
	FATFS *fs = obj->fs;
 800da98:	f8d8 7000 	ldr.w	r7, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da9c:	6a3a      	ldr	r2, [r7, #32]
 800da9e:	e7d9      	b.n	800da54 <remove_chain+0x20>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800daa0:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 800daa4:	ea50 0201 	orrs.w	r2, r0, r1
 800daa8:	f000 8091 	beq.w	800dbce <remove_chain+0x19a>
 800daac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dab0:	2d00      	cmp	r5, #0
 800dab2:	f000 808c 	beq.w	800dbce <remove_chain+0x19a>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800dab6:	f898 c007 	ldrb.w	ip, [r8, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800daba:	1b65      	subs	r5, r4, r5
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800dabc:	897b      	ldrh	r3, [r7, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800dabe:	f1bc 0f02 	cmp.w	ip, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800dac2:	89ba      	ldrh	r2, [r7, #12]
 800dac4:	9301      	str	r3, [sp, #4]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800dac6:	f000 8106 	beq.w	800dcd6 <remove_chain+0x2a2>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800daca:	f1bc 0f03 	cmp.w	ip, #3
 800dace:	f000 8117 	beq.w	800dd00 <remove_chain+0x2cc>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800dad2:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800dad6:	2900      	cmp	r1, #0
 800dad8:	f040 8118 	bne.w	800dd0c <remove_chain+0x2d8>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dadc:	0892      	lsrs	r2, r2, #2
 800dade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dae0:	4638      	mov	r0, r7
 800dae2:	fbb4 f2f2 	udiv	r2, r4, r2
 800dae6:	4411      	add	r1, r2
 800dae8:	f7fd f9e2 	bl	800aeb0 <move_window>
 800daec:	2800      	cmp	r0, #0
 800daee:	d16a      	bne.n	800dbc6 <remove_chain+0x192>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800daf0:	89b9      	ldrh	r1, [r7, #12]
 800daf2:	00a2      	lsls	r2, r4, #2
 800daf4:	fbb2 f0f1 	udiv	r0, r2, r1
 800daf8:	fb01 2210 	mls	r2, r1, r0, r2
	rv = rv << 8 | ptr[0];
 800dafc:	18bb      	adds	r3, r7, r2
 800dafe:	6c1f      	ldr	r7, [r3, #64]	; 0x40
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800db00:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
		if (nxt == 0) break;				/* Empty cluster? */
 800db04:	2f00      	cmp	r7, #0
 800db06:	f000 80b3 	beq.w	800dc70 <remove_chain+0x23c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db0a:	2f01      	cmp	r7, #1
 800db0c:	d0b8      	beq.n	800da80 <remove_chain+0x4c>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800db0e:	7833      	ldrb	r3, [r6, #0]
 800db10:	2b04      	cmp	r3, #4
 800db12:	d009      	beq.n	800db28 <remove_chain+0xf4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800db14:	6a33      	ldr	r3, [r6, #32]
 800db16:	429c      	cmp	r4, r3
 800db18:	d2b2      	bcs.n	800da80 <remove_chain+0x4c>
 800db1a:	2200      	movs	r2, #0
 800db1c:	4621      	mov	r1, r4
 800db1e:	4630      	mov	r0, r6
 800db20:	f7fd f9fc 	bl	800af1c <put_fat.part.0>
			if (res != FR_OK) return res;
 800db24:	2800      	cmp	r0, #0
 800db26:	d1ac      	bne.n	800da82 <remove_chain+0x4e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db28:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
 800db2c:	1e91      	subs	r1, r2, #2
 800db2e:	428b      	cmp	r3, r1
 800db30:	d205      	bcs.n	800db3e <remove_chain+0x10a>
			fs->free_clst++;
 800db32:	3301      	adds	r3, #1
 800db34:	61f3      	str	r3, [r6, #28]
			fs->fsi_flag |= 1;
 800db36:	7973      	ldrb	r3, [r6, #5]
 800db38:	f043 0301 	orr.w	r3, r3, #1
 800db3c:	7173      	strb	r3, [r6, #5]
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800db3e:	3401      	adds	r4, #1
 800db40:	42bc      	cmp	r4, r7
 800db42:	d003      	beq.n	800db4c <remove_chain+0x118>
			if (fs->fs_type == FS_EXFAT) {
 800db44:	7833      	ldrb	r3, [r6, #0]
 800db46:	2b04      	cmp	r3, #4
 800db48:	d048      	beq.n	800dbdc <remove_chain+0x1a8>
 800db4a:	46bb      	mov	fp, r7
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db4c:	4297      	cmp	r7, r2
 800db4e:	f080 808f 	bcs.w	800dc70 <remove_chain+0x23c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db52:	463c      	mov	r4, r7
	FATFS *fs = obj->fs;
 800db54:	f8d8 7000 	ldr.w	r7, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db58:	6a3a      	ldr	r2, [r7, #32]
 800db5a:	e77e      	b.n	800da5a <remove_chain+0x26>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db5c:	89ba      	ldrh	r2, [r7, #12]
 800db5e:	4638      	mov	r0, r7
 800db60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db62:	0892      	lsrs	r2, r2, #2
 800db64:	fbb4 f2f2 	udiv	r2, r4, r2
 800db68:	4411      	add	r1, r2
 800db6a:	f7fd f9a1 	bl	800aeb0 <move_window>
 800db6e:	bb50      	cbnz	r0, 800dbc6 <remove_chain+0x192>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800db70:	89b9      	ldrh	r1, [r7, #12]
 800db72:	00a2      	lsls	r2, r4, #2
 800db74:	fbb2 f0f1 	udiv	r0, r2, r1
 800db78:	fb01 2210 	mls	r2, r1, r0, r2
	rv = rv << 8 | ptr[0];
 800db7c:	443a      	add	r2, r7
 800db7e:	6c17      	ldr	r7, [r2, #64]	; 0x40
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800db80:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
			break;
 800db84:	e7be      	b.n	800db04 <remove_chain+0xd0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db86:	89ba      	ldrh	r2, [r7, #12]
 800db88:	4638      	mov	r0, r7
 800db8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db8c:	0852      	lsrs	r2, r2, #1
 800db8e:	fbb4 f2f2 	udiv	r2, r4, r2
 800db92:	4411      	add	r1, r2
 800db94:	f7fd f98c 	bl	800aeb0 <move_window>
 800db98:	b9a8      	cbnz	r0, 800dbc6 <remove_chain+0x192>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800db9a:	89b9      	ldrh	r1, [r7, #12]
 800db9c:	0062      	lsls	r2, r4, #1
 800db9e:	fbb2 f0f1 	udiv	r0, r2, r1
 800dba2:	fb01 2210 	mls	r2, r1, r0, r2
 800dba6:	443a      	add	r2, r7
 800dba8:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
			break;
 800dbac:	e7aa      	b.n	800db04 <remove_chain+0xd0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbae:	89ba      	ldrh	r2, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 800dbb0:	eb04 0554 	add.w	r5, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	fbb5 f2f2 	udiv	r2, r5, r2
 800dbbc:	4411      	add	r1, r2
 800dbbe:	f7fd f977 	bl	800aeb0 <move_window>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d059      	beq.n	800dc7a <remove_chain+0x246>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dbc6:	2001      	movs	r0, #1
}
 800dbc8:	b003      	add	sp, #12
 800dbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800dbce:	f898 2007 	ldrb.w	r2, [r8, #7]
 800dbd2:	2a00      	cmp	r2, #0
 800dbd4:	f47f af54 	bne.w	800da80 <remove_chain+0x4c>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800dbd8:	89ba      	ldrh	r2, [r7, #12]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800dbda:	e77a      	b.n	800dad2 <remove_chain+0x9e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800dbdc:	eba4 050b 	sub.w	r5, r4, fp
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800dbe0:	f1ab 0b02 	sub.w	fp, fp, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800dbe4:	89b1      	ldrh	r1, [r6, #12]
 800dbe6:	ea4f 02db 	mov.w	r2, fp, lsr #3
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800dbea:	f00b 0b07 	and.w	fp, fp, #7
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800dbee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800dbf0:	fa0a f40b 	lsl.w	r4, sl, fp
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800dbf4:	fbb2 fbf1 	udiv	fp, r2, r1
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800dbf8:	b2e4      	uxtb	r4, r4
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800dbfa:	fb01 221b 	mls	r2, r1, fp, r2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800dbfe:	eb0b 0103 	add.w	r1, fp, r3
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800dc02:	4630      	mov	r0, r6
 800dc04:	f101 0b01 	add.w	fp, r1, #1
 800dc08:	9201      	str	r2, [sp, #4]
 800dc0a:	f7fd f951 	bl	800aeb0 <move_window>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d1d9      	bne.n	800dbc6 <remove_chain+0x192>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dc12:	9a01      	ldr	r2, [sp, #4]
 800dc14:	18b1      	adds	r1, r6, r2
 800dc16:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800dc1a:	421c      	tst	r4, r3
 800dc1c:	f43f af30 	beq.w	800da80 <remove_chain+0x4c>
				fs->win[i] ^= bm;	/* Flip the bit */
 800dc20:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800dc22:	3d01      	subs	r5, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 800dc24:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
				fs->wflag = 1;
 800dc28:	f886 a004 	strb.w	sl, [r6, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800dc2c:	d106      	bne.n	800dc3c <remove_chain+0x208>
 800dc2e:	e01c      	b.n	800dc6a <remove_chain+0x236>
 800dc30:	3d01      	subs	r5, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 800dc32:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
				fs->wflag = 1;
 800dc36:	f886 a004 	strb.w	sl, [r6, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800dc3a:	d016      	beq.n	800dc6a <remove_chain+0x236>
			} while (bm <<= 1);		/* Next bit */
 800dc3c:	0064      	lsls	r4, r4, #1
 800dc3e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800dc42:	d108      	bne.n	800dc56 <remove_chain+0x222>
		} while (++i < SS(fs));		/* Next byte */
 800dc44:	3201      	adds	r2, #1
 800dc46:	89b3      	ldrh	r3, [r6, #12]
			bm = 1;
 800dc48:	2401      	movs	r4, #1
		} while (++i < SS(fs));		/* Next byte */
 800dc4a:	429a      	cmp	r2, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dc4c:	eb06 0102 	add.w	r1, r6, r2
		} while (++i < SS(fs));		/* Next byte */
 800dc50:	d23e      	bcs.n	800dcd0 <remove_chain+0x29c>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dc52:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800dc56:	421c      	tst	r4, r3
				fs->win[i] ^= bm;	/* Flip the bit */
 800dc58:	ea83 0304 	eor.w	r3, r3, r4
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dc5c:	d1e8      	bne.n	800dc30 <remove_chain+0x1fc>
 800dc5e:	e70f      	b.n	800da80 <remove_chain+0x4c>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dc60:	79c3      	ldrb	r3, [r0, #7]
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	f47f af07 	bne.w	800da76 <remove_chain+0x42>
 800dc68:	e6f3      	b.n	800da52 <remove_chain+0x1e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dc6a:	6a32      	ldr	r2, [r6, #32]
 800dc6c:	46bb      	mov	fp, r7
 800dc6e:	e76d      	b.n	800db4c <remove_chain+0x118>
	if (fs->fs_type == FS_EXFAT) {
 800dc70:	7833      	ldrb	r3, [r6, #0]
 800dc72:	2b04      	cmp	r3, #4
 800dc74:	d025      	beq.n	800dcc2 <remove_chain+0x28e>
	return FR_OK;
 800dc76:	2000      	movs	r0, #0
 800dc78:	e703      	b.n	800da82 <remove_chain+0x4e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800dc7a:	89b9      	ldrh	r1, [r7, #12]
 800dc7c:	1c6b      	adds	r3, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc80:	4638      	mov	r0, r7
 800dc82:	9301      	str	r3, [sp, #4]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800dc84:	fbb5 fcf1 	udiv	ip, r5, r1
 800dc88:	fb01 551c 	mls	r5, r1, ip, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc8c:	fbb3 f1f1 	udiv	r1, r3, r1
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800dc90:	443d      	add	r5, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc92:	4411      	add	r1, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800dc94:	f895 5040 	ldrb.w	r5, [r5, #64]	; 0x40
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc98:	f7fd f90a 	bl	800aeb0 <move_window>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d192      	bne.n	800dbc6 <remove_chain+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800dca0:	89ba      	ldrh	r2, [r7, #12]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800dca2:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800dca4:	9b01      	ldr	r3, [sp, #4]
 800dca6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcaa:	fb02 3311 	mls	r3, r2, r1, r3
 800dcae:	443b      	add	r3, r7
 800dcb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcb4:	ea45 2703 	orr.w	r7, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800dcb8:	bf4c      	ite	mi
 800dcba:	093f      	lsrmi	r7, r7, #4
 800dcbc:	f3c7 070b 	ubfxpl	r7, r7, #0, #12
 800dcc0:	e720      	b.n	800db04 <remove_chain+0xd0>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800dcc2:	f1b9 0f00 	cmp.w	r9, #0
 800dcc6:	d124      	bne.n	800dd12 <remove_chain+0x2de>
	return FR_OK;
 800dcc8:	4648      	mov	r0, r9
			obj->stat = 0;		/* Change the chain status 'initial' */
 800dcca:	f888 9007 	strb.w	r9, [r8, #7]
 800dcce:	e6d8      	b.n	800da82 <remove_chain+0x4e>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800dcd0:	4659      	mov	r1, fp
		i = 0;
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	e795      	b.n	800dc02 <remove_chain+0x1ce>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800dcd6:	3801      	subs	r0, #1
 800dcd8:	f04f 0300 	mov.w	r3, #0
 800dcdc:	f161 0100 	sbc.w	r1, r1, #0
 800dce0:	f7f2 fb02 	bl	80002e8 <__aeabi_uldivmod>
 800dce4:	9b01      	ldr	r3, [sp, #4]
 800dce6:	fbb0 f0f3 	udiv	r0, r0, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800dcea:	4285      	cmp	r5, r0
 800dcec:	f63f aec8 	bhi.w	800da80 <remove_chain+0x4c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800dcf0:	d00c      	beq.n	800dd0c <remove_chain+0x2d8>
					val = clst + 1; 	/* Generate the value */
 800dcf2:	1c67      	adds	r7, r4, #1
		if (nxt == 0) break;				/* Empty cluster? */
 800dcf4:	2f00      	cmp	r7, #0
 800dcf6:	d0bb      	beq.n	800dc70 <remove_chain+0x23c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dcf8:	1c79      	adds	r1, r7, #1
 800dcfa:	f47f af08 	bne.w	800db0e <remove_chain+0xda>
 800dcfe:	e762      	b.n	800dbc6 <remove_chain+0x192>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800dd00:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800dd04:	428d      	cmp	r5, r1
 800dd06:	f4bf aee4 	bcs.w	800dad2 <remove_chain+0x9e>
 800dd0a:	e7f2      	b.n	800dcf2 <remove_chain+0x2be>
 800dd0c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800dd10:	e6fd      	b.n	800db0e <remove_chain+0xda>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800dd12:	f898 3007 	ldrb.w	r3, [r8, #7]
 800dd16:	b9bb      	cbnz	r3, 800dd48 <remove_chain+0x314>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800dd18:	f8d8 4008 	ldr.w	r4, [r8, #8]
				while (clst != pclst) {
 800dd1c:	e00b      	b.n	800dd36 <remove_chain+0x302>
					nxt = get_fat(obj, clst);
 800dd1e:	f7fd f997 	bl	800b050 <get_fat>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800dd22:	1c63      	adds	r3, r4, #1
					if (nxt < 2) return FR_INT_ERR;
 800dd24:	2801      	cmp	r0, #1
 800dd26:	461c      	mov	r4, r3
 800dd28:	f67f aeaa 	bls.w	800da80 <remove_chain+0x4c>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800dd2c:	1c42      	adds	r2, r0, #1
 800dd2e:	f43f af4a 	beq.w	800dbc6 <remove_chain+0x192>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800dd32:	4283      	cmp	r3, r0
 800dd34:	d19f      	bne.n	800dc76 <remove_chain+0x242>
				while (clst != pclst) {
 800dd36:	454c      	cmp	r4, r9
					nxt = get_fat(obj, clst);
 800dd38:	4621      	mov	r1, r4
 800dd3a:	4640      	mov	r0, r8
				while (clst != pclst) {
 800dd3c:	d1ef      	bne.n	800dd1e <remove_chain+0x2ea>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800dd3e:	2302      	movs	r3, #2
	return FR_OK;
 800dd40:	2000      	movs	r0, #0
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800dd42:	f888 3007 	strb.w	r3, [r8, #7]
 800dd46:	e69c      	b.n	800da82 <remove_chain+0x4e>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800dd48:	2b03      	cmp	r3, #3
 800dd4a:	d194      	bne.n	800dc76 <remove_chain+0x242>
 800dd4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd50:	454b      	cmp	r3, r9
 800dd52:	d890      	bhi.n	800dc76 <remove_chain+0x242>
 800dd54:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800dd58:	4413      	add	r3, r2
 800dd5a:	454b      	cmp	r3, r9
 800dd5c:	d38b      	bcc.n	800dc76 <remove_chain+0x242>
 800dd5e:	e7ee      	b.n	800dd3e <remove_chain+0x30a>

0800dd60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800dd60:	b530      	push	{r4, r5, lr}
 800dd62:	b083      	sub	sp, #12
 800dd64:	e9cd 1000 	strd	r1, r0, [sp]
	if (!tp) return vol;	/* Invalid path name? */
 800dd68:	b161      	cbz	r1, 800dd84 <f_mount+0x24>
 800dd6a:	468c      	mov	ip, r1
		tc = *tt++;
 800dd6c:	f81c 3b01 	ldrb.w	r3, [ip], #1
	} while (!IsTerminator(tc) && tc != ':');
 800dd70:	2b1f      	cmp	r3, #31
 800dd72:	d90a      	bls.n	800dd8a <f_mount+0x2a>
 800dd74:	2b3a      	cmp	r3, #58	; 0x3a
 800dd76:	d1f9      	bne.n	800dd6c <f_mount+0xc>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800dd78:	780b      	ldrb	r3, [r1, #0]
 800dd7a:	2b30      	cmp	r3, #48	; 0x30
 800dd7c:	d102      	bne.n	800dd84 <f_mount+0x24>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800dd7e:	3102      	adds	r1, #2
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800dd80:	458c      	cmp	ip, r1
 800dd82:	d004      	beq.n	800dd8e <f_mount+0x2e>
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd84:	200b      	movs	r0, #11

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800dd86:	b003      	add	sp, #12
 800dd88:	bd30      	pop	{r4, r5, pc}
	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800dd8a:	2b3a      	cmp	r3, #58	; 0x3a
 800dd8c:	d0f4      	beq.n	800dd78 <f_mount+0x18>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800dd8e:	4911      	ldr	r1, [pc, #68]	; (800ddd4 <f_mount+0x74>)
 800dd90:	680b      	ldr	r3, [r1, #0]
	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800dd92:	b15b      	cbz	r3, 800ddac <f_mount+0x4c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dd94:	4810      	ldr	r0, [pc, #64]	; (800ddd8 <f_mount+0x78>)
		FatFs[vol] = 0;
 800dd96:	2400      	movs	r4, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dd98:	6805      	ldr	r5, [r0, #0]
		FatFs[vol] = 0;
 800dd9a:	600c      	str	r4, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dd9c:	42ab      	cmp	r3, r5
 800dd9e:	bf08      	it	eq
 800dda0:	6004      	streq	r4, [r0, #0]
 800dda2:	6904      	ldr	r4, [r0, #16]
 800dda4:	42a3      	cmp	r3, r4
 800dda6:	d011      	beq.n	800ddcc <f_mount+0x6c>
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800dda8:	2000      	movs	r0, #0
 800ddaa:	7018      	strb	r0, [r3, #0]
	if (fs) {					/* Register new filesystem object */
 800ddac:	9b01      	ldr	r3, [sp, #4]
 800ddae:	b113      	cbz	r3, 800ddb6 <f_mount+0x56>
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800ddb0:	2000      	movs	r0, #0
		FatFs[vol] = fs;		/* Register new fs object */
 800ddb2:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800ddb4:	8018      	strh	r0, [r3, #0]
	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800ddb6:	b132      	cbz	r2, 800ddc6 <f_mount+0x66>
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ddb8:	2200      	movs	r2, #0
 800ddba:	a901      	add	r1, sp, #4
 800ddbc:	4668      	mov	r0, sp
 800ddbe:	f7fd fb17 	bl	800b3f0 <mount_volume>
}
 800ddc2:	b003      	add	sp, #12
 800ddc4:	bd30      	pop	{r4, r5, pc}
	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800ddc6:	4610      	mov	r0, r2
}
 800ddc8:	b003      	add	sp, #12
 800ddca:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ddcc:	2400      	movs	r4, #0
 800ddce:	6104      	str	r4, [r0, #16]
 800ddd0:	e7ea      	b.n	800dda8 <f_mount+0x48>
 800ddd2:	bf00      	nop
 800ddd4:	24000774 	.word	0x24000774
 800ddd8:	24000778 	.word	0x24000778
 800dddc:	00000000 	.word	0x00000000

0800dde0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	ed2d 8b02 	vpush	{d8}
 800dde8:	b099      	sub	sp, #100	; 0x64
 800ddea:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ddec:	2800      	cmp	r0, #0
 800ddee:	f000 809f 	beq.w	800df30 <f_open+0x150>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800ddf2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 800ddf6:	4616      	mov	r6, r2
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	a903      	add	r1, sp, #12
 800ddfc:	a801      	add	r0, sp, #4
 800ddfe:	463a      	mov	r2, r7
 800de00:	f7fd faf6 	bl	800b3f0 <mount_volume>
	if (res == FR_OK) {
 800de04:	4605      	mov	r5, r0
 800de06:	b138      	cbz	r0, 800de18 <f_open+0x38>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800de08:	2300      	movs	r3, #0
 800de0a:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800de0c:	4628      	mov	r0, r5
 800de0e:	b019      	add	sp, #100	; 0x64
 800de10:	ecbd 8b02 	vpop	{d8}
 800de14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800de18:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800de1c:	a804      	add	r0, sp, #16
 800de1e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800de20:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800de24:	f7fe fb0c 	bl	800c440 <follow_path>
		if (res == FR_OK) {
 800de28:	b9f8      	cbnz	r0, 800de6a <f_open+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de2a:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f2c0 8087 	blt.w	800df42 <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
 800de34:	f8df 93b0 	ldr.w	r9, [pc, #944]	; 800e1e8 <f_open+0x408>
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 800de38:	f027 0301 	bic.w	r3, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800de3c:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800de3e:	f8d9 e000 	ldr.w	lr, [r9]
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 800de42:	4619      	mov	r1, r3
				Files[i].clu == dp->obj.sclust &&
 800de44:	9806      	ldr	r0, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 800de46:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
		if (Files[i].fs) {	/* Existing entry */
 800de4a:	f1be 0f00 	cmp.w	lr, #0
 800de4e:	f000 812a 	beq.w	800e0a6 <f_open+0x2c6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800de52:	4596      	cmp	lr, r2
 800de54:	d077      	beq.n	800df46 <f_open+0x166>
		if (Files[i].fs) {	/* Existing entry */
 800de56:	f8d9 e010 	ldr.w	lr, [r9, #16]
 800de5a:	f1be 0f00 	cmp.w	lr, #0
 800de5e:	f000 8090 	beq.w	800df82 <f_open+0x1a2>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800de62:	4596      	cmp	lr, r2
 800de64:	d079      	beq.n	800df5a <f_open+0x17a>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 800de66:	2512      	movs	r5, #18
 800de68:	e7ce      	b.n	800de08 <f_open+0x28>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800de6a:	f016 0f1c 	tst.w	r6, #28
 800de6e:	d066      	beq.n	800df3e <f_open+0x15e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800de70:	2804      	cmp	r0, #4
 800de72:	d164      	bne.n	800df3e <f_open+0x15e>
	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800de74:	f8df 9370 	ldr.w	r9, [pc, #880]	; 800e1e8 <f_open+0x408>
 800de78:	f8d9 3000 	ldr.w	r3, [r9]
 800de7c:	b11b      	cbz	r3, 800de86 <f_open+0xa6>
 800de7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1ef      	bne.n	800de66 <f_open+0x86>
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800de86:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800de88:	f047 0708 	orr.w	r7, r7, #8
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800de8c:	f7ff f872 	bl	800cf74 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800de90:	2800      	cmp	r0, #0
 800de92:	d154      	bne.n	800df3e <f_open+0x15e>
				if (fs->fs_type == FS_EXFAT) {
 800de94:	f898 3000 	ldrb.w	r3, [r8]
 800de98:	2b04      	cmp	r3, #4
 800de9a:	f000 814b 	beq.w	800e134 <f_open+0x354>
					tm = GET_FATTIME();					/* Set created time */
 800de9e:	f7fc febf 	bl	800ac20 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, tm);
 800dea2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 800dea4:	0a02      	lsrs	r2, r0, #8
 800dea6:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, tm);
 800deaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 800deac:	75da      	strb	r2, [r3, #23]
 800deae:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800deb0:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800deb2:	0e00      	lsrs	r0, r0, #24
 800deb4:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 800deb6:	7658      	strb	r0, [r3, #25]
	if (fs->fs_type == FS_FAT32) {
 800deb8:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800debc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	if (fs->fs_type == FS_FAT32) {
 800debe:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800dec0:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800dec2:	d102      	bne.n	800deca <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dec4:	8a9a      	ldrh	r2, [r3, #20]
 800dec6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800deca:	2220      	movs	r2, #32
 800decc:	72da      	strb	r2, [r3, #11]
	*ptr++ = (BYTE)val; val >>= 8;
 800dece:	2200      	movs	r2, #0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ded0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 800ded2:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800ded4:	f898 1000 	ldrb.w	r1, [r8]
 800ded8:	2903      	cmp	r1, #3
 800deda:	d100      	bne.n	800dede <f_open+0xfe>
	*ptr++ = (BYTE)val; val >>= 8;
 800dedc:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 800dede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 800dee0:	2200      	movs	r2, #0
 800dee2:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 800dee4:	2301      	movs	r3, #1
 800dee6:	f888 3004 	strb.w	r3, [r8, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800deea:	b176      	cbz	r6, 800df0a <f_open+0x12a>
						res = remove_chain(&dj.obj, cl, 0);
 800deec:	4631      	mov	r1, r6
 800deee:	a804      	add	r0, sp, #16
						sc = fs->winsect;
 800def0:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
						res = remove_chain(&dj.obj, cl, 0);
 800def4:	f7ff fd9e 	bl	800da34 <remove_chain>
						if (res == FR_OK) {
 800def8:	bb08      	cbnz	r0, 800df3e <f_open+0x15e>
							res = move_window(fs, sc);
 800defa:	4651      	mov	r1, sl
 800defc:	4640      	mov	r0, r8
 800defe:	f7fc ffd7 	bl	800aeb0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800df02:	1e73      	subs	r3, r6, #1
 800df04:	f8c8 3018 	str.w	r3, [r8, #24]
		if (res == FR_OK) {
 800df08:	b9c8      	cbnz	r0, 800df3e <f_open+0x15e>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800df0a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800df0e:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800df12:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800df16:	3900      	subs	r1, #0
			fp->dir_ptr = dj.dir;
 800df18:	9e13      	ldr	r6, [sp, #76]	; 0x4c
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800df1a:	a804      	add	r0, sp, #16
 800df1c:	bf18      	it	ne
 800df1e:	2101      	movne	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800df20:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800df22:	64e6      	str	r6, [r4, #76]	; 0x4c
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800df24:	f7fc ff04 	bl	800ad30 <inc_share>
 800df28:	62e0      	str	r0, [r4, #44]	; 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 800df2a:	bbc0      	cbnz	r0, 800df9e <f_open+0x1be>
 800df2c:	2502      	movs	r5, #2
 800df2e:	e76b      	b.n	800de08 <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
 800df30:	2509      	movs	r5, #9
}
 800df32:	4628      	mov	r0, r5
 800df34:	b019      	add	sp, #100	; 0x64
 800df36:	ecbd 8b02 	vpop	{d8}
 800df3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3e:	4605      	mov	r5, r0
 800df40:	e762      	b.n	800de08 <f_open+0x28>
				res = FR_INVALID_NAME;
 800df42:	2506      	movs	r5, #6
 800df44:	e760      	b.n	800de08 <f_open+0x28>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800df46:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800df4a:	4282      	cmp	r2, r0
 800df4c:	f000 812d 	beq.w	800e1aa <f_open+0x3ca>
		if (Files[i].fs) {	/* Existing entry */
 800df50:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800df54:	b1aa      	cbz	r2, 800df82 <f_open+0x1a2>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800df56:	4572      	cmp	r2, lr
 800df58:	d185      	bne.n	800de66 <f_open+0x86>
 800df5a:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800df5e:	4282      	cmp	r2, r0
 800df60:	d181      	bne.n	800de66 <f_open+0x86>
				Files[i].clu == dp->obj.sclust &&
 800df62:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800df66:	4562      	cmp	r2, ip
 800df68:	f47f af7d 	bne.w	800de66 <f_open+0x86>
	for (i = 0; i < FF_FS_LOCK; i++) {
 800df6c:	2201      	movs	r2, #1
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800df6e:	2b00      	cmp	r3, #0
 800df70:	f040 8095 	bne.w	800e09e <f_open+0x2be>
 800df74:	eb09 1202 	add.w	r2, r9, r2, lsl #4
 800df78:	68d2      	ldr	r2, [r2, #12]
 800df7a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800df7e:	f000 808e 	beq.w	800e09e <f_open+0x2be>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800df82:	f016 0f1c 	tst.w	r6, #28
 800df86:	d079      	beq.n	800e07c <f_open+0x29c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df88:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800df8c:	f013 0f11 	tst.w	r3, #17
 800df90:	f040 8087 	bne.w	800e0a2 <f_open+0x2c2>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df94:	0773      	lsls	r3, r6, #29
 800df96:	f140 80ab 	bpl.w	800e0f0 <f_open+0x310>
 800df9a:	2508      	movs	r5, #8
 800df9c:	e734      	b.n	800de08 <f_open+0x28>
			if (fs->fs_type == FS_EXFAT) {
 800df9e:	f898 3000 	ldrb.w	r3, [r8]
 800dfa2:	2b04      	cmp	r3, #4
 800dfa4:	f000 8093 	beq.w	800e0ce <f_open+0x2ee>
	if (fs->fs_type == FS_FAT32) {
 800dfa8:	2b03      	cmp	r3, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800dfaa:	8b72      	ldrh	r2, [r6, #26]
	if (fs->fs_type == FS_FAT32) {
 800dfac:	d102      	bne.n	800dfb4 <f_open+0x1d4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dfae:	8ab3      	ldrh	r3, [r6, #20]
 800dfb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dfb4:	60a2      	str	r2, [r4, #8]
	rv = rv << 8 | ptr[0];
 800dfb6:	69f3      	ldr	r3, [r6, #28]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dfb8:	6123      	str	r3, [r4, #16]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	6163      	str	r3, [r4, #20]
			fp->obj.id = fs->id;
 800dfbe:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->cltbl = 0;		/* Disable fast seek mode */
 800dfc2:	f04f 0b00 	mov.w	fp, #0
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800dfc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
			fp->obj.fs = fs;	/* Validate the file object */
 800dfca:	f8c4 8000 	str.w	r8, [r4]
			fp->obj.id = fs->id;
 800dfce:	80a3      	strh	r3, [r4, #4]
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800dfd0:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800dfd4:	4659      	mov	r1, fp
			fp->flag = mode;	/* Set file access mode */
 800dfd6:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800dfda:	4618      	mov	r0, r3
			fp->cltbl = 0;		/* Disable fast seek mode */
 800dfdc:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
			fp->err = 0;		/* Clear error flag */
 800dfe0:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800dfe4:	ee08 3a10 	vmov	s16, r3
			fp->sect = 0;		/* Invalidate current data sector */
 800dfe8:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 800dfec:	ed9f 7b7c 	vldr	d7, [pc, #496]	; 800e1e0 <f_open+0x400>
 800dff0:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800dff4:	f004 f931 	bl	801225a <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dff8:	06be      	lsls	r6, r7, #26
 800dffa:	f57f af07 	bpl.w	800de0c <f_open+0x2c>
 800dffe:	e9d4 6a04 	ldrd	r6, sl, [r4, #16]
 800e002:	ea56 020a 	orrs.w	r2, r6, sl
 800e006:	f43f af01 	beq.w	800de0c <f_open+0x2c>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e00a:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 800e00e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e012:	68a7      	ldr	r7, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e014:	fb01 f202 	mul.w	r2, r1, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e018:	42b2      	cmp	r2, r6
 800e01a:	eb7b 000a 	sbcs.w	r0, fp, sl
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e01e:	e9c4 6a0e 	strd	r6, sl, [r4, #56]	; 0x38
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e022:	d30a      	bcc.n	800e03a <f_open+0x25a>
 800e024:	e06c      	b.n	800e100 <f_open+0x320>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e026:	1c78      	adds	r0, r7, #1
 800e028:	d037      	beq.n	800e09a <f_open+0x2ba>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e02a:	9a00      	ldr	r2, [sp, #0]
 800e02c:	1ab6      	subs	r6, r6, r2
 800e02e:	f16a 0a00 	sbc.w	sl, sl, #0
 800e032:	42b2      	cmp	r2, r6
 800e034:	eb7b 010a 	sbcs.w	r1, fp, sl
 800e038:	d260      	bcs.n	800e0fc <f_open+0x31c>
					clst = get_fat(&fp->obj, clst);
 800e03a:	4639      	mov	r1, r7
 800e03c:	4620      	mov	r0, r4
 800e03e:	9200      	str	r2, [sp, #0]
 800e040:	f7fd f806 	bl	800b050 <get_fat>
					if (clst <= 1) res = FR_INT_ERR;
 800e044:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800e046:	4607      	mov	r7, r0
					if (clst <= 1) res = FR_INT_ERR;
 800e048:	d8ed      	bhi.n	800e026 <f_open+0x246>
 800e04a:	2502      	movs	r5, #2
				fp->clust = clst;
 800e04c:	6427      	str	r7, [r4, #64]	; 0x40
	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 800e04e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e050:	3b01      	subs	r3, #1
 800e052:	2b01      	cmp	r3, #1
 800e054:	f63f aed8 	bhi.w	800de08 <f_open+0x28>
		n = Files[i].ctr;
 800e058:	0119      	lsls	r1, r3, #4
 800e05a:	eb09 1303 	add.w	r3, r9, r3, lsl #4
 800e05e:	68da      	ldr	r2, [r3, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 800e060:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e064:	f000 80a8 	beq.w	800e1b8 <f_open+0x3d8>
		if (n > 0) n--;			/* Decrement read mode open count */
 800e068:	b122      	cbz	r2, 800e074 <f_open+0x294>
 800e06a:	3a01      	subs	r2, #1
		Files[i].ctr = n;
 800e06c:	60da      	str	r2, [r3, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e06e:	2a00      	cmp	r2, #0
 800e070:	f47f aeca 	bne.w	800de08 <f_open+0x28>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 800e074:	2300      	movs	r3, #0
 800e076:	f849 3001 	str.w	r3, [r9, r1]
 800e07a:	e6c5      	b.n	800de08 <f_open+0x28>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800e07c:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800e080:	06d1      	lsls	r1, r2, #27
 800e082:	d439      	bmi.n	800e0f8 <f_open+0x318>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800e084:	07b1      	lsls	r1, r6, #30
 800e086:	d501      	bpl.n	800e08c <f_open+0x2ac>
 800e088:	07d2      	lsls	r2, r2, #31
 800e08a:	d40a      	bmi.n	800e0a2 <f_open+0x2c2>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800e08c:	f006 0608 	and.w	r6, r6, #8
 800e090:	2e00      	cmp	r6, #0
 800e092:	f47f af3a 	bne.w	800df0a <f_open+0x12a>
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800e096:	4619      	mov	r1, r3
 800e098:	e73b      	b.n	800df12 <f_open+0x132>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e09a:	2501      	movs	r5, #1
 800e09c:	e7d6      	b.n	800e04c <f_open+0x26c>
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e09e:	2510      	movs	r5, #16
 800e0a0:	e6b2      	b.n	800de08 <f_open+0x28>
						res = FR_DENIED;
 800e0a2:	2507      	movs	r5, #7
 800e0a4:	e6b0      	b.n	800de08 <f_open+0x28>
		if (Files[i].fs) {	/* Existing entry */
 800e0a6:	f8d9 e010 	ldr.w	lr, [r9, #16]
 800e0aa:	f1be 0f00 	cmp.w	lr, #0
 800e0ae:	f43f af68 	beq.w	800df82 <f_open+0x1a2>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800e0b2:	4596      	cmp	lr, r2
 800e0b4:	f47f af65 	bne.w	800df82 <f_open+0x1a2>
 800e0b8:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800e0bc:	4282      	cmp	r2, r0
 800e0be:	f47f af60 	bne.w	800df82 <f_open+0x1a2>
				Files[i].clu == dp->obj.sclust &&
 800e0c2:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800e0c6:	4562      	cmp	r2, ip
 800e0c8:	f47f af5b 	bne.w	800df82 <f_open+0x1a2>
 800e0cc:	e74e      	b.n	800df6c <f_open+0x18c>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e0ce:	9b08      	ldr	r3, [sp, #32]
				init_alloc_info(fs, &fp->obj);
 800e0d0:	4621      	mov	r1, r4
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e0d2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e0d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				init_alloc_info(fs, &fp->obj);
 800e0da:	f8d8 0014 	ldr.w	r0, [r8, #20]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e0e2:	9b06      	ldr	r3, [sp, #24]
 800e0e4:	6223      	str	r3, [r4, #32]
				fp->obj.c_ofs = dj.blk_ofs;
 800e0e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0e8:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 800e0ea:	f7fc fecf 	bl	800ae8c <init_alloc_info.isra.0>
 800e0ee:	e766      	b.n	800dfbe <f_open+0x1de>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800e0f0:	0730      	lsls	r0, r6, #28
 800e0f2:	f57f af0e 	bpl.w	800df12 <f_open+0x132>
 800e0f6:	e6cd      	b.n	800de94 <f_open+0xb4>
					res = FR_NO_FILE;
 800e0f8:	2504      	movs	r5, #4
 800e0fa:	e685      	b.n	800de08 <f_open+0x28>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e0fc:	f8b8 100c 	ldrh.w	r1, [r8, #12]
				fp->clust = clst;
 800e100:	460a      	mov	r2, r1
 800e102:	4630      	mov	r0, r6
 800e104:	4651      	mov	r1, sl
 800e106:	2300      	movs	r3, #0
 800e108:	6427      	str	r7, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e10a:	f7f2 f8ed 	bl	80002e8 <__aeabi_uldivmod>
 800e10e:	4313      	orrs	r3, r2
 800e110:	f43f ae7c 	beq.w	800de0c <f_open+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e114:	f8d8 3020 	ldr.w	r3, [r8, #32]
	clst -= 2;		/* Cluster number is origin from 2 */
 800e118:	3f02      	subs	r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e11a:	3b02      	subs	r3, #2
 800e11c:	429f      	cmp	r7, r3
 800e11e:	d207      	bcs.n	800e130 <f_open+0x350>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800e120:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800e124:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800e128:	fb07 3202 	mla	r2, r7, r2, r3
					if (sc == 0) {
 800e12c:	2a00      	cmp	r2, #0
 800e12e:	d146      	bne.n	800e1be <f_open+0x3de>
 800e130:	2502      	movs	r5, #2
 800e132:	e78c      	b.n	800e04e <f_open+0x26e>
					fp->obj.fs = fs;
 800e134:	f8d8 0014 	ldr.w	r0, [r8, #20]
					init_alloc_info(fs, &fp->obj);
 800e138:	4621      	mov	r1, r4
					fp->obj.fs = fs;
 800e13a:	f8c4 8000 	str.w	r8, [r4]
					init_alloc_info(fs, &fp->obj);
 800e13e:	f7fc fea5 	bl	800ae8c <init_alloc_info.isra.0>
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 800e142:	221e      	movs	r2, #30
 800e144:	2100      	movs	r1, #0
 800e146:	3002      	adds	r0, #2
 800e148:	f004 f887 	bl	801225a <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800e14c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e150:	2200      	movs	r2, #0
 800e152:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800e156:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800e15a:	f8c3 202e 	str.w	r2, [r3, #46]	; 0x2e
 800e15e:	f8c3 2032 	str.w	r2, [r3, #50]	; 0x32
 800e162:	f8c3 2036 	str.w	r2, [r3, #54]	; 0x36
 800e166:	f8c3 203a 	str.w	r2, [r3, #58]	; 0x3a
 800e16a:	87da      	strh	r2, [r3, #62]	; 0x3e
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800e16c:	2220      	movs	r2, #32
 800e16e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e172:	711a      	strb	r2, [r3, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800e174:	f8d8 6014 	ldr.w	r6, [r8, #20]
 800e178:	f7fc fd52 	bl	800ac20 <get_fattime>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e17c:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800e17e:	60b0      	str	r0, [r6, #8]
					res = store_xdir(&dj);
 800e180:	a804      	add	r0, sp, #16
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e182:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 800e18a:	f7fe fb1d 	bl	800c7c8 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800e18e:	2800      	cmp	r0, #0
 800e190:	f47f aed5 	bne.w	800df3e <f_open+0x15e>
 800e194:	68a1      	ldr	r1, [r4, #8]
 800e196:	2900      	cmp	r1, #0
 800e198:	f43f aeb7 	beq.w	800df0a <f_open+0x12a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e19c:	4602      	mov	r2, r0
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f7ff fc48 	bl	800da34 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e1a4:	68a3      	ldr	r3, [r4, #8]
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	e6ac      	b.n	800df04 <f_open+0x124>
				Files[i].clu == dp->obj.sclust &&
 800e1aa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800e1ae:	4562      	cmp	r2, ip
 800e1b0:	f47f aece 	bne.w	800df50 <f_open+0x170>
	for (i = 0; i < FF_FS_LOCK; i++) {
 800e1b4:	462a      	mov	r2, r5
 800e1b6:	e6da      	b.n	800df6e <f_open+0x18e>
		Files[i].ctr = n;
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	60da      	str	r2, [r3, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e1bc:	e75a      	b.n	800e074 <f_open+0x294>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e1be:	4402      	add	r2, r0
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e1c0:	ee18 1a10 	vmov	r1, s16
 800e1c4:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e1c6:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e1c8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e1cc:	f7fc fcee 	bl	800abac <disk_read>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f43f ae1b 	beq.w	800de0c <f_open+0x2c>
 800e1d6:	2501      	movs	r5, #1
 800e1d8:	e739      	b.n	800e04e <f_open+0x26e>
 800e1da:	bf00      	nop
 800e1dc:	f3af 8000 	nop.w
	...
 800e1e8:	24000778 	.word	0x24000778

0800e1ec <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800e1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f0:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800e1f2:	2300      	movs	r3, #0
{
 800e1f4:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800e1f6:	f8c8 3000 	str.w	r3, [r8]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e1fa:	b150      	cbz	r0, 800e212 <f_read+0x26>
 800e1fc:	6803      	ldr	r3, [r0, #0]
 800e1fe:	4604      	mov	r4, r0
 800e200:	b13b      	cbz	r3, 800e212 <f_read+0x26>
 800e202:	4617      	mov	r7, r2
 800e204:	781a      	ldrb	r2, [r3, #0]
 800e206:	b122      	cbz	r2, 800e212 <f_read+0x26>
 800e208:	460d      	mov	r5, r1
 800e20a:	88da      	ldrh	r2, [r3, #6]
 800e20c:	8881      	ldrh	r1, [r0, #4]
 800e20e:	4291      	cmp	r1, r2
 800e210:	d005      	beq.n	800e21e <f_read+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 800e212:	f04f 0b09 	mov.w	fp, #9
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800e216:	4658      	mov	r0, fp
 800e218:	b005      	add	sp, #20
 800e21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800e21e:	7858      	ldrb	r0, [r3, #1]
 800e220:	f7fc fca8 	bl	800ab74 <disk_status>
 800e224:	07c1      	lsls	r1, r0, #31
 800e226:	d4f4      	bmi.n	800e212 <f_read+0x26>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e228:	f894 b031 	ldrb.w	fp, [r4, #49]	; 0x31
 800e22c:	f1bb 0f00 	cmp.w	fp, #0
 800e230:	d1f1      	bne.n	800e216 <f_read+0x2a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e232:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e236:	f013 0301 	ands.w	r3, r3, #1
 800e23a:	9301      	str	r3, [sp, #4]
 800e23c:	f000 80ce 	beq.w	800e3dc <f_read+0x1f0>
	remain = fp->obj.objsize - fp->fptr;
 800e240:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e242:	6923      	ldr	r3, [r4, #16]
 800e244:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
 800e248:	1b9b      	subs	r3, r3, r6
 800e24a:	6962      	ldr	r2, [r4, #20]
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800e24c:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 800e250:	eb62 0209 	sbc.w	r2, r2, r9
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e254:	42bb      	cmp	r3, r7
 800e256:	f172 0200 	sbcs.w	r2, r2, #0
 800e25a:	bf38      	it	cc
 800e25c:	461f      	movcc	r7, r3
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800e25e:	2f00      	cmp	r7, #0
 800e260:	d0d9      	beq.n	800e216 <f_read+0x2a>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e262:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800e266:	f8cd b008 	str.w	fp, [sp, #8]
 800e26a:	46ab      	mov	fp, r5
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	464b      	mov	r3, r9
 800e270:	46b9      	mov	r9, r7
 800e272:	461f      	mov	r7, r3
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e274:	f8ba 500c 	ldrh.w	r5, [sl, #12]
 800e278:	2300      	movs	r3, #0
 800e27a:	4630      	mov	r0, r6
 800e27c:	4639      	mov	r1, r7
 800e27e:	462a      	mov	r2, r5
 800e280:	f7f2 f832 	bl	80002e8 <__aeabi_uldivmod>
 800e284:	4313      	orrs	r3, r2
 800e286:	d15e      	bne.n	800e346 <f_read+0x15a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e288:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800e28c:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800e28e:	4003      	ands	r3, r0
 800e290:	d068      	beq.n	800e364 <f_read+0x178>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e292:	6c20      	ldr	r0, [r4, #64]	; 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e294:	f8da 2020 	ldr.w	r2, [sl, #32]
	clst -= 2;		/* Cluster number is origin from 2 */
 800e298:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e29a:	3a02      	subs	r2, #2
 800e29c:	4290      	cmp	r0, r2
 800e29e:	d270      	bcs.n	800e382 <f_read+0x196>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800e2a0:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800e2a4:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800e2a8:	fb01 6600 	mla	r6, r1, r0, r6
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800e2ac:	2e00      	cmp	r6, #0
 800e2ae:	d068      	beq.n	800e382 <f_read+0x196>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2b0:	f8ba 200c 	ldrh.w	r2, [sl, #12]
			sect += csect;
 800e2b4:	441e      	add	r6, r3
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800e2b6:	454a      	cmp	r2, r9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2b8:	4615      	mov	r5, r2
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800e2ba:	d82a      	bhi.n	800e312 <f_read+0x126>
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2bc:	f89a 0001 	ldrb.w	r0, [sl, #1]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2c0:	fbb9 f7f2 	udiv	r7, r9, r2
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e2c4:	19da      	adds	r2, r3, r7
 800e2c6:	428a      	cmp	r2, r1
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2c8:	4632      	mov	r2, r6
					cc = fs->csize - csect;
 800e2ca:	bf88      	it	hi
 800e2cc:	1acf      	subhi	r7, r1, r3
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2ce:	4659      	mov	r1, fp
 800e2d0:	463b      	mov	r3, r7
 800e2d2:	f7fc fc6b 	bl	800abac <disk_read>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d177      	bne.n	800e3ca <f_read+0x1de>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e2da:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f2c0 8096 	blt.w	800e410 <f_read+0x224>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e2e4:	f8ba 500c 	ldrh.w	r5, [sl, #12]
 800e2e8:	fb07 f505 	mul.w	r5, r7, r5
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800e2ec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e2ee:	44ab      	add	fp, r5
 800e2f0:	f8d8 3000 	ldr.w	r3, [r8]
 800e2f4:	19ae      	adds	r6, r5, r6
 800e2f6:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800e2f8:	442b      	add	r3, r5
 800e2fa:	f147 0700 	adc.w	r7, r7, #0
 800e2fe:	ebb9 0905 	subs.w	r9, r9, r5
 800e302:	f8c8 3000 	str.w	r3, [r8]
 800e306:	63a6      	str	r6, [r4, #56]	; 0x38
 800e308:	63e7      	str	r7, [r4, #60]	; 0x3c
 800e30a:	d1b3      	bne.n	800e274 <f_read+0x88>
 800e30c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e310:	e781      	b.n	800e216 <f_read+0x2a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e312:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e314:	42b3      	cmp	r3, r6
 800e316:	d00f      	beq.n	800e338 <f_read+0x14c>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e318:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 800e31c:	2a00      	cmp	r2, #0
 800e31e:	db67      	blt.n	800e3f0 <f_read+0x204>
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e320:	2301      	movs	r3, #1
 800e322:	4632      	mov	r2, r6
 800e324:	9900      	ldr	r1, [sp, #0]
 800e326:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800e32a:	f7fc fc3f 	bl	800abac <disk_read>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d14b      	bne.n	800e3ca <f_read+0x1de>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800e332:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 800e336:	4615      	mov	r5, r2
			fp->sect = sect;
 800e338:	6466      	str	r6, [r4, #68]	; 0x44
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e33a:	2300      	movs	r3, #0
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800e33c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e33e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e340:	4630      	mov	r0, r6
 800e342:	f7f1 ffd1 	bl	80002e8 <__aeabi_uldivmod>
 800e346:	9b00      	ldr	r3, [sp, #0]
 800e348:	4658      	mov	r0, fp
 800e34a:	1899      	adds	r1, r3, r2
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800e34c:	fbb6 f3f5 	udiv	r3, r6, r5
 800e350:	fb05 6313 	mls	r3, r5, r3, r6
 800e354:	1aed      	subs	r5, r5, r3
 800e356:	454d      	cmp	r5, r9
 800e358:	bf28      	it	cs
 800e35a:	464d      	movcs	r5, r9
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e35c:	462a      	mov	r2, r5
 800e35e:	f003 ffb5 	bl	80122cc <memcpy>
 800e362:	e7c3      	b.n	800e2ec <f_read+0x100>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e364:	ea56 0207 	orrs.w	r2, r6, r7
 800e368:	d113      	bne.n	800e392 <f_read+0x1a6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e36a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e36c:	2801      	cmp	r0, #1
 800e36e:	d908      	bls.n	800e382 <f_read+0x196>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e370:	1c42      	adds	r2, r0, #1
 800e372:	d02a      	beq.n	800e3ca <f_read+0x1de>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e374:	f8da 2020 	ldr.w	r2, [sl, #32]
				fp->clust = clst;				/* Update current cluster */
 800e378:	6420      	str	r0, [r4, #64]	; 0x40
	clst -= 2;		/* Cluster number is origin from 2 */
 800e37a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800e37c:	3a02      	subs	r2, #2
 800e37e:	4290      	cmp	r0, r2
 800e380:	d38e      	bcc.n	800e2a0 <f_read+0xb4>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e382:	2302      	movs	r3, #2
 800e384:	469b      	mov	fp, r3
 800e386:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800e38a:	4658      	mov	r0, fp
 800e38c:	b005      	add	sp, #20
 800e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 800e392:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800e394:	b32d      	cbz	r5, 800e3e2 <f_read+0x1f6>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e396:	4630      	mov	r0, r6
	FATFS *fs = fp->obj.fs;
 800e398:	6826      	ldr	r6, [r4, #0]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e39a:	4639      	mov	r1, r7
 800e39c:	9303      	str	r3, [sp, #12]
 800e39e:	89b2      	ldrh	r2, [r6, #12]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e3a0:	1d2f      	adds	r7, r5, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e3a2:	f7f1 ffa1 	bl	80002e8 <__aeabi_uldivmod>
 800e3a6:	8972      	ldrh	r2, [r6, #10]
 800e3a8:	9b03      	ldr	r3, [sp, #12]
 800e3aa:	f7f1 ff9d 	bl	80002e8 <__aeabi_uldivmod>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3ae:	686a      	ldr	r2, [r5, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e3b0:	9b03      	ldr	r3, [sp, #12]
 800e3b2:	b92a      	cbnz	r2, 800e3c0 <f_read+0x1d4>
 800e3b4:	e7e5      	b.n	800e382 <f_read+0x196>
		cl -= ncl; tbl++;		/* Next fragment */
 800e3b6:	1a80      	subs	r0, r0, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3b8:	f857 2f08 	ldr.w	r2, [r7, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e3bc:	2a00      	cmp	r2, #0
 800e3be:	d0e0      	beq.n	800e382 <f_read+0x196>
		if (cl < ncl) break;	/* In this fragment? */
 800e3c0:	4282      	cmp	r2, r0
 800e3c2:	d9f8      	bls.n	800e3b6 <f_read+0x1ca>
	return cl + *tbl;	/* Return the cluster number */
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	4410      	add	r0, r2
 800e3c8:	e7d0      	b.n	800e36c <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3ca:	f8dd b004 	ldr.w	fp, [sp, #4]
 800e3ce:	2301      	movs	r3, #1
}
 800e3d0:	4658      	mov	r0, fp
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3d2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800e3d6:	b005      	add	sp, #20
 800e3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e3dc:	f04f 0b07 	mov.w	fp, #7
 800e3e0:	e719      	b.n	800e216 <f_read+0x2a>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e3e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	9303      	str	r3, [sp, #12]
 800e3e8:	f7fc fe32 	bl	800b050 <get_fat>
 800e3ec:	9b03      	ldr	r3, [sp, #12]
 800e3ee:	e7bd      	b.n	800e36c <f_read+0x180>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	9900      	ldr	r1, [sp, #0]
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800e3fa:	f7fc fbe7 	bl	800abcc <disk_write>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d1e3      	bne.n	800e3ca <f_read+0x1de>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e402:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e40a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800e40e:	e787      	b.n	800e320 <f_read+0x134>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e410:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e412:	1b80      	subs	r0, r0, r6
 800e414:	42b8      	cmp	r0, r7
 800e416:	f4bf af65 	bcs.w	800e2e4 <f_read+0xf8>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e41a:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 800e41e:	9900      	ldr	r1, [sp, #0]
 800e420:	fb02 b000 	mla	r0, r2, r0, fp
 800e424:	f003 ff52 	bl	80122cc <memcpy>
 800e428:	e75c      	b.n	800e2e4 <f_read+0xf8>
 800e42a:	bf00      	nop

0800e42c <f_sync>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e42c:	2800      	cmp	r0, #0
 800e42e:	f000 80a4 	beq.w	800e57a <f_sync+0x14e>
 800e432:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800e434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e438:	4604      	mov	r4, r0
 800e43a:	b095      	sub	sp, #84	; 0x54
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e43c:	b12b      	cbz	r3, 800e44a <f_sync+0x1e>
 800e43e:	781a      	ldrb	r2, [r3, #0]
 800e440:	b11a      	cbz	r2, 800e44a <f_sync+0x1e>
 800e442:	8881      	ldrh	r1, [r0, #4]
 800e444:	88da      	ldrh	r2, [r3, #6]
 800e446:	4291      	cmp	r1, r2
 800e448:	d004      	beq.n	800e454 <f_sync+0x28>
	FRESULT res = FR_INVALID_OBJECT;
 800e44a:	2309      	movs	r3, #9
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	b015      	add	sp, #84	; 0x54
 800e450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800e454:	7858      	ldrb	r0, [r3, #1]
 800e456:	f7fc fb8d 	bl	800ab74 <disk_status>
 800e45a:	07c2      	lsls	r2, r0, #31
 800e45c:	d4f5      	bmi.n	800e44a <f_sync+0x1e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e45e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800e462:	f012 0340 	ands.w	r3, r2, #64	; 0x40
 800e466:	d0f1      	beq.n	800e44c <f_sync+0x20>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e468:	0613      	lsls	r3, r2, #24
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800e46a:	6825      	ldr	r5, [r4, #0]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e46c:	f100 80d5 	bmi.w	800e61a <f_sync+0x1ee>
			tm = GET_FATTIME();				/* Modified time */
 800e470:	f7fc fbd6 	bl	800ac20 <get_fattime>
			if (fs->fs_type == FS_EXFAT) {
 800e474:	782b      	ldrb	r3, [r5, #0]
			tm = GET_FATTIME();				/* Modified time */
 800e476:	4606      	mov	r6, r0
			if (fs->fs_type == FS_EXFAT) {
 800e478:	2b04      	cmp	r3, #4
 800e47a:	f040 80a5 	bne.w	800e5c8 <f_sync+0x19c>
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800e47e:	79e3      	ldrb	r3, [r4, #7]
 800e480:	2b03      	cmp	r3, #3
 800e482:	d07d      	beq.n	800e580 <f_sync+0x154>
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800e484:	69e3      	ldr	r3, [r4, #28]
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e486:	6c27      	ldr	r7, [r4, #64]	; 0x40
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800e488:	b1e3      	cbz	r3, 800e4c4 <f_sync+0x98>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e48a:	1afa      	subs	r2, r7, r3
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	6820      	ldr	r0, [r4, #0]
 800e490:	f102 0c01 	add.w	ip, r2, #1
 800e494:	f102 0202 	add.w	r2, r2, #2
 800e498:	bf08      	it	eq
 800e49a:	f04f 32ff 	moveq.w	r2, #4294967295
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e49e:	f1bc 0f01 	cmp.w	ip, #1
 800e4a2:	4661      	mov	r1, ip
 800e4a4:	f240 808b 	bls.w	800e5be <f_sync+0x192>
 800e4a8:	6a03      	ldr	r3, [r0, #32]
 800e4aa:	459c      	cmp	ip, r3
 800e4ac:	f080 8087 	bcs.w	800e5be <f_sync+0x192>
 800e4b0:	f7fc fd34 	bl	800af1c <put_fat.part.0>
		if (res != FR_OK) return res;
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d1c8      	bne.n	800e44c <f_sync+0x20>
		obj->n_frag--;
 800e4ba:	69e3      	ldr	r3, [r4, #28]
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e2      	bne.n	800e48a <f_sync+0x5e>
	dp->obj.stat = (BYTE)obj->c_size;
 800e4c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e4c6:	4668      	mov	r0, sp
	dp->obj.fs = obj->fs;
 800e4c8:	6822      	ldr	r2, [r4, #0]
	dp->obj.stat = (BYTE)obj->c_size;
 800e4ca:	f88d 3007 	strb.w	r3, [sp, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e4ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	dp->blk_ofs = obj->c_ofs;
 800e4d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e4d4:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 800e4d6:	6a23      	ldr	r3, [r4, #32]
	dp->obj.fs = obj->fs;
 800e4d8:	9200      	str	r2, [sp, #0]
	dp->obj.sclust = obj->c_scl;
 800e4da:	9302      	str	r3, [sp, #8]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e4dc:	2300      	movs	r3, #0
	dp->blk_ofs = obj->c_ofs;
 800e4de:	9113      	str	r1, [sp, #76]	; 0x4c
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e4e0:	9305      	str	r3, [sp, #20]
	dp->obj.n_frag = 0;
 800e4e2:	9307      	str	r3, [sp, #28]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e4e4:	f7fd fcb0 	bl	800be48 <dir_sdi>
	if (res == FR_OK) {
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	d1ae      	bne.n	800e44c <f_sync+0x20>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e4ee:	4668      	mov	r0, sp
 800e4f0:	f7fd f9b4 	bl	800b85c <load_xdir>
					if (res == FR_OK) {
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d1a8      	bne.n	800e44c <f_sync+0x20>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800e4fa:	696f      	ldr	r7, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4fc:	469c      	mov	ip, r3
 800e4fe:	4619      	mov	r1, r3
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e500:	4668      	mov	r0, sp
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800e502:	793a      	ldrb	r2, [r7, #4]
 800e504:	f042 0220 	orr.w	r2, r2, #32
 800e508:	713a      	strb	r2, [r7, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800e50a:	79e7      	ldrb	r7, [r4, #7]
 800e50c:	696a      	ldr	r2, [r5, #20]
 800e50e:	f047 0701 	orr.w	r7, r7, #1
 800e512:	f882 7021 	strb.w	r7, [r2, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 800e516:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e518:	68a7      	ldr	r7, [r4, #8]
 800e51a:	6357      	str	r7, [r2, #52]	; 0x34
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800e51c:	6962      	ldr	r2, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e51e:	0a17      	lsrs	r7, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800e520:	f362 0c07 	bfi	ip, r2, #0, #8
 800e524:	f367 2c0f 	bfi	ip, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800e528:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e52a:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800e52c:	f367 4c17 	bfi	ip, r7, #16, #8
 800e530:	6927      	ldr	r7, [r4, #16]
 800e532:	f362 6c1f 	bfi	ip, r2, #24, #8
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800e536:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e538:	6397      	str	r7, [r2, #56]	; 0x38
 800e53a:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800e53e:	6962      	ldr	r2, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e540:	0a17      	lsrs	r7, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800e542:	f362 0107 	bfi	r1, r2, #0, #8
 800e546:	f367 210f 	bfi	r1, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800e54a:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e54c:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800e54e:	f367 4117 	bfi	r1, r7, #16, #8
 800e552:	6927      	ldr	r7, [r4, #16]
 800e554:	f362 611f 	bfi	r1, r2, #24, #8
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800e558:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e55a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e55c:	6297      	str	r7, [r2, #40]	; 0x28
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e55e:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e560:	60d6      	str	r6, [r2, #12]
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e562:	696a      	ldr	r2, [r5, #20]
 800e564:	7553      	strb	r3, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e566:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e568:	6113      	str	r3, [r2, #16]
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e56a:	f7fe f92d 	bl	800c7c8 <store_xdir>
						if (res == FR_OK) {
 800e56e:	4603      	mov	r3, r0
 800e570:	2800      	cmp	r0, #0
 800e572:	f47f af6b 	bne.w	800e44c <f_sync+0x20>
							res = sync_fs(fs);
 800e576:	4628      	mov	r0, r5
 800e578:	e045      	b.n	800e606 <f_sync+0x1da>
	FRESULT res = FR_INVALID_OBJECT;
 800e57a:	2309      	movs	r3, #9
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	4770      	bx	lr
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e580:	69a3      	ldr	r3, [r4, #24]
 800e582:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d05d      	beq.n	800e646 <f_sync+0x21a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e58a:	f1b8 0f01 	cmp.w	r8, #1
			res = put_fat(obj->fs, cl, cl + 1);
 800e58e:	6820      	ldr	r0, [r4, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e590:	d915      	bls.n	800e5be <f_sync+0x192>
 800e592:	4443      	add	r3, r8
 800e594:	f103 39ff 	add.w	r9, r3, #4294967295
 800e598:	6a03      	ldr	r3, [r0, #32]
 800e59a:	f108 0701 	add.w	r7, r8, #1
 800e59e:	4641      	mov	r1, r8
 800e5a0:	4543      	cmp	r3, r8
 800e5a2:	463a      	mov	r2, r7
 800e5a4:	d90b      	bls.n	800e5be <f_sync+0x192>
 800e5a6:	f7fc fcb9 	bl	800af1c <put_fat.part.0>
			if (res != FR_OK) return res;
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	f47f af4d 	bne.w	800e44c <f_sync+0x20>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e5b2:	45c8      	cmp	r8, r9
 800e5b4:	46b8      	mov	r8, r7
 800e5b6:	d046      	beq.n	800e646 <f_sync+0x21a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5b8:	2f01      	cmp	r7, #1
			res = put_fat(obj->fs, cl, cl + 1);
 800e5ba:	6820      	ldr	r0, [r4, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5bc:	d8ec      	bhi.n	800e598 <f_sync+0x16c>
	FRESULT res = FR_INT_ERR;
 800e5be:	2302      	movs	r3, #2
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	b015      	add	sp, #84	; 0x54
 800e5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = move_window(fs, fp->dir_sect);
 800e5c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f7fc fc70 	bl	800aeb0 <move_window>
				if (res == FR_OK) {
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f47f af3a 	bne.w	800e44c <f_sync+0x20>
					dir = fp->dir_ptr;
 800e5d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800e5da:	7ada      	ldrb	r2, [r3, #11]
 800e5dc:	f042 0220 	orr.w	r2, r2, #32
 800e5e0:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800e5e2:	68a2      	ldr	r2, [r4, #8]
 800e5e4:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5e6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800e5ea:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800e5ec:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800e5ee:	7809      	ldrb	r1, [r1, #0]
 800e5f0:	2903      	cmp	r1, #3
 800e5f2:	d021      	beq.n	800e638 <f_sync+0x20c>
	*ptr++ = (BYTE)val; val >>= 8;
 800e5f4:	6921      	ldr	r1, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5f6:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800e5f8:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e5fc:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800e5fe:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800e600:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800e602:	2301      	movs	r3, #1
 800e604:	712b      	strb	r3, [r5, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e606:	f7fc fbe9 	bl	800addc <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e60a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
					res = sync_fs(fs);					/* Restore it to the directory */
 800e60e:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e614:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800e618:	e718      	b.n	800e44c <f_sync+0x20>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e61a:	2301      	movs	r3, #1
 800e61c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e61e:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800e622:	7868      	ldrb	r0, [r5, #1]
 800e624:	f7fc fad2 	bl	800abcc <disk_write>
 800e628:	b958      	cbnz	r0, 800e642 <f_sync+0x216>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e62a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e632:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800e636:	e71b      	b.n	800e470 <f_sync+0x44>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e638:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e63a:	751a      	strb	r2, [r3, #20]
 800e63c:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800e63e:	755a      	strb	r2, [r3, #21]
}
 800e640:	e7d8      	b.n	800e5f4 <f_sync+0x1c8>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e642:	2301      	movs	r3, #1
 800e644:	e702      	b.n	800e44c <f_sync+0x20>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800e646:	2300      	movs	r3, #0
 800e648:	71e3      	strb	r3, [r4, #7]
				if (res == FR_OK) {
 800e64a:	e71b      	b.n	800e484 <f_sync+0x58>

0800e64c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800e64c:	b510      	push	{r4, lr}
 800e64e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e650:	f7ff feec 	bl	800e42c <f_sync>
	if (res == FR_OK)
 800e654:	b100      	cbz	r0, 800e658 <f_close+0xc>
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800e656:	bd10      	pop	{r4, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e658:	b13c      	cbz	r4, 800e66a <f_close+0x1e>
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	b12b      	cbz	r3, 800e66a <f_close+0x1e>
 800e65e:	781a      	ldrb	r2, [r3, #0]
 800e660:	b11a      	cbz	r2, 800e66a <f_close+0x1e>
 800e662:	88a1      	ldrh	r1, [r4, #4]
 800e664:	88da      	ldrh	r2, [r3, #6]
 800e666:	4291      	cmp	r1, r2
 800e668:	d001      	beq.n	800e66e <f_close+0x22>
	FRESULT res = FR_INVALID_OBJECT;
 800e66a:	2009      	movs	r0, #9
}
 800e66c:	bd10      	pop	{r4, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800e66e:	7858      	ldrb	r0, [r3, #1]
 800e670:	f7fc fa80 	bl	800ab74 <disk_status>
 800e674:	f010 0001 	ands.w	r0, r0, #1
 800e678:	d1f7      	bne.n	800e66a <f_close+0x1e>
	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 800e67a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e67c:	3b01      	subs	r3, #1
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d812      	bhi.n	800e6a8 <f_close+0x5c>
		n = Files[i].ctr;
 800e682:	490b      	ldr	r1, [pc, #44]	; (800e6b0 <f_close+0x64>)
 800e684:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 800e688:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800e68c:	68da      	ldr	r2, [r3, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 800e68e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e692:	d00b      	beq.n	800e6ac <f_close+0x60>
		if (n > 0) n--;			/* Decrement read mode open count */
 800e694:	b112      	cbz	r2, 800e69c <f_close+0x50>
 800e696:	3a01      	subs	r2, #1
		Files[i].ctr = n;
 800e698:	60da      	str	r2, [r3, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e69a:	b912      	cbnz	r2, 800e6a2 <f_close+0x56>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 800e69c:	2300      	movs	r3, #0
 800e69e:	f841 300c 	str.w	r3, [r1, ip]
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	6023      	str	r3, [r4, #0]
}
 800e6a6:	bd10      	pop	{r4, pc}
		res = FR_INT_ERR;		/* Invalid index number */
 800e6a8:	2002      	movs	r0, #2
}
 800e6aa:	bd10      	pop	{r4, pc}
		Files[i].ctr = n;
 800e6ac:	60d8      	str	r0, [r3, #12]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800e6ae:	e7f5      	b.n	800e69c <f_close+0x50>
 800e6b0:	24000778 	.word	0x24000778

0800e6b4 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 800e6b4:	287f      	cmp	r0, #127	; 0x7f
 800e6b6:	d801      	bhi.n	800e6bc <ff_uni2oem+0x8>
		c = (WCHAR)uni;
 800e6b8:	b280      	uxth	r0, r0
 800e6ba:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 800e6bc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800e6c0:	d214      	bcs.n	800e6ec <ff_uni2oem+0x38>
 800e6c2:	f240 3352 	movw	r3, #850	; 0x352
 800e6c6:	4299      	cmp	r1, r3
 800e6c8:	d110      	bne.n	800e6ec <ff_uni2oem+0x38>
 800e6ca:	4a09      	ldr	r2, [pc, #36]	; (800e6f0 <ff_uni2oem+0x3c>)
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	e001      	b.n	800e6d4 <ff_uni2oem+0x20>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800e6d0:	2b80      	cmp	r3, #128	; 0x80
 800e6d2:	d00b      	beq.n	800e6ec <ff_uni2oem+0x38>
 800e6d4:	f832 1b02 	ldrh.w	r1, [r2], #2
 800e6d8:	fa1f fc83 	uxth.w	ip, r3
 800e6dc:	3301      	adds	r3, #1
 800e6de:	4281      	cmp	r1, r0
 800e6e0:	d1f6      	bne.n	800e6d0 <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
 800e6e2:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800e6e6:	fa1f f08c 	uxth.w	r0, ip
 800e6ea:	4770      	bx	lr
	WCHAR c = 0;
 800e6ec:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800e6ee:	4770      	bx	lr
 800e6f0:	08015954 	.word	0x08015954

0800e6f4 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
 800e6f4:	287f      	cmp	r0, #127	; 0x7f
 800e6f6:	d906      	bls.n	800e706 <ff_oem2uni+0x12>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
			if (oem < 0x100) c = p[oem - 0x80];
 800e6f8:	28ff      	cmp	r0, #255	; 0xff
 800e6fa:	d803      	bhi.n	800e704 <ff_oem2uni+0x10>
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800e6fc:	f240 3352 	movw	r3, #850	; 0x352
			if (oem < 0x100) c = p[oem - 0x80];
 800e700:	4299      	cmp	r1, r3
 800e702:	d001      	beq.n	800e708 <ff_oem2uni+0x14>
	WCHAR c = 0;
 800e704:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800e706:	4770      	bx	lr
			if (oem < 0x100) c = p[oem - 0x80];
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <ff_oem2uni+0x20>)
 800e70a:	4a03      	ldr	r2, [pc, #12]	; (800e718 <ff_oem2uni+0x24>)
 800e70c:	4403      	add	r3, r0
 800e70e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800e712:	4770      	bx	lr
 800e714:	7fffff80 	.word	0x7fffff80
 800e718:	08015954 	.word	0x08015954

0800e71c <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 800e71c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800e720:	d21d      	bcs.n	800e75e <ff_wtoupper+0x42>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 800e722:	4b25      	ldr	r3, [pc, #148]	; (800e7b8 <ff_wtoupper+0x9c>)
 800e724:	4a25      	ldr	r2, [pc, #148]	; (800e7bc <ff_wtoupper+0xa0>)
{
 800e726:	b530      	push	{r4, r5, lr}
		p = uc < 0x1000 ? cvt1 : cvt2;
 800e728:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e72c:	bf28      	it	cs
 800e72e:	4613      	movcs	r3, r2
		uc = (WORD)uni;
 800e730:	b284      	uxth	r4, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 800e732:	3304      	adds	r3, #4
 800e734:	e00a      	b.n	800e74c <ff_wtoupper+0x30>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e736:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800e73a:	fa5f fc82 	uxtb.w	ip, r2
 800e73e:	0a12      	lsrs	r2, r2, #8
			if (uc < bc + nc) {	/* In the block? */
 800e740:	eb0c 0e01 	add.w	lr, ip, r1
 800e744:	4570      	cmp	r0, lr
 800e746:	db0b      	blt.n	800e760 <ff_wtoupper+0x44>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 800e748:	3304      	adds	r3, #4
 800e74a:	b192      	cbz	r2, 800e772 <ff_wtoupper+0x56>
			bc = *p++;								/* Get the block base */
 800e74c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 800e750:	461d      	mov	r5, r3
 800e752:	1e4a      	subs	r2, r1, #1
 800e754:	b292      	uxth	r2, r2
 800e756:	4294      	cmp	r4, r2
 800e758:	d8ed      	bhi.n	800e736 <ff_wtoupper+0x1a>
		}
		uni = uc;
 800e75a:	4620      	mov	r0, r4
	}

	return uni;
}
 800e75c:	bd30      	pop	{r4, r5, pc}
 800e75e:	4770      	bx	lr
				switch (cmd) {
 800e760:	2a08      	cmp	r2, #8
 800e762:	d8fa      	bhi.n	800e75a <ff_wtoupper+0x3e>
 800e764:	e8df f002 	tbb	[pc, r2]
 800e768:	1916100c 	.word	0x1916100c
 800e76c:	25221f1c 	.word	0x25221f1c
 800e770:	08          	.byte	0x08
 800e771:	00          	.byte	0x00
			if (cmd == 0) p += nc;	/* Skip table if needed */
 800e772:	eb05 034c 	add.w	r3, r5, ip, lsl #1
 800e776:	e7dc      	b.n	800e732 <ff_wtoupper+0x16>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 800e778:	f5a4 54e3 	sub.w	r4, r4, #7264	; 0x1c60
 800e77c:	b2a4      	uxth	r4, r4
 800e77e:	e7ec      	b.n	800e75a <ff_wtoupper+0x3e>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 800e780:	1a41      	subs	r1, r0, r1
 800e782:	f833 4011 	ldrh.w	r4, [r3, r1, lsl #1]
 800e786:	e7e8      	b.n	800e75a <ff_wtoupper+0x3e>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800e788:	1a63      	subs	r3, r4, r1
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	1ae3      	subs	r3, r4, r3
 800e790:	b29c      	uxth	r4, r3
 800e792:	e7e2      	b.n	800e75a <ff_wtoupper+0x3e>
				case 2: uc -= 16; break;			/* Shift -16 */
 800e794:	3c10      	subs	r4, #16
 800e796:	b2a4      	uxth	r4, r4
 800e798:	e7df      	b.n	800e75a <ff_wtoupper+0x3e>
				case 3:	uc -= 32; break;			/* Shift -32 */
 800e79a:	3c20      	subs	r4, #32
 800e79c:	b2a4      	uxth	r4, r4
 800e79e:	e7dc      	b.n	800e75a <ff_wtoupper+0x3e>
				case 4:	uc -= 48; break;			/* Shift -48 */
 800e7a0:	3c30      	subs	r4, #48	; 0x30
 800e7a2:	b2a4      	uxth	r4, r4
 800e7a4:	e7d9      	b.n	800e75a <ff_wtoupper+0x3e>
				case 5:	uc -= 26; break;			/* Shift -26 */
 800e7a6:	3c1a      	subs	r4, #26
 800e7a8:	b2a4      	uxth	r4, r4
 800e7aa:	e7d6      	b.n	800e75a <ff_wtoupper+0x3e>
				case 6:	uc += 8; break;				/* Shift +8 */
 800e7ac:	3408      	adds	r4, #8
 800e7ae:	b2a4      	uxth	r4, r4
 800e7b0:	e7d3      	b.n	800e75a <ff_wtoupper+0x3e>
				case 7: uc -= 80; break;			/* Shift -80 */
 800e7b2:	3c50      	subs	r4, #80	; 0x50
 800e7b4:	b2a4      	uxth	r4, r4
 800e7b6:	e7d0      	b.n	800e75a <ff_wtoupper+0x3e>
 800e7b8:	080156a4 	.word	0x080156a4
 800e7bc:	08015898 	.word	0x08015898

0800e7c0 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e7c0:	4b2d      	ldr	r3, [pc, #180]	; (800e878 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e7c2:	492e      	ldr	r1, [pc, #184]	; (800e87c <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e7c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e7c8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800e7cc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e7ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800e7d2:	691a      	ldr	r2, [r3, #16]
 800e7d4:	f042 0210 	orr.w	r2, r2, #16
 800e7d8:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e7da:	680b      	ldr	r3, [r1, #0]
 800e7dc:	f003 030f 	and.w	r3, r3, #15
 800e7e0:	2b06      	cmp	r3, #6
 800e7e2:	d805      	bhi.n	800e7f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e7e4:	680b      	ldr	r3, [r1, #0]
 800e7e6:	f023 030f 	bic.w	r3, r3, #15
 800e7ea:	f043 0307 	orr.w	r3, r3, #7
 800e7ee:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e7f0:	4b23      	ldr	r3, [pc, #140]	; (800e880 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e7f2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800e7f4:	4a23      	ldr	r2, [pc, #140]	; (800e884 <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800e7f6:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e7f8:	4820      	ldr	r0, [pc, #128]	; (800e87c <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 800e7fa:	f041 0101 	orr.w	r1, r1, #1
 800e7fe:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800e800:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800e802:	6819      	ldr	r1, [r3, #0]
 800e804:	400a      	ands	r2, r1
 800e806:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e808:	6803      	ldr	r3, [r0, #0]
 800e80a:	071b      	lsls	r3, r3, #28
 800e80c:	d505      	bpl.n	800e81a <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e80e:	6803      	ldr	r3, [r0, #0]
 800e810:	f023 030f 	bic.w	r3, r3, #15
 800e814:	f043 0307 	orr.w	r3, r3, #7
 800e818:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800e81a:	4b19      	ldr	r3, [pc, #100]	; (800e880 <SystemInit+0xc0>)
 800e81c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800e81e:	491a      	ldr	r1, [pc, #104]	; (800e888 <SystemInit+0xc8>)
  RCC->PLLCFGR = 0x01FF0000;
 800e820:	481a      	ldr	r0, [pc, #104]	; (800e88c <SystemInit+0xcc>)
  RCC->PLLCKSELR = 0x02020200;
 800e822:	4c1b      	ldr	r4, [pc, #108]	; (800e890 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800e824:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800e826:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800e828:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800e82a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800e82c:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800e82e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
  RCC->PLL1DIVR = 0x01010280;
 800e832:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800e834:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800e836:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800e838:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 800e83a:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800e83c:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800e83e:	6819      	ldr	r1, [r3, #0]
 800e840:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800e844:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800e846:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 800e848:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e84c:	4911      	ldr	r1, [pc, #68]	; (800e894 <SystemInit+0xd4>)
  EXTI_D2->EMR3 |= 0x4000UL;
 800e84e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e852:	4b11      	ldr	r3, [pc, #68]	; (800e898 <SystemInit+0xd8>)
  EXTI_D2->EMR3 |= 0x4000UL;
 800e854:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e858:	680a      	ldr	r2, [r1, #0]
 800e85a:	4013      	ands	r3, r2
 800e85c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e860:	d203      	bcs.n	800e86a <SystemInit+0xaa>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800e862:	4b0e      	ldr	r3, [pc, #56]	; (800e89c <SystemInit+0xdc>)
 800e864:	2201      	movs	r2, #1
 800e866:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e86a:	4b0d      	ldr	r3, [pc, #52]	; (800e8a0 <SystemInit+0xe0>)
 800e86c:	f243 02d2 	movw	r2, #12498	; 0x30d2
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800e870:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e874:	601a      	str	r2, [r3, #0]
}
 800e876:	4770      	bx	lr
 800e878:	e000ed00 	.word	0xe000ed00
 800e87c:	52002000 	.word	0x52002000
 800e880:	58024400 	.word	0x58024400
 800e884:	eaf6ed7f 	.word	0xeaf6ed7f
 800e888:	01010280 	.word	0x01010280
 800e88c:	01ff0000 	.word	0x01ff0000
 800e890:	02020200 	.word	0x02020200
 800e894:	5c001000 	.word	0x5c001000
 800e898:	ffff0000 	.word	0xffff0000
 800e89c:	51008000 	.word	0x51008000
 800e8a0:	52004000 	.word	0x52004000

0800e8a4 <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800e8a4:	f44f 7294 	mov.w	r2, #296	; 0x128
{
 800e8a8:	b508      	push	{r3, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800e8aa:	4b03      	ldr	r3, [pc, #12]	; (800e8b8 <tud_cdc_n_available+0x14>)
 800e8ac:	fb02 3000 	mla	r0, r2, r0, r3
 800e8b0:	3010      	adds	r0, #16
 800e8b2:	f000 ffc9 	bl	800f848 <tu_fifo_count>
}
 800e8b6:	bd08      	pop	{r3, pc}
 800e8b8:	2400099c 	.word	0x2400099c

0800e8bc <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800e8bc:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e8c0:	b292      	uxth	r2, r2
{
 800e8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c6:	fb03 f500 	mul.w	r5, r3, r0
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800e8ca:	4f19      	ldr	r7, [pc, #100]	; (800e930 <tud_cdc_n_read+0x74>)
 800e8cc:	f105 0410 	add.w	r4, r5, #16
 800e8d0:	443c      	add	r4, r7
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f001 f834 	bl	800f940 <tu_fifo_read_n>
 800e8d8:	4606      	mov	r6, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f000 ffd4 	bl	800f888 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800e8e0:	283f      	cmp	r0, #63	; 0x3f
 800e8e2:	d802      	bhi.n	800e8ea <tud_cdc_n_read+0x2e>
  _prep_out_transaction(p_cdc);
  return num_read;
}
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800e8ea:	eb07 0805 	add.w	r8, r7, r5
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	f898 1003 	ldrb.w	r1, [r8, #3]
 800e8f4:	f002 f97e 	bl	8010bf4 <usbd_edpt_claim>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d0f3      	beq.n	800e8e4 <tud_cdc_n_read+0x28>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f000 ffc3 	bl	800f888 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800e902:	283f      	cmp	r0, #63	; 0x3f
 800e904:	d90b      	bls.n	800e91e <tud_cdc_n_read+0x62>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800e906:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 800e90a:	2340      	movs	r3, #64	; 0x40
 800e90c:	f898 1003 	ldrb.w	r1, [r8, #3]
 800e910:	2000      	movs	r0, #0
 800e912:	443a      	add	r2, r7
 800e914:	f002 f98a 	bl	8010c2c <usbd_edpt_xfer>
}
 800e918:	4630      	mov	r0, r6
 800e91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800e91e:	f898 1003 	ldrb.w	r1, [r8, #3]
 800e922:	2000      	movs	r0, #0
 800e924:	f002 f974 	bl	8010c10 <usbd_edpt_release>
}
 800e928:	4630      	mov	r0, r6
 800e92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e92e:	bf00      	nop
 800e930:	2400099c 	.word	0x2400099c

0800e934 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 800e934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e938:	4604      	mov	r4, r0

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 800e93a:	f001 fb69 	bl	8010010 <tud_mounted>
 800e93e:	b910      	cbnz	r0, 800e946 <tud_cdc_n_write_flush+0x12>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 800e940:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
 800e942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e946:	f001 fb6b 	bl	8010020 <tud_suspended>
 800e94a:	4606      	mov	r6, r0
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d1f7      	bne.n	800e940 <tud_cdc_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 800e950:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e954:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800e9b8 <tud_cdc_n_write_flush+0x84>
 800e958:	fb03 f404 	mul.w	r4, r3, r4
 800e95c:	f104 051c 	add.w	r5, r4, #28
 800e960:	4445      	add	r5, r8
 800e962:	4628      	mov	r0, r5
 800e964:	f000 ff70 	bl	800f848 <tu_fifo_count>
 800e968:	2800      	cmp	r0, #0
 800e96a:	d0e9      	beq.n	800e940 <tud_cdc_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800e96c:	eb08 0704 	add.w	r7, r8, r4
 800e970:	4630      	mov	r0, r6
 800e972:	78b9      	ldrb	r1, [r7, #2]
 800e974:	f002 f93e 	bl	8010bf4 <usbd_edpt_claim>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d0e1      	beq.n	800e940 <tud_cdc_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 800e97c:	34e8      	adds	r4, #232	; 0xe8
 800e97e:	4628      	mov	r0, r5
 800e980:	2240      	movs	r2, #64	; 0x40
 800e982:	4444      	add	r4, r8
 800e984:	4621      	mov	r1, r4
 800e986:	f000 ffdb 	bl	800f940 <tu_fifo_read_n>
  if ( count )
 800e98a:	4605      	mov	r5, r0
 800e98c:	b170      	cbz	r0, 800e9ac <tud_cdc_n_write_flush+0x78>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 800e98e:	4603      	mov	r3, r0
 800e990:	4622      	mov	r2, r4
 800e992:	78b9      	ldrb	r1, [r7, #2]
 800e994:	4630      	mov	r0, r6
 800e996:	f002 f949 	bl	8010c2c <usbd_edpt_xfer>
 800e99a:	b950      	cbnz	r0, 800e9b2 <tud_cdc_n_write_flush+0x7e>
 800e99c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e9a0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800e9a4:	07db      	lsls	r3, r3, #31
 800e9a6:	d5cb      	bpl.n	800e940 <tud_cdc_n_write_flush+0xc>
 800e9a8:	be00      	bkpt	0x0000
 800e9aa:	e7ca      	b.n	800e942 <tud_cdc_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800e9ac:	78b9      	ldrb	r1, [r7, #2]
 800e9ae:	f002 f92f 	bl	8010c10 <usbd_edpt_release>
    return 0;
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	e7c5      	b.n	800e942 <tud_cdc_n_write_flush+0xe>
 800e9b6:	bf00      	nop
 800e9b8:	2400099c 	.word	0x2400099c

0800e9bc <tud_cdc_n_write>:
{
 800e9bc:	b538      	push	{r3, r4, r5, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800e9be:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e9c2:	4c0b      	ldr	r4, [pc, #44]	; (800e9f0 <tud_cdc_n_write+0x34>)
 800e9c4:	b292      	uxth	r2, r2
{
 800e9c6:	4605      	mov	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800e9c8:	fb03 4400 	mla	r4, r3, r0, r4
 800e9cc:	341c      	adds	r4, #28
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f001 f90c 	bl	800fbec <tu_fifo_write_n>
 800e9d4:	4603      	mov	r3, r0
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800e9d6:	4620      	mov	r0, r4
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800e9d8:	461c      	mov	r4, r3
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800e9da:	f000 ff35 	bl	800f848 <tu_fifo_count>
 800e9de:	283f      	cmp	r0, #63	; 0x3f
 800e9e0:	d801      	bhi.n	800e9e6 <tud_cdc_n_write+0x2a>
}
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	bd38      	pop	{r3, r4, r5, pc}
    tud_cdc_n_write_flush(itf);
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f7ff ffa4 	bl	800e934 <tud_cdc_n_write_flush>
}
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	bd38      	pop	{r3, r4, r5, pc}
 800e9f0:	2400099c 	.word	0x2400099c

0800e9f4 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800e9f4:	b510      	push	{r4, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800e9f6:	4c12      	ldr	r4, [pc, #72]	; (800ea40 <cdcd_init+0x4c>)
{
 800e9f8:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800e9fa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e9fe:	2100      	movs	r1, #0
 800ea00:	4620      	mov	r0, r4
 800ea02:	f003 fc2a 	bl	801225a <memset>
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800ea06:	2300      	movs	r3, #0
    p_cdc->wanted_char = (char) -1;
 800ea08:	21ff      	movs	r1, #255	; 0xff
    p_cdc->line_coding.bit_rate  = 115200;
 800ea0a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    p_cdc->line_coding.data_bits = 8;
 800ea0e:	2008      	movs	r0, #8
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800ea10:	9300      	str	r3, [sp, #0]
    p_cdc->wanted_char = (char) -1;
 800ea12:	7161      	strb	r1, [r4, #5]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800ea14:	2301      	movs	r3, #1
 800ea16:	f104 0128 	add.w	r1, r4, #40	; 0x28
    p_cdc->line_coding.bit_rate  = 115200;
 800ea1a:	60a2      	str	r2, [r4, #8]
    p_cdc->line_coding.data_bits = 8;
 800ea1c:	73a0      	strb	r0, [r4, #14]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800ea1e:	2240      	movs	r2, #64	; 0x40
 800ea20:	f104 0010 	add.w	r0, r4, #16
 800ea24:	f000 fef6 	bl	800f814 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 800ea28:	2301      	movs	r3, #1
 800ea2a:	2240      	movs	r2, #64	; 0x40
 800ea2c:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800ea30:	f104 001c 	add.w	r0, r4, #28
 800ea34:	9300      	str	r3, [sp, #0]
 800ea36:	f000 feed 	bl	800f814 <tu_fifo_config>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 800ea3a:	b002      	add	sp, #8
 800ea3c:	bd10      	pop	{r4, pc}
 800ea3e:	bf00      	nop
 800ea40:	2400099c 	.word	0x2400099c

0800ea44 <cdcd_reset>:

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800ea44:	4b09      	ldr	r3, [pc, #36]	; (800ea6c <cdcd_reset+0x28>)
 800ea46:	2200      	movs	r2, #0
{
 800ea48:	b510      	push	{r4, lr}
    tu_fifo_clear(&p_cdc->rx_ff);
    tu_fifo_clear(&p_cdc->tx_ff);
 800ea4a:	f103 041c 	add.w	r4, r3, #28
    tu_fifo_clear(&p_cdc->rx_ff);
 800ea4e:	f103 0010 	add.w	r0, r3, #16
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800ea52:	601a      	str	r2, [r3, #0]
 800ea54:	711a      	strb	r2, [r3, #4]
    tu_fifo_clear(&p_cdc->rx_ff);
 800ea56:	f001 fa63 	bl	800ff20 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f001 fa60 	bl	800ff20 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800ea60:	4620      	mov	r0, r4
 800ea62:	2101      	movs	r1, #1
  }
}
 800ea64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800ea68:	f001 ba60 	b.w	800ff2c <tu_fifo_set_overwritable>
 800ea6c:	2400099c 	.word	0x2400099c

0800ea70 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800ea74:	794b      	ldrb	r3, [r1, #5]
{
 800ea76:	b082      	sub	sp, #8
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d102      	bne.n	800ea82 <cdcd_open+0x12>
 800ea7c:	798b      	ldrb	r3, [r1, #6]
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d004      	beq.n	800ea8c <cdcd_open+0x1c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
      break;
    }
  }
  TU_ASSERT(p_cdc, 0);
 800ea82:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
 800ea84:	4628      	mov	r0, r5
 800ea86:	b002      	add	sp, #8
 800ea88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 800ea8c:	4e32      	ldr	r6, [pc, #200]	; (800eb58 <cdcd_open+0xe8>)
 800ea8e:	78b3      	ldrb	r3, [r6, #2]
 800ea90:	b13b      	cbz	r3, 800eaa2 <cdcd_open+0x32>
  TU_ASSERT(p_cdc, 0);
 800ea92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ea96:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ea9a:	07db      	lsls	r3, r3, #31
 800ea9c:	d5f1      	bpl.n	800ea82 <cdcd_open+0x12>
 800ea9e:	be00      	bkpt	0x0000
 800eaa0:	e7ef      	b.n	800ea82 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800eaa2:	788b      	ldrb	r3, [r1, #2]
 800eaa4:	4607      	mov	r7, r0
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800eaa6:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800eaa8:	7033      	strb	r3, [r6, #0]

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 800eaaa:	780b      	ldrb	r3, [r1, #0]
 800eaac:	18cc      	adds	r4, r1, r3
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800eaae:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800eab0:	2924      	cmp	r1, #36	; 0x24
 800eab2:	d10b      	bne.n	800eacc <cdcd_open+0x5c>
 800eab4:	2a08      	cmp	r2, #8
 800eab6:	d802      	bhi.n	800eabe <cdcd_open+0x4e>
 800eab8:	e00f      	b.n	800eada <cdcd_open+0x6a>
 800eaba:	42aa      	cmp	r2, r5
 800eabc:	d30d      	bcc.n	800eada <cdcd_open+0x6a>
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800eabe:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800eac0:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
 800eac2:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800eac4:	7861      	ldrb	r1, [r4, #1]
 800eac6:	b29d      	uxth	r5, r3
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800eac8:	2924      	cmp	r1, #36	; 0x24
 800eaca:	d0f6      	beq.n	800eaba <cdcd_open+0x4a>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800eacc:	2905      	cmp	r1, #5
 800eace:	d01b      	beq.n	800eb08 <cdcd_open+0x98>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800ead0:	2904      	cmp	r1, #4
 800ead2:	d102      	bne.n	800eada <cdcd_open+0x6a>
 800ead4:	7963      	ldrb	r3, [r4, #5]
 800ead6:	2b0a      	cmp	r3, #10
 800ead8:	d029      	beq.n	800eb2e <cdcd_open+0xbe>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800eada:	4820      	ldr	r0, [pc, #128]	; (800eb5c <cdcd_open+0xec>)
 800eadc:	f000 fed4 	bl	800f888 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800eae0:	283f      	cmp	r0, #63	; 0x3f
 800eae2:	d9cf      	bls.n	800ea84 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800eae4:	78f1      	ldrb	r1, [r6, #3]
 800eae6:	2000      	movs	r0, #0
 800eae8:	f002 f884 	bl	8010bf4 <usbd_edpt_claim>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d0c9      	beq.n	800ea84 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800eaf0:	481a      	ldr	r0, [pc, #104]	; (800eb5c <cdcd_open+0xec>)
 800eaf2:	f000 fec9 	bl	800f888 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800eaf6:	283f      	cmp	r0, #63	; 0x3f
 800eaf8:	d914      	bls.n	800eb24 <cdcd_open+0xb4>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800eafa:	2340      	movs	r3, #64	; 0x40
 800eafc:	4a18      	ldr	r2, [pc, #96]	; (800eb60 <cdcd_open+0xf0>)
 800eafe:	78f1      	ldrb	r1, [r6, #3]
 800eb00:	2000      	movs	r0, #0
 800eb02:	f002 f893 	bl	8010c2c <usbd_edpt_xfer>
 800eb06:	e7bd      	b.n	800ea84 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 800eb08:	4621      	mov	r1, r4
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	f002 f84e 	bl	8010bac <usbd_edpt_open>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d0be      	beq.n	800ea92 <cdcd_open+0x22>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800eb14:	78a3      	ldrb	r3, [r4, #2]
 800eb16:	7073      	strb	r3, [r6, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800eb18:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
 800eb1a:	441d      	add	r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
 800eb1c:	441c      	add	r4, r3
 800eb1e:	b2ad      	uxth	r5, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800eb20:	7861      	ldrb	r1, [r4, #1]
 800eb22:	e7d5      	b.n	800ead0 <cdcd_open+0x60>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800eb24:	78f1      	ldrb	r1, [r6, #3]
 800eb26:	2000      	movs	r0, #0
 800eb28:	f002 f872 	bl	8010c10 <usbd_edpt_release>
    return false;
 800eb2c:	e7aa      	b.n	800ea84 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800eb2e:	4b0d      	ldr	r3, [pc, #52]	; (800eb64 <cdcd_open+0xf4>)
 800eb30:	4638      	mov	r0, r7
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800eb32:	f894 8000 	ldrb.w	r8, [r4]
 800eb36:	9301      	str	r3, [sp, #4]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	eb04 0108 	add.w	r1, r4, r8
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	2302      	movs	r3, #2
 800eb42:	461a      	mov	r2, r3
 800eb44:	f001 ffdc 	bl	8010b00 <usbd_open_edpt_pair>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d0a2      	beq.n	800ea92 <cdcd_open+0x22>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 800eb4c:	350e      	adds	r5, #14
 800eb4e:	fa18 f585 	uxtah	r5, r8, r5
 800eb52:	b2ad      	uxth	r5, r5
 800eb54:	e7c1      	b.n	800eada <cdcd_open+0x6a>
 800eb56:	bf00      	nop
 800eb58:	2400099c 	.word	0x2400099c
 800eb5c:	240009ac 	.word	0x240009ac
 800eb60:	24000a44 	.word	0x24000a44
 800eb64:	2400099e 	.word	0x2400099e

0800eb68 <cdcd_control_xfer_cb>:
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800eb68:	7813      	ldrb	r3, [r2, #0]
 800eb6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb6e:	2b20      	cmp	r3, #32
{
 800eb70:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800eb72:	d10f      	bne.n	800eb94 <cdcd_control_xfer_cb+0x2c>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
 800eb74:	4694      	mov	ip, r2
 800eb76:	4c33      	ldr	r4, [pc, #204]	; (800ec44 <cdcd_control_xfer_cb+0xdc>)
 800eb78:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800eb7c:	7822      	ldrb	r2, [r4, #0]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d108      	bne.n	800eb94 <cdcd_control_xfer_cb+0x2c>
  }

  switch ( request->bRequest )
 800eb82:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800eb86:	3b20      	subs	r3, #32
 800eb88:	2b03      	cmp	r3, #3
 800eb8a:	d803      	bhi.n	800eb94 <cdcd_control_xfer_cb+0x2c>
 800eb8c:	e8df f003 	tbb	[pc, r3]
 800eb90:	05312816 	.word	0x05312816
 800eb94:	2400      	movs	r4, #0

    default: return false; // stall unsupported request
  }

  return true;
}
 800eb96:	4620      	mov	r0, r4
 800eb98:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800eb9a:	2901      	cmp	r1, #1
 800eb9c:	d042      	beq.n	800ec24 <cdcd_control_xfer_cb+0xbc>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800eb9e:	4b2a      	ldr	r3, [pc, #168]	; (800ec48 <cdcd_control_xfer_cb+0xe0>)
 800eba0:	f04f 0401 	mov.w	r4, #1
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d042      	beq.n	800ec2e <cdcd_control_xfer_cb+0xc6>
 800eba8:	2903      	cmp	r1, #3
 800ebaa:	bf14      	ite	ne
 800ebac:	2400      	movne	r4, #0
 800ebae:	f004 0401 	andeq.w	r4, r4, #1
 800ebb2:	2c00      	cmp	r4, #0
 800ebb4:	d13f      	bne.n	800ec36 <cdcd_control_xfer_cb+0xce>
  return true;
 800ebb6:	2401      	movs	r4, #1
}
 800ebb8:	4620      	mov	r0, r4
 800ebba:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800ebbc:	2901      	cmp	r1, #1
 800ebbe:	d011      	beq.n	800ebe4 <cdcd_control_xfer_cb+0x7c>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800ebc0:	4b22      	ldr	r3, [pc, #136]	; (800ec4c <cdcd_control_xfer_cb+0xe4>)
 800ebc2:	f04f 0401 	mov.w	r4, #1
 800ebc6:	b3a3      	cbz	r3, 800ec32 <cdcd_control_xfer_cb+0xca>
 800ebc8:	2903      	cmp	r1, #3
 800ebca:	bf14      	ite	ne
 800ebcc:	2400      	movne	r4, #0
 800ebce:	f004 0401 	andeq.w	r4, r4, #1
 800ebd2:	2c00      	cmp	r4, #0
 800ebd4:	d0ef      	beq.n	800ebb6 <cdcd_control_xfer_cb+0x4e>
 800ebd6:	491e      	ldr	r1, [pc, #120]	; (800ec50 <cdcd_control_xfer_cb+0xe8>)
 800ebd8:	2000      	movs	r0, #0
 800ebda:	f3af 8000 	nop.w
 800ebde:	e7da      	b.n	800eb96 <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800ebe0:	2901      	cmp	r1, #1
 800ebe2:	d1e8      	bne.n	800ebb6 <cdcd_control_xfer_cb+0x4e>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800ebe4:	2307      	movs	r3, #7
 800ebe6:	4a1a      	ldr	r2, [pc, #104]	; (800ec50 <cdcd_control_xfer_cb+0xe8>)
 800ebe8:	4661      	mov	r1, ip
  return true;
 800ebea:	2401      	movs	r4, #1
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800ebec:	f002 f8aa 	bl	8010d44 <tud_control_xfer>
 800ebf0:	e7d1      	b.n	800eb96 <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800ebf2:	2901      	cmp	r1, #1
 800ebf4:	d016      	beq.n	800ec24 <cdcd_control_xfer_cb+0xbc>
      else if (stage == CONTROL_STAGE_ACK)
 800ebf6:	2903      	cmp	r1, #3
 800ebf8:	d1dd      	bne.n	800ebb6 <cdcd_control_xfer_cb+0x4e>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800ebfa:	f8bc 5002 	ldrh.w	r5, [ip, #2]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800ebfe:	4815      	ldr	r0, [pc, #84]	; (800ec54 <cdcd_control_xfer_cb+0xec>)
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800ec00:	f005 0601 	and.w	r6, r5, #1
        p_cdc->line_state = (uint8_t) request->wValue;
 800ec04:	7125      	strb	r5, [r4, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800ec06:	f086 0101 	eor.w	r1, r6, #1
 800ec0a:	f001 f98f 	bl	800ff2c <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800ec0e:	4b12      	ldr	r3, [pc, #72]	; (800ec58 <cdcd_control_xfer_cb+0xf0>)
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d0d0      	beq.n	800ebb6 <cdcd_control_xfer_cb+0x4e>
 800ec14:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800ec18:	4631      	mov	r1, r6
 800ec1a:	2000      	movs	r0, #0
  return true;
 800ec1c:	2401      	movs	r4, #1
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800ec1e:	f3af 8000 	nop.w
 800ec22:	e7b8      	b.n	800eb96 <cdcd_control_xfer_cb+0x2e>
        tud_control_status(rhport, request);
 800ec24:	4661      	mov	r1, ip
  return true;
 800ec26:	2401      	movs	r4, #1
        tud_control_status(rhport, request);
 800ec28:	f002 f874 	bl	8010d14 <tud_control_status>
 800ec2c:	e7b3      	b.n	800eb96 <cdcd_control_xfer_cb+0x2e>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800ec2e:	461c      	mov	r4, r3
 800ec30:	e7ba      	b.n	800eba8 <cdcd_control_xfer_cb+0x40>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800ec32:	461c      	mov	r4, r3
 800ec34:	e7c8      	b.n	800ebc8 <cdcd_control_xfer_cb+0x60>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800ec36:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	f3af 8000 	nop.w
 800ec40:	e7a9      	b.n	800eb96 <cdcd_control_xfer_cb+0x2e>
 800ec42:	bf00      	nop
 800ec44:	2400099c 	.word	0x2400099c
	...
 800ec50:	240009a4 	.word	0x240009a4
 800ec54:	240009b8 	.word	0x240009b8
 800ec58:	00000000 	.word	0x00000000

0800ec5c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800ec5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800ec60:	4e44      	ldr	r6, [pc, #272]	; (800ed74 <cdcd_xfer_cb+0x118>)
{
 800ec62:	460c      	mov	r4, r1
 800ec64:	4607      	mov	r7, r0
 800ec66:	461d      	mov	r5, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800ec68:	78f2      	ldrb	r2, [r6, #3]
 800ec6a:	428a      	cmp	r2, r1
 800ec6c:	d15e      	bne.n	800ed2c <cdcd_xfer_cb+0xd0>
  TU_ASSERT(itf < CFG_TUD_CDC);

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 800ec6e:	b29a      	uxth	r2, r3
 800ec70:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800ec74:	f106 0010 	add.w	r0, r6, #16
 800ec78:	f000 ffb8 	bl	800fbec <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 800ec7c:	4b3e      	ldr	r3, [pc, #248]	; (800ed78 <cdcd_xfer_cb+0x11c>)
 800ec7e:	b1d3      	cbz	r3, 800ecb6 <cdcd_xfer_cb+0x5a>
 800ec80:	7973      	ldrb	r3, [r6, #5]
 800ec82:	2bff      	cmp	r3, #255	; 0xff
 800ec84:	d017      	beq.n	800ecb6 <cdcd_xfer_cb+0x5a>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800ec86:	b1b5      	cbz	r5, 800ecb6 <cdcd_xfer_cb+0x5a>
 800ec88:	f106 08a7 	add.w	r8, r6, #167	; 0xa7
 800ec8c:	eb08 0a05 	add.w	sl, r8, r5
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800ec90:	f1a8 0997 	sub.w	r9, r8, #151	; 0x97
 800ec94:	e002      	b.n	800ec9c <cdcd_xfer_cb+0x40>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800ec96:	45d0      	cmp	r8, sl
 800ec98:	d00d      	beq.n	800ecb6 <cdcd_xfer_cb+0x5a>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800ec9a:	7973      	ldrb	r3, [r6, #5]
 800ec9c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d1f8      	bne.n	800ec96 <cdcd_xfer_cb+0x3a>
 800eca4:	4648      	mov	r0, r9
 800eca6:	f000 fde5 	bl	800f874 <tu_fifo_empty>
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d1f3      	bne.n	800ec96 <cdcd_xfer_cb+0x3a>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800ecae:	7971      	ldrb	r1, [r6, #5]
 800ecb0:	f3af 8000 	nop.w
 800ecb4:	e7ef      	b.n	800ec96 <cdcd_xfer_cb+0x3a>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800ecb6:	4b31      	ldr	r3, [pc, #196]	; (800ed7c <cdcd_xfer_cb+0x120>)
 800ecb8:	b123      	cbz	r3, 800ecc4 <cdcd_xfer_cb+0x68>
 800ecba:	4831      	ldr	r0, [pc, #196]	; (800ed80 <cdcd_xfer_cb+0x124>)
 800ecbc:	f000 fdda 	bl	800f874 <tu_fifo_empty>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d04f      	beq.n	800ed64 <cdcd_xfer_cb+0x108>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800ecc4:	482e      	ldr	r0, [pc, #184]	; (800ed80 <cdcd_xfer_cb+0x124>)
 800ecc6:	f000 fddf 	bl	800f888 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800ecca:	283f      	cmp	r0, #63	; 0x3f
 800eccc:	d905      	bls.n	800ecda <cdcd_xfer_cb+0x7e>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800ecce:	78f1      	ldrb	r1, [r6, #3]
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	f001 ff8f 	bl	8010bf4 <usbd_edpt_claim>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d137      	bne.n	800ed4a <cdcd_xfer_cb+0xee>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800ecda:	78b3      	ldrb	r3, [r6, #2]
 800ecdc:	42a3      	cmp	r3, r4
 800ecde:	d003      	beq.n	800ece8 <cdcd_xfer_cb+0x8c>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 800ece0:	2401      	movs	r4, #1
}
 800ece2:	4620      	mov	r0, r4
 800ece4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 800ece8:	4b26      	ldr	r3, [pc, #152]	; (800ed84 <cdcd_xfer_cb+0x128>)
 800ecea:	b113      	cbz	r3, 800ecf2 <cdcd_xfer_cb+0x96>
 800ecec:	2000      	movs	r0, #0
 800ecee:	f3af 8000 	nop.w
    if ( 0 == tud_cdc_n_write_flush(itf) )
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	f7ff fe1e 	bl	800e934 <tud_cdc_n_write_flush>
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	d1f1      	bne.n	800ece0 <cdcd_xfer_cb+0x84>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 800ecfc:	4822      	ldr	r0, [pc, #136]	; (800ed88 <cdcd_xfer_cb+0x12c>)
 800ecfe:	f000 fda3 	bl	800f848 <tu_fifo_count>
 800ed02:	2d00      	cmp	r5, #0
 800ed04:	d0ec      	beq.n	800ece0 <cdcd_xfer_cb+0x84>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d1ea      	bne.n	800ece0 <cdcd_xfer_cb+0x84>
 800ed0a:	f015 053f 	ands.w	r5, r5, #63	; 0x3f
 800ed0e:	d1e7      	bne.n	800ece0 <cdcd_xfer_cb+0x84>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 800ed10:	78b1      	ldrb	r1, [r6, #2]
 800ed12:	4638      	mov	r0, r7
 800ed14:	f001 ff6e 	bl	8010bf4 <usbd_edpt_claim>
 800ed18:	4604      	mov	r4, r0
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	d0e0      	beq.n	800ece0 <cdcd_xfer_cb+0x84>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 800ed1e:	462b      	mov	r3, r5
 800ed20:	462a      	mov	r2, r5
 800ed22:	78b1      	ldrb	r1, [r6, #2]
 800ed24:	4638      	mov	r0, r7
 800ed26:	f001 ff81 	bl	8010c2c <usbd_edpt_xfer>
 800ed2a:	e7da      	b.n	800ece2 <cdcd_xfer_cb+0x86>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800ed2c:	78b3      	ldrb	r3, [r6, #2]
 800ed2e:	428b      	cmp	r3, r1
 800ed30:	d0da      	beq.n	800ece8 <cdcd_xfer_cb+0x8c>
  TU_ASSERT(itf < CFG_TUD_CDC);
 800ed32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ed36:	f8d3 4df0 	ldr.w	r4, [r3, #3568]	; 0xdf0
 800ed3a:	f014 0401 	ands.w	r4, r4, #1
 800ed3e:	d0d0      	beq.n	800ece2 <cdcd_xfer_cb+0x86>
 800ed40:	be00      	bkpt	0x0000
 800ed42:	2400      	movs	r4, #0
}
 800ed44:	4620      	mov	r0, r4
 800ed46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800ed4a:	480d      	ldr	r0, [pc, #52]	; (800ed80 <cdcd_xfer_cb+0x124>)
 800ed4c:	f000 fd9c 	bl	800f888 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800ed50:	283f      	cmp	r0, #63	; 0x3f
 800ed52:	d90a      	bls.n	800ed6a <cdcd_xfer_cb+0x10e>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800ed54:	2340      	movs	r3, #64	; 0x40
 800ed56:	4a0d      	ldr	r2, [pc, #52]	; (800ed8c <cdcd_xfer_cb+0x130>)
 800ed58:	78f1      	ldrb	r1, [r6, #3]
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	f001 ff66 	bl	8010c2c <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
 800ed60:	78b3      	ldrb	r3, [r6, #2]
 800ed62:	e7bb      	b.n	800ecdc <cdcd_xfer_cb+0x80>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800ed64:	f3af 8000 	nop.w
 800ed68:	e7ac      	b.n	800ecc4 <cdcd_xfer_cb+0x68>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800ed6a:	78f1      	ldrb	r1, [r6, #3]
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f001 ff4f 	bl	8010c10 <usbd_edpt_release>
 800ed72:	e7b2      	b.n	800ecda <cdcd_xfer_cb+0x7e>
 800ed74:	2400099c 	.word	0x2400099c
	...
 800ed80:	240009ac 	.word	0x240009ac
 800ed84:	00000000 	.word	0x00000000
 800ed88:	240009b8 	.word	0x240009b8
 800ed8c:	24000a44 	.word	0x24000a44

0800ed90 <proc_read10_cmd.constprop.0>:
  }

  return resplen;
}

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 800ed90:	b530      	push	{r4, r5, lr}

#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 800ed92:	4c33      	ldr	r4, [pc, #204]	; (800ee60 <proc_read10_cmd.constprop.0+0xd0>)
 800ed94:	b087      	sub	sp, #28
 800ed96:	4605      	mov	r5, r0
  return tu_ntohs(block_count);
 800ed98:	8ae2      	ldrh	r2, [r4, #22]
  return (uint16_t) (cbw->total_bytes / block_count);
 800ed9a:	68a3      	ldr	r3, [r4, #8]
  return tu_ntohs(block_count);
 800ed9c:	ba52      	rev16	r2, r2
 800ed9e:	b292      	uxth	r2, r2
  if (block_count == 0) return 0;
 800eda0:	b112      	cbz	r2, 800eda8 <proc_read10_cmd.constprop.0+0x18>
  return (uint16_t) (cbw->total_bytes / block_count);
 800eda2:	fbb3 f2f2 	udiv	r2, r3, r2
 800eda6:	b292      	uxth	r2, r2

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800eda8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800edaa:	f8d4 1011 	ldr.w	r1, [r4, #17]

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800edae:	1a1b      	subs	r3, r3, r0
  return tu_ntohl(lba);
 800edb0:	ba09      	rev	r1, r1
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800edb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edb6:	bf28      	it	cs
 800edb8:	f44f 5300 	movcs.w	r3, #8192	; 0x2000

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 800edbc:	9300      	str	r3, [sp, #0]
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800edbe:	fbb0 f3f2 	udiv	r3, r0, r2
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 800edc2:	fb02 0213 	mls	r2, r2, r3, r0
 800edc6:	4419      	add	r1, r3
 800edc8:	7b60      	ldrb	r0, [r4, #13]
 800edca:	4b26      	ldr	r3, [pc, #152]	; (800ee64 <proc_read10_cmd.constprop.0+0xd4>)
 800edcc:	f7f5 fa72 	bl	80042b4 <tud_msc_read10_cb>

  if ( nbytes < 0 )
 800edd0:	1e01      	subs	r1, r0, #0
 800edd2:	db1c      	blt.n	800ee0e <proc_read10_cmd.constprop.0+0x7e>
    // set sense
    set_sense_medium_not_present(p_cbw->lun);

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
  }
  else if ( nbytes == 0 )
 800edd4:	d00a      	beq.n	800edec <proc_read10_cmd.constprop.0+0x5c>
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 800edd6:	b28b      	uxth	r3, r1
 800edd8:	4a22      	ldr	r2, [pc, #136]	; (800ee64 <proc_read10_cmd.constprop.0+0xd4>)
 800edda:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800edde:	4628      	mov	r0, r5
 800ede0:	f001 ff24 	bl	8010c2c <usbd_edpt_xfer>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	d033      	beq.n	800ee50 <proc_read10_cmd.constprop.0+0xc0>
  }
}
 800ede8:	b007      	add	sp, #28
 800edea:	bd30      	pop	{r4, r5, pc}
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 800edec:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800edf0:	2207      	movs	r2, #7

  event.xfer_complete.ep_addr = ep_addr;
  event.xfer_complete.len     = xferred_bytes;
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
 800edf2:	a803      	add	r0, sp, #12
  event.xfer_complete.len     = xferred_bytes;
 800edf4:	9105      	str	r1, [sp, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800edf6:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800edfa:	f88d 500c 	strb.w	r5, [sp, #12]
 800edfe:	f88d 200d 	strb.w	r2, [sp, #13]
  event.xfer_complete.ep_addr = ep_addr;
 800ee02:	f88d 3010 	strb.w	r3, [sp, #16]
  dcd_event_handler(&event, in_isr);
 800ee06:	f001 fd9b 	bl	8010940 <dcd_event_handler>
}
 800ee0a:	b007      	add	sp, #28
 800ee0c:	bd30      	pop	{r4, r5, pc}
  _mscd_itf.sense_key           = sense_key;
 800ee0e:	f643 2102 	movw	r1, #14850	; 0x3a02
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800ee12:	68a2      	ldr	r2, [r4, #8]
 800ee14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  _mscd_itf.sense_key           = sense_key;
 800ee16:	87a1      	strh	r1, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800ee18:	2100      	movs	r1, #0
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800ee1a:	1ad3      	subs	r3, r2, r3
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800ee1c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  p_csw->status       = status;
 800ee20:	2101      	movs	r1, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800ee22:	62a3      	str	r3, [r4, #40]	; 0x28
  p_csw->status       = status;
 800ee24:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800ee28:	2102      	movs	r1, #2
 800ee2a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800ee2e:	2a00      	cmp	r2, #0
 800ee30:	d0da      	beq.n	800ede8 <proc_read10_cmd.constprop.0+0x58>
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d0d8      	beq.n	800ede8 <proc_read10_cmd.constprop.0+0x58>
  return tu_bit_test(dir, 7);
 800ee36:	7b23      	ldrb	r3, [r4, #12]
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800ee38:	4628      	mov	r0, r5
    if ( is_data_in(p_cbw->dir) )
 800ee3a:	09db      	lsrs	r3, r3, #7
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800ee3c:	bf14      	ite	ne
 800ee3e:	f894 102e 	ldrbne.w	r1, [r4, #46]	; 0x2e
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800ee42:	f894 102f 	ldrbeq.w	r1, [r4, #47]	; 0x2f
}
 800ee46:	b007      	add	sp, #28
 800ee48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800ee4c:	f001 bf34 	b.w	8010cb8 <usbd_edpt_stall>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 800ee50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee54:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ee58:	07db      	lsls	r3, r3, #31
 800ee5a:	d5c5      	bpl.n	800ede8 <proc_read10_cmd.constprop.0+0x58>
 800ee5c:	be00      	bkpt	0x0000
 800ee5e:	e7c3      	b.n	800ede8 <proc_read10_cmd.constprop.0+0x58>
 800ee60:	24002ac4 	.word	0x24002ac4
 800ee64:	24000ac4 	.word	0x24000ac4

0800ee68 <proc_write10_cmd.constprop.0>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 800ee68:	b538      	push	{r3, r4, r5, lr}
{
  msc_cbw_t const * p_cbw = &p_msc->cbw;
  bool writable = true;

  if ( tud_msc_is_writable_cb )
 800ee6a:	4b23      	ldr	r3, [pc, #140]	; (800eef8 <proc_write10_cmd.constprop.0+0x90>)
static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 800ee6c:	4605      	mov	r5, r0
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 800ee6e:	4c23      	ldr	r4, [pc, #140]	; (800eefc <proc_write10_cmd.constprop.0+0x94>)
  if ( tud_msc_is_writable_cb )
 800ee70:	b123      	cbz	r3, 800ee7c <proc_write10_cmd.constprop.0+0x14>
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 800ee72:	7b60      	ldrb	r0, [r4, #13]
 800ee74:	f7f5 fa78 	bl	8004368 <tud_msc_is_writable_cb>
  }

  if ( !writable )
 800ee78:	4603      	mov	r3, r0
 800ee7a:	b1c0      	cbz	r0, 800eeae <proc_write10_cmd.constprop.0+0x46>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
    return;
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800ee7c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ee7e:	68a3      	ldr	r3, [r4, #8]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800ee80:	4a1f      	ldr	r2, [pc, #124]	; (800ef00 <proc_write10_cmd.constprop.0+0x98>)
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800ee82:	1a1b      	subs	r3, r3, r0
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800ee84:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee8e:	bf28      	it	cs
 800ee90:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	f001 fec9 	bl	8010c2c <usbd_edpt_xfer>
 800ee9a:	b100      	cbz	r0, 800ee9e <proc_write10_cmd.constprop.0+0x36>
}
 800ee9c:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800ee9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800eea2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800eea6:	07db      	lsls	r3, r3, #31
 800eea8:	d5f8      	bpl.n	800ee9c <proc_write10_cmd.constprop.0+0x34>
 800eeaa:	be00      	bkpt	0x0000
}
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800eeae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  _mscd_itf.sense_key           = sense_key;
 800eeb0:	f242 7007 	movw	r0, #9991	; 0x2707
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800eeb4:	68a1      	ldr	r1, [r4, #8]
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800eeb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800eeba:	87a0      	strh	r0, [r4, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800eebc:	1a8b      	subs	r3, r1, r2
  p_csw->status       = status;
 800eebe:	2001      	movs	r0, #1
  p_msc->stage        = MSC_STAGE_STATUS;
 800eec0:	2202      	movs	r2, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800eec2:	62a3      	str	r3, [r4, #40]	; 0x28
  p_csw->status       = status;
 800eec4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800eec8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d0e5      	beq.n	800ee9c <proc_write10_cmd.constprop.0+0x34>
 800eed0:	2900      	cmp	r1, #0
 800eed2:	d0e3      	beq.n	800ee9c <proc_write10_cmd.constprop.0+0x34>
  return tu_bit_test(dir, 7);
 800eed4:	7b23      	ldrb	r3, [r4, #12]
    if ( is_data_in(p_cbw->dir) )
 800eed6:	09db      	lsrs	r3, r3, #7
 800eed8:	d006      	beq.n	800eee8 <proc_write10_cmd.constprop.0+0x80>
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800eeda:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800eede:	4628      	mov	r0, r5
}
 800eee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800eee4:	f001 bee8 	b.w	8010cb8 <usbd_edpt_stall>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800eee8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800eeec:	4628      	mov	r0, r5
}
 800eeee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800eef2:	f001 bee1 	b.w	8010cb8 <usbd_edpt_stall>
 800eef6:	bf00      	nop
 800eef8:	08004369 	.word	0x08004369
 800eefc:	24002ac4 	.word	0x24002ac4
 800ef00:	24000ac4 	.word	0x24000ac4

0800ef04 <tud_msc_set_sense>:
{
 800ef04:	b410      	push	{r4}
  _mscd_itf.sense_key           = sense_key;
 800ef06:	4c05      	ldr	r4, [pc, #20]	; (800ef1c <tud_msc_set_sense+0x18>)
}
 800ef08:	2001      	movs	r0, #1
  _mscd_itf.sense_key           = sense_key;
 800ef0a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 800ef0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800ef12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800ef16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	24002ac4 	.word	0x24002ac4

0800ef20 <mscd_init>:
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 800ef20:	2240      	movs	r2, #64	; 0x40
 800ef22:	2100      	movs	r1, #0
 800ef24:	4801      	ldr	r0, [pc, #4]	; (800ef2c <mscd_init+0xc>)
 800ef26:	f003 b998 	b.w	801225a <memset>
 800ef2a:	bf00      	nop
 800ef2c:	24002ac4 	.word	0x24002ac4

0800ef30 <mscd_reset>:
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 800ef30:	2240      	movs	r2, #64	; 0x40
 800ef32:	2100      	movs	r1, #0
 800ef34:	4801      	ldr	r0, [pc, #4]	; (800ef3c <mscd_reset+0xc>)
 800ef36:	f003 b990 	b.w	801225a <memset>
 800ef3a:	bf00      	nop
 800ef3c:	24002ac4 	.word	0x24002ac4

0800ef40 <mscd_open>:
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 800ef40:	794b      	ldrb	r3, [r1, #5]
 800ef42:	2b08      	cmp	r3, #8
 800ef44:	d001      	beq.n	800ef4a <mscd_open+0xa>
 800ef46:	2000      	movs	r0, #0
}
 800ef48:	4770      	bx	lr
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 800ef4a:	798b      	ldrb	r3, [r1, #6]
 800ef4c:	2b06      	cmp	r3, #6
 800ef4e:	d1fa      	bne.n	800ef46 <mscd_open+0x6>
 800ef50:	79cb      	ldrb	r3, [r1, #7]
 800ef52:	2b50      	cmp	r3, #80	; 0x50
 800ef54:	d1f7      	bne.n	800ef46 <mscd_open+0x6>
  TU_ASSERT(max_len >= drv_len, 0);
 800ef56:	2a16      	cmp	r2, #22
 800ef58:	d808      	bhi.n	800ef6c <mscd_open+0x2c>
 800ef5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ef5e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ef62:	07d9      	lsls	r1, r3, #31
 800ef64:	d5ef      	bpl.n	800ef46 <mscd_open+0x6>
 800ef66:	be00      	bkpt	0x0000
 800ef68:	2000      	movs	r0, #0
 800ef6a:	4770      	bx	lr
{
 800ef6c:	b530      	push	{r4, r5, lr}
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 800ef6e:	4d1a      	ldr	r5, [pc, #104]	; (800efd8 <mscd_open+0x98>)
{
 800ef70:	b083      	sub	sp, #12
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 800ef72:	788b      	ldrb	r3, [r1, #2]
 800ef74:	4604      	mov	r4, r0
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 800ef76:	f105 022e 	add.w	r2, r5, #46	; 0x2e
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 800ef7a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ef7e:	780b      	ldrb	r3, [r1, #0]
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 800ef80:	9201      	str	r2, [sp, #4]
 800ef82:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 800ef86:	4419      	add	r1, r3
 800ef88:	2302      	movs	r3, #2
 800ef8a:	9200      	str	r2, [sp, #0]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	f001 fdb7 	bl	8010b00 <usbd_open_edpt_pair>
 800ef92:	b940      	cbnz	r0, 800efa6 <mscd_open+0x66>
 800ef94:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800ef98:	f8d2 2df0 	ldr.w	r2, [r2, #3568]	; 0xdf0
 800ef9c:	07d2      	lsls	r2, r2, #31
 800ef9e:	d50f      	bpl.n	800efc0 <mscd_open+0x80>
 800efa0:	be00      	bkpt	0x0000
}
 800efa2:	b003      	add	sp, #12
 800efa4:	bd30      	pop	{r4, r5, pc}
  p_msc->stage = MSC_STAGE_CMD;
 800efa6:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800efa8:	231f      	movs	r3, #31
 800efaa:	462a      	mov	r2, r5
 800efac:	4620      	mov	r0, r4
  p_msc->stage = MSC_STAGE_CMD;
 800efae:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800efb2:	f895 102f 	ldrb.w	r1, [r5, #47]	; 0x2f
 800efb6:	f001 fe39 	bl	8010c2c <usbd_edpt_xfer>
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 800efba:	b120      	cbz	r0, 800efc6 <mscd_open+0x86>
  return drv_len;
 800efbc:	2017      	movs	r0, #23
 800efbe:	e7f0      	b.n	800efa2 <mscd_open+0x62>
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 800efc0:	2000      	movs	r0, #0
}
 800efc2:	b003      	add	sp, #12
 800efc4:	bd30      	pop	{r4, r5, pc}
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 800efc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800efca:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800efce:	07db      	lsls	r3, r3, #31
 800efd0:	d5f4      	bpl.n	800efbc <mscd_open+0x7c>
 800efd2:	be00      	bkpt	0x0000
 800efd4:	2017      	movs	r0, #23
 800efd6:	e7e4      	b.n	800efa2 <mscd_open+0x62>
 800efd8:	24002ac4 	.word	0x24002ac4

0800efdc <mscd_control_xfer_cb>:
  if (stage != CONTROL_STAGE_SETUP) return true;
 800efdc:	2901      	cmp	r1, #1
 800efde:	d001      	beq.n	800efe4 <mscd_control_xfer_cb+0x8>
 800efe0:	2001      	movs	r0, #1
}
 800efe2:	4770      	bx	lr
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800efe4:	7813      	ldrb	r3, [r2, #0]
{
 800efe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efe8:	4614      	mov	r4, r2
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800efea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
{
 800efee:	b083      	sub	sp, #12
 800eff0:	4606      	mov	r6, r0
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800eff2:	2a02      	cmp	r2, #2
 800eff4:	d02b      	beq.n	800f04e <mscd_control_xfer_cb+0x72>
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800eff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800effa:	2b20      	cmp	r3, #32
 800effc:	d10a      	bne.n	800f014 <mscd_control_xfer_cb+0x38>
  switch ( request->bRequest )
 800effe:	7863      	ldrb	r3, [r4, #1]
 800f000:	2bfe      	cmp	r3, #254	; 0xfe
 800f002:	d00a      	beq.n	800f01a <mscd_control_xfer_cb+0x3e>
 800f004:	2bff      	cmp	r3, #255	; 0xff
 800f006:	d105      	bne.n	800f014 <mscd_control_xfer_cb+0x38>
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 800f008:	8863      	ldrh	r3, [r4, #2]
 800f00a:	b91b      	cbnz	r3, 800f014 <mscd_control_xfer_cb+0x38>
 800f00c:	88e5      	ldrh	r5, [r4, #6]
 800f00e:	b2ab      	uxth	r3, r5
 800f010:	2b00      	cmp	r3, #0
 800f012:	d035      	beq.n	800f080 <mscd_control_xfer_cb+0xa4>
  switch ( request->bRequest )
 800f014:	2000      	movs	r0, #0
}
 800f016:	b003      	add	sp, #12
 800f018:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 800f01a:	8863      	ldrh	r3, [r4, #2]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1f9      	bne.n	800f014 <mscd_control_xfer_cb+0x38>
 800f020:	88e2      	ldrh	r2, [r4, #6]
 800f022:	2a01      	cmp	r2, #1
 800f024:	d1f6      	bne.n	800f014 <mscd_control_xfer_cb+0x38>
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 800f026:	4d38      	ldr	r5, [pc, #224]	; (800f108 <mscd_control_xfer_cb+0x12c>)
      uint8_t maxlun = 1;
 800f028:	f88d 2007 	strb.w	r2, [sp, #7]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 800f02c:	b12d      	cbz	r5, 800f03a <mscd_control_xfer_cb+0x5e>
 800f02e:	f3af 8000 	nop.w
      TU_VERIFY(maxlun);
 800f032:	2800      	cmp	r0, #0
 800f034:	d0ee      	beq.n	800f014 <mscd_control_xfer_cb+0x38>
      maxlun--;
 800f036:	1e43      	subs	r3, r0, #1
 800f038:	b2dd      	uxtb	r5, r3
      tud_control_xfer(rhport, request, &maxlun, 1);
 800f03a:	2301      	movs	r3, #1
 800f03c:	f10d 0207 	add.w	r2, sp, #7
 800f040:	4621      	mov	r1, r4
 800f042:	4630      	mov	r0, r6
      maxlun--;
 800f044:	f88d 5007 	strb.w	r5, [sp, #7]
      tud_control_xfer(rhport, request, &maxlun, 1);
 800f048:	f001 fe7c 	bl	8010d44 <tud_control_xfer>
 800f04c:	e015      	b.n	800f07a <mscd_control_xfer_cb+0x9e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 800f04e:	7865      	ldrb	r5, [r4, #1]
 800f050:	2d01      	cmp	r5, #1
 800f052:	d1d0      	bne.n	800eff6 <mscd_control_xfer_cb+0x1a>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 800f054:	8863      	ldrh	r3, [r4, #2]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1dc      	bne.n	800f014 <mscd_control_xfer_cb+0x38>
    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 800f05a:	4f2c      	ldr	r7, [pc, #176]	; (800f10c <mscd_control_xfer_cb+0x130>)
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 800f05c:	88a3      	ldrh	r3, [r4, #4]
    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 800f05e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800f062:	b2db      	uxtb	r3, r3
 800f064:	2a04      	cmp	r2, #4
 800f066:	d049      	beq.n	800f0fc <mscd_control_xfer_cb+0x120>
      if ( ep_addr == p_msc->ep_in )
 800f068:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800f06c:	4299      	cmp	r1, r3
 800f06e:	d015      	beq.n	800f09c <mscd_control_xfer_cb+0xc0>
      else if ( ep_addr == p_msc->ep_out )
 800f070:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
        if ( p_msc->stage == MSC_STAGE_CMD )
 800f074:	b90a      	cbnz	r2, 800f07a <mscd_control_xfer_cb+0x9e>
 800f076:	429c      	cmp	r4, r3
 800f078:	d028      	beq.n	800f0cc <mscd_control_xfer_cb+0xf0>
  return true;
 800f07a:	2001      	movs	r0, #1
}
 800f07c:	b003      	add	sp, #12
 800f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  p_msc->stage       = MSC_STAGE_CMD;
 800f080:	4a22      	ldr	r2, [pc, #136]	; (800f10c <mscd_control_xfer_cb+0x130>)
      tud_control_status(rhport, request);
 800f082:	4621      	mov	r1, r4
 800f084:	4630      	mov	r0, r6
  p_msc->sense_key           = 0;
 800f086:	8795      	strh	r5, [r2, #60]	; 0x3c
  p_msc->stage       = MSC_STAGE_CMD;
 800f088:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  p_msc->add_sense_qualifier = 0;
 800f08c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  p_msc->xferred_len = 0;
 800f090:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
      tud_control_status(rhport, request);
 800f094:	f001 fe3e 	bl	8010d14 <tud_control_status>
  return true;
 800f098:	2001      	movs	r0, #1
    break;
 800f09a:	e7bc      	b.n	800f016 <mscd_control_xfer_cb+0x3a>
        if ( p_msc->stage == MSC_STAGE_STATUS )
 800f09c:	2a02      	cmp	r2, #2
 800f09e:	d1ec      	bne.n	800f07a <mscd_control_xfer_cb+0x9e>
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	1a9b      	subs	r3, r3, r2
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800f0a6:	2203      	movs	r2, #3
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f0a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800f0aa:	230d      	movs	r3, #13
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800f0ac:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800f0b0:	f107 0220 	add.w	r2, r7, #32
 800f0b4:	f001 fdba 	bl	8010c2c <usbd_edpt_xfer>
          TU_ASSERT( send_csw(rhport, p_msc) );
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d1de      	bne.n	800f07a <mscd_control_xfer_cb+0x9e>
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 800f0bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f0c0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f0c4:	07db      	lsls	r3, r3, #31
 800f0c6:	d5a5      	bpl.n	800f014 <mscd_control_xfer_cb+0x38>
 800f0c8:	be00      	bkpt	0x0000
 800f0ca:	e7a4      	b.n	800f016 <mscd_control_xfer_cb+0x3a>

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	f001 fde5 	bl	8010c9c <usbd_edpt_busy>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d1d1      	bne.n	800f07a <mscd_control_xfer_cb+0x9e>
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f001 fe0d 	bl	8010cf8 <usbd_edpt_stalled>
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	d1cb      	bne.n	800f07a <mscd_control_xfer_cb+0x9e>
  p_msc->stage = MSC_STAGE_CMD;
 800f0e2:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800f0e4:	231f      	movs	r3, #31
 800f0e6:	4a09      	ldr	r2, [pc, #36]	; (800f10c <mscd_control_xfer_cb+0x130>)
 800f0e8:	4630      	mov	r0, r6
  p_msc->stage = MSC_STAGE_CMD;
 800f0ea:	f887 1030 	strb.w	r1, [r7, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800f0ee:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800f0f2:	f001 fd9b 	bl	8010c2c <usbd_edpt_xfer>
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	d1bf      	bne.n	800f07a <mscd_control_xfer_cb+0x9e>
 800f0fa:	e7df      	b.n	800f0bc <mscd_control_xfer_cb+0xe0>
      usbd_edpt_stall(rhport, ep_addr);
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	f001 fddb 	bl	8010cb8 <usbd_edpt_stall>
    return true;
 800f102:	4628      	mov	r0, r5
 800f104:	e787      	b.n	800f016 <mscd_control_xfer_cb+0x3a>
 800f106:	bf00      	nop
 800f108:	00000000 	.word	0x00000000
 800f10c:	24002ac4 	.word	0x24002ac4

0800f110 <mscd_xfer_cb>:
{
 800f110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (p_msc->stage)
 800f114:	4c96      	ldr	r4, [pc, #600]	; (800f370 <mscd_xfer_cb+0x260>)
{
 800f116:	b08e      	sub	sp, #56	; 0x38
 800f118:	4606      	mov	r6, r0
 800f11a:	461f      	mov	r7, r3
  switch (p_msc->stage)
 800f11c:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f120:	2d01      	cmp	r5, #1
 800f122:	d069      	beq.n	800f1f8 <mscd_xfer_cb+0xe8>
 800f124:	2d03      	cmp	r5, #3
 800f126:	d03e      	beq.n	800f1a6 <mscd_xfer_cb+0x96>
 800f128:	b135      	cbz	r5, 800f138 <mscd_xfer_cb+0x28>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f12a:	2d02      	cmp	r5, #2
 800f12c:	f000 8086 	beq.w	800f23c <mscd_xfer_cb+0x12c>
  return true;
 800f130:	2001      	movs	r0, #1
}
 800f132:	b00e      	add	sp, #56	; 0x38
 800f134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(ep_addr != p_msc->ep_out) return true;
 800f138:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f13c:	428b      	cmp	r3, r1
 800f13e:	d1f7      	bne.n	800f130 <mscd_xfer_cb+0x20>
      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 800f140:	2f1f      	cmp	r7, #31
 800f142:	f040 809a 	bne.w	800f27a <mscd_xfer_cb+0x16a>
 800f146:	4b8b      	ldr	r3, [pc, #556]	; (800f374 <mscd_xfer_cb+0x264>)
 800f148:	6822      	ldr	r2, [r4, #0]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	f040 8095 	bne.w	800f27a <mscd_xfer_cb+0x16a>
      p_csw->signature    = MSC_CSW_SIGNATURE;
 800f150:	4b89      	ldr	r3, [pc, #548]	; (800f378 <mscd_xfer_cb+0x268>)
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800f152:	7be2      	ldrb	r2, [r4, #15]
      p_csw->signature    = MSC_CSW_SIGNATURE;
 800f154:	6223      	str	r3, [r4, #32]
      p_csw->tag          = p_cbw->tag;
 800f156:	6863      	ldr	r3, [r4, #4]
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800f158:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
      p_csw->data_residue = 0;
 800f15c:	62a5      	str	r5, [r4, #40]	; 0x28
      p_csw->tag          = p_cbw->tag;
 800f15e:	6263      	str	r3, [r4, #36]	; 0x24
      p_msc->stage = MSC_STAGE_DATA;
 800f160:	2301      	movs	r3, #1
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800f162:	2828      	cmp	r0, #40	; 0x28
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 800f164:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
      p_msc->stage = MSC_STAGE_DATA;
 800f168:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 800f16c:	68a3      	ldr	r3, [r4, #8]
      p_msc->xferred_len = 0;
 800f16e:	63a5      	str	r5, [r4, #56]	; 0x38
      p_msc->total_len = p_cbw->total_bytes;
 800f170:	6363      	str	r3, [r4, #52]	; 0x34
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 800f172:	f040 8091 	bne.w	800f298 <mscd_xfer_cb+0x188>
  return tu_ntohs(block_count);
 800f176:	8ae0      	ldrh	r0, [r4, #22]
 800f178:	ba40      	rev16	r0, r0
 800f17a:	b280      	uxth	r0, r0
  if ( cbw->total_bytes == 0 )
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f040 828c 	bne.w	800f69a <mscd_xfer_cb+0x58a>
    if ( block_count )
 800f182:	2800      	cmp	r0, #0
 800f184:	d057      	beq.n	800f236 <mscd_xfer_cb+0x126>
  p_csw->status       = status;
 800f186:	2302      	movs	r3, #2
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f188:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f18c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f190:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f194:	2a00      	cmp	r2, #0
 800f196:	d151      	bne.n	800f23c <mscd_xfer_cb+0x12c>
  _mscd_itf.sense_key           = sense_key;
 800f198:	f242 0205 	movw	r2, #8197	; 0x2005
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f19c:	2300      	movs	r3, #0
  _mscd_itf.sense_key           = sense_key;
 800f19e:	87a2      	strh	r2, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f1a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f1a4:	e04a      	b.n	800f23c <mscd_xfer_cb+0x12c>
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 800f1a6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800f1aa:	428b      	cmp	r3, r1
 800f1ac:	d1c0      	bne.n	800f130 <mscd_xfer_cb+0x20>
 800f1ae:	2f0d      	cmp	r7, #13
 800f1b0:	d1be      	bne.n	800f130 <mscd_xfer_cb+0x20>
        switch(p_cbw->command[0])
 800f1b2:	7be3      	ldrb	r3, [r4, #15]
 800f1b4:	2b28      	cmp	r3, #40	; 0x28
 800f1b6:	f000 82ac 	beq.w	800f712 <mscd_xfer_cb+0x602>
 800f1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f1bc:	f000 82a1 	beq.w	800f702 <mscd_xfer_cb+0x5f2>
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 800f1c0:	4b6e      	ldr	r3, [pc, #440]	; (800f37c <mscd_xfer_cb+0x26c>)
 800f1c2:	b123      	cbz	r3, 800f1ce <mscd_xfer_cb+0xbe>
 800f1c4:	f104 010f 	add.w	r1, r4, #15
 800f1c8:	7b60      	ldrb	r0, [r4, #13]
 800f1ca:	f3af 8000 	nop.w
  p_msc->stage = MSC_STAGE_CMD;
 800f1ce:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800f1d0:	231f      	movs	r3, #31
 800f1d2:	4a67      	ldr	r2, [pc, #412]	; (800f370 <mscd_xfer_cb+0x260>)
 800f1d4:	4630      	mov	r0, r6
  p_msc->stage = MSC_STAGE_CMD;
 800f1d6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800f1da:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f1de:	f001 fd25 	bl	8010c2c <usbd_edpt_xfer>
        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	d173      	bne.n	800f2ce <mscd_xfer_cb+0x1be>
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 800f1e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f1ea:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f1ee:	07da      	lsls	r2, r3, #31
 800f1f0:	f100 80bc 	bmi.w	800f36c <mscd_xfer_cb+0x25c>
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	e79c      	b.n	800f132 <mscd_xfer_cb+0x22>
      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800f1f8:	7be3      	ldrb	r3, [r4, #15]
 800f1fa:	2b28      	cmp	r3, #40	; 0x28
 800f1fc:	d014      	beq.n	800f228 <mscd_xfer_cb+0x118>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 800f1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800f200:	d07a      	beq.n	800f2f8 <mscd_xfer_cb+0x1e8>
        p_msc->xferred_len += xferred_bytes;
 800f202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  return tu_bit_test(dir, 7);
 800f204:	7b22      	ldrb	r2, [r4, #12]
        p_msc->xferred_len += xferred_bytes;
 800f206:	443b      	add	r3, r7
        if ( !is_data_in(p_cbw->dir) )
 800f208:	09d2      	lsrs	r2, r2, #7
        p_msc->xferred_len += xferred_bytes;
 800f20a:	63a3      	str	r3, [r4, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 800f20c:	d068      	beq.n	800f2e0 <mscd_xfer_cb+0x1d0>
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f20e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f210:	429a      	cmp	r2, r3
 800f212:	d910      	bls.n	800f236 <mscd_xfer_cb+0x126>
          TU_BREAKPOINT();
 800f214:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f218:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f21c:	07db      	lsls	r3, r3, #31
 800f21e:	d556      	bpl.n	800f2ce <mscd_xfer_cb+0x1be>
 800f220:	be00      	bkpt	0x0000
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f222:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f226:	e780      	b.n	800f12a <mscd_xfer_cb+0x1a>
        p_msc->xferred_len += xferred_bytes;
 800f228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f22a:	6b62      	ldr	r2, [r4, #52]	; 0x34
        p_msc->xferred_len += xferred_bytes;
 800f22c:	443b      	add	r3, r7
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f22e:	4293      	cmp	r3, r2
        p_msc->xferred_len += xferred_bytes;
 800f230:	63a3      	str	r3, [r4, #56]	; 0x38
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f232:	f0c0 8096 	bcc.w	800f362 <mscd_xfer_cb+0x252>
          p_msc->stage = MSC_STAGE_STATUS;
 800f236:	2302      	movs	r3, #2
 800f238:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 800f23c:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f240:	4630      	mov	r0, r6
 800f242:	f001 fd59 	bl	8010cf8 <usbd_edpt_stalled>
 800f246:	2800      	cmp	r0, #0
 800f248:	f47f af72 	bne.w	800f130 <mscd_xfer_cb+0x20>
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 800f24c:	68a3      	ldr	r3, [r4, #8]
 800f24e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f250:	4293      	cmp	r3, r2
 800f252:	d902      	bls.n	800f25a <mscd_xfer_cb+0x14a>
  return tu_bit_test(dir, 7);
 800f254:	7b21      	ldrb	r1, [r4, #12]
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 800f256:	09c9      	lsrs	r1, r1, #7
 800f258:	d13c      	bne.n	800f2d4 <mscd_xfer_cb+0x1c4>
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f25a:	1a9a      	subs	r2, r3, r2
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800f25c:	2103      	movs	r1, #3
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800f25e:	230d      	movs	r3, #13
 800f260:	4630      	mov	r0, r6
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f262:	62a2      	str	r2, [r4, #40]	; 0x28
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 800f264:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 800f268:	4a45      	ldr	r2, [pc, #276]	; (800f380 <mscd_xfer_cb+0x270>)
 800f26a:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f26e:	f001 fcdd 	bl	8010c2c <usbd_edpt_xfer>
        TU_ASSERT( send_csw(rhport, p_msc) );
 800f272:	2800      	cmp	r0, #0
 800f274:	f47f af5c 	bne.w	800f130 <mscd_xfer_cb+0x20>
 800f278:	e7b5      	b.n	800f1e6 <mscd_xfer_cb+0xd6>
        p_msc->stage = MSC_STAGE_NEED_RESET;
 800f27a:	2304      	movs	r3, #4
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800f27c:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f280:	4630      	mov	r0, r6
        p_msc->stage = MSC_STAGE_NEED_RESET;
 800f282:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800f286:	f001 fd17 	bl	8010cb8 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 800f28a:	4630      	mov	r0, r6
 800f28c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f290:	f001 fd12 	bl	8010cb8 <usbd_edpt_stall>
        return false;
 800f294:	2000      	movs	r0, #0
 800f296:	e74c      	b.n	800f132 <mscd_xfer_cb+0x22>
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d075      	beq.n	800f388 <mscd_xfer_cb+0x278>
  return tu_bit_test(dir, 7);
 800f29c:	7b20      	ldrb	r0, [r4, #12]
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 800f29e:	09c0      	lsrs	r0, r0, #7
 800f2a0:	d172      	bne.n	800f388 <mscd_xfer_cb+0x278>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 800f2a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2a6:	f240 827e 	bls.w	800f7a6 <mscd_xfer_cb+0x696>
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f2aa:	62a3      	str	r3, [r4, #40]	; 0x28
  p_msc->stage        = MSC_STAGE_STATUS;
 800f2ac:	2302      	movs	r3, #2
  p_csw->status       = status;
 800f2ae:	2201      	movs	r2, #1
  p_msc->stage        = MSC_STAGE_STATUS;
 800f2b0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f2b4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f2b8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f2bc:	b923      	cbnz	r3, 800f2c8 <mscd_xfer_cb+0x1b8>
  _mscd_itf.sense_key           = sense_key;
 800f2be:	f242 0205 	movw	r2, #8197	; 0x2005
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f2c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f2c6:	87a2      	strh	r2, [r4, #60]	; 0x3c
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f001 fcf5 	bl	8010cb8 <usbd_edpt_stall>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f2ce:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f2d2:	e72a      	b.n	800f12a <mscd_xfer_cb+0x1a>
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800f2d4:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f2d8:	4630      	mov	r0, r6
 800f2da:	f001 fced 	bl	8010cb8 <usbd_edpt_stall>
 800f2de:	e727      	b.n	800f130 <mscd_xfer_cb+0x20>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800f2e0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f2e2:	f104 010f 	add.w	r1, r4, #15
 800f2e6:	4a27      	ldr	r2, [pc, #156]	; (800f384 <mscd_xfer_cb+0x274>)
 800f2e8:	7b60      	ldrb	r0, [r4, #13]
 800f2ea:	f7f5 f82f 	bl	800434c <tud_msc_scsi_cb>
          if ( cb_result < 0 )
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f2c0 81b1 	blt.w	800f656 <mscd_xfer_cb+0x546>
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f2f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f2f6:	e78a      	b.n	800f20e <mscd_xfer_cb+0xfe>
  return tu_ntohs(block_count);
 800f2f8:	8ae2      	ldrh	r2, [r4, #22]
 800f2fa:	ba52      	rev16	r2, r2
 800f2fc:	b292      	uxth	r2, r2
  if (block_count == 0) return 0;
 800f2fe:	b11a      	cbz	r2, 800f308 <mscd_xfer_cb+0x1f8>
  return (uint16_t) (cbw->total_bytes / block_count);
 800f300:	68a3      	ldr	r3, [r4, #8]
 800f302:	fbb3 f3f2 	udiv	r3, r3, r2
 800f306:	b29a      	uxth	r2, r3

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800f308:	6ba3      	ldr	r3, [r4, #56]	; 0x38
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800f30a:	f8d4 1011 	ldr.w	r1, [r4, #17]

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 800f30e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800f384 <mscd_xfer_cb+0x274>
  return tu_ntohl(lba);
 800f312:	ba09      	rev	r1, r1
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 800f314:	7b60      	ldrb	r0, [r4, #13]
 800f316:	9700      	str	r7, [sp, #0]
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800f318:	fbb3 f5f2 	udiv	r5, r3, r2
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 800f31c:	fb02 3215 	mls	r2, r2, r5, r3
 800f320:	4429      	add	r1, r5
 800f322:	4643      	mov	r3, r8
 800f324:	f7f4 ffd2 	bl	80042cc <tud_msc_write10_cb>

  if ( nbytes < 0 )
 800f328:	2800      	cmp	r0, #0
 800f32a:	f2c0 81fa 	blt.w	800f722 <mscd_xfer_cb+0x612>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
  }else
  {
    // Application consume less than what we got (including zero)
    if ( (uint32_t) nbytes < xferred_bytes )
 800f32e:	4287      	cmp	r7, r0
 800f330:	f240 8186 	bls.w	800f640 <mscd_xfer_cb+0x530>
    {
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 800f334:	1a3f      	subs	r7, r7, r0
      if ( nbytes > 0 )
 800f336:	2800      	cmp	r0, #0
 800f338:	f040 821d 	bne.w	800f776 <mscd_xfer_cb+0x666>
        p_msc->xferred_len += (uint16_t) nbytes;
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
      }

      // simulate an transfer complete with adjusted parameters --> callback will be invoked with adjusted parameter
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 800f33c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800f340:	2100      	movs	r1, #0
  dcd_event_handler(&event, in_isr);
 800f342:	a805      	add	r0, sp, #20
  event.xfer_complete.len     = xferred_bytes;
 800f344:	9707      	str	r7, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800f346:	e9cd 1105 	strd	r1, r1, [sp, #20]
  event.xfer_complete.ep_addr = ep_addr;
 800f34a:	f88d 3018 	strb.w	r3, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800f34e:	2307      	movs	r3, #7
 800f350:	f88d 6014 	strb.w	r6, [sp, #20]
 800f354:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 800f358:	f001 faf2 	bl	8010940 <dcd_event_handler>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f35c:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
}
 800f360:	e6e3      	b.n	800f12a <mscd_xfer_cb+0x1a>
          proc_read10_cmd(rhport, p_msc);
 800f362:	f7ff fd15 	bl	800ed90 <proc_read10_cmd.constprop.0>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f366:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f36a:	e6de      	b.n	800f12a <mscd_xfer_cb+0x1a>
        TU_ASSERT( send_csw(rhport, p_msc) );
 800f36c:	be00      	bkpt	0x0000
 800f36e:	e6e0      	b.n	800f132 <mscd_xfer_cb+0x22>
 800f370:	24002ac4 	.word	0x24002ac4
 800f374:	43425355 	.word	0x43425355
 800f378:	53425355 	.word	0x53425355
 800f37c:	00000000 	.word	0x00000000
 800f380:	24002ae4 	.word	0x24002ae4
 800f384:	24000ac4 	.word	0x24000ac4
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 800f388:	f894 c00d 	ldrb.w	ip, [r4, #13]
  switch ( scsi_cmd[0] )
 800f38c:	2a25      	cmp	r2, #37	; 0x25
 800f38e:	d827      	bhi.n	800f3e0 <mscd_xfer_cb+0x2d0>
 800f390:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f394:	00260150 	.word	0x00260150
 800f398:	01140026 	.word	0x01140026
 800f39c:	00260026 	.word	0x00260026
 800f3a0:	00260026 	.word	0x00260026
 800f3a4:	00260026 	.word	0x00260026
 800f3a8:	00260026 	.word	0x00260026
 800f3ac:	00260026 	.word	0x00260026
 800f3b0:	00260026 	.word	0x00260026
 800f3b4:	00260026 	.word	0x00260026
 800f3b8:	002600b2 	.word	0x002600b2
 800f3bc:	00260026 	.word	0x00260026
 800f3c0:	00260026 	.word	0x00260026
 800f3c4:	00260026 	.word	0x00260026
 800f3c8:	00f80081 	.word	0x00f80081
 800f3cc:	00260026 	.word	0x00260026
 800f3d0:	00260026 	.word	0x00260026
 800f3d4:	00260026 	.word	0x00260026
 800f3d8:	00d30026 	.word	0x00d30026
 800f3dc:	00580026 	.word	0x00580026
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800f3e0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800f3e4:	2a00      	cmp	r2, #0
 800f3e6:	d141      	bne.n	800f46c <mscd_xfer_cb+0x35c>
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	4ab5      	ldr	r2, [pc, #724]	; (800f6c0 <mscd_xfer_cb+0x5b0>)
 800f3ec:	4660      	mov	r0, ip
 800f3ee:	49b5      	ldr	r1, [pc, #724]	; (800f6c4 <mscd_xfer_cb+0x5b4>)
 800f3f0:	f7f4 ffac 	bl	800434c <tud_msc_scsi_cb>
          if ( resplen < 0 )
 800f3f4:	1e05      	subs	r5, r0, #0
 800f3f6:	db39      	blt.n	800f46c <mscd_xfer_cb+0x35c>
          else if (resplen == 0)
 800f3f8:	2d00      	cmp	r5, #0
 800f3fa:	d165      	bne.n	800f4c8 <mscd_xfer_cb+0x3b8>
            if (p_cbw->total_bytes)
 800f3fc:	68a3      	ldr	r3, [r4, #8]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f43f af19 	beq.w	800f236 <mscd_xfer_cb+0x126>
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f404:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  p_csw->status       = status;
 800f406:	2101      	movs	r1, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f408:	1a9b      	subs	r3, r3, r2
  p_msc->stage        = MSC_STAGE_STATUS;
 800f40a:	2202      	movs	r2, #2
  p_csw->status       = status;
 800f40c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f410:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f414:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f418:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f41a:	b922      	cbnz	r2, 800f426 <mscd_xfer_cb+0x316>
  _mscd_itf.sense_key           = sense_key;
 800f41c:	f242 0105 	movw	r1, #8197	; 0x2005
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f420:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f424:	87a1      	strh	r1, [r4, #60]	; 0x3c
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800f426:	2b00      	cmp	r3, #0
 800f428:	f43f af08 	beq.w	800f23c <mscd_xfer_cb+0x12c>
  return tu_bit_test(dir, 7);
 800f42c:	7b23      	ldrb	r3, [r4, #12]
    if ( is_data_in(p_cbw->dir) )
 800f42e:	09db      	lsrs	r3, r3, #7
 800f430:	f040 8164 	bne.w	800f6fc <mscd_xfer_cb+0x5ec>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800f434:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f438:	4630      	mov	r0, r6
 800f43a:	f001 fc3d 	bl	8010cb8 <usbd_edpt_stall>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f43e:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f442:	e672      	b.n	800f12a <mscd_xfer_cb+0x1a>
      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 800f444:	aa04      	add	r2, sp, #16
 800f446:	a905      	add	r1, sp, #20
 800f448:	4660      	mov	r0, ip
 800f44a:	f7f4 ff75 	bl	8004338 <tud_msc_capacity_cb>
      if (block_count == 0 || block_size == 0)
 800f44e:	9b05      	ldr	r3, [sp, #20]
      block_size = (uint32_t) block_size_u16;
 800f450:	f8bd 2010 	ldrh.w	r2, [sp, #16]
      if (block_count == 0 || block_size == 0)
 800f454:	b113      	cbz	r3, 800f45c <mscd_xfer_cb+0x34c>
 800f456:	2a00      	cmp	r2, #0
 800f458:	f040 81cd 	bne.w	800f7f6 <mscd_xfer_cb+0x6e6>
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800f45c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f460:	b923      	cbnz	r3, 800f46c <mscd_xfer_cb+0x35c>
  _mscd_itf.sense_key           = sense_key;
 800f462:	f643 2202 	movw	r2, #14850	; 0x3a02
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f466:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f46a:	87a2      	strh	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f46c:	2101      	movs	r1, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f46e:	68a2      	ldr	r2, [r4, #8]
 800f470:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  p_csw->status       = status;
 800f472:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f476:	2102      	movs	r1, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f478:	1ad3      	subs	r3, r2, r3
  p_msc->stage        = MSC_STAGE_STATUS;
 800f47a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f47e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f482:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f484:	b921      	cbnz	r1, 800f490 <mscd_xfer_cb+0x380>
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f486:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f48a:	f242 0105 	movw	r1, #8197	; 0x2005
 800f48e:	87a1      	strh	r1, [r4, #60]	; 0x3c
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800f490:	2a00      	cmp	r2, #0
 800f492:	d1c8      	bne.n	800f426 <mscd_xfer_cb+0x316>
 800f494:	e6d2      	b.n	800f23c <mscd_xfer_cb+0x12c>
      scsi_mode_sense6_resp_t mode_resp =
 800f496:	9b05      	ldr	r3, [sp, #20]
      if ( tud_msc_is_writable_cb )
 800f498:	4a8b      	ldr	r2, [pc, #556]	; (800f6c8 <mscd_xfer_cb+0x5b8>)
      scsi_mode_sense6_resp_t mode_resp =
 800f49a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f49e:	f043 0303 	orr.w	r3, r3, #3
 800f4a2:	9305      	str	r3, [sp, #20]
      if ( tud_msc_is_writable_cb )
 800f4a4:	2a00      	cmp	r2, #0
 800f4a6:	f000 81a4 	beq.w	800f7f2 <mscd_xfer_cb+0x6e2>
        writable = tud_msc_is_writable_cb(lun);
 800f4aa:	4660      	mov	r0, ip
 800f4ac:	f7f4 ff5c 	bl	8004368 <tud_msc_is_writable_cb>
      mode_resp.write_protected = !writable;
 800f4b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f4b4:	f080 0001 	eor.w	r0, r0, #1
  memcpy(dest, src, count);
 800f4b8:	4a81      	ldr	r2, [pc, #516]	; (800f6c0 <mscd_xfer_cb+0x5b0>)
      resplen = sizeof(mode_resp);
 800f4ba:	2504      	movs	r5, #4
      mode_resp.write_protected = !writable;
 800f4bc:	f360 13c7 	bfi	r3, r0, #7, #1
 800f4c0:	f88d 3016 	strb.w	r3, [sp, #22]
 800f4c4:	9b05      	ldr	r3, [sp, #20]
 800f4c6:	6013      	str	r3, [r2, #0]
            if ( p_cbw->total_bytes == 0 )
 800f4c8:	68a3      	ldr	r3, [r4, #8]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f040 8174 	bne.w	800f7b8 <mscd_xfer_cb+0x6a8>
  p_msc->stage        = MSC_STAGE_STATUS;
 800f4d0:	2202      	movs	r2, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f4d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  p_csw->status       = status;
 800f4d4:	2101      	movs	r1, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f4d6:	425b      	negs	r3, r3
  p_msc->stage        = MSC_STAGE_STATUS;
 800f4d8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f4dc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f4e0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f4e4:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	f47f aea8 	bne.w	800f23c <mscd_xfer_cb+0x12c>
  _mscd_itf.sense_key           = sense_key;
 800f4ec:	f242 0305 	movw	r3, #8197	; 0x2005
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f4f0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f4f4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  return true;
 800f4f6:	e6a1      	b.n	800f23c <mscd_xfer_cb+0x12c>
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 800f4f8:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
      scsi_inquiry_resp_t inquiry_rsp =
 800f4fc:	4a73      	ldr	r2, [pc, #460]	; (800f6cc <mscd_xfer_cb+0x5bc>)
 800f4fe:	251f      	movs	r5, #31
 800f500:	af05      	add	r7, sp, #20
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 800f502:	4660      	mov	r0, ip
 800f504:	a907      	add	r1, sp, #28
      scsi_inquiry_resp_t inquiry_rsp =
 800f506:	9205      	str	r2, [sp, #20]
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 800f508:	aa09      	add	r2, sp, #36	; 0x24
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 800f50a:	9309      	str	r3, [sp, #36]	; 0x24
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 800f50c:	930d      	str	r3, [sp, #52]	; 0x34
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 800f50e:	930c      	str	r3, [sp, #48]	; 0x30
      scsi_inquiry_resp_t inquiry_rsp =
 800f510:	9506      	str	r5, [sp, #24]
      resplen = sizeof(inquiry_rsp);
 800f512:	2524      	movs	r5, #36	; 0x24
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 800f514:	e9cd 3307 	strd	r3, r3, [sp, #28]
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 800f518:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 800f51c:	ab0d      	add	r3, sp, #52	; 0x34
 800f51e:	f7f4 fee1 	bl	80042e4 <tud_msc_inquiry_cb>
 800f522:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800f6c0 <mscd_xfer_cb+0x5b0>
 800f526:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f52c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f52e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	f8cc 3000 	str.w	r3, [ip]
          if ( resplen < 0 )
 800f538:	e7c6      	b.n	800f4c8 <mscd_xfer_cb+0x3b8>
      scsi_read_format_capacity_data_t read_fmt_capa =
 800f53a:	2300      	movs	r3, #0
 800f53c:	af05      	add	r7, sp, #20
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 800f53e:	f10d 020e 	add.w	r2, sp, #14
 800f542:	4660      	mov	r0, ip
      scsi_read_format_capacity_data_t read_fmt_capa =
 800f544:	9305      	str	r3, [sp, #20]
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 800f546:	a904      	add	r1, sp, #16
      scsi_read_format_capacity_data_t read_fmt_capa =
 800f548:	e9c7 3301 	strd	r3, r3, [r7, #4]
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 800f54c:	f7f4 fef4 	bl	8004338 <tud_msc_capacity_cb>
      if (block_count == 0 || block_size == 0)
 800f550:	9a04      	ldr	r2, [sp, #16]
 800f552:	2a00      	cmp	r2, #0
 800f554:	d082      	beq.n	800f45c <mscd_xfer_cb+0x34c>
 800f556:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f43f af7e 	beq.w	800f45c <mscd_xfer_cb+0x34c>
        read_fmt_capa.block_num = tu_htonl(block_count);
 800f560:	ba12      	rev	r2, r2
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 800f562:	ba5b      	rev16	r3, r3
        resplen = sizeof(read_fmt_capa);
 800f564:	250c      	movs	r5, #12
 800f566:	9206      	str	r2, [sp, #24]
 800f568:	2202      	movs	r2, #2
 800f56a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f56e:	f88d 201c 	strb.w	r2, [sp, #28]
 800f572:	2208      	movs	r2, #8
 800f574:	4b52      	ldr	r3, [pc, #328]	; (800f6c0 <mscd_xfer_cb+0x5b0>)
 800f576:	f88d 2017 	strb.w	r2, [sp, #23]
 800f57a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f57e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          if ( resplen < 0 )
 800f582:	e7a1      	b.n	800f4c8 <mscd_xfer_cb+0x3b8>
      if (tud_msc_start_stop_cb)
 800f584:	4b52      	ldr	r3, [pc, #328]	; (800f6d0 <mscd_xfer_cb+0x5c0>)
 800f586:	2b00      	cmp	r3, #0
 800f588:	f43f af38 	beq.w	800f3fc <mscd_xfer_cb+0x2ec>
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 800f58c:	7ce1      	ldrb	r1, [r4, #19]
 800f58e:	4660      	mov	r0, ip
 800f590:	f3c1 0340 	ubfx	r3, r1, #1, #1
 800f594:	f001 0201 	and.w	r2, r1, #1
 800f598:	0909      	lsrs	r1, r1, #4
 800f59a:	f7f4 fee1 	bl	8004360 <tud_msc_start_stop_cb>
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	f47f af2c 	bne.w	800f3fc <mscd_xfer_cb+0x2ec>
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800f5a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f47f af5f 	bne.w	800f46c <mscd_xfer_cb+0x35c>
  _mscd_itf.sense_key           = sense_key;
 800f5ae:	f643 2202 	movw	r2, #14850	; 0x3a02
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f5b2:	2300      	movs	r3, #0
  _mscd_itf.sense_key           = sense_key;
 800f5b4:	87a2      	strh	r2, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f5b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800f5ba:	e757      	b.n	800f46c <mscd_xfer_cb+0x35c>
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 800f5bc:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800f5c0:	f04f 0300 	mov.w	r3, #0
      scsi_sense_fixed_resp_t sense_rsp =
 800f5c4:	f04f 0800 	mov.w	r8, #0
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 800f5c8:	f8b4 203d 	ldrh.w	r2, [r4, #61]	; 0x3d
 800f5cc:	f361 0303 	bfi	r3, r1, #0, #4
 800f5d0:	ad05      	add	r5, sp, #20
      scsi_sense_fixed_resp_t sense_rsp =
 800f5d2:	f8cd 8014 	str.w	r8, [sp, #20]
 800f5d6:	f88d 3016 	strb.w	r3, [sp, #22]
 800f5da:	23f0      	movs	r3, #240	; 0xf0
 800f5dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5e0:	f88d 3014 	strb.w	r3, [sp, #20]
 800f5e4:	230a      	movs	r3, #10
 800f5e6:	f8cd 8020 	str.w	r8, [sp, #32]
 800f5ea:	f8cd 801c 	str.w	r8, [sp, #28]
 800f5ee:	f8ad 2020 	strh.w	r2, [sp, #32]
 800f5f2:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 800f5f6:	f88d 301b 	strb.w	r3, [sp, #27]
 800f5fa:	4f31      	ldr	r7, [pc, #196]	; (800f6c0 <mscd_xfer_cb+0x5b0>)
      if (tud_msc_request_sense_cb)
 800f5fc:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 800f6d4 <mscd_xfer_cb+0x5c4>
 800f600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f602:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	803b      	strh	r3, [r7, #0]
 800f608:	f1be 0f00 	cmp.w	lr, #0
 800f60c:	f000 80eb 	beq.w	800f7e6 <mscd_xfer_cb+0x6d6>
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 800f610:	f1a7 0110 	sub.w	r1, r7, #16
 800f614:	4660      	mov	r0, ip
 800f616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f61a:	f7f4 fea3 	bl	8004364 <tud_msc_request_sense_cb>
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800f61e:	1e05      	subs	r5, r0, #0
  _mscd_itf.sense_key           = sense_key;
 800f620:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f624:	f884 803e 	strb.w	r8, [r4, #62]	; 0x3e
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800f628:	f6bf aee6 	bge.w	800f3f8 <mscd_xfer_cb+0x2e8>
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800f62c:	f894 c00d 	ldrb.w	ip, [r4, #13]
 800f630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f632:	e6d9      	b.n	800f3e8 <mscd_xfer_cb+0x2d8>
      if ( !tud_msc_test_unit_ready_cb(lun) )
 800f634:	4660      	mov	r0, ip
 800f636:	f7f4 fe7d 	bl	8004334 <tud_msc_test_unit_ready_cb>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	d0b2      	beq.n	800f5a4 <mscd_xfer_cb+0x494>
 800f63e:	e6dd      	b.n	800f3fc <mscd_xfer_cb+0x2ec>
    else
    {
      // Application consume all bytes in our buffer
      p_msc->xferred_len += xferred_bytes;

      if ( p_msc->xferred_len >= p_msc->total_len )
 800f640:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
      p_msc->xferred_len += xferred_bytes;
 800f644:	443b      	add	r3, r7
      if ( p_msc->xferred_len >= p_msc->total_len )
 800f646:	4293      	cmp	r3, r2
      p_msc->xferred_len += xferred_bytes;
 800f648:	63a3      	str	r3, [r4, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 800f64a:	f4bf adf4 	bcs.w	800f236 <mscd_xfer_cb+0x126>
        // Data Stage is complete
        p_msc->stage = MSC_STAGE_STATUS;
      }else
      {
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
 800f64e:	4630      	mov	r0, r6
 800f650:	f7ff fc0a 	bl	800ee68 <proc_write10_cmd.constprop.0>
 800f654:	e63b      	b.n	800f2ce <mscd_xfer_cb+0x1be>
  p_msc->stage        = MSC_STAGE_STATUS;
 800f656:	2202      	movs	r2, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f658:	68a1      	ldr	r1, [r4, #8]
 800f65a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  p_msc->stage        = MSC_STAGE_STATUS;
 800f65c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f660:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f664:	1aca      	subs	r2, r1, r3
  p_csw->status       = status;
 800f666:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f66a:	62a2      	str	r2, [r4, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f66c:	b920      	cbnz	r0, 800f678 <mscd_xfer_cb+0x568>
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f66e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 800f672:	f242 0005 	movw	r0, #8197	; 0x2005
 800f676:	87a0      	strh	r0, [r4, #60]	; 0x3c
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800f678:	2a00      	cmp	r2, #0
 800f67a:	f43f adc8 	beq.w	800f20e <mscd_xfer_cb+0xfe>
 800f67e:	2900      	cmp	r1, #0
 800f680:	f43f adc5 	beq.w	800f20e <mscd_xfer_cb+0xfe>
  return tu_bit_test(dir, 7);
 800f684:	7b23      	ldrb	r3, [r4, #12]
    if ( is_data_in(p_cbw->dir) )
 800f686:	09db      	lsrs	r3, r3, #7
 800f688:	f000 80a7 	beq.w	800f7da <mscd_xfer_cb+0x6ca>
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800f68c:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f690:	4630      	mov	r0, r6
 800f692:	f001 fb11 	bl	8010cb8 <usbd_edpt_stall>
        if ( p_msc->xferred_len >= p_msc->total_len )
 800f696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f698:	e5b9      	b.n	800f20e <mscd_xfer_cb+0xfe>
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800f69a:	2a28      	cmp	r2, #40	; 0x28
  return tu_bit_test(dir, 7);
 800f69c:	7b25      	ldrb	r5, [r4, #12]
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800f69e:	d075      	beq.n	800f78c <mscd_xfer_cb+0x67c>
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 800f6a0:	09ed      	lsrs	r5, r5, #7
 800f6a2:	d119      	bne.n	800f6d8 <mscd_xfer_cb+0x5c8>
    else if ( 0 == block_count )
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d05a      	beq.n	800f75e <mscd_xfer_cb+0x64e>
    else if ( cbw->total_bytes / block_count == 0 )
 800f6a8:	4283      	cmp	r3, r0
 800f6aa:	f0c0 8094 	bcc.w	800f7d6 <mscd_xfer_cb+0x6c6>
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800f6ae:	2a28      	cmp	r2, #40	; 0x28
            proc_read10_cmd(rhport, p_msc);
 800f6b0:	4630      	mov	r0, r6
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800f6b2:	f43f ae56 	beq.w	800f362 <mscd_xfer_cb+0x252>
            proc_write10_cmd(rhport, p_msc);
 800f6b6:	f7ff fbd7 	bl	800ee68 <proc_write10_cmd.constprop.0>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 800f6ba:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800f6be:	e534      	b.n	800f12a <mscd_xfer_cb+0x1a>
 800f6c0:	24000ac4 	.word	0x24000ac4
 800f6c4:	24002ad3 	.word	0x24002ad3
 800f6c8:	08004369 	.word	0x08004369
 800f6cc:	02028000 	.word	0x02028000
 800f6d0:	08004361 	.word	0x08004361
 800f6d4:	08004365 	.word	0x08004365
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f6d8:	62a3      	str	r3, [r4, #40]	; 0x28
  p_csw->status       = status;
 800f6da:	2302      	movs	r3, #2
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f6dc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f6e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f6e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f6e8:	b942      	cbnz	r2, 800f6fc <mscd_xfer_cb+0x5ec>
  _mscd_itf.sense_key           = sense_key;
 800f6ea:	f242 0305 	movw	r3, #8197	; 0x2005
 800f6ee:	87a3      	strh	r3, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if ( is_data_in(p_cbw->dir) )
 800f6f6:	2d00      	cmp	r5, #0
 800f6f8:	f43f ade6 	beq.w	800f2c8 <mscd_xfer_cb+0x1b8>
      usbd_edpt_stall(rhport, p_msc->ep_in);
 800f6fc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f700:	e5e2      	b.n	800f2c8 <mscd_xfer_cb+0x1b8>
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 800f702:	4b41      	ldr	r3, [pc, #260]	; (800f808 <mscd_xfer_cb+0x6f8>)
 800f704:	2b00      	cmp	r3, #0
 800f706:	f43f ad62 	beq.w	800f1ce <mscd_xfer_cb+0xbe>
 800f70a:	7b60      	ldrb	r0, [r4, #13]
 800f70c:	f3af 8000 	nop.w
 800f710:	e55d      	b.n	800f1ce <mscd_xfer_cb+0xbe>
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 800f712:	4b3e      	ldr	r3, [pc, #248]	; (800f80c <mscd_xfer_cb+0x6fc>)
 800f714:	2b00      	cmp	r3, #0
 800f716:	f43f ad5a 	beq.w	800f1ce <mscd_xfer_cb+0xbe>
 800f71a:	7b60      	ldrb	r0, [r4, #13]
 800f71c:	f3af 8000 	nop.w
 800f720:	e555      	b.n	800f1ce <mscd_xfer_cb+0xbe>
  _mscd_itf.sense_key           = sense_key;
 800f722:	f643 2102 	movw	r1, #14850	; 0x3a02
    p_msc->xferred_len += xferred_bytes;
 800f726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f728:	68a2      	ldr	r2, [r4, #8]
  _mscd_itf.sense_key           = sense_key;
 800f72a:	87a1      	strh	r1, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f72c:	2100      	movs	r1, #0
    p_msc->xferred_len += xferred_bytes;
 800f72e:	443b      	add	r3, r7
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f730:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  p_csw->status       = status;
 800f734:	2101      	movs	r1, #1
    p_msc->xferred_len += xferred_bytes;
 800f736:	63a3      	str	r3, [r4, #56]	; 0x38
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f738:	1ad3      	subs	r3, r2, r3
  p_csw->status       = status;
 800f73a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f73e:	2102      	movs	r1, #2
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f740:	62a3      	str	r3, [r4, #40]	; 0x28
  p_msc->stage        = MSC_STAGE_STATUS;
 800f742:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800f746:	2b00      	cmp	r3, #0
 800f748:	f43f ad78 	beq.w	800f23c <mscd_xfer_cb+0x12c>
 800f74c:	2a00      	cmp	r2, #0
 800f74e:	f43f ad75 	beq.w	800f23c <mscd_xfer_cb+0x12c>
  return tu_bit_test(dir, 7);
 800f752:	7b23      	ldrb	r3, [r4, #12]
    if ( is_data_in(p_cbw->dir) )
 800f754:	09db      	lsrs	r3, r3, #7
 800f756:	d1d1      	bne.n	800f6fc <mscd_xfer_cb+0x5ec>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800f758:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f75c:	e5b4      	b.n	800f2c8 <mscd_xfer_cb+0x1b8>
      status =  MSC_CSW_STATUS_FAILED;
 800f75e:	2201      	movs	r2, #1
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f760:	62a3      	str	r3, [r4, #40]	; 0x28
  p_msc->stage        = MSC_STAGE_STATUS;
 800f762:	2302      	movs	r3, #2
  p_csw->status       = status;
 800f764:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f768:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f76c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1c0      	bne.n	800f6f6 <mscd_xfer_cb+0x5e6>
 800f774:	e7b9      	b.n	800f6ea <mscd_xfer_cb+0x5da>
        p_msc->xferred_len += (uint16_t) nbytes;
 800f776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 800f778:	eb08 0100 	add.w	r1, r8, r0
 800f77c:	463a      	mov	r2, r7
        p_msc->xferred_len += (uint16_t) nbytes;
 800f77e:	fa13 f380 	uxtah	r3, r3, r0
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 800f782:	4640      	mov	r0, r8
        p_msc->xferred_len += (uint16_t) nbytes;
 800f784:	63a3      	str	r3, [r4, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 800f786:	f002 fd4e 	bl	8012226 <memmove>
 800f78a:	e5d7      	b.n	800f33c <mscd_xfer_cb+0x22c>
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800f78c:	09ed      	lsrs	r5, r5, #7
 800f78e:	d189      	bne.n	800f6a4 <mscd_xfer_cb+0x594>
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800f790:	62a3      	str	r3, [r4, #40]	; 0x28
  p_csw->status       = status;
 800f792:	2302      	movs	r3, #2
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f794:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  p_csw->status       = status;
 800f798:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  p_msc->stage        = MSC_STAGE_STATUS;
 800f79c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800f7a0:	2a00      	cmp	r2, #0
 800f7a2:	d0a2      	beq.n	800f6ea <mscd_xfer_cb+0x5da>
 800f7a4:	e590      	b.n	800f2c8 <mscd_xfer_cb+0x1b8>
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	4a19      	ldr	r2, [pc, #100]	; (800f810 <mscd_xfer_cb+0x700>)
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f001 fa3e 	bl	8010c2c <usbd_edpt_xfer>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	f47f ad8c 	bne.w	800f2ce <mscd_xfer_cb+0x1be>
 800f7b6:	e516      	b.n	800f1e6 <mscd_xfer_cb+0xd6>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800f7b8:	429d      	cmp	r5, r3
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 800f7ba:	4a15      	ldr	r2, [pc, #84]	; (800f810 <mscd_xfer_cb+0x700>)
 800f7bc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	bf28      	it	cs
 800f7c4:	461d      	movcs	r5, r3
 800f7c6:	b2ab      	uxth	r3, r5
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 800f7c8:	6365      	str	r5, [r4, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 800f7ca:	f001 fa2f 	bl	8010c2c <usbd_edpt_xfer>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	f47f ad7d 	bne.w	800f2ce <mscd_xfer_cb+0x1be>
 800f7d4:	e507      	b.n	800f1e6 <mscd_xfer_cb+0xd6>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800f7d6:	2202      	movs	r2, #2
 800f7d8:	e7c2      	b.n	800f760 <mscd_xfer_cb+0x650>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800f7da:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f7de:	4630      	mov	r0, r6
 800f7e0:	f001 fa6a 	bl	8010cb8 <usbd_edpt_stall>
 800f7e4:	e586      	b.n	800f2f4 <mscd_xfer_cb+0x1e4>
      resplen = sizeof(sense_rsp);
 800f7e6:	2512      	movs	r5, #18
  _mscd_itf.sense_key           = sense_key;
 800f7e8:	f8a4 e03c 	strh.w	lr, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800f7ec:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
          if ( resplen < 0 )
 800f7f0:	e66a      	b.n	800f4c8 <mscd_xfer_cb+0x3b8>
      bool writable = true;
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	e65c      	b.n	800f4b0 <mscd_xfer_cb+0x3a0>
        read_capa10.last_lba   = tu_htonl(block_count-1);
 800f7f6:	3b01      	subs	r3, #1
  memcpy(dest, src, count);
 800f7f8:	4905      	ldr	r1, [pc, #20]	; (800f810 <mscd_xfer_cb+0x700>)
        read_capa10.block_size = tu_htonl(block_size);
 800f7fa:	ba12      	rev	r2, r2
        resplen = sizeof(read_capa10);
 800f7fc:	2508      	movs	r5, #8
        read_capa10.last_lba   = tu_htonl(block_count-1);
 800f7fe:	ba1b      	rev	r3, r3
 800f800:	604a      	str	r2, [r1, #4]
 800f802:	600b      	str	r3, [r1, #0]
 800f804:	e660      	b.n	800f4c8 <mscd_xfer_cb+0x3b8>
 800f806:	bf00      	nop
	...
 800f810:	24000ac4 	.word	0x24000ac4

0800f814 <tu_fifo_config>:
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800f814:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
{
 800f818:	4684      	mov	ip, r0
 800f81a:	f89d 0000 	ldrb.w	r0, [sp]
  if (depth > 0x8000) return false;
 800f81e:	d810      	bhi.n	800f842 <tu_fifo_config+0x2e>
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
  f->depth        = depth;
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f820:	f3c3 030e 	ubfx	r3, r3, #0, #15
  f->buffer       = (uint8_t*) buffer;
 800f824:	f8cc 1000 	str.w	r1, [ip]
  f->overwritable = overwritable;
  f->rd_idx       = 0;
 800f828:	2100      	movs	r1, #0
  f->depth        = depth;
 800f82a:	f8ac 2004 	strh.w	r2, [ip, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f82e:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
  f->wr_idx       = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800f832:	2001      	movs	r0, #1
  f->rd_idx       = 0;
 800f834:	f8ac 100a 	strh.w	r1, [ip, #10]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f838:	f8ac 3006 	strh.w	r3, [ip, #6]
  f->wr_idx       = 0;
 800f83c:	f8ac 1008 	strh.w	r1, [ip, #8]
  return true;
 800f840:	4770      	bx	lr
  if (depth > 0x8000) return false;
 800f842:	2000      	movs	r0, #0
}
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop

0800f848 <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800f848:	8903      	ldrh	r3, [r0, #8]
 800f84a:	8942      	ldrh	r2, [r0, #10]
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	8880      	ldrh	r0, [r0, #4]
 800f850:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800f852:	4293      	cmp	r3, r2
 800f854:	d305      	bcc.n	800f862 <tu_fifo_count+0x1a>
    return (uint16_t) (wr_idx - rd_idx);
 800f856:	1a9b      	subs	r3, r3, r2
 800f858:	b29b      	uxth	r3, r3
}
 800f85a:	4298      	cmp	r0, r3
 800f85c:	bf28      	it	cs
 800f85e:	4618      	movcs	r0, r3
 800f860:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f862:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800f866:	4413      	add	r3, r2
 800f868:	b29b      	uxth	r3, r3
}
 800f86a:	4298      	cmp	r0, r3
 800f86c:	bf28      	it	cs
 800f86e:	4618      	movcs	r0, r3
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop

0800f874 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return f->wr_idx == f->rd_idx;
 800f874:	8902      	ldrh	r2, [r0, #8]
 800f876:	8943      	ldrh	r3, [r0, #10]
 800f878:	b290      	uxth	r0, r2
 800f87a:	b29b      	uxth	r3, r3
}
 800f87c:	1ac0      	subs	r0, r0, r3
 800f87e:	fab0 f080 	clz	r0, r0
 800f882:	0940      	lsrs	r0, r0, #5
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop

0800f888 <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800f888:	8903      	ldrh	r3, [r0, #8]
 800f88a:	8942      	ldrh	r2, [r0, #10]
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	8880      	ldrh	r0, [r0, #4]
 800f890:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800f892:	4293      	cmp	r3, r2
 800f894:	d306      	bcc.n	800f8a4 <tu_fifo_remaining+0x1c>
    return (uint16_t) (wr_idx - rd_idx);
 800f896:	1a9b      	subs	r3, r3, r2
 800f898:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800f89a:	4298      	cmp	r0, r3
 800f89c:	d908      	bls.n	800f8b0 <tu_fifo_remaining+0x28>
 800f89e:	1ac0      	subs	r0, r0, r3
 800f8a0:	b280      	uxth	r0, r0
 800f8a2:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f8a4:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800f8a8:	4413      	add	r3, r2
 800f8aa:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800f8ac:	4298      	cmp	r0, r3
 800f8ae:	d8f6      	bhi.n	800f89e <tu_fifo_remaining+0x16>
 800f8b0:	2000      	movs	r0, #0
}
 800f8b2:	4770      	bx	lr

0800f8b4 <tu_fifo_read>:
{
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f8b4:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800f8b8:	8882      	ldrh	r2, [r0, #4]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f8ba:	fa1f fc8c 	uxth.w	ip, ip
{
 800f8be:	b538      	push	{r3, r4, r5, lr}
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f8c0:	8943      	ldrh	r3, [r0, #10]
{
 800f8c2:	4604      	mov	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f8c4:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 800f8c6:	459c      	cmp	ip, r3
 800f8c8:	d32b      	bcc.n	800f922 <tu_fifo_read+0x6e>
    return (uint16_t) (wr_idx - rd_idx);
 800f8ca:	ebac 0503 	sub.w	r5, ip, r3
 800f8ce:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800f8d0:	b368      	cbz	r0, 800f92e <tu_fifo_read+0x7a>
  if ( cnt > f->depth )
 800f8d2:	4282      	cmp	r2, r0
 800f8d4:	d20b      	bcs.n	800f8ee <tu_fifo_read+0x3a>
  if ( wr_idx >= f->depth )
 800f8d6:	4594      	cmp	ip, r2
    rd_idx = wr_idx - f->depth;
 800f8d8:	bf2c      	ite	cs
 800f8da:	ebac 0c02 	subcs.w	ip, ip, r2
    rd_idx = wr_idx + f->depth;
 800f8de:	4494      	addcc	ip, r2
 800f8e0:	fa1f f38c 	uxth.w	r3, ip
  while ( idx >= depth ) idx -= depth;
 800f8e4:	429a      	cmp	r2, r3
  f->rd_idx = rd_idx;
 800f8e6:	8163      	strh	r3, [r4, #10]
  while ( idx >= depth ) idx -= depth;
 800f8e8:	d803      	bhi.n	800f8f2 <tu_fifo_read+0x3e>
 800f8ea:	1a9b      	subs	r3, r3, r2
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d9fb      	bls.n	800f8ea <tu_fifo_read+0x36>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800f8f2:	88e2      	ldrh	r2, [r4, #6]
 800f8f4:	4608      	mov	r0, r1
 800f8f6:	6825      	ldr	r5, [r4, #0]
 800f8f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f8fc:	fb02 5103 	mla	r1, r2, r3, r5
 800f900:	f002 fce4 	bl	80122cc <memcpy>

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f904:	8961      	ldrh	r1, [r4, #10]
 800f906:	88a2      	ldrh	r2, [r4, #4]
  return true;
 800f908:	2001      	movs	r0, #1
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f90a:	b289      	uxth	r1, r1
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f90c:	1c4b      	adds	r3, r1, #1
 800f90e:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f910:	4299      	cmp	r1, r3
 800f912:	d90e      	bls.n	800f932 <tu_fifo_read+0x7e>
 800f914:	2300      	movs	r3, #0
 800f916:	fa02 f100 	lsl.w	r1, r2, r0
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800f91a:	1a5b      	subs	r3, r3, r1
 800f91c:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f91e:	8163      	strh	r3, [r4, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 800f920:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f922:	ebc3 0542 	rsb	r5, r3, r2, lsl #1
 800f926:	4465      	add	r5, ip
 800f928:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800f92a:	2800      	cmp	r0, #0
 800f92c:	d1d1      	bne.n	800f8d2 <tu_fifo_read+0x1e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f92e:	8963      	ldrh	r3, [r4, #10]
 800f930:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f932:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800f936:	ea4f 0142 	mov.w	r1, r2, lsl #1
 800f93a:	daee      	bge.n	800f91a <tu_fifo_read+0x66>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f93c:	8163      	strh	r3, [r4, #10]
}
 800f93e:	bd38      	pop	{r3, r4, r5, pc}

0800f940 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800f940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f944:	8903      	ldrh	r3, [r0, #8]
{
 800f946:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f948:	8944      	ldrh	r4, [r0, #10]
{
 800f94a:	4688      	mov	r8, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f94c:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800f94e:	8885      	ldrh	r5, [r0, #4]
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f950:	b2a4      	uxth	r4, r4
  if (wr_idx >= rd_idx)
 800f952:	42a3      	cmp	r3, r4
 800f954:	d354      	bcc.n	800fa00 <tu_fifo_read_n+0xc0>
    return (uint16_t) (wr_idx - rd_idx);
 800f956:	1b1f      	subs	r7, r3, r4
 800f958:	b2bf      	uxth	r7, r7
  if ( cnt == 0 ) return 0;
 800f95a:	2f00      	cmp	r7, #0
 800f95c:	d045      	beq.n	800f9ea <tu_fifo_read_n+0xaa>
  if ( cnt > f->depth )
 800f95e:	42bd      	cmp	r5, r7
 800f960:	d33b      	bcc.n	800f9da <tu_fifo_read_n+0x9a>
  if ( cnt < n ) n = cnt;
 800f962:	42ba      	cmp	r2, r7
 800f964:	bf28      	it	cs
 800f966:	463a      	movcs	r2, r7
  while ( idx >= depth ) idx -= depth;
 800f968:	42a5      	cmp	r5, r4
 800f96a:	b297      	uxth	r7, r2
 800f96c:	d803      	bhi.n	800f976 <tu_fifo_read_n+0x36>
 800f96e:	1b64      	subs	r4, r4, r5
 800f970:	b2a4      	uxth	r4, r4
 800f972:	42a5      	cmp	r5, r4
 800f974:	d9fb      	bls.n	800f96e <tu_fifo_read_n+0x2e>
  uint16_t const lin_count = f->depth - rd_ptr;
 800f976:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800f978:	f8b6 a006 	ldrh.w	sl, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800f97c:	6831      	ldr	r1, [r6, #0]
  uint16_t const lin_count = f->depth - rd_ptr;
 800f97e:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800f980:	f3ca 020e 	ubfx	r2, sl, #0, #15
      if ( n <= lin_count )
 800f984:	429f      	cmp	r7, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800f986:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800f988:	fb02 1104 	mla	r1, r2, r4, r1
      if ( n <= lin_count )
 800f98c:	d91f      	bls.n	800f9ce <tu_fifo_read_n+0x8e>
  uint16_t lin_bytes = lin_count * f->item_size;
 800f98e:	fb13 f302 	smulbb	r3, r3, r2
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800f992:	1b7d      	subs	r5, r7, r5
        memcpy(app_buf, ff_buf, lin_bytes);
 800f994:	4640      	mov	r0, r8
 800f996:	fa1f f983 	uxth.w	r9, r3
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800f99a:	442c      	add	r4, r5
        memcpy(app_buf, ff_buf, lin_bytes);
 800f99c:	464a      	mov	r2, r9
 800f99e:	f002 fc95 	bl	80122cc <memcpy>
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800f9a2:	fb14 f20a 	smulbb	r2, r4, sl
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800f9a6:	eb08 0009 	add.w	r0, r8, r9
 800f9aa:	6831      	ldr	r1, [r6, #0]
 800f9ac:	b292      	uxth	r2, r2
 800f9ae:	f002 fc8d 	bl	80122cc <memcpy>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f9b2:	8972      	ldrh	r2, [r6, #10]
 800f9b4:	88b5      	ldrh	r5, [r6, #4]
 800f9b6:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f9b8:	19d3      	adds	r3, r2, r7
 800f9ba:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d916      	bls.n	800f9ee <tu_fifo_read_n+0xae>
 800f9c0:	006a      	lsls	r2, r5, #1
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800f9c2:	1a9b      	subs	r3, r3, r2
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f9c8:	8173      	strh	r3, [r6, #10]
}
 800f9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(app_buf, ff_buf, n*f->item_size);
 800f9ce:	fb07 f202 	mul.w	r2, r7, r2
 800f9d2:	4640      	mov	r0, r8
 800f9d4:	f002 fc7a 	bl	80122cc <memcpy>
 800f9d8:	e7eb      	b.n	800f9b2 <tu_fifo_read_n+0x72>
  if ( wr_idx >= f->depth )
 800f9da:	42ab      	cmp	r3, r5
  f->rd_idx = rd_idx;
 800f9dc:	462f      	mov	r7, r5
    rd_idx = wr_idx - f->depth;
 800f9de:	bf2c      	ite	cs
 800f9e0:	1b5b      	subcs	r3, r3, r5
    rd_idx = wr_idx + f->depth;
 800f9e2:	195b      	addcc	r3, r3, r5
 800f9e4:	b29c      	uxth	r4, r3
  f->rd_idx = rd_idx;
 800f9e6:	8174      	strh	r4, [r6, #10]
    cnt = f->depth;
 800f9e8:	e7bb      	b.n	800f962 <tu_fifo_read_n+0x22>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f9ea:	8973      	ldrh	r3, [r6, #10]
 800f9ec:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f9ee:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 800f9f2:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800f9f6:	dae4      	bge.n	800f9c2 <tu_fifo_read_n+0x82>
}
 800f9f8:	4638      	mov	r0, r7
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f9fa:	8173      	strh	r3, [r6, #10]
}
 800f9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fa00:	ebc4 0745 	rsb	r7, r4, r5, lsl #1
 800fa04:	441f      	add	r7, r3
 800fa06:	b2bf      	uxth	r7, r7
 800fa08:	e7a7      	b.n	800f95a <tu_fifo_read_n+0x1a>
 800fa0a:	bf00      	nop

0800fa0c <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800fa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa10:	460f      	mov	r7, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fa12:	8901      	ldrh	r1, [r0, #8]
 800fa14:	8943      	ldrh	r3, [r0, #10]
{
 800fa16:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fa18:	b289      	uxth	r1, r1
{
 800fa1a:	b083      	sub	sp, #12
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800fa1c:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800fa1e:	8880      	ldrh	r0, [r0, #4]
  if (wr_idx >= rd_idx)
 800fa20:	4299      	cmp	r1, r3
 800fa22:	f0c0 80a2 	bcc.w	800fb6a <tu_fifo_read_n_const_addr_full_words+0x15e>
    return (uint16_t) (wr_idx - rd_idx);
 800fa26:	1acd      	subs	r5, r1, r3
 800fa28:	ea4f 0940 	mov.w	r9, r0, lsl #1
 800fa2c:	b2ad      	uxth	r5, r5
  if ( cnt == 0 ) return 0;
 800fa2e:	2d00      	cmp	r5, #0
 800fa30:	f000 8092 	beq.w	800fb58 <tu_fifo_read_n_const_addr_full_words+0x14c>
  if ( cnt > f->depth )
 800fa34:	42a8      	cmp	r0, r5
 800fa36:	f0c0 8087 	bcc.w	800fb48 <tu_fifo_read_n_const_addr_full_words+0x13c>
  if ( cnt < n ) n = cnt;
 800fa3a:	4295      	cmp	r5, r2
 800fa3c:	bf28      	it	cs
 800fa3e:	4615      	movcs	r5, r2
  while ( idx >= depth ) idx -= depth;
 800fa40:	4298      	cmp	r0, r3
 800fa42:	d803      	bhi.n	800fa4c <tu_fifo_read_n_const_addr_full_words+0x40>
 800fa44:	1a1b      	subs	r3, r3, r0
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	4298      	cmp	r0, r3
 800fa4a:	d9fb      	bls.n	800fa44 <tu_fifo_read_n_const_addr_full_words+0x38>
  uint16_t const lin_count = f->depth - rd_ptr;
 800fa4c:	eba0 0e03 	sub.w	lr, r0, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fa50:	f8b6 a006 	ldrh.w	sl, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fa54:	f8d6 8000 	ldr.w	r8, [r6]
  uint16_t const lin_count = f->depth - rd_ptr;
 800fa58:	fa1f fe8e 	uxth.w	lr, lr
  uint16_t lin_bytes = lin_count * f->item_size;
 800fa5c:	f3ca 0c0e 	ubfx	ip, sl, #0, #15
      if ( n <= lin_count )
 800fa60:	4575      	cmp	r5, lr
  uint16_t lin_bytes = lin_count * f->item_size;
 800fa62:	46e2      	mov	sl, ip
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800fa64:	fb0c 8c03 	mla	ip, ip, r3, r8
      if ( n <= lin_count )
 800fa68:	d81e      	bhi.n	800faa8 <tu_fifo_read_n_const_addr_full_words+0x9c>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800fa6a:	fb15 f20a 	smulbb	r2, r5, sl
  uint16_t full_words = len >> 2;
 800fa6e:	f3c2 018d 	ubfx	r1, r2, #2, #14
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800fa72:	b292      	uxth	r2, r2
  while(full_words--)
 800fa74:	2900      	cmp	r1, #0
 800fa76:	d07f      	beq.n	800fb78 <tu_fifo_read_n_const_addr_full_words+0x16c>
 800fa78:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800fa7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa80:	4561      	cmp	r1, ip
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fa82:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800fa84:	d1fa      	bne.n	800fa7c <tu_fifo_read_n_const_addr_full_words+0x70>
  if ( bytes_rem )
 800fa86:	f012 0203 	ands.w	r2, r2, #3
 800fa8a:	d155      	bne.n	800fb38 <tu_fifo_read_n_const_addr_full_words+0x12c>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fa8c:	8972      	ldrh	r2, [r6, #10]
 800fa8e:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fa90:	1953      	adds	r3, r2, r5
 800fa92:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d961      	bls.n	800fb5c <tu_fifo_read_n_const_addr_full_words+0x150>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fa98:	eba3 0309 	sub.w	r3, r3, r9
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800faa0:	8173      	strh	r3, [r6, #10]
}
 800faa2:	b003      	add	sp, #12
 800faa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t lin_bytes = lin_count * f->item_size;
 800faa8:	fb1e fe0a 	smulbb	lr, lr, sl
 800faac:	fa1f fe8e 	uxth.w	lr, lr
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800fab0:	f02e 0203 	bic.w	r2, lr, #3
 800fab4:	b291      	uxth	r1, r2
  while(full_words--)
 800fab6:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 800faba:	b13a      	cbz	r2, 800facc <tu_fifo_read_n_const_addr_full_words+0xc0>
 800fabc:	eb0c 0b8b 	add.w	fp, ip, fp, lsl #2
 800fac0:	4662      	mov	r2, ip
 800fac2:	f852 4b04 	ldr.w	r4, [r2], #4
 800fac6:	4593      	cmp	fp, r2
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fac8:	603c      	str	r4, [r7, #0]
  while(full_words--)
 800faca:	d1fa      	bne.n	800fac2 <tu_fifo_read_n_const_addr_full_words+0xb6>
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800facc:	1a2a      	subs	r2, r5, r0
        if (rem > 0)
 800face:	f01e 0b03 	ands.w	fp, lr, #3
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800fad2:	eb03 0402 	add.w	r4, r3, r2
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fad6:	fb14 f40a 	smulbb	r4, r4, sl
 800fada:	b2a4      	uxth	r4, r4
        if (rem > 0)
 800fadc:	d01e      	beq.n	800fb1c <tu_fifo_read_n_const_addr_full_words+0x110>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fade:	f1cb 0a04 	rsb	sl, fp, #4
          uint32_t tmp32=0;
 800fae2:	2300      	movs	r3, #0
          while(rem--) *dst_u8++ = *ff_buf++;
 800fae4:	465a      	mov	r2, fp
 800fae6:	4461      	add	r1, ip
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fae8:	fa1f fa8a 	uxth.w	sl, sl
 800faec:	a801      	add	r0, sp, #4
          uint32_t tmp32=0;
 800faee:	9301      	str	r3, [sp, #4]
 800faf0:	45a2      	cmp	sl, r4
 800faf2:	bf28      	it	cs
 800faf4:	46a2      	movcs	sl, r4
          while(rem--) *dst_u8++ = *ff_buf++;
 800faf6:	f002 fbe9 	bl	80122cc <memcpy>
 800fafa:	ab01      	add	r3, sp, #4
          wrap_bytes -= remrem;
 800fafc:	eba4 040a 	sub.w	r4, r4, sl
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fb00:	fa5f f28a 	uxtb.w	r2, sl
          while(rem--) *dst_u8++ = *ff_buf++;
 800fb04:	eb03 000b 	add.w	r0, r3, fp
          wrap_bytes -= remrem;
 800fb08:	b2a4      	uxth	r4, r4
          while(remrem--) *dst_u8++ = *ff_buf++;
 800fb0a:	f1ba 0f00 	cmp.w	sl, #0
 800fb0e:	d003      	beq.n	800fb18 <tu_fifo_read_n_const_addr_full_words+0x10c>
 800fb10:	4641      	mov	r1, r8
 800fb12:	4490      	add	r8, r2
 800fb14:	f002 fbda 	bl	80122cc <memcpy>
          *reg_tx = tmp32;
 800fb18:	9b01      	ldr	r3, [sp, #4]
 800fb1a:	603b      	str	r3, [r7, #0]
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 800fb1c:	2c00      	cmp	r4, #0
 800fb1e:	d0b5      	beq.n	800fa8c <tu_fifo_read_n_const_addr_full_words+0x80>
  while(full_words--)
 800fb20:	08a1      	lsrs	r1, r4, #2
 800fb22:	d02b      	beq.n	800fb7c <tu_fifo_read_n_const_addr_full_words+0x170>
 800fb24:	eb08 0181 	add.w	r1, r8, r1, lsl #2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800fb28:	f858 3b04 	ldr.w	r3, [r8], #4
 800fb2c:	4588      	cmp	r8, r1
    *reg_tx = tu_unaligned_read32(ff_buf);
 800fb2e:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800fb30:	d1fa      	bne.n	800fb28 <tu_fifo_read_n_const_addr_full_words+0x11c>
  if ( bytes_rem )
 800fb32:	f014 0203 	ands.w	r2, r4, #3
 800fb36:	d0a9      	beq.n	800fa8c <tu_fifo_read_n_const_addr_full_words+0x80>
    uint32_t tmp32 = 0;
 800fb38:	2300      	movs	r3, #0
    memcpy(&tmp32, ff_buf, bytes_rem);
 800fb3a:	a801      	add	r0, sp, #4
    uint32_t tmp32 = 0;
 800fb3c:	9301      	str	r3, [sp, #4]
    memcpy(&tmp32, ff_buf, bytes_rem);
 800fb3e:	f002 fbc5 	bl	80122cc <memcpy>
    *reg_tx = tmp32;
 800fb42:	9b01      	ldr	r3, [sp, #4]
 800fb44:	603b      	str	r3, [r7, #0]
 800fb46:	e7a1      	b.n	800fa8c <tu_fifo_read_n_const_addr_full_words+0x80>
  if ( wr_idx >= f->depth )
 800fb48:	4281      	cmp	r1, r0
  f->rd_idx = rd_idx;
 800fb4a:	4605      	mov	r5, r0
    rd_idx = wr_idx - f->depth;
 800fb4c:	bf2c      	ite	cs
 800fb4e:	1a09      	subcs	r1, r1, r0
    rd_idx = wr_idx + f->depth;
 800fb50:	1809      	addcc	r1, r1, r0
 800fb52:	b28b      	uxth	r3, r1
  f->rd_idx = rd_idx;
 800fb54:	8173      	strh	r3, [r6, #10]
    cnt = f->depth;
 800fb56:	e770      	b.n	800fa3a <tu_fifo_read_n_const_addr_full_words+0x2e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fb58:	8973      	ldrh	r3, [r6, #10]
 800fb5a:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fb5c:	454b      	cmp	r3, r9
 800fb5e:	da9b      	bge.n	800fa98 <tu_fifo_read_n_const_addr_full_words+0x8c>
}
 800fb60:	4628      	mov	r0, r5
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800fb62:	8173      	strh	r3, [r6, #10]
}
 800fb64:	b003      	add	sp, #12
 800fb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fb6a:	ebc3 0540 	rsb	r5, r3, r0, lsl #1
 800fb6e:	ea4f 0940 	mov.w	r9, r0, lsl #1
 800fb72:	440d      	add	r5, r1
 800fb74:	b2ad      	uxth	r5, r5
 800fb76:	e75a      	b.n	800fa2e <tu_fifo_read_n_const_addr_full_words+0x22>
  while(full_words--)
 800fb78:	4661      	mov	r1, ip
 800fb7a:	e784      	b.n	800fa86 <tu_fifo_read_n_const_addr_full_words+0x7a>
 800fb7c:	4641      	mov	r1, r8
 800fb7e:	e7d8      	b.n	800fb32 <tu_fifo_read_n_const_addr_full_words+0x126>

0800fb80 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800fb80:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 800fb82:	8905      	ldrh	r5, [r0, #8]
{
 800fb84:	4604      	mov	r4, r0
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800fb86:	8903      	ldrh	r3, [r0, #8]
 800fb88:	8940      	ldrh	r0, [r0, #10]
  uint16_t const wr_idx = f->wr_idx;
 800fb8a:	b2ad      	uxth	r5, r5
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	88a2      	ldrh	r2, [r4, #4]
 800fb90:	b280      	uxth	r0, r0
  if (wr_idx >= rd_idx)
 800fb92:	4283      	cmp	r3, r0
 800fb94:	d320      	bcc.n	800fbd8 <tu_fifo_write+0x58>
    return (uint16_t) (wr_idx - rd_idx);
 800fb96:	1a1b      	subs	r3, r3, r0
 800fb98:	b29b      	uxth	r3, r3

  if ( tu_fifo_full(f) && !f->overwritable )
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d802      	bhi.n	800fba4 <tu_fifo_write+0x24>
 800fb9e:	79e0      	ldrb	r0, [r4, #7]
 800fba0:	09c0      	lsrs	r0, r0, #7
 800fba2:	d018      	beq.n	800fbd6 <tu_fifo_write+0x56>
  while ( idx >= depth ) idx -= depth;
 800fba4:	4295      	cmp	r5, r2
 800fba6:	462b      	mov	r3, r5
 800fba8:	d303      	bcc.n	800fbb2 <tu_fifo_write+0x32>
 800fbaa:	1a9b      	subs	r3, r3, r2
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d2fb      	bcs.n	800fbaa <tu_fifo_write+0x2a>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800fbb2:	88e2      	ldrh	r2, [r4, #6]
 800fbb4:	6820      	ldr	r0, [r4, #0]
 800fbb6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fbba:	fb02 0003 	mla	r0, r2, r3, r0
 800fbbe:	f002 fb85 	bl	80122cc <memcpy>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fbc2:	1c6b      	adds	r3, r5, #1

    // Write data
    _ff_push(f, data, wr_ptr);

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800fbc4:	88a2      	ldrh	r2, [r4, #4]
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fbc6:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fbc8:	0051      	lsls	r1, r2, #1
 800fbca:	429d      	cmp	r5, r3
 800fbcc:	d909      	bls.n	800fbe2 <tu_fifo_write+0x62>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fbce:	1a5b      	subs	r3, r3, r1
 800fbd0:	b29b      	uxth	r3, r3

    ret = true;
 800fbd2:	2001      	movs	r0, #1
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800fbd4:	8123      	strh	r3, [r4, #8]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 800fbd6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fbd8:	ebc0 0042 	rsb	r0, r0, r2, lsl #1
 800fbdc:	4403      	add	r3, r0
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	e7db      	b.n	800fb9a <tu_fifo_write+0x1a>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fbe2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800fbe6:	dbf4      	blt.n	800fbd2 <tu_fifo_write+0x52>
 800fbe8:	e7f1      	b.n	800fbce <tu_fifo_write+0x4e>
 800fbea:	bf00      	nop

0800fbec <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800fbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	b083      	sub	sp, #12
  if ( n == 0 ) return 0;
 800fbf2:	2a00      	cmp	r2, #0
 800fbf4:	d043      	beq.n	800fc7e <tu_fifo_write_n+0x92>
  uint16_t wr_idx = f->wr_idx;
 800fbf6:	8907      	ldrh	r7, [r0, #8]
 800fbf8:	4606      	mov	r6, r0
  uint16_t rd_idx = f->rd_idx;
 800fbfa:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800fbfc:	79c0      	ldrb	r0, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800fbfe:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800fc00:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800fc02:	09c0      	lsrs	r0, r0, #7
 800fc04:	d141      	bne.n	800fc8a <tu_fifo_write_n+0x9e>
  if (wr_idx >= rd_idx)
 800fc06:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800fc08:	88b5      	ldrh	r5, [r6, #4]
  if (wr_idx >= rd_idx)
 800fc0a:	d254      	bcs.n	800fcb6 <tu_fifo_write_n+0xca>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fc0c:	ebc3 0345 	rsb	r3, r3, r5, lsl #1
 800fc10:	443b      	add	r3, r7
 800fc12:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fc14:	429d      	cmp	r5, r3
 800fc16:	d932      	bls.n	800fc7e <tu_fifo_write_n+0x92>
 800fc18:	1aeb      	subs	r3, r5, r3
 800fc1a:	f8b6 a006 	ldrh.w	sl, [r6, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	4293      	cmp	r3, r2
 800fc22:	bf28      	it	cs
 800fc24:	4613      	movcs	r3, r2
 800fc26:	4698      	mov	r8, r3
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fc28:	eb08 0907 	add.w	r9, r8, r7
 800fc2c:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800fc30:	42bd      	cmp	r5, r7
 800fc32:	463c      	mov	r4, r7
 800fc34:	d803      	bhi.n	800fc3e <tu_fifo_write_n+0x52>
 800fc36:	1b64      	subs	r4, r4, r5
 800fc38:	b2a4      	uxth	r4, r4
 800fc3a:	42ac      	cmp	r4, r5
 800fc3c:	d2fb      	bcs.n	800fc36 <tu_fifo_write_n+0x4a>
  uint16_t const lin_count = f->depth - wr_ptr;
 800fc3e:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800fc40:	f3ca 020e 	ubfx	r2, sl, #0, #15
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fc44:	6830      	ldr	r0, [r6, #0]
  uint16_t const lin_count = f->depth - wr_ptr;
 800fc46:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fc48:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fc4a:	fb02 0004 	mla	r0, r2, r4, r0
      if(n <= lin_count)
 800fc4e:	4543      	cmp	r3, r8
 800fc50:	d342      	bcc.n	800fcd8 <tu_fifo_write_n+0xec>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800fc52:	fb02 f208 	mul.w	r2, r2, r8
 800fc56:	f002 fb39 	bl	80122cc <memcpy>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fc5a:	88b2      	ldrh	r2, [r6, #4]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fc5c:	454f      	cmp	r7, r9
 800fc5e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800fc62:	d802      	bhi.n	800fc6a <tu_fifo_write_n+0x7e>
 800fc64:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
 800fc68:	db03      	blt.n	800fc72 <tu_fifo_write_n+0x86>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fc6a:	eba9 0303 	sub.w	r3, r9, r3
 800fc6e:	fa1f f983 	uxth.w	r9, r3
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 800fc72:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fc74:	f8a6 9008 	strh.w	r9, [r6, #8]
}
 800fc78:	b003      	add	sp, #12
 800fc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 800fc7e:	f04f 0800 	mov.w	r8, #0
}
 800fc82:	4640      	mov	r0, r8
 800fc84:	b003      	add	sp, #12
 800fc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 800fc8a:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800fc8e:	4542      	cmp	r2, r8
 800fc90:	d214      	bcs.n	800fcbc <tu_fifo_write_n+0xd0>
  if (wr_idx >= rd_idx)
 800fc92:	429f      	cmp	r7, r3
 800fc94:	d34e      	bcc.n	800fd34 <tu_fifo_write_n+0x148>
    return (uint16_t) (wr_idx - rd_idx);
 800fc96:	1af8      	subs	r0, r7, r3
 800fc98:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800fc9c:	b280      	uxth	r0, r0
      if (overflowable_count + n >= 2*f->depth)
 800fc9e:	4410      	add	r0, r2
 800fca0:	42a0      	cmp	r0, r4
 800fca2:	da2d      	bge.n	800fd00 <tu_fifo_write_n+0x114>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fca4:	eb02 0907 	add.w	r9, r2, r7
 800fca8:	4645      	mov	r5, r8
 800fcaa:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fcae:	4690      	mov	r8, r2
 800fcb0:	fa1f f989 	uxth.w	r9, r9
 800fcb4:	e7bc      	b.n	800fc30 <tu_fifo_write_n+0x44>
    return (uint16_t) (wr_idx - rd_idx);
 800fcb6:	1afb      	subs	r3, r7, r3
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	e7ab      	b.n	800fc14 <tu_fifo_write_n+0x28>
        buf8 += (n - f->depth) * f->item_size;
 800fcbc:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fcc0:	eba2 0208 	sub.w	r2, r2, r8
 800fcc4:	f3ca 000e 	ubfx	r0, sl, #0, #15
 800fcc8:	fb00 1102 	mla	r1, r0, r2, r1
  if (n)
 800fccc:	f1b8 0f00 	cmp.w	r8, #0
 800fcd0:	d0d7      	beq.n	800fc82 <tu_fifo_write_n+0x96>
  uint16_t rd_idx = f->rd_idx;
 800fcd2:	461f      	mov	r7, r3
 800fcd4:	4645      	mov	r5, r8
 800fcd6:	e7a7      	b.n	800fc28 <tu_fifo_write_n+0x3c>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fcd8:	fb13 f302 	smulbb	r3, r3, r2
  uint16_t const wrap_count = n - lin_count;
 800fcdc:	eba8 0505 	sub.w	r5, r8, r5
        memcpy(ff_buf, app_buf, lin_bytes);
 800fce0:	9101      	str	r1, [sp, #4]
 800fce2:	fa1f fb83 	uxth.w	fp, r3
 800fce6:	465a      	mov	r2, fp
 800fce8:	f002 faf0 	bl	80122cc <memcpy>
  uint16_t const wrap_count = n - lin_count;
 800fcec:	1962      	adds	r2, r4, r5
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fcee:	9901      	ldr	r1, [sp, #4]
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fcf0:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fcf4:	6830      	ldr	r0, [r6, #0]
 800fcf6:	4459      	add	r1, fp
 800fcf8:	b292      	uxth	r2, r2
 800fcfa:	f002 fae7 	bl	80122cc <memcpy>
 800fcfe:	e7ac      	b.n	800fc5a <tu_fifo_write_n+0x6e>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800fd00:	eb03 0908 	add.w	r9, r3, r8
 800fd04:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fd08:	eba9 0702 	sub.w	r7, r9, r2
 800fd0c:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fd0e:	42bb      	cmp	r3, r7
 800fd10:	d806      	bhi.n	800fd20 <tu_fifo_write_n+0x134>
 800fd12:	42bc      	cmp	r4, r7
 800fd14:	dd04      	ble.n	800fd20 <tu_fifo_write_n+0x134>
 800fd16:	4645      	mov	r5, r8
 800fd18:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fd1c:	4690      	mov	r8, r2
 800fd1e:	e787      	b.n	800fc30 <tu_fifo_write_n+0x44>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fd20:	1b3c      	subs	r4, r7, r4
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fd22:	4645      	mov	r5, r8
 800fd24:	4690      	mov	r8, r2
 800fd26:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fd2a:	b2a7      	uxth	r7, r4
 800fd2c:	443a      	add	r2, r7
 800fd2e:	fa1f f982 	uxth.w	r9, r2
 800fd32:	e77d      	b.n	800fc30 <tu_fifo_write_n+0x44>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fd34:	ebc3 0048 	rsb	r0, r3, r8, lsl #1
 800fd38:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800fd3c:	4438      	add	r0, r7
 800fd3e:	b280      	uxth	r0, r0
 800fd40:	e7ad      	b.n	800fc9e <tu_fifo_write_n+0xb2>
 800fd42:	bf00      	nop

0800fd44 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800fd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd48:	b085      	sub	sp, #20
  if ( n == 0 ) return 0;
 800fd4a:	2a00      	cmp	r2, #0
 800fd4c:	d056      	beq.n	800fdfc <tu_fifo_write_n_const_addr_full_words+0xb8>
 800fd4e:	460e      	mov	r6, r1
  if ( !f->overwritable )
 800fd50:	79c1      	ldrb	r1, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800fd52:	8907      	ldrh	r7, [r0, #8]
 800fd54:	4605      	mov	r5, r0
  uint16_t rd_idx = f->rd_idx;
 800fd56:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800fd58:	09c9      	lsrs	r1, r1, #7
  uint16_t wr_idx = f->wr_idx;
 800fd5a:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800fd5c:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800fd5e:	d153      	bne.n	800fe08 <tu_fifo_write_n_const_addr_full_words+0xc4>
  if (wr_idx >= rd_idx)
 800fd60:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800fd62:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  if (wr_idx >= rd_idx)
 800fd66:	d263      	bcs.n	800fe30 <tu_fifo_write_n_const_addr_full_words+0xec>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fd68:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 800fd6c:	443b      	add	r3, r7
 800fd6e:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800fd70:	459c      	cmp	ip, r3
 800fd72:	d943      	bls.n	800fdfc <tu_fifo_write_n_const_addr_full_words+0xb8>
 800fd74:	ebac 0303 	sub.w	r3, ip, r3
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	bf28      	it	cs
 800fd7e:	4613      	movcs	r3, r2
 800fd80:	4698      	mov	r8, r3
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fd82:	eb08 0907 	add.w	r9, r8, r7
 800fd86:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800fd8a:	45bc      	cmp	ip, r7
 800fd8c:	463b      	mov	r3, r7
 800fd8e:	d804      	bhi.n	800fd9a <tu_fifo_write_n_const_addr_full_words+0x56>
 800fd90:	eba3 030c 	sub.w	r3, r3, ip
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	4563      	cmp	r3, ip
 800fd98:	d2fa      	bcs.n	800fd90 <tu_fifo_write_n_const_addr_full_words+0x4c>
  uint16_t const lin_count = f->depth - wr_ptr;
 800fd9a:	ebac 0003 	sub.w	r0, ip, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fd9e:	88e9      	ldrh	r1, [r5, #6]
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fda0:	f8d5 a000 	ldr.w	sl, [r5]
  uint16_t const lin_count = f->depth - wr_ptr;
 800fda4:	b280      	uxth	r0, r0
  uint16_t lin_bytes = lin_count * f->item_size;
 800fda6:	f3c1 0e0e 	ubfx	lr, r1, #0, #15
      if(n <= lin_count)
 800fdaa:	4540      	cmp	r0, r8
  uint16_t lin_bytes = lin_count * f->item_size;
 800fdac:	4671      	mov	r1, lr
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fdae:	fb0e ae03 	mla	lr, lr, r3, sl
      if(n <= lin_count)
 800fdb2:	d346      	bcc.n	800fe42 <tu_fifo_write_n_const_addr_full_words+0xfe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800fdb4:	fb11 f208 	smulbb	r2, r1, r8
  uint16_t full_words = len >> 2;
 800fdb8:	f3c2 008d 	ubfx	r0, r2, #2, #14
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800fdbc:	b292      	uxth	r2, r2
  while(full_words--)
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	f000 80ac 	beq.w	800ff1c <tu_fifo_write_n_const_addr_full_words+0x1d8>
 800fdc4:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 800fdc8:	6833      	ldr	r3, [r6, #0]

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800fdca:	f84e 3b04 	str.w	r3, [lr], #4
  while(full_words--)
 800fdce:	4570      	cmp	r0, lr
 800fdd0:	d1fa      	bne.n	800fdc8 <tu_fifo_write_n_const_addr_full_words+0x84>
  if ( bytes_rem )
 800fdd2:	f012 0203 	ands.w	r2, r2, #3
 800fdd6:	f040 8099 	bne.w	800ff0c <tu_fifo_write_n_const_addr_full_words+0x1c8>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fdda:	45b9      	cmp	r9, r7
 800fddc:	ea4f 034c 	mov.w	r3, ip, lsl #1
 800fde0:	d302      	bcc.n	800fde8 <tu_fifo_write_n_const_addr_full_words+0xa4>
 800fde2:	ebb9 0f4c 	cmp.w	r9, ip, lsl #1
 800fde6:	db03      	blt.n	800fdf0 <tu_fifo_write_n_const_addr_full_words+0xac>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fde8:	eba9 0303 	sub.w	r3, r9, r3
 800fdec:	fa1f f983 	uxth.w	r9, r3
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 800fdf0:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fdf2:	f8a5 9008 	strh.w	r9, [r5, #8]
}
 800fdf6:	b005      	add	sp, #20
 800fdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 800fdfc:	f04f 0800 	mov.w	r8, #0
}
 800fe00:	4640      	mov	r0, r8
 800fe02:	b005      	add	sp, #20
 800fe04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 800fe08:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800fe0c:	4542      	cmp	r2, r8
 800fe0e:	d212      	bcs.n	800fe36 <tu_fifo_write_n_const_addr_full_words+0xf2>
  if (wr_idx >= rd_idx)
 800fe10:	429f      	cmp	r7, r3
 800fe12:	d368      	bcc.n	800fee6 <tu_fifo_write_n_const_addr_full_words+0x1a2>
    return (uint16_t) (wr_idx - rd_idx);
 800fe14:	1af9      	subs	r1, r7, r3
 800fe16:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800fe1a:	b289      	uxth	r1, r1
      if (overflowable_count + n >= 2*f->depth)
 800fe1c:	4411      	add	r1, r2
 800fe1e:	4281      	cmp	r1, r0
 800fe20:	da4b      	bge.n	800feba <tu_fifo_write_n_const_addr_full_words+0x176>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fe22:	eb02 0907 	add.w	r9, r2, r7
 800fe26:	46c4      	mov	ip, r8
 800fe28:	4690      	mov	r8, r2
 800fe2a:	fa1f f989 	uxth.w	r9, r9
 800fe2e:	e7ac      	b.n	800fd8a <tu_fifo_write_n_const_addr_full_words+0x46>
    return (uint16_t) (wr_idx - rd_idx);
 800fe30:	1afb      	subs	r3, r7, r3
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	e79c      	b.n	800fd70 <tu_fifo_write_n_const_addr_full_words+0x2c>
  if (n)
 800fe36:	f1b8 0f00 	cmp.w	r8, #0
 800fe3a:	d0e1      	beq.n	800fe00 <tu_fifo_write_n_const_addr_full_words+0xbc>
 800fe3c:	46c4      	mov	ip, r8
  uint16_t rd_idx = f->rd_idx;
 800fe3e:	461f      	mov	r7, r3
 800fe40:	e79f      	b.n	800fd82 <tu_fifo_write_n_const_addr_full_words+0x3e>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fe42:	fb10 f001 	smulbb	r0, r0, r1
 800fe46:	b280      	uxth	r0, r0
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800fe48:	f020 0203 	bic.w	r2, r0, #3
 800fe4c:	b294      	uxth	r4, r2
  while(full_words--)
 800fe4e:	ea4f 0b92 	mov.w	fp, r2, lsr #2
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800fe52:	9401      	str	r4, [sp, #4]
  while(full_words--)
 800fe54:	b13a      	cbz	r2, 800fe66 <tu_fifo_write_n_const_addr_full_words+0x122>
 800fe56:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 800fe5a:	4672      	mov	r2, lr
    tu_unaligned_write32(ff_buf, *reg_rx);
 800fe5c:	6834      	ldr	r4, [r6, #0]
 800fe5e:	f842 4b04 	str.w	r4, [r2], #4
  while(full_words--)
 800fe62:	4593      	cmp	fp, r2
 800fe64:	d1fa      	bne.n	800fe5c <tu_fifo_write_n_const_addr_full_words+0x118>
  uint16_t const wrap_count = n - lin_count;
 800fe66:	eba8 040c 	sub.w	r4, r8, ip
        if (rem > 0)
 800fe6a:	f010 0b03 	ands.w	fp, r0, #3
  uint16_t const wrap_count = n - lin_count;
 800fe6e:	441c      	add	r4, r3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fe70:	fb14 f401 	smulbb	r4, r4, r1
 800fe74:	b2a4      	uxth	r4, r4
        if (rem > 0)
 800fe76:	d01c      	beq.n	800feb2 <tu_fifo_write_n_const_addr_full_words+0x16e>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fe78:	f1cb 0304 	rsb	r3, fp, #4
          while(rem--) *ff_buf++ = *src_u8++;
 800fe7c:	9801      	ldr	r0, [sp, #4]
          uint32_t tmp32 = *rx_fifo;
 800fe7e:	6832      	ldr	r2, [r6, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 800fe80:	a903      	add	r1, sp, #12
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	4470      	add	r0, lr
          uint32_t tmp32 = *rx_fifo;
 800fe86:	9203      	str	r2, [sp, #12]
          while(rem--) *ff_buf++ = *src_u8++;
 800fe88:	465a      	mov	r2, fp
 800fe8a:	42a3      	cmp	r3, r4
 800fe8c:	bf28      	it	cs
 800fe8e:	4623      	movcs	r3, r4
          wrap_bytes -= remrem;
 800fe90:	1ae4      	subs	r4, r4, r3
 800fe92:	9301      	str	r3, [sp, #4]
          while(rem--) *ff_buf++ = *src_u8++;
 800fe94:	f002 fa1a 	bl	80122cc <memcpy>
 800fe98:	ab03      	add	r3, sp, #12
          wrap_bytes -= remrem;
 800fe9a:	b2a4      	uxth	r4, r4
          ff_buf = f->buffer;
 800fe9c:	f8d5 a000 	ldr.w	sl, [r5]
          while(rem--) *ff_buf++ = *src_u8++;
 800fea0:	eb03 010b 	add.w	r1, r3, fp
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fea4:	9b01      	ldr	r3, [sp, #4]
 800fea6:	b2da      	uxtb	r2, r3
          while(remrem--) *ff_buf++ = *src_u8++;
 800fea8:	b11b      	cbz	r3, 800feb2 <tu_fifo_write_n_const_addr_full_words+0x16e>
 800feaa:	4650      	mov	r0, sl
 800feac:	4492      	add	sl, r2
 800feae:	f002 fa0d 	bl	80122cc <memcpy>
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800feb2:	b9fc      	cbnz	r4, 800fef4 <tu_fifo_write_n_const_addr_full_words+0x1b0>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800feb4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800feb8:	e78f      	b.n	800fdda <tu_fifo_write_n_const_addr_full_words+0x96>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800feba:	eb03 0908 	add.w	r9, r3, r8
 800febe:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fec2:	eba9 0702 	sub.w	r7, r9, r2
 800fec6:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fec8:	42bb      	cmp	r3, r7
 800feca:	d804      	bhi.n	800fed6 <tu_fifo_write_n_const_addr_full_words+0x192>
 800fecc:	42b8      	cmp	r0, r7
 800fece:	dd02      	ble.n	800fed6 <tu_fifo_write_n_const_addr_full_words+0x192>
 800fed0:	46c4      	mov	ip, r8
 800fed2:	4690      	mov	r8, r2
 800fed4:	e759      	b.n	800fd8a <tu_fifo_write_n_const_addr_full_words+0x46>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fed6:	1a38      	subs	r0, r7, r0
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fed8:	46c4      	mov	ip, r8
 800feda:	4690      	mov	r8, r2
 800fedc:	b287      	uxth	r7, r0
 800fede:	443a      	add	r2, r7
 800fee0:	fa1f f982 	uxth.w	r9, r2
 800fee4:	e751      	b.n	800fd8a <tu_fifo_write_n_const_addr_full_words+0x46>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fee6:	ebc3 0148 	rsb	r1, r3, r8, lsl #1
 800feea:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800feee:	4439      	add	r1, r7
 800fef0:	b289      	uxth	r1, r1
 800fef2:	e793      	b.n	800fe1c <tu_fifo_write_n_const_addr_full_words+0xd8>
  while(full_words--)
 800fef4:	08a0      	lsrs	r0, r4, #2
 800fef6:	d00f      	beq.n	800ff18 <tu_fifo_write_n_const_addr_full_words+0x1d4>
 800fef8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 800fefc:	6833      	ldr	r3, [r6, #0]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800fefe:	f84a 3b04 	str.w	r3, [sl], #4
  while(full_words--)
 800ff02:	4582      	cmp	sl, r0
 800ff04:	d1fa      	bne.n	800fefc <tu_fifo_write_n_const_addr_full_words+0x1b8>
  if ( bytes_rem )
 800ff06:	f014 0203 	ands.w	r2, r4, #3
 800ff0a:	d0d3      	beq.n	800feb4 <tu_fifo_write_n_const_addr_full_words+0x170>
    uint32_t tmp32 = *reg_rx;
 800ff0c:	6833      	ldr	r3, [r6, #0]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800ff0e:	a903      	add	r1, sp, #12
    uint32_t tmp32 = *reg_rx;
 800ff10:	9303      	str	r3, [sp, #12]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800ff12:	f002 f9db 	bl	80122cc <memcpy>
 800ff16:	e7cd      	b.n	800feb4 <tu_fifo_write_n_const_addr_full_words+0x170>
  while(full_words--)
 800ff18:	4650      	mov	r0, sl
 800ff1a:	e7f4      	b.n	800ff06 <tu_fifo_write_n_const_addr_full_words+0x1c2>
 800ff1c:	4670      	mov	r0, lr
 800ff1e:	e758      	b.n	800fdd2 <tu_fifo_write_n_const_addr_full_words+0x8e>

0800ff20 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 800ff20:	4603      	mov	r3, r0
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800ff22:	2200      	movs	r2, #0
  f->wr_idx = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 800ff24:	2001      	movs	r0, #1
  f->rd_idx = 0;
 800ff26:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800ff28:	811a      	strh	r2, [r3, #8]
}
 800ff2a:	4770      	bx	lr

0800ff2c <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 800ff2c:	4603      	mov	r3, r0

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
 800ff2e:	2001      	movs	r0, #1
  f->overwritable = overwritable;
 800ff30:	79da      	ldrb	r2, [r3, #7]
 800ff32:	f361 12c7 	bfi	r2, r1, #7, #1
 800ff36:	71da      	strb	r2, [r3, #7]
}
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop

0800ff3c <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 800ff3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff40:	4b29      	ldr	r3, [pc, #164]	; (800ffe8 <configuration_reset+0xac>)
 800ff42:	4607      	mov	r7, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800ff44:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800fff8 <configuration_reset+0xbc>
 800ff48:	f898 2000 	ldrb.w	r2, [r8]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d03a      	beq.n	800ffc6 <configuration_reset+0x8a>
 800ff50:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800ff52:	4d26      	ldr	r5, [pc, #152]	; (800ffec <configuration_reset+0xb0>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ff54:	4e26      	ldr	r6, [pc, #152]	; (800fff0 <configuration_reset+0xb4>)
    drvid -= _app_driver_count;
 800ff56:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ff58:	42a2      	cmp	r2, r4
    drvid -= _app_driver_count;
 800ff5a:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ff5c:	d83d      	bhi.n	800ffda <configuration_reset+0x9e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff64:	d908      	bls.n	800ff78 <configuration_reset+0x3c>
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
 800ff66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ff6a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ff6e:	07db      	lsls	r3, r3, #31
 800ff70:	d500      	bpl.n	800ff74 <configuration_reset+0x38>
 800ff72:	be00      	bkpt	0x0000
  }

  tu_varclr(&_usbd_dev);
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
}
 800ff74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800ff78:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->reset(rhport);
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	4638      	mov	r0, r7
 800ff80:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800ff82:	3401      	adds	r4, #1
 800ff84:	f898 2000 	ldrb.w	r2, [r8]
 800ff88:	b2e4      	uxtb	r4, r4
 800ff8a:	1c53      	adds	r3, r2, #1
 800ff8c:	42a3      	cmp	r3, r4
 800ff8e:	dae2      	bge.n	800ff56 <configuration_reset+0x1a>
  tu_varclr(&_usbd_dev);
 800ff90:	4b18      	ldr	r3, [pc, #96]	; (800fff4 <configuration_reset+0xb8>)
 800ff92:	2237      	movs	r2, #55	; 0x37
 800ff94:	2100      	movs	r1, #0
 800ff96:	4618      	mov	r0, r3
 800ff98:	f002 f95f 	bl	801225a <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800ff9c:	f04f 32ff 	mov.w	r2, #4294967295
 800ffa0:	f8c0 2003 	str.w	r2, [r0, #3]
 800ffa4:	f8c0 2007 	str.w	r2, [r0, #7]
 800ffa8:	f8c0 200b 	str.w	r2, [r0, #11]
 800ffac:	f8c0 200f 	str.w	r2, [r0, #15]
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 800ffb0:	f8c0 2013 	str.w	r2, [r0, #19]
 800ffb4:	f8c0 2017 	str.w	r2, [r0, #23]
 800ffb8:	f8c0 201b 	str.w	r2, [r0, #27]
 800ffbc:	f8c0 201f 	str.w	r2, [r0, #31]
 800ffc0:	f8a0 2023 	strh.w	r2, [r0, #35]	; 0x23
 800ffc4:	e7d6      	b.n	800ff74 <configuration_reset+0x38>
    driver->reset(rhport);
 800ffc6:	f7fe fd3d 	bl	800ea44 <cdcd_reset>
 800ffca:	4638      	mov	r0, r7
 800ffcc:	f7fe ffb0 	bl	800ef30 <mscd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800ffd0:	f898 3000 	ldrb.w	r3, [r8]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d1c6      	bne.n	800ff66 <configuration_reset+0x2a>
 800ffd8:	e7da      	b.n	800ff90 <configuration_reset+0x54>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ffda:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ffde:	6833      	ldr	r3, [r6, #0]
    TU_ASSERT(driver, );
 800ffe0:	eb13 03c2 	adds.w	r3, r3, r2, lsl #3
 800ffe4:	d1ca      	bne.n	800ff7c <configuration_reset+0x40>
 800ffe6:	e7be      	b.n	800ff66 <configuration_reset+0x2a>
 800ffe8:	00000000 	.word	0x00000000
 800ffec:	08015a64 	.word	0x08015a64
 800fff0:	24002b04 	.word	0x24002b04
 800fff4:	24002b0c 	.word	0x24002b0c
 800fff8:	24002b08 	.word	0x24002b08

0800fffc <usbd_int_set>:

void usbd_int_set(bool enabled)
{
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 800fffc:	4b03      	ldr	r3, [pc, #12]	; (801000c <usbd_int_set+0x10>)
  if (enabled)
 800fffe:	b110      	cbz	r0, 8010006 <usbd_int_set+0xa>
    dcd_int_enable(_usbd_rhport);
 8010000:	7818      	ldrb	r0, [r3, #0]
 8010002:	f000 bfab 	b.w	8010f5c <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
 8010006:	7818      	ldrb	r0, [r3, #0]
 8010008:	f000 bfbe 	b.w	8010f88 <dcd_int_disable>
 801000c:	24000034 	.word	0x24000034

08010010 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
 8010010:	4b02      	ldr	r3, [pc, #8]	; (801001c <tud_mounted+0xc>)
 8010012:	7858      	ldrb	r0, [r3, #1]
}
 8010014:	3800      	subs	r0, #0
 8010016:	bf18      	it	ne
 8010018:	2001      	movne	r0, #1
 801001a:	4770      	bx	lr
 801001c:	24002b0c 	.word	0x24002b0c

08010020 <tud_suspended>:
  return _usbd_dev.suspended;
 8010020:	4b02      	ldr	r3, [pc, #8]	; (801002c <tud_suspended+0xc>)
 8010022:	7818      	ldrb	r0, [r3, #0]
}
 8010024:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	24002b0c 	.word	0x24002b0c

08010030 <tud_init>:
{
 8010030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8010034:	4f2e      	ldr	r7, [pc, #184]	; (80100f0 <tud_init+0xc0>)
  if ( tud_inited() ) return true;
 8010036:	783b      	ldrb	r3, [r7, #0]
 8010038:	2bff      	cmp	r3, #255	; 0xff
 801003a:	d002      	beq.n	8010042 <tud_init+0x12>
 801003c:	2001      	movs	r0, #1
}
 801003e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 8010042:	4e2c      	ldr	r6, [pc, #176]	; (80100f4 <tud_init+0xc4>)
  tu_varclr(&_usbd_dev);
 8010044:	2237      	movs	r2, #55	; 0x37
 8010046:	2100      	movs	r1, #0
 8010048:	4604      	mov	r4, r0
 801004a:	482b      	ldr	r0, [pc, #172]	; (80100f8 <tud_init+0xc8>)
 801004c:	f002 f905 	bl	801225a <memset>
 8010050:	1d30      	adds	r0, r6, #4
 8010052:	f7ff ff65 	bl	800ff20 <tu_fifo_clear>
  if ( usbd_app_driver_get_cb )
 8010056:	4d29      	ldr	r5, [pc, #164]	; (80100fc <tud_init+0xcc>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8010058:	4b29      	ldr	r3, [pc, #164]	; (8010100 <tud_init+0xd0>)
 801005a:	601e      	str	r6, [r3, #0]
  if ( usbd_app_driver_get_cb )
 801005c:	b125      	cbz	r5, 8010068 <tud_init+0x38>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 801005e:	4829      	ldr	r0, [pc, #164]	; (8010104 <tud_init+0xd4>)
 8010060:	f3af 8000 	nop.w
 8010064:	4b28      	ldr	r3, [pc, #160]	; (8010108 <tud_init+0xd8>)
 8010066:	6018      	str	r0, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010068:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8010104 <tud_init+0xd4>
 801006c:	f899 2000 	ldrb.w	r2, [r9]
 8010070:	b36d      	cbz	r5, 80100ce <tud_init+0x9e>
 8010072:	f04f 0800 	mov.w	r8, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010076:	4d25      	ldr	r5, [pc, #148]	; (801010c <tud_init+0xdc>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010078:	4e23      	ldr	r6, [pc, #140]	; (8010108 <tud_init+0xd8>)
    drvid -= _app_driver_count;
 801007a:	eba8 0302 	sub.w	r3, r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801007e:	4542      	cmp	r2, r8
    drvid -= _app_driver_count;
 8010080:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010082:	d82d      	bhi.n	80100e0 <tud_init+0xb0>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010084:	2b01      	cmp	r3, #1
 8010086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801008a:	d90a      	bls.n	80100a2 <tud_init+0x72>
    TU_ASSERT(driver);
 801008c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010090:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8010094:	f010 0001 	ands.w	r0, r0, #1
 8010098:	d0d1      	beq.n	801003e <tud_init+0xe>
 801009a:	be00      	bkpt	0x0000
 801009c:	2000      	movs	r0, #0
}
 801009e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80100a2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->init();
 80100a6:	681b      	ldr	r3, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80100a8:	f108 0801 	add.w	r8, r8, #1
    driver->init();
 80100ac:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80100ae:	f899 2000 	ldrb.w	r2, [r9]
 80100b2:	fa5f f888 	uxtb.w	r8, r8
 80100b6:	1c53      	adds	r3, r2, #1
 80100b8:	4543      	cmp	r3, r8
 80100ba:	dade      	bge.n	801007a <tud_init+0x4a>
  dcd_init(rhport);
 80100bc:	4620      	mov	r0, r4
  _usbd_rhport = rhport;
 80100be:	703c      	strb	r4, [r7, #0]
  dcd_init(rhport);
 80100c0:	f000 ffd6 	bl	8011070 <dcd_init>
  dcd_int_enable(rhport);
 80100c4:	4620      	mov	r0, r4
 80100c6:	f000 ff49 	bl	8010f5c <dcd_int_enable>
  return true;
 80100ca:	2001      	movs	r0, #1
 80100cc:	e7b7      	b.n	801003e <tud_init+0xe>
    driver->init();
 80100ce:	f7fe fc91 	bl	800e9f4 <cdcd_init>
 80100d2:	f7fe ff25 	bl	800ef20 <mscd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80100d6:	f899 3000 	ldrb.w	r3, [r9]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d1d6      	bne.n	801008c <tud_init+0x5c>
 80100de:	e7ed      	b.n	80100bc <tud_init+0x8c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80100e0:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80100e4:	6833      	ldr	r3, [r6, #0]
    TU_ASSERT(driver);
 80100e6:	eb13 03c2 	adds.w	r3, r3, r2, lsl #3
 80100ea:	d1dc      	bne.n	80100a6 <tud_init+0x76>
 80100ec:	e7ce      	b.n	801008c <tud_init+0x5c>
 80100ee:	bf00      	nop
 80100f0:	24000034 	.word	0x24000034
 80100f4:	24000024 	.word	0x24000024
 80100f8:	24002b0c 	.word	0x24002b0c
 80100fc:	00000000 	.word	0x00000000
 8010100:	24002b44 	.word	0x24002b44
 8010104:	24002b08 	.word	0x24002b08
 8010108:	24002b04 	.word	0x24002b04
 801010c:	08015a64 	.word	0x08015a64

08010110 <tud_task_ext>:
{
 8010110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8010114:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8010428 <tud_task_ext+0x318>
{
 8010118:	b08b      	sub	sp, #44	; 0x2c
  if ( !tud_inited() ) return;
 801011a:	f899 3000 	ldrb.w	r3, [r9]
 801011e:	2bff      	cmp	r3, #255	; 0xff
 8010120:	d052      	beq.n	80101c8 <tud_task_ext+0xb8>
 8010122:	4db9      	ldr	r5, [pc, #740]	; (8010408 <tud_task_ext+0x2f8>)
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010124:	f8df a304 	ldr.w	sl, [pc, #772]	; 801042c <tud_task_ext+0x31c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010128:	f8df b304 	ldr.w	fp, [pc, #772]	; 8010430 <tud_task_ext+0x320>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 801012c:	682e      	ldr	r6, [r5, #0]
  qhdl->interrupt_set(false);
 801012e:	2000      	movs	r0, #0
 8010130:	4634      	mov	r4, r6
 8010132:	f854 3b04 	ldr.w	r3, [r4], #4
 8010136:	4798      	blx	r3
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8010138:	a907      	add	r1, sp, #28
 801013a:	4620      	mov	r0, r4
 801013c:	f7ff fbba 	bl	800f8b4 <tu_fifo_read>
 8010140:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8010142:	6833      	ldr	r3, [r6, #0]
 8010144:	2001      	movs	r0, #1
 8010146:	4798      	blx	r3
 8010148:	2c00      	cmp	r4, #0
 801014a:	d03d      	beq.n	80101c8 <tud_task_ext+0xb8>
    switch ( event.event_id )
 801014c:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010150:	3b01      	subs	r3, #1
 8010152:	2b07      	cmp	r3, #7
 8010154:	f200 80c4 	bhi.w	80102e0 <tud_task_ext+0x1d0>
 8010158:	e8df f003 	tbb	[pc, r3]
 801015c:	94c2aab7 	.word	0x94c2aab7
 8010160:	040a3981 	.word	0x040a3981
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8010164:	9b08      	ldr	r3, [sp, #32]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d0e0      	beq.n	801012c <tud_task_ext+0x1c>
 801016a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801016c:	4798      	blx	r3
 801016e:	e7dd      	b.n	801012c <tud_task_ext+0x1c>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8010170:	f89d 1020 	ldrb.w	r1, [sp, #32]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8010174:	4ba5      	ldr	r3, [pc, #660]	; (801040c <tud_task_ext+0x2fc>)
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010176:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 801017a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801017e:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8010182:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010186:	f36f 0200 	bfc	r2, #0, #1
 801018a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 801018e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010192:	f36f 0282 	bfc	r2, #2, #1
 8010196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        if ( 0 == epnum )
 801019a:	2800      	cmp	r0, #0
 801019c:	f000 80bd 	beq.w	801031a <tud_task_ext+0x20a>
  if ( usbd_app_driver_get_cb )
 80101a0:	4a9b      	ldr	r2, [pc, #620]	; (8010410 <tud_task_ext+0x300>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80101a2:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
 80101a4:	b132      	cbz	r2, 80101b4 <tud_task_ext+0xa4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80101a6:	4a9b      	ldr	r2, [pc, #620]	; (8010414 <tud_task_ext+0x304>)
 80101a8:	7812      	ldrb	r2, [r2, #0]
 80101aa:	4293      	cmp	r3, r2
 80101ac:	f0c0 80ad 	bcc.w	801030a <tud_task_ext+0x1fa>
    drvid -= _app_driver_count;
 80101b0:	1a9b      	subs	r3, r3, r2
 80101b2:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	f240 809c 	bls.w	80102f2 <tud_task_ext+0x1e2>
          TU_ASSERT(driver, );
 80101ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80101be:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80101c2:	07da      	lsls	r2, r3, #31
 80101c4:	d500      	bpl.n	80101c8 <tud_task_ext+0xb8>
 80101c6:	be00      	bkpt	0x0000
}
 80101c8:	b00b      	add	sp, #44	; 0x2c
 80101ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _usbd_dev.connected = 1;
 80101ce:	4c8f      	ldr	r4, [pc, #572]	; (801040c <tud_task_ext+0x2fc>)
  usbd_control_set_complete_callback(NULL);
 80101d0:	2000      	movs	r0, #0
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80101d2:	f89d 801c 	ldrb.w	r8, [sp, #28]
        _usbd_dev.connected = 1;
 80101d6:	7823      	ldrb	r3, [r4, #0]
 80101d8:	f043 0301 	orr.w	r3, r3, #1
 80101dc:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 80101de:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80101e2:	f36f 0300 	bfc	r3, #0, #1
 80101e6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80101ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80101ee:	f36f 0382 	bfc	r3, #2, #1
 80101f2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 80101f6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80101fa:	f36f 0300 	bfc	r3, #0, #1
 80101fe:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8010202:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010206:	f36f 0382 	bfc	r3, #2, #1
 801020a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  usbd_control_set_complete_callback(NULL);
 801020e:	f000 fdfd 	bl	8010e0c <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8010212:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8010216:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801021a:	2a60      	cmp	r2, #96	; 0x60
 801021c:	d00d      	beq.n	801023a <tud_task_ext+0x12a>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 801021e:	2a40      	cmp	r2, #64	; 0x40
 8010220:	f000 8087 	beq.w	8010332 <tud_task_ext+0x222>
  switch ( p_request->bmRequestType_bit.recipient )
 8010224:	f003 031f 	and.w	r3, r3, #31
 8010228:	2b01      	cmp	r3, #1
 801022a:	f000 8103 	beq.w	8010434 <tud_task_ext+0x324>
 801022e:	2b02      	cmp	r3, #2
 8010230:	f000 80b0 	beq.w	8010394 <tud_task_ext+0x284>
 8010234:	2b00      	cmp	r3, #0
 8010236:	f000 808a 	beq.w	801034e <tud_task_ext+0x23e>
    default: TU_BREAKPOINT(); return false;
 801023a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801023e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010242:	07d9      	lsls	r1, r3, #31
 8010244:	d500      	bpl.n	8010248 <tud_task_ext+0x138>
 8010246:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
 8010248:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801024c:	2100      	movs	r1, #0
 801024e:	f001 f9e1 	bl	8011614 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8010252:	2180      	movs	r1, #128	; 0x80
 8010254:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010258:	f001 f9dc 	bl	8011614 <dcd_edpt_stall>
 801025c:	e766      	b.n	801012c <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 801025e:	4a6b      	ldr	r2, [pc, #428]	; (801040c <tud_task_ext+0x2fc>)
          if (tud_resume_cb) tud_resume_cb();
 8010260:	f04f 0301 	mov.w	r3, #1
 8010264:	496c      	ldr	r1, [pc, #432]	; (8010418 <tud_task_ext+0x308>)
        if ( _usbd_dev.connected )
 8010266:	7812      	ldrb	r2, [r2, #0]
 8010268:	f002 0201 	and.w	r2, r2, #1
          if (tud_resume_cb) tud_resume_cb();
 801026c:	2900      	cmp	r1, #0
 801026e:	d05e      	beq.n	801032e <tud_task_ext+0x21e>
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	f43f af5a 	beq.w	801012c <tud_task_ext+0x1c>
 8010278:	2a00      	cmp	r2, #0
 801027a:	f43f af57 	beq.w	801012c <tud_task_ext+0x1c>
 801027e:	f7f3 ffbb 	bl	80041f8 <tud_resume_cb>
 8010282:	e753      	b.n	801012c <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 8010284:	4c61      	ldr	r4, [pc, #388]	; (801040c <tud_task_ext+0x2fc>)
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8010286:	f04f 0301 	mov.w	r3, #1
 801028a:	4964      	ldr	r1, [pc, #400]	; (801041c <tud_task_ext+0x30c>)
        if ( _usbd_dev.connected )
 801028c:	7822      	ldrb	r2, [r4, #0]
 801028e:	f002 0201 	and.w	r2, r2, #1
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8010292:	2900      	cmp	r1, #0
 8010294:	d049      	beq.n	801032a <tud_task_ext+0x21a>
 8010296:	b2db      	uxtb	r3, r3
 8010298:	2b00      	cmp	r3, #0
 801029a:	f43f af47 	beq.w	801012c <tud_task_ext+0x1c>
 801029e:	2a00      	cmp	r2, #0
 80102a0:	f43f af44 	beq.w	801012c <tud_task_ext+0x1c>
 80102a4:	7820      	ldrb	r0, [r4, #0]
 80102a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80102aa:	f7f3 ffa3 	bl	80041f4 <tud_suspend_cb>
 80102ae:	e73d      	b.n	801012c <tud_task_ext+0x1c>
  configuration_reset(rhport);
 80102b0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80102b4:	f7ff fe42 	bl	800ff3c <configuration_reset>
  usbd_control_reset();
 80102b8:	f000 fd9e 	bl	8010df8 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 80102bc:	4b58      	ldr	r3, [pc, #352]	; (8010420 <tud_task_ext+0x310>)
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f43f af34 	beq.w	801012c <tud_task_ext+0x1c>
 80102c4:	f7f3 ff94 	bl	80041f0 <tud_umount_cb>
 80102c8:	e730      	b.n	801012c <tud_task_ext+0x1c>
  configuration_reset(rhport);
 80102ca:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80102ce:	f7ff fe35 	bl	800ff3c <configuration_reset>
  usbd_control_reset();
 80102d2:	f000 fd91 	bl	8010df8 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80102d6:	4b4d      	ldr	r3, [pc, #308]	; (801040c <tud_task_ext+0x2fc>)
 80102d8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80102dc:	709a      	strb	r2, [r3, #2]
      break;
 80102de:	e725      	b.n	801012c <tud_task_ext+0x1c>
        TU_BREAKPOINT();
 80102e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80102e4:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80102e8:	07db      	lsls	r3, r3, #31
 80102ea:	f57f af1f 	bpl.w	801012c <tud_task_ext+0x1c>
 80102ee:	be00      	bkpt	0x0000
  {
 80102f0:	e71c      	b.n	801012c <tud_task_ext+0x1c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80102f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80102f6:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80102fa:	691c      	ldr	r4, [r3, #16]
 80102fc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8010300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010302:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010306:	47a0      	blx	r4
 8010308:	e710      	b.n	801012c <tud_task_ext+0x1c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801030a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801030e:	f8db 2000 	ldr.w	r2, [fp]
          TU_ASSERT(driver, );
 8010312:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 8010316:	d1f0      	bne.n	80102fa <tud_task_ext+0x1ea>
 8010318:	e74f      	b.n	80101ba <tud_task_ext+0xaa>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 801031a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801031c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8010320:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010324:	f000 fd88 	bl	8010e38 <usbd_control_xfer_cb>
 8010328:	e700      	b.n	801012c <tud_task_ext+0x1c>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 801032a:	460b      	mov	r3, r1
 801032c:	e7b3      	b.n	8010296 <tud_task_ext+0x186>
          if (tud_resume_cb) tud_resume_cb();
 801032e:	460b      	mov	r3, r1
 8010330:	e79e      	b.n	8010270 <tud_task_ext+0x160>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8010332:	483c      	ldr	r0, [pc, #240]	; (8010424 <tud_task_ext+0x314>)
 8010334:	2800      	cmp	r0, #0
 8010336:	d087      	beq.n	8010248 <tud_task_ext+0x138>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8010338:	f000 fd68 	bl	8010e0c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 801033c:	4640      	mov	r0, r8
 801033e:	aa08      	add	r2, sp, #32
 8010340:	2101      	movs	r1, #1
 8010342:	f3af 8000 	nop.w
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010346:	2800      	cmp	r0, #0
 8010348:	f47f aef0 	bne.w	801012c <tud_task_ext+0x1c>
 801034c:	e77c      	b.n	8010248 <tud_task_ext+0x138>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 801034e:	2a20      	cmp	r2, #32
 8010350:	f000 80aa 	beq.w	80104a8 <tud_task_ext+0x398>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8010354:	2a00      	cmp	r2, #0
 8010356:	f47f af70 	bne.w	801023a <tud_task_ext+0x12a>
      switch ( p_request->bRequest )
 801035a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801035e:	2b09      	cmp	r3, #9
 8010360:	f63f af6b 	bhi.w	801023a <tud_task_ext+0x12a>
 8010364:	a201      	add	r2, pc, #4	; (adr r2, 801036c <tud_task_ext+0x25c>)
 8010366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801036a:	bf00      	nop
 801036c:	08010515 	.word	0x08010515
 8010370:	080105ff 	.word	0x080105ff
 8010374:	0801023b 	.word	0x0801023b
 8010378:	080105e3 	.word	0x080105e3
 801037c:	0801023b 	.word	0x0801023b
 8010380:	080105c9 	.word	0x080105c9
 8010384:	08010577 	.word	0x08010577
 8010388:	0801023b 	.word	0x0801023b
 801038c:	08010561 	.word	0x08010561
 8010390:	08010537 	.word	0x08010537
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8010394:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8010398:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 801039c:	2b08      	cmp	r3, #8
 801039e:	f63f af4c 	bhi.w	801023a <tud_task_ext+0x12a>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80103a2:	eb04 0043 	add.w	r0, r4, r3, lsl #1
  if ( usbd_app_driver_get_cb )
 80103a6:	4e1a      	ldr	r6, [pc, #104]	; (8010410 <tud_task_ext+0x300>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80103a8:	005b      	lsls	r3, r3, #1
 80103aa:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
 80103ae:	ea4f 1cd1 	mov.w	ip, r1, lsr #7
 80103b2:	7cc0      	ldrb	r0, [r0, #19]
  if ( usbd_app_driver_get_cb )
 80103b4:	b136      	cbz	r6, 80103c4 <tud_task_ext+0x2b4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80103b6:	4e17      	ldr	r6, [pc, #92]	; (8010414 <tud_task_ext+0x304>)
 80103b8:	7836      	ldrb	r6, [r6, #0]
 80103ba:	42b0      	cmp	r0, r6
 80103bc:	f0c0 8174 	bcc.w	80106a8 <tud_task_ext+0x598>
    drvid -= _app_driver_count;
 80103c0:	1b80      	subs	r0, r0, r6
 80103c2:	b2c0      	uxtb	r0, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80103c4:	2801      	cmp	r0, #1
 80103c6:	f240 8092 	bls.w	80104ee <tud_task_ext+0x3de>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80103ca:	2a00      	cmp	r2, #0
 80103cc:	f47f af3c 	bne.w	8010248 <tud_task_ext+0x138>
  return NULL;
 80103d0:	4616      	mov	r6, r2
        switch ( p_request->bRequest )
 80103d2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80103d6:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
 80103da:	2801      	cmp	r0, #1
 80103dc:	f000 817a 	beq.w	80106d4 <tud_task_ext+0x5c4>
 80103e0:	2a00      	cmp	r2, #0
 80103e2:	f47f af2a 	bne.w	801023a <tud_task_ext+0x12a>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80103e6:	4423      	add	r3, r4
            tud_control_xfer(rhport, p_request, &status, 2);
 80103e8:	4640      	mov	r0, r8
 80103ea:	f10d 021a 	add.w	r2, sp, #26
 80103ee:	a908      	add	r1, sp, #32
  return _usbd_dev.ep_status[epnum][dir].stalled;
 80103f0:	4463      	add	r3, ip
 80103f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80103f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80103fa:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
 80103fe:	2302      	movs	r3, #2
 8010400:	f000 fca0 	bl	8010d44 <tud_control_xfer>
          break;
 8010404:	e692      	b.n	801012c <tud_task_ext+0x1c>
 8010406:	bf00      	nop
 8010408:	24002b44 	.word	0x24002b44
 801040c:	24002b0c 	.word	0x24002b0c
 8010410:	00000000 	.word	0x00000000
 8010414:	24002b08 	.word	0x24002b08
 8010418:	080041f9 	.word	0x080041f9
 801041c:	080041f5 	.word	0x080041f5
 8010420:	080041f1 	.word	0x080041f1
 8010424:	00000000 	.word	0x00000000
 8010428:	24000034 	.word	0x24000034
 801042c:	08015a64 	.word	0x08015a64
 8010430:	24002b04 	.word	0x24002b04
 8010434:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8010438:	2b0f      	cmp	r3, #15
 801043a:	f63f af05 	bhi.w	8010248 <tud_task_ext+0x138>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801043e:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 8010440:	4abb      	ldr	r2, [pc, #748]	; (8010730 <tud_task_ext+0x620>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8010442:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 8010444:	b132      	cbz	r2, 8010454 <tud_task_ext+0x344>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010446:	4abb      	ldr	r2, [pc, #748]	; (8010734 <tud_task_ext+0x624>)
 8010448:	7812      	ldrb	r2, [r2, #0]
 801044a:	4293      	cmp	r3, r2
 801044c:	f0c0 8139 	bcc.w	80106c2 <tud_task_ext+0x5b2>
    drvid -= _app_driver_count;
 8010450:	1a9b      	subs	r3, r3, r2
 8010452:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010454:	2b01      	cmp	r3, #1
 8010456:	f63f aef7 	bhi.w	8010248 <tud_task_ext+0x138>
 801045a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801045e:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8010462:	68e0      	ldr	r0, [r4, #12]
 8010464:	f000 fcd2 	bl	8010e0c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010468:	68e3      	ldr	r3, [r4, #12]
 801046a:	aa08      	add	r2, sp, #32
 801046c:	2101      	movs	r1, #1
 801046e:	4640      	mov	r0, r8
 8010470:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
 8010472:	2800      	cmp	r0, #0
 8010474:	f47f ae5a 	bne.w	801012c <tud_task_ext+0x1c>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8010478:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801047c:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 8010480:	f47f aee2 	bne.w	8010248 <tud_task_ext+0x138>
        switch(p_request->bRequest)
 8010484:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010488:	3b0a      	subs	r3, #10
 801048a:	2b01      	cmp	r3, #1
 801048c:	f63f aedc 	bhi.w	8010248 <tud_task_ext+0x138>
            usbd_control_set_complete_callback(NULL);
 8010490:	f000 fcbc 	bl	8010e0c <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8010494:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010498:	2b0a      	cmp	r3, #10
 801049a:	f000 8173 	beq.w	8010784 <tud_task_ext+0x674>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 801049e:	a908      	add	r1, sp, #32
 80104a0:	4640      	mov	r0, r8
 80104a2:	f000 fc37 	bl	8010d14 <tud_control_status>
 80104a6:	e641      	b.n	801012c <tud_task_ext+0x1c>
 80104a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80104ac:	2b0f      	cmp	r3, #15
 80104ae:	f63f aecb 	bhi.w	8010248 <tud_task_ext+0x138>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80104b2:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 80104b4:	4a9e      	ldr	r2, [pc, #632]	; (8010730 <tud_task_ext+0x620>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80104b6:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 80104b8:	b132      	cbz	r2, 80104c8 <tud_task_ext+0x3b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80104ba:	4a9e      	ldr	r2, [pc, #632]	; (8010734 <tud_task_ext+0x624>)
 80104bc:	7812      	ldrb	r2, [r2, #0]
 80104be:	4293      	cmp	r3, r2
 80104c0:	f0c0 8140 	bcc.w	8010744 <tud_task_ext+0x634>
    drvid -= _app_driver_count;
 80104c4:	1a9b      	subs	r3, r3, r2
 80104c6:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	f63f aebd 	bhi.w	8010248 <tud_task_ext+0x138>
 80104ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80104d2:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80104d6:	68e0      	ldr	r0, [r4, #12]
 80104d8:	f000 fc98 	bl	8010e0c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80104dc:	68e3      	ldr	r3, [r4, #12]
 80104de:	4640      	mov	r0, r8
 80104e0:	aa08      	add	r2, sp, #32
 80104e2:	2101      	movs	r1, #1
 80104e4:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80104e6:	2800      	cmp	r0, #0
 80104e8:	f47f ae20 	bne.w	801012c <tud_task_ext+0x1c>
 80104ec:	e6ac      	b.n	8010248 <tud_task_ext+0x138>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80104ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80104f2:	eb0a 06c0 	add.w	r6, sl, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80104f6:	2a00      	cmp	r2, #0
 80104f8:	f43f af6b 	beq.w	80103d2 <tud_task_ext+0x2c2>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80104fc:	68f0      	ldr	r0, [r6, #12]
 80104fe:	f000 fc85 	bl	8010e0c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010502:	68f3      	ldr	r3, [r6, #12]
 8010504:	4640      	mov	r0, r8
 8010506:	aa08      	add	r2, sp, #32
 8010508:	2101      	movs	r1, #1
 801050a:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801050c:	2800      	cmp	r0, #0
 801050e:	f47f ae0d 	bne.w	801012c <tud_task_ext+0x1c>
 8010512:	e699      	b.n	8010248 <tud_task_ext+0x138>
          tud_control_xfer(rhport, p_request, &status, 2);
 8010514:	2302      	movs	r3, #2
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8010516:	7821      	ldrb	r1, [r4, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 8010518:	4640      	mov	r0, r8
 801051a:	f10d 021a 	add.w	r2, sp, #26
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 801051e:	fa21 f403 	lsr.w	r4, r1, r3
 8010522:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8010526:	401c      	ands	r4, r3
 8010528:	4321      	orrs	r1, r4
 801052a:	f8ad 101a 	strh.w	r1, [sp, #26]
          tud_control_xfer(rhport, p_request, &status, 2);
 801052e:	a908      	add	r1, sp, #32
 8010530:	f000 fc08 	bl	8010d44 <tud_control_xfer>
        break;
 8010534:	e5fa      	b.n	801012c <tud_task_ext+0x1c>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8010536:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
          if (_usbd_dev.cfg_num != cfg_num)
 801053a:	7863      	ldrb	r3, [r4, #1]
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 801053c:	9201      	str	r2, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 801053e:	429a      	cmp	r2, r3
 8010540:	d007      	beq.n	8010552 <tud_task_ext+0x442>
            if ( _usbd_dev.cfg_num )
 8010542:	7863      	ldrb	r3, [r4, #1]
 8010544:	2b00      	cmp	r3, #0
 8010546:	f040 816d 	bne.w	8010824 <tud_task_ext+0x714>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 801054a:	9b01      	ldr	r3, [sp, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	f040 8123 	bne.w	8010798 <tud_task_ext+0x688>
          _usbd_dev.cfg_num = cfg_num;
 8010552:	9b01      	ldr	r3, [sp, #4]
          tud_control_status(rhport, p_request);
 8010554:	4640      	mov	r0, r8
 8010556:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
 8010558:	7063      	strb	r3, [r4, #1]
          tud_control_status(rhport, p_request);
 801055a:	f000 fbdb 	bl	8010d14 <tud_control_status>
        break;
 801055e:	e5e5      	b.n	801012c <tud_task_ext+0x1c>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8010560:	7863      	ldrb	r3, [r4, #1]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8010562:	4640      	mov	r0, r8
 8010564:	f10d 021a 	add.w	r2, sp, #26
 8010568:	a908      	add	r1, sp, #32
          uint8_t cfg_num = _usbd_dev.cfg_num;
 801056a:	f88d 301a 	strb.w	r3, [sp, #26]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 801056e:	2301      	movs	r3, #1
 8010570:	f000 fbe8 	bl	8010d44 <tud_control_xfer>
        break;
 8010574:	e5da      	b.n	801012c <tud_task_ext+0x1c>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8010576:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 801057a:	0a03      	lsrs	r3, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 801057c:	b2c0      	uxtb	r0, r0
  switch(desc_type)
 801057e:	1e5a      	subs	r2, r3, #1
 8010580:	2a0e      	cmp	r2, #14
 8010582:	f63f ae61 	bhi.w	8010248 <tud_task_ext+0x138>
 8010586:	a101      	add	r1, pc, #4	; (adr r1, 801058c <tud_task_ext+0x47c>)
 8010588:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801058c:	08010647 	.word	0x08010647
 8010590:	0801061b 	.word	0x0801061b
 8010594:	08010685 	.word	0x08010685
 8010598:	08010249 	.word	0x08010249
 801059c:	08010249 	.word	0x08010249
 80105a0:	0801065f 	.word	0x0801065f
 80105a4:	0801061b 	.word	0x0801061b
 80105a8:	08010249 	.word	0x08010249
 80105ac:	08010249 	.word	0x08010249
 80105b0:	08010249 	.word	0x08010249
 80105b4:	08010249 	.word	0x08010249
 80105b8:	08010249 	.word	0x08010249
 80105bc:	08010249 	.word	0x08010249
 80105c0:	08010249 	.word	0x08010249
 80105c4:	08010695 	.word	0x08010695
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80105c8:	a808      	add	r0, sp, #32
 80105ca:	f000 fc25 	bl	8010e18 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80105ce:	4640      	mov	r0, r8
 80105d0:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 80105d4:	f000 fcf2 	bl	8010fbc <dcd_set_address>
          _usbd_dev.addressed = 1;
 80105d8:	7823      	ldrb	r3, [r4, #0]
 80105da:	f043 0302 	orr.w	r3, r3, #2
 80105de:	7023      	strb	r3, [r4, #0]
        break;
 80105e0:	e5a4      	b.n	801012c <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80105e2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	f47f ae2e 	bne.w	8010248 <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = true;
 80105ec:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80105ee:	4640      	mov	r0, r8
 80105f0:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = true;
 80105f2:	f043 0308 	orr.w	r3, r3, #8
 80105f6:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80105f8:	f000 fb8c 	bl	8010d14 <tud_control_status>
        break;
 80105fc:	e596      	b.n	801012c <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80105fe:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8010602:	2b01      	cmp	r3, #1
 8010604:	f47f ae20 	bne.w	8010248 <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = false;
 8010608:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 801060a:	4640      	mov	r0, r8
 801060c:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
 801060e:	f36f 03c3 	bfc	r3, #3, #1
 8010612:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 8010614:	f000 fb7e 	bl	8010d14 <tud_control_status>
        break;
 8010618:	e588      	b.n	801012c <tud_task_ext+0x1c>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 801061a:	2b02      	cmp	r3, #2
 801061c:	f000 8121 	beq.w	8010862 <tud_task_ext+0x752>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8010620:	4b45      	ldr	r3, [pc, #276]	; (8010738 <tud_task_ext+0x628>)
 8010622:	2b00      	cmp	r3, #0
 8010624:	f43f ae10 	beq.w	8010248 <tud_task_ext+0x138>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8010628:	f3af 8000 	nop.w
 801062c:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
 801062e:	2a00      	cmp	r2, #0
 8010630:	f43f ae03 	beq.w	801023a <tud_task_ext+0x12a>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8010634:	4640      	mov	r0, r8
 8010636:	8853      	ldrh	r3, [r2, #2]
 8010638:	a908      	add	r1, sp, #32
 801063a:	f000 fb83 	bl	8010d44 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801063e:	2800      	cmp	r0, #0
 8010640:	f47f ad74 	bne.w	801012c <tud_task_ext+0x1c>
 8010644:	e600      	b.n	8010248 <tud_task_ext+0x138>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8010646:	f7f3 fdd9 	bl	80041fc <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 801064a:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 801064c:	4602      	mov	r2, r0
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 801064e:	a908      	add	r1, sp, #32
 8010650:	4640      	mov	r0, r8
 8010652:	f000 fb77 	bl	8010d44 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010656:	2800      	cmp	r0, #0
 8010658:	f47f ad68 	bne.w	801012c <tud_task_ext+0x1c>
 801065c:	e5f4      	b.n	8010248 <tud_task_ext+0x138>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 801065e:	4b37      	ldr	r3, [pc, #220]	; (801073c <tud_task_ext+0x62c>)
 8010660:	2b00      	cmp	r3, #0
 8010662:	f43f adf1 	beq.w	8010248 <tud_task_ext+0x138>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8010666:	f3af 8000 	nop.w
      TU_VERIFY(desc_qualifier);
 801066a:	4602      	mov	r2, r0
 801066c:	2800      	cmp	r0, #0
 801066e:	f43f adeb 	beq.w	8010248 <tud_task_ext+0x138>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8010672:	4640      	mov	r0, r8
 8010674:	7813      	ldrb	r3, [r2, #0]
 8010676:	a908      	add	r1, sp, #32
 8010678:	f000 fb64 	bl	8010d44 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801067c:	2800      	cmp	r0, #0
 801067e:	f47f ad55 	bne.w	801012c <tud_task_ext+0x1c>
 8010682:	e5e1      	b.n	8010248 <tud_task_ext+0x138>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8010684:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8010688:	f7f3 fddc 	bl	8004244 <tud_descriptor_string_cb>
      TU_VERIFY(desc_str);
 801068c:	4602      	mov	r2, r0
 801068e:	2800      	cmp	r0, #0
 8010690:	d1ef      	bne.n	8010672 <tud_task_ext+0x562>
 8010692:	e5d9      	b.n	8010248 <tud_task_ext+0x138>
      if (!tud_descriptor_bos_cb) return false;
 8010694:	4b2a      	ldr	r3, [pc, #168]	; (8010740 <tud_task_ext+0x630>)
 8010696:	2b00      	cmp	r3, #0
 8010698:	f43f add6 	beq.w	8010248 <tud_task_ext+0x138>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 801069c:	f3af 8000 	nop.w
      TU_ASSERT(desc_bos);
 80106a0:	4602      	mov	r2, r0
 80106a2:	2800      	cmp	r0, #0
 80106a4:	d1c6      	bne.n	8010634 <tud_task_ext+0x524>
 80106a6:	e5c8      	b.n	801023a <tud_task_ext+0x12a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80106a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80106ac:	f8db 7000 	ldr.w	r7, [fp]
 80106b0:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80106b4:	2a00      	cmp	r2, #0
 80106b6:	f43f ae8c 	beq.w	80103d2 <tud_task_ext+0x2c2>
        TU_VERIFY(driver);
 80106ba:	2e00      	cmp	r6, #0
 80106bc:	f47f af1e 	bne.w	80104fc <tud_task_ext+0x3ec>
 80106c0:	e5c2      	b.n	8010248 <tud_task_ext+0x138>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80106c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80106c6:	f8db 2000 	ldr.w	r2, [fp]
      TU_VERIFY(driver);
 80106ca:	eb12 04c3 	adds.w	r4, r2, r3, lsl #3
 80106ce:	f43f adbb 	beq.w	8010248 <tud_task_ext+0x138>
 80106d2:	e6c6      	b.n	8010462 <tud_task_ext+0x352>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80106d4:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 80106d8:	b947      	cbnz	r7, 80106ec <tud_task_ext+0x5dc>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80106da:	2a01      	cmp	r2, #1
 80106dc:	d03b      	beq.n	8010756 <tud_task_ext+0x646>
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 80106de:	18e7      	adds	r7, r4, r3
 80106e0:	4467      	add	r7, ip
 80106e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80106e6:	3720      	adds	r7, #32
 80106e8:	079b      	lsls	r3, r3, #30
 80106ea:	d513      	bpl.n	8010714 <tud_task_ext+0x604>
            if (driver)
 80106ec:	2e00      	cmp	r6, #0
 80106ee:	f43f ad1d 	beq.w	801012c <tud_task_ext+0x1c>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80106f2:	68f0      	ldr	r0, [r6, #12]
 80106f4:	f000 fb8a 	bl	8010e0c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80106f8:	68f3      	ldr	r3, [r6, #12]
 80106fa:	aa08      	add	r2, sp, #32
 80106fc:	2101      	movs	r1, #1
 80106fe:	4640      	mov	r0, r8
 8010700:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
 8010702:	2000      	movs	r0, #0
 8010704:	f000 fb82 	bl	8010e0c <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8010708:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801070c:	07d8      	lsls	r0, r3, #31
 801070e:	f53f ad0d 	bmi.w	801012c <tud_task_ext+0x1c>
 8010712:	e6c4      	b.n	801049e <tud_task_ext+0x38e>
    dcd_edpt_stall(rhport, ep_addr);
 8010714:	f899 0000 	ldrb.w	r0, [r9]
 8010718:	f000 ff7c 	bl	8011614 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 801071c:	797b      	ldrb	r3, [r7, #5]
 801071e:	f043 0302 	orr.w	r3, r3, #2
 8010722:	717b      	strb	r3, [r7, #5]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8010724:	797b      	ldrb	r3, [r7, #5]
 8010726:	f043 0301 	orr.w	r3, r3, #1
 801072a:	717b      	strb	r3, [r7, #5]
 801072c:	e7de      	b.n	80106ec <tud_task_ext+0x5dc>
 801072e:	bf00      	nop
 8010730:	00000000 	.word	0x00000000
 8010734:	24002b08 	.word	0x24002b08
	...
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010744:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010748:	f8db 2000 	ldr.w	r2, [fp]
        TU_VERIFY(driver);
 801074c:	eb12 04c3 	adds.w	r4, r2, r3, lsl #3
 8010750:	f43f ad7a 	beq.w	8010248 <tud_task_ext+0x138>
 8010754:	e6bf      	b.n	80104d6 <tud_task_ext+0x3c6>
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8010756:	4423      	add	r3, r4
 8010758:	4463      	add	r3, ip
 801075a:	f103 0220 	add.w	r2, r3, #32
 801075e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010762:	0798      	lsls	r0, r3, #30
 8010764:	d5c2      	bpl.n	80106ec <tud_task_ext+0x5dc>
    dcd_edpt_clear_stall(rhport, ep_addr);
 8010766:	f899 0000 	ldrb.w	r0, [r9]
 801076a:	9200      	str	r2, [sp, #0]
 801076c:	f000 ffb0 	bl	80116d0 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8010770:	9a00      	ldr	r2, [sp, #0]
 8010772:	7953      	ldrb	r3, [r2, #5]
 8010774:	f367 0341 	bfi	r3, r7, #1, #1
 8010778:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 801077a:	7953      	ldrb	r3, [r2, #5]
 801077c:	f367 0300 	bfi	r3, r7, #0, #1
 8010780:	7153      	strb	r3, [r2, #5]
 8010782:	e7b3      	b.n	80106ec <tud_task_ext+0x5dc>
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8010784:	a908      	add	r1, sp, #32
 8010786:	4640      	mov	r0, r8
 8010788:	2301      	movs	r3, #1
 801078a:	f10d 021a 	add.w	r2, sp, #26
              uint8_t alternate = 0;
 801078e:	f88d 401a 	strb.w	r4, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8010792:	f000 fad7 	bl	8010d44 <tud_control_xfer>
 8010796:	e4c9      	b.n	801012c <tud_task_ext+0x1c>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8010798:	1e58      	subs	r0, r3, #1
 801079a:	b2c0      	uxtb	r0, r0
 801079c:	f7f3 fd40 	bl	8004220 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d036      	beq.n	8010812 <tud_task_ext+0x702>
 80107a4:	7843      	ldrb	r3, [r0, #1]
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	d133      	bne.n	8010812 <tud_task_ext+0x702>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80107aa:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80107ac:	f100 0709 	add.w	r7, r0, #9
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80107b0:	7821      	ldrb	r1, [r4, #0]
 80107b2:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80107b6:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80107ba:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80107be:	011b      	lsls	r3, r3, #4
 80107c0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80107c4:	430b      	orrs	r3, r1
 80107c6:	7023      	strb	r3, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80107c8:	8843      	ldrh	r3, [r0, #2]
 80107ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80107ce:	18c3      	adds	r3, r0, r3
 80107d0:	9404      	str	r4, [sp, #16]
 80107d2:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 80107d4:	9b03      	ldr	r3, [sp, #12]
 80107d6:	42bb      	cmp	r3, r7
 80107d8:	d97e      	bls.n	80108d8 <tud_task_ext+0x7c8>
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80107da:	787b      	ldrb	r3, [r7, #1]
 80107dc:	2b0b      	cmp	r3, #11
 80107de:	d076      	beq.n	80108ce <tud_task_ext+0x7be>
    uint8_t assoc_itf_count = 1;
 80107e0:	2301      	movs	r3, #1
 80107e2:	9300      	str	r3, [sp, #0]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 80107e4:	787b      	ldrb	r3, [r7, #1]
 80107e6:	2b04      	cmp	r3, #4
 80107e8:	d113      	bne.n	8010812 <tud_task_ext+0x702>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80107ea:	9b03      	ldr	r3, [sp, #12]
 80107ec:	494e      	ldr	r1, [pc, #312]	; (8010928 <tud_task_ext+0x818>)
 80107ee:	1bda      	subs	r2, r3, r7
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80107f0:	4b4e      	ldr	r3, [pc, #312]	; (801092c <tud_task_ext+0x81c>)
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80107f2:	b292      	uxth	r2, r2
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	2900      	cmp	r1, #0
 80107f8:	d078      	beq.n	80108ec <tud_task_ext+0x7dc>
 80107fa:	2600      	movs	r6, #0
 80107fc:	4639      	mov	r1, r7
 80107fe:	4617      	mov	r7, r2
 8010800:	46b0      	mov	r8, r6
    drvid -= _app_driver_count;
 8010802:	1af4      	subs	r4, r6, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010804:	429e      	cmp	r6, r3
    drvid -= _app_driver_count;
 8010806:	b2e4      	uxtb	r4, r4
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010808:	d359      	bcc.n	80108be <tud_task_ext+0x7ae>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801080a:	2c01      	cmp	r4, #1
 801080c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010810:	d911      	bls.n	8010836 <tud_task_ext+0x726>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8010812:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010816:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801081a:	07dc      	lsls	r4, r3, #31
 801081c:	f57f ad0d 	bpl.w	801023a <tud_task_ext+0x12a>
 8010820:	be00      	bkpt	0x0000
 8010822:	e50a      	b.n	801023a <tud_task_ext+0x12a>
              dcd_edpt_close_all(rhport);
 8010824:	4640      	mov	r0, r8
 8010826:	f000 fd8f 	bl	8011348 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 801082a:	78a6      	ldrb	r6, [r4, #2]
              configuration_reset(rhport);
 801082c:	4640      	mov	r0, r8
 801082e:	f7ff fb85 	bl	800ff3c <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 8010832:	70a6      	strb	r6, [r4, #2]
 8010834:	e689      	b.n	801054a <tud_task_ext+0x43a>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010836:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 801083a:	68a3      	ldr	r3, [r4, #8]
 801083c:	463a      	mov	r2, r7
 801083e:	9802      	ldr	r0, [sp, #8]
 8010840:	9105      	str	r1, [sp, #20]
 8010842:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010844:	2808      	cmp	r0, #8
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010846:	f106 0301 	add.w	r3, r6, #1
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 801084a:	9905      	ldr	r1, [sp, #20]
 801084c:	d901      	bls.n	8010852 <tud_task_ext+0x742>
 801084e:	4287      	cmp	r7, r0
 8010850:	d20d      	bcs.n	801086e <tud_task_ext+0x75e>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010852:	b2de      	uxtb	r6, r3
 8010854:	4b35      	ldr	r3, [pc, #212]	; (801092c <tud_task_ext+0x81c>)
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	46b0      	mov	r8, r6
 801085a:	1c5a      	adds	r2, r3, #1
 801085c:	42b2      	cmp	r2, r6
 801085e:	dad0      	bge.n	8010802 <tud_task_ext+0x6f2>
 8010860:	e7d7      	b.n	8010812 <tud_task_ext+0x702>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8010862:	f7f3 fcdd 	bl	8004220 <tud_descriptor_configuration_cb>
 8010866:	4602      	mov	r2, r0
 8010868:	e6e1      	b.n	801062e <tud_task_ext+0x51e>
 801086a:	461c      	mov	r4, r3
 801086c:	463e      	mov	r6, r7
        if ( assoc_itf_count == 1)
 801086e:	9b00      	ldr	r3, [sp, #0]
 8010870:	460f      	mov	r7, r1
 8010872:	2b01      	cmp	r3, #1
 8010874:	d106      	bne.n	8010884 <tud_task_ext+0x774>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8010876:	9900      	ldr	r1, [sp, #0]
 8010878:	68a2      	ldr	r2, [r4, #8]
 801087a:	4b2d      	ldr	r3, [pc, #180]	; (8010930 <tud_task_ext+0x820>)
 801087c:	429a      	cmp	r2, r3
 801087e:	bf08      	it	eq
 8010880:	2102      	moveq	r1, #2
 8010882:	9100      	str	r1, [sp, #0]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010884:	2200      	movs	r2, #0
 8010886:	e008      	b.n	801089a <tud_task_ext+0x78a>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8010888:	78b9      	ldrb	r1, [r7, #2]
 801088a:	440b      	add	r3, r1
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 801088c:	9904      	ldr	r1, [sp, #16]
 801088e:	fa51 f383 	uxtab	r3, r1, r3
 8010892:	78d9      	ldrb	r1, [r3, #3]
 8010894:	29ff      	cmp	r1, #255	; 0xff
 8010896:	d1bc      	bne.n	8010812 <tud_task_ext+0x702>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8010898:	70de      	strb	r6, [r3, #3]
 801089a:	b2d3      	uxtb	r3, r2
        for(uint8_t i=0; i<assoc_itf_count; i++)
 801089c:	9900      	ldr	r1, [sp, #0]
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 801089e:	3201      	adds	r2, #1
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80108a0:	4299      	cmp	r1, r3
 80108a2:	d8f1      	bhi.n	8010888 <tud_task_ext+0x778>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80108a4:	4633      	mov	r3, r6
 80108a6:	4639      	mov	r1, r7
 80108a8:	4602      	mov	r2, r0
        p_desc += drv_len;
 80108aa:	4407      	add	r7, r0
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80108ac:	4821      	ldr	r0, [pc, #132]	; (8010934 <tud_task_ext+0x824>)
 80108ae:	f001 fba7 	bl	8012000 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80108b2:	4b1e      	ldr	r3, [pc, #120]	; (801092c <tud_task_ext+0x81c>)
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	3301      	adds	r3, #1
 80108b8:	4543      	cmp	r3, r8
 80108ba:	da8b      	bge.n	80107d4 <tud_task_ext+0x6c4>
 80108bc:	e7a9      	b.n	8010812 <tud_task_ext+0x702>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80108be:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80108c2:	f8db 4000 	ldr.w	r4, [fp]
      TU_ASSERT(driver);
 80108c6:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 80108ca:	d1b6      	bne.n	801083a <tud_task_ext+0x72a>
 80108cc:	e7a1      	b.n	8010812 <tud_task_ext+0x702>
      assoc_itf_count = desc_iad->bInterfaceCount;
 80108ce:	78fa      	ldrb	r2, [r7, #3]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80108d0:	783b      	ldrb	r3, [r7, #0]
 80108d2:	9200      	str	r2, [sp, #0]
 80108d4:	441f      	add	r7, r3
 80108d6:	e785      	b.n	80107e4 <tud_task_ext+0x6d4>
  if (tud_mount_cb) tud_mount_cb();
 80108d8:	4b17      	ldr	r3, [pc, #92]	; (8010938 <tud_task_ext+0x828>)
 80108da:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80108de:	9c04      	ldr	r4, [sp, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f43f ae36 	beq.w	8010552 <tud_task_ext+0x442>
 80108e6:	f7f3 fc81 	bl	80041ec <tud_mount_cb>
 80108ea:	e632      	b.n	8010552 <tud_task_ext+0x442>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80108ec:	4688      	mov	r8, r1
 80108ee:	4c13      	ldr	r4, [pc, #76]	; (801093c <tud_task_ext+0x82c>)
 80108f0:	4639      	mov	r1, r7
 80108f2:	4616      	mov	r6, r2
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80108f4:	f1b8 0f02 	cmp.w	r8, #2
 80108f8:	fa5f f788 	uxtb.w	r7, r8
 80108fc:	d089      	beq.n	8010812 <tud_task_ext+0x702>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80108fe:	68a3      	ldr	r3, [r4, #8]
 8010900:	4632      	mov	r2, r6
 8010902:	9802      	ldr	r0, [sp, #8]
 8010904:	9105      	str	r1, [sp, #20]
 8010906:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010908:	4286      	cmp	r6, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801090a:	4623      	mov	r3, r4
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 801090c:	9905      	ldr	r1, [sp, #20]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801090e:	f104 0418 	add.w	r4, r4, #24
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010912:	d301      	bcc.n	8010918 <tud_task_ext+0x808>
 8010914:	2808      	cmp	r0, #8
 8010916:	d8a8      	bhi.n	801086a <tud_task_ext+0x75a>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010918:	4b04      	ldr	r3, [pc, #16]	; (801092c <tud_task_ext+0x81c>)
 801091a:	f108 0801 	add.w	r8, r8, #1
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	3301      	adds	r3, #1
 8010922:	4598      	cmp	r8, r3
 8010924:	dde6      	ble.n	80108f4 <tud_task_ext+0x7e4>
 8010926:	e774      	b.n	8010812 <tud_task_ext+0x702>
 8010928:	00000000 	.word	0x00000000
 801092c:	24002b08 	.word	0x24002b08
 8010930:	0800ea71 	.word	0x0800ea71
 8010934:	24002b1f 	.word	0x24002b1f
 8010938:	080041ed 	.word	0x080041ed
 801093c:	08015a64 	.word	0x08015a64

08010940 <dcd_event_handler>:
{
 8010940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (event->event_id)
 8010944:	7843      	ldrb	r3, [r0, #1]
{
 8010946:	b085      	sub	sp, #20
 8010948:	4605      	mov	r5, r0
 801094a:	460e      	mov	r6, r1
  switch (event->event_id)
 801094c:	3b02      	subs	r3, #2
 801094e:	2b03      	cmp	r3, #3
 8010950:	f200 80c3 	bhi.w	8010ada <dcd_event_handler+0x19a>
 8010954:	e8df f003 	tbb	[pc, r3]
 8010958:	021f4733 	.word	0x021f4733
      if ( _usbd_dev.connected )
 801095c:	4b62      	ldr	r3, [pc, #392]	; (8010ae8 <dcd_event_handler+0x1a8>)
 801095e:	781a      	ldrb	r2, [r3, #0]
 8010960:	07d1      	lsls	r1, r2, #31
 8010962:	d515      	bpl.n	8010990 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 0;
 8010964:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8010966:	4961      	ldr	r1, [pc, #388]	; (8010aec <dcd_event_handler+0x1ac>)
        _usbd_dev.suspended = 0;
 8010968:	f36f 0282 	bfc	r2, #2, #1
        osal_queue_send(_usbd_q, event, in_isr);
 801096c:	680f      	ldr	r7, [r1, #0]
        _usbd_dev.suspended = 0;
 801096e:	701a      	strb	r2, [r3, #0]
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8010970:	b9ee      	cbnz	r6, 80109ae <dcd_event_handler+0x6e>
  qhdl->interrupt_set(false);
 8010972:	463c      	mov	r4, r7
 8010974:	4630      	mov	r0, r6
 8010976:	f854 3b04 	ldr.w	r3, [r4], #4
 801097a:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 801097c:	4629      	mov	r1, r5
 801097e:	4620      	mov	r0, r4
 8010980:	f7ff f8fe 	bl	800fb80 <tu_fifo_write>
 8010984:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	2001      	movs	r0, #1
 801098a:	4798      	blx	r3

  if (!in_isr) {
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 801098c:	2c00      	cmp	r4, #0
 801098e:	d075      	beq.n	8010a7c <dcd_event_handler+0x13c>
}
 8010990:	b005      	add	sp, #20
 8010992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if ( _usbd_dev.connected )
 8010996:	4b54      	ldr	r3, [pc, #336]	; (8010ae8 <dcd_event_handler+0x1a8>)
 8010998:	781a      	ldrb	r2, [r3, #0]
 801099a:	07d0      	lsls	r0, r2, #31
 801099c:	d5f8      	bpl.n	8010990 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 1;
 801099e:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80109a0:	4952      	ldr	r1, [pc, #328]	; (8010aec <dcd_event_handler+0x1ac>)
        _usbd_dev.suspended = 1;
 80109a2:	f042 0204 	orr.w	r2, r2, #4
        osal_queue_send(_usbd_q, event, in_isr);
 80109a6:	680f      	ldr	r7, [r1, #0]
        _usbd_dev.suspended = 1;
 80109a8:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 80109aa:	2e00      	cmp	r6, #0
 80109ac:	d0e1      	beq.n	8010972 <dcd_event_handler+0x32>
  bool success = tu_fifo_write(&qhdl->ff, data);
 80109ae:	4629      	mov	r1, r5
 80109b0:	1d38      	adds	r0, r7, #4
 80109b2:	f7ff f8e5 	bl	800fb80 <tu_fifo_write>
 80109b6:	4604      	mov	r4, r0
  TU_ASSERT(success);
 80109b8:	2c00      	cmp	r4, #0
 80109ba:	d1e9      	bne.n	8010990 <dcd_event_handler+0x50>
 80109bc:	e05e      	b.n	8010a7c <dcd_event_handler+0x13c>
      _usbd_dev.connected  = 0;
 80109be:	4b4a      	ldr	r3, [pc, #296]	; (8010ae8 <dcd_event_handler+0x1a8>)
      _usbd_dev.cfg_num    = 0;
 80109c0:	2100      	movs	r1, #0
      _usbd_dev.connected  = 0;
 80109c2:	781a      	ldrb	r2, [r3, #0]
 80109c4:	f36f 0200 	bfc	r2, #0, #1
 80109c8:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 80109ca:	781a      	ldrb	r2, [r3, #0]
 80109cc:	f36f 0241 	bfc	r2, #1, #1
 80109d0:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 80109d2:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended  = 0;
 80109d4:	781a      	ldrb	r2, [r3, #0]
 80109d6:	f361 0282 	bfi	r2, r1, #2, #1
      osal_queue_send(_usbd_q, event, in_isr);
 80109da:	4944      	ldr	r1, [pc, #272]	; (8010aec <dcd_event_handler+0x1ac>)
      _usbd_dev.suspended  = 0;
 80109dc:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 80109de:	680f      	ldr	r7, [r1, #0]
  if (!in_isr) {
 80109e0:	2e00      	cmp	r6, #0
 80109e2:	d1e4      	bne.n	80109ae <dcd_event_handler+0x6e>
 80109e4:	e7c5      	b.n	8010972 <dcd_event_handler+0x32>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80109e6:	4f42      	ldr	r7, [pc, #264]	; (8010af0 <dcd_event_handler+0x1b0>)
 80109e8:	4c42      	ldr	r4, [pc, #264]	; (8010af4 <dcd_event_handler+0x1b4>)
 80109ea:	783a      	ldrb	r2, [r7, #0]
 80109ec:	2c00      	cmp	r4, #0
 80109ee:	d04d      	beq.n	8010a8c <dcd_event_handler+0x14c>
 80109f0:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80109f2:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8010af8 <dcd_event_handler+0x1b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80109f6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8010afc <dcd_event_handler+0x1bc>
 80109fa:	e004      	b.n	8010a06 <dcd_event_handler+0xc6>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80109fc:	3401      	adds	r4, #1
 80109fe:	1c53      	adds	r3, r2, #1
 8010a00:	b2e4      	uxtb	r4, r4
 8010a02:	42a3      	cmp	r3, r4
 8010a04:	db15      	blt.n	8010a32 <dcd_event_handler+0xf2>
    drvid -= _app_driver_count;
 8010a06:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010a08:	4294      	cmp	r4, r2
    drvid -= _app_driver_count;
 8010a0a:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010a0c:	d354      	bcc.n	8010ab8 <dcd_event_handler+0x178>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010a0e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 8010a18:	d8f0      	bhi.n	80109fc <dcd_event_handler+0xbc>
        if (driver && driver->sof)
 8010a1a:	694b      	ldr	r3, [r1, #20]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d0ed      	beq.n	80109fc <dcd_event_handler+0xbc>
          driver->sof(event->rhport, event->sof.frame_count);
 8010a20:	6869      	ldr	r1, [r5, #4]
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010a22:	3401      	adds	r4, #1
          driver->sof(event->rhport, event->sof.frame_count);
 8010a24:	7828      	ldrb	r0, [r5, #0]
 8010a26:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010a28:	783a      	ldrb	r2, [r7, #0]
 8010a2a:	b2e4      	uxtb	r4, r4
 8010a2c:	1c53      	adds	r3, r2, #1
 8010a2e:	42a3      	cmp	r3, r4
 8010a30:	dae9      	bge.n	8010a06 <dcd_event_handler+0xc6>
      if ( _usbd_dev.suspended )
 8010a32:	4b2d      	ldr	r3, [pc, #180]	; (8010ae8 <dcd_event_handler+0x1a8>)
 8010a34:	781a      	ldrb	r2, [r3, #0]
 8010a36:	0752      	lsls	r2, r2, #29
 8010a38:	d5aa      	bpl.n	8010990 <dcd_event_handler+0x50>
        _usbd_dev.suspended = 0;
 8010a3a:	781a      	ldrb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a3c:	2100      	movs	r1, #0
        _usbd_dev.suspended = 0;
 8010a3e:	f36f 0282 	bfc	r2, #2, #1
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a42:	9103      	str	r1, [sp, #12]
 8010a44:	e9cd 1101 	strd	r1, r1, [sp, #4]
        _usbd_dev.suspended = 0;
 8010a48:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a4a:	2105      	movs	r1, #5
 8010a4c:	782b      	ldrb	r3, [r5, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8010a4e:	4a27      	ldr	r2, [pc, #156]	; (8010aec <dcd_event_handler+0x1ac>)
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a50:	f88d 1005 	strb.w	r1, [sp, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8010a54:	6815      	ldr	r5, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8010a56:	f88d 3004 	strb.w	r3, [sp, #4]
 8010a5a:	2e00      	cmp	r6, #0
 8010a5c:	d134      	bne.n	8010ac8 <dcd_event_handler+0x188>
  qhdl->interrupt_set(false);
 8010a5e:	462c      	mov	r4, r5
 8010a60:	4630      	mov	r0, r6
 8010a62:	f854 3b04 	ldr.w	r3, [r4], #4
 8010a66:	4798      	blx	r3
  bool success = tu_fifo_write(&qhdl->ff, data);
 8010a68:	a901      	add	r1, sp, #4
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f7ff f888 	bl	800fb80 <tu_fifo_write>
 8010a70:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8010a72:	682b      	ldr	r3, [r5, #0]
 8010a74:	2001      	movs	r0, #1
 8010a76:	4798      	blx	r3
  TU_ASSERT(success);
 8010a78:	2c00      	cmp	r4, #0
 8010a7a:	d189      	bne.n	8010990 <dcd_event_handler+0x50>
 8010a7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010a80:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010a84:	07db      	lsls	r3, r3, #31
 8010a86:	d583      	bpl.n	8010990 <dcd_event_handler+0x50>
 8010a88:	be00      	bkpt	0x0000
}
 8010a8a:	e781      	b.n	8010990 <dcd_event_handler+0x50>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010a8c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8010af8 <dcd_event_handler+0x1b8>
 8010a90:	e004      	b.n	8010a9c <dcd_event_handler+0x15c>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010a92:	3401      	adds	r4, #1
 8010a94:	1c53      	adds	r3, r2, #1
 8010a96:	b2e4      	uxtb	r4, r4
 8010a98:	42a3      	cmp	r3, r4
 8010a9a:	dbca      	blt.n	8010a32 <dcd_event_handler+0xf2>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010a9c:	2c01      	cmp	r4, #1
 8010a9e:	d8f8      	bhi.n	8010a92 <dcd_event_handler+0x152>
 8010aa0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
        if (driver && driver->sof)
 8010aa4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8010aa8:	695b      	ldr	r3, [r3, #20]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d0f1      	beq.n	8010a92 <dcd_event_handler+0x152>
          driver->sof(event->rhport, event->sof.frame_count);
 8010aae:	6869      	ldr	r1, [r5, #4]
 8010ab0:	7828      	ldrb	r0, [r5, #0]
 8010ab2:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010ab4:	783a      	ldrb	r2, [r7, #0]
 8010ab6:	e7ec      	b.n	8010a92 <dcd_event_handler+0x152>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010ab8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010abc:	f8d9 1000 	ldr.w	r1, [r9]
        if (driver && driver->sof)
 8010ac0:	eb11 01c3 	adds.w	r1, r1, r3, lsl #3
 8010ac4:	d09a      	beq.n	80109fc <dcd_event_handler+0xbc>
 8010ac6:	e7a8      	b.n	8010a1a <dcd_event_handler+0xda>
  bool success = tu_fifo_write(&qhdl->ff, data);
 8010ac8:	a901      	add	r1, sp, #4
 8010aca:	1d28      	adds	r0, r5, #4
 8010acc:	f7ff f858 	bl	800fb80 <tu_fifo_write>
 8010ad0:	4604      	mov	r4, r0
  TU_ASSERT(success);
 8010ad2:	2c00      	cmp	r4, #0
 8010ad4:	f47f af5c 	bne.w	8010990 <dcd_event_handler+0x50>
 8010ad8:	e7d0      	b.n	8010a7c <dcd_event_handler+0x13c>
      osal_queue_send(_usbd_q, event, in_isr);
 8010ada:	4b04      	ldr	r3, [pc, #16]	; (8010aec <dcd_event_handler+0x1ac>)
 8010adc:	681f      	ldr	r7, [r3, #0]
  if (!in_isr) {
 8010ade:	2900      	cmp	r1, #0
 8010ae0:	f47f af65 	bne.w	80109ae <dcd_event_handler+0x6e>
 8010ae4:	e745      	b.n	8010972 <dcd_event_handler+0x32>
 8010ae6:	bf00      	nop
 8010ae8:	24002b0c 	.word	0x24002b0c
 8010aec:	24002b44 	.word	0x24002b44
 8010af0:	24002b08 	.word	0x24002b08
 8010af4:	00000000 	.word	0x00000000
 8010af8:	08015a64 	.word	0x08015a64
 8010afc:	24002b04 	.word	0x24002b04

08010b00 <usbd_open_edpt_pair>:
{
 8010b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b04:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  for(int i=0; i<ep_count; i++)
 8010b08:	2a00      	cmp	r2, #0
 8010b0a:	d046      	beq.n	8010b9a <usbd_open_edpt_pair+0x9a>
 8010b0c:	460c      	mov	r4, r1
 8010b0e:	461e      	mov	r6, r3
 8010b10:	4615      	mov	r5, r2
 8010b12:	f04f 0b00 	mov.w	fp, #0
  rhport = _usbd_rhport;
 8010b16:	4f23      	ldr	r7, [pc, #140]	; (8010ba4 <usbd_open_edpt_pair+0xa4>)
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010b18:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010ba8 <usbd_open_edpt_pair+0xa8>
 8010b1c:	e015      	b.n	8010b4a <usbd_open_edpt_pair+0x4a>
 8010b1e:	f899 1002 	ldrb.w	r1, [r9, #2]
 8010b22:	f001 fa39 	bl	8011f98 <tu_edpt_validate>
 8010b26:	4603      	mov	r3, r0
  return dcd_edpt_open(rhport, desc_ep);
 8010b28:	4621      	mov	r1, r4
 8010b2a:	4650      	mov	r0, sl
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010b2c:	b1eb      	cbz	r3, 8010b6a <usbd_open_edpt_pair+0x6a>
  return dcd_edpt_open(rhport, desc_ep);
 8010b2e:	f000 fb67 	bl	8011200 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010b32:	b308      	cbz	r0, 8010b78 <usbd_open_edpt_pair+0x78>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8010b34:	78a3      	ldrb	r3, [r4, #2]
 8010b36:	09da      	lsrs	r2, r3, #7
 8010b38:	d127      	bne.n	8010b8a <usbd_open_edpt_pair+0x8a>
  for(int i=0; i<ep_count; i++)
 8010b3a:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_out) = desc_ep->bEndpointAddress;
 8010b3e:	f888 3000 	strb.w	r3, [r8]
 8010b42:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
 8010b44:	45ab      	cmp	fp, r5
 8010b46:	441c      	add	r4, r3
 8010b48:	d027      	beq.n	8010b9a <usbd_open_edpt_pair+0x9a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010b4a:	7863      	ldrb	r3, [r4, #1]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010b4c:	4620      	mov	r0, r4
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010b4e:	2b05      	cmp	r3, #5
 8010b50:	d112      	bne.n	8010b78 <usbd_open_edpt_pair+0x78>
 8010b52:	78e1      	ldrb	r1, [r4, #3]
 8010b54:	f001 0103 	and.w	r1, r1, #3
 8010b58:	42b1      	cmp	r1, r6
 8010b5a:	d10d      	bne.n	8010b78 <usbd_open_edpt_pair+0x78>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010b5c:	78a3      	ldrb	r3, [r4, #2]
  rhport = _usbd_rhport;
 8010b5e:	f897 a000 	ldrb.w	sl, [r7]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8010b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b66:	2b08      	cmp	r3, #8
 8010b68:	d9d9      	bls.n	8010b1e <usbd_open_edpt_pair+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010b6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010b6e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010b72:	07da      	lsls	r2, r3, #31
 8010b74:	d500      	bpl.n	8010b78 <usbd_open_edpt_pair+0x78>
 8010b76:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010b78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010b7c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010b80:	07db      	lsls	r3, r3, #31
 8010b82:	d40d      	bmi.n	8010ba0 <usbd_open_edpt_pair+0xa0>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010b84:	2000      	movs	r0, #0
}
 8010b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (*ep_in) = desc_ep->bEndpointAddress;
 8010b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  for(int i=0; i<ep_count; i++)
 8010b8c:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_in) = desc_ep->bEndpointAddress;
 8010b90:	7013      	strb	r3, [r2, #0]
  for(int i=0; i<ep_count; i++)
 8010b92:	45ab      	cmp	fp, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010b94:	7823      	ldrb	r3, [r4, #0]
 8010b96:	441c      	add	r4, r3
 8010b98:	d1d7      	bne.n	8010b4a <usbd_open_edpt_pair+0x4a>
  return true;
 8010b9a:	2001      	movs	r0, #1
}
 8010b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8010ba0:	be00      	bkpt	0x0000
 8010ba2:	e7ef      	b.n	8010b84 <usbd_open_edpt_pair+0x84>
 8010ba4:	24000034 	.word	0x24000034
 8010ba8:	24002b0c 	.word	0x24002b0c

08010bac <usbd_edpt_open>:
{
 8010bac:	b538      	push	{r3, r4, r5, lr}
  rhport = _usbd_rhport;
 8010bae:	4b0f      	ldr	r3, [pc, #60]	; (8010bec <usbd_edpt_open+0x40>)
 8010bb0:	781d      	ldrb	r5, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010bb2:	788b      	ldrb	r3, [r1, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8010bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bb8:	2b08      	cmp	r3, #8
 8010bba:	d908      	bls.n	8010bce <usbd_edpt_open+0x22>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010bbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010bc0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010bc4:	07db      	lsls	r3, r3, #31
 8010bc6:	d500      	bpl.n	8010bca <usbd_edpt_open+0x1e>
 8010bc8:	be00      	bkpt	0x0000
}
 8010bca:	2000      	movs	r0, #0
 8010bcc:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010bce:	4b08      	ldr	r3, [pc, #32]	; (8010bf0 <usbd_edpt_open+0x44>)
 8010bd0:	460c      	mov	r4, r1
 8010bd2:	4608      	mov	r0, r1
 8010bd4:	7899      	ldrb	r1, [r3, #2]
 8010bd6:	f001 f9df 	bl	8011f98 <tu_edpt_validate>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d0ee      	beq.n	8010bbc <usbd_edpt_open+0x10>
  return dcd_edpt_open(rhport, desc_ep);
 8010bde:	4621      	mov	r1, r4
 8010be0:	4628      	mov	r0, r5
}
 8010be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
 8010be6:	f000 bb0b 	b.w	8011200 <dcd_edpt_open>
 8010bea:	bf00      	nop
 8010bec:	24000034 	.word	0x24000034
 8010bf0:	24002b0c 	.word	0x24002b0c

08010bf4 <usbd_edpt_claim>:
{
 8010bf4:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010bf6:	4805      	ldr	r0, [pc, #20]	; (8010c0c <usbd_edpt_claim+0x18>)
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010bf8:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010bfa:	09da      	lsrs	r2, r3, #7
 8010bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c00:	3225      	adds	r2, #37	; 0x25
 8010c02:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010c06:	4418      	add	r0, r3
 8010c08:	f001 b99a 	b.w	8011f40 <tu_edpt_claim>
 8010c0c:	24002b0c 	.word	0x24002b0c

08010c10 <usbd_edpt_release>:
{
 8010c10:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010c12:	4805      	ldr	r0, [pc, #20]	; (8010c28 <usbd_edpt_release+0x18>)
  return tu_edpt_release(ep_state, _usbd_mutex);
 8010c14:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010c16:	09da      	lsrs	r2, r3, #7
 8010c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c1c:	3225      	adds	r2, #37	; 0x25
 8010c1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
 8010c22:	4418      	add	r0, r3
 8010c24:	f001 b9a4 	b.w	8011f70 <tu_edpt_release>
 8010c28:	24002b0c 	.word	0x24002b0c

08010c2c <usbd_edpt_xfer>:
{
 8010c2c:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010c2e:	4c19      	ldr	r4, [pc, #100]	; (8010c94 <usbd_edpt_xfer+0x68>)
 8010c30:	f001 0e7f 	and.w	lr, r1, #127	; 0x7f
  rhport = _usbd_rhport;
 8010c34:	4818      	ldr	r0, [pc, #96]	; (8010c98 <usbd_edpt_xfer+0x6c>)
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010c36:	eb04 044e 	add.w	r4, r4, lr, lsl #1
  rhport = _usbd_rhport;
 8010c3a:	7800      	ldrb	r0, [r0, #0]
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010c3c:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
 8010c40:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
 8010c44:	3420      	adds	r4, #32
 8010c46:	f01c 0f01 	tst.w	ip, #1
 8010c4a:	d008      	beq.n	8010c5e <usbd_edpt_xfer+0x32>
 8010c4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010c50:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010c54:	07da      	lsls	r2, r3, #31
 8010c56:	d500      	bpl.n	8010c5a <usbd_edpt_xfer+0x2e>
 8010c58:	be00      	bkpt	0x0000
 8010c5a:	2000      	movs	r0, #0
}
 8010c5c:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8010c5e:	f894 c005 	ldrb.w	ip, [r4, #5]
 8010c62:	f04c 0c01 	orr.w	ip, ip, #1
 8010c66:	f884 c005 	strb.w	ip, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8010c6a:	f000 fbd5 	bl	8011418 <dcd_edpt_xfer>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d1f4      	bne.n	8010c5c <usbd_edpt_xfer+0x30>
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8010c72:	7963      	ldrb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010c74:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8010c78:	f360 0300 	bfi	r3, r0, #0, #1
 8010c7c:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8010c7e:	7963      	ldrb	r3, [r4, #5]
 8010c80:	f360 0382 	bfi	r3, r0, #2, #1
 8010c84:	7163      	strb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010c86:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8010c8a:	07db      	lsls	r3, r3, #31
 8010c8c:	d5e5      	bpl.n	8010c5a <usbd_edpt_xfer+0x2e>
 8010c8e:	be00      	bkpt	0x0000
}
 8010c90:	bd10      	pop	{r4, pc}
 8010c92:	bf00      	nop
 8010c94:	24002b0c 	.word	0x24002b0c
 8010c98:	24000034 	.word	0x24000034

08010c9c <usbd_edpt_busy>:
  return _usbd_dev.ep_status[epnum][dir].busy;
 8010c9c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8010ca0:	4b04      	ldr	r3, [pc, #16]	; (8010cb4 <usbd_edpt_busy+0x18>)
 8010ca2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010ca6:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 8010caa:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
}
 8010cae:	f000 0001 	and.w	r0, r0, #1
 8010cb2:	4770      	bx	lr
 8010cb4:	24002b0c 	.word	0x24002b0c

08010cb8 <usbd_edpt_stall>:
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8010cb8:	4b0d      	ldr	r3, [pc, #52]	; (8010cf0 <usbd_edpt_stall+0x38>)
 8010cba:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8010cbe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8010cc2:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8010cc6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010cca:	0792      	lsls	r2, r2, #30
 8010ccc:	d500      	bpl.n	8010cd0 <usbd_edpt_stall+0x18>
 8010cce:	4770      	bx	lr
{
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	f103 0420 	add.w	r4, r3, #32
  rhport = _usbd_rhport;
 8010cd6:	4b07      	ldr	r3, [pc, #28]	; (8010cf4 <usbd_edpt_stall+0x3c>)
    dcd_edpt_stall(rhport, ep_addr);
 8010cd8:	7818      	ldrb	r0, [r3, #0]
 8010cda:	f000 fc9b 	bl	8011614 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8010cde:	7963      	ldrb	r3, [r4, #5]
 8010ce0:	f043 0302 	orr.w	r3, r3, #2
 8010ce4:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8010ce6:	7963      	ldrb	r3, [r4, #5]
 8010ce8:	f043 0301 	orr.w	r3, r3, #1
 8010cec:	7163      	strb	r3, [r4, #5]
}
 8010cee:	bd10      	pop	{r4, pc}
 8010cf0:	24002b0c 	.word	0x24002b0c
 8010cf4:	24000034 	.word	0x24000034

08010cf8 <usbd_edpt_stalled>:
  return _usbd_dev.ep_status[epnum][dir].stalled;
 8010cf8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8010cfc:	4b04      	ldr	r3, [pc, #16]	; (8010d10 <usbd_edpt_stalled+0x18>)
 8010cfe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010d02:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 8010d06:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
}
 8010d0a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8010d0e:	4770      	bx	lr
 8010d10:	24002b0c 	.word	0x24002b0c

08010d14 <tud_control_status>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8010d14:	b410      	push	{r4}
  _ctrl_xfer.request       = (*request);
 8010d16:	4c0a      	ldr	r4, [pc, #40]	; (8010d40 <tud_control_status+0x2c>)
{
 8010d18:	460b      	mov	r3, r1
 8010d1a:	4684      	mov	ip, r0
  _ctrl_xfer.request       = (*request);
 8010d1c:	6808      	ldr	r0, [r1, #0]
 8010d1e:	4622      	mov	r2, r4
 8010d20:	6849      	ldr	r1, [r1, #4]
 8010d22:	c203      	stmia	r2!, {r0, r1}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010d24:	7819      	ldrb	r1, [r3, #0]
  _ctrl_xfer.buffer        = NULL;
 8010d26:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d28:	4660      	mov	r0, ip
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010d2a:	43c9      	mvns	r1, r1
  _ctrl_xfer.buffer        = NULL;
 8010d2c:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8010d2e:	60e3      	str	r3, [r4, #12]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d30:	461a      	mov	r2, r3
 8010d32:	f001 0180 	and.w	r1, r1, #128	; 0x80

  return _status_stage_xact(rhport, request);
}
 8010d36:	f85d 4b04 	ldr.w	r4, [sp], #4
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d3a:	f7ff bf77 	b.w	8010c2c <usbd_edpt_xfer>
 8010d3e:	bf00      	nop
 8010d40:	24002c08 	.word	0x24002c08

08010d44 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8010d44:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 8010d46:	4e2a      	ldr	r6, [pc, #168]	; (8010df0 <tud_control_xfer+0xac>)
{
 8010d48:	468c      	mov	ip, r1
 8010d4a:	4605      	mov	r5, r0
  _ctrl_xfer.request       = (*request);
 8010d4c:	6808      	ldr	r0, [r1, #0]
 8010d4e:	46b6      	mov	lr, r6
 8010d50:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8010d52:	60b2      	str	r2, [r6, #8]
{
 8010d54:	b082      	sub	sp, #8
  _ctrl_xfer.request       = (*request);
 8010d56:	e8ae 0003 	stmia.w	lr!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	81f1      	strh	r1, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8010d5e:	f8bc 0006 	ldrh.w	r0, [ip, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8010d62:	4283      	cmp	r3, r0
 8010d64:	bf28      	it	cs
 8010d66:	4603      	movcs	r3, r0
 8010d68:	81b3      	strh	r3, [r6, #12]

  if (request->wLength > 0U)
 8010d6a:	b188      	cbz	r0, 8010d90 <tud_control_xfer+0x4c>
  {
    if(_ctrl_xfer.data_len > 0U)
 8010d6c:	b32b      	cbz	r3, 8010dba <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8010d6e:	4614      	mov	r4, r2
 8010d70:	b342      	cbz	r2, 8010dc4 <tud_control_xfer+0x80>
 8010d72:	2b40      	cmp	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010d74:	f996 2000 	ldrsb.w	r2, [r6]
 8010d78:	bf28      	it	cs
 8010d7a:	2340      	movcs	r3, #64	; 0x40
 8010d7c:	2a00      	cmp	r2, #0
 8010d7e:	db2a      	blt.n	8010dd6 <tud_control_xfer+0x92>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010d80:	4a1c      	ldr	r2, [pc, #112]	; (8010df4 <tud_control_xfer+0xb0>)
 8010d82:	4628      	mov	r0, r5
 8010d84:	f7ff ff52 	bl	8010c2c <usbd_edpt_xfer>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8010d88:	b170      	cbz	r0, 8010da8 <tud_control_xfer+0x64>
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
 8010d8a:	2001      	movs	r0, #1
}
 8010d8c:	b002      	add	sp, #8
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010d90:	f89c 1000 	ldrb.w	r1, [ip]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d94:	4603      	mov	r3, r0
 8010d96:	4602      	mov	r2, r0
 8010d98:	4628      	mov	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010d9a:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d9c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010da0:	f7ff ff44 	bl	8010c2c <usbd_edpt_xfer>
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d1f0      	bne.n	8010d8a <tud_control_xfer+0x46>
 8010da8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010dac:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010db0:	07db      	lsls	r3, r3, #31
 8010db2:	d50d      	bpl.n	8010dd0 <tud_control_xfer+0x8c>
 8010db4:	be00      	bkpt	0x0000
}
 8010db6:	b002      	add	sp, #8
 8010db8:	bd70      	pop	{r4, r5, r6, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010dba:	7831      	ldrb	r1, [r6, #0]
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010dbc:	461a      	mov	r2, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010dbe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010dc2:	e7de      	b.n	8010d82 <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 8010dc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010dc8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010dcc:	07da      	lsls	r2, r3, #31
 8010dce:	d40c      	bmi.n	8010dea <tud_control_xfer+0xa6>
 8010dd0:	2000      	movs	r0, #0
}
 8010dd2:	b002      	add	sp, #8
 8010dd4:	bd70      	pop	{r4, r5, r6, pc}
  memcpy(dest, src, count);
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	4621      	mov	r1, r4
 8010dda:	4806      	ldr	r0, [pc, #24]	; (8010df4 <tud_control_xfer+0xb0>)
 8010ddc:	9301      	str	r3, [sp, #4]
 8010dde:	f001 fa75 	bl	80122cc <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8010de2:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010de4:	4a03      	ldr	r2, [pc, #12]	; (8010df4 <tud_control_xfer+0xb0>)
 8010de6:	9b01      	ldr	r3, [sp, #4]
 8010de8:	e7cb      	b.n	8010d82 <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 8010dea:	be00      	bkpt	0x0000
 8010dec:	4620      	mov	r0, r4
 8010dee:	e7cd      	b.n	8010d8c <tud_control_xfer+0x48>
 8010df0:	24002c08 	.word	0x24002c08
 8010df4:	24002c1c 	.word	0x24002c1c

08010df8 <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
 8010df8:	4b03      	ldr	r3, [pc, #12]	; (8010e08 <usbd_control_reset+0x10>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	e9c3 2200 	strd	r2, r2, [r3]
 8010e00:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8010e04:	611a      	str	r2, [r3, #16]
}
 8010e06:	4770      	bx	lr
 8010e08:	24002c08 	.word	0x24002c08

08010e0c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 8010e0c:	4b01      	ldr	r3, [pc, #4]	; (8010e14 <usbd_control_set_complete_callback+0x8>)
 8010e0e:	6118      	str	r0, [r3, #16]
}
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop
 8010e14:	24002c08 	.word	0x24002c08

08010e18 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8010e18:	b410      	push	{r4}
 8010e1a:	4602      	mov	r2, r0
  _ctrl_xfer.request       = (*request);
 8010e1c:	4c05      	ldr	r4, [pc, #20]	; (8010e34 <usbd_control_set_request+0x1c>)
 8010e1e:	6800      	ldr	r0, [r0, #0]
 8010e20:	4623      	mov	r3, r4
 8010e22:	6851      	ldr	r1, [r2, #4]
 8010e24:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8010e26:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8010e28:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 8010e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop
 8010e34:	24002c08 	.word	0x24002c08

08010e38 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8010e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010e3a:	4c45      	ldr	r4, [pc, #276]	; (8010f50 <usbd_control_xfer_cb+0x118>)
 8010e3c:	09c9      	lsrs	r1, r1, #7
{
 8010e3e:	b083      	sub	sp, #12
 8010e40:	4606      	mov	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010e42:	7822      	ldrb	r2, [r4, #0]
{
 8010e44:	461f      	mov	r7, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010e46:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
 8010e4a:	d01a      	beq.n	8010e82 <usbd_control_xfer_cb+0x4a>
  {
    TU_ASSERT(0 == xferred_bytes);
 8010e4c:	b14b      	cbz	r3, 8010e62 <usbd_control_xfer_cb+0x2a>
 8010e4e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010e52:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010e56:	07da      	lsls	r2, r3, #31
 8010e58:	d45f      	bmi.n	8010f1a <usbd_control_xfer_cb+0xe2>
 8010e5a:	2500      	movs	r5, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	b003      	add	sp, #12
 8010e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8010e62:	4b3c      	ldr	r3, [pc, #240]	; (8010f54 <usbd_control_xfer_cb+0x11c>)
 8010e64:	b113      	cbz	r3, 8010e6c <usbd_control_xfer_cb+0x34>
 8010e66:	4621      	mov	r1, r4
 8010e68:	f3af 8000 	nop.w
    if (_ctrl_xfer.complete_cb)
 8010e6c:	6923      	ldr	r3, [r4, #16]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d04f      	beq.n	8010f12 <usbd_control_xfer_cb+0xda>
    return true;
 8010e72:	2501      	movs	r5, #1
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8010e74:	4a36      	ldr	r2, [pc, #216]	; (8010f50 <usbd_control_xfer_cb+0x118>)
 8010e76:	2103      	movs	r1, #3
 8010e78:	4630      	mov	r0, r6
 8010e7a:	4798      	blx	r3
}
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	b003      	add	sp, #12
 8010e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8010e82:	f994 2000 	ldrsb.w	r2, [r4]
 8010e86:	2a00      	cmp	r2, #0
 8010e88:	db06      	blt.n	8010e98 <usbd_control_xfer_cb+0x60>
    TU_VERIFY(_ctrl_xfer.buffer);
 8010e8a:	68a0      	ldr	r0, [r4, #8]
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d0e4      	beq.n	8010e5a <usbd_control_xfer_cb+0x22>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8010e90:	461a      	mov	r2, r3
 8010e92:	4931      	ldr	r1, [pc, #196]	; (8010f58 <usbd_control_xfer_cb+0x120>)
 8010e94:	f001 fa1a 	bl	80122cc <memcpy>
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010e98:	89e0      	ldrh	r0, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010e9a:	88e5      	ldrh	r5, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010e9c:	4438      	add	r0, r7
  _ctrl_xfer.buffer += xferred_bytes;
 8010e9e:	68a1      	ldr	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010ea0:	b280      	uxth	r0, r0
  _ctrl_xfer.buffer += xferred_bytes;
 8010ea2:	4439      	add	r1, r7
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010ea4:	4285      	cmp	r5, r0
 8010ea6:	bf18      	it	ne
 8010ea8:	2f3f      	cmpne	r7, #63	; 0x3f
  _ctrl_xfer.buffer += xferred_bytes;
 8010eaa:	60a1      	str	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010eac:	81e0      	strh	r0, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010eae:	bf94      	ite	ls
 8010eb0:	2501      	movls	r5, #1
 8010eb2:	2500      	movhi	r5, #0
 8010eb4:	d819      	bhi.n	8010eea <usbd_control_xfer_cb+0xb2>
    if ( _ctrl_xfer.complete_cb )
 8010eb6:	6923      	ldr	r3, [r4, #16]
 8010eb8:	b123      	cbz	r3, 8010ec4 <usbd_control_xfer_cb+0x8c>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8010eba:	4a25      	ldr	r2, [pc, #148]	; (8010f50 <usbd_control_xfer_cb+0x118>)
 8010ebc:	2102      	movs	r1, #2
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	4798      	blx	r3
    if ( is_ok )
 8010ec2:	b360      	cbz	r0, 8010f1e <usbd_control_xfer_cb+0xe6>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010ec4:	7821      	ldrb	r1, [r4, #0]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	4630      	mov	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010eca:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010ecc:	461a      	mov	r2, r3
 8010ece:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010ed2:	f7ff feab 	bl	8010c2c <usbd_edpt_xfer>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8010ed6:	4605      	mov	r5, r0
 8010ed8:	b9d8      	cbnz	r0, 8010f12 <usbd_control_xfer_cb+0xda>
    TU_ASSERT( _data_stage_xact(rhport) );
 8010eda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010ede:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010ee2:	07db      	lsls	r3, r3, #31
 8010ee4:	d5b9      	bpl.n	8010e5a <usbd_control_xfer_cb+0x22>
 8010ee6:	be00      	bkpt	0x0000
 8010ee8:	e7b8      	b.n	8010e5c <usbd_control_xfer_cb+0x24>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8010eea:	89a2      	ldrh	r2, [r4, #12]
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010eec:	f994 4000 	ldrsb.w	r4, [r4]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8010ef0:	1a13      	subs	r3, r2, r0
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	2b40      	cmp	r3, #64	; 0x40
 8010ef6:	bf28      	it	cs
 8010ef8:	2340      	movcs	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010efa:	2c00      	cmp	r4, #0
 8010efc:	db18      	blt.n	8010f30 <usbd_control_xfer_cb+0xf8>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010efe:	4290      	cmp	r0, r2
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8010f00:	4629      	mov	r1, r5
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010f02:	d023      	beq.n	8010f4c <usbd_control_xfer_cb+0x114>
 8010f04:	4a14      	ldr	r2, [pc, #80]	; (8010f58 <usbd_control_xfer_cb+0x120>)
 8010f06:	4630      	mov	r0, r6
 8010f08:	f7ff fe90 	bl	8010c2c <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d0e3      	beq.n	8010eda <usbd_control_xfer_cb+0xa2>
    return true;
 8010f12:	2501      	movs	r5, #1
}
 8010f14:	4628      	mov	r0, r5
 8010f16:	b003      	add	sp, #12
 8010f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_ASSERT(0 == xferred_bytes);
 8010f1a:	be00      	bkpt	0x0000
 8010f1c:	e79d      	b.n	8010e5a <usbd_control_xfer_cb+0x22>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8010f1e:	4601      	mov	r1, r0
 8010f20:	4630      	mov	r0, r6
 8010f22:	f000 fb77 	bl	8011614 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8010f26:	2180      	movs	r1, #128	; 0x80
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f000 fb73 	bl	8011614 <dcd_edpt_stall>
 8010f2e:	e795      	b.n	8010e5c <usbd_control_xfer_cb+0x24>
    if ( xact_len ) {
 8010f30:	4290      	cmp	r0, r2
 8010f32:	d008      	beq.n	8010f46 <usbd_control_xfer_cb+0x10e>
  memcpy(dest, src, count);
 8010f34:	461a      	mov	r2, r3
 8010f36:	4808      	ldr	r0, [pc, #32]	; (8010f58 <usbd_control_xfer_cb+0x120>)
 8010f38:	9301      	str	r3, [sp, #4]
 8010f3a:	f001 f9c7 	bl	80122cc <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8010f3e:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010f40:	4a05      	ldr	r2, [pc, #20]	; (8010f58 <usbd_control_xfer_cb+0x120>)
 8010f42:	9b01      	ldr	r3, [sp, #4]
 8010f44:	e7df      	b.n	8010f06 <usbd_control_xfer_cb+0xce>
    ep_addr = EDPT_CTRL_IN;
 8010f46:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010f48:	462a      	mov	r2, r5
 8010f4a:	e7dc      	b.n	8010f06 <usbd_control_xfer_cb+0xce>
 8010f4c:	462a      	mov	r2, r5
 8010f4e:	e7da      	b.n	8010f06 <usbd_control_xfer_cb+0xce>
 8010f50:	24002c08 	.word	0x24002c08
 8010f54:	00000000 	.word	0x00000000
 8010f58:	24002c1c 	.word	0x24002c1c

08010f5c <dcd_int_enable>:
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE
static inline void dwc2_dcd_int_enable(uint8_t rhport)
{
  NVIC_EnableIRQ((IRQn_Type)_dwc2_controller[rhport].irqnum);
 8010f5c:	4b08      	ldr	r3, [pc, #32]	; (8010f80 <dcd_int_enable+0x24>)
 8010f5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8010f62:	6842      	ldr	r2, [r0, #4]
 8010f64:	b213      	sxth	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	db08      	blt.n	8010f7c <dcd_int_enable+0x20>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010f6a:	2101      	movs	r1, #1
 8010f6c:	f002 021f 	and.w	r2, r2, #31
 8010f70:	095b      	lsrs	r3, r3, #5
 8010f72:	4804      	ldr	r0, [pc, #16]	; (8010f84 <dcd_int_enable+0x28>)
 8010f74:	fa01 f202 	lsl.w	r2, r1, r2
 8010f78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}

void dcd_int_enable (uint8_t rhport)
{
  dwc2_dcd_int_enable(rhport);
}
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop
 8010f80:	08015a94 	.word	0x08015a94
 8010f84:	e000e100 	.word	0xe000e100

08010f88 <dcd_int_disable>:
}

TU_ATTR_ALWAYS_INLINE
static inline void dwc2_dcd_int_disable (uint8_t rhport)
{
  NVIC_DisableIRQ((IRQn_Type)_dwc2_controller[rhport].irqnum);
 8010f88:	4b0a      	ldr	r3, [pc, #40]	; (8010fb4 <dcd_int_disable+0x2c>)
 8010f8a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8010f8e:	6842      	ldr	r2, [r0, #4]
 8010f90:	b213      	sxth	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	db0d      	blt.n	8010fb2 <dcd_int_disable+0x2a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010f96:	2101      	movs	r1, #1
 8010f98:	095b      	lsrs	r3, r3, #5
 8010f9a:	f002 021f 	and.w	r2, r2, #31
 8010f9e:	4806      	ldr	r0, [pc, #24]	; (8010fb8 <dcd_int_disable+0x30>)
 8010fa0:	3320      	adds	r3, #32
 8010fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8010fa6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010faa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010fae:	f3bf 8f6f 	isb	sy

void dcd_int_disable (uint8_t rhport)
{
  dwc2_dcd_int_disable(rhport);
}
 8010fb2:	4770      	bx	lr
 8010fb4:	08015a94 	.word	0x08015a94
 8010fb8:	e000e100 	.word	0xe000e100

08010fbc <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8010fbc:	0100      	lsls	r0, r0, #4
 8010fbe:	4b1d      	ldr	r3, [pc, #116]	; (8011034 <dcd_set_address+0x78>)
 8010fc0:	581b      	ldr	r3, [r3, r0]
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
  xfer->buffer      = buffer;
 8010fc2:	2000      	movs	r0, #0
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8010fc4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8010fc8:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
{
 8010fcc:	b430      	push	{r4, r5}
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8010fce:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8010fd2:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  xfer->buffer      = buffer;
 8010fd6:	4c18      	ldr	r4, [pc, #96]	; (8011038 <dcd_set_address+0x7c>)
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8010fd8:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
  xfer->buffer      = buffer;
 8010fdc:	2100      	movs	r1, #0
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8010fde:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8010fe2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8010fe6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8010fea:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8010fee:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8010ff2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  xfer->buffer      = buffer;
 8010ff6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8010ffa:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
  xfer->ff          = NULL;
  xfer->total_len   = total_bytes;
 8010ffe:	f04f 0100 	mov.w	r1, #0

  // EP0 can only handle one packet
  if(epnum == 0)
  {
    ep0_pending[dir] = total_bytes;
 8011002:	480e      	ldr	r0, [pc, #56]	; (801103c <dcd_set_address+0x80>)
  xfer->total_len   = total_bytes;
 8011004:	8321      	strh	r1, [r4, #24]
    ep0_pending[dir] = total_bytes;
 8011006:	8041      	strh	r1, [r0, #2]
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011008:	d001      	beq.n	801100e <dcd_set_address+0x52>
}
 801100a:	bc30      	pop	{r4, r5}
 801100c:	4770      	bx	lr
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 801100e:	7f22      	ldrb	r2, [r4, #28]
 8011010:	2a01      	cmp	r2, #1
 8011012:	d1fa      	bne.n	801100a <dcd_set_address+0x4e>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011014:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8011018:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 801101c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8011020:	bf14      	ite	ne
 8011022:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 8011026:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 801102a:	430a      	orrs	r2, r1
 801102c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8011030:	e7eb      	b.n	801100a <dcd_set_address+0x4e>
 8011032:	bf00      	nop
 8011034:	08015a94 	.word	0x08015a94
 8011038:	24002c70 	.word	0x24002c70
 801103c:	24002c6c 	.word	0x24002c6c

08011040 <dcd_connect>:
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011040:	4b04      	ldr	r3, [pc, #16]	; (8011054 <dcd_connect+0x14>)
 8011042:	0100      	lsls	r0, r0, #4
 8011044:	581a      	ldr	r2, [r3, r0]
  dwc2->dctl &= ~DCTL_SDIS;
 8011046:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 801104a:	f023 0302 	bic.w	r3, r3, #2
 801104e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 8011052:	4770      	bx	lr
 8011054:	08015a94 	.word	0x08015a94

08011058 <dcd_disconnect>:
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011058:	4b04      	ldr	r3, [pc, #16]	; (801106c <dcd_disconnect+0x14>)
 801105a:	0100      	lsls	r0, r0, #4
 801105c:	581a      	ldr	r2, [r3, r0]
  dwc2->dctl |= DCTL_SDIS;
 801105e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8011062:	f043 0302 	orr.w	r3, r3, #2
 8011066:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 801106a:	4770      	bx	lr
 801106c:	08015a94 	.word	0x08015a94

08011070 <dcd_init>:
{
 8011070:	b538      	push	{r3, r4, r5, lr}
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011072:	4c56      	ldr	r4, [pc, #344]	; (80111cc <dcd_init+0x15c>)
{
 8011074:	4605      	mov	r5, r0
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011076:	0100      	lsls	r0, r0, #4
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8011078:	4b55      	ldr	r3, [pc, #340]	; (80111d0 <dcd_init+0x160>)
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 801107a:	4956      	ldr	r1, [pc, #344]	; (80111d4 <dcd_init+0x164>)
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801107c:	5824      	ldr	r4, [r4, r0]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 801107e:	4a56      	ldr	r2, [pc, #344]	; (80111d8 <dcd_init+0x168>)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8011080:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011082:	4003      	ands	r3, r0
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 8011084:	428b      	cmp	r3, r1
 8011086:	bf18      	it	ne
 8011088:	4293      	cmpne	r3, r2
 801108a:	d003      	beq.n	8011094 <dcd_init+0x24>
 801108c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8011090:	4293      	cmp	r3, r2
 8011092:	d17d      	bne.n	8011190 <dcd_init+0x120>
  dcd_disconnect(rhport);
 8011094:	4628      	mov	r0, r5
 8011096:	f7ff ffdf 	bl	8011058 <dcd_disconnect>
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 801109a:	68e3      	ldr	r3, [r4, #12]
 801109c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110a0:	60e3      	str	r3, [r4, #12]
static inline void dwc2_phy_init(dwc2_regs_t * dwc2, uint8_t hs_phy_type)
{
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
  {
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 80110a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80110a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80110a8:	63a3      	str	r3, [r4, #56]	; 0x38
	while ( !(dwc2->grstctl & GRSTCTL_AHBIDL) ) { }
 80110aa:	6923      	ldr	r3, [r4, #16]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	dafc      	bge.n	80110aa <dcd_init+0x3a>
	dwc2->grstctl |= GRSTCTL_CSRST;
 80110b0:	6923      	ldr	r3, [r4, #16]
 80110b2:	f043 0301 	orr.w	r3, r3, #1
 80110b6:	6123      	str	r3, [r4, #16]
	while (dwc2->grstctl & GRSTCTL_CSRST) { }
 80110b8:	6923      	ldr	r3, [r4, #16]
 80110ba:	07db      	lsls	r3, r3, #31
 80110bc:	d4fc      	bmi.n	80110b8 <dcd_init+0x48>
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 80110be:	68e3      	ldr	r3, [r4, #12]
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
  {
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if ( SystemCoreClock >= 32000000u )
 80110c0:	4a46      	ldr	r2, [pc, #280]	; (80111dc <dcd_init+0x16c>)
 80110c2:	4947      	ldr	r1, [pc, #284]	; (80111e0 <dcd_init+0x170>)
 80110c4:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80110c8:	6812      	ldr	r2, [r2, #0]
 80110ca:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80110ce:	428a      	cmp	r2, r1
 80110d0:	60e3      	str	r3, [r4, #12]
 80110d2:	d33a      	bcc.n	801114a <dcd_init+0xda>
 80110d4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    else if ( SystemCoreClock >= 15000000u )
      turnaround = 0xEu;
    else
      turnaround = 0xFu;

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 80110d8:	68e3      	ldr	r3, [r4, #12]
  dcd_connect(rhport);
 80110da:	4628      	mov	r0, r5
  dwc2->gintmsk = GINTMSK_OTGINT   | GINTMSK_MMISM  | GINTMSK_RXFLVLM  |
 80110dc:	4941      	ldr	r1, [pc, #260]	; (80111e4 <dcd_init+0x174>)
 80110de:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80110e2:	4313      	orrs	r3, r2
 80110e4:	60e3      	str	r3, [r4, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 80110e6:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80110ea:	f043 0303 	orr.w	r3, r3, #3
 80110ee:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 80110f2:	f8d4 3e00 	ldr.w	r3, [r4, #3584]	; 0xe00
 80110f6:	f023 030f 	bic.w	r3, r3, #15
 80110fa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 80110fe:	68e3      	ldr	r3, [r4, #12]
 8011100:	f043 0307 	orr.w	r3, r3, #7
 8011104:	60e3      	str	r3, [r4, #12]
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8011106:	68e3      	ldr	r3, [r4, #12]
 8011108:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801110c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011110:	60e3      	str	r3, [r4, #12]
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8011112:	6823      	ldr	r3, [r4, #0]
 8011114:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8011118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801111c:	6023      	str	r3, [r4, #0]
  dwc2->dcfg |= DCFG_NZLSOHSK;
 801111e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8011122:	f043 0304 	orr.w	r3, r3, #4
 8011126:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  uint32_t int_mask = dwc2->gintsts;
 801112a:	6962      	ldr	r2, [r4, #20]
  dwc2->gintsts |= int_mask;
 801112c:	6963      	ldr	r3, [r4, #20]
 801112e:	4313      	orrs	r3, r2
 8011130:	6163      	str	r3, [r4, #20]
  int_mask = dwc2->gotgint;
 8011132:	6862      	ldr	r2, [r4, #4]
  dwc2->gotgint |= int_mask;
 8011134:	6863      	ldr	r3, [r4, #4]
 8011136:	4313      	orrs	r3, r2
 8011138:	6063      	str	r3, [r4, #4]
  dwc2->gintmsk = GINTMSK_OTGINT   | GINTMSK_MMISM  | GINTMSK_RXFLVLM  |
 801113a:	61a1      	str	r1, [r4, #24]
  dwc2->gahbcfg |= GAHBCFG_GINT;
 801113c:	68a3      	ldr	r3, [r4, #8]
 801113e:	f043 0301 	orr.w	r3, r3, #1
 8011142:	60a3      	str	r3, [r4, #8]
  dcd_connect(rhport);
 8011144:	f7ff ff7c 	bl	8011040 <dcd_connect>
}
 8011148:	bd38      	pop	{r3, r4, r5, pc}
    else if ( SystemCoreClock >= 27500000u )
 801114a:	4b27      	ldr	r3, [pc, #156]	; (80111e8 <dcd_init+0x178>)
 801114c:	429a      	cmp	r2, r3
 801114e:	d827      	bhi.n	80111a0 <dcd_init+0x130>
    else if ( SystemCoreClock >= 24000000u )
 8011150:	4b26      	ldr	r3, [pc, #152]	; (80111ec <dcd_init+0x17c>)
 8011152:	429a      	cmp	r2, r3
 8011154:	d227      	bcs.n	80111a6 <dcd_init+0x136>
    else if ( SystemCoreClock >= 21800000u )
 8011156:	4b26      	ldr	r3, [pc, #152]	; (80111f0 <dcd_init+0x180>)
 8011158:	429a      	cmp	r2, r3
 801115a:	d827      	bhi.n	80111ac <dcd_init+0x13c>
    else if ( SystemCoreClock >= 20000000u )
 801115c:	f5a3 13db 	sub.w	r3, r3, #1794048	; 0x1b6000
 8011160:	f5a3 53ba 	sub.w	r3, r3, #5952	; 0x1740
 8011164:	429a      	cmp	r2, r3
 8011166:	d824      	bhi.n	80111b2 <dcd_init+0x142>
    else if ( SystemCoreClock >= 18500000u )
 8011168:	f5a3 13b7 	sub.w	r3, r3, #1499136	; 0x16e000
 801116c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8011170:	429a      	cmp	r2, r3
 8011172:	d821      	bhi.n	80111b8 <dcd_init+0x148>
    else if ( SystemCoreClock >= 17200000u )
 8011174:	4b1f      	ldr	r3, [pc, #124]	; (80111f4 <dcd_init+0x184>)
 8011176:	429a      	cmp	r2, r3
 8011178:	d221      	bcs.n	80111be <dcd_init+0x14e>
    else if ( SystemCoreClock >= 16000000u )
 801117a:	4b1f      	ldr	r3, [pc, #124]	; (80111f8 <dcd_init+0x188>)
 801117c:	429a      	cmp	r2, r3
 801117e:	d221      	bcs.n	80111c4 <dcd_init+0x154>
    else if ( SystemCoreClock >= 15000000u )
 8011180:	4b1e      	ldr	r3, [pc, #120]	; (80111fc <dcd_init+0x18c>)
 8011182:	429a      	cmp	r2, r3
 8011184:	bf2c      	ite	cs
 8011186:	f44f 5260 	movcs.w	r2, #14336	; 0x3800
 801118a:	f44f 5270 	movcc.w	r2, #15360	; 0x3c00
 801118e:	e7a3      	b.n	80110d8 <dcd_init+0x68>
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 8011190:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011194:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011198:	07da      	lsls	r2, r3, #31
 801119a:	d5d5      	bpl.n	8011148 <dcd_init+0xd8>
 801119c:	be00      	bkpt	0x0000
}
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80111a4:	e798      	b.n	80110d8 <dcd_init+0x68>
 80111a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80111aa:	e795      	b.n	80110d8 <dcd_init+0x68>
 80111ac:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80111b0:	e792      	b.n	80110d8 <dcd_init+0x68>
 80111b2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80111b6:	e78f      	b.n	80110d8 <dcd_init+0x68>
 80111b8:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80111bc:	e78c      	b.n	80110d8 <dcd_init+0x68>
 80111be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80111c2:	e789      	b.n	80110d8 <dcd_init+0x68>
 80111c4:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 80111c8:	e786      	b.n	80110d8 <dcd_init+0x68>
 80111ca:	bf00      	nop
 80111cc:	08015a94 	.word	0x08015a94
 80111d0:	ffff0000 	.word	0xffff0000
 80111d4:	4f540000 	.word	0x4f540000
 80111d8:	55310000 	.word	0x55310000
 80111dc:	2400001c 	.word	0x2400001c
 80111e0:	01e84800 	.word	0x01e84800
 80111e4:	80003816 	.word	0x80003816
 80111e8:	01a39ddf 	.word	0x01a39ddf
 80111ec:	016e3600 	.word	0x016e3600
 80111f0:	014ca43f 	.word	0x014ca43f
 80111f4:	01067380 	.word	0x01067380
 80111f8:	00f42400 	.word	0x00f42400
 80111fc:	00e4e1c0 	.word	0x00e4e1c0

08011200 <dcd_edpt_open>:
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011200:	4b4e      	ldr	r3, [pc, #312]	; (801133c <dcd_edpt_open+0x13c>)
 8011202:	0102      	lsls	r2, r0, #4
{
 8011204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011208:	eb03 1e00 	add.w	lr, r3, r0, lsl #4
  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 801120c:	7888      	ldrb	r0, [r1, #2]
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 801120e:	589c      	ldr	r4, [r3, r2]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8011210:	f89e 2008 	ldrb.w	r2, [lr, #8]
 8011214:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  TU_ASSERT(epnum < ep_count);
 8011218:	429a      	cmp	r2, r3
 801121a:	d97d      	bls.n	8011318 <dcd_edpt_open+0x118>
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 801121c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8011220:	888e      	ldrh	r6, [r1, #4]
 8011222:	4d47      	ldr	r5, [pc, #284]	; (8011340 <dcd_edpt_open+0x140>)
 8011224:	eb0c 1cd0 	add.w	ip, ip, r0, lsr #7
 8011228:	f3c6 060a 	ubfx	r6, r6, #0, #11
  if(dir == TUSB_DIR_OUT)
 801122c:	09c0      	lsrs	r0, r0, #7
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 801122e:	eb05 1c0c 	add.w	ip, r5, ip, lsl #4
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 8011232:	f106 0503 	add.w	r5, r6, #3
 8011236:	f8ac 600a 	strh.w	r6, [ip, #10]
  xfer->interval = desc_edpt->bInterval;
 801123a:	798f      	ldrb	r7, [r1, #6]
 801123c:	f88c 700c 	strb.w	r7, [ip, #12]
 8011240:	ea4f 0c95 	mov.w	ip, r5, lsr #2
  if(dir == TUSB_DIR_OUT)
 8011244:	d03b      	beq.n	80112be <dcd_edpt_open+0xbe>
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size/4);
 8011246:	f8de 800c 	ldr.w	r8, [lr, #12]
 801124a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8011344 <dcd_edpt_open+0x144>
 801124e:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 8011252:	ea4f 0798 	mov.w	r7, r8, lsr #2
 8011256:	f8be 2000 	ldrh.w	r2, [lr]
 801125a:	eb02 000c 	add.w	r0, r2, ip
 801125e:	4448      	add	r0, r9
 8011260:	ebb0 0f98 	cmp.w	r0, r8, lsr #2
 8011264:	d858      	bhi.n	8011318 <dcd_edpt_open+0x118>
    _allocated_fifo_words_tx += fifo_size;
 8011266:	4462      	add	r2, ip
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011268:	f103 003f 	add.w	r0, r3, #63	; 0x3f
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 801126c:	78c9      	ldrb	r1, [r1, #3]
 801126e:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    _allocated_fifo_words_tx += fifo_size;
 8011272:	b292      	uxth	r2, r2
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011274:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    _allocated_fifo_words_tx += fifo_size;
 8011278:	f8ae 2000 	strh.w	r2, [lr]
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 801127c:	1aba      	subs	r2, r7, r2
 801127e:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8011282:	6042      	str	r2, [r0, #4]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8011284:	f001 0203 	and.w	r2, r1, #3
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8011288:	0599      	lsls	r1, r3, #22
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 801128a:	4610      	mov	r0, r2
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 801128c:	3a01      	subs	r2, #1
 801128e:	bf18      	it	ne
 8011290:	2201      	movne	r2, #1
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8011292:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8011296:	f8d5 0900 	ldr.w	r0, [r5, #2304]	; 0x900
 801129a:	ea46 7202 	orr.w	r2, r6, r2, lsl #28
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 801129e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80112a2:	4302      	orrs	r2, r0
    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80112a4:	2001      	movs	r0, #1
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80112a6:	430a      	orrs	r2, r1
    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80112a8:	fa00 f303 	lsl.w	r3, r0, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80112ac:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80112b0:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 80112b4:	4313      	orrs	r3, r2
 80112b6:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 80112ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 80112be:	4462      	add	r2, ip
    if (dwc2->grxfsiz < sz)
 80112c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 80112c2:	0052      	lsls	r2, r2, #1
 80112c4:	320f      	adds	r2, #15
    if (dwc2->grxfsiz < sz)
 80112c6:	4295      	cmp	r5, r2
 80112c8:	d208      	bcs.n	80112dc <dcd_edpt_open+0xdc>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size/4);
 80112ca:	4d1e      	ldr	r5, [pc, #120]	; (8011344 <dcd_edpt_open+0x144>)
 80112cc:	f8de 700c 	ldr.w	r7, [lr, #12]
 80112d0:	882d      	ldrh	r5, [r5, #0]
 80112d2:	4415      	add	r5, r2
 80112d4:	ebb5 0f97 	cmp.w	r5, r7, lsr #2
 80112d8:	d828      	bhi.n	801132c <dcd_edpt_open+0x12c>
      dwc2->grxfsiz = sz;
 80112da:	6262      	str	r2, [r4, #36]	; 0x24
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80112dc:	eb04 1543 	add.w	r5, r4, r3, lsl #5
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80112e0:	78c9      	ldrb	r1, [r1, #3]
    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 80112e2:	2001      	movs	r0, #1
 80112e4:	3310      	adds	r3, #16
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80112e6:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 80112ea:	fa00 f303 	lsl.w	r3, r0, r3
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80112ee:	4332      	orrs	r2, r6
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80112f0:	f001 0603 	and.w	r6, r1, #3
 80112f4:	1a31      	subs	r1, r6, r0
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80112f6:	ea42 4286 	orr.w	r2, r2, r6, lsl #18
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80112fa:	bf18      	it	ne
 80112fc:	2101      	movne	r1, #1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80112fe:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8011302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011306:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 801130a:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 801130e:	4313      	orrs	r3, r2
 8011310:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 8011314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size/4);
 8011318:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801131c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011320:	07db      	lsls	r3, r3, #31
 8011322:	d500      	bpl.n	8011326 <dcd_edpt_open+0x126>
  TU_ASSERT(epnum < ep_count);
 8011324:	be00      	bkpt	0x0000
 8011326:	2000      	movs	r0, #0
}
 8011328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size/4);
 801132c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011330:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011334:	07da      	lsls	r2, r3, #31
 8011336:	d5f6      	bpl.n	8011326 <dcd_edpt_open+0x126>
 8011338:	be00      	bkpt	0x0000
 801133a:	e7be      	b.n	80112ba <dcd_edpt_open+0xba>
 801133c:	08015a94 	.word	0x08015a94
 8011340:	24002c70 	.word	0x24002c70
 8011344:	24002c5c 	.word	0x24002c5c

08011348 <dcd_edpt_close_all>:
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011348:	4b30      	ldr	r3, [pc, #192]	; (801140c <dcd_edpt_close_all+0xc4>)
 801134a:	0102      	lsls	r2, r0, #4
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 801134c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011350:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8011354:	589a      	ldr	r2, [r3, r2]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8011356:	7a00      	ldrb	r0, [r0, #8]
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8011358:	f8c2 181c 	str.w	r1, [r2, #2076]	; 0x81c
  for(uint8_t n = 1; n < ep_count; n++)
 801135c:	2801      	cmp	r0, #1
 801135e:	d951      	bls.n	8011404 <dcd_edpt_close_all+0xbc>
    dwc2->epout[n].doepctl = 0;
 8011360:	2300      	movs	r3, #0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011362:	492b      	ldr	r1, [pc, #172]	; (8011410 <dcd_edpt_close_all+0xc8>)
  for(uint8_t n = 1; n < ep_count; n++)
 8011364:	2802      	cmp	r0, #2
    dwc2->epout[n].doepctl = 0;
 8011366:	f8c2 3b20 	str.w	r3, [r2, #2848]	; 0xb20
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801136a:	854b      	strh	r3, [r1, #42]	; 0x2a
    dwc2->epin[n].diepctl = 0;
 801136c:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011370:	874b      	strh	r3, [r1, #58]	; 0x3a
  for(uint8_t n = 1; n < ep_count; n++)
 8011372:	d047      	beq.n	8011404 <dcd_edpt_close_all+0xbc>
 8011374:	2803      	cmp	r0, #3
    dwc2->epout[n].doepctl = 0;
 8011376:	f8c2 3b40 	str.w	r3, [r2, #2880]	; 0xb40
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801137a:	f8a1 304a 	strh.w	r3, [r1, #74]	; 0x4a
    dwc2->epin[n].diepctl = 0;
 801137e:	f8c2 3940 	str.w	r3, [r2, #2368]	; 0x940
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011382:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
  for(uint8_t n = 1; n < ep_count; n++)
 8011386:	d03d      	beq.n	8011404 <dcd_edpt_close_all+0xbc>
 8011388:	2804      	cmp	r0, #4
    dwc2->epout[n].doepctl = 0;
 801138a:	f8c2 3b60 	str.w	r3, [r2, #2912]	; 0xb60
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801138e:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
    dwc2->epin[n].diepctl = 0;
 8011392:	f8c2 3960 	str.w	r3, [r2, #2400]	; 0x960
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011396:	f8a1 307a 	strh.w	r3, [r1, #122]	; 0x7a
  for(uint8_t n = 1; n < ep_count; n++)
 801139a:	d033      	beq.n	8011404 <dcd_edpt_close_all+0xbc>
 801139c:	2805      	cmp	r0, #5
    dwc2->epout[n].doepctl = 0;
 801139e:	f8c2 3b80 	str.w	r3, [r2, #2944]	; 0xb80
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113a2:	f8a1 308a 	strh.w	r3, [r1, #138]	; 0x8a
    dwc2->epin[n].diepctl = 0;
 80113a6:	f8c2 3980 	str.w	r3, [r2, #2432]	; 0x980
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113aa:	f8a1 309a 	strh.w	r3, [r1, #154]	; 0x9a
  for(uint8_t n = 1; n < ep_count; n++)
 80113ae:	d029      	beq.n	8011404 <dcd_edpt_close_all+0xbc>
 80113b0:	2806      	cmp	r0, #6
    dwc2->epout[n].doepctl = 0;
 80113b2:	f8c2 3ba0 	str.w	r3, [r2, #2976]	; 0xba0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113b6:	f8a1 30aa 	strh.w	r3, [r1, #170]	; 0xaa
    dwc2->epin[n].diepctl = 0;
 80113ba:	f8c2 39a0 	str.w	r3, [r2, #2464]	; 0x9a0
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113be:	f8a1 30ba 	strh.w	r3, [r1, #186]	; 0xba
  for(uint8_t n = 1; n < ep_count; n++)
 80113c2:	d01f      	beq.n	8011404 <dcd_edpt_close_all+0xbc>
 80113c4:	2807      	cmp	r0, #7
    dwc2->epout[n].doepctl = 0;
 80113c6:	f8c2 3bc0 	str.w	r3, [r2, #3008]	; 0xbc0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113ca:	f8a1 30ca 	strh.w	r3, [r1, #202]	; 0xca
    dwc2->epin[n].diepctl = 0;
 80113ce:	f8c2 39c0 	str.w	r3, [r2, #2496]	; 0x9c0
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113d2:	f8a1 30da 	strh.w	r3, [r1, #218]	; 0xda
  for(uint8_t n = 1; n < ep_count; n++)
 80113d6:	d015      	beq.n	8011404 <dcd_edpt_close_all+0xbc>
 80113d8:	2808      	cmp	r0, #8
    dwc2->epout[n].doepctl = 0;
 80113da:	f8c2 3be0 	str.w	r3, [r2, #3040]	; 0xbe0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113de:	f8a1 30ea 	strh.w	r3, [r1, #234]	; 0xea
    dwc2->epin[n].diepctl = 0;
 80113e2:	f8c2 39e0 	str.w	r3, [r2, #2528]	; 0x9e0
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113e6:	f8a1 30fa 	strh.w	r3, [r1, #250]	; 0xfa
  for(uint8_t n = 1; n < ep_count; n++)
 80113ea:	d00b      	beq.n	8011404 <dcd_edpt_close_all+0xbc>
 80113ec:	2809      	cmp	r0, #9
    dwc2->epout[n].doepctl = 0;
 80113ee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80113f2:	f8a1 310a 	strh.w	r3, [r1, #266]	; 0x10a
    dwc2->epin[n].diepctl = 0;
 80113f6:	f8c2 3a00 	str.w	r3, [r2, #2560]	; 0xa00
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80113fa:	f8a1 311a 	strh.w	r3, [r1, #282]	; 0x11a
  for(uint8_t n = 1; n < ep_count; n++)
 80113fe:	d001      	beq.n	8011404 <dcd_edpt_close_all+0xbc>
    dwc2->epout[n].doepctl = 0;
 8011400:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
  _allocated_fifo_words_tx = 16;
 8011404:	4b03      	ldr	r3, [pc, #12]	; (8011414 <dcd_edpt_close_all+0xcc>)
 8011406:	2210      	movs	r2, #16
 8011408:	801a      	strh	r2, [r3, #0]
}
 801140a:	4770      	bx	lr
 801140c:	08015a94 	.word	0x08015a94
 8011410:	24002c70 	.word	0x24002c70
 8011414:	24002c5c 	.word	0x24002c5c

08011418 <dcd_edpt_xfer>:
{
 8011418:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801141a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = buffer;
 801141e:	4d7a      	ldr	r5, [pc, #488]	; (8011608 <dcd_edpt_xfer+0x1f0>)
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8011420:	09ce      	lsrs	r6, r1, #7
  xfer->ff          = NULL;
 8011422:	2700      	movs	r7, #0
  xfer->buffer      = buffer;
 8011424:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8011428:	eb0c 11d1 	add.w	r1, ip, r1, lsr #7
 801142c:	eb05 1c01 	add.w	ip, r5, r1, lsl #4
 8011430:	0109      	lsls	r1, r1, #4
  xfer->ff          = NULL;
 8011432:	f8cc 7004 	str.w	r7, [ip, #4]
  xfer->buffer      = buffer;
 8011436:	506a      	str	r2, [r5, r1]
  xfer->total_len   = total_bytes;
 8011438:	f8ac 3008 	strh.w	r3, [ip, #8]
  if(epnum == 0)
 801143c:	2c00      	cmp	r4, #0
 801143e:	d054      	beq.n	80114ea <dcd_edpt_xfer+0xd2>
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
  }
  else
  {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 8011440:	f8bc 200a 	ldrh.w	r2, [ip, #10]
 8011444:	fbb3 f1f2 	udiv	r1, r3, r2
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8011448:	fb02 3211 	mls	r2, r2, r1, r3
    uint16_t num_packets = (total_bytes / xfer->max_size);
 801144c:	b289      	uxth	r1, r1

    // Zero-size packet is special case.
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 801144e:	b292      	uxth	r2, r2
 8011450:	2a00      	cmp	r2, #0
 8011452:	d142      	bne.n	80114da <dcd_edpt_xfer+0xc2>
 8011454:	2b00      	cmp	r3, #0
 8011456:	d040      	beq.n	80114da <dcd_edpt_xfer+0xc2>
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011458:	0100      	lsls	r0, r0, #4
 801145a:	4a6c      	ldr	r2, [pc, #432]	; (801160c <dcd_edpt_xfer+0x1f4>)
 801145c:	5817      	ldr	r7, [r2, r0]
  if ( dir == TUSB_DIR_IN )
 801145e:	b9f6      	cbnz	r6, 801149e <dcd_edpt_xfer+0x86>
    dwc2_epout_t* epout = dwc2->epout;
 8011460:	f507 6030 	add.w	r0, r7, #2816	; 0xb00
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8011464:	0166      	lsls	r6, r4, #5
 8011466:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 801146a:	f8d2 c010 	ldr.w	ip, [r2, #16]
 801146e:	f00c 4c60 	and.w	ip, ip, #3758096384	; 0xe0000000
 8011472:	f8c2 c010 	str.w	ip, [r2, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8011476:	f8d2 c010 	ldr.w	ip, [r2, #16]
 801147a:	ea43 030c 	orr.w	r3, r3, ip
 801147e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 8011482:	6113      	str	r3, [r2, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8011484:	5983      	ldr	r3, [r0, r6]
 8011486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801148a:	5183      	str	r3, [r0, r6]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 801148c:	5983      	ldr	r3, [r0, r6]
 801148e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011492:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011496:	d077      	beq.n	8011588 <dcd_edpt_xfer+0x170>
    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
  }

  return true;
}
 8011498:	2001      	movs	r0, #1
 801149a:	bcf0      	pop	{r4, r5, r6, r7}
 801149c:	4770      	bx	lr
    dwc2_epin_t* epin = dwc2->epin;
 801149e:	f507 6210 	add.w	r2, r7, #2304	; 0x900
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 80114a2:	0160      	lsls	r0, r4, #5
 80114a4:	ea43 41c1 	orr.w	r1, r3, r1, lsl #19
 80114a8:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 80114ac:	6131      	str	r1, [r6, #16]
    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80114ae:	5811      	ldr	r1, [r2, r0]
 80114b0:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 80114b4:	5011      	str	r1, [r2, r0]
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 80114b6:	5811      	ldr	r1, [r2, r0]
 80114b8:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 80114bc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80114c0:	d04e      	beq.n	8011560 <dcd_edpt_xfer+0x148>
    if ( total_bytes != 0 )
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d0e8      	beq.n	8011498 <dcd_edpt_xfer+0x80>
      dwc2->diepempmsk |= (1 << epnum);
 80114c6:	2301      	movs	r3, #1
 80114c8:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
}
 80114cc:	2001      	movs	r0, #1
      dwc2->diepempmsk |= (1 << epnum);
 80114ce:	40a3      	lsls	r3, r4
 80114d0:	4313      	orrs	r3, r2
 80114d2:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
}
 80114d6:	bcf0      	pop	{r4, r5, r6, r7}
 80114d8:	4770      	bx	lr
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 80114da:	3101      	adds	r1, #1
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80114dc:	0100      	lsls	r0, r0, #4
 80114de:	4a4b      	ldr	r2, [pc, #300]	; (801160c <dcd_edpt_xfer+0x1f4>)
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 80114e0:	b289      	uxth	r1, r1
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80114e2:	5817      	ldr	r7, [r2, r0]
  if ( dir == TUSB_DIR_IN )
 80114e4:	2e00      	cmp	r6, #0
 80114e6:	d0bb      	beq.n	8011460 <dcd_edpt_xfer+0x48>
 80114e8:	e7d9      	b.n	801149e <dcd_edpt_xfer+0x86>
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80114ea:	4a48      	ldr	r2, [pc, #288]	; (801160c <dcd_edpt_xfer+0x1f4>)
 80114ec:	0100      	lsls	r0, r0, #4
 80114ee:	5811      	ldr	r1, [r2, r0]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 80114f0:	eb05 1206 	add.w	r2, r5, r6, lsl #4
    ep0_pending[dir] -= total_bytes;
 80114f4:	4846      	ldr	r0, [pc, #280]	; (8011610 <dcd_edpt_xfer+0x1f8>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80114f6:	8952      	ldrh	r2, [r2, #10]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	bf28      	it	cs
 80114fc:	461a      	movcs	r2, r3
 80114fe:	1a9b      	subs	r3, r3, r2
 8011500:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
  if ( dir == TUSB_DIR_IN )
 8011504:	2e00      	cmp	r6, #0
 8011506:	d151      	bne.n	80115ac <dcd_edpt_xfer+0x194>
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8011508:	f8d1 3b10 	ldr.w	r3, [r1, #2832]	; 0xb10
 801150c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8011510:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8011514:	f8d1 3b10 	ldr.w	r3, [r1, #2832]	; 0xb10
 8011518:	431a      	orrs	r2, r3
 801151a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 801151e:	f8c1 2b10 	str.w	r2, [r1, #2832]	; 0xb10
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8011522:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8011526:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801152a:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 801152e:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8011532:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801153a:	d1ad      	bne.n	8011498 <dcd_edpt_xfer+0x80>
 801153c:	7b2b      	ldrb	r3, [r5, #12]
 801153e:	2b01      	cmp	r3, #1
 8011540:	d1aa      	bne.n	8011498 <dcd_edpt_xfer+0x80>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011542:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8011546:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 801154a:	f412 7f80 	tst.w	r2, #256	; 0x100
 801154e:	bf14      	ite	ne
 8011550:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8011554:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8011558:	4313      	orrs	r3, r2
 801155a:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 801155e:	e79b      	b.n	8011498 <dcd_edpt_xfer+0x80>
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011560:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 8011564:	7f29      	ldrb	r1, [r5, #28]
 8011566:	2901      	cmp	r1, #1
 8011568:	d1ab      	bne.n	80114c2 <dcd_edpt_xfer+0xaa>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 801156a:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 801156e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8011572:	5811      	ldr	r1, [r2, r0]
 8011574:	bf14      	ite	ne
 8011576:	f04f 5580 	movne.w	r5, #268435456	; 0x10000000
 801157a:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 801157e:	4329      	orrs	r1, r5
 8011580:	5011      	str	r1, [r2, r0]
    if ( total_bytes != 0 )
 8011582:	2b00      	cmp	r3, #0
 8011584:	d088      	beq.n	8011498 <dcd_edpt_xfer+0x80>
 8011586:	e79e      	b.n	80114c6 <dcd_edpt_xfer+0xae>
         XFER_CTL_BASE(epnum, dir)->interval == 1 )
 8011588:	eb05 1544 	add.w	r5, r5, r4, lsl #5
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 801158c:	7b2b      	ldrb	r3, [r5, #12]
 801158e:	2b01      	cmp	r3, #1
 8011590:	d182      	bne.n	8011498 <dcd_edpt_xfer+0x80>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011592:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8011596:	5983      	ldr	r3, [r0, r6]
 8011598:	f412 7f80 	tst.w	r2, #256	; 0x100
 801159c:	bf14      	ite	ne
 801159e:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 80115a2:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 80115a6:	4313      	orrs	r3, r2
 80115a8:	5183      	str	r3, [r0, r6]
 80115aa:	e775      	b.n	8011498 <dcd_edpt_xfer+0x80>
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 80115ac:	f442 2300 	orr.w	r3, r2, #524288	; 0x80000
 80115b0:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80115b4:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 80115b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80115bc:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 80115c0:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 80115c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80115c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80115cc:	d009      	beq.n	80115e2 <dcd_edpt_xfer+0x1ca>
    if ( total_bytes != 0 )
 80115ce:	2a00      	cmp	r2, #0
 80115d0:	f43f af62 	beq.w	8011498 <dcd_edpt_xfer+0x80>
      dwc2->diepempmsk |= (1 << epnum);
 80115d4:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 80115d8:	f043 0301 	orr.w	r3, r3, #1
 80115dc:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
 80115e0:	e75a      	b.n	8011498 <dcd_edpt_xfer+0x80>
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 80115e2:	7f2b      	ldrb	r3, [r5, #28]
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d1f2      	bne.n	80115ce <dcd_edpt_xfer+0x1b6>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 80115e8:	f8d1 0808 	ldr.w	r0, [r1, #2056]	; 0x808
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 80115ec:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 80115f0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80115f4:	bf14      	ite	ne
 80115f6:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 80115fa:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 80115fe:	4303      	orrs	r3, r0
 8011600:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8011604:	e7e3      	b.n	80115ce <dcd_edpt_xfer+0x1b6>
 8011606:	bf00      	nop
 8011608:	24002c70 	.word	0x24002c70
 801160c:	08015a94 	.word	0x08015a94
 8011610:	24002c6c 	.word	0x24002c6c

08011614 <dcd_edpt_stall>:

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
  (void) rhport;

  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011614:	4b2c      	ldr	r3, [pc, #176]	; (80116c8 <dcd_edpt_stall+0xb4>)
 8011616:	0100      	lsls	r0, r0, #4
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8011618:	b410      	push	{r4}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801161a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  if ( dir == TUSB_DIR_IN )
 801161e:	09c9      	lsrs	r1, r1, #7
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011620:	581b      	ldr	r3, [r3, r0]
  if ( dir == TUSB_DIR_IN )
 8011622:	d129      	bne.n	8011678 <dcd_edpt_stall+0x64>
    dwc2_epout_t* epout = dwc2->epout;
 8011624:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
    if ( (epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA) )
 8011628:	b934      	cbnz	r4, 8011638 <dcd_edpt_stall+0x24>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 801162a:	6813      	ldr	r3, [r2, #0]
  dcd_edpt_disable(rhport, ep_addr, true);
}
 801162c:	f85d 4b04 	ldr.w	r4, [sp], #4
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8011630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011634:	6013      	str	r3, [r2, #0]
}
 8011636:	4770      	bx	lr
    if ( (epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA) )
 8011638:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 801163c:	6811      	ldr	r1, [r2, #0]
 801163e:	2900      	cmp	r1, #0
 8011640:	daf3      	bge.n	801162a <dcd_edpt_stall+0x16>
      dwc2->dctl |= DCTL_SGONAK;
 8011642:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
 8011646:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 801164a:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
      while ( (dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0 ) {}
 801164e:	6959      	ldr	r1, [r3, #20]
 8011650:	0608      	lsls	r0, r1, #24
 8011652:	d5fc      	bpl.n	801164e <dcd_edpt_stall+0x3a>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8011654:	6810      	ldr	r0, [r2, #0]
 8011656:	491d      	ldr	r1, [pc, #116]	; (80116cc <dcd_edpt_stall+0xb8>)
 8011658:	4301      	orrs	r1, r0
 801165a:	6011      	str	r1, [r2, #0]
      while ( (epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0 ) {}
 801165c:	6891      	ldr	r1, [r2, #8]
 801165e:	0789      	lsls	r1, r1, #30
 8011660:	d5fc      	bpl.n	801165c <dcd_edpt_stall+0x48>
      epout[epnum].doepint = DOEPINT_EPDISD;
 8011662:	2102      	movs	r1, #2
}
 8011664:	f85d 4b04 	ldr.w	r4, [sp], #4
      epout[epnum].doepint = DOEPINT_EPDISD;
 8011668:	6091      	str	r1, [r2, #8]
      dwc2->dctl |= DCTL_CGONAK;
 801166a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 801166e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011672:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8011676:	4770      	bx	lr
    dwc2_epin_t* epin = dwc2->epin;
 8011678:	f503 6210 	add.w	r2, r3, #2304	; 0x900
    if ( (epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA) )
 801167c:	b96c      	cbnz	r4, 801169a <dcd_edpt_stall+0x86>
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 801167e:	6811      	ldr	r1, [r2, #0]
 8011680:	f041 6102 	orr.w	r1, r1, #136314880	; 0x8200000
 8011684:	6011      	str	r1, [r2, #0]
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 8011686:	01a4      	lsls	r4, r4, #6
 8011688:	f044 0420 	orr.w	r4, r4, #32
 801168c:	611c      	str	r4, [r3, #16]
    while ( (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0 ) {}
 801168e:	691a      	ldr	r2, [r3, #16]
 8011690:	0694      	lsls	r4, r2, #26
 8011692:	d4fc      	bmi.n	801168e <dcd_edpt_stall+0x7a>
}
 8011694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011698:	4770      	bx	lr
    if ( (epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA) )
 801169a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 801169e:	6811      	ldr	r1, [r2, #0]
 80116a0:	2900      	cmp	r1, #0
 80116a2:	daec      	bge.n	801167e <dcd_edpt_stall+0x6a>
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 80116a4:	6811      	ldr	r1, [r2, #0]
 80116a6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80116aa:	6011      	str	r1, [r2, #0]
      while ( (epin[epnum].diepint & DIEPINT_INEPNE) == 0 ) {}
 80116ac:	6891      	ldr	r1, [r2, #8]
 80116ae:	0648      	lsls	r0, r1, #25
 80116b0:	d5fc      	bpl.n	80116ac <dcd_edpt_stall+0x98>
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 80116b2:	6810      	ldr	r0, [r2, #0]
 80116b4:	4905      	ldr	r1, [pc, #20]	; (80116cc <dcd_edpt_stall+0xb8>)
 80116b6:	4301      	orrs	r1, r0
 80116b8:	6011      	str	r1, [r2, #0]
      while ( (epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0 ) {}
 80116ba:	6891      	ldr	r1, [r2, #8]
 80116bc:	0789      	lsls	r1, r1, #30
 80116be:	d5fc      	bpl.n	80116ba <dcd_edpt_stall+0xa6>
      epin[epnum].diepint = DIEPINT_EPDISD;
 80116c0:	2102      	movs	r1, #2
 80116c2:	6091      	str	r1, [r2, #8]
 80116c4:	e7df      	b.n	8011686 <dcd_edpt_stall+0x72>
 80116c6:	bf00      	nop
 80116c8:	08015a94 	.word	0x08015a94
 80116cc:	40200000 	.word	0x40200000

080116d0 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80116d0:	4b11      	ldr	r3, [pc, #68]	; (8011718 <dcd_edpt_clear_stall+0x48>)
 80116d2:	0100      	lsls	r0, r0, #4
 80116d4:	f001 027f 	and.w	r2, r1, #127	; 0x7f

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // Clear stall and reset data toggle
  if ( dir == TUSB_DIR_IN )
 80116d8:	09c9      	lsrs	r1, r1, #7
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80116da:	581b      	ldr	r3, [r3, r0]
  if ( dir == TUSB_DIR_IN )
 80116dc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80116e0:	d10c      	bne.n	80116fc <dcd_edpt_clear_stall+0x2c>
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
  }
  else
  {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 80116e2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80116e6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80116ea:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 80116ee:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80116f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80116f6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  }
}
 80116fa:	4770      	bx	lr
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 80116fc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8011700:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8011704:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8011708:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 801170c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011710:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8011714:	4770      	bx	lr
 8011716:	bf00      	nop
 8011718:	08015a94 	.word	0x08015a94

0801171c <dcd_int_handler>:
    }
  }
}

void dcd_int_handler(uint8_t rhport)
{
 801171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011720:	4e95      	ldr	r6, [pc, #596]	; (8011978 <dcd_int_handler+0x25c>)
 8011722:	ea4f 1a00 	mov.w	sl, r0, lsl #4
{
 8011726:	b089      	sub	sp, #36	; 0x24
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011728:	f856 400a 	ldr.w	r4, [r6, sl]
 801172c:	eb06 1200 	add.w	r2, r6, r0, lsl #4
{
 8011730:	9001      	str	r0, [sp, #4]

  uint32_t const int_mask = dwc2->gintmsk;
 8011732:	69a3      	ldr	r3, [r4, #24]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8011734:	46a3      	mov	fp, r4
  uint32_t const int_status = dwc2->gintsts & int_mask;
 8011736:	6967      	ldr	r7, [r4, #20]
 8011738:	401f      	ands	r7, r3

  if(int_status & GINTSTS_USBRST)
 801173a:	04fd      	lsls	r5, r7, #19
 801173c:	f100 8207 	bmi.w	8011b4e <dcd_int_handler+0x432>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
    bus_reset(rhport);
  }

  if(int_status & GINTSTS_ENUMDNE)
 8011740:	04b8      	lsls	r0, r7, #18
 8011742:	d51e      	bpl.n	8011782 <dcd_int_handler+0x66>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    dwc2->gintsts = GINTSTS_ENUMDNE;
 8011744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011748:	6163      	str	r3, [r4, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos)
 801174a:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
 801174e:	f012 0f06 	tst.w	r2, #6
 8011752:	f3c2 0341 	ubfx	r3, r2, #1, #2
 8011756:	f000 8303 	beq.w	8011d60 <dcd_int_handler+0x644>
    {
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 801175a:	f1a3 0302 	sub.w	r3, r3, #2
 801175e:	fab3 f383 	clz	r3, r3
 8011762:	095b      	lsrs	r3, r3, #5
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8011764:	2200      	movs	r2, #0
 8011766:	a805      	add	r0, sp, #20
 8011768:	2101      	movs	r1, #1
 801176a:	9205      	str	r2, [sp, #20]
 801176c:	e9c0 2201 	strd	r2, r2, [r0, #4]
  event.bus_reset.speed = speed;
 8011770:	f88d 3018 	strb.w	r3, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8011774:	9b01      	ldr	r3, [sp, #4]
 8011776:	f88d 1015 	strb.w	r1, [sp, #21]
 801177a:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 801177e:	f7ff f8df 	bl	8010940 <dcd_event_handler>
    }

    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & GINTSTS_USBSUSP)
 8011782:	0539      	lsls	r1, r7, #20
 8011784:	f100 81bd 	bmi.w	8011b02 <dcd_int_handler+0x3e6>
  {
    dwc2->gintsts = GINTSTS_USBSUSP;
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & GINTSTS_WKUINT)
 8011788:	2f00      	cmp	r7, #0
 801178a:	f2c0 81ce 	blt.w	8011b2a <dcd_int_handler+0x40e>
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if(int_status & GINTSTS_OTGINT)
 801178e:	077a      	lsls	r2, r7, #29
 8011790:	d504      	bpl.n	801179c <dcd_int_handler+0x80>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 8011792:	6865      	ldr	r5, [r4, #4]

    if (otg_int & GOTGINT_SEDET)
 8011794:	076b      	lsls	r3, r5, #29
 8011796:	f100 82e5 	bmi.w	8011d64 <dcd_int_handler+0x648>
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 801179a:	6065      	str	r5, [r4, #4]
  }

  if(int_status & GINTSTS_SOF)
 801179c:	0738      	lsls	r0, r7, #28
 801179e:	d518      	bpl.n	80117d2 <dcd_int_handler+0xb6>
  {
    dwc2->gotgint = GINTSTS_SOF;

    if (_sof_en)
 80117a0:	4b76      	ldr	r3, [pc, #472]	; (801197c <dcd_int_handler+0x260>)
    dwc2->gotgint = GINTSTS_SOF;
 80117a2:	2208      	movs	r2, #8
    if (_sof_en)
 80117a4:	781b      	ldrb	r3, [r3, #0]
    dwc2->gotgint = GINTSTS_SOF;
 80117a6:	6062      	str	r2, [r4, #4]
    if (_sof_en)
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f040 82ea 	bne.w	8011d82 <dcd_int_handler+0x666>
      dcd_event_sof(rhport, frame, true);
    }
    else
    {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 80117ae:	69a3      	ldr	r3, [r4, #24]
 80117b0:	a805      	add	r0, sp, #20
 80117b2:	f023 0308 	bic.w	r3, r3, #8
 80117b6:	61a3      	str	r3, [r4, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80117b8:	2300      	movs	r3, #0
  dcd_event_handler(&event, in_isr);
 80117ba:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80117bc:	9305      	str	r3, [sp, #20]
 80117be:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80117c2:	9b01      	ldr	r3, [sp, #4]
 80117c4:	f88d 3014 	strb.w	r3, [sp, #20]
 80117c8:	2303      	movs	r3, #3
 80117ca:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 80117ce:	f7ff f8b7 	bl	8010940 <dcd_event_handler>

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & GINTSTS_RXFLVL)
 80117d2:	06f9      	lsls	r1, r7, #27
 80117d4:	f140 8084 	bpl.w	80118e0 <dcd_int_handler+0x1c4>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 80117d8:	69a3      	ldr	r3, [r4, #24]
 80117da:	f023 0310 	bic.w	r3, r3, #16
 80117de:	61a3      	str	r3, [r4, #24]
      if ( xfer->ff )
 80117e0:	4b67      	ldr	r3, [pc, #412]	; (8011980 <dcd_int_handler+0x264>)
  uint32_t const ctl_word = dwc2->grxstsp;
 80117e2:	6a21      	ldr	r1, [r4, #32]
  uint8_t  const epnum    = (ctl_word & GRXSTSP_EPNUM_Msk  ) >> GRXSTSP_EPNUM_Pos;
 80117e4:	f001 050f 	and.w	r5, r1, #15
  uint16_t const bcnt     = (ctl_word & GRXSTSP_BCNT_Msk   ) >> GRXSTSP_BCNT_Pos;
 80117e8:	f3c1 180a 	ubfx	r8, r1, #4, #11
  switch ( pktsts )
 80117ec:	f3c1 4143 	ubfx	r1, r1, #17, #4
 80117f0:	3901      	subs	r1, #1
 80117f2:	2905      	cmp	r1, #5
 80117f4:	f200 80b7 	bhi.w	8011966 <dcd_int_handler+0x24a>
 80117f8:	e8df f001 	tbb	[pc, r1]
 80117fc:	117a910a 	.word	0x117a910a
 8011800:	03b5      	.short	0x03b5
      _setup_packet[0] = (*rx_fifo);
 8011802:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8011806:	4a5f      	ldr	r2, [pc, #380]	; (8011984 <dcd_int_handler+0x268>)
 8011808:	6821      	ldr	r1, [r4, #0]
 801180a:	6011      	str	r1, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 801180c:	6821      	ldr	r1, [r4, #0]
 801180e:	6051      	str	r1, [r2, #4]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_irq(rhport);
    } while(dwc2->gotgint & GINTSTS_RXFLVL);
 8011810:	f8db 2004 	ldr.w	r2, [fp, #4]
 8011814:	06d5      	lsls	r5, r2, #27
 8011816:	d50e      	bpl.n	8011836 <dcd_int_handler+0x11a>
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8011818:	f856 400a 	ldr.w	r4, [r6, sl]
 801181c:	e7e1      	b.n	80117e2 <dcd_int_handler+0xc6>
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 801181e:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 8011822:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 8011826:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 801182a:	f8c4 2b10 	str.w	r2, [r4, #2832]	; 0xb10
    } while(dwc2->gotgint & GINTSTS_RXFLVL);
 801182e:	f8db 2004 	ldr.w	r2, [fp, #4]
 8011832:	06d5      	lsls	r5, r2, #27
 8011834:	d4f0      	bmi.n	8011818 <dcd_int_handler+0xfc>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8011836:	4954      	ldr	r1, [pc, #336]	; (8011988 <dcd_int_handler+0x26c>)
 8011838:	780b      	ldrb	r3, [r1, #0]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d04a      	beq.n	80118d4 <dcd_int_handler+0x1b8>
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 801183e:	eb06 030a 	add.w	r3, r6, sl
 8011842:	7a1a      	ldrb	r2, [r3, #8]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 8011844:	2a00      	cmp	r2, #0
 8011846:	f000 8372 	beq.w	8011f2e <dcd_int_handler+0x812>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 801184a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8011980 <dcd_int_handler+0x264>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 801184e:	2a01      	cmp	r2, #1
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8011850:	f8b9 300a 	ldrh.w	r3, [r9, #10]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 8011854:	d035      	beq.n	80118c2 <dcd_int_handler+0x1a6>
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8011856:	f8b9 002a 	ldrh.w	r0, [r9, #42]	; 0x2a
 801185a:	4283      	cmp	r3, r0
 801185c:	bf38      	it	cc
 801185e:	4603      	movcc	r3, r0
 8011860:	2a02      	cmp	r2, #2
 8011862:	d02e      	beq.n	80118c2 <dcd_int_handler+0x1a6>
 8011864:	f8b9 004a 	ldrh.w	r0, [r9, #74]	; 0x4a
 8011868:	4283      	cmp	r3, r0
 801186a:	bf38      	it	cc
 801186c:	4603      	movcc	r3, r0
 801186e:	2a03      	cmp	r2, #3
 8011870:	d027      	beq.n	80118c2 <dcd_int_handler+0x1a6>
 8011872:	f8b9 006a 	ldrh.w	r0, [r9, #106]	; 0x6a
 8011876:	4283      	cmp	r3, r0
 8011878:	bf38      	it	cc
 801187a:	4603      	movcc	r3, r0
 801187c:	2a04      	cmp	r2, #4
 801187e:	d020      	beq.n	80118c2 <dcd_int_handler+0x1a6>
 8011880:	f8b9 008a 	ldrh.w	r0, [r9, #138]	; 0x8a
 8011884:	4283      	cmp	r3, r0
 8011886:	bf38      	it	cc
 8011888:	4603      	movcc	r3, r0
 801188a:	2a05      	cmp	r2, #5
 801188c:	d019      	beq.n	80118c2 <dcd_int_handler+0x1a6>
 801188e:	f8b9 00aa 	ldrh.w	r0, [r9, #170]	; 0xaa
 8011892:	4283      	cmp	r3, r0
 8011894:	bf38      	it	cc
 8011896:	4603      	movcc	r3, r0
 8011898:	2a06      	cmp	r2, #6
 801189a:	d012      	beq.n	80118c2 <dcd_int_handler+0x1a6>
 801189c:	f8b9 00ca 	ldrh.w	r0, [r9, #202]	; 0xca
 80118a0:	4283      	cmp	r3, r0
 80118a2:	bf38      	it	cc
 80118a4:	4603      	movcc	r3, r0
 80118a6:	2a07      	cmp	r2, #7
 80118a8:	d00b      	beq.n	80118c2 <dcd_int_handler+0x1a6>
 80118aa:	f8b9 00ea 	ldrh.w	r0, [r9, #234]	; 0xea
 80118ae:	4283      	cmp	r3, r0
 80118b0:	bf38      	it	cc
 80118b2:	4603      	movcc	r3, r0
 80118b4:	2a08      	cmp	r2, #8
 80118b6:	d004      	beq.n	80118c2 <dcd_int_handler+0x1a6>
 80118b8:	f8b9 010a 	ldrh.w	r0, [r9, #266]	; 0x10a
 80118bc:	4283      	cmp	r3, r0
 80118be:	bf38      	it	cc
 80118c0:	4603      	movcc	r3, r0
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 80118c2:	089b      	lsrs	r3, r3, #2
 80118c4:	4413      	add	r3, r2
 80118c6:	005b      	lsls	r3, r3, #1
 80118c8:	330f      	adds	r3, #15
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    {
      update_grxfsiz(rhport);

      // Disable flag
      _out_ep_closed = false;
 80118d0:	2300      	movs	r3, #0
 80118d2:	700b      	strb	r3, [r1, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 80118d4:	f8db 3018 	ldr.w	r3, [fp, #24]
 80118d8:	f043 0310 	orr.w	r3, r3, #16
 80118dc:	f8cb 3018 	str.w	r3, [fp, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & GINTSTS_OEPINT)
 80118e0:	033c      	lsls	r4, r7, #12
 80118e2:	f100 80a7 	bmi.w	8011a34 <dcd_int_handler+0x318>
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
  }

  // IN endpoint interrupt handling.
  if(int_status & GINTSTS_IEPINT)
 80118e6:	037c      	lsls	r4, r7, #13
 80118e8:	d454      	bmi.n	8011994 <dcd_int_handler+0x278>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 80118ea:	b009      	add	sp, #36	; 0x24
 80118ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 80118f0:	2d00      	cmp	r5, #0
 80118f2:	d18d      	bne.n	8011810 <dcd_int_handler+0xf4>
 80118f4:	f1b8 0f00 	cmp.w	r8, #0
 80118f8:	d18a      	bne.n	8011810 <dcd_int_handler+0xf4>
 80118fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80118fc:	4923      	ldr	r1, [pc, #140]	; (801198c <dcd_int_handler+0x270>)
 80118fe:	428a      	cmp	r2, r1
 8011900:	d986      	bls.n	8011810 <dcd_int_handler+0xf4>
          uint32_t doepint = epout->doepint;
 8011902:	f8d4 2b08 	ldr.w	r2, [r4, #2824]	; 0xb08
          if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR))
 8011906:	f248 0120 	movw	r1, #32800	; 0x8020
 801190a:	420a      	tst	r2, r1
 801190c:	d080      	beq.n	8011810 <dcd_int_handler+0xf4>
            if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 801190e:	f012 0f20 	tst.w	r2, #32
 8011912:	bf0c      	ite	eq
 8011914:	2201      	moveq	r2, #1
 8011916:	2221      	movne	r2, #33	; 0x21
            epout->doepint = clear_flags;
 8011918:	f8c4 2b08 	str.w	r2, [r4, #2824]	; 0xb08
 801191c:	e778      	b.n	8011810 <dcd_int_handler+0xf4>
      if ( xfer->ff )
 801191e:	eb03 1245 	add.w	r2, r3, r5, lsl #5
 8011922:	ea4f 1945 	mov.w	r9, r5, lsl #5
 8011926:	6850      	ldr	r0, [r2, #4]
 8011928:	2800      	cmp	r0, #0
 801192a:	f000 81ed 	beq.w	8011d08 <dcd_int_handler+0x5ec>
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 801192e:	4642      	mov	r2, r8
 8011930:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
 8011934:	f7fe fa06 	bl	800fd44 <tu_fifo_write_n_const_addr_full_words>
 8011938:	4b11      	ldr	r3, [pc, #68]	; (8011980 <dcd_int_handler+0x264>)
      if ( bcnt < xfer->max_size )
 801193a:	eb03 0109 	add.w	r1, r3, r9
 801193e:	894a      	ldrh	r2, [r1, #10]
 8011940:	4542      	cmp	r2, r8
 8011942:	f67f af65 	bls.w	8011810 <dcd_int_handler+0xf4>
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8011946:	44a1      	add	r9, r4
 8011948:	890a      	ldrh	r2, [r1, #8]
 801194a:	f8d9 0b10 	ldr.w	r0, [r9, #2832]	; 0xb10
 801194e:	1a12      	subs	r2, r2, r0
 8011950:	b292      	uxth	r2, r2
 8011952:	810a      	strh	r2, [r1, #8]
        if ( epnum == 0 )
 8011954:	2d00      	cmp	r5, #0
 8011956:	f47f af5b 	bne.w	8011810 <dcd_int_handler+0xf4>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 801195a:	480d      	ldr	r0, [pc, #52]	; (8011990 <dcd_int_handler+0x274>)
 801195c:	8801      	ldrh	r1, [r0, #0]
          ep0_pending[TUSB_DIR_OUT] = 0;
 801195e:	8005      	strh	r5, [r0, #0]
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8011960:	1a52      	subs	r2, r2, r1
 8011962:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8011964:	e754      	b.n	8011810 <dcd_int_handler+0xf4>
      TU_BREAKPOINT();
 8011966:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 801196a:	f8d2 2df0 	ldr.w	r2, [r2, #3568]	; 0xdf0
 801196e:	07d2      	lsls	r2, r2, #31
 8011970:	f57f af4e 	bpl.w	8011810 <dcd_int_handler+0xf4>
 8011974:	be00      	bkpt	0x0000
 8011976:	e74b      	b.n	8011810 <dcd_int_handler+0xf4>
 8011978:	08015a94 	.word	0x08015a94
 801197c:	24002c68 	.word	0x24002c68
 8011980:	24002c70 	.word	0x24002c70
 8011984:	24002c60 	.word	0x24002c60
 8011988:	24002c5e 	.word	0x24002c5e
 801198c:	4f543009 	.word	0x4f543009
 8011990:	24002c6c 	.word	0x24002c6c
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011994:	eb06 030a 	add.w	r3, r6, sl
 8011998:	f856 600a 	ldr.w	r6, [r6, sl]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 801199c:	f893 a008 	ldrb.w	sl, [r3, #8]
  dwc2_epin_t* epin      = dwc2->epin;
 80119a0:	f506 6410 	add.w	r4, r6, #2304	; 0x900
  for ( uint8_t n = 0; n < ep_count; n++ )
 80119a4:	f1ba 0f00 	cmp.w	sl, #0
 80119a8:	d09f      	beq.n	80118ea <dcd_int_handler+0x1ce>
 80119aa:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8011cf8 <dcd_int_handler+0x5dc>
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 80119ae:	2500      	movs	r5, #0
 80119b0:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8011cf8 <dcd_int_handler+0x5dc>
 80119b4:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
        if ( (n == 0) && ep0_pending[TUSB_DIR_IN] )
 80119b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80119bc:	462a      	mov	r2, r5
    if ( dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n) )
 80119be:	f8d6 3818 	ldr.w	r3, [r6, #2072]	; 0x818
 80119c2:	40eb      	lsrs	r3, r5
 80119c4:	07d8      	lsls	r0, r3, #31
 80119c6:	d529      	bpl.n	8011a1c <dcd_int_handler+0x300>
      if ( epin[n].diepint & DIEPINT_XFRC )
 80119c8:	68a3      	ldr	r3, [r4, #8]
 80119ca:	07d9      	lsls	r1, r3, #31
 80119cc:	d51b      	bpl.n	8011a06 <dcd_int_handler+0x2ea>
        epin[n].diepint = DIEPINT_XFRC;
 80119ce:	2301      	movs	r3, #1
 80119d0:	60a3      	str	r3, [r4, #8]
        if ( (n == 0) && ep0_pending[TUSB_DIR_IN] )
 80119d2:	b925      	cbnz	r5, 80119de <dcd_int_handler+0x2c2>
 80119d4:	4bc5      	ldr	r3, [pc, #788]	; (8011cec <dcd_int_handler+0x5d0>)
 80119d6:	885b      	ldrh	r3, [r3, #2]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f040 8239 	bne.w	8011e50 <dcd_int_handler+0x734>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80119de:	2300      	movs	r3, #0
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 80119e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
  dcd_event_handler(&event, in_isr);
 80119e4:	a805      	add	r0, sp, #20
 80119e6:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80119e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80119ec:	9b01      	ldr	r3, [sp, #4]
  event.xfer_complete.ep_addr = ep_addr;
 80119ee:	f88d 2018 	strb.w	r2, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80119f2:	f88d 3014 	strb.w	r3, [sp, #20]
 80119f6:	f8b8 3018 	ldrh.w	r3, [r8, #24]
  event.xfer_complete.len     = xferred_bytes;
 80119fa:	9307      	str	r3, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80119fc:	2307      	movs	r3, #7
 80119fe:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011a02:	f7fe ff9d 	bl	8010940 <dcd_event_handler>
      if ( (epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n)) )
 8011a06:	68a3      	ldr	r3, [r4, #8]
 8011a08:	061a      	lsls	r2, r3, #24
 8011a0a:	d507      	bpl.n	8011a1c <dcd_int_handler+0x300>
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8011a12:	40aa      	lsls	r2, r5
 8011a14:	421a      	tst	r2, r3
 8011a16:	9202      	str	r2, [sp, #8]
 8011a18:	f040 81c8 	bne.w	8011dac <dcd_int_handler+0x690>
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011a1c:	3501      	adds	r5, #1
 8011a1e:	3420      	adds	r4, #32
 8011a20:	f108 0820 	add.w	r8, r8, #32
 8011a24:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8011a28:	b2ea      	uxtb	r2, r5
 8011a2a:	4592      	cmp	sl, r2
 8011a2c:	d8c7      	bhi.n	80119be <dcd_int_handler+0x2a2>
}
 8011a2e:	b009      	add	sp, #36	; 0x24
 8011a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dwc2_regs_t * dwc2     = DWC2_REG(rhport);
 8011a34:	eb06 030a 	add.w	r3, r6, sl
 8011a38:	f856 600a 	ldr.w	r6, [r6, sl]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8011a3c:	f893 a008 	ldrb.w	sl, [r3, #8]
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011a40:	f1ba 0f00 	cmp.w	sl, #0
 8011a44:	f43f af51 	beq.w	80118ea <dcd_int_handler+0x1ce>
 8011a48:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8011cf8 <dcd_int_handler+0x5dc>
 8011a4c:	2400      	movs	r4, #0
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8011a4e:	9d01      	ldr	r5, [sp, #4]
 8011a50:	46c8      	mov	r8, r9
 8011a52:	46a3      	mov	fp, r4
 8011a54:	9702      	str	r7, [sp, #8]
 8011a56:	e042      	b.n	8011ade <dcd_int_handler+0x3c2>
 8011a58:	6c31      	ldr	r1, [r6, #64]	; 0x40
        uint32_t clear_flag = DOEPINT_STUP;
 8011a5a:	f248 0208 	movw	r2, #32776	; 0x8008
 8011a5e:	4ba4      	ldr	r3, [pc, #656]	; (8011cf0 <dcd_int_handler+0x5d4>)
 8011a60:	4299      	cmp	r1, r3
 8011a62:	bf98      	it	ls
 8011a64:	2208      	movls	r2, #8
        epout->doepint = clear_flag;
 8011a66:	19f1      	adds	r1, r6, r7
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011a68:	4ba2      	ldr	r3, [pc, #648]	; (8011cf4 <dcd_int_handler+0x5d8>)
 8011a6a:	f8c1 2b08 	str.w	r2, [r1, #2824]	; 0xb08
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f88d 5014 	strb.w	r5, [sp, #20]
 8011a74:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011a78:	2206      	movs	r2, #6
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011a7e:	ab08      	add	r3, sp, #32
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011a80:	f88d 2015 	strb.w	r2, [sp, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011a84:	e903 0003 	stmdb	r3, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8011a88:	2101      	movs	r1, #1
 8011a8a:	a805      	add	r0, sp, #20
 8011a8c:	f7fe ff58 	bl	8010940 <dcd_event_handler>
      if ( epout->doepint & DOEPINT_XFRC )
 8011a90:	19f3      	adds	r3, r6, r7
 8011a92:	f8d3 2b08 	ldr.w	r2, [r3, #2824]	; 0xb08
 8011a96:	07d7      	lsls	r7, r2, #31
 8011a98:	d519      	bpl.n	8011ace <dcd_int_handler+0x3b2>
        epout->doepint = DOEPINT_XFRC;
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        if ( (n == 0) && ep0_pending[TUSB_DIR_OUT] )
 8011aa0:	b924      	cbnz	r4, 8011aac <dcd_int_handler+0x390>
 8011aa2:	4b92      	ldr	r3, [pc, #584]	; (8011cec <dcd_int_handler+0x5d0>)
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	f040 81f5 	bne.w	8011e96 <dcd_int_handler+0x77a>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011aac:	2300      	movs	r3, #0
  dcd_event_handler(&event, in_isr);
 8011aae:	a805      	add	r0, sp, #20
 8011ab0:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011ab2:	e9cd 3305 	strd	r3, r3, [sp, #20]
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8011ab6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  event.xfer_complete.ep_addr = ep_addr;
 8011aba:	f88d b018 	strb.w	fp, [sp, #24]
  event.xfer_complete.len     = xferred_bytes;
 8011abe:	9307      	str	r3, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011ac0:	2307      	movs	r3, #7
 8011ac2:	f88d 5014 	strb.w	r5, [sp, #20]
 8011ac6:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011aca:	f7fe ff39 	bl	8010940 <dcd_event_handler>
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011ace:	3401      	adds	r4, #1
 8011ad0:	f108 0820 	add.w	r8, r8, #32
 8011ad4:	fa5f fb84 	uxtb.w	fp, r4
 8011ad8:	45da      	cmp	sl, fp
 8011ada:	f240 80ff 	bls.w	8011cdc <dcd_int_handler+0x5c0>
    if ( dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n) )
 8011ade:	f8d6 3818 	ldr.w	r3, [r6, #2072]	; 0x818
 8011ae2:	f104 0210 	add.w	r2, r4, #16
 8011ae6:	40d3      	lsrs	r3, r2
 8011ae8:	07d8      	lsls	r0, r3, #31
 8011aea:	d5f0      	bpl.n	8011ace <dcd_int_handler+0x3b2>
      uint32_t const doepint = epout->doepint;
 8011aec:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8011af0:	0167      	lsls	r7, r4, #5
 8011af2:	f8d3 2b08 	ldr.w	r2, [r3, #2824]	; 0xb08
      if ( doepint & DOEPINT_STUP )
 8011af6:	0711      	lsls	r1, r2, #28
 8011af8:	d5ca      	bpl.n	8011a90 <dcd_int_handler+0x374>
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8011afa:	0413      	lsls	r3, r2, #16
 8011afc:	d4ac      	bmi.n	8011a58 <dcd_int_handler+0x33c>
        uint32_t clear_flag = DOEPINT_STUP;
 8011afe:	2208      	movs	r2, #8
 8011b00:	e7b1      	b.n	8011a66 <dcd_int_handler+0x34a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8011b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011b06:	a805      	add	r0, sp, #20
  dcd_event_handler(&event, in_isr);
 8011b08:	2101      	movs	r1, #1
 8011b0a:	6163      	str	r3, [r4, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	9305      	str	r3, [sp, #20]
 8011b10:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011b14:	9b01      	ldr	r3, [sp, #4]
 8011b16:	f88d 3014 	strb.w	r3, [sp, #20]
 8011b1a:	2304      	movs	r3, #4
 8011b1c:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011b20:	f7fe ff0e 	bl	8010940 <dcd_event_handler>
  if(int_status & GINTSTS_WKUINT)
 8011b24:	2f00      	cmp	r7, #0
 8011b26:	f6bf ae32 	bge.w	801178e <dcd_int_handler+0x72>
    dwc2->gintsts = GINTSTS_WKUINT;
 8011b2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011b2e:	a805      	add	r0, sp, #20
  dcd_event_handler(&event, in_isr);
 8011b30:	2101      	movs	r1, #1
 8011b32:	6163      	str	r3, [r4, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011b34:	2300      	movs	r3, #0
 8011b36:	9305      	str	r3, [sp, #20]
 8011b38:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011b3c:	9b01      	ldr	r3, [sp, #4]
 8011b3e:	f88d 3014 	strb.w	r3, [sp, #20]
 8011b42:	2305      	movs	r3, #5
 8011b44:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011b48:	f7fe fefa 	bl	8010940 <dcd_event_handler>
}
 8011b4c:	e61f      	b.n	801178e <dcd_int_handler+0x72>
    dwc2->gintsts = GINTSTS_USBRST;
 8011b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8011b52:	7a15      	ldrb	r5, [r2, #8]
  tu_memclr(xfer_status, sizeof(xfer_status));
 8011b54:	2100      	movs	r1, #0
 8011b56:	f44f 7290 	mov.w	r2, #288	; 0x120
    dwc2->gintsts = GINTSTS_USBRST;
 8011b5a:	6163      	str	r3, [r4, #20]
  tu_memclr(xfer_status, sizeof(xfer_status));
 8011b5c:	4866      	ldr	r0, [pc, #408]	; (8011cf8 <dcd_int_handler+0x5dc>)
 8011b5e:	f000 fb7c 	bl	801225a <memset>
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8011b62:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
  _out_ep_closed = false;
 8011b66:	4a65      	ldr	r2, [pc, #404]	; (8011cfc <dcd_int_handler+0x5e0>)
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8011b68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011b6c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  _out_ep_closed = false;
 8011b70:	2300      	movs	r3, #0
 8011b72:	7013      	strb	r3, [r2, #0]
  _sof_en = false;
 8011b74:	4a62      	ldr	r2, [pc, #392]	; (8011d00 <dcd_int_handler+0x5e4>)
 8011b76:	7013      	strb	r3, [r2, #0]
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011b78:	2d00      	cmp	r5, #0
 8011b7a:	d07d      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011b7c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011b80:	2d01      	cmp	r5, #1
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011b86:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011b8a:	d075      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011b8c:	f8d4 3b20 	ldr.w	r3, [r4, #2848]	; 0xb20
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011b90:	2d02      	cmp	r5, #2
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011b96:	f8c4 3b20 	str.w	r3, [r4, #2848]	; 0xb20
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011b9a:	d06d      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011b9c:	f8d4 3b40 	ldr.w	r3, [r4, #2880]	; 0xb40
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011ba0:	2d03      	cmp	r5, #3
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011ba6:	f8c4 3b40 	str.w	r3, [r4, #2880]	; 0xb40
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011baa:	d065      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bac:	f8d4 3b60 	ldr.w	r3, [r4, #2912]	; 0xb60
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bb0:	2d04      	cmp	r5, #4
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bb6:	f8c4 3b60 	str.w	r3, [r4, #2912]	; 0xb60
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bba:	d05d      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bbc:	f8d4 3b80 	ldr.w	r3, [r4, #2944]	; 0xb80
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bc0:	2d05      	cmp	r5, #5
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bc6:	f8c4 3b80 	str.w	r3, [r4, #2944]	; 0xb80
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bca:	d055      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bcc:	f8d4 3ba0 	ldr.w	r3, [r4, #2976]	; 0xba0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bd0:	2d06      	cmp	r5, #6
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bd6:	f8c4 3ba0 	str.w	r3, [r4, #2976]	; 0xba0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bda:	d04d      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bdc:	f8d4 3bc0 	ldr.w	r3, [r4, #3008]	; 0xbc0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011be0:	2d07      	cmp	r5, #7
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011be6:	f8c4 3bc0 	str.w	r3, [r4, #3008]	; 0xbc0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bea:	d045      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bec:	f8d4 3be0 	ldr.w	r3, [r4, #3040]	; 0xbe0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bf0:	2d08      	cmp	r5, #8
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bf6:	f8c4 3be0 	str.w	r3, [r4, #3040]	; 0xbe0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011bfa:	d03d      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011bfc:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c00:	2d09      	cmp	r5, #9
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c06:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c0a:	d035      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c0c:	f8d4 3c20 	ldr.w	r3, [r4, #3104]	; 0xc20
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c10:	2d0a      	cmp	r5, #10
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c16:	f8c4 3c20 	str.w	r3, [r4, #3104]	; 0xc20
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c1a:	d02d      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c1c:	f8d4 3c40 	ldr.w	r3, [r4, #3136]	; 0xc40
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c20:	2d0b      	cmp	r5, #11
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c26:	f8c4 3c40 	str.w	r3, [r4, #3136]	; 0xc40
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c2a:	d025      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c2c:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c30:	2d0c      	cmp	r5, #12
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c36:	f8c4 3c60 	str.w	r3, [r4, #3168]	; 0xc60
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c3a:	d01d      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c3c:	f8d4 3c80 	ldr.w	r3, [r4, #3200]	; 0xc80
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c40:	2d0d      	cmp	r5, #13
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c46:	f8c4 3c80 	str.w	r3, [r4, #3200]	; 0xc80
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c4a:	d015      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c4c:	f8d4 3ca0 	ldr.w	r3, [r4, #3232]	; 0xca0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c50:	2d0e      	cmp	r5, #14
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c56:	f8c4 3ca0 	str.w	r3, [r4, #3232]	; 0xca0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c5a:	d00d      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c5c:	f8d4 3cc0 	ldr.w	r3, [r4, #3264]	; 0xcc0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c60:	2d0f      	cmp	r5, #15
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c66:	f8c4 3cc0 	str.w	r3, [r4, #3264]	; 0xcc0
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011c6a:	d005      	beq.n	8011c78 <dcd_int_handler+0x55c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8011c6c:	f8d4 3ce0 	ldr.w	r3, [r4, #3296]	; 0xce0
 8011c70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c74:	f8c4 3ce0 	str.w	r3, [r4, #3296]	; 0xce0
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011c78:	eb06 030a 	add.w	r3, r6, sl
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8011c7c:	f105 0210 	add.w	r2, r5, #16
  dwc2->doepmsk  = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8011c80:	2109      	movs	r1, #9
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8011c82:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011c86:	68db      	ldr	r3, [r3, #12]
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8011c88:	b2d2      	uxtb	r2, r2
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8011c8a:	f8c4 081c 	str.w	r0, [r4, #2076]	; 0x81c
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011c8e:	089b      	lsrs	r3, r3, #2
  dwc2->doepmsk  = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8011c90:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  return 15 + 2*(max_ep_size/4) + 2*ep_count;
 8011c94:	0052      	lsls	r2, r2, #1
  dwc2->diepmsk  = DIEPMSK_TOM   | DIEPMSK_XFRCM;
 8011c96:	f8c4 1810 	str.w	r1, [r4, #2064]	; 0x810
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011c9a:	3b10      	subs	r3, #16
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8011c9c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8011cf8 <dcd_int_handler+0x5dc>
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8011ca0:	320f      	adds	r2, #15
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8011ca6:	6262      	str	r2, [r4, #36]	; 0x24
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8011ca8:	2240      	movs	r2, #64	; 0x40
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size/4 - _allocated_fifo_words_tx);
 8011caa:	62a3      	str	r3, [r4, #40]	; 0x28
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8011cac:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8011cb0:	f8a9 200a 	strh.w	r2, [r9, #10]
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8011cb4:	f023 0303 	bic.w	r3, r3, #3
 8011cb8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8011cbc:	f8d4 3b10 	ldr.w	r3, [r4, #2832]	; 0xb10
 8011cc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011cc4:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8011cc8:	69a3      	ldr	r3, [r4, #24]
  xfer_status[0][TUSB_DIR_IN ].max_size = 64;
 8011cca:	f8a9 201a 	strh.w	r2, [r9, #26]
  _allocated_fifo_words_tx = 16;
 8011cce:	2210      	movs	r2, #16
  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8011cd0:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8011cd4:	61a3      	str	r3, [r4, #24]
  _allocated_fifo_words_tx = 16;
 8011cd6:	4b0b      	ldr	r3, [pc, #44]	; (8011d04 <dcd_int_handler+0x5e8>)
 8011cd8:	801a      	strh	r2, [r3, #0]
}
 8011cda:	e531      	b.n	8011740 <dcd_int_handler+0x24>
  if(int_status & GINTSTS_IEPINT)
 8011cdc:	9f02      	ldr	r7, [sp, #8]
 8011cde:	037b      	lsls	r3, r7, #13
 8011ce0:	f57f ae03 	bpl.w	80118ea <dcd_int_handler+0x1ce>
  dwc2_epin_t* epin      = dwc2->epin;
 8011ce4:	f506 6410 	add.w	r4, r6, #2304	; 0x900
  for ( uint8_t n = 0; n < ep_count; n++ )
 8011ce8:	e661      	b.n	80119ae <dcd_int_handler+0x292>
 8011cea:	bf00      	nop
 8011cec:	24002c6c 	.word	0x24002c6c
 8011cf0:	4f543009 	.word	0x4f543009
 8011cf4:	24002c60 	.word	0x24002c60
 8011cf8:	24002c70 	.word	0x24002c70
 8011cfc:	24002c5e 	.word	0x24002c5e
 8011d00:	24002c68 	.word	0x24002c68
 8011d04:	24002c5c 	.word	0x24002c5c
  while(full_words--)
 8011d08:	ea5f 0098 	movs.w	r0, r8, lsr #2
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8011d0c:	f853 e009 	ldr.w	lr, [r3, r9]
  while(full_words--)
 8011d10:	f000 810f 	beq.w	8011f32 <dcd_int_handler+0x816>
 8011d14:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8011d18:	4672      	mov	r2, lr
 8011d1a:	f504 5c80 	add.w	ip, r4, #4096	; 0x1000
    tu_unaligned_write32(dst, *rx_fifo);
 8011d1e:	f8dc 1000 	ldr.w	r1, [ip]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8011d22:	f842 1b04 	str.w	r1, [r2], #4
  while(full_words--)
 8011d26:	4282      	cmp	r2, r0
 8011d28:	d1f9      	bne.n	8011d1e <dcd_int_handler+0x602>
  if ( bytes_rem != 0 )
 8011d2a:	f018 0103 	ands.w	r1, r8, #3
  uint8_t const bytes_rem = len & 0x03;
 8011d2e:	fa5f fc88 	uxtb.w	ip, r8
  if ( bytes_rem != 0 )
 8011d32:	d010      	beq.n	8011d56 <dcd_int_handler+0x63a>
    uint32_t const tmp = *rx_fifo;
 8011d34:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    if ( bytes_rem > 1 ) dst[1] = tu_u32_byte1(tmp);
 8011d38:	f01c 0f02 	tst.w	ip, #2
    uint32_t const tmp = *rx_fifo;
 8011d3c:	6812      	ldr	r2, [r2, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8011d3e:	7002      	strb	r2, [r0, #0]
    if ( bytes_rem > 1 ) dst[1] = tu_u32_byte1(tmp);
 8011d40:	d003      	beq.n	8011d4a <dcd_int_handler+0x62e>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8011d42:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8011d46:	f880 c001 	strb.w	ip, [r0, #1]
    if ( bytes_rem > 2 ) dst[2] = tu_u32_byte2(tmp);
 8011d4a:	2903      	cmp	r1, #3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8011d4c:	bf04      	itt	eq
 8011d4e:	0c12      	lsreq	r2, r2, #16
 8011d50:	7082      	strbeq	r2, [r0, #2]
        xfer->buffer += bcnt;
 8011d52:	f853 e009 	ldr.w	lr, [r3, r9]
 8011d56:	eb0e 0208 	add.w	r2, lr, r8
 8011d5a:	f843 2009 	str.w	r2, [r3, r9]
 8011d5e:	e5ec      	b.n	801193a <dcd_int_handler+0x21e>
        speed = TUSB_SPEED_HIGH;
 8011d60:	2302      	movs	r3, #2
 8011d62:	e4ff      	b.n	8011764 <dcd_int_handler+0x48>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011d64:	2300      	movs	r3, #0
 8011d66:	a805      	add	r0, sp, #20
  dcd_event_handler(&event, in_isr);
 8011d68:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011d6a:	9305      	str	r3, [sp, #20]
 8011d6c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011d70:	9b01      	ldr	r3, [sp, #4]
 8011d72:	f88d 3014 	strb.w	r3, [sp, #20]
 8011d76:	2302      	movs	r3, #2
 8011d78:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011d7c:	f7fe fde0 	bl	8010940 <dcd_event_handler>
}
 8011d80:	e50b      	b.n	801179a <dcd_int_handler+0x7e>
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 8011d82:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808

static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8011d86:	a805      	add	r0, sp, #20
 8011d88:	2200      	movs	r2, #0
  event.sof.frame_count = frame_count;
  dcd_event_handler(&event, in_isr);
 8011d8a:	2101      	movs	r1, #1
 8011d8c:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8011d90:	9002      	str	r0, [sp, #8]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8011d92:	9205      	str	r2, [sp, #20]
 8011d94:	6082      	str	r2, [r0, #8]
  event.sof.frame_count = frame_count;
 8011d96:	9306      	str	r3, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8011d98:	9b01      	ldr	r3, [sp, #4]
 8011d9a:	f88d 3014 	strb.w	r3, [sp, #20]
 8011d9e:	2303      	movs	r3, #3
 8011da0:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011da4:	f7fe fdcc 	bl	8010940 <dcd_event_handler>
}
 8011da8:	9802      	ldr	r0, [sp, #8]
 8011daa:	e505      	b.n	80117b8 <dcd_int_handler+0x9c>
        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 8011dac:	6923      	ldr	r3, [r4, #16]
 8011dae:	f3c3 4bc9 	ubfx	fp, r3, #19, #10
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 8011db2:	f1bb 0f00 	cmp.w	fp, #0
 8011db6:	d03d      	beq.n	8011e34 <dcd_int_handler+0x718>
  volatile uint32_t * tx_fifo = dwc2->fifo[fifo_num];
 8011db8:	f04f 0900 	mov.w	r9, #0
 8011dbc:	e008      	b.n	8011dd0 <dcd_int_handler+0x6b4>
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 8011dbe:	4639      	mov	r1, r7
 8011dc0:	f7fd fe24 	bl	800fa0c <tu_fifo_read_n_const_addr_full_words>
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 8011dc4:	f109 0901 	add.w	r9, r9, #1
 8011dc8:	fa1f f389 	uxth.w	r3, r9
 8011dcc:	459b      	cmp	fp, r3
 8011dce:	d931      	bls.n	8011e34 <dcd_int_handler+0x718>
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 8011dd0:	6921      	ldr	r1, [r4, #16]
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 8011dd2:	4a59      	ldr	r2, [pc, #356]	; (8011f38 <dcd_int_handler+0x81c>)
 8011dd4:	69a3      	ldr	r3, [r4, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011dd6:	b289      	uxth	r1, r1
 8011dd8:	ea02 0383 	and.w	r3, r2, r3, lsl #2
 8011ddc:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8011de0:	428a      	cmp	r2, r1
 8011de2:	bf28      	it	cs
 8011de4:	460a      	movcs	r2, r1
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d824      	bhi.n	8011e34 <dcd_int_handler+0x718>
          if ( xfer->ff )
 8011dea:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d1e5      	bne.n	8011dbe <dcd_int_handler+0x6a2>
  while(full_words--)
 8011df2:	0890      	lsrs	r0, r2, #2
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8011df4:	f8d8 c010 	ldr.w	ip, [r8, #16]
  while(full_words--)
 8011df8:	f000 8097 	beq.w	8011f2a <dcd_int_handler+0x80e>
 8011dfc:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8011e00:	4663      	mov	r3, ip
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8011e02:	f853 1b04 	ldr.w	r1, [r3], #4
 8011e06:	4283      	cmp	r3, r0
    *tx_fifo = tu_unaligned_read32(src);
 8011e08:	6039      	str	r1, [r7, #0]
  while(full_words--)
 8011e0a:	d1fa      	bne.n	8011e02 <dcd_int_handler+0x6e6>
  if ( bytes_rem )
 8011e0c:	f012 0103 	ands.w	r1, r2, #3
  uint8_t const bytes_rem = len & 0x03;
 8011e10:	fa5f fe82 	uxtb.w	lr, r2
  if ( bytes_rem )
 8011e14:	d00a      	beq.n	8011e2c <dcd_int_handler+0x710>
    if ( bytes_rem > 1 ) tmp_word |= (src[1] << 8);
 8011e16:	f01e 0f02 	tst.w	lr, #2
    uint32_t tmp_word = src[0];
 8011e1a:	7803      	ldrb	r3, [r0, #0]
    if ( bytes_rem > 1 ) tmp_word |= (src[1] << 8);
 8011e1c:	bf18      	it	ne
 8011e1e:	8803      	ldrhne	r3, [r0, #0]
    if ( bytes_rem > 2 ) tmp_word |= (src[2] << 16);
 8011e20:	2903      	cmp	r1, #3
 8011e22:	d102      	bne.n	8011e2a <dcd_int_handler+0x70e>
 8011e24:	7881      	ldrb	r1, [r0, #2]
 8011e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    *tx_fifo = tmp_word;
 8011e2a:	603b      	str	r3, [r7, #0]
            xfer->buffer += packet_size;
 8011e2c:	4462      	add	r2, ip
 8011e2e:	f8c8 2010 	str.w	r2, [r8, #16]
 8011e32:	e7c7      	b.n	8011dc4 <dcd_int_handler+0x6a8>
        if ( ((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0 )
 8011e34:	6923      	ldr	r3, [r4, #16]
 8011e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	f47f adee 	bne.w	8011a1c <dcd_int_handler+0x300>
          dwc2->diepempmsk &= ~(1 << n);
 8011e40:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8011e44:	9a02      	ldr	r2, [sp, #8]
 8011e46:	ea23 0302 	bic.w	r3, r3, r2
 8011e4a:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
 8011e4e:	e5e5      	b.n	8011a1c <dcd_int_handler+0x300>
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011e50:	9a03      	ldr	r2, [sp, #12]
    ep0_pending[dir] -= total_bytes;
 8011e52:	493a      	ldr	r1, [pc, #232]	; (8011f3c <dcd_int_handler+0x820>)
 8011e54:	8b52      	ldrh	r2, [r2, #26]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	bf28      	it	cs
 8011e5a:	461a      	movcs	r2, r3
 8011e5c:	1a9b      	subs	r3, r3, r2
 8011e5e:	804b      	strh	r3, [r1, #2]
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8011e60:	f442 2300 	orr.w	r3, r2, #524288	; 0x80000
 8011e64:	f8c6 3910 	str.w	r3, [r6, #2320]	; 0x910
    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8011e68:	f8d6 3900 	ldr.w	r3, [r6, #2304]	; 0x900
 8011e6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011e70:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011e74:	f8d6 3900 	ldr.w	r3, [r6, #2304]	; 0x900
 8011e78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011e7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011e80:	d040      	beq.n	8011f04 <dcd_int_handler+0x7e8>
    if ( total_bytes != 0 )
 8011e82:	2a00      	cmp	r2, #0
 8011e84:	f43f adbf 	beq.w	8011a06 <dcd_int_handler+0x2ea>
      dwc2->diepempmsk |= (1 << epnum);
 8011e88:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 8011e8c:	f043 0301 	orr.w	r3, r3, #1
 8011e90:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
 8011e94:	e5b7      	b.n	8011a06 <dcd_int_handler+0x2ea>
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8011e96:	f8d6 2b10 	ldr.w	r2, [r6, #2832]	; 0xb10
    ep0_pending[dir] -= total_bytes;
 8011e9a:	4928      	ldr	r1, [pc, #160]	; (8011f3c <dcd_int_handler+0x820>)
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8011e9c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8011ea0:	f8c6 2b10 	str.w	r2, [r6, #2832]	; 0xb10
 8011ea4:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	bf28      	it	cs
 8011eac:	461a      	movcs	r2, r3
    ep0_pending[dir] -= total_bytes;
 8011eae:	1a9b      	subs	r3, r3, r2
 8011eb0:	800b      	strh	r3, [r1, #0]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8011eb2:	f8d6 3b10 	ldr.w	r3, [r6, #2832]	; 0xb10
 8011eb6:	431a      	orrs	r2, r3
 8011eb8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8011ebc:	f8c6 2b10 	str.w	r2, [r6, #2832]	; 0xb10
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8011ec0:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 8011ec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ec8:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8011ecc:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 8011ed0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011ed4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011ed8:	f47f adf9 	bne.w	8011ace <dcd_int_handler+0x3b2>
 8011edc:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	f47f adf4 	bne.w	8011ace <dcd_int_handler+0x3b2>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011ee6:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8011eea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011eee:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 8011ef2:	bf14      	ite	ne
 8011ef4:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8011ef8:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8011efc:	4313      	orrs	r3, r2
 8011efe:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
 8011f02:	e5e4      	b.n	8011ace <dcd_int_handler+0x3b2>
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8011f04:	9b03      	ldr	r3, [sp, #12]
 8011f06:	7f1b      	ldrb	r3, [r3, #28]
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d1ba      	bne.n	8011e82 <dcd_int_handler+0x766>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8011f0c:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8011f10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011f14:	f8d6 3900 	ldr.w	r3, [r6, #2304]	; 0x900
 8011f18:	bf14      	ite	ne
 8011f1a:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 8011f1e:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8011f22:	430b      	orrs	r3, r1
 8011f24:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
 8011f28:	e7ab      	b.n	8011e82 <dcd_int_handler+0x766>
  while(full_words--)
 8011f2a:	4660      	mov	r0, ip
 8011f2c:	e76e      	b.n	8011e0c <dcd_int_handler+0x6f0>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++)
 8011f2e:	4613      	mov	r3, r2
 8011f30:	e4c8      	b.n	80118c4 <dcd_int_handler+0x1a8>
  while(full_words--)
 8011f32:	4670      	mov	r0, lr
 8011f34:	e6f9      	b.n	8011d2a <dcd_int_handler+0x60e>
 8011f36:	bf00      	nop
 8011f38:	0003fffc 	.word	0x0003fffc
 8011f3c:	24002c6c 	.word	0x24002c6c

08011f40 <tu_edpt_claim>:
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011f40:	7803      	ldrb	r3, [r0, #0]
 8011f42:	f013 0301 	ands.w	r3, r3, #1
 8011f46:	d110      	bne.n	8011f6a <tu_edpt_claim+0x2a>
 8011f48:	7802      	ldrb	r2, [r0, #0]
 8011f4a:	0751      	lsls	r1, r2, #29
 8011f4c:	d40b      	bmi.n	8011f66 <tu_edpt_claim+0x26>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8011f4e:	7803      	ldrb	r3, [r0, #0]
 8011f50:	f013 0301 	ands.w	r3, r3, #1
 8011f54:	d109      	bne.n	8011f6a <tu_edpt_claim+0x2a>
 8011f56:	7802      	ldrb	r2, [r0, #0]
 8011f58:	0752      	lsls	r2, r2, #29
 8011f5a:	d404      	bmi.n	8011f66 <tu_edpt_claim+0x26>
  if (available)
  {
    ep_state->claimed = 1;
 8011f5c:	7802      	ldrb	r2, [r0, #0]
 8011f5e:	2301      	movs	r3, #1
 8011f60:	f042 0204 	orr.w	r2, r2, #4
 8011f64:	7002      	strb	r2, [r0, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011f6a:	2300      	movs	r3, #0
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	4770      	bx	lr

08011f70 <tu_edpt_release>:
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011f70:	7803      	ldrb	r3, [r0, #0]
 8011f72:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8011f76:	075b      	lsls	r3, r3, #29
 8011f78:	d401      	bmi.n	8011f7e <tu_edpt_release+0xe>
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
}
 8011f7a:	4610      	mov	r0, r2
 8011f7c:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011f7e:	7803      	ldrb	r3, [r0, #0]
 8011f80:	f013 0101 	ands.w	r1, r3, #1
 8011f84:	d105      	bne.n	8011f92 <tu_edpt_release+0x22>
    ep_state->claimed = 0;
 8011f86:	7803      	ldrb	r3, [r0, #0]
 8011f88:	f361 0382 	bfi	r3, r1, #2, #1
 8011f8c:	7003      	strb	r3, [r0, #0]
}
 8011f8e:	4610      	mov	r0, r2
 8011f90:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011f92:	2200      	movs	r2, #0
}
 8011f94:	4610      	mov	r0, r2
 8011f96:	4770      	bx	lr

08011f98 <tu_edpt_validate>:
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8011f98:	78c3      	ldrb	r3, [r0, #3]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8011f9a:	8882      	ldrh	r2, [r0, #4]
 8011f9c:	f003 0003 	and.w	r0, r3, #3
 8011fa0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8011fa4:	2802      	cmp	r0, #2
 8011fa6:	d005      	beq.n	8011fb4 <tu_edpt_validate+0x1c>
 8011fa8:	2803      	cmp	r0, #3
 8011faa:	d01b      	beq.n	8011fe4 <tu_edpt_validate+0x4c>
 8011fac:	2801      	cmp	r0, #1
 8011fae:	d007      	beq.n	8011fc0 <tu_edpt_validate+0x28>
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8011fb4:	2902      	cmp	r1, #2
 8011fb6:	d01e      	beq.n	8011ff6 <tu_edpt_validate+0x5e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8011fb8:	2a40      	cmp	r2, #64	; 0x40
 8011fba:	d809      	bhi.n	8011fd0 <tu_edpt_validate+0x38>
    break;

    default: return false;
  }

  return true;
 8011fbc:	2001      	movs	r0, #1
}
 8011fbe:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8011fc0:	2902      	cmp	r1, #2
 8011fc2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8011fc6:	bf08      	it	eq
 8011fc8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
      TU_ASSERT(max_packet_size <= spec_size);
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d2f6      	bcs.n	8011fbe <tu_edpt_validate+0x26>
      TU_ASSERT(max_packet_size <= spec_size);
 8011fd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011fd4:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8011fd8:	f010 0001 	ands.w	r0, r0, #1
 8011fdc:	d0ef      	beq.n	8011fbe <tu_edpt_validate+0x26>
 8011fde:	be00      	bkpt	0x0000
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8011fe4:	2902      	cmp	r1, #2
 8011fe6:	bf0c      	ite	eq
 8011fe8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011fec:	2340      	movne	r3, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d3ee      	bcc.n	8011fd0 <tu_edpt_validate+0x38>
  return true;
 8011ff2:	2001      	movs	r0, #1
 8011ff4:	e7e3      	b.n	8011fbe <tu_edpt_validate+0x26>
        TU_ASSERT(max_packet_size == 512);
 8011ff6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8011ffa:	d0df      	beq.n	8011fbc <tu_edpt_validate+0x24>
 8011ffc:	e7e8      	b.n	8011fd0 <tu_edpt_validate+0x38>
 8011ffe:	bf00      	nop

08012000 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 8012000:	440a      	add	r2, r1

  while( p_desc < desc_end )
 8012002:	4291      	cmp	r1, r2
 8012004:	d226      	bcs.n	8012054 <tu_edpt_bind_driver+0x54>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8012006:	f891 c001 	ldrb.w	ip, [r1, #1]
 801200a:	f1bc 0f05 	cmp.w	ip, #5
 801200e:	d005      	beq.n	801201c <tu_edpt_bind_driver+0x1c>
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012010:	f891 c000 	ldrb.w	ip, [r1]
 8012014:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8012016:	428a      	cmp	r2, r1
 8012018:	d8f5      	bhi.n	8012006 <tu_edpt_bind_driver+0x6>
 801201a:	4770      	bx	lr
{
 801201c:	b500      	push	{lr}
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 801201e:	f891 c002 	ldrb.w	ip, [r1, #2]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8012022:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
 8012026:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 801202a:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801202e:	f80e 300c 	strb.w	r3, [lr, ip]
 8012032:	f891 c000 	ldrb.w	ip, [r1]
 8012036:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8012038:	428a      	cmp	r2, r1
 801203a:	d909      	bls.n	8012050 <tu_edpt_bind_driver+0x50>
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 801203c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8012040:	f1bc 0f05 	cmp.w	ip, #5
 8012044:	d0eb      	beq.n	801201e <tu_edpt_bind_driver+0x1e>
 8012046:	f891 c000 	ldrb.w	ip, [r1]
 801204a:	4461      	add	r1, ip
  while( p_desc < desc_end )
 801204c:	428a      	cmp	r2, r1
 801204e:	d8f5      	bhi.n	801203c <tu_edpt_bind_driver+0x3c>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 8012050:	f85d fb04 	ldr.w	pc, [sp], #4
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <main>:

#include "main.h"
#include "graph2d.h"

int main(void)
{
 8012058:	b500      	push	{lr}
 801205a:	f5ad 5dc2 	sub.w	sp, sp, #6208	; 0x1840
 801205e:	b087      	sub	sp, #28

	if (BSP_BOARD_Init_CM7()) BSP_Error_Handler();
 8012060:	f7ef f94e 	bl	8001300 <BSP_BOARD_Init_CM7>
 8012064:	2800      	cmp	r0, #0
 8012066:	f040 8096 	bne.w	8012196 <main+0x13e>

	BSP_LCD_Init(LCD_COLOR_MODE_RGB888, LCD_BUFFER_MODE_DOUBLE, C_BLACK, NULL);
 801206a:	2300      	movs	r3, #0
 801206c:	2102      	movs	r1, #2
 801206e:	2003      	movs	r0, #3
 8012070:	461a      	mov	r2, r3
 8012072:	f7f0 fcbb 	bl	80029ec <BSP_LCD_Init>

	// If "Menu_Button" pressed during startup than console switches into USB MSC mode (active until RESET)
	if (BSP_hinputs.buttons.btn_MENU > 0) {
 8012076:	4b49      	ldr	r3, [pc, #292]	; (801219c <main+0x144>)
 8012078:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 801207c:	b124      	cbz	r4, 8012088 <main+0x30>
		BSP_USB_Init_MSC();
 801207e:	f7f2 f87f 	bl	8004180 <BSP_USB_Init_MSC>
		while (1) BSP_USB_Task();
 8012082:	f7f2 f88b 	bl	800419c <BSP_USB_Task>
 8012086:	e7fc      	b.n	8012082 <main+0x2a>
	}

	// Initialize Backlight
	BSP_LCD_InitBackLight(10);
 8012088:	200a      	movs	r0, #10
 801208a:	f7f0 fff5 	bl	8003078 <BSP_LCD_InitBackLight>
	BSP_LCD_SetBackLight(80, 25);
 801208e:	2119      	movs	r1, #25
 8012090:	2050      	movs	r0, #80	; 0x50
 8012092:	f7f1 f81d 	bl	80030d0 <BSP_LCD_SetBackLight>

	// Load resources
	ResCtx_TypeDef resctx = {0};
 8012096:	4621      	mov	r1, r4
 8012098:	f641 0250 	movw	r2, #6224	; 0x1850
 801209c:	a802      	add	r0, sp, #8
 801209e:	f000 f8dc 	bl	801225a <memset>
	BSP_Res_Init(&resctx, 0xC0000000, 48 * 1024 * 1024);
 80120a2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80120a6:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80120aa:	a802      	add	r0, sp, #8
 80120ac:	f7f1 f93e 	bl	800332c <BSP_Res_Init>
	BSP_Res_Load(&resctx, "/_/wallpaper01.jpg", 0);
 80120b0:	4622      	mov	r2, r4
 80120b2:	493b      	ldr	r1, [pc, #236]	; (80121a0 <main+0x148>)
 80120b4:	a802      	add	r0, sp, #8
 80120b6:	f7f1 f96f 	bl	8003398 <BSP_Res_Load>

	G2D_DecodeJPEG(BSP_Res_GetAddr(&resctx, 0), BSP_Res_GetSize(&resctx, 0));
 80120ba:	4621      	mov	r1, r4
 80120bc:	a802      	add	r0, sp, #8
 80120be:	f7f1 f9bb 	bl	8003438 <BSP_Res_GetAddr>
 80120c2:	4605      	mov	r5, r0
 80120c4:	4621      	mov	r1, r4
 80120c6:	a802      	add	r0, sp, #8
 80120c8:	f7f1 f9ba 	bl	8003440 <BSP_Res_GetSize>
 80120cc:	4601      	mov	r1, r0
 80120ce:	4628      	mov	r0, r5
	G2D_DrawLastJPEG(0, 0);

	//G2D_FillFrame(&BSP_hlcd, 0, BSP_LCD_Color(C_RED, 255));

	G2D_DrawIconBlend((uint32_t)ICON_128_IMU, 10, 10, BSP_LCD_Color(C_WHITE, 200));
 80120d0:	4d34      	ldr	r5, [pc, #208]	; (80121a4 <main+0x14c>)
	G2D_DecodeJPEG(BSP_Res_GetAddr(&resctx, 0), BSP_Res_GetSize(&resctx, 0));
 80120d2:	f7f3 f8d1 	bl	8005278 <G2D_DecodeJPEG>
	G2D_DrawLastJPEG(0, 0);
 80120d6:	4621      	mov	r1, r4
 80120d8:	4620      	mov	r0, r4
 80120da:	f7f3 f8c5 	bl	8005268 <G2D_DrawLastJPEG>
	G2D_DrawIconBlend((uint32_t)ICON_128_IMU, 10, 10, BSP_LCD_Color(C_WHITE, 200));
 80120de:	21c8      	movs	r1, #200	; 0xc8
 80120e0:	682b      	ldr	r3, [r5, #0]
 80120e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80120e6:	4798      	blx	r3
 80120e8:	220a      	movs	r2, #10
 80120ea:	4603      	mov	r3, r0
 80120ec:	482e      	ldr	r0, [pc, #184]	; (80121a8 <main+0x150>)
 80120ee:	4611      	mov	r1, r2
 80120f0:	f7f3 f82e 	bl	8005150 <G2D_DrawIconBlend>

	G2D_TextBlend(0, 180, FONT_36_verdana, "MiniConsole Test Text", BSP_LCD_Color(C_WHITE, 200));
 80120f4:	21c8      	movs	r1, #200	; 0xc8
 80120f6:	682b      	ldr	r3, [r5, #0]
 80120f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80120fc:	4798      	blx	r3
 80120fe:	4601      	mov	r1, r0
 8012100:	4a2a      	ldr	r2, [pc, #168]	; (80121ac <main+0x154>)
 8012102:	4620      	mov	r0, r4
 8012104:	4b2a      	ldr	r3, [pc, #168]	; (80121b0 <main+0x158>)

	G2D_DrawFillRoundRectBlend(20, 300, 200, 60, 10, BSP_LCD_Color(C_RED, 200));
 8012106:	240a      	movs	r4, #10
	G2D_TextBlend(0, 180, FONT_36_verdana, "MiniConsole Test Text", BSP_LCD_Color(C_WHITE, 200));
 8012108:	9100      	str	r1, [sp, #0]
 801210a:	21b4      	movs	r1, #180	; 0xb4
 801210c:	f7f2 fefa 	bl	8004f04 <G2D_TextBlend>
	G2D_DrawFillRoundRectBlend(20, 300, 200, 60, 10, BSP_LCD_Color(C_RED, 200));
 8012110:	21c8      	movs	r1, #200	; 0xc8
 8012112:	682b      	ldr	r3, [r5, #0]
 8012114:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8012118:	4798      	blx	r3
 801211a:	22c8      	movs	r2, #200	; 0xc8
 801211c:	233c      	movs	r3, #60	; 0x3c
 801211e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8012122:	e9cd 4000 	strd	r4, r0, [sp]
 8012126:	2014      	movs	r0, #20
 8012128:	f7f2 fd18 	bl	8004b5c <G2D_DrawFillRoundRectBlend>
	//G2D_DrawFillRoundRect(20, 300, 200, 60, 10, BSP_LCD_Color(C_RED, 255));
	G2D_DrawRoundRect(20, 300, 200, 60, 10, BSP_LCD_Color(C_WHITE, 255));
 801212c:	21ff      	movs	r1, #255	; 0xff
 801212e:	682b      	ldr	r3, [r5, #0]
 8012130:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012134:	4798      	blx	r3
 8012136:	22c8      	movs	r2, #200	; 0xc8
 8012138:	233c      	movs	r3, #60	; 0x3c
 801213a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801213e:	e9cd 4000 	strd	r4, r0, [sp]
 8012142:	2014      	movs	r0, #20
 8012144:	f7f2 fb12 	bl	800476c <G2D_DrawRoundRect>

	G2D_DrawFillRectBlend(200, 20, 100, 100, BSP_LCD_Color(C_GREEN, 200));
 8012148:	21c8      	movs	r1, #200	; 0xc8
 801214a:	682b      	ldr	r3, [r5, #0]
 801214c:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8012150:	4798      	blx	r3
 8012152:	2364      	movs	r3, #100	; 0x64
 8012154:	4602      	mov	r2, r0
 8012156:	2114      	movs	r1, #20
 8012158:	20c8      	movs	r0, #200	; 0xc8
 801215a:	9200      	str	r2, [sp, #0]
 801215c:	461a      	mov	r2, r3
 801215e:	f7f2 f905 	bl	800436c <G2D_DrawFillRectBlend>
	//G2D_DrawFillRect(200, 20, 100, 100, BSP_LCD_Color(C_GREEN, 255));

	G2D_DrawFillCircleBlend(400, 100, 80, BSP_LCD_Color(C_BLUE, 200));
 8012162:	21c8      	movs	r1, #200	; 0xc8
 8012164:	682b      	ldr	r3, [r5, #0]
 8012166:	20ff      	movs	r0, #255	; 0xff
 8012168:	4798      	blx	r3
 801216a:	2250      	movs	r2, #80	; 0x50
 801216c:	4603      	mov	r3, r0
 801216e:	2164      	movs	r1, #100	; 0x64
 8012170:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012174:	f7f2 f9d4 	bl	8004520 <G2D_DrawFillCircleBlend>
	//G2D_DrawFillCircle(400, 100, 80, BSP_LCD_Color(C_BLUE, 255));
	G2D_DrawCircle(400, 100, 80, BSP_LCD_Color(C_WHITE, 255));
 8012178:	21ff      	movs	r1, #255	; 0xff
 801217a:	682b      	ldr	r3, [r5, #0]
 801217c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012180:	4798      	blx	r3
 8012182:	2250      	movs	r2, #80	; 0x50
 8012184:	4603      	mov	r3, r0
 8012186:	2164      	movs	r1, #100	; 0x64
 8012188:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801218c:	f7f2 f91a 	bl	80043c4 <G2D_DrawCircle>

	BSP_LCD_FrameReady();
 8012190:	f7f0 ff42 	bl	8003018 <BSP_LCD_FrameReady>


    /* Loop forever */
	for(;;);
 8012194:	e7fe      	b.n	8012194 <main+0x13c>
	if (BSP_BOARD_Init_CM7()) BSP_Error_Handler();
 8012196:	f7ef f969 	bl	800146c <BSP_Error_Handler>
 801219a:	e766      	b.n	801206a <main+0x12>
 801219c:	38000058 	.word	0x38000058
 80121a0:	08015ab4 	.word	0x08015ab4
 80121a4:	24000244 	.word	0x24000244
 80121a8:	080125f8 	.word	0x080125f8
 80121ac:	08012a84 	.word	0x08012a84
 80121b0:	08015ac8 	.word	0x08015ac8

080121b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80121b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80121ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80121b8:	f7fc fb02 	bl	800e7c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80121bc:	480c      	ldr	r0, [pc, #48]	; (80121f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80121be:	490d      	ldr	r1, [pc, #52]	; (80121f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80121c0:	4a0d      	ldr	r2, [pc, #52]	; (80121f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80121c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80121c4:	e002      	b.n	80121cc <LoopCopyDataInit>

080121c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80121c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80121c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80121ca:	3304      	adds	r3, #4

080121cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80121cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80121ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80121d0:	d3f9      	bcc.n	80121c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80121d2:	4a0a      	ldr	r2, [pc, #40]	; (80121fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80121d4:	4c0a      	ldr	r4, [pc, #40]	; (8012200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80121d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80121d8:	e001      	b.n	80121de <LoopFillZerobss>

080121da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80121da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80121dc:	3204      	adds	r2, #4

080121de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80121de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80121e0:	d3fb      	bcc.n	80121da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80121e2:	f000 f84f 	bl	8012284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80121e6:	f7ff ff37 	bl	8012058 <main>
  bx  lr
 80121ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80121ec:	24020000 	.word	0x24020000
  ldr r0, =_sdata
 80121f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80121f4:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 80121f8:	08015b28 	.word	0x08015b28
  ldr r2, =_sbss
 80121fc:	24000038 	.word	0x24000038
  ldr r4, =_ebss
 8012200:	24002d90 	.word	0x24002d90

08012204 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012204:	e7fe      	b.n	8012204 <ADC3_IRQHandler>

08012206 <memcmp>:
 8012206:	b510      	push	{r4, lr}
 8012208:	3901      	subs	r1, #1
 801220a:	4402      	add	r2, r0
 801220c:	4290      	cmp	r0, r2
 801220e:	d101      	bne.n	8012214 <memcmp+0xe>
 8012210:	2000      	movs	r0, #0
 8012212:	e005      	b.n	8012220 <memcmp+0x1a>
 8012214:	7803      	ldrb	r3, [r0, #0]
 8012216:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801221a:	42a3      	cmp	r3, r4
 801221c:	d001      	beq.n	8012222 <memcmp+0x1c>
 801221e:	1b18      	subs	r0, r3, r4
 8012220:	bd10      	pop	{r4, pc}
 8012222:	3001      	adds	r0, #1
 8012224:	e7f2      	b.n	801220c <memcmp+0x6>

08012226 <memmove>:
 8012226:	4288      	cmp	r0, r1
 8012228:	b510      	push	{r4, lr}
 801222a:	eb01 0402 	add.w	r4, r1, r2
 801222e:	d902      	bls.n	8012236 <memmove+0x10>
 8012230:	4284      	cmp	r4, r0
 8012232:	4623      	mov	r3, r4
 8012234:	d807      	bhi.n	8012246 <memmove+0x20>
 8012236:	1e43      	subs	r3, r0, #1
 8012238:	42a1      	cmp	r1, r4
 801223a:	d008      	beq.n	801224e <memmove+0x28>
 801223c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012240:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012244:	e7f8      	b.n	8012238 <memmove+0x12>
 8012246:	4402      	add	r2, r0
 8012248:	4601      	mov	r1, r0
 801224a:	428a      	cmp	r2, r1
 801224c:	d100      	bne.n	8012250 <memmove+0x2a>
 801224e:	bd10      	pop	{r4, pc}
 8012250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012254:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012258:	e7f7      	b.n	801224a <memmove+0x24>

0801225a <memset>:
 801225a:	4402      	add	r2, r0
 801225c:	4603      	mov	r3, r0
 801225e:	4293      	cmp	r3, r2
 8012260:	d100      	bne.n	8012264 <memset+0xa>
 8012262:	4770      	bx	lr
 8012264:	f803 1b01 	strb.w	r1, [r3], #1
 8012268:	e7f9      	b.n	801225e <memset+0x4>

0801226a <strchr>:
 801226a:	b2c9      	uxtb	r1, r1
 801226c:	4603      	mov	r3, r0
 801226e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012272:	b11a      	cbz	r2, 801227c <strchr+0x12>
 8012274:	428a      	cmp	r2, r1
 8012276:	d1f9      	bne.n	801226c <strchr+0x2>
 8012278:	4618      	mov	r0, r3
 801227a:	4770      	bx	lr
 801227c:	2900      	cmp	r1, #0
 801227e:	bf18      	it	ne
 8012280:	2300      	movne	r3, #0
 8012282:	e7f9      	b.n	8012278 <strchr+0xe>

08012284 <__libc_init_array>:
 8012284:	b570      	push	{r4, r5, r6, lr}
 8012286:	4d0d      	ldr	r5, [pc, #52]	; (80122bc <__libc_init_array+0x38>)
 8012288:	4c0d      	ldr	r4, [pc, #52]	; (80122c0 <__libc_init_array+0x3c>)
 801228a:	1b64      	subs	r4, r4, r5
 801228c:	10a4      	asrs	r4, r4, #2
 801228e:	2600      	movs	r6, #0
 8012290:	42a6      	cmp	r6, r4
 8012292:	d109      	bne.n	80122a8 <__libc_init_array+0x24>
 8012294:	4d0b      	ldr	r5, [pc, #44]	; (80122c4 <__libc_init_array+0x40>)
 8012296:	4c0c      	ldr	r4, [pc, #48]	; (80122c8 <__libc_init_array+0x44>)
 8012298:	f000 f9a2 	bl	80125e0 <_init>
 801229c:	1b64      	subs	r4, r4, r5
 801229e:	10a4      	asrs	r4, r4, #2
 80122a0:	2600      	movs	r6, #0
 80122a2:	42a6      	cmp	r6, r4
 80122a4:	d105      	bne.n	80122b2 <__libc_init_array+0x2e>
 80122a6:	bd70      	pop	{r4, r5, r6, pc}
 80122a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80122ac:	4798      	blx	r3
 80122ae:	3601      	adds	r6, #1
 80122b0:	e7ee      	b.n	8012290 <__libc_init_array+0xc>
 80122b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80122b6:	4798      	blx	r3
 80122b8:	3601      	adds	r6, #1
 80122ba:	e7f2      	b.n	80122a2 <__libc_init_array+0x1e>
 80122bc:	08015b20 	.word	0x08015b20
 80122c0:	08015b20 	.word	0x08015b20
 80122c4:	08015b20 	.word	0x08015b20
 80122c8:	08015b24 	.word	0x08015b24

080122cc <memcpy>:
 80122cc:	440a      	add	r2, r1
 80122ce:	4291      	cmp	r1, r2
 80122d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80122d4:	d100      	bne.n	80122d8 <memcpy+0xc>
 80122d6:	4770      	bx	lr
 80122d8:	b510      	push	{r4, lr}
 80122da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80122e2:	4291      	cmp	r1, r2
 80122e4:	d1f9      	bne.n	80122da <memcpy+0xe>
 80122e6:	bd10      	pop	{r4, pc}

080122e8 <atan2f>:
 80122e8:	f000 b800 	b.w	80122ec <__ieee754_atan2f>

080122ec <__ieee754_atan2f>:
 80122ec:	ee10 2a90 	vmov	r2, s1
 80122f0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80122f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80122f8:	b510      	push	{r4, lr}
 80122fa:	eef0 7a40 	vmov.f32	s15, s0
 80122fe:	dc06      	bgt.n	801230e <__ieee754_atan2f+0x22>
 8012300:	ee10 0a10 	vmov	r0, s0
 8012304:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012308:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801230c:	dd04      	ble.n	8012318 <__ieee754_atan2f+0x2c>
 801230e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012312:	eeb0 0a67 	vmov.f32	s0, s15
 8012316:	bd10      	pop	{r4, pc}
 8012318:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801231c:	d103      	bne.n	8012326 <__ieee754_atan2f+0x3a>
 801231e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012322:	f000 b881 	b.w	8012428 <atanf>
 8012326:	1794      	asrs	r4, r2, #30
 8012328:	f004 0402 	and.w	r4, r4, #2
 801232c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012330:	b93b      	cbnz	r3, 8012342 <__ieee754_atan2f+0x56>
 8012332:	2c02      	cmp	r4, #2
 8012334:	d05c      	beq.n	80123f0 <__ieee754_atan2f+0x104>
 8012336:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012404 <__ieee754_atan2f+0x118>
 801233a:	2c03      	cmp	r4, #3
 801233c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8012340:	e7e7      	b.n	8012312 <__ieee754_atan2f+0x26>
 8012342:	b939      	cbnz	r1, 8012354 <__ieee754_atan2f+0x68>
 8012344:	eddf 7a30 	vldr	s15, [pc, #192]	; 8012408 <__ieee754_atan2f+0x11c>
 8012348:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801240c <__ieee754_atan2f+0x120>
 801234c:	2800      	cmp	r0, #0
 801234e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8012352:	e7de      	b.n	8012312 <__ieee754_atan2f+0x26>
 8012354:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012358:	d110      	bne.n	801237c <__ieee754_atan2f+0x90>
 801235a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801235e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012362:	d107      	bne.n	8012374 <__ieee754_atan2f+0x88>
 8012364:	2c02      	cmp	r4, #2
 8012366:	d846      	bhi.n	80123f6 <__ieee754_atan2f+0x10a>
 8012368:	4b29      	ldr	r3, [pc, #164]	; (8012410 <__ieee754_atan2f+0x124>)
 801236a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801236e:	edd3 7a00 	vldr	s15, [r3]
 8012372:	e7ce      	b.n	8012312 <__ieee754_atan2f+0x26>
 8012374:	2c02      	cmp	r4, #2
 8012376:	d841      	bhi.n	80123fc <__ieee754_atan2f+0x110>
 8012378:	4b26      	ldr	r3, [pc, #152]	; (8012414 <__ieee754_atan2f+0x128>)
 801237a:	e7f6      	b.n	801236a <__ieee754_atan2f+0x7e>
 801237c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012380:	d0e0      	beq.n	8012344 <__ieee754_atan2f+0x58>
 8012382:	1a5b      	subs	r3, r3, r1
 8012384:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012388:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801238c:	da1a      	bge.n	80123c4 <__ieee754_atan2f+0xd8>
 801238e:	2a00      	cmp	r2, #0
 8012390:	da01      	bge.n	8012396 <__ieee754_atan2f+0xaa>
 8012392:	313c      	adds	r1, #60	; 0x3c
 8012394:	db19      	blt.n	80123ca <__ieee754_atan2f+0xde>
 8012396:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801239a:	f000 f919 	bl	80125d0 <fabsf>
 801239e:	f000 f843 	bl	8012428 <atanf>
 80123a2:	eef0 7a40 	vmov.f32	s15, s0
 80123a6:	2c01      	cmp	r4, #1
 80123a8:	d012      	beq.n	80123d0 <__ieee754_atan2f+0xe4>
 80123aa:	2c02      	cmp	r4, #2
 80123ac:	d017      	beq.n	80123de <__ieee754_atan2f+0xf2>
 80123ae:	2c00      	cmp	r4, #0
 80123b0:	d0af      	beq.n	8012312 <__ieee754_atan2f+0x26>
 80123b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8012418 <__ieee754_atan2f+0x12c>
 80123b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80123ba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801241c <__ieee754_atan2f+0x130>
 80123be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80123c2:	e7a6      	b.n	8012312 <__ieee754_atan2f+0x26>
 80123c4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012408 <__ieee754_atan2f+0x11c>
 80123c8:	e7ed      	b.n	80123a6 <__ieee754_atan2f+0xba>
 80123ca:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012420 <__ieee754_atan2f+0x134>
 80123ce:	e7ea      	b.n	80123a6 <__ieee754_atan2f+0xba>
 80123d0:	ee17 3a90 	vmov	r3, s15
 80123d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80123d8:	ee07 3a90 	vmov	s15, r3
 80123dc:	e799      	b.n	8012312 <__ieee754_atan2f+0x26>
 80123de:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8012418 <__ieee754_atan2f+0x12c>
 80123e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80123e6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801241c <__ieee754_atan2f+0x130>
 80123ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123ee:	e790      	b.n	8012312 <__ieee754_atan2f+0x26>
 80123f0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801241c <__ieee754_atan2f+0x130>
 80123f4:	e78d      	b.n	8012312 <__ieee754_atan2f+0x26>
 80123f6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012424 <__ieee754_atan2f+0x138>
 80123fa:	e78a      	b.n	8012312 <__ieee754_atan2f+0x26>
 80123fc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012420 <__ieee754_atan2f+0x134>
 8012400:	e787      	b.n	8012312 <__ieee754_atan2f+0x26>
 8012402:	bf00      	nop
 8012404:	c0490fdb 	.word	0xc0490fdb
 8012408:	3fc90fdb 	.word	0x3fc90fdb
 801240c:	bfc90fdb 	.word	0xbfc90fdb
 8012410:	08015ae0 	.word	0x08015ae0
 8012414:	08015aec 	.word	0x08015aec
 8012418:	33bbbd2e 	.word	0x33bbbd2e
 801241c:	40490fdb 	.word	0x40490fdb
 8012420:	00000000 	.word	0x00000000
 8012424:	3f490fdb 	.word	0x3f490fdb

08012428 <atanf>:
 8012428:	b538      	push	{r3, r4, r5, lr}
 801242a:	ee10 5a10 	vmov	r5, s0
 801242e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012432:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012436:	eef0 7a40 	vmov.f32	s15, s0
 801243a:	db0f      	blt.n	801245c <atanf+0x34>
 801243c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012440:	dd04      	ble.n	801244c <atanf+0x24>
 8012442:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012446:	eeb0 0a67 	vmov.f32	s0, s15
 801244a:	bd38      	pop	{r3, r4, r5, pc}
 801244c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012584 <atanf+0x15c>
 8012450:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8012588 <atanf+0x160>
 8012454:	2d00      	cmp	r5, #0
 8012456:	fe77 7a87 	vselgt.f32	s15, s15, s14
 801245a:	e7f4      	b.n	8012446 <atanf+0x1e>
 801245c:	4b4b      	ldr	r3, [pc, #300]	; (801258c <atanf+0x164>)
 801245e:	429c      	cmp	r4, r3
 8012460:	dc10      	bgt.n	8012484 <atanf+0x5c>
 8012462:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012466:	da0a      	bge.n	801247e <atanf+0x56>
 8012468:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012590 <atanf+0x168>
 801246c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012474:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247c:	dce3      	bgt.n	8012446 <atanf+0x1e>
 801247e:	f04f 33ff 	mov.w	r3, #4294967295
 8012482:	e013      	b.n	80124ac <atanf+0x84>
 8012484:	f000 f8a4 	bl	80125d0 <fabsf>
 8012488:	4b42      	ldr	r3, [pc, #264]	; (8012594 <atanf+0x16c>)
 801248a:	429c      	cmp	r4, r3
 801248c:	dc4f      	bgt.n	801252e <atanf+0x106>
 801248e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012492:	429c      	cmp	r4, r3
 8012494:	dc41      	bgt.n	801251a <atanf+0xf2>
 8012496:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801249a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801249e:	eea0 7a27 	vfma.f32	s14, s0, s15
 80124a2:	2300      	movs	r3, #0
 80124a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80124ac:	1c5a      	adds	r2, r3, #1
 80124ae:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80124b2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8012598 <atanf+0x170>
 80124b6:	eddf 5a39 	vldr	s11, [pc, #228]	; 801259c <atanf+0x174>
 80124ba:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80125a0 <atanf+0x178>
 80124be:	ee66 6a06 	vmul.f32	s13, s12, s12
 80124c2:	eee6 5a87 	vfma.f32	s11, s13, s14
 80124c6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80125a4 <atanf+0x17c>
 80124ca:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80124ce:	eddf 5a36 	vldr	s11, [pc, #216]	; 80125a8 <atanf+0x180>
 80124d2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80124d6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80125ac <atanf+0x184>
 80124da:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80124de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80125b0 <atanf+0x188>
 80124e2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80124e6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80125b4 <atanf+0x18c>
 80124ea:	eea6 5a87 	vfma.f32	s10, s13, s14
 80124ee:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80125b8 <atanf+0x190>
 80124f2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80124f6:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80125bc <atanf+0x194>
 80124fa:	eea7 5a26 	vfma.f32	s10, s14, s13
 80124fe:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80125c0 <atanf+0x198>
 8012502:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012506:	ee27 7a26 	vmul.f32	s14, s14, s13
 801250a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801250e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012512:	d121      	bne.n	8012558 <atanf+0x130>
 8012514:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012518:	e795      	b.n	8012446 <atanf+0x1e>
 801251a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801251e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012522:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012526:	2301      	movs	r3, #1
 8012528:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801252c:	e7be      	b.n	80124ac <atanf+0x84>
 801252e:	4b25      	ldr	r3, [pc, #148]	; (80125c4 <atanf+0x19c>)
 8012530:	429c      	cmp	r4, r3
 8012532:	dc0b      	bgt.n	801254c <atanf+0x124>
 8012534:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801253c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012540:	2302      	movs	r3, #2
 8012542:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801254a:	e7af      	b.n	80124ac <atanf+0x84>
 801254c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012550:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012554:	2303      	movs	r3, #3
 8012556:	e7a9      	b.n	80124ac <atanf+0x84>
 8012558:	4a1b      	ldr	r2, [pc, #108]	; (80125c8 <atanf+0x1a0>)
 801255a:	491c      	ldr	r1, [pc, #112]	; (80125cc <atanf+0x1a4>)
 801255c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012560:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012564:	edd3 6a00 	vldr	s13, [r3]
 8012568:	ee37 7a66 	vsub.f32	s14, s14, s13
 801256c:	2d00      	cmp	r5, #0
 801256e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012572:	edd2 7a00 	vldr	s15, [r2]
 8012576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801257a:	bfb8      	it	lt
 801257c:	eef1 7a67 	vneglt.f32	s15, s15
 8012580:	e761      	b.n	8012446 <atanf+0x1e>
 8012582:	bf00      	nop
 8012584:	3fc90fdb 	.word	0x3fc90fdb
 8012588:	bfc90fdb 	.word	0xbfc90fdb
 801258c:	3edfffff 	.word	0x3edfffff
 8012590:	7149f2ca 	.word	0x7149f2ca
 8012594:	3f97ffff 	.word	0x3f97ffff
 8012598:	3c8569d7 	.word	0x3c8569d7
 801259c:	3d4bda59 	.word	0x3d4bda59
 80125a0:	bd6ef16b 	.word	0xbd6ef16b
 80125a4:	3d886b35 	.word	0x3d886b35
 80125a8:	3dba2e6e 	.word	0x3dba2e6e
 80125ac:	3e124925 	.word	0x3e124925
 80125b0:	3eaaaaab 	.word	0x3eaaaaab
 80125b4:	bd15a221 	.word	0xbd15a221
 80125b8:	bd9d8795 	.word	0xbd9d8795
 80125bc:	bde38e38 	.word	0xbde38e38
 80125c0:	be4ccccd 	.word	0xbe4ccccd
 80125c4:	401bffff 	.word	0x401bffff
 80125c8:	08015af8 	.word	0x08015af8
 80125cc:	08015b08 	.word	0x08015b08

080125d0 <fabsf>:
 80125d0:	ee10 3a10 	vmov	r3, s0
 80125d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80125d8:	ee00 3a10 	vmov	s0, r3
 80125dc:	4770      	bx	lr
	...

080125e0 <_init>:
 80125e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125e2:	bf00      	nop
 80125e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125e6:	bc08      	pop	{r3}
 80125e8:	469e      	mov	lr, r3
 80125ea:	4770      	bx	lr

080125ec <_fini>:
 80125ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ee:	bf00      	nop
 80125f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125f2:	bc08      	pop	{r3}
 80125f4:	469e      	mov	lr, r3
 80125f6:	4770      	bx	lr
